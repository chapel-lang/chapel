# Copyright 2020-2022 Hewlett Packard Enterprise Development LP
# Copyright 2004-2019 Cray Inc.
# Other additional copyright holders may be indicated within.
#
# The entirety of this work is licensed under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
#
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ifndef CHPL_MAKE_HOME
export CHPL_MAKE_HOME=$(shell pwd)/../..
endif

COMPILER_ROOT = ..
COMPILER_SUBDIR = dyno

# disable -MMD etc because cmake already specifies it
NO_DEPEND = 1

#
# standard header
#
include $(COMPILER_ROOT)/make/Makefile.compiler.head

# get LIB_CMAKE_ARG, LIBCOMPILER_BUILD_DIR
include Makefile.include

CMAKE ?= cmake

# Get the path to where a ClangConfig.cmake might be found; used by the linters
# example --cmakedir is /usr/lib/llvm-11/lib/cmake/llvm so then the
LLVM_CMAKE_DIR  := $(shell $(CHPL_MAKE_LLVM_CONFIG) --cmakedir)
ifeq ($(LLVM_CMAKE_DIR),)
CLANG_CMAKE_DIR :=
else
CLANG_CMAKE_DIR := $(LLVM_CMAKE_DIR)/..
endif

# Figure out the sdkroot set by chplenv scripts to get cmake
# to use something consistent
CHPL_SDKROOT := $(shell $(CHPL_MAKE_PYTHON) $(CHPL_MAKE_HOME)/util/chplenv/chpl_llvm.py --sdkroot)
ifeq ($(CHPL_SDKROOT),)
SDKROOT_ARG :=
else
SDKROOT_ARG := -DCMAKE_OSX_SYSROOT=$(CHPL_SDKROOT)
endif

$(LIBCOMPILER_BUILD_DIR):
	@echo "Configuring the compiler library..."
	@mkdir -p $(LIBCOMPILER_BUILD_DIR)
	cd $(LIBCOMPILER_BUILD_DIR) && \
	  $(CMAKE) $(CHPL_MAKE_HOME)/compiler/dyno \
	    $(LIB_CMAKE_ARG) \
	    $(SDKROOT_ARG) \
	    -DCMAKE_C_COMPILER='$(CC)' \
	    -DCMAKE_C_FLAGS='$(WARN_CFLAGS)' \
	    -DCMAKE_CXX_COMPILER='$(CXX)' \
	    -DCMAKE_CXX_FLAGS='$(COMP_CXXFLAGS) $(WARN_CXXFLAGS)' \
	    -DCMAKE_EXE_LINKER_FLAGS='$(LDFLAGS)' \
	    -DCMAKE_MODULE_LINKER_FLAGS='$(LDFLAGS)' \
	    -DDYNO_CHPL_HOME='$(CHPL_MAKE_HOME)' \
	    -DDYNO_LLVM_COMP_ARGS='$(CHPL_MAKE_HOST_BUNDLED_COMPILE_ARGS) $(CHPL_MAKE_HOST_SYSTEM_COMPILE_ARGS)' \
	    -DDYNO_LLVM_LINK_ARGS='$(CHPL_MAKE_HOST_BUNDLED_LINK_ARGS) $(CHPL_MAKE_HOST_SYSTEM_LINK_ARGS)' \
	    -DDYNO_LINTERS_CLANG_CMAKE_PATH='$(CLANG_CMAKE_DIR)' \
	    -DBUILD_SHARED_LIBS=OFF

dyno-parser: $(LIBCOMPILER_BUILD_DIR) FORCE
	cd $(LIBCOMPILER_BUILD_DIR)/lib/parsing && $(CMAKE) --build . --target parser

dyno-chpldoc: $(LIBCOMPILER_BUILD_DIR) FORCE
	+cd $(LIBCOMPILER_BUILD_DIR)/tools/chpldoc && $(CMAKE) --build . --target chpldoc
	mkdir -p $(CHPL_BIN_DIR)
	cp -f $(LIBCOMPILER_BUILD_DIR)/tools/chpldoc/chpldoc $(CHPL_BIN_DIR)/chpldoc

dyno-linters: $(LIBCOMPILER_BUILD_DIR) FORCE
	+cd $(LIBCOMPILER_BUILD_DIR)/util && $(CMAKE) --build .

run-dyno-linters: dyno-linters
	@env PATH=$(LIBCOMPILER_BUILD_DIR)/util/linters:$(PATH) ./util/lint --compile-commands $(LIBCOMPILER_BUILD_DIR) --jobs=-1

dyno: $(LIBCOMPILER_BUILD_DIR) FORCE
	@echo "Making the compiler library..."
	@if [ -f $(LIBCOMPILER_BUILD_DIR)/Makefile ]; then \
	  cd $(LIBCOMPILER_BUILD_DIR) && $(MAKE) libdyno ; \
	else \
	  cd $(LIBCOMPILER_BUILD_DIR) && $(CMAKE) --build .  --target libdyno ; \
	fi

COPY_IF_DIFFERENT = $(CHPL_MAKE_PYTHON) $(CHPL_MAKE_HOME)/util/config/update-if-different --copy

dyno-docs: $(LIBCOMPILER_BUILD_DIR) FORCE
	@echo "Making the compiler library docs..."
	cd $(LIBCOMPILER_BUILD_DIR) && $(CMAKE) --build .  --target api-docs
# copy the generated doxygen output to the build directory
	@if [ -d $(LIBCOMPILER_BUILD_DIR)/doc/doxygen ]; then \
	  $(COPY_IF_DIFFERENT) $(LIBCOMPILER_BUILD_DIR)/doc/doxygen $(CHPL_MAKE_HOME)/build/doc/doxygen ; \
	fi

clean-dyno-docs: FORCE
	rm -rf $(CHPL_MAKE_HOME)/build/doc/doxygen

clobber-dyno: clean-dyno-docs FORCE
	rm -rf $(LIBCOMPILER_BUILD_DIR)

test-dyno: $(LIBCOMPILER_BUILD_DIR) FORCE
	@echo "Making and running the tests..."
	@if [ -f $(LIBCOMPILER_BUILD_DIR)/Makefile ]; then \
	  JOBSFLAG=`echo "$$MAKEFLAGS" | sed -n 's/.*\(-j\|--jobs=\) *\([0-9][0-9]*\).*/-j\2/p'` ; \
	  cd $(LIBCOMPILER_BUILD_DIR) && $(MAKE) tests && ctest $$JOBSFLAG . ; \
	else \
	  cd $(LIBCOMPILER_BUILD_DIR) && $(CMAKE) --build .  --target tests && ctest . ; \
	fi

FORCE:

#
# standard footer
#
include $(COMPILER_ROOT)/make/Makefile.compiler.foot

.NOTPARALLEL:
