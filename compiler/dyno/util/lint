#!/usr/bin/env python3

import subprocess
from pathlib import Path
from functools import partial
import sys
import multiprocessing
import itertools
from typing import Set, List


log = partial(print, file=sys.stderr)

compile_commands = None

lib_dir = Path('compiler/dyno/lib')

# What lib dirs dirs do we look in for .cpp files to check
lib_dirs = [
    'queries',
    'resolution',
    'types',
    'uast',
]

def files_changed(to='main') -> Set[Path]:
    """Return the files that are different to the `to` (local)branch"""
    def run(args):
        return subprocess.run(args, capture_output=True, text=True, check=True)

    proc = run(['git', 'diff', to, '--name-only'])
    return set(map(Path, proc.stdout.strip().split('\n')))

def check_file(filename):
    """
    Check a file for errors, returning one LintError per method that fails
    Currently logs the parsed fields and methods for each class to aid in debugging
    """
    args = ['fieldsUsed', str(filename)]
    if compile_commands:
        args.append('-p')
        args.append(str(compile_commands))

    return subprocess.run(args, check=False, capture_output=True, text=True)

def check_files(files, jobs=1) -> List[subprocess.CompletedProcess]:
    """
    Check multiple files with parallelism = `jobs`
    Repeated errors are de-duped (since things that get included can be checked multiple times)
    Failed results are those where we got an error from clang
    """
    procs = []
    with multiprocessing.Pool(jobs) as pool:
        for result in pool.imap_unordered(check_file, files):
            procs.append(result)

    return procs

def main(args):
    """Run and report errors; Exits with 0 only if no failures and no errors"""
    procs = check_files(args.files, jobs=args.jobs)

    for p in procs:
        if p.stdout:
            log(p.stdout.strip())
        if p.stderr:
            log(p.stderr.strip())

    code = any(p.returncode for p in procs)
    sys.exit(code)

if __name__ == '__main__':
    import argparse
    import os

    home = Path(os.environ['CHPL_HOME']).resolve()

    default_files = list(itertools.chain.from_iterable(
        (home / lib_dir / d).rglob('*.cpp') for d in lib_dirs
    ))

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('files', type=Path, nargs='*', help='Files to check', default=default_files)
    parser.add_argument('--jobs', type=int, default=1, help='Use -1 for nproc')
    parser.add_argument('--only-changed', action='store_true', default=False, help='Only run on files that are different than your `main` branch')
    parser.add_argument('--compile-commands', default=None, type=Path, help='Path to compile_commands.json')
    args = parser.parse_args()

    if args.jobs == -1:
        args.jobs = multiprocessing.cpu_count()

    if args.only_changed:
        dyno_includes = Path('compiler/dyno/include')
        changed_files = files_changed()
        # Check the cpp files that have changed we would check by default
        # And also include any header that changed in compiler/dyno/include
        args.files = (set(args.files) & changed_files) | {x for x in changed_files if x.is_relative_to(dyno_includes)}

        if args.files:
            print('Running on files that are different from main:')
            for f in args.files:
                print('  ', f)

    if not args.files:
        print('No files to work on')
        sys.exit(0)

    compile_commands = args.compile_commands

    main(args)
