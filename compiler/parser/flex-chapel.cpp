#line 1 "flex-chapel.cpp"

#line 3 "flex-chapel.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 182
#define YY_END_OF_BUFFER 183
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[529] =
    {   0,
        0,    0,    0,    0,  183,  181,  180,  179,  127,  171,
      121,  144,  128,  172,  152,  153,  142,  140,  150,  141,
      151,  143,  161,  161,  148,  149,  138,  103,  139,  160,
      165,  154,  155,  130,  102,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  157,  129,  158,  131,  156,
      135,    0,  109,  125,  110,    0,  147,  106,  146,  104,
      145,  105,  122,  162,  178,  177,  107,    0,  161,    0,
        0,    0,    0,  163,  132,  136,    0,  134,  119,  137,
      133,  166,  165,  112,  165,  165,    2,  165,  173,  174,

      165,  165,  165,    8,  175,  176,  165,  165,  165,  165,
      165,   21,  165,  165,  165,  165,  165,   32,  165,   35,
      165,  165,  165,  165,  165,  165,  165,  165,  165,   54,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  111,  126,
      167,  113,  168,  108,  124,  123,  162,    0,  164,    0,
      161,    0,  162,  161,    0,  161,  115,  120,  159,  116,
      166,  165,  165,  165,    0,    0,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,   29,  165,  165,
      165,  165,  165,  165,  165,   40,  165,  165,  165,   44,
      165,  165,  165,   49,   50,  165,  165,  165,  165,  165,
       57,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,   70,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,   87,  165,  165,
      165,  165,   93,   94,  165,  165,  165,  165,  165,  101,
      114,    0,  162,    0,  162,  161,  162,  161,  162,    0,
      161,    0,  165,  165,  165,  169,  170,  165,    5,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,   23,   24,  165,  165,  165,  165,
      165,  165,   33,  165,  165,  165,  165,  165,  165,   41,
      165,  165,  165,  165,  165,  165,   52,  165,   55,  165,
      165,  165,  165,  165,  165,   64,  165,  165,   67,  165,
      165,  165,  165,   73,  165,  165,  165,  165,  165,  165,
      165,   81,   82,   83,  165,   86,   88,   89,   90,  165,
      165,   95,   96,  165,  165,   99,  165,  162,  162,  162,
        0,    0,    0,  162,  165,    1,  165,    4,  165,    7,
        9,   10,   11,  165,  165,  165,  165,   16,  165,   18,
      165,  165,  165,  165,  165,  165,   28,  165,  165,  165,

      165,   37,  118,  165,   39,   42,  165,  165,   46,  165,
      165,  165,  165,  165,   59,   60,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,   84,   91,  165,   97,   98,  100,    0,  162,    0,
      162,  162,  165,    3,  165,  165,  165,  165,   15,  165,
       19,  165,   22,   26,   25,   27,   30,  165,   34,  165,
       38,   43,  165,   47,   48,   51,  165,  165,  165,   61,
      165,  165,   66,   68,   69,  165,   72,   74,   75,   76,
       77,   78,   79,  165,   85,  165,  162,  162,  165,  165,
       12,  165,   14,  165,   20,  165,   36,  165,   53,  165,

      165,   63,  165,  117,   71,  165,  165,  165,    6,   13,
       17,  165,   45,  165,   58,  165,  165,  165,  165,  165,
       56,   65,   80,   92,  165,   31,   62,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   29,   29,   31,   29,
       32,   32,   32,   32,   32,   32,   32,   32,   33,   34,
       32,   32,   32,   32,   32,   32,   32,   35,   32,   32,
       36,    1,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   32,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    1,    4,    4,
        4,    4,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    6,    6,    7,    6,    1,    1,    1,    7,    5,
        5,    5,    5,    5,    5,    6,    6,    7,    6,    6,
        6,    6,    6,    7,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[536] =
    {   0,
        0,    0,  683,  682,  746,  749,  749,  749,  719,  739,
      749,  717,   60,  732,  749,  749,   57,   58,  749,   55,
       56,   61,   71,   77,  749,  749,   88,   91,   96,    0,
        0,  749,  749,  715,  701,   70,   90,  121,   85,   80,
       95,   99,  101,  686,  111,  108,  122,  694,  128,  132,
      132,   99,  145,  689,  688,  749,   81,  749,  749,  749,
      749,  730,  749,  708,  749,  723,  706,  749,  749,  749,
      749,  749,   86,  177,  749,  749,  749,  182,  198,  186,
      214,  190,  714,  749,  704,  702,  701,  749,  749,  749,
      701,    0,    0,  749,  672,  677,    0,  671,  718,  712,

      675,   29,  676,  661,  749,  749,  660,  677,  198,  113,
      676,  664,  657,  654,  190,  662,  655,    0,  160,  209,
      666,  132,  651,  663,  665,  663,  644,  654,  206,  653,
      655,  643,  656,  647,  642,  137,  656,  223,  656,  191,
      655,  642,  653,  636,  650,  638,  226,   46,  635,  636,
       89,  643,  630,  637,  179,  626,  639,  628,  749,  655,
      749,  749,  749,  749,  749,  749,  264,  277,  749,  295,
      241,  285,  299,  303,    0,  221,  749,  749,  749,  749,
        0,  624,  633,  627,  672,  666,  627,  624,  617,  632,
      627,  628,  612,  624,  614,  612,  243,  621,  620,  609,

      622,  617,  609,  615,  605,  613,  599,  184,  609,  601,
      603,  608,  593,  602,  590,    0,  592,  603,  605,    0,
      601,  604,  584,    0,    0,  590,  597,  593,  576,  594,
        0,  581,  592,  595,  588,  573,  198,  582,  581,  577,
      570,    0,  569,  568,  574,  581,  576,  567,  576,  565,
      572,  576,  576,  565,  559,  562,  570,  609,  568,  553,
      557,  569,    0,    0,  565,  220,  557,  559,  555,    0,
      749,  306,  310,  314,  324,  320,  334,  341,  316,  219,
      331,  355,  556,  551,  554,  749,  749,  549,    0,  547,
      550,  541,  550,  539,  549,  538,  543,  544,  533,  542,

      533,  530,  533,  538,    0,    0,  531,  528,  527,  538,
      531,  540,    0,  523,  519,  515,  550,  523,  516,    0,
      523,  529,  513,  520,  519,  520,    0,  519,    0,  510,
      509,  521,  512,  511,  521,    0,  507,  511,    0,  502,
      515,  508,  499,    0,  512,  513,  508,  501,  493,  497,
      495,    0,    0,    0,  486,    0,  749,    0,    0,  494,
      493,    0,    0,  500,  499,    0,  499,  371,  375,  333,
      384,  406,  396,  410,  490,    0,  498,    0,  478,    0,
        0,    0,    0,  490,  497,  492,  489,    0,  482,    0,
      488,  484,  466,  451,  445,  450,    0,  451,  444,  441,

      455,    0,  749,  453,    0,    0,  456,  446,  449,  448,
      433,  438,  427,  439,    0,    0,  446,  427,  426,  441,
      439,  437,  417,  420,  413,  419,  425,  423,  420,  413,
      405,  398,    0,  414,    0,    0,    0,  414,  418,  422,
      426,  431,  376,    0,  377,  361,  362,  349,    0,  350,
        0,  365,    0,    0,    0,    0,    0,  364,    0,  358,
        0,    0,  350,    0,    0,    0,  353,  340,  343,    0,
      340,  320,    0,    0,  352,  322,    0,    0,    0,    0,
        0,    0,    0,  317,    0,  306,  441,  456,  283,  294,
        0,  263,    0,  266,    0,  254,    0,  250,    0,  235,

      246,    0,  233,  749,    0,  231,  233,  223,    0,    0,
        0,  179,    0,  178,    0,  168,  155,  151,  105,   43,
        0,    0,    0,    0,   36,    0,    0,  749,  500,  506,
      511,  515,  519,  522,  526
    } ;

static const flex_int16_t yy_def[536] =
    {   0,
      528,    1,    1,    1,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  529,
      530,  528,  528,  528,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  531,  528,  528,  528,  528,  528,  528,  528,
      528,  532,  530,  528,  530,  530,  530,  530,  528,  528,

      530,  530,  530,  530,  528,  528,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  533,  534,  528,  528,  528,  528,
      532,  530,  530,  530,  528,  528,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      528,  528,  528,  528,  528,  528,  528,  528,  535,  533,
      534,  528,  530,  530,  530,  528,  528,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  528,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  528,  528,  535,
      528,  528,  528,  528,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      530,  530,  528,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  528,  528,  528,
      528,  528,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  528,  528,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      530,  530,  530,  528,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,    0,  528,  528,
      528,  528,  528,  528,  528
    } ;

static const flex_int16_t yy_nxt[818] =
    {   0,
        6,    7,    8,    9,   10,   11,    6,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   25,   26,   27,   28,   29,   30,   31,   31,
       31,   31,   31,   31,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   31,   31,   42,   31,   43,
       44,   45,   46,   47,   31,   48,   49,   50,   51,   52,
       53,   31,   54,   55,   56,   57,   58,   59,   64,   67,
       71,   69,   73,   75,   74,   74,   74,   74,   76,  527,
       72,  188,   68,   70,  189,   65,   77,   78,  526,   79,
       79,   79,   79,   78,   99,   79,   79,   79,   79,  100,

       80,   81,  165,   82,  257,   83,  159,   81,  258,   79,
      166,   80,   85,   86,   81,   79,   88,   89,   84,   96,
       81,   90,   91,   82,   84,  105,   97,   98,  110,  113,
      106,  114,   83,  101,  116,  111,  261,  112,  153,  262,
      122,  115,  102,  118,  123,  103,  160,  117,  124,  119,
      120,  154,  104,  125,  127,   87,  121,  198,  128,  130,
      107,  135,  199,  129,  525,  131,  132,  133,  134,  139,
      108,  140,  218,  109,  141,  142,  235,  136,  147,  150,
      137,  143,  219,  151,  236,  144,  145,  148,  152,  237,
      146,  155,  156,  524,  149,  167,  167,  167,  167,  209,

       74,   74,   74,   74,  171,  171,  523,  168,  174,  174,
      174,  522,  170,  210,   78,  167,   79,   79,   79,   79,
      168,  521,  266,  311,  169,  170,  267,  172,   81,  172,
      520,  204,  173,  173,  173,  173,   79,  280,  194,  336,
      246,   81,  195,  205,  312,   84,  247,  206,  196,  197,
      211,  212,  372,  226,  282,  337,  213,  227,  214,  276,
      276,  215,  239,  228,  240,  241,  216,  242,   84,  254,
      519,  363,  372,  255,  282,  364,  518,  243,  517,  276,
      244,  256,  167,  167,  167,  167,  516,  298,   84,  515,
      272,  514,  272,  513,  168,  273,  273,  273,  273,  299,

      300,  512,  167,  173,  173,  173,  173,  168,  274,  511,
      274,  169,  510,  275,  275,  275,  275,  277,  277,  277,
      277,  278,  278,  278,  273,  273,  273,  273,  368,  368,
      368,  368,  275,  275,  275,  275,  509,  277,  276,  276,
      508,  278,  369,  369,  369,  369,  169,  280,  368,  371,
       84,  507,  277,  277,  277,  277,  506,  169,  276,  278,
      278,  278,  369,  169,  282,  505,  371,   84,  373,  371,
      373,  169,  277,  374,  374,  374,  374,  504,   84,  278,
      169,  169,  503,  502,  282,  501,  371,  500,   84,  368,
      368,  368,  368,  369,  369,  369,  369,  438,  499,  438,

      498,  497,  439,  439,  439,  439,  496,  495,  494,  368,
      493,  492,  491,  369,  374,  374,  374,  374,  169,  440,
      490,  440,  169,  489,  441,  441,  441,  441,  442,  442,
      442,  442,  439,  439,  439,  439,  487,  487,  487,  487,
      441,  441,  441,  441,  488,  488,  488,  488,  442,  442,
      442,  442,  442,  486,  485,  484,  487,  169,  483,  487,
      487,  487,  487,  482,  488,  169,  481,  480,  479,  442,
      478,  477,  476,  169,  488,  488,  488,  488,  169,  487,
      475,  474,  473,  472,  471,  470,  469,  468,  169,  467,
      466,  465,  464,  463,  488,  462,  461,  460,  459,  458,

      457,  456,  455,  169,   92,   92,   92,   93,  454,   93,
       93,   93,   93,  176,  176,  176,  181,  453,  181,  181,
      181,  181,  279,  279,  281,  281,  281,  452,  281,  370,
      370,  451,  370,  450,  449,  448,  447,  446,  445,  444,
      443,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,

      378,  377,  376,  375,  367,  366,  365,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      271,  270,  269,  268,  265,  264,  263,  260,  259,  253,
      252,  251,  250,  249,  248,  245,  238,  234,  233,  232,

      231,  230,  229,  225,  224,  223,  222,  221,  220,  217,
      208,  207,  203,  202,  201,  200,  193,  192,  191,  190,
      187,  186,  185,  184,  183,  182,  180,  179,  178,  177,
      175,  164,  163,  162,  161,  158,  157,  138,  126,   95,
       94,   66,   63,   62,   61,  528,   60,   60,    5,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528
    } ;

static const flex_int16_t yy_chk[818] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   13,   17,
       20,   18,   21,   22,   21,   21,   21,   21,   22,  525,
       20,  102,   17,   18,  102,   13,   22,   23,  520,   23,
       23,   23,   23,   24,   37,   24,   24,   24,   24,   37,

       23,   23,   73,   23,  148,   23,   57,   24,  148,   23,
       73,   23,   27,   27,   23,   24,   28,   28,   23,   36,
       24,   29,   29,   23,   24,   38,   36,   36,   39,   40,
       38,   40,   23,   37,   41,   39,  151,   39,   52,  151,
       43,   40,   37,   42,   43,   37,   57,   41,   43,   42,
       42,   52,   37,   43,   45,   27,   42,  110,   45,   46,
       38,   47,  110,   45,  519,   46,   46,   46,   46,   49,
       38,   49,  122,   38,   49,   49,  136,   47,   50,   51,
       47,   49,  122,   51,  136,   49,   49,   50,   51,  136,
       49,   53,   53,  518,   50,   74,   74,   74,   74,  119,

       78,   78,   78,   78,   80,   80,  517,   74,   82,   82,
       82,  516,   78,  119,   79,   74,   79,   79,   79,   79,
       74,  514,  155,  208,   74,   78,  155,   81,   79,   81,
      512,  115,   81,   81,   81,   81,   79,  176,  109,  237,
      140,   79,  109,  115,  208,   79,  140,  115,  109,  109,
      120,  120,  280,  129,  176,  237,  120,  129,  120,  171,
      171,  120,  138,  129,  138,  138,  120,  138,  176,  147,
      508,  266,  280,  147,  176,  266,  507,  138,  506,  171,
      138,  147,  167,  167,  167,  167,  503,  197,  171,  501,
      168,  500,  168,  498,  167,  168,  168,  168,  168,  197,

      197,  496,  167,  172,  172,  172,  172,  167,  170,  494,
      170,  167,  492,  170,  170,  170,  170,  173,  173,  173,
      173,  174,  174,  174,  272,  272,  272,  272,  273,  273,
      273,  273,  274,  274,  274,  274,  490,  173,  276,  276,
      489,  174,  275,  275,  275,  275,  173,  281,  273,  279,
      174,  486,  277,  277,  277,  277,  484,  273,  276,  278,
      278,  278,  275,  279,  281,  476,  370,  276,  282,  279,
      282,  275,  277,  282,  282,  282,  282,  475,  281,  278,
      370,  277,  472,  471,  281,  469,  370,  468,  278,  368,
      368,  368,  368,  369,  369,  369,  369,  371,  467,  371,

      463,  460,  371,  371,  371,  371,  458,  452,  450,  368,
      448,  447,  446,  369,  373,  373,  373,  373,  368,  372,
      445,  372,  369,  443,  372,  372,  372,  372,  374,  374,
      374,  374,  438,  438,  438,  438,  439,  439,  439,  439,
      440,  440,  440,  440,  441,  441,  441,  441,  374,  442,
      442,  442,  442,  434,  432,  431,  439,  374,  430,  487,
      487,  487,  487,  429,  441,  439,  428,  427,  426,  442,
      425,  424,  423,  441,  488,  488,  488,  488,  442,  487,
      422,  421,  420,  419,  418,  417,  414,  413,  487,  412,
      411,  410,  409,  408,  488,  407,  404,  401,  400,  399,

      398,  396,  395,  488,  529,  529,  529,  530,  394,  530,
      530,  530,  530,  531,  531,  531,  532,  393,  532,  532,
      532,  532,  533,  533,  534,  534,  534,  392,  534,  535,
      535,  391,  535,  389,  387,  386,  385,  384,  379,  377,
      375,  367,  365,  364,  361,  360,  355,  351,  350,  349,
      348,  347,  346,  345,  343,  342,  341,  340,  338,  337,
      335,  334,  333,  332,  331,  330,  328,  326,  325,  324,
      323,  322,  321,  319,  318,  317,  316,  315,  314,  312,
      311,  310,  309,  308,  307,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,

      288,  285,  284,  283,  269,  268,  267,  265,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  241,  240,
      239,  238,  236,  235,  234,  233,  232,  230,  229,  228,
      227,  226,  223,  222,  221,  219,  218,  217,  215,  214,
      213,  212,  211,  210,  209,  207,  206,  205,  204,  203,
      202,  201,  200,  199,  198,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  182,
      160,  158,  157,  156,  154,  153,  152,  150,  149,  146,
      145,  144,  143,  142,  141,  139,  137,  135,  134,  133,

      132,  131,  130,  128,  127,  126,  125,  124,  123,  121,
      117,  116,  114,  113,  112,  111,  108,  107,  104,  103,
      101,  100,   99,   98,   96,   95,   91,   87,   86,   85,
       83,   67,   66,   64,   62,   55,   54,   48,   44,   35,
       34,   14,   12,   10,    9,    5,    4,    3,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "chapel.lex"
/*
 * Copyright 2020 Hewlett Packard Enterprise Development LP
 * Copyright 2004-2019 Cray Inc.
 * Other additional copyright holders may be indicated within.
 *
 * The entirety of this work is licensed under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* These options create a re-entrant scanner that returns
     an integer to indicate the token type
     a  bison-style YYSTYPE by reference. The value will always be in yylval->pch.
     a  bison-style YYLTYPE by reference.

     i.e. int yylex(YYSTYPE*, YYLTYPE*, yyscan_t yyscanner);
*/
/*
   Provide a condition stack
   This is used to alter the handling of "{" when it appears immediately after "extern"
*/
#line 47 "chapel.lex"

#include "bison-chapel.h"
#include "docsDriver.h"
#include "parser.h"

#include <cstdio>

//
// Make sure exit is undefined:
//

#ifdef exit
#undef exit
#endif

// And redefine it to call our exit routine:
#define exit(x) clean_exit(x)

static int  processIdentifier(yyscan_t scanner, bool queried);
static int  processToken(yyscan_t scanner, int t);
static int  processStringLiteral(yyscan_t scanner, const char* q, int type);
static int  processMultilineStringLiteral(yyscan_t scanner, const char* q,
                                          int type);

static int  processExtern(yyscan_t scanner);
static int  processExternCode(yyscan_t scanner);

static void processWhitespace(yyscan_t scanner);

static int  processSingleLineComment(yyscan_t scanner);
static int  processBlockComment(yyscan_t scanner);

static void processInvalidToken(yyscan_t scanner);

static bool yy_has_state(yyscan_t scanner);

#line 869 "flex-chapel.cpp"
/* hex float literals, have decimal exponents indicating the power of 2 */

#line 872 "flex-chapel.cpp"

#define INITIAL 0
#define externmode 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 121 "chapel.lex"


#line 1164 "flex-chapel.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 529 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 749 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "chapel.lex"
return processToken(yyscanner, TALIGN);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 124 "chapel.lex"
return processToken(yyscanner, TAS);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 125 "chapel.lex"
return processToken(yyscanner, TATOMIC);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 126 "chapel.lex"
return processToken(yyscanner, TBEGIN);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 127 "chapel.lex"
return processToken(yyscanner, TBOOL);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 128 "chapel.lex"
return processToken(yyscanner, TBORROWED);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 129 "chapel.lex"
return processToken(yyscanner, TBREAK);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 130 "chapel.lex"
return processToken(yyscanner, TBY);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 131 "chapel.lex"
return processToken(yyscanner, TBYTES);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 132 "chapel.lex"
return processToken(yyscanner, TCATCH);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 133 "chapel.lex"
return processToken(yyscanner, TCLASS);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 134 "chapel.lex"
return processToken(yyscanner, TCOBEGIN);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 135 "chapel.lex"
return processToken(yyscanner, TCOFORALL);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 136 "chapel.lex"
return processToken(yyscanner, TCOMPLEX);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 137 "chapel.lex"
return processToken(yyscanner, TCONFIG);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 138 "chapel.lex"
return processToken(yyscanner, TCONST);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 139 "chapel.lex"
return processToken(yyscanner, TCONTINUE);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 140 "chapel.lex"
return processToken(yyscanner, TDEFER);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 141 "chapel.lex"
return processToken(yyscanner, TDELETE);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "chapel.lex"
return processToken(yyscanner, TDMAPPED);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "chapel.lex"
return processToken(yyscanner, TDO);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "chapel.lex"
return processToken(yyscanner, TDOMAIN);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "chapel.lex"
return processToken(yyscanner, TELSE);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 146 "chapel.lex"
return processToken(yyscanner, TENUM);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 147 "chapel.lex"
return processToken(yyscanner, TEXPORT);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 148 "chapel.lex"
return processToken(yyscanner, TEXCEPT);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 149 "chapel.lex"
return processExtern(yyscanner);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 150 "chapel.lex"
return processToken(yyscanner, TFALSE);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "chapel.lex"
return processToken(yyscanner, TFOR);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 152 "chapel.lex"
return processToken(yyscanner, TFORALL);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 153 "chapel.lex"
return processToken(yyscanner, TFORWARDING);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 154 "chapel.lex"
return processToken(yyscanner, TIF);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 155 "chapel.lex"
return processToken(yyscanner, TIMAG);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 156 "chapel.lex"
return processToken(yyscanner, TIMPORT);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 157 "chapel.lex"
return processToken(yyscanner, TIN);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 158 "chapel.lex"
return processToken(yyscanner, TINCLUDE);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 159 "chapel.lex"
return processToken(yyscanner, TINDEX);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 160 "chapel.lex"
return processToken(yyscanner, TINLINE);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 161 "chapel.lex"
return processToken(yyscanner, TINOUT);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 162 "chapel.lex"
return processToken(yyscanner, TINT);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 163 "chapel.lex"
return processToken(yyscanner, TITER);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 164 "chapel.lex"
return processToken(yyscanner, TLABEL);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 165 "chapel.lex"
return processToken(yyscanner, TLAMBDA);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 166 "chapel.lex"
return processToken(yyscanner, TLET);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 167 "chapel.lex"
return processToken(yyscanner, TLIFETIME);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 168 "chapel.lex"
return processToken(yyscanner, TLOCAL);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 169 "chapel.lex"
return processToken(yyscanner, TLOCALE);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 170 "chapel.lex"
return processToken(yyscanner, TMODULE);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 171 "chapel.lex"
return processToken(yyscanner, TNEW);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 172 "chapel.lex"
return processToken(yyscanner, TNIL);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 173 "chapel.lex"
return processToken(yyscanner, TNOINIT);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 174 "chapel.lex"
return processToken(yyscanner, TNONE);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 175 "chapel.lex"
return processToken(yyscanner, TNOTHING);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 176 "chapel.lex"
return processToken(yyscanner, TON);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 177 "chapel.lex"
return processToken(yyscanner, TONLY);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 178 "chapel.lex"
return processToken(yyscanner, TOTHERWISE);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 179 "chapel.lex"
return processToken(yyscanner, TOUT);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 180 "chapel.lex"
return processToken(yyscanner, TOVERRIDE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 181 "chapel.lex"
return processToken(yyscanner, TOWNED);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 182 "chapel.lex"
return processToken(yyscanner, TPARAM);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 183 "chapel.lex"
return processToken(yyscanner, TPRAGMA);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 184 "chapel.lex"
return processToken(yyscanner, TPRIMITIVE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 185 "chapel.lex"
return processToken(yyscanner, TPRIVATE);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 186 "chapel.lex"
return processToken(yyscanner, TPROC);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 187 "chapel.lex"
return processToken(yyscanner, TPROTOTYPE);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 188 "chapel.lex"
return processToken(yyscanner, TPUBLIC);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 189 "chapel.lex"
return processToken(yyscanner, TREAL);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 190 "chapel.lex"
return processToken(yyscanner, TRECORD);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 191 "chapel.lex"
return processToken(yyscanner, TREDUCE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 192 "chapel.lex"
return processToken(yyscanner, TREF);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 193 "chapel.lex"
return processToken(yyscanner, TREQUIRE);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 194 "chapel.lex"
return processToken(yyscanner, TRETURN);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 195 "chapel.lex"
return processToken(yyscanner, TSCAN);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 196 "chapel.lex"
return processToken(yyscanner, TSELECT);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 197 "chapel.lex"
return processToken(yyscanner, TSERIAL);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 198 "chapel.lex"
return processToken(yyscanner, TSHARED);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 199 "chapel.lex"
return processToken(yyscanner, TSINGLE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 200 "chapel.lex"
return processToken(yyscanner, TSPARSE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 201 "chapel.lex"
return processToken(yyscanner, TSTRING);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 202 "chapel.lex"
return processToken(yyscanner, TSUBDOMAIN);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 203 "chapel.lex"
return processToken(yyscanner, TSYNC);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 204 "chapel.lex"
return processToken(yyscanner, TTHEN);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 205 "chapel.lex"
return processToken(yyscanner, TTHIS);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 206 "chapel.lex"
return processToken(yyscanner, TTHROW);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 207 "chapel.lex"
return processToken(yyscanner, TTHROWS);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 208 "chapel.lex"
return processToken(yyscanner, TTRUE);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 209 "chapel.lex"
return processToken(yyscanner, TTRY);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 210 "chapel.lex"
return processToken(yyscanner, TTRYBANG);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 211 "chapel.lex"
return processToken(yyscanner, TTYPE);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 212 "chapel.lex"
return processToken(yyscanner, TUINT);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 213 "chapel.lex"
return processToken(yyscanner, TUNION);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 214 "chapel.lex"
return processToken(yyscanner, TUNMANAGED);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 215 "chapel.lex"
return processToken(yyscanner, TUSE);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 216 "chapel.lex"
return processToken(yyscanner, TVAR);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 217 "chapel.lex"
return processToken(yyscanner, TVOID);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 218 "chapel.lex"
return processToken(yyscanner, TWHEN);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 219 "chapel.lex"
return processToken(yyscanner, TWHERE);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 220 "chapel.lex"
return processToken(yyscanner, TWHILE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 221 "chapel.lex"
return processToken(yyscanner, TWITH);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 222 "chapel.lex"
return processToken(yyscanner, TYIELD);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 223 "chapel.lex"
return processToken(yyscanner, TZIP);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 225 "chapel.lex"
return processToken(yyscanner, TUNDERSCORE);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 227 "chapel.lex"
return processToken(yyscanner, TASSIGN);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 228 "chapel.lex"
return processToken(yyscanner, TASSIGNPLUS);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 229 "chapel.lex"
return processToken(yyscanner, TASSIGNMINUS);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 230 "chapel.lex"
return processToken(yyscanner, TASSIGNMULTIPLY);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 231 "chapel.lex"
return processToken(yyscanner, TASSIGNDIVIDE);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 232 "chapel.lex"
return processToken(yyscanner, TASSIGNEXP);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 233 "chapel.lex"
return processToken(yyscanner, TASSIGNMOD);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 234 "chapel.lex"
return processToken(yyscanner, TASSIGNBAND);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 235 "chapel.lex"
return processToken(yyscanner, TASSIGNBOR);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 236 "chapel.lex"
return processToken(yyscanner, TASSIGNBXOR);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 237 "chapel.lex"
return processToken(yyscanner, TASSIGNLAND);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 238 "chapel.lex"
return processToken(yyscanner, TASSIGNLOR);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 239 "chapel.lex"
return processToken(yyscanner, TASSIGNSL);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 240 "chapel.lex"
return processToken(yyscanner, TASSIGNSR);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 241 "chapel.lex"
return processToken(yyscanner, TASSIGNREDUCE);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 243 "chapel.lex"
return processToken(yyscanner, TINITEQUALS);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 245 "chapel.lex"
return processToken(yyscanner, TALIAS);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 247 "chapel.lex"
return processToken(yyscanner, TSWAP);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 249 "chapel.lex"
return processToken(yyscanner, THASH);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 250 "chapel.lex"
return processToken(yyscanner, TDOTDOT);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 251 "chapel.lex"
return processToken(yyscanner, TDOTDOTOPENHIGH);
	YY_BREAK
/* The following cases would extend the current '..<'
                    open range interval constructor to also support
                    '<..' and '<..<'.  This concept didn't win enough
                    support to merge as present, but are here in case
                    we change our minds in a future release. */
/* "<.."            return processToken(yyscanner, TDOTDOTOPENLOW); */
/* "<..<"           return processToken(yyscanner, TDOTDOTOPENBOTH); */
case 124:
YY_RULE_SETUP
#line 259 "chapel.lex"
return processToken(yyscanner, TDOTDOTDOT);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 261 "chapel.lex"
return processToken(yyscanner, TAND);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 262 "chapel.lex"
return processToken(yyscanner, TOR);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 263 "chapel.lex"
return processToken(yyscanner, TBANG);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 265 "chapel.lex"
return processToken(yyscanner, TBAND);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 266 "chapel.lex"
return processToken(yyscanner, TBOR);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 267 "chapel.lex"
return processToken(yyscanner, TBXOR);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 268 "chapel.lex"
return processToken(yyscanner, TBNOT);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 270 "chapel.lex"
return processToken(yyscanner, TSHIFTLEFT);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 271 "chapel.lex"
return processToken(yyscanner, TSHIFTRIGHT);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 273 "chapel.lex"
return processToken(yyscanner, TEQUAL);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 274 "chapel.lex"
return processToken(yyscanner, TNOTEQUAL);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 275 "chapel.lex"
return processToken(yyscanner, TLESSEQUAL);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 276 "chapel.lex"
return processToken(yyscanner, TGREATEREQUAL);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 277 "chapel.lex"
return processToken(yyscanner, TLESS);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 278 "chapel.lex"
return processToken(yyscanner, TGREATER);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 280 "chapel.lex"
return processToken(yyscanner, TPLUS);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 281 "chapel.lex"
return processToken(yyscanner, TMINUS);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 282 "chapel.lex"
return processToken(yyscanner, TSTAR);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 283 "chapel.lex"
return processToken(yyscanner, TDIVIDE);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 284 "chapel.lex"
return processToken(yyscanner, TMOD);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 285 "chapel.lex"
return processToken(yyscanner, TMINUSMINUS);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 286 "chapel.lex"
return processToken(yyscanner, TPLUSPLUS);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 288 "chapel.lex"
return processToken(yyscanner, TEXP);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 290 "chapel.lex"
return processToken(yyscanner, TCOLON);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 291 "chapel.lex"
return processToken(yyscanner, TSEMI);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 292 "chapel.lex"
return processToken(yyscanner, TCOMMA);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 293 "chapel.lex"
return processToken(yyscanner, TDOT);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 294 "chapel.lex"
return processToken(yyscanner, TLP);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 295 "chapel.lex"
return processToken(yyscanner, TRP);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 296 "chapel.lex"
return processToken(yyscanner, TLSBR);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 297 "chapel.lex"
return processToken(yyscanner, TRSBR);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 298 "chapel.lex"
return processExternCode(yyscanner);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 299 "chapel.lex"
return processToken(yyscanner, TLCBR);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 300 "chapel.lex"
return processToken(yyscanner, TRCBR);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 301 "chapel.lex"
return processToken(yyscanner, TIO);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 302 "chapel.lex"
return processToken(yyscanner, TQUESTION);
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 304 "chapel.lex"
return processToken(yyscanner, INTLITERAL);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 305 "chapel.lex"
return processToken(yyscanner, REALLITERAL);
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 307 "chapel.lex"
return processToken(yyscanner, IMAGLITERAL);
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 308 "chapel.lex"
return processToken(yyscanner, IMAGLITERAL);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 310 "chapel.lex"
return processIdentifier(yyscanner, false);
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 311 "chapel.lex"
return processIdentifier(yyscanner, true);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 313 "chapel.lex"
return processMultilineStringLiteral(yyscanner, "\"", STRINGLITERAL);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 314 "chapel.lex"
return processMultilineStringLiteral(yyscanner, "'", STRINGLITERAL);
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 315 "chapel.lex"
return processMultilineStringLiteral(yyscanner, "\"", BYTESLITERAL);
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 316 "chapel.lex"
return processMultilineStringLiteral(yyscanner, "'", BYTESLITERAL);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 317 "chapel.lex"
return processStringLiteral(yyscanner, "\"", STRINGLITERAL);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 318 "chapel.lex"
return processStringLiteral(yyscanner, "\'", STRINGLITERAL);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 319 "chapel.lex"
return processStringLiteral(yyscanner, "\"", BYTESLITERAL);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 320 "chapel.lex"
return processStringLiteral(yyscanner, "\'", BYTESLITERAL);
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 321 "chapel.lex"
return processStringLiteral(yyscanner, "\"", CSTRINGLITERAL);
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 322 "chapel.lex"
return processStringLiteral(yyscanner, "\'", CSTRINGLITERAL);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 323 "chapel.lex"
return processSingleLineComment(yyscanner);
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 324 "chapel.lex"
return processBlockComment(yyscanner);
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 326 "chapel.lex"
return processNewline(yyscanner);
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 328 "chapel.lex"
processWhitespace(yyscanner);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 329 "chapel.lex"
processInvalidToken(yyscanner);
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 331 "chapel.lex"
ECHO;
	YY_BREAK
#line 2139 "flex-chapel.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(externmode):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 529 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 529 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 528);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 331 "chapel.lex"


/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

#include "countTokens.h"
#include "misc.h"
#include "stringutil.h"

#include <cstring>
#include <cctype>
#include <string>
#include <algorithm>

static void  newString();
static void  addString(const char* str);
static void  addChar(char c);
static void  addCharEscapeNonprint(char c);
static void  addCharEscapingC(yyscan_t scanner, char c);

static int   getNextYYChar(yyscan_t scanner);

static std::string stringBuffer;

int processNewline(yyscan_t scanner) {
  YYLTYPE* yyLloc = yyget_lloc(scanner);

  chplLineno++;

  yyLloc->first_column = 0;
  yyLloc->last_column  = 0;

  yyLloc->first_line   = chplLineno;
  yyLloc->last_line    = chplLineno;

  countNewline();

  return YYLEX_NEWLINE;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

void stringBufferInit() {
  stringBuffer.clear();
}

static int  processIdentifier(yyscan_t scanner, bool queried) {
  YYSTYPE* yyLval = yyget_lval(scanner);
  int      retval = processToken(scanner, queried ? TQUERIEDIDENT : TIDENT);

  yyLval->pch = astr(yyget_text(scanner));

  return retval;
}

static int processToken(yyscan_t scanner, int t) {
  YYSTYPE* yyLval = yyget_lval(scanner);

  countToken(yyget_text(scanner));

  yyLval->pch = yyget_text(scanner);

  if (captureTokens) {
    if (t == TASSIGN ||
        t == TDOTDOTDOT) {
      captureString.push_back(' ');
    }

    if (t != TLCBR) {
      captureString.append(yyget_text(scanner));
    }

    if (t == TCOMMA  ||
        t == TPARAM  ||
        t == TZIP    ||
        t == TTYPE   ||
        t == TCONST  ||
        t == TIN     ||
        t == TINOUT  ||
        t == TOUT    ||
        t == TREF    ||
        t == TCOLON  ||
        t == TASSIGN ||
        t == TRSBR ||
        t == TBORROWED ||
        t == TUNMANAGED ||
        t == TOWNED ||
        t == TSHARED) {
      captureString.push_back(' ');
    }
  }

  // If the stack has a value then we must be in externmode.
  // Return to INITIAL
  if (yy_has_state(scanner) == true) {
    yy_pop_state(scanner);
  }

  return t;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static const char* eatStringLiteral(yyscan_t scanner, const char* startChar);
static const char* eatMultilineStringLiteral(yyscan_t scanner,
                                             const char* startChar);

static int processStringLiteral(yyscan_t scanner, const char* q, int type) {
  const char* yyText = yyget_text(scanner);
  YYSTYPE*    yyLval = yyget_lval(scanner);

  yyLval->pch = eatStringLiteral(scanner, q);

  countToken(q, yyLval->pch, q);

  if (captureTokens) {
    captureString.append(yyText);
    captureString.append(yyLval->pch);
    captureString.append(yyText);
  }

  return type;
}

static int processMultilineStringLiteral(yyscan_t scanner, const char* q,
                                         int type) {
  const char* yyText = yyget_text(scanner);
  YYSTYPE* yyLval = yyget_lval(scanner);
  yyLval->pch = eatMultilineStringLiteral(scanner, q);

  countToken(q, yyLval->pch, q);

  if (captureTokens) {
    captureString.append(yyText);
    captureString.append(yyLval->pch);
    captureString.append(yyText);
  }
  return type;
}

static const char* eatStringLiteral(yyscan_t scanner, const char* startChar) {
  char*      yyText  = yyget_text(scanner);
  YYLTYPE*   yyLloc  = yyget_lloc(scanner);
  const char startCh = *startChar;
  int        c       = 0;

  newString();

  while ((c = getNextYYChar(scanner)) != startCh && c != 0) {
    if (c == '\n') {
      ParserContext context(scanner);

      yyText[0] = '\0';
      yyerror(yyLloc, &context, "end-of-line in a string literal without a preceding backslash");
    } else {
      if (startCh == '\'' && c == '\"') {
        addCharEscapeNonprint('\\');
      }

      // \ escape ? to avoid C trigraphs
      if (c == '?')
        addCharEscapeNonprint('\\');

      addCharEscapeNonprint(c);
    }

    if (c == '\\') {
      c = getNextYYChar(scanner);

      if (c == '\n') {
        processNewline(scanner);
        addCharEscapeNonprint('n');
      } else if (c == 'u' || c == 'U') {
        ParserContext context(scanner);
        yyerror(yyLloc, &context, "universal character name not yet supported in string literal");
        addCharEscapeNonprint('t'); // add a valid escape to continue parsing
      } else if ('0' <= c && c <= '7' ) {
        ParserContext context(scanner);
        yyerror(yyLloc, &context, "octal escape not supported in string literal");
        addCharEscapeNonprint('t'); // add a valid escape to continue parsing
      } else if (c == 0) {
        // we've reached EOF
        addCharEscapeNonprint('t'); // add a valid escape to continue parsing
        break; // EOF reached, so stop
      } else {
        addCharEscapeNonprint(c);
      }
    }
  } /* eat up string */

  if (c == 0) {
    ParserContext context(scanner);

    yyerror(yyLloc, &context, "EOF in string");
  }

  return astr(stringBuffer);
}

static const char* eatMultilineStringLiteral(yyscan_t scanner,
                                             const char* startChar) {
  YYLTYPE* yyLloc    = yyget_lloc(scanner);
  const char startCh = *startChar;
  int startChCount   = 0;
  int c              = 0;

  newString();

  while (true) {
    c = getNextYYChar(scanner);

    if (c == 0) {
      break;
    }

    if (c == startCh) {
      startChCount++;
      if (startChCount == 3) {
        break;
      }
    } else {
      startChCount = 0;
    }

    addCharEscapingC(scanner, c);
  } /* eat up string */

  if (c == 0) {
    ParserContext context(scanner);

    yyerror(yyLloc, &context, "EOF in string");
  }
  // Remove two escaped quotes from the end of the string that are
  // actually part of the string closing token.  If this is a single
  // quoted string that will be two characters, but if it is a double
  // quoted string it will be four because of extra escape characters
  int removeChars = (startCh == '\'') ? 2 : 4;
  std::string sub = stringBuffer.substr(0, stringBuffer.length()-removeChars);

  return astr(sub);
}


/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static int processExtern(yyscan_t scanner) {
  const char* yyText = yyget_text(scanner);
  YYSTYPE*    yyLval = yyget_lval(scanner);

  yyLval->pch = yyget_text(scanner);

  countToken(yyText);

  if (captureTokens) {
    captureString.append(yyText);
  }

  // Push a state to record that "extern" has been seen
  yy_push_state(externmode, scanner);

  return TEXTERN;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static const char* eatExternCode(yyscan_t scanner);

// When the lexer calls this function, it has already consumed the first '{'
static int processExternCode(yyscan_t scanner) {
  YYSTYPE* yyLval = yyget_lval(scanner);

  yyLval->pch = eatExternCode(scanner);

  countToken(astr(yyLval->pch));

  if (captureTokens) {
    captureString.append(yyLval->pch);
  }

  return EXTERNCODE;
}

static const char* eatExternCode(yyscan_t scanner) {
  const int in_code                          = 0;
  const int in_single_quote                  = 1;
  const int in_single_quote_backslash        = 2;
  const int in_double_quote                  = 3;
  const int in_double_quote_backslash        = 4;
  const int in_single_line_comment           = 5;
  const int in_single_line_comment_backslash = 6;
  const int in_multi_line_comment            = 7;

  YYLTYPE*  yyLloc                           = yyget_lloc(scanner);

  int       depth                            = 1;
  int       c                                = 0;
  int       lastc                            = 0;
  int       state                            = 0;

  newString();

  // First, store the line information.
  addString("#line ");
  addString(istr(chplLineno));
  addString(" \"");
  addString(yyfilename);
  addString("\" ");
  addString("\n");

  // Now, append the C code until we get to a }.
  while (depth > 0) {
    lastc = c;
    c     = getNextYYChar(scanner);

    if (c == 0) {
      ParserContext context(scanner);

      switch (state) {
        case in_code:
          // there was no match to the {
          yyerror(yyLloc, &context, "Missing } in extern block");
          break;

        case in_single_quote:
        case in_single_quote_backslash:
          yyerror(yyLloc, &context, "Runaway \'string\' in extern block");
          break;

        case in_double_quote:
        case in_double_quote_backslash:
          yyerror(yyLloc, &context, "Runaway \"string\" in extern block");
          break;

        case in_single_line_comment:
          yyerror(yyLloc, &context, "Missing newline after extern block // comment");
          break;

        case in_multi_line_comment:
          yyerror(yyLloc, &context, "Runaway /* comment */ in extern block");
          break;
      }
      break;
    }

    addChar(c);

    if (c == '\n')
      processNewline(scanner);

    // Now update state (are we in a comment? a string?)
    switch (state) {
      case in_code:
        if (c == '\'')
          state = in_single_quote;

        else if (c == '"')
          state = in_double_quote;

        else if (lastc == '/' && c == '/')
          state = in_single_line_comment;

        else if (lastc == '/' && c == '*')
          state = in_multi_line_comment;

        else if (c == '{' )
          depth++;

        else if (c == '}' )
          depth--;

        break;

      case in_single_quote:
        if (c == '\\')
          state = in_single_quote_backslash;

        else if (c == '\'')
          state = in_code;

        break;

      case in_single_quote_backslash:
        state = in_single_quote;
        break;

      case in_double_quote:
        if (c == '\\')
          state = in_double_quote_backslash;

        else if (c == '"')
          state = in_code;

        break;

      case in_double_quote_backslash:
        state = in_double_quote;
        break;

      case in_single_line_comment:
        if (c == '\n')
          state = in_code;
        break;

      case in_single_line_comment_backslash:
        if (c == ' ' || c == '\t' || c == '\n')
          state = in_single_line_comment_backslash;

        else
          state = in_single_line_comment;

        break;

      case in_multi_line_comment:
        if (lastc == '*' && c == '/')
          state = in_code;
        break;
    }
  }

  //save the C String
  //eliminate the final '{'
  if (stringBuffer.size() >= 1)
    stringBuffer.resize(stringBuffer.size()-1);

  return astr(stringBuffer);
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static void processWhitespace(yyscan_t scanner) {
  // might eventually want to keep track of column numbers and do
  // something here
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static int processSingleLineComment(yyscan_t scanner) {
  YYSTYPE* yyLval = yyget_lval(scanner);
  int      c      = 0;

  newString();
  countCommentLine();

  // Read until the end of the line
  while ((c = getNextYYChar(scanner)) != '\n' && c != 0) {
    addChar(c);
  }

  countSingleLineComment(stringBuffer.c_str());

  if (c != 0) {
    processNewline(scanner);
  }

  yyLval->pch = astr(stringBuffer);

  return YYLEX_SINGLE_LINE_COMMENT;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static int processBlockComment(yyscan_t scanner) {
  YYSTYPE*    yyLval       = yyget_lval(scanner);
  YYLTYPE*    yyLloc       = yyget_lloc(scanner);

  int nestedStartLine = -1;
  int startLine = chplLineno;
  const char* startFilename = yyfilename;

  int         len          = strlen(fDocsCommentLabel);
  int         labelIndex   = (len >= 2) ? 2 : 0;

  int         c            = 0;
  int         d            = 1;
  bool        badComment = false;
  int         lastc        = 0;
  int         depth        = 1;
  std::string wholeComment = "";

  newString();
  countCommentLine();

  while (depth > 0) {
    int lastlastc = lastc;

    lastc = c;
    c     = getNextYYChar(scanner);

    if (c == '\n') {
      countMultiLineComment(stringBuffer.c_str());
      processNewline(scanner);

      if (fDocs && labelIndex == len) {
        wholeComment += stringBuffer;
        wholeComment += '\n';
      }

      newString();
      countCommentLine();
    } else {
      if ((labelIndex < len) && (labelIndex != -1)) {
        if (c == fDocsCommentLabel[labelIndex]) {
          labelIndex++;
        } else {
          labelIndex = -1;
        }
      }

      addChar(c);
    }

    if (len != 0 && c == fDocsCommentLabel[len - d])
      d++;
    else
      d = 1;

    if (lastc == '*' && c == '/' && lastlastc != '/') { // close comment
      if(labelIndex == len && d != len + 1) {
        depth--;
        badComment = true;
      }
      else
        depth--;
      
      d = 1;
    } else if (lastc == '/' && c == '*') { // start nested
      depth++;
      // keep track of the start of the last nested comment
      nestedStartLine = chplLineno;
    } else if (c == 0) {
      ParserContext context(scanner);

      fprintf(stderr, "%s:%d: unterminated comment started here\n",
              startFilename, startLine);
      if( nestedStartLine >= 0 ) {
        fprintf(stderr, "%s:%d: nested comment started here\n",
                startFilename, nestedStartLine);
      }
      yyerror(yyLloc, &context, "EOF in comment");
      break;
    }
  }

  // back up two to not print */ again.
  if (stringBuffer.size() >= 2)
    stringBuffer.resize(stringBuffer.size()-2);

  // back up further if the user has specified a special form of commenting
  if (len > 2 && labelIndex == len)
    stringBuffer.resize(stringBuffer.size() - (len - 2));

  // Saves the comment grabbed to the comment field of the location struct,
  // for use when the --docs flag is implemented
  if (fDocs && labelIndex == len) {
    wholeComment += stringBuffer;

    if (len > 2) {
      len          = len - 2;
      wholeComment = wholeComment.substr(len);
    }

    // Also, only need to fix indentation failure when the comment matters
    size_t location = wholeComment.find("\\x09");

    while (location != std::string::npos) {
      wholeComment = wholeComment.substr(0, location) + wholeComment.substr(location + 4);

      wholeComment.insert(location, "\t");

      location = wholeComment.find("\\x09");
    }
    if(!badComment)
      yyLval->pch = astr(wholeComment.c_str());
    else {

      fprintf(stderr, "Warning:%d: chpldoc comment not closed, ignoring comment:%s\n",
              startLine, wholeComment.c_str());
      yyLval->pch = NULL;
    }
  } else {
    yyLval->pch = NULL;
  }

  countMultiLineComment(stringBuffer.c_str());

  newString();

  return YYLEX_BLOCK_COMMENT;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static void processInvalidToken(yyscan_t scanner) {
  ParserContext context(scanner);
  YYLTYPE*      yyLloc = yyget_lloc(scanner);

  yyerror(yyLloc, &context, "Invalid token");
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static char toHex(char c);

static void newString() {
  stringBuffer.clear();
}

// Does not escape
static void addString(const char* str) {
  stringBuffer.append(str);
}

// Does not escape
static void addChar(char c) {
  stringBuffer.push_back(c);
}

// Escapes
static void addCharEscapeNonprint(char c) {
  int escape  = !(isascii(c) && isprint(c));
  //
  // If the previous character sequence was a hex escape and the current
  // character is a hex digit, escape it also.  Otherwise, conforming
  // target C compilers interpret this character as a continuation of
  // the previous hex escape.
  //
  if (isxdigit(c)) {
    size_t len = stringBuffer.length();
    if (len >= 4 && stringBuffer[len - 4] == '\\' &&
        (stringBuffer[len - 3] == 'x' || stringBuffer[len - 3] == 'X') &&
        isxdigit(stringBuffer[len - 2]) && isxdigit(stringBuffer[len - 1])) {
      escape = 1;
    }
  }

  if (escape) {
    stringBuffer.push_back('\\');
    stringBuffer.push_back('x');
    stringBuffer.push_back(toHex(((unsigned char)c) >> 4));
    stringBuffer.push_back(toHex(c & 0xf));
  } else {
    stringBuffer.push_back(c);
  }
}

// Convert C escape characters into two characters: '\\' and the other character
static void addCharEscapingC(yyscan_t scanner, char c) {
  switch (c) {
    case '\"' :
      addChar('\\');
      addChar('"');
      break;
    case '?' :
      addChar('\\');
      addChar('?');
      break;
    case '\\' :
      addChar('\\');
      addChar('\\');
      break;
    case '\a' :
      addChar('\\');
      addChar('a');
      break;
    case '\b' :
      addChar('\\');
      addChar('b');
      break;
    case '\f' :
      addChar('\\');
      addChar('f');
      break;
    case '\n' :
      addChar('\\');
      addChar('n');
      // Keep track of line numbers when a newline is found in a string
      processNewline(scanner);
      break;
    case '\r' :
      addChar('\\');
      addChar('r');
      break;
    case '\t' :
      addChar('\\');
      addChar('t');
      break;
    case '\v' :
      addChar('\\');
      addChar('v');
      break;
    default :
      addChar(c);
      break;
  }
}

// Returns the hexadecimal character for 0-16.
static char toHex(char c) {
  return (0 <= c && c <= 9) ? '0' + c : 'A' + (c - 10);
}

static int getNextYYChar(yyscan_t scanner) {
  int retval = yyinput(scanner);

  if (retval == EOF) {
    retval = 0;
  }

  return retval;
}

/************************************ | *************************************
*                                                                           *
*                                                                           *
*                                                                           *
************************************* | ************************************/

static bool yy_has_state(yyscan_t yyscanner)
{
  // This is only to suppress a compiler warning
  (void) yy_top_state;

  struct yyguts_t * yyg = (struct yyguts_t*) yyscanner;

  return yyg->yy_start_stack_ptr > 0;
}


