#line 1 "flex-chpl-lib.cpp"

#line 3 "flex-chpl-lib.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define yychpl__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer yychpl__create_buffer
#endif

#ifdef yy_delete_buffer
#define yychpl__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer yychpl__delete_buffer
#endif

#ifdef yy_scan_buffer
#define yychpl__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer yychpl__scan_buffer
#endif

#ifdef yy_scan_string
#define yychpl__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string yychpl__scan_string
#endif

#ifdef yy_scan_bytes
#define yychpl__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes yychpl__scan_bytes
#endif

#ifdef yy_init_buffer
#define yychpl__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer yychpl__init_buffer
#endif

#ifdef yy_flush_buffer
#define yychpl__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer yychpl__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define yychpl__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state yychpl__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define yychpl__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer yychpl__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define yychpl_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state yychpl_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define yychpl_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state yychpl_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define yychpl_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack yychpl_ensure_buffer_stack
#endif

#ifdef yylex
#define yychpl_lex_ALREADY_DEFINED
#else
#define yylex yychpl_lex
#endif

#ifdef yyrestart
#define yychpl_restart_ALREADY_DEFINED
#else
#define yyrestart yychpl_restart
#endif

#ifdef yylex_init
#define yychpl_lex_init_ALREADY_DEFINED
#else
#define yylex_init yychpl_lex_init
#endif

#ifdef yylex_init_extra
#define yychpl_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra yychpl_lex_init_extra
#endif

#ifdef yylex_destroy
#define yychpl_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy yychpl_lex_destroy
#endif

#ifdef yyget_debug
#define yychpl_get_debug_ALREADY_DEFINED
#else
#define yyget_debug yychpl_get_debug
#endif

#ifdef yyset_debug
#define yychpl_set_debug_ALREADY_DEFINED
#else
#define yyset_debug yychpl_set_debug
#endif

#ifdef yyget_extra
#define yychpl_get_extra_ALREADY_DEFINED
#else
#define yyget_extra yychpl_get_extra
#endif

#ifdef yyset_extra
#define yychpl_set_extra_ALREADY_DEFINED
#else
#define yyset_extra yychpl_set_extra
#endif

#ifdef yyget_in
#define yychpl_get_in_ALREADY_DEFINED
#else
#define yyget_in yychpl_get_in
#endif

#ifdef yyset_in
#define yychpl_set_in_ALREADY_DEFINED
#else
#define yyset_in yychpl_set_in
#endif

#ifdef yyget_out
#define yychpl_get_out_ALREADY_DEFINED
#else
#define yyget_out yychpl_get_out
#endif

#ifdef yyset_out
#define yychpl_set_out_ALREADY_DEFINED
#else
#define yyset_out yychpl_set_out
#endif

#ifdef yyget_leng
#define yychpl_get_leng_ALREADY_DEFINED
#else
#define yyget_leng yychpl_get_leng
#endif

#ifdef yyget_text
#define yychpl_get_text_ALREADY_DEFINED
#else
#define yyget_text yychpl_get_text
#endif

#ifdef yyget_lineno
#define yychpl_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno yychpl_get_lineno
#endif

#ifdef yyset_lineno
#define yychpl_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno yychpl_set_lineno
#endif

#ifdef yyget_column
#define yychpl_get_column_ALREADY_DEFINED
#else
#define yyget_column yychpl_get_column
#endif

#ifdef yyset_column
#define yychpl_set_column_ALREADY_DEFINED
#else
#define yyset_column yychpl_set_column
#endif

#ifdef yywrap
#define yychpl_wrap_ALREADY_DEFINED
#else
#define yywrap yychpl_wrap
#endif

#ifdef yyget_lval
#define yychpl_get_lval_ALREADY_DEFINED
#else
#define yyget_lval yychpl_get_lval
#endif

#ifdef yyset_lval
#define yychpl_set_lval_ALREADY_DEFINED
#else
#define yyset_lval yychpl_set_lval
#endif

#ifdef yyget_lloc
#define yychpl_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yychpl_get_lloc
#endif

#ifdef yyset_lloc
#define yychpl_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yychpl_set_lloc
#endif

#ifdef yyalloc
#define yychpl_alloc_ALREADY_DEFINED
#else
#define yyalloc yychpl_alloc
#endif

#ifdef yyrealloc
#define yychpl_realloc_ALREADY_DEFINED
#else
#define yyrealloc yychpl_realloc
#endif

#ifdef yyfree
#define yychpl_free_ALREADY_DEFINED
#else
#define yyfree yychpl_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yychpl_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 189
#define YY_END_OF_BUFFER 190
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[574] =
    {   0,
        0,    0,    0,    0,  190,  188,  187,  186,  135,  178,
      129,  152,  136,  179,  160,  161,  150,  148,  158,  149,
      159,  151,  168,  168,  156,  157,  146,  111,  147,  167,
      188,  172,  162,  163,  138,  110,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  165,  137,  166,  139,
      164,  143,    0,  117,  133,  118,    0,  155,  114,  154,
      112,  153,  113,  130,  169,  185,  184,  115,    0,  168,
        0,    0,    0,    0,  170,  140,  144,  142,  127,  145,
      141,  173,    0,  172,  120,  172,  172,    2,  172,  180,

      181,  172,  172,  172,    8,  182,  183,  172,  172,  172,
      172,  172,   22,  172,  172,  172,  172,  172,   34,  172,
       37,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,   59,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  119,  134,  174,  121,  175,  116,  132,  131,  169,
        0,  171,    0,  168,    0,  169,  168,    0,  168,  123,
      128,  124,  173,    0,  172,  172,  172,    0,    0,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,   30,  172,  172,  172,  172,  172,  172,  172,   42,
      172,  172,  172,   48,  172,  172,  172,  172,   54,   55,
      172,  172,  172,  172,  172,  172,   63,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,   77,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,   94,  172,  172,  172,  172,  101,  102,
      172,  172,  172,  172,  172,  109,  122,    0,  169,    0,
      169,  168,  169,  168,  169,    0,  168,    0,    0,  172,
      172,  172,  176,  177,  172,    5,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,   24,   25,  172,  172,  172,  172,  172,  172,
      172,   35,  172,  172,  172,  172,  172,  172,  172,  172,
       45,  172,  172,  172,  172,  172,  172,  172,   57,  172,
       60,  172,  172,  172,  172,  172,  172,  172,   71,  172,
      172,   74,  172,  172,  172,  172,   80,  172,  172,  172,
      172,  172,  172,  172,   88,   89,   90,  172,   93,   95,
       96,   97,  172,  172,  103,  104,  172,  172,  107,  172,
      169,  169,  169,    0,    0,    0,  169,    0,  172,    1,
      172,    4,  172,    7,    9,   10,   11,  172,  172,  172,

      172,   16,  172,   18,  172,  172,  172,  172,  172,  172,
      172,   29,  172,  172,  172,  172,  172,  172,   39,  126,
      172,   41,  172,   46,  172,  172,   50,  172,  172,  172,
      172,  172,  172,  172,   65,   66,  172,  172,   70,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,   91,   98,  172,  105,  106,  108,    0,  169,
        0,  169,  169,    0,  172,    3,  172,  172,  172,  172,
       15,  172,   19,  172,  172,   23,   27,   26,   28,   31,
      172,  172,  172,   36,  172,   40,  172,   47,  172,   51,
       52,   53,   56,  172,  172,  172,  172,   67,  172,  172,

       73,   75,   76,  172,   79,   81,   82,   83,   84,   85,
       86,  172,   92,  172,  169,  169,    0,  172,  172,   12,
      172,   14,  172,  172,   21,   32,  172,  172,   38,  172,
      172,   58,  172,  172,  172,   69,  172,  125,   78,  172,
      172,    0,  172,    6,   13,   17,  172,  172,  172,  172,
       49,   61,  172,   64,  172,  172,  172,  100,  172,  172,
      172,  172,   44,   62,   72,   87,   99,  172,   20,   33,
       43,   68,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   30,   30,   32,   30,
       33,   33,   33,   33,   33,   33,   33,   33,   34,   35,
       33,   33,   33,   33,   33,   33,   33,   36,   33,   33,
       37,    1,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   33,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[70] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    1,    4,    4,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    6,    6,    7,    6,    1,    1,    1,    7,
        5,    5,    5,    5,    5,    5,    6,    6,    7,    6,
        6,    6,    6,    6,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[581] =
    {   0,
        0,    0,  727,  726,  791,  794,  794,  794,  764,  784,
      794,  762,   61,  777,  794,  794,   58,   59,  794,   56,
       57,   62,   72,   78,  794,  794,   76,   89,   93,    0,
      726,    0,  794,  794,  759,  744,   71,  123,  131,   80,
       86,   42,   92,  101,   70,   98,  101,  107,  738,  141,
      109,  116,   99,  110,  733,  732,  794,   64,  794,  794,
      794,  794,  775,  794,  753,  794,  768,  751,  794,  794,
      794,  794,  794,   88,  172,  794,  794,  794,  187,  194,
      151,  208,  178,  759,  794,  749,  747,  794,  794,  794,
      747,    0,  719,    0,  794,  716,  721,    0,  715,  763,

      757,  719,  121,  720,  705,  794,  794,  704,  721,  189,
      194,  720,  708,  701,  698,  193,  706,  699,    0,  140,
      207,  710,  168,  695,  707,  709,  698,  706,  687,  697,
      204,  696,  701,  697,  685,  698,  689,  684,  184,  698,
      221,  698,  203,  697,  684,  695,  678,  692,  680,  224,
      119,  677,  678,  195,  685,  672,  679,  210,  668,  681,
      670,  794,  698,  794,  794,  794,  794,  794,  794,  263,
      272,  794,  285,  270,  294,  301,  277,    0,  283,  794,
      794,  794,    0,  665,  665,  674,  668,  714,  708,  668,
      665,  658,  673,  668,  669,  653,  665,  655,  653,  278,

      662,  661,  648,  649,  662,  657,  649,  655,  645,  653,
      639,  284,  649,  217,  644,  649,  634,  643,  631,  645,
      632,  643,  645,    0,  641,  644,  643,  623,    0,    0,
      629,  636,  632,  615,  621,  632,    0,  619,  630,  633,
      626,  611,  159,  620,  619,  615,  608,    0,  607,  606,
      612,  619,  614,  605,  614,  603,  610,  614,  614,  603,
      597,  600,  608,  648,  606,  591,  595,  607,    0,    0,
      603,  217,  595,  597,  593,    0,  794,  323,  332,  336,
      340,  328,  344,  350,  339,  168,  356,  381,  584,  593,
      588,  591,  794,  794,  586,    0,  584,  587,  578,  587,

      576,  586,  575,  580,  581,  570,  579,  570,  567,  580,
      569,  574,    0,    0,  567,  564,  563,  574,  567,  576,
      575,    0,  570,  557,  553,  549,  585,  557,  550,  551,
        0,  556,  562,  546,  553,  556,  551,  552,    0,  551,
        0,  558,  541,  540,  552,  543,  542,  552,  581,  537,
      541,    0,  532,  545,  538,  529,    0,  542,  543,  538,
      531,  523,  527,  525,    0,    0,    0,  516,    0,  794,
        0,    0,  524,  523,    0,    0,  530,  529,    0,  529,
      387,  393,  343,  402,  418,  409,  424,  531,  519,    0,
      527,    0,  507,    0,    0,    0,    0,  519,  526,  521,

      518,    0,  511,    0,  518,  519,  516,  507,  500,  499,
      504,    0,  505,  512,  497,  501,  493,  507,    0,  794,
      505,    0,  503,    0,  507,  498,  501,  500,  499,  484,
      489,  481,  474,  477,    0,    0,  476,  452,  794,  451,
      466,  464,  462,  449,  451,  443,  450,  456,  454,  453,
      450,  442,  435,    0,  451,    0,    0,    0,  428,  432,
      436,  440,  446,  449,  441,    0,  443,  434,  428,  411,
        0,  411,    0,  429,  425,    0,    0,    0,    0,    0,
      415,  397,  390,    0,  381,    0,  384,    0,  368,    0,
        0,    0,    0,  372,  363,  361,  360,    0,  351,  323,

        0,    0,  360,  340,    0,    0,    0,    0,    0,    0,
        0,  342,    0,  335,  456,  463,  328,  317,  331,    0,
      316,    0,  304,  281,    0,    0,  290,  282,    0,  291,
      288,    0,  274,  272,  283,    0,  272,  794,    0,  262,
      264,  257,  238,    0,    0,    0,  234,  225,  217,  230,
        0,    0,  227,    0,  201,  184,  144,  794,  115,   65,
       60,   28,    0,    0,    0,    0,    0,   36,    0,    0,
        0,    0,  794,  508,  514,  519,  523,  527,  530,  534
    } ;

static const flex_int16_t yy_def[581] =
    {   0,
      573,    1,    1,    1,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  574,
      573,  575,  573,  573,  573,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  576,  573,  573,  573,  573,  573,  573,
      573,  577,  573,  575,  573,  575,  575,  575,  575,  573,

      573,  575,  575,  575,  575,  573,  573,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  578,  579,  573,
      573,  573,  577,  573,  575,  575,  575,  573,  573,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  573,  573,  573,  573,
      573,  573,  573,  573,  580,  578,  579,  573,  573,  575,
      575,  575,  573,  573,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  573,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      573,  573,  580,  573,  573,  573,  573,  573,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  573,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  573,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  573,  573,
      573,  573,  573,  573,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  573,  573,  573,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  573,  575,  575,
      575,  573,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  573,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,    0,  573,  573,  573,  573,  573,  573,  573
    } ;

static const flex_int16_t yy_nxt[864] =
    {   0,
        6,    7,    8,    9,   10,   11,    6,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       32,   32,   32,   32,   32,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   32,   32,   43,   32,
       44,   45,   46,   47,   48,   32,   49,   50,   51,   52,
       53,   54,   32,   55,   56,   57,   58,   59,   60,   65,
       68,   72,   70,   74,   76,   75,   75,   75,   75,   77,
      572,   73,  117,   69,   71,  571,   66,   78,   79,  162,
       80,   80,   80,   80,   79,  118,   80,   80,   80,   80,

       86,   87,   81,   82,  168,   83,  570,   84,  569,   82,
      127,   80,  169,   81,   88,   89,   82,   80,   90,   91,
       85,   97,   82,  128,  111,   83,   85,  100,   98,   99,
      163,  112,  101,  113,   84,  106,  114,  119,  115,  156,
      107,  123,  129,  120,  121,  124,  130,  138,  116,  125,
      122,  131,  157,  132,  126,  133,  150,  158,  159,  134,
      135,  136,  137,  139,  153,  151,  140,  102,  154,  174,
      174,  108,  152,  155,  191,  568,  103,  192,  263,  104,
      213,  109,  264,  142,  110,  143,  105,  567,  144,  145,
      170,  170,  170,  170,  214,  146,  177,  177,  177,  147,

      148,  349,  385,  171,  149,   75,   75,   75,   75,  222,
       79,  170,   80,   80,   80,   80,  171,  350,  173,  223,
      172,  175,  385,  175,  241,   82,  176,  176,  176,  176,
      197,  173,  242,   80,  198,  208,  566,  243,   82,  201,
      199,  200,   85,  267,  202,  565,  268,  209,  203,  215,
      216,  210,  231,  252,  272,  217,  232,  218,  273,  253,
      219,  245,  233,  246,  247,  220,  248,  323,  260,  376,
      324,  564,  261,  377,  563,  562,  249,  561,  560,  250,
      262,  170,  170,  170,  170,  278,  559,  278,  282,  282,
      279,  279,  279,  279,  171,  284,  284,  284,  280,  286,

      280,  558,  170,  281,  281,  281,  281,  171,  557,  282,
      556,  172,  176,  176,  176,  176,  284,  288,   85,  283,
      283,  283,  283,  305,  319,   85,  555,  554,  320,  553,
      552,   85,  551,  550,  549,  306,  307,  288,  548,  547,
      283,  279,  279,  279,  279,  321,  282,  282,  546,  172,
      381,  381,  381,  381,  281,  281,  281,  281,  382,  382,
      382,  382,  283,  283,  283,  283,  545,  282,  284,  284,
      284,  381,  286,  384,  544,  543,   85,  384,  542,  382,
      172,  541,  540,  283,  539,  538,  537,  172,  172,  284,
      288,  172,  172,  384,  386,  536,  386,  384,   85,  387,

      387,  387,  387,  535,   85,  381,  381,  381,  381,  534,
      288,  382,  382,  382,  382,  459,  533,  459,  532,  531,
      460,  460,  460,  460,  530,  529,  381,  387,  387,  387,
      387,  461,  382,  461,  528,  172,  462,  462,  462,  462,
      527,  172,  463,  463,  463,  463,  460,  460,  460,  460,
      515,  515,  515,  515,  462,  462,  462,  462,  516,  516,
      516,  516,  526,  463,  463,  463,  463,  463,  525,  524,
      523,  515,  172,  522,  515,  515,  515,  515,  521,  516,
      172,  516,  516,  516,  516,  463,  520,  519,  172,  518,
      517,  514,  513,  512,  172,  515,  511,  510,  509,  508,

      507,  506,  516,  505,  172,  504,  503,  502,  501,  500,
      499,  172,   92,   92,   92,   94,  498,   94,   94,   94,
       94,  179,  179,  179,  183,  497,  183,  183,  183,  183,
      285,  285,  287,  287,  287,  496,  287,  383,  383,  495,
      383,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,

      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  380,  379,  378,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  322,  318,  317,  316,  315,

      314,  313,  312,  311,  310,  309,  308,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  277,  276,  275,  274,  271,  270,  269,
      266,  265,  259,  258,  257,  256,  255,  254,  251,  244,
      240,  239,  238,  237,  236,  235,  234,  230,  229,  228,
      227,  226,  225,  224,  221,  212,  211,  207,  206,  205,
      204,  196,  195,  194,  193,  190,  189,  188,  187,  186,
      185,  184,  182,  181,  180,  178,  167,  166,  165,  164,
      161,  160,  141,   96,   95,   93,   67,   64,   63,   62,
      573,   61,   61,    5,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573
    } ;

static const flex_int16_t yy_chk[864] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   13,
       17,   20,   18,   21,   22,   21,   21,   21,   21,   22,
      568,   20,   42,   17,   18,  562,   13,   22,   23,   58,
       23,   23,   23,   23,   24,   42,   24,   24,   24,   24,

       27,   27,   23,   23,   74,   23,  561,   23,  560,   24,
       45,   23,   74,   23,   28,   28,   23,   24,   29,   29,
       23,   37,   24,   45,   40,   23,   24,   38,   37,   37,
       58,   40,   38,   40,   23,   39,   41,   43,   41,   53,
       39,   44,   46,   43,   43,   44,   46,   48,   41,   44,
       43,   46,   53,   47,   44,   47,   51,   54,   54,   47,
       47,   47,   47,   48,   52,   51,   48,   38,   52,   81,
       81,   39,   51,   52,  103,  559,   38,  103,  151,   38,
      120,   39,  151,   50,   39,   50,   38,  557,   50,   50,
       75,   75,   75,   75,  120,   50,   83,   83,   83,   50,

       50,  243,  286,   75,   50,   79,   79,   79,   79,  123,
       80,   75,   80,   80,   80,   80,   75,  243,   79,  123,
       75,   82,  286,   82,  139,   80,   82,   82,   82,   82,
      110,   79,  139,   80,  110,  116,  556,  139,   80,  111,
      110,  110,   80,  154,  111,  555,  154,  116,  111,  121,
      121,  116,  131,  143,  158,  121,  131,  121,  158,  143,
      121,  141,  131,  141,  141,  121,  141,  214,  150,  272,
      214,  553,  150,  272,  550,  549,  141,  548,  547,  141,
      150,  170,  170,  170,  170,  171,  543,  171,  174,  174,
      171,  171,  171,  171,  170,  177,  177,  177,  173,  179,

      173,  542,  170,  173,  173,  173,  173,  170,  541,  174,
      540,  170,  175,  175,  175,  175,  177,  179,  174,  176,
      176,  176,  176,  200,  212,  177,  537,  535,  212,  534,
      533,  179,  531,  530,  528,  200,  200,  179,  527,  524,
      176,  278,  278,  278,  278,  212,  282,  282,  523,  176,
      279,  279,  279,  279,  280,  280,  280,  280,  281,  281,
      281,  281,  283,  283,  283,  283,  521,  282,  284,  284,
      284,  279,  287,  285,  519,  518,  282,  383,  517,  281,
      279,  514,  512,  283,  504,  503,  500,  285,  281,  284,
      287,  383,  283,  285,  288,  499,  288,  383,  284,  288,

      288,  288,  288,  497,  287,  381,  381,  381,  381,  496,
      287,  382,  382,  382,  382,  384,  495,  384,  494,  489,
      384,  384,  384,  384,  487,  485,  381,  386,  386,  386,
      386,  385,  382,  385,  483,  381,  385,  385,  385,  385,
      482,  382,  387,  387,  387,  387,  459,  459,  459,  459,
      460,  460,  460,  460,  461,  461,  461,  461,  462,  462,
      462,  462,  481,  387,  463,  463,  463,  463,  475,  474,
      472,  460,  387,  470,  515,  515,  515,  515,  469,  462,
      460,  516,  516,  516,  516,  463,  468,  467,  462,  465,
      464,  455,  453,  452,  463,  515,  451,  450,  449,  448,

      447,  446,  516,  445,  515,  444,  443,  442,  441,  440,
      438,  516,  574,  574,  574,  575,  437,  575,  575,  575,
      575,  576,  576,  576,  577,  434,  577,  577,  577,  577,
      578,  578,  579,  579,  579,  433,  579,  580,  580,  432,
      580,  431,  430,  429,  428,  427,  426,  425,  423,  421,
      418,  417,  416,  415,  414,  413,  411,  410,  409,  408,
      407,  406,  405,  403,  401,  400,  399,  398,  393,  391,
      389,  388,  380,  378,  377,  374,  373,  368,  364,  363,
      362,  361,  360,  359,  358,  356,  355,  354,  353,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  340,

      338,  337,  336,  335,  334,  333,  332,  330,  329,  328,
      327,  326,  325,  324,  323,  321,  320,  319,  318,  317,
      316,  315,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  295,  292,
      291,  290,  289,  275,  274,  273,  271,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  247,  246,  245,
      244,  242,  241,  240,  239,  238,  236,  235,  234,  233,
      232,  231,  228,  227,  226,  225,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  213,  211,  210,  209,  208,

      207,  206,  205,  204,  203,  202,  201,  199,  198,  197,
      196,  195,  194,  193,  192,  191,  190,  189,  188,  187,
      186,  185,  184,  163,  161,  160,  159,  157,  156,  155,
      153,  152,  149,  148,  147,  146,  145,  144,  142,  140,
      138,  137,  136,  135,  134,  133,  132,  130,  129,  128,
      127,  126,  125,  124,  122,  118,  117,  115,  114,  113,
      112,  109,  108,  105,  104,  102,  101,  100,   99,   97,
       96,   93,   91,   87,   86,   84,   68,   67,   65,   63,
       56,   55,   49,   36,   35,   31,   14,   12,   10,    9,
        5,    4,    3,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "chpl.lex"
/*
 * Copyright 2020-2023 Hewlett Packard Enterprise Development LP
 * Copyright 2004-2019 Cray Inc.
 * Other additional copyright holders may be indicated within.
 *
 * The entirety of this work is licensed under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* These options create a re-entrant scanner that returns
     * an integer to indicate the token type
     * a bison-style YYSTYPE by reference. (value in yylval->pch)
     * a bison-style YYLTYPE by reference.

     i.e. int yylex(YYSTYPE*, YYLTYPE*, yyscan_t yyscanner);
*/
/*
   Provide a condition stack
   This is used to alter the handling of "{" when it appears immediately after "extern"
*/
#line 51 "chpl.lex"

#include "bison-chpl-lib.h"

#include <cstdio>

namespace chpl {
static int  processIdentifier(yyscan_t scanner, bool queried);
static int  processToken(yyscan_t scanner, int t);
static int  processStringLiteral(yyscan_t scanner, const char* q, int type);
static int  processTripleStringLiteral(yyscan_t scanner, const char* q, int type);

static int  processExtern(yyscan_t scanner);
static int  processExternCode(yyscan_t scanner);

static void processWhitespace(yyscan_t scanner);

static int  processSingleLineComment(yyscan_t scanner);
static int  processBlockComment(yyscan_t scanner);

static void processInvalidToken(yyscan_t scanner);

static bool yy_has_state(yyscan_t scanner);
}

#line 1090 "flex-chpl-lib.cpp"
/* hex float literals, have decimal exponents indicating the power of 2 */

#line 1093 "flex-chpl-lib.cpp"

#define INITIAL 0
#define externmode 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE ParserContext*

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 113 "chpl.lex"


#line 1383 "flex-chpl-lib.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 574 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 794 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 115 "chpl.lex"
return processToken(yyscanner, TALIGN);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 116 "chpl.lex"
return processToken(yyscanner, TAS);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 117 "chpl.lex"
return processToken(yyscanner, TATOMIC);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 118 "chpl.lex"
return processToken(yyscanner, TBEGIN);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 119 "chpl.lex"
return processToken(yyscanner, TBOOL);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 120 "chpl.lex"
return processToken(yyscanner, TBORROWED);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 121 "chpl.lex"
return processToken(yyscanner, TBREAK);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 122 "chpl.lex"
return processToken(yyscanner, TBY);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 123 "chpl.lex"
return processToken(yyscanner, TBYTES);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 124 "chpl.lex"
return processToken(yyscanner, TCATCH);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 125 "chpl.lex"
return processToken(yyscanner, TCLASS);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 126 "chpl.lex"
return processToken(yyscanner, TCOBEGIN);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 127 "chpl.lex"
return processToken(yyscanner, TCOFORALL);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 128 "chpl.lex"
return processToken(yyscanner, TCOMPLEX);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 129 "chpl.lex"
return processToken(yyscanner, TCONFIG);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "chpl.lex"
return processToken(yyscanner, TCONST);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "chpl.lex"
return processToken(yyscanner, TCONTINUE);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 132 "chpl.lex"
return processToken(yyscanner, TDEFER);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 133 "chpl.lex"
return processToken(yyscanner, TDELETE);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 134 "chpl.lex"
return processToken(yyscanner, TDEPRECATED);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 135 "chpl.lex"
return processToken(yyscanner, TDMAPPED);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 136 "chpl.lex"
return processToken(yyscanner, TDO);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 137 "chpl.lex"
return processToken(yyscanner, TDOMAIN);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 138 "chpl.lex"
return processToken(yyscanner, TELSE);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 139 "chpl.lex"
return processToken(yyscanner, TENUM);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 140 "chpl.lex"
return processToken(yyscanner, TEXPORT);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 141 "chpl.lex"
return processToken(yyscanner, TEXCEPT);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 142 "chpl.lex"
return processExtern(yyscanner);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 143 "chpl.lex"
return processToken(yyscanner, TFALSE);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 144 "chpl.lex"
return processToken(yyscanner, TFOR);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 145 "chpl.lex"
return processToken(yyscanner, TFORALL);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 146 "chpl.lex"
return processToken(yyscanner, TFOREACH);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 147 "chpl.lex"
return processToken(yyscanner, TFORWARDING);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 148 "chpl.lex"
return processToken(yyscanner, TIF);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 149 "chpl.lex"
return processToken(yyscanner, TIMAG);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 150 "chpl.lex"
return processToken(yyscanner, TIMPORT);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 151 "chpl.lex"
return processToken(yyscanner, TIN);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 152 "chpl.lex"
return processToken(yyscanner, TINCLUDE);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 153 "chpl.lex"
return processToken(yyscanner, TINDEX);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 154 "chpl.lex"
return processToken(yyscanner, TINLINE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 155 "chpl.lex"
return processToken(yyscanner, TINOUT);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 156 "chpl.lex"
return processToken(yyscanner, TINT);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 157 "chpl.lex"
return processToken(yyscanner, TIMPLEMENTS);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 158 "chpl.lex"
return processToken(yyscanner, TINTERFACE);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 159 "chpl.lex"
return processToken(yyscanner, TITER);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 160 "chpl.lex"
return processToken(yyscanner, TLABEL);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 161 "chpl.lex"
return processToken(yyscanner, TLAMBDA);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 162 "chpl.lex"
return processToken(yyscanner, TLET);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 163 "chpl.lex"
return processToken(yyscanner, TLIFETIME);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 164 "chpl.lex"
return processToken(yyscanner, TLOCAL);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 165 "chpl.lex"
return processToken(yyscanner, TLOCALE);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 166 "chpl.lex"
return processToken(yyscanner, TMANAGE);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 167 "chpl.lex"
return processToken(yyscanner, TMODULE);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 168 "chpl.lex"
return processToken(yyscanner, TNEW);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 169 "chpl.lex"
return processToken(yyscanner, TNIL);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 170 "chpl.lex"
return processToken(yyscanner, TNOINIT);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 171 "chpl.lex"
return processToken(yyscanner, TNONE);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 172 "chpl.lex"
return processToken(yyscanner, TNOTHING);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 173 "chpl.lex"
return processToken(yyscanner, TON);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 174 "chpl.lex"
return processToken(yyscanner, TONLY);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 175 "chpl.lex"
return processToken(yyscanner, TOPERATOR);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 176 "chpl.lex"
return processToken(yyscanner, TOTHERWISE);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 177 "chpl.lex"
return processToken(yyscanner, TOUT);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 178 "chpl.lex"
return processToken(yyscanner, TOVERRIDE);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 179 "chpl.lex"
return processToken(yyscanner, TOWNED);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 180 "chpl.lex"
return processToken(yyscanner, TPARAM);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 181 "chpl.lex"
return processToken(yyscanner, TPRAGMA);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 182 "chpl.lex"
return processToken(yyscanner, TPRIMITIVE);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 183 "chpl.lex"
return processToken(yyscanner, TPRIVATE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 184 "chpl.lex"
return processToken(yyscanner, TPROCLP);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 185 "chpl.lex"
return processToken(yyscanner, TPROC);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 186 "chpl.lex"
return processToken(yyscanner, TPROTOTYPE);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 187 "chpl.lex"
return processToken(yyscanner, TPUBLIC);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 188 "chpl.lex"
return processToken(yyscanner, TREAL);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 189 "chpl.lex"
return processToken(yyscanner, TRECORD);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 190 "chpl.lex"
return processToken(yyscanner, TREDUCE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 191 "chpl.lex"
return processToken(yyscanner, TREF);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 192 "chpl.lex"
return processToken(yyscanner, TREQUIRE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 193 "chpl.lex"
return processToken(yyscanner, TRETURN);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 194 "chpl.lex"
return processToken(yyscanner, TSCAN);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 195 "chpl.lex"
return processToken(yyscanner, TSELECT);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 196 "chpl.lex"
return processToken(yyscanner, TSERIAL);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 197 "chpl.lex"
return processToken(yyscanner, TSHARED);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 198 "chpl.lex"
return processToken(yyscanner, TSINGLE);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 199 "chpl.lex"
return processToken(yyscanner, TSPARSE);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 200 "chpl.lex"
return processToken(yyscanner, TSTRING);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 201 "chpl.lex"
return processToken(yyscanner, TSUBDOMAIN);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 202 "chpl.lex"
return processToken(yyscanner, TSYNC);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 203 "chpl.lex"
return processToken(yyscanner, TTHEN);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 204 "chpl.lex"
return processToken(yyscanner, TTHIS);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 205 "chpl.lex"
return processToken(yyscanner, TTHROW);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 206 "chpl.lex"
return processToken(yyscanner, TTHROWS);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 207 "chpl.lex"
return processToken(yyscanner, TTRUE);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 208 "chpl.lex"
return processToken(yyscanner, TTRY);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 209 "chpl.lex"
return processToken(yyscanner, TTRYBANG);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 210 "chpl.lex"
return processToken(yyscanner, TTYPE);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 211 "chpl.lex"
return processToken(yyscanner, TUINT);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 212 "chpl.lex"
return processToken(yyscanner, TUNION);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 213 "chpl.lex"
return processToken(yyscanner, TUNMANAGED);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 214 "chpl.lex"
return processToken(yyscanner, TUNSTABLE);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 215 "chpl.lex"
return processToken(yyscanner, TUSE);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 216 "chpl.lex"
return processToken(yyscanner, TVAR);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 217 "chpl.lex"
return processToken(yyscanner, TVOID);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 218 "chpl.lex"
return processToken(yyscanner, TWHEN);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 219 "chpl.lex"
return processToken(yyscanner, TWHERE);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 220 "chpl.lex"
return processToken(yyscanner, TWHILE);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 221 "chpl.lex"
return processToken(yyscanner, TWITH);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 222 "chpl.lex"
return processToken(yyscanner, TYIELD);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 223 "chpl.lex"
return processToken(yyscanner, TZIP);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 225 "chpl.lex"
return processToken(yyscanner, TUNDERSCORE);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 227 "chpl.lex"
return processToken(yyscanner, TASSIGN);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 228 "chpl.lex"
return processToken(yyscanner, TASSIGNPLUS);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 229 "chpl.lex"
return processToken(yyscanner, TASSIGNMINUS);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 230 "chpl.lex"
return processToken(yyscanner, TASSIGNMULTIPLY);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 231 "chpl.lex"
return processToken(yyscanner, TASSIGNDIVIDE);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 232 "chpl.lex"
return processToken(yyscanner, TASSIGNEXP);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 233 "chpl.lex"
return processToken(yyscanner, TASSIGNMOD);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 234 "chpl.lex"
return processToken(yyscanner, TASSIGNBAND);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 235 "chpl.lex"
return processToken(yyscanner, TASSIGNBOR);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 236 "chpl.lex"
return processToken(yyscanner, TASSIGNBXOR);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 237 "chpl.lex"
return processToken(yyscanner, TASSIGNLAND);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 238 "chpl.lex"
return processToken(yyscanner, TASSIGNLOR);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 239 "chpl.lex"
return processToken(yyscanner, TASSIGNSL);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 240 "chpl.lex"
return processToken(yyscanner, TASSIGNSR);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 241 "chpl.lex"
return processToken(yyscanner, TASSIGNREDUCE);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 243 "chpl.lex"
return processToken(yyscanner, TINITEQUALS);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 245 "chpl.lex"
return processToken(yyscanner, TALIAS);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 247 "chpl.lex"
return processToken(yyscanner, TSWAP);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 249 "chpl.lex"
return processToken(yyscanner, THASH);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 250 "chpl.lex"
return processToken(yyscanner, TDOTDOT);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 251 "chpl.lex"
return processToken(yyscanner, TDOTDOTOPENHIGH);
	YY_BREAK
/* The following cases would extend the current '..<'
                    open range interval constructor to also support
                    '<..' and '<..<'.  This concept didn't win enough
                    support to merge as present, but are here in case
                    we change our minds in a future release. */
/* "<.."            return processToken(yyscanner, TDOTDOTOPENLOW); */
/* "<..<"           return processToken(yyscanner, TDOTDOTOPENBOTH); */
case 132:
YY_RULE_SETUP
#line 259 "chpl.lex"
return processToken(yyscanner, TDOTDOTDOT);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 261 "chpl.lex"
return processToken(yyscanner, TAND);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 262 "chpl.lex"
return processToken(yyscanner, TOR);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 263 "chpl.lex"
return processToken(yyscanner, TBANG);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 265 "chpl.lex"
return processToken(yyscanner, TBAND);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 266 "chpl.lex"
return processToken(yyscanner, TBOR);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 267 "chpl.lex"
return processToken(yyscanner, TBXOR);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 268 "chpl.lex"
return processToken(yyscanner, TBNOT);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 270 "chpl.lex"
return processToken(yyscanner, TSHIFTLEFT);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 271 "chpl.lex"
return processToken(yyscanner, TSHIFTRIGHT);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 273 "chpl.lex"
return processToken(yyscanner, TEQUAL);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 274 "chpl.lex"
return processToken(yyscanner, TNOTEQUAL);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 275 "chpl.lex"
return processToken(yyscanner, TLESSEQUAL);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 276 "chpl.lex"
return processToken(yyscanner, TGREATEREQUAL);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 277 "chpl.lex"
return processToken(yyscanner, TLESS);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 278 "chpl.lex"
return processToken(yyscanner, TGREATER);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 280 "chpl.lex"
return processToken(yyscanner, TPLUS);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 281 "chpl.lex"
return processToken(yyscanner, TMINUS);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 282 "chpl.lex"
return processToken(yyscanner, TSTAR);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 283 "chpl.lex"
return processToken(yyscanner, TDIVIDE);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 284 "chpl.lex"
return processToken(yyscanner, TMOD);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 285 "chpl.lex"
return processToken(yyscanner, TMINUSMINUS);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 286 "chpl.lex"
return processToken(yyscanner, TPLUSPLUS);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 288 "chpl.lex"
return processToken(yyscanner, TEXP);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 290 "chpl.lex"
return processToken(yyscanner, TCOLON);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 291 "chpl.lex"
return processToken(yyscanner, TSEMI);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 292 "chpl.lex"
return processToken(yyscanner, TCOMMA);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 293 "chpl.lex"
return processToken(yyscanner, TDOT);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 294 "chpl.lex"
return processToken(yyscanner, TLP);
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 295 "chpl.lex"
return processToken(yyscanner, TRP);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 296 "chpl.lex"
return processToken(yyscanner, TLSBR);
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 297 "chpl.lex"
return processToken(yyscanner, TRSBR);
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 298 "chpl.lex"
return processExternCode(yyscanner);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 299 "chpl.lex"
return processToken(yyscanner, TLCBR);
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 300 "chpl.lex"
return processToken(yyscanner, TRCBR);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 301 "chpl.lex"
return processToken(yyscanner, TQUESTION);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 303 "chpl.lex"
return processToken(yyscanner, INTLITERAL);
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 304 "chpl.lex"
return processToken(yyscanner, REALLITERAL);
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 306 "chpl.lex"
return processToken(yyscanner, IMAGLITERAL);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 307 "chpl.lex"
return processToken(yyscanner, IMAGLITERAL);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 309 "chpl.lex"
return processIdentifier(yyscanner, false);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 310 "chpl.lex"
return processIdentifier(yyscanner, true);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 312 "chpl.lex"
return processTripleStringLiteral(yyscanner, "\"", STRINGLITERAL);
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 313 "chpl.lex"
return processTripleStringLiteral(yyscanner, "'", STRINGLITERAL);
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 314 "chpl.lex"
return processTripleStringLiteral(yyscanner, "\"", BYTESLITERAL);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 315 "chpl.lex"
return processTripleStringLiteral(yyscanner, "'", BYTESLITERAL);
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 316 "chpl.lex"
return processStringLiteral(yyscanner, "\"", STRINGLITERAL);
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 317 "chpl.lex"
return processStringLiteral(yyscanner, "'", STRINGLITERAL);
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 318 "chpl.lex"
return processStringLiteral(yyscanner, "\"", BYTESLITERAL);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 319 "chpl.lex"
return processStringLiteral(yyscanner, "'", BYTESLITERAL);
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 320 "chpl.lex"
return processStringLiteral(yyscanner, "\"", CSTRINGLITERAL);
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 321 "chpl.lex"
return processStringLiteral(yyscanner, "'", CSTRINGLITERAL);
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 322 "chpl.lex"
return processSingleLineComment(yyscanner);
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 323 "chpl.lex"
return processBlockComment(yyscanner);
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 325 "chpl.lex"
return processNewline(yyscanner);
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 327 "chpl.lex"
processWhitespace(yyscanner);
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 328 "chpl.lex"
processInvalidToken(yyscanner);
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 330 "chpl.lex"
ECHO;
	YY_BREAK
#line 2393 "flex-chpl-lib.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(externmode):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 574 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 574 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 573);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 330 "chpl.lex"


#include "lexer-help.h"

