==========================
Qthreads README for Chapel
==========================

This copy of Qthreads 1.21 is being released with Chapel for
convenience and was obtained from:

  https://github.com/sandialabs/qthreads

Any Chapel issues that seem to be related to Qthreads should be directed
to the Chapel team at https://chapel-lang.org/bugs.html.


Upgrading qthread versions
============================

The directory $CHPL_HOME/third-party/qthread/qthread-src contains the
un-tarballed qthread package contents. Version updates should be done as
follows, assuming the CWD is $CHPL_HOME/third-party/qthread/:

1. download the latest qthread version: e.g. `wget https://github.com/sandialabs/qthreads/releases/download/1.21/qthreads-1.21.tar.gz`
2. `tar xf qthreads-1.21.tar.gz`
3. `git rm -r qthread-src`
4. `mv qthreads-1.21 qthread-src`
5. `git add --force qthread-src` (--force to ignore our .gitignore)
6. update the version number mentioned above
7. test
8. commit, PR, merge, etc

Chapel modifications to Qthreads
================================

The modifications that we have made to the official Qthreads release are
as follows:

* Do not #include "qthread.hpp" ifdef CHPL_AVOID_CPP_CODE
  https://github.com/chapel-lang/chapel/pull/25507

```
diff --git a/third-party/qthread/qthread-src/include/qthread/qthread.h b/third-party/qthread/qthread-src/include/qthread/qthread.h
index 8269aa0949..bf022bc243 100644
--- a/third-party/qthread/qthread-src/include/qthread/qthread.h
+++ b/third-party/qthread/qthread-src/include/qthread/qthread.h
@@ -709,7 +709,7 @@ uint64_t qthread_syncvar_incrF(syncvar_t *restrict operand, uint64_t inc);
 
 Q_ENDCXX /* */
 
-#ifndef __cplusplus
+#if !defined __cplusplus || defined CHPL_AVOID_CPP_CODE
 
 #define qthread_incr(ADDR, INCVAL) __sync_fetch_and_add(ADDR, INCVAL)

```
* Backport a few performance fixes from the development version of qthreads.
  https://github.com/chapel-lang/chapel/pull/26138

```
diff --git a/include/qt_atomics.h b/include/qt_atomics.h
index 2ac887ed..2312c954 100644
--- a/include/qt_atomics.h
+++ b/include/qt_atomics.h
@@ -21,8 +21,24 @@
 #define THREAD_FENCE_MEM_RELEASE THREAD_FENCE_MEM_RELEASE_IMPL
 #endif

+#if QTHREAD_ASSEMBLY_ARCH == QTHREAD_IA32 ||                                   \
+  QTHREAD_ASSEMBLY_ARCH == QTHREAD_AMD64
 #define SPINLOCK_BODY()                                                        \
-  do { MACHINE_FENCE; } while (0)
+  do { __asm__ __volatile__("pause" ::: "memory"); } while (0)
+#elif QTHREAD_ASSEMBLY_ARCH == QTHREAD_ARM ||                                  \
+  QTHREAD_ASSEMBLY_ARCH == QTHREAD_ARMV8_A64
+#define SPINLOCK_BODY()                                                        \
+  do { __asm__ __volatile__("yield" ::: "memory"); } while (0)
+#elif QTHREAD_ASSEMBLY_ARCH == QTHREAD_POWERPC64 ||                            \
+  QTHREAD_ASSEMBLY_ARCH == QTHREAD_POWERPC32
+// For whatever reason the 29 (mdoio) version of this instruction performed
+// better in some back-of-the-envelope benchmarking so we're using that.
+#define SPINLOCK_BODY()                                                        \
+  do { __asm__ __volatile__("or 29,29,29" ::: "memory"); } while (0)
+#else
+#define SPINLOCK_BODY()                                                        \
+  do { atomic_thread_fence(memory_order_acq_rel); } while (0)
+#endif

 #define QTHREAD_FASTLOCK_SETUP()                                               \
   do {                                                                         \
```

* Backport a few performance fixes from the development version of qthreads.
  part of https://github.com/chapel-lang/chapel/pull/26328, the rest was
  reverted in https://github.com/chapel-lang/chapel/pull/26468

```
--- a/src/io.c
+++ b/src/io.c
@@ -74,7 +74,6 @@ static void qt_blocking_subsystem_internal_freemem(void) { /*{{{*/
 static void *qt_blocking_subsystem_proxy_thread(void *Q_UNUSED(arg)) { /*{{{*/
   while (!atomic_load_explicit(&proxy_exit, memory_order_relaxed)) {
     if (qt_process_blocking_call()) { break; }
-    MACHINE_FENCE;
   }
   atomic_fetch_sub_explicit(&io_worker_count, 1, memory_order_relaxed);
   pthread_exit(NULL);
```
