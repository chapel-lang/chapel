==========================
Qthreads README for Chapel
==========================

This copy of Qthreads 1.12 is being released with Chapel for
convenience and was obtained from:

  https://github.com/qthreads/qthreads

Any Chapel issues that seem to be related to Qthreads should be directed
to the Chapel team at https://chapel-lang.org/bugs.html.


Chapel modifications to Qthreads
================================

The modifications that we have made to the official Qthreads release are
as follows:

* We force tasks being woken from sync vars to run on their original
  shepherd. This is to work around a task serialization bug that stems
  from us using schedulers that don't support work stealing (nemesis)
  or running with work stealing disabled (distrib w/ QT_STEAL_RATIO=0)
* In the Chapel memory allocator shim (src/alloc/chapel.c), use the
  Chapel runtime's public memory interface instead of the internal
  interface provided by the memory layer implementations.  This gives
  us automatic "out of memory" messages and halts when an allocation
  fails, and should also allow us to track Qthreads memory use should
  we decide we want to do so.
* Use the Chapel affinity shim (src/affinity/hwloc_via_chapel.c) by
  default.  This first tries to get the hwloc topology from the Chapel
  runtime, and only drops back to getting it directly from hwloc if that
  fails.  Doing so ensures that when the Chapel runtime and Qthreads
  both use hwloc topologies, they use the same one.  This has both
  functional and performance benefits.
* Added missing `no` affinity shim (src/affinity/no.c) that was omitted
  from the official qthreads release. Only used when CHPL_HWLOC=none
