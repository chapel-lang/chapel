==========================
Qthreads README for Chapel
==========================

This copy of Qthreads 1.20 is being released with Chapel for
convenience and was obtained from:

  https://github.com/sandialabs/qthreads

Any Chapel issues that seem to be related to Qthreads should be directed
to the Chapel team at https://chapel-lang.org/bugs.html.


Upgrading qthread versions
============================

The directory $CHPL_HOME/third-party/qthread/qthread-src contains the
un-tarballed qthread package contents. Version updates should be done as
follows, assuming the CWD is $CHPL_HOME/third-party/qthread/:

1. download the latest qthread version: e.g. `wget https://github.com/sandialabs/qthreads/releases/download/1.20/qthreads-1.20.tar.gz`
2. `tar xf qthreads-1.20.tar.gz`
3. `rm -rf qthread-src`
4. `mv qthreads-1.20 qthread-src`
5. `git add --force qthread-src` (--force to ignore our .gitignore)
6. update the version number mentioned above
7. test
8. commit, PR, merge, etc

Chapel modifications to Qthreads
================================

The modifications that we have made to the official Qthreads release are
as follows:

* Do not #include "qthread.hpp" ifdef CHPL_AVOID_CPP_CODE
  https://github.com/chapel-lang/chapel/pull/25507

```
diff --git a/third-party/qthread/qthread-src/include/qthread/qthread.h b/third-party/qthread/qthread-src/include/qthread/qthread.h
index 4fc99a6fd1..a51d191348 100644
--- a/third-party/qthread/qthread-src/include/qthread/qthread.h
+++ b/third-party/qthread/qthread-src/include/qthread/qthread.h
@@ -1717,7 +1717,7 @@ static QINLINE void *qthread_cas_ptr_(void **addr,
 
 Q_ENDCXX /* */
 
-#ifndef __cplusplus
+#if !defined __cplusplus || defined CHPL_AVOID_CPP_CODE

 # if defined(QTHREAD_ATOMIC_INCR) && !defined(QTHREAD_MUTEX_INCREMENT)
 #  define qthread_incr(ADDR, INCVAL) \
```

Only fence on swaps for architectures where that's necessary.
This is backported from the upstream development version of qthreads.
```
diff --git a/include/qthread/qthread.h b/include/qthread/qthread.h
index 2bd2c3b5..4152d577 100644
--- a/include/qthread/qthread.h
+++ b/include/qthread/qthread.h
@@ -104,6 +104,10 @@ using std::memory_order_relaxed;
 #define Q_ALIGNED(x) __attribute__((aligned(x)))
 #endif

+#if QTHREAD_ASSEMBLY_ARCH == QTHREAD_AMD64
+#define QTHREAD_SWAPS_IMPLY_ACQ_REL_FENCES
+#endif
+
 Q_STARTCXX /* */
 /* NOTE!!!!!!!!!!!
  * Reads and writes operate on aligned_t-size segments of memory.
diff --git a/src/feb.c b/src/feb.c
index 164805d5..ae0c4ba1 100644
--- a/src/feb.c
+++ b/src/feb.c
@@ -1127,7 +1127,9 @@ int API_FUNC qthread_writeEF(aligned_t *restrict dest,
       &me->thread_state, QTHREAD_STATE_FEB_BLOCKED, memory_order_relaxed);
     me->rdata->blockedon.addr = m;
     QTHREAD_WAIT_TIMER_START();
+#ifndef QTHREAD_SWAPS_IMPLY_ACQ_REL_FENCES
     MACHINE_FENCE;
+#endif
     qthread_back_to_master(me);
     QTHREAD_WAIT_TIMER_STOP(me, febwait);
 #ifdef QTHREAD_USE_EUREKAS
@@ -1300,7 +1302,9 @@ int API_FUNC qthread_writeFF(aligned_t *restrict dest,
       &me->thread_state, QTHREAD_STATE_FEB_BLOCKED, memory_order_relaxed);
     me->rdata->blockedon.addr = m;
     QTHREAD_WAIT_TIMER_START();
+#ifndef QTHREAD_SWAPS_IMPLY_ACQ_REL_FENCES
     MACHINE_FENCE;
+#endif
     qthread_back_to_master(me);
     QTHREAD_WAIT_TIMER_STOP(me, febwait);
 #ifdef QTHREAD_USE_EUREKAS
@@ -1414,7 +1418,9 @@ int API_FUNC qthread_readFF(aligned_t *restrict dest,
     me->rdata->blockedon.addr = m;
     QTHREAD_WAIT_TIMER_START();
     qthread_back_to_master(me);
+#ifndef QTHREAD_SWAPS_IMPLY_ACQ_REL_FENCES
     MACHINE_FENCE;
+#endif
     QTHREAD_WAIT_TIMER_STOP(me, febwait);
 #ifdef QTHREAD_USE_EUREKAS
     qt_eureka_check(0);
@@ -1600,7 +1606,9 @@ int API_FUNC qthread_readFE(aligned_t *restrict dest,
     me->rdata->blockedon.addr = m;
     QTHREAD_WAIT_TIMER_START();
     qthread_back_to_master(me);
+#ifndef QTHREAD_SWAPS_IMPLY_ACQ_REL_FENCES
     MACHINE_FENCE;
+#endif
     QTHREAD_WAIT_TIMER_STOP(me, febwait);
 #ifdef QTHREAD_USE_EUREKAS
     qt_eureka_check(0);
```
