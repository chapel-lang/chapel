# Makefile.in generated by automake 1.15 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# -*- Makefile -*-
#
# Copyright (c)      2011  Sandia Corporation
#
VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
@HAVE_LIBM_TRUE@am__append_1 = rose_fft
EXTRA_PROGRAMS = $(am__EXEEXT_2)
subdir = test/benchmarks/rose_bots
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/config/ax_c_restrict.m4 \
	$(top_srcdir)/config/ax_check_16aligned_malloc.m4 \
	$(top_srcdir)/config/ax_check_page_aligned_malloc.m4 \
	$(top_srcdir)/config/ax_create_stdint_h.m4 \
	$(top_srcdir)/config/ax_openmp.m4 \
	$(top_srcdir)/config/ax_tls.m4 $(top_srcdir)/config/libtool.m4 \
	$(top_srcdir)/config/ltoptions.m4 \
	$(top_srcdir)/config/ltsugar.m4 \
	$(top_srcdir)/config/ltversion.m4 \
	$(top_srcdir)/config/lt~obsolete.m4 \
	$(top_srcdir)/config/ompi_check_package.m4 \
	$(top_srcdir)/config/qthread_builtin_expect.m4 \
	$(top_srcdir)/config/qthread_builtin_trap.m4 \
	$(top_srcdir)/config/qthread_check_FUNCTION.m4 \
	$(top_srcdir)/config/qthread_check_altix_timer.m4 \
	$(top_srcdir)/config/qthread_check_assembly.m4 \
	$(top_srcdir)/config/qthread_check_assert.m4 \
	$(top_srcdir)/config/qthread_check_atomics.m4 \
	$(top_srcdir)/config/qthread_check_attributes.m4 \
	$(top_srcdir)/config/qthread_check_bitfield_order.m4 \
	$(top_srcdir)/config/qthread_check_hwloc.m4 \
	$(top_srcdir)/config/qthread_check_liblgrp.m4 \
	$(top_srcdir)/config/qthread_check_libnuma.m4 \
	$(top_srcdir)/config/qthread_check_linux.m4 \
	$(top_srcdir)/config/qthread_check_machtopo.m4 \
	$(top_srcdir)/config/qthread_check_makecontext.m4 \
	$(top_srcdir)/config/qthread_check_plpa.m4 \
	$(top_srcdir)/config/qthread_check_portals4.m4 \
	$(top_srcdir)/config/qthread_check_pthreads.m4 \
	$(top_srcdir)/config/qthread_check_qsort.m4 \
	$(top_srcdir)/config/qthread_check_swapcontext.m4 \
	$(top_srcdir)/config/qthread_check_syscalltypes.m4 \
	$(top_srcdir)/config/qthread_check_tiletopo.m4 \
	$(top_srcdir)/config/qthread_check_ucstack_ssflags.m4 \
	$(top_srcdir)/config/qthread_check_working_valloc.m4 \
	$(top_srcdir)/config/qthread_cond_define.m4 \
	$(top_srcdir)/config/qthread_detect_compiler_type.m4 \
	$(top_srcdir)/config/qthread_vamacros.m4 \
	$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/config.h \
	$(top_builddir)/include/qthread/common.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
@HAVE_LIBM_TRUE@am__EXEEXT_1 = rose_fft$(EXEEXT)
am__EXEEXT_2 = rose_fib$(EXEEXT) rose_nqueens$(EXEEXT) \
	rose_sort$(EXEEXT) rose_sparselu_task$(EXEEXT) \
	rose_sparselu_forloop$(EXEEXT) rose_strassen$(EXEEXT) \
	rose_health$(EXEEXT) rose_alignment_task$(EXEEXT) \
	rose_alignment_forloop$(EXEEXT) $(am__EXEEXT_1)
am__dirstamp = $(am__leading_dot)dirstamp
am__objects_1 = common/rose_bots_common.$(OBJEXT)
am_rose_alignment_forloop_OBJECTS = $(am__objects_1) \
	alignment/forloop/rose_bots_main_alignmentfor.$(OBJEXT) \
	alignment/forloop/rose_alignment_for.$(OBJEXT) \
	alignment/forloop/rose_sequence_alignmentfor.$(OBJEXT)
rose_alignment_forloop_OBJECTS = $(am_rose_alignment_forloop_OBJECTS)
rose_alignment_forloop_LDADD = $(LDADD)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
am_rose_alignment_task_OBJECTS = $(am__objects_1) \
	alignment/task/rose_bots_main_alignmenttask.$(OBJEXT) \
	alignment/task/rose_alignment_task.$(OBJEXT) \
	alignment/task/rose_sequence_alignmenttask.$(OBJEXT)
rose_alignment_task_OBJECTS = $(am_rose_alignment_task_OBJECTS)
rose_alignment_task_LDADD = $(LDADD)
am_rose_fft_OBJECTS = $(am__objects_1) \
	fft/rose_bots_main_fft.$(OBJEXT) fft/rose_fft.$(OBJEXT)
rose_fft_OBJECTS = $(am_rose_fft_OBJECTS)
rose_fft_LDADD = $(LDADD)
am_rose_fib_OBJECTS = $(am__objects_1) \
	fib/rose_bots_main_fib.$(OBJEXT) fib/rose_fib.$(OBJEXT)
rose_fib_OBJECTS = $(am_rose_fib_OBJECTS)
rose_fib_LDADD = $(LDADD)
am_rose_health_OBJECTS = $(am__objects_1) \
	health/rose_bots_main_health.$(OBJEXT) \
	health/rose_health.$(OBJEXT)
rose_health_OBJECTS = $(am_rose_health_OBJECTS)
rose_health_LDADD = $(LDADD)
am_rose_nqueens_OBJECTS = $(am__objects_1) \
	nqueens/rose_bots_main_nqueens.$(OBJEXT) \
	nqueens/rose_nqueens.$(OBJEXT)
rose_nqueens_OBJECTS = $(am_rose_nqueens_OBJECTS)
rose_nqueens_LDADD = $(LDADD)
am_rose_sort_OBJECTS = $(am__objects_1) \
	sort/rose_bots_main_sort.$(OBJEXT) sort/rose_sort.$(OBJEXT)
rose_sort_OBJECTS = $(am_rose_sort_OBJECTS)
rose_sort_LDADD = $(LDADD)
am_rose_sparselu_forloop_OBJECTS = $(am__objects_1) \
	sparselu/forloop/rose_bots_main_sparselufor.$(OBJEXT) \
	sparselu/forloop/rose_sparselu_for.$(OBJEXT)
rose_sparselu_forloop_OBJECTS = $(am_rose_sparselu_forloop_OBJECTS)
rose_sparselu_forloop_LDADD = $(LDADD)
am_rose_sparselu_task_OBJECTS = $(am__objects_1) \
	sparselu/task/rose_bots_main_sparselutask.$(OBJEXT) \
	sparselu/task/rose_sparselu_task.$(OBJEXT)
rose_sparselu_task_OBJECTS = $(am_rose_sparselu_task_OBJECTS)
rose_sparselu_task_LDADD = $(LDADD)
am_rose_strassen_OBJECTS = $(am__objects_1) \
	strassen/rose_bots_main_strassen.$(OBJEXT) \
	strassen/rose_strassen.$(OBJEXT)
rose_strassen_OBJECTS = $(am_rose_strassen_OBJECTS)
rose_strassen_LDADD = $(LDADD)
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)/include -I$(top_builddir)/include/qthread
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(rose_alignment_forloop_SOURCES) \
	$(rose_alignment_task_SOURCES) $(rose_fft_SOURCES) \
	$(rose_fib_SOURCES) $(rose_health_SOURCES) \
	$(rose_nqueens_SOURCES) $(rose_sort_SOURCES) \
	$(rose_sparselu_forloop_SOURCES) $(rose_sparselu_task_SOURCES) \
	$(rose_strassen_SOURCES)
DIST_SOURCES = $(rose_alignment_forloop_SOURCES) \
	$(rose_alignment_task_SOURCES) $(rose_fft_SOURCES) \
	$(rose_fib_SOURCES) $(rose_health_SOURCES) \
	$(rose_nqueens_SOURCES) $(rose_sort_SOURCES) \
	$(rose_sparselu_forloop_SOURCES) $(rose_sparselu_task_SOURCES) \
	$(rose_strassen_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/config/depcomp \
	README
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCAS = @CCAS@
CCASDEPMODE = @CCASDEPMODE@
CCASFLAGS = @CCASFLAGS@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CHPL_OPTS = @CHPL_OPTS@
CLEANFILES = $(BOTS_TESTS)
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
EXTRA_DISTCHECK_OPTIONS = @EXTRA_DISTCHECK_OPTIONS@
FGREP = @FGREP@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = $(OUTPUTDIR)/libqthread_xomp.la $(OUTPUTDIR)/libqthread.la
LIBTOOL = @LIBTOOL@
LIBTOOL_DEPS = @LIBTOOL_DEPS@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MKDIR_P = @MKDIR_P@
MPICC = @MPICC@
MPICXX = @MPICXX@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OPENMP_CFLAGS = @OPENMP_CFLAGS@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
TBB_LIBS = @TBB_LIBS@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
qthread_topo = @qthread_topo@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
timelimit_path = @timelimit_path@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
with_alloc = @with_alloc@
with_barrier = @with_barrier@
with_dict = @with_dict@
with_scheduler = @with_scheduler@
with_sinc = @with_sinc@
GLOBAL_COMMON = common/rose_bots_common.cc
OUTPUTDIR = $(top_builddir)/src
AM_LFLAGS = -lm
AM_CPPFLAGS = -I$(top_srcdir)/test/benchmarks/rose_bots/common \
		      -I$(top_srcdir)/include

DEFINES = -D_OPENMP -DMANUAL_CUTOFF
AM_CXXFLAGS = $(DEFINES)
BOTS_TESTS = rose_fib rose_nqueens rose_sort rose_sparselu_task \
	rose_sparselu_forloop rose_strassen rose_health \
	rose_alignment_task rose_alignment_forloop $(am__append_1)
rose_fib_SOURCES = $(GLOBAL_COMMON) \
				   fib/rose_bots_main_fib.cc \
				   fib/rose_fib.cc

rose_fib_DEPENDENCIES = $(LIBS)
rose_nqueens_SOURCES = $(GLOBAL_COMMON) \
					   nqueens/rose_bots_main_nqueens.cc \
					   nqueens/rose_nqueens.cc

rose_nqueens_DEPENDENCIES = $(LIBS)
rose_sort_SOURCES = $(GLOBAL_COMMON) \
					sort/rose_bots_main_sort.cc \
					sort/rose_sort.cc

rose_sort_DEPENDENCIES = $(LIBS)
rose_sparselu_task_SOURCES = $(GLOBAL_COMMON) \
							 sparselu/task/rose_bots_main_sparselutask.cc \
							 sparselu/task/rose_sparselu_task.cc

rose_sparselu_task_DEPENDENCIES = $(LIBS)
rose_sparselu_forloop_SOURCES = $(GLOBAL_COMMON) \
								sparselu/forloop/rose_bots_main_sparselufor.cc \
								sparselu/forloop/rose_sparselu_for.cc

rose_sparselu_forloop_DEPENDENCIES = $(LIBS)
rose_strassen_SOURCES = $(GLOBAL_COMMON) \
						strassen/rose_bots_main_strassen.cc \
						strassen/rose_strassen.cc

rose_strassen_DEPENDENCIES = $(LIBS)
rose_health_SOURCES = $(GLOBAL_COMMON) \
					  health/rose_bots_main_health.cc \
					  health/rose_health.cc

rose_health_DEPENDENCIES = $(LIBS)
rose_alignment_forloop_SOURCES = $(GLOBAL_COMMON) \
								 alignment/forloop/rose_bots_main_alignmentfor.cc \
								 alignment/forloop/rose_alignment_for.cc \
								 alignment/forloop/rose_sequence_alignmentfor.cc

rose_alignment_forloop_DEPENDENCIES = $(LIBS)
rose_alignment_task_SOURCES = $(GLOBAL_COMMON) \
							  alignment/task/rose_bots_main_alignmenttask.cc \
							  alignment/task/rose_alignment_task.cc \
							  alignment/task/rose_sequence_alignmenttask.cc

rose_alignment_task_DEPENDENCIES = $(LIBS)
rose_fft_SOURCES = $(GLOBAL_COMMON) \
				   fft/rose_bots_main_fft.cc \
				   fft/rose_fft.cc

rose_fft_DEPENDENCIES = $(LIBS)
all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign test/benchmarks/rose_bots/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign test/benchmarks/rose_bots/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
common/$(am__dirstamp):
	@$(MKDIR_P) common
	@: > common/$(am__dirstamp)
common/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) common/$(DEPDIR)
	@: > common/$(DEPDIR)/$(am__dirstamp)
common/rose_bots_common.$(OBJEXT): common/$(am__dirstamp) \
	common/$(DEPDIR)/$(am__dirstamp)
alignment/forloop/$(am__dirstamp):
	@$(MKDIR_P) alignment/forloop
	@: > alignment/forloop/$(am__dirstamp)
alignment/forloop/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) alignment/forloop/$(DEPDIR)
	@: > alignment/forloop/$(DEPDIR)/$(am__dirstamp)
alignment/forloop/rose_bots_main_alignmentfor.$(OBJEXT):  \
	alignment/forloop/$(am__dirstamp) \
	alignment/forloop/$(DEPDIR)/$(am__dirstamp)
alignment/forloop/rose_alignment_for.$(OBJEXT):  \
	alignment/forloop/$(am__dirstamp) \
	alignment/forloop/$(DEPDIR)/$(am__dirstamp)
alignment/forloop/rose_sequence_alignmentfor.$(OBJEXT):  \
	alignment/forloop/$(am__dirstamp) \
	alignment/forloop/$(DEPDIR)/$(am__dirstamp)

rose_alignment_forloop$(EXEEXT): $(rose_alignment_forloop_OBJECTS) $(rose_alignment_forloop_DEPENDENCIES) $(EXTRA_rose_alignment_forloop_DEPENDENCIES) 
	@rm -f rose_alignment_forloop$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_alignment_forloop_OBJECTS) $(rose_alignment_forloop_LDADD) $(LIBS)
alignment/task/$(am__dirstamp):
	@$(MKDIR_P) alignment/task
	@: > alignment/task/$(am__dirstamp)
alignment/task/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) alignment/task/$(DEPDIR)
	@: > alignment/task/$(DEPDIR)/$(am__dirstamp)
alignment/task/rose_bots_main_alignmenttask.$(OBJEXT):  \
	alignment/task/$(am__dirstamp) \
	alignment/task/$(DEPDIR)/$(am__dirstamp)
alignment/task/rose_alignment_task.$(OBJEXT):  \
	alignment/task/$(am__dirstamp) \
	alignment/task/$(DEPDIR)/$(am__dirstamp)
alignment/task/rose_sequence_alignmenttask.$(OBJEXT):  \
	alignment/task/$(am__dirstamp) \
	alignment/task/$(DEPDIR)/$(am__dirstamp)

rose_alignment_task$(EXEEXT): $(rose_alignment_task_OBJECTS) $(rose_alignment_task_DEPENDENCIES) $(EXTRA_rose_alignment_task_DEPENDENCIES) 
	@rm -f rose_alignment_task$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_alignment_task_OBJECTS) $(rose_alignment_task_LDADD) $(LIBS)
fft/$(am__dirstamp):
	@$(MKDIR_P) fft
	@: > fft/$(am__dirstamp)
fft/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) fft/$(DEPDIR)
	@: > fft/$(DEPDIR)/$(am__dirstamp)
fft/rose_bots_main_fft.$(OBJEXT): fft/$(am__dirstamp) \
	fft/$(DEPDIR)/$(am__dirstamp)
fft/rose_fft.$(OBJEXT): fft/$(am__dirstamp) \
	fft/$(DEPDIR)/$(am__dirstamp)

rose_fft$(EXEEXT): $(rose_fft_OBJECTS) $(rose_fft_DEPENDENCIES) $(EXTRA_rose_fft_DEPENDENCIES) 
	@rm -f rose_fft$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_fft_OBJECTS) $(rose_fft_LDADD) $(LIBS)
fib/$(am__dirstamp):
	@$(MKDIR_P) fib
	@: > fib/$(am__dirstamp)
fib/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) fib/$(DEPDIR)
	@: > fib/$(DEPDIR)/$(am__dirstamp)
fib/rose_bots_main_fib.$(OBJEXT): fib/$(am__dirstamp) \
	fib/$(DEPDIR)/$(am__dirstamp)
fib/rose_fib.$(OBJEXT): fib/$(am__dirstamp) \
	fib/$(DEPDIR)/$(am__dirstamp)

rose_fib$(EXEEXT): $(rose_fib_OBJECTS) $(rose_fib_DEPENDENCIES) $(EXTRA_rose_fib_DEPENDENCIES) 
	@rm -f rose_fib$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_fib_OBJECTS) $(rose_fib_LDADD) $(LIBS)
health/$(am__dirstamp):
	@$(MKDIR_P) health
	@: > health/$(am__dirstamp)
health/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) health/$(DEPDIR)
	@: > health/$(DEPDIR)/$(am__dirstamp)
health/rose_bots_main_health.$(OBJEXT): health/$(am__dirstamp) \
	health/$(DEPDIR)/$(am__dirstamp)
health/rose_health.$(OBJEXT): health/$(am__dirstamp) \
	health/$(DEPDIR)/$(am__dirstamp)

rose_health$(EXEEXT): $(rose_health_OBJECTS) $(rose_health_DEPENDENCIES) $(EXTRA_rose_health_DEPENDENCIES) 
	@rm -f rose_health$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_health_OBJECTS) $(rose_health_LDADD) $(LIBS)
nqueens/$(am__dirstamp):
	@$(MKDIR_P) nqueens
	@: > nqueens/$(am__dirstamp)
nqueens/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) nqueens/$(DEPDIR)
	@: > nqueens/$(DEPDIR)/$(am__dirstamp)
nqueens/rose_bots_main_nqueens.$(OBJEXT): nqueens/$(am__dirstamp) \
	nqueens/$(DEPDIR)/$(am__dirstamp)
nqueens/rose_nqueens.$(OBJEXT): nqueens/$(am__dirstamp) \
	nqueens/$(DEPDIR)/$(am__dirstamp)

rose_nqueens$(EXEEXT): $(rose_nqueens_OBJECTS) $(rose_nqueens_DEPENDENCIES) $(EXTRA_rose_nqueens_DEPENDENCIES) 
	@rm -f rose_nqueens$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_nqueens_OBJECTS) $(rose_nqueens_LDADD) $(LIBS)
sort/$(am__dirstamp):
	@$(MKDIR_P) sort
	@: > sort/$(am__dirstamp)
sort/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) sort/$(DEPDIR)
	@: > sort/$(DEPDIR)/$(am__dirstamp)
sort/rose_bots_main_sort.$(OBJEXT): sort/$(am__dirstamp) \
	sort/$(DEPDIR)/$(am__dirstamp)
sort/rose_sort.$(OBJEXT): sort/$(am__dirstamp) \
	sort/$(DEPDIR)/$(am__dirstamp)

rose_sort$(EXEEXT): $(rose_sort_OBJECTS) $(rose_sort_DEPENDENCIES) $(EXTRA_rose_sort_DEPENDENCIES) 
	@rm -f rose_sort$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_sort_OBJECTS) $(rose_sort_LDADD) $(LIBS)
sparselu/forloop/$(am__dirstamp):
	@$(MKDIR_P) sparselu/forloop
	@: > sparselu/forloop/$(am__dirstamp)
sparselu/forloop/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) sparselu/forloop/$(DEPDIR)
	@: > sparselu/forloop/$(DEPDIR)/$(am__dirstamp)
sparselu/forloop/rose_bots_main_sparselufor.$(OBJEXT):  \
	sparselu/forloop/$(am__dirstamp) \
	sparselu/forloop/$(DEPDIR)/$(am__dirstamp)
sparselu/forloop/rose_sparselu_for.$(OBJEXT):  \
	sparselu/forloop/$(am__dirstamp) \
	sparselu/forloop/$(DEPDIR)/$(am__dirstamp)

rose_sparselu_forloop$(EXEEXT): $(rose_sparselu_forloop_OBJECTS) $(rose_sparselu_forloop_DEPENDENCIES) $(EXTRA_rose_sparselu_forloop_DEPENDENCIES) 
	@rm -f rose_sparselu_forloop$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_sparselu_forloop_OBJECTS) $(rose_sparselu_forloop_LDADD) $(LIBS)
sparselu/task/$(am__dirstamp):
	@$(MKDIR_P) sparselu/task
	@: > sparselu/task/$(am__dirstamp)
sparselu/task/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) sparselu/task/$(DEPDIR)
	@: > sparselu/task/$(DEPDIR)/$(am__dirstamp)
sparselu/task/rose_bots_main_sparselutask.$(OBJEXT):  \
	sparselu/task/$(am__dirstamp) \
	sparselu/task/$(DEPDIR)/$(am__dirstamp)
sparselu/task/rose_sparselu_task.$(OBJEXT):  \
	sparselu/task/$(am__dirstamp) \
	sparselu/task/$(DEPDIR)/$(am__dirstamp)

rose_sparselu_task$(EXEEXT): $(rose_sparselu_task_OBJECTS) $(rose_sparselu_task_DEPENDENCIES) $(EXTRA_rose_sparselu_task_DEPENDENCIES) 
	@rm -f rose_sparselu_task$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_sparselu_task_OBJECTS) $(rose_sparselu_task_LDADD) $(LIBS)
strassen/$(am__dirstamp):
	@$(MKDIR_P) strassen
	@: > strassen/$(am__dirstamp)
strassen/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) strassen/$(DEPDIR)
	@: > strassen/$(DEPDIR)/$(am__dirstamp)
strassen/rose_bots_main_strassen.$(OBJEXT): strassen/$(am__dirstamp) \
	strassen/$(DEPDIR)/$(am__dirstamp)
strassen/rose_strassen.$(OBJEXT): strassen/$(am__dirstamp) \
	strassen/$(DEPDIR)/$(am__dirstamp)

rose_strassen$(EXEEXT): $(rose_strassen_OBJECTS) $(rose_strassen_DEPENDENCIES) $(EXTRA_rose_strassen_DEPENDENCIES) 
	@rm -f rose_strassen$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(rose_strassen_OBJECTS) $(rose_strassen_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f alignment/forloop/*.$(OBJEXT)
	-rm -f alignment/task/*.$(OBJEXT)
	-rm -f common/*.$(OBJEXT)
	-rm -f fft/*.$(OBJEXT)
	-rm -f fib/*.$(OBJEXT)
	-rm -f health/*.$(OBJEXT)
	-rm -f nqueens/*.$(OBJEXT)
	-rm -f sort/*.$(OBJEXT)
	-rm -f sparselu/forloop/*.$(OBJEXT)
	-rm -f sparselu/task/*.$(OBJEXT)
	-rm -f strassen/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@alignment/forloop/$(DEPDIR)/rose_alignment_for.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@alignment/forloop/$(DEPDIR)/rose_bots_main_alignmentfor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@alignment/forloop/$(DEPDIR)/rose_sequence_alignmentfor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@alignment/task/$(DEPDIR)/rose_alignment_task.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@alignment/task/$(DEPDIR)/rose_bots_main_alignmenttask.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@alignment/task/$(DEPDIR)/rose_sequence_alignmenttask.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/rose_bots_common.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@fft/$(DEPDIR)/rose_bots_main_fft.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@fft/$(DEPDIR)/rose_fft.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@fib/$(DEPDIR)/rose_bots_main_fib.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@fib/$(DEPDIR)/rose_fib.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@health/$(DEPDIR)/rose_bots_main_health.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@health/$(DEPDIR)/rose_health.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@nqueens/$(DEPDIR)/rose_bots_main_nqueens.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@nqueens/$(DEPDIR)/rose_nqueens.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@sort/$(DEPDIR)/rose_bots_main_sort.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@sort/$(DEPDIR)/rose_sort.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@sparselu/forloop/$(DEPDIR)/rose_bots_main_sparselufor.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@sparselu/forloop/$(DEPDIR)/rose_sparselu_for.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@sparselu/task/$(DEPDIR)/rose_bots_main_sparselutask.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@sparselu/task/$(DEPDIR)/rose_sparselu_task.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@strassen/$(DEPDIR)/rose_bots_main_strassen.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@strassen/$(DEPDIR)/rose_strassen.Po@am__quote@

.cc.o:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f alignment/forloop/$(DEPDIR)/$(am__dirstamp)
	-rm -f alignment/forloop/$(am__dirstamp)
	-rm -f alignment/task/$(DEPDIR)/$(am__dirstamp)
	-rm -f alignment/task/$(am__dirstamp)
	-rm -f common/$(DEPDIR)/$(am__dirstamp)
	-rm -f common/$(am__dirstamp)
	-rm -f fft/$(DEPDIR)/$(am__dirstamp)
	-rm -f fft/$(am__dirstamp)
	-rm -f fib/$(DEPDIR)/$(am__dirstamp)
	-rm -f fib/$(am__dirstamp)
	-rm -f health/$(DEPDIR)/$(am__dirstamp)
	-rm -f health/$(am__dirstamp)
	-rm -f nqueens/$(DEPDIR)/$(am__dirstamp)
	-rm -f nqueens/$(am__dirstamp)
	-rm -f sort/$(DEPDIR)/$(am__dirstamp)
	-rm -f sort/$(am__dirstamp)
	-rm -f sparselu/forloop/$(DEPDIR)/$(am__dirstamp)
	-rm -f sparselu/forloop/$(am__dirstamp)
	-rm -f sparselu/task/$(DEPDIR)/$(am__dirstamp)
	-rm -f sparselu/task/$(am__dirstamp)
	-rm -f strassen/$(DEPDIR)/$(am__dirstamp)
	-rm -f strassen/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf alignment/forloop/$(DEPDIR) alignment/task/$(DEPDIR) common/$(DEPDIR) fft/$(DEPDIR) fib/$(DEPDIR) health/$(DEPDIR) nqueens/$(DEPDIR) sort/$(DEPDIR) sparselu/forloop/$(DEPDIR) sparselu/task/$(DEPDIR) strassen/$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf alignment/forloop/$(DEPDIR) alignment/task/$(DEPDIR) common/$(DEPDIR) fft/$(DEPDIR) fib/$(DEPDIR) health/$(DEPDIR) nqueens/$(DEPDIR) sort/$(DEPDIR) sparselu/forloop/$(DEPDIR) sparselu/task/$(DEPDIR) strassen/$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \
	clean-libtool cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags tags-am uninstall uninstall-am

.PRECIOUS: Makefile


buildall: $(BOTS_TESTS)
buildextra: $(BOTS_TESTS)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
