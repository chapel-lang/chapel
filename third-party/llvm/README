=======================
LLVM for Chapel release
=======================

This copy of LLVM 18.1.6 is being released with Chapel for
convenience and was obtained from

https://www.llvm.org/

Two Chapel-related changes were made to this copy of the code.
The LLVM test subdirectories were deleted, and the CMakeLists.txt file
was edited not to require the deleted tests.

Any Chapel issues that seem to be related to LLVM should be directed
to the Chapel team at https://chapel-lang.org/bugs.html.

Using LLVM with Chapel
======================

Chapel can be built (by setting CHPL_LLVM=bundled) to include LLVM
in order to enable extern block support and LLVM code generation.

For more information on the current support for LLVM within Chapel,
please refer to $CHPL_HOME/doc/rst/technotes/llvm.rst.  For more
information about LLVM itself, please refer to the website above or to
the README in the llvm-src/ subdirectory of this directory.

Chapel modifications to LLVM
============================

The modifications that we have made to the official LLVM release are
as follows:

* The llvm-src/test and llvm-src/tools/clang/test directories were
  deleted because we do not use them.  Their deletion saves
  significant space and checkout time.

Our deletion of the test directories as noted above makes the
following patch necessary.

* The llvm-src/CMakeLists.txt file was edited to set
  LLVM_INCLUDE_TESTS to OFF by default instead of ON.  It is necessary
  to make this change instead of passing -DLLVM_INCLUDE_TESTS=OFF to
  cmake because Clang's build procedure does not always preserve this
  flag.  With this change made, the appropriate line in
  llvm-src/CMakeLists.txt looks like the following:
option(LLVM_INCLUDE_TESTS "Generate build targets for the LLVM unit tests." OFF)

* The llvm-src/CMakeLists.txt file was also edited to set
  LLVM_INCLUDE_BENCHMARKS to OFF by default instead of ON.
  With this change made, the appropriate line in
  llvm-src/CMakeLists.txt looks like the following:
option(LLVM_INCLUDE_BENCHMARKS "Generate benchmark targets. If OFF, benchmarks can't be built." OFF)

* Patched `lib/Support/APFloat.cpp` to workaround https://github.com/llvm/llvm-project/issues/81013
```
--- a/third-party/llvm/llvm-src/lib/Support/APFloat.cpp
+++ b/third-party/llvm/llvm-src/lib/Support/APFloat.cpp
@@ -112,9 +112,9 @@ struct fltSemantics {
   /* Number of bits actually used in the semantics. */
   unsigned int sizeInBits;
 
-  fltNonfiniteBehavior nonFiniteBehavior = fltNonfiniteBehavior::IEEE754;
+  fltNonfiniteBehavior nonFiniteBehavior = fltNonfiniteBehavior(int(fltNonfiniteBehavior::IEEE754));
 
-  fltNanEncoding nanEncoding = fltNanEncoding::IEEE;
+  fltNanEncoding nanEncoding = fltNanEncoding(int(fltNanEncoding::IEEE));
   // Returns true if any number described by this semantics can be precisely
   // represented by the specified semantics. Does not take into account
   // the value of fltNonfiniteBehavior.
```
* Patched `lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp` and `lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp` to workaround https://github.com/llvm/llvm-project/issues/65188
```
diff --git a/third-party/llvm/llvm-src/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp b/third-party/llvm/llvm-src/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp
index 279ef8ca27..9788b9316b 100644
--- a/third-party/llvm/llvm-src/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp
+++ b/third-party/llvm/llvm-src/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp
@@ -454,6 +454,7 @@ amdhsa::kernel_descriptor_t AMDGPUAsmPrinter::getAmdhsaKernelDescriptor(
 }
 
 bool AMDGPUAsmPrinter::runOnMachineFunction(MachineFunction &MF) {
+  if (MF.empty()) return false;
   // Init target streamer lazily on the first function so that previous passes
   // can set metadata.
   if (!IsTargetStreamerInitialized)
diff --git a/third-party/llvm/llvm-src/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp b/third-party/llvm/llvm-src/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp
index 0c759e7f3b..0e3d72460e 100644
--- a/third-party/llvm/llvm-src/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp
+++ b/third-party/llvm/llvm-src/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp
@@ -126,14 +126,16 @@ bool AMDGPUResourceUsageAnalysis::runOnModule(Module &M) {
       continue;
 
     MachineFunction *MF = MMI.getMachineFunction(*F);
-    assert(MF && "function must have been generated already");
-
-    auto CI =
-        CallGraphResourceInfo.insert(std::pair(F, SIFunctionResourceInfo()));
-    SIFunctionResourceInfo &Info = CI.first->second;
-    assert(CI.second && "should only be called once per function");
-    Info = analyzeResourceUsage(*MF, TM);
-    HasIndirectCall |= Info.HasIndirectCall;
+    if (MF) {
+      assert(MF && "function must have been generated already");
+
+      auto CI =
+          CallGraphResourceInfo.insert(std::pair(F, SIFunctionResourceInfo()));
+      SIFunctionResourceInfo &Info = CI.first->second;
+      assert(CI.second && "should only be called once per function");
+      Info = analyzeResourceUsage(*MF, TM);
+      HasIndirectCall |= Info.HasIndirectCall;
+    }
   }
 
   // It's possible we have unreachable functions in the module which weren't
@@ -151,9 +153,11 @@ bool AMDGPUResourceUsageAnalysis::runOnModule(Module &M) {
 
     SIFunctionResourceInfo &Info = CI.first->second;
     MachineFunction *MF = MMI.getMachineFunction(*F);
-    assert(MF && "function must have been generated already");
-    Info = analyzeResourceUsage(*MF, TM);
-    HasIndirectCall |= Info.HasIndirectCall;
+    if (MF) {
+      // assert(MF && "function must have been generated already");
+      Info = analyzeResourceUsage(*MF, TM);
+      HasIndirectCall |= Info.HasIndirectCall;
+    }
   }
 
   if (HasIndirectCall)

```

Upgrading LLVM versions
=======================

The directory $CHPL_HOME/third-party/llvm/llvm-src/ contains the
un-tarballed LLVM package contents.  Version updates should be done as
follows, assuming CWD is $CHPL_HOME/third-party/llvm/:

1.  download the new release and signature and verify them with e.g.
    gpg --verify llvm-18.1.6.src.tar.xz.sig
2.  git rm -r llvm-src cmake
3.  un-tarball the new LLVM version into the directory it specifies,
    for example llvm-18.1.6.src
4.  un-tarball the new Clang version into the directory it specifies,
    for example clang-18.1.6.src
5.  un-tarball the cmake support tarball into the directory it specifies,
    for example cmake-18.1.6.src
6.  mv clang-18.1.6.src llvm-18.1.6.src/tools/clang
7.  mv llvm-18.1.6.src llvm-src
8.  mv cmake-18.1.6.src cmake
9.  rm -r llvm-src/test llvm-src/tools/clang/test
10. git add --force llvm-src cmake
    ('--force' is needed to ensure git adds all files in the subdirectory)
11. commit these changes
12. edit llvm-src/CMakeLists.txt to set LLVM_INCLUDE_TESTS to OFF,
    set LLVM_INCLUDE_BENCHMARKS to OFF, and check above for any
    additional patches to apply
13. commit the CMakeLists.txt changes
14. update the util/chplenv/chpl_llvm.py llvm_versions function
    to record that the new version is available.
15. update $CHPL_HOME/doc/rst/usingchapel/prereqs.rst for the new LLVM version
16. update this README file
17. commit the docs and chplenv changes
18. PR, test, merge, etc.

Updating LLVM versions may also have impacts on GPU support.  See the test
$CHPL_HOME/test/gpu/native/llvmMoved.chpl for a description of these
impacts.
