.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "fi_rxm" "7" "2020\-04\-14" "Libfabric Programmer\[aq]s Manual" "Libfabric v1.10.1"
.hy
.SH NAME
.PP
fi_rxm \- The RxM (RDM over MSG) Utility Provider
.SH OVERVIEW
.PP
The RxM provider (ofi_rxm) is an utility provider that supports
FI_EP_RDM type endpoint emulated over FI_EP_MSG type endpoint(s) of an
underlying core provider.
FI_EP_RDM endpoints have a reliable datagram interface and RxM emulates
this by hiding the connection management of underlying FI_EP_MSG
endpoints from the user.
Additionally, RxM can hide memory registration requirement from a core
provider like verbs if the apps don\[aq]t support it.
.SH REQUIREMENTS
.SS Requirements for core provider
.PP
RxM provider requires the core provider to support the following
features:
.IP \[bu] 2
MSG endpoints (FI_EP_MSG)
.IP \[bu] 2
RMA read/write (FI_RMA) \- Used for implementing rendezvous protocol for
large messages.
.IP \[bu] 2
FI_OPT_CM_DATA_SIZE of at least 24 bytes.
.SS Requirements for applications
.PP
Since RxM emulates RDM endpoints by hiding connection management and
connections are established only on\-demand (when app tries to send
data), the first several data transfer calls would return EAGAIN.
Applications should be aware of this and retry until the operation
succeeds.
.PP
If an application has chosen manual progress for data progress, it
should also read the CQ so that the connection establishment progresses.
Not doing so would result in a stall.
See also the ERRORS section in fi_msg(3).
.SH SUPPORTED FEATURES
.PP
The RxM provider currently supports \f[I]FI_MSG\f[], \f[I]FI_TAGGED\f[],
\f[I]FI_RMA\f[] and \f[I]FI_ATOMIC\f[] capabilities.
.TP
.B \f[I]Endpoint types\f[]
The provider supports only \f[I]FI_EP_RDM\f[].
.RS
.RE
.TP
.B \f[I]Endpoint capabilities\f[]
The following data transfer interface is supported: \f[I]FI_MSG\f[],
\f[I]FI_TAGGED\f[], \f[I]FI_RMA\f[], \f[I]FI_ATOMIC\f[].
.RS
.RE
.TP
.B \f[I]Progress\f[]
The RxM provider supports both \f[I]FI_PROGRESS_MANUAL\f[] and
\f[I]FI_PROGRESS_AUTO\f[].
Manual progress in general has better connection scale\-up and lower CPU
utilization since there\[aq]s no separate auto\-progress thread.
.RS
.RE
.TP
.B \f[I]Addressing Formats\f[]
FI_SOCKADDR, FI_SOCKADDR_IN
.RS
.RE
.TP
.B \f[I]Memory Region\f[]
FI_MR_VIRT_ADDR, FI_MR_ALLOCATED, FI_MR_PROV_KEY MR mode bits would be
required from the app in case the core provider requires it.
.RS
.RE
.SH LIMITATIONS
.PP
When using RxM provider, some limitations from the underlying MSG
provider could also show up.
Please refer to the corresponding MSG provider man pages to find about
those limitations.
.SS Unsupported features
.PP
RxM provider does not support the following features:
.IP \[bu] 2
op_flags: FI_FENCE.
.IP \[bu] 2
Scalable endpoints
.IP \[bu] 2
Shared contexts
.IP \[bu] 2
FABRIC_DIRECT
.IP \[bu] 2
FI_MR_SCALABLE
.IP \[bu] 2
Authorization keys
.IP \[bu] 2
Application error data buffers
.IP \[bu] 2
Multicast
.IP \[bu] 2
FI_SYNC_ERR
.IP \[bu] 2
Reporting unknown source addr data as part of completions
.IP \[bu] 2
Triggered operations
.SS Progress limitations
.PP
When sending large messages, an app doing an sread or waiting on the CQ
file descriptor may not get a completion when reading the CQ after being
woken up from the wait.
The app has to do sread or wait on the file descriptor again.
This is needed because RxM uses a rendezvous protocol for large message
sends.
An app would get woken up from waiting on CQ fd when rendezvous protocol
request completes but it would have to wait again to get an ACK from the
receiver indicating completion of large message transfer by remote RMA
read.
.SS FI_ATOMIC limitations
.PP
The FI_ATOMIC capability will only be listed in the fi_info if the
fi_info hints parameter specifies FI_ATOMIC.
If FI_ATOMIC is requested, message order FI_ORDER_RAR, FI_ORDER_RAW,
FI_ORDER_WAR, FI_ORDER_WAW, FI_ORDER_SAR, and FI_ORDER_SAW can not be
supported.
.SS Miscellaneous limitations
.IP \[bu] 2
RxM protocol peers should have same endian\-ness otherwise connections
won\[aq]t successfully complete.
This enables better performance at run\-time as byte order translations
are avoided.
.SH RUNTIME PARAMETERS
.PP
The ofi_rxm provider checks for the following environment variables.
.TP
.B \f[I]FI_OFI_RXM_BUFFER_SIZE\f[]
Defines the transmit buffer size / inject size.
Messages of size less than this would be transmitted via an eager
protocol and those above would be transmitted via a rendezvous or SAR
(Segmentation And Reassembly) protocol.
Transmit data would be copied up to this size (default: ~16k).
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_COMP_PER_PROGRESS\f[]
Defines the maximum number of MSG provider CQ entries (default: 1) that
would be read per progress (RxM CQ read).
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_SAR_LIMIT\f[]
Set this environment variable to control the RxM SAR (Segmentation And
Reassembly) protocol.
Messages of size greater than this (default: 128 Kb) would be
transmitted via rendezvous protocol.
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_USE_SRX\f[]
Set this to 1 to use shared receive context from MSG provider.
This reduces overall memory usage but there may be a slight increase in
latency (default: 0).
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_TX_SIZE\f[]
Defines default TX context size (default: 1024)
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_RX_SIZE\f[]
Defines default RX context size (default: 1024)
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_MSG_TX_SIZE\f[]
Defines FI_EP_MSG TX size that would be requested (default: 128).
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_MSG_RX_SIZE\f[]
Defines FI_EP_MSG RX size that would be requested (default: 128).
.RS
.RE
.TP
.B \f[I]FI_UNIVERSE_SIZE\f[]
Defines the expected number of ranks / peers an endpoint would
communicate with (default: 256).
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_CM_PROGRESS_INTERVAL\f[]
Defines the duration of time in microseconds between calls to RxM CM
progression functions when using manual progress.
Higher values may provide less noise for calls to fi_cq read functions,
but may increase connection setup time (default: 10000)
.RS
.RE
.TP
.B \f[I]FI_OFI_RXM_CQ_EQ_FAIRNESS\f[]
Defines the maximum number of message provider CQ entries that can be
consecutively read across progress calls without checking to see if the
CM progress interval has been reached (default: 128)
.RS
.RE
.SH Tuning
.SS Bandwidth
.PP
To optimize for bandwidth, ensure you use higher values than default for
FI_OFI_RXM_TX_SIZE, FI_OFI_RXM_RX_SIZE, FI_OFI_RXM_MSG_TX_SIZE,
FI_OFI_RXM_MSG_RX_SIZE subject to memory limits of the system and the tx
and rx sizes supported by the MSG provider.
.PP
FI_OFI_RXM_SAR_LIMIT is another knob that can be experimented with to
optimze for bandwidth.
.SS Memory
.PP
To conserve memory, ensure FI_UNIVERSE_SIZE set to what is required.
Similarly check that FI_OFI_RXM_TX_SIZE, FI_OFI_RXM_RX_SIZE,
FI_OFI_RXM_MSG_TX_SIZE and FI_OFI_RXM_MSG_RX_SIZE env variables are set
to only required values.
.SH NOTES
.PP
The data transfer API may return \-FI_EAGAIN during on\-demand
connection setup of the core provider FI_MSG_EP.
See \f[C]fi_msg\f[](3) for a detailed description of handling FI_EAGAIN.
.SH Troubleshooting / Known issues
.PP
If an RxM endpoint is expected to communicate with more peers than the
default value of FI_UNIVERSE_SIZE (256) CQ overruns can happen.
To avoid this set a higher value for FI_UNIVERSE_SIZE.
CQ overrun can make a MSG endpoint unusable.
.PP
At higher # of ranks, there may be connection errors due to a node
running out of memory.
The workaround is to use shared receive contexts for the MSG provider
(FI_OFI_RXM_USE_SRX=1) or reduce eager message size
(FI_OFI_RXM_BUFFER_SIZE) and MSG provider TX/RX queue sizes
(FI_OFI_RXM_MSG_TX_SIZE / FI_OFI_RXM_MSG_RX_SIZE).
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7), \f[C]fi_getinfo\f[](3)
.SH AUTHORS
OpenFabrics.
