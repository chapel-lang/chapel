.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "fi_psm" "7" "2018\-10\-05" "Libfabric Programmer\[aq]s Manual" "Libfabric v1.10.1"
.hy
.SH NAME
.PP
fi_psm \- The PSM Fabric Provider
.SH OVERVIEW
.PP
The \f[I]psm\f[] provider runs over the PSM 1.x interface that is
currently supported by the Intel TrueScale Fabric.
PSM provides tag\-matching message queue functions that are optimized
for MPI implementations.
PSM also has limited Active Message support, which is not officially
published but is quite stable and well documented in the source code
(part of the OFED release).
The \f[I]psm\f[] provider makes use of both the tag\-matching message
queue functions and the Active Message functions to support a variety of
libfabric data transfer APIs, including tagged message queue, message
queue, RMA, and atomic operations.
.PP
The \f[I]psm\f[] provider can work with the psm2\-compat library, which
exposes a PSM 1.x interface over the Intel Omni\-Path Fabric.
.SH LIMITATIONS
.PP
The \f[I]psm\f[] provider doesn\[aq]t support all the features defined
in the libfabric API.
Here are some of the limitations:
.TP
.B Endpoint types
Only support non\-connection based types \f[I]FI_DGRAM\f[] and
\f[I]FI_RDM\f[]
.RS
.RE
.TP
.B Endpoint capabilities
Endpoints can support any combination of data transfer capabilities
\f[I]FI_TAGGED\f[], \f[I]FI_MSG\f[], \f[I]FI_ATOMICS\f[], and
\f[I]FI_RMA\f[].
These capabilities can be further refined by \f[I]FI_SEND\f[],
\f[I]FI_RECV\f[], \f[I]FI_READ\f[], \f[I]FI_WRITE\f[],
\f[I]FI_REMOTE_READ\f[], and \f[I]FI_REMOTE_WRITE\f[] to limit the
direction of operations.
The limitation is that no two endpoints can have overlapping receive or
RMA target capabilities in any of the above categories.
For example it is fine to have two endpoints with \f[I]FI_TAGGED\f[] |
\f[I]FI_SEND\f[], one endpoint with \f[I]FI_TAGGED\f[] |
\f[I]FI_RECV\f[], one endpoint with \f[I]FI_MSG\f[], one endpoint with
\f[I]FI_RMA\f[] | \f[I]FI_ATOMICS\f[].
But it is not allowed to have two endpoints with \f[I]FI_TAGGED\f[], or
two endpoints with \f[I]FI_RMA\f[].
.RS
.RE
.PP
\f[I]FI_MULTI_RECV\f[] is supported for non\-tagged message queue only.
.PP
Other supported capabilities include \f[I]FI_TRIGGER\f[].
.TP
.B Modes
\f[I]FI_CONTEXT\f[] is required for the \f[I]FI_TAGGED\f[] and
\f[I]FI_MSG\f[] capabilities.
That means, any request belonging to these two categories that generates
a completion must pass as the operation context a valid pointer to type
\f[I]struct fi_context\f[], and the space referenced by the pointer must
remain untouched until the request has completed.
If none of \f[I]FI_TAGGED\f[] and \f[I]FI_MSG\f[] is asked for, the
\f[I]FI_CONTEXT\f[] mode is not required.
.RS
.RE
.TP
.B Progress
The \f[I]psm\f[] provider requires manual progress.
The application is expected to call \f[I]fi_cq_read\f[] or
\f[I]fi_cntr_read\f[] function from time to time when no other libfabric
function is called to ensure progress is made in a timely manner.
The provider does support auto progress mode.
However, the performance can be significantly impacted if the
application purely depends on the provider to make auto progress.
.RS
.RE
.TP
.B Unsupported features
These features are unsupported: connection management, scalable
endpoint, passive endpoint, shared receive context, send/inject with
immediate data.
.RS
.RE
.SH RUNTIME PARAMETERS
.PP
The \f[I]psm\f[] provider checks for the following environment
variables:
.TP
.B \f[I]FI_PSM_UUID\f[]
PSM requires that each job has a unique ID (UUID).
All the processes in the same job need to use the same UUID in order to
be able to talk to each other.
The PSM reference manual advises to keep UUID unique to each job.
In practice, it generally works fine to reuse UUID as long as (1) no two
jobs with the same UUID are running at the same time; and (2) previous
jobs with the same UUID have exited normally.
If running into "resource busy" or "connection failure" issues with
unknown reason, it is advisable to manually set the UUID to a value
different from the default.
.RS
.RE
.PP
The default UUID is 0FFF0FFF\-0000\-0000\-0000\-0FFF0FFF0FFF.
.TP
.B \f[I]FI_PSM_NAME_SERVER\f[]
The \f[I]psm\f[] provider has a simple built\-in name server that can be
used to resolve an IP address or host name into a transport address
needed by the \f[I]fi_av_insert\f[] call.
The main purpose of this name server is to allow simple client\-server
type applications (such as those in \f[I]fabtests\f[]) to be written
purely with libfabric, without using any out\-of\-band communication
mechanism.
For such applications, the server would run first to allow endpoints be
created and registered with the name server, and then the client would
call \f[I]fi_getinfo\f[] with the \f[I]node\f[] parameter set to the IP
address or host name of the server.
The resulting \f[I]fi_info\f[] structure would have the transport
address of the endpoint created by the server in the \f[I]dest_addr\f[]
field.
Optionally the \f[I]service\f[] parameter can be used in addition to
\f[I]node\f[].
Notice that the \f[I]service\f[] number is interpreted by the provider
and is not a TCP/IP port number.
.RS
.RE
.PP
The name server is on by default.
It can be turned off by setting the variable to 0.
This may save a small amount of resource since a separate thread is
created when the name server is on.
.PP
The provider detects OpenMPI and MPICH runs and changes the default
setting to off.
.TP
.B \f[I]FI_PSM_TAGGED_RMA\f[]
The RMA functions are implemented on top of the PSM Active Message
functions.
The Active Message functions have limit on the size of data can be
transferred in a single message.
Large transfers can be divided into small chunks and be pipe\-lined.
However, the bandwidth is sub\-optimal by doing this way.
.RS
.RE
.PP
The \f[I]psm\f[] provider use PSM tag\-matching message queue functions
to achieve higher bandwidth for large size RMA.
For this purpose, a bit is reserved from the tag space to separate the
RMA traffic from the regular tagged message queue.
.PP
The option is on by default.
To turn it off set the variable to 0.
.TP
.B \f[I]FI_PSM_AM_MSG\f[]
The \f[I]psm\f[] provider implements the non\-tagged message queue over
the PSM tag\-matching message queue.
One tag bit is reserved for this purpose.
Alternatively, the non\-tagged message queue can be implemented over
Active Message.
This experimental feature has slightly larger latency.
.RS
.RE
.PP
This option is off by default.
To turn it on set the variable to 1.
.TP
.B \f[I]FI_PSM_DELAY\f[]
Time (seconds) to sleep before closing PSM endpoints.
This is a workaround for a bug in some versions of PSM library.
.RS
.RE
.PP
The default setting is 1.
.TP
.B \f[I]FI_PSM_TIMEOUT\f[]
Timeout (seconds) for gracefully closing PSM endpoints.
A forced closing will be issued if timeout expires.
.RS
.RE
.PP
The default setting is 5.
.TP
.B \f[I]FI_PSM_PROG_INTERVAL\f[]
When auto progress is enabled (asked via the hints to
\f[I]fi_getinfo\f[]), a progress thread is created to make progress
calls from time to time.
This option set the interval (microseconds) between progress calls.
.RS
.RE
.PP
The default setting is 1 if affinity is set, or 1000 if not.
See \f[I]FI_PSM_PROG_AFFINITY\f[].
.TP
.B \f[I]FI_PSM_PROG_AFFINITY\f[]
When set, specify the set of CPU cores to set the progress thread
affinity to.
The format is
\f[C]<start>[:<end>[:<stride>]][,<start>[:<end>[:<stride>]]]*\f[], where
each triplet \f[C]<start>:<end>:<stride>\f[] defines a block of
core_ids.
Both \f[C]<start>\f[] and \f[C]<end>\f[] can be either the
\f[C]core_id\f[] (when >=0) or \f[C]core_id\ \-\ num_cores\f[] (when
<0).
.RS
.RE
.PP
By default affinity is not set.
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7), \f[C]fi_psm2\f[](7),
.SH AUTHORS
OpenFabrics.
