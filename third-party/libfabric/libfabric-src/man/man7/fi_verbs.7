.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "fi_verbs" "7" "2020\-04\-14" "Libfabric Programmer\[aq]s Manual" "Libfabric v1.10.1"
.hy
.SH NAME
.PP
fi_verbs \- The Verbs Fabric Provider
.SH OVERVIEW
.PP
The verbs provider enables applications using OFI to be run over any
verbs hardware (Infiniband, iWarp, etc).
It uses the Linux Verbs API for network transport and provides a
translation of OFI calls to appropriate verbs API calls.
It uses librdmacm for communication management and libibverbs for other
control and data transfer operations.
.SH REQUIREMENTS
.PP
To successfully build and install verbs provider as part of libfabric,
it needs the following packages: * libibverbs * libibverbs\-devel *
librdmacm * librdmacm\-devel
.PP
You may also want to look into any OS specific instructions for enabling
RDMA.
e.g.
RHEL has instructions on their documentation for enabling RDMA.
.PP
The IPoIB interface should be configured with a valid IP address.
This is a requirement from librdmacm.
.SH SUPPORTED FEATURES
.PP
The verbs provider supports a subset of OFI features.
.SS Endpoint types
.PP
FI_EP_MSG, FI_EP_DGRAM (beta), FI_EP_RDM.
.PP
FI_EP_RDM is supported via OFI RxM and RxD utility providers which are
layered on top of verbs.
To the app, the provider name string would appear as "verbs;ofi_rxm" or
"verbs;ofi_rxd".
Please refer the man pages for RxM (fi_rxm.7) and RxD (fi_rxd.7) to know
about the capabilities and limitations for the FI_EP_RDM endpoint.
.SS Endpoint capabilities and features
.SS MSG endpoints
.PP
FI_MSG, FI_RMA, FI_ATOMIC and shared receive contexts.
.SS DGRAM endpoints
.PP
FI_MSG
.SS Modes
.PP
Verbs provider requires applications to support the following modes:
.SS FI_EP_MSG endpoint type
.IP \[bu] 2
FI_LOCAL_MR / FI_MR_LOCAL mr mode.
.IP \[bu] 2
FI_RX_CQ_DATA for applications that want to use RMA.
Applications must take responsibility of posting receives for any
incoming CQ data.
.SS Addressing Formats
.PP
Supported addressing formats include * MSG and RDM (internal \-
deprecated) EPs support: FI_SOCKADDR, FI_SOCKADDR_IN, FI_SOCKADDR_IN6,
FI_SOCKADDR_IB * DGRAM supports: FI_ADDR_IB_UD
.SS Progress
.PP
Verbs provider supports FI_PROGRESS_AUTO: Asynchronous operations make
forward progress automatically.
.SS Operation flags
.PP
Verbs provider supports FI_INJECT, FI_COMPLETION, FI_REMOTE_CQ_DATA,
FI_TRANSMIT_COMPLETE.
.SS Msg Ordering
.PP
Verbs provider support the following message ordering:
.IP \[bu] 2
Read after Read
.IP \[bu] 2
Read after Write
.IP \[bu] 2
Read after Send
.IP \[bu] 2
Write after Write
.IP \[bu] 2
Write after Send
.IP \[bu] 2
Send after Write
.IP \[bu] 2
Send after Send
.PP
and the following completion ordering:
.IP \[bu] 2
TX contexts: FI_ORDER_STRICT
.IP \[bu] 2
RX contexts: FI_ORDER_DATA
.SS Fork
.PP
Verbs provider does not provide fork safety by default.
Fork safety can be requested by setting IBV_FORK_SAFE, or
RDMAV_FORK_SAFE.
If the system configuration supports the use of huge pages, it is
recommended to set RDMAV_HUGEPAGES_SAFE.
See ibv_fork_init(3) for additional details.
.SS Memory Registration Cache
.PP
The verbs provider uses the common memory registration cache
functionality that\[aq]s part of libfabric utility code.
This speeds up memory registration calls from applications by caching
registrations of frequently used memory regions.
Please refer to fi_mr(3): Memory Registration Cache section for more
details.
.SH LIMITATIONS
.SS Memory Regions
.PP
Only FI_MR_BASIC mode is supported.
Adding regions via s/g list is supported only up to a s/g list size of
1.
No support for binding memory regions to a counter.
.SS Wait objects
.PP
Only FI_WAIT_FD wait object is supported only for FI_EP_MSG endpoint
type.
Wait sets are not supported.
.SS Resource Management
.PP
Application has to make sure CQs are not overrun as this cannot be
detected by the provider.
.SS Unsupported Features
.PP
The following features are not supported in verbs provider:
.SS Unsupported Capabilities
.PP
FI_NAMED_RX_CTX, FI_DIRECTED_RECV, FI_TRIGGER, FI_RMA_EVENT
.SS Other unsupported features
.PP
Scalable endpoints, FABRIC_DIRECT
.SS Unsupported features specific to MSG endpoints
.IP \[bu] 2
Counters, FI_SOURCE, FI_TAGGED, FI_PEEK, FI_CLAIM, fi_cancel,
fi_ep_alias, shared TX context, cq_readfrom operations.
.IP \[bu] 2
Completion flags are not reported if a request posted to an endpoint
completes in error.
.SS Fork
.PP
The support for fork in the provider has the following limitations:
.IP \[bu] 2
Fabric resources like endpoint, CQ, EQ, etc.
should not be used in the forked process.
.IP \[bu] 2
The memory registered using fi_mr_reg has to be page aligned since
ibv_reg_mr marks the entire page that a memory region belongs to as not
to be re\-mapped when the process is forked (MADV_DONTFORK).
.SS XRC Transport
.PP
The XRC transport is intended to be used when layered with the RXM
provider and requires the use of shared receive contexts.
See \f[C]fi_rxm\f[](7).
.SH RUNTIME PARAMETERS
.PP
The verbs provider checks for the following environment variables.
.SS Common variables:
.TP
.B \f[I]FI_VERBS_TX_SIZE\f[]
Default maximum tx context size (default: 384)
.RS
.RE
.TP
.B \f[I]FI_VERBS_RX_SIZE\f[]
Default maximum rx context size (default: 384)
.RS
.RE
.TP
.B \f[I]FI_VERBS_TX_IOV_LIMIT\f[]
Default maximum tx iov_limit (default: 4).
Note: RDM (internal \- deprecated) EP type supports only 1
.RS
.RE
.TP
.B \f[I]FI_VERBS_RX_IOV_LIMIT\f[]
Default maximum rx iov_limit (default: 4).
Note: RDM (internal \- deprecated) EP type supports only 1
.RS
.RE
.TP
.B \f[I]FI_VERBS_INLINE_SIZE\f[]
Default maximum inline size.
Actual inject size returned in fi_info may be greater (default: 64)
.RS
.RE
.TP
.B \f[I]FI_VERBS_MIN_RNR_TIMER\f[]
Set min_rnr_timer QP attribute (0 \- 31) (default: 12)
.RS
.RE
.TP
.B \f[I]FI_VERBS_CQREAD_BUNCH_SIZE\f[]
The number of entries to be read from the verbs completion queue at a
time (default: 8).
.RS
.RE
.TP
.B \f[I]FI_VERBS_PREFER_XRC\f[]
Prioritize XRC transport fi_info before RC transport fi_info (default:
0, RC fi_info will be before XRC fi_info)
.RS
.RE
.TP
.B \f[I]FI_VERBS_GID_IDX\f[]
The GID index to use (default: 0)
.RS
.RE
.TP
.B \f[I]FI_VERBS_DEVICE_NAME\f[]
Specify a specific verbs device to use by name
.RS
.RE
.SS Variables specific to MSG endpoints
.TP
.B \f[I]FI_VERBS_IFACE\f[]
The prefix or the full name of the network interface associated with the
verbs device (default: ib)
.RS
.RE
.SS Variables specific to DGRAM endpoints
.TP
.B \f[I]FI_VERBS_DGRAM_USE_NAME_SERVER\f[]
The option that enables/disables OFI Name Server thread.
The NS thread is used to resolve IP\-addresses to provider specific
addresses (default: 1, if "OMPI_COMM_WORLD_RANK" and "PMI_RANK"
environment variables aren\[aq]t defined)
.RS
.RE
.TP
.B \f[I]FI_VERBS_NAME_SERVER_PORT\f[]
The port on which Name Server thread listens incoming connections and
requests (default: 5678)
.RS
.RE
.SS Environment variables notes
.PP
The fi_info utility would give the up\-to\-date information on
environment variables: fi_info \-p verbs \-e
.SH Troubleshooting / Known issues
.SS fi_getinfo returns \-FI_ENODATA
.IP \[bu] 2
Set FI_LOG_LEVEL=info or FI_LOG_LEVEL=debug (if debug build of libfabric
is available) and check if there any errors because of incorrect input
parameters to fi_getinfo.
.IP \[bu] 2
Check if "fi_info \-p verbs" is successful.
If that fails the following checklist may help in ensuring that the RDMA
verbs stack is functional:
.IP \[bu] 2
If libfabric was compiled, check if verbs provider was built.
Building verbs provider would be skipped if its dependencies (listed in
requirements) aren\[aq]t available on the system.
.IP \[bu] 2
Verify verbs device is functional:
.RS 2
.IP \[bu] 2
Does ibv_rc_pingpong (available in libibverbs) test work?
.IP \[bu] 2
Does ibv_devinfo (available in libibverbs) show the device with
PORT_ACTIVE status?
.RS 2
.IP \[bu] 2
Check if Subnet Manager (SM) is running on the switch or on one of the
nodes in the cluster.
.IP \[bu] 2
Is the cable connected?
.RE
.RE
.IP \[bu] 2
Verify librdmacm is functional:
.RS 2
.IP \[bu] 2
Does ucmatose test (available in librdmacm) work?
.IP \[bu] 2
Is the IPoIB interface (e.g.
ib0) up and configured with a valid IP address?
.RE
.SS Other issues
.PP
When running an app over verbs provider with Valgrind, there may be
reports of memory leak in functions from dependent libraries (e.g.
libibverbs, librdmacm).
These leaks are safe to ignore.
.PP
The provider protects CQ overruns that may happen because more TX
operations were posted to endpoints than CQ size.
On the receive side, it isn\[aq]t expected to overrun the CQ.
In case it happens the application developer should take care not to
post excess receives without draining the CQ.
CQ overruns can make the MSG endpoints unusable.
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7),
.SH AUTHORS
OpenFabrics.
