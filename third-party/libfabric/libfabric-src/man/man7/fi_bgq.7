.\" Automatically generated by Pandoc 2.5
.\"
.TH "fi_bgq" "7" "2021\-03\-22" "Libfabric Programmer\[cq]s Manual" "Libfabric v1.13.2"
.hy
.SH NAME
.PP
fi_bgq \- The Blue Gene/Q Fabric Provider
.SH OVERVIEW
.PP
The bgq provider is a native implementation of the libfabric interfaces
that makes direct use of the unique hardware features such as the
Messaging Unit (MU), Base Address Table (BAT), and L2 Atomics.
.PP
The purpose of this provider is to demonstrate the scalability and
performance of libfabric, providing an \[lq]extreme scale\[rq]
development environment for applications and middleware using the
libfabric API, and to support a functional and performant version of
MPI3 on Blue Gene/Q via MPICH CH4.
.SH SUPPORTED FEATURES
.PP
The bgq provider supports most features defined for the libfabric API.
Key features include:
.TP
.B \f[I]Endpoint types\f[R]
The Blue Gene/Q hardware is connectionless and reliable.
Therefore, the bgq provider only supports the \f[I]FI_EP_RDM\f[R]
endpoint type.
.TP
.B \f[I]Capabilities\f[R]
Supported capabilities include \f[I]FI_MSG\f[R], \f[I]FI_RMA\f[R],
\f[I]FI_TAGGED\f[R], \f[I]FI_ATOMIC\f[R], \f[I]FI_NAMED_RX_CTX\f[R],
\f[I]FI_READ\f[R], \f[I]FI_WRITE\f[R], \f[I]FI_SEND\f[R],
\f[I]FI_RECV\f[R], \f[I]FI_REMOTE_READ\f[R], \f[I]FI_REMOTE_WRITE\f[R],
\f[I]FI_MULTI_RECV\f[R], \f[I]FI_DIRECTED_RECV\f[R], \f[I]FI_SOURCE\f[R]
and \f[I]FI_FENCE\f[R].
.PP
Notes on FI_DIRECTED_RECV capability: The immediate data which is sent
within the \f[I]senddata\f[R] call to support FI_DIRECTED_RECV for BGQ
must be exactly 4 bytes, which BGQ uses to completely identify the
source address to an exascale\-level number of ranks for tag matching on
the recv and can be managed within the MU packet.
Therefore the domain attribute cq_data_size is set to 4 which is the OFI
standard minimum.
.TP
.B \f[I]Modes\f[R]
The bgq provider requires \f[I]FI_CONTEXT\f[R] and
\f[I]FI_ASYNC_IOV\f[R]
.TP
.B \f[I]Memory registration modes\f[R]
Both FI_MR_SCALABLE and FI_MR_BASIC are supported, specified at
configuration time with the \[lq]\[en]with\-bgq\-mr\[rq] configure
option.
The base address table utilized by FI_MR_SCALABLE for rdma transfers is
completely software emulated, supporting FI_ATOMIC, FI_READ, FI_WRITE,
FI_REMOTE_READ, and FI_REMOTE_WRITE capabilities.
With FI_MR_BASIC the FI_WRITE is completely hardware accelerated, the
other rdma transfers are still software emulated but the use of a base
address table is no longer required as the offset is now the virtual
address of the memory from the application and the key is the delta from
which the physical address can be computed if necessary.
.TP
.B \f[I]Additional features\f[R]
Supported additional features include \f[I]FABRIC_DIRECT\f[R],
\f[I]scalable endpoints\f[R], and \f[I]counters\f[R].
.TP
.B \f[I]Progress\f[R]
Both progress modes, \f[I]FI_PROGRESS_AUTO\f[R] and
\f[I]FI_PROGRESS_MANUAL\f[R], are supported.
The progress mode may be specified via the
\[lq]\[en]with\-bgq\-progress\[rq] configure option.
.TP
.B \f[I]Address vector\f[R]
Only the \f[I]FI_AV_MAP\f[R] address vector format is supported.
.SH UNSUPPORTED FEATURES
.TP
.B \f[I]Endpoint types\f[R]
Unsupported endpoint types include \f[I]FI_EP_DGRAM\f[R] and
\f[I]FI_EP_MSG\f[R]
.TP
.B \f[I]Capabilities\f[R]
The bgq provider does not support the \f[I]FI_RMA_EVENT\f[R], and
\f[I]FI_TRIGGER\f[R] capabilities.
.TP
.B \f[I]Address vector\f[R]
The bgq provider does not support the \f[I]FI_AV_TABLE\f[R] address
vector format.
Support for \f[I]FI_AV_TABLE\f[R] may be added in the future.
.SH LIMITATIONS
.PP
The bgq provider only supports \f[I]FABRIC_DIRECT\f[R].
The size of the fi_context structure for \f[I]FI_CONTEXT\f[R] is too
small to be useful.
In the `direct' mode the bgq provider can re\-define the struct
fi_context to a larger size \- currently 64 bytes which is the L1 cache
size.
.PP
The fi_context structure for \f[I]FI_CONTEXT\f[R] must be aligned to 8
bytes.
This requirement is because the bgq provider will use MU network atomics
to track completions and the memory used with MU atomic operations must
be aligned to 8 bytes.
Unfortunately, the libfabric API has no mechanism for applications to
programmatically determine these alignment requirements.
Because unaligned MU atomics operations are a fatal error, the bgq
provider will assert on the alignment for \[lq]debug\[rq] builds (i.e.,
the `\-DNDEBUG' pre\-processor flag is not specified).
.PP
The progress thread used for \f[I]FI_PROGRESS_AUTO\f[R] effectively
limits the maximum number of ranks\-per\-node to 32.
However for FI_PROGRESS_MANUAL the maximum is 64.
.PP
For FI_MR_SCALABLE mr mode the memory region key size (mr_key_size) is 2
\f[I]bytes\f[R]; Valid key values are 0..2\[ha]16\-1.
.PP
It is invalid to register memory at the base virtual address \[lq]0\[rq]
with a length of \[lq]UINTPTR_MAX\[rq] (or equivalent).
The Blue Gene/Q hardware operates on 37\-bit physical addresses and all
virtual addresses specified in the libfabric API, such as the location
of source/destination data and remote memory locations, must be
converted to a physical address before use.
A 64\-bit virtual address space will not fit into a 37\-bit physical
address space.
.PP
fi_trecvmsg() fnd fi_recvmsg() unctions do not support non\-contiguous
receives and the iovec count must be 1.
The fi_trecvv() and fi_recvv() functions are currently not supported.
.SH RUNTIME PARAMETERS
.PP
No runtime parameters are currently defined.
.SH SEE ALSO
.PP
\f[C]fabric\f[R](7), \f[C]fi_provider\f[R](7), \f[C]fi_getinfo\f[R](3)
.SH AUTHORS
OpenFabrics.
