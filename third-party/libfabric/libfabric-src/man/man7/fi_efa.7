.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "fi_efa" "7" "2020\-04\-22" "Libfabric Programmer\[aq]s Manual" "Libfabric v1.10.1"
.hy
.SH NAME
.PP
fi_efa \- The Amazon Elastic Fabric Adapter (EFA) Provider
.SH OVERVIEW
.PP
The EFA provider supports the Elastic Fabric Adapter (EFA) device on
Amazon EC2.
EFA provides reliable and unreliable datagram send/receive with direct
hardware access from userspace (OS bypass).
.SH SUPPORTED FEATURES
.PP
The following features are supported:
.TP
.B \f[I]Endpoint types\f[]
The provider supports endpoint type \f[I]FI_EP_DGRAM\f[], and
\f[I]FI_EP_RDM\f[] on a new Scalable (unordered) Reliable Datagram
protocol (SRD).
SRD provides support for reliable datagrams and more complete error
handling than typically seen with other Reliable Datagram (RD)
implementations.
The EFA provider provides segmentation, reassembly of out\-of\-order
packets to provide send\-after\-send ordering guarantees to applications
via its \f[I]FI_EP_RDM\f[] endpoint.
.RS
.RE
.TP
.B \f[I]RDM Endpoint capabilities\f[]
The following data transfer interfaces are supported via the
\f[I]FI_EP_RDM\f[] endpoint: \f[I]FI_MSG\f[], \f[I]FI_TAGGED\f[], and
\f[I]FI_RMA\f[].
\f[I]FI_SEND\f[], \f[I]FI_RECV\f[], \f[I]FI_DIRECTED_RECV\f[],
\f[I]FI_MULTI_RECV\f[], and \f[I]FI_SOURCE\f[] capabilities are
supported.
The endpoint provides send\-after\-send guarantees for data operations.
The \f[I]FI_EP_RDM\f[] endpoint does not have a maximum message size.
.RS
.RE
.TP
.B \f[I]DGRAM Endpoint capabilities\f[]
The DGRAM endpoint only supports \f[I]FI_MSG\f[] capability with a
maximum message size of the MTU of the underlying hardware
(approximately 8 KiB).
.RS
.RE
.TP
.B \f[I]Address vectors\f[]
The provider supports \f[I]FI_AV_TABLE\f[] and \f[I]FI_AV_MAP\f[]
address vector types.
\f[I]FI_EVENT\f[] is unsupported.
.RS
.RE
.TP
.B \f[I]Completion events\f[]
The provider supports \f[I]FI_CQ_FORMAT_CONTEXT\f[],
\f[I]FI_CQ_FORMAT_MSG\f[], and \f[I]FI_CQ_FORMAT_DATA\f[].
\f[I]FI_CQ_FORMAT_TAGGED\f[] is supported on the RDM endpoint.
Wait objects are not currently supported.
.RS
.RE
.TP
.B \f[I]Modes\f[]
The provider requires the use of \f[I]FI_MSG_PREFIX\f[] when running
over the DGRAM endpoint, and requires \f[I]FI_MR_LOCAL\f[] for all
memory registrations on the DGRAM endpoint.
.RS
.RE
.TP
.B \f[I]Memory registration modes\f[]
The RDM endpoint does not require memory registration and the
\f[I]FI_EP_DGRAM\f[] endpoint only supports \f[I]FI_MR_LOCAL\f[].
.RS
.RE
.TP
.B \f[I]Progress\f[]
The RDM endpoint supports both \f[I]FI_PROGRESS_AUTO\f[] and
\f[I]FI_PROGRESS_MANUAL\f[], with the default set to auto.
However, receive side data buffers are not modified outside of
completion processing routines.
The DGRAM endpoint only supports \f[I]FI_PROGRESS_MANUAL\f[].
.RS
.RE
.TP
.B \f[I]Threading\f[]
The RDM endpoint supports \f[I]FI_THREAD_SAFE\f[], the DGRAM endpoint
supports \f[I]FI_THREAD_DOMAIN\f[], i.e.
the provider is not thread safe when using the DGRAM endpoint.
.RS
.RE
.SH LIMITATIONS
.PP
The provider does not support \f[I]FI_ATOMIC\f[] interfaces.
For RMA operations, completion events for RMA targets
(\f[I]FI_RMA_EVENT\f[]) is not supported.
The DGRAM endpoint does not fully protect against resource overruns, so
resource management is disabled for this endpoint
(\f[I]FI_RM_DISABLED\f[]).
.PP
No support for selective completions.
.PP
No support for counters.
.PP
No support for inject.
.SH RUNTIME PARAMETERS
.TP
.B \f[I]FI_EFA_TX_SIZE\f[]
Maximum number of transmit operations before the provider returns
\-FI_EAGAIN.
For only the RDM endpoint, this parameter will cause transmit operations
to be queued when this value is set higher than the default and the
transmit queue is full.
.RS
.RE
.TP
.B \f[I]FI_EFA_RX_SIZE\f[]
Maximum number of receive operations before the provider returns
\-FI_EAGAIN.
.RS
.RE
.TP
.B \f[I]FI_EFA_TX_IOV_LIMIT\f[]
Maximum number of IOVs for a transmit operation.
.RS
.RE
.TP
.B \f[I]FI_EFA_RX_IOV_LIMIT\f[]
Maximum number of IOVs for a receive operation.
.RS
.RE
.SH RUNTIME PARAMETERS SPECIFIC TO RDM ENDPOINT
.PP
These OFI runtime parameters apply only to the RDM endpoint.
.TP
.B \f[I]FI_EFA_RX_WINDOW_SIZE\f[]
Maximum number of MTU\-sized messages that can be in flight from any
single endpoint as part of long message data transfer.
.RS
.RE
.TP
.B \f[I]FI_EFA_TX_QUEUE_SIZE\f[]
Depth of transmit queue opened with the NIC.
This may not be set to a value greater than what the NIC supports.
.RS
.RE
.TP
.B \f[I]FI_EFA_RECVWIN_SIZE\f[]
Size of out of order reorder buffer (in messages).
Messages received out of this window will result in an error.
.RS
.RE
.TP
.B \f[I]FI_EFA_CQ_SIZE\f[]
Size of any cq created, in number of entries.
.RS
.RE
.TP
.B \f[I]FI_EFA_MR_CACHE_ENABLE\f[]
Enables using the mr cache and in\-line registration instead of a bounce
buffer for iov\[aq]s larger than max_memcpy_size.
Defaults to true.
When disabled, only uses a bounce buffer
.RS
.RE
.TP
.B \f[I]FI_EFA_MR_MAX_CACHED_COUNT\f[]
Sets the maximum number of memory registrations that can be cached at
any time.
.RS
.RE
.TP
.B \f[I]FI_EFA_MR_MAX_CACHED_SIZE\f[]
Sets the maximum amount of memory that cached memory registrations can
hold onto at any time.
.RS
.RE
.TP
.B \f[I]FI_EFA_MAX_MEMCPY_SIZE\f[]
Threshold size switch between using memory copy into a pre\-registered
bounce buffer and memory registration on the user buffer.
.RS
.RE
.TP
.B \f[I]FI_EFA_MTU_SIZE\f[]
Overrides the default MTU size of the device.
.RS
.RE
.TP
.B \f[I]FI_EFA_RX_COPY_UNEXP\f[]
Enables the use of a separate pool of bounce\-buffers to copy unexpected
messages out of the pre\-posted receive buffers.
.RS
.RE
.TP
.B \f[I]FI_EFA_RX_COPY_OOO\f[]
Enables the use of a separate pool of bounce\-buffers to copy
out\-of\-order RTS packets out of the pre\-posted receive buffers.
.RS
.RE
.TP
.B \f[I]FI_EFA_MAX_TIMEOUT\f[]
Maximum timeout (us) for backoff to a peer after a receiver not ready
error.
.RS
.RE
.TP
.B \f[I]FI_EFA_TIMEOUT_INTERVAL\f[]
Time interval (us) for the base timeout to use for exponential backoff
to a peer after a receiver not ready error.
.RS
.RE
.TP
.B \f[I]FI_EFA_ENABLE_SHM_TRANSFER\f[]
Enable SHM provider to provide the communication across all intra\-node
processes.
SHM transfer will be disabled in the case where
\f[C]ptrace\ protection\f[] is turned on.
You can turn it off to enable shm transfer.
.RS
.RE
.TP
.B \f[I]FI_EFA_SHM_AV_SIZE\f[]
Defines the maximum number of entries in SHM provider\[aq]s address
vector.
.RS
.RE
.TP
.B \f[I]FI_EFA_SHM_MAX_MEDIUM_SIZE\f[]
Defines the switch point between small/medium message and large message.
The message larger than this switch point will be transferred with large
message protocol.
.RS
.RE
.TP
.B \f[I]FI_EFA_INTER_MAX_MEDIUM_MESSAGE_SIZE\f[]
The maximum size for inter EFA messages to be sent by using medium
message protocol.
Messages which can fit in one packet will be sent as eager message.
Messages whose sizes are smaller than this value will be sent using
medium message protocol.
Other messages will be sent using CTS based long message protocol.
.RS
.RE
.SH SEE ALSO
.PP
\f[C]fabric\f[](7), \f[C]fi_provider\f[](7), \f[C]fi_getinfo\f[](3)
.SH AUTHORS
OpenFabrics.
