.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "fi_av_set" "3" "2020\-03\-20" "Libfabric Programmer\[aq]s Manual" "Libfabric v1.10.1"
.hy
.SH NAME
.PP
fi_av_set \- Address vector set operations
.TP
.B fi_av_set / fi_close
Open or close an address vector set
.RS
.RE
.TP
.B fi_av_set_union
Perform a set union operation on two AV sets
.RS
.RE
.TP
.B fi_av_set_intersect
Perform a set intersect operation on two AV sets
.RS
.RE
.TP
.B fi_av_set_diff
Perform a set difference operation on two AV sets
.RS
.RE
.TP
.B fi_av_set_insert
Add an address to an AV set
.RS
.RE
.TP
.B fi_av_set_remove
Remove an address from an AV set
.RS
.RE
.TP
.B fi_av_set_addr
Obtain a collective address for current addresses in an AV set
.RS
.RE
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <rdma/fi_collective.h>

int\ fi_av_set(struct\ fid_av\ *av,\ struct\ fi_av_set_attr\ *attr,
\ \ \ \ \ \ struct\ fid_av_set\ **set,\ void\ *\ context);

int\ fi_av_set_union(struct\ fid_av_set\ *dst,\ const\ struct\ fid_av_set\ *src);

int\ fi_av_set_intersect(struct\ fid_av_set\ *dst,\ const\ struct\ fid_av_set\ *src);

int\ fi_av_set_diff(struct\ fid_av_set\ *dst,\ const\ struct\ fid_av_set\ *src);

int\ fi_av_set_insert(struct\ fid_av_set\ *set,\ fi_addr_t\ addr);

int\ fi_av_set_remove(struct\ fid_av_set\ *set,\ fi_addr_t\ addr);

int\ fi_av_set_addr(struct\ fid_av_set\ *set,\ fi_addr_t\ *coll_addr);

int\ fi_close(struct\ fid\ *av_set);
\f[]
.fi
.SH ARGUMENTS
.TP
.B \f[I]av\f[]
Address vector
.RS
.RE
.TP
.B \f[I]set\f[]
Address vector set
.RS
.RE
.TP
.B \f[I]dst\f[]
Address vector set updated by set operation
.RS
.RE
.TP
.B \f[I]src\f[]
Address vector set providing input to a set operation
.RS
.RE
.TP
.B \f[I]attr\f[]
Address vector set attributes
.RS
.RE
.TP
.B \f[I]context\f[]
User specified context associated with the address vector set
.RS
.RE
.TP
.B \f[I]flags\f[]
Additional flags to apply to the operation.
.RS
.RE
.TP
.B \f[I]addr\f[]
Destination address to insert to remove from AV set.
.RS
.RE
.TP
.B \f[I]coll_addr\f[]
Address identifying collective group.
.RS
.RE
.SH DESCRIPTION
.PP
An address vector set (AV set) represents an ordered subset of addresses
of an address vector.
AV sets are used to identify the participants in a collective operation.
Endpoints use the fi_join_collective() operation to associate itself
with an AV set.
The join collective operation provides an fi_addr that is used when
communicating with a collective group.
.PP
The creation and manipulation of an AV set is a local operation.
No fabric traffic is exchanged between peers.
As a result, each peer is responsible for creating matching AV sets as
part of their collective membership definition.
See \f[C]fi_collective\f[](3) for a discussion of membership models.
.SS fi_av_set
.PP
The fi_av_set call creates a new AV set.
The initial properties of the AV set are specified through the struct
fi_av_set_attr parameter.
This structure is defined below, and allows including a subset of
addresses in the AV set as part of AV set creation.
Addresses may be added or removed from an AV set using the AV set
interfaces defined below.
.SS fi_av_set_attr
.IP
.nf
\f[C]
struct\ fi_av_set_attr\ {
\ \ \ \ size_t\ count;
\ \ \ \ fi_addr_t\ start_addr;
\ \ \ \ fi_addr_t\ end_addr;
\ \ \ \ uint64_t\ stride;
\ \ \ \ size_t\ comm_key_size;
\ \ \ \ uint8_t\ *comm_key;
\ \ \ \ uint64_t\ flags;
};
\f[]
.fi
.TP
.B \f[I]count\f[]
Indicates the expected the number of members that will be a part of the
AV set.
The provider uses this to optimize resource allocations.
If count is 0, the provider will select a size based on available system
configuration data or underlying limitations.
.RS
.RE
.TP
.B \f[I]start_addr / end_addr\f[]
The starting and ending addresses, inclusive, to include as part of the
AV set.
The use of start and end address require that the associated AV have
been created as type FI_AV_TABLE.
Valid addresses in the AV which fall within the specified range and
which meet other requirements (such as stride) will be added as initial
members to the AV set.
The start_addr and end_addr must be set to FI_ADDR_NOTAVAIL if creating
an empty AV set, a communication key is being provided, or the AV is of
type FI_AV_MAP.
.RS
.RE
.PP
The number of addresses between start_addr and end_addr must be less
than or equal to the specified count value.
.TP
.B \f[I]stride\f[]
The number of entries between successive addresses included in the AV
set.
The AV set will include all addresses from start_addr + stride x i, for
increasing, non\-negative, integer values of i, up to end_addr.
A stride of 1 indicates that all addresses between start_addr and
end_addr should be added to the AV set.
Stride should be set to 0 unless the start_addr and end_addr fields are
valid.
.RS
.RE
.TP
.B \f[I]comm_key_size\f[]
The length of the communication key in bytes.
This field should be 0 if a communication key is not available.
.RS
.RE
.TP
.B \f[I]comm_key\f[]
If supported by the fabric, this represents a key associated with the AV
set.
The communication key is used by applications that directly manage
collective membership through a fabric management agent or resource
manager.
The key is used to convey that results of the membership setup to the
underlying provider.
The use and format of a communication key is fabric provider specific.
.RS
.RE
.TP
.B \f[I]flags\f[]
If the flag FI_UNIVERSE is set, then the AV set will be created
containing all addresses stored in the AV.
.RS
.RE
.SS fi_av_set_union
.PP
The AV set union call adds all addresses in the source AV set that are
not in the destination AV set to the destination AV set.
Where ordering matters, the newly inserted addresses are placed at the
end of the AV set.
.SS fi_av_set_intersect
.PP
The AV set intersect call remove all addresses from the destination AV
set that are not also members of the source AV set.
The order of the addresses in the destination AV set is unchanged.
.SS fi_av_set_diff
.PP
The AV set difference call removes all address from the destination AV
set that are also members of the source AV set.
The order of the addresses in the destination AV set is unchanged.
.SS fi_av_set_insert
.PP
The AV set insert call appends the specified address to the end of the
AV set.
.SS fi_av_set_remove
.PP
The AV set remove call removes the specified address from the given AV
set.
The order of the remaining addresses in the AV set is unchanged.
.SS fi_av_set_addr
.PP
Returns an address that may be used to communicate with all current
members of an AV set.
This is a local operation only that does not involve network
communication.
The returned address may be used as input into fi_join_collective.
Note that attempting to use the address returned from fi_av_set_addr
(e.g.
passing it to fi_join_collective) while simultaneously modifying the
addresses stored in an AV set results in undefined behavior.
.SS fi_close
.PP
Closes an AV set and releases all resources associated with it.
Any operations active at the time an AV set is closed will be aborted,
with the result of the collective undefined.
.SH NOTES
.PP
Developers who are familiar with MPI will find that AV sets are similar
to MPI groups, and may act as a direct mapping in some, but not all,
situations.
.SH RETURN VALUES
.PP
Returns 0 on success.
On error, a negative value corresponding to fabric errno is returned.
Fabric errno values are defined in \f[C]rdma/fi_errno.h\f[].
.SH SEE ALSO
.PP
\f[C]fi_av\f[](3), \f[C]fi_collective\f[](3)
.SH AUTHORS
OpenFabrics.
