AMUDP Documentation
===================
Author: Dan Bonachea and Dan Hettena
Contact email: upc-devel@lbl.gov
Home page: http://gasnet.lbl.gov/amudp

AMUDP is an implementation of the AM-2 specification over UDP/IP. 

AMUDP is a portable implementation of the AM-2 specification that runs on UDP,
a standard component of the TCP/IP protocol suite that is ubiquitous across
platforms and operating systems.  The intent is a fully-portable implementation
that will work on any POSIX-like system.  We don't expect to achieve latency
performance competitive with a native implementation of AM optimized for
special purpose hardware, instead we seek to provide a compatibility layer that
will allow AM-based systems to quickly get up and running on virtually any
platform. The motivation for choosing UDP over other protocols (such as TCP) is
that it typically provides the lowest overhead access to the network with
little or no internal buffering, and the connectionless model is best suited
for scaling up the number of distributed processors. Because UDP occasionally
drops packets, we add a thin reliability layer that provides the guaranteed
delivery required by AM-2, hopefully providing this fault tolerance with better
performance than full-blown TCP. 

Design documentation for the original AMUDP implementation is available from
the website above. The current version of AMUDP strictly targets the BSD/POSIX
sockets layer - it no longer supports UFXP or native MS Windows sockets,
although Windows support is available via the Cygwin POSIX environment for
Windows (http://cygwin.com).

AMUDP includes an extension interface called AMUDP_SPMD that performs job
spawning and initialization services, using either ssh or a provided
site-specific job spawner. See the paper above and test code for details.

AMUDP is used to implement the GASNet communication system (http://gasnet.lbl.gov). 
Further documentation about using AMUDP is available in the udp-conduit
documentation: http://gasnet.lbl.gov/dist/udp-conduit/README

Requirements
------------

* C99 and C++98 compilers. The C++ STL is not used in any way.

* A POSIX-like environment, including BSD/POSIX sockets and file descriptors

* GNU Make and basic UNIX tools for the provided Makefiles

Limitations
-----------

AMUDP has a few notable departures from the AM-2 specification:

* The client must call AM_SetExpectedResources() exactly once on an endpoint
  after setting up the translation table and before making any calls to the
  transport functions (AM_Poll, AM_Reply* or AM_Request*). It is also an error to
  call AM_Map, AM_MapAny or AM_Unmap (which change the translation table) after
  the call to AM_SetExpectedResources().

* AM_PAR bundle/endpoint access is not implemented - this means AMUDP does
  not provide thread safety, but can be used in a thread-funnelled mode with
  locking at the client level.

* AM_GetXferM is not implemented.

* Clients should not take the address of AM_ entry point "functions", because
  many are implemented as macros.

