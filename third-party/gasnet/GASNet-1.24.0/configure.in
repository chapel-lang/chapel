dnl -*- m4 -*-

#   $Source: bitbucket.org:berkeleylab/gasnet.git/configure.in $
# Description: GASNet configure script
# Copyright 2002, Dan Bonachea <bonachea@cs.berkeley.edu>
# Based in part on the Titanium project configure script
# Terms of use are as specified in license.txt
AC_DEFUN([cv_prefix],[gasnet_cv_])

dnl Note that dist-hook rewrites AC_REVISION in the generated configure
dnl GASNET_TOOLSONLY_FALSE_BEGIN
AC_REVISION("no-version-control-info")
dnl GASNET_TOOLSONLY_FALSE_END
dnl GASNET_TOOLSONLY_TRUE_BEGIN
dnl AC_REVISION("no-version-control-info (tools only)")
dnl GASNET_TOOLSONLY_TRUE_END

# the "new" way
# AC_INIT(GASNet, 0.2)
# AC_CONFIG_SRCDIR(gasnet_tools.h)
# AM_INIT_AUTOMAKE([no-define])

# the "old" way
AC_INIT(gasnet_tools.h)
AC_PREREQ(2.13)
GASNET_FIX_SHELL
AC_CONFIG_AUX_DIR(config-aux)
 
AC_CANONICAL_SYSTEM
AC_VALIDATE_CACHED_SYSTEM_TUPLE

dnl Public release version packaging identifier:
AC_DEFUN([GASNET_RELEASE_VERSION_MAJOR_D],[1])
AC_DEFUN([GASNET_RELEASE_VERSION_MINOR_D],[24])
AC_DEFUN([GASNET_RELEASE_VERSION_PATCH_D],[0])
dnl GASNet spec version:
AC_DEFUN([GASNET_SPEC_VERSION_MAJOR_D],[1])
AC_DEFUN([GASNET_SPEC_VERSION_MINOR_D],[8])
dnl GASNet tools spec version:
AC_DEFUN([GASNETT_SPEC_VERSION_MAJOR_D],[1])
AC_DEFUN([GASNETT_SPEC_VERSION_MINOR_D],[8])

AC_DEFUN([GASNET_RELEASE_VERSION_D],
         [GASNET_RELEASE_VERSION_MAJOR_D.GASNET_RELEASE_VERSION_MINOR_D.GASNET_RELEASE_VERSION_PATCH_D])

dnl GASNET_TOOLSONLY_FALSE_BEGIN
AM_INIT_AUTOMAKE(GASNet, GASNET_RELEASE_VERSION_D, no-define)
dnl GASNET_TOOLSONLY_FALSE_END
dnl GASNET_TOOLSONLY_TRUE_BEGIN
dnl AM_INIT_AUTOMAKE(GASNet_Tools, GASNET_RELEASE_VERSION_D, no-define)
dnl GASNET_TOOLSONLY_TRUE_END

AC_PREFIX_DEFAULT(/usr/local/gasnet)
AM_CONFIG_HEADER(gasnet_config.h)

GASNET_START_CONFIGURE([AWK])
GASNET_DEFINE_CONFIGURE_VARS([GASNETI])
AM_CONDITIONAL(ALWAYS_TRUECOND, test -z "")
AM_CONDITIONAL(ALWAYS_FALSECOND, test -n "")

# Don't warn about unknown configure options (which probably belong to client)
GASNET_NO_CHECK_OPTS

# Set gasnet_toolsonly_mode based on how we Bootstrapped
gasnet_toolsonly_mode=no
dnl GASNET_TOOLSONLY_TRUE_BEGIN
dnl gasnet_toolsonly_mode=yes
dnl GASNET_TOOLSONLY_TRUE_END

dnl define version identifiers
AC_DEFINE_UNQUOTED(GASNET_RELEASE_VERSION_MAJOR,GASNET_RELEASE_VERSION_MAJOR_D)
AC_DEFINE_UNQUOTED(GASNET_RELEASE_VERSION_MINOR,GASNET_RELEASE_VERSION_MINOR_D)
AC_DEFINE_UNQUOTED(GASNET_RELEASE_VERSION_PATCH,GASNET_RELEASE_VERSION_PATCH_D)
AC_DEFINE_UNQUOTED(GASNETI_SPEC_VERSION_MAJOR,GASNET_SPEC_VERSION_MAJOR_D)
AC_DEFINE_UNQUOTED(GASNETI_SPEC_VERSION_MINOR,GASNET_SPEC_VERSION_MINOR_D)
AC_DEFINE_UNQUOTED(GASNETIT_SPEC_VERSION_MAJOR,GASNETT_SPEC_VERSION_MAJOR_D)
AC_DEFINE_UNQUOTED(GASNETIT_SPEC_VERSION_MINOR,GASNETT_SPEC_VERSION_MINOR_D)
dnl legacy defines:
AC_DEFINE_UNQUOTED(GASNETI_RELEASE_VERSION,GASNET_RELEASE_VERSION_D)

AC_PROG_AWK

########################################################################
##
##  Misc configure option processing
##

#     default: support pthreads if library found
#     --enable-pthreads: fail if pthreads lib not found 
#     --disable-pthreads: don't even look for pthreads library 
GASNET_IF_ENABLED_WITH_AUTO(pthreads, [enable use of pthreads (required to support pthreaded GASNet clients)],
                 [use_pthreads="yes"], [use_pthreads="no"], [use_pthreads="try"])

GASNET_FORBID_PROGRAM_TRANSFORM

# This is to support a very conservative implementation of
# GASNETE_FAST_ALIGNED_MEMCPY and other type-punning operations.
# It is to be enabled only to test if a given problem is related
# to our type-punning issues (see bug 1389)
GASNET_IF_ENABLED(conservative-local-copy, [enable use of conservative (slower) mechanism for local data movement (default is no)],[
  AC_DEFINE(GASNETI_BUG1389_WORKAROUND)
  GASNET_MSG_WARN([
-----------------------------------------------------------------------
 WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

 You passed --enable-conservative-local-copy
 This usually has a SERIOUS impact on performance, so you should NOT
 trust any performance numbers obtained from programs built
 using this GASNet installation!!!

 WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
-----------------------------------------------------------------------])])

########################################################################
##
##  Supporting Command-Line Tools
##

dnl     Store full paths, so we find right ones even if users have
dnl     some other version in their path
GASNET_PATH_PROGS(GMAKE, gmake make $MAKE, GNU make)
AC_MSG_CHECKING(for GNU make)
if $GMAKE --version | grep GNU ; then
  AC_MSG_RESULT(yes)
else
# We don't actually require GNU Make at the moment
#  AC_MSG_ERROR(cannot find a version of GNU make - please install GNU make and/or set \$GMAKE to indicate where it's located)
  GASNET_MSG_WARN([cannot find a version of GNU make - if you encounter make problems, install GNU make and/or set \$GMAKE to indicate where it's located])
fi
AC_SUBST(GMAKE)

dnl Other tools checked later, after PROG_CC check sets cross_compiling

########################################################################
##
##  Perl
##
## We do this early so we can use "$PERL -e" for complex configure tests.
GASNET_PROG_PERL
AC_SUBST(PERL)
PERLSTART=$TOP_BUILDDIR/other/perlstart
AC_SUBST_FILE(PERLSTART)


########################################################################
##
##  C/C++ Compilers
##

GASNET_PROG_CC
AC_PROG_LN_S
GASNET_BIGENDIAN
AC_CHECK_PROG(have_mpcc_r,mpcc_r,yes,no)

## specific compiler families

GASNET_FAMILY_CACHE_CHECK(C, CC, gasnet_cv_cc_family)

## compiler family early initialization

case "$CC_FAMILY" in
  GNU)  GASNET_GCC_VERSION_CHECK(CC)
        gcc_flag_prefix=''
        gcc_flag_delim=' '
        case "$CC_SUBFAMILY" in
          GCCFSS) AC_DEFINE(GASNETI_GCC_GCCFSS) ;;
          APPLE) AC_DEFINE(GASNETI_GCC_APPLE) ;;
          NVIDIA) gcc_flag_prefix='-Xcompiler '
                  gcc_flag_delim=','
                  ;;
        esac
        ;;
  MTA)  # override target_os for MTA, which may be wrong if cross-compiling
        target_os="mtx"   ;;
esac

if test "$cross_compiling" = "yes" ; then
  AC_DEFINE(GASNETI_CROSS_COMPILING)
fi

## discover bit width

GASNET_CHECK_SIZEOF(void *)
GASNETI_PTR_BITS=`expr $SIZEOF_VOID_P \* 8`
AC_SUBST(GASNETI_PTR_BITS)

###
# Allow user forced ARCH and/or ISA settings w/o the corresponding probes
# XXX: Incomplete...

GASNET_IF_ENABLED_NOHELP(arch-altix, [force_arch_altix=yes])
GASNET_IF_ENABLED_NOHELP(arch-ibmpe, [force_arch_ibmpe=yes])

### 
#
# choose the default CC flags
# NOTE: we intentionally *overwrite* CFLAGS with reasonable, well-tested values, 
# to avoid picking up bad default flags from AC_PROG_CC or the default user environment
# Users who want to insert a specific compiler flag for all builds should append it to $CC

dnl GASNET_TRY_WNO_FLAG(type,flag,action-on-success)  type=C or CXX
dnl As per bug 2718 gcc might silently ignore -Wno-such-flag, but not -Wsuch-flag
dnl XXX: Probably sufficient to just probe for -Wsuch-flag (but lie in AC_MSG_CHECKING)
AC_DEFUN([GASNET_TRY_WNO_FLAG],[
        ]GASNET_TRY_[$1]FLAG[([$2],
            ]GASNET_TRY_[$1]FLAG[(patsubst([$2],[Wno-],[W]),[$3]))])

case "$CC_FAMILY" in
  GNU)  GASNET_PUSHVAR(CFLAGS,"-O3")
	# prefer the --param inliner option(s), which give us finer control
        GASNET_TRY_CFLAG([${gcc_flag_prefix}--param${gcc_flag_delim}max-inline-insns-single=35000],
			 [CFLAGS="$CFLAGS ${gcc_flag_prefix}--param${gcc_flag_delim}max-inline-insns-single=35000"
			  GASNET_TRY_CFLAG([${gcc_flag_prefix}--param${gcc_flag_delim}max-inline-insns=100000],
					   [CFLAGS="$CFLAGS ${gcc_flag_prefix}--param${gcc_flag_delim}max-inline-insns=100000"])],
			 GASNET_TRY_CFLAG([${gcc_flag_prefix}-finline-limit=10000],
					  [CFLAGS="$CFLAGS ${gcc_flag_prefix}-finline-limit=10000"])
	)
	# gcc 3.4+ require new flags to enable full inlining
        GASNET_TRY_CFLAG([${gcc_flag_prefix}--param${gcc_flag_delim}inline-unit-growth=10000],
                         [CFLAGS="$CFLAGS ${gcc_flag_prefix}--param${gcc_flag_delim}inline-unit-growth=10000"])
        GASNET_TRY_CFLAG([${gcc_flag_prefix}--param${gcc_flag_delim}large-function-growth=200000],
                         [CFLAGS="$CFLAGS ${gcc_flag_prefix}--param${gcc_flag_delim}large-function-growth=200000"])
        # We'd like to use -Winline to detect call sites where the optimizer
        # ignores our inline function modifier (usually due to technical limitations)
  	# However, some versions of gcc issue spurious warnings with -Winline
        # for inlining operations which the user did not request.
        # Detect that gcc bug and avoid -Winline for those versions
        GASNET_TRY_CFLAG([${gcc_flag_prefix}-Winline],[
          noninlineCFLAGS="$CFLAGS"
          CFLAGS="$CFLAGS ${gcc_flag_prefix}-Winline"
          AC_MSG_CHECKING(for buggy -Winline)
          GASNET_TRY_CCOMPILE_WITHWARN([
           int foo() { return 0; }
           int bar() { return foo() + bar(); }
          ], [ 
           int x = bar(); 
          ], [ AC_MSG_RESULT(ok) # keep -Winline
          ], [ AC_MSG_RESULT(buggy)
               CFLAGS="$noninlineCFLAGS" # remove -Winline
          ], [ GASNET_MSG_ERROR(failure when detecting buggy -Winline)])
        ])

        CCOPTFLAGS="$CFLAGS"
	GASNET_POPVAR(CFLAGS)
  ;;
  Pathscale)
        GASNET_PUSHVAR(CFLAGS,"-O3")
        # We'd like to use -Winline (for the same reasons as with gcc).
  	# However, some installations have been observed to complain
        # on every inline keyword, due to -fno-inline being inserted
        # by the compiler driver.  Avoid using -Winline in such a case.
        GASNET_TRY_CFLAG([-Winline],[
          noninlineCFLAGS="$CFLAGS"
          CFLAGS="$CFLAGS -Winline"
          AC_MSG_CHECKING(for -Winline flags conflict)
          GASNET_TRY_CCOMPILE_WITHWARN([
           inline int foo() { return 0; }
          ], [ 
           int x = foo(); 
          ], [ AC_MSG_RESULT(ok) # keep -Winline
          ], [ AC_MSG_RESULT(conflict)
               CFLAGS="$noninlineCFLAGS" # remove -Winline
          ], [ GASNET_MSG_ERROR(failure when detecting -Winline conflict)])
        ])
        CCOPTFLAGS="$CFLAGS"
	GASNET_POPVAR(CFLAGS)
  ;;
  Sun) if test "$GASNETI_PTR_BITS" = 64; then # -fast => -xarch=v8 which clobbers user's 64-bit choice
         SUN_ARCH_FLAG=`echo "$CC $CFLAGS" | $PERL -ne 'foreach(split(/ /,$_)) { print "$_" if (m/^-xarch/);}'` 
       else
         SUN_ARCH_FLAG=
       fi
       CCOPTFLAGS="-fast $SUN_ARCH_FLAG -xO5" 
       ;;
  Cray) CCOPTFLAGS="-O2" ;; # DOB: -O3 is unstable on Cray cc
  XLC)
    case "$target_os" in
	darwin*)
	    # enabling ipa (-O4 or higher) breaks linking to MPI (and thus ibv).
	    case `/usr/sbin/sysctl hw.cpusubtype | cut '-d ' -f2` in
		# bug926: on G5 (cpusubtype 100) -qarch={ppc970,auto} causes corruption of 64-bit integer arithmetic
		100)	CCOPTFLAGS="-O3 -qhot -qarch=g5 -qtune=auto -qthreaded -qnosmp -qmaxmem=-1" ;; 
		*)	CCOPTFLAGS="-O3 -qhot -qarch=auto -qtune=auto -qthreaded -qnosmp -qmaxmem=-1" ;; 
	    esac
	    ;;
	linux*) CCOPTFLAGS="-O3 -qarch=auto -qtune=auto -qthreaded -qnosmp -qmaxmem=-1";;
	*)  #CCOPTFLAGS="-O5 -qthreaded -qnosmp -qmaxmem=-1" ;; # -O5 == -O3 w/ intra-procedural analysis, maxmem=-1 is default for -O3 or higher
	    CCOPTFLAGS="-O3 -qarch=auto -qtune=auto -qthreaded -qnosmp -qmaxmem=-1" ;; # -O5 causes linker to hang on Titanium 
    esac
    # If $CC sets -q<something>, then remove conflicting options from CCOPTFLAGS
    for flag in arch tune hot threaded smp; do
      if echo "$CC" | grep "q\(no\)\?${flag}" >/dev/null; then
        CCOPTFLAGS=`echo "$CCOPTFLAGS" | sed -e "s/-q\(no\)\?${flag}\(=[[a-z0-9_]]*\)\?//"`
      fi
    done
  ;;
  Intel) CCOPTFLAGS="-O3" ;;
  MTA) CCOPTFLAGS="-O3" ;; # MTA C actually ignores -O, optimization controlled by presence/absence of -g
  PGI)
    CCOPTFLAGS="-O2"  # Default
    # Work-aroung bug 2842: bad code gen by pgcc 10.5-0 through 10.7-0 at -O2
    # XXX: Need an ending version here when known
    GASNET_PUSHVAR(CPPFLAGS,"$CPPFLAGS -I$TOP_SRCDIR/other")
    GASNET_TRY_CACHE_CHECK([if PGI compiler misoptimizes assignment to (const char *)], bug2842, [
      #include "portable_platform.h"
      #if PLATFORM_COMPILER_VERSION_LT(10,5,0) || PLATFORM_COMPILER_VERSION_GT(10,7,0)
      #error "GOOD pgcc version should FAIL this test"
      #endif
    ],[(void)0],[CCOPTFLAGS="-O1"])
    GASNET_POPVAR(CPPFLAGS)
  ;;
  TINY) CCOPTFLAGS="" # optimization not supported
        SEPARATE_CC=1 # force separate compilation - multiple -c compilation not supported
  ;;
  Open64)
    if test "$GASNETI_PTR_BITS" = 32; then
        # See bug 2725 for info on test failures at -O3
        # Also see "opencc -m32 -O2" crashing when building libupcr
        CCOPTFLAGS="-O1"
    else
        # See bug 2724 for info on "-OPT:wrap_around_unsafe=off"
        CCOPTFLAGS="-O3 -OPT:wrap_around_unsafe=off"
    fi
  ;;
  Clang) GASNET_PUSHVAR(CFLAGS,"-O3")
         GASNET_TRY_WNO_FLAG([C],[-Wno-empty-body],[CFLAGS="$CFLAGS -Wno-empty-body"])
         GASNET_TRY_WNO_FLAG([C],[-Wno-unused-value],[CFLAGS="$CFLAGS -Wno-unused-value"])
         CCOPTFLAGS="$CFLAGS"
         GASNET_POPVAR(CFLAGS)
  ;;
  *)    CCOPTFLAGS="-O" ;;
esac
AC_SUBST(SEPARATE_CC)

dnl GASNET_GET_GNUWARNINGFLAGS(type)  type=C or CXX
AC_DEFUN([GASNET_GET_GNUWARNINGFLAGS],[
        ]GASNET_TRY_[$1]FLAG[([${gcc_flag_prefix}-Wall],
                              [[$1]FLAGS="$[$1]FLAGS ${gcc_flag_prefix}-Wall"])
         GASNET_TRY_WNO_FLAG([$1],[${gcc_flag_prefix}-Wno-unused],
                             [[$1]FLAGS="$[$1]FLAGS ${gcc_flag_prefix}-Wno-unused"])
         GASNET_TRY_WNO_FLAG([$1],[${gcc_flag_prefix}-Wno-address],
                             [[$1]FLAGS="$[$1]FLAGS ${gcc_flag_prefix}-Wno-address"])
        ]GASNET_TRY_[$1]FLAG[([${gcc_flag_prefix}-Wpointer-arith],
                              [[$1]FLAGS="$[$1]FLAGS ${gcc_flag_prefix}-Wpointer-arith"])
        ]GASNET_TRY_[$1]FLAG[([${gcc_flag_prefix}-Wnested-externs],
                              [[$1]FLAGS="$[$1]FLAGS ${gcc_flag_prefix}-Wnested-externs"])
        ]GASNET_TRY_[$1]FLAG[([${gcc_flag_prefix}-Wwrite-strings],
                              [[$1]FLAGS="$[$1]FLAGS ${gcc_flag_prefix}-Wwrite-strings"])
        ]GASNET_TRY_[$1]FLAG[([${gcc_flag_prefix}-Wdeclaration-after-statement],
                              [[$1]FLAGS="$[$1]FLAGS ${gcc_flag_prefix}-Wdeclaration-after-statement"])
        ]GASNET_TRY_[$1]FLAG[([${gcc_flag_prefix}-Wmissing-format-attribute],
                              [[$1]FLAGS="$[$1]FLAGS ${gcc_flag_prefix}-Wmissing-format-attribute"])
	if test "$use_pthreads" != "no" ; then
        # some crappy pthread mutex implementations generate warnings without -Wno-missing-braces
	AC_MSG_CHECKING(for buggy pthread.h mutex initializers)
        old[$1]FLAGS="$[$1]FLAGS"
        # FREEBSD requires the -pthread compiler flag when including pthread.h
        case "$target_os" in 
          freebsd*) [$1]FLAGS="-pthread $[$1]FLAGS" ;;
        esac 
        ]GASNET_TRY_[$1]COMPILE_WITHWARN[([#include <pthread.h>],
          [pthread_mutex_t fastmutex = PTHREAD_MUTEX_INITIALIZER;],
          [AC_MSG_RESULT(ok)], [AC_MSG_RESULT(buggy)
           GASNET_TRY_WNO_FLAG([$1],[${gcc_flag_prefix}-Wno-missing-braces],
                               [old[$1]FLAGS="$old[$1]FLAGS ${gcc_flag_prefix}-Wno-missing-braces"])],
          [#bug611: ignore failures here, which may be due to broken/missing pthreads support
           #AC_MSG_ERROR(failure while checking for buggy pthread.h mutexes)
	   AC_MSG_RESULT(failure - ignored)
          ]
        )
        [$1]FLAGS="$old[$1]FLAGS"
	fi
        case "$target_os" in 
          solaris*) # hide pragma warnings in system header files included by absolute path
            GASNET_TRY_WNO_FLAG([$1],[-Wno-unknown-pragmas],[[$1]FLAGS="$[$1]FLAGS -Wno-unknown-pragmas"])
        esac
        #]GASNET_TRY_[$1]FLAG[([-ansi -U__STRICT_ANSI__],[[$1]FLAGS="$[$1]FLAGS -ansi -U__STRICT_ANSI__"])
])

case "$CC_FAMILY" in
  GNU)  GASNET_PUSHVAR(CFLAGS,"${gcc_flag_prefix}-g3")
        case "$target_os" in
          darwin*) # Want -gstabs+ instead of -g3, if supported
            GASNET_TRY_CFLAG([${gcc_flag_prefix}-gstabs+], [CFLAGS="${gcc_flag_prefix}-gstabs+"])
            ;;
        esac
        GASNET_GET_GNUWARNINGFLAGS(C)
        CCDEBUGFLAGS="$CFLAGS"
        GASNET_POPVAR(CFLAGS)
  ;;
  MTA)  CCDEBUGFLAGS="-g2" ;; # need +ESdbgasm to use -g with _asm()
  Pathscale) GASNET_PUSHVAR(CFLAGS,"-g3 -O0") # need to explicitly disable optimization
        GASNET_GET_GNUWARNINGFLAGS(C)
        # Sigh.  Option -Wdeclaration-after-statement lacks a corresponding -Wno-.
        # That is a problem for any client that wants to compile C99 code, because
        # it leaves them with no option to turn it off.
        CCDEBUGFLAGS=`echo "$CFLAGS" | sed -e 's/-Wdeclaration-after-statement//'`
        GASNET_POPVAR(CFLAGS)
  ;;
  Open64) GASNET_PUSHVAR(CFLAGS,"-g3")
          GASNET_GET_GNUWARNINGFLAGS(C)
          # As with Pathscale, above, lack a -Wno-declaration-after-statement
          CCDEBUGFLAGS=`echo "$CFLAGS" | sed -e 's/-Wdeclaration-after-statement//'`
          GASNET_POPVAR(CFLAGS)
  ;;
  Clang)  GASNET_PUSHVAR(CFLAGS,"-g -O0")
          GASNET_GET_GNUWARNINGFLAGS(C)
          GASNET_TRY_WNO_FLAG([C],[-Wno-empty-body],[CFLAGS="$CFLAGS -Wno-empty-body"])
          CCDEBUGFLAGS="$CFLAGS"
          GASNET_POPVAR(CFLAGS)
  ;;
  *)    CCDEBUGFLAGS="-g" ;;
esac

dnl GASNET_GET_ULTRASPARC_FLAGS(type,flags)  type=C or CXX
# attempt to enable the ultrasparc ISA in MISC_C(XX)FLAGS, and test for related capabilities
# flags is compiler options which enable ultrasparc instructions for 32-bit ABI
GASNET_IF_DISABLED([ultrasparc-probe],[Disable probe for UltraSPARC compiler options],[DISABLE_ULTRASPARC=1])
AC_DEFUN([GASNET_GET_ULTRASPARC_FLAGS],[
  pushdef([ultrasparc3code],[
          void foo(void) { 
            #ifdef __GNUC__
              register void * addr = 0;
              register int oldval = 0;
              register int newval = 1;
              __asm__ __volatile__ ("cas	[[%2]], %0, %1" 
                                    : "=&r"(oldval), "=&r"(newval) : "r" (addr) : "memory");
            #elif defined(__SUNPRO_C) || defined(__SUNPRO_CC)
              __asm("cas	[[%i0]], %i1, %i2"); 
            #else
              #error unknown sparc compiler
            #endif
          }
         ])
  if test "$GASNETI_PTR_BITS" = 32 -a "$DISABLE_ULTRASPARC" != 1; then 
    for flag in $2 ; do
      ]GASNET_TRY_[$1]FLAG[([$flag],[ultrasparc_flag_worked=1],[ultrasparc_flag_worked=0])
      if test "$ultrasparc_flag_worked" = 1; then
        GASNET_PUSHVAR([$1]FLAGS,"$[$1]FLAGS $MISC_[$1]FLAGS $flag")
	AC_MSG_CHECKING(for working flag $flag)
	AC_TRY_RUN(ultrasparc3code [ int main(void) { return 0; } ], 
	           [ultrasparc_flag_worked=1], [ultrasparc_flag_worked=0], [ultrasparc_flag_worked=1])
        GASNET_POPVAR([$1]FLAGS)
	if test "$ultrasparc_flag_worked" = 1; then
	  AC_MSG_RESULT(yes)
      	  MISC_[$1]FLAGS="$flag"
	  break
	else
	  AC_MSG_RESULT(no)
	fi
      fi
    done
  fi
  AC_MSG_CHECKING(for UltraSPARC instruction support)
  GASNET_PUSHVAR([$1]FLAGS,"$[$1]FLAGS $MISC_[$1]FLAGS")
  ]GASNET_TRY_[$1]COMPILE_WITHWARN[( [ ultrasparc3code ] , [ ], 
          [ AC_MSG_RESULT(yes) 
                 AC_DEFINE(GASNETI_ARCH_ULTRASPARC)
       ], [ AC_MSG_RESULT(no/warning) ], [ AC_MSG_RESULT(no/error) ])
  GASNET_POPVAR([$1]FLAGS)
  popdef([ultrasparc3code])
])

dnl GASNET_GET_PPC64_FLAGS(type,flags)  type=C or CXX
# attempt to enable 64-bit inline asm in MISC_C(XX)FLAGS, and test for related capabilities
# flags is compiler options which enable ppc64 instructions for 32-bit ABI
GASNET_IF_DISABLED([ppc64-probe],[Disable probe for PPC64 compiler options],[DISABLE_PPC64=1])
AC_DEFUN([GASNET_GET_PPC64_FLAGS],[
  pushdef([ppc64code],[[
	#include <stdio.h>
	#if defined(__xlC__)
	  static int testme(double *p);
	  #pragma mc_func testme {            \\
	    /* ARGS: r3 = p  LOCAL: r4, r5 */ \\
	    "38a00001" /* li   r5,1     */    \\
	    "38800000" /* li   r4,0     */    \\
	    "f8830000" /* std  r4,0(r3) */    \\
	    "e8a30000" /* ld   r5,0(r3) */    \\
	    "7ca32b78" /* mr   r3,r5    */    \\
	  }
	  #pragma reg_killed_by testme cr0, gr4, gr5
	#else
	  static int testme(double *p) {
	    int tmp, result;
	    __asm__ __volatile__ (
			"li	%2,1		\n\t"
			"li	%1,0		\n\t"
			"std	%1,0(%3)	\n\t"
			"ld	%2,0(%3)	\n\t"
			: "=m" (*p), "=&b" (tmp), "=&r" (result)
			: "b" (p) );
	    return result;
	  }
	#endif
      ]])
  if test "$GASNETI_PTR_BITS" = 32 -a "$DISABLE_PPC64" != 1 -a "$cross_compiling" != "yes"; then 
    # Bug 1587: "for flag in ; do" chokes the shell on Solaris
    # Bug 1588: Use of m4_ifval([$2]) to avoid bug 1587 chokes autoconf 2.13
    # So, we add a dummy element to keep the for-loop list non-empty, and then skip it.
    for flag in $2 DUMMY ; do
      if test "$flag" != DUMMY ; then
        ]GASNET_TRY_[$1]FLAG[([$flag],[ppc64_flag_worked=1],[ppc64_flag_worked=0])
        if test "$ppc64_flag_worked" = 1; then
          GASNET_PUSHVAR([$1]FLAGS,"$[$1]FLAGS $MISC_[$1]FLAGS $flag")
	  AC_MSG_CHECKING(for working flag $flag)
	  AC_TRY_RUN(ppc64code [ int main(void) { double x; return testme(&x); } ],
	             [ppc64_flag_worked=1], [ppc64_flag_worked=0], [ppc64_flag_worked=1])
          GASNET_POPVAR([$1]FLAGS)
	  if test "$ppc64_flag_worked" = 1; then
	    AC_MSG_RESULT(yes)
      	    MISC_[$1]FLAGS="$flag"
	    break
	  else
	    AC_MSG_RESULT(no)
	  fi
        fi
      fi
    done
  fi
  AC_MSG_CHECKING(for PPC64 instruction support)
  GASNET_PUSHVAR([$1]FLAGS,"$[$1]FLAGS $MISC_[$1]FLAGS")
  ]GASNET_TRY_[$1]COMPILE_WITHWARN[( [ ppc64code ] , [ ], 
          AC_TRY_RUN(ppc64code [ int main(void) { double x; return testme(&x); } ],
                     [AC_MSG_RESULT(yes) 
                      AC_DEFINE(GASNETI_ARCH_PPC64)],
		     [AC_MSG_RESULT(no/failure)],
		     [ # Cross compiling.  For now just trust PTR_BITS.
		       if test "$GASNETI_PTR_BITS" = 64; then
                         AC_MSG_RESULT([yes (cross-compiling w/ 64-bit pointers)]) 
                         AC_DEFINE(GASNETI_ARCH_PPC64)
		       else
                         AC_MSG_RESULT([no (cross-compiling w/ 32-bit pointers)]) 
		       fi
		     ]),
       [ AC_MSG_RESULT(no/warning) ], [ AC_MSG_RESULT(no/error) ])
  GASNET_POPVAR([$1]FLAGS)
  popdef([ppc64code])
])


case "$CC_FAMILY" in
  GNU)
    case "$target_cpu" in
      sparc) GASNET_GET_ULTRASPARC_FLAGS(C,["-mcpu=ultrasparc3 -mtune=ultrasparc3" "-mcpu=ultrasparc -mtune=ultrasparc"]);;
      rs6000|powerpc*) GASNET_GET_PPC64_FLAGS(C,["-force_cpusubtype_ALL" "-Wa,-mppc64"]);;
      ia64) GASNET_TRY_CFLAG([-mtls-size=64], [MISC_CFLAGS="$MISC_CFLAGS -mtls-size=64"]);;
    esac
    case "$target_os" in
      darwin*) 
        GASNET_TRY_WNO_FLAG([C],[${gcc_flag_prefix}-Wno-long-double],
                            [MISC_CFLAGS="$MISC_CFLAGS ${gcc_flag_prefix}-Wno-long-double"])
      ;; 
    esac
    ;;
  Cray) 
    case "$target_cpu" in
      x86_64)   MISC_CFLAGS="-hnomessage=236" ;; # XT, XE, XK, XC, etc.
      *)        AC_MSG_ERROR(Cray C compiler for unknown target CPU) ;;
    esac ;;
  Intel) MISC_CFLAGS="-wd177 -wd279" 
         GASNET_TRY_CFLAG([-wd1572],
                          [MISC_CFLAGS="$MISC_CFLAGS -wd1572"])
         ;;
  PGI) MISC_CFLAGS="-Masmkeyword -c9x -Msignextend";; # get inline assembly, restrict and sign-extended narrowing
  MTA) MISC_CFLAGS="-display_error_number -WS 111,174,238" ;;
  Sun) if test "$target_cpu" = "sparc"; then 
         GASNET_GET_ULTRASPARC_FLAGS(C,["-xarch=v8plusb" "-xarch=v8plusa" "-xarch=v8plus" "-xarch=sparcvis2" "-xarch=sparcvis" "-xarch=sparc"])
       fi
       MISC_CFLAGS="$MISC_CFLAGS -errtags" ;; # show warning tag ids in warnings
  XLC) GASNET_GET_PPC64_FLAGS(C)
       MISC_CFLAGS="$MISC_CFLAGS -qsuppress=1500-010:1506-229"
        # 1500-010 = infinite loop (such as in our tests)
	# 1506-229 = empty source file (some linux headers)
       ;;
  *)   MISC_CFLAGS="" ;;
esac

case "$CC_FAMILY" in
  XLC) MISC_CPPFLAGS="-qcpluscmt" ;; # tell preprocessor to allow C++-style comments
  PGI) MISC_CPPFLAGS="-B" ;; # C++ comments
  Sun) MISC_CPPFLAGS="-xCC" ;; # C++ comments
  GNU)
    case "$target_os" in
      darwin*) # add some options which are specific to the Apple Inc version of gcc
        GASNET_TRY_CFLAG([${gcc_flag_prefix}-no-cpp-precomp],
                         [MISC_CPPFLAGS="$MISC_CPPFLAGS ${gcc_flag_prefix}-no-cpp-precomp"])
      ;; 
    esac ;;
  *)  MISC_CPPFLAGS="" ;;
esac

# Locate system directories for BG/Q
if expr "$target" : powerpc64-bgq-linux >/dev/null; then
  # TODO: Something like bgpmaster to search on?
  bgsys_guess=/bgsys/drivers/ppcfloor

  GASNET_ENV_DEFAULT(BGQ_SYS_HOME, $bgsys_guess)
  GASNET_ENV_DEFAULT(BGQ_SYS_INCLUDE, $BGQ_SYS_HOME)
  if test -e "$BGQ_SYS_INCLUDE/cnk/include"; then
    tmp_flag="-isystem $BGQ_SYS_INCLUDE"
    GASNET_TRY_CFLAG([$tmp_flag], [:], [tmp_flag="-I$BGQ_SYS_INCLUDE"])
    SYS_HEADER_BLD="$SYS_HEADER_BLD $tmp_flag"
    SYS_HEADER_INST="$SYS_HEADER_INST $tmp_flag"
  fi
  AC_SUBST(SYS_HEADER_BLD) dnl "Hook" shared with GASNET_CHECK_OVERRIDE_PTHREADS
  AC_SUBST(SYS_HEADER_INST) dnl "Hook" shared with GASNET_CHECK_OVERRIDE_PTHREADS
fi

GASNET_IF_ENABLED(debug, Build GASNet in a debugging mode, 
  [ 
    if test -z "$GASNET_SUPPRESS_DEBUG_WARNING" ; then
GASNET_MSG_WARN([
-----------------------------------------------------------------------
 WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

 Configuring the system for global, forced debugging mode. 
 This usually has a SERIOUS impact on performance, so you should NOT
 trust any performance numbers obtained from programs built
 using this GASNet installation!!!

 WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
-----------------------------------------------------------------------])
    fi
    CFLAGS="$CCDEBUGFLAGS"
    AC_DEFINE(GASNET_DEBUG)
    BUILDCONFIG="debug"
    enabled_debug=yes],
  [ CFLAGS="$CCOPTFLAGS"
    AC_DEFINE(GASNET_NDEBUG)
    BUILDCONFIG="optimize"
    enabled_debug=no])
AM_CONDITIONAL(BUILDCONFIG_DEBUG, test "$enabled_debug" = yes)

GASNET_IF_ENABLED(gasnet-verbose, Build GASNet lib with debugging status messages, 
  [ enabled_debug_verbose=yes ], [ enabled_debug_verbose=no ])
  if test "$enabled_debug_verbose" = yes; then
    AC_DEFINE(GASNET_DEBUG_VERBOSE)
  fi
AM_CONDITIONAL(BUILDCONFIG_DEBUG_VERBOSE, test "$enabled_debug_verbose" = yes)

GASNET_IF_ENABLED_WITH_AUTO(trace, Build GASNet with tracing enabled (enabled by default with --enable-debug), 
  enabled_trace=yes, enabled_trace=no, enabled_trace=$enabled_debug)
  if test "$enabled_trace" = yes; then
    AC_DEFINE(GASNET_TRACE)
  fi
AM_CONDITIONAL(BUILDCONFIG_TRACE, test "$enabled_trace" = yes)

GASNET_IF_ENABLED_WITH_AUTO(stats, Build GASNet with statistical collection enabled (enabled by default with --enable-debug), 
  enabled_stats=yes, enabled_stats=no, enabled_stats=$enabled_debug)
  if test "$enabled_stats" = yes; then
    AC_DEFINE(GASNET_STATS)
  fi
AM_CONDITIONAL(BUILDCONFIG_STATS, test "$enabled_stats" = yes)

GASNET_IF_ENABLED(srclines, Build GASNet with srclines support (enabled by default with --enable-trace), 
  [ enabled_srclines=yes ])
  if test "$enabled_srclines" = yes; then
    AC_DEFINE(GASNET_SRCLINES)
  fi
AM_CONDITIONAL(BUILDCONFIG_SRCLINES, test "$enabled_srclines" = yes)

GASNET_IF_ENABLED_WITH_AUTO(debug-malloc, Build GASNet with debugging malloc implementation enabled (enabled by default with --enable-debug), 
  enabled_debug_malloc=yes, enabled_debug_malloc=no, enabled_debug_malloc=$enabled_debug)
  if test "$enabled_debug_malloc" = yes; then
    AC_DEFINE(GASNET_DEBUGMALLOC)
  fi
AM_CONDITIONAL(BUILDCONFIG_DEBUGMALLOC, test "$enabled_debug_malloc" = yes)

case "$target" in
  *-uclinux-*) # uclinux requires -Os
    MISC_CFLAGS="$MISC_CFLAGS -DGASNET_ALLOW_OPTIMIZED_DEBUG=1" ;;
  *)
    GASNET_CHECK_OPTIMIZEDDEBUG(CC,CFLAGS,[$CPPFLAGS $MISC_CFLAGS $MISC_CPPFLAGS],[])
  ;;
esac

#AC_SUBST(CFLAGS)	      # opt/debug flags
AC_SUBST(MISC_CFLAGS)	      # warning suppression and other misc C flags
AC_SUBST(MISC_CPPFLAGS)	      # misc preprocessor flags

case "$CC_FAMILY" in
  GNU) KEEPTMP_CFLAGS="-save-temps" ;;
  Pathscale) KEEPTMP_CFLAGS="-keep" ;;
  Open64) KEEPTMP_CFLAGS="-keep" ;;
  XLC) KEEPTMP_CFLAGS="-qlist" ;; # XXX: generates .lst w/ asm.  Can't find a way to preserve .i
  PGI) KEEPTMP_CFLAGS="-Mkeepasm" ;; # XXX: only keeps .s.  Can't find a way to preserve .i
  Intel) KEEPTMP_CFLAGS="-save-temps" ;; # XXX: only keeps .s.  Can't find a way to preserve .i
  Sun) KEEPTMP_CFLAGS="-keeptmp" ;;
  Cray) KEEPTMP_CFLAGS="-hkeepfiles" ;; # XXX: only keeps .s.  Can't find a way to preserve .i
  *) KEEPTMP_CFLAGS="" ;;
esac
AC_SUBST(KEEPTMP_CFLAGS)      # flags to preserve intermediate file (,i, .s, etc.)

segconfig=""
GASNET_IF_ENABLED(segment-fast, Build GASNet in the FAST shared segment configuration,
  segconfig="fast$segconfig", )
GASNET_IF_ENABLED(segment-large, Build GASNet in the LARGE shared segment configuration,
  segconfig="large$segconfig", )
GASNET_IF_ENABLED(segment-everything, Build GASNet in the EVERYTHING shared segment configuration,
  segconfig="everything$segconfig", )

case "$segconfig" in
  "") segconfig=fast; #for AM_CONDITIONAL, below
      AC_DEFINE(GASNET_SEGMENT_FAST) ;;  # default is fast
  fast) AC_DEFINE(GASNET_SEGMENT_FAST) ;;
  large) AC_DEFINE(GASNET_SEGMENT_LARGE) ;;
  everything) AC_DEFINE(GASNET_SEGMENT_EVERYTHING) ;;
  *) AC_MSG_ERROR(Conflicting shared segment configurations specified) ;;
esac

# Do it all again because AM_CONDITIONAL()s can't go inside if or case.
# Groan.
AM_CONDITIONAL(GASNET_SEGMENT_FAST, test "$segconfig" = fast)
AM_CONDITIONAL(GASNET_SEGMENT_LARGE, test "$segconfig" = large)
AM_CONDITIONAL(GASNET_SEGMENT_EVERYTHING, test "$segconfig" = everything)

GASNET_WITH(segment-mmap-max,
   [Upper bound for mmap-based GASNet segments (ex: "2GB", "1045MB")],
   [case "$withval" in
      [[1-9]]*G*) 
        AC_DEFINE_UNQUOTED(GASNETI_MMAP_MAX_SIZE, 
            [((uint64_t)(`expr "${withval}" : "\([[1-9]][[0-9]]*\)"`ull << 30))]) 
        ;;
      [[1-9]]*M*) 
        AC_DEFINE_UNQUOTED(GASNETI_MMAP_MAX_SIZE, 
            [((uint64_t)(`expr "${withval}" : "\([[1-9]][[0-9]]*\)"`ull << 20))]) 
        ;;
      [[1-9]][[0-9]]*) 
        AC_DEFINE_UNQUOTED(GASNETI_MMAP_MAX_SIZE, 
            [((uint64_t)${withval}ull)]) 
        ;;
      *) AC_MSG_ERROR(Illegal value for --with-segment-mmap-max=$withval) ;;
    esac])

dnl GASNET_GET_PLATFORM_ID(CCVAR, opt compiler-desc)
dnl probe a compiler for version information
AC_DEFUN([GASNET_GET_PLATFORM_COMPILER], [
  GASNET_TRY_CACHE_EXTRACT_$4($2 for PLATFORM_COMPILER_$3, PLATFORM_$1_$3,
    [ #include "portable_platform.h" ], [ PLATFORM_COMPILER_$3 ], GASNETI_PLATFORM_$1_$3)
  AC_DEFINE_UNQUOTED(GASNETI_PLATFORM_$1_$3,
                     ifelse([$4],[STR],["$GASNETI_PLATFORM_$1_$3"],[$GASNETI_PLATFORM_$1_$3]))
])
AC_DEFUN([GASNET_GET_PLATFORM_ID], [
  GASNET_PUSHVAR(CPPFLAGS,"$CPPFLAGS -I$TOP_SRCDIR/other")
  GASNET_GET_PLATFORM_COMPILER([$1],[$2],[IDSTR],[STR])
  GASNET_GET_PLATFORM_COMPILER([$1],[$2],[FAMILYID],[EXPR])
  GASNET_GET_PLATFORM_COMPILER([$1],[$2],[ID],[EXPR])
  GASNET_GET_PLATFORM_COMPILER([$1],[$2],[VERSION],[EXPR])
  GASNET_POPVAR(CPPFLAGS)
])

dnl Try to discover the C compiler's inline modifier
dnl GASNET_INLINE_MODIFIER(compiler-display-name, compiler-type)
dnl Where compiler-type is CC|MPI_CC
AC_DEFUN([GASNET_TRY_INLINE],[ dnl INTERNAL USE BY GASNET_INLINE_MODIFIER ONLY
  if test -z "$inlinemod"; then
    GASNET_TRY_CACHE_CHECK([$1 for $3 modifier], $2[]mod$3,
      [$3 int dummy(void) { return 1; }], [], [inlinemod="$3"])
  fi
])
AC_DEFUN([GASNET_INLINE_MODIFIER],[
pushdef([lowername],translit($2,'A-Z','a-z'))
pushdef([uppername],translit($2,'a-z','A-Z'))
inlinemod=""
case "$[]uppername[]_FAMILY" in
  XLC) # force __inline on XLC, to avoid warnings
    inlinemod=__inline
  ;;
esac
GASNET_TRY_INLINE($1,lowername,[inline])
GASNET_TRY_INLINE($1,lowername,[__inline__])
GASNET_TRY_INLINE($1,lowername,[__inline])
GASNET_TRY_INLINE($1,lowername,[_inline])
GASNET_TRY_INLINE($1,lowername,[_Inline])
if test -n "$inlinemod"; then
  GASNET_TRY_CACHE_CHECK($1 for working 'static $inlinemod', lowername[_static_inline],
   [static $inlinemod int dummy() { return 1; }], [], [inlinemod="static $inlinemod"])
  AC_DEFINE_UNQUOTED(GASNET_[]uppername[]_INLINE_MODIFIER, $inlinemod)
fi
popdef([uppername])
popdef([lowername])
])

GASNET_LIBGCC
GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS")
GASNET_CHECK_RESTRICT([GASNETI_CC])
GASNET_INLINE_MODIFIER([C compiler],[CC])
GASNET_GET_GNU_ATTRIBUTES([GASNETI_HAVE_CC])
GASNET_GET_PLATFORM_ID([COMPILER])
GASNET_POPVAR(CFLAGS)

# Check for a usefull C99 features common in many pre-C99 compilers
GASNET_TRY_CACHE_CHECK(for non-constant struct initializers, nonconst_struct_init,
  [
    #include <stdio.h>
    struct S { int a; const int b; }; /* 'const' is here to trigger suncc bug 6913992 */
    struct S foo(int a, int b) {
      struct S tmp = {a, b};
      return tmp;
    }
  ], [
    /* printf() call ensures an int not known at compile/link time */
    struct S s = foo(1, printf("boo\n"));
  ], [ AC_DEFINE(HAVE_NONCONST_STRUCT_INIT) ])
GASNET_TRY_CACHE_CHECK(for constructor expressions, constructor_expr,
  [
    struct S { int a; int b; };
  ], [
    struct S s = ((struct S){(1,2)});
  ], [ AC_DEFINE(HAVE_CONSTRUCTOR_EXPR) ])

########################################################################
# hunt for 16-, 32-, and 64-bit integer types

GASNET_SETUP_INTTYPES()

########################################################################
# get sizes of additional types for the "anytype" unions

GASNET_CHECK_SIZEOF(float)
GASNET_CHECK_SIZEOF(double)

dnl Grumble!  Can't use AC_CHECK_TYPE or AC_CHECK_TYPES in autoconf 2.13
dnl Additionally, this duplicates a check in recent AC_SIZEOF() just
dnl for the sake of avoiding the error abort in GASNET_CHECK_SIZEOF.
AC_DEFUN([GASNET_CHECK_SIZEOF_OPTIONAL], [
  pushdef([uppername],translit($1,'a-z ','A-Z_'))
  pushdef([lowername],translit($1,'A-Z ','a-z_'))
  GASNET_TRY_CACHE_CHECK([for type $1],[type_]lowername,[],
    [ if (($1 *) 0) return 0;
      if (sizeof ($1)) return 0;
    ],
    [GASNET_CHECK_SIZEOF($1)],
    [dnl see GASNET_CHECK_SIZEOF for a desciption of this little gem:
     ac_cv_SIZEOF_[]uppername[]_indirect=SIZEOF_[]uppername
     AC_DEFINE_UNQUOTED($ac_cv_SIZEOF_[]uppername[]_indirect,0)
    ])
  popdef([lowername])
  popdef([uppername])
])
GASNET_CHECK_SIZEOF_OPTIONAL(_Bool)
GASNET_CHECK_SIZEOF_OPTIONAL(long double)
GASNET_CHECK_SIZEOF_OPTIONAL(float _Complex)
dnl NOT YET - GASNET_CHECK_SIZEOF_OPTIONAL(double _Complex)
dnl NOT YET - GASNET_CHECK_SIZEOF_OPTIONAL(long double _Complex)

########################################################################
##
##  Page size
##

GASNET_CROSS_VAR(GASNETI_PAGESIZE,PAGESIZE)

if test "$GASNETI_PAGESIZE" = ""; then
GASNET_TRY_CACHE_RUN_EXPR(PAGESIZE, PAGESIZE,
  [ #include <limits.h> ], [ val = PAGESIZE; if (val<=0) exit(1); ], GASNETI_PAGESIZE)
fi

if test "$GASNETI_PAGESIZE" = ""; then
GASNET_TRY_CACHE_RUN_EXPR(PAGE_SIZE, PAGE_SIZE,
  [ #include <limits.h> ], [ val = PAGE_SIZE; if (val<=0) exit(1); ], GASNETI_PAGESIZE)
fi

if test "$GASNETI_PAGESIZE" = ""; then
GASNET_TRY_CACHE_RUN_EXPR([sysconf(_SC_PAGESIZE)], _SC_PAGESIZE,
  [ #include <unistd.h> ], [ val = sysconf(_SC_PAGESIZE); if (val<=0) exit(1); ], GASNETI_PAGESIZE)
fi

if test "$GASNETI_PAGESIZE" = ""; then
GASNET_TRY_CACHE_RUN_EXPR([sysconf(_SC_PAGE_SIZE)], _SC_PAGE_SIZE,
  [ #include <unistd.h> ], [ val = sysconf(_SC_PAGE_SIZE); if (val<=0) exit(1); ], GASNETI_PAGESIZE)
fi

if test "$GASNETI_PAGESIZE" = ""; then
GASNET_TRY_CACHE_RUN_EXPR([getpagesize()], getpagesize,
  [ #include <unistd.h> ], [ val = getpagesize(); if (val<=0) exit(1); ], GASNETI_PAGESIZE)
fi

if test "$GASNETI_PAGESIZE" != ""; then
  AC_DEFINE_UNQUOTED(GASNETI_PAGESIZE,$GASNETI_PAGESIZE)

  case "$GASNETI_PAGESIZE" in
    1024)     GASNETI_PAGESHIFT=10 ;;
    2048)     GASNETI_PAGESHIFT=11 ;;
    4096)     GASNETI_PAGESHIFT=12 ;;
    8192)     GASNETI_PAGESHIFT=13 ;;
    16384)    GASNETI_PAGESHIFT=14 ;;
    32768)    GASNETI_PAGESHIFT=15 ;;
    65536)    GASNETI_PAGESHIFT=16 ;;
    131072)   GASNETI_PAGESHIFT=17 ;;
    262144)   GASNETI_PAGESHIFT=18 ;;
    524288)   GASNETI_PAGESHIFT=19 ;;
    1048576)  GASNETI_PAGESHIFT=20 ;;
    2097152)  GASNETI_PAGESHIFT=21 ;;
    4194304)  GASNETI_PAGESHIFT=22 ;;
    8388608)  GASNETI_PAGESHIFT=23 ;;
    16777216) GASNETI_PAGESHIFT=24 ;;
    *) AC_MSG_ERROR(unknown GASNETI_PAGESIZE=$GASNETI_PAGESIZE) ;;
  esac
  AC_DEFINE_UNQUOTED(GASNETI_PAGESHIFT,$GASNETI_PAGESHIFT)
fi

# -lm should only live in LIBM, and only if we have it (not in LIBS)
GASNET_LIBM()

#---------------------------------------------------------------------------------------------------------------
# Machine defs

GASNET_PLATFORM=generic
GASNET_THREAD_DEFINES=""
GASNET_THREAD_LIBS=""
case "$target_os" in
  solaris*)  
	GASNET_THREAD_DEFINES="-D_REENTRANT"
        # on some systems static linking fails with -lpthread, 
        # but need it or pthread_create will fail at runtime
        GASNET_THREAD_LIBS="-lpthread" 
        ;;
  linux*) 
	# Check for SGI Altix, using a device heuristic.  SGI has assured us
	# that /dev/hw is specific (and standard) on their system
	# DOB: as of 2.6.5-7.252-sn2 (possibly earlier) /dev/hw/cpunum no longer exists
	# so now we use /dev/xpmem instead, which is not likely to disappear
	if test x$force_arch_altix = xyes -o -d "/dev/hw/cpunum" -o -c "/dev/xpmem"; then
   	  GASNETI_ARCH_ALTIX=1
	  AC_DEFINE(GASNETI_ARCH_ALTIX)
	  GASNET_PLATFORM=altix
	  if test $target_cpu = ia64 -o -c "/dev/mmtimer"; then
	    AC_DEFINE(GASNETI_USE_MMTIMER)
	  fi
	fi
	# Check for IBM PE by presence of POE
	if test x$force_arch_imbpe = xyes || 
           ( env PAGER=cat poe -h | grep 'Parallel Operating Environment' ) >/dev/null 2>&1; then
	    GASNETI_ARCH_IBMPE=1
	    GASNET_PLATFORM=ibmpe
	    AC_DEFINE(GASNETI_ARCH_IBMPE)
	fi
        case "$target" in
          powerpc64-bgq-linux*) # apparently lacks any identifying preprocessor macro
	    GASNETI_ARCH_BGQ=1
	    AC_DEFINE(GASNETI_ARCH_BGQ)
	    GASNET_PLATFORM=bgq
	    ;;
        esac
        # Defining _GNU_SOURCE gives us accesss to the "adaptive"
        # implementation of pthread_mutex_t, which is faster then
        # the default implementation for our purposes.
	GASNET_THREAD_DEFINES="-D_REENTRANT -D_GNU_SOURCE"
        GASNET_THREAD_LIBS="-lpthread"
	;;
  freebsd*)
        # bug 1781: FreeBSD requires version-dependent magic to get a working pthread library
        OS_RELDATE="`/sbin/sysctl -n kern.osreldate 2>/dev/null`"
        if test "$OS_RELDATE" -lt "500016"; then
              GASNET_THREAD_DEFINES="-D_THREAD_SAFE"
              GASNET_THREAD_LIBS="-pthread"
        elif test "$OS_RELDATE" -lt "502102"; then
              GASNET_THREAD_DEFINES="-D_THREAD_SAFE"
              GASNET_THREAD_LIBS="-lc_r"
        else
              GASNET_THREAD_DEFINES="-D_THREAD_SAFE" # optional? 
              GASNET_THREAD_LIBS="-pthread"
        fi
	;;
  netbsd*)
	GASNET_THREAD_DEFINES="-pthread -D_REENTRANT" # _REENTRANT probably redundant
        GASNET_THREAD_LIBS="-pthread" # bug 1205: do not explicitly select threading lib
	;;
  openbsd*) 
	case "$CC_FAMILY" in
  	GNU)  GASNET_THREAD_DEFINES="-pthread -D_REENTRANT" # _REENTRANT probably redundant
	      GASNET_THREAD_LIBS="-pthread" # bug 1205: do not explicitly select threading lib
	      ;;
	*) # Why can't clang accept -pthread as it does on the other BSDs?
              GASNET_THREAD_DEFINES="-D_POSIX_THREADS -D_REENTRANT"
	      GASNET_THREAD_LIBS="-lpthread"
	      ;;
	esac
	;;
  cygwin*) 
	GASNET_THREAD_DEFINES="-D_REENTRANT"
        GASNET_THREAD_LIBS=""
	;;
  darwin*) 
	GASNET_THREAD_DEFINES="-D_REENTRANT"
        GASNET_THREAD_LIBS=""
	;;
  mtx*)
	GASNET_THREAD_DEFINES=""
        GASNET_THREAD_LIBS="-lpthread" 
        ;;
  *)
        GASNET_MSG_WARN(unknown OS - you may need to update the configure script)
        ;;
esac

AC_SUBST(GASNET_MACHINE_DEFINES)
AC_SUBST(GASNET_THREAD_DEFINES)
AC_SUBST(GASNET_THREAD_LIBS)
AC_SUBST(GASNET_PLATFORM)

# Find the appropriate OS suffix for executables
case "$target_os" in
  cygwin*)    EXESUFFIX='.exe' ;;
  *)          EXESUFFIX='' ;;
esac
AC_SUBST(EXESUFFIX)

########################################################################
##
##  Multithreading Libraries
##


## POSIX threads
#             
have_pthread=no
if test "$use_pthreads" != "no"; then
  GASNET_CHECK_OVERRIDE_PTHREADS
  GASNET_PUSHVAR(CFLAGS,"$CFLAGS $GASNET_THREAD_DEFINES")
  GASNET_PUSHVAR(LIBS,"$LIBS $GASNET_THREAD_LIBS")
  GASNET_TRY_CACHE_LINK([for working pthreads support], pthreads_works,
  	[ #include <pthread.h> ], [ pthread_create(0,0,0,0); ], [have_pthread=yes])
  GASNET_POPVAR(CFLAGS)
  GASNET_POPVAR(LIBS)
else
  pthread_reason="was disabled"
fi
if test "$use_pthreads$have_pthread" = "yesno" ; then
  AC_MSG_ERROR([--enable-pthreads passed but no working pthreads support found])
fi
if test "$use_pthreads$have_pthread" = "tryno" ; then
  GASNET_MSG_WARN([No working pthreads support found - disabling pthreads support])
  pthread_reason="appear to be missing or broken"
fi
GASNET_IF_ENABLED_WITH_AUTO(seq, [support SEQ-mode single=threaded GASNet clients],
                 [build_seq_libs="yes"], [build_seq_libs="no"], [build_seq_libs="yes"])
GASNET_IF_ENABLED_WITH_AUTO(par, [support PAR-mode pthreaded GASNet clients],
                 [build_par_libs="yes"], [build_par_libs="no"], [build_par_libs="$have_pthread"])
build_parsync_libs="no"
dnl GASNET_TOOLSONLY_FALSE_BEGIN
GASNET_IF_ENABLED_WITH_AUTO(parsync, [support PARSYNC-mode pthreaded GASNet clients],
                 [build_parsync_libs="yes"], [build_parsync_libs="no"], [build_parsync_libs="$have_pthread"])
dnl GASNET_TOOLSONLY_FALSE_END
if test "$build_par_libs$have_pthread" = "yesno" ; then
  AC_MSG_ERROR([--enable-par passed but no working pthreads support found])
fi
if test "$build_parsync_libs$have_pthread" = "yesno" ; then
  AC_MSG_ERROR([--enable-parsync passed but no working pthreads support found])
fi
if test "$build_seq_libs$build_par_libs$build_parsync_libs" = "nonono" ; then
  AC_MSG_ERROR([all libraries disabled by configure options!])
fi
AM_CONDITIONAL(BUILD_SEQ_LIBS, test "$build_seq_libs" = "yes")
AM_CONDITIONAL(BUILD_PAR_LIBS, test "$build_par_libs" = "yes")
AM_CONDITIONAL(BUILD_PARSYNC_LIBS, test "$build_parsync_libs" = "yes")

GASNET_WITH(max-pthreads-per-node, [Set max pthreads supported per GASNet node],
  [AC_DEFINE_UNQUOTED(GASNETI_MAX_THREADS_CONFIGURE, $withval)]
  )

GASNETI_CACHE_LINE_BYTES=""
if test "$have_pthread" = no ; then
  GASNET_THREAD_DEFINES=""
  GASNET_THREAD_LIBS=""
else
  GASNET_PUSHVAR(CPPFLAGS,"$CPPFLAGS $GASNET_THREAD_DEFINES -I$TOP_SRCDIR/other")
  GASNET_PUSHVAR(LIBS,"$GASNET_THREAD_LIBS")

  # define HAVE_PTHREAD_H
  AC_CHECK_HEADERS(pthread.h)

  # look for optional pthreads entry points and features
  AC_SEARCH_LIBS(pthread_setconcurrency, pthread pthreads c_r, AC_DEFINE(HAVE_PTHREAD_SETCONCURRENCY))
  AC_SEARCH_LIBS(pthread_kill, pthread pthreads, AC_DEFINE(HAVE_PTHREAD_KILL))
  AC_SEARCH_LIBS(pthread_kill_other_threads_np, pthread pthreads, AC_DEFINE(HAVE_PTHREAD_KILL_OTHER_THREADS_NP))

  GASNET_IF_ENABLED_WITH_AUTO(tls, Enable/disable use of thread-local storage extensions (ie __thread) (auto-detected),
    enabled_tls=yes, enabled_tls=no, enabled_tls=probe)
  if test "$enabled_tls" != "no" ; then
    case "$CC_FAMILY-$target_cpu" in
      Sun-i*86) have_tls=no ;; # __thread causes sunC 5.7 for x86 to crash on libgasnet-par
      *) 
      GASNET_CHECK_TLS_SUPPORT([ 
    	AC_DEFINE(GASNETI_HAVE_TLS_SUPPORT, 1) 
	have_tls=yes
      ],[ have_tls=no ]) 
      ;;
    esac
  fi
  if test "$enabled_tls$have_tls" = "yesno"; then
     GASNET_MSG_ERROR([--enable-tls passed but no working tls support found])
  fi

 if test "$cross_compiling" = "no"; then
  case "$target_os" in
    darwin*)
      AC_MSG_CHECKING(for shared data cache line size)
      GASNETI_CACHE_LINE_BYTES=`/usr/sbin/sysctl hw.cachelinesize | cut '-d ' -f2`
      AC_MSG_RESULT($GASNETI_CACHE_LINE_BYTES)
      ;;
    *)
      GASNET_TRY_CACHE_RUN_EXPR(for shared data cache line size, datacache_line_size, 
      [ #define CONFIG_TEST 1
        #include "detect-cachesz.c" ], [ 
       val = detect_cachesz(79.0, 0); if (val<=0) exit(1); ], GASNETI_CACHE_LINE_BYTES)
      ;;
  esac
 fi

  case "$target_os" in
    freebsd*) ;; # bug 1205: intentionally avoid -lpthread on BSD, where it causes problems
    netbsd*)  ;;
    openbsd*) ;;
    *) GASNET_THREAD_LIBS="$LIBS" ;;
  esac
  GASNET_POPVAR(CPPFLAGS)
  GASNET_POPVAR(LIBS)
fi
if test "$cross_compiling" = "yes"; then
  GASNET_CROSS_VAR(GASNETI_CACHE_LINE_BYTES, CACHE_LINE_BYTES, unset)
  if test "$GASNETI_CACHE_LINE_BYTES" = unset; then
    GASNETI_CACHE_LINE_BYTES='';
  fi
fi
if test "$GASNETI_CACHE_LINE_BYTES" = "" ; then
  GASNETI_CACHE_LINE_BYTES=128
  if test "$cross_compiling" = "no"; then
    GASNET_MSG_WARN([Unable to automatically detect a shared data cache line size (either system load too high, pthreads is broken or this is not a cache-coherent SMP).  Using a safe default size of $GASNETI_CACHE_LINE_BYTES])
  else
    GASNET_MSG_WARN([Unable to automatically detect a shared data cache line size when cross compiling.  Using a safe default size of $GASNETI_CACHE_LINE_BYTES])
  fi
fi
AC_DEFINE_UNQUOTED(GASNETI_CACHE_LINE_BYTES,$GASNETI_CACHE_LINE_BYTES)
case "$GASNETI_CACHE_LINE_BYTES" in
     1)     GASNETI_CACHE_LINE_SHIFT=0  ;;
     2)     GASNETI_CACHE_LINE_SHIFT=1  ;;
     4)     GASNETI_CACHE_LINE_SHIFT=2  ;;
     8)     GASNETI_CACHE_LINE_SHIFT=3  ;;
    16)     GASNETI_CACHE_LINE_SHIFT=4  ;;
    32)     GASNETI_CACHE_LINE_SHIFT=5  ;;
    64)     GASNETI_CACHE_LINE_SHIFT=6  ;;
   128)     GASNETI_CACHE_LINE_SHIFT=7  ;;
   256)     GASNETI_CACHE_LINE_SHIFT=8  ;;
   512)     GASNETI_CACHE_LINE_SHIFT=9  ;;
  1024)     GASNETI_CACHE_LINE_SHIFT=10 ;;
  *) AC_MSG_ERROR(unknown GASNETI_CACHE_LINE_BYTES=$GASNETI_CACHE_LINE_BYTES) ;;
  esac
AC_DEFINE_UNQUOTED(GASNETI_CACHE_LINE_SHIFT,$GASNETI_CACHE_LINE_SHIFT)
          
AM_CONDITIONAL(HAVE_PTHREAD, test "$have_pthread" = yes)
PTHREADS="$have_pthread"
AC_SUBST(PTHREADS)

## Solaris threads

AC_CHECK_LIB(thread, thr_create, have_solthread=yes, have_solthread=no)

########################################################################
## Process-shared memory (pshm)

dnl GASNET_TOOLSONLY_FALSE_BEGIN
have_hugetlbfs=no
GASNET_IF_ENABLED_WITH_AUTO(hugetlbfs,
  [Enable/disable huegtlbfs support (default is system dependent)],
  [enabled_hugetlbfs=yes], [enabled_hugetlbfs=no], [enabled_hugetlbfs=probe])
if test "$enabled_hugetlbfs" != 'no'; then
 AC_CHECK_HEADERS(hugetlbfs.h, [
  GASNET_PUSHVAR(LIBS,"$LIBS -lhugetlbfs")
  AC_CHECK_FUNCS([hugetlbfs_unlinked_fd_for_size hugetlbfs_unlinked_fd],
                 [have_hugetlbfs=yes
                  AC_DEFINE(HAVE_HUGETLBFS)])
  GASNET_POPVAR(LIBS)
 ])
 if test "$enabled_hugetlbfs$have_hugetlbfs" = 'yesno'; then
   GASNET_MSG_ERROR([User requested --enable-hugetlbfs but the header and/or library could not be found])
 fi
fi
with_pshm=no
GASNET_PSHM_LIBS=""
GASNET_PSHM_ENABLED=no
GASNET_IF_ENABLED_WITH_AUTO(pshm,
  [Enable/disable inter-process shared memory support (default is system dependent)],
  [enabled_pshm=yes], [enabled_pshm=no],
  [ if test "$segconfig" = everything; then
      enabled_pshm=no
    elif test "$cross_compiling" = yes; then
      enabled_pshm=no
    else
      # Current default is Linux YES, all others NO
      case "$target_os" in
       linux*) enabled_pshm=probe ;;
            *) enabled_pshm=no ;;
      esac
    fi
  ])
if test "$segconfig$enabled_pshm" = everythingyes; then
  GASNET_MSG_ERROR([User requested --enable-segment-everything and --enable-pshm but PSHM support does not include GASNET_SEGMENT_EVERYTHING.])
fi
if test "$enabled_pshm" != no; then
 # First check for POSIX (shm_open) support
 GASNET_IF_ENABLED_WITH_AUTO(pshm-posix,
   [Enable/disable use of POSIX shm_open() for inter-process shared memory support (default is system dependent)],
   [enabled_pshm_posix=yes], [enabled_pshm_posix=no],
   [ # Default is YES except:
     # + on Darwin due to bug 2629
     # + on BG/Q due to multiple "oddities" in CNK's implementation
     enabled_pshm_posix=yes
     case "$target_os" in
       darwin*) enabled_pshm_posix=no ;;
     esac
     case "$target_vendor" in
       bgq) enabled_pshm_posix=no ;;
     esac
   ])
 if expr "$enabled_pshm_posix@$target_os" : "yes@darwin" >/dev/null; then
   GASNET_MSG_ERROR([User requested --enable-pshm-posix but POSIX shared memory support is not permitted on Mac OS X.])
   dnl We can crash Macs!  See bug 2629.
 fi
 if test "$enabled_pshm_posix$with_pshm" = yesno; then
  # shm_open() might be in libc (e.g. AIX, Darwin) or librt (e.g. Linux, Solaris)
  GASNET_PUSHVAR(LIBS,"$LIBS")
  have_shm_open=probe
  AC_SEARCH_LIBS(shm_open, [rt posix4], [
    if test "$cross_compiling" = "yes" ; then
      # To the best of my knowledge CNL, and BG/L all lack
      # working shm_open() support, though at least CNL finds the symbol.
      # So, we default to NO shm_open() when cross-compiling. -PHH
      # Update: CNL on Cray XE *does* have working shm_open(). -PHH
      # One can set CROSS_HAVE_SHM_OPEN=1 to force building PSHM for POSIX.
      GASNET_CROSS_VAR(GASNETI_HAVE_SHM_OPEN, HAVE_SHM_OPEN, 0)
      if test "$CROSS_HAVE_SHM_OPEN" != 1; then
        have_shm_open=no
      fi
    fi
    if test "$have_shm_open" = probe; then
      GASNET_TRY_CACHE_RUN_WITHCC([for working shm_open()], have_shm_open, [
        #include <sys/types.h>
        #include <sys/stat.h>
        #include <sys/mman.h>
        #include <unistd.h>
        #include <fcntl.h>
        #include <stdlib.h>
        #define SHM_NAME "/GASNETconftst"
      ],[
          int size = GASNETI_PAGESIZE;
          int fd;
          void * addr;

          fd = shm_open(SHM_NAME, O_CREAT|O_RDWR, S_IRUSR|S_IWUSR);
          (void)shm_unlink(SHM_NAME);
          if (fd < 0) return 1;
          if (ftruncate(fd, size) < 0) return 1;
          addr = mmap(NULL, size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
          (void)close(fd);
          if (!addr || (addr == MAP_FAILED)) return 1;
          (void)munmap(addr, size);
          return 0;
      ],[ have_shm_open=yes ], [ have_shm_open=no ])
    fi
    if test "$have_shm_open" = yes; then
      AC_DEFINE(GASNETI_PSHM_POSIX)
      GASNET_PSHM_LIBS="$LIBS"
      with_pshm=posix
    fi
  ], [ have_shm_open=no ])
  GASNET_POPVAR(LIBS)
 fi

 # Second check is for SysV (shmget) support
 enabled_pshm_sysv=no
 GASNET_IF_ENABLED(pshm-sysv,
   [Enable use of SysV shmat() for inter-process shared memory support (default disabled)],
   [enabled_pshm_sysv=yes])
 if test "$enabled_pshm_sysv$with_pshm" = yesno; then
  dnl XXX Stronger probe?
  AC_CHECK_FUNC(shmget, [
    AC_DEFINE(GASNETI_PSHM_SYSV)
    with_pshm=sysv
  ])
 fi

 # Third check is for XPMEM+hugetlbfs support
 enabled_pshm_xpmem=no
 GASNET_IF_ENABLED(pshm-xpmem,
   [Enable use of XPMEM for inter-process shared memory support (default disabled)],
   [enabled_pshm_xpmem=yes])
 if test "$enabled_pshm_xpmem$with_pshm" = yesno; then
  GASNET_PUSHVAR(LIBS,"")
  AC_SEARCH_LIBS(xpmem_get, xpmem, [
    AC_CHECK_HEADERS([xpmem.h sn/xpmem.h], [
      if test $have_hugetlbfs = yes; then
        case "$target" in
          *-cnl-*) LIBS="$LIBS -Wl,--whole-archive,-lhugetlbfs,--no-whole-archive" ;;
                *) LIBS="$LIBS -lhugetlbfs" ;;
        esac
        AC_DEFINE(GASNETI_USE_HUGETLBFS)
      fi
      GASNET_PSHM_LIBS=$LIBS
      AC_DEFINE(GASNETI_PSHM_XPMEM)
      with_pshm=xpmem
    ])
  ])
  GASNET_POPVAR(LIBS)
 fi

 # Fourth check is for gloal heap
 enabled_pshm_gheap=no
 GASNET_IF_ENABLED(pshm-gheap,
   [Enable use of global heap for inter-process shared memory support (default disabled)],
   [enabled_pshm_gheap=yes])
 if test "$enabled_pshm_gheap$with_pshm" = yesno; then
  # TODO: any sanity checks available to use here?
  AC_DEFINE(GASNETI_PSHM_GHEAP)
  with_pshm=gheap
 fi

 # Final check is for mmap()ed file support
 enabled_pshm_file=no
 GASNET_IF_ENABLED(pshm-file,
   [Enable use of mmap()ed temporary files for inter-process shared memory support (default disabled)],
   [enabled_pshm_file=yes])
 if test "$enabled_pshm_file$with_pshm" = yesno; then
  dnl Currently if requested, this will get used.
  AC_DEFINE(GASNETI_PSHM_FILE)
  with_pshm=file
 fi
fi
if test "$with_pshm" != no; then
  AC_DEFINE(GASNETI_PSHM_ENABLED)
  GASNET_PSHM_ENABLED=yes
  case "$target_os" in
    netbsd*)
        # XXX: We know this is required for decent performance, but WHY?!?
        #      What magic does libpthread perform at library init time?
        GASNET_PSHM_LIBS="$GASNET_PSHM_LIBS $GASNET_THREAD_LIBS"
        ;;
  esac

  GASNET_IF_ENABLED([large-pshm],
                    [Enable PSHM support for upto 45k cores per node (default is 255 cores)],
                    [gasnet_pshm_max_nodes=46655],
                    [gasnet_pshm_max_nodes=255])
  AC_DEFINE_UNQUOTED(GASNETI_CONFIG_PSHM_MAX_NODES, $gasnet_pshm_max_nodes)
elif test "$enabled_pshm" = yes; then
  GASNET_MSG_ERROR([User requested --enable-pshm but no supported implementation was found])
fi
AC_SUBST(GASNET_PSHM_ENABLED)
AC_SUBST(GASNET_PSHM_LIBS)

# Note that --enable-pshm disables aligned segments ONLY for conduits that USE it
GASNET_IF_DISABLED([aligned-segments],
                   [Disable requirement to achieve aligned VM segments, for heterogeneous clusters and platforms with address randomization],
		   [GASNETI_DISABLE_ALIGNED_SEGMENTS=1
		    AC_DEFINE(GASNETI_DISABLE_ALIGNED_SEGMENTS)],
		   [RVMFILE="/proc/sys/kernel/randomize_va_space"
		    if test -n "$GASNETI_ARCH_BGQ"; then
                      : # Cross-compiled and NOT applicable
		    elif test -f $RVMFILE && test "`cat $RVMFILE`" != "0" ; then
WMSG="$RVMFILE on this node indicates the Linux VM space randomization \
security feature is enabled. If this feature is also enabled on the compute \
nodes, you need to re-run configure with --disable-aligned-segments"
		      GASNET_MSG_WARN([$WMSG])
		    fi
		   ])
dnl GASNET_TOOLSONLY_FALSE_END

AM_CONDITIONAL(USE_PSHM, test "$with_pshm" != no)


########################################################################
## CPU feature checks

## Look for PPC970/PPC970FX (aka G5)
# Both false positives and false negatives are safe, but getting this
# wrong may hurt performance.
GASNET_IF_ENABLED_WITH_AUTO(tune-ppc970, Enable/disable tuning for PPC970 (aka G5) (auto-detected),
  enabled_ppc970=yes, enabled_ppc970=no, enabled_ppc970=probe)
if expr "$enabled_ppc970@$cross_compiling@$target_cpu" : "probe@no@powerpc" >/dev/null; then
  AC_MSG_CHECKING(whether to tune for PPC970/G5)
  case "$target_os" in
   linux*) if grep -i PPC970 /proc/cpuinfo >/dev/null 2>&1; then
             enabled_ppc970=yes
           fi ;;
  darwin*) if test `/usr/sbin/sysctl hw.cpusubtype | cut '-d ' -f2` = '100'; then
             enabled_ppc970=yes
           fi ;;
  esac
  if test "$enabled_ppc970" = yes; then
    AC_DEFINE(GASNETI_TUNE_PPC970)
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
fi

## Look for potentially buggy MIPS R10k systems
# There is a processor erratum to work-around in our atomics :-(
# The only SGI products w/ the bad cpus are the "IP27" platforms (Origin 200, Origin 2000, and Onyx 2)
# XXX: We could refine this to check the reported cpu revision
GASNET_IF_ENABLED_WITH_AUTO(arch-sgi-ip27, Enable/disable work-around for buggy SGI IP27 platforms (Onyx2, Origin200 and Origin2000) (disabled),
  enabled_sgi_ip27=yes, enabled_sgi_ip27=no, enabled_sgi_ip27=no)
if test "$enabled_sgi_ip27" = yes; then
  AC_DEFINE(GASNETI_ARCH_SGI_IP27)
fi

# Check how to reference MIPS assembler temporary register ("$1" or "$at")
if expr "$target_cpu" : "mips" >/dev/null; then
  AC_CHECK_HEADERS(sgidefs.h)
  GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS -I$TOP_SRCDIR -I$TOP_SRCDIR/other -D_IN_CONFIGURE")
  GASNET_TRY_CACHE_CHECK(for MIPS register '\$[]1', mips_reg_1, [
    #include "gasnet_asm.h"
  ], [
    GASNETI_ASM(".set noat\n\t"
                "move \$1,\$0\n\t"
                ".set at"); 
  ], [AC_DEFINE(GASNETI_HAVE_MIPS_REG_1)])
  GASNET_TRY_CACHE_CHECK(for MIPS register '\$at', mips_reg_at, [
    #include "gasnet_asm.h"
  ], [
    GASNETI_ASM(".set noat\n\t"
                "move \$at,\$0\n\t"
                ".set at"); 
  ], [AC_DEFINE(GASNETI_HAVE_MIPS_REG_AT)])
  GASNET_POPVAR(CFLAGS)
fi

## ARM-specific checks for "kernel helpers"
if expr "$target_cpu" : "arm" >/dev/null; then
  GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS -I$TOP_SRCDIR -I$TOP_SRCDIR/other -D_IN_CONFIGURE")

  ## Does ARM kernel have cmpxchg support?
  if test "$cross_compiling" = "yes" ; then
    GASNET_CROSS_VAR(GASNETI_HAVE_ARM_CMPXCHG, HAVE_ARM_CMPXCHG)
  else
    GASNET_TRY_CACHE_RUN([for ARM cmpxchg kernel support], have_arm_cmpxchg, [
      #include "gasnet_asm.h" /* For GASNETI_ARM_ASMCALL() */
      int cmp_swap(volatile unsigned int *v, int oldval, int newval) {
	register unsigned int result asm("r0");
	register unsigned int _newval asm("r1") = newval;
	register unsigned int _v asm("r2") = (unsigned long)v;
	register unsigned int _oldval asm("r4") = oldval;

	/* Transient failure is possible if interrupted.
	 * Since we can't distinguish the cause of the failure,
	 * we must retry as long as the failure looks "improper"
	 * which is defined as (!swapped && (v->ctr == oldval))
	 */
	__asm__ __volatile__ (
		"0:	mov	r0, r4          @ r0 = oldval              \n"
		GASNETI_ARM_ASMCALL(r3, 0x3f)
#ifdef __thumb2__
		"	ite	cc		@ THUMB2: If(cc)-Then-Else \n"
#endif
		"	ldrcc	ip, [[r2, #0]]	@ if (!swapped) ip=v->ctr  \n"
		"	eorcs	ip, r4, #1	@ else ip=oldval^1         \n"
		"	teq	r4, ip		@ if (ip == oldval)        \n"
		"	beq	0b		@    then retry            \n"
		: "=&r" (result)
		: "r" (_oldval), "r" (_v), "r" (_newval)
		: "r3", "ip", "lr", "cc", "memory" );

	return !result;
      } 

      int main(void) {
	volatile unsigned int X = 4321;

	/* Expect FAIL and X unchanged */
	if (cmp_swap(&X, 0, 1234) || (X != 4321)) return 1;

	/* Expect SUCCESS and X changed */
	if (!cmp_swap(&X, 4321, 1234) || (X != 1234)) return 1;

       	return 0;
      }
    ], [GASNETI_HAVE_ARM_CMPXCHG=1]
     , [GASNETI_HAVE_ARM_CMPXCHG=0])
  fi
  if test $GASNETI_HAVE_ARM_CMPXCHG = 1; then
    AC_DEFINE(GASNETI_HAVE_ARM_CMPXCHG)
  fi

  ## Does ARM kernel have membar support?
  if test "$cross_compiling" = "yes" ; then
    GASNET_CROSS_VAR(GASNETI_HAVE_ARM_MEMBAR, HAVE_ARM_MEMBAR)
  else
    GASNET_TRY_CACHE_RUN([for ARM membar kernel support], have_arm_membar, [
      #include "gasnet_asm.h" /* For GASNETI_ARM_ASMCALL() */
      #define arm_membar()                           \
	  __asm__ __volatile__ (                     \
		  GASNETI_ARM_ASMCALL(r0, 0x5f)      \
		  : : : "r0", "lr", "cc", "memory" )
      int main(void) {
	/* First check the interface version (number of helpers) */
	unsigned int kernel_helper_version = *(unsigned int *)0xffff0ffcUL;

	/* Max possible is 128 32-byte helper "slots".
	 * We check this because prior to 2.6.12, the same location
	 * held the thread-specific pointer! */
	if (kernel_helper_version > 128) exit(1);

	/* memory barrier occupies slot #3 */
	if (kernel_helper_version < 3) exit(1);

	/* Can't test any side effect, but at least check for crash */
	arm_membar();
	exit(0);
      }
    ], [GASNETI_HAVE_ARM_MEMBAR=1]
     , [GASNETI_HAVE_ARM_MEMBAR=0])
  fi
  if test $GASNETI_HAVE_ARM_MEMBAR = 1; then
    AC_DEFINE(GASNETI_HAVE_ARM_MEMBAR)
  fi

  GASNET_POPVAR(CFLAGS)
fi

## Do toolchain and CPU support ia64 "cmp8xchg16"?
GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS -I$TOP_SRCDIR -I$TOP_SRCDIR/other -D_IN_CONFIGURE")
AC_MSG_CHECKING(for ia64 cmp8xchg16 support)
AC_TRY_RUN([
  #include "gasnet_asm.h" /* For PLATFORM_COMPILER_* and GASNETI_*_ASM_* */

  #if !PLATFORM_ARCH_IA64
    #error wrong CPU architecture
  #elif PLATFORM_COMPILER_INTEL
    #include <ia64intrin.h>
    int cmp8xchg16(void volatile *ptr, unsigned long oldlo, unsigned long newlo, unsigned long newhi) {
      return oldlo == _InterlockedCompare64Exchange128_acq(ptr, newhi, newlo, oldlo);
    }
  #elif PLATFORM_COMPILER_GNU
    int cmp8xchg16(void volatile *ptr, unsigned long oldlo, unsigned long newlo, unsigned long newhi) {
      register unsigned long tmp = newlo;
      __asm__ __volatile__ (
	"mov		ar.ccv=%1			\n\t"
	"mov		ar.csd=%2;;			\n\t"
	"cmp8xchg16.acq	%0=[%3],%0,ar.csd,ar.ccv	\n"
	: "+r"(tmp) : "rO"(oldlo), "rO"(newhi), "r"(ptr) : "memory" );
      return tmp == oldlo;
    }
  #else
    #error compiler is unsupported
  #endif

  int main(void) {
	unsigned long *array[3];
	unsigned long *p = (void *)(((unsigned long)array + 15) & ~(unsigned long)15);
	int swapped;

	p[0] = 1234;
	p[1] = 0;

	swapped = cmp8xchg16(p, 1234, 5678, 0xabcdef);

	/* Want SUCCESS and changed X */
	return (!swapped || (p[0] != 5678) || (p[1] != 0xabcdef));
  }
], [AC_DEFINE(GASNETI_HAVE_IA64_CMP8XCHG16)
    AC_MSG_RESULT(yes)
], [AC_MSG_RESULT(no)
], [ : # For now we assume "NO" when cross compiling
    AC_MSG_RESULT(no)])
GASNET_POPVAR(CFLAGS)

## Do CC/gas and CPU support "cmpxchg16b"?
GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS -I$TOP_SRCDIR -I$TOP_SRCDIR/other -D_IN_CONFIGURE")
if test "$cross_compiling" = "yes" ; then
  GASNET_CROSS_VAR(GASNETI_HAVE_X86_CMPXCHG16B,HAVE_X86_CMPXCHG16B,[probe])
  if test "$GASNETI_HAVE_X86_CMPXCHG16B" = 'yes'; then
    AC_DEFINE(GASNETI_HAVE_X86_CMPXCHG16B)
  fi
fi
if test "$cross_compiling" = 'no' -o "$GASNETI_HAVE_X86_CMPXCHG16B" = 'probe' ; then
  GASNET_TRY_CACHE_RUN_WITHCC([for x86-64 cmpxchg16b support],[x86_64_cmpxchg16b],[
    #include "gasnet_asm.h" /* For PLATFORM_COMPILER_* and GASNETI_PGI_ASM_GNU */
  ],[[
  #if PLATFORM_ARCH_X86_64
    #if PLATFORM_COMPILER_GNU || PLATFORM_COMPILER_INTEL || \
        PLATFORM_COMPILER_PATHSCALE || GASNETI_PGI_ASM_GNU || \
        PLATFORM_COMPILER_OPEN64 || PLATFORM_COMPILER_CLANG

	unsigned long *array[3];
	volatile unsigned long *p = (void *)(((unsigned long)array + 15) & ~(unsigned long)15);

	/* Note oldhi selected to detect bug 2408 (anything in upper 32bits) */
	register unsigned long oldlo = 0;
	register unsigned long oldhi = 0x1234llu << 32;
	register unsigned long newlo = 1234;
	register unsigned long newhi = 5678;
	register unsigned char result;

	p[0] = oldlo;
	p[1] = oldhi;

	__asm__ __volatile__ (
		"lock;			"
		"cmpxchg16b	%1	\n\t"
		"sete		%0	"
		: "=q" (result), "=m" (*p), "+&a" (oldlo), "+&d" (oldhi)
		: "b" (newlo), "c" (newhi)
		: "cc", "memory");

	/* Want SUCCESS and changed values */
       	return (!result || (p[0] != 1234) || (p[1] != 5678));
    #else
	/* Don't know, but also don't currently care */
	return 1;
    #endif
  #else
    #error wrong CPU architecture
  #endif
  ]], [AC_DEFINE(GASNETI_HAVE_X86_CMPXCHG16B)])
fi
GASNET_POPVAR(CFLAGS)

## x86 -fPIC which steals the B register
## XXX: Test currently only correctly identifies PIC mode with using a
## compiler which accepts GNU-style asm - but that is the only
## case where we *currently* care.  Test may need some additional
## cases for other compilers in the future.
GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS -I$TOP_SRCDIR -I$TOP_SRCDIR/other -D_IN_CONFIGURE")
GASNET_TRY_CACHE_CHECK(for x86 EBX register, x86_ebx, [
  #include "gasnet_asm.h" /* For PLATFORM_COMPILER_* and GASNETI_PGI_ASM_GNU */
], [
  #if PLATFORM_ARCH_X86_64 || PLATFORM_ARCH_X86 
    #if PLATFORM_COMPILER_GNU || PLATFORM_COMPILER_INTEL || \
        PLATFORM_COMPILER_PATHSCALE || GASNETI_PGI_ASM_GNU || \
        PLATFORM_COMPILER_TINY || PLATFORM_COMPILER_OPEN64 || \
        PLATFORM_COMPILER_CLANG
      __asm__ __volatile__ ("push %0" : : "b" (0));
    #else
	/* Don't know, but fortunately don't currently care */
    #endif
  #else
    #error wrong CPU architecture
  #endif
], [AC_DEFINE(GASNETI_HAVE_X86_EBX)])
GASNET_POPVAR(CFLAGS)

## Does 32-bit SPARC compiler understand "U" and "h" register classes?
if expr "$GASNETI_PTR_BITS$target_cpu" : "32sparc" >/dev/null; then
  GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS")
  GASNET_TRY_CACHE_CHECK([for 64-bit SPARC asm support], have_sparc32_64bit_asm, [] ,[
      unsigned long long u, v;
      volatile unsigned long long *p = &u;
      register int retval;
      register int tmp = 0;
      __asm__ __volatile__ ( "std %1, %0" : "=m"(*p) : "U"(v) );
      __asm__ __volatile__ ( "clr %0 \n\tmovrz %1,1,%0" : "=&h"(retval), "+h"(tmp) );
  ], [AC_DEFINE(GASNETI_HAVE_SPARC32_64BIT_ASM)])
  GASNET_POPVAR(CFLAGS)
fi

## Spinloop hints
GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS -I$TOP_SRCDIR -I$TOP_SRCDIR/other -D_IN_CONFIGURE")
# need to run here because some OS's (Solaris/x86) forbid the pause instruction
GASNET_TRY_CACHE_RUN_WITHCC(for x86 pause instruction,x86_pause_instruction, [
  #include "gasnet_asm.h" /* Includes portable_platform.h */
], [
  #if PLATFORM_ARCH_X86_64 || PLATFORM_ARCH_X86
    GASNETI_ASM("pause");
  #else
    #error wrong CPU architecture
  #endif
], [AC_DEFINE(GASNETI_PAUSE_INSTRUCTION, "pause")])
## Disabled ia64 pause hint until we see an actual need for it -PHH 2006.01.09
#AC_MSG_CHECKING(for ia64 pause hint)
#AC_TRY_COMPILE([
#  #include "gasnet_asm.h"
#], [
#  #if defined(__ia64__)
#    GASNETI_ASM("hint @pause");
#  #else
#    #error wrong CPU architecture
#  #endif
#], [AC_DEFINE(GASNETI_PAUSE_INSTRUCTION, "hint @pause")
#    AC_MSG_RESULT(yes)
#], [AC_MSG_RESULT(no)])
GASNET_POPVAR(CFLAGS)

#---------------------------------------------------------------------------------------------------------------
# Linux's PR_SET_PDEATHSIG of interest to both smp-conduit and ssh-spawer
if expr "$target_os" : "linux" >/dev/null; then
  GASNET_IF_DISABLED(pdeathsig,
    [Support use of Linux-specific prctl(PR_SET_PDEATHSIG) (default is to probe)],
    [:],
    [
      GASNET_TRY_CACHE_LINK([for PR_SET_PDEATHSIG], pr_set_pdeathsig, [
        #include <sys/utsname.h> /* to look for unsafe 2.4.x kernels */
        #include <sys/prctl.h>
      ],[
        struct utsname u;
        int rc1 = uname(&u);
        int rc2 = prctl(PR_SET_PDEATHSIG, 0);
      ],[
        AC_DEFINE(HAVE_PR_SET_PDEATHSIG)
      ])
    ])
fi

#---------------------------------------------------------------------------------------------------------------

# Global disable of fork() (and related calls) on "special" systems.
# Conduits may also set GASNETI_NO_FORK individually
have_fork=yes
GASNET_IF_ENABLED_WITH_AUTO(fork, Allow internal use of fork() and related calls (default is to probe at configure time),
  [ : ],
  [ have_fork=no
    fork_reason="was disabled" ],
  [ AC_CHECK_FUNCS(fork popen system,
		   [ : ],
		   [ have_fork=no
		     fork_reason="appears to be missing or broken"
		     break])])
if test $have_fork = no; then
  AC_DEFINE(GASNETI_NO_FORK)
fi

#---------------------------------------------------------------------------------------------------------------
# Check for overrides of compile-time checks for SMPs
GASNET_IF_ENABLED_WITH_AUTO(smp-safe, Enable build of SMP-safe libraries (default is to probe at configure time),
  [ uni_build=no ],
  [ uni_build=yes],
  [ AC_CHECK_HEADERS(/boot/kernel.h)
    AC_MSG_CHECKING(whether to force a uni-processor build)
    uni_build=no;
    if test "$cross_compiling" = "yes" ; then
      uni_build='no (default for cross-compilation)'
    elif test "`uname -a | grep -i SMP`" = ""; then
      case "$target_os" in
      linux*)  
        AC_TRY_COMPILE([
          /* Note that we try to error on the side of an SMP */
          #include <linux/config.h>
          #if defined(CONFIG_SMP)
            #error Make the AC_TRY_COMPILE fail (SMP)
          #endif
          #ifdef HAVE__BOOT_KERNEL_H
            #include </boot/kernel.h>
            #if defined(__BOOT_KERNEL_SMP) && (__BOOT_KERNEL_SMP == 1)
              #error Make the AC_TRY_COMPILE fail (SMP)
            #endif
          #endif
          ], [], [ uni_build=yes ])
        ;;
      freebsd* | openbsd* | netbsd*)  
        if test "`/sbin/sysctl -n hw.ncpu 2>/dev/null`" = 1; then
          uni_build=yes
        fi
        ;;
      darwin*)
        if test "`/usr/sbin/sysctl -n hw.ncpu 2>/dev/null`" = 1; then
          uni_build=yes
        fi
        ;;
      *)  
        AC_TRY_RUN([
	    #include <unistd.h>
	    #if defined(_SC_NPROCESSORS_ONLN)
	    /* OK */
	    #elif defined(_SC_NPROC_ONLN)
	    # define _SC_NPROCESSORS_ONLN _SC_NPROC_ONLN
	    #elif defined(_SC_CRAY_MAXPES)
	    # define _SC_NPROCESSORS_ONLN _SC_CRAY_MAXPES
            #else
	    /* Maybe _SC_NPROCESSORS_ONLN is an enum? */
            #endif
            int main(void) { return !(sysconf(_SC_NPROCESSORS_ONLN) == 1); }
          ], [ uni_build=yes ])
        ;;
      esac
    fi
    AC_MSG_RESULT($uni_build)
  ] 
 )
if test "$uni_build" = yes; then
  AC_DEFINE(GASNETI_UNI_BUILD)
fi

GASNET_IF_ENABLED(loopback-memsync, Force memory barriers for GASNet local (loopback) puts and gets,
  [AC_DEFINE(GASNETI_MEMSYNC_ON_LOOPBACK)])
GASNET_IF_ENABLED(throttle-poll, throttle polling threads in multi-threaded configurations to reduce contention,
  [AC_DEFINE(GASNETI_THROTTLE_FEATURE_ENABLED)])

# FORCED non-default implementations - used mainly for debugging
#
# NOTE: If adding an "--enable-forced-*" option here, please:
# 1) Set enabled_force=yes to trigger the warning below
# 2) Add to the "don't trust performance" warning in tests/test.h
# 3) If applicable, the corresponding portion of the GASNet config string should
#    distinguish forced behaviors from default ones.
# 4) You probably want a "LINKCONFIG_IDIOTCHECK" as well (might be covered by #3)

GASNET_IF_ENABLED(force-generic-atomicops,
		  [Force mutex-based atomic ops (default is platform specific)],
		  [enabled_force=yes; enabled_generic_atomicops=yes])
GASNET_IF_ENABLED(force-os-atomicops,
		  [Force os-provided atomic ops (default is platform specific)],
		  [enabled_force=yes; enabled_os_atomicops=yes])
GASNET_IF_ENABLED(force-compiler-atomicops,
		  [Force compiler-provided atomic ops (default is platform specific)],
		  [enabled_force=yes; enabled_compiler_atomicops=yes])
  if test -z "$enabled_generic_atomicops$enabled_os_atomicops$enabled_compiler_atomicops"; then
    : # Nothing to do
  elif test "$enabled_generic_atomicops$enabled_os_atomicops$enabled_compiler_atomicops" != yes; then
    AC_MSG_ERROR([You may request at most one of --enable-force-generic-atomicops, --enable-force-os-atomicops, --enable-force-compiler-atomicops])
  elif test -n "$enabled_generic_atomicops" ; then
    AC_DEFINE(GASNETI_FORCE_GENERIC_ATOMICOPS)
  elif test -n "$enabled_os_atomicops"; then
    AC_DEFINE(GASNETI_FORCE_OS_ATOMICOPS)
  elif test -n "$enabled_compiler_atomicops"; then
    AC_DEFINE(GASNETI_FORCE_COMPILER_ATOMICOPS)
  fi
GASNET_IF_ENABLED(force-gettimeofday,
		  [Force use of gettimeofday() for timers (default is platform-specific)],
		  [enabled_force=yes; enabled_gettimeofday=yes])
GASNET_IF_ENABLED(force-posix-realtime,
		  [Force use of clock_gettime() for timers (default is platform-specific)],
		  [enabled_force=yes; enabled_posix_realtime=yes])
  if test "$enabled_gettimeofday$enabled_posix_realtime" = yesyes; then
    AC_MSG_ERROR([You cannot request both --enable-force-gettimeofday and --enable-force-posix-realtime])
  elif test -n "$enabled_gettimeofday" ; then
    AC_DEFINE(GASNETI_FORCE_GETTIMEOFDAY)
  elif test -n "$enabled_posix_realtime"; then
    AC_SEARCH_LIBS(clock_gettime, [rt posix4])
    AC_DEFINE(GASNETI_FORCE_POSIX_REALTIME)
  fi
GASNET_IF_ENABLED(force-yield-membars,
		  [Force a sched_yield() call in memory barriers (disabled by default)],
		  [enabled_force=yes; enabled_yield_membars=yes])
GASNET_IF_ENABLED(force-slow-membars,
		  [Force function call based (non-inline) memory barriers (disabled by default)],
		  [enabled_force=yes; enabled_slow_membars=yes])
  if test "$enabled_yield_membars$enabled_slow_membars" = yesyes; then
    AC_MSG_ERROR([You cannot request both --enable-force-yield-membars and --enable-force-slow-membars])
  elif test -n "$enabled_yield_membars" ; then
    AC_DEFINE(GASNETI_FORCE_YIELD_MEMBARS)
  elif test -n "$enabled_slow_membars" ; then
    AC_DEFINE(GASNETI_FORCE_SLOW_MEMBARS)
  fi
GASNET_IF_ENABLED(force-true-weakatomics,
		  [Force use of real atomic operations in sequential code (disabled by default)],
		  [enabled_force=yes; AC_DEFINE(GASNETI_FORCE_TRUE_WEAKATOMICS)] )
GASNET_IF_ENABLED(force-generic-semaphores,
		  [Force mutex-based semaphores (default is platform specific)],
		  [enabled_force=yes; AC_DEFINE(GASNETI_FORCE_GENERIC_SEMAPHORES)] )

if test "$enabled_force" = yes; then
GASNET_MSG_WARN([
-----------------------------------------------------------------------
 WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

 You have configured with one or more --enable-force-* options
 This usually has a SERIOUS impact on performance, so you should NOT
 trust any performance numbers obtained from programs built
 using this GASNet installation!!!

 WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
-----------------------------------------------------------------------])
fi

#---------------------------------------------------------------------------------------------------------------
# PSHM uses atomics in shared memory for IPC.
# So we assume that Generic and O/S atomics are insufficient.
# If that is ever not the case, one can add exceptions as needed.
dnl GASNET_TOOLSONLY_FALSE_BEGIN
if test "$with_pshm" != no; then
  case "$enabled_pshm" in
    yes) pshm_how='enabled explicitly by --enable-pshm';;
      *) pshm_how='auto-enabled';;
  esac
  if test -n "$enabled_generic_atomicops" ; then
    GASNET_MSG_ERROR([User passed --enable-force-generic-atomicops and PSHM was $pshm_how, but PSHM support requires native atomics])
  elif test -n "$enabled_os_atomicops"; then
    GASNET_MSG_ERROR([User passed --enable-force-os-atomicops and PSHM was $pshm_how, but PSHM support requires native atomics])
  else
    dnl Check for non-native atomics on this platform
    dnl To avoid false positives should the compilation fail for unrelated reasons, this
    dnl test is written to PASS only if we can positively ID generic or OS atomics.
    dnl So, if gasnet_atomic_bits.h has any unsatisfied dependencies on a given platform
    dnl then we could miss detecting the problem here, but will still catch at compile time.
    dnl Note that native atomics w/o signal safety are okay.
    GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MISC_CPPFLAGS $MISC_CFLAGS -I$TOP_SRCDIR -I$TOP_SRCDIR/other -D_IN_CONFIGURE")
    GASNET_TRY_CACHE_CHECK(for non-native atomics, non_native_atomics, [
      #include "portable_inttypes.h"
      #include "gasnet_asm.h" /* Includes portable_platform.h */
      #define GASNETI_INLINE(arg) /* empty */
      #include "gasnet_atomic_bits.h"
    ], [
      #if !defined(GASNETI_USE_GENERIC_ATOMICOPS) && !defined(GASNETI_USE_OS_ATOMICOPS)
        #error "Native atomics"
      #endif
    ], [
      GASNET_MSG_ERROR([PSHM was $pshm_how, but PSHM support requires native atomics which GASNet does not appear to support on your platform])
    ])
    GASNET_POPVAR(CFLAGS)
  fi
fi
dnl GASNET_TOOLSONLY_FALSE_END

#---------------------------------------------------------------------------------------------------------------
# CONDUIT CONFIGURATION UTILITIES
#---------------------------------------------------------------------------------------------------------------
# Hack-around to prevent a bogus autoconf 2.58 bug when AC_PROG_CXX is called conditionally below
am__fastdepCXX_TRUE='#'
am__fastdepCXX_FALSE=

dnl GASNET_TOOLSONLY_FALSE_BEGIN
GASNET_IF_DISABLED(auto-conduit-detect, [Enable/disable automatic detection of supported network conduits (enabled by default)], [enabled_auto_detect=no], [enabled_auto_detect=yes])
dnl GASNET_TOOLSONLY_FALSE_END

CONDUITS=
AC_SUBST(CONDUITS)
# reporting file output at completion
AC_DEFUN([CONDUIT_LIST_FILE], [
  if test -n "$CONDUIT_LIST" ; then
    CONDUIT_LIST_CLEAN=no
  else
    CONDUIT_LIST=.gasnet-conduit-list.tmp
    CONDUIT_LIST_CLEAN=yes
  fi
])
CONDUIT_LIST_FILE()
echo > $CONDUIT_LIST
echo "----------------------------------------------------------------------" >> $CONDUIT_LIST
echo "GASNet configuration: " >> $CONDUIT_LIST
echo " " >> $CONDUIT_LIST
dnl CONDUIT_BEGIN(lowername, desc)
dnl sets enabled_<lowername> to yes or no for whether conduit should be enabled
AC_DEFUN([CONDUIT_BEGIN],[
 pushdef([CONDUIT_NAME],[$1])
 pushdef([CONDUIT_DESC],[$2])
 # bug 1946: prevent confusing cross-conduit error messages
 GASNET_ERR_CLEANUP
 enabled_[]$1=no
dnl GASNET_TOOLSONLY_FALSE_BEGIN
 GASNET_IF_ENABLED_WITH_AUTO($1, Enable/disable the CONDUIT_DESC (auto-detected),
  [enabled_[]$1=yes;force_[]$1=yes],
   enabled_[]$1=no,
   enabled_[]$1=$enabled_auto_detect)
dnl GASNET_TOOLSONLY_FALSE_END
])
dnl CONDUIT_DISALLOW_SEGMENT(segment_type)
AC_DEFUN([CONDUIT_DISALLOW_SEGMENT],[
  pushdef([upperseg],translit($1,'a-z','A-Z'))
  if test "$enabled_[]CONDUIT_NAME" = "yes" && expr "$segconfig" : $1 >/dev/null; then
    msg="CONDUIT_NAME[]-conduit does not support the upperseg shared segment configuration"
    if test "$force_[]CONDUIT_NAME" = yes ; then
     GASNET_MSG_ERROR([User requested --enable-CONDUIT_NAME but $msg])
    fi
    GASNET_MSG_WARN([$msg - disabling CONDUIT_NAME])
    enabled_[]CONDUIT_NAME=no
  fi
  popdef([upperseg])
])
dnl CONDUIT_END(test_conduit_enabled)
AC_DEFUN([CONDUIT_END],[
  if test "$gasnet_toolsonly_mode" = "no" ; then
    if $1; then
      _conduit_enabled_flagstr=ON
      CONDUITS="$CONDUITS CONDUIT_NAME"
    else
      if test "$force_[]CONDUIT_NAME" = yes ; then
       GASNET_MSG_ERROR([User requested --enable-CONDUIT_NAME but I don't know how to build CONDUIT_NAME programs for your system])
      fi
      _conduit_enabled_flagstr=OFF
    fi
    echo "  CONDUIT_DESC m4_substr([                                                  ],len(CONDUIT_DESC))$_conduit_enabled_flagstr" >> $CONDUIT_LIST
  fi 
  popdef([CONDUIT_NAME])
  popdef([CONDUIT_DESC])
])
AM_CONDITIONAL(TOOLSONLY_MODE, test "$gasnet_toolsonly_mode" = "yes")
AM_CONDITIONAL(CONDUIT_MODE, test "$gasnet_toolsonly_mode" = "no")
dnl GASNET_TOOLSONLY_TRUE_BEGIN
dnl define([GASNET_ENV_DEFAULT_SUPPRESSHELP],[set])
dnl GASNET_TOOLSONLY_TRUE_END
#---------------------------------------------------------------------------------------------------------------
# CODE COMMON TO MULTIPLE CONDUITS
#---------------------------------------------------------------------------------------------------------------
dnl find proper CFLAGS for compiling firehose library
AC_DEFUN([GASNET_FH_CFLAGS],[
  case "$CC_FAMILY" in
          GNU) fh_cflags_default="${gcc_flag_prefix}-fno-strict-aliasing";;
    Pathscale) fh_cflags_default="-fno-strict-aliasing";;
       Open64) fh_cflags_default="-fno-strict-aliasing";;
          XLC) fh_cflags_default="-qnoansialias -qalias=addr";;
            *) fh_cflags_default="";;
  esac
  GASNET_ENV_DEFAULT(FH_CFLAGS, [$fh_cflags_default])
  AC_SUBST(FH_CFLAGS)
])

dnl GASNET_ID_OTHER_COMPILER(CCVAR, lang-decr)
dnl CCVAR is CXX|MPI_CC
AC_DEFUN([GASNET_ID_OTHER_COMPILER],[
  pushdef([lowername],translit($1,'A-Z','a-z'))
  GASNET_GET_PLATFORM_ID([$1],[$2 compiler])
  GASNET_FAMILY_CACHE_CHECK([$2], [$1], gasnet_cv_[]lowername[]_family)
  mismatch=""
  if test x"$[$1]_FAMILY" != x"$CC_FAMILY"; then
    mismatch="families"
  elif test x"$gasnet_cv_PLATFORM_[$1]_VERSION" != x"$gasnet_cv_PLATFORM_COMPILER_VERSION"; then
    mismatch="version codes"
  fi
  if test -n "$mismatch"; then
    pushdef([outfmt],[$AWK -F'|' '{ printf("%s\t%s",[$]2,[$]3); }'])
    idstr1=`echo "$gasnet_cv_PLATFORM_COMPILER_IDSTR" | outfmt`
    idstr2=`echo "$gasnet_cv_PLATFORM_[$1]_IDSTR" | outfmt`
    popdef([outfmt])
    GASNET_MSG_WARN([dnl
The compiler $mismatch of \$CC and \$[$1] do not match:
      CC:  $idstr1
m4_substr([        ],len([$1]))$1:  $idstr2
If this is not what you intended, then set \$[$1] to select a different $2 compiler.])
  fi
  popdef([lowername])
])

dnl GASNET_LINKHELPER-*:
dnl   GASNET_LINKHELPER_SETUP(lang-decr)
dnl   GASNET_LINKHELPER_TRY_{RUN,LINK}(msg,cv_var,includes,body,on_success,on_failure)
dnl   GASNET_LINKHELPER_CLEANUP()
LINKHELPER_BASE=conftest_cfunc
LINKHELPER_SRC=$LINKHELPER_BASE.c
LINKHELPER_OBJ=$LINKHELPER_BASE.o
LINKHELPER_LIBS="$LINKHELPER_OBJ $LIBM"
LINKHELPER_DECL="extern int linkhelper_cint; extern void linkhelper_cfunc(int val);"
LINKHELPER_CODE="linkhelper_cfunc(linkhelper_cint);"
if test x"$have_tls" = xyes; then
  LINKHELPER_TLS_DECL='__thread long tlocal;'
  LINKHELPER_TLS_CODE='tlocal = 4;'
fi
AC_DEFUN([GASNET_LINKHELPER_SETUP],[
  AC_MSG_CHECKING([building $1 helper object])
  cat >$LINKHELPER_SRC <<_GASNET_EOF
    #include <stdio.h>
    #include <string.h>
    #include <assert.h>
    #include <math.h>
    int linkhelper_cint = 0xFFFF;
    $LINKHELPER_TLS_DECL
    extern void linkhelper_cfunc(int val) {
      char s[[255]], s2[[255]];
      int a[[40]] = {1}; /* trigger Intel C issue */
      assert(val == linkhelper_cint);
      s[[4]] = '\0';
      s[[5]] = (char)(sin((double)val)+cos((double)val))+sqrt((double)val)+log((double)val);
      strcpy(s2, s);
      memcpy(s2, s, strlen(s)); memmove(s2, s, strlen(s));
      memcpy(s2, s, 4); memmove(s2, s, 4);
      $LINKHELPER_TLS_CODE
    }
_GASNET_EOF
  compile="$CC $CFLAGS $MISC_CFLAGS $CPPFLAGS -c $LINKHELPER_SRC -o $LINKHELPER_OBJ"
  eval echo "$compile" >&5
  if eval $compile 2>&5 && test -s $LINKHELPER_OBJ ; then
    AC_MSG_RESULT(ok)
  else
    GASNET_MSG_ERROR(failed while building $1 helper object)
  fi
])
AC_DEFUN([GASNET_LINKHELPER_CLEANUP],[ rm -f $LINKHELPER_OBJ ])
AC_DEFUN([GASNET_LINKHELPER_TRY_INNER],[
  GASNET_PUSHVAR(LIBS,"$LINKHELPER_LIBS $LIBS")
  ]GASNET_TRY_CACHE_[$1][($2,$3,[
    $4
    #ifdef __cplusplus
      extern "C" {
    #endif
      $LINKHELPER_DECL
    #ifdef __cplusplus
      }
    #endif
  ], [
    $LINKHELPER_CODE
    $5
  ],$6,$7)
  GASNET_POPVAR(LIBS)
])
AC_DEFUN([GASNET_LINKHELPER_TRY_LINK],[GASNET_LINKHELPER_TRY_INNER([LINK],$@)])
AC_DEFUN([GASNET_LINKHELPER_TRY_RUN],[GASNET_LINKHELPER_TRY_INNER([RUN_WITHCC],$@)])

#---------------------------------------------------------------------------------------------------------------
# CONDUIT CONFIGURATIONS
#---------------------------------------------------------------------------------------------------------------
if test "$gasnet_toolsonly_mode" = "no" ; then
echo " Portable conduits:" >> $CONDUIT_LIST
echo " -----------------" >> $CONDUIT_LIST
fi
#---------------------------------------------------------------------------------------------------------------

# Do C++ configuration
  AC_LANG_SAVE

  # when called by Titanium configure, target C++ compiler will be in TARGET_CXX(FLAGS)
  GASNET_ENV_DEFAULT(TARGET_CXX, "")
  if test "${TARGET_CXX}" != "" ; then
    GASNET_ENV_DEFAULT(TARGET_CXXFLAGS, "")
    unset ac_cv_prog_CXX
    unset ac_cv_prog_CXXCPP
    CXX="$TARGET_CXX"
    CXXFLAGS="$TARGET_CXXFLAGS"
  fi

  if test "$with_cxx" = no; then
    have_cxx=no
    GASNET_MSG_WARN([C++ compiler disabled using --without-cxx])
  else
    # bug 1725: Run GASNET_PROG_CXX with care in case it drops dead (missing C++)
    # Temporary override of AC_MSG_ERROR is a dirty hack!  However, the previous approach
    # of probing in a subshell eventually ran afoul of autoconf's AC_REQUIRE() rules.
    pushdef([AC_MSG_ERROR], [have_cxx=no])
    have_cxx=yes
    GASNET_PROG_CXX
    popdef([AC_MSG_ERROR])
    if test "$have_cxx" = no; then
      GASNET_MSG_WARN([It appears you have no working C++ compiler])
    fi
  fi

 if test "$have_cxx" = yes; then
  AC_LANG_CPLUSPLUS
  GASNET_ID_OTHER_COMPILER([CXX], [C++])
  CXXDEBUGFLAGS="-g"
  CXXOPTFLAGS="-O2"
  GASNET_UDP_LIBS=""
  case "$CXX_FAMILY" in
    GNU) 
       GASNET_GCC_VERSION_CHECK(CXX)
       gxx_flag_prefix=''
       gxx_flag_delim=' '
       case "$CC_SUBFAMILY" in
          NVIDIA) gxx_flag_prefix='-Xcompiler '
                  gxx_flag_delim=','
                  ;;
       esac
       case "$target_cpu" in
         sparc) GASNET_GET_ULTRASPARC_FLAGS(CXX,["-mcpu=ultrasparc3 -mtune=ultrasparc3" "-mcpu=ultrasparc -mtune=ultrasparc"]);;
         rs6000|powerpc*) GASNET_GET_PPC64_FLAGS(CXX,["-force_cpusubtype_ALL" "-Wa,-mppc64"]);;
         ia64) GASNET_TRY_CXXFLAG([-mtls-size=64], [MISC_CXXFLAGS="$MISC_CXXFLAGS -mtls-size=64"]);;
       esac
       GASNET_PUSHVAR(CXXFLAGS,"${gxx_flag_prefix}-g3")
       case "$target_os" in
         darwin*) # Want -gstabs+ instead of -g3, if supported
           GASNET_TRY_CXXFLAG([${gxx_flag_prefix}-gstabs+], [CXXFLAGS="${gxx_flag_prefix}-gstabs+"])
           ;;
       esac
       GASNET_GET_GNUWARNINGFLAGS(CXX)
       CXXDEBUGFLAGS="$CXXFLAGS"
       GASNET_POPVAR(CXXFLAGS)
    ;;
    PGI)   MISC_CXXFLAGS="-w -Masmkeyword -Msignextend" # apparently has no way to indep control warnings
           case "$GASNETI_PTR_BITS$target_os" in
             64darwin*) # PGI seems to have a different ABI
               GASNET_TRY_CXXFLAG([-Mllalign], [MISC_CXXFLAGS="$MISC_CXXFLAGS -Mllalign"])
               ;;
           esac
           ;;
    KAI)   MISC_CXXFLAGS="--diag_suppress 611 --diag_suppress 610" ;;
    MTA)   MISC_CXXFLAGS="-exceptions -display_error_number -WS 111,174,238" 
           CXXDEBUGFLAGS="-g2"
           CXXOPTFLAGS="-O3"
      ;;
    Intel) MISC_CXXFLAGS="-wd654 -wd1125 -wd279"
           GASNET_TRY_CXXFLAG([-wd1572],
                          [MISC_CXXFLAGS="$MISC_CXXFLAGS -wd1572"])
           ;;
    XLC)
     GASNET_GET_PPC64_FLAGS(CXX)
     MISC_CXXFLAGS="$MISC_CXXFLAGS -qsuppress=1540-0809" # 1540-0809 = empty source file (some linux headers)
     MISC_CXXFLAGS="$MISC_CXXFLAGS -qeh" ;;
    Sun) if test "$target_cpu" = "sparc"; then 
           GASNET_GET_ULTRASPARC_FLAGS(CXX,["-xarch=v8plusb" "-xarch=v8plusa" "-xarch=v8plus" "-xarch=sparcvis2" "-xarch=sparcvis" "-xarch=sparc"])
         fi
         CXXOPTFLAGS="-xO2" # Can we go higher to match "-fast -xO5" of CCOPTFLAGS?
         GASNET_TRY_CXXFLAG([-xlibmopt], [CXXOPTFLAGS="$CXXOPTFLAGS -xlibmopt"])
      ;;
    Cray)
     case "$target_cpu" in
      x86_64)   MISC_CXXFLAGS="-hnomessage=236 -hexceptions -hnew_for_init" ;; # XT, XE, XK, XC, etc.
      *)        AC_MSG_ERROR(Cray C++ compiler for unknown target CPU) ;;
     esac ;;
    Pathscale)  CXXDEBUGFLAGS="-g3 -O0" ;; # consistent with CCDEBUGFLAGS
    Open64)
       if test "$GASNETI_PTR_BITS" = 32; then # consistent with CCOPTFLAGS
         CXXOPTFLAGS="-O1"
       else
         CXXOPTFLAGS="-O3 -OPT:wrap_around_unsafe=off"
       fi
       GASNET_PUSHVAR(CXXFLAGS,"-g3")
       GASNET_GET_GNUWARNINGFLAGS(CXX)
       # As with CCDEBUGFLAGS lack a -Wno-declaration-after-statement
       CXXDEBUGFLAGS=`echo "$CXXFLAGS" | sed -e 's/-Wdeclaration-after-statement//'`
       GASNET_POPVAR(CXXFLAGS)
    ;;
    Clang)
       GASNET_TRY_WNO_FLAG([CXX],[-Wno-empty-body],[MISC_CXXFLAGS="$MISC_CXXFLAGS -Wno-empty-body"])
       GASNET_PUSHVAR(CXXFLAGS,"-O3")
       GASNET_TRY_WNO_FLAG([CXX],[-Wno-unused-value],[CXXFLAGS="$CXXFLAGS -Wno-unused-value"])
       CXXOPTFLAGS="$CXXFLAGS"
       GASNET_POPVAR(CXXFLAGS)
       GASNET_PUSHVAR(CXXFLAGS,"-g")
       GASNET_GET_GNUWARNINGFLAGS(CXX)
       CXXDEBUGFLAGS="$CXXFLAGS" 
       GASNET_POPVAR(CXXFLAGS)
    ;;
  esac  
  if test "$BUILDCONFIG" = "optimize" ; then
    CXXFLAGS="$CXXOPTFLAGS"
  else
    CXXFLAGS="$CXXDEBUGFLAGS"
  fi
  case "$target" in
    *-uclinux-*) # uclinux requires -Os
      MISC_CXXFLAGS="$MISC_CXXFLAGS -DGASNET_ALLOW_OPTIMIZED_DEBUG=1" ;;
    *)
      GASNET_CHECK_OPTIMIZEDDEBUG(CXX,CXXFLAGS,[$CXXCPPFLAGS $MISC_CXXFLAGS],[])
    ;;
  esac

  GASNET_ENV_DEFAULT(cxxLIBS, )             # C++ LIBS for any C++ link
  GASNET_ENV_DEFAULT(cxxLDFLAGS, )          # C++ LDFLAGS for any C++ link
  GASNET_UDP_LIBS="$GASNET_UDP_LIBS $cxxLIBS"
  AC_SUBST(cxxLIBS)
  AC_SUBST(cxxLDFLAGS)

  GASNET_PUSHVAR(CXXFLAGS,"$CXXFLAGS $CXXCPPFLAGS $MISC_CXXFLAGS")
  GASNET_PUSHVAR(LDFLAGS,"$LDFLAGS $cxxLDFLAGS")
  GASNET_PUSHVAR(LIBS,"$LIBS $cxxLIBS")
  GASNET_TRY_CACHE_VERIFY_RUN( [for working C++ exceptions], cxx_exceptions, [ ], [
     try {
       int *p = new int[[10]];
       throw p;
       return 1;
     } catch (int *exn) {
       if (exn) return 0;
       else return 2;
     }
  ], [ "I can\'t figure out how to build and run a program that uses C++ exceptions" ] )  

  GASNET_CHECK_RESTRICT([GASNETI_CXX],[C++ compiler])
  GASNET_GET_GNU_ATTRIBUTES([GASNETI_HAVE_CXX],[C++ compiler])

  # we link in an object compiled with CC that uses libc, to ensure that's working
  # [at least initially this is almost a clone of the MPI helper test]
  GASNET_LINKHELPER_SETUP([C++])

  # Now try to link/run the helper (which was built earlier)
  GASNET_LINKHELPER_TRY_RUN(for working C++ to C linkage, cxx_works, [], [],
      [ cxx_helper_worked=yes ], [ cxx_helper_worked=no; GASNET_ERR_SAVE() ] )
  # Apple's gcc/g++ don't provide TLS support, but the FSF gcc/g++ do.
  # The two are link compatible IF we explicitly pass -lgcc_eh
  # XXX: Really only needed for PAR and PARSYNC, but we don't distinguish.
  if test "$cxx_helper_worked$have_tls$CC_FAMILY" = noyesGNU; then
    LIBS="$LIBS $LIBGCC -lgcc_eh"  # $LIBGCC appears in $GASNET_LIBS eventually
    GASNET_LINKHELPER_TRY_RUN(for working C++ to C linkage w/ added -lgcc_eh,
        cxx_works_gcc_eh, [],[],
        [ cxx_helper_worked=yes
          GASNET_UDP_LIBS="$GASNET_UDP_LIBS -lgcc_eh" ],
        [ cxx_helper_worked=no; GASNET_ERR_SAVE() ] )
  fi
  if test "$cxx_helper_worked" = no; then
    have_cxx=no
    GASNET_MSG_WARN([It appears your C++ and C compilers are not link-compatible])
  fi
  GASNET_LINKHELPER_CLEANUP()

  GASNET_POPVAR(CXXFLAGS)
  GASNET_POPVAR(LDFLAGS)
  GASNET_POPVAR(LIBS)
  AC_SUBST(MISC_CXXFLAGS)
 fi

  AC_LANG_RESTORE
AM_CONDITIONAL(HAVE_CXX, test "$have_cxx" = yes)
if test "$have_cxx" = no; then
  GASNET_MSG_WARN([Disabling udp-conduit, which requires C++])
fi

# UDP/AMUDP Configuration
CONDUIT_BEGIN(udp,[portable UDP network conduit (udp)])
if test $enabled_udp = yes; then
 if test "$have_cxx" = yes; then
  # detect libraries necessary for udp-* backends
  GASNET_PUSHVAR(LIBS,"")
      AC_SEARCH_LIBS(socket, socket, have_udp=yes, have_udp=no)
      AC_SEARCH_LIBS(gethostbyname, nsl, , have_udp=no)
      GASNET_UDP_LIBS="$GASNET_UDP_LIBS $LIBS"

      # Note: getifaddrs may need -lsocket and -lnsl, but we caught those above
      AC_CHECK_HEADERS(ifaddrs.h)
      AC_CHECK_FUNCS(getifaddrs)

      if test "$have_udp" = yes ; then
	AC_MSG_CHECKING(for working UDP configuration)
	# TODO: add a basic test of the UDP configuration to make sure it works
	# this is a mess because every OS has different headers required
	udp_test_worked=yes
      
	if test "$udp_test_worked" = yes ; then
	    AC_MSG_RESULT(yes)
	else
	    AC_MSG_RESULT(no)
	    GASNET_MSG_WARN(build test failed: I don't know how to build UDP programs on your system)
	    have_udp=no
	fi
    fi
  GASNET_POPVAR(LIBS)
 else
  have_udp=no
 fi
fi
AC_SUBST(GASNET_UDP_LIBS)
AM_CONDITIONAL(USE_UDP_CONDUIT, test "$enabled_udp$have_udp" = yesyes)
CONDUIT_END([test "$enabled_udp$have_udp" = yesyes])

if test "$have_udp" = yes ; then
GASNET_ENV_DEFAULT(GASNET_CSPAWN_CMD, "$TI_CSPAWN_CMD")
if test "$GASNET_CSPAWN_CMD" != "" ; then
  AC_DEFINE_UNQUOTED(GASNET_CSPAWN_CMD, "$GASNET_CSPAWN_CMD")
fi
fi

#---------------------------------------------------------------------------------------------------------------
# MPI/AMMPI Configuration

dnl GASNET_TOOLSONLY_FALSE_BEGIN
# --enable-mpi-compat controls MPI compatibility in all conduits
GASNET_IF_ENABLED_WITH_AUTO(mpi-compat, Enable/disable MPI compatibility (auto-detected),
  [enabled_mpi_compat=yes;force_mpi_compat=yes],
  enabled_mpi_compat=no,
  enabled_mpi_compat=yes)
dnl GASNET_TOOLSONLY_FALSE_END

# --enable-mpi controls mpi-conduit
CONDUIT_BEGIN(mpi,[portable MPI-1.1/2.x network conduit (mpi)])

AC_DEFUN([GASNET_CHECK_MPI_CC],[
  if test "x$MPI_CC" = 'xno' >/dev/null; then
    # Avoid unecessary and potentially confusing probes and their errors/warnings
    have_mpi=no
    mpi_reason="was disabled"
  else
    GASNET_GETFULLPATH(MPI_CC)
    if expr "x$MPI_CC" : 'x/' >/dev/null; then
      if test "$BUILDCONFIG" = "debug" ; then
        SAFE_MPI_CFLAGS="-g"
      else
        SAFE_MPI_CFLAGS="-O"
      fi
      GASNET_SET_CHECKED_CFLAGS(MPI_CC, MPI_CFLAGS, $1, $SAFE_MPI_CFLAGS)
    else
      GASNET_MSG_WARN([MPI compiler "$MPI_CC" was not found.  Consider passing --with-mpi-cc if you want mpi-conduit or require MPI compatibility])
      # Avoid unecessary and potentially confusing probes and their errors/warnings
      MPI_CC=no
      have_mpi=no
      mpi_reason="was not found"
    fi
  fi
])

if test "$enabled_mpi" = yes || test "$enabled_mpi_compat" = yes; then
  # user can explicitly configure MPI by setting MPI_CC, MPI_CFLAGS and MPI_LIBS
  have_mpi=yes # start by assuming they have it
  case "$target_os" in
    solaris*)  
        # I don't have access to a Solaris cluster with MPI (other than NOW) 
        # but these seem like sane defaults
    	GASNET_ENV_DEFAULT(MPI_CC, mpicc)
        GASNET_CHECK_MPI_CC($MISC_CFLAGS $CFLAGS)
    	GASNET_ENV_DEFAULT(MPI_LIBS, )
	GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
        ;;
    linux*) 
        if test -n "$GASNETI_ARCH_ALTIX"; then
          GASNET_ENV_DEFAULT(MPI_CC, "$CC")
    	  GASNET_ENV_DEFAULT(MPI_LIBS, -lmpi)
	  GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
        elif test -n "$GASNETI_ARCH_IBMPE"; then
          gasnet_mpcc="mpcc -m$GASNETI_PTR_BITS"
          case "$CC_FAMILY" in
                  GNU) gasnet_mpcc="$gasnet_mpcc -compiler gnu";;
                  XLC) gasnet_mpcc="$gasnet_mpcc -compiler xl";;
                Intel) gasnet_mpcc="$gasnet_mpcc -compiler intel";;
                  PGI) gasnet_mpcc="$gasnet_mpcc -compiler pgi";;
            Pathscale) gasnet_mpcc="$gasnet_mpcc -compiler ekopath";;
          esac
          GASNET_ENV_DEFAULT(MPI_CC, $gasnet_mpcc)
    	  GASNET_ENV_DEFAULT(MPI_LIBS, )
	  GASNET_ENV_DEFAULT(MPIRUN_CMD, env PAGER=cat MP_FENCE=-- poe %P -nodes %M -procs %N -use_bulk_xfer yes -- %A)
        else
    	  GASNET_ENV_DEFAULT(MPI_CC, mpicc)
    	  GASNET_ENV_DEFAULT(MPI_LIBS, )
	  GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
        fi
        GASNET_CHECK_MPI_CC($MISC_CFLAGS $CFLAGS)
        GASNET_ENV_DEFAULT(MPIRUN_CMD_BATCH, "")
        ;;
    darwin*) # Need to probe -Wno-long-double independently
        GASNET_ENV_DEFAULT(MPI_CC, mpicc)
        BASIC_MPI_CFLAGS=`echo "$MISC_CFLAGS $CFLAGS" | sed -e 's/-Wno-long-double//'`
        GASNET_CHECK_MPI_CC($BASIC_MPI_CFLAGS)
        GASNET_PUSHVAR(CC,"$MPI_CC")
        GASNET_PUSHVAR(CFLAGS,"$MPI_CFLAGS")
        if test x"$MPI_CC" != xno; then
          GASNET_TRY_WNO_FLAG([C],[-Wno-long-double],
	                      [MPI_CFLAGS="$MPI_CFLAGS -Wno-long-double"])
        fi
        GASNET_POPVAR(CC)
        GASNET_POPVAR(CFLAGS)
        GASNET_ENV_DEFAULT(MPI_LIBS, )
        GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
        ;;
    mtx*)
    	GASNET_ENV_DEFAULT(MPI_CC, cc)
        GASNET_CHECK_MPI_CC($MISC_CFLAGS $CFLAGS)
    	GASNET_ENV_DEFAULT(MPI_LIBS, -lmpi)
	GASNET_ENV_DEFAULT(MPIRUN_CMD, mtarun -t %N -m %N /usr/bin/env _MPI_MT=%N %C)
        ;;
    *) 
      # unknown OS - if user doesn't provide info, nothing we can do
      GASNET_ENV_DEFAULT(MPI_CC, mpicc)
      GASNET_CHECK_MPI_CC($MISC_CFLAGS $CFLAGS)
      GASNET_ENV_DEFAULT(MPI_LIBS, )
      GASNET_ENV_DEFAULT(MPIRUN_CMD, mpirun -np %N %C)
      if test "$MPI_CC" = ""; then
        GASNET_MSG_WARN([I don't know how to build MPI programs on your system: consider passing --with-mpi-cc and/or setting \$MPI_CFLAGS and \$MPI_LIBS to configure MPI support for your site if you want mpi-conduit or require MPI compatibility])
	MPI_CC=$CC
        have_mpi=no
      fi 
      ;;
  esac
  if test x"$MPI_CC" != xno; then
  GASNET_GETFULLPATH(MPIRUN_CMD)
  fi

  # now run a basic test of the MPI configuration to make sure it works
  if test $have_mpi = yes; then

    # we link in an object compiled with CC that uses libc, to ensure that's working
    GASNET_LINKHELPER_SETUP(MPI)

    # we need a clean slate here because MPI config may be totally different
    GASNET_PUSHVAR(CC,"$MPI_CC")
    GASNET_PUSHVAR(CFLAGS,"$MPI_CFLAGS")
    GASNET_PUSHVAR(CPPFLAGS,"")
    GASNET_PUSHVAR(LDFLAGS,"")
    GASNET_PUSHVAR(LIBS,"$MPI_LIBS")
    # we just try to link an MPI app - running MPI apps is a whole new can of worms
    GASNET_LINKHELPER_TRY_LINK(for working MPI configuration, mpi_works, [
      #include <mpi.h>
    ], [
      MPI_Init((void*)0,(void*)0);
      MPI_Finalize();
    ], [ mpi_test_worked=yes ], [ mpi_test_worked=no GASNET_ERR_SAVE() ] )
    # Apple's gcc (and thus their mpicc) doesn't provide TLS support, but the
    # FSF gcc does.  The two are link compatible IF we explicitly pass -lgcc_eh
    # XXX: Really only needed for PAR and PARSYNC, but we don't distinguish.
    if test "$mpi_test_worked$have_tls$CC_FAMILY" = noyesGNU; then
      LIBS="$LIBS $LIBGCC -lgcc_eh"  # $LIBGCC appears in $GASNET_LIBS eventually
      GASNET_LINKHELPER_TRY_LINK(for working MPI configuration w/ added -lgcc_eh, mpi_works_gcc_eh, [
        #include <mpi.h>
      ], [
        MPI_Init((void*)0,(void*)0);
        MPI_Finalize();
      ], [ mpi_test_worked=yes
           MPI_LIBS="$MPI_LIBS -lgcc_eh"
      ], [ mpi_test_worked=no GASNET_ERR_SAVE() ] )
    fi
    GASNET_LINKHELPER_CLEANUP()

    if test "$mpi_test_worked" = yes ; then
      GASNET_ID_OTHER_COMPILER([MPI_CC], [MPI])
      GASNET_CHECK_RESTRICT([GASNETI_MPI_CC],[MPI_CC])
      GASNET_INLINE_MODIFIER([MPI_CC],[MPI_CC])
      GASNET_GET_GNU_ATTRIBUTES([GASNETI_HAVE_MPI_CC],[MPI_CC])
    fi

    GASNET_POPVAR(CC)
    GASNET_POPVAR(CFLAGS)
    GASNET_POPVAR(CPPFLAGS)
    GASNET_POPVAR(LDFLAGS)
    GASNET_POPVAR(LIBS)
  fi
  if test "$mpi_test_worked" = yes ; then
      if echo "$MPI_CFLAGS" | grep -- "-DAMMPI_COEXIST_WITH_AM" > /dev/null ; then
        # -DAMMPI_COEXIST_WITH_AM must be included whenever ammpi.h is compiled, or not at all
        MPI_DEFINES="$MPI_DEFINES -DAMMPI_COEXIST_WITH_AM"
      fi
      GASNET_CHECK_OPTIMIZEDDEBUG(MPI_CC,MPI_CFLAGS,[], [ 
        #include <mpi.h>
      ],[ # Try again with the suggested flags
        GASNET_MSG_WARN([Appending '-O0 -UNDEBUG' to MPI_CFLAGS to resolve debug vs. optimize compilation conflict])
        MPI_CFLAGS="$MPI_CFLAGS -O0 -UNDEBUG"
        GASNET_CHECK_OPTIMIZEDDEBUG(MPI_CC,MPI_CFLAGS,[], [ 
          #include <mpi.h>
        ],[
          GASNET_MSG_ERROR([User requested --enable-debug but \$MPI_CC or \$MPI_CFLAGS has enabled optimization (-O) or disabled assertions (-DNDEBUG).  Appending '-O0 -UNDEBUG' to \$MPI_CFLAGS did not resolve this conflict.  Please consider changing \$MPI_CC or \$MPI_CFLAGS, or passing --without-mpi-cc if an MPI compiler is not required.])
        ])
      ])
  elif test "$mpi_reason" = ""; then
      GASNET_MSG_WARN([build test failed: I don't know how to build MPI programs on your system -- see $TOP_BUILDDIR/config.log for details: consider using --with-mpi-cc, \$MPI_CFLAGS and \$MPI_LIBS to configure MPI support for your site if you want mpi-conduit or require MPI compatibility])
      have_mpi=no
  fi
  if test "$have_mpi$mpi_reason" = no ; then
    mpi_reason="was not found"
  fi
else
  have_mpi=no
  mpi_reason="was disabled"
fi
AC_SUBST(MPI_CC) # compiler to be used to build AMMPI, and linker for AMMPI-based backends
AC_SUBST(MPI_CFLAGS) # compiler flags (optimization, includes, etc) to be used with above compiler when building AMMPI
AC_SUBST(MPI_LIBS) # libs and ldflags that must be used when linking AMMPI-based backend
AC_SUBST(MPI_DEFINES) # preprocessor defs to be used for all client code that includes ammpi.h (not including AMMPI library itself)
AC_SUBST(MPIRUN_CMD) # prototype command used by tcrun to run MPI programs
AC_SUBST(MPIRUN_CMD_BATCH) # prototype command used by tcrun to run MPI programs
AM_CONDITIONAL(USE_MPI_CONDUIT, test "$enabled_mpi$have_mpi" = yesyes)
CONDUIT_END([test "$enabled_mpi$have_mpi" = yesyes])
if test "$enabled_mpi$have_mpi" = yesyes; then
  have_ammpi=yes
fi
if test "$force_mpi_compat$have_mpi" = yesno ; then
  GASNET_MSG_ERROR(User requested --enable-mpi-compat but I don't know how to build MPI programs for your system)
fi
if test "$enabled_mpi_compat$have_mpi" = yesyes ; then
  have_mpi_compat=yes
else
  have_mpi_compat=no
  if test "$have_mpi" = yes; then
    mpi_compat_reason="was disabled"
  else
    mpi_compat_reason="$mpi_reason"
  fi
fi
AM_CONDITIONAL(USE_MPI_COMPAT, test "$have_mpi_compat" = yes)
# USE_MPI == MPI-compatbility or MPI-conduit
AM_CONDITIONAL(USE_MPI, test "$have_mpi" = yes)

#-----------------------------------------------------------------------------------------------
# SMP configuration

CONDUIT_BEGIN(smp,[portable SMP-loopback network conduit (smp)])
if test $enabled_smp = yes; then
  if test x"$with_pshm" != xno; then
    dnl TODO: factor socket related probes
    AC_CHECK_HEADERS(sys/socket.h)
    case "$target_os" in
      solaris*)
        GASNET_PUSHVAR(LIBS,"")
          AC_SEARCH_LIBS(socket, socket, have_smp_libs=yes, have_smp_libs=no)
          if test "x$have_smp_libs" = xyes ; then
            SMP_LIBS="$LIBS"
          fi
        GASNET_POPVAR(LIBS)
      ;;
    esac

    GASNET_PUSHVAR(LIBS,"$LIBS $SMP_LIBS")
    GASNET_TRY_CACHE_RUN_WITHCC([for socketpair() support], socketpair_works, [
      #include <unistd.h>
      #if defined(HAVE_SYS_TYPES_H)
        #include <sys/types.h>
      #endif
      #if defined(HAVE_SYS_SOCKET_H)
        #include <sys/socket.h>
      #endif
    ], [[
      int rc, sv[2];

    #if defined(PF_LOCAL)
      rc = socketpair(PF_LOCAL, SOCK_STREAM, 0, sv);
    #elif defined(PF_UNIX)
      rc = socketpair(PF_UNIX, SOCK_STREAM, 0, sv);
    #else
      #error
    #endif
      if (rc < 0) return 1;
    ]], [ socketpair_test_worked=yes ], [ socketpair_test_worked=no ])

    if test "$socketpair_test_worked" = yes; then
      AC_DEFINE(GASNETC_USE_SOCKETPAIR)
    else
      SMP_LIBS=""
    fi

    GASNET_TRY_CACHE_RUN_WITHCC([for O_ASYNC support], o_async_works, [
      #include <unistd.h>
      #include <fcntl.h>
      #if defined(HAVE_SYS_TYPES_H)
        #include <sys/types.h>
      #endif
      #if defined(HAVE_SYS_SOCKET_H)
        #include <sys/socket.h>
      #endif
      #include <signal.h>
    ], [[
      int rc, sv[2];

    #if !defined(GASNETC_USE_SOCKETPAIR)
      rc = pipe(sv);
    #elif defined(PF_LOCAL)
      rc = socketpair(PF_LOCAL, SOCK_STREAM, 0, sv);
    #elif defined(PF_UNIX)
      rc = socketpair(PF_UNIX, SOCK_STREAM, 0, sv);
    #else
      #error
    #endif
      if (rc < 0) return 1;

      rc = fcntl(sv[0], F_GETFL);
      if (rc < 0) return 1;

      rc = fcntl(sv[0], F_SETFL, rc | O_ASYNC);
      if (rc < 0) return 1;

      if (SIGIO == 0) return 1;

      rc = fcntl(sv[0], F_SETOWN, getpid());
      if (rc < 0) return 1;
    ]], [ o_async_test_worked=yes ], [ o_async_test_worked=no ])

    if test "$o_async_test_worked" = yes; then
      AC_DEFINE(GASNETC_HAVE_O_ASYNC)
    fi

    GASNET_POPVAR(LIBS)
  fi
fi
AC_SUBST(SMP_LIBS)
AM_CONDITIONAL(USE_SMP_CONDUIT, test "$enabled_smp" = yes)
CONDUIT_END([test "$enabled_smp" = yes])

#--------------------------------------------------------------------------------------------------------

if test "$gasnet_toolsonly_mode" = "no" ; then
echo " " >> $CONDUIT_LIST
echo " Native, high-performance conduits:" >> $CONDUIT_LIST
echo " ---------------------------------" >> $CONDUIT_LIST
fi
dnl Please order network probes from LOW to HIGH precedence for selection

#--------------------------------------------------------------------------------------------------------
# MXM configuration
#

CONDUIT_BEGIN(mxm,[Mellanox MXM conduit (mxm)])
have_mxm=no
if test "$have_fork" = no; then
    GASNET_MSG_WARN([mxm-conduit requires or fork() ($fork_reason) for startup - disabling mxm])
elif test "$enabled_mxm" != no; then
    #
    # Either MXM was required explicitly, or we just need to probe for its existence
    #

    user_mxm_home=''
    AC_MSG_CHECKING(for --with-mxmhome)
    GASNET_WITH(mxmhome, [Specify a custom MXM install directory],
                [if test "$withval" = 'yes'; then
                   GASNET_MSG_ERROR(["--with-mxmhome requires an argument (MXM install directory)"])
                 fi
                 user_mxm_home="$withval"
                 mxm_user_provided=yes],
                [mxm_user_provided=no])
    AC_MSG_RESULT($user_mxm_home)

    if test "$mxm_user_provided" = yes; then
        mxm_home="$user_mxm_home"
    else
        mxm_home=/opt/mellanox/mxm
    fi

    have_mxm=yes  # assume success
    mxm_have_header=no
    mxm_have_lib=no
    mxm_in_path=no
    mxm_in_mxm_home=no

    if test "$mxm_user_provided" != yes; then
        # looking for MXM in standard locations only if user didn't provide its location
        AC_CHECK_HEADERS(mxm/api/mxm_api.h, mxm_have_header=yes)
        AC_CHECK_LIB(mxm, mxm_init, mxm_have_lib=yes)
        AC_MSG_CHECKING(for MXM in standard locations)
        if test "$mxm_have_header$mxm_have_lib" = yesyes; then
            mxm_in_path=yes
        fi
        AC_MSG_RESULT([$mxm_in_path])
    fi

    if test "$mxm_in_path" = yes; then
      MXM_INCLUDE=''
      MXM_LIBDIR=''
    else
      if test -e "$mxm_home/include/mxm/api/mxm_api.h" ; then
        mxm_have_header=yes
      fi
      if test -e "$mxm_home/lib${GASNETI_PTR_BITS}/libmxm.so" ; then
        mxm_have_lib=yes
        mxm_lib_path="$mxm_home/lib${GASNETI_PTR_BITS}"
      elif test -e "$mxm_home/lib/libmxm.so" ; then
        mxm_have_lib=yes
        mxm_lib_path="$mxm_home/lib"
      fi

      AC_MSG_CHECKING(for MXM in $mxm_home)
      if test "$mxm_have_header$mxm_have_lib" = yesyes; then
        mxm_in_mxm_home=yes
      fi
      AC_MSG_RESULT([$mxm_in_mxm_home])

      MXM_INCLUDE="-I$mxm_home/include"
      MXM_LIBDIR="-L$mxm_lib_path"
    fi

    if test "$mxm_user_provided$mxm_in_mxm_home" = yesno; then
        GASNET_MSG_WARN(MXM files not found in user-specified $user_mxm_home - disabling mxm)
        have_mxm=no
    elif test "$mxm_in_path$mxm_in_mxm_home" = nono; then
        have_mxm=no
    fi

    MXM_LIBS='-lmxm'

	if test "$have_mxm" = yes; then
	  # Try to compile and link a basic MXM program
	  GASNET_PUSHVAR(CFLAGS,"$CFLAGS $MXM_INCLUDE")
	  GASNET_PUSHVAR(LIBS,"$LIBS $MXM_LIBDIR $MXM_LIBS")
	  GASNET_TRY_CACHE_LINK(for working MXM configuration, mxm_works, [
            #include <mxm/api/mxm_api.h>
            #if MXM_API < MXM_VERSION(2,0)
            #include <mxm/api/mxm_addr.h>
            #endif  
        ], [{
               unsigned long cur_ver = mxm_get_version();
               mxm_error_t mxm_status = mxm_init(NULL,NULL);
            }], [ : ], [ have_mxm=no; GASNET_ERR_SAVE() ] )
      GASNET_POPVAR(CFLAGS)
	  GASNET_POPVAR(LIBS)
	fi

  GASNET_WITH(mxm-spawner,
     [mxm job spawner ("ssh" or "mpi", default is mpi when available)],
     [case "$withval" in
        ssh|mpi) gasnet_mxm_spawner_conf=$withval
             ;;
        yes) AC_MSG_ERROR([--with-mxm-spawner requires an argument ("ssh" or "mpi")])
             ;;
        *)   AC_MSG_ERROR([--with-mxm-spawner argument must be "ssh" or "mpi"])
             ;;
      esac],
     [AC_MSG_ERROR([--with-mxm-spawner argument must be "ssh" or "mpi"])],
     [if test "$have_mpi_compat" = yes; then
        gasnet_mxm_spawner_conf=mpi
      else
        gasnet_mxm_spawner_conf=ssh
      fi])
  if test "$gasnet_mxm_spawner_conf$have_mpi_compat" = mpino; then
    AC_MSG_ERROR([--with-mxm-spawner=mpi requires MPI compatibility support which $mpi_compat_reason])
  fi
  if test "$gasnet_mxm_spawner_conf$have_fork" = sshno; then
    AC_MSG_ERROR([--with-mxm-spawner=ssh requires fork() support which $fork_reason])
  fi
  GASNET_MXM_SPAWNER_CONF=$gasnet_mxm_spawner_conf
  AC_SUBST(GASNET_MXM_SPAWNER_CONF)
fi
AC_SUBST(MXM_INCLUDE)
AC_SUBST(MXM_LIBDIR)
AC_SUBST(MXM_LIBS)
AM_CONDITIONAL(USE_MXM_CONDUIT, test "$have_mxm" = yes)
AM_CONDITIONAL(MXM_BOOTSTRAP_SSH, test "$have_fork" = yes)
AM_CONDITIONAL(MXM_BOOTSTRAP_MPI, test "$have_mpi_compat" = yes)	# Option to omit MPI support?
CONDUIT_END([test "$have_mxm" = yes])

#--------------------------------------------------------------------------------------------------------
# Portals4 Conduit

CONDUIT_BEGIN(portals4,[Portals4 network conduit (portals4)])
if test "$enabled_portals4" = yes; then
  # Start by assuming we do have Portals4
  have_portals4=yes

  # Start by finding a reasonable default
  AC_PATH_PROGS([yod], [yod])
  if test -n "$yod"; then
    portals4_guess=`dirname \`dirname $yod\``
  else
    portals4_guess=/usr
  fi
  GASNET_ENV_DEFAULT(PORTALS4HOME, $portals4_guess)

  AC_MSG_CHECKING(if $PORTALS4HOME is the Portals 4 install directory)
  if test -r $PORTALS4HOME/include/portals4.h; then
    # PORTALS4HOME looks OK
    AC_MSG_RESULT([yes])
  elif test -r $PORTALS4HOME/bin/yod; then
    yod=$PORTALS4HOME/bin/yod
    GASNET_FOLLOWLINKS(yod)
    PORTALS4HOME=`dirname \`dirname $yod\``
    AC_MSG_RESULT([no - followed symlink to $PORTALS4HOME])
  else
    AC_MSG_RESULT([probably not])
  fi

  GASNET_ENV_DEFAULT(PORTALS4_INCLUDE, $PORTALS4HOME/include)
  GASNET_ENV_DEFAULT(PORTALS4_LIBS, -lportals)

  # TODO: we should have (and uniformly use) a macro for this -PHH
  portals4_lib_guess="$PORTALS4HOME/lib${GASNETI_PTR_BITS}"
  if test -e "$portals4_lib_guess/libportals.so" -o -e "$portals4_lib_guess/libportals.a"; then
    : # keep lib32 or lib64 as default
  else
    portals4_lib_guess="$PORTALS4HOME/lib"
  fi
  GASNET_ENV_DEFAULT(PORTALS4_LIBDIR, $portals4_lib_guess)

  # Assemble any extra flags needed at library build time
  PORTALS4_LIBCFLAGS=''

  GASNET_PUSHVAR(CFLAGS,"$CFLAGS -I$PORTALS4_INCLUDE $GASNET_THREAD_DEFINES $PORTALS4_LIBCFLAGS")
  GASNET_PUSHVAR(LIBS,"$LIBS -L$PORTALS4_LIBDIR $PORTALS4_LIBS $GASNET_THREAD_LIBS")

  # Try to compile and link a basic Portals 4 program
  GASNET_TRY_CACHE_LINK(for working Portals4 configuration, portals4_works, [
      #include <portals4.h>
  ], [{
    PtlInit();
  }], [ : ], [ have_portals4=no; GASNET_ERR_SAVE() ] )

  # Try to compile and link Portals 4 PMI support
  LIBS="$LIBS -lportals_runtime"
  GASNET_TRY_CACHE_LINK(for PMI support in Portals4 runtime library, portals4_pmi_works, [
      #include <stddef.h>
      #include <portals4/pmi.h>
  ], [{
      PMI_Init(NULL);
  }], [
      PORTALS4_LIBCFLAGS="$PORTALS4_LIBCFLAGS -I$PORTALS4_INCLUDE/portals4 -DHAVE_PMI_H"
      PORTALS4_LIBS="$PORTALS4_LIBS -lportals_runtime"
   ] )

  GASNET_POPVAR(CFLAGS)
  GASNET_POPVAR(LIBS)

  max_md_size=0
  GASNET_WITH([portals4-max-md-size],
    [Log base 2 of the maximum size in bytes of a memory descriptor.  Should only be set for implementations which do not support binding all of virtual address space.],
    [if test "$with_portals4_max_md_size" = "yes" ; then
       max_md_size=0
     else
       max_md_size=$with_portals4_max_md_size
     fi])
    AC_DEFINE_UNQUOTED([GASNETC_PORTALS4_MAX_MD_SIZE], [$max_md_size],
      [Log base 2 of the maximum size in bytes of a memory descriptor.  Set to 0 if MD can bind all of memory.])
  max_va_size=0
  GASNET_WITH([portals4-max-va-size],
         [Log base 2 of the maximum size in bytes of the user virtual address space.  Should only be set for implementations which do not support binding all of virtual address space.],
    [if test "$with_portals4_max_va_size" = "yes" ; then
       max_va_size=0
     else
       max_va_size=$with_portals4_max_va_size
     fi])
    AC_DEFINE_UNQUOTED([GASNETC_PORTALS4_MAX_VA_SIZE], [$max_va_size],
      [Log base 2 of the maximum size in bytes of the user virtual address space.  Set to 0 if MD can bind all of memory.])

    if test \( $max_md_size -eq 0 -a $max_va_size -ne 0 \) -o \( $max_md_size -ne 0 -a $max_va_size -eq 0 \); then
      AC_MSG_ERROR([If either --with-portals4-max-md-size or --with-portals4-max-va-size is set, both must be set.])
    fi
    if test $max_md_size -ge $max_va_size; then
      max_md_size=0;
      max_va_size=0;
    fi
dnl AS_IF([test $max_md_size -ne 0 -a $max_va_size -ne 0],
dnl       [AC_MSG_NOTICE([Portals 4 address space size: $max_md_size, $max_va_size])])
fi
AC_SUBST(PORTALS4_INCLUDE)
AC_SUBST(PORTALS4_LIBDIR)
AC_SUBST(PORTALS4_LIBS)
AC_SUBST(PORTALS4_LIBCFLAGS)
AM_CONDITIONAL(USE_PORTALS4_CONDUIT, test "$have_portals4" = yes)
CONDUIT_END([test "$have_portals4" = yes])

#--------------------------------------------------------------------------------------------------------
# IBV configuration

CONDUIT_BEGIN(ibv,[OpenIB/OpenFabrics IB Verbs network conduit (ibv)])
if test "$enabled_ibv$have_mpi_compat$have_fork" = yesnono; then
  enabled_ibv=no
  GASNET_MSG_WARN([ibv-conduit requires either MPI compatibility ($mpi_compat_reason) or fork() ($fork_reason) for startup - disabling ibv])
fi
if test "$enabled_ibv" = yes; then
  # Start by assuming we do have IBV
  have_ibv=yes

  # Start by finding a reasonable default
  AC_PATH_PROGS(ibv_devinfo, ibv_devinfo)
  if test -n "$ibv_devinfo"; then
    ibv_guess=`dirname \`dirname $ibv_devinfo\``
  elif test -r /usr/local/ofed; then
    ibv_guess=/usr/local/ofed
  elif test -r /opt/ofed; then
    ibv_guess=/opt/ofed
  else
    ibv_guess=/usr
  fi
  GASNET_ENV_DEFAULT(IBVHOME, $ibv_guess)

  AC_MSG_CHECKING(if $IBVHOME is the IB Verbs install directory)
  if test -r $IBVHOME/include/infiniband/verbs.h; then
    # IBVHOME looks OK
    AC_MSG_RESULT([yes])
  elif test -r $IBVHOME/bin/ibv_devinfo; then
    ibv_devinfo=$IBVHOME/bin/ibv_devinfo
    GASNET_FOLLOWLINKS(ibv_devinfo)
    IBVHOME=`dirname \`dirname $ibv_devinfo\``
    AC_MSG_RESULT([no - followed symlink to $IBVHOME])
  else
    AC_MSG_RESULT([probably not])
  fi

  GASNET_ENV_DEFAULT(IBV_INCLUDE, $IBVHOME/include)
  GASNET_ENV_DEFAULT(IBV_LIBS, -libverbs)
  # Note 'test -d $foo/.' works even if $foo is a symlink
  if test -d $IBVHOME/lib${GASNETI_PTR_BITS}/.; then
    ibv_libdir_default=$IBVHOME/lib${GASNETI_PTR_BITS}
  else
    ibv_libdir_default=$IBVHOME/lib
  fi
  GASNET_ENV_DEFAULT(IBV_LIBDIR, $ibv_libdir_default)

  # Assemble any extra flags needed at library build time
  IBV_LIBCFLAGS='' # None yet

  # Try to compile and link a basic IB Verbs program
  GASNET_PUSHVAR(CFLAGS,"$CFLAGS -I$IBV_INCLUDE $GASNET_THREAD_DEFINES $IBV_LIBCFLAGS")
  GASNET_PUSHVAR(LIBS,"$LIBS -L$IBV_LIBDIR $IBV_LIBS $GASNET_THREAD_LIBS")

  GASNET_TRY_CACHE_LINK(for working IB Verbs configuration, ibv_works, [
    #if defined(__GNUC__) && !defined(inline)
      /* ANSI-ify the verbs headers */
      #define inline __inline__
      #include <infiniband/verbs.h>
      #undef inline
    #else
      #include <infiniband/verbs.h>
    #endif
  ], [{
    struct ibv_device device;
    char *s = ibv_get_device_name(&device);
  }], [ : ], [ have_ibv=no; GASNET_ERR_SAVE() ] )

  if test "$have_ibv" = yes; then
    GASNET_TRY_CACHE_LINK(for ibv_device.transport_type, ibv_transport_type, [
      #if defined(__GNUC__) && !defined(inline)
        /* ANSI-ify the verbs headers */
        #define inline __inline__
        #include <infiniband/verbs.h>
        #undef inline
      #else
        #include <infiniband/verbs.h>
      #endif
    ], [
      struct ibv_device device;
      device.transport_type = IBV_TRANSPORT_IB;
    ], [ AC_DEFINE(HAVE_IBV_TRANSPORT_TYPE) ] )
  fi

  GASNET_POPVAR(CFLAGS)
  GASNET_POPVAR(LIBS)

  if test "$have_ibv" = yes; then
    # XXX: Need to support older (get_devices) interface at some point?
    #GASNET_PUSHVAR(LIBS,"$LIBS -L$IBV_LIBDIR")
    #AC_SEARCH_LIBS(ibv_get_device_list, ibverbs, AC_DEFINE(HAVE_IBV_GET_DEVICE_LIST))
    #AC_SEARCH_LIBS(ibv_get_devices, ibverbs, AC_DEFINE(HAVE_IBV_GET_DEVICES))
    #GASNET_POPVAR(LIBS)

    # Since we are using firehose we need to disable certain optimizations.
    # See bug #350 for an example of why firehose needs this.
    # See bug #596 or #1031 for evidence that InfiniBand is affected by this.
    # See bug #1052 for evidence that xlc is affected.
    GASNET_FH_CFLAGS

    # Collect IB-specifc configure options

    GASNET_IF_ENABLED_WITH_AUTO(ibv-rcv-thread, [See ibv-conduit/README (enabled by default if pthreads available)], 
      [enabled_ibv_rcv_thread=yes
       if test "$have_pthread" = no; then
         AC_MSG_ERROR([--enable-ibv-rcv-thread requires pthread support but pthreads $pthread_reason])
       fi],
      [enabled_ibv_rcv_thread=no],
      [enabled_ibv_rcv_thread=$have_pthread])
      if test "$enabled_ibv_rcv_thread" = yes; then
        AC_DEFINE(GASNETC_IBV_RCV_THREAD)
      fi

    GASNET_IF_ENABLED_WITH_AUTO(ibv-conn-thread, [See ibv-conduit/README (enabled by default if pthreads available)], 
      [enabled_ibv_conn_thread=yes
       if test "$have_pthread" = no; then
         AC_MSG_ERROR([--enable-ibv-conn-thread requires pthread support but pthreads $pthread_reason])
       fi],
      [enabled_ibv_conn_thread=no],
      [enabled_ibv_conn_thread=$have_pthread])
      if test "$enabled_ibv_conn_thread" = yes; then
        AC_DEFINE(GASNETC_IBV_CONN_THREAD)
      fi

    GASNET_WITH(ibv-spawner,
       [IBV job spawner ("ssh", "mpi" or "pmi", default is mpi when available)],
       [case "$withval" in
          ssh|mpi|pmi) gasnet_ibv_spawner_conf=$withval
               ;;
          yes) AC_MSG_ERROR([--with-ibv-spawner requires an argument ("ssh", "mpi" or "pmi")])
               ;;
          *)   AC_MSG_ERROR([--with-ibv-spawner argument must be "ssh", "mpi" or "pmi"])
               ;;
        esac],
       [AC_MSG_ERROR([--with-ibv-spawner argument must be "ssh", "mpi" or "pmi"])],
       [if test "$have_mpi_compat" = yes; then
          gasnet_ibv_spawner_conf=mpi
        else
          gasnet_ibv_spawner_conf=ssh
        fi])
    if test "$gasnet_ibv_spawner_conf$have_mpi_compat" = mpino; then
      AC_MSG_ERROR([--with-ibv-spawner=mpi requires MPI compatibility support which $mpi_compat_reason])
    fi
    if test "$gasnet_ibv_spawner_conf$have_fork" = sshno; then
      AC_MSG_ERROR([--with-ibv-spawner=ssh requires fork() support which $fork_reason])
    fi
    GASNET_IBV_SPAWNER_CONF=$gasnet_ibv_spawner_conf
    AC_SUBST(GASNET_IBV_SPAWNER_CONF)

    gasnetc_ibv_max_hcas=2
    GASNET_IF_DISABLED(ibv-multirail, [Disable IBV over multiple HCAs, see ibv-conduit/README (enabled by default)], enabled_ibv_multirail=no, enabled_ibv_multirail=yes)
    GASNET_WITH(ibv-max-hcas,
       [maximum number of IBV HCAs to open for multi-rail support (default is 2)],
       [if expr "${withval}" : "[[1-9]][[0-9]]*" >/dev/null; then
          gasnetc_ibv_max_hcas="$withval"
        else
          AC_MSG_ERROR([--with-ibv-max-hcas requires a postive integer argument])
        fi],
       [AC_MSG_ERROR([--with-ibv-max-hcas requires a postive integer argument])],
       [:])
    if test "$enabled_ibv_multirail" = yes; then
      AC_DEFINE_UNQUOTED(GASNETC_IBV_MAX_HCAS, $gasnetc_ibv_max_hcas)
    fi

    GASNET_IF_DISABLED([ibv-srq],
                       [Disable Shared Receive Queue (SRQ) support in ibv-conduit (enabled by default)],
		       [enabled_ibv_srq=no], [AC_DEFINE(HAVE_IBV_SRQ)])

    GASNET_IF_ENABLED_WITH_AUTO([ibv-xrc],
        [Enable/disable eXtended Reliable Connection (XRC) support in ibv-conduit (default is to probe)],
        [enabled_ibv_xrc="yes"; force_ibv_xrc="yes"],
        [enabled_ibv_xrc="no"],
        [enabled_ibv_xrc="yes"])
    if test "x$enabled_ibv_srq" = xno; then
      if test "x$force_ibv_xrc" = xyes; then
        GASNET_MSG_ERROR([IBV XRC support was requested with --enable-ibv-xrc but requires SRQ support which has been disabled])
      fi
    elif test "$enabled_ibv_xrc" = yes; then
      GASNET_PUSHVAR(LIBS,"$LIBS -L$IBV_LIBDIR $IBV_LIBS $GASNET_THREAD_LIBS")
      AC_CHECK_FUNCS([ibv_create_xrc_rcv_qp], [have_ibv_xrc=yes], [have_ibv_xrc=no])
      GASNET_POPVAR(LIBS)
      if test "$have_ibv_xrc" = yes; then
        AC_DEFINE(HAVE_IBV_XRC)
      elif test "x$force_ibv_xrc" = xyes; then
        GASNET_MSG_ERROR([IBV XRC support was requested with --enable-ibv-xrc but is not available])
      fi
    fi
  fi
fi
AC_SUBST(IBV_INCLUDE)
AC_SUBST(IBV_LIBDIR)
AC_SUBST(IBV_LIBS)
AC_SUBST(IBV_LIBCFLAGS)
AM_CONDITIONAL(USE_IBV_CONDUIT, test "$have_ibv" = yes)
AM_CONDITIONAL(IBV_BOOTSTRAP_SSH, test "$have_fork" = yes)
AM_CONDITIONAL(IBV_BOOTSTRAP_MPI, test "$have_mpi_compat" = yes)	# Option to omit MPI support?
AM_CONDITIONAL(IBV_RCV_THREAD,test "$enabled_ibv_rcv_thread" = yes)
CONDUIT_END([test "$have_ibv" = yes])

#--------------------------------------------------------------------------------------------------------
# Gemini and Aries Conduits

AC_DEFUN([GASNET_CHECK_GNI],[
pushdef([lowername],translit($1,'A-Z','a-z'))

# gni only supported on compute node linux for now (cnl)
case "$target" in
  *-cnl-*) ;;
  *) if test "$force_[]lowername" != "yes"; then
       enabled_[]lowername=no 
     fi
  ;;
esac
if test ${gni_network}:${enabled_[]lowername} = lowername[]:yes; then
  have_[]lowername=yes # start by assuming we have it

  GASNET_ENV_DEFAULT(GNI_INCLUDES,)
  GASNET_ENV_DEFAULT(GNI_LIBS,)

  GASNET_PUSHVAR(CPPFLAGS,"$CPPFLAGS ${GNI_INCLUDES}")
  GASNET_PUSHVAR(LIBS,"$LIBS ${GNI_LIBS}")

  # These duplicate part of the "working Gemini/Aries configuration" probe.
  # However, failing on these can help distinguish which module is missing/broken.
  # Also $have_pmi_cray_h squashes later probe for pmi.h
  AC_CHECK_HEADERS(pmi_cray.h, [have_pmi_cray_h=1], [have_[]lowername=no])
  AC_CHECK_HEADERS(gni_pub.h, [:], [have_[]lowername=no])

  # PSHM must be XPMEM or none.  If none, then we still want hugetlbfs if available.
  if test $have_[]lowername = no; then
    : # empty
  elif test "$with_pshm" = no; then
    if test $have_hugetlbfs = yes; then
      GNI_LIBS="$GNI_LIBS -Wl,--whole-archive,-lhugetlbfs,--no-whole-archive"
      GNI_INCLUDES="$GNI_INCLUDES -DGASNETI_USE_HUGETLBFS"
    fi
  else
    AC_MSG_CHECKING(for pshm-over-xpmem support required by $1)
    if test "$with_pshm" = xpmem; then
      AC_MSG_RESULT(yes)
    else
      have_[]lowername=no
      AC_MSG_RESULT(no)
    fi
  fi

  if test $have_[]lowername = yes; then
    # If/when we use firehose we need to disable certain optimizations.
    #GASNET_FH_CFLAGS

    GASNET_TRY_CACHE_LINK(for working $1 configuration, lowername[]_works, [
      #include <stddef.h>
      #include <stdint.h>
      #include <gni_pub.h>
      #include <pmi_cray.h>
    ], [
      gni_cdm_handle_t cdm_hndl;
      gni_return_t rc = GNI_CdmDestroy(cdm_hndl);

      int localranks;
      int ret = PMI_Get_numpes_on_smp(&localranks); /* Cray extension */
    ], [ : ], [ have_gemini=no; GASNET_ERR_SAVE() ] )
  fi

  GASNET_POPVAR(LIBS)
  GASNET_POPVAR(CPPFLAGS)

  GASNET_WITH(gni-max-medium,
     [gasnet_AMMaxMedium() for Gemini and Aries conduits (default 960)],
     [if expr "$withval" : '[[0-9]]*$' >/dev/null 2>&1 && \
         expr \( "$withval" / 64 \) \* 64 = "$withval" >/dev/null 2>&1 &&
         expr "$withval" '>=' 512  >/dev/null 2>&1 ; then
        gni_max_medium="$withval"
      else
        GASNET_ERR_SAVE()
        AC_MSG_ERROR([--with-gni-max-medium="$withval" is not legal.  Value must be a multiple of 64 and no smaller than 512])
      fi
     ],
     [GASNET_ERR_SAVE()
      AC_MSG_ERROR([--with-gni-max-medium must be a multiple of 64 and no smaller than 512])],
     [gni_max_medium=960])
  AC_DEFINE_UNQUOTED(GASNETC_GNI_MAX_MEDIUM, [$gni_max_medium])

  GASNET_IF_ENABLED(gni-multi-domain, [Use experimental multi-domain support in PAR builds of Gemini and Aries conduits], [AC_DEFINE(GASNETC_GNI_MULTI_DOMAIN)])

  AC_SUBST(GNI_LIBS)
  AC_SUBST(GNI_INCLUDES)
fi
popdef([lowername])
])

AC_MSG_CHECKING(for GNI network type)
if test "${CRAYPE_NETWORK_TARGET+set}" = set ; then
  gni_network=${CRAYPE_NETWORK_TARGET}
elif test "${XTPE_NETWORK_TARGET+set}" = set ; then
  gni_network=${XTPE_NETWORK_TARGET}
else
  gni_network="unknown"
fi
AC_MSG_RESULT($gni_network)

CONDUIT_BEGIN(gemini,[Gemini network conduit (gemini)])
CONDUIT_DISALLOW_SEGMENT(everything)
if test "$enabled_gemini" = yes; then
  GASNET_CHECK_GNI(Gemini)
fi
AM_CONDITIONAL(USE_GEMINI_CONDUIT, test "$have_gemini" = yes)
CONDUIT_END([test "$have_gemini" = yes])

CONDUIT_BEGIN(aries,[Aries network conduit (aries)])
CONDUIT_DISALLOW_SEGMENT(everything)
if test "$enabled_aries" = yes; then
  GASNET_CHECK_GNI(Aries)
fi
AM_CONDITIONAL(USE_ARIES_CONDUIT, test "$have_aries" = yes)
CONDUIT_END([test "$have_aries" = yes])

#--------------------------------------------------------------------------------------------------------
# SHMEM configuration

CONDUIT_BEGIN(shmem,[Shmem network conduit (shmem)])

if test $enabled_shmem = yes; then
  SHMEM_FLAVOUR="unknown"
  have_shmem=yes

  AC_MSG_CHECKING(for SHMEM network type)

  case "$target_os" in
    # Linux shmem may mean Quadrics shmem or SGI shmem, but only SGI shmem is supported.
    linux*)
      if test -n "$GASNETI_ARCH_ALTIX"; then
	SHMEM_FLAVOUR="SGI_SHMEM"
	AC_MSG_RESULT(SGI/Altix)
	GASNET_ENV_DEFAULT(MPI_ROOT, "/usr") # At least SGI UV sets this
	GASNET_ENV_DEFAULT(SHMEM_INCLUDE, "${MPI_ROOT}/include")
	GASNET_ENV_DEFAULT(SHMEM_LIBDIR, "${MPI_ROOT}/lib")
        # Work around stoopid bug in Intel ecc on Altix: programs won't compile
        # if -L/usr/lib or -I/usr/include is explicitly passed.
	if test "$SHMEM_LIBDIR" = "/usr/lib"; then
	  SHMEM_LIBDIR="/anything/but/usr/lib"
	fi
	if test "$SHMEM_INCLUDE" = "/usr/include"; then
	  SHMEM_INCLUDE="/anything/but/usr/include"
	fi
        GASNET_ENV_DEFAULT(SHMEM_LIBS, [-lsma -lmpi])
      else
        AC_MSG_RESULT(unknown)
        have_shmem=no
      fi
      ;;
    *)
      AC_MSG_RESULT(unknown)
      have_shmem=no
      ;;
  esac


  if test $have_shmem = yes; then
    if test "$SHMEM_INCLUDE" = "/anything/but/usr/include"; then
      SHMEM_INC2="/usr/include/mpp"
    else
      SHMEM_INC2="${SHMEM_INCLUDE}/mpp"
    fi
    GASNET_PUSHVAR(CFLAGS,"$CFLAGS -I${SHMEM_INCLUDE} -I${SHMEM_INC2}")
    GASNET_PUSHVAR(LIBS,"$LIBS -L${SHMEM_LIBDIR} ${SHMEM_LIBS}")

    # only include shmem.h even if some prescribe <mpp/shmem.h> and rely on the
    # include search directories to be correct.  This approach is more general
    GASNET_TRY_CACHE_LINK(for working SHMEM configuration, shmem_works, [
      #include <shmem.h>
    ], [{
      int mype, numpes;
  
      mype = shmem_my_pe();
      numpes = shmem_n_pes();
      }], [ shmem_test_worked=yes ], [ shmem_test_worked=no GASNET_ERR_SAVE() ] )
    GASNET_POPVAR(CFLAGS)
    AC_CHECK_FUNCS(shmem_long_finc shmem_long_cswap shmem_longlong_cswap)
    GASNET_POPVAR(LIBS)
  
    if test "$shmem_test_worked" = yes; then
      SHMEM_FLAGS="-D${SHMEM_FLAVOUR} -I${SHMEM_INCLUDE}"
    else
      GASNET_MSG_WARN(build test failed: I don't know how to build SHMEM programs on your system)
      have_shmem=no
    fi
  fi
fi

#AC_SUBST(SHMEM_INCLUDE)  XXX: not currently used outside configure
AC_SUBST(SHMEM_LIBDIR)
AC_SUBST(SHMEM_LIBS)
AC_SUBST(SHMEM_FLAGS)
AM_CONDITIONAL(USE_SHMEM_CONDUIT, test "$enabled_shmem$have_shmem" = yesyes)
CONDUIT_END([test "$enabled_shmem$have_shmem" = yesyes])

#--------------------------------------------------------------------------------------------------------
# PAMI configuration
CONDUIT_BEGIN(pami,[IBM PAMI network conduit (pami)])
if test $enabled_pami = yes; then
  have_pami=yes

  if test -n "$GASNETI_ARCH_BGQ"; then
    GASNET_ENV_DEFAULT(PAMI_HOME, [/bgsys/drivers/ppcfloor])
    if test -e "$PAMI_HOME/comm/include"; then
      GASNET_ENV_DEFAULT(PAMI_INCLUDE, [-I$PAMI_HOME/comm/include]) 
      GASNET_ENV_DEFAULT(PAMI_LIBDIR, [-L$PAMI_HOME/comm/lib])
      if test "$BUILDCONFIG" = "debug" ; then
        GASNET_ENV_DEFAULT(PAMI_LIBS, [-lpami-gcc])
      else
        GASNET_ENV_DEFAULT(PAMI_LIBS, [-lpami-gcc.ndebug])
      fi
    elif test "$BUILDCONFIG" = "debug" ; then
      GASNET_ENV_DEFAULT(PAMI_INCLUDE, [-I$PAMI_HOME/comm/sys/include]) 
      GASNET_ENV_DEFAULT(PAMI_LIBDIR, [-L$PAMI_HOME/comm/sys/lib])
      GASNET_ENV_DEFAULT(PAMI_LIBS, [-lpami])
    else
      GASNET_ENV_DEFAULT(PAMI_INCLUDE, [-I$PAMI_HOME/comm/sys-fast/include]) 
      GASNET_ENV_DEFAULT(PAMI_LIBDIR, [-L$PAMI_HOME/comm/sys-fast/lib])
      GASNET_ENV_DEFAULT(PAMI_LIBS, [-lpami])
    fi
    GASNET_ENV_DEFAULT(PAMI_SYS_LIBDIR, [-L$PAMI_HOME/spi/lib])
    GASNET_ENV_DEFAULT(PAMI_SYS_LIBS, [-lSPI_cnk -lpthread -lrt -lstdc++])
  elif test -n "$GASNETI_ARCH_IBMPE"; then
    # XXX: Couldn't we just be using "mpcc" instead?
    #      Doing so would link MPI and POE libs we don't
    #      need, but is there any harm in that?
    GASNET_ENV_DEFAULT(PAMI_HOME, [/opt/ibmhpc/pecurrent/ppe.pami])
    GASNET_ENV_DEFAULT(PAMI_INCLUDE, [-I$PAMI_HOME/include]) 
    # XXX: There should be a better way to find these libs.
    #      Could/should we literally "find"?
    if test -e "$PAMI_HOME/lib/pami${GASNETI_PTR_BITS}"; then
        GASNET_ENV_DEFAULT(PAMI_LIBDIR, [-L$PAMI_HOME/lib/pami${GASNETI_PTR_BITS}])
    elif test -e "$PAMI_HOME/gnu/lib${GASNETI_PTR_BITS}/pami${GASNETI_PTR_BITS}"; then
        GASNET_ENV_DEFAULT(PAMI_LIBDIR, [-L$PAMI_HOME/gnu/lib${GASNETI_PTR_BITS}/pami${GASNETI_PTR_BITS}])
    elif test -e "$PAMI_HOME/gnu/lib/pami${GASNETI_PTR_BITS}"; then
        GASNET_ENV_DEFAULT(PAMI_LIBDIR, [-L$PAMI_HOME/gnu/lib/pami${GASNETI_PTR_BITS}])
    fi
    GASNET_ENV_DEFAULT(PAMI_LIBS, [-lpami])
    GASNET_ENV_DEFAULT(PAMI_SYS_LIBDIR, [])
    GASNET_ENV_DEFAULT(PAMI_SYS_LIBS, [])
  else
    # We'll just make a reasonable guess:
    GASNET_ENV_DEFAULT(PAMI_HOME, [/usr])
    GASNET_ENV_DEFAULT(PAMI_INCLUDE, [-I$PAMI_HOME/include]) 
    if test "$PAMI_HOME/lib${GASNETI_PTR_BITS}"; then
      GASNET_ENV_DEFAULT(PAMI_LIBDIR, [-L$PAMI_HOME/lib${GASNETI_PTR_BITS}])
    else
      GASNET_ENV_DEFAULT(PAMI_LIBDIR, [-L$PAMI_HOME/lib])
    fi
    GASNET_ENV_DEFAULT(PAMI_LIBS, [-lpami])
    GASNET_ENV_DEFAULT(PAMI_SYS_LIBDIR, [])
    GASNET_ENV_DEFAULT(PAMI_SYS_LIBS, [])
  fi

  GASNET_PUSHVAR(CFLAGS,"$CFLAGS $PAMI_INCLUDE")
  GASNET_PUSHVAR(LIBS,"$LIBS $PAMI_LIBDIR $PAMI_LIBS $PAMI_SYS_LIBDIR $PAMI_SYS_LIBS")
  # try to compile and link a simple PAMI program
  GASNET_TRY_CACHE_LINK(for working PAMI configuration, pami_works, [
     #include <pami.h>
  ], [{ pami_result_t rc = PAMI_ERROR;
        pami_client_t client;
        rc = PAMI_Client_create("conftest", &client, NULL, 0);
      }], [:], [ have_pami=no GASNET_ERR_SAVE() ] )
  GASNET_POPVAR(CFLAGS)
  GASNET_POPVAR(LIBS)
fi #END ENABLE PAMI

AC_SUBST(PAMI_INCLUDE)
AC_SUBST(PAMI_LIBDIR)
AC_SUBST(PAMI_LIBS)
AC_SUBST(PAMI_SYS_LIBDIR)
AC_SUBST(PAMI_SYS_LIBS)
AM_CONDITIONAL(USE_PAMI_CONDUIT, test "$enabled_pami$have_pami" = yesyes)
CONDUIT_END([test "$enabled_pami$have_pami" = yesyes])

#---------------------------------------------------------------------------------------------------------------
# build and install AMMPI
AM_CONDITIONAL(USE_AMMPI, test "$have_ammpi" = yes)

#---------------------------------------------------------------------------------------------------------------
# CONDUIT CONFIGURATIONS FINISH
#---------------------------------------------------------------------------------------------------------------
dnl GASNET_TOOLSONLY_TRUE_BEGIN
dnl undefine([GASNET_ENV_DEFAULT_SUPPRESSHELP])
dnl GASNET_TOOLSONLY_TRUE_END
dnl GASNET_TOOLSONLY_FALSE_BEGIN
if test -z "$CONDUITS" ; then
  pushdef([COMMONMSG],[If you intend to use GASNet without network support, you must use the
GASNet_Tools distribution instead (see http://gasnet.lbl.gov).
See the GASNet documentation for additional details.])
  if test "$enabled_auto_detect" = yes; then
    GASNET_MSG_ERROR([No network conduits were auto-detected.

Some conduits require --enable-XXX configure flags and/or additional
variables providing the install location of vendor drivers.
COMMONMSG])
  else
    # if user had passed any --enable-* args then we would have failed earlier
    GASNET_MSG_ERROR([No network conduits were enabled.

When using --disable-auto-conduit-detect, at least one argument
of the form --enable-SOME_NETWORK is required.
COMMONMSG])
  fi
  popdef([COMMONMSG])
fi
dnl GASNET_TOOLSONLY_FALSE_END
AC_DEFINE_UNQUOTED(GASNETI_CONDUITS,"$CONDUITS")

dnl GASNET_TOOLSONLY_FALSE_BEGIN
########################################################################
# Configure conduit-independent spawners

# Things needed by ssh spawner
SSH_SPAWNER_LIBS=""
AC_CHECK_HEADERS(sys/socket.h sys/sockio.h sys/uio.h netinet/tcp.h)
case "$target_os" in
  solaris*)
    GASNET_PUSHVAR(LIBS,"")
      AC_SEARCH_LIBS(socket, socket, have_ssh_libs=yes, have_ssh_libs=no)
      AC_SEARCH_LIBS(gethostbyname, nsl, , no)

      if test "x$have_ssh_libs" = xno ; then
        : # XXX: what to do in this case?
      else
        SSH_SPAWNER_LIBS="$LIBS"
      fi
    GASNET_POPVAR(LIBS)
  ;;
esac
AC_SUBST(SSH_SPAWNER_LIBS)

AC_MSG_CHECKING([for socklen_t or its equivalent])
AC_CACHE_VAL(gasnet_cv_socklen_t,[
  # 'float' is to check the compiler is reliable
  gasnet_socklen_t=""
  for gasnet_socklen_try in socklen_t float size_t int long unsigned "unsigned long"; do
    if test "$gasnet_socklen_t"; then
      break; # break in success block of TRY would leave temp files
    else
      GASNET_TRY_CCOMPILE_WITHWARN(
       [#include <stddef.h>
	#include <sys/types.h>
	#include <sys/socket.h>],
       [$gasnet_socklen_try x = 0;
	getpeername(0,NULL,&x);
	getsockname(0,NULL,&x);],
       [gasnet_socklen_t="$gasnet_socklen_try"])
    fi
  done
  gasnet_cv_socklen_t="$gasnet_socklen_t"])
if test x"$gasnet_cv_socklen_t" = x; then
  AC_MSG_RESULT([not found])
elif test "$gasnet_cv_socklen_t" = float; then
  AC_MSG_RESULT([compiler unreliable - defaulting to socklen_t])
  AC_DEFINE_UNQUOTED(GASNET_SOCKLEN_T, socklen_t)
else
  AC_MSG_RESULT($gasnet_cv_socklen_t)
  AC_DEFINE_UNQUOTED(GASNET_SOCKLEN_T, $gasnet_cv_socklen_t)
fi

GASNET_WITH(ssh-cmd,
   [default value for GASNET_SSH_CMD environment variable (default "ssh")],
   [case "$withval" in
      yes|no) AC_MSG_ERROR([--with-ssh-cmd requires an argument]) ;;
           *) gasnet_ssh_cmd="$withval" ;;
    esac],
   [AC_MSG_ERROR([--with-ssh-cmd requires an argument])],
   [gasnet_ssh_cmd="ssh"])
AC_DEFINE_UNQUOTED(GASNETI_DEFAULT_SSH_CMD, "$gasnet_ssh_cmd")

GASNET_WITH(ssh-options,
   [default value for GASNET_SSH_OPTIONS environment variable (defaults to empty)],
   [case "$withval" in
      yes|no) AC_MSG_ERROR([--with-ssh-options requires an argument]) ;;
           *) gasnet_ssh_options="$withval" ;;
    esac],
   [AC_MSG_ERROR([--with-ssh-options requires an argument])],
   [gasnet_ssh_options=""])
AC_DEFINE_UNQUOTED(GASNETI_DEFAULT_SSH_OPTIONS, "$gasnet_ssh_options")

GASNET_WITH(ssh-nodefile,
   [default value for GASNET_SSH_NODEFILE environment variable (defaults to empty - no fixed filename)],
   [case "$withval" in
      yes|no) AC_MSG_ERROR([--with-ssh-nodefile requires an argument]) ;;
           *) gasnet_ssh_nodefile="$withval" ;;
    esac],
   [AC_MSG_ERROR([--with-ssh-nodefile requires an argument])],
   [gasnet_ssh_nodefile=""])
AC_DEFINE_UNQUOTED(GASNETI_DEFAULT_SSH_NODEFILE, "$gasnet_ssh_nodefile")

GASNET_WITH(ssh-rate,
   [default value for GASNET_SSH_RATE environment variable (defaults to 0 - no rate limit)],
   [case "$withval" in
      yes|no) AC_MSG_ERROR([--with-ssh-rate requires an argument]) ;;
           *) if expr "$withval" : '[[0-9]]*$' >/dev/null; then
                gasnet_ssh_rate="$withval"
              else
                AC_MSG_ERROR([--with-ssh-rate argument "$withval" is not a non-negative integer])
              fi
              ;;
    esac],
   [AC_MSG_ERROR([--with-ssh-rate requires an argument])],
   [gasnet_ssh_rate="0"])
AC_DEFINE_UNQUOTED(GASNETI_DEFAULT_SSH_RATE, "$gasnet_ssh_rate")
    
GASNET_WITH(ssh-topology,
   [connection topology when using ssh-spawner ("flat" or "nary[[:N]]", where default is "flat")],
   [case "$withval" in
         flat) AC_DEFINE(GASNETI_SSH_TOPO_FLAT) ;;
         nary) AC_DEFINE(GASNETI_SSH_TOPO_NARY) ;;
       nary:*) tmpval=`echo $withval | cut -d: -f2-`
               if expr "${tmpval}" : '[[1-9]][[0-9]]*$' >/dev/null; then
                 AC_DEFINE(GASNETI_SSH_TOPO_NARY)
                 AC_DEFINE_UNQUOTED(GASNETI_SSH_NARY_DEGREE, $tmpval)
               else
                 AC_MSG_ERROR([--with-ssh-topology nary: suffix "$tmpval" is not a positive integer])
               fi
               ;;
          yes) AC_MSG_ERROR([--with-ssh-topology requires an argument]) ;;
            *) AC_MSG_ERROR([--with-ssh-topology argument "$withval" is not a valid choice]) ;;
    esac],
   [AC_MSG_ERROR([--with-ssh-topology requires an argument])],
   [AC_DEFINE(GASNETI_SSH_TOPO_FLAT)])

# Things for pmi-spawner

GASNET_WITH(pmi, [path to PMI headers and libs],
            [with_pmi="$withval"], [with_pmi=no], [with_pmi='/usr'])
if test -n "$have_pmi_cray_h" ; then
  AC_CHECK_FUNCS([PMI_Allgather PMI_Bcast])
  with_pmi='no'
elif test "$with_pmi" = yes; then
  with_pmi='/usr'
fi

have_pmi=no
if test "$with_pmi" != 'no'; then
  GASNET_PUSHVAR(LDFLAGS,"$LDFLAGS")
  if test "$with_pmi" = '/usr'; then
    : # Nothing to do
  elif test -d "${with_pmi}/lib${GASNETI_PTR_BITS}/."; then
    PMI_SPAWNER_LIBDIR="-L${with_pmi}/lib${GASNETI_PTR_BITS}"
  elif test -d "${with_pmi}/lib/."; then
    PMI_SPAWNER_LIBDIR="-L${with_pmi}/lib"
  fi
  LDFLAGS="$LDFLAGS $PMI_SPAWNER_LIBDIR"

  # If user specifies one PMI version then disqualify the other
  GASNET_WITH(pmi-version, [PMI version (1 or 2)] , [
    case "$withval" in
      1) use_pmi1=yes;;
      2) use_pmi2=yes;;
      *) GASNET_MSG_ERROR([Argument to --with-pmi-version must be '1' or '2']);;
    esac
    with_pmi_version="withval"
  ], [
    GASNET_MSG_WARN([Ignoring --without-pmi-version])
  ])

  # Check for libs unless disqualifed by --with-pmi-version=
  if test -z "${use_pmi1+set}"; then
    AC_CHECK_LIB(pmi2, PMI2_Init, [
      use_pmi2=yes
      have_pmi=yes
      pmi_suffix='2'
      AC_DEFINE(HAVE_PMI2_H)
      PMI_SPAWNER_LIBS='-lpmi2'
      GASNET_IF_ENABLED(pmi2-fast-barrier, Use PMI2_KVS_fence as barrier. This may not work with all PMI2 implementations,
                         [AC_DEFINE(GASNETI_PMI2_FENCE_IS_BARRIER,[1],[define to 1 if PMI2_KVS_fence() provides barrier functionality])], [] )
    ])
  fi
  if test -z "${use_pmi2+set}"; then
    AC_CHECK_LIB(pmi, PMI_Init, [
      use_pmi1=yes
      have_pmi=yes
      pmi_suffix=''
      AC_DEFINE(HAVE_PMI_H)
      PMI_SPAWNER_LIBS='-lpmi'
    ])
  fi

  # Check for header matching the selected lib
  if test "$have_pmi" = yes; then
    if test -f "${with_pmi}/include/slurm/pmi${pmi_suffix}.h"; then
      PMI_SPAWNER_INCLUDES="-I${with_pmi}/include/slurm"
    elif test -f "${with_pmi}/include/pmi${pmi_suffix}.h"; then
      if test "$with_pmi" != '/usr'; then
        PMI_SPAWNER_INCLUDES="-I${with_pmi}/include"
      fi
    else
      have_pmi=no
    fi
  fi

  if test "$have_pmi" = yes; then
    GASNET_PUSHVAR(LIBS,"$LIBS PMI_SPAWNER_LIBS")
    # Not seen outside of Cray PMI, but we can hope:
    AC_CHECK_FUNCS([PMI_Allgather PMI_Bcast])
    GASNET_POPVAR(LIBS)
  elif test -n "${with_pmi_version+set}" ; then
    GASNET_MSG_ERROR([Requested PMI version $with_pmi_version could not be found])
  fi

  GASNET_POPVAR(LDFLAGS)
fi

if test "$have_pmi" = no; then
  PMI_SPAWNER_LIBS=""
  PMI_SPAWNER_LIBDIR=""
  PMI_SPAWNER_INCLUDES=""
fi

AC_SUBST(PMI_SPAWNER_LIBS)
AC_SUBST(PMI_SPAWNER_LIBDIR)
AC_SUBST(PMI_SPAWNER_INCLUDES)
AM_CONDITIONAL(HAVE_BOOTSTRAP_PMI, test "$have_pmi" = yes)

dnl GASNET_TOOLSONLY_FALSE_END
########################################################################

# Check for alloca in C code
GASNET_FUNC_ALLOCA

AC_CHECK_FUNCS(on_exit)

AC_CHECK_FUNCS(gethostid)

AC_CHECK_FUNCS(setenv unsetenv putenv)

AC_CHECK_FUNCS([getrlimit setrlimit getrlimit64 setrlimit64], [], [])
AC_CHECK_HEADERS(sys/resource.h)

AC_CHECK_HEADERS(sys/table.h)

AC_CHECK_HEADERS(features.h)
AC_CHECK_FUNCS(fopen64)

AC_CHECK_FUNCS(sigprocmask)

AC_CHECK_HEADERS([sn/mmtimer.h linux/mmtimer.h])

########################################################################
# On various systems, the headers are missing certain functions
# or only declare them under some condition we don't satisfy.

AC_DEFUN([GASNET_CHECK_SYS_DECL], [
  pushdef([uppername],translit($1,'a-z','A-Z'))
  pushdef([cvname],have_[]uppername[]_decl)
  GASNET_TRY_CACHE_CHECK(for declaration/definition of $1, cvname, [
	#include <stddef.h>
	#include <stdarg.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <unistd.h>
	#include <string.h>
	#include <ctype.h>
  ], [
    #ifdef $1
      /* It is a macro and that is OK */
    #else
      int x = (int)sizeof(&$1);
    #endif
  ], [ cvname=yes ], [ cvname=no ])
  if test $cvname = yes; then
    AC_DEFINE(HAVE_[]uppername[]_DECL)
  fi
  popdef([cvname])
  popdef([uppername])
])

GASNET_CHECK_SYS_DECL(setenv)
GASNET_CHECK_SYS_DECL(unsetenv)
GASNET_CHECK_SYS_DECL(snprintf)
GASNET_CHECK_SYS_DECL(vsnprintf)

########################################################################
# ctype.h wrapper support

AC_CHECK_FUNCS(isblank isascii toascii)

GASNET_CHECK_SYS_DECL(isblank)
GASNET_CHECK_SYS_DECL(isascii)
GASNET_CHECK_SYS_DECL(toascii)

AC_CACHE_CHECK([for buggy ctype.h], gasnet_cv_buggy_ctype, [
  gasnet_cv_buggy_ctype=unk
  GASNET_TRY_CCOMPILE_WITHWARN(
       [#include <ctype.h>
        int foo(char c) { return isalpha(c); } ],
       [int x = foo('c');],
       [gasnet_cv_buggy_ctype=ok],
       [gasnet_cv_buggy_ctype=yes/warning],
       [GASNET_MSG_ERROR(failure building test of ctype.h)])
])
if test x$gasnet_cv_buggy_ctype != xok; then
  AC_DEFINE(GASNETI_NEED_CTYPE_WRAPPERS)
fi

########################################################################
# BACKTRACE support

GASNET_IF_ENABLED_WITH_AUTO(backtrace, [support backtrace, via any mechanism (auto-detected)],
                 [use_backtrace="try"], [use_backtrace="no"], [
		 if test "$cross_compiling" = "yes" ; then
		   # disable backtrace support by default when cross-compiling, 
		   # because the debuggers on the host system running configure are usually not what we want for the target
		   use_backtrace="no"
		 else
		   use_backtrace="try"
		 fi
		 ])

GASNET_IF_ENABLED_WITH_AUTO(backtrace-execinfo, support backtrace via execinfo.h (auto-detected),
                 [use_execinfo="yes"], [use_execinfo="no"], [use_execinfo="$use_backtrace"])
if test "$use_execinfo" != no; then
  AC_CHECK_HEADERS(execinfo.h)
  if test "$ac_cv_header_execinfo_h" = "yes" ; then
    AC_CHECK_FUNCS(backtrace backtrace_symbols)
  fi
  if test "$use_execinfo$ac_cv_func_backtrace" = 'yesno'; then
    AC_MSG_ERROR(User requested --enable-backtrace-execinfo but support is not available on your system.)
  fi
  AC_PATH_PROGS(ADDR2LINE_PATH, addr2line, , /usr/bin:${PATH})
  if test -n "$ADDR2LINE_PATH"; then
    AC_DEFINE_UNQUOTED(ADDR2LINE_PATH,"$ADDR2LINE_PATH")
  fi
fi

GASNET_IF_ENABLED_WITH_AUTO(backtrace-gdb, support backtrace via gdb (auto-detected),
                 [use_gdb="yes"], [use_gdb="no"], [use_gdb="$use_backtrace"])
if test "$use_gdb" != no; then
  AC_PATH_PROGS(GDB_PATH, $GDB gdb, , /usr/bin:${PATH})
  if test -n "$GDB_PATH"; then
    AC_DEFINE_UNQUOTED(GDB_PATH,"$GDB_PATH")
  elif test "$use_gdb" = yes; then
    AC_MSG_ERROR(User requested --enable-backtrace-gdb but gdb was not found.  Perhaps you need to set \$GDB?)
  fi
fi

GASNET_IF_ENABLED_WITH_AUTO(backtrace-gstack, support backtrace via gstack (auto-detected),
                 [use_gstack="yes"], [use_gstack="no"], [use_gstack="$use_backtrace"])
if test "$use_gstack" != no; then
  AC_PATH_PROGS(GSTACK_PATH, $GSTACK gstack, , /usr/bin:${PATH})
  if test -n "$GSTACK_PATH"; then
    AC_DEFINE_UNQUOTED(GSTACK_PATH,"$GSTACK_PATH")
  elif test "$use_gstack" = yes; then
    AC_MSG_ERROR(User requested --enable-backtrace-gstack but gstack was not found.  Perhaps you need to set \$GSTACK?)
  fi
fi

GASNET_IF_ENABLED_WITH_AUTO(backtrace-pgdbg, support backtrace via pgdbg (auto-detected),
                 [use_pgdbg="yes"], [use_pgdbg="no"], [use_pgdbg="$use_backtrace"])
if test "$use_pgdbg" != no; then
  AC_PATH_PROGS(PGDBG_PATH, $PGDBG pgdbg, , /usr/bin:${PATH})
  if test -n "$PGDBG_PATH"; then
    AC_DEFINE_UNQUOTED(PGDBG_PATH,"$PGDBG_PATH")
  elif test "$use_pgdbg" = yes; then
    AC_MSG_ERROR(User requested --enable-backtrace-pgdbg but pgdbg was not found.  Perhaps you need to set \$PGDBG?)
  fi
fi

GASNET_IF_ENABLED_WITH_AUTO(backtrace-idb, support backtrace via idb (auto-detected),
                 [use_idb="yes"], [use_idb="no"], [use_idb="$use_backtrace"])
if test "$use_idb" != no; then
  AC_PATH_PROGS(IDB_PATH, $IDB idb idb-e, , /usr/bin:${PATH})
  if test -n "$IDB_PATH"; then
    AC_DEFINE_UNQUOTED(IDB_PATH,"$IDB_PATH")
  elif test "$use_idb" = yes; then
    AC_MSG_ERROR(User requested --enable-backtrace-idb but idb was not found.  Perhaps you need to set \$IDB?)
  fi
fi


GASNET_IF_ENABLED_WITH_AUTO(backtrace-ladebug, support backtrace via ladebug (auto-detected),
                 [use_ladebug="yes"], [use_ladebug="no"], [use_ladebug="$use_backtrace"])
if test "$use_ladebug" != no; then
  AC_PATH_PROGS(LADEBUG_PATH, $LADEBUG ladebug, , /usr/bin:${PATH})
  if test -n "$LADEBUG_PATH"; then
    AC_DEFINE_UNQUOTED(LADEBUG_PATH,"$LADEBUG_PATH")
  elif test "$use_ladebg" = yes; then
    AC_MSG_ERROR(User requested --enable-backtrace-ladebug but ladebug was not found.  Perhaps you need to set \$LADEBUG?)
  fi
fi

GASNET_IF_ENABLED_WITH_AUTO(backtrace-dbx, support backtrace via dbx (auto-detected),
                 [use_dbx="yes"], [use_dbx="no"], [use_dbx="$use_backtrace"])
if test "$use_dbx" != no; then
  AC_PATH_PROGS(DBX_PATH, $DBX dbx, , /usr/bin:${PATH})
  if test -n "$DBX_PATH"; then
    AC_DEFINE_UNQUOTED(DBX_PATH,"$DBX_PATH")
  elif test "$use_dbx" = yes; then
    AC_MSG_ERROR(User requested --enable-backtrace-dbx but dbx was not found.  Perhaps you need to set \$DBX?)
  fi
fi

GASNET_IF_ENABLED_WITH_AUTO(backtrace-printstack, support backtrace via printstack (auto-detected),
                 [use_printstack="yes"], [use_printstack="no"], [use_printstack="$use_backtrace"])
if test "$use_printstack" != no; then
  have_printstack=no
  AC_CHECK_HEADERS(ucontext.h, [AC_CHECK_FUNC(printstack, [have_printstack=yes; AC_DEFINE(HAVE_PRINTSTACK)])])
  if test "$use_printstack$have_printstack" = yesno; then
    AC_MSG_ERROR(User requested --enable-backtrace-printstack but printstack support was not found.)
  fi
fi

# Runtime Var Arrays
#GASNET_IF_ENABLED_WITH_AUTO(vararray, Use stack arrays of variable size in code,
#AC_DEFINE(VARARRAY_WORKS),
#,
#GASNET_TRY_CACHE_CHECK(for variable stack arrays, cc_vararray_mod,
#  [void dummy(int x) { char y[x]; }], [],
#  AC_DEFINE(VARARRAY_WORKS)))

########################################################################
# different high-precision sleep libraries

# Check for usleep
GASNET_TRY_CACHE_CHECK(for usleep(), cc_has_usleep, [
#include <unistd.h>
], [
usleep(500);
],
  AC_SEARCH_LIBS(usleep, posix4, AC_DEFINE(HAVE_USLEEP), AC_MSG_RESULT(entry point not found - disabled)))

# Check for nanosleep
GASNET_TRY_CACHE_CHECK(for nanosleep(), cc_has_nanosleep, [
#include <time.h>
#include <sys/time.h>
], [
  struct timespec tm, tmremaining;
  tm.tv_sec =1;
  tm.tv_nsec = 1000000;
  nanosleep(&tm, &tmremaining);
],
  AC_SEARCH_LIBS(nanosleep, posix4, AC_DEFINE(HAVE_NANOSLEEP), AC_MSG_RESULT(entry point not found - disabled)))

# Check for nsleep
GASNET_TRY_CACHE_CHECK(for nsleep(), cc_has_nsleep, [
#include <time.h>
#include <sys/time.h>
], [
  struct timespec tm, tmremaining;
  tm.tv_sec =1;
  tm.tv_nsec = 1000000;
  nsleep(&tm, &tmremaining);
],
  AC_SEARCH_LIBS(nsleep, posix4, AC_DEFINE(HAVE_NSLEEP), AC_MSG_RESULT(entry point not found - disabled)))

# Check for sched_yield 
GASNET_TRY_CACHE_CHECK(for sched_yield(), cc_has_sched_yield, [
#include <sched.h>
], [
  sched_yield();
],
  AC_SEARCH_LIBS(sched_yield, posix4, AC_DEFINE(HAVE_SCHED_YIELD), AC_MSG_RESULT(entry point not found - disabled)))

# timer setup
case "$target_os" in
  freebsd* | netbsd*)  
    AC_MSG_CHECKING(for sysctl machdep.tsc_freq)
    res="`/sbin/sysctl -n machdep.tsc_freq 2> /dev/null`"
    if test "$res" != "" -a "$res" != 0; then
      AC_MSG_RESULT(yes: $res)
      AC_DEFINE(GASNETI_HAVE_SYSCTL_MACHDEP_TSC_FREQ)
    else
      AC_MSG_RESULT(no)
    fi
  ;;
esac

enabled_plpa="no"
if test "$cross_compiling" = "no" ; then
  case "$target_os" in
    linux*) enabled_plpa="yes";;
  esac
else
  case "$target" in
    x86_64-cnl-linux*) enabled_plpa="yes";;
  esac
fi
if test "$enabled_plpa" = "yes"; then
      GASNET_IF_ENABLED_WITH_AUTO(plpa, [use PLPA for CPU binding (default is to probe)],
		[enabled_plpa="yes"; force_plpa="yes"],
		[enabled_plpa="no - user disabled"],
		[enabled_plpa="yes"])
      if test "$enabled_plpa" = yes; then
        PLPA_SET_SYMBOL_PREFIX([gasneti_plpa_])
        PLPA_INIT([enabled_plpa="yes"],[enabled_plpa="no - probe failed"])
      fi
      AC_MSG_CHECKING(whether to use PLPA for cpu binding)
      AC_MSG_RESULT($enabled_plpa)
      if test "$enabled_plpa" = yes; then
	AC_DEFINE(HAVE_PLPA)
      elif test "$force_plpa" = yes; then
        AC_MSG_ERROR(User requested --enable-plpa but PLPA is not supported on your system)
      fi
fi
AM_CONDITIONAL(USE_PLPA,test "$enabled_plpa" = "yes")

#  AC_FUNC_MMAP
# Check for mmap functionality we actually use
if test "$cross_compiling" = "yes" ; then
 GASNET_CROSS_VAR(HAVE_MMAP,HAVE_MMAP)
 mmap_reason="was disabled"
else
 case "$target_os" in
  cygwin*)  # mmap is known to be broken on Cygwin - dont even try
  HAVE_MMAP=0
  mmap_reason="is not supported on Cygwin"
  ;;
  *) # default to trying it
  HAVE_MMAP=1
  ;;
 esac
fi
GASNET_IF_ENABLED_WITH_AUTO(mmap,[force the use or non-use of mmap (default to probe)],
  [ HAVE_MMAP=1
    FORCE_MMAP=1 ],
  [ HAVE_MMAP=0
    mmap_reason="was disabled" ],
  [])
if test "$HAVE_MMAP" != "0" && test "$cross_compiling" = "no" ; then
GASNET_TRY_CACHE_RUN(for working mmap(), have_mmap, [
  #include <unistd.h>
  #include <sys/mman.h>
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  #include <stdio.h>
  #include <stdlib.h>
  char junk[[16384]];
  int testfd(int);
  int main(void) {
    int fd, retval;
    #if 0
      char filename[[255]];
      tmpnam(filename); /* unsafe */
      fd = open(filename, O_RDWR | O_CREAT);
    #else
      char filename[[255]];
      if (getenv("TMPDIR")) strcpy(filename,getenv("TMPDIR"));
      else strcpy(filename,"/tmp");
      strcat(filename,"/gasnet-conftemp-XXXXXX");
      fd = [mkstemp(filename)]; /* leaves crap laying around */
    #endif
    retval = testfd(fd);
    close(fd);
    remove(filename);
    return retval; 
  }
  int testfd(int fd) {
    void *ptr,*ptr2;
    if (fd == -1) return 1;
    if (write(fd, junk, 16384) == -1) return 2;
    ptr = mmap(0, 16384, (PROT_READ|PROT_WRITE), 
	MAP_PRIVATE, fd, 0);
    if (ptr == MAP_FAILED || ptr == NULL) return 3;
    if (munmap(ptr,16384) != 0) return 4;
    ptr2 = mmap(ptr, 16384, (PROT_READ|PROT_WRITE), 
	(MAP_PRIVATE | MAP_FIXED), fd, 0);
    if (ptr2 == MAP_FAILED || ptr2 == NULL || ptr2 != ptr) return 5;
    if (munmap(ptr,16384) != 0) return 6;
    return 0;
  }],[ HAVE_MMAP=1 ],[ 
       HAVE_MMAP=0 
       if test "$FORCE_MMAP" = "1" ; then
         GASNET_MSG_ERROR([--enable-mmap was passed, but mmap functionality test failed])
       fi
       mmap_reason="test failed"
   ])
fi
if test "$HAVE_MMAP" != "0" ; then
  AC_DEFINE(HAVE_MMAP)
  # bug 1763: find the right mmap flags (which may be enum values or const vars)
  GASNET_TRY_CACHE_LINK([for MAP_NORESERVE],map_noreserve,
     [ #include <sys/mman.h> ],[ void *junk = mmap(0, 0, 0, MAP_NORESERVE, 0, 0); ],
     [ AC_DEFINE(HAVE_MAP_NORESERVE) ] )
  GASNET_TRY_CACHE_LINK([for MAP_ANONYMOUS],map_anonymous,
     [ #include <sys/mman.h> ],[ void *junk = mmap(0, 0, 0, MAP_ANONYMOUS, 0, 0); ],
     [ AC_DEFINE(HAVE_MAP_ANONYMOUS) ] )
  GASNET_TRY_CACHE_LINK([for MAP_ANON],map_anon,
     [ #include <sys/mman.h> ],[ void *junk = mmap(0, 0, 0, MAP_ANON, 0, 0); ],
     [ AC_DEFINE(HAVE_MAP_ANON) ] )
dnl GASNET_TOOLSONLY_FALSE_BEGIN
else
  # PSHM over SysV and GHEAP don't require mmap(), but the rest do
  case "$with_pshm" in
  no|sysv|gheap) ;;
  *)
  GASNET_MSG_ERROR([PSHM was enabled, but required mmap functionality $mmap_reason])
  ;;
  esac
dnl GASNET_TOOLSONLY_FALSE_END
fi

dnl Check for ptmalloc's mallopt() to work aroung bugs 495 and 955
AC_CHECK_HEADERS([malloc.h])
GASNET_TRY_CACHE_LINK(for ptmalloc, malloc_is_ptmalloc,
  [ #if HAVE_STDLIB_H
      #include <stdlib.h>
    #endif
    #if HAVE_MALLOC_H
      #include <malloc.h>
    #endif
  ],[
    mallopt(M_TRIM_THRESHOLD, -1);
    mallopt(M_MMAP_MAX, 0);
  ],[ AC_DEFINE(HAVE_PTMALLOC) ])

DEBUGMALLOC_VAR=GASNET_unused
DEBUGMALLOC_VAL=0
case "$target" in
*-openbsd*)
   debugmalloc_support=yes
   DEBUGMALLOC_VAR=MALLOC_OPTIONS
   DEBUGMALLOC_VAL=AFJ # (A)bort (F)reeguard (J)unk-fill
   if test `expr \`uname -r\` : '\([[1-9]]*\).'` -ge 5; then
     DEBUGMALLOC_VAL="${DEBUGMALLOC_VAL}S" # (S)ecurity auditing
   fi
   ;;
*-freebsd* | *-netbsd*)
   debugmalloc_support=yes
   DEBUGMALLOC_VAR=MALLOC_OPTIONS
   DEBUGMALLOC_VAL=AJ # (A)bort (J)unk-fill
   ;;
#*-solaris*) Not willing to mess w/ dynamic linker tricks -PHH
#   debugmalloc_support=yes
#   DEBUGMALLOC_VAR=LD_PRELOAD
#   DEBUGMALLOC_VAL=watchmalloc.so.1
#   ;;
#*-darwin*) Not willing to mess w/ dynamic linker tricks, plus need up to 9 more vars -PHH
#   debugmalloc_support=yes
#   DEBUGMALLOC_VAR=DYLD_INSERT_LIBRARIES
#   DEBUGMALLOC_VAL=/usr/lib/libgmalloc.dylib
#   ;;
*) # MALLOC_CHECK_ is a glibc feature (but appears harmless elsewhere)
   # However, we need to weed out known buggy versions (see bug 2731)
   GASNET_TRY_CACHE_EXTRACT_STR([for glibc],glibc_version,[
      #if HAVE_FEATURES_H
        #include <features.h>
      #endif
      #ifndef _STRINGIFY
        #define _STRINGIFY_HELPER(x) #x
        #define _STRINGIFY(x) _STRINGIFY_HELPER(x)
      #endif
      #if defined(__GLIBC__) && defined(__GLIBC_MINOR__)
        #define GASNETI_GLIBC_VERSION _STRINGIFY(__GLIBC__) "." _STRINGIFY(__GLIBC_MINOR__)
      #elif defined(__GLIBC__)
        #define GASNETI_GLIBC_VERSION _STRINGIFY(__GLIBC__)
      #else
        #define GASNETI_GLIBC_VERSION "no"
      #endif
     ],[GASNETI_GLIBC_VERSION],[GASNETI_GLIBC_VERSION])
   if test x"$GASNETI_GLIBC_VERSION" != xno; then
     DEBUGMALLOC_VAR=MALLOC_CHECK_
     DEBUGMALLOC_VAL=2
     # Look for buggy versions, but keep in mind --enable-system-debug-malloc will override
     case $GASNETI_GLIBC_VERSION in
      2.5) debugmalloc_support=no;;  # Known buggy in 2.5-42 which orginated in RHEL5.4 (fine tune?)
     2.10) debugmalloc_support=no;;  # Known buggy
     2.11) debugmalloc_support=no;;  # Known buggy, but 2.11.1 is OK  (TODO: identify >= 2.11.1)
        *) debugmalloc_support=yes;;
     esac
   fi
   ;;
esac
GASNET_IF_ENABLED_WITH_AUTO(system-debug-malloc,
  [enable use of system-specific debugging malloc if available (default is system dependent)],
  [DEBUGMALLOC="yes"], [DEBUGMALLOC="no"], [DEBUGMALLOC="$debugmalloc_support"])
AM_CONDITIONAL(DEBUGMALLOC,test "$DEBUGMALLOC" = "yes")
AC_SUBST(DEBUGMALLOC)
AC_SUBST(DEBUGMALLOC_VAR)
AC_SUBST(DEBUGMALLOC_VAL)

AC_SUBST(LIBS)

########################################################################
# Special GCC feature support

# Check for __builtin_expect (GCC 3.0) 
GASNET_TRY_CACHE_LINK(for __builtin_expect, cc_has_builtin_expect,
  [int x;], [if (__builtin_expect(x,1)) return 1;],
  AC_DEFINE(HAVE_BUILTIN_EXPECT))

GASNET_TRY_CACHE_LINK(for __builtin_constant_p, cc_has_builtin_constant_p,
  [int x;], [__builtin_constant_p(x) + __builtin_constant_p(2);],
  AC_DEFINE(HAVE_BUILTIN_CONSTANT_P))

GASNET_TRY_CACHE_LINK(for __builtin_prefetch, cc_has_builtin_prefetch,
  [int x;], [__builtin_prefetch(&x,0);],
  AC_DEFINE(HAVE_BUILTIN_PREFETCH))

GASNET_TRY_CACHE_LINK(for __func__, cc_has_func,
[],
[const char* p = __func__;],
AC_DEFINE(HAVE_FUNC))

########################################################################
## Misc Header checks

AC_CHECK_HEADERS(sys/param.h)


########################################################################
##
##  Supporting Command-Line Tools (continued)
##

dnl Use the results of AC_CHECK_SIZEOF(void *) to select 64-bit mode for some tools
dnl NOTE: AC_CHECK_SIZEOF may only be safely called after AC_PROG_CC/AC_PROG_CPP
dnl     Store full paths, so we find right ones even if users have
dnl     some other version in their path
if test x"$BOURNE_SHELL" = x; then
    BOURNE_SHELL="/bin/sh"
fi

if test "$cross_compiling" = yes ; then
  CROSS_NM="${CROSS_NM:-${target_alias}-nm}"
  CROSS_AR="${CROSS_AR:-${target_alias}-ar}"
  CROSS_RANLIB="${CROSS_RANLIB:-${target_alias}-ranlib}"
fi

# we want but do not require nm
AC_PATH_PROGS(NM, $NM $CROSS_NM nm)
AC_MSG_CHECKING(for GNU nm)
if test "`${NM:-nm} --version 2>&1 | grep GNU`" = "" ; then
  gnu_nm=no
else
  gnu_nm=yes
fi
AC_MSG_RESULT($gnu_nm)
AM_CONDITIONAL(GNU_NM, test "$gnu_nm" = "yes")

GASNET_PATH_PROGS(AR, $CROSS_AR ar gar, archiver)
GASNET_PATH_PROGS(RANLIB, $CROSS_RANLIB ranlib touch, ranlib)
case "$target_os" in
    darwin*) RANLIB="$RANLIB -s -c" ;; # ensure correct common block behavior on darwin
esac
GASNET_PATH_PROGS(BASENAME, basename, basename)
GASNET_PATH_PROGS(DIRNAME, dirname, dirname)
# Some platforms are lacking readlink, and we currently do not require it
AC_PATH_PROGS(READLINK, $READLINK readlink)
# other optional commands
AC_PATH_PROGS(TIMECMD, $TIMECMD time, , /usr/bin:${PATH})
AC_PATH_PROGS(ENVCMD, $ENVCMD env, , /usr/bin:${PATH})

AC_SUBST(BOURNE_SHELL)
AC_SUBST(AR)
AC_SUBST(NM)
AC_SUBST(RANLIB)
AC_SUBST(BASENAME)
AC_SUBST(DIRNAME)
AC_SUBST(READLINK)
AC_SUBST(TIMECMD)
AC_SUBST(ENVCMD)

########################################################################

# complete linker setup

case "$target_os" in
  darwin*)
    # Darwin linker complains about symbols defined in multiple dynamic libs.
    # This is a minor annoyance in some cases, however it becomes a fatal error
    # when linking with the mpich libs.
    if test "$CC_FAMILY$CC_SUBFAMILY" = 'GNUNVIDIA'; then
      dash_Wl='-Xlinker '
    else
      dash_Wl='-Wl,'
    fi
    LDFLAGS="$LDFLAGS ${dash_Wl}-multiply_defined,suppress"

    # Darwin 11 (MacOSX Lion) and newer use address-space randomization by default
    # TODO: should this be ommitted if aligned segments have been disabled?
    tmp_ver=`expr "$target_os" : 'darwin\([[0-9]]*\)' 2>/dev/null`
    if expr $tmp_ver \>= 11 >/dev/null; then
      LDFLAGS="$LDFLAGS ${dash_Wl}-no_pie"
    fi
  ;;

  openbsd*)
    # OpenBSD PIE-by-default breaks aligned segments and upcr linker segment (bug 3248)
    extra_ldflags='-nopie'
    GASNET_PUSHVAR(LDFLAGS,"$LDFLAGS $extra_ldflags")
    GASNET_TRY_CACHE_LINK(if linker supports '$extra_ldflags', ld_has_nopie,
        [], [],
        [], [extra_ldflags=''])
    GASNET_POPVAR(LDFLAGS)
    if test -n "$extra_ldflags"; then
      LDFLAGS="$LDFLAGS $extra_ldflags"
    fi
  ;;

esac
AC_SUBST(LDFLAGS)

########################################################################

# Add any compiler flags too dangerous to use for configure probes

GASNET_IF_ENABLED(strict-prototypes, [Use strict prototypes in GASNet headers (at the expense of slight deviation from the specification)], [
  AC_DEFINE(GASNET_USE_STRICT_PROTOTYPES)
  case "$CC_FAMILY" in
  GNU|Pathscale|Open64)
        dnl Consistent w/ other GNU warning flags:
        dnl    CFLAGS and MPI_CFLAGS get the flag only for a debug build
        dnl    MISC_CXXFLAGS gets the flag for any build
        if test "$enabled_debug" = yes; then
          GASNET_TRY_CFLAG([-Wstrict-prototypes],
                           [CFLAGS="$CFLAGS -Wstrict-prototypes"])
        fi
        if test "$enabled_debug$have_mpi" = yesyes; then
          dnl Ick: will show "checking for C compiler flag -Wstrict-prototypes" twice in a row
          GASNET_PUSHVAR(CC,"$MPI_CC")   
          GASNET_PUSHVAR(CFLAGS,"$MPI_CFLAGS")
          GASNET_TRY_CFLAG([-Wstrict-prototypes],
                           [MPI_CFLAGS="$MPI_CFLAGS -Wstrict-prototypes"])
          GASNET_POPVAR(CFLAGS)
          GASNET_POPVAR(CC)
        fi
        if test "$have_cxx" = yes; then
          GASNET_TRY_CXXFLAG([-Wstrict-prototypes],
                             [MISC_CXXFLAGS="$MISC_CXXFLAGS -Wstrict-prototypes"])
        fi
        ;;
  esac
])
AM_CONDITIONAL(USE_STRICT_PROTOTYPES, test "x$enable_strict_prototypes" = xyes)

########################################################################

# Figure out how to install config files
GASNET_SET_INSTALL_CMD

TOOL_PREFIX=gasnet
GASNET_WITH(tool-prefix, [Naming prefix to use for contributed tools],
            TOOL_PREFIX=$withval)
AC_SUBST(TOOL_PREFIX)

dnl GASNET_TOOLSONLY_FALSE_BEGIN
##                        FCA SUPPORT
GASNET_IF_ENABLED_WITH_AUTO(fca, [Enable/disable FCA for acceleration of collectives (auto-detected)],
  [enable_fca=yes;force_fca=yes],
  [enable_fca=no],
  [enable_fca=probe])

have_fca=no
if test "$enable_fca" != "no"; then
  fca_home=''
  user_fca_home=''
  GASNET_WITH(fca, [Specify a custom FCA install directory],
            [if test "$withval" = 'yes'; then
                GASNET_MSG_ERROR(["--with-fca requires an argument (FCA install directory)"])
             fi
             user_fca_home="$withval"
             fca_user_provided=yes],
            [GASNET_MSG_ERROR(["--with-fca requires an argument (FCA install directory).  Use --disable-fca if you wish to disable FCA support."])],
            [fca_user_provided=no])

  if test "$fca_user_provided" = yes; then
    fca_home="$user_fca_home"
  else
    fca_home=/opt/mellanox/fca
  fi

  have_fca=yes # assume success
  fca_have_header=no
  fca_have_lib=no
  fca_in_path=no
  fca_in_fca_home=no

  FCA_INCLUDES=''
  FCA_LIBDIR=''
  FCA_LIBS=''

  if test "$fca_user_provided" != yes; then
    # looking for FCA in standard locations only if user didn't provide its location
    AC_CHECK_HEADERS(fca/fca_api.h, fca_have_header=yes)
    AC_CHECK_LIB(fca, fca_init, fca_have_lib=yes)
    AC_MSG_CHECKING(for FCA in standard locations)
    if test "$fca_have_header$fca_have_lib" = yesyes; then
        fca_in_path=yes
    fi
    AC_MSG_RESULT([$fca_in_path])
  fi

  if test "$fca_in_path" = no; then
    if test -e "$fca_home/include/fca/fca_api.h" ; then
      fca_have_header=yes
    fi
    if test -e "$fca_home/lib${GASNETI_PTR_BITS}/libfca.so" ; then
      fca_have_lib=yes
      fca_lib_path="$fca_home/lib${GASNETI_PTR_BITS}"
    elif test -e "$fca_home/lib/libfca.so" ; then
      fca_have_lib=yes
      fca_lib_path="$fca_home/lib"
    fi

    AC_MSG_CHECKING(for FCA in $fca_home)
    if test "$fca_have_header$fca_have_lib" = yesyes; then
        fca_in_fca_home=yes
        FCA_INCLUDES="-I$fca_home/include"
        FCA_LIBDIR="-L$fca_lib_path"
    fi
    AC_MSG_RESULT([$fca_in_fca_home])
  fi

  if test "$fca_user_provided$fca_in_fca_home" = yesno; then
    GASNET_MSG_WARN(FCA not found in user-provided $user_fca_home - disabling FCA)
    have_fca=no
  elif test "$fca_in_path$fca_in_fca_home" = nono; then
    have_fca=no
  fi

  if test "$force_fca$have_fca" = yesno; then
    GASNET_MSG_ERROR([User requested --enable-fca but FCA support could not be found])
  elif test "$have_fca" = yes; then
    FCA_LIBS="-lfca"
    AC_DEFINE_UNQUOTED(GASNETI_FCA_HOME, "$fca_home")
    AC_DEFINE(GASNET_FCA_ENABLED)
  fi
fi
FCA_ENABLED="$have_fca"
AC_SUBST([FCA_ENABLED])
AC_SUBST([FCA_INCLUDES])
AC_SUBST([FCA_LIBDIR])
AC_SUBST([FCA_LIBS])
AM_CONDITIONAL(FCA_ENABLED, test "$have_fca" = "yes")
dnl GASNET_TOOLSONLY_FALSE_END

########################################################################
##
##  Final Output
##

GASNET_FIX_EXEC(mpi-conduit/contrib/gasnetrun_mpi)
GASNET_FIX_EXEC(ibv-conduit/contrib/gasnetrun_ibv)
GASNET_FIX_EXEC(mxm-conduit/contrib/gasnetrun_mxm)
GASNET_FIX_EXEC(pami-conduit/contrib/gasnetrun_pami)
GASNET_FIX_EXEC(gemini-conduit/contrib/gasnetrun_gemini)
GASNET_FIX_EXEC(aries-conduit/contrib/gasnetrun_aries)
GASNET_FIX_EXEC(other/contrib/gasnet_trace)

if test "$gasnet_toolsonly_mode" = "no" ; then
cat >>$CONDUIT_LIST <<EOF

 Some conduits require --enable-XXX configure flags and/or additional
 variables providing the install location of vendor drivers.
 See the GASNet documentation for details.

 Misc Settings
 -------------
  MPI compatibility:      $have_mpi_compat
  Pthreads support:       $have_pthread
  Segment config:         $segconfig
  PSHM support:           $with_pshm
  FCA support:            $have_fca
EOF
else
cat >>$CONDUIT_LIST <<EOF
 GASNet is configured in tools-only mode, with all network communication services disabled.
 For the full GASNet distribution, visit http://gasnet.lbl.gov

 Misc Settings
 -------------
  Pthreads support:       $have_pthread
EOF
fi
echo "----------------------------------------------------------------------" >> $CONDUIT_LIST

# Files added here should also be added to ./unBootstrap
GASNET_END_CONFIGURE()
AC_OUTPUT(
Makefile
other/perlstart dnl must precede files that use it

dnl GASNET_TOOLSONLY_FALSE_BEGIN
mpi-conduit/Makefile
mpi-conduit/conduit.mak
mpi-conduit/contrib/Makefile
mpi-conduit/contrib/gasnetrun_mpi

udp-conduit/Makefile
udp-conduit/conduit.mak

smp-conduit/Makefile
smp-conduit/conduit.mak

pami-conduit/Makefile
pami-conduit/conduit.mak
pami-conduit/contrib/Makefile
pami-conduit/contrib/gasnetrun_pami

ibv-conduit/Makefile
ibv-conduit/conduit.mak
ibv-conduit/contrib/Makefile
ibv-conduit/contrib/gasnetrun_ibv

mxm-conduit/Makefile
mxm-conduit/conduit.mak
mxm-conduit/contrib/Makefile
mxm-conduit/contrib/gasnetrun_mxm

shmem-conduit/Makefile
shmem-conduit/conduit.mak

portals4-conduit/Makefile
portals4-conduit/conduit.mak

gemini-conduit/Makefile
gemini-conduit/conduit.mak
gemini-conduit/contrib/Makefile
gemini-conduit/contrib/gasnetrun_gemini

aries-conduit/Makefile
aries-conduit/conduit.mak
aries-conduit/contrib/Makefile
aries-conduit/contrib/gasnetrun_aries

other/Makefile-conduit.mak
other/fragment-head.mak
other/fragment-body.mak
other/ammpi/Makefile
other/amudp/Makefile
other/contrib/Makefile
other/contrib/gasnet_trace
other/testspawn/Makefile
other/firehose/Makefile
other/firehose/firehose.mak
other/fca/Makefile
other/fca/fca.mak
dnl GASNET_TOOLSONLY_FALSE_END

other/Makefile
other/Makefile-libgasnet.mak
other/gasnet_tools-fragment.mak
tests/Makefile
config-aux/Makefile
, 
GASNET_FIX_EXEC_OUTPUT()
GASNET_SANITIZE_PACKAGE(gasnet_config.h)
[ 
GASNET_MSG_WARN_FINISH()
CONDUIT_LIST=.gasnet-conduit-list.tmp
CONDUIT_LIST_FILE()
if test -f "$CONDUIT_LIST" ; then
  if test "$CONDUIT_LIST_SUPPRESS" != "yes" ; then
    cat $CONDUIT_LIST
  fi
  if test "$CONDUIT_LIST_CLEAN" != "yes" ; then
    rm -f $CONDUIT_LIST
  fi
fi
] , GASNET_FIX_EXEC_SETUP()
)

