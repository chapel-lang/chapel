This directory tests whether or not CPU binding works correctly on a
variety of topologies that are stored in the *.xml files. The same
Chapel program cpubind.chpl is used for all the tests. It is compiled
once, but run multiple times with different environments. The --execenv
argument is a comma-separated list of .execenv file prefixes that
cpubind.execenv uses to configure the environment. Success or failure
is determined by looking at the value of QT_CPUBIND in the output. This
environment variable is a colon-separated list of CPU bindings, one
entry per shepherd thread.

Topologies:

    macbook -- One Intel i7-9750H CPU. There are 6 cores and 12 PUs. The
    PU numbering is consecutive, so that PUs 0 and 1 are on core 0.

    ex -- HPE Cray EX with two sockets, each with an AMD EPYC 7713 CPU.
    There are 128 cores and 256 PUs. The PU numbering is strided, so
    that PUs 0 and 128 are on core 0.

    cs0 -- Two Intel Xeon E5-2690 CPUs. There are 24 cores and 48 PUs.
    The PU numbering is strided, so that PUs 0 and 24 are on core 0.

    cs1 -- Two Intel Xeon Platinum 8260 CPUs. There are 48 cores and 96
    PUs. The PU numbering is strided, so that PUs 0 and 48 are on core
    0.

    m1 -- MacBook Pro M1 with one Apple M1 Max CPU. There are 5 cores
    and 10 PUs. The PU numbering is consecutive, so that PUs 0 and 1
    are on core 0.

Tests:
    Prefixes:
    cpubind.shared* -- AM handler shares a core with the shepherds
    cpubind.dedicated* -- AM handler is bound to a dedicated core

    Suffixes:
    base (no suffix): One shepherd per core
    *-pus: One shepherd per PU
    *-twocores: One shepherd per core on cores 0 and 2
    *-twocores-pus: One shepherd per PU on cores 0 and 2
    *-onecore: One shepherd on core 0
