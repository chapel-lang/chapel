.. default-domain:: chpl

.. module:: operators.doc

operators.doc
=============
**Usage**

.. code-block:: chapel

   use operators.doc;


or

.. code-block:: chapel

   import operators.doc;

.. class:: Foo

   .. attribute:: var x: int

.. class:: Foo2

   .. attribute:: var x: bool

.. function:: operator +(a: Foo, b: Foo)

.. function:: operator align(r: range(?i), count: Foo)

.. function:: operator &(lhs: Foo2, rhs: Foo2)

.. function:: operator &=(ref lhs: Foo2, rhs: Foo2)

.. function:: operator by(r: range(?i), count: Foo)

.. function:: operator :(rhs: Foo, type t: Bar)

.. function:: operator #(r: range(?i), count: Foo)

.. function:: operator /=(ref lhs: Foo, rhs: Foo)

.. function:: operator /(lhs: Foo, rhs: Foo)

.. function:: operator ==(lhs: Foo, rhs: Foo)

.. function:: operator **=(ref lhs: Foo, rhs: Foo)

.. function:: operator **(lhs: Foo, rhs: Foo)

.. function:: operator >(lhs: Foo, rhs: Foo)

.. function:: operator >=(lhs: Foo, rhs: Foo)

.. function:: operator !=(lhs: Foo, rhs: Foo)

.. function:: operator <(lhs: Foo, rhs: Foo)

.. function:: operator <=(lhs: Foo, rhs: Foo)

.. function:: operator -=(ref lhs: Foo, rhs: Foo)

.. function:: operator %(lhs: Foo, rhs: Foo)

.. function:: operator %=(ref lhs: Foo, rhs: Foo)

.. function:: operator *(lhs: Foo, rhs: Foo)

.. function:: operator -(arg: Foo)

.. function:: operator !(arg: Foo2)

.. function:: operator |(lhs: Foo2, rhs: Foo2)

.. function:: operator |=(ref lhs: Foo2, rhs: Foo2)

.. function:: operator +=(ref lhs: Foo, rhs: Foo)

.. function:: operator +(arg: Foo)

.. function:: operator <<(lhs: Foo, rhs: Foo)

.. function:: operator <<=(ref lhs: Foo, rhs: Foo)

.. function:: operator >>(lhs: Foo, rhs: Foo)

.. function:: operator >>=(ref lhs: Foo, rhs: Foo)

.. function:: operator -(lhs: Foo, rhs: Foo)

.. function:: operator <=>(ref lhs: owned Foo?, ref rhs: owned Foo?)

.. function:: operator *=(ref lhs: Foo, rhs: Foo)

.. function:: operator ~(arg: Foo)

.. function:: operator ^(lhs: Foo2, rhs: Foo2)

.. function:: operator ^=(ref lhs: Foo2, rhs: Foo2)

.. record:: Bar

   .. attribute:: var y: int

.. method:: proc Bar.init=(other: Bar)

.. function:: operator  = (ref lhs: Bar, rhs: Bar)

