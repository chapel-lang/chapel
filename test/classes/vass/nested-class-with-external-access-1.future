semantic: should member accesses to an instance of a class be allowed outside of a function when the class is declared inside the function?

Let's say we declare a class inside a function that returns the class's
instance:

  proc p() {
    class C { var x=3; }
    return new C();
  }
  const c = p();

Should we be able to access c.x ?

If yes, we got an unimplemented feature, because the compiler doesn't
let me do it today. I get this:

  nested-class-with-external-access-1.chpl:7: error: unresolved call 'C.x'

If no, we have an inconsistency, because the compiler allows me to
writeln(c). I think it's an inconsistency because writeln(c) comes does
to c.writeThis(), which is no different than c.x, IMO.

My take is that nested != private. Privacy should be declared in the same
way as for declarations in a module. Nesting a class by itself
is unrelated to privacy of the class or its members.

In either case whether writeln(c) is permitted should be the same as
whether c.x is permitted.
