bug: Zippered iterator inlining may cause segfaults.

The auto-generated _getIterator function copies fields from the iterator record
and sets the initial value of the "more" field.  But it does not set an initial
value for the "value" field, expecting this to be set by the first call to
zip1().  This works fine if the type of the "value" field is a fundamental type
(such as int(64)), because even an uninitialized instance is still value.

However, for types requiring initialization (for example, a record containing a
class field) the fact the "value" is uninitialized can lead to problems.  In
this particular case, the test for whether there are more values to be yielded
depends upon the yielded value itself.*  When an attempt is made to evaluate a
field in that value, a segmentation fault results.

valgrind can be used to pinpoint the error.  For example, I see:

==4201== Conditional jump or move depends on uninitialised value(s)
==4201==    at 0x5256B4: zip13 (DefaultOpaque.c:1015)
==4201== 

Note that a segfault will not necessarily occur, since an uninitialized value
may still look like a value pointer within a valid segment.  I also noted that
when CHPL_LOCALE_MODEL=numa, due to recent changes in LICM, the problem with
zippered iterator inlining is uncovered by the C compiler, which make it
slightly easier to debug.  Sample error messages look like:

  In file included from obj/_main.c:25:
  obj/DefaultSparse.c: In function ‘sparseShiftArray3’:
  obj/DefaultSparse.c:3976: error: used struct type value where scalar is required
  obj/DefaultSparse.c:3981: error: used struct type value where scalar is required
  obj/DefaultSparse.c:3994: error: used struct type value where scalar is required
  etc.

This problem is isolated to zippered iterator inlining.  With iterator inlining
turned off, the test runs as expected.  (See the companion test
genericArrayInClass-otharrs)

The solution probably involves rewriting how zippered iterator inlining is
implemented.  Any explicit initialization code probably needs to be broken off
and placed in a loop initialization clause.  In addition, if the yielded value
is not explicitly initialized, it probably needs to be initialized through a
call to the default constructor for its type.  The latter approach was not
attempted, because iterator inlining takes place after resolution, but the
insertion of default constructor calls needs to take place in or before
resolution.  Workarounds are possible (for example, storing a map of default
constructors for later use), but a better approach probably involves converting
zippered iteration to its inlined form prior to resolution.

