bug: Should the comparison method within the owned class "work"?

I can see why this doesn't simply work, but it seems like it would
be attractive/productive/convenient if it did.

This was motivated by trying to make a variation on chameneos-blc.chpl
that used owned Chameneos to avoid the need for the deletes at the end
of main().

Michael writes:

This one is interesting and a different problem from the others. It's
showing the limits of our current forward-but-don't-coerce strategy
for Owned.

In particular, within `matches` `this` is C, but `other` is totally
generic and so it's an Owned.  Not sure how to "fix" this without
user-defined-coercions for Owned, but the obvious solution is to write

``` chapel
a.matches(b.borrow());
a.matches(a.borrow());
```

If we had user-defined coercions for Owned, I think this code would
work as-is.

Also, since `==` and `!=` mean something specific (and not normally
overridden?) for classes, we could write explicit coercion-wrappers
for these, e.g.

``` chapel
proc ==(a:Owned(?t), b:t) return a.borrow() == b;
proc ==(a:?t, b:Owned(t) return a.borrow() == b;
```

... but I personally think we should probably either require the
`.borrow()` in this case or pursue the general user-defined-coercions
from Owned(T) to T.