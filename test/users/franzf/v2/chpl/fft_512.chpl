/***************************************************************
This code was generated by  Spiral 5.0 beta, www.spiral.net --
Copyright (c) 2005, Carnegie Mellon University
All rights reserved.
The code is distributed under a BSD style license
(see http://www.opensource.org/licenses/bsd-license.php)

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
  notice, reference to Spiral, this list of conditions and the
  following disclaimer.
* Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.
* Neither the name of Carnegie Mellon University nor the name of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*AS IS* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
******************************************************************/

use omega;
var  buf4: [0..511] complex;
var  dat4: [0..511] complex;

proc init_fft512() {
    for i1562 in 0..31 {
        for i1567 in 0..3 {
            for i1573 in 0..1 {
                dat4(((i1562*16) + (i1567*4) + (i1573*2))) = omega(512, ((i1567 + (i1573*4))*i1562));
                dat4(((i1562*16) + (i1567*4) + (i1573*2) + 1)) = omega(512, ((i1567 + (i1573*4) + 8)*i1562));
            }
        }
    }

}

proc fft512(Y: [] complex, X: [] complex) {
    for i1563 in 0..15 {
        var s3313, s3314, s3315, s3316, s3317, s3318, s3319, 
    s3320, s3321, s3322, s3323, s3324, s3325, s3326, s3327, 
    s3328, s3329, s3330, s3331, s3332, s3333, s3334, s3335, 
    s3336, s3337, s3338, s3339, s3340, s3341, s3342, s3343, 
    s3344, s3345, s3346, s3347, s3348, s3349, s3350, s3351, 
    s3352, s3353, s3354, s3355, s3356, s3357, s3358, s3359, 
    s3360, s3361, s3362, s3363, s3364, s3365, s3366, s3367, 
    s3368, s3369, s3370, s3371, s3372, s3373, s3374, s3375, 
    s3376, s3377, s3378, s3379, s3380, s3381, s3382, s3383, 
    s3384, s3385, s3386, s3387, s3388, s3389, s3390, s3391, 
    s3392, s3393, t5585, t5586, t5587, t5588, t5589, t5590, 
    t5591, t5592, t5593, t5594, t5595, t5596, t5597, t5598, 
    t5599, t5600, t5601, t5602, t5603, t5604, t5605, t5606, 
    t5607, t5608, t5609, t5610, t5611, t5612, t5613, t5614, 
    t5615, t5616, t5617, t5618, t5619, t5620, t5621, t5622, 
    t5623, t5624, t5625, t5626, t5627, t5628, t5629, t5630, 
    t5631, t5632, t5633, t5634, t5635, t5636, t5637, t5638, 
    t5639, t5640, t5641, t5642, t5643, t5644, t5645, t5646, 
    t5647, t5648, t5649, t5650, t5651, t5652, t5653, t5654, 
    t5655, t5656, t5657, t5658, t5659, t5660, t5661, t5662, 
    t5663:complex;
        var a3375:int;
        s3313 = X(i1563);
        s3314 = X((256 + i1563));
        t5585 = (s3313 + s3314);
        t5586 = (s3313 - s3314);
        s3315 = X((128 + i1563));
        s3316 = X((384 + i1563));
        t5587 = (s3315 + s3316);
        t5588 = (t5585 + t5587);
        t5589 = (t5585 - t5587);
        s3317 = (1.0i*(s3315 - s3316));
        t5590 = (t5586 + s3317);
        t5591 = (t5586 - s3317);
        s3318 = X((64 + i1563));
        s3319 = X((320 + i1563));
        t5592 = (s3318 + s3319);
        t5593 = (s3318 - s3319);
        s3320 = X((192 + i1563));
        s3321 = X((448 + i1563));
        t5594 = (s3320 + s3321);
        t5595 = (t5592 + t5594);
        s3322 = (1.0i*(s3320 - s3321));
        t5596 = (t5588 + t5595);
        t5597 = (t5588 - t5595);
        s3323 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5593 + s3322));
        t5598 = (t5590 + s3323);
        t5599 = (t5590 - s3323);
        s3324 = (1.0i*(t5592 - t5594));
        t5600 = (t5589 + s3324);
        t5601 = (t5589 - s3324);
        s3325 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5593 - s3322));
        t5602 = (t5591 + s3325);
        t5603 = (t5591 - s3325);
        s3326 = X((16 + i1563));
        s3327 = X((272 + i1563));
        t5604 = (s3326 + s3327);
        t5605 = (s3326 - s3327);
        s3328 = X((144 + i1563));
        s3329 = X((400 + i1563));
        t5606 = (s3328 + s3329);
        t5607 = (t5604 + t5606);
        t5608 = (t5604 - t5606);
        s3330 = (1.0i*(s3328 - s3329));
        t5609 = (t5605 + s3330);
        t5610 = (t5605 - s3330);
        s3331 = X((80 + i1563));
        s3332 = X((336 + i1563));
        t5611 = (s3331 + s3332);
        t5612 = (s3331 - s3332);
        s3333 = X((208 + i1563));
        s3334 = X((464 + i1563));
        t5613 = (s3333 + s3334);
        t5614 = (t5611 + t5613);
        s3335 = (1.0i*(s3333 - s3334));
        t5615 = (t5607 + t5614);
        s3336 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5612 + s3335));
        s3337 = (1.0i*(t5611 - t5613));
        s3338 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5612 - s3335));
        s3339 = X((32 + i1563));
        s3340 = X((288 + i1563));
        t5616 = (s3339 + s3340);
        t5617 = (s3339 - s3340);
        s3341 = X((160 + i1563));
        s3342 = X((416 + i1563));
        t5618 = (s3341 + s3342);
        t5619 = (t5616 + t5618);
        t5620 = (t5616 - t5618);
        s3343 = (1.0i*(s3341 - s3342));
        t5621 = (t5617 + s3343);
        t5622 = (t5617 - s3343);
        s3344 = X((96 + i1563));
        s3345 = X((352 + i1563));
        t5623 = (s3344 + s3345);
        t5624 = (s3344 - s3345);
        s3346 = X((224 + i1563));
        s3347 = X((480 + i1563));
        t5625 = (s3346 + s3347);
        t5626 = (t5623 + t5625);
        s3348 = (1.0i*(s3346 - s3347));
        t5627 = (t5619 + t5626);
        s3349 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5624 + s3348));
        s3350 = (1.0i*(t5623 - t5625));
        s3351 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5624 - s3348));
        s3352 = X((48 + i1563));
        s3353 = X((304 + i1563));
        t5628 = (s3352 + s3353);
        t5629 = (s3352 - s3353);
        s3354 = X((176 + i1563));
        s3355 = X((432 + i1563));
        t5630 = (s3354 + s3355);
        t5631 = (t5628 + t5630);
        t5632 = (t5628 - t5630);
        s3356 = (1.0i*(s3354 - s3355));
        t5633 = (t5629 + s3356);
        t5634 = (t5629 - s3356);
        s3357 = X((112 + i1563));
        s3358 = X((368 + i1563));
        t5635 = (s3357 + s3358);
        t5636 = (s3357 - s3358);
        s3359 = X((240 + i1563));
        s3360 = X((496 + i1563));
        t5637 = (s3359 + s3360);
        t5638 = (t5635 + t5637);
        s3361 = (1.0i*(s3359 - s3360));
        t5639 = (t5631 + t5638);
        s3362 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5636 + s3361));
        s3363 = (1.0i*(t5635 - t5637));
        s3364 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5636 - s3361));
        t5640 = (t5596 + t5627);
        t5641 = (t5596 - t5627);
        t5642 = (t5615 + t5639);
        a3375 = (32*i1563);
        buf4(a3375) = (t5640 + t5642);
        buf4((16 + a3375)) = (t5640 - t5642);
        s3365 = (1.0i*(t5615 - t5639));
        buf4((8 + a3375)) = (t5641 + s3365);
        buf4((24 + a3375)) = (t5641 - s3365);
        s3366 = ((0.92387953251128674 + 1.0i * 0.38268343236508978)*(t5621 + s3349));
        t5643 = (t5598 + s3366);
        t5644 = (t5598 - s3366);
        s3367 = ((0.98078528040323043 + 1.0i * 0.19509032201612825)*(t5609 + s3336));
        s3368 = ((0.83146961230254524 + 1.0i * 0.55557023301960218)*(t5633 + s3362));
        t5645 = (s3367 + s3368);
        buf4((1 + a3375)) = (t5643 + t5645);
        buf4((17 + a3375)) = (t5643 - t5645);
        s3369 = (1.0i*(s3367 - s3368));
        buf4((9 + a3375)) = (t5644 + s3369);
        buf4((25 + a3375)) = (t5644 - s3369);
        s3370 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5620 + s3350));
        t5646 = (t5600 + s3370);
        t5647 = (t5600 - s3370);
        s3371 = ((0.92387953251128674 + 1.0i * 0.38268343236508978)*(t5608 + s3337));
        s3372 = ((0.38268343236508978 + 1.0i * 0.92387953251128674)*(t5632 + s3363));
        t5648 = (s3371 + s3372);
        buf4((2 + a3375)) = (t5646 + t5648);
        buf4((18 + a3375)) = (t5646 - t5648);
        s3373 = (1.0i*(s3371 - s3372));
        buf4((10 + a3375)) = (t5647 + s3373);
        buf4((26 + a3375)) = (t5647 - s3373);
        s3374 = ((0.38268343236508978 + 1.0i * 0.92387953251128674)*(t5622 + s3351));
        t5649 = (t5602 + s3374);
        t5650 = (t5602 - s3374);
        s3375 = ((0.83146961230254524 + 1.0i * 0.55557023301960218)*(t5610 + s3338));
        s3376 = ((-0.19509032201612825 + 1.0i * 0.98078528040323043)*(t5634 + s3364));
        t5651 = (s3375 + s3376);
        buf4((3 + a3375)) = (t5649 + t5651);
        buf4((19 + a3375)) = (t5649 - t5651);
        s3377 = (1.0i*(s3375 - s3376));
        buf4((11 + a3375)) = (t5650 + s3377);
        buf4((27 + a3375)) = (t5650 - s3377);
        s3378 = (1.0i*(t5619 - t5626));
        t5652 = (t5597 + s3378);
        t5653 = (t5597 - s3378);
        s3379 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5607 - t5614));
        s3380 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5631 - t5638));
        t5654 = (s3379 + s3380);
        buf4((4 + a3375)) = (t5652 + t5654);
        buf4((20 + a3375)) = (t5652 - t5654);
        s3381 = (1.0i*(s3379 - s3380));
        buf4((12 + a3375)) = (t5653 + s3381);
        buf4((28 + a3375)) = (t5653 - s3381);
        s3382 = ((-0.38268343236508978 + 1.0i * 0.92387953251128674)*(t5621 - s3349));
        t5655 = (t5599 + s3382);
        t5656 = (t5599 - s3382);
        s3383 = ((0.55557023301960218 + 1.0i * 0.83146961230254524)*(t5609 - s3336));
        s3384 = ((-0.98078528040323043 + 1.0i * 0.19509032201612825)*(t5633 - s3362));
        t5657 = (s3383 + s3384);
        buf4((5 + a3375)) = (t5655 + t5657);
        buf4((21 + a3375)) = (t5655 - t5657);
        s3385 = (1.0i*(s3383 - s3384));
        buf4((13 + a3375)) = (t5656 + s3385);
        buf4((29 + a3375)) = (t5656 - s3385);
        s3386 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5620 - s3350));
        t5658 = (t5601 + s3386);
        t5659 = (t5601 - s3386);
        s3387 = ((0.38268343236508978 + 1.0i * 0.92387953251128674)*(t5608 - s3337));
        s3388 = ((-0.92387953251128674 - 1.0i * 0.38268343236508978)*(t5632 - s3363));
        t5660 = (s3387 + s3388);
        buf4((6 + a3375)) = (t5658 + t5660);
        buf4((22 + a3375)) = (t5658 - t5660);
        s3389 = (1.0i*(s3387 - s3388));
        buf4((14 + a3375)) = (t5659 + s3389);
        buf4((30 + a3375)) = (t5659 - s3389);
        s3390 = ((-0.92387953251128674 + 1.0i * 0.38268343236508978)*(t5622 - s3351));
        t5661 = (t5603 + s3390);
        t5662 = (t5603 - s3390);
        s3391 = ((0.19509032201612825 + 1.0i * 0.98078528040323043)*(t5610 - s3338));
        s3392 = ((-0.55557023301960218 - 1.0i * 0.83146961230254524)*(t5634 - s3364));
        t5663 = (s3391 + s3392);
        buf4((7 + a3375)) = (t5661 + t5663);
        buf4((23 + a3375)) = (t5661 - t5663);
        s3393 = (1.0i*(s3391 - s3392));
        buf4((15 + a3375)) = (t5662 + s3393);
        buf4((31 + a3375)) = (t5662 - s3393);
    }
    for i1562 in 0..31 {
        var s3492, s3493, s3494, s3495, s3496, s3497, s3498, 
    s3499, s3500, s3501, s3502, s3503, s3504, s3505, s3506, 
    s3507, s3508, s3509, s3510, s3511, s3512, s3513, s3514, 
    s3515, s3516, s3517, s3518, s3519, s3520, s3521, s3522, 
    s3523, s3524, t5792, t5793, t5794, t5795, t5796, t5797, 
    t5798, t5799, t5800, t5801, t5802, t5803, t5804, t5805, 
    t5806, t5807, t5808, t5809, t5810, t5811, t5812, t5813, 
    t5814, t5815, t5816, t5817, t5818, t5819, t5820, t5821, 
    t5822:complex;
        var a3500, a3501, a3502, a3503, a3504, a3505, a3506, 
    a3507, a3508, a3509, a3510, a3511, a3512, a3513, a3514, 
    a3515:int;
        a3500 = (256 + i1562);
        a3501 = (16*i1562);
        s3492 = (dat4(a3501)*buf4(i1562));
        s3493 = (dat4((1 + a3501))*buf4(a3500));
        t5792 = (s3492 + s3493);
        t5793 = (s3492 - s3493);
        a3502 = (128 + i1562);
        a3503 = (384 + i1562);
        s3494 = (dat4((2 + a3501))*buf4(a3502));
        s3495 = (dat4((3 + a3501))*buf4(a3503));
        t5794 = (s3494 + s3495);
        t5795 = (t5792 + t5794);
        t5796 = (t5792 - t5794);
        s3496 = (1.0i*(s3494 - s3495));
        t5797 = (t5793 + s3496);
        t5798 = (t5793 - s3496);
        a3504 = (32 + i1562);
        a3505 = (288 + i1562);
        s3497 = (dat4((4 + a3501))*buf4(a3504));
        s3498 = (dat4((5 + a3501))*buf4(a3505));
        t5799 = (s3497 + s3498);
        t5800 = (s3497 - s3498);
        a3506 = (160 + i1562);
        a3507 = (416 + i1562);
        s3499 = (dat4((6 + a3501))*buf4(a3506));
        s3500 = (dat4((7 + a3501))*buf4(a3507));
        t5801 = (s3499 + s3500);
        t5802 = (t5799 + t5801);
        s3501 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5799 - t5801));
        s3502 = (1.0i*(s3499 - s3500));
        s3503 = ((0.92387953251128674 + 1.0i * 0.38268343236508978)*(t5800 + s3502));
        s3504 = ((0.38268343236508978 + 1.0i * 0.92387953251128674)*(t5800 - s3502));
        a3508 = (64 + i1562);
        a3509 = (320 + i1562);
        s3505 = (dat4((8 + a3501))*buf4(a3508));
        s3506 = (dat4((9 + a3501))*buf4(a3509));
        t5803 = (s3505 + s3506);
        t5804 = (s3505 - s3506);
        a3510 = (192 + i1562);
        a3511 = (448 + i1562);
        s3507 = (dat4((10 + a3501))*buf4(a3510));
        s3508 = (dat4((11 + a3501))*buf4(a3511));
        t5805 = (s3507 + s3508);
        t5806 = (t5803 + t5805);
        s3509 = (1.0i*(t5803 - t5805));
        s3510 = (1.0i*(s3507 - s3508));
        s3511 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5804 + s3510));
        s3512 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5804 - s3510));
        a3512 = (96 + i1562);
        a3513 = (352 + i1562);
        s3513 = (dat4((12 + a3501))*buf4(a3512));
        s3514 = (dat4((13 + a3501))*buf4(a3513));
        t5807 = (s3513 + s3514);
        t5808 = (s3513 - s3514);
        a3514 = (224 + i1562);
        a3515 = (480 + i1562);
        s3515 = (dat4((14 + a3501))*buf4(a3514));
        s3516 = (dat4((15 + a3501))*buf4(a3515));
        t5809 = (s3515 + s3516);
        t5810 = (t5807 + t5809);
        s3517 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t5807 - t5809));
        s3518 = (1.0i*(s3515 - s3516));
        s3519 = ((0.38268343236508978 + 1.0i * 0.92387953251128674)*(t5808 + s3518));
        s3520 = ((-0.92387953251128674 - 1.0i * 0.38268343236508978)*(t5808 - s3518));
        t5811 = (t5795 + t5806);
        t5812 = (t5795 - t5806);
        t5813 = (t5802 + t5810);
        Y(i1562) = (t5811 + t5813);
        Y(a3500) = (t5811 - t5813);
        s3521 = (1.0i*(t5802 - t5810));
        Y(a3502) = (t5812 + s3521);
        Y(a3503) = (t5812 - s3521);
        t5814 = (t5797 + s3511);
        t5815 = (t5797 - s3511);
        t5816 = (s3503 + s3519);
        Y(a3504) = (t5814 + t5816);
        Y(a3505) = (t5814 - t5816);
        s3522 = (1.0i*(s3503 - s3519));
        Y(a3506) = (t5815 + s3522);
        Y(a3507) = (t5815 - s3522);
        t5817 = (t5796 + s3509);
        t5818 = (t5796 - s3509);
        t5819 = (s3501 + s3517);
        Y(a3508) = (t5817 + t5819);
        Y(a3509) = (t5817 - t5819);
        s3523 = (1.0i*(s3501 - s3517));
        Y(a3510) = (t5818 + s3523);
        Y(a3511) = (t5818 - s3523);
        t5820 = (t5798 + s3512);
        t5821 = (t5798 - s3512);
        t5822 = (s3504 + s3520);
        Y(a3512) = (t5820 + t5822);
        Y(a3513) = (t5820 - t5822);
        s3524 = (1.0i*(s3504 - s3520));
        Y(a3514) = (t5821 + s3524);
        Y(a3515) = (t5821 - s3524);
    }

}
