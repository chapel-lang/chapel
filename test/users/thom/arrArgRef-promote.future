semantic: array arguments, promotions, and return values

This series of 6 tests suggests to me that we may still
have questions in our semantics or implementation about
array arguments, promotions, and return types.  In
particular, how should a non-lvalue "array" expression
like A+B be interpreted?  I tend to think of it as a
virtual array (over A.domain) with no l-value.  For
this reason, I would expect it to be illegal to be
passed to an array argument with blank intent, legal
to pass to an array argument with in intent, and
(my preference, though I realize there may be implementation
challenges) legal to pass to an array argument with
const intent.

Interestingly, the compiler is sometimes more permissive
with functions that return arrays (e.g., return A+B).
In our "compiler should not insert array temps" thinking,
I would think that this would be equivalent to the above
(and would like to see it implemented by transforming the
function to accept the RHS array, if any, as an optional
argument and doing the assignment at the return statement).
This would similarly make it illegal for the blank intent
(no RHS array to assign to/lvalue for the function return type),
legal for the in intent (use the "copy in temporary array"
as the RHS array), but this might suggest it should be
illegal for the array of const intent (darn...  I'm not sure
how to explain this -- it seems desireable).

Surprisingly, arrArgBlank-function.chpl doesn't seem to
have any problems, making me think we may be inserting
a temporary array that I wouldn't have expected?

Mostly, this whole exercise confused me more than I was
comfortable with...
