/* Point to point communication */
#include "mpi_dummy.h"

int MPI_Send(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);  
int MPI_Recv(void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status);  
int MPI_Get_count(MPI_Status *status, MPI_Datatype datatype, int *count);  
int MPI_Bsend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);  
int MPI_Ssend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);  
int MPI_Rsend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);  
int MPI_Buffer_attach( void* buffer, int size);  
int MPI_Buffer_detach( void* buffer, int* size);  
int MPI_Isend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Ibsend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Issend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Irsend(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Irecv(void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Wait(MPI_Request *request, MPI_Status *status);  
int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);  
int MPI_Request_free(MPI_Request *request);  
int MPI_Waitany(int count, MPI_Request *array_of_requests, int *index, MPI_Status *status);  
int MPI_Testany(int count, MPI_Request *array_of_requests, int *index, int *flag, MPI_Status *status);  
int MPI_Waitall(int count, MPI_Request *array_of_requests, MPI_Status *array_of_statuses);  
int MPI_Testall(int count, MPI_Request *array_of_requests, int *flag, MPI_Status *array_of_statuses);  
int MPI_Waitsome(int incount, MPI_Request *array_of_requests, int *outcount, int *array_of_indices, MPI_Status *array_of_statuses);  
int MPI_Testsome(int incount, MPI_Request *array_of_requests, int *outcount, int *array_of_indices, MPI_Status *array_of_statuses);  
int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status);  
int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);  
int MPI_Cancel(MPI_Request *request);  
int MPI_Test_cancelled(MPI_Status *status, int *flag);  
int MPI_Send_init(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Bsend_init(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Ssend_init(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Rsend_init(void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Recv_init(void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request);  
int MPI_Start(MPI_Request *request);  
int MPI_Startall(int count, MPI_Request *array_of_requests);  
int MPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, MPI_Datatype recvtag, MPI_Comm comm, MPI_Status *status);  
int MPI_Sendrecv_replace(void* buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status);  
int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype);  
int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype);  
int MPI_Type_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype);  
int MPI_Type_indexed(int count, int *array_of_blocklengths, int *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype);  
int MPI_Type_hindexed(int count, int *array_of_blocklengths, MPI_Aint *array_of_displacements, MPI_Datatype oldtype, MPI_Datatype *newtype);  
int MPI_Type_struct(int count, int *array_of_blocklengths, MPI_Aint *array_of_displacements, MPI_Datatype *array_of_types, MPI_Datatype *newtype);  
int MPI_Address(void* location, MPI_Aint *address);  
int MPI_Type_extent(MPI_Datatype datatype, MPI_Aint *extent);  
int MPI_Type_size(MPI_Datatype datatype, int *size);  
int MPI_Type_lb(MPI_Datatype datatype, MPI_Aint* displacement);  
int MPI_Type_ub(MPI_Datatype datatype, MPI_Aint* displacement);  
int MPI_Type_commit(MPI_Datatype *datatype);  
int MPI_Type_free(MPI_Datatype *datatype);  
int MPI_Get_elements(MPI_Status *status, MPI_Datatype datatype, int *count);  
int MPI_Pack(void* inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outsize, int *position,  MPI_Comm comm);  
int MPI_Unpack(void* inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm);  
int MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size);  
