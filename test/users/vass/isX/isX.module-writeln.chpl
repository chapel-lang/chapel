// DO NOT EDIT - THIS FILE IS GENERATED AUTOMATICALLY //

// most contents are copied from
//   test/parallel/taskPar/taskIntents/*
// or
//   test/parallel/taskPar/taskIntents/src/*


/////////////////////////////////////////////////////////////////////////////
// declare some none-primitive types //

enum EnumType {
  eFirst,
  eSecond,
  eLast
}
const eInstance = EnumType.eSecond;

type HomTupType = 3*int;
const homInstance: HomTupType = (1011, 1012, 1013);

type HetTupType = (int, real, string);
const hetInstance = (101, 102.5, "hetInstance");

class ClassType {
  var zzz: int;
}
const cInstance = new ClassType(44444444);

record RecordSmall {
  var xxx: int;
}
const rSmall = new RecordSmall(xxx=600033);

union UnionType {
  var ufield111, ufield222: int;
}
var uInstanceVar: UnionType;
uInstanceVar.ufield222 = 339933;
const uInstance = uInstanceVar;

type DomType1 = domain(1);
const init1dom: DomType1 = {7770..7771};

type DomType2 = domain(2);
const init2dom: DomType2 = {110001..110002, 330004..330005};

type ArrType1 = [init1dom] int;
const init1arr: ArrType1 = 11011;

type ArrType2 = [init2dom] int;
const init2arr: ArrType2 = 33033;



/////////////////////////////////////////////////////////////////////////////
// declare our varaibles //

// todo: add the same test for formals, local vars, function call exprs
writeln("=== at the module level ===");

var b0:  bool;
var b8:  bool(8);
var b16: bool(16);
var b32: bool(32);
var b64: bool(64);

var i8:  int(8);
var i16: int(16);
var i32: int(32);
var i64: int(64);

var u8:  uint(8);
var u16: uint(16);
var u32: uint(32);
var u64: uint(64);

var r32:  real(32);
var r64:  real(64);
var m32:  imag(32);
var m64:  imag(64);
var z64:  complex(64);
var z128: complex(128);

var str:    string;
var enm:    EnumType;
var homtup: HomTupType;
var hettup: HetTupType;

var cls:  ClassType;
var rec1: RecordSmall;
var unn:  UnionType;

var rng1: range;
var rng2: range(uint(8), BoundedRangeType.boundedNone, true);
var dmp = new dmap(new DefaultDist());
var dom1: DomType1;
var dom2: DomType2;
var arr1: ArrType1;
var arr2: ArrType2;

var syInt:  sync int;
var syReal: sync real;
var siInt:  single int;
var siReal: single real;
var aInt:   atomic int;
var aReal:  atomic real;

proc report(is: bool, name: string) { if is then write("  ", name); }


/////////////////////////////////////////////////////////////////////////////
// run the checks //

write("bool (b0)");
report(isBool(b0), "isBool");
report(isBoolValue(b0), "isBoolValue");
report(isBoolType(b0.type), "isBoolType");
report(isInt(b0), "isInt");
report(isIntValue(b0), "isIntValue");
report(isIntType(b0.type), "isIntType");
report(isUint(b0), "isUint");
report(isUintValue(b0), "isUintValue");
report(isUintType(b0.type), "isUintType");
report(isReal(b0), "isReal");
report(isRealValue(b0), "isRealValue");
report(isRealType(b0.type), "isRealType");
report(isImag(b0), "isImag");
report(isImagValue(b0), "isImagValue");
report(isImagType(b0.type), "isImagType");
report(isComplex(b0), "isComplex");
report(isComplexValue(b0), "isComplexValue");
report(isComplexType(b0.type), "isComplexType");
report(isString(b0), "isString");
report(isStringValue(b0), "isStringValue");
report(isStringType(b0.type), "isStringType");
report(isEnum(b0), "isEnum");
report(isEnumValue(b0), "isEnumValue");
report(isEnumType(b0.type), "isEnumType");
report(isTuple(b0), "isTuple");
report(isTupleValue(b0), "isTupleValue");
report(isTupleType(b0.type), "isTupleType");
report(isClass(b0), "isClass");
report(isClassValue(b0), "isClassValue");
report(isClassType(b0.type), "isClassType");
report(isRecord(b0), "isRecord");
report(isRecordValue(b0), "isRecordValue");
report(isRecordType(b0.type), "isRecordType");
report(isUnion(b0), "isUnion");
report(isUnionValue(b0), "isUnionValue");
report(isUnionType(b0.type), "isUnionType");
report(isRange(b0), "isRange");
report(isRangeValue(b0), "isRangeValue");
report(isRangeType(b0.type), "isRangeType");
report(isDmap(b0), "isDmap");
report(isDmapValue(b0), "isDmapValue");
report(isDmapType(b0.type), "isDmapType");
report(isDomain(b0), "isDomain");
report(isDomainValue(b0), "isDomainValue");
report(isDomainType(b0.type), "isDomainType");
report(isArray(b0), "isArray");
report(isArrayValue(b0), "isArrayValue");
report(isArrayType(b0.type), "isArrayType");
report(isSync(b0), "isSync");
report(isSyncValue(b0), "isSyncValue");
report(isSyncType(b0.type), "isSyncType");
report(isSingle(b0), "isSingle");
report(isSingleValue(b0), "isSingleValue");
report(isSingleType(b0.type), "isSingleType");
report(isAtomic(b0), "isAtomic");
report(isAtomicValue(b0), "isAtomicValue");
report(isAtomicType(b0.type), "isAtomicType");
writeln("  .");

write("bool(8) (b8)");
report(isBool(b8), "isBool");
report(isBoolValue(b8), "isBoolValue");
report(isBoolType(b8.type), "isBoolType");
report(isInt(b8), "isInt");
report(isIntValue(b8), "isIntValue");
report(isIntType(b8.type), "isIntType");
report(isUint(b8), "isUint");
report(isUintValue(b8), "isUintValue");
report(isUintType(b8.type), "isUintType");
report(isReal(b8), "isReal");
report(isRealValue(b8), "isRealValue");
report(isRealType(b8.type), "isRealType");
report(isImag(b8), "isImag");
report(isImagValue(b8), "isImagValue");
report(isImagType(b8.type), "isImagType");
report(isComplex(b8), "isComplex");
report(isComplexValue(b8), "isComplexValue");
report(isComplexType(b8.type), "isComplexType");
report(isString(b8), "isString");
report(isStringValue(b8), "isStringValue");
report(isStringType(b8.type), "isStringType");
report(isEnum(b8), "isEnum");
report(isEnumValue(b8), "isEnumValue");
report(isEnumType(b8.type), "isEnumType");
report(isTuple(b8), "isTuple");
report(isTupleValue(b8), "isTupleValue");
report(isTupleType(b8.type), "isTupleType");
report(isClass(b8), "isClass");
report(isClassValue(b8), "isClassValue");
report(isClassType(b8.type), "isClassType");
report(isRecord(b8), "isRecord");
report(isRecordValue(b8), "isRecordValue");
report(isRecordType(b8.type), "isRecordType");
report(isUnion(b8), "isUnion");
report(isUnionValue(b8), "isUnionValue");
report(isUnionType(b8.type), "isUnionType");
report(isRange(b8), "isRange");
report(isRangeValue(b8), "isRangeValue");
report(isRangeType(b8.type), "isRangeType");
report(isDmap(b8), "isDmap");
report(isDmapValue(b8), "isDmapValue");
report(isDmapType(b8.type), "isDmapType");
report(isDomain(b8), "isDomain");
report(isDomainValue(b8), "isDomainValue");
report(isDomainType(b8.type), "isDomainType");
report(isArray(b8), "isArray");
report(isArrayValue(b8), "isArrayValue");
report(isArrayType(b8.type), "isArrayType");
report(isSync(b8), "isSync");
report(isSyncValue(b8), "isSyncValue");
report(isSyncType(b8.type), "isSyncType");
report(isSingle(b8), "isSingle");
report(isSingleValue(b8), "isSingleValue");
report(isSingleType(b8.type), "isSingleType");
report(isAtomic(b8), "isAtomic");
report(isAtomicValue(b8), "isAtomicValue");
report(isAtomicType(b8.type), "isAtomicType");
writeln("  .");

write("bool(16) (b16)");
report(isBool(b16), "isBool");
report(isBoolValue(b16), "isBoolValue");
report(isBoolType(b16.type), "isBoolType");
report(isInt(b16), "isInt");
report(isIntValue(b16), "isIntValue");
report(isIntType(b16.type), "isIntType");
report(isUint(b16), "isUint");
report(isUintValue(b16), "isUintValue");
report(isUintType(b16.type), "isUintType");
report(isReal(b16), "isReal");
report(isRealValue(b16), "isRealValue");
report(isRealType(b16.type), "isRealType");
report(isImag(b16), "isImag");
report(isImagValue(b16), "isImagValue");
report(isImagType(b16.type), "isImagType");
report(isComplex(b16), "isComplex");
report(isComplexValue(b16), "isComplexValue");
report(isComplexType(b16.type), "isComplexType");
report(isString(b16), "isString");
report(isStringValue(b16), "isStringValue");
report(isStringType(b16.type), "isStringType");
report(isEnum(b16), "isEnum");
report(isEnumValue(b16), "isEnumValue");
report(isEnumType(b16.type), "isEnumType");
report(isTuple(b16), "isTuple");
report(isTupleValue(b16), "isTupleValue");
report(isTupleType(b16.type), "isTupleType");
report(isClass(b16), "isClass");
report(isClassValue(b16), "isClassValue");
report(isClassType(b16.type), "isClassType");
report(isRecord(b16), "isRecord");
report(isRecordValue(b16), "isRecordValue");
report(isRecordType(b16.type), "isRecordType");
report(isUnion(b16), "isUnion");
report(isUnionValue(b16), "isUnionValue");
report(isUnionType(b16.type), "isUnionType");
report(isRange(b16), "isRange");
report(isRangeValue(b16), "isRangeValue");
report(isRangeType(b16.type), "isRangeType");
report(isDmap(b16), "isDmap");
report(isDmapValue(b16), "isDmapValue");
report(isDmapType(b16.type), "isDmapType");
report(isDomain(b16), "isDomain");
report(isDomainValue(b16), "isDomainValue");
report(isDomainType(b16.type), "isDomainType");
report(isArray(b16), "isArray");
report(isArrayValue(b16), "isArrayValue");
report(isArrayType(b16.type), "isArrayType");
report(isSync(b16), "isSync");
report(isSyncValue(b16), "isSyncValue");
report(isSyncType(b16.type), "isSyncType");
report(isSingle(b16), "isSingle");
report(isSingleValue(b16), "isSingleValue");
report(isSingleType(b16.type), "isSingleType");
report(isAtomic(b16), "isAtomic");
report(isAtomicValue(b16), "isAtomicValue");
report(isAtomicType(b16.type), "isAtomicType");
writeln("  .");

write("bool(32) (b32)");
report(isBool(b32), "isBool");
report(isBoolValue(b32), "isBoolValue");
report(isBoolType(b32.type), "isBoolType");
report(isInt(b32), "isInt");
report(isIntValue(b32), "isIntValue");
report(isIntType(b32.type), "isIntType");
report(isUint(b32), "isUint");
report(isUintValue(b32), "isUintValue");
report(isUintType(b32.type), "isUintType");
report(isReal(b32), "isReal");
report(isRealValue(b32), "isRealValue");
report(isRealType(b32.type), "isRealType");
report(isImag(b32), "isImag");
report(isImagValue(b32), "isImagValue");
report(isImagType(b32.type), "isImagType");
report(isComplex(b32), "isComplex");
report(isComplexValue(b32), "isComplexValue");
report(isComplexType(b32.type), "isComplexType");
report(isString(b32), "isString");
report(isStringValue(b32), "isStringValue");
report(isStringType(b32.type), "isStringType");
report(isEnum(b32), "isEnum");
report(isEnumValue(b32), "isEnumValue");
report(isEnumType(b32.type), "isEnumType");
report(isTuple(b32), "isTuple");
report(isTupleValue(b32), "isTupleValue");
report(isTupleType(b32.type), "isTupleType");
report(isClass(b32), "isClass");
report(isClassValue(b32), "isClassValue");
report(isClassType(b32.type), "isClassType");
report(isRecord(b32), "isRecord");
report(isRecordValue(b32), "isRecordValue");
report(isRecordType(b32.type), "isRecordType");
report(isUnion(b32), "isUnion");
report(isUnionValue(b32), "isUnionValue");
report(isUnionType(b32.type), "isUnionType");
report(isRange(b32), "isRange");
report(isRangeValue(b32), "isRangeValue");
report(isRangeType(b32.type), "isRangeType");
report(isDmap(b32), "isDmap");
report(isDmapValue(b32), "isDmapValue");
report(isDmapType(b32.type), "isDmapType");
report(isDomain(b32), "isDomain");
report(isDomainValue(b32), "isDomainValue");
report(isDomainType(b32.type), "isDomainType");
report(isArray(b32), "isArray");
report(isArrayValue(b32), "isArrayValue");
report(isArrayType(b32.type), "isArrayType");
report(isSync(b32), "isSync");
report(isSyncValue(b32), "isSyncValue");
report(isSyncType(b32.type), "isSyncType");
report(isSingle(b32), "isSingle");
report(isSingleValue(b32), "isSingleValue");
report(isSingleType(b32.type), "isSingleType");
report(isAtomic(b32), "isAtomic");
report(isAtomicValue(b32), "isAtomicValue");
report(isAtomicType(b32.type), "isAtomicType");
writeln("  .");

write("bool(64) (b64)");
report(isBool(b64), "isBool");
report(isBoolValue(b64), "isBoolValue");
report(isBoolType(b64.type), "isBoolType");
report(isInt(b64), "isInt");
report(isIntValue(b64), "isIntValue");
report(isIntType(b64.type), "isIntType");
report(isUint(b64), "isUint");
report(isUintValue(b64), "isUintValue");
report(isUintType(b64.type), "isUintType");
report(isReal(b64), "isReal");
report(isRealValue(b64), "isRealValue");
report(isRealType(b64.type), "isRealType");
report(isImag(b64), "isImag");
report(isImagValue(b64), "isImagValue");
report(isImagType(b64.type), "isImagType");
report(isComplex(b64), "isComplex");
report(isComplexValue(b64), "isComplexValue");
report(isComplexType(b64.type), "isComplexType");
report(isString(b64), "isString");
report(isStringValue(b64), "isStringValue");
report(isStringType(b64.type), "isStringType");
report(isEnum(b64), "isEnum");
report(isEnumValue(b64), "isEnumValue");
report(isEnumType(b64.type), "isEnumType");
report(isTuple(b64), "isTuple");
report(isTupleValue(b64), "isTupleValue");
report(isTupleType(b64.type), "isTupleType");
report(isClass(b64), "isClass");
report(isClassValue(b64), "isClassValue");
report(isClassType(b64.type), "isClassType");
report(isRecord(b64), "isRecord");
report(isRecordValue(b64), "isRecordValue");
report(isRecordType(b64.type), "isRecordType");
report(isUnion(b64), "isUnion");
report(isUnionValue(b64), "isUnionValue");
report(isUnionType(b64.type), "isUnionType");
report(isRange(b64), "isRange");
report(isRangeValue(b64), "isRangeValue");
report(isRangeType(b64.type), "isRangeType");
report(isDmap(b64), "isDmap");
report(isDmapValue(b64), "isDmapValue");
report(isDmapType(b64.type), "isDmapType");
report(isDomain(b64), "isDomain");
report(isDomainValue(b64), "isDomainValue");
report(isDomainType(b64.type), "isDomainType");
report(isArray(b64), "isArray");
report(isArrayValue(b64), "isArrayValue");
report(isArrayType(b64.type), "isArrayType");
report(isSync(b64), "isSync");
report(isSyncValue(b64), "isSyncValue");
report(isSyncType(b64.type), "isSyncType");
report(isSingle(b64), "isSingle");
report(isSingleValue(b64), "isSingleValue");
report(isSingleType(b64.type), "isSingleType");
report(isAtomic(b64), "isAtomic");
report(isAtomicValue(b64), "isAtomicValue");
report(isAtomicType(b64.type), "isAtomicType");
writeln("  .");

write("int(8) (i8)");
report(isBool(i8), "isBool");
report(isBoolValue(i8), "isBoolValue");
report(isBoolType(i8.type), "isBoolType");
report(isInt(i8), "isInt");
report(isIntValue(i8), "isIntValue");
report(isIntType(i8.type), "isIntType");
report(isUint(i8), "isUint");
report(isUintValue(i8), "isUintValue");
report(isUintType(i8.type), "isUintType");
report(isReal(i8), "isReal");
report(isRealValue(i8), "isRealValue");
report(isRealType(i8.type), "isRealType");
report(isImag(i8), "isImag");
report(isImagValue(i8), "isImagValue");
report(isImagType(i8.type), "isImagType");
report(isComplex(i8), "isComplex");
report(isComplexValue(i8), "isComplexValue");
report(isComplexType(i8.type), "isComplexType");
report(isString(i8), "isString");
report(isStringValue(i8), "isStringValue");
report(isStringType(i8.type), "isStringType");
report(isEnum(i8), "isEnum");
report(isEnumValue(i8), "isEnumValue");
report(isEnumType(i8.type), "isEnumType");
report(isTuple(i8), "isTuple");
report(isTupleValue(i8), "isTupleValue");
report(isTupleType(i8.type), "isTupleType");
report(isClass(i8), "isClass");
report(isClassValue(i8), "isClassValue");
report(isClassType(i8.type), "isClassType");
report(isRecord(i8), "isRecord");
report(isRecordValue(i8), "isRecordValue");
report(isRecordType(i8.type), "isRecordType");
report(isUnion(i8), "isUnion");
report(isUnionValue(i8), "isUnionValue");
report(isUnionType(i8.type), "isUnionType");
report(isRange(i8), "isRange");
report(isRangeValue(i8), "isRangeValue");
report(isRangeType(i8.type), "isRangeType");
report(isDmap(i8), "isDmap");
report(isDmapValue(i8), "isDmapValue");
report(isDmapType(i8.type), "isDmapType");
report(isDomain(i8), "isDomain");
report(isDomainValue(i8), "isDomainValue");
report(isDomainType(i8.type), "isDomainType");
report(isArray(i8), "isArray");
report(isArrayValue(i8), "isArrayValue");
report(isArrayType(i8.type), "isArrayType");
report(isSync(i8), "isSync");
report(isSyncValue(i8), "isSyncValue");
report(isSyncType(i8.type), "isSyncType");
report(isSingle(i8), "isSingle");
report(isSingleValue(i8), "isSingleValue");
report(isSingleType(i8.type), "isSingleType");
report(isAtomic(i8), "isAtomic");
report(isAtomicValue(i8), "isAtomicValue");
report(isAtomicType(i8.type), "isAtomicType");
writeln("  .");

write("int(16) (i16)");
report(isBool(i16), "isBool");
report(isBoolValue(i16), "isBoolValue");
report(isBoolType(i16.type), "isBoolType");
report(isInt(i16), "isInt");
report(isIntValue(i16), "isIntValue");
report(isIntType(i16.type), "isIntType");
report(isUint(i16), "isUint");
report(isUintValue(i16), "isUintValue");
report(isUintType(i16.type), "isUintType");
report(isReal(i16), "isReal");
report(isRealValue(i16), "isRealValue");
report(isRealType(i16.type), "isRealType");
report(isImag(i16), "isImag");
report(isImagValue(i16), "isImagValue");
report(isImagType(i16.type), "isImagType");
report(isComplex(i16), "isComplex");
report(isComplexValue(i16), "isComplexValue");
report(isComplexType(i16.type), "isComplexType");
report(isString(i16), "isString");
report(isStringValue(i16), "isStringValue");
report(isStringType(i16.type), "isStringType");
report(isEnum(i16), "isEnum");
report(isEnumValue(i16), "isEnumValue");
report(isEnumType(i16.type), "isEnumType");
report(isTuple(i16), "isTuple");
report(isTupleValue(i16), "isTupleValue");
report(isTupleType(i16.type), "isTupleType");
report(isClass(i16), "isClass");
report(isClassValue(i16), "isClassValue");
report(isClassType(i16.type), "isClassType");
report(isRecord(i16), "isRecord");
report(isRecordValue(i16), "isRecordValue");
report(isRecordType(i16.type), "isRecordType");
report(isUnion(i16), "isUnion");
report(isUnionValue(i16), "isUnionValue");
report(isUnionType(i16.type), "isUnionType");
report(isRange(i16), "isRange");
report(isRangeValue(i16), "isRangeValue");
report(isRangeType(i16.type), "isRangeType");
report(isDmap(i16), "isDmap");
report(isDmapValue(i16), "isDmapValue");
report(isDmapType(i16.type), "isDmapType");
report(isDomain(i16), "isDomain");
report(isDomainValue(i16), "isDomainValue");
report(isDomainType(i16.type), "isDomainType");
report(isArray(i16), "isArray");
report(isArrayValue(i16), "isArrayValue");
report(isArrayType(i16.type), "isArrayType");
report(isSync(i16), "isSync");
report(isSyncValue(i16), "isSyncValue");
report(isSyncType(i16.type), "isSyncType");
report(isSingle(i16), "isSingle");
report(isSingleValue(i16), "isSingleValue");
report(isSingleType(i16.type), "isSingleType");
report(isAtomic(i16), "isAtomic");
report(isAtomicValue(i16), "isAtomicValue");
report(isAtomicType(i16.type), "isAtomicType");
writeln("  .");

write("int(32) (i32)");
report(isBool(i32), "isBool");
report(isBoolValue(i32), "isBoolValue");
report(isBoolType(i32.type), "isBoolType");
report(isInt(i32), "isInt");
report(isIntValue(i32), "isIntValue");
report(isIntType(i32.type), "isIntType");
report(isUint(i32), "isUint");
report(isUintValue(i32), "isUintValue");
report(isUintType(i32.type), "isUintType");
report(isReal(i32), "isReal");
report(isRealValue(i32), "isRealValue");
report(isRealType(i32.type), "isRealType");
report(isImag(i32), "isImag");
report(isImagValue(i32), "isImagValue");
report(isImagType(i32.type), "isImagType");
report(isComplex(i32), "isComplex");
report(isComplexValue(i32), "isComplexValue");
report(isComplexType(i32.type), "isComplexType");
report(isString(i32), "isString");
report(isStringValue(i32), "isStringValue");
report(isStringType(i32.type), "isStringType");
report(isEnum(i32), "isEnum");
report(isEnumValue(i32), "isEnumValue");
report(isEnumType(i32.type), "isEnumType");
report(isTuple(i32), "isTuple");
report(isTupleValue(i32), "isTupleValue");
report(isTupleType(i32.type), "isTupleType");
report(isClass(i32), "isClass");
report(isClassValue(i32), "isClassValue");
report(isClassType(i32.type), "isClassType");
report(isRecord(i32), "isRecord");
report(isRecordValue(i32), "isRecordValue");
report(isRecordType(i32.type), "isRecordType");
report(isUnion(i32), "isUnion");
report(isUnionValue(i32), "isUnionValue");
report(isUnionType(i32.type), "isUnionType");
report(isRange(i32), "isRange");
report(isRangeValue(i32), "isRangeValue");
report(isRangeType(i32.type), "isRangeType");
report(isDmap(i32), "isDmap");
report(isDmapValue(i32), "isDmapValue");
report(isDmapType(i32.type), "isDmapType");
report(isDomain(i32), "isDomain");
report(isDomainValue(i32), "isDomainValue");
report(isDomainType(i32.type), "isDomainType");
report(isArray(i32), "isArray");
report(isArrayValue(i32), "isArrayValue");
report(isArrayType(i32.type), "isArrayType");
report(isSync(i32), "isSync");
report(isSyncValue(i32), "isSyncValue");
report(isSyncType(i32.type), "isSyncType");
report(isSingle(i32), "isSingle");
report(isSingleValue(i32), "isSingleValue");
report(isSingleType(i32.type), "isSingleType");
report(isAtomic(i32), "isAtomic");
report(isAtomicValue(i32), "isAtomicValue");
report(isAtomicType(i32.type), "isAtomicType");
writeln("  .");

write("int(64) (i64)");
report(isBool(i64), "isBool");
report(isBoolValue(i64), "isBoolValue");
report(isBoolType(i64.type), "isBoolType");
report(isInt(i64), "isInt");
report(isIntValue(i64), "isIntValue");
report(isIntType(i64.type), "isIntType");
report(isUint(i64), "isUint");
report(isUintValue(i64), "isUintValue");
report(isUintType(i64.type), "isUintType");
report(isReal(i64), "isReal");
report(isRealValue(i64), "isRealValue");
report(isRealType(i64.type), "isRealType");
report(isImag(i64), "isImag");
report(isImagValue(i64), "isImagValue");
report(isImagType(i64.type), "isImagType");
report(isComplex(i64), "isComplex");
report(isComplexValue(i64), "isComplexValue");
report(isComplexType(i64.type), "isComplexType");
report(isString(i64), "isString");
report(isStringValue(i64), "isStringValue");
report(isStringType(i64.type), "isStringType");
report(isEnum(i64), "isEnum");
report(isEnumValue(i64), "isEnumValue");
report(isEnumType(i64.type), "isEnumType");
report(isTuple(i64), "isTuple");
report(isTupleValue(i64), "isTupleValue");
report(isTupleType(i64.type), "isTupleType");
report(isClass(i64), "isClass");
report(isClassValue(i64), "isClassValue");
report(isClassType(i64.type), "isClassType");
report(isRecord(i64), "isRecord");
report(isRecordValue(i64), "isRecordValue");
report(isRecordType(i64.type), "isRecordType");
report(isUnion(i64), "isUnion");
report(isUnionValue(i64), "isUnionValue");
report(isUnionType(i64.type), "isUnionType");
report(isRange(i64), "isRange");
report(isRangeValue(i64), "isRangeValue");
report(isRangeType(i64.type), "isRangeType");
report(isDmap(i64), "isDmap");
report(isDmapValue(i64), "isDmapValue");
report(isDmapType(i64.type), "isDmapType");
report(isDomain(i64), "isDomain");
report(isDomainValue(i64), "isDomainValue");
report(isDomainType(i64.type), "isDomainType");
report(isArray(i64), "isArray");
report(isArrayValue(i64), "isArrayValue");
report(isArrayType(i64.type), "isArrayType");
report(isSync(i64), "isSync");
report(isSyncValue(i64), "isSyncValue");
report(isSyncType(i64.type), "isSyncType");
report(isSingle(i64), "isSingle");
report(isSingleValue(i64), "isSingleValue");
report(isSingleType(i64.type), "isSingleType");
report(isAtomic(i64), "isAtomic");
report(isAtomicValue(i64), "isAtomicValue");
report(isAtomicType(i64.type), "isAtomicType");
writeln("  .");

write("uint(8) (u8)");
report(isBool(u8), "isBool");
report(isBoolValue(u8), "isBoolValue");
report(isBoolType(u8.type), "isBoolType");
report(isInt(u8), "isInt");
report(isIntValue(u8), "isIntValue");
report(isIntType(u8.type), "isIntType");
report(isUint(u8), "isUint");
report(isUintValue(u8), "isUintValue");
report(isUintType(u8.type), "isUintType");
report(isReal(u8), "isReal");
report(isRealValue(u8), "isRealValue");
report(isRealType(u8.type), "isRealType");
report(isImag(u8), "isImag");
report(isImagValue(u8), "isImagValue");
report(isImagType(u8.type), "isImagType");
report(isComplex(u8), "isComplex");
report(isComplexValue(u8), "isComplexValue");
report(isComplexType(u8.type), "isComplexType");
report(isString(u8), "isString");
report(isStringValue(u8), "isStringValue");
report(isStringType(u8.type), "isStringType");
report(isEnum(u8), "isEnum");
report(isEnumValue(u8), "isEnumValue");
report(isEnumType(u8.type), "isEnumType");
report(isTuple(u8), "isTuple");
report(isTupleValue(u8), "isTupleValue");
report(isTupleType(u8.type), "isTupleType");
report(isClass(u8), "isClass");
report(isClassValue(u8), "isClassValue");
report(isClassType(u8.type), "isClassType");
report(isRecord(u8), "isRecord");
report(isRecordValue(u8), "isRecordValue");
report(isRecordType(u8.type), "isRecordType");
report(isUnion(u8), "isUnion");
report(isUnionValue(u8), "isUnionValue");
report(isUnionType(u8.type), "isUnionType");
report(isRange(u8), "isRange");
report(isRangeValue(u8), "isRangeValue");
report(isRangeType(u8.type), "isRangeType");
report(isDmap(u8), "isDmap");
report(isDmapValue(u8), "isDmapValue");
report(isDmapType(u8.type), "isDmapType");
report(isDomain(u8), "isDomain");
report(isDomainValue(u8), "isDomainValue");
report(isDomainType(u8.type), "isDomainType");
report(isArray(u8), "isArray");
report(isArrayValue(u8), "isArrayValue");
report(isArrayType(u8.type), "isArrayType");
report(isSync(u8), "isSync");
report(isSyncValue(u8), "isSyncValue");
report(isSyncType(u8.type), "isSyncType");
report(isSingle(u8), "isSingle");
report(isSingleValue(u8), "isSingleValue");
report(isSingleType(u8.type), "isSingleType");
report(isAtomic(u8), "isAtomic");
report(isAtomicValue(u8), "isAtomicValue");
report(isAtomicType(u8.type), "isAtomicType");
writeln("  .");

write("uint(16) (u16)");
report(isBool(u16), "isBool");
report(isBoolValue(u16), "isBoolValue");
report(isBoolType(u16.type), "isBoolType");
report(isInt(u16), "isInt");
report(isIntValue(u16), "isIntValue");
report(isIntType(u16.type), "isIntType");
report(isUint(u16), "isUint");
report(isUintValue(u16), "isUintValue");
report(isUintType(u16.type), "isUintType");
report(isReal(u16), "isReal");
report(isRealValue(u16), "isRealValue");
report(isRealType(u16.type), "isRealType");
report(isImag(u16), "isImag");
report(isImagValue(u16), "isImagValue");
report(isImagType(u16.type), "isImagType");
report(isComplex(u16), "isComplex");
report(isComplexValue(u16), "isComplexValue");
report(isComplexType(u16.type), "isComplexType");
report(isString(u16), "isString");
report(isStringValue(u16), "isStringValue");
report(isStringType(u16.type), "isStringType");
report(isEnum(u16), "isEnum");
report(isEnumValue(u16), "isEnumValue");
report(isEnumType(u16.type), "isEnumType");
report(isTuple(u16), "isTuple");
report(isTupleValue(u16), "isTupleValue");
report(isTupleType(u16.type), "isTupleType");
report(isClass(u16), "isClass");
report(isClassValue(u16), "isClassValue");
report(isClassType(u16.type), "isClassType");
report(isRecord(u16), "isRecord");
report(isRecordValue(u16), "isRecordValue");
report(isRecordType(u16.type), "isRecordType");
report(isUnion(u16), "isUnion");
report(isUnionValue(u16), "isUnionValue");
report(isUnionType(u16.type), "isUnionType");
report(isRange(u16), "isRange");
report(isRangeValue(u16), "isRangeValue");
report(isRangeType(u16.type), "isRangeType");
report(isDmap(u16), "isDmap");
report(isDmapValue(u16), "isDmapValue");
report(isDmapType(u16.type), "isDmapType");
report(isDomain(u16), "isDomain");
report(isDomainValue(u16), "isDomainValue");
report(isDomainType(u16.type), "isDomainType");
report(isArray(u16), "isArray");
report(isArrayValue(u16), "isArrayValue");
report(isArrayType(u16.type), "isArrayType");
report(isSync(u16), "isSync");
report(isSyncValue(u16), "isSyncValue");
report(isSyncType(u16.type), "isSyncType");
report(isSingle(u16), "isSingle");
report(isSingleValue(u16), "isSingleValue");
report(isSingleType(u16.type), "isSingleType");
report(isAtomic(u16), "isAtomic");
report(isAtomicValue(u16), "isAtomicValue");
report(isAtomicType(u16.type), "isAtomicType");
writeln("  .");

write("uint(32) (u32)");
report(isBool(u32), "isBool");
report(isBoolValue(u32), "isBoolValue");
report(isBoolType(u32.type), "isBoolType");
report(isInt(u32), "isInt");
report(isIntValue(u32), "isIntValue");
report(isIntType(u32.type), "isIntType");
report(isUint(u32), "isUint");
report(isUintValue(u32), "isUintValue");
report(isUintType(u32.type), "isUintType");
report(isReal(u32), "isReal");
report(isRealValue(u32), "isRealValue");
report(isRealType(u32.type), "isRealType");
report(isImag(u32), "isImag");
report(isImagValue(u32), "isImagValue");
report(isImagType(u32.type), "isImagType");
report(isComplex(u32), "isComplex");
report(isComplexValue(u32), "isComplexValue");
report(isComplexType(u32.type), "isComplexType");
report(isString(u32), "isString");
report(isStringValue(u32), "isStringValue");
report(isStringType(u32.type), "isStringType");
report(isEnum(u32), "isEnum");
report(isEnumValue(u32), "isEnumValue");
report(isEnumType(u32.type), "isEnumType");
report(isTuple(u32), "isTuple");
report(isTupleValue(u32), "isTupleValue");
report(isTupleType(u32.type), "isTupleType");
report(isClass(u32), "isClass");
report(isClassValue(u32), "isClassValue");
report(isClassType(u32.type), "isClassType");
report(isRecord(u32), "isRecord");
report(isRecordValue(u32), "isRecordValue");
report(isRecordType(u32.type), "isRecordType");
report(isUnion(u32), "isUnion");
report(isUnionValue(u32), "isUnionValue");
report(isUnionType(u32.type), "isUnionType");
report(isRange(u32), "isRange");
report(isRangeValue(u32), "isRangeValue");
report(isRangeType(u32.type), "isRangeType");
report(isDmap(u32), "isDmap");
report(isDmapValue(u32), "isDmapValue");
report(isDmapType(u32.type), "isDmapType");
report(isDomain(u32), "isDomain");
report(isDomainValue(u32), "isDomainValue");
report(isDomainType(u32.type), "isDomainType");
report(isArray(u32), "isArray");
report(isArrayValue(u32), "isArrayValue");
report(isArrayType(u32.type), "isArrayType");
report(isSync(u32), "isSync");
report(isSyncValue(u32), "isSyncValue");
report(isSyncType(u32.type), "isSyncType");
report(isSingle(u32), "isSingle");
report(isSingleValue(u32), "isSingleValue");
report(isSingleType(u32.type), "isSingleType");
report(isAtomic(u32), "isAtomic");
report(isAtomicValue(u32), "isAtomicValue");
report(isAtomicType(u32.type), "isAtomicType");
writeln("  .");

write("uint(64) (u64)");
report(isBool(u64), "isBool");
report(isBoolValue(u64), "isBoolValue");
report(isBoolType(u64.type), "isBoolType");
report(isInt(u64), "isInt");
report(isIntValue(u64), "isIntValue");
report(isIntType(u64.type), "isIntType");
report(isUint(u64), "isUint");
report(isUintValue(u64), "isUintValue");
report(isUintType(u64.type), "isUintType");
report(isReal(u64), "isReal");
report(isRealValue(u64), "isRealValue");
report(isRealType(u64.type), "isRealType");
report(isImag(u64), "isImag");
report(isImagValue(u64), "isImagValue");
report(isImagType(u64.type), "isImagType");
report(isComplex(u64), "isComplex");
report(isComplexValue(u64), "isComplexValue");
report(isComplexType(u64.type), "isComplexType");
report(isString(u64), "isString");
report(isStringValue(u64), "isStringValue");
report(isStringType(u64.type), "isStringType");
report(isEnum(u64), "isEnum");
report(isEnumValue(u64), "isEnumValue");
report(isEnumType(u64.type), "isEnumType");
report(isTuple(u64), "isTuple");
report(isTupleValue(u64), "isTupleValue");
report(isTupleType(u64.type), "isTupleType");
report(isClass(u64), "isClass");
report(isClassValue(u64), "isClassValue");
report(isClassType(u64.type), "isClassType");
report(isRecord(u64), "isRecord");
report(isRecordValue(u64), "isRecordValue");
report(isRecordType(u64.type), "isRecordType");
report(isUnion(u64), "isUnion");
report(isUnionValue(u64), "isUnionValue");
report(isUnionType(u64.type), "isUnionType");
report(isRange(u64), "isRange");
report(isRangeValue(u64), "isRangeValue");
report(isRangeType(u64.type), "isRangeType");
report(isDmap(u64), "isDmap");
report(isDmapValue(u64), "isDmapValue");
report(isDmapType(u64.type), "isDmapType");
report(isDomain(u64), "isDomain");
report(isDomainValue(u64), "isDomainValue");
report(isDomainType(u64.type), "isDomainType");
report(isArray(u64), "isArray");
report(isArrayValue(u64), "isArrayValue");
report(isArrayType(u64.type), "isArrayType");
report(isSync(u64), "isSync");
report(isSyncValue(u64), "isSyncValue");
report(isSyncType(u64.type), "isSyncType");
report(isSingle(u64), "isSingle");
report(isSingleValue(u64), "isSingleValue");
report(isSingleType(u64.type), "isSingleType");
report(isAtomic(u64), "isAtomic");
report(isAtomicValue(u64), "isAtomicValue");
report(isAtomicType(u64.type), "isAtomicType");
writeln("  .");

write("real(32) (r32)");
report(isBool(r32), "isBool");
report(isBoolValue(r32), "isBoolValue");
report(isBoolType(r32.type), "isBoolType");
report(isInt(r32), "isInt");
report(isIntValue(r32), "isIntValue");
report(isIntType(r32.type), "isIntType");
report(isUint(r32), "isUint");
report(isUintValue(r32), "isUintValue");
report(isUintType(r32.type), "isUintType");
report(isReal(r32), "isReal");
report(isRealValue(r32), "isRealValue");
report(isRealType(r32.type), "isRealType");
report(isImag(r32), "isImag");
report(isImagValue(r32), "isImagValue");
report(isImagType(r32.type), "isImagType");
report(isComplex(r32), "isComplex");
report(isComplexValue(r32), "isComplexValue");
report(isComplexType(r32.type), "isComplexType");
report(isString(r32), "isString");
report(isStringValue(r32), "isStringValue");
report(isStringType(r32.type), "isStringType");
report(isEnum(r32), "isEnum");
report(isEnumValue(r32), "isEnumValue");
report(isEnumType(r32.type), "isEnumType");
report(isTuple(r32), "isTuple");
report(isTupleValue(r32), "isTupleValue");
report(isTupleType(r32.type), "isTupleType");
report(isClass(r32), "isClass");
report(isClassValue(r32), "isClassValue");
report(isClassType(r32.type), "isClassType");
report(isRecord(r32), "isRecord");
report(isRecordValue(r32), "isRecordValue");
report(isRecordType(r32.type), "isRecordType");
report(isUnion(r32), "isUnion");
report(isUnionValue(r32), "isUnionValue");
report(isUnionType(r32.type), "isUnionType");
report(isRange(r32), "isRange");
report(isRangeValue(r32), "isRangeValue");
report(isRangeType(r32.type), "isRangeType");
report(isDmap(r32), "isDmap");
report(isDmapValue(r32), "isDmapValue");
report(isDmapType(r32.type), "isDmapType");
report(isDomain(r32), "isDomain");
report(isDomainValue(r32), "isDomainValue");
report(isDomainType(r32.type), "isDomainType");
report(isArray(r32), "isArray");
report(isArrayValue(r32), "isArrayValue");
report(isArrayType(r32.type), "isArrayType");
report(isSync(r32), "isSync");
report(isSyncValue(r32), "isSyncValue");
report(isSyncType(r32.type), "isSyncType");
report(isSingle(r32), "isSingle");
report(isSingleValue(r32), "isSingleValue");
report(isSingleType(r32.type), "isSingleType");
report(isAtomic(r32), "isAtomic");
report(isAtomicValue(r32), "isAtomicValue");
report(isAtomicType(r32.type), "isAtomicType");
writeln("  .");

write("real(64) (r64)");
report(isBool(r64), "isBool");
report(isBoolValue(r64), "isBoolValue");
report(isBoolType(r64.type), "isBoolType");
report(isInt(r64), "isInt");
report(isIntValue(r64), "isIntValue");
report(isIntType(r64.type), "isIntType");
report(isUint(r64), "isUint");
report(isUintValue(r64), "isUintValue");
report(isUintType(r64.type), "isUintType");
report(isReal(r64), "isReal");
report(isRealValue(r64), "isRealValue");
report(isRealType(r64.type), "isRealType");
report(isImag(r64), "isImag");
report(isImagValue(r64), "isImagValue");
report(isImagType(r64.type), "isImagType");
report(isComplex(r64), "isComplex");
report(isComplexValue(r64), "isComplexValue");
report(isComplexType(r64.type), "isComplexType");
report(isString(r64), "isString");
report(isStringValue(r64), "isStringValue");
report(isStringType(r64.type), "isStringType");
report(isEnum(r64), "isEnum");
report(isEnumValue(r64), "isEnumValue");
report(isEnumType(r64.type), "isEnumType");
report(isTuple(r64), "isTuple");
report(isTupleValue(r64), "isTupleValue");
report(isTupleType(r64.type), "isTupleType");
report(isClass(r64), "isClass");
report(isClassValue(r64), "isClassValue");
report(isClassType(r64.type), "isClassType");
report(isRecord(r64), "isRecord");
report(isRecordValue(r64), "isRecordValue");
report(isRecordType(r64.type), "isRecordType");
report(isUnion(r64), "isUnion");
report(isUnionValue(r64), "isUnionValue");
report(isUnionType(r64.type), "isUnionType");
report(isRange(r64), "isRange");
report(isRangeValue(r64), "isRangeValue");
report(isRangeType(r64.type), "isRangeType");
report(isDmap(r64), "isDmap");
report(isDmapValue(r64), "isDmapValue");
report(isDmapType(r64.type), "isDmapType");
report(isDomain(r64), "isDomain");
report(isDomainValue(r64), "isDomainValue");
report(isDomainType(r64.type), "isDomainType");
report(isArray(r64), "isArray");
report(isArrayValue(r64), "isArrayValue");
report(isArrayType(r64.type), "isArrayType");
report(isSync(r64), "isSync");
report(isSyncValue(r64), "isSyncValue");
report(isSyncType(r64.type), "isSyncType");
report(isSingle(r64), "isSingle");
report(isSingleValue(r64), "isSingleValue");
report(isSingleType(r64.type), "isSingleType");
report(isAtomic(r64), "isAtomic");
report(isAtomicValue(r64), "isAtomicValue");
report(isAtomicType(r64.type), "isAtomicType");
writeln("  .");

write("imag(32) (m32)");
report(isBool(m32), "isBool");
report(isBoolValue(m32), "isBoolValue");
report(isBoolType(m32.type), "isBoolType");
report(isInt(m32), "isInt");
report(isIntValue(m32), "isIntValue");
report(isIntType(m32.type), "isIntType");
report(isUint(m32), "isUint");
report(isUintValue(m32), "isUintValue");
report(isUintType(m32.type), "isUintType");
report(isReal(m32), "isReal");
report(isRealValue(m32), "isRealValue");
report(isRealType(m32.type), "isRealType");
report(isImag(m32), "isImag");
report(isImagValue(m32), "isImagValue");
report(isImagType(m32.type), "isImagType");
report(isComplex(m32), "isComplex");
report(isComplexValue(m32), "isComplexValue");
report(isComplexType(m32.type), "isComplexType");
report(isString(m32), "isString");
report(isStringValue(m32), "isStringValue");
report(isStringType(m32.type), "isStringType");
report(isEnum(m32), "isEnum");
report(isEnumValue(m32), "isEnumValue");
report(isEnumType(m32.type), "isEnumType");
report(isTuple(m32), "isTuple");
report(isTupleValue(m32), "isTupleValue");
report(isTupleType(m32.type), "isTupleType");
report(isClass(m32), "isClass");
report(isClassValue(m32), "isClassValue");
report(isClassType(m32.type), "isClassType");
report(isRecord(m32), "isRecord");
report(isRecordValue(m32), "isRecordValue");
report(isRecordType(m32.type), "isRecordType");
report(isUnion(m32), "isUnion");
report(isUnionValue(m32), "isUnionValue");
report(isUnionType(m32.type), "isUnionType");
report(isRange(m32), "isRange");
report(isRangeValue(m32), "isRangeValue");
report(isRangeType(m32.type), "isRangeType");
report(isDmap(m32), "isDmap");
report(isDmapValue(m32), "isDmapValue");
report(isDmapType(m32.type), "isDmapType");
report(isDomain(m32), "isDomain");
report(isDomainValue(m32), "isDomainValue");
report(isDomainType(m32.type), "isDomainType");
report(isArray(m32), "isArray");
report(isArrayValue(m32), "isArrayValue");
report(isArrayType(m32.type), "isArrayType");
report(isSync(m32), "isSync");
report(isSyncValue(m32), "isSyncValue");
report(isSyncType(m32.type), "isSyncType");
report(isSingle(m32), "isSingle");
report(isSingleValue(m32), "isSingleValue");
report(isSingleType(m32.type), "isSingleType");
report(isAtomic(m32), "isAtomic");
report(isAtomicValue(m32), "isAtomicValue");
report(isAtomicType(m32.type), "isAtomicType");
writeln("  .");

write("imag(64) (m64)");
report(isBool(m64), "isBool");
report(isBoolValue(m64), "isBoolValue");
report(isBoolType(m64.type), "isBoolType");
report(isInt(m64), "isInt");
report(isIntValue(m64), "isIntValue");
report(isIntType(m64.type), "isIntType");
report(isUint(m64), "isUint");
report(isUintValue(m64), "isUintValue");
report(isUintType(m64.type), "isUintType");
report(isReal(m64), "isReal");
report(isRealValue(m64), "isRealValue");
report(isRealType(m64.type), "isRealType");
report(isImag(m64), "isImag");
report(isImagValue(m64), "isImagValue");
report(isImagType(m64.type), "isImagType");
report(isComplex(m64), "isComplex");
report(isComplexValue(m64), "isComplexValue");
report(isComplexType(m64.type), "isComplexType");
report(isString(m64), "isString");
report(isStringValue(m64), "isStringValue");
report(isStringType(m64.type), "isStringType");
report(isEnum(m64), "isEnum");
report(isEnumValue(m64), "isEnumValue");
report(isEnumType(m64.type), "isEnumType");
report(isTuple(m64), "isTuple");
report(isTupleValue(m64), "isTupleValue");
report(isTupleType(m64.type), "isTupleType");
report(isClass(m64), "isClass");
report(isClassValue(m64), "isClassValue");
report(isClassType(m64.type), "isClassType");
report(isRecord(m64), "isRecord");
report(isRecordValue(m64), "isRecordValue");
report(isRecordType(m64.type), "isRecordType");
report(isUnion(m64), "isUnion");
report(isUnionValue(m64), "isUnionValue");
report(isUnionType(m64.type), "isUnionType");
report(isRange(m64), "isRange");
report(isRangeValue(m64), "isRangeValue");
report(isRangeType(m64.type), "isRangeType");
report(isDmap(m64), "isDmap");
report(isDmapValue(m64), "isDmapValue");
report(isDmapType(m64.type), "isDmapType");
report(isDomain(m64), "isDomain");
report(isDomainValue(m64), "isDomainValue");
report(isDomainType(m64.type), "isDomainType");
report(isArray(m64), "isArray");
report(isArrayValue(m64), "isArrayValue");
report(isArrayType(m64.type), "isArrayType");
report(isSync(m64), "isSync");
report(isSyncValue(m64), "isSyncValue");
report(isSyncType(m64.type), "isSyncType");
report(isSingle(m64), "isSingle");
report(isSingleValue(m64), "isSingleValue");
report(isSingleType(m64.type), "isSingleType");
report(isAtomic(m64), "isAtomic");
report(isAtomicValue(m64), "isAtomicValue");
report(isAtomicType(m64.type), "isAtomicType");
writeln("  .");

write("complex(64) (z64)");
report(isBool(z64), "isBool");
report(isBoolValue(z64), "isBoolValue");
report(isBoolType(z64.type), "isBoolType");
report(isInt(z64), "isInt");
report(isIntValue(z64), "isIntValue");
report(isIntType(z64.type), "isIntType");
report(isUint(z64), "isUint");
report(isUintValue(z64), "isUintValue");
report(isUintType(z64.type), "isUintType");
report(isReal(z64), "isReal");
report(isRealValue(z64), "isRealValue");
report(isRealType(z64.type), "isRealType");
report(isImag(z64), "isImag");
report(isImagValue(z64), "isImagValue");
report(isImagType(z64.type), "isImagType");
report(isComplex(z64), "isComplex");
report(isComplexValue(z64), "isComplexValue");
report(isComplexType(z64.type), "isComplexType");
report(isString(z64), "isString");
report(isStringValue(z64), "isStringValue");
report(isStringType(z64.type), "isStringType");
report(isEnum(z64), "isEnum");
report(isEnumValue(z64), "isEnumValue");
report(isEnumType(z64.type), "isEnumType");
report(isTuple(z64), "isTuple");
report(isTupleValue(z64), "isTupleValue");
report(isTupleType(z64.type), "isTupleType");
report(isClass(z64), "isClass");
report(isClassValue(z64), "isClassValue");
report(isClassType(z64.type), "isClassType");
report(isRecord(z64), "isRecord");
report(isRecordValue(z64), "isRecordValue");
report(isRecordType(z64.type), "isRecordType");
report(isUnion(z64), "isUnion");
report(isUnionValue(z64), "isUnionValue");
report(isUnionType(z64.type), "isUnionType");
report(isRange(z64), "isRange");
report(isRangeValue(z64), "isRangeValue");
report(isRangeType(z64.type), "isRangeType");
report(isDmap(z64), "isDmap");
report(isDmapValue(z64), "isDmapValue");
report(isDmapType(z64.type), "isDmapType");
report(isDomain(z64), "isDomain");
report(isDomainValue(z64), "isDomainValue");
report(isDomainType(z64.type), "isDomainType");
report(isArray(z64), "isArray");
report(isArrayValue(z64), "isArrayValue");
report(isArrayType(z64.type), "isArrayType");
report(isSync(z64), "isSync");
report(isSyncValue(z64), "isSyncValue");
report(isSyncType(z64.type), "isSyncType");
report(isSingle(z64), "isSingle");
report(isSingleValue(z64), "isSingleValue");
report(isSingleType(z64.type), "isSingleType");
report(isAtomic(z64), "isAtomic");
report(isAtomicValue(z64), "isAtomicValue");
report(isAtomicType(z64.type), "isAtomicType");
writeln("  .");

write("complex(128) (z128)");
report(isBool(z128), "isBool");
report(isBoolValue(z128), "isBoolValue");
report(isBoolType(z128.type), "isBoolType");
report(isInt(z128), "isInt");
report(isIntValue(z128), "isIntValue");
report(isIntType(z128.type), "isIntType");
report(isUint(z128), "isUint");
report(isUintValue(z128), "isUintValue");
report(isUintType(z128.type), "isUintType");
report(isReal(z128), "isReal");
report(isRealValue(z128), "isRealValue");
report(isRealType(z128.type), "isRealType");
report(isImag(z128), "isImag");
report(isImagValue(z128), "isImagValue");
report(isImagType(z128.type), "isImagType");
report(isComplex(z128), "isComplex");
report(isComplexValue(z128), "isComplexValue");
report(isComplexType(z128.type), "isComplexType");
report(isString(z128), "isString");
report(isStringValue(z128), "isStringValue");
report(isStringType(z128.type), "isStringType");
report(isEnum(z128), "isEnum");
report(isEnumValue(z128), "isEnumValue");
report(isEnumType(z128.type), "isEnumType");
report(isTuple(z128), "isTuple");
report(isTupleValue(z128), "isTupleValue");
report(isTupleType(z128.type), "isTupleType");
report(isClass(z128), "isClass");
report(isClassValue(z128), "isClassValue");
report(isClassType(z128.type), "isClassType");
report(isRecord(z128), "isRecord");
report(isRecordValue(z128), "isRecordValue");
report(isRecordType(z128.type), "isRecordType");
report(isUnion(z128), "isUnion");
report(isUnionValue(z128), "isUnionValue");
report(isUnionType(z128.type), "isUnionType");
report(isRange(z128), "isRange");
report(isRangeValue(z128), "isRangeValue");
report(isRangeType(z128.type), "isRangeType");
report(isDmap(z128), "isDmap");
report(isDmapValue(z128), "isDmapValue");
report(isDmapType(z128.type), "isDmapType");
report(isDomain(z128), "isDomain");
report(isDomainValue(z128), "isDomainValue");
report(isDomainType(z128.type), "isDomainType");
report(isArray(z128), "isArray");
report(isArrayValue(z128), "isArrayValue");
report(isArrayType(z128.type), "isArrayType");
report(isSync(z128), "isSync");
report(isSyncValue(z128), "isSyncValue");
report(isSyncType(z128.type), "isSyncType");
report(isSingle(z128), "isSingle");
report(isSingleValue(z128), "isSingleValue");
report(isSingleType(z128.type), "isSingleType");
report(isAtomic(z128), "isAtomic");
report(isAtomicValue(z128), "isAtomicValue");
report(isAtomicType(z128.type), "isAtomicType");
writeln("  .");

write("string (str)");
report(isBool(str), "isBool");
report(isBoolValue(str), "isBoolValue");
report(isBoolType(str.type), "isBoolType");
report(isInt(str), "isInt");
report(isIntValue(str), "isIntValue");
report(isIntType(str.type), "isIntType");
report(isUint(str), "isUint");
report(isUintValue(str), "isUintValue");
report(isUintType(str.type), "isUintType");
report(isReal(str), "isReal");
report(isRealValue(str), "isRealValue");
report(isRealType(str.type), "isRealType");
report(isImag(str), "isImag");
report(isImagValue(str), "isImagValue");
report(isImagType(str.type), "isImagType");
report(isComplex(str), "isComplex");
report(isComplexValue(str), "isComplexValue");
report(isComplexType(str.type), "isComplexType");
report(isString(str), "isString");
report(isStringValue(str), "isStringValue");
report(isStringType(str.type), "isStringType");
report(isEnum(str), "isEnum");
report(isEnumValue(str), "isEnumValue");
report(isEnumType(str.type), "isEnumType");
report(isTuple(str), "isTuple");
report(isTupleValue(str), "isTupleValue");
report(isTupleType(str.type), "isTupleType");
report(isClass(str), "isClass");
report(isClassValue(str), "isClassValue");
report(isClassType(str.type), "isClassType");
report(isRecord(str), "isRecord");
report(isRecordValue(str), "isRecordValue");
report(isRecordType(str.type), "isRecordType");
report(isUnion(str), "isUnion");
report(isUnionValue(str), "isUnionValue");
report(isUnionType(str.type), "isUnionType");
report(isRange(str), "isRange");
report(isRangeValue(str), "isRangeValue");
report(isRangeType(str.type), "isRangeType");
report(isDmap(str), "isDmap");
report(isDmapValue(str), "isDmapValue");
report(isDmapType(str.type), "isDmapType");
report(isDomain(str), "isDomain");
report(isDomainValue(str), "isDomainValue");
report(isDomainType(str.type), "isDomainType");
report(isArray(str), "isArray");
report(isArrayValue(str), "isArrayValue");
report(isArrayType(str.type), "isArrayType");
report(isSync(str), "isSync");
report(isSyncValue(str), "isSyncValue");
report(isSyncType(str.type), "isSyncType");
report(isSingle(str), "isSingle");
report(isSingleValue(str), "isSingleValue");
report(isSingleType(str.type), "isSingleType");
report(isAtomic(str), "isAtomic");
report(isAtomicValue(str), "isAtomicValue");
report(isAtomicType(str.type), "isAtomicType");
writeln("  .");

write("EnumType (enm)");
report(isBool(enm), "isBool");
report(isBoolValue(enm), "isBoolValue");
report(isBoolType(enm.type), "isBoolType");
report(isInt(enm), "isInt");
report(isIntValue(enm), "isIntValue");
report(isIntType(enm.type), "isIntType");
report(isUint(enm), "isUint");
report(isUintValue(enm), "isUintValue");
report(isUintType(enm.type), "isUintType");
report(isReal(enm), "isReal");
report(isRealValue(enm), "isRealValue");
report(isRealType(enm.type), "isRealType");
report(isImag(enm), "isImag");
report(isImagValue(enm), "isImagValue");
report(isImagType(enm.type), "isImagType");
report(isComplex(enm), "isComplex");
report(isComplexValue(enm), "isComplexValue");
report(isComplexType(enm.type), "isComplexType");
report(isString(enm), "isString");
report(isStringValue(enm), "isStringValue");
report(isStringType(enm.type), "isStringType");
report(isEnum(enm), "isEnum");
report(isEnumValue(enm), "isEnumValue");
report(isEnumType(enm.type), "isEnumType");
report(isTuple(enm), "isTuple");
report(isTupleValue(enm), "isTupleValue");
report(isTupleType(enm.type), "isTupleType");
report(isClass(enm), "isClass");
report(isClassValue(enm), "isClassValue");
report(isClassType(enm.type), "isClassType");
report(isRecord(enm), "isRecord");
report(isRecordValue(enm), "isRecordValue");
report(isRecordType(enm.type), "isRecordType");
report(isUnion(enm), "isUnion");
report(isUnionValue(enm), "isUnionValue");
report(isUnionType(enm.type), "isUnionType");
report(isRange(enm), "isRange");
report(isRangeValue(enm), "isRangeValue");
report(isRangeType(enm.type), "isRangeType");
report(isDmap(enm), "isDmap");
report(isDmapValue(enm), "isDmapValue");
report(isDmapType(enm.type), "isDmapType");
report(isDomain(enm), "isDomain");
report(isDomainValue(enm), "isDomainValue");
report(isDomainType(enm.type), "isDomainType");
report(isArray(enm), "isArray");
report(isArrayValue(enm), "isArrayValue");
report(isArrayType(enm.type), "isArrayType");
report(isSync(enm), "isSync");
report(isSyncValue(enm), "isSyncValue");
report(isSyncType(enm.type), "isSyncType");
report(isSingle(enm), "isSingle");
report(isSingleValue(enm), "isSingleValue");
report(isSingleType(enm.type), "isSingleType");
report(isAtomic(enm), "isAtomic");
report(isAtomicValue(enm), "isAtomicValue");
report(isAtomicType(enm.type), "isAtomicType");
writeln("  .");

write("HomTupType (homtup)");
report(isBool(homtup), "isBool");
report(isBoolValue(homtup), "isBoolValue");
report(isBoolType(homtup.type), "isBoolType");
report(isInt(homtup), "isInt");
report(isIntValue(homtup), "isIntValue");
report(isIntType(homtup.type), "isIntType");
report(isUint(homtup), "isUint");
report(isUintValue(homtup), "isUintValue");
report(isUintType(homtup.type), "isUintType");
report(isReal(homtup), "isReal");
report(isRealValue(homtup), "isRealValue");
report(isRealType(homtup.type), "isRealType");
report(isImag(homtup), "isImag");
report(isImagValue(homtup), "isImagValue");
report(isImagType(homtup.type), "isImagType");
report(isComplex(homtup), "isComplex");
report(isComplexValue(homtup), "isComplexValue");
report(isComplexType(homtup.type), "isComplexType");
report(isString(homtup), "isString");
report(isStringValue(homtup), "isStringValue");
report(isStringType(homtup.type), "isStringType");
report(isEnum(homtup), "isEnum");
report(isEnumValue(homtup), "isEnumValue");
report(isEnumType(homtup.type), "isEnumType");
report(isTuple(homtup), "isTuple");
report(isTupleValue(homtup), "isTupleValue");
report(isTupleType(homtup.type), "isTupleType");
report(isClass(homtup), "isClass");
report(isClassValue(homtup), "isClassValue");
report(isClassType(homtup.type), "isClassType");
report(isRecord(homtup), "isRecord");
report(isRecordValue(homtup), "isRecordValue");
report(isRecordType(homtup.type), "isRecordType");
report(isUnion(homtup), "isUnion");
report(isUnionValue(homtup), "isUnionValue");
report(isUnionType(homtup.type), "isUnionType");
report(isRange(homtup), "isRange");
report(isRangeValue(homtup), "isRangeValue");
report(isRangeType(homtup.type), "isRangeType");
report(isDmap(homtup), "isDmap");
report(isDmapValue(homtup), "isDmapValue");
report(isDmapType(homtup.type), "isDmapType");
report(isDomain(homtup), "isDomain");
report(isDomainValue(homtup), "isDomainValue");
report(isDomainType(homtup.type), "isDomainType");
report(isArray(homtup), "isArray");
report(isArrayValue(homtup), "isArrayValue");
report(isArrayType(homtup.type), "isArrayType");
report(isSync(homtup), "isSync");
report(isSyncValue(homtup), "isSyncValue");
report(isSyncType(homtup.type), "isSyncType");
report(isSingle(homtup), "isSingle");
report(isSingleValue(homtup), "isSingleValue");
report(isSingleType(homtup.type), "isSingleType");
report(isAtomic(homtup), "isAtomic");
report(isAtomicValue(homtup), "isAtomicValue");
report(isAtomicType(homtup.type), "isAtomicType");
report(isHomogeneousTuple(homtup), "isHomogeneousTuple");
report(isHomogeneousTupleValue(homtup), "isHomogeneousTupleValue");
report(isHomogeneousTupleType(homtup.type), "isHomogeneousTupleType");
writeln("  .");

write("HetTupType (hettup)");
report(isBool(hettup), "isBool");
report(isBoolValue(hettup), "isBoolValue");
report(isBoolType(hettup.type), "isBoolType");
report(isInt(hettup), "isInt");
report(isIntValue(hettup), "isIntValue");
report(isIntType(hettup.type), "isIntType");
report(isUint(hettup), "isUint");
report(isUintValue(hettup), "isUintValue");
report(isUintType(hettup.type), "isUintType");
report(isReal(hettup), "isReal");
report(isRealValue(hettup), "isRealValue");
report(isRealType(hettup.type), "isRealType");
report(isImag(hettup), "isImag");
report(isImagValue(hettup), "isImagValue");
report(isImagType(hettup.type), "isImagType");
report(isComplex(hettup), "isComplex");
report(isComplexValue(hettup), "isComplexValue");
report(isComplexType(hettup.type), "isComplexType");
report(isString(hettup), "isString");
report(isStringValue(hettup), "isStringValue");
report(isStringType(hettup.type), "isStringType");
report(isEnum(hettup), "isEnum");
report(isEnumValue(hettup), "isEnumValue");
report(isEnumType(hettup.type), "isEnumType");
report(isTuple(hettup), "isTuple");
report(isTupleValue(hettup), "isTupleValue");
report(isTupleType(hettup.type), "isTupleType");
report(isClass(hettup), "isClass");
report(isClassValue(hettup), "isClassValue");
report(isClassType(hettup.type), "isClassType");
report(isRecord(hettup), "isRecord");
report(isRecordValue(hettup), "isRecordValue");
report(isRecordType(hettup.type), "isRecordType");
report(isUnion(hettup), "isUnion");
report(isUnionValue(hettup), "isUnionValue");
report(isUnionType(hettup.type), "isUnionType");
report(isRange(hettup), "isRange");
report(isRangeValue(hettup), "isRangeValue");
report(isRangeType(hettup.type), "isRangeType");
report(isDmap(hettup), "isDmap");
report(isDmapValue(hettup), "isDmapValue");
report(isDmapType(hettup.type), "isDmapType");
report(isDomain(hettup), "isDomain");
report(isDomainValue(hettup), "isDomainValue");
report(isDomainType(hettup.type), "isDomainType");
report(isArray(hettup), "isArray");
report(isArrayValue(hettup), "isArrayValue");
report(isArrayType(hettup.type), "isArrayType");
report(isSync(hettup), "isSync");
report(isSyncValue(hettup), "isSyncValue");
report(isSyncType(hettup.type), "isSyncType");
report(isSingle(hettup), "isSingle");
report(isSingleValue(hettup), "isSingleValue");
report(isSingleType(hettup.type), "isSingleType");
report(isAtomic(hettup), "isAtomic");
report(isAtomicValue(hettup), "isAtomicValue");
report(isAtomicType(hettup.type), "isAtomicType");
report(isHomogeneousTuple(hettup), "isHomogeneousTuple");
report(isHomogeneousTupleValue(hettup), "isHomogeneousTupleValue");
report(isHomogeneousTupleType(hettup.type), "isHomogeneousTupleType");
writeln("  .");

write("ClassType (cls)");
report(isBool(cls), "isBool");
report(isBoolValue(cls), "isBoolValue");
report(isBoolType(cls.type), "isBoolType");
report(isInt(cls), "isInt");
report(isIntValue(cls), "isIntValue");
report(isIntType(cls.type), "isIntType");
report(isUint(cls), "isUint");
report(isUintValue(cls), "isUintValue");
report(isUintType(cls.type), "isUintType");
report(isReal(cls), "isReal");
report(isRealValue(cls), "isRealValue");
report(isRealType(cls.type), "isRealType");
report(isImag(cls), "isImag");
report(isImagValue(cls), "isImagValue");
report(isImagType(cls.type), "isImagType");
report(isComplex(cls), "isComplex");
report(isComplexValue(cls), "isComplexValue");
report(isComplexType(cls.type), "isComplexType");
report(isString(cls), "isString");
report(isStringValue(cls), "isStringValue");
report(isStringType(cls.type), "isStringType");
report(isEnum(cls), "isEnum");
report(isEnumValue(cls), "isEnumValue");
report(isEnumType(cls.type), "isEnumType");
report(isTuple(cls), "isTuple");
report(isTupleValue(cls), "isTupleValue");
report(isTupleType(cls.type), "isTupleType");
report(isClass(cls), "isClass");
report(isClassValue(cls), "isClassValue");
report(isClassType(cls.type), "isClassType");
report(isRecord(cls), "isRecord");
report(isRecordValue(cls), "isRecordValue");
report(isRecordType(cls.type), "isRecordType");
report(isUnion(cls), "isUnion");
report(isUnionValue(cls), "isUnionValue");
report(isUnionType(cls.type), "isUnionType");
report(isRange(cls), "isRange");
report(isRangeValue(cls), "isRangeValue");
report(isRangeType(cls.type), "isRangeType");
report(isDmap(cls), "isDmap");
report(isDmapValue(cls), "isDmapValue");
report(isDmapType(cls.type), "isDmapType");
report(isDomain(cls), "isDomain");
report(isDomainValue(cls), "isDomainValue");
report(isDomainType(cls.type), "isDomainType");
report(isArray(cls), "isArray");
report(isArrayValue(cls), "isArrayValue");
report(isArrayType(cls.type), "isArrayType");
report(isSync(cls), "isSync");
report(isSyncValue(cls), "isSyncValue");
report(isSyncType(cls.type), "isSyncType");
report(isSingle(cls), "isSingle");
report(isSingleValue(cls), "isSingleValue");
report(isSingleType(cls.type), "isSingleType");
report(isAtomic(cls), "isAtomic");
report(isAtomicValue(cls), "isAtomicValue");
report(isAtomicType(cls.type), "isAtomicType");
writeln("  .");

write("RecordSmall (rec1)");
report(isBool(rec1), "isBool");
report(isBoolValue(rec1), "isBoolValue");
report(isBoolType(rec1.type), "isBoolType");
report(isInt(rec1), "isInt");
report(isIntValue(rec1), "isIntValue");
report(isIntType(rec1.type), "isIntType");
report(isUint(rec1), "isUint");
report(isUintValue(rec1), "isUintValue");
report(isUintType(rec1.type), "isUintType");
report(isReal(rec1), "isReal");
report(isRealValue(rec1), "isRealValue");
report(isRealType(rec1.type), "isRealType");
report(isImag(rec1), "isImag");
report(isImagValue(rec1), "isImagValue");
report(isImagType(rec1.type), "isImagType");
report(isComplex(rec1), "isComplex");
report(isComplexValue(rec1), "isComplexValue");
report(isComplexType(rec1.type), "isComplexType");
report(isString(rec1), "isString");
report(isStringValue(rec1), "isStringValue");
report(isStringType(rec1.type), "isStringType");
report(isEnum(rec1), "isEnum");
report(isEnumValue(rec1), "isEnumValue");
report(isEnumType(rec1.type), "isEnumType");
report(isTuple(rec1), "isTuple");
report(isTupleValue(rec1), "isTupleValue");
report(isTupleType(rec1.type), "isTupleType");
report(isClass(rec1), "isClass");
report(isClassValue(rec1), "isClassValue");
report(isClassType(rec1.type), "isClassType");
report(isRecord(rec1), "isRecord");
report(isRecordValue(rec1), "isRecordValue");
report(isRecordType(rec1.type), "isRecordType");
report(isUnion(rec1), "isUnion");
report(isUnionValue(rec1), "isUnionValue");
report(isUnionType(rec1.type), "isUnionType");
report(isRange(rec1), "isRange");
report(isRangeValue(rec1), "isRangeValue");
report(isRangeType(rec1.type), "isRangeType");
report(isDmap(rec1), "isDmap");
report(isDmapValue(rec1), "isDmapValue");
report(isDmapType(rec1.type), "isDmapType");
report(isDomain(rec1), "isDomain");
report(isDomainValue(rec1), "isDomainValue");
report(isDomainType(rec1.type), "isDomainType");
report(isArray(rec1), "isArray");
report(isArrayValue(rec1), "isArrayValue");
report(isArrayType(rec1.type), "isArrayType");
report(isSync(rec1), "isSync");
report(isSyncValue(rec1), "isSyncValue");
report(isSyncType(rec1.type), "isSyncType");
report(isSingle(rec1), "isSingle");
report(isSingleValue(rec1), "isSingleValue");
report(isSingleType(rec1.type), "isSingleType");
report(isAtomic(rec1), "isAtomic");
report(isAtomicValue(rec1), "isAtomicValue");
report(isAtomicType(rec1.type), "isAtomicType");
writeln("  .");

write("UnionType (unn)");
report(isBool(unn), "isBool");
report(isBoolValue(unn), "isBoolValue");
report(isBoolType(unn.type), "isBoolType");
report(isInt(unn), "isInt");
report(isIntValue(unn), "isIntValue");
report(isIntType(unn.type), "isIntType");
report(isUint(unn), "isUint");
report(isUintValue(unn), "isUintValue");
report(isUintType(unn.type), "isUintType");
report(isReal(unn), "isReal");
report(isRealValue(unn), "isRealValue");
report(isRealType(unn.type), "isRealType");
report(isImag(unn), "isImag");
report(isImagValue(unn), "isImagValue");
report(isImagType(unn.type), "isImagType");
report(isComplex(unn), "isComplex");
report(isComplexValue(unn), "isComplexValue");
report(isComplexType(unn.type), "isComplexType");
report(isString(unn), "isString");
report(isStringValue(unn), "isStringValue");
report(isStringType(unn.type), "isStringType");
report(isEnum(unn), "isEnum");
report(isEnumValue(unn), "isEnumValue");
report(isEnumType(unn.type), "isEnumType");
report(isTuple(unn), "isTuple");
report(isTupleValue(unn), "isTupleValue");
report(isTupleType(unn.type), "isTupleType");
report(isClass(unn), "isClass");
report(isClassValue(unn), "isClassValue");
report(isClassType(unn.type), "isClassType");
report(isRecord(unn), "isRecord");
report(isRecordValue(unn), "isRecordValue");
report(isRecordType(unn.type), "isRecordType");
report(isUnion(unn), "isUnion");
report(isUnionValue(unn), "isUnionValue");
report(isUnionType(unn.type), "isUnionType");
report(isRange(unn), "isRange");
report(isRangeValue(unn), "isRangeValue");
report(isRangeType(unn.type), "isRangeType");
report(isDmap(unn), "isDmap");
report(isDmapValue(unn), "isDmapValue");
report(isDmapType(unn.type), "isDmapType");
report(isDomain(unn), "isDomain");
report(isDomainValue(unn), "isDomainValue");
report(isDomainType(unn.type), "isDomainType");
report(isArray(unn), "isArray");
report(isArrayValue(unn), "isArrayValue");
report(isArrayType(unn.type), "isArrayType");
report(isSync(unn), "isSync");
report(isSyncValue(unn), "isSyncValue");
report(isSyncType(unn.type), "isSyncType");
report(isSingle(unn), "isSingle");
report(isSingleValue(unn), "isSingleValue");
report(isSingleType(unn.type), "isSingleType");
report(isAtomic(unn), "isAtomic");
report(isAtomicValue(unn), "isAtomicValue");
report(isAtomicType(unn.type), "isAtomicType");
writeln("  .");

write("range (rng1)");
report(isBool(rng1), "isBool");
report(isBoolValue(rng1), "isBoolValue");
report(isBoolType(rng1.type), "isBoolType");
report(isInt(rng1), "isInt");
report(isIntValue(rng1), "isIntValue");
report(isIntType(rng1.type), "isIntType");
report(isUint(rng1), "isUint");
report(isUintValue(rng1), "isUintValue");
report(isUintType(rng1.type), "isUintType");
report(isReal(rng1), "isReal");
report(isRealValue(rng1), "isRealValue");
report(isRealType(rng1.type), "isRealType");
report(isImag(rng1), "isImag");
report(isImagValue(rng1), "isImagValue");
report(isImagType(rng1.type), "isImagType");
report(isComplex(rng1), "isComplex");
report(isComplexValue(rng1), "isComplexValue");
report(isComplexType(rng1.type), "isComplexType");
report(isString(rng1), "isString");
report(isStringValue(rng1), "isStringValue");
report(isStringType(rng1.type), "isStringType");
report(isEnum(rng1), "isEnum");
report(isEnumValue(rng1), "isEnumValue");
report(isEnumType(rng1.type), "isEnumType");
report(isTuple(rng1), "isTuple");
report(isTupleValue(rng1), "isTupleValue");
report(isTupleType(rng1.type), "isTupleType");
report(isClass(rng1), "isClass");
report(isClassValue(rng1), "isClassValue");
report(isClassType(rng1.type), "isClassType");
report(isRecord(rng1), "isRecord");
report(isRecordValue(rng1), "isRecordValue");
report(isRecordType(rng1.type), "isRecordType");
report(isUnion(rng1), "isUnion");
report(isUnionValue(rng1), "isUnionValue");
report(isUnionType(rng1.type), "isUnionType");
report(isRange(rng1), "isRange");
report(isRangeValue(rng1), "isRangeValue");
report(isRangeType(rng1.type), "isRangeType");
report(isDmap(rng1), "isDmap");
report(isDmapValue(rng1), "isDmapValue");
report(isDmapType(rng1.type), "isDmapType");
report(isDomain(rng1), "isDomain");
report(isDomainValue(rng1), "isDomainValue");
report(isDomainType(rng1.type), "isDomainType");
report(isArray(rng1), "isArray");
report(isArrayValue(rng1), "isArrayValue");
report(isArrayType(rng1.type), "isArrayType");
report(isSync(rng1), "isSync");
report(isSyncValue(rng1), "isSyncValue");
report(isSyncType(rng1.type), "isSyncType");
report(isSingle(rng1), "isSingle");
report(isSingleValue(rng1), "isSingleValue");
report(isSingleType(rng1.type), "isSingleType");
report(isAtomic(rng1), "isAtomic");
report(isAtomicValue(rng1), "isAtomicValue");
report(isAtomicType(rng1.type), "isAtomicType");
writeln("  .");

write("range(uint(8), BoundedRangeType.boundedNone, true) (rng2)");
report(isBool(rng2), "isBool");
report(isBoolValue(rng2), "isBoolValue");
report(isBoolType(rng2.type), "isBoolType");
report(isInt(rng2), "isInt");
report(isIntValue(rng2), "isIntValue");
report(isIntType(rng2.type), "isIntType");
report(isUint(rng2), "isUint");
report(isUintValue(rng2), "isUintValue");
report(isUintType(rng2.type), "isUintType");
report(isReal(rng2), "isReal");
report(isRealValue(rng2), "isRealValue");
report(isRealType(rng2.type), "isRealType");
report(isImag(rng2), "isImag");
report(isImagValue(rng2), "isImagValue");
report(isImagType(rng2.type), "isImagType");
report(isComplex(rng2), "isComplex");
report(isComplexValue(rng2), "isComplexValue");
report(isComplexType(rng2.type), "isComplexType");
report(isString(rng2), "isString");
report(isStringValue(rng2), "isStringValue");
report(isStringType(rng2.type), "isStringType");
report(isEnum(rng2), "isEnum");
report(isEnumValue(rng2), "isEnumValue");
report(isEnumType(rng2.type), "isEnumType");
report(isTuple(rng2), "isTuple");
report(isTupleValue(rng2), "isTupleValue");
report(isTupleType(rng2.type), "isTupleType");
report(isClass(rng2), "isClass");
report(isClassValue(rng2), "isClassValue");
report(isClassType(rng2.type), "isClassType");
report(isRecord(rng2), "isRecord");
report(isRecordValue(rng2), "isRecordValue");
report(isRecordType(rng2.type), "isRecordType");
report(isUnion(rng2), "isUnion");
report(isUnionValue(rng2), "isUnionValue");
report(isUnionType(rng2.type), "isUnionType");
report(isRange(rng2), "isRange");
report(isRangeValue(rng2), "isRangeValue");
report(isRangeType(rng2.type), "isRangeType");
report(isDmap(rng2), "isDmap");
report(isDmapValue(rng2), "isDmapValue");
report(isDmapType(rng2.type), "isDmapType");
report(isDomain(rng2), "isDomain");
report(isDomainValue(rng2), "isDomainValue");
report(isDomainType(rng2.type), "isDomainType");
report(isArray(rng2), "isArray");
report(isArrayValue(rng2), "isArrayValue");
report(isArrayType(rng2.type), "isArrayType");
report(isSync(rng2), "isSync");
report(isSyncValue(rng2), "isSyncValue");
report(isSyncType(rng2.type), "isSyncType");
report(isSingle(rng2), "isSingle");
report(isSingleValue(rng2), "isSingleValue");
report(isSingleType(rng2.type), "isSingleType");
report(isAtomic(rng2), "isAtomic");
report(isAtomicValue(rng2), "isAtomicValue");
report(isAtomicType(rng2.type), "isAtomicType");
writeln("  .");

write("new dmap(new DefaultDist()) (dmp)");
report(isBool(dmp), "isBool");
report(isBoolValue(dmp), "isBoolValue");
report(isBoolType(dmp.type), "isBoolType");
report(isInt(dmp), "isInt");
report(isIntValue(dmp), "isIntValue");
report(isIntType(dmp.type), "isIntType");
report(isUint(dmp), "isUint");
report(isUintValue(dmp), "isUintValue");
report(isUintType(dmp.type), "isUintType");
report(isReal(dmp), "isReal");
report(isRealValue(dmp), "isRealValue");
report(isRealType(dmp.type), "isRealType");
report(isImag(dmp), "isImag");
report(isImagValue(dmp), "isImagValue");
report(isImagType(dmp.type), "isImagType");
report(isComplex(dmp), "isComplex");
report(isComplexValue(dmp), "isComplexValue");
report(isComplexType(dmp.type), "isComplexType");
report(isString(dmp), "isString");
report(isStringValue(dmp), "isStringValue");
report(isStringType(dmp.type), "isStringType");
report(isEnum(dmp), "isEnum");
report(isEnumValue(dmp), "isEnumValue");
report(isEnumType(dmp.type), "isEnumType");
report(isTuple(dmp), "isTuple");
report(isTupleValue(dmp), "isTupleValue");
report(isTupleType(dmp.type), "isTupleType");
report(isClass(dmp), "isClass");
report(isClassValue(dmp), "isClassValue");
report(isClassType(dmp.type), "isClassType");
report(isRecord(dmp), "isRecord");
report(isRecordValue(dmp), "isRecordValue");
report(isRecordType(dmp.type), "isRecordType");
report(isUnion(dmp), "isUnion");
report(isUnionValue(dmp), "isUnionValue");
report(isUnionType(dmp.type), "isUnionType");
report(isRange(dmp), "isRange");
report(isRangeValue(dmp), "isRangeValue");
report(isRangeType(dmp.type), "isRangeType");
report(isDmap(dmp), "isDmap");
report(isDmapValue(dmp), "isDmapValue");
report(isDmapType(dmp.type), "isDmapType");
report(isDomain(dmp), "isDomain");
report(isDomainValue(dmp), "isDomainValue");
report(isDomainType(dmp.type), "isDomainType");
report(isArray(dmp), "isArray");
report(isArrayValue(dmp), "isArrayValue");
report(isArrayType(dmp.type), "isArrayType");
report(isSync(dmp), "isSync");
report(isSyncValue(dmp), "isSyncValue");
report(isSyncType(dmp.type), "isSyncType");
report(isSingle(dmp), "isSingle");
report(isSingleValue(dmp), "isSingleValue");
report(isSingleType(dmp.type), "isSingleType");
report(isAtomic(dmp), "isAtomic");
report(isAtomicValue(dmp), "isAtomicValue");
report(isAtomicType(dmp.type), "isAtomicType");
writeln("  .");

write("DomType1 (dom1)");
report(isBool(dom1), "isBool");
report(isBoolValue(dom1), "isBoolValue");
report(isBoolType(dom1.type), "isBoolType");
report(isInt(dom1), "isInt");
report(isIntValue(dom1), "isIntValue");
report(isIntType(dom1.type), "isIntType");
report(isUint(dom1), "isUint");
report(isUintValue(dom1), "isUintValue");
report(isUintType(dom1.type), "isUintType");
report(isReal(dom1), "isReal");
report(isRealValue(dom1), "isRealValue");
report(isRealType(dom1.type), "isRealType");
report(isImag(dom1), "isImag");
report(isImagValue(dom1), "isImagValue");
report(isImagType(dom1.type), "isImagType");
report(isComplex(dom1), "isComplex");
report(isComplexValue(dom1), "isComplexValue");
report(isComplexType(dom1.type), "isComplexType");
report(isString(dom1), "isString");
report(isStringValue(dom1), "isStringValue");
report(isStringType(dom1.type), "isStringType");
report(isEnum(dom1), "isEnum");
report(isEnumValue(dom1), "isEnumValue");
report(isEnumType(dom1.type), "isEnumType");
report(isTuple(dom1), "isTuple");
report(isTupleValue(dom1), "isTupleValue");
report(isTupleType(dom1.type), "isTupleType");
report(isClass(dom1), "isClass");
report(isClassValue(dom1), "isClassValue");
report(isClassType(dom1.type), "isClassType");
report(isRecord(dom1), "isRecord");
report(isRecordValue(dom1), "isRecordValue");
report(isRecordType(dom1.type), "isRecordType");
report(isUnion(dom1), "isUnion");
report(isUnionValue(dom1), "isUnionValue");
report(isUnionType(dom1.type), "isUnionType");
report(isRange(dom1), "isRange");
report(isRangeValue(dom1), "isRangeValue");
report(isRangeType(dom1.type), "isRangeType");
report(isDmap(dom1), "isDmap");
report(isDmapValue(dom1), "isDmapValue");
report(isDmapType(dom1.type), "isDmapType");
report(isDomain(dom1), "isDomain");
report(isDomainValue(dom1), "isDomainValue");
report(isDomainType(dom1.type), "isDomainType");
report(isArray(dom1), "isArray");
report(isArrayValue(dom1), "isArrayValue");
report(isArrayType(dom1.type), "isArrayType");
report(isSync(dom1), "isSync");
report(isSyncValue(dom1), "isSyncValue");
report(isSyncType(dom1.type), "isSyncType");
report(isSingle(dom1), "isSingle");
report(isSingleValue(dom1), "isSingleValue");
report(isSingleType(dom1.type), "isSingleType");
report(isAtomic(dom1), "isAtomic");
report(isAtomicValue(dom1), "isAtomicValue");
report(isAtomicType(dom1.type), "isAtomicType");
writeln("  .");

write("DomType2 (dom2)");
report(isBool(dom2), "isBool");
report(isBoolValue(dom2), "isBoolValue");
report(isBoolType(dom2.type), "isBoolType");
report(isInt(dom2), "isInt");
report(isIntValue(dom2), "isIntValue");
report(isIntType(dom2.type), "isIntType");
report(isUint(dom2), "isUint");
report(isUintValue(dom2), "isUintValue");
report(isUintType(dom2.type), "isUintType");
report(isReal(dom2), "isReal");
report(isRealValue(dom2), "isRealValue");
report(isRealType(dom2.type), "isRealType");
report(isImag(dom2), "isImag");
report(isImagValue(dom2), "isImagValue");
report(isImagType(dom2.type), "isImagType");
report(isComplex(dom2), "isComplex");
report(isComplexValue(dom2), "isComplexValue");
report(isComplexType(dom2.type), "isComplexType");
report(isString(dom2), "isString");
report(isStringValue(dom2), "isStringValue");
report(isStringType(dom2.type), "isStringType");
report(isEnum(dom2), "isEnum");
report(isEnumValue(dom2), "isEnumValue");
report(isEnumType(dom2.type), "isEnumType");
report(isTuple(dom2), "isTuple");
report(isTupleValue(dom2), "isTupleValue");
report(isTupleType(dom2.type), "isTupleType");
report(isClass(dom2), "isClass");
report(isClassValue(dom2), "isClassValue");
report(isClassType(dom2.type), "isClassType");
report(isRecord(dom2), "isRecord");
report(isRecordValue(dom2), "isRecordValue");
report(isRecordType(dom2.type), "isRecordType");
report(isUnion(dom2), "isUnion");
report(isUnionValue(dom2), "isUnionValue");
report(isUnionType(dom2.type), "isUnionType");
report(isRange(dom2), "isRange");
report(isRangeValue(dom2), "isRangeValue");
report(isRangeType(dom2.type), "isRangeType");
report(isDmap(dom2), "isDmap");
report(isDmapValue(dom2), "isDmapValue");
report(isDmapType(dom2.type), "isDmapType");
report(isDomain(dom2), "isDomain");
report(isDomainValue(dom2), "isDomainValue");
report(isDomainType(dom2.type), "isDomainType");
report(isArray(dom2), "isArray");
report(isArrayValue(dom2), "isArrayValue");
report(isArrayType(dom2.type), "isArrayType");
report(isSync(dom2), "isSync");
report(isSyncValue(dom2), "isSyncValue");
report(isSyncType(dom2.type), "isSyncType");
report(isSingle(dom2), "isSingle");
report(isSingleValue(dom2), "isSingleValue");
report(isSingleType(dom2.type), "isSingleType");
report(isAtomic(dom2), "isAtomic");
report(isAtomicValue(dom2), "isAtomicValue");
report(isAtomicType(dom2.type), "isAtomicType");
writeln("  .");

write("ArrType1 (arr1)");
report(isBool(arr1), "isBool");
report(isBoolValue(arr1), "isBoolValue");
report(isBoolType(arr1.type), "isBoolType");
report(isInt(arr1), "isInt");
report(isIntValue(arr1), "isIntValue");
report(isIntType(arr1.type), "isIntType");
report(isUint(arr1), "isUint");
report(isUintValue(arr1), "isUintValue");
report(isUintType(arr1.type), "isUintType");
report(isReal(arr1), "isReal");
report(isRealValue(arr1), "isRealValue");
report(isRealType(arr1.type), "isRealType");
report(isImag(arr1), "isImag");
report(isImagValue(arr1), "isImagValue");
report(isImagType(arr1.type), "isImagType");
report(isComplex(arr1), "isComplex");
report(isComplexValue(arr1), "isComplexValue");
report(isComplexType(arr1.type), "isComplexType");
report(isString(arr1), "isString");
report(isStringValue(arr1), "isStringValue");
report(isStringType(arr1.type), "isStringType");
report(isEnum(arr1), "isEnum");
report(isEnumValue(arr1), "isEnumValue");
report(isEnumType(arr1.type), "isEnumType");
report(isTuple(arr1), "isTuple");
report(isTupleValue(arr1), "isTupleValue");
report(isTupleType(arr1.type), "isTupleType");
report(isClass(arr1), "isClass");
report(isClassValue(arr1), "isClassValue");
report(isClassType(arr1.type), "isClassType");
report(isRecord(arr1), "isRecord");
report(isRecordValue(arr1), "isRecordValue");
report(isRecordType(arr1.type), "isRecordType");
report(isUnion(arr1), "isUnion");
report(isUnionValue(arr1), "isUnionValue");
report(isUnionType(arr1.type), "isUnionType");
report(isRange(arr1), "isRange");
report(isRangeValue(arr1), "isRangeValue");
report(isRangeType(arr1.type), "isRangeType");
report(isDmap(arr1), "isDmap");
report(isDmapValue(arr1), "isDmapValue");
report(isDmapType(arr1.type), "isDmapType");
report(isDomain(arr1), "isDomain");
report(isDomainValue(arr1), "isDomainValue");
report(isDomainType(arr1.type), "isDomainType");
report(isArray(arr1), "isArray");
report(isArrayValue(arr1), "isArrayValue");
report(isArrayType(arr1.type), "isArrayType");
report(isSync(arr1), "isSync");
report(isSyncValue(arr1), "isSyncValue");
report(isSyncType(arr1.type), "isSyncType");
report(isSingle(arr1), "isSingle");
report(isSingleValue(arr1), "isSingleValue");
report(isSingleType(arr1.type), "isSingleType");
report(isAtomic(arr1), "isAtomic");
report(isAtomicValue(arr1), "isAtomicValue");
report(isAtomicType(arr1.type), "isAtomicType");
writeln("  .");

write("ArrType2 (arr2)");
report(isBool(arr2), "isBool");
report(isBoolValue(arr2), "isBoolValue");
report(isBoolType(arr2.type), "isBoolType");
report(isInt(arr2), "isInt");
report(isIntValue(arr2), "isIntValue");
report(isIntType(arr2.type), "isIntType");
report(isUint(arr2), "isUint");
report(isUintValue(arr2), "isUintValue");
report(isUintType(arr2.type), "isUintType");
report(isReal(arr2), "isReal");
report(isRealValue(arr2), "isRealValue");
report(isRealType(arr2.type), "isRealType");
report(isImag(arr2), "isImag");
report(isImagValue(arr2), "isImagValue");
report(isImagType(arr2.type), "isImagType");
report(isComplex(arr2), "isComplex");
report(isComplexValue(arr2), "isComplexValue");
report(isComplexType(arr2.type), "isComplexType");
report(isString(arr2), "isString");
report(isStringValue(arr2), "isStringValue");
report(isStringType(arr2.type), "isStringType");
report(isEnum(arr2), "isEnum");
report(isEnumValue(arr2), "isEnumValue");
report(isEnumType(arr2.type), "isEnumType");
report(isTuple(arr2), "isTuple");
report(isTupleValue(arr2), "isTupleValue");
report(isTupleType(arr2.type), "isTupleType");
report(isClass(arr2), "isClass");
report(isClassValue(arr2), "isClassValue");
report(isClassType(arr2.type), "isClassType");
report(isRecord(arr2), "isRecord");
report(isRecordValue(arr2), "isRecordValue");
report(isRecordType(arr2.type), "isRecordType");
report(isUnion(arr2), "isUnion");
report(isUnionValue(arr2), "isUnionValue");
report(isUnionType(arr2.type), "isUnionType");
report(isRange(arr2), "isRange");
report(isRangeValue(arr2), "isRangeValue");
report(isRangeType(arr2.type), "isRangeType");
report(isDmap(arr2), "isDmap");
report(isDmapValue(arr2), "isDmapValue");
report(isDmapType(arr2.type), "isDmapType");
report(isDomain(arr2), "isDomain");
report(isDomainValue(arr2), "isDomainValue");
report(isDomainType(arr2.type), "isDomainType");
report(isArray(arr2), "isArray");
report(isArrayValue(arr2), "isArrayValue");
report(isArrayType(arr2.type), "isArrayType");
report(isSync(arr2), "isSync");
report(isSyncValue(arr2), "isSyncValue");
report(isSyncType(arr2.type), "isSyncType");
report(isSingle(arr2), "isSingle");
report(isSingleValue(arr2), "isSingleValue");
report(isSingleType(arr2.type), "isSingleType");
report(isAtomic(arr2), "isAtomic");
report(isAtomicValue(arr2), "isAtomicValue");
report(isAtomicType(arr2.type), "isAtomicType");
writeln("  .");

write("sync int (syInt)");
report(isBool(syInt), "isBool");
report(isBoolValue(syInt), "isBoolValue");
report(isBoolType(syInt.type), "isBoolType");
report(isInt(syInt), "isInt");
report(isIntValue(syInt), "isIntValue");
report(isIntType(syInt.type), "isIntType");
report(isUint(syInt), "isUint");
report(isUintValue(syInt), "isUintValue");
report(isUintType(syInt.type), "isUintType");
report(isReal(syInt), "isReal");
report(isRealValue(syInt), "isRealValue");
report(isRealType(syInt.type), "isRealType");
report(isImag(syInt), "isImag");
report(isImagValue(syInt), "isImagValue");
report(isImagType(syInt.type), "isImagType");
report(isComplex(syInt), "isComplex");
report(isComplexValue(syInt), "isComplexValue");
report(isComplexType(syInt.type), "isComplexType");
report(isString(syInt), "isString");
report(isStringValue(syInt), "isStringValue");
report(isStringType(syInt.type), "isStringType");
report(isEnum(syInt), "isEnum");
report(isEnumValue(syInt), "isEnumValue");
report(isEnumType(syInt.type), "isEnumType");
report(isTuple(syInt), "isTuple");
report(isTupleValue(syInt), "isTupleValue");
report(isTupleType(syInt.type), "isTupleType");
report(isClass(syInt), "isClass");
report(isClassValue(syInt), "isClassValue");
report(isClassType(syInt.type), "isClassType");
report(isRecord(syInt), "isRecord");
report(isRecordValue(syInt), "isRecordValue");
report(isRecordType(syInt.type), "isRecordType");
report(isUnion(syInt), "isUnion");
report(isUnionValue(syInt), "isUnionValue");
report(isUnionType(syInt.type), "isUnionType");
report(isRange(syInt), "isRange");
report(isRangeValue(syInt), "isRangeValue");
report(isRangeType(syInt.type), "isRangeType");
report(isDmap(syInt), "isDmap");
report(isDmapValue(syInt), "isDmapValue");
report(isDmapType(syInt.type), "isDmapType");
report(isDomain(syInt), "isDomain");
report(isDomainValue(syInt), "isDomainValue");
report(isDomainType(syInt.type), "isDomainType");
report(isArray(syInt), "isArray");
report(isArrayValue(syInt), "isArrayValue");
report(isArrayType(syInt.type), "isArrayType");
report(isSync(syInt), "isSync");
report(isSyncValue(syInt), "isSyncValue");
report(isSyncType(syInt.type), "isSyncType");
report(isSingle(syInt), "isSingle");
report(isSingleValue(syInt), "isSingleValue");
report(isSingleType(syInt.type), "isSingleType");
report(isAtomic(syInt), "isAtomic");
report(isAtomicValue(syInt), "isAtomicValue");
report(isAtomicType(syInt.type), "isAtomicType");
writeln("  .");

write("sync real (syReal)");
report(isBool(syReal), "isBool");
report(isBoolValue(syReal), "isBoolValue");
report(isBoolType(syReal.type), "isBoolType");
report(isInt(syReal), "isInt");
report(isIntValue(syReal), "isIntValue");
report(isIntType(syReal.type), "isIntType");
report(isUint(syReal), "isUint");
report(isUintValue(syReal), "isUintValue");
report(isUintType(syReal.type), "isUintType");
report(isReal(syReal), "isReal");
report(isRealValue(syReal), "isRealValue");
report(isRealType(syReal.type), "isRealType");
report(isImag(syReal), "isImag");
report(isImagValue(syReal), "isImagValue");
report(isImagType(syReal.type), "isImagType");
report(isComplex(syReal), "isComplex");
report(isComplexValue(syReal), "isComplexValue");
report(isComplexType(syReal.type), "isComplexType");
report(isString(syReal), "isString");
report(isStringValue(syReal), "isStringValue");
report(isStringType(syReal.type), "isStringType");
report(isEnum(syReal), "isEnum");
report(isEnumValue(syReal), "isEnumValue");
report(isEnumType(syReal.type), "isEnumType");
report(isTuple(syReal), "isTuple");
report(isTupleValue(syReal), "isTupleValue");
report(isTupleType(syReal.type), "isTupleType");
report(isClass(syReal), "isClass");
report(isClassValue(syReal), "isClassValue");
report(isClassType(syReal.type), "isClassType");
report(isRecord(syReal), "isRecord");
report(isRecordValue(syReal), "isRecordValue");
report(isRecordType(syReal.type), "isRecordType");
report(isUnion(syReal), "isUnion");
report(isUnionValue(syReal), "isUnionValue");
report(isUnionType(syReal.type), "isUnionType");
report(isRange(syReal), "isRange");
report(isRangeValue(syReal), "isRangeValue");
report(isRangeType(syReal.type), "isRangeType");
report(isDmap(syReal), "isDmap");
report(isDmapValue(syReal), "isDmapValue");
report(isDmapType(syReal.type), "isDmapType");
report(isDomain(syReal), "isDomain");
report(isDomainValue(syReal), "isDomainValue");
report(isDomainType(syReal.type), "isDomainType");
report(isArray(syReal), "isArray");
report(isArrayValue(syReal), "isArrayValue");
report(isArrayType(syReal.type), "isArrayType");
report(isSync(syReal), "isSync");
report(isSyncValue(syReal), "isSyncValue");
report(isSyncType(syReal.type), "isSyncType");
report(isSingle(syReal), "isSingle");
report(isSingleValue(syReal), "isSingleValue");
report(isSingleType(syReal.type), "isSingleType");
report(isAtomic(syReal), "isAtomic");
report(isAtomicValue(syReal), "isAtomicValue");
report(isAtomicType(syReal.type), "isAtomicType");
writeln("  .");

write("single int (siInt)");
report(isBool(siInt), "isBool");
report(isBoolValue(siInt), "isBoolValue");
report(isBoolType(siInt.type), "isBoolType");
report(isInt(siInt), "isInt");
report(isIntValue(siInt), "isIntValue");
report(isIntType(siInt.type), "isIntType");
report(isUint(siInt), "isUint");
report(isUintValue(siInt), "isUintValue");
report(isUintType(siInt.type), "isUintType");
report(isReal(siInt), "isReal");
report(isRealValue(siInt), "isRealValue");
report(isRealType(siInt.type), "isRealType");
report(isImag(siInt), "isImag");
report(isImagValue(siInt), "isImagValue");
report(isImagType(siInt.type), "isImagType");
report(isComplex(siInt), "isComplex");
report(isComplexValue(siInt), "isComplexValue");
report(isComplexType(siInt.type), "isComplexType");
report(isString(siInt), "isString");
report(isStringValue(siInt), "isStringValue");
report(isStringType(siInt.type), "isStringType");
report(isEnum(siInt), "isEnum");
report(isEnumValue(siInt), "isEnumValue");
report(isEnumType(siInt.type), "isEnumType");
report(isTuple(siInt), "isTuple");
report(isTupleValue(siInt), "isTupleValue");
report(isTupleType(siInt.type), "isTupleType");
report(isClass(siInt), "isClass");
report(isClassValue(siInt), "isClassValue");
report(isClassType(siInt.type), "isClassType");
report(isRecord(siInt), "isRecord");
report(isRecordValue(siInt), "isRecordValue");
report(isRecordType(siInt.type), "isRecordType");
report(isUnion(siInt), "isUnion");
report(isUnionValue(siInt), "isUnionValue");
report(isUnionType(siInt.type), "isUnionType");
report(isRange(siInt), "isRange");
report(isRangeValue(siInt), "isRangeValue");
report(isRangeType(siInt.type), "isRangeType");
report(isDmap(siInt), "isDmap");
report(isDmapValue(siInt), "isDmapValue");
report(isDmapType(siInt.type), "isDmapType");
report(isDomain(siInt), "isDomain");
report(isDomainValue(siInt), "isDomainValue");
report(isDomainType(siInt.type), "isDomainType");
report(isArray(siInt), "isArray");
report(isArrayValue(siInt), "isArrayValue");
report(isArrayType(siInt.type), "isArrayType");
report(isSync(siInt), "isSync");
report(isSyncValue(siInt), "isSyncValue");
report(isSyncType(siInt.type), "isSyncType");
report(isSingle(siInt), "isSingle");
report(isSingleValue(siInt), "isSingleValue");
report(isSingleType(siInt.type), "isSingleType");
report(isAtomic(siInt), "isAtomic");
report(isAtomicValue(siInt), "isAtomicValue");
report(isAtomicType(siInt.type), "isAtomicType");
writeln("  .");

write("single real (siReal)");
report(isBool(siReal), "isBool");
report(isBoolValue(siReal), "isBoolValue");
report(isBoolType(siReal.type), "isBoolType");
report(isInt(siReal), "isInt");
report(isIntValue(siReal), "isIntValue");
report(isIntType(siReal.type), "isIntType");
report(isUint(siReal), "isUint");
report(isUintValue(siReal), "isUintValue");
report(isUintType(siReal.type), "isUintType");
report(isReal(siReal), "isReal");
report(isRealValue(siReal), "isRealValue");
report(isRealType(siReal.type), "isRealType");
report(isImag(siReal), "isImag");
report(isImagValue(siReal), "isImagValue");
report(isImagType(siReal.type), "isImagType");
report(isComplex(siReal), "isComplex");
report(isComplexValue(siReal), "isComplexValue");
report(isComplexType(siReal.type), "isComplexType");
report(isString(siReal), "isString");
report(isStringValue(siReal), "isStringValue");
report(isStringType(siReal.type), "isStringType");
report(isEnum(siReal), "isEnum");
report(isEnumValue(siReal), "isEnumValue");
report(isEnumType(siReal.type), "isEnumType");
report(isTuple(siReal), "isTuple");
report(isTupleValue(siReal), "isTupleValue");
report(isTupleType(siReal.type), "isTupleType");
report(isClass(siReal), "isClass");
report(isClassValue(siReal), "isClassValue");
report(isClassType(siReal.type), "isClassType");
report(isRecord(siReal), "isRecord");
report(isRecordValue(siReal), "isRecordValue");
report(isRecordType(siReal.type), "isRecordType");
report(isUnion(siReal), "isUnion");
report(isUnionValue(siReal), "isUnionValue");
report(isUnionType(siReal.type), "isUnionType");
report(isRange(siReal), "isRange");
report(isRangeValue(siReal), "isRangeValue");
report(isRangeType(siReal.type), "isRangeType");
report(isDmap(siReal), "isDmap");
report(isDmapValue(siReal), "isDmapValue");
report(isDmapType(siReal.type), "isDmapType");
report(isDomain(siReal), "isDomain");
report(isDomainValue(siReal), "isDomainValue");
report(isDomainType(siReal.type), "isDomainType");
report(isArray(siReal), "isArray");
report(isArrayValue(siReal), "isArrayValue");
report(isArrayType(siReal.type), "isArrayType");
report(isSync(siReal), "isSync");
report(isSyncValue(siReal), "isSyncValue");
report(isSyncType(siReal.type), "isSyncType");
report(isSingle(siReal), "isSingle");
report(isSingleValue(siReal), "isSingleValue");
report(isSingleType(siReal.type), "isSingleType");
report(isAtomic(siReal), "isAtomic");
report(isAtomicValue(siReal), "isAtomicValue");
report(isAtomicType(siReal.type), "isAtomicType");
writeln("  .");

write("atomic int (aInt)");
report(isBool(aInt), "isBool");
report(isBoolValue(aInt), "isBoolValue");
report(isBoolType(aInt.type), "isBoolType");
report(isInt(aInt), "isInt");
report(isIntValue(aInt), "isIntValue");
report(isIntType(aInt.type), "isIntType");
report(isUint(aInt), "isUint");
report(isUintValue(aInt), "isUintValue");
report(isUintType(aInt.type), "isUintType");
report(isReal(aInt), "isReal");
report(isRealValue(aInt), "isRealValue");
report(isRealType(aInt.type), "isRealType");
report(isImag(aInt), "isImag");
report(isImagValue(aInt), "isImagValue");
report(isImagType(aInt.type), "isImagType");
report(isComplex(aInt), "isComplex");
report(isComplexValue(aInt), "isComplexValue");
report(isComplexType(aInt.type), "isComplexType");
report(isString(aInt), "isString");
report(isStringValue(aInt), "isStringValue");
report(isStringType(aInt.type), "isStringType");
report(isEnum(aInt), "isEnum");
report(isEnumValue(aInt), "isEnumValue");
report(isEnumType(aInt.type), "isEnumType");
report(isTuple(aInt), "isTuple");
report(isTupleValue(aInt), "isTupleValue");
report(isTupleType(aInt.type), "isTupleType");
report(isClass(aInt), "isClass");
report(isClassValue(aInt), "isClassValue");
report(isClassType(aInt.type), "isClassType");
report(isRecord(aInt), "isRecord");
report(isRecordValue(aInt), "isRecordValue");
report(isRecordType(aInt.type), "isRecordType");
report(isUnion(aInt), "isUnion");
report(isUnionValue(aInt), "isUnionValue");
report(isUnionType(aInt.type), "isUnionType");
report(isRange(aInt), "isRange");
report(isRangeValue(aInt), "isRangeValue");
report(isRangeType(aInt.type), "isRangeType");
report(isDmap(aInt), "isDmap");
report(isDmapValue(aInt), "isDmapValue");
report(isDmapType(aInt.type), "isDmapType");
report(isDomain(aInt), "isDomain");
report(isDomainValue(aInt), "isDomainValue");
report(isDomainType(aInt.type), "isDomainType");
report(isArray(aInt), "isArray");
report(isArrayValue(aInt), "isArrayValue");
report(isArrayType(aInt.type), "isArrayType");
report(isSync(aInt), "isSync");
report(isSyncValue(aInt), "isSyncValue");
report(isSyncType(aInt.type), "isSyncType");
report(isSingle(aInt), "isSingle");
report(isSingleValue(aInt), "isSingleValue");
report(isSingleType(aInt.type), "isSingleType");
report(isAtomic(aInt), "isAtomic");
report(isAtomicValue(aInt), "isAtomicValue");
report(isAtomicType(aInt.type), "isAtomicType");
writeln("  .");

write("atomic real (aReal)");
report(isBool(aReal), "isBool");
report(isBoolValue(aReal), "isBoolValue");
report(isBoolType(aReal.type), "isBoolType");
report(isInt(aReal), "isInt");
report(isIntValue(aReal), "isIntValue");
report(isIntType(aReal.type), "isIntType");
report(isUint(aReal), "isUint");
report(isUintValue(aReal), "isUintValue");
report(isUintType(aReal.type), "isUintType");
report(isReal(aReal), "isReal");
report(isRealValue(aReal), "isRealValue");
report(isRealType(aReal.type), "isRealType");
report(isImag(aReal), "isImag");
report(isImagValue(aReal), "isImagValue");
report(isImagType(aReal.type), "isImagType");
report(isComplex(aReal), "isComplex");
report(isComplexValue(aReal), "isComplexValue");
report(isComplexType(aReal.type), "isComplexType");
report(isString(aReal), "isString");
report(isStringValue(aReal), "isStringValue");
report(isStringType(aReal.type), "isStringType");
report(isEnum(aReal), "isEnum");
report(isEnumValue(aReal), "isEnumValue");
report(isEnumType(aReal.type), "isEnumType");
report(isTuple(aReal), "isTuple");
report(isTupleValue(aReal), "isTupleValue");
report(isTupleType(aReal.type), "isTupleType");
report(isClass(aReal), "isClass");
report(isClassValue(aReal), "isClassValue");
report(isClassType(aReal.type), "isClassType");
report(isRecord(aReal), "isRecord");
report(isRecordValue(aReal), "isRecordValue");
report(isRecordType(aReal.type), "isRecordType");
report(isUnion(aReal), "isUnion");
report(isUnionValue(aReal), "isUnionValue");
report(isUnionType(aReal.type), "isUnionType");
report(isRange(aReal), "isRange");
report(isRangeValue(aReal), "isRangeValue");
report(isRangeType(aReal.type), "isRangeType");
report(isDmap(aReal), "isDmap");
report(isDmapValue(aReal), "isDmapValue");
report(isDmapType(aReal.type), "isDmapType");
report(isDomain(aReal), "isDomain");
report(isDomainValue(aReal), "isDomainValue");
report(isDomainType(aReal.type), "isDomainType");
report(isArray(aReal), "isArray");
report(isArrayValue(aReal), "isArrayValue");
report(isArrayType(aReal.type), "isArrayType");
report(isSync(aReal), "isSync");
report(isSyncValue(aReal), "isSyncValue");
report(isSyncType(aReal.type), "isSyncType");
report(isSingle(aReal), "isSingle");
report(isSingleValue(aReal), "isSingleValue");
report(isSingleType(aReal.type), "isSingleType");
report(isAtomic(aReal), "isAtomic");
report(isAtomicValue(aReal), "isAtomicValue");
report(isAtomicType(aReal.type), "isAtomicType");
writeln("  .");

writeln();

write("isIntegral: ");
report(isIntegral(b0), "b0");
report(isIntegral(b8), "b8");
report(isIntegral(b16), "b16");
report(isIntegral(b32), "b32");
report(isIntegral(b64), "b64");
report(isIntegral(i8), "i8");
report(isIntegral(i16), "i16");
report(isIntegral(i32), "i32");
report(isIntegral(i64), "i64");
report(isIntegral(u8), "u8");
report(isIntegral(u16), "u16");
report(isIntegral(u32), "u32");
report(isIntegral(u64), "u64");
report(isIntegral(r32), "r32");
report(isIntegral(r64), "r64");
report(isIntegral(m32), "m32");
report(isIntegral(m64), "m64");
report(isIntegral(z64), "z64");
report(isIntegral(z128), "z128");
report(isIntegral(str), "str");
report(isIntegral(enm), "enm");
report(isIntegral(homtup), "homtup");
report(isIntegral(hettup), "hettup");
report(isIntegral(cls), "cls");
report(isIntegral(rec1), "rec1");
report(isIntegral(unn), "unn");
report(isIntegral(rng1), "rng1");
report(isIntegral(rng2), "rng2");
report(isIntegral(dmp), "dmp");
report(isIntegral(dom1), "dom1");
report(isIntegral(dom2), "dom2");
report(isIntegral(arr1), "arr1");
report(isIntegral(arr2), "arr2");
report(isIntegral(syInt), "syInt");
report(isIntegral(syReal), "syReal");
report(isIntegral(siInt), "siInt");
report(isIntegral(siReal), "siReal");
report(isIntegral(aInt), "aInt");
report(isIntegral(aReal), "aReal");
writeln("  .");

write("isIntegralValue: ");
report(isIntegralValue(b0), "b0");
report(isIntegralValue(b8), "b8");
report(isIntegralValue(b16), "b16");
report(isIntegralValue(b32), "b32");
report(isIntegralValue(b64), "b64");
report(isIntegralValue(i8), "i8");
report(isIntegralValue(i16), "i16");
report(isIntegralValue(i32), "i32");
report(isIntegralValue(i64), "i64");
report(isIntegralValue(u8), "u8");
report(isIntegralValue(u16), "u16");
report(isIntegralValue(u32), "u32");
report(isIntegralValue(u64), "u64");
report(isIntegralValue(r32), "r32");
report(isIntegralValue(r64), "r64");
report(isIntegralValue(m32), "m32");
report(isIntegralValue(m64), "m64");
report(isIntegralValue(z64), "z64");
report(isIntegralValue(z128), "z128");
report(isIntegralValue(str), "str");
report(isIntegralValue(enm), "enm");
report(isIntegralValue(homtup), "homtup");
report(isIntegralValue(hettup), "hettup");
report(isIntegralValue(cls), "cls");
report(isIntegralValue(rec1), "rec1");
report(isIntegralValue(unn), "unn");
report(isIntegralValue(rng1), "rng1");
report(isIntegralValue(rng2), "rng2");
report(isIntegralValue(dmp), "dmp");
report(isIntegralValue(dom1), "dom1");
report(isIntegralValue(dom2), "dom2");
report(isIntegralValue(arr1), "arr1");
report(isIntegralValue(arr2), "arr2");
report(isIntegralValue(syInt), "syInt");
report(isIntegralValue(syReal), "syReal");
report(isIntegralValue(siInt), "siInt");
report(isIntegralValue(siReal), "siReal");
report(isIntegralValue(aInt), "aInt");
report(isIntegralValue(aReal), "aReal");
writeln("  .");

write("isIntegralType: ");
report(isIntegralType(b0.type), "b0");
report(isIntegralType(b8.type), "b8");
report(isIntegralType(b16.type), "b16");
report(isIntegralType(b32.type), "b32");
report(isIntegralType(b64.type), "b64");
report(isIntegralType(i8.type), "i8");
report(isIntegralType(i16.type), "i16");
report(isIntegralType(i32.type), "i32");
report(isIntegralType(i64.type), "i64");
report(isIntegralType(u8.type), "u8");
report(isIntegralType(u16.type), "u16");
report(isIntegralType(u32.type), "u32");
report(isIntegralType(u64.type), "u64");
report(isIntegralType(r32.type), "r32");
report(isIntegralType(r64.type), "r64");
report(isIntegralType(m32.type), "m32");
report(isIntegralType(m64.type), "m64");
report(isIntegralType(z64.type), "z64");
report(isIntegralType(z128.type), "z128");
report(isIntegralType(str.type), "str");
report(isIntegralType(enm.type), "enm");
report(isIntegralType(homtup.type), "homtup");
report(isIntegralType(hettup.type), "hettup");
report(isIntegralType(cls.type), "cls");
report(isIntegralType(rec1.type), "rec1");
report(isIntegralType(unn.type), "unn");
report(isIntegralType(rng1.type), "rng1");
report(isIntegralType(rng2.type), "rng2");
report(isIntegralType(dmp.type), "dmp");
report(isIntegralType(dom1.type), "dom1");
report(isIntegralType(dom2.type), "dom2");
report(isIntegralType(arr1.type), "arr1");
report(isIntegralType(arr2.type), "arr2");
report(isIntegralType(syInt.type), "syInt");
report(isIntegralType(syReal.type), "syReal");
report(isIntegralType(siInt.type), "siInt");
report(isIntegralType(siReal.type), "siReal");
report(isIntegralType(aInt.type), "aInt");
report(isIntegralType(aReal.type), "aReal");
writeln("  .");

write("isFloat: ");
report(isFloat(b0), "b0");
report(isFloat(b8), "b8");
report(isFloat(b16), "b16");
report(isFloat(b32), "b32");
report(isFloat(b64), "b64");
report(isFloat(i8), "i8");
report(isFloat(i16), "i16");
report(isFloat(i32), "i32");
report(isFloat(i64), "i64");
report(isFloat(u8), "u8");
report(isFloat(u16), "u16");
report(isFloat(u32), "u32");
report(isFloat(u64), "u64");
report(isFloat(r32), "r32");
report(isFloat(r64), "r64");
report(isFloat(m32), "m32");
report(isFloat(m64), "m64");
report(isFloat(z64), "z64");
report(isFloat(z128), "z128");
report(isFloat(str), "str");
report(isFloat(enm), "enm");
report(isFloat(homtup), "homtup");
report(isFloat(hettup), "hettup");
report(isFloat(cls), "cls");
report(isFloat(rec1), "rec1");
report(isFloat(unn), "unn");
report(isFloat(rng1), "rng1");
report(isFloat(rng2), "rng2");
report(isFloat(dmp), "dmp");
report(isFloat(dom1), "dom1");
report(isFloat(dom2), "dom2");
report(isFloat(arr1), "arr1");
report(isFloat(arr2), "arr2");
report(isFloat(syInt), "syInt");
report(isFloat(syReal), "syReal");
report(isFloat(siInt), "siInt");
report(isFloat(siReal), "siReal");
report(isFloat(aInt), "aInt");
report(isFloat(aReal), "aReal");
writeln("  .");

write("isFloatValue: ");
report(isFloatValue(b0), "b0");
report(isFloatValue(b8), "b8");
report(isFloatValue(b16), "b16");
report(isFloatValue(b32), "b32");
report(isFloatValue(b64), "b64");
report(isFloatValue(i8), "i8");
report(isFloatValue(i16), "i16");
report(isFloatValue(i32), "i32");
report(isFloatValue(i64), "i64");
report(isFloatValue(u8), "u8");
report(isFloatValue(u16), "u16");
report(isFloatValue(u32), "u32");
report(isFloatValue(u64), "u64");
report(isFloatValue(r32), "r32");
report(isFloatValue(r64), "r64");
report(isFloatValue(m32), "m32");
report(isFloatValue(m64), "m64");
report(isFloatValue(z64), "z64");
report(isFloatValue(z128), "z128");
report(isFloatValue(str), "str");
report(isFloatValue(enm), "enm");
report(isFloatValue(homtup), "homtup");
report(isFloatValue(hettup), "hettup");
report(isFloatValue(cls), "cls");
report(isFloatValue(rec1), "rec1");
report(isFloatValue(unn), "unn");
report(isFloatValue(rng1), "rng1");
report(isFloatValue(rng2), "rng2");
report(isFloatValue(dmp), "dmp");
report(isFloatValue(dom1), "dom1");
report(isFloatValue(dom2), "dom2");
report(isFloatValue(arr1), "arr1");
report(isFloatValue(arr2), "arr2");
report(isFloatValue(syInt), "syInt");
report(isFloatValue(syReal), "syReal");
report(isFloatValue(siInt), "siInt");
report(isFloatValue(siReal), "siReal");
report(isFloatValue(aInt), "aInt");
report(isFloatValue(aReal), "aReal");
writeln("  .");

write("isFloatType: ");
report(isFloatType(b0.type), "b0");
report(isFloatType(b8.type), "b8");
report(isFloatType(b16.type), "b16");
report(isFloatType(b32.type), "b32");
report(isFloatType(b64.type), "b64");
report(isFloatType(i8.type), "i8");
report(isFloatType(i16.type), "i16");
report(isFloatType(i32.type), "i32");
report(isFloatType(i64.type), "i64");
report(isFloatType(u8.type), "u8");
report(isFloatType(u16.type), "u16");
report(isFloatType(u32.type), "u32");
report(isFloatType(u64.type), "u64");
report(isFloatType(r32.type), "r32");
report(isFloatType(r64.type), "r64");
report(isFloatType(m32.type), "m32");
report(isFloatType(m64.type), "m64");
report(isFloatType(z64.type), "z64");
report(isFloatType(z128.type), "z128");
report(isFloatType(str.type), "str");
report(isFloatType(enm.type), "enm");
report(isFloatType(homtup.type), "homtup");
report(isFloatType(hettup.type), "hettup");
report(isFloatType(cls.type), "cls");
report(isFloatType(rec1.type), "rec1");
report(isFloatType(unn.type), "unn");
report(isFloatType(rng1.type), "rng1");
report(isFloatType(rng2.type), "rng2");
report(isFloatType(dmp.type), "dmp");
report(isFloatType(dom1.type), "dom1");
report(isFloatType(dom2.type), "dom2");
report(isFloatType(arr1.type), "arr1");
report(isFloatType(arr2.type), "arr2");
report(isFloatType(syInt.type), "syInt");
report(isFloatType(syReal.type), "syReal");
report(isFloatType(siInt.type), "siInt");
report(isFloatType(siReal.type), "siReal");
report(isFloatType(aInt.type), "aInt");
report(isFloatType(aReal.type), "aReal");
writeln("  .");

write("isNumeric: ");
report(isNumeric(b0), "b0");
report(isNumeric(b8), "b8");
report(isNumeric(b16), "b16");
report(isNumeric(b32), "b32");
report(isNumeric(b64), "b64");
report(isNumeric(i8), "i8");
report(isNumeric(i16), "i16");
report(isNumeric(i32), "i32");
report(isNumeric(i64), "i64");
report(isNumeric(u8), "u8");
report(isNumeric(u16), "u16");
report(isNumeric(u32), "u32");
report(isNumeric(u64), "u64");
report(isNumeric(r32), "r32");
report(isNumeric(r64), "r64");
report(isNumeric(m32), "m32");
report(isNumeric(m64), "m64");
report(isNumeric(z64), "z64");
report(isNumeric(z128), "z128");
report(isNumeric(str), "str");
report(isNumeric(enm), "enm");
report(isNumeric(homtup), "homtup");
report(isNumeric(hettup), "hettup");
report(isNumeric(cls), "cls");
report(isNumeric(rec1), "rec1");
report(isNumeric(unn), "unn");
report(isNumeric(rng1), "rng1");
report(isNumeric(rng2), "rng2");
report(isNumeric(dmp), "dmp");
report(isNumeric(dom1), "dom1");
report(isNumeric(dom2), "dom2");
report(isNumeric(arr1), "arr1");
report(isNumeric(arr2), "arr2");
report(isNumeric(syInt), "syInt");
report(isNumeric(syReal), "syReal");
report(isNumeric(siInt), "siInt");
report(isNumeric(siReal), "siReal");
report(isNumeric(aInt), "aInt");
report(isNumeric(aReal), "aReal");
writeln("  .");

write("isNumericValue: ");
report(isNumericValue(b0), "b0");
report(isNumericValue(b8), "b8");
report(isNumericValue(b16), "b16");
report(isNumericValue(b32), "b32");
report(isNumericValue(b64), "b64");
report(isNumericValue(i8), "i8");
report(isNumericValue(i16), "i16");
report(isNumericValue(i32), "i32");
report(isNumericValue(i64), "i64");
report(isNumericValue(u8), "u8");
report(isNumericValue(u16), "u16");
report(isNumericValue(u32), "u32");
report(isNumericValue(u64), "u64");
report(isNumericValue(r32), "r32");
report(isNumericValue(r64), "r64");
report(isNumericValue(m32), "m32");
report(isNumericValue(m64), "m64");
report(isNumericValue(z64), "z64");
report(isNumericValue(z128), "z128");
report(isNumericValue(str), "str");
report(isNumericValue(enm), "enm");
report(isNumericValue(homtup), "homtup");
report(isNumericValue(hettup), "hettup");
report(isNumericValue(cls), "cls");
report(isNumericValue(rec1), "rec1");
report(isNumericValue(unn), "unn");
report(isNumericValue(rng1), "rng1");
report(isNumericValue(rng2), "rng2");
report(isNumericValue(dmp), "dmp");
report(isNumericValue(dom1), "dom1");
report(isNumericValue(dom2), "dom2");
report(isNumericValue(arr1), "arr1");
report(isNumericValue(arr2), "arr2");
report(isNumericValue(syInt), "syInt");
report(isNumericValue(syReal), "syReal");
report(isNumericValue(siInt), "siInt");
report(isNumericValue(siReal), "siReal");
report(isNumericValue(aInt), "aInt");
report(isNumericValue(aReal), "aReal");
writeln("  .");

write("isNumericType: ");
report(isNumericType(b0.type), "b0");
report(isNumericType(b8.type), "b8");
report(isNumericType(b16.type), "b16");
report(isNumericType(b32.type), "b32");
report(isNumericType(b64.type), "b64");
report(isNumericType(i8.type), "i8");
report(isNumericType(i16.type), "i16");
report(isNumericType(i32.type), "i32");
report(isNumericType(i64.type), "i64");
report(isNumericType(u8.type), "u8");
report(isNumericType(u16.type), "u16");
report(isNumericType(u32.type), "u32");
report(isNumericType(u64.type), "u64");
report(isNumericType(r32.type), "r32");
report(isNumericType(r64.type), "r64");
report(isNumericType(m32.type), "m32");
report(isNumericType(m64.type), "m64");
report(isNumericType(z64.type), "z64");
report(isNumericType(z128.type), "z128");
report(isNumericType(str.type), "str");
report(isNumericType(enm.type), "enm");
report(isNumericType(homtup.type), "homtup");
report(isNumericType(hettup.type), "hettup");
report(isNumericType(cls.type), "cls");
report(isNumericType(rec1.type), "rec1");
report(isNumericType(unn.type), "unn");
report(isNumericType(rng1.type), "rng1");
report(isNumericType(rng2.type), "rng2");
report(isNumericType(dmp.type), "dmp");
report(isNumericType(dom1.type), "dom1");
report(isNumericType(dom2.type), "dom2");
report(isNumericType(arr1.type), "arr1");
report(isNumericType(arr2.type), "arr2");
report(isNumericType(syInt.type), "syInt");
report(isNumericType(syReal.type), "syReal");
report(isNumericType(siInt.type), "siInt");
report(isNumericType(siReal.type), "siReal");
report(isNumericType(aInt.type), "aInt");
report(isNumericType(aReal.type), "aReal");
writeln("  .");

write("isPrimitive: ");
report(isPrimitive(b0), "b0");
report(isPrimitive(b8), "b8");
report(isPrimitive(b16), "b16");
report(isPrimitive(b32), "b32");
report(isPrimitive(b64), "b64");
report(isPrimitive(i8), "i8");
report(isPrimitive(i16), "i16");
report(isPrimitive(i32), "i32");
report(isPrimitive(i64), "i64");
report(isPrimitive(u8), "u8");
report(isPrimitive(u16), "u16");
report(isPrimitive(u32), "u32");
report(isPrimitive(u64), "u64");
report(isPrimitive(r32), "r32");
report(isPrimitive(r64), "r64");
report(isPrimitive(m32), "m32");
report(isPrimitive(m64), "m64");
report(isPrimitive(z64), "z64");
report(isPrimitive(z128), "z128");
report(isPrimitive(str), "str");
report(isPrimitive(enm), "enm");
report(isPrimitive(homtup), "homtup");
report(isPrimitive(hettup), "hettup");
report(isPrimitive(cls), "cls");
report(isPrimitive(rec1), "rec1");
report(isPrimitive(unn), "unn");
report(isPrimitive(rng1), "rng1");
report(isPrimitive(rng2), "rng2");
report(isPrimitive(dmp), "dmp");
report(isPrimitive(dom1), "dom1");
report(isPrimitive(dom2), "dom2");
report(isPrimitive(arr1), "arr1");
report(isPrimitive(arr2), "arr2");
report(isPrimitive(syInt), "syInt");
report(isPrimitive(syReal), "syReal");
report(isPrimitive(siInt), "siInt");
report(isPrimitive(siReal), "siReal");
report(isPrimitive(aInt), "aInt");
report(isPrimitive(aReal), "aReal");
writeln("  .");

write("isPrimitiveValue: ");
report(isPrimitiveValue(b0), "b0");
report(isPrimitiveValue(b8), "b8");
report(isPrimitiveValue(b16), "b16");
report(isPrimitiveValue(b32), "b32");
report(isPrimitiveValue(b64), "b64");
report(isPrimitiveValue(i8), "i8");
report(isPrimitiveValue(i16), "i16");
report(isPrimitiveValue(i32), "i32");
report(isPrimitiveValue(i64), "i64");
report(isPrimitiveValue(u8), "u8");
report(isPrimitiveValue(u16), "u16");
report(isPrimitiveValue(u32), "u32");
report(isPrimitiveValue(u64), "u64");
report(isPrimitiveValue(r32), "r32");
report(isPrimitiveValue(r64), "r64");
report(isPrimitiveValue(m32), "m32");
report(isPrimitiveValue(m64), "m64");
report(isPrimitiveValue(z64), "z64");
report(isPrimitiveValue(z128), "z128");
report(isPrimitiveValue(str), "str");
report(isPrimitiveValue(enm), "enm");
report(isPrimitiveValue(homtup), "homtup");
report(isPrimitiveValue(hettup), "hettup");
report(isPrimitiveValue(cls), "cls");
report(isPrimitiveValue(rec1), "rec1");
report(isPrimitiveValue(unn), "unn");
report(isPrimitiveValue(rng1), "rng1");
report(isPrimitiveValue(rng2), "rng2");
report(isPrimitiveValue(dmp), "dmp");
report(isPrimitiveValue(dom1), "dom1");
report(isPrimitiveValue(dom2), "dom2");
report(isPrimitiveValue(arr1), "arr1");
report(isPrimitiveValue(arr2), "arr2");
report(isPrimitiveValue(syInt), "syInt");
report(isPrimitiveValue(syReal), "syReal");
report(isPrimitiveValue(siInt), "siInt");
report(isPrimitiveValue(siReal), "siReal");
report(isPrimitiveValue(aInt), "aInt");
report(isPrimitiveValue(aReal), "aReal");
writeln("  .");

write("isPrimitiveType: ");
report(isPrimitiveType(b0.type), "b0");
report(isPrimitiveType(b8.type), "b8");
report(isPrimitiveType(b16.type), "b16");
report(isPrimitiveType(b32.type), "b32");
report(isPrimitiveType(b64.type), "b64");
report(isPrimitiveType(i8.type), "i8");
report(isPrimitiveType(i16.type), "i16");
report(isPrimitiveType(i32.type), "i32");
report(isPrimitiveType(i64.type), "i64");
report(isPrimitiveType(u8.type), "u8");
report(isPrimitiveType(u16.type), "u16");
report(isPrimitiveType(u32.type), "u32");
report(isPrimitiveType(u64.type), "u64");
report(isPrimitiveType(r32.type), "r32");
report(isPrimitiveType(r64.type), "r64");
report(isPrimitiveType(m32.type), "m32");
report(isPrimitiveType(m64.type), "m64");
report(isPrimitiveType(z64.type), "z64");
report(isPrimitiveType(z128.type), "z128");
report(isPrimitiveType(str.type), "str");
report(isPrimitiveType(enm.type), "enm");
report(isPrimitiveType(homtup.type), "homtup");
report(isPrimitiveType(hettup.type), "hettup");
report(isPrimitiveType(cls.type), "cls");
report(isPrimitiveType(rec1.type), "rec1");
report(isPrimitiveType(unn.type), "unn");
report(isPrimitiveType(rng1.type), "rng1");
report(isPrimitiveType(rng2.type), "rng2");
report(isPrimitiveType(dmp.type), "dmp");
report(isPrimitiveType(dom1.type), "dom1");
report(isPrimitiveType(dom2.type), "dom2");
report(isPrimitiveType(arr1.type), "arr1");
report(isPrimitiveType(arr2.type), "arr2");
report(isPrimitiveType(syInt.type), "syInt");
report(isPrimitiveType(syReal.type), "syReal");
report(isPrimitiveType(siInt.type), "siInt");
report(isPrimitiveType(siReal.type), "siReal");
report(isPrimitiveType(aInt.type), "aInt");
report(isPrimitiveType(aReal.type), "aReal");
writeln("  .");
