bug: Initialization is not assignment, promoted version.

Following the introduction of default constructor calls, this test case fails
due to an incomplete implementation of the user-managed memory story.  The root
of the problem is that initialization (construction) should be in-place.  It
cannot be consistently accomplished using assignment.

That is because assignment and initialization differ fundamentally:
Copy-assignment assumes that its left operand has been initialized, while
copy-initialization assumes that it has not.  The distinction is especially
problematic when dealing with sync variables.

What this test case intends to implement is effectively:

  // Grab some memory
  ref Vertices = chpl_alloc(sizeof(Vertices)); 

  // Use the copy constructor to initialize that memory
  Vertices.Vertices([i in vertex_domain] new vertex_struct());

But it fails because the current implementation of the copy-constructor --
chpl__initCopy(ir: _iteratorRecord) [ChapelArray.chpl:2264] -- does its job by
allocating an array and the copying the elements of the initializer array into
it one-by-one.  The allocation occurs on line 2282, and the copy occurs on line
2291.  The bad news is that when the array is allocated, it is initialized.
Part of this initialization (quite reasonably) calls the constructor
vertex_struct() defined in the test case -- because that is what is supposed to
happen when a variable is default-initialized.  But as a result, the sync
variable in that struct is already full when we get to line 2291.  

Thus, the program hangs on the first element assignment and fails in that way.

The implementation direction that will simplify a correct solution for this
problem is to convert constructors (especially copy-constructors in this case)
into member functions, as viewed by the compiler.  When the target array can be
copy-initialized in place, the elements on the LHS in the equivalent of line
2291 will be uninitialized (and the contained syncvar "empty").  Copying the
initialized RHS element into it will then succeed.

