// DO NOT EDIT THIS FILE
// generate automatically: anymanaged.bash > anymanaged.chpl 

/////////////////////////////////////////////////////////////////////////////

class C {
  proc type mp() {}
}

proc type C.mA() {}
proc type (C).mB() {}
proc type (C?).mBn() {}
proc type (owned C).mo() {}
proc type (owned C?).mon() {}
proc type (shared C).ms() {}
proc type (shared C?).msn() {}
proc type (borrowed C).mb() {}
proc type (borrowed C?).mbn() {}
proc type (unmanaged C).mu() {}
proc type (unmanaged C?).mun() {}

class D : C { }

class E { }

record R { }

proc sep()           { compilerWarning("", 1); }
proc sepp(type t)    { compilerWarning("========= ", t:string, " =========", 1); }

/////////////////////////////////////////////////////////////////////////////

sepp(C);

sep();

compilerWarning("           C  .mp()  ", __primitive("method call resolves",            C  , "mp"):string);
compilerWarning("          (C?).mp()  ", __primitive("method call resolves",           (C?), "mp"):string);
compilerWarning("    (owned C ).mp()  ", __primitive("method call resolves",     (owned C ), "mp"):string);
compilerWarning("    (owned C?).mp()  ", __primitive("method call resolves",     (owned C?), "mp"):string);
compilerWarning("   (shared C ).mp()  ", __primitive("method call resolves",    (shared C ), "mp"):string);
compilerWarning("   (shared C?).mp()  ", __primitive("method call resolves",    (shared C?), "mp"):string);
compilerWarning(" (borrowed C ).mp()  ", __primitive("method call resolves",  (borrowed C ), "mp"):string);
compilerWarning(" (borrowed C?).mp()  ", __primitive("method call resolves",  (borrowed C?), "mp"):string);
compilerWarning("(unmanaged C ).mp()  ", __primitive("method call resolves", (unmanaged C ), "mp"):string);
compilerWarning("(unmanaged C?).mp()  ", __primitive("method call resolves", (unmanaged C?), "mp"):string);

sep();

compilerWarning("           C  .mA()  ", __primitive("method call resolves",            C  , "mA"):string);
compilerWarning("          (C?).mA()  ", __primitive("method call resolves",           (C?), "mA"):string);
compilerWarning("    (owned C ).mA()  ", __primitive("method call resolves",     (owned C ), "mA"):string);
compilerWarning("    (owned C?).mA()  ", __primitive("method call resolves",     (owned C?), "mA"):string);
compilerWarning("   (shared C ).mA()  ", __primitive("method call resolves",    (shared C ), "mA"):string);
compilerWarning("   (shared C?).mA()  ", __primitive("method call resolves",    (shared C?), "mA"):string);
compilerWarning(" (borrowed C ).mA()  ", __primitive("method call resolves",  (borrowed C ), "mA"):string);
compilerWarning(" (borrowed C?).mA()  ", __primitive("method call resolves",  (borrowed C?), "mA"):string);
compilerWarning("(unmanaged C ).mA()  ", __primitive("method call resolves", (unmanaged C ), "mA"):string);
compilerWarning("(unmanaged C?).mA()  ", __primitive("method call resolves", (unmanaged C?), "mA"):string);

sep();

compilerWarning("           C  .mB()  ", __primitive("method call resolves",            C  , "mB"):string);
compilerWarning("          (C?).mB()  ", __primitive("method call resolves",           (C?), "mB"):string);
compilerWarning("    (owned C ).mB()  ", __primitive("method call resolves",     (owned C ), "mB"):string);
compilerWarning("    (owned C?).mB()  ", __primitive("method call resolves",     (owned C?), "mB"):string);
compilerWarning("   (shared C ).mB()  ", __primitive("method call resolves",    (shared C ), "mB"):string);
compilerWarning("   (shared C?).mB()  ", __primitive("method call resolves",    (shared C?), "mB"):string);
compilerWarning(" (borrowed C ).mB()  ", __primitive("method call resolves",  (borrowed C ), "mB"):string);
compilerWarning(" (borrowed C?).mB()  ", __primitive("method call resolves",  (borrowed C?), "mB"):string);
compilerWarning("(unmanaged C ).mB()  ", __primitive("method call resolves", (unmanaged C ), "mB"):string);
compilerWarning("(unmanaged C?).mB()  ", __primitive("method call resolves", (unmanaged C?), "mB"):string);

sep();

compilerWarning("           C  .mBn()  ", __primitive("method call resolves",            C  , "mBn"):string);
compilerWarning("          (C?).mBn()  ", __primitive("method call resolves",           (C?), "mBn"):string);
compilerWarning("    (owned C ).mBn()  ", __primitive("method call resolves",     (owned C ), "mBn"):string);
compilerWarning("    (owned C?).mBn()  ", __primitive("method call resolves",     (owned C?), "mBn"):string);
compilerWarning("   (shared C ).mBn()  ", __primitive("method call resolves",    (shared C ), "mBn"):string);
compilerWarning("   (shared C?).mBn()  ", __primitive("method call resolves",    (shared C?), "mBn"):string);
compilerWarning(" (borrowed C ).mBn()  ", __primitive("method call resolves",  (borrowed C ), "mBn"):string);
compilerWarning(" (borrowed C?).mBn()  ", __primitive("method call resolves",  (borrowed C?), "mBn"):string);
compilerWarning("(unmanaged C ).mBn()  ", __primitive("method call resolves", (unmanaged C ), "mBn"):string);
compilerWarning("(unmanaged C?).mBn()  ", __primitive("method call resolves", (unmanaged C?), "mBn"):string);

sep();

compilerWarning("           C  .mo()  ", __primitive("method call resolves",            C  , "mo"):string);
compilerWarning("          (C?).mo()  ", __primitive("method call resolves",           (C?), "mo"):string);
compilerWarning("    (owned C ).mo()  ", __primitive("method call resolves",     (owned C ), "mo"):string);
compilerWarning("    (owned C?).mo()  ", __primitive("method call resolves",     (owned C?), "mo"):string);
compilerWarning("   (shared C ).mo()  ", __primitive("method call resolves",    (shared C ), "mo"):string);
compilerWarning("   (shared C?).mo()  ", __primitive("method call resolves",    (shared C?), "mo"):string);
compilerWarning(" (borrowed C ).mo()  ", __primitive("method call resolves",  (borrowed C ), "mo"):string);
compilerWarning(" (borrowed C?).mo()  ", __primitive("method call resolves",  (borrowed C?), "mo"):string);
compilerWarning("(unmanaged C ).mo()  ", __primitive("method call resolves", (unmanaged C ), "mo"):string);
compilerWarning("(unmanaged C?).mo()  ", __primitive("method call resolves", (unmanaged C?), "mo"):string);

sep();

compilerWarning("           C  .mon()  ", __primitive("method call resolves",            C  , "mon"):string);
compilerWarning("          (C?).mon()  ", __primitive("method call resolves",           (C?), "mon"):string);
compilerWarning("    (owned C ).mon()  ", __primitive("method call resolves",     (owned C ), "mon"):string);
compilerWarning("    (owned C?).mon()  ", __primitive("method call resolves",     (owned C?), "mon"):string);
compilerWarning("   (shared C ).mon()  ", __primitive("method call resolves",    (shared C ), "mon"):string);
compilerWarning("   (shared C?).mon()  ", __primitive("method call resolves",    (shared C?), "mon"):string);
compilerWarning(" (borrowed C ).mon()  ", __primitive("method call resolves",  (borrowed C ), "mon"):string);
compilerWarning(" (borrowed C?).mon()  ", __primitive("method call resolves",  (borrowed C?), "mon"):string);
compilerWarning("(unmanaged C ).mon()  ", __primitive("method call resolves", (unmanaged C ), "mon"):string);
compilerWarning("(unmanaged C?).mon()  ", __primitive("method call resolves", (unmanaged C?), "mon"):string);

sep();

compilerWarning("           C  .ms()  ", __primitive("method call resolves",            C  , "ms"):string);
compilerWarning("          (C?).ms()  ", __primitive("method call resolves",           (C?), "ms"):string);
compilerWarning("    (owned C ).ms()  ", __primitive("method call resolves",     (owned C ), "ms"):string);
compilerWarning("    (owned C?).ms()  ", __primitive("method call resolves",     (owned C?), "ms"):string);
compilerWarning("   (shared C ).ms()  ", __primitive("method call resolves",    (shared C ), "ms"):string);
compilerWarning("   (shared C?).ms()  ", __primitive("method call resolves",    (shared C?), "ms"):string);
compilerWarning(" (borrowed C ).ms()  ", __primitive("method call resolves",  (borrowed C ), "ms"):string);
compilerWarning(" (borrowed C?).ms()  ", __primitive("method call resolves",  (borrowed C?), "ms"):string);
compilerWarning("(unmanaged C ).ms()  ", __primitive("method call resolves", (unmanaged C ), "ms"):string);
compilerWarning("(unmanaged C?).ms()  ", __primitive("method call resolves", (unmanaged C?), "ms"):string);

sep();

compilerWarning("           C  .msn()  ", __primitive("method call resolves",            C  , "msn"):string);
compilerWarning("          (C?).msn()  ", __primitive("method call resolves",           (C?), "msn"):string);
compilerWarning("    (owned C ).msn()  ", __primitive("method call resolves",     (owned C ), "msn"):string);
compilerWarning("    (owned C?).msn()  ", __primitive("method call resolves",     (owned C?), "msn"):string);
compilerWarning("   (shared C ).msn()  ", __primitive("method call resolves",    (shared C ), "msn"):string);
compilerWarning("   (shared C?).msn()  ", __primitive("method call resolves",    (shared C?), "msn"):string);
compilerWarning(" (borrowed C ).msn()  ", __primitive("method call resolves",  (borrowed C ), "msn"):string);
compilerWarning(" (borrowed C?).msn()  ", __primitive("method call resolves",  (borrowed C?), "msn"):string);
compilerWarning("(unmanaged C ).msn()  ", __primitive("method call resolves", (unmanaged C ), "msn"):string);
compilerWarning("(unmanaged C?).msn()  ", __primitive("method call resolves", (unmanaged C?), "msn"):string);

sep();

compilerWarning("           C  .mb()  ", __primitive("method call resolves",            C  , "mb"):string);
compilerWarning("          (C?).mb()  ", __primitive("method call resolves",           (C?), "mb"):string);
compilerWarning("    (owned C ).mb()  ", __primitive("method call resolves",     (owned C ), "mb"):string);
compilerWarning("    (owned C?).mb()  ", __primitive("method call resolves",     (owned C?), "mb"):string);
compilerWarning("   (shared C ).mb()  ", __primitive("method call resolves",    (shared C ), "mb"):string);
compilerWarning("   (shared C?).mb()  ", __primitive("method call resolves",    (shared C?), "mb"):string);
compilerWarning(" (borrowed C ).mb()  ", __primitive("method call resolves",  (borrowed C ), "mb"):string);
compilerWarning(" (borrowed C?).mb()  ", __primitive("method call resolves",  (borrowed C?), "mb"):string);
compilerWarning("(unmanaged C ).mb()  ", __primitive("method call resolves", (unmanaged C ), "mb"):string);
compilerWarning("(unmanaged C?).mb()  ", __primitive("method call resolves", (unmanaged C?), "mb"):string);

sep();

compilerWarning("           C  .mbn()  ", __primitive("method call resolves",            C  , "mbn"):string);
compilerWarning("          (C?).mbn()  ", __primitive("method call resolves",           (C?), "mbn"):string);
compilerWarning("    (owned C ).mbn()  ", __primitive("method call resolves",     (owned C ), "mbn"):string);
compilerWarning("    (owned C?).mbn()  ", __primitive("method call resolves",     (owned C?), "mbn"):string);
compilerWarning("   (shared C ).mbn()  ", __primitive("method call resolves",    (shared C ), "mbn"):string);
compilerWarning("   (shared C?).mbn()  ", __primitive("method call resolves",    (shared C?), "mbn"):string);
compilerWarning(" (borrowed C ).mbn()  ", __primitive("method call resolves",  (borrowed C ), "mbn"):string);
compilerWarning(" (borrowed C?).mbn()  ", __primitive("method call resolves",  (borrowed C?), "mbn"):string);
compilerWarning("(unmanaged C ).mbn()  ", __primitive("method call resolves", (unmanaged C ), "mbn"):string);
compilerWarning("(unmanaged C?).mbn()  ", __primitive("method call resolves", (unmanaged C?), "mbn"):string);

sep();

compilerWarning("           C  .mu()  ", __primitive("method call resolves",            C  , "mu"):string);
compilerWarning("          (C?).mu()  ", __primitive("method call resolves",           (C?), "mu"):string);
compilerWarning("    (owned C ).mu()  ", __primitive("method call resolves",     (owned C ), "mu"):string);
compilerWarning("    (owned C?).mu()  ", __primitive("method call resolves",     (owned C?), "mu"):string);
compilerWarning("   (shared C ).mu()  ", __primitive("method call resolves",    (shared C ), "mu"):string);
compilerWarning("   (shared C?).mu()  ", __primitive("method call resolves",    (shared C?), "mu"):string);
compilerWarning(" (borrowed C ).mu()  ", __primitive("method call resolves",  (borrowed C ), "mu"):string);
compilerWarning(" (borrowed C?).mu()  ", __primitive("method call resolves",  (borrowed C?), "mu"):string);
compilerWarning("(unmanaged C ).mu()  ", __primitive("method call resolves", (unmanaged C ), "mu"):string);
compilerWarning("(unmanaged C?).mu()  ", __primitive("method call resolves", (unmanaged C?), "mu"):string);

sep();

compilerWarning("           C  .mun()  ", __primitive("method call resolves",            C  , "mun"):string);
compilerWarning("          (C?).mun()  ", __primitive("method call resolves",           (C?), "mun"):string);
compilerWarning("    (owned C ).mun()  ", __primitive("method call resolves",     (owned C ), "mun"):string);
compilerWarning("    (owned C?).mun()  ", __primitive("method call resolves",     (owned C?), "mun"):string);
compilerWarning("   (shared C ).mun()  ", __primitive("method call resolves",    (shared C ), "mun"):string);
compilerWarning("   (shared C?).mun()  ", __primitive("method call resolves",    (shared C?), "mun"):string);
compilerWarning(" (borrowed C ).mun()  ", __primitive("method call resolves",  (borrowed C ), "mun"):string);
compilerWarning(" (borrowed C?).mun()  ", __primitive("method call resolves",  (borrowed C?), "mun"):string);
compilerWarning("(unmanaged C ).mun()  ", __primitive("method call resolves", (unmanaged C ), "mun"):string);
compilerWarning("(unmanaged C?).mun()  ", __primitive("method call resolves", (unmanaged C?), "mun"):string);

sep();

sepp(D);

sep();

compilerWarning("           D  .mp()  ", __primitive("method call resolves",            D  , "mp"):string);
compilerWarning("          (D?).mp()  ", __primitive("method call resolves",           (D?), "mp"):string);
compilerWarning("    (owned D ).mp()  ", __primitive("method call resolves",     (owned D ), "mp"):string);
compilerWarning("    (owned D?).mp()  ", __primitive("method call resolves",     (owned D?), "mp"):string);
compilerWarning("   (shared D ).mp()  ", __primitive("method call resolves",    (shared D ), "mp"):string);
compilerWarning("   (shared D?).mp()  ", __primitive("method call resolves",    (shared D?), "mp"):string);
compilerWarning(" (borrowed D ).mp()  ", __primitive("method call resolves",  (borrowed D ), "mp"):string);
compilerWarning(" (borrowed D?).mp()  ", __primitive("method call resolves",  (borrowed D?), "mp"):string);
compilerWarning("(unmanaged D ).mp()  ", __primitive("method call resolves", (unmanaged D ), "mp"):string);
compilerWarning("(unmanaged D?).mp()  ", __primitive("method call resolves", (unmanaged D?), "mp"):string);

sep();

compilerWarning("           D  .mA()  ", __primitive("method call resolves",            D  , "mA"):string);
compilerWarning("          (D?).mA()  ", __primitive("method call resolves",           (D?), "mA"):string);
compilerWarning("    (owned D ).mA()  ", __primitive("method call resolves",     (owned D ), "mA"):string);
compilerWarning("    (owned D?).mA()  ", __primitive("method call resolves",     (owned D?), "mA"):string);
compilerWarning("   (shared D ).mA()  ", __primitive("method call resolves",    (shared D ), "mA"):string);
compilerWarning("   (shared D?).mA()  ", __primitive("method call resolves",    (shared D?), "mA"):string);
compilerWarning(" (borrowed D ).mA()  ", __primitive("method call resolves",  (borrowed D ), "mA"):string);
compilerWarning(" (borrowed D?).mA()  ", __primitive("method call resolves",  (borrowed D?), "mA"):string);
compilerWarning("(unmanaged D ).mA()  ", __primitive("method call resolves", (unmanaged D ), "mA"):string);
compilerWarning("(unmanaged D?).mA()  ", __primitive("method call resolves", (unmanaged D?), "mA"):string);

sep();

compilerWarning("           D  .mB()  ", __primitive("method call resolves",            D  , "mB"):string);
compilerWarning("          (D?).mB()  ", __primitive("method call resolves",           (D?), "mB"):string);
compilerWarning("    (owned D ).mB()  ", __primitive("method call resolves",     (owned D ), "mB"):string);
compilerWarning("    (owned D?).mB()  ", __primitive("method call resolves",     (owned D?), "mB"):string);
compilerWarning("   (shared D ).mB()  ", __primitive("method call resolves",    (shared D ), "mB"):string);
compilerWarning("   (shared D?).mB()  ", __primitive("method call resolves",    (shared D?), "mB"):string);
compilerWarning(" (borrowed D ).mB()  ", __primitive("method call resolves",  (borrowed D ), "mB"):string);
compilerWarning(" (borrowed D?).mB()  ", __primitive("method call resolves",  (borrowed D?), "mB"):string);
compilerWarning("(unmanaged D ).mB()  ", __primitive("method call resolves", (unmanaged D ), "mB"):string);
compilerWarning("(unmanaged D?).mB()  ", __primitive("method call resolves", (unmanaged D?), "mB"):string);

sep();

compilerWarning("           D  .mBn()  ", __primitive("method call resolves",            D  , "mBn"):string);
compilerWarning("          (D?).mBn()  ", __primitive("method call resolves",           (D?), "mBn"):string);
compilerWarning("    (owned D ).mBn()  ", __primitive("method call resolves",     (owned D ), "mBn"):string);
compilerWarning("    (owned D?).mBn()  ", __primitive("method call resolves",     (owned D?), "mBn"):string);
compilerWarning("   (shared D ).mBn()  ", __primitive("method call resolves",    (shared D ), "mBn"):string);
compilerWarning("   (shared D?).mBn()  ", __primitive("method call resolves",    (shared D?), "mBn"):string);
compilerWarning(" (borrowed D ).mBn()  ", __primitive("method call resolves",  (borrowed D ), "mBn"):string);
compilerWarning(" (borrowed D?).mBn()  ", __primitive("method call resolves",  (borrowed D?), "mBn"):string);
compilerWarning("(unmanaged D ).mBn()  ", __primitive("method call resolves", (unmanaged D ), "mBn"):string);
compilerWarning("(unmanaged D?).mBn()  ", __primitive("method call resolves", (unmanaged D?), "mBn"):string);

sep();

compilerWarning("           D  .mo()  ", __primitive("method call resolves",            D  , "mo"):string);
compilerWarning("          (D?).mo()  ", __primitive("method call resolves",           (D?), "mo"):string);
compilerWarning("    (owned D ).mo()  ", __primitive("method call resolves",     (owned D ), "mo"):string);
compilerWarning("    (owned D?).mo()  ", __primitive("method call resolves",     (owned D?), "mo"):string);
compilerWarning("   (shared D ).mo()  ", __primitive("method call resolves",    (shared D ), "mo"):string);
compilerWarning("   (shared D?).mo()  ", __primitive("method call resolves",    (shared D?), "mo"):string);
compilerWarning(" (borrowed D ).mo()  ", __primitive("method call resolves",  (borrowed D ), "mo"):string);
compilerWarning(" (borrowed D?).mo()  ", __primitive("method call resolves",  (borrowed D?), "mo"):string);
compilerWarning("(unmanaged D ).mo()  ", __primitive("method call resolves", (unmanaged D ), "mo"):string);
compilerWarning("(unmanaged D?).mo()  ", __primitive("method call resolves", (unmanaged D?), "mo"):string);

sep();

compilerWarning("           D  .mon()  ", __primitive("method call resolves",            D  , "mon"):string);
compilerWarning("          (D?).mon()  ", __primitive("method call resolves",           (D?), "mon"):string);
compilerWarning("    (owned D ).mon()  ", __primitive("method call resolves",     (owned D ), "mon"):string);
compilerWarning("    (owned D?).mon()  ", __primitive("method call resolves",     (owned D?), "mon"):string);
compilerWarning("   (shared D ).mon()  ", __primitive("method call resolves",    (shared D ), "mon"):string);
compilerWarning("   (shared D?).mon()  ", __primitive("method call resolves",    (shared D?), "mon"):string);
compilerWarning(" (borrowed D ).mon()  ", __primitive("method call resolves",  (borrowed D ), "mon"):string);
compilerWarning(" (borrowed D?).mon()  ", __primitive("method call resolves",  (borrowed D?), "mon"):string);
compilerWarning("(unmanaged D ).mon()  ", __primitive("method call resolves", (unmanaged D ), "mon"):string);
compilerWarning("(unmanaged D?).mon()  ", __primitive("method call resolves", (unmanaged D?), "mon"):string);

sep();

compilerWarning("           D  .ms()  ", __primitive("method call resolves",            D  , "ms"):string);
compilerWarning("          (D?).ms()  ", __primitive("method call resolves",           (D?), "ms"):string);
compilerWarning("    (owned D ).ms()  ", __primitive("method call resolves",     (owned D ), "ms"):string);
compilerWarning("    (owned D?).ms()  ", __primitive("method call resolves",     (owned D?), "ms"):string);
compilerWarning("   (shared D ).ms()  ", __primitive("method call resolves",    (shared D ), "ms"):string);
compilerWarning("   (shared D?).ms()  ", __primitive("method call resolves",    (shared D?), "ms"):string);
compilerWarning(" (borrowed D ).ms()  ", __primitive("method call resolves",  (borrowed D ), "ms"):string);
compilerWarning(" (borrowed D?).ms()  ", __primitive("method call resolves",  (borrowed D?), "ms"):string);
compilerWarning("(unmanaged D ).ms()  ", __primitive("method call resolves", (unmanaged D ), "ms"):string);
compilerWarning("(unmanaged D?).ms()  ", __primitive("method call resolves", (unmanaged D?), "ms"):string);

sep();

compilerWarning("           D  .msn()  ", __primitive("method call resolves",            D  , "msn"):string);
compilerWarning("          (D?).msn()  ", __primitive("method call resolves",           (D?), "msn"):string);
compilerWarning("    (owned D ).msn()  ", __primitive("method call resolves",     (owned D ), "msn"):string);
compilerWarning("    (owned D?).msn()  ", __primitive("method call resolves",     (owned D?), "msn"):string);
compilerWarning("   (shared D ).msn()  ", __primitive("method call resolves",    (shared D ), "msn"):string);
compilerWarning("   (shared D?).msn()  ", __primitive("method call resolves",    (shared D?), "msn"):string);
compilerWarning(" (borrowed D ).msn()  ", __primitive("method call resolves",  (borrowed D ), "msn"):string);
compilerWarning(" (borrowed D?).msn()  ", __primitive("method call resolves",  (borrowed D?), "msn"):string);
compilerWarning("(unmanaged D ).msn()  ", __primitive("method call resolves", (unmanaged D ), "msn"):string);
compilerWarning("(unmanaged D?).msn()  ", __primitive("method call resolves", (unmanaged D?), "msn"):string);

sep();

compilerWarning("           D  .mb()  ", __primitive("method call resolves",            D  , "mb"):string);
compilerWarning("          (D?).mb()  ", __primitive("method call resolves",           (D?), "mb"):string);
compilerWarning("    (owned D ).mb()  ", __primitive("method call resolves",     (owned D ), "mb"):string);
compilerWarning("    (owned D?).mb()  ", __primitive("method call resolves",     (owned D?), "mb"):string);
compilerWarning("   (shared D ).mb()  ", __primitive("method call resolves",    (shared D ), "mb"):string);
compilerWarning("   (shared D?).mb()  ", __primitive("method call resolves",    (shared D?), "mb"):string);
compilerWarning(" (borrowed D ).mb()  ", __primitive("method call resolves",  (borrowed D ), "mb"):string);
compilerWarning(" (borrowed D?).mb()  ", __primitive("method call resolves",  (borrowed D?), "mb"):string);
compilerWarning("(unmanaged D ).mb()  ", __primitive("method call resolves", (unmanaged D ), "mb"):string);
compilerWarning("(unmanaged D?).mb()  ", __primitive("method call resolves", (unmanaged D?), "mb"):string);

sep();

compilerWarning("           D  .mbn()  ", __primitive("method call resolves",            D  , "mbn"):string);
compilerWarning("          (D?).mbn()  ", __primitive("method call resolves",           (D?), "mbn"):string);
compilerWarning("    (owned D ).mbn()  ", __primitive("method call resolves",     (owned D ), "mbn"):string);
compilerWarning("    (owned D?).mbn()  ", __primitive("method call resolves",     (owned D?), "mbn"):string);
compilerWarning("   (shared D ).mbn()  ", __primitive("method call resolves",    (shared D ), "mbn"):string);
compilerWarning("   (shared D?).mbn()  ", __primitive("method call resolves",    (shared D?), "mbn"):string);
compilerWarning(" (borrowed D ).mbn()  ", __primitive("method call resolves",  (borrowed D ), "mbn"):string);
compilerWarning(" (borrowed D?).mbn()  ", __primitive("method call resolves",  (borrowed D?), "mbn"):string);
compilerWarning("(unmanaged D ).mbn()  ", __primitive("method call resolves", (unmanaged D ), "mbn"):string);
compilerWarning("(unmanaged D?).mbn()  ", __primitive("method call resolves", (unmanaged D?), "mbn"):string);

sep();

compilerWarning("           D  .mu()  ", __primitive("method call resolves",            D  , "mu"):string);
compilerWarning("          (D?).mu()  ", __primitive("method call resolves",           (D?), "mu"):string);
compilerWarning("    (owned D ).mu()  ", __primitive("method call resolves",     (owned D ), "mu"):string);
compilerWarning("    (owned D?).mu()  ", __primitive("method call resolves",     (owned D?), "mu"):string);
compilerWarning("   (shared D ).mu()  ", __primitive("method call resolves",    (shared D ), "mu"):string);
compilerWarning("   (shared D?).mu()  ", __primitive("method call resolves",    (shared D?), "mu"):string);
compilerWarning(" (borrowed D ).mu()  ", __primitive("method call resolves",  (borrowed D ), "mu"):string);
compilerWarning(" (borrowed D?).mu()  ", __primitive("method call resolves",  (borrowed D?), "mu"):string);
compilerWarning("(unmanaged D ).mu()  ", __primitive("method call resolves", (unmanaged D ), "mu"):string);
compilerWarning("(unmanaged D?).mu()  ", __primitive("method call resolves", (unmanaged D?), "mu"):string);

sep();

compilerWarning("           D  .mun()  ", __primitive("method call resolves",            D  , "mun"):string);
compilerWarning("          (D?).mun()  ", __primitive("method call resolves",           (D?), "mun"):string);
compilerWarning("    (owned D ).mun()  ", __primitive("method call resolves",     (owned D ), "mun"):string);
compilerWarning("    (owned D?).mun()  ", __primitive("method call resolves",     (owned D?), "mun"):string);
compilerWarning("   (shared D ).mun()  ", __primitive("method call resolves",    (shared D ), "mun"):string);
compilerWarning("   (shared D?).mun()  ", __primitive("method call resolves",    (shared D?), "mun"):string);
compilerWarning(" (borrowed D ).mun()  ", __primitive("method call resolves",  (borrowed D ), "mun"):string);
compilerWarning(" (borrowed D?).mun()  ", __primitive("method call resolves",  (borrowed D?), "mun"):string);
compilerWarning("(unmanaged D ).mun()  ", __primitive("method call resolves", (unmanaged D ), "mun"):string);
compilerWarning("(unmanaged D?).mun()  ", __primitive("method call resolves", (unmanaged D?), "mun"):string);

sep();

sepp(E);

sep();

compilerWarning("           E  .mp()  ", __primitive("method call resolves",            E  , "mp"):string);
compilerWarning("          (E?).mp()  ", __primitive("method call resolves",           (E?), "mp"):string);
compilerWarning("    (owned E ).mp()  ", __primitive("method call resolves",     (owned E ), "mp"):string);
compilerWarning("    (owned E?).mp()  ", __primitive("method call resolves",     (owned E?), "mp"):string);
compilerWarning("   (shared E ).mp()  ", __primitive("method call resolves",    (shared E ), "mp"):string);
compilerWarning("   (shared E?).mp()  ", __primitive("method call resolves",    (shared E?), "mp"):string);
compilerWarning(" (borrowed E ).mp()  ", __primitive("method call resolves",  (borrowed E ), "mp"):string);
compilerWarning(" (borrowed E?).mp()  ", __primitive("method call resolves",  (borrowed E?), "mp"):string);
compilerWarning("(unmanaged E ).mp()  ", __primitive("method call resolves", (unmanaged E ), "mp"):string);
compilerWarning("(unmanaged E?).mp()  ", __primitive("method call resolves", (unmanaged E?), "mp"):string);

sep();

compilerWarning("           E  .mA()  ", __primitive("method call resolves",            E  , "mA"):string);
compilerWarning("          (E?).mA()  ", __primitive("method call resolves",           (E?), "mA"):string);
compilerWarning("    (owned E ).mA()  ", __primitive("method call resolves",     (owned E ), "mA"):string);
compilerWarning("    (owned E?).mA()  ", __primitive("method call resolves",     (owned E?), "mA"):string);
compilerWarning("   (shared E ).mA()  ", __primitive("method call resolves",    (shared E ), "mA"):string);
compilerWarning("   (shared E?).mA()  ", __primitive("method call resolves",    (shared E?), "mA"):string);
compilerWarning(" (borrowed E ).mA()  ", __primitive("method call resolves",  (borrowed E ), "mA"):string);
compilerWarning(" (borrowed E?).mA()  ", __primitive("method call resolves",  (borrowed E?), "mA"):string);
compilerWarning("(unmanaged E ).mA()  ", __primitive("method call resolves", (unmanaged E ), "mA"):string);
compilerWarning("(unmanaged E?).mA()  ", __primitive("method call resolves", (unmanaged E?), "mA"):string);

sep();

compilerWarning("           E  .mB()  ", __primitive("method call resolves",            E  , "mB"):string);
compilerWarning("          (E?).mB()  ", __primitive("method call resolves",           (E?), "mB"):string);
compilerWarning("    (owned E ).mB()  ", __primitive("method call resolves",     (owned E ), "mB"):string);
compilerWarning("    (owned E?).mB()  ", __primitive("method call resolves",     (owned E?), "mB"):string);
compilerWarning("   (shared E ).mB()  ", __primitive("method call resolves",    (shared E ), "mB"):string);
compilerWarning("   (shared E?).mB()  ", __primitive("method call resolves",    (shared E?), "mB"):string);
compilerWarning(" (borrowed E ).mB()  ", __primitive("method call resolves",  (borrowed E ), "mB"):string);
compilerWarning(" (borrowed E?).mB()  ", __primitive("method call resolves",  (borrowed E?), "mB"):string);
compilerWarning("(unmanaged E ).mB()  ", __primitive("method call resolves", (unmanaged E ), "mB"):string);
compilerWarning("(unmanaged E?).mB()  ", __primitive("method call resolves", (unmanaged E?), "mB"):string);

sep();

compilerWarning("           E  .mBn()  ", __primitive("method call resolves",            E  , "mBn"):string);
compilerWarning("          (E?).mBn()  ", __primitive("method call resolves",           (E?), "mBn"):string);
compilerWarning("    (owned E ).mBn()  ", __primitive("method call resolves",     (owned E ), "mBn"):string);
compilerWarning("    (owned E?).mBn()  ", __primitive("method call resolves",     (owned E?), "mBn"):string);
compilerWarning("   (shared E ).mBn()  ", __primitive("method call resolves",    (shared E ), "mBn"):string);
compilerWarning("   (shared E?).mBn()  ", __primitive("method call resolves",    (shared E?), "mBn"):string);
compilerWarning(" (borrowed E ).mBn()  ", __primitive("method call resolves",  (borrowed E ), "mBn"):string);
compilerWarning(" (borrowed E?).mBn()  ", __primitive("method call resolves",  (borrowed E?), "mBn"):string);
compilerWarning("(unmanaged E ).mBn()  ", __primitive("method call resolves", (unmanaged E ), "mBn"):string);
compilerWarning("(unmanaged E?).mBn()  ", __primitive("method call resolves", (unmanaged E?), "mBn"):string);

sep();

compilerWarning("           E  .mo()  ", __primitive("method call resolves",            E  , "mo"):string);
compilerWarning("          (E?).mo()  ", __primitive("method call resolves",           (E?), "mo"):string);
compilerWarning("    (owned E ).mo()  ", __primitive("method call resolves",     (owned E ), "mo"):string);
compilerWarning("    (owned E?).mo()  ", __primitive("method call resolves",     (owned E?), "mo"):string);
compilerWarning("   (shared E ).mo()  ", __primitive("method call resolves",    (shared E ), "mo"):string);
compilerWarning("   (shared E?).mo()  ", __primitive("method call resolves",    (shared E?), "mo"):string);
compilerWarning(" (borrowed E ).mo()  ", __primitive("method call resolves",  (borrowed E ), "mo"):string);
compilerWarning(" (borrowed E?).mo()  ", __primitive("method call resolves",  (borrowed E?), "mo"):string);
compilerWarning("(unmanaged E ).mo()  ", __primitive("method call resolves", (unmanaged E ), "mo"):string);
compilerWarning("(unmanaged E?).mo()  ", __primitive("method call resolves", (unmanaged E?), "mo"):string);

sep();

compilerWarning("           E  .mon()  ", __primitive("method call resolves",            E  , "mon"):string);
compilerWarning("          (E?).mon()  ", __primitive("method call resolves",           (E?), "mon"):string);
compilerWarning("    (owned E ).mon()  ", __primitive("method call resolves",     (owned E ), "mon"):string);
compilerWarning("    (owned E?).mon()  ", __primitive("method call resolves",     (owned E?), "mon"):string);
compilerWarning("   (shared E ).mon()  ", __primitive("method call resolves",    (shared E ), "mon"):string);
compilerWarning("   (shared E?).mon()  ", __primitive("method call resolves",    (shared E?), "mon"):string);
compilerWarning(" (borrowed E ).mon()  ", __primitive("method call resolves",  (borrowed E ), "mon"):string);
compilerWarning(" (borrowed E?).mon()  ", __primitive("method call resolves",  (borrowed E?), "mon"):string);
compilerWarning("(unmanaged E ).mon()  ", __primitive("method call resolves", (unmanaged E ), "mon"):string);
compilerWarning("(unmanaged E?).mon()  ", __primitive("method call resolves", (unmanaged E?), "mon"):string);

sep();

compilerWarning("           E  .ms()  ", __primitive("method call resolves",            E  , "ms"):string);
compilerWarning("          (E?).ms()  ", __primitive("method call resolves",           (E?), "ms"):string);
compilerWarning("    (owned E ).ms()  ", __primitive("method call resolves",     (owned E ), "ms"):string);
compilerWarning("    (owned E?).ms()  ", __primitive("method call resolves",     (owned E?), "ms"):string);
compilerWarning("   (shared E ).ms()  ", __primitive("method call resolves",    (shared E ), "ms"):string);
compilerWarning("   (shared E?).ms()  ", __primitive("method call resolves",    (shared E?), "ms"):string);
compilerWarning(" (borrowed E ).ms()  ", __primitive("method call resolves",  (borrowed E ), "ms"):string);
compilerWarning(" (borrowed E?).ms()  ", __primitive("method call resolves",  (borrowed E?), "ms"):string);
compilerWarning("(unmanaged E ).ms()  ", __primitive("method call resolves", (unmanaged E ), "ms"):string);
compilerWarning("(unmanaged E?).ms()  ", __primitive("method call resolves", (unmanaged E?), "ms"):string);

sep();

compilerWarning("           E  .msn()  ", __primitive("method call resolves",            E  , "msn"):string);
compilerWarning("          (E?).msn()  ", __primitive("method call resolves",           (E?), "msn"):string);
compilerWarning("    (owned E ).msn()  ", __primitive("method call resolves",     (owned E ), "msn"):string);
compilerWarning("    (owned E?).msn()  ", __primitive("method call resolves",     (owned E?), "msn"):string);
compilerWarning("   (shared E ).msn()  ", __primitive("method call resolves",    (shared E ), "msn"):string);
compilerWarning("   (shared E?).msn()  ", __primitive("method call resolves",    (shared E?), "msn"):string);
compilerWarning(" (borrowed E ).msn()  ", __primitive("method call resolves",  (borrowed E ), "msn"):string);
compilerWarning(" (borrowed E?).msn()  ", __primitive("method call resolves",  (borrowed E?), "msn"):string);
compilerWarning("(unmanaged E ).msn()  ", __primitive("method call resolves", (unmanaged E ), "msn"):string);
compilerWarning("(unmanaged E?).msn()  ", __primitive("method call resolves", (unmanaged E?), "msn"):string);

sep();

compilerWarning("           E  .mb()  ", __primitive("method call resolves",            E  , "mb"):string);
compilerWarning("          (E?).mb()  ", __primitive("method call resolves",           (E?), "mb"):string);
compilerWarning("    (owned E ).mb()  ", __primitive("method call resolves",     (owned E ), "mb"):string);
compilerWarning("    (owned E?).mb()  ", __primitive("method call resolves",     (owned E?), "mb"):string);
compilerWarning("   (shared E ).mb()  ", __primitive("method call resolves",    (shared E ), "mb"):string);
compilerWarning("   (shared E?).mb()  ", __primitive("method call resolves",    (shared E?), "mb"):string);
compilerWarning(" (borrowed E ).mb()  ", __primitive("method call resolves",  (borrowed E ), "mb"):string);
compilerWarning(" (borrowed E?).mb()  ", __primitive("method call resolves",  (borrowed E?), "mb"):string);
compilerWarning("(unmanaged E ).mb()  ", __primitive("method call resolves", (unmanaged E ), "mb"):string);
compilerWarning("(unmanaged E?).mb()  ", __primitive("method call resolves", (unmanaged E?), "mb"):string);

sep();

compilerWarning("           E  .mbn()  ", __primitive("method call resolves",            E  , "mbn"):string);
compilerWarning("          (E?).mbn()  ", __primitive("method call resolves",           (E?), "mbn"):string);
compilerWarning("    (owned E ).mbn()  ", __primitive("method call resolves",     (owned E ), "mbn"):string);
compilerWarning("    (owned E?).mbn()  ", __primitive("method call resolves",     (owned E?), "mbn"):string);
compilerWarning("   (shared E ).mbn()  ", __primitive("method call resolves",    (shared E ), "mbn"):string);
compilerWarning("   (shared E?).mbn()  ", __primitive("method call resolves",    (shared E?), "mbn"):string);
compilerWarning(" (borrowed E ).mbn()  ", __primitive("method call resolves",  (borrowed E ), "mbn"):string);
compilerWarning(" (borrowed E?).mbn()  ", __primitive("method call resolves",  (borrowed E?), "mbn"):string);
compilerWarning("(unmanaged E ).mbn()  ", __primitive("method call resolves", (unmanaged E ), "mbn"):string);
compilerWarning("(unmanaged E?).mbn()  ", __primitive("method call resolves", (unmanaged E?), "mbn"):string);

sep();

compilerWarning("           E  .mu()  ", __primitive("method call resolves",            E  , "mu"):string);
compilerWarning("          (E?).mu()  ", __primitive("method call resolves",           (E?), "mu"):string);
compilerWarning("    (owned E ).mu()  ", __primitive("method call resolves",     (owned E ), "mu"):string);
compilerWarning("    (owned E?).mu()  ", __primitive("method call resolves",     (owned E?), "mu"):string);
compilerWarning("   (shared E ).mu()  ", __primitive("method call resolves",    (shared E ), "mu"):string);
compilerWarning("   (shared E?).mu()  ", __primitive("method call resolves",    (shared E?), "mu"):string);
compilerWarning(" (borrowed E ).mu()  ", __primitive("method call resolves",  (borrowed E ), "mu"):string);
compilerWarning(" (borrowed E?).mu()  ", __primitive("method call resolves",  (borrowed E?), "mu"):string);
compilerWarning("(unmanaged E ).mu()  ", __primitive("method call resolves", (unmanaged E ), "mu"):string);
compilerWarning("(unmanaged E?).mu()  ", __primitive("method call resolves", (unmanaged E?), "mu"):string);

sep();

compilerWarning("           E  .mun()  ", __primitive("method call resolves",            E  , "mun"):string);
compilerWarning("          (E?).mun()  ", __primitive("method call resolves",           (E?), "mun"):string);
compilerWarning("    (owned E ).mun()  ", __primitive("method call resolves",     (owned E ), "mun"):string);
compilerWarning("    (owned E?).mun()  ", __primitive("method call resolves",     (owned E?), "mun"):string);
compilerWarning("   (shared E ).mun()  ", __primitive("method call resolves",    (shared E ), "mun"):string);
compilerWarning("   (shared E?).mun()  ", __primitive("method call resolves",    (shared E?), "mun"):string);
compilerWarning(" (borrowed E ).mun()  ", __primitive("method call resolves",  (borrowed E ), "mun"):string);
compilerWarning(" (borrowed E?).mun()  ", __primitive("method call resolves",  (borrowed E?), "mun"):string);
compilerWarning("(unmanaged E ).mun()  ", __primitive("method call resolves", (unmanaged E ), "mun"):string);
compilerWarning("(unmanaged E?).mun()  ", __primitive("method call resolves", (unmanaged E?), "mun"):string);

sep();

sepp(R);

sep();

compilerWarning("R.mp()  ", __primitive("method call resolves", R, "mp"):string);
compilerWarning("R.mA()  ", __primitive("method call resolves", R, "mA"):string);
compilerWarning("R.mB()  ", __primitive("method call resolves", R, "mB"):string);
compilerWarning("R.mBn()  ", __primitive("method call resolves", R, "mBn"):string);
compilerWarning("R.mo()  ", __primitive("method call resolves", R, "mo"):string);
compilerWarning("R.mon()  ", __primitive("method call resolves", R, "mon"):string);
compilerWarning("R.ms()  ", __primitive("method call resolves", R, "ms"):string);
compilerWarning("R.msn()  ", __primitive("method call resolves", R, "msn"):string);
compilerWarning("R.mb()  ", __primitive("method call resolves", R, "mb"):string);
compilerWarning("R.mbn()  ", __primitive("method call resolves", R, "mbn"):string);
compilerWarning("R.mu()  ", __primitive("method call resolves", R, "mu"):string);
compilerWarning("R.mun()  ", __primitive("method call resolves", R, "mun"):string);

sep();

sepp(int);

sep();

compilerWarning("int.mp()  ", __primitive("method call resolves", int, "mp"):string);
compilerWarning("int.mA()  ", __primitive("method call resolves", int, "mA"):string);
compilerWarning("int.mB()  ", __primitive("method call resolves", int, "mB"):string);
compilerWarning("int.mBn()  ", __primitive("method call resolves", int, "mBn"):string);
compilerWarning("int.mo()  ", __primitive("method call resolves", int, "mo"):string);
compilerWarning("int.mon()  ", __primitive("method call resolves", int, "mon"):string);
compilerWarning("int.ms()  ", __primitive("method call resolves", int, "ms"):string);
compilerWarning("int.msn()  ", __primitive("method call resolves", int, "msn"):string);
compilerWarning("int.mb()  ", __primitive("method call resolves", int, "mb"):string);
compilerWarning("int.mbn()  ", __primitive("method call resolves", int, "mbn"):string);
compilerWarning("int.mu()  ", __primitive("method call resolves", int, "mu"):string);
compilerWarning("int.mun()  ", __primitive("method call resolves", int, "mun"):string);

sep();

compilerError("done");  // no need to continue compilation
