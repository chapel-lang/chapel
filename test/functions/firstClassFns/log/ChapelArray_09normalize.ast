AST dump for ChapelArray after pass normalize.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection HaltWrappers Sort 

{
  function chpl__init_ChapelArray[390210]() : void[4] "insert line file info" "module init"
  {
    (491111 'init var' showArrayAsVecWarnings[111812] 1)
    (595204 'move' call_tmp[595201](111818 call chpl__processorAtomicType int(64)[13]))
    (491113 'default init var' numPrivateObjects[111819] call_tmp[595201])
    (595209 'move' call_tmp[595206](111823 call - 1))
    (491115 'init var' nullPid[111825] call_tmp[595206])
    (491117 'init var' debugBulkTransfer[111829] 0)
    (491119 'init var' useBulkTransfer[111833] 1)
    (491121 'init var' useBulkTransferStride[111837] 1)
    (491123 'init var' PODValAccess[111841] 1)
    (491125 'init var' useBulkTransferDist[111845] 0)
    (491127 'init var' arrayAsVecGrowthFactor[111851] 1.5)
    (491129 'init var' debugArrayAsVec[111855] 0)
    (491153 'init var' CHPL_WARN_DOMAIN_LITERAL[113306] "unset")
    (614220 'move' call_tmp[614217](140308 call chpl__atomicType uint(64)[107]))
    (491742 'default init var' _OpaqueIndexNext[140310] call_tmp[614217])
    (470016 return _void[47])
  }
  unknown showArrayAsVecWarnings[111812] "config" "no doc" "param"
  unknown numPrivateObjects[111819] "insert auto destroy" "no doc"
  unknown call_tmp[595201] "expr temp" "maybe param" "maybe type" "temp"
  unknown call_tmp[595206] "maybe param" "maybe type" "temp"
  unknown nullPid[111825] "no doc" "param"
  unknown debugBulkTransfer[111829] "config" "no doc" "param"
  unknown useBulkTransfer[111833] "config" "no doc" "param"
  unknown useBulkTransferStride[111837] "config" "no doc" "param"
  unknown PODValAccess[111841] "config" "no doc" "param"
  unknown useBulkTransferDist[111845] "config" "no doc" "param"
  unknown arrayAsVecGrowthFactor[111851] "config" "no doc" "param"
  unknown debugArrayAsVec[111855] "config" "no doc" "param"
  function _isPrivatized[111862](arg value[111860]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[466421] "RVV" "param" "temp"
    unknown tmp[399438] "maybe param" "temp"
    (399449 'move' tmp[399438](111865 call ! 1))
    unknown call_tmp[595211] "expr temp" "maybe param" "maybe type" "temp"
    (595214 'move' call_tmp[595211](399451 call _cond_invalid tmp[399438]))
    if call_tmp[595211]
    {
      (399454 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[512915] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[512916] "maybe param" "temp"
    unknown call_tmp[595216] "expr temp" "maybe param" "maybe type" "temp"
    (595219 'move' call_tmp[595216](399439 call isTrue tmp[399438]))
    (512921 'move' tmp[512916](512919 call _cond_test call_tmp[595216]))
    if tmp[512916]
    {
      unknown tmp[399459] "maybe param" "temp"
      unknown tmp[399480] "maybe param" "temp"
      (399491 'move' tmp[399480] 0)
      unknown call_tmp[595221] "expr temp" "maybe param" "maybe type" "temp"
      (595224 'move' call_tmp[595221](399493 call _cond_invalid tmp[399480]))
      if call_tmp[595221]
      {
        (399496 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[512861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[512862] "maybe param" "temp"
      unknown call_tmp[595226] "expr temp" "maybe param" "maybe type" "temp"
      (595229 'move' call_tmp[595226](399481 call isTrue tmp[399480]))
      (512867 'move' tmp[512862](512865 call _cond_test call_tmp[595226]))
      if tmp[512862]
      {
        unknown tmp[512869] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[595231] "expr temp" "maybe param" "maybe type" "temp"
        (595234 'move' call_tmp[595231](111869 call postfix! value[111860]))
        unknown call_tmp[595238] "expr temp" "maybe param" "maybe type" "temp"
        (595241 'move' call_tmp[595238](111877 call(111873 call (partial) dsiSupportsPrivatization _mt[232] call_tmp[595231])))
        (512871 'move' tmp[512869](399484 call isTrue call_tmp[595238]))
        (512876 'move' tmp[512861](512873 '_paramFoldLogical' tmp[512862] tmp[512869]))
      }
      {
        (512881 'move' tmp[512861](512878 '_paramFoldLogical' tmp[512862] 0))
      }
      (399470 'move' tmp[399459] tmp[512861])
      unknown call_tmp[595243] "expr temp" "maybe param" "maybe type" "temp"
      (595246 'move' call_tmp[595243](399472 call _cond_invalid tmp[399459]))
      if call_tmp[595243]
      {
        (399475 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[512888] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[512889] "maybe param" "temp"
      unknown call_tmp[595248] "expr temp" "maybe param" "maybe type" "temp"
      (595251 'move' call_tmp[595248](399460 call isTrue tmp[399459]))
      (512894 'move' tmp[512889](512892 call _cond_test call_tmp[595248]))
      if tmp[512889]
      {
        (512899 'move' tmp[512888](512896 '_paramFoldLogical' tmp[512889] 1))
      }
      {
        unknown tmp[512901] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[595253] "expr temp" "maybe param" "maybe type" "temp"
        (595256 'move' call_tmp[595253](111881 call postfix! value[111860]))
        unknown call_tmp[595260] "expr temp" "maybe param" "maybe type" "temp"
        (595263 'move' call_tmp[595260](111889 call(111885 call (partial) dsiRequiresPrivatization _mt[232] call_tmp[595253])))
        (512903 'move' tmp[512901](399464 call isTrue call_tmp[595260]))
        (512908 'move' tmp[512888](512905 '_paramFoldLogical' tmp[512889] tmp[512901]))
      }
      unknown tmp[512923] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (512925 'move' tmp[512923](399442 call isTrue tmp[512888]))
      (512930 'move' tmp[512915](512927 '_paramFoldLogical' tmp[512916] tmp[512923]))
    }
    {
      (512935 'move' tmp[512915](512932 '_paramFoldLogical' tmp[512916] 0))
    }
    (466426 'move' ret[466421](466425 'deref' tmp[512915]))
    (466423 return ret[466421])
  }
  function _newPrivatizedClass[111903](arg value[111901]:_any[170](?)) : _unknown[43]
  {
    unknown ret[466432] "RVV" "temp"
    unknown call_tmp[595267] "maybe param" "maybe type" "temp"
    (595270 'move' call_tmp[595267](111914 call(111909 call (partial) fetchAdd _mt[232] numPrivateObjects[111819]) 1))
    const n[111915] "const" "insert auto destroy"
    (491131 'init var' n[111915] call_tmp[595267])
    unknown call_tmp[595272] "expr temp" "maybe param" "maybe type" "temp"
    (595275 'move' call_tmp[595272](350387 call here[92085]))
    unknown call_tmp[595279] "maybe param" "maybe type" "temp"
    (595282 'move' call_tmp[595279](111920 call id _mt[232] call_tmp[595272]))
    const hereID[111923] "const" "insert auto destroy"
    (491133 'init var' hereID[111923] call_tmp[595279])
    unknown call_tmp[595286] "maybe param" "maybe type" "temp"
    (595289 'move' call_tmp[595286](111933 call(111929 call (partial) dsiGetPrivatizeData _mt[232] value[111901])))
    const privatizeData[111934] "const" "insert auto destroy"
    (491135 'init var' privatizeData[111934] call_tmp[595286])
    {
      const tmp[111953] "const" "temp"
      unknown call_tmp[595291] "expr temp" "maybe param" "maybe type" "temp"
      (595294 'move' call_tmp[595291](111940 call Locales[111767] 0))
      unknown call_tmp[595296] "expr temp" "maybe param" "maybe type" "temp"
      (595299 'move' call_tmp[595296](111950 '_wide_get_locale' call_tmp[595291]))
      (111954 'move' tmp[111953](111951 'deref' call_tmp[595296]))
      (111948 call _newPrivatizedClassHelp value[111901] value[111901] n[111915] hereID[111923] privatizeData[111934])
    }
    function _newPrivatizedClassHelp[111962](arg parentValue[111960]:_any[170](?), arg originalValue[111964]:_any[170](?), arg n[111966]:_any[170](?), arg hereID[111968]:_any[170](?), arg privatizeData[111970]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown newValue[111973] "insert auto destroy"
      (491137 'init var' newValue[111973] originalValue[111964])
      unknown call_tmp[595301] "expr temp" "maybe param" "maybe type" "temp"
      (595304 'move' call_tmp[595301](350398 call here[92085]))
      unknown call_tmp[595308] "expr temp" "maybe param" "maybe type" "temp"
      (595311 'move' call_tmp[595308](111979 call id _mt[232] call_tmp[595301]))
      unknown call_tmp[595313] "expr temp" "maybe param" "maybe type" "temp"
      (595316 'move' call_tmp[595313](111982 call != hereID[111968] call_tmp[595308]))
      unknown call_tmp[595318] "expr temp" "maybe param" "maybe type" "temp"
      (595321 'move' call_tmp[595318](112044 call _cond_test call_tmp[595313]))
      if call_tmp[595318]
      {
        unknown call_tmp[595325] "expr temp" "maybe param" "maybe type" "temp"
        (595328 'move' call_tmp[595325](111993 call(111988 call (partial) dsiPrivatize _mt[232] parentValue[111960]) privatizeData[111970]))
        (111994 call = newValue[111973] call_tmp[595325])
        (112017 'chpl_newPrivatizedClass' newValue[111973] n[111966])
        unknown call_tmp[595332] "expr temp" "maybe param" "maybe type" "temp"
        (595335 'move' call_tmp[595332](112022 call pid _mt[232] newValue[111973]))
        (112026 call = call_tmp[595332] n[111966])
      }
      {
        (112033 'chpl_newPrivatizedClass' newValue[111973] n[111966])
        unknown call_tmp[595339] "expr temp" "maybe param" "maybe type" "temp"
        (595342 'move' call_tmp[595339](112037 call pid _mt[232] newValue[111973]))
        (112041 call = call_tmp[595339] n[111966])
      }
      {
        const _cobeginCount[112113] "const" "end count" "temp"
        (112134 'move' _cobeginCount[112113](112131 call _endCountAlloc 1))
        (112126 call _upEndCount _cobeginCount[112113] 1 2)
        {
          unknown call_tmp[595346] "expr temp" "maybe param" "maybe type" "temp"
          (595349 'move' call_tmp[595346](112051 call left _mt[232] chpl_localeTree[150995]))
          unknown call_tmp[595351] "expr temp" "maybe param" "maybe type" "temp"
          (595354 'move' call_tmp[595351](112075 call _cond_test call_tmp[595346]))
          if call_tmp[595351]
          {
            {
              const tmp[112070] "const" "temp"
              unknown call_tmp[595358] "expr temp" "maybe param" "maybe type" "temp"
              (595361 'move' call_tmp[595358](112055 call left _mt[232] chpl_localeTree[150995]))
              unknown call_tmp[595363] "expr temp" "maybe param" "maybe type" "temp"
              (595366 'move' call_tmp[595363](112067 '_wide_get_locale' call_tmp[595358]))
              (112071 'move' tmp[112070](112068 'deref' call_tmp[595363]))
              (112065 call _newPrivatizedClassHelp newValue[111973] originalValue[111964] n[111966] hereID[111968] privatizeData[111970])
            }
          }
          (112116 call _downEndCount _cobeginCount[112113] nil[38])
          (112115 'cobegin block')
        }
        {
          unknown call_tmp[595370] "expr temp" "maybe param" "maybe type" "temp"
          (595373 'move' call_tmp[595370](112084 call right _mt[232] chpl_localeTree[150995]))
          unknown call_tmp[595375] "expr temp" "maybe param" "maybe type" "temp"
          (595378 'move' call_tmp[595375](112108 call _cond_test call_tmp[595370]))
          if call_tmp[595375]
          {
            {
              const tmp[112103] "const" "temp"
              unknown call_tmp[595382] "expr temp" "maybe param" "maybe type" "temp"
              (595385 'move' call_tmp[595382](112088 call right _mt[232] chpl_localeTree[150995]))
              unknown call_tmp[595387] "expr temp" "maybe param" "maybe type" "temp"
              (595390 'move' call_tmp[595387](112100 '_wide_get_locale' call_tmp[595382]))
              (112104 'move' tmp[112103](112101 'deref' call_tmp[595387]))
              (112098 call _newPrivatizedClassHelp newValue[111973] originalValue[111964] n[111966] hereID[111968] privatizeData[111970])
            }
          }
          (112122 call _downEndCount _cobeginCount[112113] nil[38])
          (112121 'cobegin block')
        }
        Defer
        {
          {
            (112137 call _endCountFree _cobeginCount[112113])
          }
        }
        (112142 call _waitEndCount _cobeginCount[112113] 1 2)
      }
      (466428 return _void[47])
    }
    (466438 'move' ret[466432](466437 'coerce' n[111915] int(64)[13]))
    (466434 return ret[466432])
  }
  { scopeless type
    int(64)[13]
  }
  function _freePrivatizedClass[112161](arg pid[112158]:int(64)[13], arg original[112164]:anymanaged object[331796](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[595392] "expr temp" "maybe param" "maybe type" "temp"
    (595395 'move' call_tmp[595392](112170 call == pid[112158] nullPid[111825]))
    unknown call_tmp[595397] "expr temp" "maybe param" "maybe type" "temp"
    (595400 'move' call_tmp[595397](112174 call _cond_test call_tmp[595392]))
    if call_tmp[595397]
    {
      gotoReturn _end__freePrivatizedClass[466444] _end__freePrivatizedClass[466444]
    }
    {
      const tmp[112194] "const" "temp"
      unknown call_tmp[595402] "expr temp" "maybe param" "maybe type" "temp"
      (595405 'move' call_tmp[595402](112183 call Locales[111767] 0))
      unknown call_tmp[595407] "expr temp" "maybe param" "maybe type" "temp"
      (595410 'move' call_tmp[595407](112191 '_wide_get_locale' call_tmp[595402]))
      (112195 'move' tmp[112194](112192 'deref' call_tmp[595407]))
      {
        (112188 call _freePrivatizedClassHelp pid[112158] original[112164])
      }
    }
    function _freePrivatizedClassHelp[112203](arg pid[112201]:_any[170](?), arg original[112205]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown call_tmp[595412] "maybe param" "maybe type" "temp"
      (595415 'move' call_tmp[595412](112212 call chpl_getPrivatizedCopy unmanaged object[389863] pid[112201]))
      unknown prv[112213] "insert auto destroy"
      (491139 'init var' prv[112213] call_tmp[595412])
      unknown call_tmp[595417] "expr temp" "maybe param" "maybe type" "temp"
      (595420 'move' call_tmp[595417](112219 call != prv[112213] original[112205]))
      unknown call_tmp[595422] "expr temp" "maybe param" "maybe type" "temp"
      (595425 'move' call_tmp[595422](112226 call _cond_test call_tmp[595417]))
      if call_tmp[595422]
      {
        (112223 call chpl__delete prv[112213])
      }
      function chpl_clearPrivatizedClass[112237](arg pid[112234]:int(64)[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
        (466440 return _void[47])
      }
      (112244 call chpl_clearPrivatizedClass pid[112201])
      {
        const _cobeginCount[112301] "const" "end count" "temp"
        (112322 'move' _cobeginCount[112301](112319 call _endCountAlloc 1))
        (112314 call _upEndCount _cobeginCount[112301] 1 2)
        {
          unknown call_tmp[595429] "expr temp" "maybe param" "maybe type" "temp"
          (595432 'move' call_tmp[595429](112247 call left _mt[232] chpl_localeTree[150995]))
          unknown call_tmp[595434] "expr temp" "maybe param" "maybe type" "temp"
          (595437 'move' call_tmp[595434](112268 call _cond_test call_tmp[595429]))
          if call_tmp[595434]
          {
            {
              const tmp[112263] "const" "temp"
              unknown call_tmp[595441] "expr temp" "maybe param" "maybe type" "temp"
              (595444 'move' call_tmp[595441](112251 call left _mt[232] chpl_localeTree[150995]))
              unknown call_tmp[595446] "expr temp" "maybe param" "maybe type" "temp"
              (595449 'move' call_tmp[595446](112260 '_wide_get_locale' call_tmp[595441]))
              (112264 'move' tmp[112263](112261 'deref' call_tmp[595446]))
              (112258 call _freePrivatizedClassHelp pid[112201] original[112205])
            }
          }
          (112304 call _downEndCount _cobeginCount[112301] nil[38])
          (112303 'cobegin block')
        }
        {
          unknown call_tmp[595453] "expr temp" "maybe param" "maybe type" "temp"
          (595456 'move' call_tmp[595453](112275 call right _mt[232] chpl_localeTree[150995]))
          unknown call_tmp[595458] "expr temp" "maybe param" "maybe type" "temp"
          (595461 'move' call_tmp[595458](112296 call _cond_test call_tmp[595453]))
          if call_tmp[595458]
          {
            {
              const tmp[112291] "const" "temp"
              unknown call_tmp[595465] "expr temp" "maybe param" "maybe type" "temp"
              (595468 'move' call_tmp[595465](112279 call right _mt[232] chpl_localeTree[150995]))
              unknown call_tmp[595470] "expr temp" "maybe param" "maybe type" "temp"
              (595473 'move' call_tmp[595470](112288 '_wide_get_locale' call_tmp[595465]))
              (112292 'move' tmp[112291](112289 'deref' call_tmp[595470]))
              (112286 call _freePrivatizedClassHelp pid[112201] original[112205])
            }
          }
          (112310 call _downEndCount _cobeginCount[112301] nil[38])
          (112309 'cobegin block')
        }
        Defer
        {
          {
            (112325 call _endCountFree _cobeginCount[112301])
          }
        }
        (112330 call _waitEndCount _cobeginCount[112301] 1 2)
      }
      (466442 return _void[47])
    }
    label _end__freePrivatizedClass[466444]
    (466446 return _void[47])
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[112344](arg value[112342]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[595477] "maybe param" "maybe type" "temp"
    (595480 'move' call_tmp[595477](112347 call pid _mt[232] value[112342]))
    const pid[112350] "const" "insert auto destroy"
    (491141 'init var' pid[112350] call_tmp[595477])
    unknown call_tmp[595482] "expr temp" "maybe param" "maybe type" "temp"
    (595485 'move' call_tmp[595482](350447 call here[92085]))
    unknown call_tmp[595489] "maybe param" "maybe type" "temp"
    (595492 'move' call_tmp[595489](112355 call id _mt[232] call_tmp[595482]))
    const hereID[112358] "const" "insert auto destroy"
    (491143 'init var' hereID[112358] call_tmp[595489])
    unknown call_tmp[595496] "maybe param" "maybe type" "temp"
    (595499 'move' call_tmp[595496](112368 call(112364 call (partial) dsiGetReprivatizeData _mt[232] value[112342])))
    const reprivatizeData[112369] "const" "insert auto destroy"
    (491145 'init var' reprivatizeData[112369] call_tmp[595496])
    {
      const tmp[112388] "const" "temp"
      unknown call_tmp[595501] "expr temp" "maybe param" "maybe type" "temp"
      (595504 'move' call_tmp[595501](112375 call Locales[111767] 0))
      unknown call_tmp[595506] "expr temp" "maybe param" "maybe type" "temp"
      (595509 'move' call_tmp[595506](112385 '_wide_get_locale' call_tmp[595501]))
      (112389 'move' tmp[112388](112386 'deref' call_tmp[595506]))
      (112383 call _reprivatizeHelp value[112342] value[112342] pid[112350] hereID[112358] reprivatizeData[112369])
    }
    function _reprivatizeHelp[112397](arg parentValue[112395]:_any[170](?), arg originalValue[112399]:_any[170](?), arg pid[112401]:_any[170](?), arg hereID[112403]:_any[170](?), arg reprivatizeData[112405]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown newValue[112408] "insert auto destroy"
      (491147 'init var' newValue[112408] originalValue[112399])
      unknown call_tmp[595511] "expr temp" "maybe param" "maybe type" "temp"
      (595514 'move' call_tmp[595511](350458 call here[92085]))
      unknown call_tmp[595518] "expr temp" "maybe param" "maybe type" "temp"
      (595521 'move' call_tmp[595518](112414 call id _mt[232] call_tmp[595511]))
      unknown call_tmp[595523] "expr temp" "maybe param" "maybe type" "temp"
      (595526 'move' call_tmp[595523](112417 call != hereID[112403] call_tmp[595518]))
      unknown call_tmp[595528] "expr temp" "maybe param" "maybe type" "temp"
      (595531 'move' call_tmp[595528](112441 call _cond_test call_tmp[595523]))
      if call_tmp[595528]
      {
        unknown call_tmp[595533] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (595536 'move' call_tmp[595533](112422 'typeof' newValue[112408]))
        unknown call_tmp[595538] "expr temp" "maybe param" "maybe type" "temp"
        (595541 'move' call_tmp[595538](112425 call chpl_getPrivatizedCopy call_tmp[595533] pid[112401]))
        (112426 call = newValue[112408] call_tmp[595538])
        (112439 call(112433 call (partial) dsiReprivatize _mt[232] newValue[112408]) parentValue[112395] reprivatizeData[112405])
      }
      {
        const _cobeginCount[112506] "const" "end count" "temp"
        (112527 'move' _cobeginCount[112506](112524 call _endCountAlloc 1))
        (112519 call _upEndCount _cobeginCount[112506] 1 2)
        {
          unknown call_tmp[595547] "expr temp" "maybe param" "maybe type" "temp"
          (595550 'move' call_tmp[595547](112446 call left _mt[232] chpl_localeTree[150995]))
          unknown call_tmp[595552] "expr temp" "maybe param" "maybe type" "temp"
          (595555 'move' call_tmp[595552](112470 call _cond_test call_tmp[595547]))
          if call_tmp[595552]
          {
            {
              const tmp[112465] "const" "temp"
              unknown call_tmp[595559] "expr temp" "maybe param" "maybe type" "temp"
              (595562 'move' call_tmp[595559](112450 call left _mt[232] chpl_localeTree[150995]))
              unknown call_tmp[595564] "expr temp" "maybe param" "maybe type" "temp"
              (595567 'move' call_tmp[595564](112462 '_wide_get_locale' call_tmp[595559]))
              (112466 'move' tmp[112465](112463 'deref' call_tmp[595564]))
              (112460 call _reprivatizeHelp newValue[112408] originalValue[112399] pid[112401] hereID[112403] reprivatizeData[112405])
            }
          }
          (112509 call _downEndCount _cobeginCount[112506] nil[38])
          (112508 'cobegin block')
        }
        {
          unknown call_tmp[595571] "expr temp" "maybe param" "maybe type" "temp"
          (595574 'move' call_tmp[595571](112477 call right _mt[232] chpl_localeTree[150995]))
          unknown call_tmp[595576] "expr temp" "maybe param" "maybe type" "temp"
          (595579 'move' call_tmp[595576](112501 call _cond_test call_tmp[595571]))
          if call_tmp[595576]
          {
            {
              const tmp[112496] "const" "temp"
              unknown call_tmp[595583] "expr temp" "maybe param" "maybe type" "temp"
              (595586 'move' call_tmp[595583](112481 call right _mt[232] chpl_localeTree[150995]))
              unknown call_tmp[595588] "expr temp" "maybe param" "maybe type" "temp"
              (595591 'move' call_tmp[595588](112493 '_wide_get_locale' call_tmp[595583]))
              (112497 'move' tmp[112496](112494 'deref' call_tmp[595588]))
              (112491 call _reprivatizeHelp newValue[112408] originalValue[112399] pid[112401] hereID[112403] reprivatizeData[112405])
            }
          }
          (112515 call _downEndCount _cobeginCount[112506] nil[38])
          (112514 'cobegin block')
        }
        Defer
        {
          {
            (112530 call _endCountFree _cobeginCount[112506])
          }
        }
        (112535 call _waitEndCount _cobeginCount[112506] 1 2)
      }
      (466450 return _void[47])
    }
    (466452 return _void[47])
  }
  function _makeIndexTuple[112548](param arg rank[112546]:_any[170](?), arg t[112551]:_tuple[58502](?), param arg expand[112556]:bool[10] =
  0) : _unknown[43]
  {
    unknown ret[466456] "RVV" "temp"
    (466461 'move' ret[466456](466460 'deref' t[112551]))
    (466458 return ret[466456])
  }
  where {
    unknown call_tmp[595595] "expr temp" "maybe param" "maybe type" "temp"
    (595598 'move' call_tmp[595595](112562 call size _mt[232] t[112551]))
    (112565 call == rank[112546] call_tmp[595595])
  }
  function _makeIndexTuple[112578](param arg rank[112576]:_any[170](?), arg t[112581]:_tuple[58502](?), param arg expand[112586]:bool[10] =
  0) : _unknown[43] "no return value for void"
  {
    (112615 call compilerError "index rank must match domain rank")
    (466463 return _void[47])
  }
  where {
    unknown call_tmp[595602] "expr temp" "maybe param" "maybe type" "temp"
    (595605 'move' call_tmp[595602](112592 call size _mt[232] t[112581]))
    (112595 call != rank[112576] call_tmp[595602])
  }
  function _makeIndexTuple[112625](param arg rank[112623]:_any[170](?), arg val[112628]:integral[188](?), param arg expand[112633]:bool[10] =
  0) : _unknown[43]
  {
    unknown ret[466467] "RVV" "temp"
    unknown tmp[399501] "maybe param" "temp"
    (399512 'move' tmp[399501] expand[112633])
    unknown call_tmp[595607] "expr temp" "maybe param" "maybe type" "temp"
    (595610 'move' call_tmp[595607](399514 call _cond_invalid tmp[399501]))
    if call_tmp[595607]
    {
      (399517 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[512942] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[512943] "maybe param" "temp"
    unknown call_tmp[595612] "expr temp" "maybe param" "maybe type" "temp"
    (595615 'move' call_tmp[595612](399502 call isTrue tmp[399501]))
    (512948 'move' tmp[512943](512946 call _cond_test call_tmp[595612]))
    if tmp[512943]
    {
      (512953 'move' tmp[512942](512950 '_paramFoldLogical' tmp[512943] 1))
    }
    {
      unknown tmp[512955] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[595617] "expr temp" "maybe param" "maybe type" "temp"
      (595620 'move' call_tmp[595617](112640 call == rank[112623] 1))
      (512957 'move' tmp[512955](399506 call isTrue call_tmp[595617]))
      (512962 'move' tmp[512942](512959 '_paramFoldLogical' tmp[512943] tmp[512955]))
    }
    unknown call_tmp[595622] "expr temp" "maybe param" "maybe type" "temp"
    (595625 'move' call_tmp[595622](112720 call _cond_test tmp[512942]))
    if call_tmp[595622]
    {
      unknown t[112649] "insert auto destroy"
      unknown call_tmp[595627] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (595630 'move' call_tmp[595627](112646 'typeof' val[112628]))
      unknown call_tmp[595632] "expr temp" "maybe param" "maybe type" "temp"
      (595635 'move' call_tmp[595632](112647 call * rank[112623] call_tmp[595627]))
      (491149 'default init var' t[112649] call_tmp[595632])
      {
        unknown i[112665] "insert auto destroy"
        (491151 'init var' i[112665] 0)
        unknown tmp[112666] "maybe param" "temp"
        (112678 'move' tmp[112666](112676 call chpl_compute_low_param_loop_bound 1 rank[112623]))
        unknown tmp[112667] "maybe param" "temp"
        (112685 'move' tmp[112667](112683 call chpl_compute_high_param_loop_bound 1 rank[112623]))
        unknown tmp[112668] "maybe param" "temp"
        (112688 'move' tmp[112668] 1)
        ParamForLoop
        { i[112665] tmp[112666] tmp[112667] tmp[112668]
          unknown call_tmp[595637] "expr temp" "maybe param" "maybe type" "temp"
          (595640 'move' call_tmp[595637](112660 call t[112649] i[112665]))
          (112662 call = call_tmp[595637] val[112628])
        }
        label _unused_continueLabel[112670]
        label _breakLabel[112669]
      }
      (466472 'move' ret[466467](466471 'deref' t[112649]))
      gotoReturn _end__makeIndexTuple[466465] _end__makeIndexTuple[466465]
    }
    {
      unknown call_tmp[595642] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (595645 'move' call_tmp[595642](112704 'typeof' val[112628]))
      unknown call_tmp[595647] "expr temp" "maybe param" "maybe type" "temp"
      (595650 'move' call_tmp[595647](112706 call _cast string[24] call_tmp[595642]))
      (112709 call compilerWarning call_tmp[595647])
      (112715 call compilerError "index rank must match domain rank")
      (466477 'move' ret[466467](466476 'deref' val[112628]))
      gotoReturn _end__makeIndexTuple[466465] _end__makeIndexTuple[466465]
    }
    label _end__makeIndexTuple[466465]
    (466469 return ret[466467])
  }
  function _newArray[112731](arg value[112729]:_any[170](?)) : _unknown[43] "no copy return"
  {
    unknown ret[466483] "RVV" "temp"
    unknown call_tmp[595652] "expr temp" "maybe param" "maybe type" "temp"
    (595655 'move' call_tmp[595652](112736 call _isPrivatized value[112729]))
    unknown call_tmp[595657] "expr temp" "maybe param" "maybe type" "temp"
    (595660 'move' call_tmp[595657](112756 call _cond_test call_tmp[595652]))
    if call_tmp[595657]
    {
      unknown call_tmp[595662] "expr temp" "maybe param" "maybe type" "temp"
      (595665 'move' call_tmp[595662](112741 call _newPrivatizedClass value[112729]))
      unknown call_tmp[595667] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (595670 'move' call_tmp[595667](691411 'new' _array[133150](?) call_tmp[595662] value[112729]))
      (466488 'move' ret[466483](466487 'deref' call_tmp[595667]))
      gotoReturn _end__newArray[466481] _end__newArray[466481]
    }
    {
      unknown call_tmp[595672] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (595675 'move' call_tmp[595672](691412 'new' _array[133150](?) nullPid[111825] value[112729]))
      (466493 'move' ret[466483](466492 'deref' call_tmp[595672]))
      gotoReturn _end__newArray[466481] _end__newArray[466481]
    }
    label _end__newArray[466481]
    (466485 return ret[466483])
  }
  function _getDomain[112769](arg value[112767]:_any[170](?)) : _unknown[43]
  {
    unknown ret[466499] "RVV" "temp"
    unknown call_tmp[595677] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (595680 'move' call_tmp[595677](112773 'typeof' value[112767]))
    unknown call_tmp[595682] "expr temp" "maybe param" "maybe type" "temp"
    (595685 'move' call_tmp[595682](112775 call _to_unmanaged call_tmp[595677]))
    unknown call_tmp[595687] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (595690 'move' call_tmp[595687](112777 'typeof' value[112767]))
    unknown call_tmp[595692] "expr temp" "maybe param" "maybe type" "temp"
    (595695 'move' call_tmp[595692](112778 call != call_tmp[595682] call_tmp[595687]))
    unknown call_tmp[595697] "expr temp" "maybe param" "maybe type" "temp"
    (595700 'move' call_tmp[595697](112800 call _cond_test call_tmp[595692]))
    if call_tmp[595697]
    {
      (112798 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[595702] "expr temp" "maybe param" "maybe type" "temp"
    (595705 'move' call_tmp[595702](112809 call _isPrivatized value[112767]))
    unknown call_tmp[595707] "expr temp" "maybe param" "maybe type" "temp"
    (595710 'move' call_tmp[595707](112833 call _cond_test call_tmp[595702]))
    if call_tmp[595707]
    {
      unknown call_tmp[595714] "expr temp" "maybe param" "maybe type" "temp"
      (595717 'move' call_tmp[595714](112812 call pid _mt[232] value[112767]))
      unknown call_tmp[595719] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (595722 'move' call_tmp[595719](691413 'new' _domain[123390](?) call_tmp[595714] value[112767](_unowned = 1)))
      (466504 'move' ret[466499](466503 'deref' call_tmp[595719]))
      gotoReturn _end__getDomain[466497] _end__getDomain[466497]
    }
    {
      unknown call_tmp[595724] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (595727 'move' call_tmp[595724](691414 'new' _domain[123390](?) nullPid[111825] value[112767](_unowned = 1)))
      (466509 'move' ret[466499](466508 'deref' call_tmp[595724]))
      gotoReturn _end__getDomain[466497] _end__getDomain[466497]
    }
    label _end__getDomain[466497]
    (466501 return ret[466499])
  }
  function _getDistribution[112845](arg value[112843]:_any[170](?)) : _unknown[43]
  {
    unknown ret[466515] "RVV" "temp"
    unknown call_tmp[595729] "expr temp" "maybe param" "maybe type" "temp"
    (595732 'move' call_tmp[595729](112850 call _isPrivatized value[112843]))
    unknown call_tmp[595734] "expr temp" "maybe param" "maybe type" "temp"
    (595737 'move' call_tmp[595734](112874 call _cond_test call_tmp[595729]))
    if call_tmp[595734]
    {
      unknown call_tmp[595741] "expr temp" "maybe param" "maybe type" "temp"
      (595744 'move' call_tmp[595741](112853 call pid _mt[232] value[112843]))
      unknown call_tmp[595746] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (595749 'move' call_tmp[595746](691415 'new' _distribution[116702](?) call_tmp[595741] value[112843](_unowned = 1)))
      (466520 'move' ret[466515](466519 'deref' call_tmp[595746]))
      gotoReturn _end__getDistribution[466513] _end__getDistribution[466513]
    }
    {
      unknown call_tmp[595751] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (595754 'move' call_tmp[595751](691416 'new' _distribution[116702](?) nullPid[111825] value[112843](_unowned = 1)))
      (466525 'move' ret[466515](466524 'deref' call_tmp[595751]))
      gotoReturn _end__getDistribution[466513] _end__getDistribution[466513]
    }
    label _end__getDistribution[466513]
    (466517 return ret[466515])
  }
  function chpl__buildDomainRuntimeType[112889](arg d[112886]:_distribution[116702](?), param arg rank[112892]:int(64)[13], arg idxType[112896]:_any[170](?) =
  int(64)[13], param arg stridable[112901]:bool[10] =
  0) type : _unknown[43] "runtime type init fn"
  {
    unknown ret[466531] "RVV" "temp" "type variable"
    unknown call_tmp[595756] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (595759 'move' call_tmp[595756](691417 'new' _domain[123390](?) d[112886] rank[112892] idxType[112896] stridable[112901]))
    (466536 'move' ret[466531](466535 'deref' call_tmp[595756]))
    (466533 return ret[466531])
  }
  function chpl__buildDomainRuntimeType[112924](arg d[112921]:_distribution[116702](?), arg idxType[112926]:_any[170](?), param arg parSafe[112930]:bool[10] =
  1) type : _unknown[43] "runtime type init fn"
  {
    unknown ret[466540] "RVV" "temp" "type variable"
    unknown call_tmp[595761] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (595764 'move' call_tmp[595761](691418 'new' _domain[123390](?) d[112921] idxType[112926] parSafe[112930]))
    (466545 'move' ret[466540](466544 'deref' call_tmp[595761]))
    (466542 return ret[466540])
  }
  function chpl__buildDomainRuntimeType[112952](arg d[112949]:_distribution[116702](?), arg idxType[112955]:_OpaqueIndex[140304], param arg parSafe[112960]:bool[10] =
  1) type : _unknown[43] "runtime type init fn"
  {
    unknown ret[466549] "RVV" "temp" "type variable"
    unknown call_tmp[595766] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (595769 'move' call_tmp[595766](691419 'new' _domain[123390](?) d[112949] idxType[112955] parSafe[112960]))
    (466554 'move' ret[466549](466553 'deref' call_tmp[595766]))
    (466551 return ret[466549])
  }
  function chpl__buildDomainRuntimeType[112982](arg d[112979]:_distribution[116702](?), arg idxType[112985]:opaque[150]) type : _unknown[43]
  {
    unknown ret[466558] "RVV" "temp" "type variable"
    (113008 call compilerWarning "Opaque domains are deprecated - please switch to another domain type")
    unknown call_tmp[595771] "expr temp" "maybe param" "maybe type" "temp"
    (595774 'move' call_tmp[595771](113015 call chpl__buildDomainRuntimeType d[112979] _OpaqueIndex[140304]))
    (466563 'move' ret[466558](466562 'deref' call_tmp[595771]))
    (466560 return ret[466558])
  }
  function chpl__buildSparseDomainRuntimeType[113026](arg d[113023]:_distribution[116702](?), arg dom[113029]:_domain[123390](?)) type : _unknown[43] "runtime type init fn"
  {
    unknown ret[466567] "RVV" "temp" "type variable"
    unknown call_tmp[595776] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (595779 'move' call_tmp[595776](691420 'new' _domain[123390](?) d[113023] dom[113029]))
    (466572 'move' ret[466567](466571 'deref' call_tmp[595776]))
    (466569 return ret[466567])
  }
  function chpl__convertValueToRuntimeType[113049](arg dom[113046]:_domain[123390](?)) type : _unknown[43]
  {
    unknown ret[466576] "RVV" "temp" "type variable"
    unknown call_tmp[595783] "expr temp" "maybe param" "maybe type" "temp"
    (595786 'move' call_tmp[595783](113062 call dist _mt[232] dom[113046]))
    unknown call_tmp[595790] "expr temp" "maybe param" "maybe type" "temp"
    (595793 'move' call_tmp[595790](113067 call _value _mt[232] dom[113046]))
    unknown call_tmp[595797] "expr temp" "maybe param" "maybe type" "temp"
    (595800 'move' call_tmp[595797](113070 call rank _mt[232] call_tmp[595790]))
    unknown call_tmp[595804] "expr temp" "maybe param" "maybe type" "temp"
    (595807 'move' call_tmp[595804](113074 call _value _mt[232] dom[113046]))
    unknown call_tmp[595811] "expr temp" "maybe param" "maybe type" "temp"
    (595814 'move' call_tmp[595811](113077 call idxType _mt[232] call_tmp[595804]))
    unknown call_tmp[595818] "expr temp" "maybe param" "maybe type" "temp"
    (595821 'move' call_tmp[595818](113081 call _value _mt[232] dom[113046]))
    unknown call_tmp[595825] "expr temp" "maybe param" "maybe type" "temp"
    (595828 'move' call_tmp[595825](113084 call stridable _mt[232] call_tmp[595818]))
    unknown call_tmp[595830] "expr temp" "maybe param" "maybe type" "temp"
    (595833 'move' call_tmp[595830](113087 call chpl__buildDomainRuntimeType call_tmp[595783] call_tmp[595797] call_tmp[595811] call_tmp[595825]))
    (466581 'move' ret[466576](466580 'deref' call_tmp[595830]))
    (466578 return ret[466576])
  }
  where {
    { scopeless type
      unknown call_type_tmp[443337] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[595837] "expr temp" "maybe param" "maybe type" "temp"
      (595840 'move' call_tmp[595837](113053 call _value _mt[232] dom[113046]))
      (443341 'move' call_type_tmp[443337](113056 'typeof' call_tmp[595837]))
    }
    (328543 'is_subtype' anymanaged BaseRectangularDom[350552](?) call_type_tmp[443337])
  }
  function chpl__convertValueToRuntimeType[113100](arg dom[113097]:_domain[123390](?)) type : _unknown[43]
  {
    unknown ret[466585] "RVV" "temp" "type variable"
    unknown call_tmp[595844] "expr temp" "maybe param" "maybe type" "temp"
    (595847 'move' call_tmp[595844](113113 call dist _mt[232] dom[113097]))
    unknown call_tmp[595851] "expr temp" "maybe param" "maybe type" "temp"
    (595854 'move' call_tmp[595851](113118 call _value _mt[232] dom[113097]))
    unknown call_tmp[595858] "expr temp" "maybe param" "maybe type" "temp"
    (595861 'move' call_tmp[595858](113121 call idxType _mt[232] call_tmp[595851]))
    unknown call_tmp[595865] "expr temp" "maybe param" "maybe type" "temp"
    (595868 'move' call_tmp[595865](113125 call _value _mt[232] dom[113097]))
    unknown call_tmp[595872] "expr temp" "maybe param" "maybe type" "temp"
    (595875 'move' call_tmp[595872](113130 call parSafe _mt[232] call_tmp[595865]))
    unknown call_tmp[595877] "expr temp" "maybe param" "maybe type" "temp"
    (595880 'move' call_tmp[595877](113133 call chpl__buildDomainRuntimeType call_tmp[595844] call_tmp[595858] call_tmp[595872]))
    (466590 'move' ret[466585](466589 'deref' call_tmp[595877]))
    (466587 return ret[466585])
  }
  where {
    { scopeless type
      unknown call_type_tmp[443343] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[595884] "expr temp" "maybe param" "maybe type" "temp"
      (595887 'move' call_tmp[595884](113104 call _value _mt[232] dom[113097]))
      (443347 'move' call_type_tmp[443343](113107 'typeof' call_tmp[595884]))
    }
    (328544 'is_subtype' anymanaged BaseAssociativeDom[350562](?) call_type_tmp[443343])
  }
  function chpl__convertValueToRuntimeType[113146](arg dom[113143]:_domain[123390](?)) type : _unknown[43]
  {
    unknown ret[466594] "RVV" "temp" "type variable"
    unknown call_tmp[595891] "expr temp" "maybe param" "maybe type" "temp"
    (595894 'move' call_tmp[595891](113159 call dist _mt[232] dom[113143]))
    unknown call_tmp[595898] "expr temp" "maybe param" "maybe type" "temp"
    (595901 'move' call_tmp[595898](113164 call _value _mt[232] dom[113143]))
    unknown call_tmp[595905] "expr temp" "maybe param" "maybe type" "temp"
    (595908 'move' call_tmp[595905](113167 call idxType _mt[232] call_tmp[595898]))
    unknown call_tmp[595910] "expr temp" "maybe param" "maybe type" "temp"
    (595913 'move' call_tmp[595910](113170 call chpl__buildDomainRuntimeType call_tmp[595891] call_tmp[595905]))
    (466599 'move' ret[466594](466598 'deref' call_tmp[595910]))
    (466596 return ret[466594])
  }
  where {
    { scopeless type
      unknown call_type_tmp[443349] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[595917] "expr temp" "maybe param" "maybe type" "temp"
      (595920 'move' call_tmp[595917](113150 call _value _mt[232] dom[113143]))
      (443353 'move' call_type_tmp[443349](113153 'typeof' call_tmp[595917]))
    }
    (328545 'is_subtype' anymanaged BaseOpaqueDom[350571](?) call_type_tmp[443349])
  }
  function chpl__convertValueToRuntimeType[113183](arg dom[113180]:_domain[123390](?)) type : _unknown[43]
  {
    unknown ret[466603] "RVV" "temp" "type variable"
    unknown call_tmp[595924] "expr temp" "maybe param" "maybe type" "temp"
    (595927 'move' call_tmp[595924](113199 call dist _mt[232] dom[113180]))
    unknown call_tmp[595931] "expr temp" "maybe param" "maybe type" "temp"
    (595934 'move' call_tmp[595931](113204 call _value _mt[232] dom[113180]))
    unknown call_tmp[595938] "expr temp" "maybe param" "maybe type" "temp"
    (595941 'move' call_tmp[595938](113209 call parentDom _mt[232] call_tmp[595931]))
    unknown call_tmp[595943] "expr temp" "maybe param" "maybe type" "temp"
    (595946 'move' call_tmp[595943](113212 call chpl__buildSparseDomainRuntimeType call_tmp[595924] call_tmp[595938]))
    (466608 'move' ret[466603](466607 'deref' call_tmp[595943]))
    (466605 return ret[466603])
  }
  where {
    { scopeless type
      unknown call_type_tmp[443355] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[595950] "expr temp" "maybe param" "maybe type" "temp"
      (595953 'move' call_tmp[595950](113188 call _value _mt[232] dom[113180]))
      (443359 'move' call_type_tmp[443355](113191 'typeof' call_tmp[595950]))
    }
    unknown call_tmp[595955] "expr temp" "maybe param" "maybe type" "temp"
    (595958 'move' call_tmp[595955](113193 call _to_borrowed call_type_tmp[443355]))
    (328546 'is_subtype' anymanaged BaseSparseDom[350579](?) call_tmp[595955])
  }
  function chpl__convertValueToRuntimeType[113225](arg dom[113222]:_domain[123390](?)) type : _unknown[43]
  {
    unknown ret[466612] "RVV" "temp" "type variable"
    (113248 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, BaseOp 0)
    (466617 'move' ret[466612](466616 'deref' 0))
    (466614 return ret[466612])
  }
  function chpl__buildArrayRuntimeType[113262](arg dom[113259]:_domain[123390](?), arg eltType[113264]:_any[170](?)) type : _unknown[43] "runtime type init fn"
  {
    unknown ret[466621] "RVV" "temp" "type variable"
    unknown call_tmp[595962] "expr temp" "maybe param" "maybe type" "temp"
    (595965 'move' call_tmp[595962](113274 call(113269 call (partial) buildArray _mt[232] dom[113259]) eltType[113264]))
    (466626 'move' ret[466621](466625 'deref' call_tmp[595962]))
    (466623 return ret[466621])
  }
  function _getLiteralType[113284](arg t[113282]:_any[170](?)) type : _unknown[43]
  {
    unknown ret[466630] "RVV" "temp" "type variable"
    unknown call_tmp[595967] "expr temp" "maybe param" "maybe type" "temp"
    (595970 'move' call_tmp[595967](113288 call != t[113282] c_string[19]))
    unknown call_tmp[595972] "expr temp" "maybe param" "maybe type" "temp"
    (595975 'move' call_tmp[595972](113296 call _cond_test call_tmp[595967]))
    if call_tmp[595972]
    {
      (466635 'move' ret[466630](466634 'deref' t[113282]))
      gotoReturn _end__getLiteralType[466628] _end__getLiteralType[466628]
    }
    {
      (466640 'move' ret[466630](466639 'deref' string[24]))
      gotoReturn _end__getLiteralType[466628] _end__getLiteralType[466628]
    }
    label _end__getLiteralType[466628]
    (466632 return ret[466630])
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[113306] "config" "no doc" "param"
  function chpl__buildArrayExpr[113316](arg elems[113313]:_any[170](?) ...) : _unknown[43]
  {
    unknown ret[466646] "RVV" "temp"
    unknown tmp[399522] "maybe param" "temp"
    (399533 'move' tmp[399522](113320 call == CHPL_WARN_DOMAIN_LITERAL[113306] "true"))
    unknown call_tmp[595977] "expr temp" "maybe param" "maybe type" "temp"
    (595980 'move' call_tmp[595977](399535 call _cond_invalid tmp[399522]))
    if call_tmp[595977]
    {
      (399538 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[512969] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[512970] "maybe param" "temp"
    unknown call_tmp[595982] "expr temp" "maybe param" "maybe type" "temp"
    (595985 'move' call_tmp[595982](399523 call isTrue tmp[399522]))
    (512975 'move' tmp[512970](512973 call _cond_test call_tmp[595982]))
    if tmp[512970]
    {
      unknown tmp[512977] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[595987] "expr temp" "maybe param" "maybe type" "temp"
      (595990 'move' call_tmp[595987](113326 call elems[113313] 1))
      unknown call_tmp[595992] "expr temp" "maybe param" "maybe type" "temp"
      (595995 'move' call_tmp[595992](113328 call isRange call_tmp[595987]))
      (512979 'move' tmp[512977](399526 call isTrue call_tmp[595992]))
      (512984 'move' tmp[512969](512981 '_paramFoldLogical' tmp[512970] tmp[512977]))
    }
    {
      (512989 'move' tmp[512969](512986 '_paramFoldLogical' tmp[512970] 0))
    }
    unknown call_tmp[595997] "expr temp" "maybe param" "maybe type" "temp"
    (596000 'move' call_tmp[595997](113384 call _cond_test tmp[512969]))
    if call_tmp[595997]
    {
      (113381 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    { scopeless type
      unknown call_type_tmp[443361] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[596002] "expr temp" "maybe param" "maybe type" "temp"
      (596005 'move' call_tmp[596002](113393 call elems[113313] 1))
      (443365 'move' call_type_tmp[443361](113394 'typeof' call_tmp[596002]))
    }
    unknown elemType[113397] "insert auto destroy" "type variable"(113396 call _getLiteralType call_type_tmp[443361])
    (491158 'move' elemType[113397](491156 call _getLiteralType call_type_tmp[443361]))
    unknown A[113410] "insert auto destroy"
    unknown call_tmp[596007] "expr temp" "maybe param" "maybe type" "temp"
    (596010 'move' call_tmp[596007](113402 call chpl_build_bounded_range 1 k[113311]))
    unknown call_tmp[596012] "expr temp" "maybe param" "maybe type" "temp"
    (596015 'move' call_tmp[596012](113406 call chpl__ensureDomainExpr call_tmp[596007]))
    unknown call_tmp[596017] "expr temp" "maybe param" "maybe type" "temp"
    (596020 'move' call_tmp[596017](113408 call chpl__buildArrayRuntimeType call_tmp[596012] elemType[113397]))
    (491160 'default init var' A[113410] call_tmp[596017])
    {
      unknown i[113523] "insert auto destroy"
      (491162 'init var' i[113523] 0)
      unknown tmp[113524] "maybe param" "temp"
      (113536 'move' tmp[113524](113534 call chpl_compute_low_param_loop_bound 1 k[113311]))
      unknown tmp[113525] "maybe param" "temp"
      (113543 'move' tmp[113525](113541 call chpl_compute_high_param_loop_bound 1 k[113311]))
      unknown tmp[113526] "maybe param" "temp"
      (113546 'move' tmp[113526] 1)
      ParamForLoop
      { i[113523] tmp[113524] tmp[113525] tmp[113526]
        {
          { scopeless type
            unknown call_type_tmp[443367] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[596022] "expr temp" "maybe param" "maybe type" "temp"
            (596025 'move' call_tmp[596022](113421 call elems[113313] i[113523]))
            (443371 'move' call_type_tmp[443367](113422 'typeof' call_tmp[596022]))
          }
          unknown currType[113425] "insert auto destroy" "type variable"(113424 call _getLiteralType call_type_tmp[443367])
          (491167 'move' currType[113425](491165 call _getLiteralType call_type_tmp[443367]))
          unknown call_tmp[596027] "expr temp" "maybe param" "maybe type" "temp"
          (596030 'move' call_tmp[596027](113431 call != currType[113425] elemType[113397]))
          unknown call_tmp[596032] "expr temp" "maybe param" "maybe type" "temp"
          (596035 'move' call_tmp[596032](113508 call _cond_test call_tmp[596027]))
          if call_tmp[596032]
          {
            unknown call_tmp[596037] "expr temp" "maybe param" "maybe type" "temp"
            (596040 'move' call_tmp[596037](113452 call _cast string[24] i[113523]))
            unknown call_tmp[596042] "expr temp" "maybe param" "maybe type" "temp"
            (596045 'move' call_tmp[596042](113454 call + "Array literal element " call_tmp[596037]))
            unknown call_tmp[596047] "expr temp" "maybe param" "maybe type" "temp"
            (596050 'move' call_tmp[596047](113472 call + call_tmp[596042] " expected to be of type "))
            unknown call_tmp[596052] "expr temp" "maybe param" "maybe type" "temp"
            (596055 'move' call_tmp[596052](113476 call _cast string[24] elemType[113397]))
            unknown call_tmp[596057] "expr temp" "maybe param" "maybe type" "temp"
            (596060 'move' call_tmp[596057](113478 call + call_tmp[596047] call_tmp[596052]))
            unknown call_tmp[596062] "expr temp" "maybe param" "maybe type" "temp"
            (596065 'move' call_tmp[596062](113496 call + call_tmp[596057] " but is of type "))
            unknown call_tmp[596067] "expr temp" "maybe param" "maybe type" "temp"
            (596070 'move' call_tmp[596067](113500 call _cast string[24] currType[113425]))
            unknown call_tmp[596072] "expr temp" "maybe param" "maybe type" "temp"
            (596075 'move' call_tmp[596072](113502 call + call_tmp[596062] call_tmp[596067]))
            (113505 call compilerError call_tmp[596072])
          }
          unknown call_tmp[596077] "expr temp" "maybe param" "maybe type" "temp"
          (596080 'move' call_tmp[596077](113515 call A[113410] i[113523]))
          unknown call_tmp[596082] "expr temp" "maybe param" "maybe type" "temp"
          (596085 'move' call_tmp[596082](113519 call elems[113313] i[113523]))
          (113520 call = call_tmp[596077] call_tmp[596082])
        }
      }
      label _unused_continueLabel[113528]
      label _breakLabel[113527]
    }
    (466651 'move' ret[466646](466650 'deref' A[113410]))
    (466648 return ret[466646])
  }
  function chpl__buildAssociativeArrayExpr[113569](arg elems[113566]:_any[170](?) ...) : _unknown[43]
  {
    unknown ret[466655] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443373] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[596087] "expr temp" "maybe param" "maybe type" "temp"
      (596090 'move' call_tmp[596087](113575 call elems[113566] 1))
      (443377 'move' call_type_tmp[443373](113576 'typeof' call_tmp[596087]))
    }
    unknown keyType[113579] "insert auto destroy" "type variable"(113578 call _getLiteralType call_type_tmp[443373])
    (491172 'move' keyType[113579](491170 call _getLiteralType call_type_tmp[443373]))
    { scopeless type
      unknown call_type_tmp[443379] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[596092] "expr temp" "maybe param" "maybe type" "temp"
      (596095 'move' call_tmp[596092](113587 call elems[113566] 2))
      (443383 'move' call_type_tmp[443379](113588 'typeof' call_tmp[596092]))
    }
    unknown valType[113591] "insert auto destroy" "type variable"(113590 call _getLiteralType call_type_tmp[443379])
    (491177 'move' valType[113591](491175 call _getLiteralType call_type_tmp[443379]))
    unknown D[113599] "insert auto destroy"
    unknown call_tmp[596097] "expr temp" "maybe param" "maybe type" "temp"
    (596100 'move' call_tmp[596097](113597 call chpl__buildDomainRuntimeType defaultDist[93214] keyType[113579]))
    (491179 'default init var' D[113599] call_tmp[596097])
    unknown call_tmp[596104] "expr temp" "maybe param" "maybe type" "temp"
    (596107 'move' call_tmp[596104](113610 call / k[113564] 2))
    (113613 call(113605 call (partial) requestCapacity _mt[232] D[113599]) call_tmp[596104])
    unknown A[113622] "insert auto destroy"
    unknown call_tmp[596109] "expr temp" "maybe param" "maybe type" "temp"
    (596112 'move' call_tmp[596109](113618 call chpl__ensureDomainExpr D[113599]))
    unknown call_tmp[596114] "expr temp" "maybe param" "maybe type" "temp"
    (596117 'move' call_tmp[596114](113620 call chpl__buildArrayRuntimeType call_tmp[596109] valType[113591]))
    (491181 'default init var' A[113622] call_tmp[596114])
    {
      unknown i[113797] "insert auto destroy"
      (491183 'init var' i[113797] 0)
      unknown tmp[113798] "maybe param" "temp"
      (113809 'move' tmp[113798](113807 call chpl_compute_low_param_loop_bound 1 k[113564]))
      unknown tmp[113799] "maybe param" "temp"
      (113816 'move' tmp[113799](113814 call chpl_compute_high_param_loop_bound 1 k[113564]))
      unknown tmp[113800] "maybe param" "temp"
      (113819 'move' tmp[113800] 2)
      ParamForLoop
      { i[113797] tmp[113798] tmp[113799] tmp[113800]
        {
          unknown call_tmp[596119] "maybe param" "maybe type" "temp"
          (596122 'move' call_tmp[596119](113635 call elems[113566] i[113797]))
          unknown elemKey[113636] "insert auto destroy"
          (491185 'init var' elemKey[113636] call_tmp[596119])
          unknown call_tmp[596124] "expr temp" "maybe param" "maybe type" "temp"
          (596127 'move' call_tmp[596124](113643 call + i[113797] 1))
          unknown call_tmp[596129] "maybe param" "maybe type" "temp"
          (596132 'move' call_tmp[596129](113646 call elems[113566] call_tmp[596124]))
          unknown elemVal[113647] "insert auto destroy"
          (491187 'init var' elemVal[113647] call_tmp[596129])
          unknown call_tmp[596134] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (596137 'move' call_tmp[596134](113652 'typeof' elemKey[113636]))
          unknown elemKeyType[113655] "insert auto destroy" "type variable"(113654 call _getLiteralType call_tmp[596134])
          unknown call_tmp[596139] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (596142 'move' call_tmp[596139](491191 'typeof' elemKey[113636]))
          (491193 'move' elemKeyType[113655](491190 call _getLiteralType call_tmp[596139]))
          unknown call_tmp[596144] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (596147 'move' call_tmp[596144](113660 'typeof' elemVal[113647]))
          unknown elemValType[113663] "insert auto destroy" "type variable"(113662 call _getLiteralType call_tmp[596144])
          unknown call_tmp[596149] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (596152 'move' call_tmp[596149](491197 'typeof' elemVal[113647]))
          (491199 'move' elemValType[113663](491196 call _getLiteralType call_tmp[596149]))
          unknown call_tmp[596154] "expr temp" "maybe param" "maybe type" "temp"
          (596157 'move' call_tmp[596154](113668 call != elemKeyType[113655] keyType[113579]))
          unknown call_tmp[596159] "expr temp" "maybe param" "maybe type" "temp"
          (596162 'move' call_tmp[596159](113721 call _cond_test call_tmp[596154]))
          if call_tmp[596159]
          {
            unknown call_tmp[596164] "expr temp" "maybe param" "maybe type" "temp"
            (596167 'move' call_tmp[596164](113689 call + i[113797] 2))
            unknown call_tmp[596169] "expr temp" "maybe param" "maybe type" "temp"
            (596172 'move' call_tmp[596169](113692 call / call_tmp[596164] 2))
            unknown call_tmp[596174] "expr temp" "maybe param" "maybe type" "temp"
            (596177 'move' call_tmp[596174](113695 call _cast string[24] call_tmp[596169]))
            unknown call_tmp[596179] "expr temp" "maybe param" "maybe type" "temp"
            (596182 'move' call_tmp[596179](113697 call + "Associative array key element " call_tmp[596174]))
            unknown call_tmp[596184] "expr temp" "maybe param" "maybe type" "temp"
            (596187 'move' call_tmp[596184](113700 call + call_tmp[596179] " expected to be of type "))
            unknown call_tmp[596189] "expr temp" "maybe param" "maybe type" "temp"
            (596192 'move' call_tmp[596189](113704 call _cast string[24] keyType[113579]))
            unknown call_tmp[596194] "expr temp" "maybe param" "maybe type" "temp"
            (596197 'move' call_tmp[596194](113706 call + call_tmp[596184] call_tmp[596189]))
            unknown call_tmp[596199] "expr temp" "maybe param" "maybe type" "temp"
            (596202 'move' call_tmp[596199](113709 call + call_tmp[596194] " but is of type "))
            unknown call_tmp[596204] "expr temp" "maybe param" "maybe type" "temp"
            (596207 'move' call_tmp[596204](113713 call _cast string[24] elemKeyType[113655]))
            unknown call_tmp[596209] "expr temp" "maybe param" "maybe type" "temp"
            (596212 'move' call_tmp[596209](113715 call + call_tmp[596199] call_tmp[596204]))
            (113718 call compilerError call_tmp[596209])
          }
          unknown call_tmp[596214] "expr temp" "maybe param" "maybe type" "temp"
          (596217 'move' call_tmp[596214](113727 call != elemValType[113663] valType[113591]))
          unknown call_tmp[596219] "expr temp" "maybe param" "maybe type" "temp"
          (596222 'move' call_tmp[596219](113780 call _cond_test call_tmp[596214]))
          if call_tmp[596219]
          {
            unknown call_tmp[596224] "expr temp" "maybe param" "maybe type" "temp"
            (596227 'move' call_tmp[596224](113748 call + i[113797] 1))
            unknown call_tmp[596229] "expr temp" "maybe param" "maybe type" "temp"
            (596232 'move' call_tmp[596229](113751 call / call_tmp[596224] 2))
            unknown call_tmp[596234] "expr temp" "maybe param" "maybe type" "temp"
            (596237 'move' call_tmp[596234](113754 call _cast string[24] call_tmp[596229]))
            unknown call_tmp[596239] "expr temp" "maybe param" "maybe type" "temp"
            (596242 'move' call_tmp[596239](113756 call + "Associative array value element " call_tmp[596234]))
            unknown call_tmp[596244] "expr temp" "maybe param" "maybe type" "temp"
            (596247 'move' call_tmp[596244](113759 call + call_tmp[596239] " expected to be of type "))
            unknown call_tmp[596249] "expr temp" "maybe param" "maybe type" "temp"
            (596252 'move' call_tmp[596249](113763 call _cast string[24] valType[113591]))
            unknown call_tmp[596254] "expr temp" "maybe param" "maybe type" "temp"
            (596257 'move' call_tmp[596254](113765 call + call_tmp[596244] call_tmp[596249]))
            unknown call_tmp[596259] "expr temp" "maybe param" "maybe type" "temp"
            (596262 'move' call_tmp[596259](113768 call + call_tmp[596254] " but is of type "))
            unknown call_tmp[596264] "expr temp" "maybe param" "maybe type" "temp"
            (596267 'move' call_tmp[596264](113772 call _cast string[24] elemValType[113663]))
            unknown call_tmp[596269] "expr temp" "maybe param" "maybe type" "temp"
            (596272 'move' call_tmp[596269](113774 call + call_tmp[596259] call_tmp[596264]))
            (113777 call compilerError call_tmp[596269])
          }
          (113786 call += D[113599] elemKey[113636])
          unknown call_tmp[596274] "expr temp" "maybe param" "maybe type" "temp"
          (596277 'move' call_tmp[596274](113792 call A[113622] elemKey[113636]))
          (113794 call = call_tmp[596274] elemVal[113647])
        }
      }
      label _unused_continueLabel[113802]
      label _breakLabel[113801]
    }
    (466660 'move' ret[466655](466659 'deref' A[113622]))
    (466657 return ret[466655])
  }
  function chpl__convertValueToRuntimeType[113843](arg arr[113840]:_array[133150](?)) type : _unknown[43]
  {
    unknown ret[466664] "RVV" "temp" "type variable"
    unknown call_tmp[596281] "expr temp" "maybe param" "maybe type" "temp"
    (596284 'move' call_tmp[596281](113847 call _dom _mt[232] arr[113840]))
    unknown call_tmp[596288] "expr temp" "maybe param" "maybe type" "temp"
    (596291 'move' call_tmp[596288](113852 call eltType _mt[232] arr[113840]))
    unknown call_tmp[596293] "expr temp" "maybe param" "maybe type" "temp"
    (596296 'move' call_tmp[596293](113855 call chpl__buildArrayRuntimeType call_tmp[596281] call_tmp[596288]))
    (466669 'move' ret[466664](466668 'deref' call_tmp[596293]))
    (466666 return ret[466664])
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[113868](arg arr[113865]:unmanaged BaseArr[389867], arg eltType[113870]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[596298] "expr temp" "maybe param" "maybe type" "temp"
    (596301 'move' call_tmp[596298](113875 call isArrayType eltType[113870]))
    unknown call_tmp[596303] "expr temp" "maybe param" "maybe type" "temp"
    (596306 'move' call_tmp[596303](113916 call _cond_test call_tmp[596298]))
    if call_tmp[596303]
    {
      unknown call_tmp[596310] "expr temp" "maybe param" "maybe type" "temp"
      (596313 'move' call_tmp[596310](113879 call _decEltRefCounts _mt[232] arr[113865]))
      (113883 call = call_tmp[596310] 1)
      unknown ev[113888] "insert auto destroy"
      (491201 'default init var' ev[113888] eltType[113870])
      unknown call_tmp[596317] "expr temp" "maybe param" "maybe type" "temp"
      (596320 'move' call_tmp[596317](113892 call _dom _mt[232] ev[113888]))
      unknown call_tmp[596324] "expr temp" "maybe param" "maybe type" "temp"
      (596327 'move' call_tmp[596324](113895 call _value _mt[232] call_tmp[596317]))
      (113905 call(113900 call (partial) add_containing_arr _mt[232] call_tmp[596324]) arr[113865])
      unknown call_tmp[596333] "expr temp" "maybe param" "maybe type" "temp"
      (596336 'move' call_tmp[596333](113911 call eltType _mt[232] ev[113888]))
      (113914 call chpl_incRefCountsForDomainsInArrayEltTypes arr[113865] call_tmp[596333])
    }
    (466671 return _void[47])
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[113930](arg arr[113927]:unmanaged BaseArr[389867], arg eltType[113932]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[596338] "expr temp" "maybe param" "maybe type" "temp"
    (596341 'move' call_tmp[596338](113937 call isArrayType eltType[113932]))
    unknown call_tmp[596343] "expr temp" "maybe param" "maybe type" "temp"
    (596346 'move' call_tmp[596343](114032 call _cond_test call_tmp[596338]))
    if call_tmp[596343]
    {
      unknown call_tmp[596350] "expr temp" "maybe param" "maybe type" "temp"
      (596353 'move' call_tmp[596350](113939 call _decEltRefCounts _mt[232] arr[113927]))
      unknown call_tmp[596355] "expr temp" "maybe param" "maybe type" "temp"
      (596358 'move' call_tmp[596355](113943 call == call_tmp[596350] 0))
      unknown call_tmp[596360] "expr temp" "maybe param" "maybe type" "temp"
      (596363 'move' call_tmp[596360](113965 call _cond_test call_tmp[596355]))
      if call_tmp[596360]
      {
        (113963 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown ev[113972] "insert auto destroy"
      (491203 'default init var' ev[113972] eltType[113932])
      unknown call_tmp[596367] "expr temp" "maybe param" "maybe type" "temp"
      (596370 'move' call_tmp[596367](113976 call _dom _mt[232] ev[113972]))
      unknown call_tmp[596374] "expr temp" "maybe param" "maybe type" "temp"
      (596377 'move' call_tmp[596374](113979 call _value _mt[232] call_tmp[596367]))
      unknown call_tmp[596381] "maybe param" "maybe type" "temp"
      (596384 'move' call_tmp[596381](113989 call(113984 call (partial) remove_containing_arr _mt[232] call_tmp[596374]) arr[113927]))
      const refcount[113990] "const" "insert auto destroy"
      (491205 'init var' refcount[113990] call_tmp[596381])
      unknown call_tmp[596386] "expr temp" "maybe param" "maybe type" "temp"
      (596389 'move' call_tmp[596386](113995 call == refcount[113990] 0))
      unknown call_tmp[596391] "expr temp" "maybe param" "maybe type" "temp"
      (596394 'move' call_tmp[596391](114018 call _cond_test call_tmp[596386]))
      if call_tmp[596391]
      {
        unknown call_tmp[596398] "expr temp" "maybe param" "maybe type" "temp"
        (596401 'move' call_tmp[596398](113999 call _dom _mt[232] ev[113972]))
        unknown call_tmp[596405] "expr temp" "maybe param" "maybe type" "temp"
        (596408 'move' call_tmp[596405](114002 call _value _mt[232] call_tmp[596398]))
        unknown call_tmp[596412] "expr temp" "maybe param" "maybe type" "temp"
        (596415 'move' call_tmp[596412](114008 call _dom _mt[232] ev[113972]))
        unknown call_tmp[596419] "expr temp" "maybe param" "maybe type" "temp"
        (596422 'move' call_tmp[596419](114011 call _value _mt[232] call_tmp[596412]))
        unknown call_tmp[596424] "expr temp" "maybe param" "maybe type" "temp"
        (596427 'move' call_tmp[596424](114015 call _isPrivatized call_tmp[596419]))
        (114016 call _delete_dom call_tmp[596405] call_tmp[596424])
      }
      unknown call_tmp[596431] "expr temp" "maybe param" "maybe type" "temp"
      (596434 'move' call_tmp[596431](114027 call eltType _mt[232] ev[113972]))
      (114030 call chpl_decRefCountsForDomainsInArrayEltTypes arr[113927] call_tmp[596431])
    }
    (466673 return _void[47])
  }
  function chpl__buildSubDomainType[114045](arg dom[114042]:_domain[123390](?)) type : _unknown[43]
  {
    unknown ret[466677] "RVV" "temp" "type variable"
    unknown call_tmp[596436] "expr temp" "maybe param" "maybe type" "temp"
    (596439 'move' call_tmp[596436](114050 call chpl__convertValueToRuntimeType dom[114042]))
    (466682 'move' ret[466677](466681 'deref' call_tmp[596436]))
    (466679 return ret[466677])
  }
  function chpl__isTupleOfRanges[114060](arg tup[114058]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[466686] "RVV" "param" "temp"
    {
      unknown i[114088] "insert auto destroy"
      (491207 'init var' i[114088] 0)
      unknown tmp[114089] "maybe param" "temp"
      unknown call_tmp[596443] "expr temp" "maybe param" "maybe type" "temp"
      (596446 'move' call_tmp[596443](114064 call size _mt[232] tup[114058]))
      (114101 'move' tmp[114089](114099 call chpl_compute_low_param_loop_bound 1 call_tmp[596443]))
      unknown tmp[114090] "maybe param" "temp"
      unknown call_tmp[596450] "expr temp" "maybe param" "maybe type" "temp"
      (596453 'move' call_tmp[596450](114106 call size _mt[232] tup[114058]))
      (114111 'move' tmp[114090](114109 call chpl_compute_high_param_loop_bound 1 call_tmp[596450]))
      unknown tmp[114091] "maybe param" "temp"
      (114114 'move' tmp[114091] 1)
      ParamForLoop
      { i[114088] tmp[114089] tmp[114090] tmp[114091]
        {
          { scopeless type
            unknown call_type_tmp[443385] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[596455] "expr temp" "maybe param" "maybe type" "temp"
            (596458 'move' call_tmp[596455](114073 call tup[114058] i[114088]))
            (443389 'move' call_type_tmp[443385](114074 'typeof' call_tmp[596455]))
          }
          unknown call_tmp[596460] "expr temp" "maybe param" "maybe type" "temp"
          (596463 'move' call_tmp[596460](114076 call isRangeType call_type_tmp[443385]))
          unknown call_tmp[596465] "expr temp" "maybe param" "maybe type" "temp"
          (596468 'move' call_tmp[596465](114077 call ! call_tmp[596460]))
          unknown call_tmp[596470] "expr temp" "maybe param" "maybe type" "temp"
          (596473 'move' call_tmp[596470](114082 call _cond_test call_tmp[596465]))
          if call_tmp[596470]
          {
            (466691 'move' ret[466686](466690 'deref' 0))
            gotoReturn _end_chpl__isTupleOfRanges[466684] _end_chpl__isTupleOfRanges[466684]
          }
        }
      }
      label _unused_continueLabel[114093]
      label _breakLabel[114092]
    }
    (466696 'move' ret[466686](466695 'deref' 1))
    label _end_chpl__isTupleOfRanges[466684]
    (466688 return ret[466686])
  }
  function chpl__buildDomainExpr[114137](arg ranges[114134]:_any[170](?) ...) : _unknown[43]
  {
    unknown ret[466700] "RVV" "temp"
    unknown call_tmp[596477] "maybe param" "maybe type" "temp"
    (596480 'move' call_tmp[596477](114144 call size _mt[232] ranges[114134]))
    unknown rank[114147] "param"
    (491209 'init var' rank[114147] call_tmp[596477])
    {
      unknown i[114196] "insert auto destroy"
      (491211 'init var' i[114196] 0)
      unknown tmp[114197] "maybe param" "temp"
      (114209 'move' tmp[114197](114207 call chpl_compute_low_param_loop_bound 2 rank[114147]))
      unknown tmp[114198] "maybe param" "temp"
      (114216 'move' tmp[114198](114214 call chpl_compute_high_param_loop_bound 2 rank[114147]))
      unknown tmp[114199] "maybe param" "temp"
      (114219 'move' tmp[114199] 1)
      ParamForLoop
      { i[114196] tmp[114197] tmp[114198] tmp[114199]
        unknown call_tmp[596482] "expr temp" "maybe param" "maybe type" "temp"
        (596485 'move' call_tmp[596482](114158 call ranges[114134] 1))
        unknown call_tmp[596489] "expr temp" "maybe param" "maybe type" "temp"
        (596492 'move' call_tmp[596489](114159 call idxType _mt[232] call_tmp[596482]))
        unknown call_tmp[596494] "expr temp" "maybe param" "maybe type" "temp"
        (596497 'move' call_tmp[596494](114165 call ranges[114134] i[114196]))
        unknown call_tmp[596501] "expr temp" "maybe param" "maybe type" "temp"
        (596504 'move' call_tmp[596501](114166 call idxType _mt[232] call_tmp[596494]))
        unknown call_tmp[596506] "expr temp" "maybe param" "maybe type" "temp"
        (596509 'move' call_tmp[596506](114169 call != call_tmp[596489] call_tmp[596501]))
        unknown call_tmp[596511] "expr temp" "maybe param" "maybe type" "temp"
        (596514 'move' call_tmp[596511](114191 call _cond_test call_tmp[596506]))
        if call_tmp[596511]
        {
          (114189 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[114201]
      label _breakLabel[114200]
    }
    {
      unknown i[114268] "insert auto destroy"
      (491213 'init var' i[114268] 0)
      unknown tmp[114269] "maybe param" "temp"
      (114281 'move' tmp[114269](114279 call chpl_compute_low_param_loop_bound 1 rank[114147]))
      unknown tmp[114270] "maybe param" "temp"
      (114288 'move' tmp[114270](114286 call chpl_compute_high_param_loop_bound 1 rank[114147]))
      unknown tmp[114271] "maybe param" "temp"
      (114291 'move' tmp[114271] 1)
      ParamForLoop
      { i[114268] tmp[114269] tmp[114270] tmp[114271]
        unknown call_tmp[596516] "expr temp" "maybe param" "maybe type" "temp"
        (596519 'move' call_tmp[596516](114238 call ranges[114134] i[114268]))
        unknown call_tmp[596521] "expr temp" "maybe param" "maybe type" "temp"
        (596524 'move' call_tmp[596521](114240 call isBoundedRange call_tmp[596516]))
        unknown call_tmp[596526] "expr temp" "maybe param" "maybe type" "temp"
        (596529 'move' call_tmp[596526](114241 call ! call_tmp[596521]))
        unknown call_tmp[596531] "expr temp" "maybe param" "maybe type" "temp"
        (596534 'move' call_tmp[596531](114263 call _cond_test call_tmp[596526]))
        if call_tmp[596531]
        {
          (114261 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[114273]
      label _breakLabel[114272]
    }
    unknown d[114318] "insert auto destroy"
    unknown call_tmp[596536] "expr temp" "maybe param" "maybe type" "temp"
    (596539 'move' call_tmp[596536](114307 call ranges[114134] 1))
    unknown call_tmp[596543] "expr temp" "maybe param" "maybe type" "temp"
    (596546 'move' call_tmp[596543](114308 call idxType _mt[232] call_tmp[596536]))
    unknown call_tmp[596548] "expr temp" "maybe param" "maybe type" "temp"
    (596551 'move' call_tmp[596548](114314 call chpl__anyStridable ranges[114134]))
    unknown call_tmp[596553] "expr temp" "maybe param" "maybe type" "temp"
    (596556 'move' call_tmp[596553](114316 call chpl__buildDomainRuntimeType defaultDist[93214] rank[114147] call_tmp[596543] call_tmp[596548]))
    (491215 'default init var' d[114318] call_tmp[596553])
    (114329 call(114324 call (partial) setIndices _mt[232] d[114318]) ranges[114134])
    (466705 'move' ret[466700](466704 'deref' d[114318]))
    (466702 return ret[466700])
  }
  where {
    (114142 call chpl__isTupleOfRanges ranges[114134])
  }
  function chpl__buildDomainExpr[114343](arg keys[114340]:_any[170](?) ...) : _unknown[43]
  {
    unknown ret[466709] "RVV" "temp"
    unknown call_tmp[596562] "maybe param" "maybe type" "temp"
    (596565 'move' call_tmp[596562](114346 call size _mt[232] keys[114340]))
    unknown count[114349] "param"
    (491217 'init var' count[114349] call_tmp[596562])
    { scopeless type
      unknown call_type_tmp[443391] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[596567] "expr temp" "maybe param" "maybe type" "temp"
      (596570 'move' call_tmp[596567](114357 call keys[114340] 1))
      (443395 'move' call_type_tmp[443391](114358 'typeof' call_tmp[596567]))
    }
    unknown keyType[114361] "insert auto destroy" "type variable"(114360 call _getLiteralType call_type_tmp[443391])
    (491222 'move' keyType[114361](491220 call _getLiteralType call_type_tmp[443391]))
    {
      unknown i[114435] "insert auto destroy"
      (491224 'init var' i[114435] 0)
      unknown tmp[114436] "maybe param" "temp"
      (114448 'move' tmp[114436](114446 call chpl_compute_low_param_loop_bound 2 count[114349]))
      unknown tmp[114437] "maybe param" "temp"
      (114455 'move' tmp[114437](114453 call chpl_compute_high_param_loop_bound 2 count[114349]))
      unknown tmp[114438] "maybe param" "temp"
      (114458 'move' tmp[114438] 1)
      ParamForLoop
      { i[114435] tmp[114436] tmp[114437] tmp[114438]
        { scopeless type
          unknown call_type_tmp[443397] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[596572] "expr temp" "maybe param" "maybe type" "temp"
          (596575 'move' call_tmp[596572](114373 call keys[114340] i[114435]))
          (443401 'move' call_type_tmp[443397](114374 'typeof' call_tmp[596572]))
        }
        unknown call_tmp[596577] "expr temp" "maybe param" "maybe type" "temp"
        (596580 'move' call_tmp[596577](114376 call _getLiteralType call_type_tmp[443397]))
        unknown call_tmp[596582] "expr temp" "maybe param" "maybe type" "temp"
        (596585 'move' call_tmp[596582](114377 call != keyType[114361] call_tmp[596577]))
        unknown call_tmp[596587] "expr temp" "maybe param" "maybe type" "temp"
        (596590 'move' call_tmp[596587](114431 call _cond_test call_tmp[596582]))
        if call_tmp[596587]
        {
          { scopeless type
            unknown call_type_tmp[443403] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[596592] "expr temp" "maybe param" "maybe type" "temp"
            (596595 'move' call_tmp[596592](114418 call keys[114340] i[114435]))
            (443407 'move' call_type_tmp[443403](114419 'typeof' call_tmp[596592]))
          }
          unknown call_tmp[596597] "expr temp" "maybe param" "maybe type" "temp"
          (596600 'move' call_tmp[596597](114398 call _cast string[24] i[114435]))
          unknown call_tmp[596602] "expr temp" "maybe param" "maybe type" "temp"
          (596605 'move' call_tmp[596602](114400 call + "Associative domain element " call_tmp[596597]))
          unknown call_tmp[596607] "expr temp" "maybe param" "maybe type" "temp"
          (596610 'move' call_tmp[596607](114403 call + call_tmp[596602] " expected to be of type "))
          unknown call_tmp[596612] "expr temp" "maybe param" "maybe type" "temp"
          (596615 'move' call_tmp[596612](114407 call _cast string[24] keyType[114361]))
          unknown call_tmp[596617] "expr temp" "maybe param" "maybe type" "temp"
          (596620 'move' call_tmp[596617](114409 call + call_tmp[596607] call_tmp[596612]))
          unknown call_tmp[596622] "expr temp" "maybe param" "maybe type" "temp"
          (596625 'move' call_tmp[596622](114412 call + call_tmp[596617] " but is of type "))
          unknown call_tmp[596627] "expr temp" "maybe param" "maybe type" "temp"
          (596630 'move' call_tmp[596627](114421 call _getLiteralType call_type_tmp[443403]))
          unknown call_tmp[596632] "expr temp" "maybe param" "maybe type" "temp"
          (596635 'move' call_tmp[596632](114423 call _cast string[24] call_tmp[596627]))
          unknown call_tmp[596637] "expr temp" "maybe param" "maybe type" "temp"
          (596640 'move' call_tmp[596637](114425 call + call_tmp[596622] call_tmp[596632]))
          (114428 call compilerError call_tmp[596637])
        }
      }
      label _unused_continueLabel[114440]
      label _breakLabel[114439]
    }
    unknown D[114474] "insert auto destroy"
    unknown call_tmp[596642] "expr temp" "maybe param" "maybe type" "temp"
    (596645 'move' call_tmp[596642](114472 call chpl__buildDomainRuntimeType defaultDist[93214] keyType[114361]))
    (491226 'default init var' D[114474] call_tmp[596642])
    (114483 call(114478 call (partial) requestCapacity _mt[232] D[114474]) count[114349])
    {
      unknown i[114497] "insert auto destroy"
      (491228 'init var' i[114497] 0)
      unknown tmp[114498] "maybe param" "temp"
      (114510 'move' tmp[114498](114508 call chpl_compute_low_param_loop_bound 1 count[114349]))
      unknown tmp[114499] "maybe param" "temp"
      (114517 'move' tmp[114499](114515 call chpl_compute_high_param_loop_bound 1 count[114349]))
      unknown tmp[114500] "maybe param" "temp"
      (114520 'move' tmp[114500] 1)
      ParamForLoop
      { i[114497] tmp[114498] tmp[114499] tmp[114500]
        unknown call_tmp[596649] "expr temp" "maybe param" "maybe type" "temp"
        (596652 'move' call_tmp[596649](114493 call keys[114340] i[114497]))
        (114494 call += D[114474] call_tmp[596649])
      }
      label _unused_continueLabel[114502]
      label _breakLabel[114501]
    }
    (466714 'move' ret[466709](466713 'deref' D[114474]))
    (466711 return ret[466709])
  }
  function chpl__ensureDomainExpr[114542](const  ref arg x[114539]:_domain[123390](?)) const ref : _unknown[43]
  {
    unknown ret[466718] "RVV" "temp"
    (466723 'move' ret[466718](466722 'addr of' x[114539]))
    (466720 return ret[466718])
  }
  function chpl__ensureDomainExpr[114556](arg x[114553]:_any[170](?) ...) : _unknown[43] "compiler generated" "last resort"
  {
    unknown ret[466727] "RVV" "temp"
    unknown call_tmp[596654] "expr temp" "maybe param" "maybe type" "temp"
    (596657 'move' call_tmp[596654](114562 call chpl__buildDomainExpr(114560 'expand_tuple' x[114553])))
    (466732 'move' ret[466727](466731 'deref' call_tmp[596654]))
    (466729 return ret[466727])
  }
  function chpl__ensureDomainExpr[114572](arg t[114570]:_any[170](?)) : _unknown[43] "compiler generated" "last resort" "no return value for void"
  {
    unknown call_tmp[596659] "expr temp" "maybe param" "maybe type" "temp"
    (596662 'move' call_tmp[596659](114594 call _cast string[24] t[114570]))
    (114614 call compilerError "Domain expression was a type ('" call_tmp[596659] "') rather than a domain value or range list as expected")
    (466734 return _void[47])
  }
  function chpl__distributed[114625](arg d[114622]:_distribution[116702](?), arg dom[114628]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[466738] "RVV" "temp"
    unknown call_tmp[596664] "expr temp" "maybe param" "maybe type" "temp"
    (596667 'move' call_tmp[596664](114634 call isRectangularDom dom[114628]))
    unknown call_tmp[596669] "expr temp" "maybe param" "maybe type" "temp"
    (596672 'move' call_tmp[596669](114690 call _cond_test call_tmp[596664]))
    if call_tmp[596669]
    {
      unknown call_tmp[596676] "expr temp" "maybe param" "maybe type" "temp"
      (596679 'move' call_tmp[596676](114636 call rank _mt[232] dom[114628]))
      unknown call_tmp[596683] "expr temp" "maybe param" "maybe type" "temp"
      (596686 'move' call_tmp[596683](114641 call _value _mt[232] dom[114628]))
      unknown call_tmp[596690] "expr temp" "maybe param" "maybe type" "temp"
      (596693 'move' call_tmp[596690](114644 call idxType _mt[232] call_tmp[596683]))
      unknown call_tmp[596697] "expr temp" "maybe param" "maybe type" "temp"
      (596700 'move' call_tmp[596697](114648 call _value _mt[232] dom[114628]))
      unknown call_tmp[596704] "expr temp" "maybe param" "maybe type" "temp"
      (596707 'move' call_tmp[596704](114651 call stridable _mt[232] call_tmp[596697]))
      unknown call_tmp[596709] "expr temp" "maybe param" "maybe type" "temp"
      (596712 'move' call_tmp[596709](114655 call chpl__buildDomainRuntimeType defaultDist[93214] call_tmp[596676] call_tmp[596690] call_tmp[596704]))
      unknown call_tmp[596714] "maybe param" "maybe type" "temp"
      (596717 'move' call_tmp[596714](114658 call chpl__distributed d[114622] call_tmp[596709]))
      unknown distDom[114661] "insert auto destroy"
      (491230 'init var' distDom[114661] dom[114628] call_tmp[596714])
      (466743 'move' ret[466738](466742 'deref' distDom[114661]))
      gotoReturn _end_chpl__distributed[466736] _end_chpl__distributed[466736]
    }
    {
      unknown call_tmp[596721] "expr temp" "maybe param" "maybe type" "temp"
      (596724 'move' call_tmp[596721](114669 call _value _mt[232] dom[114628]))
      unknown call_tmp[596728] "expr temp" "maybe param" "maybe type" "temp"
      (596731 'move' call_tmp[596728](114672 call idxType _mt[232] call_tmp[596721]))
      unknown call_tmp[596733] "expr temp" "maybe param" "maybe type" "temp"
      (596736 'move' call_tmp[596733](114677 call chpl__buildDomainRuntimeType defaultDist[93214] call_tmp[596728]))
      unknown call_tmp[596738] "maybe param" "maybe type" "temp"
      (596741 'move' call_tmp[596738](114680 call chpl__distributed d[114622] call_tmp[596733]))
      unknown distDom[114683] "insert auto destroy"
      (491232 'init var' distDom[114683] dom[114628] call_tmp[596738])
      (466748 'move' ret[466738](466747 'deref' distDom[114683]))
      gotoReturn _end_chpl__distributed[466736] _end_chpl__distributed[466736]
    }
    label _end_chpl__distributed[466736]
    (466740 return ret[466738])
  }
  function chpl__distributed[114703](arg d[114700]:_distribution[116702](?), arg ranges[114706]:_any[170](?) ...) : _unknown[43]
  {
    unknown ret[466754] "RVV" "temp"
    unknown call_tmp[596743] "expr temp" "maybe param" "maybe type" "temp"
    (596746 'move' call_tmp[596743](114720 call chpl__buildDomainExpr(114718 'expand_tuple' ranges[114706])))
    unknown call_tmp[596748] "expr temp" "maybe param" "maybe type" "temp"
    (596751 'move' call_tmp[596748](114721 call chpl__distributed d[114700] call_tmp[596743]))
    (466759 'move' ret[466754](466758 'deref' call_tmp[596748]))
    (466756 return ret[466754])
  }
  where {
    (114712 call chpl__isTupleOfRanges ranges[114706])
  }
  function chpl__isArrayView[114732](arg arr[114730]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[466763] "RVV" "param" "temp"
    const value[114746] "const" "insert auto destroy"
    unknown tmp[512996] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[512997] "maybe param" "temp"
    unknown call_tmp[596753] "expr temp" "maybe param" "maybe type" "temp"
    (596756 'move' call_tmp[596753](114737 call isArray arr[114730]))
    (513002 'move' tmp[512997](513000 call _cond_test call_tmp[596753]))
    if tmp[512997]
    {
      unknown tmp[513004] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513006 'move' tmp[513004](114739 call _value _mt[232] arr[114730]))
      (513011 'move' tmp[512996](513008 '_paramFoldLogical' tmp[512997] tmp[513004]))
    }
    {
      (513016 'move' tmp[512996](513013 '_paramFoldLogical' tmp[512997] arr[114730]))
    }
    (491234 'init var' value[114746] tmp[512996])
    unknown call_tmp[596762] "maybe param" "maybe type" "temp"
    (596765 'move' call_tmp[596762](114755 call(114751 call (partial) isSliceArrayView _mt[232] value[114746])))
    unknown isSlice[114756] "param"
    (491236 'init var' isSlice[114756] call_tmp[596762])
    unknown call_tmp[596769] "maybe param" "maybe type" "temp"
    (596772 'move' call_tmp[596769](114764 call(114760 call (partial) isRankChangeArrayView _mt[232] value[114746])))
    unknown isRankChange[114765] "param"
    (491238 'init var' isRankChange[114765] call_tmp[596769])
    unknown call_tmp[596776] "maybe param" "maybe type" "temp"
    (596779 'move' call_tmp[596776](114773 call(114769 call (partial) isReindexArrayView _mt[232] value[114746])))
    unknown isReindex[114774] "param"
    (491240 'init var' isReindex[114774] call_tmp[596776])
    unknown tmp[399543] "maybe param" "temp"
    unknown tmp[399564] "maybe param" "temp"
    (399575 'move' tmp[399564] isSlice[114756])
    unknown call_tmp[596781] "expr temp" "maybe param" "maybe type" "temp"
    (596784 'move' call_tmp[596781](399577 call _cond_invalid tmp[399564]))
    if call_tmp[596781]
    {
      (399580 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513023] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513024] "maybe param" "temp"
    unknown call_tmp[596786] "expr temp" "maybe param" "maybe type" "temp"
    (596789 'move' call_tmp[596786](399565 call isTrue tmp[399564]))
    (513029 'move' tmp[513024](513027 call _cond_test call_tmp[596786]))
    if tmp[513024]
    {
      (513034 'move' tmp[513023](513031 '_paramFoldLogical' tmp[513024] 1))
    }
    {
      unknown tmp[513036] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513038 'move' tmp[513036](399569 call isTrue isRankChange[114765]))
      (513043 'move' tmp[513023](513040 '_paramFoldLogical' tmp[513024] tmp[513036]))
    }
    (399554 'move' tmp[399543] tmp[513023])
    unknown call_tmp[596791] "expr temp" "maybe param" "maybe type" "temp"
    (596794 'move' call_tmp[596791](399556 call _cond_invalid tmp[399543]))
    if call_tmp[596791]
    {
      (399559 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513050] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513051] "maybe param" "temp"
    unknown call_tmp[596796] "expr temp" "maybe param" "maybe type" "temp"
    (596799 'move' call_tmp[596796](399544 call isTrue tmp[399543]))
    (513056 'move' tmp[513051](513054 call _cond_test call_tmp[596796]))
    if tmp[513051]
    {
      (513061 'move' tmp[513050](513058 '_paramFoldLogical' tmp[513051] 1))
    }
    {
      unknown tmp[513063] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513065 'move' tmp[513063](399548 call isTrue isReindex[114774]))
      (513070 'move' tmp[513050](513067 '_paramFoldLogical' tmp[513051] tmp[513063]))
    }
    (466768 'move' ret[466763](466767 'deref' tmp[513050]))
    (466765 return ret[466763])
  }
  function chpl__getActualArray[114792](arg arr[114790]:_any[170](?)) : _unknown[43]
  {
    unknown ret[466772] "RVV" "temp"
    unknown value[114806] "insert auto destroy"
    unknown tmp[513077] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513078] "maybe param" "temp"
    unknown call_tmp[596801] "expr temp" "maybe param" "maybe type" "temp"
    (596804 'move' call_tmp[596801](114797 call isArray arr[114790]))
    (513083 'move' tmp[513078](513081 call _cond_test call_tmp[596801]))
    if tmp[513078]
    {
      unknown tmp[513085] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513087 'move' tmp[513085](114799 call _value _mt[232] arr[114790]))
      (513092 'move' tmp[513077](513089 '_paramFoldLogical' tmp[513078] tmp[513085]))
    }
    {
      (513097 'move' tmp[513077](513094 '_paramFoldLogical' tmp[513078] arr[114790]))
    }
    (491242 'init var' value[114806] tmp[513077])
    unknown ret[114826] "insert auto destroy"
    unknown tmp[513104] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513105] "maybe param" "temp"
    unknown call_tmp[596808] "expr temp" "maybe param" "maybe type" "temp"
    (596811 'move' call_tmp[596808](114813 call chpl__isArrayView value[114806]))
    (513110 'move' tmp[513105](513108 call _cond_test call_tmp[596808]))
    if tmp[513105]
    {
      unknown tmp[513112] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513114 'move' tmp[513112](114821 call(114817 call (partial) _getActualArray _mt[232] value[114806])))
      (513119 'move' tmp[513104](513116 '_paramFoldLogical' tmp[513105] tmp[513112]))
    }
    {
      (513124 'move' tmp[513104](513121 '_paramFoldLogical' tmp[513105] value[114806]))
    }
    (491244 'init var' ret[114826] tmp[513104])
    (466777 'move' ret[466772](466776 'deref' ret[114826]))
    (466774 return ret[466772])
  }
  function chpl__isDROrDRView[114838](arg arg[114836]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[466781] "RVV" "param" "temp"
    unknown tmp[399690] "maybe param" "temp"
    (399701 'move' tmp[399690](114843 call isDomain arg[114836]))
    unknown call_tmp[596815] "expr temp" "maybe param" "maybe type" "temp"
    (596818 'move' call_tmp[596815](399703 call _cond_invalid tmp[399690]))
    if call_tmp[596815]
    {
      (399706 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513131] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513132] "maybe param" "temp"
    unknown call_tmp[596820] "expr temp" "maybe param" "maybe type" "temp"
    (596823 'move' call_tmp[596820](399691 call isTrue tmp[399690]))
    (513137 'move' tmp[513132](513135 call _cond_test call_tmp[596820]))
    if tmp[513132]
    {
      (513142 'move' tmp[513131](513139 '_paramFoldLogical' tmp[513132] 1))
    }
    {
      unknown tmp[513144] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[596825] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (596828 'move' call_tmp[596825](114846 'typeof' arg[114836]))
      unknown call_tmp[596830] "expr temp" "maybe param" "maybe type" "temp"
      (596833 'move' call_tmp[596830](328547 'is_subtype' anymanaged BaseDom[339776](?) call_tmp[596825]))
      (513146 'move' tmp[513144](399695 call isTrue call_tmp[596830]))
      (513151 'move' tmp[513131](513148 '_paramFoldLogical' tmp[513132] tmp[513144]))
    }
    unknown call_tmp[596835] "expr temp" "maybe param" "maybe type" "temp"
    (596838 'move' call_tmp[596835](114987 call _cond_test tmp[513131]))
    if call_tmp[596835]
    {
      const value[114864] "const" "insert auto destroy"
      unknown tmp[513158] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[513159] "maybe param" "temp"
      unknown call_tmp[596840] "expr temp" "maybe param" "maybe type" "temp"
      (596843 'move' call_tmp[596840](114855 call isDomain arg[114836]))
      (513164 'move' tmp[513159](513162 call _cond_test call_tmp[596840]))
      if tmp[513159]
      {
        unknown tmp[513166] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (513168 'move' tmp[513166](114857 call _value _mt[232] arg[114836]))
        (513173 'move' tmp[513158](513170 '_paramFoldLogical' tmp[513159] tmp[513166]))
      }
      {
        (513178 'move' tmp[513158](513175 '_paramFoldLogical' tmp[513159] arg[114836]))
      }
      (491246 'init var' value[114864] tmp[513158])
      unknown call_tmp[596849] "maybe param" "maybe type" "temp"
      (596852 'move' call_tmp[596849](114873 call(114869 call (partial) isDefaultRectangular _mt[232] value[114864])))
      unknown isDR[114874] "param"
      (491248 'init var' isDR[114874] call_tmp[596849])
      unknown tmp[399585] "maybe param" "temp"
      (399596 'move' tmp[399585](114880 call chpl__isDomainView value[114864]))
      unknown call_tmp[596854] "expr temp" "maybe param" "maybe type" "temp"
      (596857 'move' call_tmp[596854](399598 call _cond_invalid tmp[399585]))
      if call_tmp[596854]
      {
        (399601 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown isDRView[114892] "param"
      unknown tmp[513185] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[513186] "maybe param" "temp"
      unknown call_tmp[596859] "expr temp" "maybe param" "maybe type" "temp"
      (596862 'move' call_tmp[596859](399586 call isTrue tmp[399585]))
      (513191 'move' tmp[513186](513189 call _cond_test call_tmp[596859]))
      if tmp[513186]
      {
        unknown tmp[513193] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[596864] "expr temp" "maybe param" "maybe type" "temp"
        (596867 'move' call_tmp[596864](114884 call chpl__getActualDomain value[114864]))
        unknown call_tmp[596871] "expr temp" "maybe param" "maybe type" "temp"
        (596874 'move' call_tmp[596871](114889 call(114885 call (partial) isDefaultRectangular _mt[232] call_tmp[596864])))
        (513195 'move' tmp[513193](399589 call isTrue call_tmp[596871]))
        (513200 'move' tmp[513185](513197 '_paramFoldLogical' tmp[513186] tmp[513193]))
      }
      {
        (513205 'move' tmp[513185](513202 '_paramFoldLogical' tmp[513186] 0))
      }
      (491250 'init var' isDRView[114892] tmp[513185])
      unknown tmp[399606] "maybe param" "temp"
      (399617 'move' tmp[399606] isDR[114874])
      unknown call_tmp[596876] "expr temp" "maybe param" "maybe type" "temp"
      (596879 'move' call_tmp[596876](399619 call _cond_invalid tmp[399606]))
      if call_tmp[596876]
      {
        (399622 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[513212] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[513213] "maybe param" "temp"
      unknown call_tmp[596881] "expr temp" "maybe param" "maybe type" "temp"
      (596884 'move' call_tmp[596881](399607 call isTrue tmp[399606]))
      (513218 'move' tmp[513213](513216 call _cond_test call_tmp[596881]))
      if tmp[513213]
      {
        (513223 'move' tmp[513212](513220 '_paramFoldLogical' tmp[513213] 1))
      }
      {
        unknown tmp[513225] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (513227 'move' tmp[513225](399611 call isTrue isDRView[114892]))
        (513232 'move' tmp[513212](513229 '_paramFoldLogical' tmp[513213] tmp[513225]))
      }
      (466786 'move' ret[466781](466785 'deref' tmp[513212]))
      gotoReturn _end_chpl__isDROrDRView[466779] _end_chpl__isDROrDRView[466779]
    }
    {
      unknown tmp[399669] "maybe param" "temp"
      (399680 'move' tmp[399669](114904 call isArray arg[114836]))
      unknown call_tmp[596886] "expr temp" "maybe param" "maybe type" "temp"
      (596889 'move' call_tmp[596886](399682 call _cond_invalid tmp[399669]))
      if call_tmp[596886]
      {
        (399685 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[513239] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[513240] "maybe param" "temp"
      unknown call_tmp[596891] "expr temp" "maybe param" "maybe type" "temp"
      (596894 'move' call_tmp[596891](399670 call isTrue tmp[399669]))
      (513245 'move' tmp[513240](513243 call _cond_test call_tmp[596891]))
      if tmp[513240]
      {
        (513250 'move' tmp[513239](513247 '_paramFoldLogical' tmp[513240] 1))
      }
      {
        unknown tmp[513252] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[596896] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (596899 'move' call_tmp[596896](114907 'typeof' arg[114836]))
        unknown call_tmp[596901] "expr temp" "maybe param" "maybe type" "temp"
        (596904 'move' call_tmp[596901](328548 'is_subtype' anymanaged BaseArr[350645](?) call_tmp[596896]))
        (513254 'move' tmp[513252](399674 call isTrue call_tmp[596901]))
        (513259 'move' tmp[513239](513256 '_paramFoldLogical' tmp[513240] tmp[513252]))
      }
      unknown call_tmp[596906] "expr temp" "maybe param" "maybe type" "temp"
      (596909 'move' call_tmp[596906](114983 call _cond_test tmp[513239]))
      if call_tmp[596906]
      {
        const value[114925] "const" "insert auto destroy"
        unknown tmp[513266] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[513267] "maybe param" "temp"
        unknown call_tmp[596911] "expr temp" "maybe param" "maybe type" "temp"
        (596914 'move' call_tmp[596911](114916 call isArray arg[114836]))
        (513272 'move' tmp[513267](513270 call _cond_test call_tmp[596911]))
        if tmp[513267]
        {
          unknown tmp[513274] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (513276 'move' tmp[513274](114918 call _value _mt[232] arg[114836]))
          (513281 'move' tmp[513266](513278 '_paramFoldLogical' tmp[513267] tmp[513274]))
        }
        {
          (513286 'move' tmp[513266](513283 '_paramFoldLogical' tmp[513267] arg[114836]))
        }
        (491252 'init var' value[114925] tmp[513266])
        unknown call_tmp[596920] "maybe param" "maybe type" "temp"
        (596923 'move' call_tmp[596920](114934 call(114930 call (partial) isDefaultRectangular _mt[232] value[114925])))
        unknown isDR[114935] "param"
        (491254 'init var' isDR[114935] call_tmp[596920])
        unknown tmp[399627] "maybe param" "temp"
        (399638 'move' tmp[399627](114941 call chpl__isArrayView value[114925]))
        unknown call_tmp[596925] "expr temp" "maybe param" "maybe type" "temp"
        (596928 'move' call_tmp[596925](399640 call _cond_invalid tmp[399627]))
        if call_tmp[596925]
        {
          (399643 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown isDRView[114953] "param"
        unknown tmp[513293] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[513294] "maybe param" "temp"
        unknown call_tmp[596930] "expr temp" "maybe param" "maybe type" "temp"
        (596933 'move' call_tmp[596930](399628 call isTrue tmp[399627]))
        (513299 'move' tmp[513294](513297 call _cond_test call_tmp[596930]))
        if tmp[513294]
        {
          unknown tmp[513301] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[596935] "expr temp" "maybe param" "maybe type" "temp"
          (596938 'move' call_tmp[596935](114945 call chpl__getActualArray value[114925]))
          unknown call_tmp[596942] "expr temp" "maybe param" "maybe type" "temp"
          (596945 'move' call_tmp[596942](114950 call(114946 call (partial) isDefaultRectangular _mt[232] call_tmp[596935])))
          (513303 'move' tmp[513301](399631 call isTrue call_tmp[596942]))
          (513308 'move' tmp[513293](513305 '_paramFoldLogical' tmp[513294] tmp[513301]))
        }
        {
          (513313 'move' tmp[513293](513310 '_paramFoldLogical' tmp[513294] 0))
        }
        (491256 'init var' isDRView[114953] tmp[513293])
        unknown tmp[399648] "maybe param" "temp"
        (399659 'move' tmp[399648] isDR[114935])
        unknown call_tmp[596947] "expr temp" "maybe param" "maybe type" "temp"
        (596950 'move' call_tmp[596947](399661 call _cond_invalid tmp[399648]))
        if call_tmp[596947]
        {
          (399664 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[513320] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[513321] "maybe param" "temp"
        unknown call_tmp[596952] "expr temp" "maybe param" "maybe type" "temp"
        (596955 'move' call_tmp[596952](399649 call isTrue tmp[399648]))
        (513326 'move' tmp[513321](513324 call _cond_test call_tmp[596952]))
        if tmp[513321]
        {
          (513331 'move' tmp[513320](513328 '_paramFoldLogical' tmp[513321] 1))
        }
        {
          unknown tmp[513333] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (513335 'move' tmp[513333](399653 call isTrue isDRView[114953]))
          (513340 'move' tmp[513320](513337 '_paramFoldLogical' tmp[513321] tmp[513333]))
        }
        (466791 'move' ret[466781](466790 'deref' tmp[513320]))
        gotoReturn _end_chpl__isDROrDRView[466779] _end_chpl__isDROrDRView[466779]
      }
      {
        (114980 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
    label _end_chpl__isDROrDRView[466779]
    (466783 return ret[466781])
  }
  function chpl__isDomainView[114999](arg dom[114997]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[466797] "RVV" "param" "temp"
    const value[115013] "const" "insert auto destroy"
    unknown tmp[513347] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513348] "maybe param" "temp"
    unknown call_tmp[596957] "expr temp" "maybe param" "maybe type" "temp"
    (596960 'move' call_tmp[596957](115004 call isDomain dom[114997]))
    (513353 'move' tmp[513348](513351 call _cond_test call_tmp[596957]))
    if tmp[513348]
    {
      unknown tmp[513355] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513357 'move' tmp[513355](115006 call _value _mt[232] dom[114997]))
      (513362 'move' tmp[513347](513359 '_paramFoldLogical' tmp[513348] tmp[513355]))
    }
    {
      (513367 'move' tmp[513347](513364 '_paramFoldLogical' tmp[513348] dom[114997]))
    }
    (491258 'init var' value[115013] tmp[513347])
    unknown call_tmp[596966] "maybe param" "maybe type" "temp"
    (596969 'move' call_tmp[596966](115024 call(115020 call (partial) isSliceDomainView _mt[232] value[115013])))
    unknown isSlice[115025] "param"
    (491260 'init var' isSlice[115025] call_tmp[596966])
    unknown call_tmp[596973] "maybe param" "maybe type" "temp"
    (596976 'move' call_tmp[596973](115035 call(115031 call (partial) isRankChangeDomainView _mt[232] value[115013])))
    unknown isRankChange[115036] "param"
    (491262 'init var' isRankChange[115036] call_tmp[596973])
    unknown call_tmp[596980] "maybe param" "maybe type" "temp"
    (596983 'move' call_tmp[596980](115046 call(115042 call (partial) isReindexDomainView _mt[232] value[115013])))
    unknown isReindex[115047] "param"
    (491264 'init var' isReindex[115047] call_tmp[596980])
    unknown tmp[399711] "maybe param" "temp"
    unknown tmp[399732] "maybe param" "temp"
    (399743 'move' tmp[399732] isSlice[115025])
    unknown call_tmp[596985] "expr temp" "maybe param" "maybe type" "temp"
    (596988 'move' call_tmp[596985](399745 call _cond_invalid tmp[399732]))
    if call_tmp[596985]
    {
      (399748 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513374] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513375] "maybe param" "temp"
    unknown call_tmp[596990] "expr temp" "maybe param" "maybe type" "temp"
    (596993 'move' call_tmp[596990](399733 call isTrue tmp[399732]))
    (513380 'move' tmp[513375](513378 call _cond_test call_tmp[596990]))
    if tmp[513375]
    {
      (513385 'move' tmp[513374](513382 '_paramFoldLogical' tmp[513375] 1))
    }
    {
      unknown tmp[513387] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513389 'move' tmp[513387](399737 call isTrue isRankChange[115036]))
      (513394 'move' tmp[513374](513391 '_paramFoldLogical' tmp[513375] tmp[513387]))
    }
    (399722 'move' tmp[399711] tmp[513374])
    unknown call_tmp[596995] "expr temp" "maybe param" "maybe type" "temp"
    (596998 'move' call_tmp[596995](399724 call _cond_invalid tmp[399711]))
    if call_tmp[596995]
    {
      (399727 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513401] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513402] "maybe param" "temp"
    unknown call_tmp[597000] "expr temp" "maybe param" "maybe type" "temp"
    (597003 'move' call_tmp[597000](399712 call isTrue tmp[399711]))
    (513407 'move' tmp[513402](513405 call _cond_test call_tmp[597000]))
    if tmp[513402]
    {
      (513412 'move' tmp[513401](513409 '_paramFoldLogical' tmp[513402] 1))
    }
    {
      unknown tmp[513414] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513416 'move' tmp[513414](399716 call isTrue isReindex[115047]))
      (513421 'move' tmp[513401](513418 '_paramFoldLogical' tmp[513402] tmp[513414]))
    }
    (466802 'move' ret[466797](466801 'deref' tmp[513401]))
    (466799 return ret[466797])
  }
  function chpl__getActualDomain[115065](arg dom[115063]:_any[170](?)) : _unknown[43]
  {
    unknown ret[466806] "RVV" "temp"
    unknown value[115079] "insert auto destroy"
    unknown tmp[513428] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513429] "maybe param" "temp"
    unknown call_tmp[597005] "expr temp" "maybe param" "maybe type" "temp"
    (597008 'move' call_tmp[597005](115070 call isDomain dom[115063]))
    (513434 'move' tmp[513429](513432 call _cond_test call_tmp[597005]))
    if tmp[513429]
    {
      unknown tmp[513436] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513438 'move' tmp[513436](115072 call _value _mt[232] dom[115063]))
      (513443 'move' tmp[513428](513440 '_paramFoldLogical' tmp[513429] tmp[513436]))
    }
    {
      (513448 'move' tmp[513428](513445 '_paramFoldLogical' tmp[513429] dom[115063]))
    }
    (491266 'init var' value[115079] tmp[513428])
    unknown ret[115099] "insert auto destroy"
    unknown tmp[513455] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513456] "maybe param" "temp"
    unknown call_tmp[597012] "expr temp" "maybe param" "maybe type" "temp"
    (597015 'move' call_tmp[597012](115086 call chpl__isDomainView value[115079]))
    (513461 'move' tmp[513456](513459 call _cond_test call_tmp[597012]))
    if tmp[513456]
    {
      unknown tmp[513463] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513465 'move' tmp[513463](115094 call(115090 call (partial) _getActualDomain _mt[232] value[115079])))
      (513470 'move' tmp[513455](513467 '_paramFoldLogical' tmp[513456] tmp[513463]))
    }
    {
      (513475 'move' tmp[513455](513472 '_paramFoldLogical' tmp[513456] value[115079]))
    }
    (491268 'init var' ret[115099] tmp[513455])
    (466811 'move' ret[466806](466810 'deref' ret[115099]))
    (466808 return ret[466806])
  }
  function chpl__isRectangularDomType[115111](arg domainType[115109]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[466815] "RVV" "param" "temp"
    unknown dom[115114] "insert auto destroy"
    (491270 'default init var' dom[115114] domainType[115109])
    unknown tmp[399753] "maybe param" "temp"
    (399764 'move' tmp[399753](115121 call isDomainType domainType[115109]))
    unknown call_tmp[597019] "expr temp" "maybe param" "maybe type" "temp"
    (597022 'move' call_tmp[597019](399766 call _cond_invalid tmp[399753]))
    if call_tmp[597019]
    {
      (399769 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[513482] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513483] "maybe param" "temp"
    unknown call_tmp[597024] "expr temp" "maybe param" "maybe type" "temp"
    (597027 'move' call_tmp[597024](399754 call isTrue tmp[399753]))
    (513488 'move' tmp[513483](513486 call _cond_test call_tmp[597024]))
    if tmp[513483]
    {
      unknown tmp[513490] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[597029] "expr temp" "maybe param" "maybe type" "temp"
      (597032 'move' call_tmp[597029](115125 call isRectangularDom dom[115114]))
      (513492 'move' tmp[513490](399757 call isTrue call_tmp[597029]))
      (513497 'move' tmp[513482](513494 '_paramFoldLogical' tmp[513483] tmp[513490]))
    }
    {
      (513502 'move' tmp[513482](513499 '_paramFoldLogical' tmp[513483] 0))
    }
    (466820 'move' ret[466815](466819 'deref' tmp[513482]))
    (466817 return ret[466815])
  }
  function chpl__isSparseDomType[115136](arg domainType[115134]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[466824] "RVV" "param" "temp"
    unknown dom[115139] "insert auto destroy"
    (491272 'default init var' dom[115139] domainType[115134])
    unknown call_tmp[597034] "expr temp" "maybe param" "maybe type" "temp"
    (597037 'move' call_tmp[597034](115146 call isSparseDom dom[115139]))
    (466829 'move' ret[466824](466828 'deref' call_tmp[597034]))
    (466826 return ret[466824])
  }
  function chpl__distributed[115157](arg d[115154]:_distribution[116702](?), arg domainType[115159]:_any[170](?)) type : _unknown[43]
  {
    unknown ret[466842] "RVV" "temp" "type variable"
    unknown call_tmp[597039] "expr temp" "maybe param" "maybe type" "temp"
    (597042 'move' call_tmp[597039](115164 call isDomainType domainType[115159]))
    unknown call_tmp[597044] "expr temp" "maybe param" "maybe type" "temp"
    (597047 'move' call_tmp[597044](115165 call ! call_tmp[597039]))
    unknown call_tmp[597049] "expr temp" "maybe param" "maybe type" "temp"
    (597052 'move' call_tmp[597049](115191 call _cond_test call_tmp[597044]))
    if call_tmp[597049]
    {
      unknown call_tmp[597054] "expr temp" "maybe param" "maybe type" "temp"
      (597057 'move' call_tmp[597054](115187 call _cast string[24] domainType[115159]))
      (115189 call compilerError "cannot apply 'dmapped' to the non-domain type " call_tmp[597054])
    }
    unknown call_tmp[597059] "expr temp" "maybe param" "maybe type" "temp"
    (597062 'move' call_tmp[597059](115200 call chpl__isRectangularDomType domainType[115159]))
    unknown call_tmp[597064] "expr temp" "maybe param" "maybe type" "temp"
    (597067 'move' call_tmp[597064](115324 call _cond_test call_tmp[597059]))
    if call_tmp[597064]
    {
      unknown dom[115202] "insert auto destroy"
      (491274 'default init var' dom[115202] domainType[115159])
      unknown call_tmp[597071] "expr temp" "maybe param" "maybe type" "temp"
      (597074 'move' call_tmp[597071](115210 call _value _mt[232] dom[115202]))
      unknown call_tmp[597078] "expr temp" "maybe param" "maybe type" "temp"
      (597081 'move' call_tmp[597078](115213 call rank _mt[232] call_tmp[597071]))
      unknown call_tmp[597085] "expr temp" "maybe param" "maybe type" "temp"
      (597088 'move' call_tmp[597085](115217 call _value _mt[232] dom[115202]))
      unknown call_tmp[597092] "expr temp" "maybe param" "maybe type" "temp"
      (597095 'move' call_tmp[597092](115220 call idxType _mt[232] call_tmp[597085]))
      unknown call_tmp[597099] "expr temp" "maybe param" "maybe type" "temp"
      (597102 'move' call_tmp[597099](115224 call _value _mt[232] dom[115202]))
      unknown call_tmp[597106] "expr temp" "maybe param" "maybe type" "temp"
      (597109 'move' call_tmp[597106](115227 call stridable _mt[232] call_tmp[597099]))
      unknown call_tmp[597111] "expr temp" "maybe param" "maybe type" "temp"
      (597114 'move' call_tmp[597111](115230 call chpl__buildDomainRuntimeType d[115154] call_tmp[597078] call_tmp[597092] call_tmp[597106]))
      (466847 'move' ret[466842](466846 'deref' call_tmp[597111]))
      gotoReturn _end_chpl__distributed[466840] _end_chpl__distributed[466840]
    }
    {
      unknown call_tmp[597116] "expr temp" "maybe param" "maybe type" "temp"
      (597119 'move' call_tmp[597116](115236 call chpl__isSparseDomType domainType[115159]))
      unknown call_tmp[597121] "expr temp" "maybe param" "maybe type" "temp"
      (597124 'move' call_tmp[597121](115320 call _cond_test call_tmp[597116]))
      if call_tmp[597121]
      {
        function getParentDomType[115239]() type : _unknown[43]
        {
          unknown ret[466833] "RVV" "temp" "type variable"
          unknown dom[115242] "insert auto destroy"
          (491276 'default init var' dom[115242] domainType[115159])
          { scopeless type
            unknown call_type_tmp[443409] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[597128] "expr temp" "maybe param" "maybe type" "temp"
            (597131 'move' call_tmp[597128](115249 call _value _mt[232] dom[115242]))
            unknown call_tmp[597135] "expr temp" "maybe param" "maybe type" "temp"
            (597138 'move' call_tmp[597135](115252 call parentDom _mt[232] call_tmp[597128]))
            (443413 'move' call_type_tmp[443409](115255 'typeof' call_tmp[597135]))
          }
          unknown call_tmp[597140] "expr temp" "maybe param" "maybe type" "temp"
          (597143 'move' call_tmp[597140](115256 'static typeof' call_type_tmp[443409]))
          (466838 'move' ret[466833](466837 'deref' call_tmp[597140]))
          (466835 return ret[466833])
        }
        unknown call_tmp[597145] "expr temp" "maybe param" "maybe type" "temp"
        (597148 'move' call_tmp[597145](115281 call getParentDomType))
        unknown call_tmp[597150] "maybe param" "maybe type" "temp"
        (597153 'move' call_tmp[597150](115284 'get runtime type field' call_tmp[597145] domainType[115159] "dom"))
        unknown parentDom[115285] "no auto destroy" "no copy"
        (491278 'init var' parentDom[115285] call_tmp[597150])
        unknown call_tmp[597155] "expr temp" "maybe param" "maybe type" "temp"
        (597158 'move' call_tmp[597155](115292 call chpl__buildSparseDomainRuntimeType d[115154] parentDom[115285]))
        (466852 'move' ret[466842](466851 'deref' call_tmp[597155]))
        gotoReturn _end_chpl__distributed[466840] _end_chpl__distributed[466840]
      }
      {
        unknown dom[115296] "insert auto destroy"
        (491280 'default init var' dom[115296] domainType[115159])
        unknown call_tmp[597162] "expr temp" "maybe param" "maybe type" "temp"
        (597165 'move' call_tmp[597162](115304 call _value _mt[232] dom[115296]))
        unknown call_tmp[597169] "expr temp" "maybe param" "maybe type" "temp"
        (597172 'move' call_tmp[597169](115307 call idxType _mt[232] call_tmp[597162]))
        unknown call_tmp[597176] "expr temp" "maybe param" "maybe type" "temp"
        (597179 'move' call_tmp[597176](115311 call _value _mt[232] dom[115296]))
        unknown call_tmp[597183] "expr temp" "maybe param" "maybe type" "temp"
        (597186 'move' call_tmp[597183](115314 call parSafe _mt[232] call_tmp[597176]))
        unknown call_tmp[597188] "expr temp" "maybe param" "maybe type" "temp"
        (597191 'move' call_tmp[597188](115317 call chpl__buildDomainRuntimeType d[115154] call_tmp[597169] call_tmp[597183]))
        (466857 'move' ret[466842](466856 'deref' call_tmp[597188]))
        gotoReturn _end_chpl__distributed[466840] _end_chpl__distributed[466840]
      }
    }
    label _end_chpl__distributed[466840]
    (466844 return ret[466842])
  }
  function chpl__buildIndexType[115337](param arg rank[115334]:int(64)[13], arg idxType[115339]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown ret[466863] "RVV" "temp" "type variable"
    unknown x[115346] "insert auto destroy"
    (491282 'default init var' x[115346] idxType[115339])
    unknown call_tmp[597193] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (597196 'move' call_tmp[597193](115351 'typeof' x[115346]))
    (466868 'move' ret[466863](466867 'deref' call_tmp[597193]))
    (466865 return ret[466863])
  }
  where {
    (115343 call == rank[115334] 1)
  }
  function chpl__buildIndexType[115363](param arg rank[115360]:int(64)[13], arg idxType[115365]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown ret[466872] "RVV" "temp" "type variable"
    unknown x[115375] "insert auto destroy"
    unknown call_tmp[597198] "expr temp" "maybe param" "maybe type" "temp"
    (597201 'move' call_tmp[597198](115373 call * rank[115360] idxType[115365]))
    (491284 'default init var' x[115375] call_tmp[597198])
    unknown call_tmp[597203] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (597206 'move' call_tmp[597203](115380 'typeof' x[115375]))
    (466877 'move' ret[466872](466876 'deref' call_tmp[597203]))
    (466874 return ret[466872])
  }
  where {
    (115369 call > rank[115360] 1)
  }
  function chpl__buildIndexType[115392](param arg rank[115389]:int(64)[13]) type : _unknown[43]
  {
    unknown ret[466881] "RVV" "temp" "type variable"
    unknown call_tmp[597208] "expr temp" "maybe param" "maybe type" "temp"
    (597211 'move' call_tmp[597208](115398 call chpl__buildIndexType rank[115389] int(64)[13]))
    (466886 'move' ret[466881](466885 'deref' call_tmp[597208]))
    (466883 return ret[466881])
  }
  function chpl__buildIndexType[115410](arg d[115407]:_domain[123390](?)) type : _unknown[43]
  {
    unknown ret[466890] "RVV" "temp" "type variable"
    unknown call_tmp[597215] "expr temp" "maybe param" "maybe type" "temp"
    (597218 'move' call_tmp[597215](115414 call rank _mt[232] d[115407]))
    unknown call_tmp[597222] "expr temp" "maybe param" "maybe type" "temp"
    (597225 'move' call_tmp[597222](115419 call _value _mt[232] d[115407]))
    unknown call_tmp[597229] "expr temp" "maybe param" "maybe type" "temp"
    (597232 'move' call_tmp[597229](115422 call idxType _mt[232] call_tmp[597222]))
    unknown call_tmp[597234] "expr temp" "maybe param" "maybe type" "temp"
    (597237 'move' call_tmp[597234](115425 call chpl__buildIndexType call_tmp[597215] call_tmp[597229]))
    (466895 'move' ret[466890](466894 'deref' call_tmp[597234]))
    (466892 return ret[466890])
  }
  function chpl__buildIndexType[115437](arg idxType[115434]:opaque[150]) type : _unknown[43]
  {
    unknown ret[466899] "RVV" "temp" "type variable"
    (466904 'move' ret[466899](466903 'deref' _OpaqueIndex[140304]))
    (466901 return ret[466899])
  }
  function isRectangularDom[115451](arg d[115448]:_domain[123390](?)) param : _unknown[43]
  {
    unknown ret[466908] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[443415] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[597241] "expr temp" "maybe param" "maybe type" "temp"
      (597244 'move' call_tmp[597241](115456 call _value _mt[232] d[115448]))
      (443419 'move' call_type_tmp[443415](115459 'typeof' call_tmp[597241]))
    }
    unknown call_tmp[597246] "expr temp" "maybe param" "maybe type" "temp"
    (597249 'move' call_tmp[597246](115461 call _to_borrowed call_type_tmp[443415]))
    unknown call_tmp[597251] "expr temp" "maybe param" "maybe type" "temp"
    (597254 'move' call_tmp[597251](328549 'is_subtype' anymanaged BaseRectangularDom[350552](?) call_tmp[597246]))
    (466913 'move' ret[466908](466912 'deref' call_tmp[597251]))
    (466910 return ret[466908])
  }
  function isRectangularArr[115478](arg a[115475]:_array[133150](?)) param : _unknown[43]
  {
    unknown ret[466917] "RVV" "param" "temp"
    unknown call_tmp[597258] "expr temp" "maybe param" "maybe type" "temp"
    (597261 'move' call_tmp[597258](115482 call _dom _mt[232] a[115475]))
    unknown call_tmp[597263] "expr temp" "maybe param" "maybe type" "temp"
    (597266 'move' call_tmp[597263](115486 call isRectangularDom call_tmp[597258]))
    (466922 'move' ret[466917](466921 'deref' call_tmp[597263]))
    (466919 return ret[466917])
  }
  function isIrregularDom[115498](arg d[115495]:_domain[123390](?)) param : _unknown[43]
  {
    unknown ret[466926] "RVV" "param" "temp"
    unknown tmp[399774] "maybe param" "temp"
    unknown tmp[399795] "maybe param" "temp"
    (399806 'move' tmp[399795](115503 call isSparseDom d[115495]))
    unknown call_tmp[597268] "expr temp" "maybe param" "maybe type" "temp"
    (597271 'move' call_tmp[597268](399808 call _cond_invalid tmp[399795]))
    if call_tmp[597268]
    {
      (399811 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513509] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513510] "maybe param" "temp"
    unknown call_tmp[597273] "expr temp" "maybe param" "maybe type" "temp"
    (597276 'move' call_tmp[597273](399796 call isTrue tmp[399795]))
    (513515 'move' tmp[513510](513513 call _cond_test call_tmp[597273]))
    if tmp[513510]
    {
      (513520 'move' tmp[513509](513517 '_paramFoldLogical' tmp[513510] 1))
    }
    {
      unknown tmp[513522] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[597278] "expr temp" "maybe param" "maybe type" "temp"
      (597281 'move' call_tmp[597278](115507 call isAssociativeDom d[115495]))
      (513524 'move' tmp[513522](399800 call isTrue call_tmp[597278]))
      (513529 'move' tmp[513509](513526 '_paramFoldLogical' tmp[513510] tmp[513522]))
    }
    (399785 'move' tmp[399774] tmp[513509])
    unknown call_tmp[597283] "expr temp" "maybe param" "maybe type" "temp"
    (597286 'move' call_tmp[597283](399787 call _cond_invalid tmp[399774]))
    if call_tmp[597283]
    {
      (399790 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513536] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513537] "maybe param" "temp"
    unknown call_tmp[597288] "expr temp" "maybe param" "maybe type" "temp"
    (597291 'move' call_tmp[597288](399775 call isTrue tmp[399774]))
    (513542 'move' tmp[513537](513540 call _cond_test call_tmp[597288]))
    if tmp[513537]
    {
      (513547 'move' tmp[513536](513544 '_paramFoldLogical' tmp[513537] 1))
    }
    {
      unknown tmp[513549] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[597293] "expr temp" "maybe param" "maybe type" "temp"
      (597296 'move' call_tmp[597293](115513 call isOpaqueDom d[115495]))
      (513551 'move' tmp[513549](399779 call isTrue call_tmp[597293]))
      (513556 'move' tmp[513536](513553 '_paramFoldLogical' tmp[513537] tmp[513549]))
    }
    (466931 'move' ret[466926](466930 'deref' tmp[513536]))
    (466928 return ret[466926])
  }
  function isIrregularArr[115529](arg a[115526]:_array[133150](?)) param : _unknown[43]
  {
    unknown ret[466935] "RVV" "param" "temp"
    unknown call_tmp[597300] "expr temp" "maybe param" "maybe type" "temp"
    (597303 'move' call_tmp[597300](115533 call _dom _mt[232] a[115526]))
    unknown call_tmp[597305] "expr temp" "maybe param" "maybe type" "temp"
    (597308 'move' call_tmp[597305](115537 call isIrregularDom call_tmp[597300]))
    (466940 'move' ret[466935](466939 'deref' call_tmp[597305]))
    (466937 return ret[466935])
  }
  function isAssociativeDom[115549](arg d[115546]:_domain[123390](?)) param : _unknown[43]
  {
    unknown ret[466962] "RVV" "param" "temp"
    function isAssociativeDomClass[115557](arg dc[115554]:anymanaged BaseAssociativeDom[350562](?)) param : _unknown[43]
    {
      unknown ret[466944] "RVV" "param" "temp"
      (466949 'move' ret[466944](466948 'deref' 1))
      (466946 return ret[466944])
    }
    function isAssociativeDomClass[115570](arg dc[115568]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[466953] "RVV" "param" "temp"
      (466958 'move' ret[466953](466957 'deref' 0))
      (466955 return ret[466953])
    }
    unknown call_tmp[597312] "expr temp" "maybe param" "maybe type" "temp"
    (597315 'move' call_tmp[597312](115581 call _value _mt[232] d[115546]))
    unknown call_tmp[597317] "expr temp" "maybe param" "maybe type" "temp"
    (597320 'move' call_tmp[597317](115585 call _to_borrowed call_tmp[597312]))
    unknown call_tmp[597322] "expr temp" "maybe param" "maybe type" "temp"
    (597325 'move' call_tmp[597322](115587 call isAssociativeDomClass call_tmp[597317]))
    (466967 'move' ret[466962](466966 'deref' call_tmp[597322]))
    (466964 return ret[466962])
  }
  function isAssociativeArr[115600](arg a[115597]:_array[133150](?)) param : _unknown[43]
  {
    unknown ret[466971] "RVV" "param" "temp"
    unknown call_tmp[597329] "expr temp" "maybe param" "maybe type" "temp"
    (597332 'move' call_tmp[597329](115604 call _dom _mt[232] a[115597]))
    unknown call_tmp[597334] "expr temp" "maybe param" "maybe type" "temp"
    (597337 'move' call_tmp[597334](115608 call isAssociativeDom call_tmp[597329]))
    (466976 'move' ret[466971](466975 'deref' call_tmp[597334]))
    (466973 return ret[466971])
  }
  function isOpaqueDom[115620](arg d[115617]:_domain[123390](?)) param : _unknown[43]
  {
    unknown ret[466998] "RVV" "param" "temp"
    function isOpaqueDomClass[115628](arg dc[115625]:anymanaged BaseOpaqueDom[350571](?)) param : _unknown[43]
    {
      unknown ret[466980] "RVV" "param" "temp"
      (466985 'move' ret[466980](466984 'deref' 1))
      (466982 return ret[466980])
    }
    function isOpaqueDomClass[115641](arg dc[115639]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[466989] "RVV" "param" "temp"
      (466994 'move' ret[466989](466993 'deref' 0))
      (466991 return ret[466989])
    }
    unknown call_tmp[597341] "expr temp" "maybe param" "maybe type" "temp"
    (597344 'move' call_tmp[597341](115652 call _value _mt[232] d[115617]))
    unknown call_tmp[597346] "expr temp" "maybe param" "maybe type" "temp"
    (597349 'move' call_tmp[597346](115656 call _to_borrowed call_tmp[597341]))
    unknown call_tmp[597351] "expr temp" "maybe param" "maybe type" "temp"
    (597354 'move' call_tmp[597351](115658 call isOpaqueDomClass call_tmp[597346]))
    (467003 'move' ret[466998](467002 'deref' call_tmp[597351]))
    (467000 return ret[466998])
  }
  function isSparseDom[115669](arg d[115666]:_domain[123390](?)) param : _unknown[43]
  {
    unknown ret[467025] "RVV" "param" "temp"
    function isSparseDomClass[115677](arg dc[115674]:anymanaged BaseSparseDom[350579](?)) param : _unknown[43]
    {
      unknown ret[467007] "RVV" "param" "temp"
      (467012 'move' ret[467007](467011 'deref' 1))
      (467009 return ret[467007])
    }
    function isSparseDomClass[115690](arg dc[115688]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[467016] "RVV" "param" "temp"
      (467021 'move' ret[467016](467020 'deref' 0))
      (467018 return ret[467016])
    }
    unknown call_tmp[597358] "expr temp" "maybe param" "maybe type" "temp"
    (597361 'move' call_tmp[597358](115700 call _value _mt[232] d[115666]))
    unknown call_tmp[597363] "expr temp" "maybe param" "maybe type" "temp"
    (597366 'move' call_tmp[597363](115704 call isSparseDomClass call_tmp[597358]))
    (467030 'move' ret[467025](467029 'deref' call_tmp[597363]))
    (467027 return ret[467025])
  }
  function isSparseArr[115717](arg a[115714]:_array[133150](?)) param : _unknown[43]
  {
    unknown ret[467034] "RVV" "param" "temp"
    unknown call_tmp[597370] "expr temp" "maybe param" "maybe type" "temp"
    (597373 'move' call_tmp[597370](115721 call _dom _mt[232] a[115714]))
    unknown call_tmp[597375] "expr temp" "maybe param" "maybe type" "temp"
    (597378 'move' call_tmp[597375](115725 call isSparseDom call_tmp[597370]))
    (467039 'move' ret[467034](467038 'deref' call_tmp[597375]))
    (467036 return ret[467034])
  }
  function chpl__checkDomainsMatch[115739](arg a[115736]:_array[133150](?), arg b[115741]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[597380] "expr temp" "maybe param" "maybe type" "temp"
    (597383 'move' call_tmp[597380](115785 call _cond_test 1))
    if call_tmp[597380]
    {
      unknown call_tmp[597387] "expr temp" "maybe param" "maybe type" "temp"
      (597390 'move' call_tmp[597387](115750 call _dom _mt[232] a[115736]))
      unknown call_tmp[597392] "expr temp" "maybe param" "maybe type" "temp"
      (597395 'move' call_tmp[597392](115754 call != call_tmp[597387] b[115741]))
      unknown call_tmp[597397] "expr temp" "maybe param" "maybe type" "temp"
      (597400 'move' call_tmp[597397](115780 call _cond_test call_tmp[597392]))
      if call_tmp[597397]
      {
        (115777 call boundsCheckHalt module=[244] HaltWrappers[197622] "domain mismatch on return")
      }
    }
    (467041 return _void[47])
    (329392 'used modules list'(115745 'use' HaltWrappers[197622] 'only' ))
  }
  function chpl__checkDomainsMatch[115797](arg a[115794]:_iteratorRecord[194](?), arg b[115799]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[597402] "expr temp" "maybe param" "maybe type" "temp"
    (597405 'move' call_tmp[597402](115832 call _cond_test 1))
    if call_tmp[597402]
    {
      unknown tmp[115808] "insert auto destroy"
      (491286 'init var' tmp[115808] a[115794])
      unknown call_tmp[597409] "expr temp" "maybe param" "maybe type" "temp"
      (597412 'move' call_tmp[597409](115813 call _dom _mt[232] tmp[115808]))
      unknown call_tmp[597414] "expr temp" "maybe param" "maybe type" "temp"
      (597417 'move' call_tmp[597414](115817 call != call_tmp[597409] b[115799]))
      unknown call_tmp[597419] "expr temp" "maybe param" "maybe type" "temp"
      (597422 'move' call_tmp[597419](115828 call _cond_test call_tmp[597414]))
      if call_tmp[597419]
      {
        (115825 call boundsCheckHalt module=[244] HaltWrappers[197622] "domain mismatch on return")
      }
    }
    (467043 return _void[47])
    (329394 'used modules list'(115803 'use' HaltWrappers[197622] 'only' ))
  }
  function chpl__checkEltTypeMatch[115846](arg a[115843]:_array[133150](?), arg b[115848]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[597426] "expr temp" "maybe param" "maybe type" "temp"
    (597429 'move' call_tmp[597426](115851 call eltType _mt[232] a[115843]))
    unknown call_tmp[597431] "expr temp" "maybe param" "maybe type" "temp"
    (597434 'move' call_tmp[597431](115855 call != call_tmp[597426] b[115848]))
    unknown call_tmp[597436] "expr temp" "maybe param" "maybe type" "temp"
    (597439 'move' call_tmp[597436](115890 call _cond_test call_tmp[597431]))
    if call_tmp[597436]
    {
      unknown call_tmp[597443] "expr temp" "maybe param" "maybe type" "temp"
      (597446 'move' call_tmp[597443](115876 call eltType _mt[232] a[115843]))
      unknown call_tmp[597448] "expr temp" "maybe param" "maybe type" "temp"
      (597451 'move' call_tmp[597448](115880 call _cast string[24] call_tmp[597443]))
      unknown call_tmp[597453] "expr temp" "maybe param" "maybe type" "temp"
      (597456 'move' call_tmp[597453](115885 call _cast string[24] b[115848]))
      (115887 call compilerError "array element type mismatch in return from " call_tmp[597448] " to " call_tmp[597453])
    }
    (467045 return _void[47])
  }
  function chpl__checkEltTypeMatch[115903](arg a[115900]:_iteratorRecord[194](?), arg b[115905]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[597458] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (597461 'move' call_tmp[597458](115909 'typeof' a[115900]))
    unknown eltType[115912] "insert auto destroy" "type variable"(115911 call iteratorToArrayElementType call_tmp[597458])
    unknown call_tmp[597463] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (597466 'move' call_tmp[597463](491290 'typeof' a[115900]))
    (491292 'move' eltType[115912](491289 call iteratorToArrayElementType call_tmp[597463]))
    unknown call_tmp[597468] "expr temp" "maybe param" "maybe type" "temp"
    (597471 'move' call_tmp[597468](115918 call != eltType[115912] b[115905]))
    unknown call_tmp[597473] "expr temp" "maybe param" "maybe type" "temp"
    (597476 'move' call_tmp[597473](115935 call _cond_test call_tmp[597468]))
    if call_tmp[597473]
    {
      unknown call_tmp[597478] "expr temp" "maybe param" "maybe type" "temp"
      (597481 'move' call_tmp[597478](115925 call _cast string[24] eltType[115912]))
      unknown call_tmp[597483] "expr temp" "maybe param" "maybe type" "temp"
      (597486 'move' call_tmp[597483](115930 call _cast string[24] b[115905]))
      (115932 call compilerError "array element type mismatch in return from " call_tmp[597478] " to " call_tmp[597483])
    }
    (467047 return _void[47])
  }
  type dmap[115943]
  function chpl__buildDistType[115950](arg t[115948]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown ret[467051] "RVV" "temp" "type variable"
    unknown x[115964] "insert auto destroy"
    unknown call_tmp[597488] "expr temp" "maybe param" "maybe type" "temp"
    (597491 'move' call_tmp[597488](115963 call _to_unmanaged t[115948]))
    (491294 'default init var' x[115964] call_tmp[597488])
    unknown call_tmp[597493] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (597496 'move' call_tmp[597493](691421 'new' _distribution[116702](?) x[115964]))
    unknown y[115973] "insert auto destroy"
    (491296 'init var' y[115973] call_tmp[597493])
    unknown call_tmp[597498] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (597501 'move' call_tmp[597498](115977 'typeof' y[115973]))
    (467056 'move' ret[467051](467055 'deref' call_tmp[597498]))
    (467053 return ret[467051])
  }
  where {
    unknown call_tmp[597503] "expr temp" "maybe param" "maybe type" "temp"
    (597506 'move' call_tmp[597503](115956 call _to_borrowed t[115948]))
    (328550 'is_subtype' anymanaged BaseDist[350867](?) call_tmp[597503])
  }
  function chpl__buildDistType[115987](arg t[115985]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (116007 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
    (467058 return _void[47])
  }
  function chpl__buildDistValue[116018](arg x[116015]:unmanaged[209](?)) : _unknown[43]
  {
    unknown ret[467062] "RVV" "temp"
    unknown call_tmp[597508] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (597511 'move' call_tmp[597508](691422 'new' _distribution[116702](?) x[116015]))
    (467067 'move' ret[467062](467066 'deref' call_tmp[597508]))
    (467064 return ret[467062])
  }
  where {
    { scopeless type
      unknown call_type_tmp[443421] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[597515] "expr temp" "maybe param" "maybe type" "temp"
      (597518 'move' call_tmp[597515](116026 call(116022 call (partial) borrow _mt[232] x[116015])))
      (443425 'move' call_type_tmp[443421](116027 'typeof' call_tmp[597515]))
    }
    (328551 'is_subtype' anymanaged BaseDist[350867](?) call_type_tmp[443421])
  }
  function chpl__buildDistValue[116048](in arg x[116045]:_owned[39039](?)) : _unknown[43]
  {
    unknown ret[467071] "RVV" "temp"
    unknown call_tmp[597522] "expr temp" "maybe param" "maybe type" "temp"
    (597525 'move' call_tmp[597522](116067 call(116063 call (partial) release _mt[232] x[116045])))
    unknown call_tmp[597527] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (597530 'move' call_tmp[597527](691423 'new' _distribution[116702](?) call_tmp[597522]))
    (467076 'move' ret[467071](467075 'deref' call_tmp[597527]))
    (467073 return ret[467071])
  }
  where {
    { scopeless type
      unknown call_type_tmp[443427] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[597534] "expr temp" "maybe param" "maybe type" "temp"
      (597537 'move' call_tmp[597534](116056 call(116052 call (partial) borrow _mt[232] x[116045])))
      (443431 'move' call_type_tmp[443427](116057 'typeof' call_tmp[597534]))
    }
    (328552 'is_subtype' anymanaged BaseDist[350867](?) call_type_tmp[443427])
  }
  function chpl__buildDistValue[116081](arg x[116079]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (116101 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
    (467078 return _void[47])
  }
  function _distribution[116702](?).init[116124](arg _mt[116706]:_MT[227], ref arg this[116704]:_distribution[116702](?), arg _pid[116121]:int(64)[13], arg _instance[116126]:_any[170](?), arg _unowned[116129]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[436178] "temp"
    (436181 'init var' tmp[436178] _pid[116121] int(64)[13])
    (436183 'init field' this[116704] c"_pid" tmp[436178])
    unknown tmp[436187] "temp"
    (436189 'init var' tmp[436187] _instance[116126])
    (436191 'init field' this[116704] c"_instance" tmp[436187])
    unknown tmp[436195] "temp"
    (436198 'init var' tmp[436195] _unowned[116129] bool[10])
    (436200 'init field' this[116704] c"_unowned" tmp[436195])
    (467080 return _void[47])
  }
  function _distribution[116702](?).init[116167](arg _mt[116710]:_MT[227], ref arg this[116708]:_distribution[116702](?), arg value[116165]:_any[170](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[436204] "temp"
    unknown tmp[513563] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513564] "maybe param" "temp"
    unknown call_tmp[597539] "expr temp" "maybe param" "maybe type" "temp"
    (597542 'move' call_tmp[597539](116176 call _isPrivatized value[116165]))
    (513569 'move' tmp[513564](513567 call _cond_test call_tmp[597539]))
    if tmp[513564]
    {
      unknown tmp[513571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513573 'move' tmp[513571](116180 call _newPrivatizedClass value[116165]))
      (513578 'move' tmp[513563](513575 '_paramFoldLogical' tmp[513564] tmp[513571]))
    }
    {
      (513583 'move' tmp[513563](513580 '_paramFoldLogical' tmp[513564] nullPid[111825]))
    }
    (436207 'init var' tmp[436204] tmp[513563] int(64)[13])
    (436209 'init field' this[116708] c"_pid" tmp[436204])
    unknown call_tmp[597544] "maybe param" "maybe type" "temp"
    (597547 'move' call_tmp[597544](116196 call _to_unmanaged value[116165]))
    unknown tmp[436213] "temp"
    (436215 'init var' tmp[436213] call_tmp[597544])
    (436217 'init field' this[116708] c"_instance" tmp[436213])
    val tmp[436222]:bool[10] "temp"
    (436225 'default init var' tmp[436222] bool[10])
    (436227 '.=' this[116708] c"_unowned" tmp[436222])
    (467082 return _void[47])
  }
  function _distribution[116702](?).init=[116208](arg _mt[116714]:_MT[227], ref arg this[116712]:_distribution[116702](?), const  ref arg other[116205]:_distribution[116702](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[597551] "expr temp" "maybe param" "maybe type" "temp"
    (597554 'move' call_tmp[597551](116211 call _value _mt[232] other[116205]))
    unknown call_tmp[597558] "maybe param" "maybe type" "temp"
    (597561 'move' call_tmp[597558](116220 call(116216 call (partial) dsiClone _mt[232] call_tmp[597551])))
    unknown value[116221] "insert auto destroy"
    (491298 'init var' value[116221] call_tmp[597558])
    (116231 call(116226 call (partial) init _mt[232] this[116712]) value[116221])
    (467084 return _void[47])
  }
  function _distribution[116702](?)._value[116237](arg _mt[116718]:_MT[227], arg this[116716]:_distribution[116702](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    unknown ret[467088] "RVV" "temp"
    unknown call_tmp[597567] "expr temp" "maybe param" "maybe type" "temp"
    (597570 'move' call_tmp[597567](350901 call _instance _mt[232] this[116716]))
    unknown call_tmp[597572] "expr temp" "maybe param" "maybe type" "temp"
    (597575 'move' call_tmp[597572](116242 call _isPrivatized call_tmp[597567]))
    unknown call_tmp[597577] "expr temp" "maybe param" "maybe type" "temp"
    (597580 'move' call_tmp[597577](116256 call _cond_test call_tmp[597572]))
    if call_tmp[597577]
    {
      { scopeless type
        unknown call_type_tmp[443433] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[597584] "expr temp" "maybe param" "maybe type" "temp"
        (597587 'move' call_tmp[597584](350906 call _instance _mt[232] this[116716]))
        (443437 'move' call_type_tmp[443433](116245 'typeof' call_tmp[597584]))
      }
      unknown call_tmp[597591] "expr temp" "maybe param" "maybe type" "temp"
      (597594 'move' call_tmp[597591](350911 call _pid _mt[232] this[116716]))
      unknown call_tmp[597596] "expr temp" "maybe param" "maybe type" "temp"
      (597599 'move' call_tmp[597596](116248 call chpl_getPrivatizedCopy call_type_tmp[443433] call_tmp[597591]))
      (467093 'move' ret[467088](467092 'deref' call_tmp[597596]))
      gotoReturn _end__value[467086] _end__value[467086]
    }
    {
      unknown call_tmp[597603] "expr temp" "maybe param" "maybe type" "temp"
      (597606 'move' call_tmp[597603](350916 call _instance _mt[232] this[116716]))
      (467098 'move' ret[467088](467097 'deref' call_tmp[597603]))
      gotoReturn _end__value[467086] _end__value[467086]
    }
    label _end__value[467086]
    (467090 return ret[467088])
  }
  function _distribution[116702](?).chpl_forwarding_expr3__value[116265](arg _mt[116722]:_MT[227], arg this[116720]:_distribution[116702](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[467104] "RVV" "temp"
    (467108 'move' ret[467104](350920 call _value _mt[232] this[116720]))
    (467106 return ret[467104])
  }
  function _distribution[116702](?)._do_destroy[116273](arg _mt[116726]:_MT[227], arg this[116724]:_distribution[116702](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    unknown tmp[399816] "maybe param" "temp"
    unknown call_tmp[597612] "expr temp" "maybe param" "maybe type" "temp"
    (597615 'move' call_tmp[597612](350925 call _unowned _mt[232] this[116724]))
    (399827 'move' tmp[399816](116276 call ! call_tmp[597612]))
    unknown call_tmp[597617] "expr temp" "maybe param" "maybe type" "temp"
    (597620 'move' call_tmp[597617](399829 call _cond_invalid tmp[399816]))
    if call_tmp[597617]
    {
      (399832 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[513590] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513591] "maybe param" "temp"
    unknown call_tmp[597622] "expr temp" "maybe param" "maybe type" "temp"
    (597625 'move' call_tmp[597622](399817 call isTrue tmp[399816]))
    (513596 'move' tmp[513591](513594 call _cond_test call_tmp[597622]))
    if tmp[513591]
    {
      unknown tmp[513598] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[597629] "expr temp" "maybe param" "maybe type" "temp"
      (597632 'move' call_tmp[597629](350930 call _instance _mt[232] this[116724]))
      unknown call_tmp[597636] "expr temp" "maybe param" "maybe type" "temp"
      (597639 'move' call_tmp[597636](116285 call(116281 call (partial) singleton _mt[232] call_tmp[597629])))
      unknown call_tmp[597641] "expr temp" "maybe param" "maybe type" "temp"
      (597644 'move' call_tmp[597641](116286 call ! call_tmp[597636]))
      (513600 'move' tmp[513598](399820 call isTrue call_tmp[597641]))
      (513605 'move' tmp[513590](513602 '_paramFoldLogical' tmp[513591] tmp[513598]))
    }
    {
      (513610 'move' tmp[513590](513607 '_paramFoldLogical' tmp[513591] 0))
    }
    unknown call_tmp[597646] "expr temp" "maybe param" "maybe type" "temp"
    (597649 'move' call_tmp[597646](116330 call _cond_test tmp[513590]))
    if call_tmp[597646]
    {
      {
        const tmp[116324] "const" "temp"
        unknown call_tmp[597653] "expr temp" "maybe param" "maybe type" "temp"
        (597656 'move' call_tmp[597653](350935 call _instance _mt[232] this[116724]))
        unknown call_tmp[597658] "expr temp" "maybe param" "maybe type" "temp"
        (597661 'move' call_tmp[597658](116321 '_wide_get_locale' call_tmp[597653]))
        (116325 'move' tmp[116324](116322 'deref' call_tmp[597658]))
        {
          unknown call_tmp[597665] "expr temp" "maybe param" "maybe type" "temp"
          (597668 'move' call_tmp[597665](350940 call _instance _mt[232] this[116724]))
          unknown call_tmp[597672] "maybe param" "maybe type" "temp"
          (597675 'move' call_tmp[597672](116296 call(116292 call (partial) remove _mt[232] call_tmp[597665])))
          unknown distToFree[116297] "insert auto destroy"
          (491300 'init var' distToFree[116297] call_tmp[597672])
          unknown call_tmp[597677] "expr temp" "maybe param" "maybe type" "temp"
          (597680 'move' call_tmp[597677](116303 call != distToFree[116297] nil[38]))
          unknown call_tmp[597682] "expr temp" "maybe param" "maybe type" "temp"
          (597685 'move' call_tmp[597682](116317 call _cond_test call_tmp[597677]))
          if call_tmp[597682]
          {
            unknown call_tmp[597687] "expr temp" "maybe param" "maybe type" "temp"
            (597690 'move' call_tmp[597687](116307 call postfix! distToFree[116297]))
            unknown call_tmp[597694] "expr temp" "maybe param" "maybe type" "temp"
            (597697 'move' call_tmp[597694](350947 call _instance _mt[232] this[116724]))
            unknown call_tmp[597699] "expr temp" "maybe param" "maybe type" "temp"
            (597702 'move' call_tmp[597699](116313 call _isPrivatized call_tmp[597694]))
            (116314 call _delete_dist call_tmp[597687] call_tmp[597699])
          }
        }
      }
    }
    (467110 return _void[47])
  }
  function _distribution[116702](?).deinit[116339](arg _mt[116730]:_MT[227], arg this[116728]:_distribution[116702](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (116343 call(350953 call (partial) _do_destroy _mt[232] this[116728]))
    (467112 return _void[47])
  }
  function _distribution[116702](?).clone[116350](arg _mt[116734]:_MT[227], arg this[116732]:_distribution[116702](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467116] "RVV" "temp"
    unknown call_tmp[597708] "expr temp" "maybe param" "maybe type" "temp"
    (597711 'move' call_tmp[597708](350958 call _value _mt[232] this[116732]))
    unknown call_tmp[597715] "expr temp" "maybe param" "maybe type" "temp"
    (597718 'move' call_tmp[597715](116358 call(116354 call (partial) dsiClone _mt[232] call_tmp[597708])))
    unknown call_tmp[597720] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (597723 'move' call_tmp[597720](691424 'new' _distribution[116702](?) call_tmp[597715]))
    (467121 'move' ret[467116](467120 'deref' call_tmp[597720]))
    (467118 return ret[467116])
  }
  function _distribution[116702](?).newRectangularDom[116373](arg _mt[116738]:_MT[227], arg this[116736]:_distribution[116702](?), param arg rank[116370]:int(64)[13], arg idxType[116375]:_any[170](?), param arg stridable[116378]:bool[10], arg ranges[116393] :
  unknown call_tmp[597725] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method"
  {
    unknown ret[467125] "RVV" "temp"
    unknown call_tmp[597732] "expr temp" "maybe param" "maybe type" "temp"
    (597735 'move' call_tmp[597732](350967 call _value _mt[232] this[116736]))
    unknown call_tmp[597739] "maybe param" "maybe type" "temp"
    (597742 'move' call_tmp[597739](116407 call(116399 call (partial) dsiNewRectangularDom _mt[232] call_tmp[597732]) rank[116370] idxType[116375] stridable[116378] ranges[116393]))
    unknown x[116408] "insert auto destroy"
    (491302 'init var' x[116408] call_tmp[597739])
    unknown call_tmp[597746] "expr temp" "maybe param" "maybe type" "temp"
    (597749 'move' call_tmp[597746](116419 call(116415 call (partial) linksDistribution _mt[232] x[116408])))
    unknown call_tmp[597751] "expr temp" "maybe param" "maybe type" "temp"
    (597754 'move' call_tmp[597751](116431 call _cond_test call_tmp[597746]))
    if call_tmp[597751]
    {
      unknown call_tmp[597758] "expr temp" "maybe param" "maybe type" "temp"
      (597761 'move' call_tmp[597758](350976 call _value _mt[232] this[116736]))
      (116428 call(116423 call (partial) add_dom _mt[232] call_tmp[597758]) x[116408])
    }
    (467130 'move' ret[467125](467129 'deref' x[116408]))
    (467127 return ret[467125])
  }
  function _distribution[116702](?).newRectangularDom[116446](arg _mt[116742]:_MT[227], arg this[116740]:_distribution[116702](?), param arg rank[116443]:int(64)[13], arg idxType[116448]:_any[170](?), param arg stridable[116451]:bool[10]) : _unknown[43] "method" "primary method"
  {
    unknown ret[467134] "RVV" "temp"
    unknown ranges[116466] "insert auto destroy"
    unknown call_tmp[597765] "expr temp" "maybe param" "maybe type" "temp"
    (597768 'move' call_tmp[597765](116463 call range[66183](?) idxType[116448] bounded[66079] stridable[116451]))
    unknown call_tmp[597770] "expr temp" "maybe param" "maybe type" "temp"
    (597773 'move' call_tmp[597770](116464 call * rank[116443] call_tmp[597765]))
    (491304 'default init var' ranges[116466] call_tmp[597770])
    unknown call_tmp[597777] "expr temp" "maybe param" "maybe type" "temp"
    (597780 'move' call_tmp[597777](116476 call(350987 call (partial) newRectangularDom _mt[232] this[116740]) rank[116443] idxType[116448] stridable[116451] ranges[116466]))
    (467139 'move' ret[467134](467138 'deref' call_tmp[597777]))
    (467136 return ret[467134])
  }
  function _distribution[116702](?).newAssociativeDom[116485](arg _mt[116746]:_MT[227], arg this[116744]:_distribution[116702](?), arg idxType[116483]:_any[170](?), param arg parSafe[116489]:bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    unknown ret[467143] "RVV" "temp"
    unknown call_tmp[597784] "expr temp" "maybe param" "maybe type" "temp"
    (597787 'move' call_tmp[597784](350995 call _value _mt[232] this[116744]))
    unknown call_tmp[597791] "maybe param" "maybe type" "temp"
    (597794 'move' call_tmp[597791](116502 call(116496 call (partial) dsiNewAssociativeDom _mt[232] call_tmp[597784]) idxType[116483] parSafe[116489]))
    unknown x[116503] "insert auto destroy"
    (491306 'init var' x[116503] call_tmp[597791])
    unknown call_tmp[597798] "expr temp" "maybe param" "maybe type" "temp"
    (597801 'move' call_tmp[597798](116512 call(116508 call (partial) linksDistribution _mt[232] x[116503])))
    unknown call_tmp[597803] "expr temp" "maybe param" "maybe type" "temp"
    (597806 'move' call_tmp[597803](116522 call _cond_test call_tmp[597798]))
    if call_tmp[597803]
    {
      unknown call_tmp[597810] "expr temp" "maybe param" "maybe type" "temp"
      (597813 'move' call_tmp[597810](351002 call _value _mt[232] this[116744]))
      (116519 call(116514 call (partial) add_dom _mt[232] call_tmp[597810]) x[116503])
    }
    (467148 'move' ret[467143](467147 'deref' x[116503]))
    (467145 return ret[467143])
  }
  function _distribution[116702](?).newOpaqueDom[116535](arg _mt[116750]:_MT[227], arg this[116748]:_distribution[116702](?), arg idxType[116533]:_any[170](?), param arg parSafe[116539]:bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    unknown ret[467152] "RVV" "temp"
    unknown call_tmp[597819] "expr temp" "maybe param" "maybe type" "temp"
    (597822 'move' call_tmp[597819](351008 call _value _mt[232] this[116748]))
    unknown call_tmp[597826] "maybe param" "maybe type" "temp"
    (597829 'move' call_tmp[597826](116552 call(116546 call (partial) dsiNewOpaqueDom _mt[232] call_tmp[597819]) idxType[116533] parSafe[116539]))
    unknown x[116553] "insert auto destroy"
    (491308 'init var' x[116553] call_tmp[597826])
    unknown call_tmp[597833] "expr temp" "maybe param" "maybe type" "temp"
    (597836 'move' call_tmp[597833](116562 call(116558 call (partial) linksDistribution _mt[232] x[116553])))
    unknown call_tmp[597838] "expr temp" "maybe param" "maybe type" "temp"
    (597841 'move' call_tmp[597838](116572 call _cond_test call_tmp[597833]))
    if call_tmp[597838]
    {
      unknown call_tmp[597845] "expr temp" "maybe param" "maybe type" "temp"
      (597848 'move' call_tmp[597845](351015 call _value _mt[232] this[116748]))
      (116569 call(116564 call (partial) add_dom _mt[232] call_tmp[597845]) x[116553])
    }
    (467157 'move' ret[467152](467156 'deref' x[116553]))
    (467154 return ret[467152])
  }
  function _distribution[116702](?).newSparseDom[116587](arg _mt[116754]:_MT[227], arg this[116752]:_distribution[116702](?), param arg rank[116584]:int(64)[13], arg idxType[116589]:_any[170](?), arg dom[116592]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467161] "RVV" "temp"
    unknown call_tmp[597854] "expr temp" "maybe param" "maybe type" "temp"
    (597857 'move' call_tmp[597854](351022 call _value _mt[232] this[116752]))
    unknown call_tmp[597861] "maybe param" "maybe type" "temp"
    (597864 'move' call_tmp[597861](116605 call(116598 call (partial) dsiNewSparseDom _mt[232] call_tmp[597854]) rank[116584] idxType[116589] dom[116592]))
    unknown x[116606] "insert auto destroy"
    (491310 'init var' x[116606] call_tmp[597861])
    unknown call_tmp[597868] "expr temp" "maybe param" "maybe type" "temp"
    (597871 'move' call_tmp[597868](116615 call(116611 call (partial) linksDistribution _mt[232] x[116606])))
    unknown call_tmp[597873] "expr temp" "maybe param" "maybe type" "temp"
    (597876 'move' call_tmp[597873](116625 call _cond_test call_tmp[597868]))
    if call_tmp[597873]
    {
      unknown call_tmp[597880] "expr temp" "maybe param" "maybe type" "temp"
      (597883 'move' call_tmp[597880](351030 call _value _mt[232] this[116752]))
      (116622 call(116617 call (partial) add_dom _mt[232] call_tmp[597880]) x[116606])
    }
    (467166 'move' ret[467161](467165 'deref' x[116606]))
    (467163 return ret[467161])
  }
  function _distribution[116702](?).idxToLocale[116638](arg _mt[116758]:_MT[227], arg this[116756]:_distribution[116702](?), arg ind[116636]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467170] "RVV" "temp"
    unknown call_tmp[597889] "expr temp" "maybe param" "maybe type" "temp"
    (597892 'move' call_tmp[597889](351036 call _value _mt[232] this[116756]))
    unknown call_tmp[597896] "expr temp" "maybe param" "maybe type" "temp"
    (597899 'move' call_tmp[597896](116648 call(116643 call (partial) dsiIndexToLocale _mt[232] call_tmp[597889]) ind[116636]))
    (467175 'move' ret[467170](467174 'deref' call_tmp[597896]))
    (467172 return ret[467170])
  }
  function _distribution[116702](?).readWriteThis[116658](arg _mt[116762]:_MT[227], arg this[116760]:_distribution[116702](?), arg f[116656]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[597903] "expr temp" "maybe param" "maybe type" "temp"
    (597906 'move' call_tmp[597903](351042 call _value _mt[232] this[116760]))
    (116662 call <~> f[116656] call_tmp[597903])
    (467177 return _void[47])
  }
  function _distribution[116702](?).displayRepresentation[116670](arg _mt[116766]:_MT[227], arg this[116764]:_distribution[116702](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[597910] "expr temp" "maybe param" "maybe type" "temp"
    (597913 'move' call_tmp[597910](351046 call _value _mt[232] this[116764]))
    (116679 call(116675 call (partial) dsiDisplayRepresentation _mt[232] call_tmp[597910]))
    (467179 return _void[47])
  }
  function _distribution[116702](?).targetLocales[116686](arg _mt[116770]:_MT[227], arg this[116768]:_distribution[116702](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467183] "RVV" "temp"
    unknown call_tmp[597919] "expr temp" "maybe param" "maybe type" "temp"
    (597922 'move' call_tmp[597919](351050 call _value _mt[232] this[116768]))
    unknown call_tmp[597926] "expr temp" "maybe param" "maybe type" "temp"
    (597929 'move' call_tmp[597926](116695 call(116691 call (partial) dsiTargetLocales _mt[232] call_tmp[597919])))
    (467188 'move' ret[467183](467187 'deref' call_tmp[597926]))
    (467185 return ret[467183])
  }
  type _distribution[116702](?) val _pid[116108]:int(64)[13] int(64)[13] unknown _instance[116111] "owned" val _unowned[116115]:bool[10] bool[10] forwarding ( )
  function ==[116782](arg d1[116779]:_distribution[116702](?), arg d2[116788]:_distribution[116702](?)) : _unknown[43] "inline"
  {
    unknown ret[467192] "RVV" "temp"
    unknown call_tmp[597933] "expr temp" "maybe param" "maybe type" "temp"
    (597936 'move' call_tmp[597933](116792 call _value _mt[232] d1[116779]))
    unknown call_tmp[597940] "expr temp" "maybe param" "maybe type" "temp"
    (597943 'move' call_tmp[597940](116796 call _value _mt[232] d2[116788]))
    unknown call_tmp[597945] "expr temp" "maybe param" "maybe type" "temp"
    (597948 'move' call_tmp[597945](116799 call == call_tmp[597933] call_tmp[597940]))
    unknown call_tmp[597950] "expr temp" "maybe param" "maybe type" "temp"
    (597953 'move' call_tmp[597950](116804 call _cond_test call_tmp[597945]))
    if call_tmp[597950]
    {
      (467197 'move' ret[467192](467196 'deref' 1))
      gotoReturn _end_==[467190] _end_==[467190]
    }
    unknown call_tmp[597957] "expr temp" "maybe param" "maybe type" "temp"
    (597960 'move' call_tmp[597957](116811 call _value _mt[232] d1[116779]))
    unknown call_tmp[597966] "expr temp" "maybe param" "maybe type" "temp"
    (597969 'move' call_tmp[597966](116820 call _value _mt[232] d2[116788]))
    unknown call_tmp[597971] "expr temp" "maybe param" "maybe type" "temp"
    (597974 'move' call_tmp[597971](116824 call(116816 call (partial) dsiEqualDMaps _mt[232] call_tmp[597957]) call_tmp[597966]))
    (467202 'move' ret[467192](467201 'deref' call_tmp[597971]))
    label _end_==[467190]
    (467194 return ret[467192])
  }
  function !=[116838](arg d1[116835]:_distribution[116702](?), arg d2[116844]:_distribution[116702](?)) : _unknown[43] "inline"
  {
    unknown ret[467206] "RVV" "temp"
    unknown call_tmp[597978] "expr temp" "maybe param" "maybe type" "temp"
    (597981 'move' call_tmp[597978](116848 call _value _mt[232] d1[116835]))
    unknown call_tmp[597985] "expr temp" "maybe param" "maybe type" "temp"
    (597988 'move' call_tmp[597985](116852 call _value _mt[232] d2[116844]))
    unknown call_tmp[597990] "expr temp" "maybe param" "maybe type" "temp"
    (597993 'move' call_tmp[597990](116855 call == call_tmp[597978] call_tmp[597985]))
    unknown call_tmp[597995] "expr temp" "maybe param" "maybe type" "temp"
    (597998 'move' call_tmp[597995](116860 call _cond_test call_tmp[597990]))
    if call_tmp[597995]
    {
      (467211 'move' ret[467206](467210 'deref' 0))
      gotoReturn _end_!=[467204] _end_!=[467204]
    }
    unknown call_tmp[598002] "expr temp" "maybe param" "maybe type" "temp"
    (598005 'move' call_tmp[598002](116867 call _value _mt[232] d1[116835]))
    unknown call_tmp[598011] "expr temp" "maybe param" "maybe type" "temp"
    (598014 'move' call_tmp[598011](116874 call _value _mt[232] d2[116844]))
    unknown call_tmp[598016] "expr temp" "maybe param" "maybe type" "temp"
    (598019 'move' call_tmp[598016](116878 call(116870 call (partial) dsiEqualDMaps _mt[232] call_tmp[598002]) call_tmp[598011]))
    unknown call_tmp[598021] "expr temp" "maybe param" "maybe type" "temp"
    (598024 'move' call_tmp[598021](116879 call ! call_tmp[598016]))
    (467216 'move' ret[467206](467215 'deref' call_tmp[598021]))
    label _end_!=[467204]
    (467208 return ret[467206])
  }
  function chpl_defaultComparator[116887]() : _unknown[43]
  {
    unknown ret[467220] "RVV" "temp"
    (467225 'move' ret[467220](467224 'deref' defaultComparator[251428]))
    (467222 return ret[467220])
    (329396 'used modules list'(116891 'use' Sort[251417]))
  }
  function _domain[123390](?).chpl__promotionType[116913](arg _mt[123394]:_MT[227], arg this[123392]:_domain[123390](?)) type : _unknown[43] "method" "primary method"
  {
    unknown ret[467229] "RVV" "temp" "type variable"
    unknown call_tmp[598028] "expr temp" "maybe param" "maybe type" "temp"
    (598031 'move' call_tmp[598028](351067 call rank _mt[232] this[123392]))
    unknown call_tmp[598035] "expr temp" "maybe param" "maybe type" "temp"
    (598038 'move' call_tmp[598035](351071 call _value _mt[232] this[123392]))
    unknown call_tmp[598042] "expr temp" "maybe param" "maybe type" "temp"
    (598045 'move' call_tmp[598042](116918 call idxType _mt[232] call_tmp[598035]))
    unknown call_tmp[598047] "expr temp" "maybe param" "maybe type" "temp"
    (598050 'move' call_tmp[598047](116921 call chpl__buildIndexType call_tmp[598028] call_tmp[598042]))
    (467234 'move' ret[467229](467233 'deref' call_tmp[598047]))
    (467231 return ret[467229])
  }
  function _domain[123390](?).init[116934](arg _mt[123398]:_MT[227], ref arg this[123396]:_domain[123390](?), arg _pid[116931]:int(64)[13], arg _instance[116936]:_any[170](?), arg _unowned[116939]:bool[10]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[436267] "temp"
    (436270 'init var' tmp[436267] _pid[116931] int(64)[13])
    (436272 'init field' this[123396] c"_pid" tmp[436267])
    unknown tmp[436276] "temp"
    (436278 'init var' tmp[436276] _instance[116936])
    (436280 'init field' this[123396] c"_instance" tmp[436276])
    unknown tmp[436284] "temp"
    (436287 'init var' tmp[436284] _unowned[116939] bool[10])
    (436289 'init field' this[123396] c"_unowned" tmp[436284])
    (467236 return _void[47])
  }
  function _domain[123390](?).init[116973](arg _mt[123402]:_MT[227], ref arg this[123400]:_domain[123390](?), arg value[116971]:_any[170](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598052] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (598055 'move' call_tmp[598052](116977 'typeof' value[116971]))
    unknown call_tmp[598057] "expr temp" "maybe param" "maybe type" "temp"
    (598060 'move' call_tmp[598057](116979 call _to_unmanaged call_tmp[598052]))
    unknown call_tmp[598062] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (598065 'move' call_tmp[598062](116981 'typeof' value[116971]))
    unknown call_tmp[598067] "expr temp" "maybe param" "maybe type" "temp"
    (598070 'move' call_tmp[598067](116982 call != call_tmp[598057] call_tmp[598062]))
    unknown call_tmp[598072] "expr temp" "maybe param" "maybe type" "temp"
    (598075 'move' call_tmp[598072](116989 call _cond_test call_tmp[598067]))
    if call_tmp[598072]
    {
      (116987 call compilerError "Domain on borrow created")
    }
    unknown tmp[436293] "temp"
    unknown tmp[513617] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513618] "maybe param" "temp"
    unknown call_tmp[598077] "expr temp" "maybe param" "maybe type" "temp"
    (598080 'move' call_tmp[598077](117002 call _isPrivatized value[116971]))
    (513623 'move' tmp[513618](513621 call _cond_test call_tmp[598077]))
    if tmp[513618]
    {
      unknown tmp[513625] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (513627 'move' tmp[513625](117006 call _newPrivatizedClass value[116971]))
      (513632 'move' tmp[513617](513629 '_paramFoldLogical' tmp[513618] tmp[513625]))
    }
    {
      (513637 'move' tmp[513617](513634 '_paramFoldLogical' tmp[513618] nullPid[111825]))
    }
    (436296 'init var' tmp[436293] tmp[513617] int(64)[13])
    (436298 'init field' this[123400] c"_pid" tmp[436293])
    unknown tmp[436302] "temp"
    (436304 'init var' tmp[436302] value[116971])
    (436306 'init field' this[123400] c"_instance" tmp[436302])
    val tmp[436311]:bool[10] "temp"
    (436314 'default init var' tmp[436311] bool[10])
    (436316 '.=' this[123400] c"_unowned" tmp[436311])
    (467238 return _void[47])
  }
  function _domain[123390](?).init[117030](arg _mt[123406]:_MT[227], ref arg this[123404]:_domain[123390](?), arg d[117027]:_distribution[116702](?), param arg rank[117033]:int(64)[13], arg idxType[117037]:_any[170](?) =
  int(64)[13], param arg stridable[117042]:bool[10] =
  0) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598086] "expr temp" "maybe param" "maybe type" "temp"
    (598089 'move' call_tmp[598086](117058 call(117051 call (partial) newRectangularDom _mt[232] d[117027]) rank[117033] idxType[117037] stridable[117042]))
    (117060 call(117047 call (partial) init _mt[232] this[123404]) call_tmp[598086])
    (467240 return _void[47])
  }
  function _domain[123390](?).init[117071](arg _mt[123410]:_MT[227], ref arg this[123408]:_domain[123390](?), arg d[117068]:_distribution[116702](?), param arg rank[117074]:int(64)[13], arg idxType[117078]:_any[170](?) =
  int(64)[13], param arg stridable[117083]:bool[10] =
  0, arg ranges[117099] :
  unknown call_tmp[598091] "expr temp" "maybe param" "maybe type" "temp") : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598100] "expr temp" "maybe param" "maybe type" "temp"
    (598103 'move' call_tmp[598100](117115 call(117107 call (partial) newRectangularDom _mt[232] d[117068]) rank[117074] idxType[117078] stridable[117083] ranges[117099]))
    (117117 call(117103 call (partial) init _mt[232] this[123408]) call_tmp[598100])
    (467242 return _void[47])
  }
  function _domain[123390](?).init[117128](arg _mt[123414]:_MT[227], ref arg this[123412]:_domain[123390](?), arg d[117125]:_distribution[116702](?), arg idxType[117130]:_any[170](?), param arg parSafe[117134]:bool[10] =
  1) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598109] "expr temp" "maybe param" "maybe type" "temp"
    (598112 'move' call_tmp[598109](117151 call(117145 call (partial) newAssociativeDom _mt[232] d[117125]) idxType[117130] parSafe[117134]))
    (117153 call(117139 call (partial) init _mt[232] this[123412]) call_tmp[598109])
    (467244 return _void[47])
  }
  function _domain[123390](?).init[117164](arg _mt[123418]:_MT[227], ref arg this[123416]:_domain[123390](?), arg d[117161]:_distribution[116702](?), arg idxType[117167]:_OpaqueIndex[140304], param arg parSafe[117172]:bool[10] =
  1) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598118] "expr temp" "maybe param" "maybe type" "temp"
    (598121 'move' call_tmp[598118](117189 call(117183 call (partial) newOpaqueDom _mt[232] d[117161]) idxType[117167] parSafe[117172]))
    (117191 call(117177 call (partial) init _mt[232] this[123416]) call_tmp[598118])
    (467246 return _void[47])
  }
  function _domain[123390](?).init[117202](arg _mt[123422]:_MT[227], ref arg this[123420]:_domain[123390](?), arg d[117199]:_distribution[116702](?), arg dom[117205]:_domain[123390](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598129] "expr temp" "maybe param" "maybe type" "temp"
    (598132 'move' call_tmp[598129](117219 call rank _mt[232] dom[117205]))
    unknown call_tmp[598136] "expr temp" "maybe param" "maybe type" "temp"
    (598139 'move' call_tmp[598136](117224 call _value _mt[232] dom[117205]))
    unknown call_tmp[598143] "expr temp" "maybe param" "maybe type" "temp"
    (598146 'move' call_tmp[598143](117227 call idxType _mt[232] call_tmp[598136]))
    unknown call_tmp[598148] "expr temp" "maybe param" "maybe type" "temp"
    (598151 'move' call_tmp[598148](117231 call(117215 call (partial) newSparseDom _mt[232] d[117199]) call_tmp[598129] call_tmp[598143] dom[117205]))
    (117233 call(117209 call (partial) init _mt[232] this[123420]) call_tmp[598148])
    (467248 return _void[47])
  }
  function _domain[123390](?).init=[117244](arg _mt[123426]:_MT[227], ref arg this[123424]:_domain[123390](?), const  ref arg other[117241]:_domain[123390](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598157] "expr temp" "maybe param" "maybe type" "temp"
    (598160 'move' call_tmp[598157](117255 call dist _mt[232] other[117241]))
    unknown call_tmp[598164] "expr temp" "maybe param" "maybe type" "temp"
    (598167 'move' call_tmp[598164](117260 call rank _mt[232] other[117241]))
    unknown call_tmp[598171] "expr temp" "maybe param" "maybe type" "temp"
    (598174 'move' call_tmp[598171](117264 call idxType _mt[232] other[117241]))
    unknown call_tmp[598178] "expr temp" "maybe param" "maybe type" "temp"
    (598181 'move' call_tmp[598178](117268 call stridable _mt[232] other[117241]))
    unknown call_tmp[598185] "expr temp" "maybe param" "maybe type" "temp"
    (598188 'move' call_tmp[598185](117276 call(117272 call (partial) dims _mt[232] other[117241])))
    (117277 call(117251 call (partial) init _mt[232] this[123424]) call_tmp[598157] call_tmp[598164] call_tmp[598171] call_tmp[598178] call_tmp[598185])
    (467250 return _void[47])
  }
  where {
    (117249 call isRectangularDom other[117241])
  }
  function _domain[123390](?).init=[117289](arg _mt[123430]:_MT[227], ref arg this[123428]:_domain[123390](?), const  ref arg other[117286]:_domain[123390](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598190] "expr temp" "maybe param" "maybe type" "temp"
    (598193 'move' call_tmp[598190](117294 call isAssociativeDom other[117286]))
    unknown call_tmp[598195] "expr temp" "maybe param" "maybe type" "temp"
    (598198 'move' call_tmp[598195](117421 call _cond_test call_tmp[598190]))
    if call_tmp[598195]
    {
      unknown call_tmp[598204] "expr temp" "maybe param" "maybe type" "temp"
      (598207 'move' call_tmp[598204](117300 call dist _mt[232] other[117286]))
      unknown call_tmp[598211] "expr temp" "maybe param" "maybe type" "temp"
      (598214 'move' call_tmp[598211](117305 call idxType _mt[232] other[117286]))
      unknown call_tmp[598218] "expr temp" "maybe param" "maybe type" "temp"
      (598221 'move' call_tmp[598218](117309 call parSafe _mt[232] other[117286]))
      (117312 call(117296 call (partial) init _mt[232] this[123428]) call_tmp[598204] call_tmp[598211] call_tmp[598218])
    }
    {
      unknown call_tmp[598223] "expr temp" "maybe param" "maybe type" "temp"
      (598226 'move' call_tmp[598223](117318 call isOpaqueDom other[117286]))
      unknown call_tmp[598228] "expr temp" "maybe param" "maybe type" "temp"
      (598231 'move' call_tmp[598228](117416 call _cond_test call_tmp[598223]))
      if call_tmp[598228]
      {
        unknown call_tmp[598237] "expr temp" "maybe param" "maybe type" "temp"
        (598240 'move' call_tmp[598237](117324 call dist _mt[232] other[117286]))
        unknown call_tmp[598244] "expr temp" "maybe param" "maybe type" "temp"
        (598247 'move' call_tmp[598244](117330 call parSafe _mt[232] other[117286]))
        (117333 call(117320 call (partial) init _mt[232] this[123428]) call_tmp[598237] _OpaqueIndex[140304] call_tmp[598244])
      }
      {
        unknown call_tmp[598249] "expr temp" "maybe param" "maybe type" "temp"
        (598252 'move' call_tmp[598249](117339 call isSparseDom other[117286]))
        unknown call_tmp[598254] "expr temp" "maybe param" "maybe type" "temp"
        (598257 'move' call_tmp[598254](117412 call _cond_test call_tmp[598249]))
        if call_tmp[598254]
        {
          unknown call_tmp[598263] "expr temp" "maybe param" "maybe type" "temp"
          (598266 'move' call_tmp[598263](117345 call dist _mt[232] other[117286]))
          unknown call_tmp[598270] "expr temp" "maybe param" "maybe type" "temp"
          (598273 'move' call_tmp[598270](117350 call parentDom _mt[232] other[117286]))
          (117353 call(117341 call (partial) init _mt[232] this[123428]) call_tmp[598263] call_tmp[598270])
        }
        {
          unknown call_tmp[598275] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (598278 'move' call_tmp[598275](117375 'typeof' this[123428]))
          unknown call_tmp[598280] "expr temp" "maybe param" "maybe type" "temp"
          (598283 'move' call_tmp[598280](117377 call _cast string[24] call_tmp[598275]))
          unknown call_tmp[598285] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (598288 'move' call_tmp[598285](117396 'typeof' other[117286]))
          unknown call_tmp[598290] "expr temp" "maybe param" "maybe type" "temp"
          (598293 'move' call_tmp[598290](117398 call _cast string[24] call_tmp[598285]))
          (117401 call compilerError "Cannot initialize '" call_tmp[598280] "' from '" call_tmp[598290] "'")
          (117410 call(117405 call (partial) init _mt[232] this[123428]) nil[38])
        }
      }
    }
    unknown call_tmp[598299] "expr temp" "maybe param" "maybe type" "temp"
    (598302 'move' call_tmp[598299](351152 call _instance _mt[232] this[123428]))
    (117437 call(117430 call (partial) dsiAssignDomain _mt[232] call_tmp[598299]) other[117286](lhsPrivate = 1))
    (467252 return _void[47])
  }
  function _domain[123390](?)._value[117443](arg _mt[123434]:_MT[227], arg this[123432]:_domain[123390](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    unknown ret[467256] "RVV" "temp"
    unknown call_tmp[598308] "expr temp" "maybe param" "maybe type" "temp"
    (598311 'move' call_tmp[598308](351158 call _instance _mt[232] this[123432]))
    unknown call_tmp[598313] "expr temp" "maybe param" "maybe type" "temp"
    (598316 'move' call_tmp[598313](117448 call _isPrivatized call_tmp[598308]))
    unknown call_tmp[598318] "expr temp" "maybe param" "maybe type" "temp"
    (598321 'move' call_tmp[598318](117462 call _cond_test call_tmp[598313]))
    if call_tmp[598318]
    {
      { scopeless type
        unknown call_type_tmp[443439] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[598325] "expr temp" "maybe param" "maybe type" "temp"
        (598328 'move' call_tmp[598325](351163 call _instance _mt[232] this[123432]))
        (443443 'move' call_type_tmp[443439](117451 'typeof' call_tmp[598325]))
      }
      unknown call_tmp[598332] "expr temp" "maybe param" "maybe type" "temp"
      (598335 'move' call_tmp[598332](351168 call _pid _mt[232] this[123432]))
      unknown call_tmp[598337] "expr temp" "maybe param" "maybe type" "temp"
      (598340 'move' call_tmp[598337](117454 call chpl_getPrivatizedCopy call_type_tmp[443439] call_tmp[598332]))
      (467261 'move' ret[467256](467260 'deref' call_tmp[598337]))
      gotoReturn _end__value[467254] _end__value[467254]
    }
    {
      unknown call_tmp[598344] "expr temp" "maybe param" "maybe type" "temp"
      (598347 'move' call_tmp[598344](351173 call _instance _mt[232] this[123432]))
      (467266 'move' ret[467256](467265 'deref' call_tmp[598344]))
      gotoReturn _end__value[467254] _end__value[467254]
    }
    label _end__value[467254]
    (467258 return ret[467256])
  }
  function _domain[123390](?).chpl_forwarding_expr4__value[117472](arg _mt[123438]:_MT[227], arg this[123436]:_domain[123390](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[467272] "RVV" "temp"
    (467276 'move' ret[467272](351177 call _value _mt[232] this[123436]))
    (467274 return ret[467272])
  }
  function _domain[123390](?).chpl__serialize[117480](arg _mt[123442]:_MT[227], arg this[123440]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467280] "RVV" "temp"
    unknown call_tmp[598353] "expr temp" "maybe param" "maybe type" "temp"
    (598356 'move' call_tmp[598353](117492 call _value _mt[232] this[123440]))
    unknown call_tmp[598360] "expr temp" "maybe param" "maybe type" "temp"
    (598363 'move' call_tmp[598360](117501 call(117497 call (partial) chpl__serialize _mt[232] call_tmp[598353])))
    (467285 'move' ret[467280](467284 'deref' call_tmp[598360]))
    (467282 return ret[467280])
  }
  where {
    unknown call_tmp[598367] "expr temp" "maybe param" "maybe type" "temp"
    (598370 'move' call_tmp[598367](117483 call _value _mt[232] this[123440]))
    (117490 call(117486 call (partial) isDefaultRectangular _mt[232] call_tmp[598367]))
  }
  function _domain[123390](?).chpl__deserialize[117512](arg _mt[123446]:_MT[227], arg this[123444]:_domain[123390](?), arg data[117510]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467289] "RVV" "temp"
    unknown valueType[117519] "insert auto destroy" "type variable"(117518 'static field type' this[123444] "_instance")
    (491315 'move' valueType[117519](491312 'static field type' this[123444] "_instance"))
    unknown call_tmp[598374] "expr temp" "maybe param" "maybe type" "temp"
    (598377 'move' call_tmp[598374](117527 call _to_borrowed valueType[117519]))
    unknown call_tmp[598381] "expr temp" "maybe param" "maybe type" "temp"
    (598384 'move' call_tmp[598381](117535 call(117530 call (partial) chpl__deserialize _mt[232] call_tmp[598374]) data[117510]))
    unknown call_tmp[598386] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (598389 'move' call_tmp[598386](691425 'new' _domain[123390](?) call_tmp[598381]))
    (467294 'move' ret[467289](467293 'deref' call_tmp[598386]))
    (467291 return ret[467289])
  }
  function _domain[123390](?)._do_destroy[117545](arg _mt[123450]:_MT[227], arg this[123448]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[598393] "expr temp" "maybe param" "maybe type" "temp"
    (598396 'move' call_tmp[598393](351188 call _unowned _mt[232] this[123448]))
    unknown call_tmp[598398] "expr temp" "maybe param" "maybe type" "temp"
    (598401 'move' call_tmp[598398](117548 call ! call_tmp[598393]))
    unknown call_tmp[598403] "expr temp" "maybe param" "maybe type" "temp"
    (598406 'move' call_tmp[598403](117657 call _cond_test call_tmp[598398]))
    if call_tmp[598403]
    {
      {
        const tmp[117651] "const" "temp"
        unknown call_tmp[598410] "expr temp" "maybe param" "maybe type" "temp"
        (598413 'move' call_tmp[598410](351193 call _instance _mt[232] this[123448]))
        unknown call_tmp[598415] "expr temp" "maybe param" "maybe type" "temp"
        (598418 'move' call_tmp[598415](117648 '_wide_get_locale' call_tmp[598410]))
        (117652 'move' tmp[117651](117649 'deref' call_tmp[598415]))
        {
          unknown call_tmp[598422] "maybe param" "maybe type" "temp"
          (598425 'move' call_tmp[598422](351198 call _instance _mt[232] this[123448]))
          const inst[117552] "const" "insert auto destroy"
          (491317 'init var' inst[117552] call_tmp[598422])
          unknown call_tmp[598429] "maybe param" "maybe type" "temp"
          (598432 'move' call_tmp[598429](117566 call(117562 call (partial) remove _mt[232] inst[117552])))
          unknown tmp[117567] "insert auto destroy" "no copy" "temp"
          (491319 'init var' tmp[117567] call_tmp[598429])
          (117574 call _check_tuple_var_decl tmp[117567] 2)
          unknown call_tmp[598434] "maybe param" "maybe type" "temp"
          (598437 'move' call_tmp[598434](117568 call tmp[117567] 1))
          unknown domToFree[117556] "insert auto destroy"
          (491321 'init var' domToFree[117556] call_tmp[598434])
          unknown call_tmp[598439] "maybe param" "maybe type" "temp"
          (598442 'move' call_tmp[598439](117571 call tmp[117567] 2))
          unknown distToRemove[117558] "insert auto destroy"
          (491323 'init var' distToRemove[117558] call_tmp[598439])
          unknown distToFree[117583] "insert auto destroy"
          (491325 'init var' distToFree[117583] nil[38] unmanaged BaseDist?[389876])
          unknown call_tmp[598444] "expr temp" "maybe param" "maybe type" "temp"
          (598447 'move' call_tmp[598444](117588 call != distToRemove[117558] nil[38]))
          unknown call_tmp[598449] "expr temp" "maybe param" "maybe type" "temp"
          (598452 'move' call_tmp[598449](117603 call _cond_test call_tmp[598444]))
          if call_tmp[598449]
          {
            unknown call_tmp[598454] "expr temp" "maybe param" "maybe type" "temp"
            (598457 'move' call_tmp[598454](117592 call postfix! distToRemove[117558]))
            unknown call_tmp[598461] "expr temp" "maybe param" "maybe type" "temp"
            (598464 'move' call_tmp[598461](117598 call(117594 call (partial) remove _mt[232] call_tmp[598454])))
            (117599 call = distToFree[117583] call_tmp[598461])
          }
          unknown call_tmp[598466] "expr temp" "maybe param" "maybe type" "temp"
          (598469 'move' call_tmp[598466](117609 call != domToFree[117556] nil[38]))
          unknown call_tmp[598471] "expr temp" "maybe param" "maybe type" "temp"
          (598474 'move' call_tmp[598471](117620 call _cond_test call_tmp[598466]))
          if call_tmp[598471]
          {
            unknown call_tmp[598476] "expr temp" "maybe param" "maybe type" "temp"
            (598479 'move' call_tmp[598476](117617 call _isPrivatized inst[117552]))
            (117618 call _delete_dom inst[117552] call_tmp[598476])
          }
          unknown call_tmp[598481] "expr temp" "maybe param" "maybe type" "temp"
          (598484 'move' call_tmp[598481](117627 call != distToFree[117583] nil[38]))
          unknown call_tmp[598486] "expr temp" "maybe param" "maybe type" "temp"
          (598489 'move' call_tmp[598486](117643 call _cond_test call_tmp[598481]))
          if call_tmp[598486]
          {
            unknown call_tmp[598491] "expr temp" "maybe param" "maybe type" "temp"
            (598494 'move' call_tmp[598491](117631 call postfix! distToFree[117583]))
            unknown call_tmp[598498] "expr temp" "maybe param" "maybe type" "temp"
            (598501 'move' call_tmp[598498](117636 call dist _mt[232] inst[117552]))
            unknown call_tmp[598503] "expr temp" "maybe param" "maybe type" "temp"
            (598506 'move' call_tmp[598503](117640 call _isPrivatized call_tmp[598498]))
            (117641 call _delete_dist call_tmp[598491] call_tmp[598503])
          }
        }
      }
    }
    (467296 return _void[47])
  }
  function _domain[123390](?).deinit[117666](arg _mt[123454]:_MT[227], arg this[123452]:_domain[123390](?)) : _unknown[43] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (117670 call(351213 call (partial) _do_destroy _mt[232] this[123452]))
    (467298 return _void[47])
  }
  function _domain[123390](?).dist[117677](arg _mt[123458]:_MT[227], arg this[123456]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[467302] "RVV" "temp"
    unknown call_tmp[598512] "expr temp" "maybe param" "maybe type" "temp"
    (598515 'move' call_tmp[598512](351217 call _value _mt[232] this[123456]))
    unknown call_tmp[598519] "expr temp" "maybe param" "maybe type" "temp"
    (598522 'move' call_tmp[598519](117681 call dist _mt[232] call_tmp[598512]))
    unknown call_tmp[598524] "expr temp" "maybe param" "maybe type" "temp"
    (598527 'move' call_tmp[598524](117685 call _getDistribution call_tmp[598519]))
    (467307 'move' ret[467302](467306 'deref' call_tmp[598524]))
    (467304 return ret[467302])
  }
  function _domain[123390](?).rank[117693](arg _mt[123462]:_MT[227], arg this[123460]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467311] "RVV" "param" "temp"
    unknown tmp[399837] "maybe param" "temp"
    (399848 'move' tmp[399837](117698 call isRectangularDom this[123460]))
    unknown call_tmp[598529] "expr temp" "maybe param" "maybe type" "temp"
    (598532 'move' call_tmp[598529](399850 call _cond_invalid tmp[399837]))
    if call_tmp[598529]
    {
      (399853 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513644] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513645] "maybe param" "temp"
    unknown call_tmp[598534] "expr temp" "maybe param" "maybe type" "temp"
    (598537 'move' call_tmp[598534](399838 call isTrue tmp[399837]))
    (513650 'move' tmp[513645](513648 call _cond_test call_tmp[598534]))
    if tmp[513645]
    {
      (513655 'move' tmp[513644](513652 '_paramFoldLogical' tmp[513645] 1))
    }
    {
      unknown tmp[513657] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[598539] "expr temp" "maybe param" "maybe type" "temp"
      (598542 'move' call_tmp[598539](117702 call isSparseDom this[123460]))
      (513659 'move' tmp[513657](399842 call isTrue call_tmp[598539]))
      (513664 'move' tmp[513644](513661 '_paramFoldLogical' tmp[513645] tmp[513657]))
    }
    unknown call_tmp[598544] "expr temp" "maybe param" "maybe type" "temp"
    (598547 'move' call_tmp[598544](117714 call _cond_test tmp[513644]))
    if call_tmp[598544]
    {
      unknown call_tmp[598551] "expr temp" "maybe param" "maybe type" "temp"
      (598554 'move' call_tmp[598551](351223 call _value _mt[232] this[123460]))
      unknown call_tmp[598558] "expr temp" "maybe param" "maybe type" "temp"
      (598561 'move' call_tmp[598558](117706 call rank _mt[232] call_tmp[598551]))
      (467316 'move' ret[467311](467315 'deref' call_tmp[598558]))
      gotoReturn _end_rank[467309] _end_rank[467309]
    }
    {
      (467321 'move' ret[467311](467320 'deref' 1))
      gotoReturn _end_rank[467309] _end_rank[467309]
    }
    label _end_rank[467309]
    (467313 return ret[467311])
  }
  function _domain[123390](?).idxType[117725](arg _mt[123466]:_MT[227], arg this[123464]:_domain[123390](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467327] "RVV" "temp" "type variable"
    unknown call_tmp[598563] "expr temp" "maybe param" "maybe type" "temp"
    (598566 'move' call_tmp[598563](117730 call isOpaqueDom this[123464]))
    unknown call_tmp[598568] "expr temp" "maybe param" "maybe type" "temp"
    (598571 'move' call_tmp[598568](117751 call _cond_test call_tmp[598563]))
    if call_tmp[598568]
    {
      (117749 call compilerError "opaque domains do not currently support .idxType")
    }
    unknown call_tmp[598575] "expr temp" "maybe param" "maybe type" "temp"
    (598578 'move' call_tmp[598575](351228 call _value _mt[232] this[123464]))
    unknown call_tmp[598582] "expr temp" "maybe param" "maybe type" "temp"
    (598585 'move' call_tmp[598582](117758 call idxType _mt[232] call_tmp[598575]))
    (467332 'move' ret[467327](467331 'deref' call_tmp[598582]))
    (467329 return ret[467327])
  }
  function _domain[123390](?).intIdxType[117767](arg _mt[123470]:_MT[227], arg this[123468]:_domain[123390](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467336] "RVV" "temp" "type variable"
    unknown call_tmp[598589] "expr temp" "maybe param" "maybe type" "temp"
    (598592 'move' call_tmp[598589](351232 call _value _mt[232] this[123468]))
    unknown call_tmp[598596] "expr temp" "maybe param" "maybe type" "temp"
    (598599 'move' call_tmp[598596](117771 call idxType _mt[232] call_tmp[598589]))
    unknown call_tmp[598601] "expr temp" "maybe param" "maybe type" "temp"
    (598604 'move' call_tmp[598601](117775 call chpl__idxTypeToIntIdxType call_tmp[598596]))
    (467341 'move' ret[467336](467340 'deref' call_tmp[598601]))
    (467338 return ret[467336])
  }
  function _domain[123390](?).stridable[117783](arg _mt[123474]:_MT[227], arg this[123472]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467345] "RVV" "param" "temp"
    unknown call_tmp[598608] "expr temp" "maybe param" "maybe type" "temp"
    (598611 'move' call_tmp[598608](351237 call _value _mt[232] this[123472]))
    unknown call_tmp[598615] "expr temp" "maybe param" "maybe type" "temp"
    (598618 'move' call_tmp[598615](117790 call stridable _mt[232] call_tmp[598608]))
    (467350 'move' ret[467345](467349 'deref' call_tmp[598615]))
    (467347 return ret[467345])
  }
  where {
    (117788 call isRectangularDom this[123472])
  }
  function _domain[123390](?).stridable[117801](arg _mt[123478]:_MT[227], arg this[123476]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[467354] "RVV" "param" "temp"
    unknown call_tmp[598622] "expr temp" "maybe param" "maybe type" "temp"
    (598625 'move' call_tmp[598622](351242 call _value _mt[232] this[123476]))
    unknown call_tmp[598629] "expr temp" "maybe param" "maybe type" "temp"
    (598632 'move' call_tmp[598629](117808 call parentDom _mt[232] call_tmp[598622]))
    unknown call_tmp[598636] "expr temp" "maybe param" "maybe type" "temp"
    (598639 'move' call_tmp[598636](117811 call stridable _mt[232] call_tmp[598629]))
    (467359 'move' ret[467354](467358 'deref' call_tmp[598636]))
    (467356 return ret[467354])
  }
  where {
    (117806 call isSparseDom this[123476])
  }
  function _domain[123390](?).stridable[117822](arg _mt[123482]:_MT[227], arg this[123480]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (117846 call compilerError "opaque domains do not support .stridable")
    (467361 return _void[47])
  }
  where {
    (117827 call isOpaqueDom this[123480])
  }
  function _domain[123390](?).stridable[117854](arg _mt[123486]:_MT[227], arg this[123484]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (117878 call compilerError "associative domains do not support .stridable")
    (467363 return _void[47])
  }
  where {
    (117859 call isAssociativeDom this[123484])
  }
  function _domain[123390](?).these[117886](arg _mt[123490]:_MT[227], arg this[123488]:_domain[123390](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[467367] "RVV" "temp"
    {
      unknown _indexOfInterest[117899] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[117900] "expr temp" "temp"
      unknown call_tmp[598643] "expr temp" "maybe param" "maybe type" "temp"
      (598646 'move' call_tmp[598643](351248 call _value _mt[232] this[123488]))
      unknown call_tmp[598650] "expr temp" "maybe param" "maybe type" "temp"
      (598653 'move' call_tmp[598650](117894 call(117890 call (partial) these _mt[232] call_tmp[598643])))
      (117909 'move' _iterator[117900](117907 call _getIterator call_tmp[598650]))
      Defer
      {
        {
          (117926 call _freeIterator _iterator[117900])
        }
      }
      { scopeless type
        (117915 'move' _indexOfInterest[117899](117912 call iteratorIndex _iterator[117900]))
      }
      ForLoop
      {
        unknown i[117919] "index var" "insert auto destroy"
        (117921 'move' i[117919] _indexOfInterest[117899])
        {
          unknown yret[467371] "YVV" "temp"
          (467374 'move' yret[467371](467373 'deref' i[117919]))
          (467376 yield yret[467371])
        }
        label _continueLabel[117904]
        _indexOfInterest[117899]
        _iterator[117900]
      }
      label _breakLabel[117905]
    }
    (467369 return ret[467367])
  }
  function _domain[123390](?).these[117942](arg _mt[123494]:_MT[227], arg this[123492]:_domain[123390](?), param arg tag[117939]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[467380] "RVV" "temp"
    {
      unknown _indexOfInterest[117999] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118000] "expr temp" "temp"
      unknown call_tmp[598657] "expr temp" "maybe param" "maybe type" "temp"
      (598660 'move' call_tmp[598657](351261 call _value _mt[232] this[123492]))
      unknown call_tmp[598664] "expr temp" "maybe param" "maybe type" "temp"
      (598667 'move' call_tmp[598664](117995 call(117990 call (partial) these _mt[232] call_tmp[598657]) tag[117939]))
      (118009 'move' _iterator[118000](118007 call _getIterator call_tmp[598664]))
      Defer
      {
        {
          (118026 call _freeIterator _iterator[118000])
        }
      }
      { scopeless type
        (118015 'move' _indexOfInterest[117999](118012 call iteratorIndex _iterator[118000]))
      }
      ForLoop
      {
        unknown i[118019] "index var" "insert auto destroy"
        (118021 'move' i[118019] _indexOfInterest[117999])
        unknown yret[467384] "YVV" "temp"
        (467387 'move' yret[467384](467386 'deref' i[118019]))
        (467389 yield yret[467384])
        label _continueLabel[118004]
        _indexOfInterest[117999]
        _iterator[118000]
      }
      label _breakLabel[118005]
    }
    (467382 return ret[467380])
  }
  where {
    unknown tmp[399858] "maybe param" "temp"
    (399869 'move' tmp[399858](117949 call == tag[117939] standalone[695]))
    unknown call_tmp[598669] "expr temp" "maybe param" "maybe type" "temp"
    (598672 'move' call_tmp[598669](399871 call _cond_invalid tmp[399858]))
    if call_tmp[598669]
    {
      (399874 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[513671] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513672] "maybe param" "temp"
    unknown call_tmp[598674] "expr temp" "maybe param" "maybe type" "temp"
    (598677 'move' call_tmp[598674](399859 call isTrue tmp[399858]))
    (513677 'move' tmp[513672](513675 call _cond_test call_tmp[598674]))
    if tmp[513672]
    {
      unknown tmp[513679] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[598681] "expr temp" "maybe param" "maybe type" "temp"
      (598684 'move' call_tmp[598681](351256 call _value _mt[232] this[123492]))
      unknown call_tmp[598686] "expr temp" "maybe param" "maybe type" "temp"
      (598689 'move' call_tmp[598686](117985 'method call resolves' call_tmp[598681] "these"(tag = tag[117939])))
      (513681 'move' tmp[513679](399862 call isTrue call_tmp[598686]))
      (513686 'move' tmp[513671](513683 '_paramFoldLogical' tmp[513672] tmp[513679]))
    }
    {
      (513691 'move' tmp[513671](513688 '_paramFoldLogical' tmp[513672] 0))
    }
    (691851 call _statementLevelSymbol tmp[513671])
  }
  function _domain[123390](?).these[118043](arg _mt[123498]:_MT[227], arg this[123496]:_domain[123390](?), param arg tag[118040]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[467393] "RVV" "temp"
    {
      unknown _indexOfInterest[118063] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118064] "expr temp" "temp"
      unknown call_tmp[598693] "expr temp" "maybe param" "maybe type" "temp"
      (598696 'move' call_tmp[598693](351270 call _value _mt[232] this[123496]))
      unknown call_tmp[598700] "expr temp" "maybe param" "maybe type" "temp"
      (598703 'move' call_tmp[598700](118059 call(118054 call (partial) these _mt[232] call_tmp[598693]) tag[118040]))
      (118073 'move' _iterator[118064](118071 call _getIterator call_tmp[598700]))
      Defer
      {
        {
          (118090 call _freeIterator _iterator[118064])
        }
      }
      { scopeless type
        (118079 'move' _indexOfInterest[118063](118076 call iteratorIndex _iterator[118064]))
      }
      ForLoop
      {
        unknown followThis[118083] "index var" "insert auto destroy"
        (118085 'move' followThis[118083] _indexOfInterest[118063])
        unknown yret[467397] "YVV" "temp"
        (467400 'move' yret[467397](467399 'deref' followThis[118083]))
        (467402 yield yret[467397])
        label _continueLabel[118068]
        _indexOfInterest[118063]
        _iterator[118064]
      }
      label _breakLabel[118069]
    }
    (467395 return ret[467393])
  }
  where {
    (118050 call == tag[118040] leader[691])
  }
  function _domain[123390](?).these[118107](arg _mt[123502]:_MT[227], arg this[123500]:_domain[123390](?), param arg tag[118104]:iterKind[697], arg followThis[118109]:_any[170](?), param arg fast[118113]:bool[10] =
  0) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[467406] "RVV" "temp"
    unknown call_tmp[598707] "expr temp" "maybe param" "maybe type" "temp"
    (598710 'move' call_tmp[598707](351279 call _value _mt[232] this[123500]))
    unknown call_tmp[598712] "expr temp" "maybe param" "maybe type" "temp"
    (598715 'move' call_tmp[598712](118133 'method call resolves' call_tmp[598707] "these"(tag = tag[118104]) followThis[118109](fast = fast[118113])))
    unknown call_tmp[598717] "expr temp" "maybe param" "maybe type" "temp"
    (598720 'move' call_tmp[598717](118231 call _cond_test call_tmp[598712]))
    if call_tmp[598717]
    {
      {
        unknown _indexOfInterest[118149] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[118150] "expr temp" "temp"
        unknown call_tmp[598724] "expr temp" "maybe param" "maybe type" "temp"
        (598727 'move' call_tmp[598724](351286 call _value _mt[232] this[123500]))
        unknown call_tmp[598731] "expr temp" "maybe param" "maybe type" "temp"
        (598734 'move' call_tmp[598731](118145 call(118136 call (partial) these _mt[232] call_tmp[598724])(tag = tag[118104]) followThis[118109](fast = fast[118113])))
        (118159 'move' _iterator[118150](118157 call _getIterator call_tmp[598731]))
        Defer
        {
          {
            (118176 call _freeIterator _iterator[118150])
          }
        }
        { scopeless type
          (118165 'move' _indexOfInterest[118149](118162 call iteratorIndex _iterator[118150]))
        }
        ForLoop
        {
          unknown i[118169] "index var" "insert auto destroy"
          (118171 'move' i[118169] _indexOfInterest[118149])
          unknown yret[467410] "YVV" "temp"
          (467413 'move' yret[467410](467412 'deref' i[118169]))
          (467415 yield yret[467410])
          label _continueLabel[118154]
          _indexOfInterest[118149]
          _iterator[118150]
        }
        label _breakLabel[118155]
      }
    }
    {
      {
        unknown _indexOfInterest[118196] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[118197] "expr temp" "temp"
        unknown call_tmp[598738] "expr temp" "maybe param" "maybe type" "temp"
        (598741 'move' call_tmp[598738](351294 call _value _mt[232] this[123500]))
        unknown call_tmp[598745] "expr temp" "maybe param" "maybe type" "temp"
        (598748 'move' call_tmp[598745](118192 call(118186 call (partial) these _mt[232] call_tmp[598738]) tag[118104] followThis[118109]))
        (118206 'move' _iterator[118197](118204 call _getIterator call_tmp[598745]))
        Defer
        {
          {
            (118223 call _freeIterator _iterator[118197])
          }
        }
        { scopeless type
          (118212 'move' _indexOfInterest[118196](118209 call iteratorIndex _iterator[118197]))
        }
        ForLoop
        {
          unknown i[118216] "index var" "insert auto destroy"
          (118218 'move' i[118216] _indexOfInterest[118196])
          unknown yret[467417] "YVV" "temp"
          (467420 'move' yret[467417](467419 'deref' i[118216]))
          (467422 yield yret[467417])
          label _continueLabel[118201]
          _indexOfInterest[118196]
          _iterator[118197]
        }
        label _breakLabel[118202]
      }
    }
    (467408 return ret[467406])
  }
  where {
    (118122 call == tag[118104] follower[693])
  }
  function _domain[123390](?).this[118245](arg _mt[123506]:_MT[227], arg this[123504]:_domain[123390](?), arg d[118242]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467426] "RVV" "temp"
    unknown call_tmp[598752] "expr temp" "maybe param" "maybe type" "temp"
    (598755 'move' call_tmp[598752](118248 call rank _mt[232] d[118242]))
    unknown call_tmp[598759] "expr temp" "maybe param" "maybe type" "temp"
    (598762 'move' call_tmp[598759](351303 call rank _mt[232] this[123504]))
    unknown call_tmp[598764] "expr temp" "maybe param" "maybe type" "temp"
    (598767 'move' call_tmp[598764](118252 call == call_tmp[598752] call_tmp[598759]))
    unknown call_tmp[598769] "expr temp" "maybe param" "maybe type" "temp"
    (598772 'move' call_tmp[598769](118286 call _cond_test call_tmp[598764]))
    if call_tmp[598769]
    {
      unknown call_tmp[598776] "expr temp" "maybe param" "maybe type" "temp"
      (598779 'move' call_tmp[598776](118260 call(118256 call (partial) getIndices _mt[232] d[118242])))
      unknown call_tmp[598781] "expr temp" "maybe param" "maybe type" "temp"
      (598784 'move' call_tmp[598781](118263 call this[123504](118261 'expand_tuple' call_tmp[598776])))
      (467431 'move' ret[467426](467430 'deref' call_tmp[598781]))
      gotoReturn _end_this[467424] _end_this[467424]
    }
    {
      (118284 call compilerError "slicing a domain with a domain of a different rank")
    }
    label _end_this[467424]
    (467428 return ret[467426])
  }
  function _domain[123390](?).this[118301](arg _mt[123510]:_MT[227], arg this[123508]:_domain[123390](?), arg ranges[118298]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467437] "RVV" "temp"
    unknown tmp[399879] "maybe param" "temp"
    unknown call_tmp[598790] "expr temp" "maybe param" "maybe type" "temp"
    (598793 'move' call_tmp[598790](351314 call _value _mt[232] this[123508]))
    (399890 'move' tmp[399879](118308 call stridable _mt[232] call_tmp[598790]))
    unknown call_tmp[598797] "expr temp" "maybe param" "maybe type" "temp"
    (598800 'move' call_tmp[598797](399892 call _cond_invalid tmp[399879]))
    if call_tmp[598797]
    {
      (399895 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown stridable[118317] "param"
    unknown tmp[513698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513699] "maybe param" "temp"
    unknown call_tmp[598802] "expr temp" "maybe param" "maybe type" "temp"
    (598805 'move' call_tmp[598802](399880 call isTrue tmp[399879]))
    (513704 'move' tmp[513699](513702 call _cond_test call_tmp[598802]))
    if tmp[513699]
    {
      (513709 'move' tmp[513698](513706 '_paramFoldLogical' tmp[513699] 1))
    }
    {
      unknown tmp[513711] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[598807] "expr temp" "maybe param" "maybe type" "temp"
      (598810 'move' call_tmp[598807](118314 call chpl__anyStridable ranges[118298]))
      (513713 'move' tmp[513711](399884 call isTrue call_tmp[598807]))
      (513718 'move' tmp[513698](513715 '_paramFoldLogical' tmp[513699] tmp[513711]))
    }
    (491327 'init var' stridable[118317] tmp[513698])
    unknown r[118336] "insert auto destroy"
    unknown call_tmp[598814] "expr temp" "maybe param" "maybe type" "temp"
    (598817 'move' call_tmp[598814](351319 call rank _mt[232] this[123508]))
    unknown call_tmp[598821] "expr temp" "maybe param" "maybe type" "temp"
    (598824 'move' call_tmp[598821](351324 call _value _mt[232] this[123508]))
    unknown call_tmp[598828] "expr temp" "maybe param" "maybe type" "temp"
    (598831 'move' call_tmp[598828](118324 call idxType _mt[232] call_tmp[598821]))
    unknown call_tmp[598833] "expr temp" "maybe param" "maybe type" "temp"
    (598836 'move' call_tmp[598833](118333 call range[66183](?) call_tmp[598828] bounded[66079] stridable[118317]))
    unknown call_tmp[598838] "expr temp" "maybe param" "maybe type" "temp"
    (598841 'move' call_tmp[598838](118334 call * call_tmp[598814] call_tmp[598833]))
    (491329 'default init var' r[118336] call_tmp[598838])
    {
      unknown i[118364] "insert auto destroy"
      (491331 'init var' i[118364] 0)
      unknown tmp[118365] "maybe param" "temp"
      unknown call_tmp[598845] "expr temp" "maybe param" "maybe type" "temp"
      (598848 'move' call_tmp[598845](351330 call rank _mt[232] this[123508]))
      (118377 'move' tmp[118365](118375 call chpl_compute_low_param_loop_bound 1 call_tmp[598845]))
      unknown tmp[118366] "maybe param" "temp"
      unknown call_tmp[598852] "expr temp" "maybe param" "maybe type" "temp"
      (598855 'move' call_tmp[598852](351343 call rank _mt[232] this[123508]))
      (118384 'move' tmp[118366](118382 call chpl_compute_high_param_loop_bound 1 call_tmp[598852]))
      unknown tmp[118367] "maybe param" "temp"
      (118387 'move' tmp[118367] 1)
      ParamForLoop
      { i[118364] tmp[118365] tmp[118366] tmp[118367]
        {
          unknown call_tmp[598857] "expr temp" "maybe param" "maybe type" "temp"
          (598860 'move' call_tmp[598857](118346 call r[118336] i[118364]))
          unknown call_tmp[598864] "expr temp" "maybe param" "maybe type" "temp"
          (598867 'move' call_tmp[598864](351336 call _value _mt[232] this[123508]))
          unknown call_tmp[598871] "expr temp" "maybe param" "maybe type" "temp"
          (598874 'move' call_tmp[598871](118353 call(118348 call (partial) dsiDim _mt[232] call_tmp[598864]) i[118364]))
          unknown call_tmp[598876] "expr temp" "maybe param" "maybe type" "temp"
          (598879 'move' call_tmp[598876](118357 call ranges[118298] i[118364]))
          unknown call_tmp[598881] "expr temp" "maybe param" "maybe type" "temp"
          (598884 'move' call_tmp[598881](118359 call call_tmp[598871] call_tmp[598876]))
          (118360 call = call_tmp[598857] call_tmp[598881])
        }
      }
      label _unused_continueLabel[118369]
      label _breakLabel[118368]
    }
    unknown call_tmp[598888] "expr temp" "maybe param" "maybe type" "temp"
    (598891 'move' call_tmp[598888](351348 call dist _mt[232] this[123508]))
    unknown call_tmp[598895] "expr temp" "maybe param" "maybe type" "temp"
    (598898 'move' call_tmp[598895](351352 call rank _mt[232] this[123508]))
    unknown call_tmp[598902] "expr temp" "maybe param" "maybe type" "temp"
    (598905 'move' call_tmp[598902](351356 call _value _mt[232] this[123508]))
    unknown call_tmp[598909] "expr temp" "maybe param" "maybe type" "temp"
    (598912 'move' call_tmp[598909](118403 call idxType _mt[232] call_tmp[598902]))
    unknown call_tmp[598914] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (598917 'move' call_tmp[598914](691426 'new' _domain[123390](?) call_tmp[598888] call_tmp[598895] call_tmp[598909] stridable[118317] r[118336]))
    (467442 'move' ret[467437](467441 'deref' call_tmp[598914]))
    (467439 return ret[467437])
  }
  where {
    (118306 call chpl__isTupleOfRanges ranges[118298])
  }
  function _domain[123390](?).this[118421](arg _mt[123514]:_MT[227], arg this[123512]:_domain[123390](?), arg args[118418]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467446] "RVV" "temp"
    unknown collapsedDim[118435] "insert auto destroy"
    unknown call_tmp[598923] "expr temp" "maybe param" "maybe type" "temp"
    (598926 'move' call_tmp[598923](351371 call rank _mt[232] this[123512]))
    unknown call_tmp[598928] "expr temp" "maybe param" "maybe type" "temp"
    (598931 'move' call_tmp[598928](118433 call * call_tmp[598923] bool[10]))
    (491333 'default init var' collapsedDim[118435] call_tmp[598928])
    unknown idx[118443] "insert auto destroy"
    unknown call_tmp[598935] "expr temp" "maybe param" "maybe type" "temp"
    (598938 'move' call_tmp[598935](351375 call rank _mt[232] this[123512]))
    unknown call_tmp[598942] "expr temp" "maybe param" "maybe type" "temp"
    (598945 'move' call_tmp[598942](351379 call idxType _mt[232] this[123512]))
    unknown call_tmp[598947] "expr temp" "maybe param" "maybe type" "temp"
    (598950 'move' call_tmp[598947](118441 call * call_tmp[598935] call_tmp[598942]))
    (491335 'default init var' idx[118443] call_tmp[598947])
    unknown call_tmp[598952] "maybe param" "maybe type" "temp"
    (598955 'move' call_tmp[598952](118450 call chpl__countRanges(118448 'expand_tuple' args[118418])))
    unknown uprank[118451] "param"
    (491337 'init var' uprank[118451] call_tmp[598952])
    unknown tmp[399900] "maybe param" "temp"
    (399911 'move' tmp[399900](118455 call stridable _mt[232] this[123512]))
    unknown call_tmp[598959] "expr temp" "maybe param" "maybe type" "temp"
    (598962 'move' call_tmp[598959](399913 call _cond_invalid tmp[399900]))
    if call_tmp[598959]
    {
      (399916 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown upstridable[118464] "param"
    unknown tmp[513725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513726] "maybe param" "temp"
    unknown call_tmp[598964] "expr temp" "maybe param" "maybe type" "temp"
    (598967 'move' call_tmp[598964](399901 call isTrue tmp[399900]))
    (513731 'move' tmp[513726](513729 call _cond_test call_tmp[598964]))
    if tmp[513726]
    {
      (513736 'move' tmp[513725](513733 '_paramFoldLogical' tmp[513726] 1))
    }
    {
      unknown tmp[513738] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[598969] "expr temp" "maybe param" "maybe type" "temp"
      (598972 'move' call_tmp[598969](118461 call chpl__anyRankChangeStridable args[118418]))
      (513740 'move' tmp[513738](399905 call isTrue call_tmp[598969]))
      (513745 'move' tmp[513725](513742 '_paramFoldLogical' tmp[513726] tmp[513738]))
    }
    (491339 'init var' upstridable[118464] tmp[513725])
    unknown upranges[118480] "insert auto destroy"
    unknown call_tmp[598976] "expr temp" "maybe param" "maybe type" "temp"
    (598979 'move' call_tmp[598976](351388 call _value _mt[232] this[123512]))
    unknown call_tmp[598983] "expr temp" "maybe param" "maybe type" "temp"
    (598986 'move' call_tmp[598983](118470 call idxType _mt[232] call_tmp[598976]))
    unknown call_tmp[598988] "expr temp" "maybe param" "maybe type" "temp"
    (598991 'move' call_tmp[598988](118477 call range[66183](?)(idxType = call_tmp[598983])(stridable = upstridable[118464])))
    unknown call_tmp[598993] "expr temp" "maybe param" "maybe type" "temp"
    (598996 'move' call_tmp[598993](118478 call * uprank[118451] call_tmp[598988]))
    (491341 'default init var' upranges[118480] call_tmp[598993])
    unknown updim[118484] "insert auto destroy"
    (491343 'init var' updim[118484] 1)
    {
      unknown i[118574] "insert auto destroy"
      (491345 'init var' i[118574] 0)
      unknown tmp[118575] "maybe param" "temp"
      unknown call_tmp[599000] "expr temp" "maybe param" "maybe type" "temp"
      (599003 'move' call_tmp[599000](351393 call rank _mt[232] this[123512]))
      (118587 'move' tmp[118575](118585 call chpl_compute_low_param_loop_bound 1 call_tmp[599000]))
      unknown tmp[118576] "maybe param" "temp"
      unknown call_tmp[599007] "expr temp" "maybe param" "maybe type" "temp"
      (599010 'move' call_tmp[599007](351421 call rank _mt[232] this[123512]))
      (118594 'move' tmp[118576](118592 call chpl_compute_high_param_loop_bound 1 call_tmp[599007]))
      unknown tmp[118577] "maybe param" "temp"
      (118597 'move' tmp[118577] 1)
      ParamForLoop
      { i[118574] tmp[118575] tmp[118576] tmp[118577]
        {
          unknown call_tmp[599012] "expr temp" "maybe param" "maybe type" "temp"
          (599015 'move' call_tmp[599012](118495 call args[118418] i[118574]))
          unknown call_tmp[599017] "expr temp" "maybe param" "maybe type" "temp"
          (599020 'move' call_tmp[599017](118497 call isRange call_tmp[599012]))
          unknown call_tmp[599022] "expr temp" "maybe param" "maybe type" "temp"
          (599025 'move' call_tmp[599022](118569 call _cond_test call_tmp[599017]))
          if call_tmp[599022]
          {
            unknown call_tmp[599027] "expr temp" "maybe param" "maybe type" "temp"
            (599030 'move' call_tmp[599027](118501 call collapsedDim[118435] i[118574]))
            (118503 call = call_tmp[599027] 0)
            unknown call_tmp[599032] "expr temp" "maybe param" "maybe type" "temp"
            (599035 'move' call_tmp[599032](118510 call idx[118443] i[118574]))
            unknown call_tmp[599039] "expr temp" "maybe param" "maybe type" "temp"
            (599042 'move' call_tmp[599039](118514 call(351403 call (partial) dim _mt[232] this[123512]) i[118574]))
            unknown call_tmp[599046] "expr temp" "maybe param" "maybe type" "temp"
            (599049 'move' call_tmp[599046](118515 call alignedLow _mt[232] call_tmp[599039]))
            (118518 call = call_tmp[599032] call_tmp[599046])
            unknown call_tmp[599051] "expr temp" "maybe param" "maybe type" "temp"
            (599054 'move' call_tmp[599051](118524 call upranges[118480] updim[118484]))
            unknown call_tmp[599058] "expr temp" "maybe param" "maybe type" "temp"
            (599061 'move' call_tmp[599058](118526 call _value _mt[232] this[123512]))
            unknown call_tmp[599065] "expr temp" "maybe param" "maybe type" "temp"
            (599068 'move' call_tmp[599065](118534 call(118529 call (partial) dsiDim _mt[232] call_tmp[599058]) i[118574]))
            unknown call_tmp[599070] "expr temp" "maybe param" "maybe type" "temp"
            (599073 'move' call_tmp[599070](118538 call args[118418] i[118574]))
            unknown call_tmp[599075] "expr temp" "maybe param" "maybe type" "temp"
            (599078 'move' call_tmp[599075](118540 call call_tmp[599065] call_tmp[599070]))
            (118541 call = call_tmp[599051] call_tmp[599075])
            (118546 call += updim[118484] 1)
          }
          {
            unknown call_tmp[599080] "expr temp" "maybe param" "maybe type" "temp"
            (599083 'move' call_tmp[599080](118552 call collapsedDim[118435] i[118574]))
            (118554 call = call_tmp[599080] 1)
            unknown call_tmp[599085] "expr temp" "maybe param" "maybe type" "temp"
            (599088 'move' call_tmp[599085](118561 call idx[118443] i[118574]))
            unknown call_tmp[599090] "expr temp" "maybe param" "maybe type" "temp"
            (599093 'move' call_tmp[599090](118565 call args[118418] i[118574]))
            (118566 call = call_tmp[599085] call_tmp[599090])
          }
        }
      }
      label _unused_continueLabel[118579]
      label _breakLabel[118578]
    }
    { scopeless type
      unknown call_type_tmp[443445] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[599095] "expr temp" "maybe param" "maybe type" "temp"
      (599098 'move' call_tmp[599095](118611 call upranges[118480] 1))
      (443449 'move' call_type_tmp[443445](118612 'typeof' call_tmp[599095]))
    }
    const emptyrange[118613] "const" "insert auto destroy"
    (491347 'default init var' emptyrange[118613] call_type_tmp[443445])
    unknown call_tmp[599102] "expr temp" "maybe param" "maybe type" "temp"
    (599105 'move' call_tmp[599102](118619 call(351426 call (partial) contains _mt[232] this[123512]) idx[118443]))
    unknown call_tmp[599107] "expr temp" "maybe param" "maybe type" "temp"
    (599110 'move' call_tmp[599107](118620 call ! call_tmp[599102]))
    unknown call_tmp[599112] "expr temp" "maybe param" "maybe type" "temp"
    (599115 'move' call_tmp[599112](118669 call _cond_test call_tmp[599107]))
    if call_tmp[599112]
    {
      {
        unknown d[118634] "insert auto destroy"
        (491349 'init var' d[118634] 0)
        unknown tmp[118635] "maybe param" "temp"
        (118647 'move' tmp[118635](118645 call chpl_compute_low_param_loop_bound 1 uprank[118451]))
        unknown tmp[118636] "maybe param" "temp"
        (118654 'move' tmp[118636](118652 call chpl_compute_high_param_loop_bound 1 uprank[118451]))
        unknown tmp[118637] "maybe param" "temp"
        (118657 'move' tmp[118637] 1)
        ParamForLoop
        { d[118634] tmp[118635] tmp[118636] tmp[118637]
          unknown call_tmp[599117] "expr temp" "maybe param" "maybe type" "temp"
          (599120 'move' call_tmp[599117](118629 call upranges[118480] d[118634]))
          (118631 call = call_tmp[599117] emptyrange[118613])
        }
        label _unused_continueLabel[118639]
        label _breakLabel[118638]
      }
    }
    unknown call_tmp[599124] "expr temp" "maybe param" "maybe type" "temp"
    (599127 'move' call_tmp[599124](351440 call dist _mt[232] this[123512]))
    unknown call_tmp[599131] "expr temp" "maybe param" "maybe type" "temp"
    (599134 'move' call_tmp[599131](118675 call _pid _mt[232] call_tmp[599124]))
    unknown call_tmp[599138] "expr temp" "maybe param" "maybe type" "temp"
    (599141 'move' call_tmp[599138](351444 call dist _mt[232] this[123512]))
    unknown call_tmp[599145] "expr temp" "maybe param" "maybe type" "temp"
    (599148 'move' call_tmp[599145](118681 call _instance _mt[232] call_tmp[599138]))
    unknown call_tmp[599150] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (599153 'move' call_tmp[599150](691427 'new' anymanaged ArrayViewRankChangeDist[351436](?)(downDistPid = call_tmp[599131])(downDistInst = call_tmp[599145])(collapsedDim = collapsedDim[118435])(idx = idx[118443])(_chpl_manager = unmanaged[209](?))))
    const rcdist[118692] "const" "insert auto destroy"
    (491351 'init var' rcdist[118692] call_tmp[599150])
    unknown call_tmp[599155] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (599158 'move' call_tmp[599155](691428 'new' _distribution[116702](?) rcdist[118692]))
    const rcdistRec[118700] "const" "insert auto destroy"
    (491353 'init var' rcdistRec[118700] call_tmp[599155])
    unknown call_tmp[599160] "expr temp" "maybe param" "maybe type" "temp"
    (599163 'move' call_tmp[599160](118710 call upranges[118480] 1))
    unknown call_tmp[599167] "expr temp" "maybe param" "maybe type" "temp"
    (599170 'move' call_tmp[599167](118711 call idxType _mt[232] call_tmp[599160]))
    unknown call_tmp[599172] "expr temp" "maybe param" "maybe type" "temp"
    (599175 'move' call_tmp[599172](118717 call upranges[118480] 1))
    unknown call_tmp[599179] "expr temp" "maybe param" "maybe type" "temp"
    (599182 'move' call_tmp[599179](118718 call stridable _mt[232] call_tmp[599172]))
    unknown call_tmp[599184] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (599187 'move' call_tmp[599184](691429 'new' _domain[123390](?) rcdistRec[118700] uprank[118451] call_tmp[599167] call_tmp[599179] upranges[118480]))
    (467451 'move' ret[467446](467450 'deref' call_tmp[599184]))
    (467448 return ret[467446])
  }
  where {
    unknown call_tmp[599191] "expr temp" "maybe param" "maybe type" "temp"
    (599194 'move' call_tmp[599191](351367 call _value _mt[232] this[123512]))
    unknown call_tmp[599198] "expr temp" "maybe param" "maybe type" "temp"
    (599201 'move' call_tmp[599198](118427 call idxType _mt[232] call_tmp[599191]))
    (118430 call _validRankChangeArgs args[118418] call_tmp[599198])
  }
  function _domain[123390](?).this[118737](arg _mt[123518]:_MT[227], arg this[123516]:_domain[123390](?), arg i[118733]:integral[188](?) ...) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (118757 call compilerError "domain slice requires a range in at least one dimension")
    (467453 return _void[47])
  }
  function _domain[123390](?).this[118769](arg _mt[123522]:_MT[227], arg this[123520]:_domain[123390](?), arg args[118766]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[599207] "expr temp" "maybe param" "maybe type" "temp"
    (599210 'move' call_tmp[599207](351464 call rank _mt[232] this[123520]))
    unknown call_tmp[599212] "expr temp" "maybe param" "maybe type" "temp"
    (599215 'move' call_tmp[599212](118773 call == numArgs[118764] call_tmp[599207]))
    unknown call_tmp[599217] "expr temp" "maybe param" "maybe type" "temp"
    (599220 'move' call_tmp[599217](118816 call _cond_test call_tmp[599212]))
    if call_tmp[599217]
    {
      (118793 call compilerError "invalid argument types for domain slicing")
    }
    {
      (118814 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
    (467455 return _void[47])
  }
  function _domain[123390](?).dims[118826](arg _mt[123526]:_MT[227], arg this[123524]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467459] "RVV" "temp"
    unknown call_tmp[599224] "expr temp" "maybe param" "maybe type" "temp"
    (599227 'move' call_tmp[599224](351468 call _value _mt[232] this[123524]))
    unknown call_tmp[599231] "expr temp" "maybe param" "maybe type" "temp"
    (599234 'move' call_tmp[599231](118833 call(118829 call (partial) dsiDims _mt[232] call_tmp[599224])))
    (467464 'move' ret[467459](467463 'deref' call_tmp[599231]))
    (467461 return ret[467459])
  }
  function _domain[123390](?).dim[118845](arg _mt[123530]:_MT[227], arg this[123528]:_domain[123390](?), arg d[118842]:int(64)[13]) : _unknown[43] "method" "primary method"
  {
    unknown ret[467468] "RVV" "temp"
    unknown call_tmp[599238] "expr temp" "maybe param" "maybe type" "temp"
    (599241 'move' call_tmp[599238](351472 call _value _mt[232] this[123528]))
    unknown call_tmp[599245] "expr temp" "maybe param" "maybe type" "temp"
    (599248 'move' call_tmp[599245](118853 call(118848 call (partial) dsiDim _mt[232] call_tmp[599238]) d[118842]))
    (467473 'move' ret[467468](467472 'deref' call_tmp[599245]))
    (467470 return ret[467468])
  }
  function _domain[123390](?).dim[118865](arg _mt[123534]:_MT[227], arg this[123532]:_domain[123390](?), param arg d[118862]:int(64)[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467477] "RVV" "temp"
    unknown call_tmp[599252] "expr temp" "maybe param" "maybe type" "temp"
    (599255 'move' call_tmp[599252](351477 call _value _mt[232] this[123532]))
    unknown call_tmp[599259] "expr temp" "maybe param" "maybe type" "temp"
    (599262 'move' call_tmp[599259](118873 call(118868 call (partial) dsiDim _mt[232] call_tmp[599252]) d[118862]))
    (467482 'move' ret[467477](467481 'deref' call_tmp[599259]))
    (467479 return ret[467477])
  }
  function _domain[123390](?).dimIter[118883](arg _mt[123538]:_MT[227], arg this[123536]:_domain[123390](?), param arg d[118881]:_any[170](?), arg ind[118885]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[467486] "RVV" "temp"
    {
      unknown _indexOfInterest[118901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118902] "expr temp" "temp"
      unknown call_tmp[599266] "expr temp" "maybe param" "maybe type" "temp"
      (599269 'move' call_tmp[599266](351482 call _value _mt[232] this[123536]))
      unknown call_tmp[599273] "expr temp" "maybe param" "maybe type" "temp"
      (599276 'move' call_tmp[599273](118897 call(118891 call (partial) dimIter _mt[232] call_tmp[599266]) d[118881] ind[118885]))
      (118911 'move' _iterator[118902](118909 call _getIterator call_tmp[599273]))
      Defer
      {
        {
          (118928 call _freeIterator _iterator[118902])
        }
      }
      { scopeless type
        (118917 'move' _indexOfInterest[118901](118914 call iteratorIndex _iterator[118902]))
      }
      ForLoop
      {
        unknown i[118921] "index var" "insert auto destroy"
        (118923 'move' i[118921] _indexOfInterest[118901])
        unknown yret[467490] "YVV" "temp"
        (467493 'move' yret[467490](467492 'deref' i[118921]))
        (467495 yield yret[467490])
        label _continueLabel[118906]
        _indexOfInterest[118901]
        _iterator[118902]
      }
      label _breakLabel[118907]
    }
    (467488 return ret[467486])
  }
  function _domain[123390](?).shape[118940](arg _mt[123542]:_MT[227], arg this[123540]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467499] "RVV" "temp"
    unknown s[118962] "insert auto destroy"
    unknown call_tmp[599280] "expr temp" "maybe param" "maybe type" "temp"
    (599283 'move' call_tmp[599280](351491 call rank _mt[232] this[123540]))
    unknown call_tmp[599287] "expr temp" "maybe param" "maybe type" "temp"
    (599290 'move' call_tmp[599287](118956 call(351495 call (partial) dim _mt[232] this[123540]) 1))
    unknown call_tmp[599294] "expr temp" "maybe param" "maybe type" "temp"
    (599297 'move' call_tmp[599294](118957 call intIdxType _mt[232] call_tmp[599287]))
    unknown call_tmp[599299] "expr temp" "maybe param" "maybe type" "temp"
    (599302 'move' call_tmp[599299](118960 call * call_tmp[599280] call_tmp[599294]))
    (491355 'default init var' s[118962] call_tmp[599299])
    {
      unknown _indexOfInterest[118994] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118995] "expr temp" "temp"
      unknown call_tmp[599306] "expr temp" "maybe param" "maybe type" "temp"
      (599309 'move' call_tmp[599306](119015 call size _mt[232] s[118962]))
      unknown call_tmp[599311] "expr temp" "maybe param" "maybe type" "temp"
      (599314 'move' call_tmp[599311](119018 call chpl_direct_range_iter 1 call_tmp[599306] 1))
      unknown call_tmp[599316] "expr temp" "maybe param" "maybe type" "temp"
      (599319 'move' call_tmp[599316](119010 call _getIterator call_tmp[599311]))
      unknown call_tmp[599323] "expr temp" "maybe param" "maybe type" "temp"
      (599326 'move' call_tmp[599323](119021 call(351503 call (partial) dims _mt[232] this[123540])))
      unknown call_tmp[599328] "expr temp" "maybe param" "maybe type" "temp"
      (599331 'move' call_tmp[599328](119022 call _getIterator call_tmp[599323]))
      (119025 'move' _iterator[118995](118982 call _build_tuple call_tmp[599316] call_tmp[599328]))
      Defer
      {
        {
          (119055 call _freeIterator _iterator[118995])
        }
      }
      { scopeless type
        (119030 'move' _indexOfInterest[118994](119027 call iteratorIndex _iterator[118995]))
      }
      ForLoop
      {
        (119035 call _check_tuple_var_decl _indexOfInterest[118994] 2)
        unknown i[119041] "index var" "insert auto destroy"
        (119043 'move' i[119041](119039 call _indexOfInterest[118994] 1))
        unknown r[119048] "index var" "insert auto destroy"
        (119050 'move' r[119048](119046 call _indexOfInterest[118994] 2))
        unknown call_tmp[599333] "expr temp" "maybe param" "maybe type" "temp"
        (599336 'move' call_tmp[599333](118986 call s[118962] i[119041]))
        unknown call_tmp[599340] "expr temp" "maybe param" "maybe type" "temp"
        (599343 'move' call_tmp[599340](118988 call size _mt[232] r[119048]))
        (118991 call = call_tmp[599333] call_tmp[599340])
        label _continueLabel[118999]
        _indexOfInterest[118994]
        _iterator[118995]
      }
      label _breakLabel[119000]
    }
    (467504 'move' ret[467499](467503 'deref' s[118962]))
    (467501 return ret[467499])
  }
  where {
    unknown tmp[399921] "maybe param" "temp"
    (399932 'move' tmp[399921](118945 call isRectangularDom this[123540]))
    unknown call_tmp[599345] "expr temp" "maybe param" "maybe type" "temp"
    (599348 'move' call_tmp[599345](399934 call _cond_invalid tmp[399921]))
    if call_tmp[599345]
    {
      (399937 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513753] "maybe param" "temp"
    unknown call_tmp[599350] "expr temp" "maybe param" "maybe type" "temp"
    (599353 'move' call_tmp[599350](399922 call isTrue tmp[399921]))
    (513758 'move' tmp[513753](513756 call _cond_test call_tmp[599350]))
    if tmp[513753]
    {
      (513763 'move' tmp[513752](513760 '_paramFoldLogical' tmp[513753] 1))
    }
    {
      unknown tmp[513765] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[599355] "expr temp" "maybe param" "maybe type" "temp"
      (599358 'move' call_tmp[599355](118949 call isSparseDom this[123540]))
      (513767 'move' tmp[513765](399926 call isTrue call_tmp[599355]))
      (513772 'move' tmp[513752](513769 '_paramFoldLogical' tmp[513753] tmp[513765]))
    }
    (691853 call _statementLevelSymbol tmp[513752])
  }
  function _domain[123390](?).shape[119070](arg _mt[123546]:_MT[227], arg this[123544]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[467508] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443454] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[599362] "expr temp" "maybe param" "maybe type" "temp"
      (599365 'move' call_tmp[599362](351510 call size _mt[232] this[123544]))
      (443458 'move' call_type_tmp[443454](119083 'typeof' call_tmp[599362]))
    }
    unknown s[119086] "insert auto destroy"
    unknown call_tmp[599367] "expr temp" "maybe param" "maybe type" "temp"
    (599370 'move' call_tmp[599367](119084 call _build_tuple call_type_tmp[443454]))
    (491357 'default init var' s[119086] call_tmp[599367])
    unknown call_tmp[599372] "expr temp" "maybe param" "maybe type" "temp"
    (599375 'move' call_tmp[599372](119093 call s[119086] 1))
    unknown call_tmp[599379] "expr temp" "maybe param" "maybe type" "temp"
    (599382 'move' call_tmp[599379](351515 call size _mt[232] this[123544]))
    (119095 call = call_tmp[599372] call_tmp[599379])
    (467513 'move' ret[467508](467512 'deref' s[119086]))
    (467510 return ret[467508])
  }
  where {
    unknown tmp[399942] "maybe param" "temp"
    (399953 'move' tmp[399942](119075 call isAssociativeDom this[123544]))
    unknown call_tmp[599384] "expr temp" "maybe param" "maybe type" "temp"
    (599387 'move' call_tmp[599384](399955 call _cond_invalid tmp[399942]))
    if call_tmp[599384]
    {
      (399958 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513780] "maybe param" "temp"
    unknown call_tmp[599389] "expr temp" "maybe param" "maybe type" "temp"
    (599392 'move' call_tmp[599389](399943 call isTrue tmp[399942]))
    (513785 'move' tmp[513780](513783 call _cond_test call_tmp[599389]))
    if tmp[513780]
    {
      (513790 'move' tmp[513779](513787 '_paramFoldLogical' tmp[513780] 1))
    }
    {
      unknown tmp[513792] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[599394] "expr temp" "maybe param" "maybe type" "temp"
      (599397 'move' call_tmp[599394](119079 call isOpaqueDom this[123544]))
      (513794 'move' tmp[513792](399947 call isTrue call_tmp[599394]))
      (513799 'move' tmp[513779](513796 '_paramFoldLogical' tmp[513780] tmp[513792]))
    }
    (691855 call _statementLevelSymbol tmp[513779])
  }
  function _domain[123390](?).shape[119106](arg _mt[123550]:_MT[227], arg this[123548]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (119126 call compilerError ".shape not supported on this domain")
    (467515 return _void[47])
  }
  function _domain[123390](?).buildArray[119135](arg _mt[123554]:_MT[227], arg this[123552]:_domain[123390](?), arg eltType[119133]:_any[170](?)) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[467521] "RVV" "temp"
    unknown call_tmp[599399] "expr temp" "maybe param" "maybe type" "temp"
    (599402 'move' call_tmp[599399](119139 call == eltType[119133] void[4]))
    unknown call_tmp[599404] "expr temp" "maybe param" "maybe type" "temp"
    (599407 'move' call_tmp[599404](119162 call _cond_test call_tmp[599399]))
    if call_tmp[599404]
    {
      (119159 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[599409] "expr temp" "maybe param" "maybe type" "temp"
    (599412 'move' call_tmp[599409](119170 call isGenericType eltType[119133]))
    unknown call_tmp[599414] "expr temp" "maybe param" "maybe type" "temp"
    (599417 'move' call_tmp[599414](119256 call _cond_test call_tmp[599409]))
    if call_tmp[599414]
    {
      unknown call_tmp[599419] "expr temp" "maybe param" "maybe type" "temp"
      (599422 'move' call_tmp[599419](119190 call _cast string[24] eltType[119133]))
      unknown call_tmp[599424] "expr temp" "maybe param" "maybe type" "temp"
      (599427 'move' call_tmp[599424](119192 call + "creating an array with element type " call_tmp[599419]))
      (119195 call compilerWarning call_tmp[599424])
      unknown tmp[399963] "maybe param" "temp"
      (399974 'move' tmp[399963](119201 call isClassType eltType[119133]))
      unknown call_tmp[599429] "expr temp" "maybe param" "maybe type" "temp"
      (599432 'move' call_tmp[599429](399976 call _cond_invalid tmp[399963]))
      if call_tmp[599429]
      {
        (399979 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[513806] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[513807] "maybe param" "temp"
      unknown call_tmp[599434] "expr temp" "maybe param" "maybe type" "temp"
      (599437 'move' call_tmp[599434](399964 call isTrue tmp[399963]))
      (513812 'move' tmp[513807](513810 call _cond_test call_tmp[599434]))
      if tmp[513807]
      {
        unknown tmp[513814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[599439] "expr temp" "maybe param" "maybe type" "temp"
        (599442 'move' call_tmp[599439](119204 'to borrowed class from unknown' eltType[119133]))
        unknown call_tmp[599444] "expr temp" "maybe param" "maybe type" "temp"
        (599447 'move' call_tmp[599444](119206 call isGenericType call_tmp[599439]))
        unknown call_tmp[599449] "expr temp" "maybe param" "maybe type" "temp"
        (599452 'move' call_tmp[599449](119207 call ! call_tmp[599444]))
        (513816 'move' tmp[513814](399967 call isTrue call_tmp[599449]))
        (513821 'move' tmp[513806](513818 '_paramFoldLogical' tmp[513807] tmp[513814]))
      }
      {
        (513826 'move' tmp[513806](513823 '_paramFoldLogical' tmp[513807] 0))
      }
      unknown call_tmp[599454] "expr temp" "maybe param" "maybe type" "temp"
      (599457 'move' call_tmp[599454](119232 call _cond_test tmp[513806]))
      if call_tmp[599454]
      {
        (119229 call compilerWarning "which now means class type with generic management")
      }
      (119254 call compilerError "array element type cannot currently be generic")
    }
    unknown call_tmp[599461] "expr temp" "maybe param" "maybe type" "temp"
    (599464 'move' call_tmp[599461](351525 call _value _mt[232] this[123552]))
    unknown call_tmp[599468] "maybe param" "maybe type" "temp"
    (599471 'move' call_tmp[599468](119268 call(119263 call (partial) dsiBuildArray _mt[232] call_tmp[599461]) eltType[119133]))
    unknown x[119269] "insert auto destroy"
    (491359 'init var' x[119269] call_tmp[599468])
    function help[119274]() : _unknown[43] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[599475] "expr temp" "maybe param" "maybe type" "temp"
      (599478 'move' call_tmp[599475](351530 call _value _mt[232] this[123552]))
      (119284 call(119279 call (partial) add_arr _mt[232] call_tmp[599475]) x[119269])
      (467517 return _void[47])
    }
    (119291 call help)
    unknown call_tmp[599484] "expr temp" "maybe param" "maybe type" "temp"
    (599487 'move' call_tmp[599484](119297 call eltType _mt[232] x[119269]))
    (119300 call chpl_incRefCountsForDomainsInArrayEltTypes x[119269] call_tmp[599484])
    unknown call_tmp[599489] "expr temp" "maybe param" "maybe type" "temp"
    (599492 'move' call_tmp[599489](119305 call _newArray x[119269]))
    (467526 'move' ret[467521](467525 'deref' call_tmp[599489]))
    (467523 return ret[467521])
  }
  function _domain[123390](?).buildArrayWith[119314](arg _mt[123558]:_MT[227], arg this[123556]:_domain[123390](?), arg eltType[119312]:_any[170](?), arg data[119320] :
  (119319 call _ddata[11791](?) eltType[119312]), arg allocSize[119324]:int(64)[13]) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[467532] "RVV" "temp"
    unknown call_tmp[599494] "expr temp" "maybe param" "maybe type" "temp"
    (599497 'move' call_tmp[599494](119329 call == eltType[119312] void[4]))
    unknown call_tmp[599499] "expr temp" "maybe param" "maybe type" "temp"
    (599502 'move' call_tmp[599499](119337 call _cond_test call_tmp[599494]))
    if call_tmp[599499]
    {
      (119334 call compilerError "array element type cannot be void")
    }
    unknown call_tmp[599506] "expr temp" "maybe param" "maybe type" "temp"
    (599509 'move' call_tmp[599506](351541 call _value _mt[232] this[123556]))
    unknown call_tmp[599513] "maybe param" "maybe type" "temp"
    (599516 'move' call_tmp[599513](119352 call(119345 call (partial) dsiBuildArrayWith _mt[232] call_tmp[599506]) eltType[119312] data[119320] allocSize[119324]))
    unknown x[119353] "insert auto destroy"
    (491361 'init var' x[119353] call_tmp[599513])
    function help[119358]() : _unknown[43] "dont disable remote value forwarding" "no return value for void"
    {
      unknown call_tmp[599520] "expr temp" "maybe param" "maybe type" "temp"
      (599523 'move' call_tmp[599520](351548 call _value _mt[232] this[123556]))
      (119366 call(119361 call (partial) add_arr _mt[232] call_tmp[599520]) x[119353])
      (467528 return _void[47])
    }
    (119373 call help)
    unknown call_tmp[599529] "expr temp" "maybe param" "maybe type" "temp"
    (599532 'move' call_tmp[599529](119379 call eltType _mt[232] x[119353]))
    (119382 call chpl_incRefCountsForDomainsInArrayEltTypes x[119353] call_tmp[599529])
    unknown call_tmp[599534] "expr temp" "maybe param" "maybe type" "temp"
    (599537 'move' call_tmp[599534](119387 call _newArray x[119353]))
    (467537 'move' ret[467532](467536 'deref' call_tmp[599534]))
    (467534 return ret[467532])
  }
  function _domain[123390](?).clear[119394](arg _mt[123562]:_MT[227], arg this[123560]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[119402] "insert auto destroy"
    unknown call_tmp[599539] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (599542 'move' call_tmp[599539](119401 'typeof' this[123560]))
    (491363 'default init var' emptyDom[119402] call_tmp[599539])
    (119408 call = this[123560] emptyDom[119402])
    (467539 return _void[47])
  }
  where {
    (119399 call isRectangularDom this[123560])
  }
  function _domain[123390](?).clear[119416](arg _mt[123566]:_MT[227], arg this[123564]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[599546] "expr temp" "maybe param" "maybe type" "temp"
    (599549 'move' call_tmp[599546](351560 call _value _mt[232] this[123564]))
    (119425 call(119421 call (partial) dsiClear _mt[232] call_tmp[599546]))
    (467541 return _void[47])
  }
  function _domain[123390](?).create[119432](arg _mt[123570]:_MT[227], arg this[123568]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467545] "RVV" "temp"
    unknown call_tmp[599555] "expr temp" "maybe param" "maybe type" "temp"
    (599558 'move' call_tmp[599555](351564 call _value _mt[232] this[123568]))
    unknown call_tmp[599562] "expr temp" "maybe param" "maybe type" "temp"
    (599565 'move' call_tmp[599562](119435 call idxType _mt[232] call_tmp[599555]))
    unknown call_tmp[599567] "expr temp" "maybe param" "maybe type" "temp"
    (599570 'move' call_tmp[599567](119439 call != call_tmp[599562] _OpaqueIndex[140304]))
    unknown call_tmp[599572] "expr temp" "maybe param" "maybe type" "temp"
    (599575 'move' call_tmp[599572](119461 call _cond_test call_tmp[599567]))
    if call_tmp[599572]
    {
      (119459 call compilerError "domain.create() only applies to opaque domains")
    }
    unknown call_tmp[599579] "expr temp" "maybe param" "maybe type" "temp"
    (599582 'move' call_tmp[599579](351569 call _value _mt[232] this[123568]))
    unknown call_tmp[599586] "expr temp" "maybe param" "maybe type" "temp"
    (599589 'move' call_tmp[599586](119474 call(119470 call (partial) dsiCreate _mt[232] call_tmp[599579])))
    (467550 'move' ret[467545](467549 'deref' call_tmp[599586]))
    (467547 return ret[467545])
  }
  function _domain[123390](?).add[119483](arg _mt[123574]:_MT[227], arg this[123572]:_domain[123390](?), arg i[119481]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467554] "RVV" "temp"
    unknown call_tmp[599593] "expr temp" "maybe param" "maybe type" "temp"
    (599596 'move' call_tmp[599593](351573 call _value _mt[232] this[123572]))
    unknown call_tmp[599600] "expr temp" "maybe param" "maybe type" "temp"
    (599603 'move' call_tmp[599600](119493 call(119488 call (partial) dsiAdd _mt[232] call_tmp[599593]) i[119481]))
    (467559 'move' ret[467554](467558 'deref' call_tmp[599600]))
    (467556 return ret[467554])
  }
  function _domain[123390](?).bulkAdd[119511](arg _mt[123578]:_MT[227], arg this[123576]:_domain[123390](?), arg inds[119508]:_array[133150](?), arg dataSorted[119514] :
  0 =
  0, arg isUnique[119518] :
  0 =
  0, arg preserveInds[119522] :
  1 =
  1, arg addOn[119530] :
  (692327 call _cast borrowed locale?[389810] nil[38]) =
  (119528 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467563] "RVV" "temp"
    unknown call_tmp[599607] "expr temp" "maybe param" "maybe type" "temp"
    (599610 'move' call_tmp[599607](119547 call size _mt[232] inds[119508]))
    unknown call_tmp[599612] "expr temp" "maybe param" "maybe type" "temp"
    (599615 'move' call_tmp[599612](119551 call == call_tmp[599607] 0))
    unknown call_tmp[599617] "expr temp" "maybe param" "maybe type" "temp"
    (599620 'move' call_tmp[599617](119556 call _cond_test call_tmp[599612]))
    if call_tmp[599617]
    {
      (467568 'move' ret[467563](467567 'deref' 0))
      gotoReturn _end_bulkAdd[467561] _end_bulkAdd[467561]
    }
    unknown call_tmp[599624] "expr temp" "maybe param" "maybe type" "temp"
    (599627 'move' call_tmp[599624](351588 call _value _mt[232] this[123576]))
    unknown call_tmp[599631] "expr temp" "maybe param" "maybe type" "temp"
    (599634 'move' call_tmp[599631](119574 call(119565 call (partial) dsiBulkAdd _mt[232] call_tmp[599624]) inds[119508] dataSorted[119514] isUnique[119518] preserveInds[119522] addOn[119530]))
    (467573 'move' ret[467563](467572 'deref' call_tmp[599631]))
    label _end_bulkAdd[467561]
    (467565 return ret[467563])
  }
  where {
    unknown tmp[399984] "maybe param" "temp"
    (399995 'move' tmp[399984](119536 call isSparseDom this[123576]))
    unknown call_tmp[599636] "expr temp" "maybe param" "maybe type" "temp"
    (599639 'move' call_tmp[599636](399997 call _cond_invalid tmp[399984]))
    if call_tmp[599636]
    {
      (400000 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[513833] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513834] "maybe param" "temp"
    unknown call_tmp[599641] "expr temp" "maybe param" "maybe type" "temp"
    (599644 'move' call_tmp[599641](399985 call isTrue tmp[399984]))
    (513839 'move' tmp[513834](513837 call _cond_test call_tmp[599641]))
    if tmp[513834]
    {
      unknown tmp[513841] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[599648] "expr temp" "maybe param" "maybe type" "temp"
      (599651 'move' call_tmp[599648](351583 call _value _mt[232] this[123576]))
      unknown call_tmp[599655] "expr temp" "maybe param" "maybe type" "temp"
      (599658 'move' call_tmp[599655](119538 call rank _mt[232] call_tmp[599648]))
      unknown call_tmp[599660] "expr temp" "maybe param" "maybe type" "temp"
      (599663 'move' call_tmp[599660](119542 call == call_tmp[599655] 1))
      (513843 'move' tmp[513841](399988 call isTrue call_tmp[599660]))
      (513848 'move' tmp[513833](513845 '_paramFoldLogical' tmp[513834] tmp[513841]))
    }
    {
      (513853 'move' tmp[513833](513850 '_paramFoldLogical' tmp[513834] 0))
    }
    unknown call_tmp[599667] "expr temp" "maybe param" "maybe type" "temp"
    (599670 'move' call_tmp[599667](351578 call _value _mt[232] this[123576]))
    unknown call_tmp[599674] "expr temp" "maybe param" "maybe type" "temp"
    (599677 'move' call_tmp[599674](119502 call idxType _mt[232] call_tmp[599667]))
    unknown call_tmp[599681] "expr temp" "maybe param" "maybe type" "temp"
    (599684 'move' call_tmp[599681](436324 call eltType _mt[232] inds[119508]))
    unknown call_tmp[599686] "expr temp" "maybe param" "maybe type" "temp"
    (599689 'move' call_tmp[599686](436328 call == call_tmp[599674] call_tmp[599681]))
    (436322 call & tmp[513833] call_tmp[599686])
  }
  function _domain[123390](?).makeIndexBuffer[119586](arg _mt[123582]:_MT[227], arg this[123580]:_domain[123390](?), arg size[119583]:int(64)[13]) : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[467577] "RVV" "temp"
    unknown call_tmp[599693] "expr temp" "maybe param" "maybe type" "temp"
    (599696 'move' call_tmp[599693](351597 call _value _mt[232] this[123580]))
    unknown call_tmp[599700] "expr temp" "maybe param" "maybe type" "temp"
    (599703 'move' call_tmp[599700](119596 call(119591 call (partial) dsiMakeIndexBuffer _mt[232] call_tmp[599693]) size[119583]))
    (467582 'move' ret[467577](467581 'deref' call_tmp[599700]))
    (467579 return ret[467577])
  }
  function _domain[123390](?).bulkAdd[119620](arg _mt[123586]:_MT[227], arg this[123584]:_domain[123390](?), arg inds[119617]:_array[133150](?), arg dataSorted[119623] :
  0 =
  0, arg isUnique[119627] :
  0 =
  0, arg preserveInds[119631] :
  1 =
  1, arg addOn[119639] :
  (692338 call _cast borrowed locale?[389810] nil[38]) =
  (119637 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "method" "primary method"
  {
    unknown ret[467586] "RVV" "temp"
    unknown call_tmp[599707] "expr temp" "maybe param" "maybe type" "temp"
    (599710 'move' call_tmp[599707](119656 call size _mt[232] inds[119617]))
    unknown call_tmp[599712] "expr temp" "maybe param" "maybe type" "temp"
    (599715 'move' call_tmp[599712](119660 call == call_tmp[599707] 0))
    unknown call_tmp[599717] "expr temp" "maybe param" "maybe type" "temp"
    (599720 'move' call_tmp[599717](119665 call _cond_test call_tmp[599712]))
    if call_tmp[599717]
    {
      (467591 'move' ret[467586](467590 'deref' 0))
      gotoReturn _end_bulkAdd[467584] _end_bulkAdd[467584]
    }
    unknown call_tmp[599724] "expr temp" "maybe param" "maybe type" "temp"
    (599727 'move' call_tmp[599724](351616 call _value _mt[232] this[123584]))
    unknown call_tmp[599731] "expr temp" "maybe param" "maybe type" "temp"
    (599734 'move' call_tmp[599731](119681 call(119672 call (partial) dsiBulkAdd _mt[232] call_tmp[599724]) inds[119617] dataSorted[119623] isUnique[119627] preserveInds[119631] addOn[119639]))
    (467596 'move' ret[467586](467595 'deref' call_tmp[599731]))
    label _end_bulkAdd[467584]
    (467588 return ret[467586])
  }
  where {
    unknown tmp[400005] "maybe param" "temp"
    (400016 'move' tmp[400005](119645 call isSparseDom this[123584]))
    unknown call_tmp[599736] "expr temp" "maybe param" "maybe type" "temp"
    (599739 'move' call_tmp[599736](400018 call _cond_invalid tmp[400005]))
    if call_tmp[599736]
    {
      (400021 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[513860] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513861] "maybe param" "temp"
    unknown call_tmp[599741] "expr temp" "maybe param" "maybe type" "temp"
    (599744 'move' call_tmp[599741](400006 call isTrue tmp[400005]))
    (513866 'move' tmp[513861](513864 call _cond_test call_tmp[599741]))
    if tmp[513861]
    {
      unknown tmp[513868] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[599748] "expr temp" "maybe param" "maybe type" "temp"
      (599751 'move' call_tmp[599748](351611 call _value _mt[232] this[123584]))
      unknown call_tmp[599755] "expr temp" "maybe param" "maybe type" "temp"
      (599758 'move' call_tmp[599755](119647 call rank _mt[232] call_tmp[599748]))
      unknown call_tmp[599760] "expr temp" "maybe param" "maybe type" "temp"
      (599763 'move' call_tmp[599760](119651 call > call_tmp[599755] 1))
      (513870 'move' tmp[513868](400009 call isTrue call_tmp[599760]))
      (513875 'move' tmp[513860](513872 '_paramFoldLogical' tmp[513861] tmp[513868]))
    }
    {
      (513880 'move' tmp[513860](513877 '_paramFoldLogical' tmp[513861] 0))
    }
    unknown call_tmp[599767] "expr temp" "maybe param" "maybe type" "temp"
    (599770 'move' call_tmp[599767](351602 call _value _mt[232] this[123584]))
    unknown call_tmp[599774] "expr temp" "maybe param" "maybe type" "temp"
    (599777 'move' call_tmp[599774](119605 call rank _mt[232] call_tmp[599767]))
    unknown call_tmp[599781] "expr temp" "maybe param" "maybe type" "temp"
    (599784 'move' call_tmp[599781](351606 call _value _mt[232] this[123584]))
    unknown call_tmp[599788] "expr temp" "maybe param" "maybe type" "temp"
    (599791 'move' call_tmp[599788](119609 call idxType _mt[232] call_tmp[599781]))
    unknown call_tmp[599793] "expr temp" "maybe param" "maybe type" "temp"
    (599796 'move' call_tmp[599793](119612 call * call_tmp[599774] call_tmp[599788]))
    unknown call_tmp[599800] "expr temp" "maybe param" "maybe type" "temp"
    (599803 'move' call_tmp[599800](436334 call eltType _mt[232] inds[119617]))
    unknown call_tmp[599805] "expr temp" "maybe param" "maybe type" "temp"
    (599808 'move' call_tmp[599805](436338 call == call_tmp[599793] call_tmp[599800]))
    (436332 call & tmp[513860] call_tmp[599805])
  }
  function _domain[123390](?).remove[119691](arg _mt[123590]:_MT[227], arg this[123588]:_domain[123390](?), arg i[119689]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467600] "RVV" "temp"
    unknown call_tmp[599812] "expr temp" "maybe param" "maybe type" "temp"
    (599815 'move' call_tmp[599812](351625 call _value _mt[232] this[123588]))
    unknown call_tmp[599819] "expr temp" "maybe param" "maybe type" "temp"
    (599822 'move' call_tmp[599819](119701 call(119696 call (partial) dsiRemove _mt[232] call_tmp[599812]) i[119689]))
    (467605 'move' ret[467600](467604 'deref' call_tmp[599819]))
    (467602 return ret[467600])
  }
  function _domain[123390](?).requestCapacity[119711](arg _mt[123594]:_MT[227], arg this[123592]:_domain[123390](?), arg i[119709]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[599824] "expr temp" "maybe param" "maybe type" "temp"
    (599827 'move' call_tmp[599824](119715 call < i[119709] 0))
    unknown call_tmp[599829] "expr temp" "maybe param" "maybe type" "temp"
    (599832 'move' call_tmp[599829](119738 call _cond_test call_tmp[599824]))
    if call_tmp[599829]
    {
      (119735 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    unknown call_tmp[599834] "expr temp" "maybe param" "maybe type" "temp"
    (599837 'move' call_tmp[599834](119746 call isAssociativeDom this[123592]))
    unknown call_tmp[599839] "expr temp" "maybe param" "maybe type" "temp"
    (599842 'move' call_tmp[599839](119747 call ! call_tmp[599834]))
    unknown call_tmp[599844] "expr temp" "maybe param" "maybe type" "temp"
    (599847 'move' call_tmp[599844](119769 call _cond_test call_tmp[599839]))
    if call_tmp[599844]
    {
      (119767 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    unknown call_tmp[599851] "expr temp" "maybe param" "maybe type" "temp"
    (599854 'move' call_tmp[599851](351632 call _value _mt[232] this[123592]))
    (119782 call(119777 call (partial) dsiRequestCapacity _mt[232] call_tmp[599851]) i[119709])
    (467607 return _void[47])
  }
  function _domain[123390](?).size[119788](arg _mt[123598]:_MT[227], arg this[123596]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467611] "RVV" "temp"
    unknown call_tmp[599860] "expr temp" "maybe param" "maybe type" "temp"
    (599863 'move' call_tmp[599860](351637 call numIndices _mt[232] this[123596]))
    (467616 'move' ret[467611](467615 'deref' call_tmp[599860]))
    (467613 return ret[467611])
  }
  function _domain[123390](?).numIndices[119798](arg _mt[123602]:_MT[227], arg this[123600]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467620] "RVV" "temp"
    unknown call_tmp[599867] "expr temp" "maybe param" "maybe type" "temp"
    (599870 'move' call_tmp[599867](351641 call _value _mt[232] this[123600]))
    unknown call_tmp[599874] "expr temp" "maybe param" "maybe type" "temp"
    (599877 'move' call_tmp[599874](119801 call dsiNumIndices _mt[232] call_tmp[599867]))
    (467625 'move' ret[467620](467624 'deref' call_tmp[599874]))
    (467622 return ret[467620])
  }
  function _domain[123390](?).low[119811](arg _mt[123606]:_MT[227], arg this[123604]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467629] "RVV" "temp"
    unknown call_tmp[599881] "expr temp" "maybe param" "maybe type" "temp"
    (599884 'move' call_tmp[599881](351645 call _value _mt[232] this[123604]))
    unknown call_tmp[599888] "expr temp" "maybe param" "maybe type" "temp"
    (599891 'move' call_tmp[599888](119814 call dsiLow _mt[232] call_tmp[599881]))
    (467634 'move' ret[467629](467633 'deref' call_tmp[599888]))
    (467631 return ret[467629])
  }
  function _domain[123390](?).high[119824](arg _mt[123610]:_MT[227], arg this[123608]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467638] "RVV" "temp"
    unknown call_tmp[599895] "expr temp" "maybe param" "maybe type" "temp"
    (599898 'move' call_tmp[599895](351649 call _value _mt[232] this[123608]))
    unknown call_tmp[599902] "expr temp" "maybe param" "maybe type" "temp"
    (599905 'move' call_tmp[599902](119829 call dsiHigh _mt[232] call_tmp[599895]))
    (467643 'move' ret[467638](467642 'deref' call_tmp[599902]))
    (467640 return ret[467638])
  }
  function _domain[123390](?).stride[119839](arg _mt[123614]:_MT[227], arg this[123612]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467647] "RVV" "temp"
    unknown call_tmp[599909] "expr temp" "maybe param" "maybe type" "temp"
    (599912 'move' call_tmp[599909](351653 call _value _mt[232] this[123612]))
    unknown call_tmp[599916] "expr temp" "maybe param" "maybe type" "temp"
    (599919 'move' call_tmp[599916](119842 call dsiStride _mt[232] call_tmp[599909]))
    (467652 'move' ret[467647](467651 'deref' call_tmp[599916]))
    (467649 return ret[467647])
  }
  function _domain[123390](?).alignment[119852](arg _mt[123618]:_MT[227], arg this[123616]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467656] "RVV" "temp"
    unknown call_tmp[599923] "expr temp" "maybe param" "maybe type" "temp"
    (599926 'move' call_tmp[599923](351657 call _value _mt[232] this[123616]))
    unknown call_tmp[599930] "expr temp" "maybe param" "maybe type" "temp"
    (599933 'move' call_tmp[599930](119857 call dsiAlignment _mt[232] call_tmp[599923]))
    (467661 'move' ret[467656](467660 'deref' call_tmp[599930]))
    (467658 return ret[467656])
  }
  function _domain[123390](?).first[119867](arg _mt[123622]:_MT[227], arg this[123620]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467665] "RVV" "temp"
    unknown call_tmp[599937] "expr temp" "maybe param" "maybe type" "temp"
    (599940 'move' call_tmp[599937](351661 call _value _mt[232] this[123620]))
    unknown call_tmp[599944] "expr temp" "maybe param" "maybe type" "temp"
    (599947 'move' call_tmp[599944](119872 call dsiFirst _mt[232] call_tmp[599937]))
    (467670 'move' ret[467665](467669 'deref' call_tmp[599944]))
    (467667 return ret[467665])
  }
  function _domain[123390](?).last[119882](arg _mt[123626]:_MT[227], arg this[123624]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467674] "RVV" "temp"
    unknown call_tmp[599951] "expr temp" "maybe param" "maybe type" "temp"
    (599954 'move' call_tmp[599951](351665 call _value _mt[232] this[123624]))
    unknown call_tmp[599958] "expr temp" "maybe param" "maybe type" "temp"
    (599961 'move' call_tmp[599958](119887 call dsiLast _mt[232] call_tmp[599951]))
    (467679 'move' ret[467674](467678 'deref' call_tmp[599958]))
    (467676 return ret[467674])
  }
  function _domain[123390](?).alignedLow[119897](arg _mt[123630]:_MT[227], arg this[123628]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467683] "RVV" "temp"
    unknown call_tmp[599965] "expr temp" "maybe param" "maybe type" "temp"
    (599968 'move' call_tmp[599965](351669 call _value _mt[232] this[123628]))
    unknown call_tmp[599972] "expr temp" "maybe param" "maybe type" "temp"
    (599975 'move' call_tmp[599972](119902 call dsiAlignedLow _mt[232] call_tmp[599965]))
    (467688 'move' ret[467683](467687 'deref' call_tmp[599972]))
    (467685 return ret[467683])
  }
  function _domain[123390](?).alignedHigh[119912](arg _mt[123634]:_MT[227], arg this[123632]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[467692] "RVV" "temp"
    unknown call_tmp[599979] "expr temp" "maybe param" "maybe type" "temp"
    (599982 'move' call_tmp[599979](351673 call _value _mt[232] this[123632]))
    unknown call_tmp[599986] "expr temp" "maybe param" "maybe type" "temp"
    (599989 'move' call_tmp[599986](119917 call dsiAlignedHigh _mt[232] call_tmp[599979]))
    (467697 'move' ret[467692](467696 'deref' call_tmp[599986]))
    (467694 return ret[467692])
  }
  function _domain[123390](?).contains[119937](arg _mt[123638]:_MT[227], arg this[123636]:_domain[123390](?), arg i[119934] :
  unknown call_tmp[599993] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467701] "RVV" "temp"
    unknown tmp[400026] "maybe param" "temp"
    (400037 'move' tmp[400026](119942 call isRectangularDom this[123636]))
    unknown call_tmp[600012] "expr temp" "maybe param" "maybe type" "temp"
    (600015 'move' call_tmp[600012](400039 call _cond_invalid tmp[400026]))
    if call_tmp[600012]
    {
      (400042 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513887] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513888] "maybe param" "temp"
    unknown call_tmp[600017] "expr temp" "maybe param" "maybe type" "temp"
    (600020 'move' call_tmp[600017](400027 call isTrue tmp[400026]))
    (513893 'move' tmp[513888](513891 call _cond_test call_tmp[600017]))
    if tmp[513888]
    {
      (513898 'move' tmp[513887](513895 '_paramFoldLogical' tmp[513888] 1))
    }
    {
      unknown tmp[513900] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[600022] "expr temp" "maybe param" "maybe type" "temp"
      (600025 'move' call_tmp[600022](119946 call isSparseDom this[123636]))
      (513902 'move' tmp[513900](400031 call isTrue call_tmp[600022]))
      (513907 'move' tmp[513887](513904 '_paramFoldLogical' tmp[513888] tmp[513900]))
    }
    unknown call_tmp[600027] "expr temp" "maybe param" "maybe type" "temp"
    (600030 'move' call_tmp[600027](119974 call _cond_test tmp[513887]))
    if call_tmp[600027]
    {
      unknown call_tmp[600034] "expr temp" "maybe param" "maybe type" "temp"
      (600037 'move' call_tmp[600034](351687 call _value _mt[232] this[123636]))
      unknown call_tmp[600043] "expr temp" "maybe param" "maybe type" "temp"
      (600046 'move' call_tmp[600043](351691 call rank _mt[232] this[123636]))
      unknown call_tmp[600048] "expr temp" "maybe param" "maybe type" "temp"
      (600051 'move' call_tmp[600048](119957 call _makeIndexTuple call_tmp[600043] i[119934]))
      unknown call_tmp[600053] "expr temp" "maybe param" "maybe type" "temp"
      (600056 'move' call_tmp[600053](119959 call(119950 call (partial) dsiMember _mt[232] call_tmp[600034]) call_tmp[600048]))
      (467706 'move' ret[467701](467705 'deref' call_tmp[600053]))
      gotoReturn _end_contains[467699] _end_contains[467699]
    }
    {
      unknown call_tmp[600060] "expr temp" "maybe param" "maybe type" "temp"
      (600063 'move' call_tmp[600060](351696 call _value _mt[232] this[123636]))
      unknown call_tmp[600067] "expr temp" "maybe param" "maybe type" "temp"
      (600070 'move' call_tmp[600067](119969 call i[119934] 1))
      unknown call_tmp[600072] "expr temp" "maybe param" "maybe type" "temp"
      (600075 'move' call_tmp[600072](119971 call(119963 call (partial) dsiMember _mt[232] call_tmp[600060]) call_tmp[600067]))
      (467711 'move' ret[467701](467710 'deref' call_tmp[600072]))
      gotoReturn _end_contains[467699] _end_contains[467699]
    }
    label _end_contains[467699]
    (467703 return ret[467701])
  }
  function _domain[123390](?).contains[119994](arg _mt[123642]:_MT[227], arg this[123640]:_domain[123390](?), arg i[119990] ... :
  unknown call_tmp[600079] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[467717] "RVV" "temp"
    unknown call_tmp[600090] "expr temp" "maybe param" "maybe type" "temp"
    (600093 'move' call_tmp[600090](119999 call(351709 call (partial) contains _mt[232] this[123640]) i[119990]))
    (467722 'move' ret[467717](467721 'deref' call_tmp[600090]))
    (467719 return ret[467717])
  }
  function _domain[123390](?).member[120017](arg _mt[123646]:_MT[227], arg this[123644]:_domain[123390](?), arg i[120014] :
  unknown call_tmp[600097] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    unknown ret[467726] "RVV" "temp"
    unknown call_tmp[600116] "expr temp" "maybe param" "maybe type" "temp"
    (600119 'move' call_tmp[600116](120052 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (120055 call compilerWarning call_tmp[600116])
    unknown call_tmp[600123] "expr temp" "maybe param" "maybe type" "temp"
    (600126 'move' call_tmp[600123](120064 call(120059 call (partial) contains _mt[232] this[123644]) i[120014]))
    (467731 'move' ret[467726](467730 'deref' call_tmp[600123]))
    (467728 return ret[467726])
  }
  function _domain[123390](?).member[120080](arg _mt[123650]:_MT[227], arg this[123648]:_domain[123390](?), arg i[120076] ... :
  unknown call_tmp[600130] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[467735] "RVV" "temp"
    unknown call_tmp[600139] "expr temp" "maybe param" "maybe type" "temp"
    (600142 'move' call_tmp[600139](120085 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (120088 call compilerWarning call_tmp[600139])
    unknown call_tmp[600146] "expr temp" "maybe param" "maybe type" "temp"
    (600149 'move' call_tmp[600146](120097 call(120092 call (partial) contains _mt[232] this[123648]) i[120076]))
    (467740 'move' ret[467735](467739 'deref' call_tmp[600146]))
    (467737 return ret[467735])
  }
  function _domain[123390](?).isSubset[120108](arg _mt[123654]:_MT[227], arg this[123652]:_domain[123390](?), arg super[120105]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467744] "RVV" "temp"
    unknown tmp[400047] "maybe param" "temp"
    (400058 'move' tmp[400047](120113 call isAssociativeDom this[123652]))
    unknown call_tmp[600151] "expr temp" "maybe param" "maybe type" "temp"
    (600154 'move' call_tmp[600151](400060 call _cond_invalid tmp[400047]))
    if call_tmp[600151]
    {
      (400063 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513914] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513915] "maybe param" "temp"
    unknown call_tmp[600156] "expr temp" "maybe param" "maybe type" "temp"
    (600159 'move' call_tmp[600156](400048 call isTrue tmp[400047]))
    (513920 'move' tmp[513915](513918 call _cond_test call_tmp[600156]))
    if tmp[513915]
    {
      (513925 'move' tmp[513914](513922 '_paramFoldLogical' tmp[513915] 1))
    }
    {
      unknown tmp[513927] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[600161] "expr temp" "maybe param" "maybe type" "temp"
      (600164 'move' call_tmp[600161](120117 call isRectangularDom this[123652]))
      (513929 'move' tmp[513927](400052 call isTrue call_tmp[600161]))
      (513934 'move' tmp[513914](513931 '_paramFoldLogical' tmp[513915] tmp[513927]))
    }
    unknown call_tmp[600166] "expr temp" "maybe param" "maybe type" "temp"
    (600169 'move' call_tmp[600166](120120 call ! tmp[513914]))
    unknown call_tmp[600171] "expr temp" "maybe param" "maybe type" "temp"
    (600174 'move' call_tmp[600171](120203 call _cond_test call_tmp[600166]))
    if call_tmp[600171]
    {
      unknown call_tmp[600176] "expr temp" "maybe param" "maybe type" "temp"
      (600179 'move' call_tmp[600176](120125 call isOpaqueDom this[123652]))
      unknown call_tmp[600181] "expr temp" "maybe param" "maybe type" "temp"
      (600184 'move' call_tmp[600181](120196 call _cond_test call_tmp[600176]))
      if call_tmp[600181]
      {
        (120144 call compilerError "isSubset not supported on opaque domains")
      }
      {
        unknown call_tmp[600186] "expr temp" "maybe param" "maybe type" "temp"
        (600189 'move' call_tmp[600186](120149 call isSparseDom this[123652]))
        unknown call_tmp[600191] "expr temp" "maybe param" "maybe type" "temp"
        (600194 'move' call_tmp[600191](120190 call _cond_test call_tmp[600186]))
        if call_tmp[600191]
        {
          (120168 call compilerError "isSubset not supported on sparse domains")
        }
        {
          (120188 call compilerError "isSubset not supported on this domain type")
        }
      }
    }
    unknown call_tmp[600196] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (600199 'move' call_tmp[600196](120209 'typeof' super[120105]))
    unknown call_tmp[600201] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (600204 'move' call_tmp[600201](120211 'typeof' this[123652]))
    unknown call_tmp[600206] "expr temp" "maybe param" "maybe type" "temp"
    (600209 'move' call_tmp[600206](120212 call != call_tmp[600196] call_tmp[600201]))
    unknown call_tmp[600211] "expr temp" "maybe param" "maybe type" "temp"
    (600214 'move' call_tmp[600211](120317 call _cond_test call_tmp[600206]))
    if call_tmp[600211]
    {
      unknown call_tmp[600216] "expr temp" "maybe param" "maybe type" "temp"
      (600219 'move' call_tmp[600216](120217 call isRectangularDom this[123652]))
      unknown call_tmp[600221] "expr temp" "maybe param" "maybe type" "temp"
      (600224 'move' call_tmp[600221](120312 call _cond_test call_tmp[600216]))
      if call_tmp[600221]
      {
        unknown call_tmp[600228] "expr temp" "maybe param" "maybe type" "temp"
        (600231 'move' call_tmp[600228](120219 call rank _mt[232] super[120105]))
        unknown call_tmp[600235] "expr temp" "maybe param" "maybe type" "temp"
        (600238 'move' call_tmp[600235](120223 call rank _mt[232] this[123652]))
        unknown call_tmp[600240] "expr temp" "maybe param" "maybe type" "temp"
        (600243 'move' call_tmp[600240](120226 call != call_tmp[600228] call_tmp[600235]))
        unknown call_tmp[600245] "expr temp" "maybe param" "maybe type" "temp"
        (600248 'move' call_tmp[600245](120285 call _cond_test call_tmp[600240]))
        if call_tmp[600245]
        {
          (120246 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          { scopeless type
            unknown call_type_tmp[443460] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[600252] "expr temp" "maybe param" "maybe type" "temp"
            (600255 'move' call_tmp[600252](120249 call low _mt[232] super[120105]))
            (443464 'move' call_type_tmp[443460](120252 'typeof' call_tmp[600252]))
          }
          { scopeless type
            unknown call_type_tmp[443466] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[600259] "expr temp" "maybe param" "maybe type" "temp"
            (600262 'move' call_tmp[600259](120254 call low _mt[232] this[123652]))
            (443470 'move' call_type_tmp[443466](120257 'typeof' call_tmp[600259]))
          }
          unknown call_tmp[600264] "expr temp" "maybe param" "maybe type" "temp"
          (600267 'move' call_tmp[600264](120258 call != call_type_tmp[443460] call_type_tmp[443466]))
          unknown call_tmp[600269] "expr temp" "maybe param" "maybe type" "temp"
          (600272 'move' call_tmp[600269](120280 call _cond_test call_tmp[600264]))
          if call_tmp[600269]
          {
            (120278 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (120310 call compilerError "isSubset called with different associative domain types")
      }
    }
    unknown call_tmp[600274] "expr temp" "maybe param" "maybe type" "temp"
    (600277 'move' call_tmp[600274](120325 call isRectangularDom this[123652]))
    unknown call_tmp[600279] "expr temp" "maybe param" "maybe type" "temp"
    (600282 'move' call_tmp[600279](120441 call _cond_test call_tmp[600274]))
    if call_tmp[600279]
    {
      unknown contains[120327] "insert auto destroy"
      (491365 'init var' contains[120327] 1)
      {
        unknown _indexOfInterest[120393] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120394] "expr temp" "temp"
        unknown call_tmp[600286] "expr temp" "maybe param" "maybe type" "temp"
        (600289 'move' call_tmp[600286](120413 call(120410 call (partial) dims _mt[232] this[123652])))
        unknown call_tmp[600293] "expr temp" "maybe param" "maybe type" "temp"
        (600296 'move' call_tmp[600293](120408 call size _mt[232] call_tmp[600286]))
        unknown call_tmp[600298] "expr temp" "maybe param" "maybe type" "temp"
        (600301 'move' call_tmp[600298](120415 call chpl_direct_range_iter 1 call_tmp[600293] 1))
        (120403 'move' _iterator[120394](120401 call _getIterator call_tmp[600298]))
        Defer
        {
          {
            (120431 call _freeIterator _iterator[120394])
          }
        }
        { scopeless type
          (120420 'move' _indexOfInterest[120393](120417 call iteratorIndex _iterator[120394]))
        }
        ForLoop
        {
          unknown i[120424] "index var" "insert auto destroy"
          (120426 'move' i[120424] _indexOfInterest[120393])
          {
            {
              unknown tmp[120369] "temp"
              (120372 'move' tmp[120369](120371 'addr of' contains[120327]))
              unknown tmp[400068] "maybe param" "temp"
              (400079 'move' tmp[400068] tmp[120369])
              unknown call_tmp[600303] "expr temp" "maybe param" "maybe type" "temp"
              (600306 'move' call_tmp[600303](400081 call _cond_invalid tmp[400068]))
              if call_tmp[600303]
              {
                (400084 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[513941] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[513942] "maybe param" "temp"
              unknown call_tmp[600308] "expr temp" "maybe param" "maybe type" "temp"
              (600311 'move' call_tmp[600308](400069 call isTrue tmp[400068]))
              (513947 'move' tmp[513942](513945 call _cond_test call_tmp[600308]))
              if tmp[513942]
              {
                unknown tmp[513949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[600315] "expr temp" "maybe param" "maybe type" "temp"
                (600318 'move' call_tmp[600315](120350 call(120346 call (partial) dims _mt[232] super[120105])))
                unknown call_tmp[600320] "expr temp" "maybe param" "maybe type" "temp"
                (600323 'move' call_tmp[600320](120353 call call_tmp[600315] i[120424]))
                unknown call_tmp[600329] "expr temp" "maybe param" "maybe type" "temp"
                (600332 'move' call_tmp[600329](120362 call(120358 call (partial) dims _mt[232] this[123652])))
                unknown call_tmp[600334] "expr temp" "maybe param" "maybe type" "temp"
                (600337 'move' call_tmp[600334](120365 call call_tmp[600329] i[120424]))
                unknown call_tmp[600339] "expr temp" "maybe param" "maybe type" "temp"
                (600342 'move' call_tmp[600339](120367 call(120354 call (partial) contains _mt[232] call_tmp[600320]) call_tmp[600334]))
                (513951 'move' tmp[513949](400072 call isTrue call_tmp[600339]))
                (513956 'move' tmp[513941](513953 '_paramFoldLogical' tmp[513942] tmp[513949]))
              }
              {
                (513961 'move' tmp[513941](513958 '_paramFoldLogical' tmp[513942] 0))
              }
              (120377 call = tmp[120369] tmp[513941])
            }
            unknown call_tmp[600344] "expr temp" "maybe param" "maybe type" "temp"
            (600347 'move' call_tmp[600344](120383 call == contains[120327] 0))
            unknown call_tmp[600349] "expr temp" "maybe param" "maybe type" "temp"
            (600352 'move' call_tmp[600349](120388 call _cond_test call_tmp[600344]))
            if call_tmp[600349]
            {
              break _breakLabel[120399] _breakLabel[120399]
            }
          }
          label _continueLabel[120398]
          _indexOfInterest[120393]
          _iterator[120394]
        }
        label _breakLabel[120399]
      }
      (467749 'move' ret[467744](467748 'deref' contains[120327]))
      gotoReturn _end_isSubset[467742] _end_isSubset[467742]
    }
    function chpl__loopexpr_iter4[529802](?)(arg iterator[529804]:_any[170](?), arg super[529940]:_any[170](?)) : _unknown[43] "generic" "iterator fn"
    {
      unknown ret[529945] "RVV" "temp"
      {
        unknown _indexOfInterest[529809] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[529810] "expr temp" "temp"
        (529819 'move' _iterator[529810](529817 call _getIterator iterator[529804]))
        Defer
        {
          {
            (529833 call _freeIterator _iterator[529810])
          }
        }
        { scopeless type
          (529824 'move' _indexOfInterest[529809](529821 call iteratorIndex _iterator[529810]))
        }
        ForLoop
        {
          unknown i[120457] "index var" "insert auto destroy"
          (529828 'move' i[120457] _indexOfInterest[529809])
          {
            {
              unknown yret[529949] "YVV" "temp"
              unknown call_tmp[529958] "expr temp" "maybe param" "maybe type" "temp"
              (529961 'move' call_tmp[529958](120454 call(120449 call (partial) contains _mt[232] super[529940]) i[120457]))
              (529952 'move' yret[529949](529951 'deref' call_tmp[529958]))
              (529954 yield yret[529949])
            }
          }
          label _continueLabel[529814]
          _indexOfInterest[529809]
          _iterator[529810]
        }
        label _breakLabel[529815]
      }
      (529947 return ret[529945])
    }
    function chpl__loopexpr_iter4[529840](?)(param arg tag[529844]:iterKind[697], arg iterator[529847]:_any[170](?), arg super[529868]:_any[170](?)) : _unknown[43] "generic" "fn returns iterator"
    {
      unknown ret[529987] "RVV" "temp"
      const _leaderIterator[529859] "const" "expr temp" "temp"
      (529864 'move' _leaderIterator[529859](529861 call _toLeader iterator[529847]))
      (529992 'move' ret[529987](529991 'deref' _leaderIterator[529859]))
      (529989 return ret[529987])
    }
    where {
      unknown tmp[529964] "maybe param" "temp"
      (529975 'move' tmp[529964](529849 call == tag[529844] leader[691]))
      unknown call_tmp[530021] "expr temp" "maybe param" "maybe type" "temp"
      (530024 'move' call_tmp[530021](529977 call _cond_invalid tmp[529964]))
      if call_tmp[530021]
      {
        (529980 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[529994] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[529995] "maybe param" "temp"
      unknown call_tmp[530026] "expr temp" "maybe param" "maybe type" "temp"
      (530029 'move' call_tmp[530026](529965 call isTrue tmp[529964]))
      (530000 'move' tmp[529995](529998 call _cond_test call_tmp[530026]))
      if tmp[529995]
      {
        unknown tmp[530002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[530031] "expr temp" "maybe param" "maybe type" "temp"
        (530034 'move' call_tmp[530031](529853 'call resolves' "_toLeader" iterator[529847]))
        (530004 'move' tmp[530002](529968 call isTrue call_tmp[530031]))
        (530009 'move' tmp[529994](530006 '_paramFoldLogical' tmp[529995] tmp[530002]))
      }
      {
        (530014 'move' tmp[529994](530011 '_paramFoldLogical' tmp[529995] 0))
      }
      (692033 call _statementLevelSymbol tmp[529994])
    }
    function chpl__loopexpr_iter4[529870](?)(param arg tag[529874]:iterKind[697], arg followThis[529877]:_any[170](?), arg iterator[529879]:_any[170](?), arg super[529938]:_any[170](?)) : _unknown[43] "generic" "iterator fn"
    {
      unknown ret[530039] "RVV" "temp"
      const _followerIterator[529886] "const" "expr temp" "temp"
      (529892 'move' _followerIterator[529886](529888 call _toFollower iterator[529879] followThis[529877]))
      {
        unknown _indexOfInterest[529907] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[529908] "expr temp" "temp"
        (529917 'move' _iterator[529908](529915 call _getIterator _followerIterator[529886]))
        Defer
        {
          {
            (529931 call _freeIterator _iterator[529908])
          }
        }
        { scopeless type
          (529922 'move' _indexOfInterest[529907](529919 call iteratorIndex _iterator[529908]))
        }
        ForLoop
        {
          unknown i[529894] "index var" "insert auto destroy"
          (529926 'move' i[529894] _indexOfInterest[529907])
          {
            {
              unknown yret[530043] "YVV" "temp"
              unknown call_tmp[530052] "expr temp" "maybe param" "maybe type" "temp"
              (530055 'move' call_tmp[530052](529903 call(529900 call (partial) contains _mt[232] super[529938]) i[529894]))
              (530046 'move' yret[530043](530045 'deref' call_tmp[530052]))
              (530048 yield yret[530043])
            }
          }
          label _continueLabel[529912]
          _indexOfInterest[529907]
          _iterator[529908]
        }
        label _breakLabel[529913]
      }
      (530041 return ret[530039])
    }
    where {
      (529882 call == tag[529874] follower[693])
    }
    function chpl__forallexpr4[529782](?)(arg iterExpr[529785]:_any[170](?), arg super[529789]:_any[170](?)) : _unknown[43] "compiler generated" "compiler nested function" "generic" "maybe array type" "fn returns iterator"
    {
      unknown ret[530059] "RVV" "temp"
      unknown _iterator[529792] "expr temp" "maybe ref" "temp"
      (529794 'move' _iterator[529792] iterExpr[529785])
      unknown call_tmp[530066] "expr temp" "maybe param" "maybe type" "temp"
      (530069 'move' call_tmp[530066](529797 call chpl__loopexpr_iter4 _iterator[529792] super[529789]))
      (530064 'move' ret[530059](530063 'deref' call_tmp[530066]))
      (530061 return ret[530059])
    }
    unknown call_tmp[530071] "expr temp" "maybe param" "maybe type" "temp"
    (530074 'move' call_tmp[530071](529787 call chpl__forallexpr4 this[123652] super[120105]))
    (530078 'iterator record set shape' call_tmp[530071] this[123652] 0)
    unknown call_tmp[600354] "expr temp" "maybe param" "maybe type" "temp"
    (600357 'move' call_tmp[600354](120459 'reduce' anymanaged LogicalAndReduceScanOp[344251](?) call_tmp[530071] 0))
    (467754 'move' ret[467744](467753 'deref' call_tmp[600354]))
    label _end_isSubset[467742]
    (467746 return ret[467744])
  }
  function _domain[123390](?).isSuper[120471](arg _mt[123658]:_MT[227], arg this[123656]:_domain[123390](?), arg sub[120468]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467758] "RVV" "temp"
    unknown tmp[400089] "maybe param" "temp"
    (400100 'move' tmp[400089](120476 call isAssociativeDom this[123656]))
    unknown call_tmp[600359] "expr temp" "maybe param" "maybe type" "temp"
    (600362 'move' call_tmp[600359](400102 call _cond_invalid tmp[400089]))
    if call_tmp[600359]
    {
      (400105 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[513968] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[513969] "maybe param" "temp"
    unknown call_tmp[600364] "expr temp" "maybe param" "maybe type" "temp"
    (600367 'move' call_tmp[600364](400090 call isTrue tmp[400089]))
    (513974 'move' tmp[513969](513972 call _cond_test call_tmp[600364]))
    if tmp[513969]
    {
      (513979 'move' tmp[513968](513976 '_paramFoldLogical' tmp[513969] 1))
    }
    {
      unknown tmp[513981] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[600369] "expr temp" "maybe param" "maybe type" "temp"
      (600372 'move' call_tmp[600369](120480 call isRectangularDom this[123656]))
      (513983 'move' tmp[513981](400094 call isTrue call_tmp[600369]))
      (513988 'move' tmp[513968](513985 '_paramFoldLogical' tmp[513969] tmp[513981]))
    }
    unknown call_tmp[600374] "expr temp" "maybe param" "maybe type" "temp"
    (600377 'move' call_tmp[600374](120483 call ! tmp[513968]))
    unknown call_tmp[600379] "expr temp" "maybe param" "maybe type" "temp"
    (600382 'move' call_tmp[600379](120568 call _cond_test call_tmp[600374]))
    if call_tmp[600379]
    {
      unknown call_tmp[600384] "expr temp" "maybe param" "maybe type" "temp"
      (600387 'move' call_tmp[600384](120488 call isOpaqueDom this[123656]))
      unknown call_tmp[600389] "expr temp" "maybe param" "maybe type" "temp"
      (600392 'move' call_tmp[600389](120561 call _cond_test call_tmp[600384]))
      if call_tmp[600389]
      {
        (120507 call compilerError "isSuper not supported on opaque domains")
      }
      {
        unknown call_tmp[600394] "expr temp" "maybe param" "maybe type" "temp"
        (600397 'move' call_tmp[600394](120512 call isSparseDom this[123656]))
        unknown call_tmp[600399] "expr temp" "maybe param" "maybe type" "temp"
        (600402 'move' call_tmp[600399](120555 call _cond_test call_tmp[600394]))
        if call_tmp[600399]
        {
          (120531 call compilerError "isSuper not supported on sparse domains")
        }
        {
          unknown call_tmp[600404] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (600407 'move' call_tmp[600404](120552 'typeof' this[123656]))
          (120553 call compilerError "isSuper not supported on the domain type " call_tmp[600404])
        }
      }
    }
    unknown call_tmp[600409] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (600412 'move' call_tmp[600409](120574 'typeof' sub[120468]))
    unknown call_tmp[600414] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (600417 'move' call_tmp[600414](120576 'typeof' this[123656]))
    unknown call_tmp[600419] "expr temp" "maybe param" "maybe type" "temp"
    (600422 'move' call_tmp[600419](120577 call != call_tmp[600409] call_tmp[600414]))
    unknown call_tmp[600424] "expr temp" "maybe param" "maybe type" "temp"
    (600427 'move' call_tmp[600424](120682 call _cond_test call_tmp[600419]))
    if call_tmp[600424]
    {
      unknown call_tmp[600429] "expr temp" "maybe param" "maybe type" "temp"
      (600432 'move' call_tmp[600429](120582 call isRectangularDom this[123656]))
      unknown call_tmp[600434] "expr temp" "maybe param" "maybe type" "temp"
      (600437 'move' call_tmp[600434](120677 call _cond_test call_tmp[600429]))
      if call_tmp[600434]
      {
        unknown call_tmp[600441] "expr temp" "maybe param" "maybe type" "temp"
        (600444 'move' call_tmp[600441](120584 call rank _mt[232] sub[120468]))
        unknown call_tmp[600448] "expr temp" "maybe param" "maybe type" "temp"
        (600451 'move' call_tmp[600448](120588 call rank _mt[232] this[123656]))
        unknown call_tmp[600453] "expr temp" "maybe param" "maybe type" "temp"
        (600456 'move' call_tmp[600453](120591 call != call_tmp[600441] call_tmp[600448]))
        unknown call_tmp[600458] "expr temp" "maybe param" "maybe type" "temp"
        (600461 'move' call_tmp[600458](120650 call _cond_test call_tmp[600453]))
        if call_tmp[600458]
        {
          (120611 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          { scopeless type
            unknown call_type_tmp[443472] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[600465] "expr temp" "maybe param" "maybe type" "temp"
            (600468 'move' call_tmp[600465](120614 call low _mt[232] sub[120468]))
            (443476 'move' call_type_tmp[443472](120617 'typeof' call_tmp[600465]))
          }
          { scopeless type
            unknown call_type_tmp[443478] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[600472] "expr temp" "maybe param" "maybe type" "temp"
            (600475 'move' call_tmp[600472](120619 call low _mt[232] this[123656]))
            (443482 'move' call_type_tmp[443478](120622 'typeof' call_tmp[600472]))
          }
          unknown call_tmp[600477] "expr temp" "maybe param" "maybe type" "temp"
          (600480 'move' call_tmp[600477](120623 call != call_type_tmp[443472] call_type_tmp[443478]))
          unknown call_tmp[600482] "expr temp" "maybe param" "maybe type" "temp"
          (600485 'move' call_tmp[600482](120645 call _cond_test call_tmp[600477]))
          if call_tmp[600482]
          {
            (120643 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (120675 call compilerError "isSuper called with different associative domain types")
      }
    }
    unknown call_tmp[600487] "expr temp" "maybe param" "maybe type" "temp"
    (600490 'move' call_tmp[600487](120690 call isRectangularDom this[123656]))
    unknown call_tmp[600492] "expr temp" "maybe param" "maybe type" "temp"
    (600495 'move' call_tmp[600492](120806 call _cond_test call_tmp[600487]))
    if call_tmp[600492]
    {
      unknown contains[120692] "insert auto destroy"
      (491367 'init var' contains[120692] 1)
      {
        unknown _indexOfInterest[120758] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120759] "expr temp" "temp"
        unknown call_tmp[600499] "expr temp" "maybe param" "maybe type" "temp"
        (600502 'move' call_tmp[600499](120778 call(120775 call (partial) dims _mt[232] this[123656])))
        unknown call_tmp[600506] "expr temp" "maybe param" "maybe type" "temp"
        (600509 'move' call_tmp[600506](120773 call size _mt[232] call_tmp[600499]))
        unknown call_tmp[600511] "expr temp" "maybe param" "maybe type" "temp"
        (600514 'move' call_tmp[600511](120780 call chpl_direct_range_iter 1 call_tmp[600506] 1))
        (120768 'move' _iterator[120759](120766 call _getIterator call_tmp[600511]))
        Defer
        {
          {
            (120796 call _freeIterator _iterator[120759])
          }
        }
        { scopeless type
          (120785 'move' _indexOfInterest[120758](120782 call iteratorIndex _iterator[120759]))
        }
        ForLoop
        {
          unknown i[120789] "index var" "insert auto destroy"
          (120791 'move' i[120789] _indexOfInterest[120758])
          {
            {
              unknown tmp[120734] "temp"
              (120737 'move' tmp[120734](120736 'addr of' contains[120692]))
              unknown tmp[400110] "maybe param" "temp"
              (400121 'move' tmp[400110] tmp[120734])
              unknown call_tmp[600516] "expr temp" "maybe param" "maybe type" "temp"
              (600519 'move' call_tmp[600516](400123 call _cond_invalid tmp[400110]))
              if call_tmp[600516]
              {
                (400126 call compilerError "cannot promote short-circuiting && operator")
              }
              unknown tmp[513995] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[513996] "maybe param" "temp"
              unknown call_tmp[600521] "expr temp" "maybe param" "maybe type" "temp"
              (600524 'move' call_tmp[600521](400111 call isTrue tmp[400110]))
              (514001 'move' tmp[513996](513999 call _cond_test call_tmp[600521]))
              if tmp[513996]
              {
                unknown tmp[514003] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                unknown call_tmp[600528] "expr temp" "maybe param" "maybe type" "temp"
                (600531 'move' call_tmp[600528](120715 call(120711 call (partial) dims _mt[232] this[123656])))
                unknown call_tmp[600533] "expr temp" "maybe param" "maybe type" "temp"
                (600536 'move' call_tmp[600533](120718 call call_tmp[600528] i[120789]))
                unknown call_tmp[600542] "expr temp" "maybe param" "maybe type" "temp"
                (600545 'move' call_tmp[600542](120727 call(120723 call (partial) dims _mt[232] sub[120468])))
                unknown call_tmp[600547] "expr temp" "maybe param" "maybe type" "temp"
                (600550 'move' call_tmp[600547](120730 call call_tmp[600542] i[120789]))
                unknown call_tmp[600552] "expr temp" "maybe param" "maybe type" "temp"
                (600555 'move' call_tmp[600552](120732 call(120719 call (partial) contains _mt[232] call_tmp[600533]) call_tmp[600547]))
                (514005 'move' tmp[514003](400114 call isTrue call_tmp[600552]))
                (514010 'move' tmp[513995](514007 '_paramFoldLogical' tmp[513996] tmp[514003]))
              }
              {
                (514015 'move' tmp[513995](514012 '_paramFoldLogical' tmp[513996] 0))
              }
              (120742 call = tmp[120734] tmp[513995])
            }
            unknown call_tmp[600557] "expr temp" "maybe param" "maybe type" "temp"
            (600560 'move' call_tmp[600557](120748 call == contains[120692] 0))
            unknown call_tmp[600562] "expr temp" "maybe param" "maybe type" "temp"
            (600565 'move' call_tmp[600562](120753 call _cond_test call_tmp[600557]))
            if call_tmp[600562]
            {
              break _breakLabel[120764] _breakLabel[120764]
            }
          }
          label _continueLabel[120763]
          _indexOfInterest[120758]
          _iterator[120759]
        }
        label _breakLabel[120764]
      }
      (467763 'move' ret[467758](467762 'deref' contains[120692]))
      gotoReturn _end_isSuper[467756] _end_isSuper[467756]
    }
    function chpl__loopexpr_iter5[530100](?)(arg iterator[530102]:_any[170](?), arg this[530238]:_domain[123390](?)) : _unknown[43] "generic" "iterator fn"
    {
      unknown ret[530243] "RVV" "temp"
      {
        unknown _indexOfInterest[530107] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[530108] "expr temp" "temp"
        (530117 'move' _iterator[530108](530115 call _getIterator iterator[530102]))
        Defer
        {
          {
            (530131 call _freeIterator _iterator[530108])
          }
        }
        { scopeless type
          (530122 'move' _indexOfInterest[530107](530119 call iteratorIndex _iterator[530108]))
        }
        ForLoop
        {
          unknown i[120822] "index var" "insert auto destroy"
          (530126 'move' i[120822] _indexOfInterest[530107])
          {
            {
              unknown yret[530247] "YVV" "temp"
              unknown call_tmp[530256] "expr temp" "maybe param" "maybe type" "temp"
              (530259 'move' call_tmp[530256](120819 call(120814 call (partial) contains _mt[232] this[530238]) i[120822]))
              (530250 'move' yret[530247](530249 'deref' call_tmp[530256]))
              (530252 yield yret[530247])
            }
          }
          label _continueLabel[530112]
          _indexOfInterest[530107]
          _iterator[530108]
        }
        label _breakLabel[530113]
      }
      (530245 return ret[530243])
    }
    function chpl__loopexpr_iter5[530138](?)(param arg tag[530142]:iterKind[697], arg iterator[530145]:_any[170](?), arg this[530166]:_domain[123390](?)) : _unknown[43] "generic" "fn returns iterator"
    {
      unknown ret[530285] "RVV" "temp"
      const _leaderIterator[530157] "const" "expr temp" "temp"
      (530162 'move' _leaderIterator[530157](530159 call _toLeader iterator[530145]))
      (530290 'move' ret[530285](530289 'deref' _leaderIterator[530157]))
      (530287 return ret[530285])
    }
    where {
      unknown tmp[530262] "maybe param" "temp"
      (530273 'move' tmp[530262](530147 call == tag[530142] leader[691]))
      unknown call_tmp[530319] "expr temp" "maybe param" "maybe type" "temp"
      (530322 'move' call_tmp[530319](530275 call _cond_invalid tmp[530262]))
      if call_tmp[530319]
      {
        (530278 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[530292] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[530293] "maybe param" "temp"
      unknown call_tmp[530324] "expr temp" "maybe param" "maybe type" "temp"
      (530327 'move' call_tmp[530324](530263 call isTrue tmp[530262]))
      (530298 'move' tmp[530293](530296 call _cond_test call_tmp[530324]))
      if tmp[530293]
      {
        unknown tmp[530300] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[530329] "expr temp" "maybe param" "maybe type" "temp"
        (530332 'move' call_tmp[530329](530151 'call resolves' "_toLeader" iterator[530145]))
        (530302 'move' tmp[530300](530266 call isTrue call_tmp[530329]))
        (530307 'move' tmp[530292](530304 '_paramFoldLogical' tmp[530293] tmp[530300]))
      }
      {
        (530312 'move' tmp[530292](530309 '_paramFoldLogical' tmp[530293] 0))
      }
      (692035 call _statementLevelSymbol tmp[530292])
    }
    function chpl__loopexpr_iter5[530168](?)(param arg tag[530172]:iterKind[697], arg followThis[530175]:_any[170](?), arg iterator[530177]:_any[170](?), arg this[530236]:_domain[123390](?)) : _unknown[43] "generic" "iterator fn"
    {
      unknown ret[530337] "RVV" "temp"
      const _followerIterator[530184] "const" "expr temp" "temp"
      (530190 'move' _followerIterator[530184](530186 call _toFollower iterator[530177] followThis[530175]))
      {
        unknown _indexOfInterest[530205] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[530206] "expr temp" "temp"
        (530215 'move' _iterator[530206](530213 call _getIterator _followerIterator[530184]))
        Defer
        {
          {
            (530229 call _freeIterator _iterator[530206])
          }
        }
        { scopeless type
          (530220 'move' _indexOfInterest[530205](530217 call iteratorIndex _iterator[530206]))
        }
        ForLoop
        {
          unknown i[530192] "index var" "insert auto destroy"
          (530224 'move' i[530192] _indexOfInterest[530205])
          {
            {
              unknown yret[530341] "YVV" "temp"
              unknown call_tmp[530350] "expr temp" "maybe param" "maybe type" "temp"
              (530353 'move' call_tmp[530350](530201 call(530198 call (partial) contains _mt[232] this[530236]) i[530192]))
              (530344 'move' yret[530341](530343 'deref' call_tmp[530350]))
              (530346 yield yret[530341])
            }
          }
          label _continueLabel[530210]
          _indexOfInterest[530205]
          _iterator[530206]
        }
        label _breakLabel[530211]
      }
      (530339 return ret[530337])
    }
    where {
      (530180 call == tag[530172] follower[693])
    }
    function chpl__forallexpr5[530080](?)(arg iterExpr[530083]:_any[170](?), arg this[530087]:_domain[123390](?)) : _unknown[43] "compiler generated" "compiler nested function" "generic" "maybe array type" "fn returns iterator"
    {
      unknown ret[530357] "RVV" "temp"
      unknown _iterator[530090] "expr temp" "maybe ref" "temp"
      (530092 'move' _iterator[530090] iterExpr[530083])
      unknown call_tmp[530364] "expr temp" "maybe param" "maybe type" "temp"
      (530367 'move' call_tmp[530364](530095 call chpl__loopexpr_iter5 _iterator[530090] this[530087]))
      (530362 'move' ret[530357](530361 'deref' call_tmp[530364]))
      (530359 return ret[530357])
    }
    unknown call_tmp[530369] "expr temp" "maybe param" "maybe type" "temp"
    (530372 'move' call_tmp[530369](530085 call chpl__forallexpr5 sub[120468] this[123656]))
    (530376 'iterator record set shape' call_tmp[530369] sub[120468] 0)
    unknown call_tmp[600567] "expr temp" "maybe param" "maybe type" "temp"
    (600570 'move' call_tmp[600567](120824 'reduce' anymanaged LogicalAndReduceScanOp[344251](?) call_tmp[530369] 0))
    (467768 'move' ret[467758](467767 'deref' call_tmp[600567]))
    label _end_isSuper[467756]
    (467760 return ret[467758])
  }
  function _domain[123390](?).indexOrder[120834](arg _mt[123662]:_MT[227], arg this[123660]:_domain[123390](?), arg i[120832]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467772] "RVV" "temp"
    unknown call_tmp[600574] "expr temp" "maybe param" "maybe type" "temp"
    (600577 'move' call_tmp[600574](351787 call _value _mt[232] this[123660]))
    unknown call_tmp[600583] "expr temp" "maybe param" "maybe type" "temp"
    (600586 'move' call_tmp[600583](351791 call rank _mt[232] this[123660]))
    unknown call_tmp[600588] "expr temp" "maybe param" "maybe type" "temp"
    (600591 'move' call_tmp[600588](120846 call _makeIndexTuple call_tmp[600583] i[120832]))
    unknown call_tmp[600593] "expr temp" "maybe param" "maybe type" "temp"
    (600596 'move' call_tmp[600593](120848 call(120839 call (partial) dsiIndexOrder _mt[232] call_tmp[600574]) call_tmp[600588]))
    (467777 'move' ret[467772](467776 'deref' call_tmp[600593]))
    (467774 return ret[467772])
  }
  function _domain[123390](?).position[120858](arg _mt[123666]:_MT[227], arg this[123664]:_domain[123390](?), arg i[120856]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467781] "RVV" "temp"
    unknown call_tmp[600600] "expr temp" "maybe param" "maybe type" "temp"
    (600603 'move' call_tmp[600600](351796 call rank _mt[232] this[123664]))
    unknown call_tmp[600605] "maybe param" "maybe type" "temp"
    (600608 'move' call_tmp[600605](120864 call _makeIndexTuple call_tmp[600600] i[120856]))
    unknown ind[120865] "insert auto destroy"
    (491369 'init var' ind[120865] call_tmp[600605])
    unknown pos[120872] "insert auto destroy"
    unknown call_tmp[600612] "expr temp" "maybe param" "maybe type" "temp"
    (600615 'move' call_tmp[600612](351801 call rank _mt[232] this[123664]))
    unknown call_tmp[600619] "expr temp" "maybe param" "maybe type" "temp"
    (600622 'move' call_tmp[600619](351805 call intIdxType _mt[232] this[123664]))
    unknown call_tmp[600624] "expr temp" "maybe param" "maybe type" "temp"
    (600627 'move' call_tmp[600624](120870 call * call_tmp[600612] call_tmp[600619]))
    (491371 'default init var' pos[120872] call_tmp[600624])
    {
      unknown _indexOfInterest[120904] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120905] "expr temp" "temp"
      unknown call_tmp[600631] "expr temp" "maybe param" "maybe type" "temp"
      (600634 'move' call_tmp[600631](351818 call rank _mt[232] this[123664]))
      unknown call_tmp[600636] "expr temp" "maybe param" "maybe type" "temp"
      (600639 'move' call_tmp[600636](120919 call chpl_direct_range_iter 1 call_tmp[600631] 1))
      (120914 'move' _iterator[120905](120912 call _getIterator call_tmp[600636]))
      Defer
      {
        {
          (120935 call _freeIterator _iterator[120905])
        }
      }
      { scopeless type
        (120924 'move' _indexOfInterest[120904](120921 call iteratorIndex _iterator[120905]))
      }
      ForLoop
      {
        unknown d[120928] "index var" "insert auto destroy"
        (120930 'move' d[120928] _indexOfInterest[120904])
        unknown call_tmp[600641] "expr temp" "maybe param" "maybe type" "temp"
        (600644 'move' call_tmp[600641](120884 call pos[120872] d[120928]))
        unknown call_tmp[600648] "expr temp" "maybe param" "maybe type" "temp"
        (600651 'move' call_tmp[600648](351811 call _value _mt[232] this[123664]))
        unknown call_tmp[600655] "expr temp" "maybe param" "maybe type" "temp"
        (600658 'move' call_tmp[600655](120891 call(120886 call (partial) dsiDim _mt[232] call_tmp[600648]) d[120928]))
        unknown call_tmp[600662] "expr temp" "maybe param" "maybe type" "temp"
        (600665 'move' call_tmp[600662](120898 call ind[120865] d[120928]))
        unknown call_tmp[600667] "expr temp" "maybe param" "maybe type" "temp"
        (600670 'move' call_tmp[600667](120900 call(120892 call (partial) indexOrder _mt[232] call_tmp[600655]) call_tmp[600662]))
        (120901 call = call_tmp[600641] call_tmp[600667])
        label _continueLabel[120909]
        _indexOfInterest[120904]
        _iterator[120905]
      }
      label _breakLabel[120910]
    }
    (467786 'move' ret[467781](467785 'deref' pos[120872]))
    (467783 return ret[467781])
  }
  function _domain[123390](?).expand[120956](arg _mt[123670]:_MT[227], arg this[123668]:_domain[123390](?), arg off[120953] :
  unknown call_tmp[600674] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[600686] "expr temp" "maybe param" "maybe type" "temp"
    (600689 'move' call_tmp[600686](120967 call isAssociativeDom this[123668]))
    unknown call_tmp[600691] "expr temp" "maybe param" "maybe type" "temp"
    (600694 'move' call_tmp[600691](121068 call _cond_test call_tmp[600686]))
    if call_tmp[600691]
    {
      (120986 call compilerError "expand not supported on associative domains")
    }
    {
      unknown call_tmp[600696] "expr temp" "maybe param" "maybe type" "temp"
      (600699 'move' call_tmp[600696](120991 call isOpaqueDom this[123668]))
      unknown call_tmp[600701] "expr temp" "maybe param" "maybe type" "temp"
      (600704 'move' call_tmp[600701](121062 call _cond_test call_tmp[600696]))
      if call_tmp[600701]
      {
        (121010 call compilerError "expand not supported on opaque domains")
      }
      {
        unknown call_tmp[600706] "expr temp" "maybe param" "maybe type" "temp"
        (600709 'move' call_tmp[600706](121015 call isSparseDom this[123668]))
        unknown call_tmp[600711] "expr temp" "maybe param" "maybe type" "temp"
        (600714 'move' call_tmp[600711](121056 call _cond_test call_tmp[600706]))
        if call_tmp[600711]
        {
          (121034 call compilerError "expand not supported on sparse domains")
        }
        {
          (121054 call compilerError "expand not supported on this domain type")
        }
      }
    }
    (467788 return _void[47])
  }
  where {
    unknown call_tmp[600716] "expr temp" "maybe param" "maybe type" "temp"
    (600719 'move' call_tmp[600716](120961 call isRectangularDom this[123668]))
    (120962 call ! call_tmp[600716])
  }
  function _domain[123390](?).expand[121086](arg _mt[123674]:_MT[227], arg this[123672]:_domain[123390](?), arg off[121082] ... :
  (351835 call intIdxType _mt[232] this[123672])) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467792] "RVV" "temp"
    unknown call_tmp[600727] "expr temp" "maybe param" "maybe type" "temp"
    (600730 'move' call_tmp[600727](121091 call(351843 call (partial) expand _mt[232] this[123672]) off[121082]))
    (467797 'move' ret[467792](467796 'deref' call_tmp[600727]))
    (467794 return ret[467792])
  }
  function _domain[123390](?).expand[121106](arg _mt[123678]:_MT[227], arg this[123676]:_domain[123390](?), arg off[121103] :
  unknown call_tmp[600734] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method"
  {
    unknown ret[467801] "RVV" "temp"
    unknown call_tmp[600748] "maybe param" "maybe type" "temp"
    (600751 'move' call_tmp[600748](121110 call(351856 call (partial) dims _mt[232] this[123676])))
    unknown ranges[121111] "insert auto destroy"
    (491373 'init var' ranges[121111] call_tmp[600748])
    {
      unknown _indexOfInterest[121201] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121202] "expr temp" "temp"
      unknown call_tmp[600755] "expr temp" "maybe param" "maybe type" "temp"
      (600758 'move' call_tmp[600755](351871 call rank _mt[232] this[123676]))
      unknown call_tmp[600760] "expr temp" "maybe param" "maybe type" "temp"
      (600763 'move' call_tmp[600760](121216 call chpl_direct_range_iter 1 call_tmp[600755] 1))
      (121211 'move' _iterator[121202](121209 call _getIterator call_tmp[600760]))
      Defer
      {
        {
          (121232 call _freeIterator _iterator[121202])
        }
      }
      { scopeless type
        (121221 'move' _indexOfInterest[121201](121218 call iteratorIndex _iterator[121202]))
      }
      ForLoop
      {
        unknown i[121225] "index var" "insert auto destroy"
        (121227 'move' i[121225] _indexOfInterest[121201])
        {
          unknown call_tmp[600765] "expr temp" "maybe param" "maybe type" "temp"
          (600768 'move' call_tmp[600765](121123 call ranges[121111] i[121225]))
          unknown call_tmp[600770] "expr temp" "maybe param" "maybe type" "temp"
          (600773 'move' call_tmp[600770](121127 call ranges[121111] i[121225]))
          unknown call_tmp[600777] "expr temp" "maybe param" "maybe type" "temp"
          (600780 'move' call_tmp[600777](121136 call off[121103] i[121225]))
          unknown call_tmp[600782] "expr temp" "maybe param" "maybe type" "temp"
          (600785 'move' call_tmp[600782](121138 call(121130 call (partial) expand _mt[232] call_tmp[600770]) call_tmp[600777]))
          (121139 call = call_tmp[600765] call_tmp[600782])
          unknown call_tmp[600787] "expr temp" "maybe param" "maybe type" "temp"
          (600790 'move' call_tmp[600787](121146 call ranges[121111] i[121225]))
          unknown call_tmp[600794] "expr temp" "maybe param" "maybe type" "temp"
          (600797 'move' call_tmp[600794](121147 call low _mt[232] call_tmp[600787]))
          unknown call_tmp[600799] "expr temp" "maybe param" "maybe type" "temp"
          (600802 'move' call_tmp[600799](121153 call ranges[121111] i[121225]))
          unknown call_tmp[600806] "expr temp" "maybe param" "maybe type" "temp"
          (600809 'move' call_tmp[600806](121154 call high _mt[232] call_tmp[600799]))
          unknown call_tmp[600811] "expr temp" "maybe param" "maybe type" "temp"
          (600814 'move' call_tmp[600811](121157 call > call_tmp[600794] call_tmp[600806]))
          unknown call_tmp[600816] "expr temp" "maybe param" "maybe type" "temp"
          (600819 'move' call_tmp[600816](121197 call _cond_test call_tmp[600811]))
          if call_tmp[600816]
          {
            (121194 call halt "***Error: Degenerate dimension created in dimension " i[121225] "***")
          }
        }
        label _continueLabel[121206]
        _indexOfInterest[121201]
        _iterator[121202]
      }
      label _breakLabel[121207]
    }
    unknown call_tmp[600823] "expr temp" "maybe param" "maybe type" "temp"
    (600826 'move' call_tmp[600823](351876 call dist _mt[232] this[123676]))
    unknown call_tmp[600830] "expr temp" "maybe param" "maybe type" "temp"
    (600833 'move' call_tmp[600830](351880 call rank _mt[232] this[123676]))
    unknown call_tmp[600837] "expr temp" "maybe param" "maybe type" "temp"
    (600840 'move' call_tmp[600837](351884 call _value _mt[232] this[123676]))
    unknown call_tmp[600844] "expr temp" "maybe param" "maybe type" "temp"
    (600847 'move' call_tmp[600844](121244 call idxType _mt[232] call_tmp[600837]))
    unknown call_tmp[600851] "expr temp" "maybe param" "maybe type" "temp"
    (600854 'move' call_tmp[600851](351888 call stridable _mt[232] this[123676]))
    unknown call_tmp[600856] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (600859 'move' call_tmp[600856](691430 'new' _domain[123390](?) call_tmp[600823] call_tmp[600830] call_tmp[600844] call_tmp[600851] ranges[121111]))
    (467806 'move' ret[467801](467805 'deref' call_tmp[600856]))
    (467803 return ret[467801])
  }
  function _domain[123390](?).expand[121261](arg _mt[123682]:_MT[227], arg this[123680]:_domain[123390](?), arg off[121258] :
  (351893 call intIdxType _mt[232] this[123680])) : _unknown[43] "method" "primary method"
  {
    unknown ret[467810] "RVV" "temp"
    unknown call_tmp[600865] "maybe param" "maybe type" "temp"
    (600868 'move' call_tmp[600865](121269 call(351901 call (partial) dims _mt[232] this[123680])))
    unknown ranges[121270] "insert auto destroy"
    (491375 'init var' ranges[121270] call_tmp[600865])
    {
      unknown _indexOfInterest[121296] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121297] "expr temp" "temp"
      unknown call_tmp[600872] "expr temp" "maybe param" "maybe type" "temp"
      (600875 'move' call_tmp[600872](351913 call rank _mt[232] this[123680]))
      unknown call_tmp[600877] "expr temp" "maybe param" "maybe type" "temp"
      (600880 'move' call_tmp[600877](121311 call chpl_direct_range_iter 1 call_tmp[600872] 1))
      (121306 'move' _iterator[121297](121304 call _getIterator call_tmp[600877]))
      Defer
      {
        {
          (121327 call _freeIterator _iterator[121297])
        }
      }
      { scopeless type
        (121316 'move' _indexOfInterest[121296](121313 call iteratorIndex _iterator[121297]))
      }
      ForLoop
      {
        unknown i[121320] "index var" "insert auto destroy"
        (121322 'move' i[121320] _indexOfInterest[121296])
        unknown call_tmp[600882] "expr temp" "maybe param" "maybe type" "temp"
        (600885 'move' call_tmp[600882](121282 call ranges[121270] i[121320]))
        unknown call_tmp[600889] "expr temp" "maybe param" "maybe type" "temp"
        (600892 'move' call_tmp[600889](121286 call(351907 call (partial) dim _mt[232] this[123680]) i[121320]))
        unknown call_tmp[600896] "expr temp" "maybe param" "maybe type" "temp"
        (600899 'move' call_tmp[600896](121292 call(121287 call (partial) expand _mt[232] call_tmp[600889]) off[121258]))
        (121293 call = call_tmp[600882] call_tmp[600896])
        label _continueLabel[121301]
        _indexOfInterest[121296]
        _iterator[121297]
      }
      label _breakLabel[121302]
    }
    unknown call_tmp[600903] "expr temp" "maybe param" "maybe type" "temp"
    (600906 'move' call_tmp[600903](351918 call dist _mt[232] this[123680]))
    unknown call_tmp[600910] "expr temp" "maybe param" "maybe type" "temp"
    (600913 'move' call_tmp[600910](351922 call rank _mt[232] this[123680]))
    unknown call_tmp[600917] "expr temp" "maybe param" "maybe type" "temp"
    (600920 'move' call_tmp[600917](351926 call _value _mt[232] this[123680]))
    unknown call_tmp[600924] "expr temp" "maybe param" "maybe type" "temp"
    (600927 'move' call_tmp[600924](121339 call idxType _mt[232] call_tmp[600917]))
    unknown call_tmp[600931] "expr temp" "maybe param" "maybe type" "temp"
    (600934 'move' call_tmp[600931](351930 call stridable _mt[232] this[123680]))
    unknown call_tmp[600936] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (600939 'move' call_tmp[600936](691431 'new' _domain[123390](?) call_tmp[600903] call_tmp[600910] call_tmp[600924] call_tmp[600931] ranges[121270]))
    (467815 'move' ret[467810](467814 'deref' call_tmp[600936]))
    (467812 return ret[467810])
  }
  where {
    unknown call_tmp[600943] "expr temp" "maybe param" "maybe type" "temp"
    (600946 'move' call_tmp[600943](351897 call rank _mt[232] this[123680]))
    (121265 call > call_tmp[600943] 1)
  }
  function _domain[123390](?).exterior[121360](arg _mt[123686]:_MT[227], arg this[123684]:_domain[123390](?), arg off[121357] :
  unknown call_tmp[600950] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[600962] "expr temp" "maybe param" "maybe type" "temp"
    (600965 'move' call_tmp[600962](121371 call isAssociativeDom this[123684]))
    unknown call_tmp[600967] "expr temp" "maybe param" "maybe type" "temp"
    (600970 'move' call_tmp[600967](121472 call _cond_test call_tmp[600962]))
    if call_tmp[600967]
    {
      (121390 call compilerError "exterior not supported on associative domains")
    }
    {
      unknown call_tmp[600972] "expr temp" "maybe param" "maybe type" "temp"
      (600975 'move' call_tmp[600972](121395 call isOpaqueDom this[123684]))
      unknown call_tmp[600977] "expr temp" "maybe param" "maybe type" "temp"
      (600980 'move' call_tmp[600977](121466 call _cond_test call_tmp[600972]))
      if call_tmp[600977]
      {
        (121414 call compilerError "exterior not supported on opaque domains")
      }
      {
        unknown call_tmp[600982] "expr temp" "maybe param" "maybe type" "temp"
        (600985 'move' call_tmp[600982](121419 call isSparseDom this[123684]))
        unknown call_tmp[600987] "expr temp" "maybe param" "maybe type" "temp"
        (600990 'move' call_tmp[600987](121460 call _cond_test call_tmp[600982]))
        if call_tmp[600987]
        {
          (121438 call compilerError "exterior not supported on sparse domains")
        }
        {
          (121458 call compilerError "exterior not supported on this domain type")
        }
      }
    }
    (467817 return _void[47])
  }
  where {
    unknown call_tmp[600992] "expr temp" "maybe param" "maybe type" "temp"
    (600995 'move' call_tmp[600992](121365 call isRectangularDom this[123684]))
    (121366 call ! call_tmp[600992])
  }
  function _domain[123390](?).exterior[121490](arg _mt[123690]:_MT[227], arg this[123688]:_domain[123390](?), arg off[121486] ... :
  (351947 call intIdxType _mt[232] this[123688])) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467821] "RVV" "temp"
    unknown call_tmp[601003] "expr temp" "maybe param" "maybe type" "temp"
    (601006 'move' call_tmp[601003](121495 call(351955 call (partial) exterior _mt[232] this[123688]) off[121486]))
    (467826 'move' ret[467821](467825 'deref' call_tmp[601003]))
    (467823 return ret[467821])
  }
  function _domain[123390](?).exterior[121510](arg _mt[123694]:_MT[227], arg this[123692]:_domain[123390](?), arg off[121507] :
  unknown call_tmp[601010] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method"
  {
    unknown ret[467830] "RVV" "temp"
    unknown call_tmp[601024] "maybe param" "maybe type" "temp"
    (601027 'move' call_tmp[601024](121514 call(351968 call (partial) dims _mt[232] this[123692])))
    unknown ranges[121515] "insert auto destroy"
    (491377 'init var' ranges[121515] call_tmp[601024])
    {
      unknown _indexOfInterest[121546] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121547] "expr temp" "temp"
      unknown call_tmp[601031] "expr temp" "maybe param" "maybe type" "temp"
      (601034 'move' call_tmp[601031](351981 call rank _mt[232] this[123692]))
      unknown call_tmp[601036] "expr temp" "maybe param" "maybe type" "temp"
      (601039 'move' call_tmp[601036](121561 call chpl_direct_range_iter 1 call_tmp[601031] 1))
      (121556 'move' _iterator[121547](121554 call _getIterator call_tmp[601036]))
      Defer
      {
        {
          (121577 call _freeIterator _iterator[121547])
        }
      }
      { scopeless type
        (121566 'move' _indexOfInterest[121546](121563 call iteratorIndex _iterator[121547]))
      }
      ForLoop
      {
        unknown i[121570] "index var" "insert auto destroy"
        (121572 'move' i[121570] _indexOfInterest[121546])
        unknown call_tmp[601041] "expr temp" "maybe param" "maybe type" "temp"
        (601044 'move' call_tmp[601041](121527 call ranges[121515] i[121570]))
        unknown call_tmp[601048] "expr temp" "maybe param" "maybe type" "temp"
        (601051 'move' call_tmp[601048](121531 call(351974 call (partial) dim _mt[232] this[123692]) i[121570]))
        unknown call_tmp[601055] "expr temp" "maybe param" "maybe type" "temp"
        (601058 'move' call_tmp[601055](121540 call off[121507] i[121570]))
        unknown call_tmp[601060] "expr temp" "maybe param" "maybe type" "temp"
        (601063 'move' call_tmp[601060](121542 call(121534 call (partial) exterior _mt[232] call_tmp[601048]) call_tmp[601055]))
        (121543 call = call_tmp[601041] call_tmp[601060])
        label _continueLabel[121551]
        _indexOfInterest[121546]
        _iterator[121547]
      }
      label _breakLabel[121552]
    }
    unknown call_tmp[601067] "expr temp" "maybe param" "maybe type" "temp"
    (601070 'move' call_tmp[601067](351986 call dist _mt[232] this[123692]))
    unknown call_tmp[601074] "expr temp" "maybe param" "maybe type" "temp"
    (601077 'move' call_tmp[601074](351990 call rank _mt[232] this[123692]))
    unknown call_tmp[601081] "expr temp" "maybe param" "maybe type" "temp"
    (601084 'move' call_tmp[601081](351994 call _value _mt[232] this[123692]))
    unknown call_tmp[601088] "expr temp" "maybe param" "maybe type" "temp"
    (601091 'move' call_tmp[601088](121589 call idxType _mt[232] call_tmp[601081]))
    unknown call_tmp[601095] "expr temp" "maybe param" "maybe type" "temp"
    (601098 'move' call_tmp[601095](351998 call stridable _mt[232] this[123692]))
    unknown call_tmp[601100] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (601103 'move' call_tmp[601100](691432 'new' _domain[123390](?) call_tmp[601067] call_tmp[601074] call_tmp[601088] call_tmp[601095] ranges[121515]))
    (467835 'move' ret[467830](467834 'deref' call_tmp[601100]))
    (467832 return ret[467830])
  }
  function _domain[123390](?).exterior[121606](arg _mt[123698]:_MT[227], arg this[123696]:_domain[123390](?), arg off[121603] :
  (352003 call intIdxType _mt[232] this[123696])) : _unknown[43] "method" "primary method"
  {
    unknown ret[467839] "RVV" "temp"
    unknown offTup[121616] "insert auto destroy"
    unknown call_tmp[601109] "expr temp" "maybe param" "maybe type" "temp"
    (601112 'move' call_tmp[601109](352011 call rank _mt[232] this[123696]))
    unknown call_tmp[601116] "expr temp" "maybe param" "maybe type" "temp"
    (601119 'move' call_tmp[601116](352015 call intIdxType _mt[232] this[123696]))
    unknown call_tmp[601121] "expr temp" "maybe param" "maybe type" "temp"
    (601124 'move' call_tmp[601121](121614 call * call_tmp[601109] call_tmp[601116]))
    (491379 'default init var' offTup[121616] call_tmp[601121])
    {
      unknown _indexOfInterest[121633] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121634] "expr temp" "temp"
      unknown call_tmp[601128] "expr temp" "maybe param" "maybe type" "temp"
      (601131 'move' call_tmp[601128](352022 call rank _mt[232] this[123696]))
      unknown call_tmp[601133] "expr temp" "maybe param" "maybe type" "temp"
      (601136 'move' call_tmp[601133](121648 call chpl_direct_range_iter 1 call_tmp[601128] 1))
      (121643 'move' _iterator[121634](121641 call _getIterator call_tmp[601133]))
      Defer
      {
        {
          (121664 call _freeIterator _iterator[121634])
        }
      }
      { scopeless type
        (121653 'move' _indexOfInterest[121633](121650 call iteratorIndex _iterator[121634]))
      }
      ForLoop
      {
        unknown i[121657] "index var" "insert auto destroy"
        (121659 'move' i[121657] _indexOfInterest[121633])
        unknown call_tmp[601138] "expr temp" "maybe param" "maybe type" "temp"
        (601141 'move' call_tmp[601138](121628 call offTup[121616] i[121657]))
        (121630 call = call_tmp[601138] off[121603])
        label _continueLabel[121638]
        _indexOfInterest[121633]
        _iterator[121634]
      }
      label _breakLabel[121639]
    }
    unknown call_tmp[601145] "expr temp" "maybe param" "maybe type" "temp"
    (601148 'move' call_tmp[601145](121674 call(352026 call (partial) exterior _mt[232] this[123696]) offTup[121616]))
    (467844 'move' ret[467839](467843 'deref' call_tmp[601145]))
    (467841 return ret[467839])
  }
  where {
    unknown call_tmp[601152] "expr temp" "maybe param" "maybe type" "temp"
    (601155 'move' call_tmp[601152](352007 call rank _mt[232] this[123696]))
    (121610 call != call_tmp[601152] 1)
  }
  function _domain[123390](?).interior[121689](arg _mt[123702]:_MT[227], arg this[123700]:_domain[123390](?), arg off[121686] :
  unknown call_tmp[601159] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[601171] "expr temp" "maybe param" "maybe type" "temp"
    (601174 'move' call_tmp[601171](121700 call isAssociativeDom this[123700]))
    unknown call_tmp[601176] "expr temp" "maybe param" "maybe type" "temp"
    (601179 'move' call_tmp[601176](121801 call _cond_test call_tmp[601171]))
    if call_tmp[601176]
    {
      (121719 call compilerError "interior not supported on associative domains")
    }
    {
      unknown call_tmp[601181] "expr temp" "maybe param" "maybe type" "temp"
      (601184 'move' call_tmp[601181](121724 call isOpaqueDom this[123700]))
      unknown call_tmp[601186] "expr temp" "maybe param" "maybe type" "temp"
      (601189 'move' call_tmp[601186](121795 call _cond_test call_tmp[601181]))
      if call_tmp[601186]
      {
        (121743 call compilerError "interior not supported on opaque domains")
      }
      {
        unknown call_tmp[601191] "expr temp" "maybe param" "maybe type" "temp"
        (601194 'move' call_tmp[601191](121748 call isSparseDom this[123700]))
        unknown call_tmp[601196] "expr temp" "maybe param" "maybe type" "temp"
        (601199 'move' call_tmp[601196](121789 call _cond_test call_tmp[601191]))
        if call_tmp[601196]
        {
          (121767 call compilerError "interior not supported on sparse domains")
        }
        {
          (121787 call compilerError "interior not supported on this domain type")
        }
      }
    }
    (467846 return _void[47])
  }
  where {
    unknown call_tmp[601201] "expr temp" "maybe param" "maybe type" "temp"
    (601204 'move' call_tmp[601201](121694 call isRectangularDom this[123700]))
    (121695 call ! call_tmp[601201])
  }
  function _domain[123390](?).interior[121819](arg _mt[123706]:_MT[227], arg this[123704]:_domain[123390](?), arg off[121815] ... :
  (352043 call intIdxType _mt[232] this[123704])) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467850] "RVV" "temp"
    unknown call_tmp[601212] "expr temp" "maybe param" "maybe type" "temp"
    (601215 'move' call_tmp[601212](121824 call(352051 call (partial) interior _mt[232] this[123704]) off[121815]))
    (467855 'move' ret[467850](467854 'deref' call_tmp[601212]))
    (467852 return ret[467850])
  }
  function _domain[123390](?).interior[121839](arg _mt[123710]:_MT[227], arg this[123708]:_domain[123390](?), arg off[121836] :
  unknown call_tmp[601219] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method"
  {
    unknown ret[467859] "RVV" "temp"
    unknown call_tmp[601233] "maybe param" "maybe type" "temp"
    (601236 'move' call_tmp[601233](121843 call(352064 call (partial) dims _mt[232] this[123708])))
    unknown ranges[121844] "insert auto destroy"
    (491381 'init var' ranges[121844] call_tmp[601233])
    {
      unknown _indexOfInterest[121976] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121977] "expr temp" "temp"
      unknown call_tmp[601240] "expr temp" "maybe param" "maybe type" "temp"
      (601243 'move' call_tmp[601240](352106 call rank _mt[232] this[123708]))
      unknown call_tmp[601245] "expr temp" "maybe param" "maybe type" "temp"
      (601248 'move' call_tmp[601245](121991 call chpl_direct_range_iter 1 call_tmp[601240] 1))
      (121986 'move' _iterator[121977](121984 call _getIterator call_tmp[601245]))
      Defer
      {
        {
          (122007 call _freeIterator _iterator[121977])
        }
      }
      { scopeless type
        (121996 'move' _indexOfInterest[121976](121993 call iteratorIndex _iterator[121977]))
      }
      ForLoop
      {
        unknown i[122000] "index var" "insert auto destroy"
        (122002 'move' i[122000] _indexOfInterest[121976])
        {
          unknown tmp[400131] "maybe param" "temp"
          unknown tmp[400152] "maybe param" "temp"
          unknown call_tmp[601250] "expr temp" "maybe param" "maybe type" "temp"
          (601253 'move' call_tmp[601250](121856 call off[121836] i[122000]))
          (400163 'move' tmp[400152](121858 call > call_tmp[601250] 0))
          unknown call_tmp[601255] "expr temp" "maybe param" "maybe type" "temp"
          (601258 'move' call_tmp[601255](400165 call _cond_invalid tmp[400152]))
          if call_tmp[601255]
          {
            (400168 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[514022] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[514023] "maybe param" "temp"
          unknown call_tmp[601260] "expr temp" "maybe param" "maybe type" "temp"
          (601263 'move' call_tmp[601260](400153 call isTrue tmp[400152]))
          (514028 'move' tmp[514023](514026 call _cond_test call_tmp[601260]))
          if tmp[514023]
          {
            unknown tmp[514030] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[601267] "expr temp" "maybe param" "maybe type" "temp"
            (601270 'move' call_tmp[601267](121863 call(352070 call (partial) dim _mt[232] this[123708]) i[122000]))
            unknown call_tmp[601274] "expr temp" "maybe param" "maybe type" "temp"
            (601277 'move' call_tmp[601274](121864 call _high _mt[232] call_tmp[601267]))
            unknown call_tmp[601279] "expr temp" "maybe param" "maybe type" "temp"
            (601282 'move' call_tmp[601279](121868 call + call_tmp[601274] 1))
            unknown call_tmp[601284] "expr temp" "maybe param" "maybe type" "temp"
            (601287 'move' call_tmp[601284](121873 call off[121836] i[122000]))
            unknown call_tmp[601289] "expr temp" "maybe param" "maybe type" "temp"
            (601292 'move' call_tmp[601289](121874 call - call_tmp[601279] call_tmp[601284]))
            unknown call_tmp[601296] "expr temp" "maybe param" "maybe type" "temp"
            (601299 'move' call_tmp[601296](121879 call(352077 call (partial) dim _mt[232] this[123708]) i[122000]))
            unknown call_tmp[601303] "expr temp" "maybe param" "maybe type" "temp"
            (601306 'move' call_tmp[601303](121880 call _low _mt[232] call_tmp[601296]))
            unknown call_tmp[601308] "expr temp" "maybe param" "maybe type" "temp"
            (601311 'move' call_tmp[601308](121883 call < call_tmp[601289] call_tmp[601303]))
            (514032 'move' tmp[514030](400156 call isTrue call_tmp[601308]))
            (514037 'move' tmp[514022](514034 '_paramFoldLogical' tmp[514023] tmp[514030]))
          }
          {
            (514042 'move' tmp[514022](514039 '_paramFoldLogical' tmp[514023] 0))
          }
          (400142 'move' tmp[400131] tmp[514022])
          unknown call_tmp[601313] "expr temp" "maybe param" "maybe type" "temp"
          (601316 'move' call_tmp[601313](400144 call _cond_invalid tmp[400131]))
          if call_tmp[601313]
          {
            (400147 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[514076] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[514077] "maybe param" "temp"
          unknown call_tmp[601318] "expr temp" "maybe param" "maybe type" "temp"
          (601321 'move' call_tmp[601318](400132 call isTrue tmp[400131]))
          (514082 'move' tmp[514077](514080 call _cond_test call_tmp[601318]))
          if tmp[514077]
          {
            (514087 'move' tmp[514076](514084 '_paramFoldLogical' tmp[514077] 1))
          }
          {
            unknown tmp[400173] "maybe param" "temp"
            unknown call_tmp[601323] "expr temp" "maybe param" "maybe type" "temp"
            (601326 'move' call_tmp[601323](121890 call off[121836] i[122000]))
            (400184 'move' tmp[400173](121892 call < call_tmp[601323] 0))
            unknown call_tmp[601328] "expr temp" "maybe param" "maybe type" "temp"
            (601331 'move' call_tmp[601328](400186 call _cond_invalid tmp[400173]))
            if call_tmp[601328]
            {
              (400189 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[514049] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[514050] "maybe param" "temp"
            unknown call_tmp[601333] "expr temp" "maybe param" "maybe type" "temp"
            (601336 'move' call_tmp[601333](400174 call isTrue tmp[400173]))
            (514055 'move' tmp[514050](514053 call _cond_test call_tmp[601333]))
            if tmp[514050]
            {
              unknown tmp[514057] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[601340] "expr temp" "maybe param" "maybe type" "temp"
              (601343 'move' call_tmp[601340](121897 call(352084 call (partial) dim _mt[232] this[123708]) i[122000]))
              unknown call_tmp[601347] "expr temp" "maybe param" "maybe type" "temp"
              (601350 'move' call_tmp[601347](121898 call _low _mt[232] call_tmp[601340]))
              unknown call_tmp[601352] "expr temp" "maybe param" "maybe type" "temp"
              (601355 'move' call_tmp[601352](121902 call - call_tmp[601347] 1))
              unknown call_tmp[601357] "expr temp" "maybe param" "maybe type" "temp"
              (601360 'move' call_tmp[601357](121907 call off[121836] i[122000]))
              unknown call_tmp[601362] "expr temp" "maybe param" "maybe type" "temp"
              (601365 'move' call_tmp[601362](121908 call - call_tmp[601352] call_tmp[601357]))
              unknown call_tmp[601369] "expr temp" "maybe param" "maybe type" "temp"
              (601372 'move' call_tmp[601369](121913 call(352091 call (partial) dim _mt[232] this[123708]) i[122000]))
              unknown call_tmp[601376] "expr temp" "maybe param" "maybe type" "temp"
              (601379 'move' call_tmp[601376](121914 call _high _mt[232] call_tmp[601369]))
              unknown call_tmp[601381] "expr temp" "maybe param" "maybe type" "temp"
              (601384 'move' call_tmp[601381](121917 call > call_tmp[601362] call_tmp[601376]))
              (514059 'move' tmp[514057](400177 call isTrue call_tmp[601381]))
              (514064 'move' tmp[514049](514061 '_paramFoldLogical' tmp[514050] tmp[514057]))
            }
            {
              (514069 'move' tmp[514049](514066 '_paramFoldLogical' tmp[514050] 0))
            }
            unknown tmp[514089] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (514091 'move' tmp[514089](400136 call isTrue tmp[514049]))
            (514096 'move' tmp[514076](514093 '_paramFoldLogical' tmp[514077] tmp[514089]))
          }
          unknown call_tmp[601386] "expr temp" "maybe param" "maybe type" "temp"
          (601389 'move' call_tmp[601386](121946 call _cond_test tmp[514076]))
          if call_tmp[601386]
          {
            (121943 call halt "***Error: Argument to 'interior' function out of range in dimension " i[122000] "***")
          }
          unknown call_tmp[601391] "expr temp" "maybe param" "maybe type" "temp"
          (601394 'move' call_tmp[601391](121954 call ranges[121844] i[122000]))
          unknown call_tmp[601398] "expr temp" "maybe param" "maybe type" "temp"
          (601401 'move' call_tmp[601398](352099 call _value _mt[232] this[123708]))
          unknown call_tmp[601405] "expr temp" "maybe param" "maybe type" "temp"
          (601408 'move' call_tmp[601405](121961 call(121956 call (partial) dsiDim _mt[232] call_tmp[601398]) i[122000]))
          unknown call_tmp[601412] "expr temp" "maybe param" "maybe type" "temp"
          (601415 'move' call_tmp[601412](121970 call off[121836] i[122000]))
          unknown call_tmp[601417] "expr temp" "maybe param" "maybe type" "temp"
          (601420 'move' call_tmp[601417](121972 call(121964 call (partial) interior _mt[232] call_tmp[601405]) call_tmp[601412]))
          (121973 call = call_tmp[601391] call_tmp[601417])
        }
        label _continueLabel[121981]
        _indexOfInterest[121976]
        _iterator[121977]
      }
      label _breakLabel[121982]
    }
    unknown call_tmp[601424] "expr temp" "maybe param" "maybe type" "temp"
    (601427 'move' call_tmp[601424](352111 call dist _mt[232] this[123708]))
    unknown call_tmp[601431] "expr temp" "maybe param" "maybe type" "temp"
    (601434 'move' call_tmp[601431](352115 call rank _mt[232] this[123708]))
    unknown call_tmp[601438] "expr temp" "maybe param" "maybe type" "temp"
    (601441 'move' call_tmp[601438](352119 call _value _mt[232] this[123708]))
    unknown call_tmp[601445] "expr temp" "maybe param" "maybe type" "temp"
    (601448 'move' call_tmp[601445](122019 call idxType _mt[232] call_tmp[601438]))
    unknown call_tmp[601452] "expr temp" "maybe param" "maybe type" "temp"
    (601455 'move' call_tmp[601452](352123 call stridable _mt[232] this[123708]))
    unknown call_tmp[601457] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (601460 'move' call_tmp[601457](691433 'new' _domain[123390](?) call_tmp[601424] call_tmp[601431] call_tmp[601445] call_tmp[601452] ranges[121844]))
    (467864 'move' ret[467859](467863 'deref' call_tmp[601457]))
    (467861 return ret[467859])
  }
  function _domain[123390](?).interior[122036](arg _mt[123714]:_MT[227], arg this[123712]:_domain[123390](?), arg off[122033] :
  (352128 call intIdxType _mt[232] this[123712])) : _unknown[43] "method" "primary method"
  {
    unknown ret[467868] "RVV" "temp"
    unknown offTup[122046] "insert auto destroy"
    unknown call_tmp[601466] "expr temp" "maybe param" "maybe type" "temp"
    (601469 'move' call_tmp[601466](352136 call rank _mt[232] this[123712]))
    unknown call_tmp[601473] "expr temp" "maybe param" "maybe type" "temp"
    (601476 'move' call_tmp[601473](352140 call intIdxType _mt[232] this[123712]))
    unknown call_tmp[601478] "expr temp" "maybe param" "maybe type" "temp"
    (601481 'move' call_tmp[601478](122044 call * call_tmp[601466] call_tmp[601473]))
    (491383 'default init var' offTup[122046] call_tmp[601478])
    {
      unknown _indexOfInterest[122063] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122064] "expr temp" "temp"
      unknown call_tmp[601485] "expr temp" "maybe param" "maybe type" "temp"
      (601488 'move' call_tmp[601485](352147 call rank _mt[232] this[123712]))
      unknown call_tmp[601490] "expr temp" "maybe param" "maybe type" "temp"
      (601493 'move' call_tmp[601490](122078 call chpl_direct_range_iter 1 call_tmp[601485] 1))
      (122073 'move' _iterator[122064](122071 call _getIterator call_tmp[601490]))
      Defer
      {
        {
          (122094 call _freeIterator _iterator[122064])
        }
      }
      { scopeless type
        (122083 'move' _indexOfInterest[122063](122080 call iteratorIndex _iterator[122064]))
      }
      ForLoop
      {
        unknown i[122087] "index var" "insert auto destroy"
        (122089 'move' i[122087] _indexOfInterest[122063])
        unknown call_tmp[601495] "expr temp" "maybe param" "maybe type" "temp"
        (601498 'move' call_tmp[601495](122058 call offTup[122046] i[122087]))
        (122060 call = call_tmp[601495] off[122033])
        label _continueLabel[122068]
        _indexOfInterest[122063]
        _iterator[122064]
      }
      label _breakLabel[122069]
    }
    unknown call_tmp[601502] "expr temp" "maybe param" "maybe type" "temp"
    (601505 'move' call_tmp[601502](122104 call(352151 call (partial) interior _mt[232] this[123712]) offTup[122046]))
    (467873 'move' ret[467868](467872 'deref' call_tmp[601502]))
    (467870 return ret[467868])
  }
  where {
    unknown call_tmp[601509] "expr temp" "maybe param" "maybe type" "temp"
    (601512 'move' call_tmp[601509](352132 call rank _mt[232] this[123712]))
    (122040 call != call_tmp[601509] 1)
  }
  function _domain[123390](?).translate[122114](arg _mt[123718]:_MT[227], arg this[123716]:_domain[123390](?), arg off[122112]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[601514] "expr temp" "maybe param" "maybe type" "temp"
    (601517 'move' call_tmp[601514](122125 call isAssociativeDom this[123716]))
    unknown call_tmp[601519] "expr temp" "maybe param" "maybe type" "temp"
    (601522 'move' call_tmp[601519](122226 call _cond_test call_tmp[601514]))
    if call_tmp[601519]
    {
      (122144 call compilerError "translate not supported on associative domains")
    }
    {
      unknown call_tmp[601524] "expr temp" "maybe param" "maybe type" "temp"
      (601527 'move' call_tmp[601524](122149 call isOpaqueDom this[123716]))
      unknown call_tmp[601529] "expr temp" "maybe param" "maybe type" "temp"
      (601532 'move' call_tmp[601529](122220 call _cond_test call_tmp[601524]))
      if call_tmp[601529]
      {
        (122168 call compilerError "translate not supported on opaque domains")
      }
      {
        unknown call_tmp[601534] "expr temp" "maybe param" "maybe type" "temp"
        (601537 'move' call_tmp[601534](122173 call isSparseDom this[123716]))
        unknown call_tmp[601539] "expr temp" "maybe param" "maybe type" "temp"
        (601542 'move' call_tmp[601539](122214 call _cond_test call_tmp[601534]))
        if call_tmp[601539]
        {
          (122192 call compilerError "translate not supported on sparse domains")
        }
        {
          (122212 call compilerError "translate not supported on this domain type")
        }
      }
    }
    (467875 return _void[47])
  }
  where {
    unknown call_tmp[601544] "expr temp" "maybe param" "maybe type" "temp"
    (601547 'move' call_tmp[601544](122119 call isRectangularDom this[123716]))
    (122120 call ! call_tmp[601544])
  }
  function _domain[123390](?).translate[122242](arg _mt[123722]:_MT[227], arg this[123720]:_domain[123390](?), arg off[122239]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467879] "RVV" "temp"
    unknown call_tmp[601553] "expr temp" "maybe param" "maybe type" "temp"
    (601556 'move' call_tmp[601553](122247 call(352164 call (partial) translate _mt[232] this[123720]) off[122239]))
    (467884 'move' ret[467879](467883 'deref' call_tmp[601553]))
    (467881 return ret[467879])
  }
  function _domain[123390](?).translate[122257](arg _mt[123726]:_MT[227], arg this[123724]:_domain[123390](?), arg off[122255]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467888] "RVV" "temp"
    unknown call_tmp[601560] "expr temp" "maybe param" "maybe type" "temp"
    (601563 'move' call_tmp[601560](122264 call size _mt[232] off[122255]))
    unknown call_tmp[601567] "expr temp" "maybe param" "maybe type" "temp"
    (601570 'move' call_tmp[601567](352171 call rank _mt[232] this[123724]))
    unknown call_tmp[601572] "expr temp" "maybe param" "maybe type" "temp"
    (601575 'move' call_tmp[601572](122268 call != call_tmp[601560] call_tmp[601567]))
    unknown call_tmp[601577] "expr temp" "maybe param" "maybe type" "temp"
    (601580 'move' call_tmp[601577](122290 call _cond_test call_tmp[601572]))
    if call_tmp[601577]
    {
      (122288 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown call_tmp[601584] "maybe param" "maybe type" "temp"
    (601587 'move' call_tmp[601584](122298 call(352175 call (partial) dims _mt[232] this[123724])))
    unknown ranges[122299] "insert auto destroy"
    (491385 'init var' ranges[122299] call_tmp[601584])
    {
      unknown _indexOfInterest[122330] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122331] "expr temp" "temp"
      unknown call_tmp[601591] "expr temp" "maybe param" "maybe type" "temp"
      (601594 'move' call_tmp[601591](352188 call rank _mt[232] this[123724]))
      unknown call_tmp[601596] "expr temp" "maybe param" "maybe type" "temp"
      (601599 'move' call_tmp[601596](122345 call chpl_direct_range_iter 1 call_tmp[601591] 1))
      (122340 'move' _iterator[122331](122338 call _getIterator call_tmp[601596]))
      Defer
      {
        {
          (122361 call _freeIterator _iterator[122331])
        }
      }
      { scopeless type
        (122350 'move' _indexOfInterest[122330](122347 call iteratorIndex _iterator[122331]))
      }
      ForLoop
      {
        unknown i[122354] "index var" "insert auto destroy"
        (122356 'move' i[122354] _indexOfInterest[122330])
        unknown call_tmp[601601] "expr temp" "maybe param" "maybe type" "temp"
        (601604 'move' call_tmp[601601](122310 call ranges[122299] i[122354]))
        unknown call_tmp[601608] "expr temp" "maybe param" "maybe type" "temp"
        (601611 'move' call_tmp[601608](352181 call _value _mt[232] this[123724]))
        unknown call_tmp[601615] "expr temp" "maybe param" "maybe type" "temp"
        (601618 'move' call_tmp[601615](122317 call(122312 call (partial) dsiDim _mt[232] call_tmp[601608]) i[122354]))
        unknown call_tmp[601622] "expr temp" "maybe param" "maybe type" "temp"
        (601625 'move' call_tmp[601622](122324 call off[122255] i[122354]))
        unknown call_tmp[601627] "expr temp" "maybe param" "maybe type" "temp"
        (601630 'move' call_tmp[601627](122326 call(122318 call (partial) translate _mt[232] call_tmp[601615]) call_tmp[601622]))
        (122327 call = call_tmp[601601] call_tmp[601627])
        label _continueLabel[122335]
        _indexOfInterest[122330]
        _iterator[122331]
      }
      label _breakLabel[122336]
    }
    unknown call_tmp[601634] "expr temp" "maybe param" "maybe type" "temp"
    (601637 'move' call_tmp[601634](352193 call dist _mt[232] this[123724]))
    unknown call_tmp[601641] "expr temp" "maybe param" "maybe type" "temp"
    (601644 'move' call_tmp[601641](352197 call rank _mt[232] this[123724]))
    unknown call_tmp[601648] "expr temp" "maybe param" "maybe type" "temp"
    (601651 'move' call_tmp[601648](352201 call _value _mt[232] this[123724]))
    unknown call_tmp[601655] "expr temp" "maybe param" "maybe type" "temp"
    (601658 'move' call_tmp[601655](122373 call idxType _mt[232] call_tmp[601648]))
    unknown call_tmp[601662] "expr temp" "maybe param" "maybe type" "temp"
    (601665 'move' call_tmp[601662](352205 call stridable _mt[232] this[123724]))
    unknown call_tmp[601667] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (601670 'move' call_tmp[601667](691434 'new' _domain[123390](?) call_tmp[601634] call_tmp[601641] call_tmp[601655] call_tmp[601662] ranges[122299]))
    (467893 'move' ret[467888](467892 'deref' call_tmp[601667]))
    (467890 return ret[467888])
  }
  where {
    (122262 call isTuple off[122255])
  }
  function _domain[123390](?).translate[122389](arg _mt[123730]:_MT[227], arg this[123728]:_domain[123390](?), arg off[122387]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467897] "RVV" "temp"
    unknown offTup[122408] "insert auto destroy"
    unknown call_tmp[601674] "expr temp" "maybe param" "maybe type" "temp"
    (601677 'move' call_tmp[601674](352215 call rank _mt[232] this[123728]))
    unknown call_tmp[601679] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (601682 'move' call_tmp[601679](122405 'typeof' off[122387]))
    unknown call_tmp[601684] "expr temp" "maybe param" "maybe type" "temp"
    (601687 'move' call_tmp[601684](122406 call * call_tmp[601674] call_tmp[601679]))
    (491387 'default init var' offTup[122408] call_tmp[601684])
    {
      unknown _indexOfInterest[122425] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122426] "expr temp" "temp"
      unknown call_tmp[601691] "expr temp" "maybe param" "maybe type" "temp"
      (601694 'move' call_tmp[601691](352223 call rank _mt[232] this[123728]))
      unknown call_tmp[601696] "expr temp" "maybe param" "maybe type" "temp"
      (601699 'move' call_tmp[601696](122440 call chpl_direct_range_iter 1 call_tmp[601691] 1))
      (122435 'move' _iterator[122426](122433 call _getIterator call_tmp[601696]))
      Defer
      {
        {
          (122456 call _freeIterator _iterator[122426])
        }
      }
      { scopeless type
        (122445 'move' _indexOfInterest[122425](122442 call iteratorIndex _iterator[122426]))
      }
      ForLoop
      {
        unknown i[122449] "index var" "insert auto destroy"
        (122451 'move' i[122449] _indexOfInterest[122425])
        unknown call_tmp[601701] "expr temp" "maybe param" "maybe type" "temp"
        (601704 'move' call_tmp[601701](122420 call offTup[122408] i[122449]))
        (122422 call = call_tmp[601701] off[122387])
        label _continueLabel[122430]
        _indexOfInterest[122425]
        _iterator[122426]
      }
      label _breakLabel[122431]
    }
    unknown call_tmp[601708] "expr temp" "maybe param" "maybe type" "temp"
    (601711 'move' call_tmp[601708](122466 call(352227 call (partial) translate _mt[232] this[123728]) offTup[122408]))
    (467902 'move' ret[467897](467901 'deref' call_tmp[601708]))
    (467899 return ret[467897])
  }
  where {
    unknown tmp[400194] "maybe param" "temp"
    unknown call_tmp[601715] "expr temp" "maybe param" "maybe type" "temp"
    (601718 'move' call_tmp[601715](352210 call rank _mt[232] this[123728]))
    (400205 'move' tmp[400194](122393 call != call_tmp[601715] 1))
    unknown call_tmp[601720] "expr temp" "maybe param" "maybe type" "temp"
    (601723 'move' call_tmp[601720](400207 call _cond_invalid tmp[400194]))
    if call_tmp[601720]
    {
      (400210 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514103] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514104] "maybe param" "temp"
    unknown call_tmp[601725] "expr temp" "maybe param" "maybe type" "temp"
    (601728 'move' call_tmp[601725](400195 call isTrue tmp[400194]))
    (514109 'move' tmp[514104](514107 call _cond_test call_tmp[601725]))
    if tmp[514104]
    {
      unknown tmp[514111] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[601730] "expr temp" "maybe param" "maybe type" "temp"
      (601733 'move' call_tmp[601730](122398 call isTuple off[122387]))
      unknown call_tmp[601735] "expr temp" "maybe param" "maybe type" "temp"
      (601738 'move' call_tmp[601735](122399 call ! call_tmp[601730]))
      (514113 'move' tmp[514111](400198 call isTrue call_tmp[601735]))
      (514118 'move' tmp[514103](514115 '_paramFoldLogical' tmp[514104] tmp[514111]))
    }
    {
      (514123 'move' tmp[514103](514120 '_paramFoldLogical' tmp[514104] 0))
    }
    (691857 call _statementLevelSymbol tmp[514103])
  }
  function _domain[123390](?).isEmpty[122474](arg _mt[123734]:_MT[227], arg this[123732]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467906] "RVV" "temp"
    unknown call_tmp[601742] "expr temp" "maybe param" "maybe type" "temp"
    (601745 'move' call_tmp[601742](122478 call size _mt[232] this[123732]))
    unknown call_tmp[601747] "expr temp" "maybe param" "maybe type" "temp"
    (601750 'move' call_tmp[601747](122482 call == call_tmp[601742] 0))
    (467912 'move' ret[467906](467911 'coerce' call_tmp[601747] bool[10]))
    (467908 return ret[467906])
  }
  { scopeless type
    bool[10]
  }
  function _domain[123390](?).chpl__unTranslate[122498](arg _mt[123738]:_MT[227], arg this[123736]:_domain[123390](?), arg off[122494]:integral[188](?) ...) : _unknown[43] "method" "primary method"
  {
    unknown ret[467916] "RVV" "temp"
    unknown call_tmp[601756] "expr temp" "maybe param" "maybe type" "temp"
    (601759 'move' call_tmp[601756](122503 call(352238 call (partial) chpl__unTranslate _mt[232] this[123736]) off[122494]))
    (467921 'move' ret[467916](467920 'deref' call_tmp[601756]))
    (467918 return ret[467916])
  }
  function _domain[123390](?).chpl__unTranslate[122518](arg _mt[123742]:_MT[227], arg this[123740]:_domain[123390](?), arg off[122515] :
  unknown call_tmp[601763] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method"
  {
    unknown ret[467925] "RVV" "temp"
    unknown call_tmp[601777] "maybe param" "maybe type" "temp"
    (601780 'move' call_tmp[601777](122522 call(352251 call (partial) dims _mt[232] this[123740])))
    unknown ranges[122523] "insert auto destroy"
    (491389 'init var' ranges[122523] call_tmp[601777])
    {
      unknown _indexOfInterest[122554] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122555] "expr temp" "temp"
      unknown call_tmp[601784] "expr temp" "maybe param" "maybe type" "temp"
      (601787 'move' call_tmp[601784](352264 call rank _mt[232] this[123740]))
      unknown call_tmp[601789] "expr temp" "maybe param" "maybe type" "temp"
      (601792 'move' call_tmp[601789](122569 call chpl_direct_range_iter 1 call_tmp[601784] 1))
      (122564 'move' _iterator[122555](122562 call _getIterator call_tmp[601789]))
      Defer
      {
        {
          (122585 call _freeIterator _iterator[122555])
        }
      }
      { scopeless type
        (122574 'move' _indexOfInterest[122554](122571 call iteratorIndex _iterator[122555]))
      }
      ForLoop
      {
        unknown i[122578] "index var" "insert auto destroy"
        (122580 'move' i[122578] _indexOfInterest[122554])
        unknown call_tmp[601794] "expr temp" "maybe param" "maybe type" "temp"
        (601797 'move' call_tmp[601794](122535 call ranges[122523] i[122578]))
        unknown call_tmp[601801] "expr temp" "maybe param" "maybe type" "temp"
        (601804 'move' call_tmp[601801](122539 call(352257 call (partial) dim _mt[232] this[123740]) i[122578]))
        unknown call_tmp[601808] "expr temp" "maybe param" "maybe type" "temp"
        (601811 'move' call_tmp[601808](122548 call off[122515] i[122578]))
        unknown call_tmp[601813] "expr temp" "maybe param" "maybe type" "temp"
        (601816 'move' call_tmp[601813](122550 call(122542 call (partial) chpl__unTranslate _mt[232] call_tmp[601801]) call_tmp[601808]))
        (122551 call = call_tmp[601794] call_tmp[601813])
        label _continueLabel[122559]
        _indexOfInterest[122554]
        _iterator[122555]
      }
      label _breakLabel[122560]
    }
    unknown call_tmp[601820] "expr temp" "maybe param" "maybe type" "temp"
    (601823 'move' call_tmp[601820](352269 call dist _mt[232] this[123740]))
    unknown call_tmp[601827] "expr temp" "maybe param" "maybe type" "temp"
    (601830 'move' call_tmp[601827](352273 call rank _mt[232] this[123740]))
    unknown call_tmp[601834] "expr temp" "maybe param" "maybe type" "temp"
    (601837 'move' call_tmp[601834](352277 call _value _mt[232] this[123740]))
    unknown call_tmp[601841] "expr temp" "maybe param" "maybe type" "temp"
    (601844 'move' call_tmp[601841](122597 call idxType _mt[232] call_tmp[601834]))
    unknown call_tmp[601848] "expr temp" "maybe param" "maybe type" "temp"
    (601851 'move' call_tmp[601848](352281 call stridable _mt[232] this[123740]))
    unknown call_tmp[601853] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (601856 'move' call_tmp[601853](691435 'new' _domain[123390](?) call_tmp[601820] call_tmp[601827] call_tmp[601841] call_tmp[601848] ranges[122523]))
    (467930 'move' ret[467925](467929 'deref' call_tmp[601853]))
    (467927 return ret[467925])
  }
  function _domain[123390](?).setIndices[122612](arg _mt[123746]:_MT[227], arg this[123744]:_domain[123390](?), arg x[122610]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[601860] "expr temp" "maybe param" "maybe type" "temp"
    (601863 'move' call_tmp[601860](352286 call _value _mt[232] this[123744]))
    (122620 call(122615 call (partial) dsiSetIndices _mt[232] call_tmp[601860]) x[122610])
    unknown call_tmp[601869] "expr temp" "maybe param" "maybe type" "temp"
    (601872 'move' call_tmp[601869](352292 call _instance _mt[232] this[123744]))
    unknown call_tmp[601874] "expr temp" "maybe param" "maybe type" "temp"
    (601877 'move' call_tmp[601874](122626 call _isPrivatized call_tmp[601869]))
    unknown call_tmp[601879] "expr temp" "maybe param" "maybe type" "temp"
    (601882 'move' call_tmp[601879](122633 call _cond_test call_tmp[601874]))
    if call_tmp[601879]
    {
      unknown call_tmp[601886] "expr temp" "maybe param" "maybe type" "temp"
      (601889 'move' call_tmp[601886](352296 call _value _mt[232] this[123744]))
      (122630 call _reprivatize call_tmp[601886])
    }
    (467932 return _void[47])
  }
  function _domain[123390](?).getIndices[122641](arg _mt[123750]:_MT[227], arg this[123748]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467936] "RVV" "temp"
    unknown call_tmp[601893] "expr temp" "maybe param" "maybe type" "temp"
    (601896 'move' call_tmp[601893](352300 call _value _mt[232] this[123748]))
    unknown call_tmp[601900] "expr temp" "maybe param" "maybe type" "temp"
    (601903 'move' call_tmp[601900](122650 call(122646 call (partial) dsiGetIndices _mt[232] call_tmp[601893])))
    (467941 'move' ret[467936](467940 'deref' call_tmp[601900]))
    (467938 return ret[467936])
  }
  function _domain[123390](?).writeThis[122660](arg _mt[123754]:_MT[227], arg this[123752]:_domain[123390](?), arg f[122658]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[601907] "expr temp" "maybe param" "maybe type" "temp"
    (601910 'move' call_tmp[601907](352304 call _value _mt[232] this[123752]))
    (122670 call(122665 call (partial) dsiSerialWrite _mt[232] call_tmp[601907]) f[122658])
    (467943 return _void[47])
  }
  function _domain[123390](?).readThis[122679](arg _mt[123758]:_MT[227], arg this[123756]:_domain[123390](?), arg f[122677]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[601916] "expr temp" "maybe param" "maybe type" "temp"
    (601919 'move' call_tmp[601916](352309 call _value _mt[232] this[123756]))
    (122689 call(122684 call (partial) dsiSerialRead _mt[232] call_tmp[601916]) f[122677])
    (467945 return _void[47])
  }
  function _domain[123390](?).localSlice[122700](arg _mt[123762]:_MT[227], arg this[123760]:_domain[123390](?), arg r[122697]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[467949] "RVV" "temp"
    unknown call_tmp[601927] "expr temp" "maybe param" "maybe type" "temp"
    (601930 'move' call_tmp[601927](352323 call _value _mt[232] this[123760]))
    unknown call_tmp[601932] "expr temp" "maybe param" "maybe type" "temp"
    (601935 'move' call_tmp[601932](122715 '_wide_get_locale' call_tmp[601927]))
    unknown call_tmp[601937] "expr temp" "maybe param" "maybe type" "temp"
    (601940 'move' call_tmp[601937](122716 call chpl_localeID_to_locale call_tmp[601932]))
    unknown call_tmp[601942] "expr temp" "maybe param" "maybe type" "temp"
    (601945 'move' call_tmp[601942](352326 call here[92085]))
    unknown call_tmp[601947] "expr temp" "maybe param" "maybe type" "temp"
    (601950 'move' call_tmp[601947](122719 call != call_tmp[601937] call_tmp[601942]))
    unknown call_tmp[601952] "expr temp" "maybe param" "maybe type" "temp"
    (601955 'move' call_tmp[601952](122766 call _cond_test call_tmp[601947]))
    if call_tmp[601952]
    {
      unknown call_tmp[601959] "expr temp" "maybe param" "maybe type" "temp"
      (601962 'move' call_tmp[601959](352329 call _value _mt[232] this[123760]))
      unknown call_tmp[601964] "expr temp" "maybe param" "maybe type" "temp"
      (601967 'move' call_tmp[601964](122743 '_wide_get_node' call_tmp[601959]))
      unknown call_tmp[601969] "expr temp" "maybe param" "maybe type" "temp"
      (601972 'move' call_tmp[601969](352332 call here[92085]))
      unknown call_tmp[601976] "expr temp" "maybe param" "maybe type" "temp"
      (601979 'move' call_tmp[601976](122761 call id _mt[232] call_tmp[601969]))
      (122764 call halt "Attempting to take a local slice of a domain on locale " call_tmp[601964] " from locale " call_tmp[601976])
    }
    unknown call_tmp[601981] "expr temp" "maybe param" "maybe type" "temp"
    (601984 'move' call_tmp[601981](122776 call this[123760](122774 'expand_tuple' r[122697])))
    (467954 'move' ret[467949](467953 'deref' call_tmp[601981]))
    (467951 return ret[467949])
  }
  where {
    unknown tmp[400215] "maybe param" "temp"
    (400226 'move' tmp[400215](122705 call chpl__isTupleOfRanges r[122697]))
    unknown call_tmp[601986] "expr temp" "maybe param" "maybe type" "temp"
    (601989 'move' call_tmp[601986](400228 call _cond_invalid tmp[400215]))
    if call_tmp[601986]
    {
      (400231 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514130] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514131] "maybe param" "temp"
    unknown call_tmp[601991] "expr temp" "maybe param" "maybe type" "temp"
    (601994 'move' call_tmp[601991](400216 call isTrue tmp[400215]))
    (514136 'move' tmp[514131](514134 call _cond_test call_tmp[601991]))
    if tmp[514131]
    {
      unknown tmp[514138] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[601998] "expr temp" "maybe param" "maybe type" "temp"
      (602001 'move' call_tmp[601998](352319 call _value _mt[232] this[123760]))
      unknown call_tmp[602005] "expr temp" "maybe param" "maybe type" "temp"
      (602008 'move' call_tmp[602005](122711 call(122707 call (partial) isDefaultRectangular _mt[232] call_tmp[601998])))
      (514140 'move' tmp[514138](400219 call isTrue call_tmp[602005]))
      (514145 'move' tmp[514130](514142 '_paramFoldLogical' tmp[514131] tmp[514138]))
    }
    {
      (514150 'move' tmp[514130](514147 '_paramFoldLogical' tmp[514131] 0))
    }
    (691859 call _statementLevelSymbol tmp[514130])
  }
  function _domain[123390](?).localSlice[122788](arg _mt[123766]:_MT[227], arg this[123764]:_domain[123390](?), arg r[122785]:_any[170](?) ...) : _unknown[43] "method" "primary method"
  {
    unknown ret[467958] "RVV" "temp"
    unknown call_tmp[602014] "expr temp" "maybe param" "maybe type" "temp"
    (602017 'move' call_tmp[602014](352346 call _value _mt[232] this[123764]))
    unknown call_tmp[602021] "expr temp" "maybe param" "maybe type" "temp"
    (602024 'move' call_tmp[602021](122813 call chpl__anyStridable r[122785]))
    unknown call_tmp[602026] "expr temp" "maybe param" "maybe type" "temp"
    (602029 'move' call_tmp[602026](122816 call(122807 call (partial) dsiLocalSlice _mt[232] call_tmp[602014]) call_tmp[602021] r[122785]))
    (467963 'move' ret[467958](467962 'deref' call_tmp[602026]))
    (467960 return ret[467958])
  }
  where {
    unknown tmp[400236] "maybe param" "temp"
    (400247 'move' tmp[400236](122793 call chpl__isTupleOfRanges r[122785]))
    unknown call_tmp[602031] "expr temp" "maybe param" "maybe type" "temp"
    (602034 'move' call_tmp[602031](400249 call _cond_invalid tmp[400236]))
    if call_tmp[602031]
    {
      (400252 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514157] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514158] "maybe param" "temp"
    unknown call_tmp[602036] "expr temp" "maybe param" "maybe type" "temp"
    (602039 'move' call_tmp[602036](400237 call isTrue tmp[400236]))
    (514163 'move' tmp[514158](514161 call _cond_test call_tmp[602036]))
    if tmp[514158]
    {
      unknown tmp[514165] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602043] "expr temp" "maybe param" "maybe type" "temp"
      (602046 'move' call_tmp[602043](352342 call _value _mt[232] this[123764]))
      unknown call_tmp[602050] "expr temp" "maybe param" "maybe type" "temp"
      (602053 'move' call_tmp[602050](122799 call(122795 call (partial) isDefaultRectangular _mt[232] call_tmp[602043])))
      unknown call_tmp[602055] "expr temp" "maybe param" "maybe type" "temp"
      (602058 'move' call_tmp[602055](122800 call ! call_tmp[602050]))
      (514167 'move' tmp[514165](400240 call isTrue call_tmp[602055]))
      (514172 'move' tmp[514157](514169 '_paramFoldLogical' tmp[514158] tmp[514165]))
    }
    {
      (514177 'move' tmp[514157](514174 '_paramFoldLogical' tmp[514158] 0))
    }
    (691861 call _statementLevelSymbol tmp[514157])
  }
  function _domain[123390](?).localSlice[122829](arg _mt[123770]:_MT[227], arg this[123768]:_domain[123390](?), arg d[122826]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[467967] "RVV" "temp"
    unknown call_tmp[602064] "expr temp" "maybe param" "maybe type" "temp"
    (602067 'move' call_tmp[602064](122837 call(122833 call (partial) getIndices _mt[232] d[122826])))
    unknown call_tmp[602069] "expr temp" "maybe param" "maybe type" "temp"
    (602072 'move' call_tmp[602069](122840 call(352353 call (partial) localSlice _mt[232] this[123768])(122838 'expand_tuple' call_tmp[602064])))
    (467972 'move' ret[467967](467971 'deref' call_tmp[602069]))
    (467969 return ret[467967])
  }
  function _domain[123390](?).sorted[122857](arg _mt[123774]:_MT[227], arg this[123772]:_domain[123390](?), arg comparator[122853]:_any[170](?) :
  (692343 call chpl_defaultComparator) =
  (122852 call chpl_defaultComparator)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[467976] "RVV" "temp"
    {
      unknown _indexOfInterest[122873] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122874] "expr temp" "temp"
      unknown call_tmp[602076] "expr temp" "maybe param" "maybe type" "temp"
      (602079 'move' call_tmp[602076](352358 call _value _mt[232] this[123772]))
      unknown call_tmp[602083] "expr temp" "maybe param" "maybe type" "temp"
      (602086 'move' call_tmp[602083](122868 call(122863 call (partial) dsiSorted _mt[232] call_tmp[602076]) comparator[122853]))
      (122883 'move' _iterator[122874](122881 call _getIterator call_tmp[602083]))
      Defer
      {
        {
          (122900 call _freeIterator _iterator[122874])
        }
      }
      { scopeless type
        (122889 'move' _indexOfInterest[122873](122886 call iteratorIndex _iterator[122874]))
      }
      ForLoop
      {
        unknown i[122893] "index var" "insert auto destroy"
        (122895 'move' i[122893] _indexOfInterest[122873])
        {
          unknown yret[467980] "YVV" "temp"
          (467983 'move' yret[467980](467982 'deref' i[122893]))
          (467985 yield yret[467980])
        }
        label _continueLabel[122878]
        _indexOfInterest[122873]
        _iterator[122874]
      }
      label _breakLabel[122879]
    }
    (467978 return ret[467976])
  }
  function _domain[123390](?).displayRepresentation[122912](arg _mt[123778]:_MT[227], arg this[123776]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[602090] "expr temp" "maybe param" "maybe type" "temp"
    (602093 'move' call_tmp[602090](352364 call _value _mt[232] this[123776]))
    (122919 call(122915 call (partial) dsiDisplayRepresentation _mt[232] call_tmp[602090]))
    (467987 return _void[47])
  }
  function _domain[123390](?).defaultSparseDist[122926](arg _mt[123782]:_MT[227], arg this[123780]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[467991] "RVV" "temp"
    unknown call_tmp[602099] "expr temp" "maybe param" "maybe type" "temp"
    (602102 'move' call_tmp[602099](352368 call _value _mt[232] this[123780]))
    unknown call_tmp[602106] "expr temp" "maybe param" "maybe type" "temp"
    (602109 'move' call_tmp[602106](122930 call dist _mt[232] call_tmp[602099]))
    unknown call_tmp[602111] "expr temp" "maybe param" "maybe type" "temp"
    (602114 'move' call_tmp[602111](122934 call _getDistribution call_tmp[602106]))
    (467996 'move' ret[467991](467995 'deref' call_tmp[602111]))
    (467993 return ret[467991])
  }
  function _domain[123390](?).safeCast[122946](arg _mt[123786]:_MT[227], arg this[123784]:_domain[123390](?), arg t[122943]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[468000] "RVV" "temp"
    const tmpD[122959] "const" "insert auto destroy"
    (491391 'default init var' tmpD[122959] t[122943])
    unknown call_tmp[602118] "expr temp" "maybe param" "maybe type" "temp"
    (602121 'move' call_tmp[602118](122964 call rank _mt[232] tmpD[122959]))
    unknown call_tmp[602125] "expr temp" "maybe param" "maybe type" "temp"
    (602128 'move' call_tmp[602125](122968 call rank _mt[232] this[123784]))
    unknown call_tmp[602130] "expr temp" "maybe param" "maybe type" "temp"
    (602133 'move' call_tmp[602130](122971 call != call_tmp[602118] call_tmp[602125]))
    unknown call_tmp[602135] "expr temp" "maybe param" "maybe type" "temp"
    (602138 'move' call_tmp[602135](122993 call _cond_test call_tmp[602130]))
    if call_tmp[602135]
    {
      (122991 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[602142] "expr temp" "maybe param" "maybe type" "temp"
    (602145 'move' call_tmp[602142](122999 call idxType _mt[232] tmpD[122959]))
    unknown call_tmp[602149] "expr temp" "maybe param" "maybe type" "temp"
    (602152 'move' call_tmp[602149](123003 call idxType _mt[232] this[123784]))
    unknown call_tmp[602154] "expr temp" "maybe param" "maybe type" "temp"
    (602157 'move' call_tmp[602154](123006 call != call_tmp[602142] call_tmp[602149]))
    unknown call_tmp[602159] "expr temp" "maybe param" "maybe type" "temp"
    (602162 'move' call_tmp[602159](123028 call _cond_test call_tmp[602154]))
    if call_tmp[602159]
    {
      (123026 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[602166] "expr temp" "maybe param" "maybe type" "temp"
    (602169 'move' call_tmp[602166](123034 call stridable _mt[232] tmpD[122959]))
    unknown call_tmp[602173] "expr temp" "maybe param" "maybe type" "temp"
    (602176 'move' call_tmp[602173](123038 call stridable _mt[232] this[123784]))
    unknown call_tmp[602178] "expr temp" "maybe param" "maybe type" "temp"
    (602181 'move' call_tmp[602178](123041 call == call_tmp[602166] call_tmp[602173]))
    unknown call_tmp[602183] "expr temp" "maybe param" "maybe type" "temp"
    (602186 'move' call_tmp[602183](123213 call _cond_test call_tmp[602178]))
    if call_tmp[602183]
    {
      (468005 'move' ret[468000](468004 'deref' this[123784]))
      gotoReturn _end_safeCast[467998] _end_safeCast[467998]
    }
    {
      unknown tmp[400278] "maybe param" "temp"
      unknown call_tmp[602190] "expr temp" "maybe param" "maybe type" "temp"
      (602193 'move' call_tmp[602190](123047 call stridable _mt[232] tmpD[122959]))
      (400289 'move' tmp[400278](123050 call ! call_tmp[602190]))
      unknown call_tmp[602195] "expr temp" "maybe param" "maybe type" "temp"
      (602198 'move' call_tmp[602195](400291 call _cond_invalid tmp[400278]))
      if call_tmp[602195]
      {
        (400294 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[514184] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[514185] "maybe param" "temp"
      unknown call_tmp[602200] "expr temp" "maybe param" "maybe type" "temp"
      (602203 'move' call_tmp[602200](400279 call isTrue tmp[400278]))
      (514190 'move' tmp[514185](514188 call _cond_test call_tmp[602200]))
      if tmp[514185]
      {
        unknown tmp[514192] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[602207] "expr temp" "maybe param" "maybe type" "temp"
        (602210 'move' call_tmp[602207](123053 call stridable _mt[232] this[123784]))
        (514194 'move' tmp[514192](400282 call isTrue call_tmp[602207]))
        (514199 'move' tmp[514184](514196 '_paramFoldLogical' tmp[514185] tmp[514192]))
      }
      {
        (514204 'move' tmp[514184](514201 '_paramFoldLogical' tmp[514185] 0))
      }
      unknown call_tmp[602212] "expr temp" "maybe param" "maybe type" "temp"
      (602215 'move' call_tmp[602212](123209 call _cond_test tmp[514184]))
      if call_tmp[602212]
      {
        unknown call_tmp[602219] "maybe param" "maybe type" "temp"
        (602222 'move' call_tmp[602219](123063 call(123059 call (partial) getIndices _mt[232] this[123784])))
        const inds[123064] "const" "insert auto destroy"
        (491393 'init var' inds[123064] call_tmp[602219])
        unknown unstridableInds[123080] "insert auto destroy"
        unknown call_tmp[602226] "expr temp" "maybe param" "maybe type" "temp"
        (602229 'move' call_tmp[602226](352386 call rank _mt[232] this[123784]))
        unknown call_tmp[602233] "expr temp" "maybe param" "maybe type" "temp"
        (602236 'move' call_tmp[602233](123071 call idxType _mt[232] tmpD[122959]))
        unknown call_tmp[602238] "expr temp" "maybe param" "maybe type" "temp"
        (602241 'move' call_tmp[602238](123077 call range[66183](?) call_tmp[602233](stridable = 0)))
        unknown call_tmp[602243] "expr temp" "maybe param" "maybe type" "temp"
        (602246 'move' call_tmp[602243](123078 call * call_tmp[602226] call_tmp[602238]))
        (491395 'default init var' unstridableInds[123080] call_tmp[602243])
        {
          unknown dim[123152] "insert auto destroy"
          (491397 'init var' dim[123152] 0)
          unknown tmp[123153] "maybe param" "temp"
          unknown call_tmp[602250] "expr temp" "maybe param" "maybe type" "temp"
          (602253 'move' call_tmp[602250](123085 call size _mt[232] inds[123064]))
          (123165 'move' tmp[123153](123163 call chpl_compute_low_param_loop_bound 1 call_tmp[602250]))
          unknown tmp[123154] "maybe param" "temp"
          unknown call_tmp[602257] "expr temp" "maybe param" "maybe type" "temp"
          (602260 'move' call_tmp[602257](123170 call size _mt[232] inds[123064]))
          (123175 'move' tmp[123154](123173 call chpl_compute_high_param_loop_bound 1 call_tmp[602257]))
          unknown tmp[123155] "maybe param" "temp"
          (123178 'move' tmp[123155] 1)
          ParamForLoop
          { dim[123152] tmp[123153] tmp[123154] tmp[123155]
            {
              unknown call_tmp[602262] "expr temp" "maybe param" "maybe type" "temp"
              (602265 'move' call_tmp[602262](123093 call inds[123064] dim[123152]))
              unknown call_tmp[602269] "expr temp" "maybe param" "maybe type" "temp"
              (602272 'move' call_tmp[602269](123094 call stride _mt[232] call_tmp[602262]))
              unknown call_tmp[602274] "expr temp" "maybe param" "maybe type" "temp"
              (602277 'move' call_tmp[602274](123098 call != call_tmp[602269] 1))
              unknown call_tmp[602279] "expr temp" "maybe param" "maybe type" "temp"
              (602282 'move' call_tmp[602279](123121 call _cond_test call_tmp[602274]))
              if call_tmp[602279]
              {
                (123119 call halt "non-stridable domain assigned non-unit stride in dimension " dim[123152])
              }
              unknown call_tmp[602284] "expr temp" "maybe param" "maybe type" "temp"
              (602287 'move' call_tmp[602284](123130 call unstridableInds[123080] dim[123152]))
              unknown call_tmp[602289] "expr temp" "maybe param" "maybe type" "temp"
              (602292 'move' call_tmp[602289](123134 call inds[123064] dim[123152]))
              unknown call_tmp[602298] "expr temp" "maybe param" "maybe type" "temp"
              (602301 'move' call_tmp[602298](123140 call idxType _mt[232] tmpD[122959]))
              unknown call_tmp[602303] "expr temp" "maybe param" "maybe type" "temp"
              (602306 'move' call_tmp[602303](123146 call range[66183](?) call_tmp[602298](stridable = 0)))
              unknown call_tmp[602308] "expr temp" "maybe param" "maybe type" "temp"
              (602311 'move' call_tmp[602308](123148 call(123135 call (partial) safeCast _mt[232] call_tmp[602289]) call_tmp[602303]))
              (123149 call = call_tmp[602284] call_tmp[602308])
            }
          }
          label _unused_continueLabel[123157]
          label _breakLabel[123156]
        }
        (123195 call(123190 call (partial) setIndices _mt[232] tmpD[122959]) unstridableInds[123080])
        (468010 'move' ret[468000](468009 'deref' tmpD[122959]))
        gotoReturn _end_safeCast[467998] _end_safeCast[467998]
      }
      {
        (123202 call = tmpD[122959] this[123784])
        (468015 'move' ret[468000](468014 'deref' tmpD[122959]))
        gotoReturn _end_safeCast[467998] _end_safeCast[467998]
      }
    }
    label _end_safeCast[467998]
    (468002 return ret[468000])
  }
  where {
    unknown tmp[400257] "maybe param" "temp"
    (400268 'move' tmp[400257](122951 call chpl__isRectangularDomType t[122943]))
    unknown call_tmp[602315] "expr temp" "maybe param" "maybe type" "temp"
    (602318 'move' call_tmp[602315](400270 call _cond_invalid tmp[400257]))
    if call_tmp[602315]
    {
      (400273 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514211] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514212] "maybe param" "temp"
    unknown call_tmp[602320] "expr temp" "maybe param" "maybe type" "temp"
    (602323 'move' call_tmp[602320](400258 call isTrue tmp[400257]))
    (514217 'move' tmp[514212](514215 call _cond_test call_tmp[602320]))
    if tmp[514212]
    {
      unknown tmp[514219] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602325] "expr temp" "maybe param" "maybe type" "temp"
      (602328 'move' call_tmp[602325](122955 call isRectangularDom this[123784]))
      (514221 'move' tmp[514219](400261 call isTrue call_tmp[602325]))
      (514226 'move' tmp[514211](514223 '_paramFoldLogical' tmp[514212] tmp[514219]))
    }
    {
      (514231 'move' tmp[514211](514228 '_paramFoldLogical' tmp[514212] 0))
    }
    (691863 call _statementLevelSymbol tmp[514211])
  }
  function _domain[123390](?).targetLocales[123224](arg _mt[123790]:_MT[227], arg this[123788]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[468021] "RVV" "temp"
    unknown call_tmp[602332] "expr temp" "maybe param" "maybe type" "temp"
    (602335 'move' call_tmp[602332](352409 call _value _mt[232] this[123788]))
    unknown call_tmp[602339] "expr temp" "maybe param" "maybe type" "temp"
    (602342 'move' call_tmp[602339](123231 call(123227 call (partial) dsiTargetLocales _mt[232] call_tmp[602332])))
    (468026 'move' ret[468021](468025 'deref' call_tmp[602339]))
    (468023 return ret[468021])
  }
  function _domain[123390](?).hasSingleLocalSubdomain[123239](arg _mt[123794]:_MT[227], arg this[123792]:_domain[123390](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[468030] "RVV" "param" "temp"
    unknown call_tmp[602346] "expr temp" "maybe param" "maybe type" "temp"
    (602349 'move' call_tmp[602346](352413 call _value _mt[232] this[123792]))
    unknown call_tmp[602353] "expr temp" "maybe param" "maybe type" "temp"
    (602356 'move' call_tmp[602353](123248 call(123244 call (partial) dsiHasSingleLocalSubdomain _mt[232] call_tmp[602346])))
    (468035 'move' ret[468030](468034 'deref' call_tmp[602353]))
    (468032 return ret[468030])
  }
  function _domain[123390](?).localSubdomain[123262](arg _mt[123798]:_MT[227], arg this[123796]:_domain[123390](?), arg loc[123258]:locale[26] =
  (352416 call here[92085])) : _unknown[43] "method" "primary method"
  {
    unknown ret[468039] "RVV" "temp"
    unknown call_tmp[602360] "expr temp" "maybe param" "maybe type" "temp"
    (602363 'move' call_tmp[602360](352419 call _value _mt[232] this[123796]))
    unknown call_tmp[602367] "expr temp" "maybe param" "maybe type" "temp"
    (602370 'move' call_tmp[602367](123269 call(123265 call (partial) dsiHasSingleLocalSubdomain _mt[232] call_tmp[602360])))
    unknown call_tmp[602372] "expr temp" "maybe param" "maybe type" "temp"
    (602375 'move' call_tmp[602372](123270 call ! call_tmp[602367]))
    unknown call_tmp[602377] "expr temp" "maybe param" "maybe type" "temp"
    (602380 'move' call_tmp[602377](123292 call _cond_test call_tmp[602372]))
    if call_tmp[602377]
    {
      (123290 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[602384] "expr temp" "maybe param" "maybe type" "temp"
    (602387 'move' call_tmp[602384](352423 call _value _mt[232] this[123796]))
    unknown call_tmp[602391] "expr temp" "maybe param" "maybe type" "temp"
    (602394 'move' call_tmp[602391](123306 call(123301 call (partial) dsiLocalSubdomain _mt[232] call_tmp[602384]) loc[123258]))
    (468044 'move' ret[468039](468043 'deref' call_tmp[602391]))
    (468041 return ret[468039])
  }
  function _domain[123390](?).localSubdomains[123319](arg _mt[123802]:_MT[227], arg this[123800]:_domain[123390](?), arg loc[123315]:locale[26] =
  (352427 call here[92085])) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[468048] "RVV" "temp"
    unknown call_tmp[602398] "expr temp" "maybe param" "maybe type" "temp"
    (602401 'move' call_tmp[602398](352430 call _value _mt[232] this[123800]))
    unknown call_tmp[602405] "expr temp" "maybe param" "maybe type" "temp"
    (602408 'move' call_tmp[602405](123326 call(123322 call (partial) dsiHasSingleLocalSubdomain _mt[232] call_tmp[602398])))
    unknown call_tmp[602410] "expr temp" "maybe param" "maybe type" "temp"
    (602413 'move' call_tmp[602410](123382 call _cond_test call_tmp[602405]))
    if call_tmp[602410]
    {
      unknown yret[468052] "YVV" "temp"
      unknown call_tmp[602417] "expr temp" "maybe param" "maybe type" "temp"
      (602420 'move' call_tmp[602417](123330 call(352434 call (partial) localSubdomain _mt[232] this[123800]) loc[123315]))
      (468055 'move' yret[468052](468054 'deref' call_tmp[602417]))
      (468057 yield yret[468052])
    }
    {
      {
        unknown _indexOfInterest[123347] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123348] "expr temp" "temp"
        unknown call_tmp[602424] "expr temp" "maybe param" "maybe type" "temp"
        (602427 'move' call_tmp[602424](352439 call _value _mt[232] this[123800]))
        unknown call_tmp[602431] "expr temp" "maybe param" "maybe type" "temp"
        (602434 'move' call_tmp[602431](123343 call(123338 call (partial) dsiLocalSubdomains _mt[232] call_tmp[602424]) loc[123315]))
        (123357 'move' _iterator[123348](123355 call _getIterator call_tmp[602431]))
        Defer
        {
          {
            (123374 call _freeIterator _iterator[123348])
          }
        }
        { scopeless type
          (123363 'move' _indexOfInterest[123347](123360 call iteratorIndex _iterator[123348]))
        }
        ForLoop
        {
          unknown d[123367] "index var" "insert auto destroy"
          (123369 'move' d[123367] _indexOfInterest[123347])
          unknown yret[468059] "YVV" "temp"
          (468062 'move' yret[468059](468061 'deref' d[123367]))
          (468064 yield yret[468059])
          label _continueLabel[123352]
          _indexOfInterest[123347]
          _iterator[123348]
        }
        label _breakLabel[123353]
      }
    }
    (468050 return ret[468048])
  }
  type _domain[123390](?) val _pid[116901]:int(64)[13] int(64)[13] unknown _instance[116904] "owned" val _unowned[116908]:bool[10] bool[10] forwarding ( )
  function _cast[123811](arg t[123808]:_domain[123390](?), arg d[123814]:_domain[123390](?)) : _unknown[43] "no doc"
  {
    unknown ret[468068] "RVV" "temp"
    const tmpD[123828] "const" "insert auto destroy"
    (491399 'default init var' tmpD[123828] t[123808])
    unknown call_tmp[602438] "expr temp" "maybe param" "maybe type" "temp"
    (602441 'move' call_tmp[602438](123833 call rank _mt[232] tmpD[123828]))
    unknown call_tmp[602445] "expr temp" "maybe param" "maybe type" "temp"
    (602448 'move' call_tmp[602445](123837 call rank _mt[232] d[123814]))
    unknown call_tmp[602450] "expr temp" "maybe param" "maybe type" "temp"
    (602453 'move' call_tmp[602450](123840 call != call_tmp[602438] call_tmp[602445]))
    unknown call_tmp[602455] "expr temp" "maybe param" "maybe type" "temp"
    (602458 'move' call_tmp[602455](123847 call _cond_test call_tmp[602450]))
    if call_tmp[602455]
    {
      (123845 call compilerError "rank mismatch in cast")
    }
    unknown call_tmp[602462] "expr temp" "maybe param" "maybe type" "temp"
    (602465 'move' call_tmp[602462](123853 call idxType _mt[232] tmpD[123828]))
    unknown call_tmp[602469] "expr temp" "maybe param" "maybe type" "temp"
    (602472 'move' call_tmp[602469](123857 call idxType _mt[232] d[123814]))
    unknown call_tmp[602474] "expr temp" "maybe param" "maybe type" "temp"
    (602477 'move' call_tmp[602474](123860 call != call_tmp[602462] call_tmp[602469]))
    unknown call_tmp[602479] "expr temp" "maybe param" "maybe type" "temp"
    (602482 'move' call_tmp[602479](123867 call _cond_test call_tmp[602474]))
    if call_tmp[602479]
    {
      (123865 call compilerError "idxType mismatch in cast")
    }
    unknown call_tmp[602486] "expr temp" "maybe param" "maybe type" "temp"
    (602489 'move' call_tmp[602486](123873 call stridable _mt[232] tmpD[123828]))
    unknown call_tmp[602493] "expr temp" "maybe param" "maybe type" "temp"
    (602496 'move' call_tmp[602493](123877 call stridable _mt[232] d[123814]))
    unknown call_tmp[602498] "expr temp" "maybe param" "maybe type" "temp"
    (602501 'move' call_tmp[602498](123880 call == call_tmp[602486] call_tmp[602493]))
    unknown call_tmp[602503] "expr temp" "maybe param" "maybe type" "temp"
    (602506 'move' call_tmp[602503](124016 call _cond_test call_tmp[602498]))
    if call_tmp[602503]
    {
      (468073 'move' ret[468068](468072 'deref' d[123814]))
      gotoReturn _end__cast[468066] _end__cast[468066]
    }
    {
      unknown tmp[400320] "maybe param" "temp"
      unknown call_tmp[602510] "expr temp" "maybe param" "maybe type" "temp"
      (602513 'move' call_tmp[602510](123886 call stridable _mt[232] tmpD[123828]))
      (400331 'move' tmp[400320](123889 call ! call_tmp[602510]))
      unknown call_tmp[602515] "expr temp" "maybe param" "maybe type" "temp"
      (602518 'move' call_tmp[602515](400333 call _cond_invalid tmp[400320]))
      if call_tmp[602515]
      {
        (400336 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[514238] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[514239] "maybe param" "temp"
      unknown call_tmp[602520] "expr temp" "maybe param" "maybe type" "temp"
      (602523 'move' call_tmp[602520](400321 call isTrue tmp[400320]))
      (514244 'move' tmp[514239](514242 call _cond_test call_tmp[602520]))
      if tmp[514239]
      {
        unknown tmp[514246] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[602527] "expr temp" "maybe param" "maybe type" "temp"
        (602530 'move' call_tmp[602527](123892 call stridable _mt[232] d[123814]))
        (514248 'move' tmp[514246](400324 call isTrue call_tmp[602527]))
        (514253 'move' tmp[514238](514250 '_paramFoldLogical' tmp[514239] tmp[514246]))
      }
      {
        (514258 'move' tmp[514238](514255 '_paramFoldLogical' tmp[514239] 0))
      }
      unknown call_tmp[602532] "expr temp" "maybe param" "maybe type" "temp"
      (602535 'move' call_tmp[602532](124012 call _cond_test tmp[514238]))
      if call_tmp[602532]
      {
        unknown call_tmp[602539] "maybe param" "maybe type" "temp"
        (602542 'move' call_tmp[602539](123902 call(123898 call (partial) getIndices _mt[232] d[123814])))
        unknown inds[123903] "insert auto destroy"
        (491401 'init var' inds[123903] call_tmp[602539])
        unknown unstridableInds[123922] "insert auto destroy"
        unknown call_tmp[602546] "expr temp" "maybe param" "maybe type" "temp"
        (602549 'move' call_tmp[602546](123908 call rank _mt[232] d[123814]))
        unknown call_tmp[602553] "expr temp" "maybe param" "maybe type" "temp"
        (602556 'move' call_tmp[602553](123913 call idxType _mt[232] tmpD[123828]))
        unknown call_tmp[602558] "expr temp" "maybe param" "maybe type" "temp"
        (602561 'move' call_tmp[602558](123919 call range[66183](?) call_tmp[602553](stridable = 0)))
        unknown call_tmp[602563] "expr temp" "maybe param" "maybe type" "temp"
        (602566 'move' call_tmp[602563](123920 call * call_tmp[602546] call_tmp[602558]))
        (491403 'default init var' unstridableInds[123922] call_tmp[602563])
        {
          unknown i[123955] "insert auto destroy"
          (491405 'init var' i[123955] 0)
          unknown tmp[123956] "maybe param" "temp"
          unknown call_tmp[602570] "expr temp" "maybe param" "maybe type" "temp"
          (602573 'move' call_tmp[602570](123927 call rank _mt[232] tmpD[123828]))
          (123968 'move' tmp[123956](123966 call chpl_compute_low_param_loop_bound 1 call_tmp[602570]))
          unknown tmp[123957] "maybe param" "temp"
          unknown call_tmp[602577] "expr temp" "maybe param" "maybe type" "temp"
          (602580 'move' call_tmp[602577](123973 call rank _mt[232] tmpD[123828]))
          (123978 'move' tmp[123957](123976 call chpl_compute_high_param_loop_bound 1 call_tmp[602577]))
          unknown tmp[123958] "maybe param" "temp"
          (123981 'move' tmp[123958] 1)
          ParamForLoop
          { i[123955] tmp[123956] tmp[123957] tmp[123958]
            {
              unknown call_tmp[602582] "expr temp" "maybe param" "maybe type" "temp"
              (602585 'move' call_tmp[602582](123935 call unstridableInds[123922] i[123955]))
              unknown call_tmp[602589] "expr temp" "maybe param" "maybe type" "temp"
              (602592 'move' call_tmp[602589](123942 call idxType _mt[232] tmpD[123828]))
              unknown call_tmp[602594] "expr temp" "maybe param" "maybe type" "temp"
              (602597 'move' call_tmp[602594](123948 call range[66183](?) call_tmp[602589](stridable = 0)))
              unknown call_tmp[602599] "expr temp" "maybe param" "maybe type" "temp"
              (602602 'move' call_tmp[602599](123939 call inds[123903] i[123955]))
              unknown call_tmp[602604] "expr temp" "maybe param" "maybe type" "temp"
              (602607 'move' call_tmp[602604](123949 call _cast call_tmp[602594] call_tmp[602599]))
              (123951 call = call_tmp[602582] call_tmp[602604])
            }
          }
          label _unused_continueLabel[123960]
          label _breakLabel[123959]
        }
        (123998 call(123993 call (partial) setIndices _mt[232] tmpD[123828]) unstridableInds[123922])
        (468078 'move' ret[468068](468077 'deref' tmpD[123828]))
        gotoReturn _end__cast[468066] _end__cast[468066]
      }
      {
        (124005 call = tmpD[123828] d[123814])
        (468083 'move' ret[468068](468082 'deref' tmpD[123828]))
        gotoReturn _end__cast[468066] _end__cast[468066]
      }
    }
    label _end__cast[468066]
    (468070 return ret[468068])
  }
  where {
    unknown tmp[400299] "maybe param" "temp"
    (400310 'move' tmp[400299](123820 call chpl__isRectangularDomType t[123808]))
    unknown call_tmp[602611] "expr temp" "maybe param" "maybe type" "temp"
    (602614 'move' call_tmp[602611](400312 call _cond_invalid tmp[400299]))
    if call_tmp[602611]
    {
      (400315 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514265] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514266] "maybe param" "temp"
    unknown call_tmp[602616] "expr temp" "maybe param" "maybe type" "temp"
    (602619 'move' call_tmp[602616](400300 call isTrue tmp[400299]))
    (514271 'move' tmp[514266](514269 call _cond_test call_tmp[602616]))
    if tmp[514266]
    {
      unknown tmp[514273] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602621] "expr temp" "maybe param" "maybe type" "temp"
      (602624 'move' call_tmp[602621](123824 call isRectangularDom d[123814]))
      (514275 'move' tmp[514273](400303 call isTrue call_tmp[602621]))
      (514280 'move' tmp[514265](514277 '_paramFoldLogical' tmp[514266] tmp[514273]))
    }
    {
      (514285 'move' tmp[514265](514282 '_paramFoldLogical' tmp[514266] 0))
    }
    (691865 call _statementLevelSymbol tmp[514265])
  }
  function chpl_countDomHelp[124029](arg dom[124027]:_any[170](?), arg counts[124031]:_any[170](?)) : _unknown[43]
  {
    unknown ret[468089] "RVV" "temp"
    unknown call_tmp[602628] "maybe param" "maybe type" "temp"
    (602631 'move' call_tmp[602628](124038 call(124034 call (partial) dims _mt[232] dom[124027])))
    unknown ranges[124039] "insert auto destroy"
    (491407 'init var' ranges[124039] call_tmp[602628])
    {
      unknown i[124067] "insert auto destroy"
      (491409 'init var' i[124067] 0)
      unknown tmp[124068] "maybe param" "temp"
      unknown call_tmp[602635] "expr temp" "maybe param" "maybe type" "temp"
      (602638 'move' call_tmp[602635](124045 call rank _mt[232] dom[124027]))
      (124080 'move' tmp[124068](124078 call chpl_compute_low_param_loop_bound 1 call_tmp[602635]))
      unknown tmp[124069] "maybe param" "temp"
      unknown call_tmp[602642] "expr temp" "maybe param" "maybe type" "temp"
      (602645 'move' call_tmp[602642](124085 call rank _mt[232] dom[124027]))
      (124090 'move' tmp[124069](124088 call chpl_compute_high_param_loop_bound 1 call_tmp[602642]))
      unknown tmp[124070] "maybe param" "temp"
      (124093 'move' tmp[124070] 1)
      ParamForLoop
      { i[124067] tmp[124068] tmp[124069] tmp[124070]
        unknown call_tmp[602647] "expr temp" "maybe param" "maybe type" "temp"
        (602650 'move' call_tmp[602647](124053 call ranges[124039] i[124067]))
        unknown call_tmp[602652] "expr temp" "maybe param" "maybe type" "temp"
        (602655 'move' call_tmp[602652](124057 call ranges[124039] i[124067]))
        unknown call_tmp[602657] "expr temp" "maybe param" "maybe type" "temp"
        (602660 'move' call_tmp[602657](124061 call counts[124031] i[124067]))
        unknown call_tmp[602662] "expr temp" "maybe param" "maybe type" "temp"
        (602665 'move' call_tmp[602662](124062 call # call_tmp[602652] call_tmp[602657]))
        (124064 call = call_tmp[602647] call_tmp[602662])
      }
      label _unused_continueLabel[124072]
      label _breakLabel[124071]
    }
    unknown call_tmp[602667] "expr temp" "maybe param" "maybe type" "temp"
    (602670 'move' call_tmp[602667](124108 call dom[124027](124106 'expand_tuple' ranges[124039])))
    (468094 'move' ret[468089](468093 'deref' call_tmp[602667]))
    (468091 return ret[468089])
  }
  function #[124119](arg dom[124116]:_domain[123390](?), arg counts[124122]:integral[188](?)) : _unknown[43]
  {
    unknown ret[468098] "RVV" "temp"
    unknown call_tmp[602672] "expr temp" "maybe param" "maybe type" "temp"
    (602675 'move' call_tmp[602672](124142 call _build_tuple counts[124122]))
    unknown call_tmp[602677] "expr temp" "maybe param" "maybe type" "temp"
    (602680 'move' call_tmp[602677](124144 call chpl_countDomHelp dom[124116] call_tmp[602672]))
    (468103 'move' ret[468098](468102 'deref' call_tmp[602677]))
    (468100 return ret[468098])
  }
  where {
    unknown tmp[400341] "maybe param" "temp"
    (400352 'move' tmp[400341](124128 call isRectangularDom dom[124116]))
    unknown call_tmp[602682] "expr temp" "maybe param" "maybe type" "temp"
    (602685 'move' call_tmp[602682](400354 call _cond_invalid tmp[400341]))
    if call_tmp[602682]
    {
      (400357 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514292] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514293] "maybe param" "temp"
    unknown call_tmp[602687] "expr temp" "maybe param" "maybe type" "temp"
    (602690 'move' call_tmp[602687](400342 call isTrue tmp[400341]))
    (514298 'move' tmp[514293](514296 call _cond_test call_tmp[602687]))
    if tmp[514293]
    {
      unknown tmp[514300] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602694] "expr temp" "maybe param" "maybe type" "temp"
      (602697 'move' call_tmp[602694](124130 call rank _mt[232] dom[124116]))
      unknown call_tmp[602699] "expr temp" "maybe param" "maybe type" "temp"
      (602702 'move' call_tmp[602699](124134 call == call_tmp[602694] 1))
      (514302 'move' tmp[514300](400345 call isTrue call_tmp[602699]))
      (514307 'move' tmp[514292](514304 '_paramFoldLogical' tmp[514293] tmp[514300]))
    }
    {
      (514312 'move' tmp[514292](514309 '_paramFoldLogical' tmp[514293] 0))
    }
    (691867 call _statementLevelSymbol tmp[514292])
  }
  function #[124157](arg dom[124154]:_domain[123390](?), arg counts[124159]:_any[170](?)) : _unknown[43]
  {
    unknown ret[468107] "RVV" "temp"
    unknown call_tmp[602706] "expr temp" "maybe param" "maybe type" "temp"
    (602709 'move' call_tmp[602706](124172 call size _mt[232] counts[124159]))
    unknown call_tmp[602713] "expr temp" "maybe param" "maybe type" "temp"
    (602716 'move' call_tmp[602713](124176 call rank _mt[232] dom[124154]))
    unknown call_tmp[602718] "expr temp" "maybe param" "maybe type" "temp"
    (602721 'move' call_tmp[602718](124179 call != call_tmp[602706] call_tmp[602713]))
    unknown call_tmp[602723] "expr temp" "maybe param" "maybe type" "temp"
    (602726 'move' call_tmp[602723](124201 call _cond_test call_tmp[602718]))
    if call_tmp[602723]
    {
      (124199 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    unknown call_tmp[602728] "expr temp" "maybe param" "maybe type" "temp"
    (602731 'move' call_tmp[602728](124211 call chpl_countDomHelp dom[124154] counts[124159]))
    (468112 'move' ret[468107](468111 'deref' call_tmp[602728]))
    (468109 return ret[468107])
  }
  where {
    unknown tmp[400362] "maybe param" "temp"
    (400373 'move' tmp[400362](124164 call isRectangularDom dom[124154]))
    unknown call_tmp[602733] "expr temp" "maybe param" "maybe type" "temp"
    (602736 'move' call_tmp[602733](400375 call _cond_invalid tmp[400362]))
    if call_tmp[602733]
    {
      (400378 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514319] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514320] "maybe param" "temp"
    unknown call_tmp[602738] "expr temp" "maybe param" "maybe type" "temp"
    (602741 'move' call_tmp[602738](400363 call isTrue tmp[400362]))
    (514325 'move' tmp[514320](514323 call _cond_test call_tmp[602738]))
    if tmp[514320]
    {
      unknown tmp[514327] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602743] "expr temp" "maybe param" "maybe type" "temp"
      (602746 'move' call_tmp[602743](124168 call isTuple counts[124159]))
      (514329 'move' tmp[514327](400366 call isTrue call_tmp[602743]))
      (514334 'move' tmp[514319](514331 '_paramFoldLogical' tmp[514320] tmp[514327]))
    }
    {
      (514339 'move' tmp[514319](514336 '_paramFoldLogical' tmp[514320] 0))
    }
    (691869 call _statementLevelSymbol tmp[514319])
  }
  function #[124225](arg arr[124222]:_array[133150](?), arg counts[124228]:integral[188](?)) : _unknown[43] "fn returns aliasing array"
  {
    unknown ret[468116] "RVV" "temp"
    unknown call_tmp[602750] "expr temp" "maybe param" "maybe type" "temp"
    (602753 'move' call_tmp[602750](124246 call _dom _mt[232] arr[124222]))
    unknown call_tmp[602755] "expr temp" "maybe param" "maybe type" "temp"
    (602758 'move' call_tmp[602755](124250 call # call_tmp[602750] counts[124228]))
    unknown call_tmp[602760] "expr temp" "maybe param" "maybe type" "temp"
    (602763 'move' call_tmp[602760](124253 call arr[124222] call_tmp[602755]))
    (468121 'move' ret[468116](468120 'deref' call_tmp[602760]))
    (468118 return ret[468116])
  }
  where {
    unknown tmp[400383] "maybe param" "temp"
    (400394 'move' tmp[400383](124234 call isRectangularArr arr[124222]))
    unknown call_tmp[602765] "expr temp" "maybe param" "maybe type" "temp"
    (602768 'move' call_tmp[602765](400396 call _cond_invalid tmp[400383]))
    if call_tmp[602765]
    {
      (400399 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514346] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514347] "maybe param" "temp"
    unknown call_tmp[602770] "expr temp" "maybe param" "maybe type" "temp"
    (602773 'move' call_tmp[602770](400384 call isTrue tmp[400383]))
    (514352 'move' tmp[514347](514350 call _cond_test call_tmp[602770]))
    if tmp[514347]
    {
      unknown tmp[514354] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602777] "expr temp" "maybe param" "maybe type" "temp"
      (602780 'move' call_tmp[602777](124236 call rank _mt[232] arr[124222]))
      unknown call_tmp[602782] "expr temp" "maybe param" "maybe type" "temp"
      (602785 'move' call_tmp[602782](124240 call == call_tmp[602777] 1))
      (514356 'move' tmp[514354](400387 call isTrue call_tmp[602782]))
      (514361 'move' tmp[514346](514358 '_paramFoldLogical' tmp[514347] tmp[514354]))
    }
    {
      (514366 'move' tmp[514346](514363 '_paramFoldLogical' tmp[514347] 0))
    }
    (691871 call _statementLevelSymbol tmp[514346])
  }
  function #[124268](arg arr[124265]:_array[133150](?), arg counts[124270]:_any[170](?)) : _unknown[43] "fn returns aliasing array"
  {
    unknown ret[468125] "RVV" "temp"
    unknown call_tmp[602789] "expr temp" "maybe param" "maybe type" "temp"
    (602792 'move' call_tmp[602789](124283 call size _mt[232] counts[124270]))
    unknown call_tmp[602796] "expr temp" "maybe param" "maybe type" "temp"
    (602799 'move' call_tmp[602796](124287 call rank _mt[232] arr[124265]))
    unknown call_tmp[602801] "expr temp" "maybe param" "maybe type" "temp"
    (602804 'move' call_tmp[602801](124290 call != call_tmp[602789] call_tmp[602796]))
    unknown call_tmp[602806] "expr temp" "maybe param" "maybe type" "temp"
    (602809 'move' call_tmp[602806](124312 call _cond_test call_tmp[602801]))
    if call_tmp[602806]
    {
      (124310 call compilerError "the domain and array arguments of # must have the same rank")
    }
    unknown call_tmp[602813] "expr temp" "maybe param" "maybe type" "temp"
    (602816 'move' call_tmp[602813](124320 call _dom _mt[232] arr[124265]))
    unknown call_tmp[602818] "expr temp" "maybe param" "maybe type" "temp"
    (602821 'move' call_tmp[602818](124324 call # call_tmp[602813] counts[124270]))
    unknown call_tmp[602823] "expr temp" "maybe param" "maybe type" "temp"
    (602826 'move' call_tmp[602823](124327 call arr[124265] call_tmp[602818]))
    (468130 'move' ret[468125](468129 'deref' call_tmp[602823]))
    (468127 return ret[468125])
  }
  where {
    unknown tmp[400404] "maybe param" "temp"
    (400415 'move' tmp[400404](124275 call isRectangularArr arr[124265]))
    unknown call_tmp[602828] "expr temp" "maybe param" "maybe type" "temp"
    (602831 'move' call_tmp[602828](400417 call _cond_invalid tmp[400404]))
    if call_tmp[602828]
    {
      (400420 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514373] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514374] "maybe param" "temp"
    unknown call_tmp[602833] "expr temp" "maybe param" "maybe type" "temp"
    (602836 'move' call_tmp[602833](400405 call isTrue tmp[400404]))
    (514379 'move' tmp[514374](514377 call _cond_test call_tmp[602833]))
    if tmp[514374]
    {
      unknown tmp[514381] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602838] "expr temp" "maybe param" "maybe type" "temp"
      (602841 'move' call_tmp[602838](124279 call isTuple counts[124270]))
      (514383 'move' tmp[514381](400408 call isTrue call_tmp[602838]))
      (514388 'move' tmp[514373](514385 '_paramFoldLogical' tmp[514374] tmp[514381]))
    }
    {
      (514393 'move' tmp[514373](514390 '_paramFoldLogical' tmp[514374] 0))
    }
    (691873 call _statementLevelSymbol tmp[514373])
  }
  function +[124339](arg d[124336]:_domain[123390](?), arg i[124345] :
  (124343 call chpl__buildIndexType d[124336])) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[602843] "expr temp" "maybe param" "maybe type" "temp"
    (602846 'move' call_tmp[602843](124351 call isRectangularDom d[124336]))
    unknown call_tmp[602848] "expr temp" "maybe param" "maybe type" "temp"
    (602851 'move' call_tmp[602848](124392 call _cond_test call_tmp[602843]))
    if call_tmp[602848]
    {
      (124370 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124390 call compilerError "Cannot add indices to this domain type")
    }
    (468132 return _void[47])
  }
  function +[124405](arg i[124403]:_any[170](?), arg d[124408]:_domain[123390](?)) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[602853] "expr temp" "maybe param" "maybe type" "temp"
    (602856 'move' call_tmp[602853](124423 call isRectangularDom d[124408]))
    unknown call_tmp[602858] "expr temp" "maybe param" "maybe type" "temp"
    (602861 'move' call_tmp[602858](124434 call _cond_test call_tmp[602853]))
    if call_tmp[602858]
    {
      (124427 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124432 call compilerError "Cannot add indices to this domain type")
    }
    (468134 return _void[47])
  }
  where {
    unknown call_tmp[602863] "expr temp" "maybe param" "maybe type" "temp"
    (602866 'move' call_tmp[602863](124417 call chpl__buildIndexType d[124408]))
    unknown call_tmp[602868] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602871 'move' call_tmp[602868](124413 'typeof' i[124403]))
    (328553 'is_subtype' call_tmp[602863] call_tmp[602868])
  }
  function +[124450](arg d[124447]:_domain[123390](?), arg i[124456] :
  (124454 call chpl__buildIndexType d[124447])) : _unknown[43]
  {
    unknown ret[468138] "RVV" "temp"
    (124469 call(124464 call (partial) add _mt[232] d[124447]) i[124456])
    (468143 'move' ret[468138](468142 'deref' d[124447]))
    (468140 return ret[468138])
  }
  where {
    (124462 call isIrregularDom d[124447])
  }
  function +[124482](arg i[124480]:_any[170](?), arg d[124485]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[468147] "RVV" "temp"
    (124509 call(124504 call (partial) add _mt[232] d[124485]) i[124480])
    (468152 'move' ret[468147](468151 'deref' d[124485]))
    (468149 return ret[468147])
  }
  where {
    unknown tmp[400425] "maybe param" "temp"
    unknown call_tmp[602877] "expr temp" "maybe param" "maybe type" "temp"
    (602880 'move' call_tmp[602877](124494 call chpl__buildIndexType d[124485]))
    unknown call_tmp[602882] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602885 'move' call_tmp[602882](124490 'typeof' i[124480]))
    (400436 'move' tmp[400425](328554 'is_subtype' call_tmp[602877] call_tmp[602882]))
    unknown call_tmp[602887] "expr temp" "maybe param" "maybe type" "temp"
    (602890 'move' call_tmp[602887](400438 call _cond_invalid tmp[400425]))
    if call_tmp[602887]
    {
      (400441 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514400] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514401] "maybe param" "temp"
    unknown call_tmp[602892] "expr temp" "maybe param" "maybe type" "temp"
    (602895 'move' call_tmp[602892](400426 call isTrue tmp[400425]))
    (514406 'move' tmp[514401](514404 call _cond_test call_tmp[602892]))
    if tmp[514401]
    {
      unknown tmp[514408] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602897] "expr temp" "maybe param" "maybe type" "temp"
      (602900 'move' call_tmp[602897](124500 call isIrregularDom d[124485]))
      (514410 'move' tmp[514408](400429 call isTrue call_tmp[602897]))
      (514415 'move' tmp[514400](514412 '_paramFoldLogical' tmp[514401] tmp[514408]))
    }
    {
      (514420 'move' tmp[514400](514417 '_paramFoldLogical' tmp[514401] 0))
    }
    (691875 call _statementLevelSymbol tmp[514400])
  }
  function +[124524](arg d1[124521]:_domain[123390](?), arg d2[124527]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[468156] "RVV" "temp"
    unknown d3[124550] "insert auto destroy"
    unknown call_tmp[602902] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602905 'move' call_tmp[602902](124549 'typeof' d1[124521]))
    (491411 'default init var' d3[124550] call_tmp[602902])
    {
      unknown _indexOfInterest[124564] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124565] "expr temp" "temp"
      (124574 'move' _iterator[124565](124572 call _getIterator d1[124521]))
      Defer
      {
        {
          (124590 call _freeIterator _iterator[124565])
        }
      }
      { scopeless type
        (124579 'move' _indexOfInterest[124564](124576 call iteratorIndex _iterator[124565]))
      }
      ForLoop
      {
        unknown e[124583] "index var" "insert auto destroy"
        (124585 'move' e[124583] _indexOfInterest[124564])
        (124562 call(124557 call (partial) add _mt[232] d3[124550]) e[124583])
        label _continueLabel[124569]
        _indexOfInterest[124564]
        _iterator[124565]
      }
      label _breakLabel[124570]
    }
    {
      unknown _indexOfInterest[124607] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124608] "expr temp" "temp"
      (124617 'move' _iterator[124608](124615 call _getIterator d2[124527]))
      Defer
      {
        {
          (124633 call _freeIterator _iterator[124608])
        }
      }
      { scopeless type
        (124622 'move' _indexOfInterest[124607](124619 call iteratorIndex _iterator[124608]))
      }
      ForLoop
      {
        unknown e[124626] "index var" "insert auto destroy"
        (124628 'move' e[124626] _indexOfInterest[124607])
        (124605 call(124600 call (partial) add _mt[232] d3[124550]) e[124626])
        label _continueLabel[124612]
        _indexOfInterest[124607]
        _iterator[124608]
      }
      label _breakLabel[124613]
    }
    (468161 'move' ret[468156](468160 'deref' d3[124550]))
    (468158 return ret[468156])
  }
  where {
    unknown tmp[400446] "maybe param" "temp"
    unknown call_tmp[602911] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602914 'move' call_tmp[602911](124531 'typeof' d1[124521]))
    unknown call_tmp[602916] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602919 'move' call_tmp[602916](124533 'typeof' d2[124527]))
    (400457 'move' tmp[400446](124534 call == call_tmp[602911] call_tmp[602916]))
    unknown call_tmp[602921] "expr temp" "maybe param" "maybe type" "temp"
    (602924 'move' call_tmp[602921](400459 call _cond_invalid tmp[400446]))
    if call_tmp[602921]
    {
      (400462 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514454] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514455] "maybe param" "temp"
    unknown call_tmp[602926] "expr temp" "maybe param" "maybe type" "temp"
    (602929 'move' call_tmp[602926](400447 call isTrue tmp[400446]))
    (514460 'move' tmp[514455](514458 call _cond_test call_tmp[602926]))
    if tmp[514455]
    {
      unknown tmp[400467] "maybe param" "temp"
      (400478 'move' tmp[400467](124539 call isIrregularDom d1[124521]))
      unknown call_tmp[602931] "expr temp" "maybe param" "maybe type" "temp"
      (602934 'move' call_tmp[602931](400480 call _cond_invalid tmp[400467]))
      if call_tmp[602931]
      {
        (400483 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[514427] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[514428] "maybe param" "temp"
      unknown call_tmp[602936] "expr temp" "maybe param" "maybe type" "temp"
      (602939 'move' call_tmp[602936](400468 call isTrue tmp[400467]))
      (514433 'move' tmp[514428](514431 call _cond_test call_tmp[602936]))
      if tmp[514428]
      {
        unknown tmp[514435] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[602941] "expr temp" "maybe param" "maybe type" "temp"
        (602944 'move' call_tmp[602941](124543 call isIrregularDom d2[124527]))
        (514437 'move' tmp[514435](400471 call isTrue call_tmp[602941]))
        (514442 'move' tmp[514427](514439 '_paramFoldLogical' tmp[514428] tmp[514435]))
      }
      {
        (514447 'move' tmp[514427](514444 '_paramFoldLogical' tmp[514428] 0))
      }
      unknown tmp[514462] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (514464 'move' tmp[514462](400450 call isTrue tmp[514427]))
      (514469 'move' tmp[514454](514466 '_paramFoldLogical' tmp[514455] tmp[514462]))
    }
    {
      (514474 'move' tmp[514454](514471 '_paramFoldLogical' tmp[514455] 0))
    }
    (691877 call _statementLevelSymbol tmp[514454])
  }
  function +[124652](arg d1[124649]:_domain[123390](?), arg d2[124655]:_domain[123390](?)) : _unknown[43] "no return value for void"
  {
    unknown tmp[400488] "maybe param" "temp"
    (400499 'move' tmp[400488](124661 call isRectangularDom d1[124649]))
    unknown call_tmp[602946] "expr temp" "maybe param" "maybe type" "temp"
    (602949 'move' call_tmp[602946](400501 call _cond_invalid tmp[400488]))
    if call_tmp[602946]
    {
      (400504 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[514481] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514482] "maybe param" "temp"
    unknown call_tmp[602951] "expr temp" "maybe param" "maybe type" "temp"
    (602954 'move' call_tmp[602951](400489 call isTrue tmp[400488]))
    (514487 'move' tmp[514482](514485 call _cond_test call_tmp[602951]))
    if tmp[514482]
    {
      (514492 'move' tmp[514481](514489 '_paramFoldLogical' tmp[514482] 1))
    }
    {
      unknown tmp[514494] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[602956] "expr temp" "maybe param" "maybe type" "temp"
      (602959 'move' call_tmp[602956](124665 call isRectangularDom d2[124655]))
      (514496 'move' tmp[514494](400493 call isTrue call_tmp[602956]))
      (514501 'move' tmp[514481](514498 '_paramFoldLogical' tmp[514482] tmp[514494]))
    }
    unknown call_tmp[602961] "expr temp" "maybe param" "maybe type" "temp"
    (602964 'move' call_tmp[602961](124678 call _cond_test tmp[514481]))
    if call_tmp[602961]
    {
      (124671 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124676 call compilerError "Cannot add indices to this domain type")
    }
    (468163 return _void[47])
  }
  function -[124693](arg d[124690]:_domain[123390](?), arg i[124699] :
  (124697 call chpl__buildIndexType d[124690])) : _unknown[43] "no return value for void"
  {
    unknown call_tmp[602966] "expr temp" "maybe param" "maybe type" "temp"
    (602969 'move' call_tmp[602966](124705 call isRectangularDom d[124690]))
    unknown call_tmp[602971] "expr temp" "maybe param" "maybe type" "temp"
    (602974 'move' call_tmp[602971](124746 call _cond_test call_tmp[602966]))
    if call_tmp[602971]
    {
      (124724 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (124744 call compilerError "Cannot remove indices from this domain type")
    }
    (468165 return _void[47])
  }
  function -[124761](arg d[124758]:_domain[123390](?), arg i[124767] :
  (124765 call chpl__buildIndexType d[124758])) : _unknown[43]
  {
    unknown ret[468169] "RVV" "temp"
    (124780 call(124775 call (partial) remove _mt[232] d[124758]) i[124767])
    (468174 'move' ret[468169](468173 'deref' d[124758]))
    (468171 return ret[468169])
  }
  where {
    (124773 call isIrregularDom d[124758])
  }
  function -[124795](arg d1[124792]:_domain[123390](?), arg d2[124798]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[468178] "RVV" "temp"
    unknown d3[124821] "insert auto destroy"
    unknown call_tmp[602978] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602981 'move' call_tmp[602978](124820 'typeof' d1[124792]))
    (491413 'default init var' d3[124821] call_tmp[602978])
    {
      unknown _indexOfInterest[124835] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124836] "expr temp" "temp"
      (124845 'move' _iterator[124836](124843 call _getIterator d1[124792]))
      Defer
      {
        {
          (124861 call _freeIterator _iterator[124836])
        }
      }
      { scopeless type
        (124850 'move' _indexOfInterest[124835](124847 call iteratorIndex _iterator[124836]))
      }
      ForLoop
      {
        unknown e[124854] "index var" "insert auto destroy"
        (124856 'move' e[124854] _indexOfInterest[124835])
        (124833 call(124828 call (partial) add _mt[232] d3[124821]) e[124854])
        label _continueLabel[124840]
        _indexOfInterest[124835]
        _iterator[124836]
      }
      label _breakLabel[124841]
    }
    {
      unknown _indexOfInterest[124878] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124879] "expr temp" "temp"
      (124888 'move' _iterator[124879](124886 call _getIterator d2[124798]))
      Defer
      {
        {
          (124904 call _freeIterator _iterator[124879])
        }
      }
      { scopeless type
        (124893 'move' _indexOfInterest[124878](124890 call iteratorIndex _iterator[124879]))
      }
      ForLoop
      {
        unknown e[124897] "index var" "insert auto destroy"
        (124899 'move' e[124897] _indexOfInterest[124878])
        (124876 call(124871 call (partial) remove _mt[232] d3[124821]) e[124897])
        label _continueLabel[124883]
        _indexOfInterest[124878]
        _iterator[124879]
      }
      label _breakLabel[124884]
    }
    (468183 'move' ret[468178](468182 'deref' d3[124821]))
    (468180 return ret[468178])
  }
  where {
    unknown tmp[400509] "maybe param" "temp"
    unknown call_tmp[602987] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602990 'move' call_tmp[602987](124802 'typeof' d1[124792]))
    unknown call_tmp[602992] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (602995 'move' call_tmp[602992](124804 'typeof' d2[124798]))
    (400520 'move' tmp[400509](124805 call == call_tmp[602987] call_tmp[602992]))
    unknown call_tmp[602997] "expr temp" "maybe param" "maybe type" "temp"
    (603000 'move' call_tmp[602997](400522 call _cond_invalid tmp[400509]))
    if call_tmp[602997]
    {
      (400525 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514535] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514536] "maybe param" "temp"
    unknown call_tmp[603002] "expr temp" "maybe param" "maybe type" "temp"
    (603005 'move' call_tmp[603002](400510 call isTrue tmp[400509]))
    (514541 'move' tmp[514536](514539 call _cond_test call_tmp[603002]))
    if tmp[514536]
    {
      unknown tmp[400530] "maybe param" "temp"
      (400541 'move' tmp[400530](124810 call isSparseDom d1[124792]))
      unknown call_tmp[603007] "expr temp" "maybe param" "maybe type" "temp"
      (603010 'move' call_tmp[603007](400543 call _cond_invalid tmp[400530]))
      if call_tmp[603007]
      {
        (400546 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[514508] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[514509] "maybe param" "temp"
      unknown call_tmp[603012] "expr temp" "maybe param" "maybe type" "temp"
      (603015 'move' call_tmp[603012](400531 call isTrue tmp[400530]))
      (514514 'move' tmp[514509](514512 call _cond_test call_tmp[603012]))
      if tmp[514509]
      {
        (514519 'move' tmp[514508](514516 '_paramFoldLogical' tmp[514509] 1))
      }
      {
        unknown tmp[514521] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[603017] "expr temp" "maybe param" "maybe type" "temp"
        (603020 'move' call_tmp[603017](124814 call isOpaqueDom d1[124792]))
        (514523 'move' tmp[514521](400535 call isTrue call_tmp[603017]))
        (514528 'move' tmp[514508](514525 '_paramFoldLogical' tmp[514509] tmp[514521]))
      }
      unknown tmp[514543] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (514545 'move' tmp[514543](400513 call isTrue tmp[514508]))
      (514550 'move' tmp[514535](514547 '_paramFoldLogical' tmp[514536] tmp[514543]))
    }
    {
      (514555 'move' tmp[514535](514552 '_paramFoldLogical' tmp[514536] 0))
    }
    (691879 call _statementLevelSymbol tmp[514535])
  }
  function -[124923](arg d1[124920]:_domain[123390](?), arg d2[124926]:_domain[123390](?)) : _unknown[43] "no return value for void"
  {
    unknown tmp[400551] "maybe param" "temp"
    (400562 'move' tmp[400551](124932 call isRectangularDom d1[124920]))
    unknown call_tmp[603022] "expr temp" "maybe param" "maybe type" "temp"
    (603025 'move' call_tmp[603022](400564 call _cond_invalid tmp[400551]))
    if call_tmp[603022]
    {
      (400567 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[514562] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514563] "maybe param" "temp"
    unknown call_tmp[603027] "expr temp" "maybe param" "maybe type" "temp"
    (603030 'move' call_tmp[603027](400552 call isTrue tmp[400551]))
    (514568 'move' tmp[514563](514566 call _cond_test call_tmp[603027]))
    if tmp[514563]
    {
      (514573 'move' tmp[514562](514570 '_paramFoldLogical' tmp[514563] 1))
    }
    {
      unknown tmp[514575] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603032] "expr temp" "maybe param" "maybe type" "temp"
      (603035 'move' call_tmp[603032](124936 call isRectangularDom d2[124926]))
      (514577 'move' tmp[514575](400556 call isTrue call_tmp[603032]))
      (514582 'move' tmp[514562](514579 '_paramFoldLogical' tmp[514563] tmp[514575]))
    }
    unknown call_tmp[603037] "expr temp" "maybe param" "maybe type" "temp"
    (603040 'move' call_tmp[603037](124949 call _cond_test tmp[514562]))
    if call_tmp[603037]
    {
      (124942 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (124947 call compilerError "Cannot remove indices from this domain type")
    }
    (468185 return _void[47])
  }
  function ==[124964](arg d1[124961]:_domain[123390](?), arg d2[124967]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[468189] "RVV" "temp"
    unknown call_tmp[603044] "expr temp" "maybe param" "maybe type" "temp"
    (603047 'move' call_tmp[603044](124981 call _value _mt[232] d1[124961]))
    unknown call_tmp[603051] "expr temp" "maybe param" "maybe type" "temp"
    (603054 'move' call_tmp[603051](124984 call rank _mt[232] call_tmp[603044]))
    unknown call_tmp[603058] "expr temp" "maybe param" "maybe type" "temp"
    (603061 'move' call_tmp[603058](124988 call _value _mt[232] d2[124967]))
    unknown call_tmp[603065] "expr temp" "maybe param" "maybe type" "temp"
    (603068 'move' call_tmp[603065](124991 call rank _mt[232] call_tmp[603058]))
    unknown call_tmp[603070] "expr temp" "maybe param" "maybe type" "temp"
    (603073 'move' call_tmp[603070](124994 call != call_tmp[603051] call_tmp[603065]))
    unknown call_tmp[603075] "expr temp" "maybe param" "maybe type" "temp"
    (603078 'move' call_tmp[603075](125096 call _cond_test call_tmp[603070]))
    if call_tmp[603075]
    {
      (468194 'move' ret[468189](468193 'deref' 0))
      gotoReturn _end_==[468187] _end_==[468187]
    }
    {
      unknown call_tmp[603082] "expr temp" "maybe param" "maybe type" "temp"
      (603085 'move' call_tmp[603082](125001 call _value _mt[232] d1[124961]))
      unknown call_tmp[603089] "expr temp" "maybe param" "maybe type" "temp"
      (603092 'move' call_tmp[603089](125005 call _value _mt[232] d2[124967]))
      unknown call_tmp[603094] "expr temp" "maybe param" "maybe type" "temp"
      (603097 'move' call_tmp[603094](125008 call == call_tmp[603082] call_tmp[603089]))
      unknown call_tmp[603099] "expr temp" "maybe param" "maybe type" "temp"
      (603102 'move' call_tmp[603099](125092 call _cond_test call_tmp[603094]))
      if call_tmp[603099]
      {
        (468199 'move' ret[468189](468198 'deref' 1))
        gotoReturn _end_==[468187] _end_==[468187]
      }
      {
        {
          unknown i[125048] "insert auto destroy"
          (491415 'init var' i[125048] 0)
          unknown tmp[125049] "maybe param" "temp"
          unknown call_tmp[603106] "expr temp" "maybe param" "maybe type" "temp"
          (603109 'move' call_tmp[603106](125016 call _value _mt[232] d1[124961]))
          unknown call_tmp[603113] "expr temp" "maybe param" "maybe type" "temp"
          (603116 'move' call_tmp[603113](125019 call rank _mt[232] call_tmp[603106]))
          (125061 'move' tmp[125049](125059 call chpl_compute_low_param_loop_bound 1 call_tmp[603113]))
          unknown tmp[125050] "maybe param" "temp"
          unknown call_tmp[603120] "expr temp" "maybe param" "maybe type" "temp"
          (603123 'move' call_tmp[603120](125068 call _value _mt[232] d1[124961]))
          unknown call_tmp[603127] "expr temp" "maybe param" "maybe type" "temp"
          (603130 'move' call_tmp[603127](125066 call rank _mt[232] call_tmp[603120]))
          (125074 'move' tmp[125050](125072 call chpl_compute_high_param_loop_bound 1 call_tmp[603127]))
          unknown tmp[125051] "maybe param" "temp"
          (125077 'move' tmp[125051] 1)
          ParamForLoop
          { i[125048] tmp[125049] tmp[125050] tmp[125051]
            unknown call_tmp[603134] "expr temp" "maybe param" "maybe type" "temp"
            (603137 'move' call_tmp[603134](125030 call(125025 call (partial) dim _mt[232] d1[124961]) i[125048]))
            unknown call_tmp[603141] "expr temp" "maybe param" "maybe type" "temp"
            (603144 'move' call_tmp[603141](125037 call(125032 call (partial) dim _mt[232] d2[124967]) i[125048]))
            unknown call_tmp[603146] "expr temp" "maybe param" "maybe type" "temp"
            (603149 'move' call_tmp[603146](125038 call != call_tmp[603134] call_tmp[603141]))
            unknown call_tmp[603151] "expr temp" "maybe param" "maybe type" "temp"
            (603154 'move' call_tmp[603151](125043 call _cond_test call_tmp[603146]))
            if call_tmp[603151]
            {
              (468204 'move' ret[468189](468203 'deref' 0))
              gotoReturn _end_==[468187] _end_==[468187]
            }
          }
          label _unused_continueLabel[125053]
          label _breakLabel[125052]
        }
        (468209 'move' ret[468189](468208 'deref' 1))
        gotoReturn _end_==[468187] _end_==[468187]
      }
    }
    label _end_==[468187]
    (468191 return ret[468189])
  }
  where {
    unknown tmp[400572] "maybe param" "temp"
    (400583 'move' tmp[400572](124973 call isRectangularDom d1[124961]))
    unknown call_tmp[603156] "expr temp" "maybe param" "maybe type" "temp"
    (603159 'move' call_tmp[603156](400585 call _cond_invalid tmp[400572]))
    if call_tmp[603156]
    {
      (400588 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514589] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514590] "maybe param" "temp"
    unknown call_tmp[603161] "expr temp" "maybe param" "maybe type" "temp"
    (603164 'move' call_tmp[603161](400573 call isTrue tmp[400572]))
    (514595 'move' tmp[514590](514593 call _cond_test call_tmp[603161]))
    if tmp[514590]
    {
      unknown tmp[514597] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603166] "expr temp" "maybe param" "maybe type" "temp"
      (603169 'move' call_tmp[603166](124977 call isRectangularDom d2[124967]))
      (514599 'move' tmp[514597](400576 call isTrue call_tmp[603166]))
      (514604 'move' tmp[514589](514601 '_paramFoldLogical' tmp[514590] tmp[514597]))
    }
    {
      (514609 'move' tmp[514589](514606 '_paramFoldLogical' tmp[514590] 0))
    }
    (691881 call _statementLevelSymbol tmp[514589])
  }
  function !=[125111](arg d1[125108]:_domain[123390](?), arg d2[125114]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[468215] "RVV" "temp"
    unknown call_tmp[603173] "expr temp" "maybe param" "maybe type" "temp"
    (603176 'move' call_tmp[603173](125128 call _value _mt[232] d1[125108]))
    unknown call_tmp[603180] "expr temp" "maybe param" "maybe type" "temp"
    (603183 'move' call_tmp[603180](125131 call rank _mt[232] call_tmp[603173]))
    unknown call_tmp[603187] "expr temp" "maybe param" "maybe type" "temp"
    (603190 'move' call_tmp[603187](125135 call _value _mt[232] d2[125114]))
    unknown call_tmp[603194] "expr temp" "maybe param" "maybe type" "temp"
    (603197 'move' call_tmp[603194](125138 call rank _mt[232] call_tmp[603187]))
    unknown call_tmp[603199] "expr temp" "maybe param" "maybe type" "temp"
    (603202 'move' call_tmp[603199](125141 call != call_tmp[603180] call_tmp[603194]))
    unknown call_tmp[603204] "expr temp" "maybe param" "maybe type" "temp"
    (603207 'move' call_tmp[603204](125243 call _cond_test call_tmp[603199]))
    if call_tmp[603204]
    {
      (468220 'move' ret[468215](468219 'deref' 1))
      gotoReturn _end_!=[468213] _end_!=[468213]
    }
    {
      unknown call_tmp[603211] "expr temp" "maybe param" "maybe type" "temp"
      (603214 'move' call_tmp[603211](125148 call _value _mt[232] d1[125108]))
      unknown call_tmp[603218] "expr temp" "maybe param" "maybe type" "temp"
      (603221 'move' call_tmp[603218](125152 call _value _mt[232] d2[125114]))
      unknown call_tmp[603223] "expr temp" "maybe param" "maybe type" "temp"
      (603226 'move' call_tmp[603223](125155 call == call_tmp[603211] call_tmp[603218]))
      unknown call_tmp[603228] "expr temp" "maybe param" "maybe type" "temp"
      (603231 'move' call_tmp[603228](125239 call _cond_test call_tmp[603223]))
      if call_tmp[603228]
      {
        (468225 'move' ret[468215](468224 'deref' 0))
        gotoReturn _end_!=[468213] _end_!=[468213]
      }
      {
        {
          unknown i[125195] "insert auto destroy"
          (491417 'init var' i[125195] 0)
          unknown tmp[125196] "maybe param" "temp"
          unknown call_tmp[603235] "expr temp" "maybe param" "maybe type" "temp"
          (603238 'move' call_tmp[603235](125163 call _value _mt[232] d1[125108]))
          unknown call_tmp[603242] "expr temp" "maybe param" "maybe type" "temp"
          (603245 'move' call_tmp[603242](125166 call rank _mt[232] call_tmp[603235]))
          (125208 'move' tmp[125196](125206 call chpl_compute_low_param_loop_bound 1 call_tmp[603242]))
          unknown tmp[125197] "maybe param" "temp"
          unknown call_tmp[603249] "expr temp" "maybe param" "maybe type" "temp"
          (603252 'move' call_tmp[603249](125215 call _value _mt[232] d1[125108]))
          unknown call_tmp[603256] "expr temp" "maybe param" "maybe type" "temp"
          (603259 'move' call_tmp[603256](125213 call rank _mt[232] call_tmp[603249]))
          (125221 'move' tmp[125197](125219 call chpl_compute_high_param_loop_bound 1 call_tmp[603256]))
          unknown tmp[125198] "maybe param" "temp"
          (125224 'move' tmp[125198] 1)
          ParamForLoop
          { i[125195] tmp[125196] tmp[125197] tmp[125198]
            unknown call_tmp[603263] "expr temp" "maybe param" "maybe type" "temp"
            (603266 'move' call_tmp[603263](125177 call(125172 call (partial) dim _mt[232] d1[125108]) i[125195]))
            unknown call_tmp[603270] "expr temp" "maybe param" "maybe type" "temp"
            (603273 'move' call_tmp[603270](125184 call(125179 call (partial) dim _mt[232] d2[125114]) i[125195]))
            unknown call_tmp[603275] "expr temp" "maybe param" "maybe type" "temp"
            (603278 'move' call_tmp[603275](125185 call != call_tmp[603263] call_tmp[603270]))
            unknown call_tmp[603280] "expr temp" "maybe param" "maybe type" "temp"
            (603283 'move' call_tmp[603280](125190 call _cond_test call_tmp[603275]))
            if call_tmp[603280]
            {
              (468230 'move' ret[468215](468229 'deref' 1))
              gotoReturn _end_!=[468213] _end_!=[468213]
            }
          }
          label _unused_continueLabel[125200]
          label _breakLabel[125199]
        }
        (468235 'move' ret[468215](468234 'deref' 0))
        gotoReturn _end_!=[468213] _end_!=[468213]
      }
    }
    label _end_!=[468213]
    (468217 return ret[468215])
  }
  where {
    unknown tmp[400593] "maybe param" "temp"
    (400604 'move' tmp[400593](125120 call isRectangularDom d1[125108]))
    unknown call_tmp[603285] "expr temp" "maybe param" "maybe type" "temp"
    (603288 'move' call_tmp[603285](400606 call _cond_invalid tmp[400593]))
    if call_tmp[603285]
    {
      (400609 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514616] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514617] "maybe param" "temp"
    unknown call_tmp[603290] "expr temp" "maybe param" "maybe type" "temp"
    (603293 'move' call_tmp[603290](400594 call isTrue tmp[400593]))
    (514622 'move' tmp[514617](514620 call _cond_test call_tmp[603290]))
    if tmp[514617]
    {
      unknown tmp[514624] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603295] "expr temp" "maybe param" "maybe type" "temp"
      (603298 'move' call_tmp[603295](125124 call isRectangularDom d2[125114]))
      (514626 'move' tmp[514624](400597 call isTrue call_tmp[603295]))
      (514631 'move' tmp[514616](514628 '_paramFoldLogical' tmp[514617] tmp[514624]))
    }
    {
      (514636 'move' tmp[514616](514633 '_paramFoldLogical' tmp[514617] 0))
    }
    (691883 call _statementLevelSymbol tmp[514616])
  }
  function ==[125258](arg d1[125255]:_domain[123390](?), arg d2[125261]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[468241] "RVV" "temp"
    unknown call_tmp[603302] "expr temp" "maybe param" "maybe type" "temp"
    (603305 'move' call_tmp[603302](125275 call _value _mt[232] d1[125255]))
    unknown call_tmp[603309] "expr temp" "maybe param" "maybe type" "temp"
    (603312 'move' call_tmp[603309](125279 call _value _mt[232] d2[125261]))
    unknown call_tmp[603314] "expr temp" "maybe param" "maybe type" "temp"
    (603317 'move' call_tmp[603314](125282 call == call_tmp[603302] call_tmp[603309]))
    unknown call_tmp[603319] "expr temp" "maybe param" "maybe type" "temp"
    (603322 'move' call_tmp[603319](125287 call _cond_test call_tmp[603314]))
    if call_tmp[603319]
    {
      (468246 'move' ret[468241](468245 'deref' 1))
      gotoReturn _end_==[468239] _end_==[468239]
    }
    unknown call_tmp[603326] "expr temp" "maybe param" "maybe type" "temp"
    (603329 'move' call_tmp[603326](125294 call numIndices _mt[232] d1[125255]))
    unknown call_tmp[603333] "expr temp" "maybe param" "maybe type" "temp"
    (603336 'move' call_tmp[603333](125298 call numIndices _mt[232] d2[125261]))
    unknown call_tmp[603338] "expr temp" "maybe param" "maybe type" "temp"
    (603341 'move' call_tmp[603338](125301 call != call_tmp[603326] call_tmp[603333]))
    unknown call_tmp[603343] "expr temp" "maybe param" "maybe type" "temp"
    (603346 'move' call_tmp[603343](125306 call _cond_test call_tmp[603338]))
    if call_tmp[603343]
    {
      (468251 'move' ret[468241](468250 'deref' 0))
      gotoReturn _end_==[468239] _end_==[468239]
    }
    {
      unknown _indexOfInterest[125330] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125331] "expr temp" "temp"
      (125340 'move' _iterator[125331](125338 call _getIterator d1[125255]))
      Defer
      {
        {
          (125356 call _freeIterator _iterator[125331])
        }
      }
      { scopeless type
        (125345 'move' _indexOfInterest[125330](125342 call iteratorIndex _iterator[125331]))
      }
      ForLoop
      {
        unknown idx[125349] "index var" "insert auto destroy"
        (125351 'move' idx[125349] _indexOfInterest[125330])
        unknown call_tmp[603350] "expr temp" "maybe param" "maybe type" "temp"
        (603353 'move' call_tmp[603350](125319 call(125314 call (partial) contains _mt[232] d2[125261]) idx[125349]))
        unknown call_tmp[603355] "expr temp" "maybe param" "maybe type" "temp"
        (603358 'move' call_tmp[603355](125320 call ! call_tmp[603350]))
        unknown call_tmp[603360] "expr temp" "maybe param" "maybe type" "temp"
        (603363 'move' call_tmp[603360](125325 call _cond_test call_tmp[603355]))
        if call_tmp[603360]
        {
          (468256 'move' ret[468241](468255 'deref' 0))
          gotoReturn _end_==[468239] _end_==[468239]
        }
        label _continueLabel[125335]
        _indexOfInterest[125330]
        _iterator[125331]
      }
      label _breakLabel[125336]
    }
    (468261 'move' ret[468241](468260 'deref' 1))
    label _end_==[468239]
    (468243 return ret[468241])
  }
  where {
    unknown tmp[400614] "maybe param" "temp"
    (400625 'move' tmp[400614](125267 call isAssociativeDom d1[125255]))
    unknown call_tmp[603365] "expr temp" "maybe param" "maybe type" "temp"
    (603368 'move' call_tmp[603365](400627 call _cond_invalid tmp[400614]))
    if call_tmp[603365]
    {
      (400630 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514643] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514644] "maybe param" "temp"
    unknown call_tmp[603370] "expr temp" "maybe param" "maybe type" "temp"
    (603373 'move' call_tmp[603370](400615 call isTrue tmp[400614]))
    (514649 'move' tmp[514644](514647 call _cond_test call_tmp[603370]))
    if tmp[514644]
    {
      unknown tmp[514651] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603375] "expr temp" "maybe param" "maybe type" "temp"
      (603378 'move' call_tmp[603375](125271 call isAssociativeDom d2[125261]))
      (514653 'move' tmp[514651](400618 call isTrue call_tmp[603375]))
      (514658 'move' tmp[514643](514655 '_paramFoldLogical' tmp[514644] tmp[514651]))
    }
    {
      (514663 'move' tmp[514643](514660 '_paramFoldLogical' tmp[514644] 0))
    }
    (691885 call _statementLevelSymbol tmp[514643])
  }
  function !=[125375](arg d1[125372]:_domain[123390](?), arg d2[125378]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[468265] "RVV" "temp"
    unknown call_tmp[603382] "expr temp" "maybe param" "maybe type" "temp"
    (603385 'move' call_tmp[603382](125392 call _value _mt[232] d1[125372]))
    unknown call_tmp[603389] "expr temp" "maybe param" "maybe type" "temp"
    (603392 'move' call_tmp[603389](125396 call _value _mt[232] d2[125378]))
    unknown call_tmp[603394] "expr temp" "maybe param" "maybe type" "temp"
    (603397 'move' call_tmp[603394](125399 call == call_tmp[603382] call_tmp[603389]))
    unknown call_tmp[603399] "expr temp" "maybe param" "maybe type" "temp"
    (603402 'move' call_tmp[603399](125404 call _cond_test call_tmp[603394]))
    if call_tmp[603399]
    {
      (468270 'move' ret[468265](468269 'deref' 0))
      gotoReturn _end_!=[468263] _end_!=[468263]
    }
    unknown call_tmp[603406] "expr temp" "maybe param" "maybe type" "temp"
    (603409 'move' call_tmp[603406](125411 call numIndices _mt[232] d1[125372]))
    unknown call_tmp[603413] "expr temp" "maybe param" "maybe type" "temp"
    (603416 'move' call_tmp[603413](125415 call numIndices _mt[232] d2[125378]))
    unknown call_tmp[603418] "expr temp" "maybe param" "maybe type" "temp"
    (603421 'move' call_tmp[603418](125418 call != call_tmp[603406] call_tmp[603413]))
    unknown call_tmp[603423] "expr temp" "maybe param" "maybe type" "temp"
    (603426 'move' call_tmp[603423](125423 call _cond_test call_tmp[603418]))
    if call_tmp[603423]
    {
      (468275 'move' ret[468265](468274 'deref' 1))
      gotoReturn _end_!=[468263] _end_!=[468263]
    }
    {
      unknown _indexOfInterest[125447] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125448] "expr temp" "temp"
      (125457 'move' _iterator[125448](125455 call _getIterator d1[125372]))
      Defer
      {
        {
          (125473 call _freeIterator _iterator[125448])
        }
      }
      { scopeless type
        (125462 'move' _indexOfInterest[125447](125459 call iteratorIndex _iterator[125448]))
      }
      ForLoop
      {
        unknown idx[125466] "index var" "insert auto destroy"
        (125468 'move' idx[125466] _indexOfInterest[125447])
        unknown call_tmp[603430] "expr temp" "maybe param" "maybe type" "temp"
        (603433 'move' call_tmp[603430](125436 call(125431 call (partial) contains _mt[232] d2[125378]) idx[125466]))
        unknown call_tmp[603435] "expr temp" "maybe param" "maybe type" "temp"
        (603438 'move' call_tmp[603435](125437 call ! call_tmp[603430]))
        unknown call_tmp[603440] "expr temp" "maybe param" "maybe type" "temp"
        (603443 'move' call_tmp[603440](125442 call _cond_test call_tmp[603435]))
        if call_tmp[603440]
        {
          (468280 'move' ret[468265](468279 'deref' 1))
          gotoReturn _end_!=[468263] _end_!=[468263]
        }
        label _continueLabel[125452]
        _indexOfInterest[125447]
        _iterator[125448]
      }
      label _breakLabel[125453]
    }
    (468285 'move' ret[468265](468284 'deref' 0))
    label _end_!=[468263]
    (468267 return ret[468265])
  }
  where {
    unknown tmp[400635] "maybe param" "temp"
    (400646 'move' tmp[400635](125384 call isAssociativeDom d1[125372]))
    unknown call_tmp[603445] "expr temp" "maybe param" "maybe type" "temp"
    (603448 'move' call_tmp[603445](400648 call _cond_invalid tmp[400635]))
    if call_tmp[603445]
    {
      (400651 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514670] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514671] "maybe param" "temp"
    unknown call_tmp[603450] "expr temp" "maybe param" "maybe type" "temp"
    (603453 'move' call_tmp[603450](400636 call isTrue tmp[400635]))
    (514676 'move' tmp[514671](514674 call _cond_test call_tmp[603450]))
    if tmp[514671]
    {
      unknown tmp[514678] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603455] "expr temp" "maybe param" "maybe type" "temp"
      (603458 'move' call_tmp[603455](125388 call isAssociativeDom d2[125378]))
      (514680 'move' tmp[514678](400639 call isTrue call_tmp[603455]))
      (514685 'move' tmp[514670](514682 '_paramFoldLogical' tmp[514671] tmp[514678]))
    }
    {
      (514690 'move' tmp[514670](514687 '_paramFoldLogical' tmp[514671] 0))
    }
    (691887 call _statementLevelSymbol tmp[514670])
  }
  function ==[125492](arg d1[125489]:_domain[123390](?), arg d2[125495]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[468289] "RVV" "temp"
    unknown call_tmp[603462] "expr temp" "maybe param" "maybe type" "temp"
    (603465 'move' call_tmp[603462](125509 call _value _mt[232] d1[125489]))
    unknown call_tmp[603469] "expr temp" "maybe param" "maybe type" "temp"
    (603472 'move' call_tmp[603469](125513 call _value _mt[232] d2[125495]))
    unknown call_tmp[603474] "expr temp" "maybe param" "maybe type" "temp"
    (603477 'move' call_tmp[603474](125516 call == call_tmp[603462] call_tmp[603469]))
    unknown call_tmp[603479] "expr temp" "maybe param" "maybe type" "temp"
    (603482 'move' call_tmp[603479](125521 call _cond_test call_tmp[603474]))
    if call_tmp[603479]
    {
      (468294 'move' ret[468289](468293 'deref' 1))
      gotoReturn _end_==[468287] _end_==[468287]
    }
    unknown call_tmp[603486] "expr temp" "maybe param" "maybe type" "temp"
    (603489 'move' call_tmp[603486](125528 call numIndices _mt[232] d1[125489]))
    unknown call_tmp[603493] "expr temp" "maybe param" "maybe type" "temp"
    (603496 'move' call_tmp[603493](125532 call numIndices _mt[232] d2[125495]))
    unknown call_tmp[603498] "expr temp" "maybe param" "maybe type" "temp"
    (603501 'move' call_tmp[603498](125535 call != call_tmp[603486] call_tmp[603493]))
    unknown call_tmp[603503] "expr temp" "maybe param" "maybe type" "temp"
    (603506 'move' call_tmp[603503](125540 call _cond_test call_tmp[603498]))
    if call_tmp[603503]
    {
      (468299 'move' ret[468289](468298 'deref' 0))
      gotoReturn _end_==[468287] _end_==[468287]
    }
    unknown call_tmp[603510] "expr temp" "maybe param" "maybe type" "temp"
    (603513 'move' call_tmp[603510](125546 call _value _mt[232] d1[125489]))
    unknown call_tmp[603517] "expr temp" "maybe param" "maybe type" "temp"
    (603520 'move' call_tmp[603517](125549 call parentDom _mt[232] call_tmp[603510]))
    unknown call_tmp[603524] "expr temp" "maybe param" "maybe type" "temp"
    (603527 'move' call_tmp[603524](125553 call _value _mt[232] d2[125495]))
    unknown call_tmp[603531] "expr temp" "maybe param" "maybe type" "temp"
    (603534 'move' call_tmp[603531](125556 call parentDom _mt[232] call_tmp[603524]))
    unknown call_tmp[603536] "expr temp" "maybe param" "maybe type" "temp"
    (603539 'move' call_tmp[603536](125559 call != call_tmp[603517] call_tmp[603531]))
    unknown call_tmp[603541] "expr temp" "maybe param" "maybe type" "temp"
    (603544 'move' call_tmp[603541](125564 call _cond_test call_tmp[603536]))
    if call_tmp[603541]
    {
      (468304 'move' ret[468289](468303 'deref' 0))
      gotoReturn _end_==[468287] _end_==[468287]
    }
    {
      unknown _indexOfInterest[125588] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125589] "expr temp" "temp"
      (125598 'move' _iterator[125589](125596 call _getIterator d1[125489]))
      Defer
      {
        {
          (125614 call _freeIterator _iterator[125589])
        }
      }
      { scopeless type
        (125603 'move' _indexOfInterest[125588](125600 call iteratorIndex _iterator[125589]))
      }
      ForLoop
      {
        unknown idx[125607] "index var" "insert auto destroy"
        (125609 'move' idx[125607] _indexOfInterest[125588])
        unknown call_tmp[603548] "expr temp" "maybe param" "maybe type" "temp"
        (603551 'move' call_tmp[603548](125577 call(125572 call (partial) contains _mt[232] d2[125495]) idx[125607]))
        unknown call_tmp[603553] "expr temp" "maybe param" "maybe type" "temp"
        (603556 'move' call_tmp[603553](125578 call ! call_tmp[603548]))
        unknown call_tmp[603558] "expr temp" "maybe param" "maybe type" "temp"
        (603561 'move' call_tmp[603558](125583 call _cond_test call_tmp[603553]))
        if call_tmp[603558]
        {
          (468309 'move' ret[468289](468308 'deref' 0))
          gotoReturn _end_==[468287] _end_==[468287]
        }
        label _continueLabel[125593]
        _indexOfInterest[125588]
        _iterator[125589]
      }
      label _breakLabel[125594]
    }
    (468314 'move' ret[468289](468313 'deref' 1))
    label _end_==[468287]
    (468291 return ret[468289])
  }
  where {
    unknown tmp[400656] "maybe param" "temp"
    (400667 'move' tmp[400656](125501 call isSparseDom d1[125489]))
    unknown call_tmp[603563] "expr temp" "maybe param" "maybe type" "temp"
    (603566 'move' call_tmp[603563](400669 call _cond_invalid tmp[400656]))
    if call_tmp[603563]
    {
      (400672 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514697] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514698] "maybe param" "temp"
    unknown call_tmp[603568] "expr temp" "maybe param" "maybe type" "temp"
    (603571 'move' call_tmp[603568](400657 call isTrue tmp[400656]))
    (514703 'move' tmp[514698](514701 call _cond_test call_tmp[603568]))
    if tmp[514698]
    {
      unknown tmp[514705] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603573] "expr temp" "maybe param" "maybe type" "temp"
      (603576 'move' call_tmp[603573](125505 call isSparseDom d2[125495]))
      (514707 'move' tmp[514705](400660 call isTrue call_tmp[603573]))
      (514712 'move' tmp[514697](514709 '_paramFoldLogical' tmp[514698] tmp[514705]))
    }
    {
      (514717 'move' tmp[514697](514714 '_paramFoldLogical' tmp[514698] 0))
    }
    (691889 call _statementLevelSymbol tmp[514697])
  }
  function !=[125633](arg d1[125630]:_domain[123390](?), arg d2[125636]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[468318] "RVV" "temp"
    unknown call_tmp[603580] "expr temp" "maybe param" "maybe type" "temp"
    (603583 'move' call_tmp[603580](125650 call _value _mt[232] d1[125630]))
    unknown call_tmp[603587] "expr temp" "maybe param" "maybe type" "temp"
    (603590 'move' call_tmp[603587](125654 call _value _mt[232] d2[125636]))
    unknown call_tmp[603592] "expr temp" "maybe param" "maybe type" "temp"
    (603595 'move' call_tmp[603592](125657 call == call_tmp[603580] call_tmp[603587]))
    unknown call_tmp[603597] "expr temp" "maybe param" "maybe type" "temp"
    (603600 'move' call_tmp[603597](125662 call _cond_test call_tmp[603592]))
    if call_tmp[603597]
    {
      (468323 'move' ret[468318](468322 'deref' 0))
      gotoReturn _end_!=[468316] _end_!=[468316]
    }
    unknown call_tmp[603604] "expr temp" "maybe param" "maybe type" "temp"
    (603607 'move' call_tmp[603604](125669 call numIndices _mt[232] d1[125630]))
    unknown call_tmp[603611] "expr temp" "maybe param" "maybe type" "temp"
    (603614 'move' call_tmp[603611](125673 call numIndices _mt[232] d2[125636]))
    unknown call_tmp[603616] "expr temp" "maybe param" "maybe type" "temp"
    (603619 'move' call_tmp[603616](125676 call != call_tmp[603604] call_tmp[603611]))
    unknown call_tmp[603621] "expr temp" "maybe param" "maybe type" "temp"
    (603624 'move' call_tmp[603621](125681 call _cond_test call_tmp[603616]))
    if call_tmp[603621]
    {
      (468328 'move' ret[468318](468327 'deref' 1))
      gotoReturn _end_!=[468316] _end_!=[468316]
    }
    unknown call_tmp[603628] "expr temp" "maybe param" "maybe type" "temp"
    (603631 'move' call_tmp[603628](125687 call _value _mt[232] d1[125630]))
    unknown call_tmp[603635] "expr temp" "maybe param" "maybe type" "temp"
    (603638 'move' call_tmp[603635](125690 call parentDom _mt[232] call_tmp[603628]))
    unknown call_tmp[603642] "expr temp" "maybe param" "maybe type" "temp"
    (603645 'move' call_tmp[603642](125694 call _value _mt[232] d2[125636]))
    unknown call_tmp[603649] "expr temp" "maybe param" "maybe type" "temp"
    (603652 'move' call_tmp[603649](125697 call parentDom _mt[232] call_tmp[603642]))
    unknown call_tmp[603654] "expr temp" "maybe param" "maybe type" "temp"
    (603657 'move' call_tmp[603654](125700 call != call_tmp[603635] call_tmp[603649]))
    unknown call_tmp[603659] "expr temp" "maybe param" "maybe type" "temp"
    (603662 'move' call_tmp[603659](125705 call _cond_test call_tmp[603654]))
    if call_tmp[603659]
    {
      (468333 'move' ret[468318](468332 'deref' 1))
      gotoReturn _end_!=[468316] _end_!=[468316]
    }
    {
      unknown _indexOfInterest[125729] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125730] "expr temp" "temp"
      (125739 'move' _iterator[125730](125737 call _getIterator d1[125630]))
      Defer
      {
        {
          (125755 call _freeIterator _iterator[125730])
        }
      }
      { scopeless type
        (125744 'move' _indexOfInterest[125729](125741 call iteratorIndex _iterator[125730]))
      }
      ForLoop
      {
        unknown idx[125748] "index var" "insert auto destroy"
        (125750 'move' idx[125748] _indexOfInterest[125729])
        unknown call_tmp[603666] "expr temp" "maybe param" "maybe type" "temp"
        (603669 'move' call_tmp[603666](125718 call(125713 call (partial) contains _mt[232] d2[125636]) idx[125748]))
        unknown call_tmp[603671] "expr temp" "maybe param" "maybe type" "temp"
        (603674 'move' call_tmp[603671](125719 call ! call_tmp[603666]))
        unknown call_tmp[603676] "expr temp" "maybe param" "maybe type" "temp"
        (603679 'move' call_tmp[603676](125724 call _cond_test call_tmp[603671]))
        if call_tmp[603676]
        {
          (468338 'move' ret[468318](468337 'deref' 1))
          gotoReturn _end_!=[468316] _end_!=[468316]
        }
        label _continueLabel[125734]
        _indexOfInterest[125729]
        _iterator[125730]
      }
      label _breakLabel[125735]
    }
    (468343 'move' ret[468318](468342 'deref' 0))
    label _end_!=[468316]
    (468320 return ret[468318])
  }
  where {
    unknown tmp[400677] "maybe param" "temp"
    (400688 'move' tmp[400677](125642 call isSparseDom d1[125630]))
    unknown call_tmp[603681] "expr temp" "maybe param" "maybe type" "temp"
    (603684 'move' call_tmp[603681](400690 call _cond_invalid tmp[400677]))
    if call_tmp[603681]
    {
      (400693 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514724] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514725] "maybe param" "temp"
    unknown call_tmp[603686] "expr temp" "maybe param" "maybe type" "temp"
    (603689 'move' call_tmp[603686](400678 call isTrue tmp[400677]))
    (514730 'move' tmp[514725](514728 call _cond_test call_tmp[603686]))
    if tmp[514725]
    {
      unknown tmp[514732] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603691] "expr temp" "maybe param" "maybe type" "temp"
      (603694 'move' call_tmp[603691](125646 call isSparseDom d2[125636]))
      (514734 'move' tmp[514732](400681 call isTrue call_tmp[603691]))
      (514739 'move' tmp[514724](514736 '_paramFoldLogical' tmp[514725] tmp[514732]))
    }
    {
      (514744 'move' tmp[514724](514741 '_paramFoldLogical' tmp[514725] 0))
    }
    (691891 call _statementLevelSymbol tmp[514724])
  }
  function ==[125774](arg d1[125771]:_domain[123390](?), arg d2[125777]:_domain[123390](?)) param : _unknown[43] "inline"
  {
    unknown ret[468347] "RVV" "param" "temp"
    (468352 'move' ret[468347](468351 'deref' 0))
    (468349 return ret[468347])
  }
  function !=[125792](arg d1[125789]:_domain[123390](?), arg d2[125795]:_domain[123390](?)) param : _unknown[43] "inline"
  {
    unknown ret[468356] "RVV" "param" "temp"
    (468361 'move' ret[468356](468360 'deref' 1))
    (468358 return ret[468356])
  }
  function shouldReturnRvalueByConstRef[125808](arg t[125806]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[468365] "RVV" "param" "temp"
    (468370 'move' ret[468365](468369 'deref' 1))
    (468367 return ret[468365])
  }
  function shouldReturnRvalueByValue[125820](arg t[125818]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[468374] "RVV" "param" "temp"
    unknown call_tmp[603696] "expr temp" "maybe param" "maybe type" "temp"
    (603699 'move' call_tmp[603696](125823 call ! PODValAccess[111841]))
    unknown call_tmp[603701] "expr temp" "maybe param" "maybe type" "temp"
    (603704 'move' call_tmp[603701](125828 call _cond_test call_tmp[603696]))
    if call_tmp[603701]
    {
      (468379 'move' ret[468374](468378 'deref' 0))
      gotoReturn _end_shouldReturnRvalueByValue[468372] _end_shouldReturnRvalueByValue[468372]
    }
    unknown call_tmp[603706] "expr temp" "maybe param" "maybe type" "temp"
    (603709 'move' call_tmp[603706](125837 call isPODType t[125818]))
    unknown call_tmp[603711] "expr temp" "maybe param" "maybe type" "temp"
    (603714 'move' call_tmp[603711](125841 call _cond_test call_tmp[603706]))
    if call_tmp[603711]
    {
      (468384 'move' ret[468374](468383 'deref' 1))
      gotoReturn _end_shouldReturnRvalueByValue[468372] _end_shouldReturnRvalueByValue[468372]
    }
    (468389 'move' ret[468374](468388 'deref' 0))
    label _end_shouldReturnRvalueByValue[468372]
    (468376 return ret[468374])
  }
  function _array[133150](?).chpl__serialize[125865](arg _mt[133154]:_MT[227], arg this[133152]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[468393] "RVV" "temp"
    unknown call_tmp[603718] "expr temp" "maybe param" "maybe type" "temp"
    (603721 'move' call_tmp[603718](352667 call _instance _mt[232] this[133152]))
    unknown call_tmp[603725] "expr temp" "maybe param" "maybe type" "temp"
    (603728 'move' call_tmp[603725](125880 call(125876 call (partial) chpl__serialize _mt[232] call_tmp[603718])))
    (468398 'move' ret[468393](468397 'deref' call_tmp[603725]))
    (468395 return ret[468393])
  }
  where {
    unknown call_tmp[603732] "expr temp" "maybe param" "maybe type" "temp"
    (603735 'move' call_tmp[603732](352662 call _instance _mt[232] this[133152]))
    (125874 call(125870 call (partial) chpl__rvfMe _mt[232] call_tmp[603732]))
  }
  function _array[133150](?).chpl__deserialize[125891](arg _mt[133158]:_MT[227], arg this[133156]:_array[133150](?), arg data[125889]:_any[170](?)) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    unknown ret[468402] "RVV" "temp"
    unknown call_tmp[603739] "expr temp" "maybe param" "maybe type" "temp"
    (603742 'move' call_tmp[603739](125898 'static field type' this[133156] "_instance"))
    unknown call_tmp[603744] "expr temp" "maybe param" "maybe type" "temp"
    (603747 'move' call_tmp[603744](125900 call _to_borrowed call_tmp[603739]))
    unknown call_tmp[603751] "maybe param" "maybe type" "temp"
    (603754 'move' call_tmp[603751](125906 call(125901 call (partial) chpl__deserialize _mt[232] call_tmp[603744]) data[125889]))
    unknown arrinst[125907] "insert auto destroy"
    (491419 'init var' arrinst[125907] call_tmp[603751])
    unknown call_tmp[603756] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (603759 'move' call_tmp[603756](691436 'new' _array[133150](?) nullPid[111825] arrinst[125907](_unowned = 1)))
    (468407 'move' ret[468402](468406 'deref' call_tmp[603756]))
    (468404 return ret[468402])
  }
  function _array[133150](?).chpl__promotionType[125925](arg _mt[133162]:_MT[227], arg this[133160]:_array[133150](?)) type : _unknown[43] "method" "primary method"
  {
    unknown ret[468411] "RVV" "temp" "type variable"
    unknown call_tmp[603763] "expr temp" "maybe param" "maybe type" "temp"
    (603766 'move' call_tmp[603763](352676 call _value _mt[232] this[133160]))
    unknown call_tmp[603770] "expr temp" "maybe param" "maybe type" "temp"
    (603773 'move' call_tmp[603770](125928 call eltType _mt[232] call_tmp[603763]))
    (468416 'move' ret[468411](468415 'deref' call_tmp[603770]))
    (468413 return ret[468411])
  }
  function _array[133150](?)._value[125938](arg _mt[133166]:_MT[227], arg this[133164]:_array[133150](?)) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    unknown ret[468420] "RVV" "temp"
    unknown call_tmp[603777] "expr temp" "maybe param" "maybe type" "temp"
    (603780 'move' call_tmp[603777](352681 call _instance _mt[232] this[133164]))
    unknown call_tmp[603782] "expr temp" "maybe param" "maybe type" "temp"
    (603785 'move' call_tmp[603782](125943 call _isPrivatized call_tmp[603777]))
    unknown call_tmp[603787] "expr temp" "maybe param" "maybe type" "temp"
    (603790 'move' call_tmp[603787](125957 call _cond_test call_tmp[603782]))
    if call_tmp[603787]
    {
      { scopeless type
        unknown call_type_tmp[443484] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[603794] "expr temp" "maybe param" "maybe type" "temp"
        (603797 'move' call_tmp[603794](352686 call _instance _mt[232] this[133164]))
        (443488 'move' call_type_tmp[443484](125946 'typeof' call_tmp[603794]))
      }
      unknown call_tmp[603801] "expr temp" "maybe param" "maybe type" "temp"
      (603804 'move' call_tmp[603801](352691 call _pid _mt[232] this[133164]))
      unknown call_tmp[603806] "expr temp" "maybe param" "maybe type" "temp"
      (603809 'move' call_tmp[603806](125949 call chpl_getPrivatizedCopy call_type_tmp[443484] call_tmp[603801]))
      (468425 'move' ret[468420](468424 'deref' call_tmp[603806]))
      gotoReturn _end__value[468418] _end__value[468418]
    }
    {
      unknown call_tmp[603813] "expr temp" "maybe param" "maybe type" "temp"
      (603816 'move' call_tmp[603813](352696 call _instance _mt[232] this[133164]))
      (468430 'move' ret[468420](468429 'deref' call_tmp[603813]))
      gotoReturn _end__value[468418] _end__value[468418]
    }
    label _end__value[468418]
    (468422 return ret[468420])
  }
  function _array[133150](?).chpl_forwarding_expr5__value[125971](arg _mt[133170]:_MT[227], arg this[133168]:_array[133150](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[468436] "RVV" "temp"
    (468440 'move' ret[468436](352700 call _value _mt[232] this[133168]))
    (468438 return ret[468436])
  }
  function _array[133150](?).deinit[125979](arg _mt[133174]:_MT[227], arg this[133172]:_array[133150](?)) : _unknown[43] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[603822] "expr temp" "maybe param" "maybe type" "temp"
    (603825 'move' call_tmp[603822](352705 call _unowned _mt[232] this[133172]))
    unknown call_tmp[603829] "expr temp" "maybe param" "maybe type" "temp"
    (603832 'move' call_tmp[603829](352710 call _instance _mt[232] this[133172]))
    (125985 call _do_destroy_arr call_tmp[603822] call_tmp[603829])
    (468442 return _void[47])
  }
  function _array[133150](?).eltType[125992](arg _mt[133178]:_MT[227], arg this[133176]:_array[133150](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[468446] "RVV" "temp" "type variable"
    unknown call_tmp[603836] "expr temp" "maybe param" "maybe type" "temp"
    (603839 'move' call_tmp[603836](352714 call _value _mt[232] this[133176]))
    unknown call_tmp[603843] "expr temp" "maybe param" "maybe type" "temp"
    (603846 'move' call_tmp[603843](125995 call eltType _mt[232] call_tmp[603836]))
    (468451 'move' ret[468446](468450 'deref' call_tmp[603843]))
    (468448 return ret[468446])
  }
  function _array[133150](?).idxType[126005](arg _mt[133182]:_MT[227], arg this[133180]:_array[133150](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[468455] "RVV" "temp" "type variable"
    unknown call_tmp[603850] "expr temp" "maybe param" "maybe type" "temp"
    (603853 'move' call_tmp[603850](352718 call _value _mt[232] this[133180]))
    unknown call_tmp[603857] "expr temp" "maybe param" "maybe type" "temp"
    (603860 'move' call_tmp[603857](126008 call idxType _mt[232] call_tmp[603850]))
    (468460 'move' ret[468455](468459 'deref' call_tmp[603857]))
    (468457 return ret[468455])
  }
  function _array[133150](?)._dom[126018](arg _mt[133186]:_MT[227], arg this[133184]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens" "return not owned"
  {
    unknown ret[468464] "RVV" "temp"
    unknown call_tmp[603864] "expr temp" "maybe param" "maybe type" "temp"
    (603867 'move' call_tmp[603864](352722 call _value _mt[232] this[133184]))
    unknown call_tmp[603871] "expr temp" "maybe param" "maybe type" "temp"
    (603874 'move' call_tmp[603871](126022 call dom _mt[232] call_tmp[603864]))
    unknown call_tmp[603876] "expr temp" "maybe param" "maybe type" "temp"
    (603879 'move' call_tmp[603876](126026 call _getDomain call_tmp[603871]))
    (468469 'move' ret[468464](468468 'deref' call_tmp[603876]))
    (468466 return ret[468464])
  }
  function _array[133150](?).rank[126034](arg _mt[133190]:_MT[227], arg this[133188]:_array[133150](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[468473] "RVV" "param" "temp"
    unknown call_tmp[603883] "expr temp" "maybe param" "maybe type" "temp"
    (603886 'move' call_tmp[603883](126037 call _dom _mt[232] this[133188]))
    unknown call_tmp[603890] "expr temp" "maybe param" "maybe type" "temp"
    (603893 'move' call_tmp[603890](126040 call rank _mt[232] call_tmp[603883]))
    (468478 'move' ret[468473](468477 'deref' call_tmp[603890]))
    (468475 return ret[468473])
  }
  function _array[133150](?).this[126063](arg _mt[133194]:_MT[227], ref arg this[133192]:_array[133150](?), arg i[126060] :
  unknown call_tmp[603897] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[468482] "RVV" "temp"
    unknown tmp[400698] "maybe param" "temp"
    (400709 'move' tmp[400698](126068 call isRectangularArr this[133192]))
    unknown call_tmp[603923] "expr temp" "maybe param" "maybe type" "temp"
    (603926 'move' call_tmp[603923](400711 call _cond_invalid tmp[400698]))
    if call_tmp[603923]
    {
      (400714 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[514751] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514752] "maybe param" "temp"
    unknown call_tmp[603928] "expr temp" "maybe param" "maybe type" "temp"
    (603931 'move' call_tmp[603928](400699 call isTrue tmp[400698]))
    (514757 'move' tmp[514752](514755 call _cond_test call_tmp[603928]))
    if tmp[514752]
    {
      (514762 'move' tmp[514751](514759 '_paramFoldLogical' tmp[514752] 1))
    }
    {
      unknown tmp[514764] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[603933] "expr temp" "maybe param" "maybe type" "temp"
      (603936 'move' call_tmp[603933](126072 call isSparseArr this[133192]))
      (514766 'move' tmp[514764](400703 call isTrue call_tmp[603933]))
      (514771 'move' tmp[514751](514768 '_paramFoldLogical' tmp[514752] tmp[514764]))
    }
    unknown call_tmp[603938] "expr temp" "maybe param" "maybe type" "temp"
    (603941 'move' call_tmp[603938](126096 call _cond_test tmp[514751]))
    if call_tmp[603938]
    {
      unknown call_tmp[603945] "expr temp" "maybe param" "maybe type" "temp"
      (603948 'move' call_tmp[603945](352737 call _value _mt[232] this[133192]))
      unknown call_tmp[603952] "expr temp" "maybe param" "maybe type" "temp"
      (603955 'move' call_tmp[603952](126081 call(126076 call (partial) dsiAccess _mt[232] call_tmp[603945]) i[126060]))
      (468487 'move' ret[468482](468486 'addr of' call_tmp[603952]))
      gotoReturn _end_this[468480] _end_this[468480]
    }
    {
      unknown call_tmp[603959] "expr temp" "maybe param" "maybe type" "temp"
      (603962 'move' call_tmp[603959](352742 call _value _mt[232] this[133192]))
      unknown call_tmp[603966] "expr temp" "maybe param" "maybe type" "temp"
      (603969 'move' call_tmp[603966](126091 call i[126060] 1))
      unknown call_tmp[603971] "expr temp" "maybe param" "maybe type" "temp"
      (603974 'move' call_tmp[603971](126093 call(126085 call (partial) dsiAccess _mt[232] call_tmp[603959]) call_tmp[603966]))
      (468492 'move' ret[468482](468491 'addr of' call_tmp[603971]))
      gotoReturn _end_this[468480] _end_this[468480]
    }
    label _end_this[468480]
    (468484 return ret[468482])
  }
  function _array[133150](?).this[126120](arg _mt[133198]:_MT[227], const arg this[133196]:_array[133150](?), arg i[126117] :
  unknown call_tmp[603978] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[468498] "RVV" "temp"
    unknown tmp[400719] "maybe param" "temp"
    (400730 'move' tmp[400719](126132 call isRectangularArr this[133196]))
    unknown call_tmp[604004] "expr temp" "maybe param" "maybe type" "temp"
    (604007 'move' call_tmp[604004](400732 call _cond_invalid tmp[400719]))
    if call_tmp[604004]
    {
      (400735 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[514778] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514779] "maybe param" "temp"
    unknown call_tmp[604009] "expr temp" "maybe param" "maybe type" "temp"
    (604012 'move' call_tmp[604009](400720 call isTrue tmp[400719]))
    (514784 'move' tmp[514779](514782 call _cond_test call_tmp[604009]))
    if tmp[514779]
    {
      (514789 'move' tmp[514778](514786 '_paramFoldLogical' tmp[514779] 1))
    }
    {
      unknown tmp[514791] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604014] "expr temp" "maybe param" "maybe type" "temp"
      (604017 'move' call_tmp[604014](126136 call isSparseArr this[133196]))
      (514793 'move' tmp[514791](400724 call isTrue call_tmp[604014]))
      (514798 'move' tmp[514778](514795 '_paramFoldLogical' tmp[514779] tmp[514791]))
    }
    unknown call_tmp[604019] "expr temp" "maybe param" "maybe type" "temp"
    (604022 'move' call_tmp[604019](126160 call _cond_test tmp[514778]))
    if call_tmp[604019]
    {
      unknown call_tmp[604026] "expr temp" "maybe param" "maybe type" "temp"
      (604029 'move' call_tmp[604026](352761 call _value _mt[232] this[133196]))
      unknown call_tmp[604033] "expr temp" "maybe param" "maybe type" "temp"
      (604036 'move' call_tmp[604033](126145 call(126140 call (partial) dsiAccess _mt[232] call_tmp[604026]) i[126117]))
      (468503 'move' ret[468498](468502 'deref' call_tmp[604033]))
      gotoReturn _end_this[468496] _end_this[468496]
    }
    {
      unknown call_tmp[604040] "expr temp" "maybe param" "maybe type" "temp"
      (604043 'move' call_tmp[604040](352766 call _value _mt[232] this[133196]))
      unknown call_tmp[604047] "expr temp" "maybe param" "maybe type" "temp"
      (604050 'move' call_tmp[604047](126155 call i[126117] 1))
      unknown call_tmp[604052] "expr temp" "maybe param" "maybe type" "temp"
      (604055 'move' call_tmp[604052](126157 call(126149 call (partial) dsiAccess _mt[232] call_tmp[604040]) call_tmp[604047]))
      (468508 'move' ret[468498](468507 'deref' call_tmp[604052]))
      gotoReturn _end_this[468496] _end_this[468496]
    }
    label _end_this[468496]
    (468500 return ret[468498])
  }
  where {
    unknown call_tmp[604059] "expr temp" "maybe param" "maybe type" "temp"
    (604062 'move' call_tmp[604059](352755 call _value _mt[232] this[133196]))
    unknown call_tmp[604066] "expr temp" "maybe param" "maybe type" "temp"
    (604069 'move' call_tmp[604066](126124 call eltType _mt[232] call_tmp[604059]))
    (126128 call shouldReturnRvalueByValue call_tmp[604066])
  }
  function _array[133150](?).this[126185](arg _mt[133202]:_MT[227], const arg this[133200]:_array[133150](?), arg i[126182] :
  unknown call_tmp[604073] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[468514] "RVV" "temp"
    unknown tmp[400740] "maybe param" "temp"
    (400751 'move' tmp[400740](126197 call isRectangularArr this[133200]))
    unknown call_tmp[604099] "expr temp" "maybe param" "maybe type" "temp"
    (604102 'move' call_tmp[604099](400753 call _cond_invalid tmp[400740]))
    if call_tmp[604099]
    {
      (400756 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[514805] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514806] "maybe param" "temp"
    unknown call_tmp[604104] "expr temp" "maybe param" "maybe type" "temp"
    (604107 'move' call_tmp[604104](400741 call isTrue tmp[400740]))
    (514811 'move' tmp[514806](514809 call _cond_test call_tmp[604104]))
    if tmp[514806]
    {
      (514816 'move' tmp[514805](514813 '_paramFoldLogical' tmp[514806] 1))
    }
    {
      unknown tmp[514818] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604109] "expr temp" "maybe param" "maybe type" "temp"
      (604112 'move' call_tmp[604109](126201 call isSparseArr this[133200]))
      (514820 'move' tmp[514818](400745 call isTrue call_tmp[604109]))
      (514825 'move' tmp[514805](514822 '_paramFoldLogical' tmp[514806] tmp[514818]))
    }
    unknown call_tmp[604114] "expr temp" "maybe param" "maybe type" "temp"
    (604117 'move' call_tmp[604114](126225 call _cond_test tmp[514805]))
    if call_tmp[604114]
    {
      unknown call_tmp[604121] "expr temp" "maybe param" "maybe type" "temp"
      (604124 'move' call_tmp[604121](352785 call _value _mt[232] this[133200]))
      unknown call_tmp[604128] "expr temp" "maybe param" "maybe type" "temp"
      (604131 'move' call_tmp[604128](126210 call(126205 call (partial) dsiAccess _mt[232] call_tmp[604121]) i[126182]))
      (468519 'move' ret[468514](468518 'addr of' call_tmp[604128]))
      gotoReturn _end_this[468512] _end_this[468512]
    }
    {
      unknown call_tmp[604135] "expr temp" "maybe param" "maybe type" "temp"
      (604138 'move' call_tmp[604135](352790 call _value _mt[232] this[133200]))
      unknown call_tmp[604142] "expr temp" "maybe param" "maybe type" "temp"
      (604145 'move' call_tmp[604142](126220 call i[126182] 1))
      unknown call_tmp[604147] "expr temp" "maybe param" "maybe type" "temp"
      (604150 'move' call_tmp[604147](126222 call(126214 call (partial) dsiAccess _mt[232] call_tmp[604135]) call_tmp[604142]))
      (468524 'move' ret[468514](468523 'addr of' call_tmp[604147]))
      gotoReturn _end_this[468512] _end_this[468512]
    }
    label _end_this[468512]
    (468516 return ret[468514])
  }
  where {
    unknown call_tmp[604154] "expr temp" "maybe param" "maybe type" "temp"
    (604157 'move' call_tmp[604154](352779 call _value _mt[232] this[133200]))
    unknown call_tmp[604161] "expr temp" "maybe param" "maybe type" "temp"
    (604164 'move' call_tmp[604161](126189 call eltType _mt[232] call_tmp[604154]))
    (126193 call shouldReturnRvalueByConstRef call_tmp[604161])
  }
  function _array[133150](?).this[126249](arg _mt[133206]:_MT[227], ref arg this[133204]:_array[133150](?), arg i[126245] ... :
  unknown call_tmp[604168] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    unknown ret[468530] "RVV" "temp"
    unknown call_tmp[604184] "expr temp" "maybe param" "maybe type" "temp"
    (604187 'move' call_tmp[604184](126254 call this[133204] i[126245]))
    (468535 'move' ret[468530](468534 'addr of' call_tmp[604184]))
    (468532 return ret[468530])
  }
  function _array[133150](?).this[126274](arg _mt[133210]:_MT[227], const arg this[133208]:_array[133150](?), arg i[126270] ... :
  unknown call_tmp[604191] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[468539] "RVV" "temp"
    unknown call_tmp[604207] "expr temp" "maybe param" "maybe type" "temp"
    (604210 'move' call_tmp[604207](126286 call this[133208] i[126270]))
    (468544 'move' ret[468539](468543 'deref' call_tmp[604207]))
    (468541 return ret[468539])
  }
  where {
    unknown call_tmp[604214] "expr temp" "maybe param" "maybe type" "temp"
    (604217 'move' call_tmp[604214](352813 call _value _mt[232] this[133208]))
    unknown call_tmp[604221] "expr temp" "maybe param" "maybe type" "temp"
    (604224 'move' call_tmp[604221](126278 call eltType _mt[232] call_tmp[604214]))
    (126282 call shouldReturnRvalueByValue call_tmp[604221])
  }
  function _array[133150](?).this[126307](arg _mt[133214]:_MT[227], const arg this[133212]:_array[133150](?), arg i[126303] ... :
  unknown call_tmp[604228] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[468548] "RVV" "temp"
    unknown call_tmp[604244] "expr temp" "maybe param" "maybe type" "temp"
    (604247 'move' call_tmp[604244](126319 call this[133212] i[126303]))
    (468553 'move' ret[468548](468552 'addr of' call_tmp[604244]))
    (468550 return ret[468548])
  }
  where {
    unknown call_tmp[604251] "expr temp" "maybe param" "maybe type" "temp"
    (604254 'move' call_tmp[604251](352827 call _value _mt[232] this[133212]))
    unknown call_tmp[604258] "expr temp" "maybe param" "maybe type" "temp"
    (604261 'move' call_tmp[604258](126311 call eltType _mt[232] call_tmp[604251]))
    (126315 call shouldReturnRvalueByConstRef call_tmp[604258])
  }
  function _array[133150](?).localAccess[126341](arg _mt[133218]:_MT[227], ref arg this[133216]:_array[133150](?), arg i[126338] :
  unknown call_tmp[604265] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[468557] "RVV" "temp"
    unknown tmp[400761] "maybe param" "temp"
    (400772 'move' tmp[400761](126346 call isRectangularArr this[133216]))
    unknown call_tmp[604291] "expr temp" "maybe param" "maybe type" "temp"
    (604294 'move' call_tmp[604291](400774 call _cond_invalid tmp[400761]))
    if call_tmp[604291]
    {
      (400777 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[514832] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514833] "maybe param" "temp"
    unknown call_tmp[604296] "expr temp" "maybe param" "maybe type" "temp"
    (604299 'move' call_tmp[604296](400762 call isTrue tmp[400761]))
    (514838 'move' tmp[514833](514836 call _cond_test call_tmp[604296]))
    if tmp[514833]
    {
      (514843 'move' tmp[514832](514840 '_paramFoldLogical' tmp[514833] 1))
    }
    {
      unknown tmp[514845] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604301] "expr temp" "maybe param" "maybe type" "temp"
      (604304 'move' call_tmp[604301](126350 call isSparseArr this[133216]))
      (514847 'move' tmp[514845](400766 call isTrue call_tmp[604301]))
      (514852 'move' tmp[514832](514849 '_paramFoldLogical' tmp[514833] tmp[514845]))
    }
    unknown call_tmp[604306] "expr temp" "maybe param" "maybe type" "temp"
    (604309 'move' call_tmp[604306](126376 call _cond_test tmp[514832]))
    if call_tmp[604306]
    {
      unknown call_tmp[604313] "expr temp" "maybe param" "maybe type" "temp"
      (604316 'move' call_tmp[604313](352843 call _value _mt[232] this[133216]))
      unknown call_tmp[604320] "expr temp" "maybe param" "maybe type" "temp"
      (604323 'move' call_tmp[604320](126361 call(126356 call (partial) dsiLocalAccess _mt[232] call_tmp[604313]) i[126338]))
      (468562 'move' ret[468557](468561 'addr of' call_tmp[604320]))
      gotoReturn _end_localAccess[468555] _end_localAccess[468555]
    }
    {
      unknown call_tmp[604327] "expr temp" "maybe param" "maybe type" "temp"
      (604330 'move' call_tmp[604327](352848 call _value _mt[232] this[133216]))
      unknown call_tmp[604334] "expr temp" "maybe param" "maybe type" "temp"
      (604337 'move' call_tmp[604334](126371 call i[126338] 1))
      unknown call_tmp[604339] "expr temp" "maybe param" "maybe type" "temp"
      (604342 'move' call_tmp[604339](126373 call(126365 call (partial) dsiLocalAccess _mt[232] call_tmp[604327]) call_tmp[604334]))
      (468567 'move' ret[468557](468566 'addr of' call_tmp[604339]))
      gotoReturn _end_localAccess[468555] _end_localAccess[468555]
    }
    label _end_localAccess[468555]
    (468559 return ret[468557])
  }
  function _array[133150](?).localAccess[126400](arg _mt[133222]:_MT[227], const arg this[133220]:_array[133150](?), arg i[126397] :
  unknown call_tmp[604346] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[468573] "RVV" "temp"
    unknown tmp[400782] "maybe param" "temp"
    (400793 'move' tmp[400782](126412 call isRectangularArr this[133220]))
    unknown call_tmp[604372] "expr temp" "maybe param" "maybe type" "temp"
    (604375 'move' call_tmp[604372](400795 call _cond_invalid tmp[400782]))
    if call_tmp[604372]
    {
      (400798 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[514859] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514860] "maybe param" "temp"
    unknown call_tmp[604377] "expr temp" "maybe param" "maybe type" "temp"
    (604380 'move' call_tmp[604377](400783 call isTrue tmp[400782]))
    (514865 'move' tmp[514860](514863 call _cond_test call_tmp[604377]))
    if tmp[514860]
    {
      (514870 'move' tmp[514859](514867 '_paramFoldLogical' tmp[514860] 1))
    }
    {
      unknown tmp[514872] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604382] "expr temp" "maybe param" "maybe type" "temp"
      (604385 'move' call_tmp[604382](126416 call isSparseArr this[133220]))
      (514874 'move' tmp[514872](400787 call isTrue call_tmp[604382]))
      (514879 'move' tmp[514859](514876 '_paramFoldLogical' tmp[514860] tmp[514872]))
    }
    unknown call_tmp[604387] "expr temp" "maybe param" "maybe type" "temp"
    (604390 'move' call_tmp[604387](126440 call _cond_test tmp[514859]))
    if call_tmp[604387]
    {
      unknown call_tmp[604394] "expr temp" "maybe param" "maybe type" "temp"
      (604397 'move' call_tmp[604394](352867 call _value _mt[232] this[133220]))
      unknown call_tmp[604401] "expr temp" "maybe param" "maybe type" "temp"
      (604404 'move' call_tmp[604401](126425 call(126420 call (partial) dsiLocalAccess _mt[232] call_tmp[604394]) i[126397]))
      (468578 'move' ret[468573](468577 'deref' call_tmp[604401]))
      gotoReturn _end_localAccess[468571] _end_localAccess[468571]
    }
    {
      unknown call_tmp[604408] "expr temp" "maybe param" "maybe type" "temp"
      (604411 'move' call_tmp[604408](352872 call _value _mt[232] this[133220]))
      unknown call_tmp[604415] "expr temp" "maybe param" "maybe type" "temp"
      (604418 'move' call_tmp[604415](126435 call i[126397] 1))
      unknown call_tmp[604420] "expr temp" "maybe param" "maybe type" "temp"
      (604423 'move' call_tmp[604420](126437 call(126429 call (partial) dsiLocalAccess _mt[232] call_tmp[604408]) call_tmp[604415]))
      (468583 'move' ret[468573](468582 'deref' call_tmp[604420]))
      gotoReturn _end_localAccess[468571] _end_localAccess[468571]
    }
    label _end_localAccess[468571]
    (468575 return ret[468573])
  }
  where {
    unknown call_tmp[604427] "expr temp" "maybe param" "maybe type" "temp"
    (604430 'move' call_tmp[604427](352861 call _value _mt[232] this[133220]))
    unknown call_tmp[604434] "expr temp" "maybe param" "maybe type" "temp"
    (604437 'move' call_tmp[604434](126404 call eltType _mt[232] call_tmp[604427]))
    (126408 call shouldReturnRvalueByValue call_tmp[604434])
  }
  function _array[133150](?).localAccess[126465](arg _mt[133226]:_MT[227], const arg this[133224]:_array[133150](?), arg i[126462] :
  unknown call_tmp[604441] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[468589] "RVV" "temp"
    unknown tmp[400803] "maybe param" "temp"
    (400814 'move' tmp[400803](126477 call isRectangularArr this[133224]))
    unknown call_tmp[604467] "expr temp" "maybe param" "maybe type" "temp"
    (604470 'move' call_tmp[604467](400816 call _cond_invalid tmp[400803]))
    if call_tmp[604467]
    {
      (400819 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[514886] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514887] "maybe param" "temp"
    unknown call_tmp[604472] "expr temp" "maybe param" "maybe type" "temp"
    (604475 'move' call_tmp[604472](400804 call isTrue tmp[400803]))
    (514892 'move' tmp[514887](514890 call _cond_test call_tmp[604472]))
    if tmp[514887]
    {
      (514897 'move' tmp[514886](514894 '_paramFoldLogical' tmp[514887] 1))
    }
    {
      unknown tmp[514899] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604477] "expr temp" "maybe param" "maybe type" "temp"
      (604480 'move' call_tmp[604477](126481 call isSparseArr this[133224]))
      (514901 'move' tmp[514899](400808 call isTrue call_tmp[604477]))
      (514906 'move' tmp[514886](514903 '_paramFoldLogical' tmp[514887] tmp[514899]))
    }
    unknown call_tmp[604482] "expr temp" "maybe param" "maybe type" "temp"
    (604485 'move' call_tmp[604482](126505 call _cond_test tmp[514886]))
    if call_tmp[604482]
    {
      unknown call_tmp[604489] "expr temp" "maybe param" "maybe type" "temp"
      (604492 'move' call_tmp[604489](352891 call _value _mt[232] this[133224]))
      unknown call_tmp[604496] "expr temp" "maybe param" "maybe type" "temp"
      (604499 'move' call_tmp[604496](126490 call(126485 call (partial) dsiLocalAccess _mt[232] call_tmp[604489]) i[126462]))
      (468594 'move' ret[468589](468593 'addr of' call_tmp[604496]))
      gotoReturn _end_localAccess[468587] _end_localAccess[468587]
    }
    {
      unknown call_tmp[604503] "expr temp" "maybe param" "maybe type" "temp"
      (604506 'move' call_tmp[604503](352896 call _value _mt[232] this[133224]))
      unknown call_tmp[604510] "expr temp" "maybe param" "maybe type" "temp"
      (604513 'move' call_tmp[604510](126500 call i[126462] 1))
      unknown call_tmp[604515] "expr temp" "maybe param" "maybe type" "temp"
      (604518 'move' call_tmp[604515](126502 call(126494 call (partial) dsiLocalAccess _mt[232] call_tmp[604503]) call_tmp[604510]))
      (468599 'move' ret[468589](468598 'addr of' call_tmp[604515]))
      gotoReturn _end_localAccess[468587] _end_localAccess[468587]
    }
    label _end_localAccess[468587]
    (468591 return ret[468589])
  }
  where {
    unknown call_tmp[604522] "expr temp" "maybe param" "maybe type" "temp"
    (604525 'move' call_tmp[604522](352885 call _value _mt[232] this[133224]))
    unknown call_tmp[604529] "expr temp" "maybe param" "maybe type" "temp"
    (604532 'move' call_tmp[604529](126469 call eltType _mt[232] call_tmp[604522]))
    (126473 call shouldReturnRvalueByConstRef call_tmp[604529])
  }
  function _array[133150](?).localAccess[126529](arg _mt[133230]:_MT[227], arg this[133228]:_array[133150](?), arg i[126525] ... :
  unknown call_tmp[604536] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    unknown ret[468605] "RVV" "temp"
    unknown call_tmp[604554] "expr temp" "maybe param" "maybe type" "temp"
    (604557 'move' call_tmp[604554](126534 call(352911 call (partial) localAccess _mt[232] this[133228]) i[126525]))
    (468610 'move' ret[468605](468609 'addr of' call_tmp[604554]))
    (468607 return ret[468605])
  }
  function _array[133150](?).localAccess[126554](arg _mt[133234]:_MT[227], arg this[133232]:_array[133150](?), arg i[126550] ... :
  unknown call_tmp[604561] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[468614] "RVV" "temp"
    unknown call_tmp[604579] "expr temp" "maybe param" "maybe type" "temp"
    (604582 'move' call_tmp[604579](126566 call(352928 call (partial) localAccess _mt[232] this[133232]) i[126550]))
    (468619 'move' ret[468614](468618 'deref' call_tmp[604579]))
    (468616 return ret[468614])
  }
  where {
    unknown call_tmp[604586] "expr temp" "maybe param" "maybe type" "temp"
    (604589 'move' call_tmp[604586](352924 call _value _mt[232] this[133232]))
    unknown call_tmp[604593] "expr temp" "maybe param" "maybe type" "temp"
    (604596 'move' call_tmp[604593](126558 call eltType _mt[232] call_tmp[604586]))
    (126562 call shouldReturnRvalueByValue call_tmp[604593])
  }
  function _array[133150](?).localAccess[126587](arg _mt[133238]:_MT[227], arg this[133236]:_array[133150](?), arg i[126583] ... :
  unknown call_tmp[604600] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    unknown ret[468623] "RVV" "temp"
    unknown call_tmp[604618] "expr temp" "maybe param" "maybe type" "temp"
    (604621 'move' call_tmp[604618](126599 call(352945 call (partial) localAccess _mt[232] this[133236]) i[126583]))
    (468628 'move' ret[468623](468627 'addr of' call_tmp[604618]))
    (468625 return ret[468623])
  }
  where {
    unknown call_tmp[604625] "expr temp" "maybe param" "maybe type" "temp"
    (604628 'move' call_tmp[604625](352941 call _value _mt[232] this[133236]))
    unknown call_tmp[604632] "expr temp" "maybe param" "maybe type" "temp"
    (604635 'move' call_tmp[604632](126591 call eltType _mt[232] call_tmp[604625]))
    (126595 call shouldReturnRvalueByConstRef call_tmp[604632])
  }
  function _array[133150](?).this[126612](arg _mt[133242]:_MT[227], arg this[133240]:_array[133150](?), arg d[126609]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[468632] "RVV" "temp"
    unknown call_tmp[604639] "expr temp" "maybe param" "maybe type" "temp"
    (604642 'move' call_tmp[604639](126615 call rank _mt[232] d[126609]))
    unknown call_tmp[604646] "expr temp" "maybe param" "maybe type" "temp"
    (604649 'move' call_tmp[604646](352952 call rank _mt[232] this[133240]))
    unknown call_tmp[604651] "expr temp" "maybe param" "maybe type" "temp"
    (604654 'move' call_tmp[604651](126619 call != call_tmp[604639] call_tmp[604646]))
    unknown call_tmp[604656] "expr temp" "maybe param" "maybe type" "temp"
    (604659 'move' call_tmp[604656](126641 call _cond_test call_tmp[604651]))
    if call_tmp[604656]
    {
      (126639 call compilerError "slicing an array with a domain of a different rank")
    }
    unknown call_tmp[604661] "expr temp" "maybe param" "maybe type" "temp"
    (604664 'move' call_tmp[604661](126653 call _cond_test 1))
    if call_tmp[604661]
    {
      (126651 call(352959 call (partial) checkSlice _mt[232] this[133240]) d[126609])
    }
    const tmp[126702] "const" "no auto destroy" "no copy" "temp"
    unknown tmp[514913] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514914] "maybe param" "temp"
    unknown call_tmp[604670] "expr temp" "maybe param" "maybe type" "temp"
    (604673 'move' call_tmp[604670](352964 call _value _mt[232] this[133240]))
    unknown call_tmp[604677] "expr temp" "maybe param" "maybe type" "temp"
    (604680 'move' call_tmp[604677](126668 call(126664 call (partial) isSliceArrayView _mt[232] call_tmp[604670])))
    (514919 'move' tmp[514914](514917 call _cond_test call_tmp[604677]))
    if tmp[514914]
    {
      unknown tmp[514921] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604684] "expr temp" "maybe param" "maybe type" "temp"
      (604687 'move' call_tmp[604684](126670 call _value _mt[232] this[133240]))
      unknown call_tmp[604691] "expr temp" "maybe param" "maybe type" "temp"
      (604694 'move' call_tmp[604691](126673 call arr _mt[232] call_tmp[604684]))
      unknown call_tmp[604698] "expr temp" "maybe param" "maybe type" "temp"
      (604701 'move' call_tmp[604698](126677 call _value _mt[232] this[133240]))
      unknown call_tmp[604705] "expr temp" "maybe param" "maybe type" "temp"
      (604708 'move' call_tmp[604705](126682 call _ArrPid _mt[232] call_tmp[604698]))
      (514923 'move' tmp[514921](126686 call _build_tuple call_tmp[604691] call_tmp[604705]))
      (514928 'move' tmp[514913](514925 '_paramFoldLogical' tmp[514914] tmp[514921]))
    }
    {
      unknown tmp[514930] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[604712] "expr temp" "maybe param" "maybe type" "temp"
      (604715 'move' call_tmp[604712](126689 call _value _mt[232] this[133240]))
      unknown call_tmp[604719] "expr temp" "maybe param" "maybe type" "temp"
      (604722 'move' call_tmp[604719](126693 call _pid _mt[232] this[133240]))
      (514932 'move' tmp[514930](126697 call _build_tuple call_tmp[604712] call_tmp[604719]))
      (514937 'move' tmp[514913](514934 '_paramFoldLogical' tmp[514914] tmp[514930]))
    }
    (491421 'init var' tmp[126702] tmp[514913])
    (126709 call _check_tuple_var_decl tmp[126702] 2)
    unknown call_tmp[604724] "maybe param" "maybe type" "temp"
    (604727 'move' call_tmp[604724](126703 call tmp[126702] 1))
    const arr[126658] "const" "insert auto destroy"
    (491423 'init var' arr[126658] call_tmp[604724])
    unknown call_tmp[604729] "maybe param" "maybe type" "temp"
    (604732 'move' call_tmp[604729](126706 call tmp[126702] 2))
    const arrpid[126660] "const" "insert auto destroy"
    (491425 'init var' arrpid[126660] call_tmp[604729])
    unknown call_tmp[604736] "expr temp" "maybe param" "maybe type" "temp"
    (604739 'move' call_tmp[604736](126716 call eltType _mt[232] this[133240]))
    unknown call_tmp[604743] "expr temp" "maybe param" "maybe type" "temp"
    (604746 'move' call_tmp[604743](126722 call _pid _mt[232] d[126609]))
    unknown call_tmp[604750] "expr temp" "maybe param" "maybe type" "temp"
    (604753 'move' call_tmp[604750](126727 call _instance _mt[232] d[126609]))
    unknown call_tmp[604755] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (604758 'move' call_tmp[604755](691437 'new' anymanaged ArrayViewSliceArr[352972](?)(eltType = call_tmp[604736])(_DomPid = call_tmp[604743])(dom = call_tmp[604750])(_ArrPid = arrpid[126660])(_ArrInstance = arr[126658])(_chpl_manager = unmanaged[209](?))))
    unknown a[126738] "insert auto destroy"
    (491427 'init var' a[126738] call_tmp[604755])
    unknown call_tmp[604762] "expr temp" "maybe param" "maybe type" "temp"
    (604765 'move' call_tmp[604762](126742 call _value _mt[232] d[126609]))
    (126754 call(126745 call (partial) add_arr _mt[232] call_tmp[604762]) a[126738](locking = 1)(addToList = 0))
    unknown call_tmp[604769] "expr temp" "maybe param" "maybe type" "temp"
    (604772 'move' call_tmp[604769](126759 call _newArray a[126738]))
    (468637 'move' ret[468632](468636 'deref' call_tmp[604769]))
    (468634 return ret[468632])
  }
  function _array[133150](?).checkSlice[126770](arg _mt[133246]:_MT[227], arg this[133244]:_array[133150](?), arg d[126767]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[126857] "insert auto destroy"
      (491429 'init var' i[126857] 0)
      unknown tmp[126858] "maybe param" "temp"
      unknown call_tmp[604776] "expr temp" "maybe param" "maybe type" "temp"
      (604779 'move' call_tmp[604776](352985 call _value _mt[232] this[133244]))
      unknown call_tmp[604783] "expr temp" "maybe param" "maybe type" "temp"
      (604786 'move' call_tmp[604783](126774 call dom _mt[232] call_tmp[604776]))
      unknown call_tmp[604790] "expr temp" "maybe param" "maybe type" "temp"
      (604793 'move' call_tmp[604790](126777 call rank _mt[232] call_tmp[604783]))
      (126870 'move' tmp[126858](126868 call chpl_compute_low_param_loop_bound 1 call_tmp[604790]))
      unknown tmp[126859] "maybe param" "temp"
      unknown call_tmp[604797] "expr temp" "maybe param" "maybe type" "temp"
      (604800 'move' call_tmp[604797](352999 call _value _mt[232] this[133244]))
      unknown call_tmp[604804] "expr temp" "maybe param" "maybe type" "temp"
      (604807 'move' call_tmp[604804](126877 call dom _mt[232] call_tmp[604797]))
      unknown call_tmp[604811] "expr temp" "maybe param" "maybe type" "temp"
      (604814 'move' call_tmp[604811](126875 call rank _mt[232] call_tmp[604804]))
      (126883 'move' tmp[126859](126881 call chpl_compute_high_param_loop_bound 1 call_tmp[604811]))
      unknown tmp[126860] "maybe param" "temp"
      (126886 'move' tmp[126860] 1)
      ParamForLoop
      { i[126857] tmp[126858] tmp[126859] tmp[126860]
        unknown call_tmp[604818] "expr temp" "maybe param" "maybe type" "temp"
        (604821 'move' call_tmp[604818](352989 call _value _mt[232] this[133244]))
        unknown call_tmp[604825] "expr temp" "maybe param" "maybe type" "temp"
        (604828 'move' call_tmp[604825](126783 call dom _mt[232] call_tmp[604818]))
        unknown call_tmp[604832] "expr temp" "maybe param" "maybe type" "temp"
        (604835 'move' call_tmp[604832](126791 call(126786 call (partial) dsiDim _mt[232] call_tmp[604825]) i[126857]))
        unknown call_tmp[604841] "expr temp" "maybe param" "maybe type" "temp"
        (604844 'move' call_tmp[604841](126803 call(126798 call (partial) dsiDim _mt[232] d[126767]) i[126857]))
        unknown call_tmp[604846] "expr temp" "maybe param" "maybe type" "temp"
        (604849 'move' call_tmp[604846](126805 call(126794 call (partial) boundsCheck _mt[232] call_tmp[604832]) call_tmp[604841]))
        unknown call_tmp[604851] "expr temp" "maybe param" "maybe type" "temp"
        (604854 'move' call_tmp[604851](126806 call ! call_tmp[604846]))
        unknown call_tmp[604856] "expr temp" "maybe param" "maybe type" "temp"
        (604859 'move' call_tmp[604856](126852 call _cond_test call_tmp[604851]))
        if call_tmp[604856]
        {
          unknown call_tmp[604863] "expr temp" "maybe param" "maybe type" "temp"
          (604866 'move' call_tmp[604863](126849 call(126844 call (partial) dsiDim _mt[232] d[126767]) i[126857]))
          (126850 call halt "array slice out of bounds in dimension " i[126857] ": " call_tmp[604863])
        }
      }
      label _unused_continueLabel[126862]
      label _breakLabel[126861]
    }
    (468639 return _void[47])
  }
  function _array[133150](?).checkSlice[126906](arg _mt[133250]:_MT[227], arg this[133248]:_array[133150](?), arg ranges[126903]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[126959] "insert auto destroy"
      (491431 'init var' i[126959] 0)
      unknown tmp[126960] "maybe param" "temp"
      unknown call_tmp[604872] "expr temp" "maybe param" "maybe type" "temp"
      (604875 'move' call_tmp[604872](353008 call _value _mt[232] this[133248]))
      unknown call_tmp[604879] "expr temp" "maybe param" "maybe type" "temp"
      (604882 'move' call_tmp[604879](126914 call dom _mt[232] call_tmp[604872]))
      unknown call_tmp[604886] "expr temp" "maybe param" "maybe type" "temp"
      (604889 'move' call_tmp[604886](126917 call rank _mt[232] call_tmp[604879]))
      (126972 'move' tmp[126960](126970 call chpl_compute_low_param_loop_bound 1 call_tmp[604886]))
      unknown tmp[126961] "maybe param" "temp"
      unknown call_tmp[604893] "expr temp" "maybe param" "maybe type" "temp"
      (604896 'move' call_tmp[604893](353022 call _value _mt[232] this[133248]))
      unknown call_tmp[604900] "expr temp" "maybe param" "maybe type" "temp"
      (604903 'move' call_tmp[604900](126979 call dom _mt[232] call_tmp[604893]))
      unknown call_tmp[604907] "expr temp" "maybe param" "maybe type" "temp"
      (604910 'move' call_tmp[604907](126977 call rank _mt[232] call_tmp[604900]))
      (126985 'move' tmp[126961](126983 call chpl_compute_high_param_loop_bound 1 call_tmp[604907]))
      unknown tmp[126962] "maybe param" "temp"
      (126988 'move' tmp[126962] 1)
      ParamForLoop
      { i[126959] tmp[126960] tmp[126961] tmp[126962]
        unknown call_tmp[604914] "expr temp" "maybe param" "maybe type" "temp"
        (604917 'move' call_tmp[604914](353012 call _value _mt[232] this[133248]))
        unknown call_tmp[604921] "expr temp" "maybe param" "maybe type" "temp"
        (604924 'move' call_tmp[604921](126923 call dom _mt[232] call_tmp[604914]))
        unknown call_tmp[604928] "expr temp" "maybe param" "maybe type" "temp"
        (604931 'move' call_tmp[604928](126931 call(126926 call (partial) dsiDim _mt[232] call_tmp[604921]) i[126959]))
        unknown call_tmp[604935] "expr temp" "maybe param" "maybe type" "temp"
        (604938 'move' call_tmp[604935](126938 call ranges[126903] i[126959]))
        unknown call_tmp[604940] "expr temp" "maybe param" "maybe type" "temp"
        (604943 'move' call_tmp[604940](126940 call(126932 call (partial) boundsCheck _mt[232] call_tmp[604928]) call_tmp[604935]))
        unknown call_tmp[604945] "expr temp" "maybe param" "maybe type" "temp"
        (604948 'move' call_tmp[604945](126941 call ! call_tmp[604940]))
        unknown call_tmp[604950] "expr temp" "maybe param" "maybe type" "temp"
        (604953 'move' call_tmp[604950](126954 call _cond_test call_tmp[604945]))
        if call_tmp[604950]
        {
          unknown call_tmp[604955] "expr temp" "maybe param" "maybe type" "temp"
          (604958 'move' call_tmp[604955](126951 call ranges[126903] i[126959]))
          (126952 call halt "array slice out of bounds in dimension " i[126959] ": " call_tmp[604955])
        }
      }
      label _unused_continueLabel[126964]
      label _breakLabel[126963]
    }
    (468641 return _void[47])
  }
  where {
    (126911 call chpl__isTupleOfRanges ranges[126903])
  }
  function _array[133150](?).this[127009](arg _mt[133254]:_MT[227], arg this[133252]:_array[133150](?), arg ranges[127006]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[468645] "RVV" "temp"
    unknown call_tmp[604962] "expr temp" "maybe param" "maybe type" "temp"
    (604965 'move' call_tmp[604962](127022 call _cond_test 1))
    if call_tmp[604962]
    {
      (127020 call(353032 call (partial) checkSlice _mt[232] this[133252])(127018 'expand_tuple' ranges[127006]))
    }
    unknown call_tmp[604971] "maybe param" "maybe type" "temp"
    (604974 'move' call_tmp[604971](127032 call(353037 call (partial) _dom _mt[232] this[133252])(127030 'expand_tuple' ranges[127006])))
    unknown d[127033] "no auto destroy"
    (491433 'init var' d[127033] call_tmp[604971])
    unknown call_tmp[604978] "expr temp" "maybe param" "maybe type" "temp"
    (604981 'move' call_tmp[604978](127037 call _value _mt[232] d[127033]))
    unknown call_tmp[604985] "expr temp" "maybe param" "maybe type" "temp"
    (604988 'move' call_tmp[604985](127042 call _free_when_no_arrs _mt[232] call_tmp[604978]))
    (127046 call = call_tmp[604985] 1)
    const tmp[127091] "const" "no auto destroy" "no copy" "temp"
    unknown tmp[514944] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514945] "maybe param" "temp"
    unknown call_tmp[604992] "expr temp" "maybe param" "maybe type" "temp"
    (604995 'move' call_tmp[604992](353043 call _value _mt[232] this[133252]))
    unknown call_tmp[604999] "expr temp" "maybe param" "maybe type" "temp"
    (605002 'move' call_tmp[604999](127059 call(127055 call (partial) isSliceArrayView _mt[232] call_tmp[604992])))
    (514950 'move' tmp[514945](514948 call _cond_test call_tmp[604999]))
    if tmp[514945]
    {
      unknown tmp[514952] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605006] "expr temp" "maybe param" "maybe type" "temp"
      (605009 'move' call_tmp[605006](127061 call _value _mt[232] this[133252]))
      unknown call_tmp[605013] "expr temp" "maybe param" "maybe type" "temp"
      (605016 'move' call_tmp[605013](127064 call arr _mt[232] call_tmp[605006]))
      unknown call_tmp[605020] "expr temp" "maybe param" "maybe type" "temp"
      (605023 'move' call_tmp[605020](127068 call _value _mt[232] this[133252]))
      unknown call_tmp[605027] "expr temp" "maybe param" "maybe type" "temp"
      (605030 'move' call_tmp[605027](127071 call _ArrPid _mt[232] call_tmp[605020]))
      (514954 'move' tmp[514952](127075 call _build_tuple call_tmp[605013] call_tmp[605027]))
      (514959 'move' tmp[514944](514956 '_paramFoldLogical' tmp[514945] tmp[514952]))
    }
    {
      unknown tmp[514961] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605034] "expr temp" "maybe param" "maybe type" "temp"
      (605037 'move' call_tmp[605034](127078 call _value _mt[232] this[133252]))
      unknown call_tmp[605041] "expr temp" "maybe param" "maybe type" "temp"
      (605044 'move' call_tmp[605041](127082 call _pid _mt[232] this[133252]))
      (514963 'move' tmp[514961](127086 call _build_tuple call_tmp[605034] call_tmp[605041]))
      (514968 'move' tmp[514944](514965 '_paramFoldLogical' tmp[514945] tmp[514961]))
    }
    (491435 'init var' tmp[127091] tmp[514944])
    (127098 call _check_tuple_var_decl tmp[127091] 2)
    unknown call_tmp[605046] "maybe param" "maybe type" "temp"
    (605049 'move' call_tmp[605046](127092 call tmp[127091] 1))
    const arr[127049] "const" "insert auto destroy"
    (491437 'init var' arr[127049] call_tmp[605046])
    unknown call_tmp[605051] "maybe param" "maybe type" "temp"
    (605054 'move' call_tmp[605051](127095 call tmp[127091] 2))
    const arrpid[127051] "const" "insert auto destroy"
    (491439 'init var' arrpid[127051] call_tmp[605051])
    unknown call_tmp[605058] "expr temp" "maybe param" "maybe type" "temp"
    (605061 'move' call_tmp[605058](127105 call eltType _mt[232] this[133252]))
    unknown call_tmp[605065] "expr temp" "maybe param" "maybe type" "temp"
    (605068 'move' call_tmp[605065](127111 call _pid _mt[232] d[127033]))
    unknown call_tmp[605072] "expr temp" "maybe param" "maybe type" "temp"
    (605075 'move' call_tmp[605072](127116 call _instance _mt[232] d[127033]))
    unknown call_tmp[605077] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605080 'move' call_tmp[605077](691438 'new' anymanaged ArrayViewSliceArr[352972](?)(eltType = call_tmp[605058])(_DomPid = call_tmp[605065])(dom = call_tmp[605072])(_ArrPid = arrpid[127051])(_ArrInstance = arr[127049])(_chpl_manager = unmanaged[209](?))))
    unknown a[127127] "insert auto destroy"
    (491441 'init var' a[127127] call_tmp[605077])
    unknown call_tmp[605084] "expr temp" "maybe param" "maybe type" "temp"
    (605087 'move' call_tmp[605084](127131 call _value _mt[232] d[127033]))
    (127143 call(127134 call (partial) add_arr _mt[232] call_tmp[605084]) a[127127](locking = 0)(addToList = 0))
    unknown call_tmp[605091] "expr temp" "maybe param" "maybe type" "temp"
    (605094 'move' call_tmp[605091](127148 call _newArray a[127127]))
    (468650 'move' ret[468645](468649 'deref' call_tmp[605091]))
    (468647 return ret[468645])
  }
  where {
    (127014 call chpl__isTupleOfRanges ranges[127006])
  }
  function _array[133150](?).this[127160](arg _mt[133258]:_MT[227], arg this[133256]:_array[133150](?), arg args[127157]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[468654] "RVV" "temp"
    unknown call_tmp[605098] "expr temp" "maybe param" "maybe type" "temp"
    (605101 'move' call_tmp[605098](127179 call _cond_test 1))
    if call_tmp[605098]
    {
      (127177 call(353072 call (partial) checkRankChange _mt[232] this[133256]) args[127157])
    }
    unknown call_tmp[605107] "maybe param" "maybe type" "temp"
    (605110 'move' call_tmp[605107](127192 call(127186 call (partial) _dom _mt[232] this[133256])(127190 'expand_tuple' args[127157])))
    const rcdom[127193] "const" "insert auto destroy"
    (491443 'init var' rcdom[127193] call_tmp[605107])
    unknown call_tmp[605114] "expr temp" "maybe param" "maybe type" "temp"
    (605117 'move' call_tmp[605114](127202 call _value _mt[232] this[133256]))
    unknown call_tmp[605121] "expr temp" "maybe param" "maybe type" "temp"
    (605124 'move' call_tmp[605121](127206 call _pid _mt[232] this[133256]))
    unknown call_tmp[605126] "maybe param" "maybe type" "temp"
    (605129 'move' call_tmp[605126](127210 call _build_tuple call_tmp[605114] call_tmp[605121]))
    const tmp[127212] "const" "insert auto destroy" "no copy" "temp"
    (491445 'init var' tmp[127212] call_tmp[605126])
    (127219 call _check_tuple_var_decl tmp[127212] 2)
    unknown call_tmp[605131] "maybe param" "maybe type" "temp"
    (605134 'move' call_tmp[605131](127213 call tmp[127212] 1))
    const arr[127196] "const" "insert auto destroy"
    (491447 'init var' arr[127196] call_tmp[605131])
    unknown call_tmp[605136] "maybe param" "maybe type" "temp"
    (605139 'move' call_tmp[605136](127216 call tmp[127212] 2))
    const arrpid[127198] "const" "insert auto destroy"
    (491449 'init var' arrpid[127198] call_tmp[605136])
    unknown call_tmp[605143] "expr temp" "maybe param" "maybe type" "temp"
    (605146 'move' call_tmp[605143](127226 call eltType _mt[232] this[133256]))
    unknown call_tmp[605150] "expr temp" "maybe param" "maybe type" "temp"
    (605153 'move' call_tmp[605150](127232 call _pid _mt[232] rcdom[127193]))
    unknown call_tmp[605157] "expr temp" "maybe param" "maybe type" "temp"
    (605160 'move' call_tmp[605157](127237 call _instance _mt[232] rcdom[127193]))
    unknown call_tmp[605164] "expr temp" "maybe param" "maybe type" "temp"
    (605167 'move' call_tmp[605164](127246 call _value _mt[232] rcdom[127193]))
    unknown call_tmp[605171] "expr temp" "maybe param" "maybe type" "temp"
    (605174 'move' call_tmp[605171](127249 call collapsedDim _mt[232] call_tmp[605164]))
    unknown call_tmp[605178] "expr temp" "maybe param" "maybe type" "temp"
    (605181 'move' call_tmp[605178](127254 call _value _mt[232] rcdom[127193]))
    unknown call_tmp[605185] "expr temp" "maybe param" "maybe type" "temp"
    (605188 'move' call_tmp[605185](127257 call idx _mt[232] call_tmp[605178]))
    unknown call_tmp[605190] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (605193 'move' call_tmp[605190](691439 'new' anymanaged ArrayViewRankChangeArr[353081](?)(eltType = call_tmp[605143])(_DomPid = call_tmp[605150])(dom = call_tmp[605157])(_ArrPid = arrpid[127198])(_ArrInstance = arr[127196])(collapsedDim = call_tmp[605171])(idx = call_tmp[605185])(_chpl_manager = unmanaged[209](?))))
    unknown a[127264] "insert auto destroy"
    (491451 'init var' a[127264] call_tmp[605190])
    unknown call_tmp[605197] "expr temp" "maybe param" "maybe type" "temp"
    (605200 'move' call_tmp[605197](127268 call _value _mt[232] rcdom[127193]))
    (127278 call(127271 call (partial) add_arr _mt[232] call_tmp[605197]) a[127264](locking = 0))
    unknown call_tmp[605204] "expr temp" "maybe param" "maybe type" "temp"
    (605207 'move' call_tmp[605204](127283 call _newArray a[127264]))
    (468659 'move' ret[468654](468658 'deref' call_tmp[605204]))
    (468656 return ret[468654])
  }
  where {
    unknown call_tmp[605211] "expr temp" "maybe param" "maybe type" "temp"
    (605214 'move' call_tmp[605211](353065 call _value _mt[232] this[133256]))
    unknown call_tmp[605218] "expr temp" "maybe param" "maybe type" "temp"
    (605221 'move' call_tmp[605218](127166 call dom _mt[232] call_tmp[605211]))
    unknown call_tmp[605225] "expr temp" "maybe param" "maybe type" "temp"
    (605228 'move' call_tmp[605225](127169 call idxType _mt[232] call_tmp[605218]))
    (127172 call _validRankChangeArgs args[127157] call_tmp[605225])
  }
  function _array[133150](?).checkRankChange[127293](arg _mt[133262]:_MT[227], arg this[133260]:_array[133150](?), arg args[127291]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[127339] "insert auto destroy"
      (491453 'init var' i[127339] 0)
      unknown tmp[127340] "maybe param" "temp"
      unknown call_tmp[605232] "expr temp" "maybe param" "maybe type" "temp"
      (605235 'move' call_tmp[605232](127297 call size _mt[232] args[127291]))
      (127352 'move' tmp[127340](127350 call chpl_compute_low_param_loop_bound 1 call_tmp[605232]))
      unknown tmp[127341] "maybe param" "temp"
      unknown call_tmp[605239] "expr temp" "maybe param" "maybe type" "temp"
      (605242 'move' call_tmp[605239](127357 call size _mt[232] args[127291]))
      (127362 'move' tmp[127341](127360 call chpl_compute_high_param_loop_bound 1 call_tmp[605239]))
      unknown tmp[127342] "maybe param" "temp"
      (127365 'move' tmp[127342] 1)
      ParamForLoop
      { i[127339] tmp[127340] tmp[127341] tmp[127342]
        unknown call_tmp[605246] "expr temp" "maybe param" "maybe type" "temp"
        (605249 'move' call_tmp[605246](353096 call _value _mt[232] this[133260]))
        unknown call_tmp[605253] "expr temp" "maybe param" "maybe type" "temp"
        (605256 'move' call_tmp[605253](127303 call dom _mt[232] call_tmp[605246]))
        unknown call_tmp[605260] "expr temp" "maybe param" "maybe type" "temp"
        (605263 'move' call_tmp[605260](127311 call(127306 call (partial) dsiDim _mt[232] call_tmp[605253]) i[127339]))
        unknown call_tmp[605267] "expr temp" "maybe param" "maybe type" "temp"
        (605270 'move' call_tmp[605267](127318 call args[127291] i[127339]))
        unknown call_tmp[605272] "expr temp" "maybe param" "maybe type" "temp"
        (605275 'move' call_tmp[605272](127320 call(127312 call (partial) boundsCheck _mt[232] call_tmp[605260]) call_tmp[605267]))
        unknown call_tmp[605277] "expr temp" "maybe param" "maybe type" "temp"
        (605280 'move' call_tmp[605277](127321 call ! call_tmp[605272]))
        unknown call_tmp[605282] "expr temp" "maybe param" "maybe type" "temp"
        (605285 'move' call_tmp[605282](127334 call _cond_test call_tmp[605277]))
        if call_tmp[605282]
        {
          unknown call_tmp[605287] "expr temp" "maybe param" "maybe type" "temp"
          (605290 'move' call_tmp[605287](127331 call args[127291] i[127339]))
          (127332 call halt "array slice out of bounds in dimension " i[127339] ": " call_tmp[605287])
        }
      }
      label _unused_continueLabel[127344]
      label _breakLabel[127343]
    }
    (468661 return _void[47])
  }
  function _array[133150](?).localSlice[127385](arg _mt[133266]:_MT[227], arg this[133264]:_array[133150](?), arg r[127382]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[468665] "RVV" "temp"
    unknown call_tmp[605294] "expr temp" "maybe param" "maybe type" "temp"
    (605297 'move' call_tmp[605294](127406 call _cond_test 1))
    if call_tmp[605294]
    {
      (127404 call(353118 call (partial) checkSlice _mt[232] this[133264])(127402 'expand_tuple' r[127382]))
    }
    unknown call_tmp[605303] "maybe param" "maybe type" "temp"
    (605306 'move' call_tmp[605303](127416 call(353123 call (partial) _dom _mt[232] this[133264])(127414 'expand_tuple' r[127382])))
    unknown dom[127417] "insert auto destroy"
    (491455 'init var' dom[127417] call_tmp[605303])
    unknown call_tmp[605310] "expr temp" "maybe param" "maybe type" "temp"
    (605313 'move' call_tmp[605310](127423 call(353130 call (partial) chpl__localSliceDefaultArithArrHelp _mt[232] this[133264]) dom[127417]))
    (468670 'move' ret[468665](468669 'deref' call_tmp[605310]))
    (468667 return ret[468665])
  }
  where {
    unknown tmp[400824] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443499] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[605317] "expr temp" "maybe param" "maybe type" "temp"
      (605320 'move' call_tmp[605317](353111 call _value _mt[232] this[133264]))
      (443503 'move' call_type_tmp[443499](127389 'typeof' call_tmp[605317]))
    }
    (400835 'move' tmp[400824](328555 'is_subtype' anymanaged DefaultRectangularArr[347545](?) call_type_tmp[443499]))
    unknown call_tmp[605322] "expr temp" "maybe param" "maybe type" "temp"
    (605325 'move' call_tmp[605322](400837 call _cond_invalid tmp[400824]))
    if call_tmp[605322]
    {
      (400840 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[514975] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[514976] "maybe param" "temp"
    unknown call_tmp[605327] "expr temp" "maybe param" "maybe type" "temp"
    (605330 'move' call_tmp[605327](400825 call isTrue tmp[400824]))
    (514981 'move' tmp[514976](514979 call _cond_test call_tmp[605327]))
    if tmp[514976]
    {
      unknown tmp[514983] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605332] "expr temp" "maybe param" "maybe type" "temp"
      (605335 'move' call_tmp[605332](127396 call chpl__isTupleOfRanges r[127382]))
      (514985 'move' tmp[514983](400828 call isTrue call_tmp[605332]))
      (514990 'move' tmp[514975](514987 '_paramFoldLogical' tmp[514976] tmp[514983]))
    }
    {
      (514995 'move' tmp[514975](514992 '_paramFoldLogical' tmp[514976] 0))
    }
    (691893 call _statementLevelSymbol tmp[514975])
  }
  function _array[133150](?).localSlice[127435](arg _mt[133270]:_MT[227], arg this[133268]:_array[133150](?), arg d[127432]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[468674] "RVV" "temp"
    unknown call_tmp[605337] "expr temp" "maybe param" "maybe type" "temp"
    (605340 'move' call_tmp[605337](127455 call _cond_test 1))
    if call_tmp[605337]
    {
      unknown call_tmp[605346] "expr temp" "maybe param" "maybe type" "temp"
      (605349 'move' call_tmp[605346](127450 call(127446 call (partial) getIndices _mt[232] d[127432])))
      (127453 call(353142 call (partial) checkSlice _mt[232] this[133268])(127451 'expand_tuple' call_tmp[605346]))
    }
    unknown call_tmp[605353] "expr temp" "maybe param" "maybe type" "temp"
    (605356 'move' call_tmp[605353](127464 call(353147 call (partial) chpl__localSliceDefaultArithArrHelp _mt[232] this[133268]) d[127432]))
    (468679 'move' ret[468674](468678 'deref' call_tmp[605353]))
    (468676 return ret[468674])
  }
  where {
    { scopeless type
      unknown call_type_tmp[443505] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[605360] "expr temp" "maybe param" "maybe type" "temp"
      (605363 'move' call_tmp[605360](353136 call _value _mt[232] this[133268]))
      (443509 'move' call_type_tmp[443505](127439 'typeof' call_tmp[605360]))
    }
    (328556 'is_subtype' anymanaged DefaultRectangularArr[347545](?) call_type_tmp[443505])
  }
  function _array[133150](?).chpl__localSliceDefaultArithArrHelp[127476](arg _mt[133274]:_MT[227], arg this[133272]:_array[133150](?), arg d[127473]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no copy return"
  {
    unknown ret[468683] "RVV" "temp"
    unknown call_tmp[605367] "expr temp" "maybe param" "maybe type" "temp"
    (605370 'move' call_tmp[605367](353153 call _value _mt[232] this[133272]))
    unknown call_tmp[605372] "expr temp" "maybe param" "maybe type" "temp"
    (605375 'move' call_tmp[605372](127479 '_wide_get_locale' call_tmp[605367]))
    unknown call_tmp[605377] "expr temp" "maybe param" "maybe type" "temp"
    (605380 'move' call_tmp[605377](127480 call chpl_localeID_to_locale call_tmp[605372]))
    unknown call_tmp[605382] "expr temp" "maybe param" "maybe type" "temp"
    (605385 'move' call_tmp[605382](353156 call here[92085]))
    unknown call_tmp[605387] "expr temp" "maybe param" "maybe type" "temp"
    (605390 'move' call_tmp[605387](127483 call != call_tmp[605377] call_tmp[605382]))
    unknown call_tmp[605392] "expr temp" "maybe param" "maybe type" "temp"
    (605395 'move' call_tmp[605392](127515 call _cond_test call_tmp[605387]))
    if call_tmp[605392]
    {
      unknown call_tmp[605399] "expr temp" "maybe param" "maybe type" "temp"
      (605402 'move' call_tmp[605399](353159 call _value _mt[232] this[133272]))
      unknown call_tmp[605404] "expr temp" "maybe param" "maybe type" "temp"
      (605407 'move' call_tmp[605404](127507 '_wide_get_node' call_tmp[605399]))
      unknown call_tmp[605409] "expr temp" "maybe param" "maybe type" "temp"
      (605412 'move' call_tmp[605409](353162 call here[92085]))
      unknown call_tmp[605416] "expr temp" "maybe param" "maybe type" "temp"
      (605419 'move' call_tmp[605416](127510 call id _mt[232] call_tmp[605409]))
      (127513 call halt "Attempting to take a local slice of an array on locale " call_tmp[605404] " from locale " call_tmp[605416])
    }
    unknown call_tmp[605421] "expr temp" "maybe param" "maybe type" "temp"
    (605424 'move' call_tmp[605421](127524 call this[133272] d[127473]))
    (468688 'move' ret[468683](468687 'deref' call_tmp[605421]))
    (468685 return ret[468683])
  }
  function _array[133150](?).localSlice[127535](arg _mt[133278]:_MT[227], arg this[133276]:_array[133150](?), arg r[127532]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[468692] "RVV" "temp"
    unknown call_tmp[605428] "expr temp" "maybe param" "maybe type" "temp"
    (605431 'move' call_tmp[605428](127558 call _cond_test 1))
    if call_tmp[605428]
    {
      (127556 call(353178 call (partial) checkSlice _mt[232] this[133276])(127554 'expand_tuple' r[127532]))
    }
    unknown call_tmp[605437] "expr temp" "maybe param" "maybe type" "temp"
    (605440 'move' call_tmp[605437](353183 call _value _mt[232] this[133276]))
    unknown call_tmp[605444] "expr temp" "maybe param" "maybe type" "temp"
    (605447 'move' call_tmp[605444](127570 call(127565 call (partial) dsiLocalSlice _mt[232] call_tmp[605437]) r[127532]))
    (468697 'move' ret[468692](468696 'deref' call_tmp[605444]))
    (468694 return ret[468692])
  }
  where {
    unknown tmp[400845] "maybe param" "temp"
    (400856 'move' tmp[400845](127540 call chpl__isTupleOfRanges r[127532]))
    unknown call_tmp[605449] "expr temp" "maybe param" "maybe type" "temp"
    (605452 'move' call_tmp[605449](400858 call _cond_invalid tmp[400845]))
    if call_tmp[605449]
    {
      (400861 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515002] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515003] "maybe param" "temp"
    unknown call_tmp[605454] "expr temp" "maybe param" "maybe type" "temp"
    (605457 'move' call_tmp[605454](400846 call isTrue tmp[400845]))
    (515008 'move' tmp[515003](515006 call _cond_test call_tmp[605454]))
    if tmp[515003]
    {
      { scopeless type
        unknown call_type_tmp[443511] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[605461] "expr temp" "maybe param" "maybe type" "temp"
        (605464 'move' call_tmp[605461](353172 call _value _mt[232] this[133276]))
        (443515 'move' call_type_tmp[443511](127543 'typeof' call_tmp[605461]))
      }
      unknown tmp[515010] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605466] "expr temp" "maybe param" "maybe type" "temp"
      (605469 'move' call_tmp[605466](328557 'is_subtype' anymanaged DefaultRectangularArr[347545](?) call_type_tmp[443511]))
      unknown call_tmp[605471] "expr temp" "maybe param" "maybe type" "temp"
      (605474 'move' call_tmp[605471](127547 call ! call_tmp[605466]))
      (515012 'move' tmp[515010](400849 call isTrue call_tmp[605471]))
      (515017 'move' tmp[515002](515014 '_paramFoldLogical' tmp[515003] tmp[515010]))
    }
    {
      (515022 'move' tmp[515002](515019 '_paramFoldLogical' tmp[515003] 0))
    }
    (691895 call _statementLevelSymbol tmp[515002])
  }
  function _array[133150](?).localSlice[127582](arg _mt[133282]:_MT[227], arg this[133280]:_array[133150](?), arg d[127579]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    unknown ret[468701] "RVV" "temp"
    unknown call_tmp[605480] "expr temp" "maybe param" "maybe type" "temp"
    (605483 'move' call_tmp[605480](127590 call(127586 call (partial) getIndices _mt[232] d[127579])))
    unknown call_tmp[605485] "expr temp" "maybe param" "maybe type" "temp"
    (605488 'move' call_tmp[605485](127593 call(353189 call (partial) localSlice _mt[232] this[133280])(127591 'expand_tuple' call_tmp[605480])))
    (468706 'move' ret[468701](468705 'deref' call_tmp[605485]))
    (468703 return ret[468701])
  }
  function _array[133150](?).these[127601](arg _mt[133286]:_MT[227], arg this[133284]:_array[133150](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    unknown ret[468710] "RVV" "temp"
    {
      unknown _indexOfInterest[127614] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127615] "expr temp" "temp"
      unknown call_tmp[605492] "expr temp" "maybe param" "maybe type" "temp"
      (605495 'move' call_tmp[605492](353194 call _value _mt[232] this[133284]))
      unknown call_tmp[605499] "expr temp" "maybe param" "maybe type" "temp"
      (605502 'move' call_tmp[605499](127609 call(127605 call (partial) these _mt[232] call_tmp[605492])))
      (127624 'move' _iterator[127615](127622 call _getIterator call_tmp[605499]))
      Defer
      {
        {
          (127641 call _freeIterator _iterator[127615])
        }
      }
      { scopeless type
        (127630 'move' _indexOfInterest[127614](127627 call iteratorIndex _iterator[127615]))
      }
      ForLoop
      {
        unknown i[127634] "index var" "insert auto destroy"
        (127636 'move' i[127634] _indexOfInterest[127614])
        {
          unknown yret[468714] "YVV" "temp"
          (468717 'move' yret[468714](468716 'addr of' i[127634]))
          (468719 yield yret[468714])
        }
        label _continueLabel[127619]
        _indexOfInterest[127614]
        _iterator[127615]
      }
      label _breakLabel[127620]
    }
    (468712 return ret[468710])
  }
  function _array[133150](?).these[127657](arg _mt[133290]:_MT[227], arg this[133288]:_array[133150](?), param arg tag[127654]:iterKind[697]) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[468723] "RVV" "temp"
    {
      unknown _indexOfInterest[127686] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127687] "expr temp" "temp"
      unknown call_tmp[605506] "expr temp" "maybe param" "maybe type" "temp"
      (605509 'move' call_tmp[605506](353207 call _value _mt[232] this[133288]))
      unknown call_tmp[605513] "expr temp" "maybe param" "maybe type" "temp"
      (605516 'move' call_tmp[605513](127682 call(127677 call (partial) these _mt[232] call_tmp[605506]) tag[127654]))
      (127696 'move' _iterator[127687](127694 call _getIterator call_tmp[605513]))
      Defer
      {
        {
          (127713 call _freeIterator _iterator[127687])
        }
      }
      { scopeless type
        (127702 'move' _indexOfInterest[127686](127699 call iteratorIndex _iterator[127687]))
      }
      ForLoop
      {
        unknown i[127706] "index var" "insert auto destroy"
        (127708 'move' i[127706] _indexOfInterest[127686])
        unknown yret[468727] "YVV" "temp"
        (468730 'move' yret[468727](468729 'addr of' i[127706]))
        (468732 yield yret[468727])
        label _continueLabel[127691]
        _indexOfInterest[127686]
        _iterator[127687]
      }
      label _breakLabel[127692]
    }
    (468725 return ret[468723])
  }
  where {
    unknown tmp[400866] "maybe param" "temp"
    (400877 'move' tmp[400866](127664 call == tag[127654] standalone[695]))
    unknown call_tmp[605518] "expr temp" "maybe param" "maybe type" "temp"
    (605521 'move' call_tmp[605518](400879 call _cond_invalid tmp[400866]))
    if call_tmp[605518]
    {
      (400882 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515029] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515030] "maybe param" "temp"
    unknown call_tmp[605523] "expr temp" "maybe param" "maybe type" "temp"
    (605526 'move' call_tmp[605523](400867 call isTrue tmp[400866]))
    (515035 'move' tmp[515030](515033 call _cond_test call_tmp[605523]))
    if tmp[515030]
    {
      unknown tmp[515037] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605530] "expr temp" "maybe param" "maybe type" "temp"
      (605533 'move' call_tmp[605530](353202 call _value _mt[232] this[133288]))
      unknown call_tmp[605535] "expr temp" "maybe param" "maybe type" "temp"
      (605538 'move' call_tmp[605535](127672 'method call resolves' call_tmp[605530] "these"(tag = tag[127654])))
      (515039 'move' tmp[515037](400870 call isTrue call_tmp[605535]))
      (515044 'move' tmp[515029](515041 '_paramFoldLogical' tmp[515030] tmp[515037]))
    }
    {
      (515049 'move' tmp[515029](515046 '_paramFoldLogical' tmp[515030] 0))
    }
    (691897 call _statementLevelSymbol tmp[515029])
  }
  function _array[133150](?).these[127730](arg _mt[133294]:_MT[227], arg this[133292]:_array[133150](?), param arg tag[127727]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    unknown ret[468736] "RVV" "temp"
    {
      unknown _indexOfInterest[127750] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127751] "expr temp" "temp"
      unknown call_tmp[605542] "expr temp" "maybe param" "maybe type" "temp"
      (605545 'move' call_tmp[605542](353216 call _value _mt[232] this[133292]))
      unknown call_tmp[605549] "expr temp" "maybe param" "maybe type" "temp"
      (605552 'move' call_tmp[605549](127746 call(127741 call (partial) these _mt[232] call_tmp[605542]) tag[127727]))
      (127760 'move' _iterator[127751](127758 call _getIterator call_tmp[605549]))
      Defer
      {
        {
          (127777 call _freeIterator _iterator[127751])
        }
      }
      { scopeless type
        (127766 'move' _indexOfInterest[127750](127763 call iteratorIndex _iterator[127751]))
      }
      ForLoop
      {
        unknown followThis[127770] "index var" "insert auto destroy"
        (127772 'move' followThis[127770] _indexOfInterest[127750])
        unknown yret[468740] "YVV" "temp"
        (468743 'move' yret[468740](468742 'deref' followThis[127770]))
        (468745 yield yret[468740])
        label _continueLabel[127755]
        _indexOfInterest[127750]
        _iterator[127751]
      }
      label _breakLabel[127756]
    }
    (468738 return ret[468736])
  }
  where {
    (127737 call == tag[127727] leader[691])
  }
  function _array[133150](?).these[127794](arg _mt[133298]:_MT[227], arg this[133296]:_array[133150](?), param arg tag[127791]:iterKind[697], arg followThis[127796]:_any[170](?), param arg fast[127800]:bool[10] =
  0) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[468749] "RVV" "temp"
    unknown call_tmp[605556] "expr temp" "maybe param" "maybe type" "temp"
    (605559 'move' call_tmp[605556](353225 call _value _mt[232] this[133296]))
    unknown call_tmp[605561] "expr temp" "maybe param" "maybe type" "temp"
    (605564 'move' call_tmp[605561](127820 'method call resolves' call_tmp[605556] "these"(tag = tag[127791]) followThis[127796](fast = fast[127800])))
    unknown call_tmp[605566] "expr temp" "maybe param" "maybe type" "temp"
    (605569 'move' call_tmp[605566](127918 call _cond_test call_tmp[605561]))
    if call_tmp[605566]
    {
      {
        unknown _indexOfInterest[127836] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[127837] "expr temp" "temp"
        unknown call_tmp[605573] "expr temp" "maybe param" "maybe type" "temp"
        (605576 'move' call_tmp[605573](353232 call _value _mt[232] this[133296]))
        unknown call_tmp[605580] "expr temp" "maybe param" "maybe type" "temp"
        (605583 'move' call_tmp[605580](127832 call(127823 call (partial) these _mt[232] call_tmp[605573])(tag = tag[127791]) followThis[127796](fast = fast[127800])))
        (127846 'move' _iterator[127837](127844 call _getIterator call_tmp[605580]))
        Defer
        {
          {
            (127863 call _freeIterator _iterator[127837])
          }
        }
        { scopeless type
          (127852 'move' _indexOfInterest[127836](127849 call iteratorIndex _iterator[127837]))
        }
        ForLoop
        {
          unknown i[127856] "index var" "insert auto destroy"
          (127858 'move' i[127856] _indexOfInterest[127836])
          unknown yret[468753] "YVV" "temp"
          (468756 'move' yret[468753](468755 'addr of' i[127856]))
          (468758 yield yret[468753])
          label _continueLabel[127841]
          _indexOfInterest[127836]
          _iterator[127837]
        }
        label _breakLabel[127842]
      }
    }
    {
      {
        unknown _indexOfInterest[127883] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[127884] "expr temp" "temp"
        unknown call_tmp[605587] "expr temp" "maybe param" "maybe type" "temp"
        (605590 'move' call_tmp[605587](353240 call _value _mt[232] this[133296]))
        unknown call_tmp[605594] "expr temp" "maybe param" "maybe type" "temp"
        (605597 'move' call_tmp[605594](127879 call(127873 call (partial) these _mt[232] call_tmp[605587]) tag[127791] followThis[127796]))
        (127893 'move' _iterator[127884](127891 call _getIterator call_tmp[605594]))
        Defer
        {
          {
            (127910 call _freeIterator _iterator[127884])
          }
        }
        { scopeless type
          (127899 'move' _indexOfInterest[127883](127896 call iteratorIndex _iterator[127884]))
        }
        ForLoop
        {
          unknown i[127903] "index var" "insert auto destroy"
          (127905 'move' i[127903] _indexOfInterest[127883])
          unknown yret[468760] "YVV" "temp"
          (468763 'move' yret[468760](468762 'addr of' i[127903]))
          (468765 yield yret[468760])
          label _continueLabel[127888]
          _indexOfInterest[127883]
          _iterator[127884]
        }
        label _breakLabel[127889]
      }
    }
    (468751 return ret[468749])
  }
  where {
    (127809 call == tag[127791] follower[693])
  }
  function _array[133150](?).numElements[127928](arg _mt[133302]:_MT[227], arg this[133300]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[468769] "RVV" "temp"
    unknown call_tmp[605601] "expr temp" "maybe param" "maybe type" "temp"
    (605604 'move' call_tmp[605601](353247 call _value _mt[232] this[133300]))
    unknown call_tmp[605608] "expr temp" "maybe param" "maybe type" "temp"
    (605611 'move' call_tmp[605608](127931 call dom _mt[232] call_tmp[605601]))
    unknown call_tmp[605615] "expr temp" "maybe param" "maybe type" "temp"
    (605618 'move' call_tmp[605615](127934 call dsiNumIndices _mt[232] call_tmp[605608]))
    (468774 'move' ret[468769](468773 'deref' call_tmp[605615]))
    (468771 return ret[468769])
  }
  function _array[133150](?).size[127944](arg _mt[133306]:_MT[227], arg this[133304]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[468778] "RVV" "temp"
    unknown call_tmp[605622] "expr temp" "maybe param" "maybe type" "temp"
    (605625 'move' call_tmp[605622](353251 call numElements _mt[232] this[133304]))
    (468783 'move' ret[468778](468782 'deref' call_tmp[605622]))
    (468780 return ret[468778])
  }
  function _array[133150](?).chpl_checkArrArgDoms[127958](arg _mt[133310]:_MT[227], arg this[133308]:_array[133150](?), arg formalDom[127955]:_domain[123390](?), param arg runtimeChecks[127961]:bool[10]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[605629] "expr temp" "maybe param" "maybe type" "temp"
    (605632 'move' call_tmp[605629](127965 call rank _mt[232] formalDom[127955]))
    unknown call_tmp[605636] "expr temp" "maybe param" "maybe type" "temp"
    (605639 'move' call_tmp[605636](127969 call _dom _mt[232] this[133308]))
    unknown call_tmp[605643] "expr temp" "maybe param" "maybe type" "temp"
    (605646 'move' call_tmp[605643](127972 call rank _mt[232] call_tmp[605636]))
    unknown call_tmp[605648] "expr temp" "maybe param" "maybe type" "temp"
    (605651 'move' call_tmp[605648](127975 call != call_tmp[605629] call_tmp[605643]))
    unknown call_tmp[605653] "expr temp" "maybe param" "maybe type" "temp"
    (605656 'move' call_tmp[605653](128038 call _cond_test call_tmp[605648]))
    if call_tmp[605653]
    {
      unknown call_tmp[605660] "expr temp" "maybe param" "maybe type" "temp"
      (605663 'move' call_tmp[605660](127995 call rank _mt[232] formalDom[127955]))
      unknown call_tmp[605665] "expr temp" "maybe param" "maybe type" "temp"
      (605668 'move' call_tmp[605665](127999 call _cast string[24] call_tmp[605660]))
      unknown call_tmp[605670] "expr temp" "maybe param" "maybe type" "temp"
      (605673 'move' call_tmp[605670](128001 call + "Rank mismatch passing array argument: expected " call_tmp[605665]))
      unknown call_tmp[605675] "expr temp" "maybe param" "maybe type" "temp"
      (605678 'move' call_tmp[605675](128019 call + call_tmp[605670] " but got "))
      unknown call_tmp[605682] "expr temp" "maybe param" "maybe type" "temp"
      (605685 'move' call_tmp[605682](128022 call _dom _mt[232] this[133308]))
      unknown call_tmp[605689] "expr temp" "maybe param" "maybe type" "temp"
      (605692 'move' call_tmp[605689](128025 call rank _mt[232] call_tmp[605682]))
      unknown call_tmp[605694] "expr temp" "maybe param" "maybe type" "temp"
      (605697 'move' call_tmp[605694](128029 call _cast string[24] call_tmp[605689]))
      unknown call_tmp[605699] "expr temp" "maybe param" "maybe type" "temp"
      (605702 'move' call_tmp[605699](128031 call + call_tmp[605675] call_tmp[605694]))
      (128036 call compilerError call_tmp[605699](errorDepth = 2))
    }
    { scopeless type
      unknown call_type_tmp[443517] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[605706] "expr temp" "maybe param" "maybe type" "temp"
      (605709 'move' call_tmp[605706](128045 call dist _mt[232] formalDom[127955]))
      unknown call_tmp[605713] "expr temp" "maybe param" "maybe type" "temp"
      (605716 'move' call_tmp[605713](128048 call _value _mt[232] call_tmp[605706]))
      (443521 'move' call_type_tmp[443517](128051 'typeof' call_tmp[605713]))
    }
    unknown call_tmp[605718] "expr temp" "maybe param" "maybe type" "temp"
    (605721 'move' call_tmp[605718](128054 call != call_type_tmp[443517] unmanaged DefaultDist[389849]))
    unknown call_tmp[605723] "expr temp" "maybe param" "maybe type" "temp"
    (605726 'move' call_tmp[605723](128178 call _cond_test call_tmp[605718]))
    if call_tmp[605723]
    {
      { scopeless type
        unknown call_type_tmp[443523] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[605730] "expr temp" "maybe param" "maybe type" "temp"
        (605733 'move' call_tmp[605730](128059 call _dom _mt[232] this[133308]))
        (443527 'move' call_type_tmp[443523](128062 'typeof' call_tmp[605730]))
      }
      unknown call_tmp[605735] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (605738 'move' call_tmp[605735](128057 'typeof' formalDom[127955]))
      unknown call_tmp[605740] "expr temp" "maybe param" "maybe type" "temp"
      (605743 'move' call_tmp[605740](128063 call != call_tmp[605735] call_type_tmp[443523]))
      unknown call_tmp[605745] "expr temp" "maybe param" "maybe type" "temp"
      (605748 'move' call_tmp[605745](128087 call _cond_test call_tmp[605740]))
      if call_tmp[605745]
      {
        (128085 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      unknown tmp[400887] "maybe param" "temp"
      (400898 'move' tmp[400887] runtimeChecks[127961])
      unknown call_tmp[605750] "expr temp" "maybe param" "maybe type" "temp"
      (605753 'move' call_tmp[605750](400900 call _cond_invalid tmp[400887]))
      if call_tmp[605750]
      {
        (400903 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[515056] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[515057] "maybe param" "temp"
      unknown call_tmp[605755] "expr temp" "maybe param" "maybe type" "temp"
      (605758 'move' call_tmp[605755](400888 call isTrue tmp[400887]))
      (515062 'move' tmp[515057](515060 call _cond_test call_tmp[605755]))
      if tmp[515057]
      {
        unknown tmp[515064] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[605762] "expr temp" "maybe param" "maybe type" "temp"
        (605765 'move' call_tmp[605762](128095 call dist _mt[232] formalDom[127955]))
        unknown call_tmp[605769] "expr temp" "maybe param" "maybe type" "temp"
        (605772 'move' call_tmp[605769](128099 call _dom _mt[232] this[133308]))
        unknown call_tmp[605776] "expr temp" "maybe param" "maybe type" "temp"
        (605779 'move' call_tmp[605776](128102 call dist _mt[232] call_tmp[605769]))
        unknown call_tmp[605781] "expr temp" "maybe param" "maybe type" "temp"
        (605784 'move' call_tmp[605781](128105 call != call_tmp[605762] call_tmp[605776]))
        (515066 'move' tmp[515064](400891 call isTrue call_tmp[605781]))
        (515071 'move' tmp[515056](515068 '_paramFoldLogical' tmp[515057] tmp[515064]))
      }
      {
        (515076 'move' tmp[515056](515073 '_paramFoldLogical' tmp[515057] 0))
      }
      unknown call_tmp[605786] "expr temp" "maybe param" "maybe type" "temp"
      (605789 'move' call_tmp[605786](128173 call _cond_test tmp[515056]))
      if call_tmp[605786]
      {
        unknown call_tmp[605793] "expr temp" "maybe param" "maybe type" "temp"
        (605796 'move' call_tmp[605793](128144 call dist _mt[232] formalDom[127955]))
        unknown call_tmp[605800] "expr temp" "maybe param" "maybe type" "temp"
        (605803 'move' call_tmp[605800](128165 call _dom _mt[232] this[133308]))
        unknown call_tmp[605807] "expr temp" "maybe param" "maybe type" "temp"
        (605810 'move' call_tmp[605807](128168 call dist _mt[232] call_tmp[605800]))
        (128171 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: " call_tmp[605793] "\n" "  Actual domain map is: " call_tmp[605807])
      }
    }
    unknown tmp[400908] "maybe param" "temp"
    (400919 'move' tmp[400908] runtimeChecks[127961])
    unknown call_tmp[605812] "expr temp" "maybe param" "maybe type" "temp"
    (605815 'move' call_tmp[605812](400921 call _cond_invalid tmp[400908]))
    if call_tmp[605812]
    {
      (400924 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515083] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515084] "maybe param" "temp"
    unknown call_tmp[605817] "expr temp" "maybe param" "maybe type" "temp"
    (605820 'move' call_tmp[605817](400909 call isTrue tmp[400908]))
    (515089 'move' tmp[515084](515087 call _cond_test call_tmp[605817]))
    if tmp[515084]
    {
      unknown tmp[515091] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605824] "expr temp" "maybe param" "maybe type" "temp"
      (605827 'move' call_tmp[605824](128185 call _dom _mt[232] this[133308]))
      unknown call_tmp[605829] "expr temp" "maybe param" "maybe type" "temp"
      (605832 'move' call_tmp[605829](128188 call != formalDom[127955] call_tmp[605824]))
      (515093 'move' tmp[515091](400912 call isTrue call_tmp[605829]))
      (515098 'move' tmp[515083](515095 '_paramFoldLogical' tmp[515084] tmp[515091]))
    }
    {
      (515103 'move' tmp[515083](515100 '_paramFoldLogical' tmp[515084] 0))
    }
    unknown call_tmp[605834] "expr temp" "maybe param" "maybe type" "temp"
    (605837 'move' call_tmp[605834](128250 call _cond_test tmp[515083]))
    if call_tmp[605834]
    {
      unknown call_tmp[605841] "expr temp" "maybe param" "maybe type" "temp"
      (605844 'move' call_tmp[605841](128245 call _dom _mt[232] this[133308]))
      (128248 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[127955] "\n" "  Actual domain is: " call_tmp[605841])
    }
    (468785 return _void[47])
  }
  function _array[133150](?).reindex[128263](arg _mt[133314]:_MT[227], arg this[133312]:_array[133150](?), arg newDomain[128260]:_domain[123390](?)) : _unknown[43] "inline" "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[468789] "RVV" "temp"
    unknown call_tmp[605850] "expr temp" "maybe param" "maybe type" "temp"
    (605853 'move' call_tmp[605850](128284 call(128280 call (partial) dims _mt[232] newDomain[128260])))
    unknown call_tmp[605855] "expr temp" "maybe param" "maybe type" "temp"
    (605858 'move' call_tmp[605855](128287 call(353277 call (partial) reindex _mt[232] this[133312])(128285 'expand_tuple' call_tmp[605850])))
    (468794 'move' ret[468789](468793 'deref' call_tmp[605855]))
    (468791 return ret[468789])
  }
  where {
    unknown tmp[400929] "maybe param" "temp"
    unknown call_tmp[605862] "expr temp" "maybe param" "maybe type" "temp"
    (605865 'move' call_tmp[605862](128267 call _dom _mt[232] this[133312]))
    (400940 'move' tmp[400929](128271 call isRectangularDom call_tmp[605862]))
    unknown call_tmp[605867] "expr temp" "maybe param" "maybe type" "temp"
    (605870 'move' call_tmp[605867](400942 call _cond_invalid tmp[400929]))
    if call_tmp[605867]
    {
      (400945 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515110] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515111] "maybe param" "temp"
    unknown call_tmp[605872] "expr temp" "maybe param" "maybe type" "temp"
    (605875 'move' call_tmp[605872](400930 call isTrue tmp[400929]))
    (515116 'move' tmp[515111](515114 call _cond_test call_tmp[605872]))
    if tmp[515111]
    {
      unknown tmp[515118] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[605877] "expr temp" "maybe param" "maybe type" "temp"
      (605880 'move' call_tmp[605877](128275 call isRectangularDom newDomain[128260]))
      (515120 'move' tmp[515118](400933 call isTrue call_tmp[605877]))
      (515125 'move' tmp[515110](515122 '_paramFoldLogical' tmp[515111] tmp[515118]))
    }
    {
      (515130 'move' tmp[515110](515127 '_paramFoldLogical' tmp[515111] 0))
    }
    (691899 call _statementLevelSymbol tmp[515110])
  }
  function _array[133150](?).reindex[128300](arg _mt[133318]:_MT[227], arg this[133316]:_array[133150](?), arg newDims[128297]:_any[170](?) ...) : _unknown[43] "method" "primary method" "fn returns aliasing array"
  {
    unknown ret[468798] "RVV" "temp"
    {
      unknown i[128350] "insert auto destroy"
      (491457 'init var' i[128350] 0)
      unknown tmp[128351] "maybe param" "temp"
      unknown call_tmp[605884] "expr temp" "maybe param" "maybe type" "temp"
      (605887 'move' call_tmp[605884](128311 call size _mt[232] newDims[128297]))
      (128363 'move' tmp[128351](128361 call chpl_compute_low_param_loop_bound 1 call_tmp[605884]))
      unknown tmp[128352] "maybe param" "temp"
      unknown call_tmp[605891] "expr temp" "maybe param" "maybe type" "temp"
      (605894 'move' call_tmp[605891](128368 call size _mt[232] newDims[128297]))
      (128373 'move' tmp[128352](128371 call chpl_compute_high_param_loop_bound 1 call_tmp[605891]))
      unknown tmp[128353] "maybe param" "temp"
      (128376 'move' tmp[128353] 1)
      ParamForLoop
      { i[128350] tmp[128351] tmp[128352] tmp[128353]
        unknown call_tmp[605896] "expr temp" "maybe param" "maybe type" "temp"
        (605899 'move' call_tmp[605896](128320 call newDims[128297] i[128350]))
        unknown call_tmp[605901] "expr temp" "maybe param" "maybe type" "temp"
        (605904 'move' call_tmp[605901](128322 call isRange call_tmp[605896]))
        unknown call_tmp[605906] "expr temp" "maybe param" "maybe type" "temp"
        (605909 'move' call_tmp[605906](128323 call ! call_tmp[605901]))
        unknown call_tmp[605911] "expr temp" "maybe param" "maybe type" "temp"
        (605914 'move' call_tmp[605911](128345 call _cond_test call_tmp[605906]))
        if call_tmp[605911]
        {
          (128343 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[128355]
      label _breakLabel[128354]
    }
    unknown call_tmp[605918] "expr temp" "maybe param" "maybe type" "temp"
    (605921 'move' call_tmp[605918](128389 call rank _mt[232] this[133316]))
    unknown call_tmp[605925] "expr temp" "maybe param" "maybe type" "temp"
    (605928 'move' call_tmp[605925](128393 call size _mt[232] newDims[128297]))
    unknown call_tmp[605930] "expr temp" "maybe param" "maybe type" "temp"
    (605933 'move' call_tmp[605930](128396 call != call_tmp[605918] call_tmp[605925]))
    unknown call_tmp[605935] "expr temp" "maybe param" "maybe type" "temp"
    (605938 'move' call_tmp[605935](128454 call _cond_test call_tmp[605930]))
    if call_tmp[605935]
    {
      unknown call_tmp[605942] "expr temp" "maybe param" "maybe type" "temp"
      (605945 'move' call_tmp[605942](128416 call rank _mt[232] this[133316]))
      unknown call_tmp[605947] "expr temp" "maybe param" "maybe type" "temp"
      (605950 'move' call_tmp[605947](128420 call _cast string[24] call_tmp[605942]))
      unknown call_tmp[605952] "expr temp" "maybe param" "maybe type" "temp"
      (605955 'move' call_tmp[605952](128422 call + "rank mismatch: cannot reindex() from " call_tmp[605947]))
      unknown call_tmp[605957] "expr temp" "maybe param" "maybe type" "temp"
      (605960 'move' call_tmp[605957](128440 call + call_tmp[605952] " dimension(s) to "))
      unknown call_tmp[605964] "expr temp" "maybe param" "maybe type" "temp"
      (605967 'move' call_tmp[605964](128443 call size _mt[232] newDims[128297]))
      unknown call_tmp[605969] "expr temp" "maybe param" "maybe type" "temp"
      (605972 'move' call_tmp[605969](128447 call _cast string[24] call_tmp[605964]))
      unknown call_tmp[605974] "expr temp" "maybe param" "maybe type" "temp"
      (605977 'move' call_tmp[605974](128449 call + call_tmp[605957] call_tmp[605969]))
      (128452 call compilerError call_tmp[605974])
    }
    {
      unknown i[128527] "insert auto destroy"
      (491459 'init var' i[128527] 0)
      unknown tmp[128528] "maybe param" "temp"
      unknown call_tmp[605981] "expr temp" "maybe param" "maybe type" "temp"
      (605984 'move' call_tmp[605981](353291 call rank _mt[232] this[133316]))
      (128540 'move' tmp[128528](128538 call chpl_compute_low_param_loop_bound 1 call_tmp[605981]))
      unknown tmp[128529] "maybe param" "temp"
      unknown call_tmp[605988] "expr temp" "maybe param" "maybe type" "temp"
      (605991 'move' call_tmp[605988](353303 call rank _mt[232] this[133316]))
      (128547 'move' tmp[128529](128545 call chpl_compute_high_param_loop_bound 1 call_tmp[605988]))
      unknown tmp[128530] "maybe param" "temp"
      (128550 'move' tmp[128530] 1)
      ParamForLoop
      { i[128527] tmp[128528] tmp[128529] tmp[128530]
        unknown call_tmp[605993] "expr temp" "maybe param" "maybe type" "temp"
        (605996 'move' call_tmp[605993](128466 call newDims[128297] i[128527]))
        unknown call_tmp[606000] "expr temp" "maybe param" "maybe type" "temp"
        (606003 'move' call_tmp[606000](128467 call length _mt[232] call_tmp[605993]))
        unknown call_tmp[606007] "expr temp" "maybe param" "maybe type" "temp"
        (606010 'move' call_tmp[606007](353297 call _value _mt[232] this[133316]))
        unknown call_tmp[606014] "expr temp" "maybe param" "maybe type" "temp"
        (606017 'move' call_tmp[606014](128471 call dom _mt[232] call_tmp[606007]))
        unknown call_tmp[606021] "expr temp" "maybe param" "maybe type" "temp"
        (606024 'move' call_tmp[606021](128479 call(128474 call (partial) dsiDim _mt[232] call_tmp[606014]) i[128527]))
        unknown call_tmp[606028] "expr temp" "maybe param" "maybe type" "temp"
        (606031 'move' call_tmp[606028](128480 call length _mt[232] call_tmp[606021]))
        unknown call_tmp[606033] "expr temp" "maybe param" "maybe type" "temp"
        (606036 'move' call_tmp[606033](128483 call != call_tmp[606000] call_tmp[606028]))
        unknown call_tmp[606038] "expr temp" "maybe param" "maybe type" "temp"
        (606041 'move' call_tmp[606038](128522 call _cond_test call_tmp[606033]))
        if call_tmp[606038]
        {
          (128520 call halt "extent in dimension " i[128527] " does not match actual")
        }
      }
      label _unused_continueLabel[128532]
      label _breakLabel[128531]
    }
    unknown call_tmp[606045] "expr temp" "maybe param" "maybe type" "temp"
    (606048 'move' call_tmp[606045](128562 call _value _mt[232] this[133316]))
    unknown call_tmp[606052] "maybe param" "maybe type" "temp"
    (606055 'move' call_tmp[606052](128565 call dom _mt[232] call_tmp[606045]))
    const thisDomClass[128568] "const" "insert auto destroy"
    (491461 'init var' thisDomClass[128568] call_tmp[606052])
    unknown call_tmp[606059] "expr temp" "maybe param" "maybe type" "temp"
    (606062 'move' call_tmp[606059](128578 call pid _mt[232] thisDomClass[128568]))
    unknown call_tmp[606064] "maybe param" "maybe type" "temp"
    (606067 'move' call_tmp[606064](128582 call _build_tuple thisDomClass[128568] call_tmp[606059]))
    const tmp[128584] "const" "insert auto destroy" "no copy" "temp"
    (491463 'init var' tmp[128584] call_tmp[606064])
    (128591 call _check_tuple_var_decl tmp[128584] 2)
    unknown call_tmp[606069] "maybe param" "maybe type" "temp"
    (606072 'move' call_tmp[606069](128585 call tmp[128584] 1))
    const dom[128571] "const" "insert auto destroy"
    (491465 'init var' dom[128571] call_tmp[606069])
    unknown call_tmp[606074] "maybe param" "maybe type" "temp"
    (606077 'move' call_tmp[606074](128588 call tmp[128584] 2))
    const dompid[128573] "const" "insert auto destroy"
    (491467 'init var' dompid[128573] call_tmp[606074])
    unknown call_tmp[606079] "maybe param" "maybe type" "temp"
    (606082 'move' call_tmp[606079](128599 call chpl__buildDomainExpr(128597 'expand_tuple' newDims[128297])))
    const updom[128601] "const" "no auto destroy"
    (491469 'init var' updom[128601] call_tmp[606079])
    unknown call_tmp[606086] "expr temp" "maybe param" "maybe type" "temp"
    (606089 'move' call_tmp[606086](128606 call _dom _mt[232] this[133316]))
    unknown call_tmp[606093] "expr temp" "maybe param" "maybe type" "temp"
    (606096 'move' call_tmp[606093](128609 call dist _mt[232] call_tmp[606086]))
    unknown call_tmp[606100] "expr temp" "maybe param" "maybe type" "temp"
    (606103 'move' call_tmp[606100](128612 call _pid _mt[232] call_tmp[606093]))
    unknown call_tmp[606107] "expr temp" "maybe param" "maybe type" "temp"
    (606110 'move' call_tmp[606107](128618 call _dom _mt[232] this[133316]))
    unknown call_tmp[606114] "expr temp" "maybe param" "maybe type" "temp"
    (606117 'move' call_tmp[606114](128621 call dist _mt[232] call_tmp[606107]))
    unknown call_tmp[606121] "expr temp" "maybe param" "maybe type" "temp"
    (606124 'move' call_tmp[606121](128624 call _instance _mt[232] call_tmp[606114]))
    unknown call_tmp[606128] "expr temp" "maybe param" "maybe type" "temp"
    (606131 'move' call_tmp[606128](128629 call _value _mt[232] updom[128601]))
    unknown call_tmp[606133] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (606136 'move' call_tmp[606133](691440 'new' anymanaged ArrayViewReindexDist[353311](?)(downDistPid = call_tmp[606100])(downDistInst = call_tmp[606121])(updom = call_tmp[606128])(downdomPid = dompid[128573])(downdomInst = dom[128571])(_chpl_manager = unmanaged[209](?))))
    const redist[128640] "const" "insert auto destroy"
    (491471 'init var' redist[128640] call_tmp[606133])
    unknown call_tmp[606138] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (606141 'move' call_tmp[606138](691441 'new' _distribution[116702](?) redist[128640]))
    const redistRec[128648] "const" "insert auto destroy"
    (491473 'init var' redistRec[128648] call_tmp[606138])
    unknown call_tmp[606145] "expr temp" "maybe param" "maybe type" "temp"
    (606148 'move' call_tmp[606145](353324 call rank _mt[232] this[133316]))
    unknown call_tmp[606152] "expr temp" "maybe param" "maybe type" "temp"
    (606155 'move' call_tmp[606152](128656 call idxType _mt[232] updom[128601]))
    unknown call_tmp[606159] "expr temp" "maybe param" "maybe type" "temp"
    (606162 'move' call_tmp[606159](128660 call stridable _mt[232] updom[128601]))
    unknown call_tmp[606166] "expr temp" "maybe param" "maybe type" "temp"
    (606169 'move' call_tmp[606166](128668 call(128664 call (partial) dims _mt[232] updom[128601])))
    unknown call_tmp[606171] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (606174 'move' call_tmp[606171](691442 'new' _domain[123390](?) redistRec[128648] call_tmp[606145] call_tmp[606152] call_tmp[606159] call_tmp[606166]))
    const newDom[128671] "const" "no auto destroy"
    (491475 'init var' newDom[128671] call_tmp[606171])
    unknown call_tmp[606178] "expr temp" "maybe param" "maybe type" "temp"
    (606181 'move' call_tmp[606178](128675 call _value _mt[232] newDom[128671]))
    unknown call_tmp[606185] "expr temp" "maybe param" "maybe type" "temp"
    (606188 'move' call_tmp[606185](128678 call _free_when_no_arrs _mt[232] call_tmp[606178]))
    (128682 call = call_tmp[606185] 1)
    unknown call_tmp[606192] "expr temp" "maybe param" "maybe type" "temp"
    (606195 'move' call_tmp[606192](128691 call _value _mt[232] this[133316]))
    unknown call_tmp[606199] "expr temp" "maybe param" "maybe type" "temp"
    (606202 'move' call_tmp[606199](128695 call _pid _mt[232] this[133316]))
    unknown call_tmp[606204] "maybe param" "maybe type" "temp"
    (606207 'move' call_tmp[606204](128699 call _build_tuple call_tmp[606192] call_tmp[606199]))
    const tmp[128701] "const" "insert auto destroy" "no copy" "temp"
    (491477 'init var' tmp[128701] call_tmp[606204])
    (128708 call _check_tuple_var_decl tmp[128701] 2)
    unknown call_tmp[606209] "maybe param" "maybe type" "temp"
    (606212 'move' call_tmp[606209](128702 call tmp[128701] 1))
    const arr[128685] "const" "insert auto destroy"
    (491479 'init var' arr[128685] call_tmp[606209])
    unknown call_tmp[606214] "maybe param" "maybe type" "temp"
    (606217 'move' call_tmp[606214](128705 call tmp[128701] 2))
    const arrpid[128687] "const" "insert auto destroy"
    (491481 'init var' arrpid[128687] call_tmp[606214])
    unknown call_tmp[606221] "expr temp" "maybe param" "maybe type" "temp"
    (606224 'move' call_tmp[606221](128715 call eltType _mt[232] this[133316]))
    unknown call_tmp[606228] "expr temp" "maybe param" "maybe type" "temp"
    (606231 'move' call_tmp[606228](128721 call _pid _mt[232] newDom[128671]))
    unknown call_tmp[606235] "expr temp" "maybe param" "maybe type" "temp"
    (606238 'move' call_tmp[606235](128726 call _instance _mt[232] newDom[128671]))
    unknown call_tmp[606240] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (606243 'move' call_tmp[606240](691443 'new' anymanaged ArrayViewReindexArr[353334](?)(eltType = call_tmp[606221])(_DomPid = call_tmp[606228])(dom = call_tmp[606235])(_ArrPid = arrpid[128687])(_ArrInstance = arr[128685])(_chpl_manager = unmanaged[209](?))))
    unknown x[128737] "insert auto destroy"
    (491483 'init var' x[128737] call_tmp[606240])
    unknown call_tmp[606247] "expr temp" "maybe param" "maybe type" "temp"
    (606250 'move' call_tmp[606247](128741 call _value _mt[232] newDom[128671]))
    (128751 call(128744 call (partial) add_arr _mt[232] call_tmp[606247]) x[128737](locking = 0))
    unknown call_tmp[606254] "expr temp" "maybe param" "maybe type" "temp"
    (606257 'move' call_tmp[606254](128756 call _newArray x[128737]))
    (468803 'move' ret[468798](468802 'deref' call_tmp[606254]))
    (468800 return ret[468798])
  }
  where {
    unknown call_tmp[606261] "expr temp" "maybe param" "maybe type" "temp"
    (606264 'move' call_tmp[606261](128304 call _dom _mt[232] this[133316]))
    (128308 call isRectangularDom call_tmp[606261])
  }
  function _array[133150](?).reindex[128768](arg _mt[133322]:_MT[227], arg this[133320]:_array[133150](?), arg d[128765]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (128788 call compilerError "Reindexing non-rectangular arrays is not permitted.")
    (468805 return _void[47])
  }
  function _array[133150](?).writeThis[128797](arg _mt[133326]:_MT[227], arg this[133324]:_array[133150](?), arg f[128795]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[606268] "expr temp" "maybe param" "maybe type" "temp"
    (606271 'move' call_tmp[606268](353347 call _value _mt[232] this[133324]))
    (128805 call(128800 call (partial) dsiSerialWrite _mt[232] call_tmp[606268]) f[128795])
    (468807 return _void[47])
  }
  function _array[133150](?).readThis[128814](arg _mt[133330]:_MT[227], arg this[133328]:_array[133150](?), arg f[128812]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[606277] "expr temp" "maybe param" "maybe type" "temp"
    (606280 'move' call_tmp[606277](353352 call _value _mt[232] this[133328]))
    (128822 call(128817 call (partial) dsiSerialRead _mt[232] call_tmp[606277]) f[128812])
    (468809 return _void[47])
  }
  function _array[133150](?).IRV[128829](arg _mt[133334]:_MT[227], arg this[133332]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens" "no return value for void"
  {
    (128855 call compilerError "only sparse arrays have an IRV")
    (468811 return _void[47])
  }
  where {
    unknown call_tmp[606284] "expr temp" "maybe param" "maybe type" "temp"
    (606287 'move' call_tmp[606284](128834 call isSparseArr this[133332]))
    (128835 call ! call_tmp[606284])
  }
  function _array[133150](?).IRV[128863](arg _mt[133338]:_MT[227], arg this[133336]:_array[133150](?)) ref : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[468815] "RVV" "temp"
    unknown call_tmp[606291] "expr temp" "maybe param" "maybe type" "temp"
    (606294 'move' call_tmp[606291](353359 call _value _mt[232] this[133336]))
    unknown call_tmp[606298] "expr temp" "maybe param" "maybe type" "temp"
    (606301 'move' call_tmp[606298](128872 call IRV _mt[232] call_tmp[606291]))
    (468820 'move' ret[468815](468819 'addr of' call_tmp[606298]))
    (468817 return ret[468815])
  }
  where {
    (128868 call isSparseArr this[133336])
  }
  function _array[133150](?).sorted[128892](arg _mt[133342]:_MT[227], arg this[133340]:_array[133150](?), arg comparator[128888]:_any[170](?) :
  (692346 call chpl_defaultComparator) =
  (128887 call chpl_defaultComparator)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[468824] "RVV" "temp"
    unknown call_tmp[606305] "expr temp" "maybe param" "maybe type" "temp"
    (606308 'move' call_tmp[606305](353363 call _value _mt[232] this[133340]))
    unknown call_tmp[606310] "expr temp" "maybe param" "maybe type" "temp"
    (606313 'move' call_tmp[606310](128912 call canResolveMethod call_tmp[606305] "dsiSorted" comparator[128888]))
    unknown call_tmp[606315] "expr temp" "maybe param" "maybe type" "temp"
    (606318 'move' call_tmp[606315](129051 call _cond_test call_tmp[606310]))
    if call_tmp[606315]
    {
      {
        unknown _indexOfInterest[128925] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[128926] "expr temp" "temp"
        unknown call_tmp[606322] "expr temp" "maybe param" "maybe type" "temp"
        (606325 'move' call_tmp[606322](353368 call _value _mt[232] this[133340]))
        unknown call_tmp[606329] "expr temp" "maybe param" "maybe type" "temp"
        (606332 'move' call_tmp[606329](128920 call(128915 call (partial) dsiSorted _mt[232] call_tmp[606322]) comparator[128888]))
        (128935 'move' _iterator[128926](128933 call _getIterator call_tmp[606329]))
        Defer
        {
          {
            (128952 call _freeIterator _iterator[128926])
          }
        }
        { scopeless type
          (128941 'move' _indexOfInterest[128925](128938 call iteratorIndex _iterator[128926]))
        }
        ForLoop
        {
          unknown i[128945] "index var" "insert auto destroy"
          (128947 'move' i[128945] _indexOfInterest[128925])
          {
            unknown yret[468828] "YVV" "temp"
            (468831 'move' yret[468828](468830 'deref' i[128945]))
            (468833 yield yret[468828])
          }
          label _continueLabel[128930]
          _indexOfInterest[128925]
          _iterator[128926]
        }
        label _breakLabel[128931]
      }
    }
    {
      unknown call_tmp[606336] "expr temp" "maybe param" "maybe type" "temp"
      (606339 'move' call_tmp[606336](353374 call _value _mt[232] this[133340]))
      unknown call_tmp[606341] "expr temp" "maybe param" "maybe type" "temp"
      (606344 'move' call_tmp[606341](128964 call canResolveMethod call_tmp[606336] "dsiSorted"))
      unknown call_tmp[606346] "expr temp" "maybe param" "maybe type" "temp"
      (606349 'move' call_tmp[606346](129047 call _cond_test call_tmp[606341]))
      if call_tmp[606346]
      {
        { scopeless type
          unknown call_type_tmp[443535] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[606353] "expr temp" "maybe param" "maybe type" "temp"
          (606356 'move' call_tmp[606353](353378 call _value _mt[232] this[133340]))
          (443539 'move' call_type_tmp[443535](128967 'typeof' call_tmp[606353]))
        }
        unknown call_tmp[606358] "expr temp" "maybe param" "maybe type" "temp"
        (606361 'move' call_tmp[606358](128969 call _cast string[24] call_type_tmp[443535]))
        unknown call_tmp[606363] "expr temp" "maybe param" "maybe type" "temp"
        (606366 'move' call_tmp[606363](128987 call + call_tmp[606358] " does not support dsiSorted(comparator)"))
        (128990 call compilerError call_tmp[606363])
      }
      {
        unknown copy[128999] "insert auto destroy"
        (491485 'init var' copy[128999] this[133340])
        (129007 call sort copy[128999](comparator = comparator[128888]))
        {
          unknown _indexOfInterest[129014] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[129015] "expr temp" "temp"
          (129024 'move' _iterator[129015](129022 call _getIterator copy[128999]))
          Defer
          {
            {
              (129040 call _freeIterator _iterator[129015])
            }
          }
          { scopeless type
            (129029 'move' _indexOfInterest[129014](129026 call iteratorIndex _iterator[129015]))
          }
          ForLoop
          {
            unknown ind[129033] "index var" "insert auto destroy"
            (129035 'move' ind[129033] _indexOfInterest[129014])
            unknown yret[468835] "YVV" "temp"
            (468838 'move' yret[468835](468837 'deref' ind[129033]))
            (468840 yield yret[468835])
            label _continueLabel[129019]
            _indexOfInterest[129014]
            _iterator[129015]
          }
          label _breakLabel[129020]
        }
        (329398 'used modules list'(128995 'use' Sort[251417]))
      }
    }
    (468826 return ret[468824])
  }
  function _array[133150](?).displayRepresentation[129061](arg _mt[133346]:_MT[227], arg this[133344]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[606370] "expr temp" "maybe param" "maybe type" "temp"
    (606373 'move' call_tmp[606370](353387 call _value _mt[232] this[133344]))
    (129068 call(129064 call (partial) dsiDisplayRepresentation _mt[232] call_tmp[606370]))
    (468842 return _void[47])
  }
  function _array[133150](?).targetLocales[129075](arg _mt[133350]:_MT[227], arg this[133348]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[468846] "RVV" "temp"
    unknown call_tmp[606379] "expr temp" "maybe param" "maybe type" "temp"
    (606382 'move' call_tmp[606379](353391 call _value _mt[232] this[133348]))
    unknown call_tmp[606386] "expr temp" "maybe param" "maybe type" "temp"
    (606389 'move' call_tmp[606386](129082 call(129078 call (partial) dsiTargetLocales _mt[232] call_tmp[606379])))
    (468851 'move' ret[468846](468850 'deref' call_tmp[606386]))
    (468848 return ret[468846])
  }
  function _array[133150](?).hasSingleLocalSubdomain[129090](arg _mt[133354]:_MT[227], arg this[133352]:_array[133150](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[468855] "RVV" "param" "temp"
    unknown call_tmp[606393] "expr temp" "maybe param" "maybe type" "temp"
    (606396 'move' call_tmp[606393](353395 call _value _mt[232] this[133352]))
    unknown call_tmp[606400] "expr temp" "maybe param" "maybe type" "temp"
    (606403 'move' call_tmp[606400](129097 call(129093 call (partial) dsiHasSingleLocalSubdomain _mt[232] call_tmp[606393])))
    (468860 'move' ret[468855](468859 'deref' call_tmp[606400]))
    (468857 return ret[468855])
  }
  function _array[133150](?).localSubdomain[129111](arg _mt[133358]:_MT[227], arg this[133356]:_array[133150](?), arg loc[129107]:locale[26] =
  (353398 call here[92085])) : _unknown[43] "method" "primary method"
  {
    unknown ret[468864] "RVV" "temp"
    unknown call_tmp[606407] "expr temp" "maybe param" "maybe type" "temp"
    (606410 'move' call_tmp[606407](353401 call _value _mt[232] this[133356]))
    unknown call_tmp[606414] "expr temp" "maybe param" "maybe type" "temp"
    (606417 'move' call_tmp[606414](129118 call(129114 call (partial) dsiHasSingleLocalSubdomain _mt[232] call_tmp[606407])))
    unknown call_tmp[606419] "expr temp" "maybe param" "maybe type" "temp"
    (606422 'move' call_tmp[606419](129119 call ! call_tmp[606414]))
    unknown call_tmp[606424] "expr temp" "maybe param" "maybe type" "temp"
    (606427 'move' call_tmp[606424](129126 call _cond_test call_tmp[606419]))
    if call_tmp[606424]
    {
      (129124 call compilerError "Domain's local domain is not a single domain")
    }
    unknown call_tmp[606431] "expr temp" "maybe param" "maybe type" "temp"
    (606434 'move' call_tmp[606431](353405 call _value _mt[232] this[133356]))
    unknown call_tmp[606438] "expr temp" "maybe param" "maybe type" "temp"
    (606441 'move' call_tmp[606438](129138 call(129133 call (partial) dsiLocalSubdomain _mt[232] call_tmp[606431]) loc[129107]))
    (468869 'move' ret[468864](468868 'deref' call_tmp[606438]))
    (468866 return ret[468864])
  }
  function _array[133150](?).localSubdomains[129151](arg _mt[133362]:_MT[227], arg this[133360]:_array[133150](?), arg loc[129147]:locale[26] =
  (353409 call here[92085])) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[468873] "RVV" "temp"
    unknown call_tmp[606445] "expr temp" "maybe param" "maybe type" "temp"
    (606448 'move' call_tmp[606445](353412 call _value _mt[232] this[133360]))
    unknown call_tmp[606452] "expr temp" "maybe param" "maybe type" "temp"
    (606455 'move' call_tmp[606452](129158 call(129154 call (partial) dsiHasSingleLocalSubdomain _mt[232] call_tmp[606445])))
    unknown call_tmp[606457] "expr temp" "maybe param" "maybe type" "temp"
    (606460 'move' call_tmp[606457](129212 call _cond_test call_tmp[606452]))
    if call_tmp[606457]
    {
      unknown yret[468877] "YVV" "temp"
      unknown call_tmp[606464] "expr temp" "maybe param" "maybe type" "temp"
      (606467 'move' call_tmp[606464](129162 call(353416 call (partial) localSubdomain _mt[232] this[133360]) loc[129147]))
      (468880 'move' yret[468877](468879 'deref' call_tmp[606464]))
      (468882 yield yret[468877])
    }
    {
      {
        unknown _indexOfInterest[129177] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[129178] "expr temp" "temp"
        unknown call_tmp[606471] "expr temp" "maybe param" "maybe type" "temp"
        (606474 'move' call_tmp[606471](353421 call _value _mt[232] this[133360]))
        unknown call_tmp[606478] "expr temp" "maybe param" "maybe type" "temp"
        (606481 'move' call_tmp[606478](129173 call(129168 call (partial) dsiLocalSubdomains _mt[232] call_tmp[606471]) loc[129147]))
        (129187 'move' _iterator[129178](129185 call _getIterator call_tmp[606478]))
        Defer
        {
          {
            (129204 call _freeIterator _iterator[129178])
          }
        }
        { scopeless type
          (129193 'move' _indexOfInterest[129177](129190 call iteratorIndex _iterator[129178]))
        }
        ForLoop
        {
          unknown d[129197] "index var" "insert auto destroy"
          (129199 'move' d[129197] _indexOfInterest[129177])
          unknown yret[468884] "YVV" "temp"
          (468887 'move' yret[468884](468886 'deref' d[129197]))
          (468889 yield yret[468884])
          label _continueLabel[129182]
          _indexOfInterest[129177]
          _iterator[129178]
        }
        label _breakLabel[129183]
      }
    }
    (468875 return ret[468873])
  }
  function _array[133150](?).chpl__isDense1DArray[129221](arg _mt[133366]:_MT[227], arg this[133364]:_array[133150](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[468893] "RVV" "param" "temp"
    unknown tmp[400950] "maybe param" "temp"
    unknown tmp[400971] "maybe param" "temp"
    (400982 'move' tmp[400971](129226 call isRectangularArr this[133364]))
    unknown call_tmp[606483] "expr temp" "maybe param" "maybe type" "temp"
    (606486 'move' call_tmp[606483](400984 call _cond_invalid tmp[400971]))
    if call_tmp[606483]
    {
      (400987 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515137] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515138] "maybe param" "temp"
    unknown call_tmp[606488] "expr temp" "maybe param" "maybe type" "temp"
    (606491 'move' call_tmp[606488](400972 call isTrue tmp[400971]))
    (515143 'move' tmp[515138](515141 call _cond_test call_tmp[606488]))
    if tmp[515138]
    {
      unknown tmp[515145] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[606495] "expr temp" "maybe param" "maybe type" "temp"
      (606498 'move' call_tmp[606495](129228 call rank _mt[232] this[133364]))
      unknown call_tmp[606500] "expr temp" "maybe param" "maybe type" "temp"
      (606503 'move' call_tmp[606500](129232 call == call_tmp[606495] 1))
      (515147 'move' tmp[515145](400975 call isTrue call_tmp[606500]))
      (515152 'move' tmp[515137](515149 '_paramFoldLogical' tmp[515138] tmp[515145]))
    }
    {
      (515157 'move' tmp[515137](515154 '_paramFoldLogical' tmp[515138] 0))
    }
    (400961 'move' tmp[400950] tmp[515137])
    unknown call_tmp[606505] "expr temp" "maybe param" "maybe type" "temp"
    (606508 'move' call_tmp[606505](400963 call _cond_invalid tmp[400950]))
    if call_tmp[606505]
    {
      (400966 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515164] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515165] "maybe param" "temp"
    unknown call_tmp[606510] "expr temp" "maybe param" "maybe type" "temp"
    (606513 'move' call_tmp[606510](400951 call isTrue tmp[400950]))
    (515170 'move' tmp[515165](515168 call _cond_test call_tmp[606510]))
    if tmp[515165]
    {
      unknown tmp[515172] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[606517] "expr temp" "maybe param" "maybe type" "temp"
      (606520 'move' call_tmp[606517](129237 call _value _mt[232] this[133364]))
      unknown call_tmp[606524] "expr temp" "maybe param" "maybe type" "temp"
      (606527 'move' call_tmp[606524](129240 call stridable _mt[232] call_tmp[606517]))
      unknown call_tmp[606529] "expr temp" "maybe param" "maybe type" "temp"
      (606532 'move' call_tmp[606529](129243 call ! call_tmp[606524]))
      (515174 'move' tmp[515172](400954 call isTrue call_tmp[606529]))
      (515179 'move' tmp[515164](515176 '_paramFoldLogical' tmp[515165] tmp[515172]))
    }
    {
      (515184 'move' tmp[515164](515181 '_paramFoldLogical' tmp[515165] 0))
    }
    (468898 'move' ret[468893](468897 'deref' tmp[515164]))
    (468895 return ret[468893])
  }
  function _array[133150](?).chpl__assertSingleArrayDomain[129258](arg _mt[133370]:_MT[227], arg this[133368]:_array[133150](?), arg fnName[129255]:string[24]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[606536] "expr temp" "maybe param" "maybe type" "temp"
    (606539 'move' call_tmp[606536](129261 call _dom _mt[232] this[133368]))
    unknown call_tmp[606543] "expr temp" "maybe param" "maybe type" "temp"
    (606546 'move' call_tmp[606543](129264 call _value _mt[232] call_tmp[606536]))
    unknown call_tmp[606550] "expr temp" "maybe param" "maybe type" "temp"
    (606553 'move' call_tmp[606550](129267 call _arrs _mt[232] call_tmp[606543]))
    unknown call_tmp[606557] "expr temp" "maybe param" "maybe type" "temp"
    (606560 'move' call_tmp[606557](129270 call length _mt[232] call_tmp[606550]))
    unknown call_tmp[606562] "expr temp" "maybe param" "maybe type" "temp"
    (606565 'move' call_tmp[606562](129274 call != call_tmp[606557] 1))
    unknown call_tmp[606567] "expr temp" "maybe param" "maybe type" "temp"
    (606570 'move' call_tmp[606567](129317 call _cond_test call_tmp[606562]))
    if call_tmp[606567]
    {
      unknown call_tmp[606572] "expr temp" "maybe param" "maybe type" "temp"
      (606575 'move' call_tmp[606572](129294 call + "cannot call " fnName[129255]))
      unknown call_tmp[606577] "expr temp" "maybe param" "maybe type" "temp"
      (606580 'move' call_tmp[606577](129312 call + call_tmp[606572] " on an array defined over a domain with multiple arrays"))
      (129315 call halt call_tmp[606577])
    }
    (468900 return _void[47])
  }
  function _array[133150](?).isEmpty[129327](arg _mt[133374]:_MT[227], arg this[133372]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[468904] "RVV" "temp"
    unknown call_tmp[606584] "expr temp" "maybe param" "maybe type" "temp"
    (606587 'move' call_tmp[606584](129333 call numElements _mt[232] this[133372]))
    unknown call_tmp[606589] "expr temp" "maybe param" "maybe type" "temp"
    (606592 'move' call_tmp[606589](129337 call == call_tmp[606584] 0))
    (468910 'move' ret[468904](468909 'coerce' call_tmp[606589] bool[10]))
    (468906 return ret[468904])
  }
  { scopeless type
    bool[10]
  }
  function _array[133150](?).head[129347](arg _mt[133378]:_MT[227], arg this[133376]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[468914] "RVV" "temp"
    unknown call_tmp[606596] "expr temp" "maybe param" "maybe type" "temp"
    (606599 'move' call_tmp[606596](129358 call _dom _mt[232] this[133376]))
    unknown call_tmp[606603] "expr temp" "maybe param" "maybe type" "temp"
    (606606 'move' call_tmp[606603](129361 call alignedLow _mt[232] call_tmp[606596]))
    unknown call_tmp[606608] "expr temp" "maybe param" "maybe type" "temp"
    (606611 'move' call_tmp[606608](129365 call this[133376] call_tmp[606603]))
    unknown call_tmp[606615] "expr temp" "maybe param" "maybe type" "temp"
    (606618 'move' call_tmp[606615](468921 call _value _mt[232] this[133376]))
    unknown call_tmp[606622] "expr temp" "maybe param" "maybe type" "temp"
    (606625 'move' call_tmp[606622](468919 call eltType _mt[232] call_tmp[606615]))
    (468926 'move' ret[468914](468925 'coerce' call_tmp[606608] call_tmp[606622]))
    (468916 return ret[468914])
  }
  { scopeless type
    unknown call_tmp[606629] "expr temp" "maybe param" "maybe type" "temp"
    (606632 'move' call_tmp[606629](129350 call _value _mt[232] this[133376]))
    (129353 call eltType _mt[232] call_tmp[606629])
  }
  function _array[133150](?).tail[129374](arg _mt[133382]:_MT[227], arg this[133380]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[468930] "RVV" "temp"
    unknown call_tmp[606638] "expr temp" "maybe param" "maybe type" "temp"
    (606641 'move' call_tmp[606638](129385 call _dom _mt[232] this[133380]))
    unknown call_tmp[606645] "expr temp" "maybe param" "maybe type" "temp"
    (606648 'move' call_tmp[606645](129388 call alignedHigh _mt[232] call_tmp[606638]))
    unknown call_tmp[606650] "expr temp" "maybe param" "maybe type" "temp"
    (606653 'move' call_tmp[606650](129392 call this[133380] call_tmp[606645]))
    unknown call_tmp[606657] "expr temp" "maybe param" "maybe type" "temp"
    (606660 'move' call_tmp[606657](468937 call _value _mt[232] this[133380]))
    unknown call_tmp[606664] "expr temp" "maybe param" "maybe type" "temp"
    (606667 'move' call_tmp[606664](468935 call eltType _mt[232] call_tmp[606657]))
    (468942 'move' ret[468930](468941 'coerce' call_tmp[606650] call_tmp[606664]))
    (468932 return ret[468930])
  }
  { scopeless type
    unknown call_tmp[606671] "expr temp" "maybe param" "maybe type" "temp"
    (606674 'move' call_tmp[606671](129377 call _value _mt[232] this[133380]))
    (129380 call eltType _mt[232] call_tmp[606671])
  }
  function _array[133150](?).resizeAllocRange[129405](arg _mt[133386]:_MT[227], arg this[133384]:_array[133150](?), arg r2[129402]:range[66183](?), arg factor[129408] :
  arrayAsVecGrowthFactor[111851] =
  arrayAsVecGrowthFactor[111851], param arg direction[129412] :
  1 =
  1, param arg grow[129416] :
  1 =
  1) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    unknown ret[468946] "RVV" "temp"
    const r[129426] "const" "ref var"
    unknown call_tmp[606680] "expr temp" "maybe param" "maybe type" "temp"
    (606683 'move' call_tmp[606680](129420 call _value _mt[232] this[133384]))
    unknown call_tmp[606687] "expr temp" "maybe param" "maybe type" "temp"
    (606690 'move' call_tmp[606687](129423 call dataAllocRange _mt[232] call_tmp[606680]))
    (491488 'move' r[129426](491487 'addr of' call_tmp[606687]))
    unknown call_tmp[606694] "maybe param" "maybe type" "temp"
    (606697 'move' call_tmp[606694](129431 call low _mt[232] r[129426]))
    const lo[129434] "const" "insert auto destroy"
    (491490 'init var' lo[129434] call_tmp[606694])
    unknown call_tmp[606701] "maybe param" "maybe type" "temp"
    (606704 'move' call_tmp[606701](129438 call high _mt[232] r[129426]))
    const hi[129441] "const" "insert auto destroy"
    (491492 'init var' hi[129441] call_tmp[606701])
    unknown call_tmp[606708] "maybe param" "maybe type" "temp"
    (606711 'move' call_tmp[606708](129445 call size _mt[232] r[129426]))
    const size[129448] "const" "insert auto destroy"
    (491494 'init var' size[129448] call_tmp[606708])
    unknown call_tmp[606713] "expr temp" "maybe param" "maybe type" "temp"
    (606716 'move' call_tmp[606713](129453 call > grow[129416] 0))
    unknown call_tmp[606718] "expr temp" "maybe param" "maybe type" "temp"
    (606721 'move' call_tmp[606718](129649 call _cond_test call_tmp[606713]))
    if call_tmp[606718]
    {
      unknown call_tmp[606723] "expr temp" "maybe param" "maybe type" "temp"
      (606726 'move' call_tmp[606723](129458 call + size[129448] 1))
      unknown call_tmp[606728] "expr temp" "maybe param" "maybe type" "temp"
      (606731 'move' call_tmp[606728](129463 call * size[129448] factor[129408]))
      unknown call_tmp[606733] "expr temp" "maybe param" "maybe type" "temp"
      (606736 'move' call_tmp[606733](129466 call _cast int(64)[13] call_tmp[606728]))
      unknown call_tmp[606740] "expr temp" "maybe param" "maybe type" "temp"
      (606743 'move' call_tmp[606740](129469 call size _mt[232] r2[129402]))
      unknown call_tmp[606745] "maybe param" "maybe type" "temp"
      (606748 'move' call_tmp[606745](129472 call max call_tmp[606723] call_tmp[606733] call_tmp[606740]))
      const newSize[129473] "const" "insert auto destroy"
      (491496 'init var' newSize[129473] call_tmp[606745])
      unknown call_tmp[606750] "expr temp" "maybe param" "maybe type" "temp"
      (606753 'move' call_tmp[606750](129479 call > direction[129412] 0))
      unknown call_tmp[606755] "expr temp" "maybe param" "maybe type" "temp"
      (606758 'move' call_tmp[606755](129501 call _cond_test call_tmp[606750]))
      if call_tmp[606755]
      {
        unknown call_tmp[606760] "expr temp" "maybe param" "maybe type" "temp"
        (606763 'move' call_tmp[606760](129482 call chpl_build_low_bounded_range lo[129434]))
        unknown call_tmp[606765] "expr temp" "maybe param" "maybe type" "temp"
        (606768 'move' call_tmp[606765](129485 call # call_tmp[606760] newSize[129473]))
        (468951 'move' ret[468946](468950 'deref' call_tmp[606765]))
        gotoReturn _end_resizeAllocRange[468944] _end_resizeAllocRange[468944]
      }
      {
        unknown call_tmp[606770] "expr temp" "maybe param" "maybe type" "temp"
        (606773 'move' call_tmp[606770](129491 call chpl_build_high_bounded_range hi[129441]))
        unknown call_tmp[606775] "expr temp" "maybe param" "maybe type" "temp"
        (606778 'move' call_tmp[606775](129494 call - newSize[129473]))
        unknown call_tmp[606780] "expr temp" "maybe param" "maybe type" "temp"
        (606783 'move' call_tmp[606780](129496 call # call_tmp[606770] call_tmp[606775]))
        (468956 'move' ret[468946](468955 'deref' call_tmp[606780]))
        gotoReturn _end_resizeAllocRange[468944] _end_resizeAllocRange[468944]
      }
    }
    {
      unknown call_tmp[606785] "expr temp" "maybe param" "maybe type" "temp"
      (606788 'move' call_tmp[606785](129508 call - size[129448] 1))
      unknown call_tmp[606790] "expr temp" "maybe param" "maybe type" "temp"
      (606793 'move' call_tmp[606790](129513 call / size[129448] factor[129408]))
      unknown call_tmp[606795] "expr temp" "maybe param" "maybe type" "temp"
      (606798 'move' call_tmp[606795](129516 call _cast int(64)[13] call_tmp[606790]))
      unknown call_tmp[606800] "maybe param" "maybe type" "temp"
      (606803 'move' call_tmp[606800](129518 call min call_tmp[606785] call_tmp[606795]))
      const newSize[129519] "const" "insert auto destroy"
      (491498 'init var' newSize[129519] call_tmp[606800])
      unknown call_tmp[606805] "expr temp" "maybe param" "maybe type" "temp"
      (606808 'move' call_tmp[606805](129525 call > direction[129412] 0))
      unknown call_tmp[606810] "expr temp" "maybe param" "maybe type" "temp"
      (606813 'move' call_tmp[606810](129645 call _cond_test call_tmp[606805]))
      if call_tmp[606810]
      {
        unknown call_tmp[606815] "expr temp" "maybe param" "maybe type" "temp"
        (606818 'move' call_tmp[606815](129528 call chpl_build_low_bounded_range lo[129434]))
        unknown call_tmp[606820] "maybe param" "maybe type" "temp"
        (606823 'move' call_tmp[606820](129531 call # call_tmp[606815] newSize[129519]))
        unknown newRange[129533] "insert auto destroy"
        (491500 'init var' newRange[129533] call_tmp[606820])
        unknown call_tmp[606827] "expr temp" "maybe param" "maybe type" "temp"
        (606830 'move' call_tmp[606827](129538 call high _mt[232] newRange[129533]))
        unknown call_tmp[606834] "expr temp" "maybe param" "maybe type" "temp"
        (606837 'move' call_tmp[606834](129542 call high _mt[232] r2[129402]))
        unknown call_tmp[606839] "expr temp" "maybe param" "maybe type" "temp"
        (606842 'move' call_tmp[606839](129545 call < call_tmp[606827] call_tmp[606834]))
        unknown call_tmp[606844] "expr temp" "maybe param" "maybe type" "temp"
        (606847 'move' call_tmp[606844](129578 call _cond_test call_tmp[606839]))
        if call_tmp[606844]
        {
          unknown call_tmp[606851] "expr temp" "maybe param" "maybe type" "temp"
          (606854 'move' call_tmp[606851](129548 call high _mt[232] r2[129402]))
          unknown call_tmp[606858] "expr temp" "maybe param" "maybe type" "temp"
          (606861 'move' call_tmp[606858](129552 call high _mt[232] newRange[129533]))
          unknown call_tmp[606863] "maybe param" "maybe type" "temp"
          (606866 'move' call_tmp[606863](129555 call - call_tmp[606851] call_tmp[606858]))
          const spaceNeeded[129557] "const" "insert auto destroy"
          (491502 'init var' spaceNeeded[129557] call_tmp[606863])
          unknown call_tmp[606870] "expr temp" "maybe param" "maybe type" "temp"
          (606873 'move' call_tmp[606870](129563 call low _mt[232] newRange[129533]))
          unknown call_tmp[606875] "expr temp" "maybe param" "maybe type" "temp"
          (606878 'move' call_tmp[606875](129567 call + call_tmp[606870] spaceNeeded[129557]))
          unknown call_tmp[606882] "expr temp" "maybe param" "maybe type" "temp"
          (606885 'move' call_tmp[606882](129570 call high _mt[232] r2[129402]))
          unknown call_tmp[606887] "expr temp" "maybe param" "maybe type" "temp"
          (606890 'move' call_tmp[606887](129573 call chpl_build_bounded_range call_tmp[606875] call_tmp[606882]))
          (129575 call = newRange[129533] call_tmp[606887])
        }
        (468961 'move' ret[468946](468960 'deref' newRange[129533]))
        gotoReturn _end_resizeAllocRange[468944] _end_resizeAllocRange[468944]
      }
      {
        unknown call_tmp[606892] "expr temp" "maybe param" "maybe type" "temp"
        (606895 'move' call_tmp[606892](129586 call chpl_build_high_bounded_range hi[129441]))
        unknown call_tmp[606897] "expr temp" "maybe param" "maybe type" "temp"
        (606900 'move' call_tmp[606897](129589 call - newSize[129519]))
        unknown call_tmp[606902] "maybe param" "maybe type" "temp"
        (606905 'move' call_tmp[606902](129591 call # call_tmp[606892] call_tmp[606897]))
        unknown newRange[129593] "insert auto destroy"
        (491504 'init var' newRange[129593] call_tmp[606902])
        unknown call_tmp[606909] "expr temp" "maybe param" "maybe type" "temp"
        (606912 'move' call_tmp[606909](129598 call low _mt[232] newRange[129593]))
        unknown call_tmp[606916] "expr temp" "maybe param" "maybe type" "temp"
        (606919 'move' call_tmp[606916](129602 call low _mt[232] r2[129402]))
        unknown call_tmp[606921] "expr temp" "maybe param" "maybe type" "temp"
        (606924 'move' call_tmp[606921](129605 call > call_tmp[606909] call_tmp[606916]))
        unknown call_tmp[606926] "expr temp" "maybe param" "maybe type" "temp"
        (606929 'move' call_tmp[606926](129638 call _cond_test call_tmp[606921]))
        if call_tmp[606926]
        {
          unknown call_tmp[606933] "expr temp" "maybe param" "maybe type" "temp"
          (606936 'move' call_tmp[606933](129608 call low _mt[232] newRange[129593]))
          unknown call_tmp[606940] "expr temp" "maybe param" "maybe type" "temp"
          (606943 'move' call_tmp[606940](129612 call low _mt[232] r2[129402]))
          unknown call_tmp[606945] "maybe param" "maybe type" "temp"
          (606948 'move' call_tmp[606945](129615 call - call_tmp[606933] call_tmp[606940]))
          const spaceNeeded[129617] "const" "insert auto destroy"
          (491506 'init var' spaceNeeded[129617] call_tmp[606945])
          unknown call_tmp[606952] "expr temp" "maybe param" "maybe type" "temp"
          (606955 'move' call_tmp[606952](129623 call low _mt[232] r2[129402]))
          unknown call_tmp[606959] "expr temp" "maybe param" "maybe type" "temp"
          (606962 'move' call_tmp[606959](129627 call high _mt[232] newRange[129593]))
          unknown call_tmp[606964] "expr temp" "maybe param" "maybe type" "temp"
          (606967 'move' call_tmp[606964](129631 call - call_tmp[606959] spaceNeeded[129617]))
          unknown call_tmp[606969] "expr temp" "maybe param" "maybe type" "temp"
          (606972 'move' call_tmp[606969](129633 call chpl_build_bounded_range call_tmp[606952] call_tmp[606964]))
          (129635 call = newRange[129593] call_tmp[606969])
        }
        (468966 'move' ret[468946](468965 'deref' newRange[129593]))
        gotoReturn _end_resizeAllocRange[468944] _end_resizeAllocRange[468944]
      }
    }
    label _end_resizeAllocRange[468944]
    (468948 return ret[468946])
  }
  function _array[133150](?).reallocateArray[129661](arg _mt[133390]:_MT[227], arg this[133388]:_array[133150](?), arg newRange[129658]:range[66183](?), param arg direction[129664] :
  1 =
  1, arg debugMsg[129683] :
  "reallocateArray" =
  "reallocateArray") : _unknown[43] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    {
      const tmp[129870] "const" "temp"
      unknown call_tmp[606976] "expr temp" "maybe param" "maybe type" "temp"
      (606979 'move' call_tmp[606976](129687 call _value _mt[232] this[133388]))
      unknown call_tmp[606981] "expr temp" "maybe param" "maybe type" "temp"
      (606984 'move' call_tmp[606981](129867 '_wide_get_locale' call_tmp[606976]))
      (129871 'move' tmp[129870](129868 'deref' call_tmp[606981]))
      {
        const check[129705] "const" "insert auto destroy"
        unknown tmp[515191] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[515192] "maybe param" "temp"
        unknown call_tmp[606986] "expr temp" "maybe param" "maybe type" "temp"
        (606989 'move' call_tmp[606986](129692 call > direction[129664] 0))
        (515197 'move' tmp[515192](515195 call _cond_test call_tmp[606986]))
        if tmp[515192]
        {
          unknown tmp[515199] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (515201 'move' tmp[515199](129695 call high _mt[232] newRange[129658]))
          (515206 'move' tmp[515191](515203 '_paramFoldLogical' tmp[515192] tmp[515199]))
        }
        {
          unknown tmp[515208] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (515210 'move' tmp[515208](129699 call low _mt[232] newRange[129658]))
          (515215 'move' tmp[515191](515212 '_paramFoldLogical' tmp[515192] tmp[515208]))
        }
        (491508 'init var' check[129705] tmp[515191])
        unknown call_tmp[606997] "expr temp" "maybe param" "maybe type" "temp"
        (607000 'move' call_tmp[606997](129710 call _value _mt[232] this[133388]))
        unknown call_tmp[607004] "expr temp" "maybe param" "maybe type" "temp"
        (607007 'move' call_tmp[607004](129713 call dataAllocRange _mt[232] call_tmp[606997]))
        unknown call_tmp[607011] "expr temp" "maybe param" "maybe type" "temp"
        (607014 'move' call_tmp[607011](129721 call(129716 call (partial) contains _mt[232] call_tmp[607004]) check[129705]))
        unknown call_tmp[607016] "expr temp" "maybe param" "maybe type" "temp"
        (607019 'move' call_tmp[607016](129722 call ! call_tmp[607011]))
        unknown call_tmp[607021] "expr temp" "maybe param" "maybe type" "temp"
        (607024 'move' call_tmp[607021](129840 call _cond_test call_tmp[607016]))
        if call_tmp[607021]
        {
          unknown call_tmp[607028] "expr temp" "maybe param" "maybe type" "temp"
          (607031 'move' call_tmp[607028](129725 call _value _mt[232] this[133388]))
          unknown call_tmp[607035] "expr temp" "maybe param" "maybe type" "temp"
          (607038 'move' call_tmp[607035](129728 call dataAllocRange _mt[232] call_tmp[607028]))
          unknown call_tmp[607042] "expr temp" "maybe param" "maybe type" "temp"
          (607045 'move' call_tmp[607042](129731 call length _mt[232] call_tmp[607035]))
          unknown call_tmp[607049] "expr temp" "maybe param" "maybe type" "temp"
          (607052 'move' call_tmp[607049](129735 call _dom _mt[232] this[133388]))
          unknown call_tmp[607056] "expr temp" "maybe param" "maybe type" "temp"
          (607059 'move' call_tmp[607056](129738 call numIndices _mt[232] call_tmp[607049]))
          unknown call_tmp[607061] "expr temp" "maybe param" "maybe type" "temp"
          (607064 'move' call_tmp[607061](129741 call < call_tmp[607042] call_tmp[607056]))
          unknown call_tmp[607066] "expr temp" "maybe param" "maybe type" "temp"
          (607069 'move' call_tmp[607066](129770 call _cond_test call_tmp[607061]))
          if call_tmp[607066]
          {
            unknown call_tmp[607073] "expr temp" "maybe param" "maybe type" "temp"
            (607076 'move' call_tmp[607073](129744 call _value _mt[232] this[133388]))
            unknown call_tmp[607080] "expr temp" "maybe param" "maybe type" "temp"
            (607083 'move' call_tmp[607080](129747 call dataAllocRange _mt[232] call_tmp[607073]))
            unknown call_tmp[607087] "expr temp" "maybe param" "maybe type" "temp"
            (607090 'move' call_tmp[607087](129751 call _dom _mt[232] this[133388]))
            unknown call_tmp[607094] "expr temp" "maybe param" "maybe type" "temp"
            (607097 'move' call_tmp[607094](129754 call low _mt[232] call_tmp[607087]))
            unknown call_tmp[607101] "expr temp" "maybe param" "maybe type" "temp"
            (607104 'move' call_tmp[607101](129758 call _dom _mt[232] this[133388]))
            unknown call_tmp[607108] "expr temp" "maybe param" "maybe type" "temp"
            (607111 'move' call_tmp[607108](129761 call high _mt[232] call_tmp[607101]))
            unknown call_tmp[607113] "expr temp" "maybe param" "maybe type" "temp"
            (607116 'move' call_tmp[607113](129764 call chpl_build_bounded_range call_tmp[607094] call_tmp[607108]))
            (129766 call = call_tmp[607080] call_tmp[607113])
          }
          unknown call_tmp[607120] "expr temp" "maybe param" "maybe type" "temp"
          (607123 'move' call_tmp[607120](129776 call _value _mt[232] this[133388]))
          unknown call_tmp[607127] "maybe param" "maybe type" "temp"
          (607130 'move' call_tmp[607127](129779 call dataAllocRange _mt[232] call_tmp[607120]))
          const oldRange[129782] "const" "insert auto destroy"
          (491510 'init var' oldRange[129782] call_tmp[607127])
          unknown call_tmp[607134] "maybe param" "maybe type" "temp"
          (607137 'move' call_tmp[607134](129790 call(353496 call (partial) resizeAllocRange _mt[232] this[133388]) newRange[129658](direction = direction[129664])))
          const nextAllocRange[129791] "const" "insert auto destroy"
          (491512 'init var' nextAllocRange[129791] call_tmp[607134])
          unknown call_tmp[607139] "expr temp" "maybe param" "maybe type" "temp"
          (607142 'move' call_tmp[607139](129822 call _cond_test debugArrayAsVec[111855]))
          if call_tmp[607139]
          {
            (129820 call writeln debugMsg[129683] ": " oldRange[129782] " => " nextAllocRange[129791] " (" newRange[129658] ")")
          }
          unknown call_tmp[607146] "expr temp" "maybe param" "maybe type" "temp"
          (607149 'move' call_tmp[607146](129828 call _value _mt[232] this[133388]))
          unknown call_tmp[607153] "expr temp" "maybe param" "maybe type" "temp"
          (607156 'move' call_tmp[607153](129835 call _build_tuple nextAllocRange[129791]))
          (129838 call(129831 call (partial) dsiReallocate _mt[232] call_tmp[607146]) call_tmp[607153])
        }
        unknown call_tmp[607160] "expr temp" "maybe param" "maybe type" "temp"
        (607163 'move' call_tmp[607160](129845 call _dom _mt[232] this[133388]))
        unknown call_tmp[607167] "expr temp" "maybe param" "maybe type" "temp"
        (607170 'move' call_tmp[607167](129852 call _build_tuple newRange[129658]))
        (129855 call(129848 call (partial) setIndices _mt[232] call_tmp[607160]) call_tmp[607167])
        unknown call_tmp[607174] "expr temp" "maybe param" "maybe type" "temp"
        (607177 'move' call_tmp[607174](129858 call _value _mt[232] this[133388]))
        (129865 call(129861 call (partial) dsiPostReallocate _mt[232] call_tmp[607174]))
      }
    }
    (468970 return _void[47])
  }
  function _array[133150](?).back[129880](arg _mt[133394]:_MT[227], arg this[133392]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[468974] "RVV" "temp"
    unknown tmp[400992] "maybe param" "temp"
    unknown call_tmp[607181] "expr temp" "maybe param" "maybe type" "temp"
    (607184 'move' call_tmp[607181](129885 call isRectangularArr this[133392]))
    (401003 'move' tmp[400992](129886 call ! call_tmp[607181]))
    unknown call_tmp[607186] "expr temp" "maybe param" "maybe type" "temp"
    (607189 'move' call_tmp[607186](401005 call _cond_invalid tmp[400992]))
    if call_tmp[607186]
    {
      (401008 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[515222] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515223] "maybe param" "temp"
    unknown call_tmp[607191] "expr temp" "maybe param" "maybe type" "temp"
    (607194 'move' call_tmp[607191](400993 call isTrue tmp[400992]))
    (515228 'move' tmp[515223](515226 call _cond_test call_tmp[607191]))
    if tmp[515223]
    {
      (515233 'move' tmp[515222](515230 '_paramFoldLogical' tmp[515223] 1))
    }
    {
      unknown tmp[515235] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[607198] "expr temp" "maybe param" "maybe type" "temp"
      (607201 'move' call_tmp[607198](129889 call rank _mt[232] this[133392]))
      unknown call_tmp[607203] "expr temp" "maybe param" "maybe type" "temp"
      (607206 'move' call_tmp[607203](129893 call != call_tmp[607198] 1))
      (515237 'move' tmp[515235](400997 call isTrue call_tmp[607203]))
      (515242 'move' tmp[515222](515239 '_paramFoldLogical' tmp[515223] tmp[515235]))
    }
    unknown call_tmp[607208] "expr temp" "maybe param" "maybe type" "temp"
    (607211 'move' call_tmp[607208](129917 call _cond_test tmp[515222]))
    if call_tmp[607208]
    {
      (129915 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    unknown tmp[401013] "maybe param" "temp"
    (401024 'move' tmp[401013] 1)
    unknown call_tmp[607213] "expr temp" "maybe param" "maybe type" "temp"
    (607216 'move' call_tmp[607213](401026 call _cond_invalid tmp[401013]))
    if call_tmp[607213]
    {
      (401029 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515249] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515250] "maybe param" "temp"
    unknown call_tmp[607218] "expr temp" "maybe param" "maybe type" "temp"
    (607221 'move' call_tmp[607218](401014 call isTrue tmp[401013]))
    (515255 'move' tmp[515250](515253 call _cond_test call_tmp[607218]))
    if tmp[515250]
    {
      unknown tmp[515257] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[607225] "expr temp" "maybe param" "maybe type" "temp"
      (607228 'move' call_tmp[607225](129926 call(353515 call (partial) isEmpty _mt[232] this[133392])))
      (515259 'move' tmp[515257](401017 call isTrue call_tmp[607225]))
      (515264 'move' tmp[515249](515261 '_paramFoldLogical' tmp[515250] tmp[515257]))
    }
    {
      (515269 'move' tmp[515249](515266 '_paramFoldLogical' tmp[515250] 0))
    }
    unknown call_tmp[607230] "expr temp" "maybe param" "maybe type" "temp"
    (607233 'move' call_tmp[607230](129949 call _cond_test tmp[515249]))
    if call_tmp[607230]
    {
      (129947 call halt "back called on an empty array")
    }
    unknown call_tmp[607237] "expr temp" "maybe param" "maybe type" "temp"
    (607240 'move' call_tmp[607237](129956 call _dom _mt[232] this[133392]))
    unknown call_tmp[607244] "expr temp" "maybe param" "maybe type" "temp"
    (607247 'move' call_tmp[607244](129959 call high _mt[232] call_tmp[607237]))
    unknown call_tmp[607249] "expr temp" "maybe param" "maybe type" "temp"
    (607252 'move' call_tmp[607249](129963 call this[133392] call_tmp[607244]))
    (468979 'move' ret[468974](468978 'deref' call_tmp[607249]))
    (468976 return ret[468974])
  }
  function _array[133150](?).push_back[129977](arg _mt[133398]:_MT[227], arg this[133396]:_array[133150](?), in arg val[129974] :
  (129971 call eltType _mt[232] this[133396])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[607256] "expr temp" "maybe param" "maybe type" "temp"
    (607259 'move' call_tmp[607256](130006 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[607256]
    {
      (130004 call compilerWarning "push_back is deprecated - please use list.append")
    }
    unknown call_tmp[607263] "expr temp" "maybe param" "maybe type" "temp"
    (607266 'move' call_tmp[607263](130014 call(353527 call (partial) chpl__isDense1DArray _mt[232] this[133396])))
    unknown call_tmp[607268] "expr temp" "maybe param" "maybe type" "temp"
    (607271 'move' call_tmp[607268](130015 call ! call_tmp[607263]))
    unknown call_tmp[607273] "expr temp" "maybe param" "maybe type" "temp"
    (607276 'move' call_tmp[607273](130037 call _cond_test call_tmp[607268]))
    if call_tmp[607273]
    {
      (130035 call compilerError "push_back() is only supported on dense 1D arrays")
    }
    (130060 call(353531 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133396]) "push_back")
    unknown call_tmp[607282] "expr temp" "maybe param" "maybe type" "temp"
    (607285 'move' call_tmp[607282](130063 call _dom _mt[232] this[133396]))
    unknown call_tmp[607289] "expr temp" "maybe param" "maybe type" "temp"
    (607292 'move' call_tmp[607289](130066 call low _mt[232] call_tmp[607282]))
    unknown call_tmp[607296] "expr temp" "maybe param" "maybe type" "temp"
    (607299 'move' call_tmp[607296](130070 call _dom _mt[232] this[133396]))
    unknown call_tmp[607303] "expr temp" "maybe param" "maybe type" "temp"
    (607306 'move' call_tmp[607303](130073 call high _mt[232] call_tmp[607296]))
    unknown call_tmp[607308] "expr temp" "maybe param" "maybe type" "temp"
    (607311 'move' call_tmp[607308](130077 call + call_tmp[607303] 1))
    unknown call_tmp[607313] "maybe param" "maybe type" "temp"
    (607316 'move' call_tmp[607313](130079 call chpl_build_bounded_range call_tmp[607289] call_tmp[607308]))
    const newRange[130081] "const" "insert auto destroy"
    (491514 'init var' newRange[130081] call_tmp[607313])
    (130104 call(353537 call (partial) reallocateArray _mt[232] this[133396]) newRange[130081](debugMsg = "push_back reallocate"))
    unknown call_tmp[607322] "expr temp" "maybe param" "maybe type" "temp"
    (607325 'move' call_tmp[607322](130108 call _dom _mt[232] this[133396]))
    unknown call_tmp[607329] "expr temp" "maybe param" "maybe type" "temp"
    (607332 'move' call_tmp[607329](130111 call high _mt[232] call_tmp[607322]))
    unknown call_tmp[607334] "expr temp" "maybe param" "maybe type" "temp"
    (607337 'move' call_tmp[607334](130115 call this[133396] call_tmp[607329]))
    (130117 call = call_tmp[607334] val[129974])
    (468981 return _void[47])
  }
  {
    (129983 call <(129980 'lifetime_of' this[133396])(129982 'lifetime_of' val[129974]))
  }
  function _array[133150](?).push_back[130129](arg _mt[133402]:_MT[227], arg this[133400]:_array[133150](?), arg vals[130126]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[607339] "expr temp" "maybe param" "maybe type" "temp"
    (607342 'move' call_tmp[607339](130158 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[607339]
    {
      (130156 call compilerWarning "push_back is deprecated - please use list.extend")
    }
    unknown call_tmp[607346] "expr temp" "maybe param" "maybe type" "temp"
    (607349 'move' call_tmp[607346](130166 call(353549 call (partial) chpl__isDense1DArray _mt[232] this[133400])))
    unknown call_tmp[607351] "expr temp" "maybe param" "maybe type" "temp"
    (607354 'move' call_tmp[607351](130167 call ! call_tmp[607346]))
    unknown call_tmp[607356] "expr temp" "maybe param" "maybe type" "temp"
    (607359 'move' call_tmp[607356](130174 call _cond_test call_tmp[607351]))
    if call_tmp[607356]
    {
      (130172 call compilerError "push_back() is only supported on dense 1D arrays")
    }
    (130182 call(353553 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133400]) "push_back")
    unknown call_tmp[607365] "expr temp" "maybe param" "maybe type" "temp"
    (607368 'move' call_tmp[607365](130185 call _dom _mt[232] this[133400]))
    unknown call_tmp[607372] "expr temp" "maybe param" "maybe type" "temp"
    (607375 'move' call_tmp[607372](130188 call high _mt[232] call_tmp[607365]))
    unknown call_tmp[607377] "expr temp" "maybe param" "maybe type" "temp"
    (607380 'move' call_tmp[607377](130192 call + call_tmp[607372] 1))
    unknown call_tmp[607382] "expr temp" "maybe param" "maybe type" "temp"
    (607385 'move' call_tmp[607382](130194 call chpl_build_low_bounded_range call_tmp[607377]))
    unknown call_tmp[607389] "expr temp" "maybe param" "maybe type" "temp"
    (607392 'move' call_tmp[607389](130197 call size _mt[232] vals[130126]))
    unknown call_tmp[607394] "maybe param" "maybe type" "temp"
    (607397 'move' call_tmp[607394](130200 call # call_tmp[607382] call_tmp[607389]))
    const thisRange[130202] "const" "insert auto destroy"
    (491516 'init var' thisRange[130202] call_tmp[607394])
    unknown call_tmp[607401] "expr temp" "maybe param" "maybe type" "temp"
    (607404 'move' call_tmp[607401](130206 call _dom _mt[232] vals[130126]))
    unknown call_tmp[607408] "maybe param" "maybe type" "temp"
    (607411 'move' call_tmp[607408](130214 call(130209 call (partial) dim _mt[232] call_tmp[607401]) 1))
    const valsRange[130215] "const" "insert auto destroy"
    (491518 'init var' valsRange[130215] call_tmp[607408])
    unknown call_tmp[607415] "expr temp" "maybe param" "maybe type" "temp"
    (607418 'move' call_tmp[607415](130219 call _dom _mt[232] this[133400]))
    unknown call_tmp[607422] "expr temp" "maybe param" "maybe type" "temp"
    (607425 'move' call_tmp[607422](130222 call low _mt[232] call_tmp[607415]))
    unknown call_tmp[607429] "expr temp" "maybe param" "maybe type" "temp"
    (607432 'move' call_tmp[607429](130226 call _dom _mt[232] this[133400]))
    unknown call_tmp[607436] "expr temp" "maybe param" "maybe type" "temp"
    (607439 'move' call_tmp[607436](130229 call high _mt[232] call_tmp[607429]))
    unknown call_tmp[607443] "expr temp" "maybe param" "maybe type" "temp"
    (607446 'move' call_tmp[607443](130233 call size _mt[232] vals[130126]))
    unknown call_tmp[607448] "expr temp" "maybe param" "maybe type" "temp"
    (607451 'move' call_tmp[607448](130236 call + call_tmp[607436] call_tmp[607443]))
    unknown call_tmp[607453] "maybe param" "maybe type" "temp"
    (607456 'move' call_tmp[607453](130238 call chpl_build_bounded_range call_tmp[607422] call_tmp[607448]))
    const newRange[130240] "const" "insert auto destroy"
    (491520 'init var' newRange[130240] call_tmp[607453])
    (130248 call(353563 call (partial) reallocateArray _mt[232] this[133400]) newRange[130240](debugMsg = "push_back reallocate"))
    unknown call_tmp[607460] "expr temp" "maybe param" "maybe type" "temp"
    (607463 'move' call_tmp[607460](130253 call this[133400] thisRange[130202]))
    unknown call_tmp[607465] "expr temp" "maybe param" "maybe type" "temp"
    (607468 'move' call_tmp[607465](130257 call vals[130126] valsRange[130215]))
    (130258 call = call_tmp[607460] call_tmp[607465])
    (468983 return _void[47])
  }
  {
    (130135 call <(130132 'lifetime_of' this[133400])(130134 'lifetime_of' vals[130126]))
  }
  function _array[133150](?).pop_back[130266](arg _mt[133406]:_MT[227], arg this[133404]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[468987] "RVV" "temp"
    unknown call_tmp[607470] "expr temp" "maybe param" "maybe type" "temp"
    (607473 'move' call_tmp[607470](130289 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[607470]
    {
      (130287 call compilerWarning "pop_back is deprecated - please use list.pop")
    }
    unknown call_tmp[607477] "expr temp" "maybe param" "maybe type" "temp"
    (607480 'move' call_tmp[607477](130297 call(353573 call (partial) chpl__isDense1DArray _mt[232] this[133404])))
    unknown call_tmp[607482] "expr temp" "maybe param" "maybe type" "temp"
    (607485 'move' call_tmp[607482](130298 call ! call_tmp[607477]))
    unknown call_tmp[607487] "expr temp" "maybe param" "maybe type" "temp"
    (607490 'move' call_tmp[607487](130320 call _cond_test call_tmp[607482]))
    if call_tmp[607487]
    {
      (130318 call compilerError "pop_back() is only supported on dense 1D arrays")
    }
    (130343 call(353577 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133404]) "pop_back")
    unknown tmp[401034] "maybe param" "temp"
    (401045 'move' tmp[401034] 1)
    unknown call_tmp[607494] "expr temp" "maybe param" "maybe type" "temp"
    (607497 'move' call_tmp[607494](401047 call _cond_invalid tmp[401034]))
    if call_tmp[607494]
    {
      (401050 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515276] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515277] "maybe param" "temp"
    unknown call_tmp[607499] "expr temp" "maybe param" "maybe type" "temp"
    (607502 'move' call_tmp[607499](401035 call isTrue tmp[401034]))
    (515282 'move' tmp[515277](515280 call _cond_test call_tmp[607499]))
    if tmp[515277]
    {
      unknown tmp[515284] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[607506] "expr temp" "maybe param" "maybe type" "temp"
      (607509 'move' call_tmp[607506](130348 call(353582 call (partial) isEmpty _mt[232] this[133404])))
      (515286 'move' tmp[515284](401038 call isTrue call_tmp[607506]))
      (515291 'move' tmp[515276](515288 '_paramFoldLogical' tmp[515277] tmp[515284]))
    }
    {
      (515296 'move' tmp[515276](515293 '_paramFoldLogical' tmp[515277] 0))
    }
    unknown call_tmp[607511] "expr temp" "maybe param" "maybe type" "temp"
    (607514 'move' call_tmp[607511](130371 call _cond_test tmp[515276]))
    if call_tmp[607511]
    {
      (130369 call halt "pop_back called on empty array")
    }
    unknown call_tmp[607518] "expr temp" "maybe param" "maybe type" "temp"
    (607521 'move' call_tmp[607518](130377 call _dom _mt[232] this[133404]))
    unknown call_tmp[607525] "maybe param" "maybe type" "temp"
    (607528 'move' call_tmp[607525](130380 call low _mt[232] call_tmp[607518]))
    const lo[130383] "const" "insert auto destroy"
    (491522 'init var' lo[130383] call_tmp[607525])
    unknown call_tmp[607532] "expr temp" "maybe param" "maybe type" "temp"
    (607535 'move' call_tmp[607532](130387 call _dom _mt[232] this[133404]))
    unknown call_tmp[607539] "expr temp" "maybe param" "maybe type" "temp"
    (607542 'move' call_tmp[607539](130390 call high _mt[232] call_tmp[607532]))
    unknown call_tmp[607544] "maybe param" "maybe type" "temp"
    (607547 'move' call_tmp[607544](130394 call - call_tmp[607539] 1))
    const hi[130396] "const" "insert auto destroy"
    (491524 'init var' hi[130396] call_tmp[607544])
    unknown call_tmp[607549] "maybe param" "maybe type" "temp"
    (607552 'move' call_tmp[607549](130401 call chpl_build_bounded_range lo[130383] hi[130396]))
    const newRange[130403] "const" "insert auto destroy"
    (491526 'init var' newRange[130403] call_tmp[607549])
    unknown call_tmp[607556] "expr temp" "maybe param" "maybe type" "temp"
    (607559 'move' call_tmp[607556](130408 call _dom _mt[232] this[133404]))
    unknown call_tmp[607563] "expr temp" "maybe param" "maybe type" "temp"
    (607566 'move' call_tmp[607563](130411 call high _mt[232] call_tmp[607556]))
    unknown call_tmp[607568] "maybe param" "maybe type" "temp"
    (607571 'move' call_tmp[607568](130415 call this[133404] call_tmp[607563]))
    const ret[130416] "const" "insert auto destroy"
    (491528 'init var' ret[130416] call_tmp[607568])
    {
      const tmp[130595] "const" "temp"
      unknown call_tmp[607575] "expr temp" "maybe param" "maybe type" "temp"
      (607578 'move' call_tmp[607575](130420 call _value _mt[232] this[133404]))
      unknown call_tmp[607580] "expr temp" "maybe param" "maybe type" "temp"
      (607583 'move' call_tmp[607580](130592 '_wide_get_locale' call_tmp[607575]))
      (130596 'move' tmp[130595](130593 'deref' call_tmp[607580]))
      {
        unknown call_tmp[607587] "expr temp" "maybe param" "maybe type" "temp"
        (607590 'move' call_tmp[607587](130424 call _value _mt[232] this[133404]))
        unknown call_tmp[607594] "expr temp" "maybe param" "maybe type" "temp"
        (607597 'move' call_tmp[607594](130427 call dataAllocRange _mt[232] call_tmp[607587]))
        unknown call_tmp[607601] "expr temp" "maybe param" "maybe type" "temp"
        (607604 'move' call_tmp[607601](130430 call length _mt[232] call_tmp[607594]))
        unknown call_tmp[607608] "expr temp" "maybe param" "maybe type" "temp"
        (607611 'move' call_tmp[607608](130434 call _dom _mt[232] this[133404]))
        unknown call_tmp[607615] "expr temp" "maybe param" "maybe type" "temp"
        (607618 'move' call_tmp[607615](130437 call numIndices _mt[232] call_tmp[607608]))
        unknown call_tmp[607620] "expr temp" "maybe param" "maybe type" "temp"
        (607623 'move' call_tmp[607620](130440 call < call_tmp[607601] call_tmp[607615]))
        unknown call_tmp[607625] "expr temp" "maybe param" "maybe type" "temp"
        (607628 'move' call_tmp[607625](130469 call _cond_test call_tmp[607620]))
        if call_tmp[607625]
        {
          unknown call_tmp[607632] "expr temp" "maybe param" "maybe type" "temp"
          (607635 'move' call_tmp[607632](130443 call _value _mt[232] this[133404]))
          unknown call_tmp[607639] "expr temp" "maybe param" "maybe type" "temp"
          (607642 'move' call_tmp[607639](130446 call dataAllocRange _mt[232] call_tmp[607632]))
          unknown call_tmp[607646] "expr temp" "maybe param" "maybe type" "temp"
          (607649 'move' call_tmp[607646](130450 call _dom _mt[232] this[133404]))
          unknown call_tmp[607653] "expr temp" "maybe param" "maybe type" "temp"
          (607656 'move' call_tmp[607653](130453 call low _mt[232] call_tmp[607646]))
          unknown call_tmp[607660] "expr temp" "maybe param" "maybe type" "temp"
          (607663 'move' call_tmp[607660](130457 call _dom _mt[232] this[133404]))
          unknown call_tmp[607667] "expr temp" "maybe param" "maybe type" "temp"
          (607670 'move' call_tmp[607667](130460 call high _mt[232] call_tmp[607660]))
          unknown call_tmp[607672] "expr temp" "maybe param" "maybe type" "temp"
          (607675 'move' call_tmp[607672](130463 call chpl_build_bounded_range call_tmp[607653] call_tmp[607667]))
          (130465 call = call_tmp[607639] call_tmp[607672])
        }
        unknown call_tmp[607679] "expr temp" "maybe param" "maybe type" "temp"
        (607682 'move' call_tmp[607679](130475 call length _mt[232] newRange[130403]))
        unknown call_tmp[607686] "expr temp" "maybe param" "maybe type" "temp"
        (607689 'move' call_tmp[607686](130479 call _value _mt[232] this[133404]))
        unknown call_tmp[607693] "expr temp" "maybe param" "maybe type" "temp"
        (607696 'move' call_tmp[607693](130482 call dataAllocRange _mt[232] call_tmp[607686]))
        unknown call_tmp[607700] "expr temp" "maybe param" "maybe type" "temp"
        (607703 'move' call_tmp[607700](130485 call length _mt[232] call_tmp[607693]))
        unknown call_tmp[607705] "expr temp" "maybe param" "maybe type" "temp"
        (607708 'move' call_tmp[607705](130490 call * arrayAsVecGrowthFactor[111851] arrayAsVecGrowthFactor[111851]))
        unknown call_tmp[607710] "expr temp" "maybe param" "maybe type" "temp"
        (607713 'move' call_tmp[607710](130492 call / call_tmp[607700] call_tmp[607705]))
        unknown call_tmp[607715] "expr temp" "maybe param" "maybe type" "temp"
        (607718 'move' call_tmp[607715](130495 call _cast int(64)[13] call_tmp[607710]))
        unknown call_tmp[607720] "expr temp" "maybe param" "maybe type" "temp"
        (607723 'move' call_tmp[607720](130497 call < call_tmp[607679] call_tmp[607715]))
        unknown call_tmp[607725] "expr temp" "maybe param" "maybe type" "temp"
        (607728 'move' call_tmp[607725](130565 call _cond_test call_tmp[607720]))
        if call_tmp[607725]
        {
          unknown call_tmp[607732] "expr temp" "maybe param" "maybe type" "temp"
          (607735 'move' call_tmp[607732](130500 call _value _mt[232] this[133404]))
          unknown call_tmp[607739] "maybe param" "maybe type" "temp"
          (607742 'move' call_tmp[607739](130503 call dataAllocRange _mt[232] call_tmp[607732]))
          const oldRng[130506] "const" "insert auto destroy"
          (491530 'init var' oldRng[130506] call_tmp[607739])
          unknown call_tmp[607746] "expr temp" "maybe param" "maybe type" "temp"
          (607749 'move' call_tmp[607746](130514 call - 1))
          unknown call_tmp[607751] "maybe param" "maybe type" "temp"
          (607754 'move' call_tmp[607751](130517 call(353603 call (partial) resizeAllocRange _mt[232] this[133404]) newRange[130403](grow = call_tmp[607746])))
          const nextAllocRange[130518] "const" "insert auto destroy"
          (491532 'init var' nextAllocRange[130518] call_tmp[607751])
          unknown call_tmp[607756] "expr temp" "maybe param" "maybe type" "temp"
          (607759 'move' call_tmp[607756](130548 call _cond_test debugArrayAsVec[111855]))
          if call_tmp[607756]
          {
            (130546 call writeln "pop_back reallocate: " oldRng[130506] " => " nextAllocRange[130518] " (" newRange[130403] ")")
          }
          unknown call_tmp[607763] "expr temp" "maybe param" "maybe type" "temp"
          (607766 'move' call_tmp[607763](130554 call _value _mt[232] this[133404]))
          (130563 call(130557 call (partial) dsiReallocate _mt[232] call_tmp[607763]) nextAllocRange[130518] newRange[130403])
        }
        unknown call_tmp[607772] "expr temp" "maybe param" "maybe type" "temp"
        (607775 'move' call_tmp[607772](130570 call _dom _mt[232] this[133404]))
        unknown call_tmp[607779] "expr temp" "maybe param" "maybe type" "temp"
        (607782 'move' call_tmp[607779](130577 call _build_tuple newRange[130403]))
        (130580 call(130573 call (partial) setIndices _mt[232] call_tmp[607772]) call_tmp[607779])
        unknown call_tmp[607786] "expr temp" "maybe param" "maybe type" "temp"
        (607789 'move' call_tmp[607786](130583 call _value _mt[232] this[133404]))
        (130590 call(130586 call (partial) dsiPostReallocate _mt[232] call_tmp[607786]))
      }
    }
    (468992 'move' ret[468987](468991 'deref' ret[130416]))
    (468989 return ret[468987])
  }
  function _array[133150](?).front[130607](arg _mt[133410]:_MT[227], arg this[133408]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[468996] "RVV" "temp"
    unknown tmp[401055] "maybe param" "temp"
    unknown call_tmp[607793] "expr temp" "maybe param" "maybe type" "temp"
    (607796 'move' call_tmp[607793](130612 call isRectangularArr this[133408]))
    (401066 'move' tmp[401055](130613 call ! call_tmp[607793]))
    unknown call_tmp[607798] "expr temp" "maybe param" "maybe type" "temp"
    (607801 'move' call_tmp[607798](401068 call _cond_invalid tmp[401055]))
    if call_tmp[607798]
    {
      (401071 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[515303] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515304] "maybe param" "temp"
    unknown call_tmp[607803] "expr temp" "maybe param" "maybe type" "temp"
    (607806 'move' call_tmp[607803](401056 call isTrue tmp[401055]))
    (515309 'move' tmp[515304](515307 call _cond_test call_tmp[607803]))
    if tmp[515304]
    {
      (515314 'move' tmp[515303](515311 '_paramFoldLogical' tmp[515304] 1))
    }
    {
      unknown tmp[515316] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[607810] "expr temp" "maybe param" "maybe type" "temp"
      (607813 'move' call_tmp[607810](130616 call rank _mt[232] this[133408]))
      unknown call_tmp[607815] "expr temp" "maybe param" "maybe type" "temp"
      (607818 'move' call_tmp[607815](130620 call != call_tmp[607810] 1))
      (515318 'move' tmp[515316](401060 call isTrue call_tmp[607815]))
      (515323 'move' tmp[515303](515320 '_paramFoldLogical' tmp[515304] tmp[515316]))
    }
    unknown call_tmp[607820] "expr temp" "maybe param" "maybe type" "temp"
    (607823 'move' call_tmp[607820](130644 call _cond_test tmp[515303]))
    if call_tmp[607820]
    {
      (130642 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    unknown tmp[401076] "maybe param" "temp"
    (401087 'move' tmp[401076] 1)
    unknown call_tmp[607825] "expr temp" "maybe param" "maybe type" "temp"
    (607828 'move' call_tmp[607825](401089 call _cond_invalid tmp[401076]))
    if call_tmp[607825]
    {
      (401092 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515330] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515331] "maybe param" "temp"
    unknown call_tmp[607830] "expr temp" "maybe param" "maybe type" "temp"
    (607833 'move' call_tmp[607830](401077 call isTrue tmp[401076]))
    (515336 'move' tmp[515331](515334 call _cond_test call_tmp[607830]))
    if tmp[515331]
    {
      unknown tmp[515338] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[607837] "expr temp" "maybe param" "maybe type" "temp"
      (607840 'move' call_tmp[607837](130653 call(353622 call (partial) isEmpty _mt[232] this[133408])))
      (515340 'move' tmp[515338](401080 call isTrue call_tmp[607837]))
      (515345 'move' tmp[515330](515342 '_paramFoldLogical' tmp[515331] tmp[515338]))
    }
    {
      (515350 'move' tmp[515330](515347 '_paramFoldLogical' tmp[515331] 0))
    }
    unknown call_tmp[607842] "expr temp" "maybe param" "maybe type" "temp"
    (607845 'move' call_tmp[607842](130676 call _cond_test tmp[515330]))
    if call_tmp[607842]
    {
      (130674 call halt "front called on an empty array")
    }
    unknown call_tmp[607849] "expr temp" "maybe param" "maybe type" "temp"
    (607852 'move' call_tmp[607849](130683 call _dom _mt[232] this[133408]))
    unknown call_tmp[607856] "expr temp" "maybe param" "maybe type" "temp"
    (607859 'move' call_tmp[607856](130686 call low _mt[232] call_tmp[607849]))
    unknown call_tmp[607861] "expr temp" "maybe param" "maybe type" "temp"
    (607864 'move' call_tmp[607861](130690 call this[133408] call_tmp[607856]))
    (469001 'move' ret[468996](469000 'deref' call_tmp[607861]))
    (468998 return ret[468996])
  }
  function _array[133150](?).push_front[130704](arg _mt[133414]:_MT[227], arg this[133412]:_array[133150](?), in arg val[130701] :
  (130698 call eltType _mt[232] this[133412])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[607868] "expr temp" "maybe param" "maybe type" "temp"
    (607871 'move' call_tmp[607868](130733 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[607868]
    {
      (130731 call compilerWarning "push_front is deprecated - please use list.insert")
    }
    unknown call_tmp[607875] "expr temp" "maybe param" "maybe type" "temp"
    (607878 'move' call_tmp[607875](130741 call(353632 call (partial) chpl__isDense1DArray _mt[232] this[133412])))
    unknown call_tmp[607880] "expr temp" "maybe param" "maybe type" "temp"
    (607883 'move' call_tmp[607880](130742 call ! call_tmp[607875]))
    unknown call_tmp[607885] "expr temp" "maybe param" "maybe type" "temp"
    (607888 'move' call_tmp[607885](130764 call _cond_test call_tmp[607880]))
    if call_tmp[607885]
    {
      (130762 call compilerError "push_front() is only supported on dense 1D arrays")
    }
    (130787 call(353636 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133412]) "push_front")
    unknown call_tmp[607894] "expr temp" "maybe param" "maybe type" "temp"
    (607897 'move' call_tmp[607894](130790 call _dom _mt[232] this[133412]))
    unknown call_tmp[607901] "expr temp" "maybe param" "maybe type" "temp"
    (607904 'move' call_tmp[607901](130793 call low _mt[232] call_tmp[607894]))
    unknown call_tmp[607906] "maybe param" "maybe type" "temp"
    (607909 'move' call_tmp[607906](130797 call - call_tmp[607901] 1))
    const lo[130799] "const" "insert auto destroy"
    (491534 'init var' lo[130799] call_tmp[607906])
    unknown call_tmp[607913] "expr temp" "maybe param" "maybe type" "temp"
    (607916 'move' call_tmp[607913](130803 call _dom _mt[232] this[133412]))
    unknown call_tmp[607920] "maybe param" "maybe type" "temp"
    (607923 'move' call_tmp[607920](130806 call high _mt[232] call_tmp[607913]))
    const hi[130809] "const" "insert auto destroy"
    (491536 'init var' hi[130809] call_tmp[607920])
    unknown call_tmp[607925] "maybe param" "maybe type" "temp"
    (607928 'move' call_tmp[607925](130814 call chpl_build_bounded_range lo[130799] hi[130809]))
    const newRange[130816] "const" "insert auto destroy"
    (491538 'init var' newRange[130816] call_tmp[607925])
    unknown call_tmp[607932] "expr temp" "maybe param" "maybe type" "temp"
    (607935 'move' call_tmp[607932](130823 call - 1))
    (130843 call(353644 call (partial) reallocateArray _mt[232] this[133412]) newRange[130816](direction = call_tmp[607932])(debugMsg = "push_front reallocate"))
    unknown call_tmp[607937] "expr temp" "maybe param" "maybe type" "temp"
    (607940 'move' call_tmp[607937](130848 call this[133412] lo[130799]))
    (130850 call = call_tmp[607937] val[130701])
    (469003 return _void[47])
  }
  {
    (130710 call <(130707 'lifetime_of' this[133412])(130709 'lifetime_of' val[130701]))
  }
  function _array[133150](?).push_front[130862](arg _mt[133418]:_MT[227], arg this[133416]:_array[133150](?), arg vals[130859]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[607942] "expr temp" "maybe param" "maybe type" "temp"
    (607945 'move' call_tmp[607942](130876 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[607942]
    {
      (130874 call compilerWarning "push_front is deprecated - please use list.insert")
    }
    unknown call_tmp[607949] "expr temp" "maybe param" "maybe type" "temp"
    (607952 'move' call_tmp[607949](130884 call(353656 call (partial) chpl__isDense1DArray _mt[232] this[133416])))
    unknown call_tmp[607954] "expr temp" "maybe param" "maybe type" "temp"
    (607957 'move' call_tmp[607954](130885 call ! call_tmp[607949]))
    unknown call_tmp[607959] "expr temp" "maybe param" "maybe type" "temp"
    (607962 'move' call_tmp[607959](130892 call _cond_test call_tmp[607954]))
    if call_tmp[607959]
    {
      (130890 call compilerError "push_front() is only supported on dense 1D arrays")
    }
    (130900 call(353660 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133416]) "push_front")
    unknown call_tmp[607968] "expr temp" "maybe param" "maybe type" "temp"
    (607971 'move' call_tmp[607968](130903 call _dom _mt[232] this[133416]))
    unknown call_tmp[607975] "expr temp" "maybe param" "maybe type" "temp"
    (607978 'move' call_tmp[607975](130906 call low _mt[232] call_tmp[607968]))
    unknown call_tmp[607982] "expr temp" "maybe param" "maybe type" "temp"
    (607985 'move' call_tmp[607982](130910 call size _mt[232] vals[130859]))
    unknown call_tmp[607987] "expr temp" "maybe param" "maybe type" "temp"
    (607990 'move' call_tmp[607987](130913 call - call_tmp[607975] call_tmp[607982]))
    unknown call_tmp[607992] "expr temp" "maybe param" "maybe type" "temp"
    (607995 'move' call_tmp[607992](130915 call chpl_build_low_bounded_range call_tmp[607987]))
    unknown call_tmp[607999] "expr temp" "maybe param" "maybe type" "temp"
    (608002 'move' call_tmp[607999](130918 call size _mt[232] vals[130859]))
    unknown call_tmp[608004] "maybe param" "maybe type" "temp"
    (608007 'move' call_tmp[608004](130921 call # call_tmp[607992] call_tmp[607999]))
    const thisRange[130923] "const" "insert auto destroy"
    (491540 'init var' thisRange[130923] call_tmp[608004])
    unknown call_tmp[608011] "expr temp" "maybe param" "maybe type" "temp"
    (608014 'move' call_tmp[608011](130927 call _dom _mt[232] vals[130859]))
    unknown call_tmp[608018] "maybe param" "maybe type" "temp"
    (608021 'move' call_tmp[608018](130935 call(130930 call (partial) dim _mt[232] call_tmp[608011]) 1))
    const valsRange[130936] "const" "insert auto destroy"
    (491542 'init var' valsRange[130936] call_tmp[608018])
    unknown call_tmp[608025] "expr temp" "maybe param" "maybe type" "temp"
    (608028 'move' call_tmp[608025](130940 call _dom _mt[232] this[133416]))
    unknown call_tmp[608032] "expr temp" "maybe param" "maybe type" "temp"
    (608035 'move' call_tmp[608032](130943 call low _mt[232] call_tmp[608025]))
    unknown call_tmp[608039] "expr temp" "maybe param" "maybe type" "temp"
    (608042 'move' call_tmp[608039](130947 call size _mt[232] vals[130859]))
    unknown call_tmp[608044] "expr temp" "maybe param" "maybe type" "temp"
    (608047 'move' call_tmp[608044](130950 call - call_tmp[608032] call_tmp[608039]))
    unknown call_tmp[608051] "expr temp" "maybe param" "maybe type" "temp"
    (608054 'move' call_tmp[608051](130953 call _dom _mt[232] this[133416]))
    unknown call_tmp[608058] "expr temp" "maybe param" "maybe type" "temp"
    (608061 'move' call_tmp[608058](130956 call high _mt[232] call_tmp[608051]))
    unknown call_tmp[608063] "maybe param" "maybe type" "temp"
    (608066 'move' call_tmp[608063](130959 call chpl_build_bounded_range call_tmp[608044] call_tmp[608058]))
    const newRange[130961] "const" "insert auto destroy"
    (491544 'init var' newRange[130961] call_tmp[608063])
    unknown call_tmp[608070] "expr temp" "maybe param" "maybe type" "temp"
    (608073 'move' call_tmp[608070](130968 call - 1))
    (130973 call(353671 call (partial) reallocateArray _mt[232] this[133416]) newRange[130961](direction = call_tmp[608070])(debugMsg = "push_front reallocate"))
    unknown call_tmp[608075] "expr temp" "maybe param" "maybe type" "temp"
    (608078 'move' call_tmp[608075](130978 call this[133416] thisRange[130923]))
    unknown call_tmp[608080] "expr temp" "maybe param" "maybe type" "temp"
    (608083 'move' call_tmp[608080](130982 call vals[130859] valsRange[130936]))
    (130983 call = call_tmp[608075] call_tmp[608080])
    (469005 return _void[47])
  }
  {
    (130868 call <(130865 'lifetime_of' this[133416])(130867 'lifetime_of' vals[130859]))
  }
  function _array[133150](?).pop_front[130991](arg _mt[133422]:_MT[227], arg this[133420]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[469009] "RVV" "temp"
    unknown call_tmp[608085] "expr temp" "maybe param" "maybe type" "temp"
    (608088 'move' call_tmp[608085](131014 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[608085]
    {
      (131012 call compilerWarning "pop_front is deprecated - please use list.pop")
    }
    unknown call_tmp[608092] "expr temp" "maybe param" "maybe type" "temp"
    (608095 'move' call_tmp[608092](131022 call(353681 call (partial) chpl__isDense1DArray _mt[232] this[133420])))
    unknown call_tmp[608097] "expr temp" "maybe param" "maybe type" "temp"
    (608100 'move' call_tmp[608097](131023 call ! call_tmp[608092]))
    unknown call_tmp[608102] "expr temp" "maybe param" "maybe type" "temp"
    (608105 'move' call_tmp[608102](131045 call _cond_test call_tmp[608097]))
    if call_tmp[608102]
    {
      (131043 call compilerError "pop_front() is only supported on dense 1D arrays")
    }
    (131068 call(353685 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133420]) "pop_front")
    unknown tmp[401097] "maybe param" "temp"
    (401108 'move' tmp[401097] 1)
    unknown call_tmp[608109] "expr temp" "maybe param" "maybe type" "temp"
    (608112 'move' call_tmp[608109](401110 call _cond_invalid tmp[401097]))
    if call_tmp[608109]
    {
      (401113 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515357] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515358] "maybe param" "temp"
    unknown call_tmp[608114] "expr temp" "maybe param" "maybe type" "temp"
    (608117 'move' call_tmp[608114](401098 call isTrue tmp[401097]))
    (515363 'move' tmp[515358](515361 call _cond_test call_tmp[608114]))
    if tmp[515358]
    {
      unknown tmp[515365] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[608121] "expr temp" "maybe param" "maybe type" "temp"
      (608124 'move' call_tmp[608121](131073 call(353690 call (partial) isEmpty _mt[232] this[133420])))
      (515367 'move' tmp[515365](401101 call isTrue call_tmp[608121]))
      (515372 'move' tmp[515357](515369 '_paramFoldLogical' tmp[515358] tmp[515365]))
    }
    {
      (515377 'move' tmp[515357](515374 '_paramFoldLogical' tmp[515358] 0))
    }
    unknown call_tmp[608126] "expr temp" "maybe param" "maybe type" "temp"
    (608129 'move' call_tmp[608126](131096 call _cond_test tmp[515357]))
    if call_tmp[608126]
    {
      (131094 call halt "pop_front called on empty array")
    }
    unknown call_tmp[608133] "expr temp" "maybe param" "maybe type" "temp"
    (608136 'move' call_tmp[608133](131102 call _dom _mt[232] this[133420]))
    unknown call_tmp[608140] "expr temp" "maybe param" "maybe type" "temp"
    (608143 'move' call_tmp[608140](131105 call low _mt[232] call_tmp[608133]))
    unknown call_tmp[608145] "maybe param" "maybe type" "temp"
    (608148 'move' call_tmp[608145](131109 call + call_tmp[608140] 1))
    const lo[131111] "const" "insert auto destroy"
    (491546 'init var' lo[131111] call_tmp[608145])
    unknown call_tmp[608152] "expr temp" "maybe param" "maybe type" "temp"
    (608155 'move' call_tmp[608152](131115 call _dom _mt[232] this[133420]))
    unknown call_tmp[608159] "maybe param" "maybe type" "temp"
    (608162 'move' call_tmp[608159](131118 call high _mt[232] call_tmp[608152]))
    const hi[131121] "const" "insert auto destroy"
    (491548 'init var' hi[131121] call_tmp[608159])
    unknown call_tmp[608164] "maybe param" "maybe type" "temp"
    (608167 'move' call_tmp[608164](131126 call chpl_build_bounded_range lo[131111] hi[131121]))
    const newRange[131128] "const" "insert auto destroy"
    (491550 'init var' newRange[131128] call_tmp[608164])
    unknown call_tmp[608171] "expr temp" "maybe param" "maybe type" "temp"
    (608174 'move' call_tmp[608171](131133 call _dom _mt[232] this[133420]))
    unknown call_tmp[608178] "expr temp" "maybe param" "maybe type" "temp"
    (608181 'move' call_tmp[608178](131136 call low _mt[232] call_tmp[608171]))
    unknown call_tmp[608183] "maybe param" "maybe type" "temp"
    (608186 'move' call_tmp[608183](131140 call this[133420] call_tmp[608178]))
    const ret[131141] "const" "insert auto destroy"
    (491552 'init var' ret[131141] call_tmp[608183])
    {
      const tmp[131324] "const" "temp"
      unknown call_tmp[608190] "expr temp" "maybe param" "maybe type" "temp"
      (608193 'move' call_tmp[608190](131145 call _value _mt[232] this[133420]))
      unknown call_tmp[608195] "expr temp" "maybe param" "maybe type" "temp"
      (608198 'move' call_tmp[608195](131321 '_wide_get_locale' call_tmp[608190]))
      (131325 'move' tmp[131324](131322 'deref' call_tmp[608195]))
      {
        unknown call_tmp[608202] "expr temp" "maybe param" "maybe type" "temp"
        (608205 'move' call_tmp[608202](131149 call _value _mt[232] this[133420]))
        unknown call_tmp[608209] "expr temp" "maybe param" "maybe type" "temp"
        (608212 'move' call_tmp[608209](131152 call dataAllocRange _mt[232] call_tmp[608202]))
        unknown call_tmp[608216] "expr temp" "maybe param" "maybe type" "temp"
        (608219 'move' call_tmp[608216](131155 call length _mt[232] call_tmp[608209]))
        unknown call_tmp[608223] "expr temp" "maybe param" "maybe type" "temp"
        (608226 'move' call_tmp[608223](131159 call _dom _mt[232] this[133420]))
        unknown call_tmp[608230] "expr temp" "maybe param" "maybe type" "temp"
        (608233 'move' call_tmp[608230](131162 call numIndices _mt[232] call_tmp[608223]))
        unknown call_tmp[608235] "expr temp" "maybe param" "maybe type" "temp"
        (608238 'move' call_tmp[608235](131165 call < call_tmp[608216] call_tmp[608230]))
        unknown call_tmp[608240] "expr temp" "maybe param" "maybe type" "temp"
        (608243 'move' call_tmp[608240](131194 call _cond_test call_tmp[608235]))
        if call_tmp[608240]
        {
          unknown call_tmp[608247] "expr temp" "maybe param" "maybe type" "temp"
          (608250 'move' call_tmp[608247](131168 call _value _mt[232] this[133420]))
          unknown call_tmp[608254] "expr temp" "maybe param" "maybe type" "temp"
          (608257 'move' call_tmp[608254](131171 call dataAllocRange _mt[232] call_tmp[608247]))
          unknown call_tmp[608261] "expr temp" "maybe param" "maybe type" "temp"
          (608264 'move' call_tmp[608261](131175 call _dom _mt[232] this[133420]))
          unknown call_tmp[608268] "expr temp" "maybe param" "maybe type" "temp"
          (608271 'move' call_tmp[608268](131178 call low _mt[232] call_tmp[608261]))
          unknown call_tmp[608275] "expr temp" "maybe param" "maybe type" "temp"
          (608278 'move' call_tmp[608275](131182 call _dom _mt[232] this[133420]))
          unknown call_tmp[608282] "expr temp" "maybe param" "maybe type" "temp"
          (608285 'move' call_tmp[608282](131185 call high _mt[232] call_tmp[608275]))
          unknown call_tmp[608287] "expr temp" "maybe param" "maybe type" "temp"
          (608290 'move' call_tmp[608287](131188 call chpl_build_bounded_range call_tmp[608268] call_tmp[608282]))
          (131190 call = call_tmp[608254] call_tmp[608287])
        }
        unknown call_tmp[608294] "expr temp" "maybe param" "maybe type" "temp"
        (608297 'move' call_tmp[608294](131200 call length _mt[232] newRange[131128]))
        unknown call_tmp[608301] "expr temp" "maybe param" "maybe type" "temp"
        (608304 'move' call_tmp[608301](131204 call _value _mt[232] this[133420]))
        unknown call_tmp[608308] "expr temp" "maybe param" "maybe type" "temp"
        (608311 'move' call_tmp[608308](131207 call dataAllocRange _mt[232] call_tmp[608301]))
        unknown call_tmp[608315] "expr temp" "maybe param" "maybe type" "temp"
        (608318 'move' call_tmp[608315](131210 call length _mt[232] call_tmp[608308]))
        unknown call_tmp[608320] "expr temp" "maybe param" "maybe type" "temp"
        (608323 'move' call_tmp[608320](131215 call * arrayAsVecGrowthFactor[111851] arrayAsVecGrowthFactor[111851]))
        unknown call_tmp[608325] "expr temp" "maybe param" "maybe type" "temp"
        (608328 'move' call_tmp[608325](131217 call / call_tmp[608315] call_tmp[608320]))
        unknown call_tmp[608330] "expr temp" "maybe param" "maybe type" "temp"
        (608333 'move' call_tmp[608330](131220 call _cast int(64)[13] call_tmp[608325]))
        unknown call_tmp[608335] "expr temp" "maybe param" "maybe type" "temp"
        (608338 'move' call_tmp[608335](131222 call < call_tmp[608294] call_tmp[608330]))
        unknown call_tmp[608340] "expr temp" "maybe param" "maybe type" "temp"
        (608343 'move' call_tmp[608340](131294 call _cond_test call_tmp[608335]))
        if call_tmp[608340]
        {
          unknown call_tmp[608347] "expr temp" "maybe param" "maybe type" "temp"
          (608350 'move' call_tmp[608347](131225 call _value _mt[232] this[133420]))
          unknown call_tmp[608354] "maybe param" "maybe type" "temp"
          (608357 'move' call_tmp[608354](131228 call dataAllocRange _mt[232] call_tmp[608347]))
          const oldRng[131231] "const" "insert auto destroy"
          (491554 'init var' oldRng[131231] call_tmp[608354])
          unknown call_tmp[608361] "expr temp" "maybe param" "maybe type" "temp"
          (608364 'move' call_tmp[608361](131239 call - 1))
          unknown call_tmp[608366] "expr temp" "maybe param" "maybe type" "temp"
          (608369 'move' call_tmp[608366](131243 call - 1))
          unknown call_tmp[608371] "maybe param" "maybe type" "temp"
          (608374 'move' call_tmp[608371](131246 call(353711 call (partial) resizeAllocRange _mt[232] this[133420]) newRange[131128](direction = call_tmp[608361])(grow = call_tmp[608366])))
          const nextAllocRange[131247] "const" "insert auto destroy"
          (491556 'init var' nextAllocRange[131247] call_tmp[608371])
          unknown call_tmp[608376] "expr temp" "maybe param" "maybe type" "temp"
          (608379 'move' call_tmp[608376](131277 call _cond_test debugArrayAsVec[111855]))
          if call_tmp[608376]
          {
            (131275 call writeln "pop_front reallocate: " oldRng[131231] " => " nextAllocRange[131247] " (" newRange[131128] ")")
          }
          unknown call_tmp[608383] "expr temp" "maybe param" "maybe type" "temp"
          (608386 'move' call_tmp[608383](131283 call _value _mt[232] this[133420]))
          (131292 call(131286 call (partial) dsiReallocate _mt[232] call_tmp[608383]) nextAllocRange[131247] newRange[131128])
        }
        unknown call_tmp[608392] "expr temp" "maybe param" "maybe type" "temp"
        (608395 'move' call_tmp[608392](131299 call _dom _mt[232] this[133420]))
        unknown call_tmp[608399] "expr temp" "maybe param" "maybe type" "temp"
        (608402 'move' call_tmp[608399](131306 call _build_tuple newRange[131128]))
        (131309 call(131302 call (partial) setIndices _mt[232] call_tmp[608392]) call_tmp[608399])
        unknown call_tmp[608406] "expr temp" "maybe param" "maybe type" "temp"
        (608409 'move' call_tmp[608406](131312 call _value _mt[232] this[133420]))
        (131319 call(131315 call (partial) dsiPostReallocate _mt[232] call_tmp[608406]))
      }
    }
    (469014 'move' ret[469009](469013 'deref' ret[131141]))
    (469011 return ret[469009])
  }
  function _array[133150](?).insert[131343](arg _mt[133426]:_MT[227], arg this[133424]:_array[133150](?), arg pos[131340] :
  (131337 call idxType _mt[232] this[133424]), in arg val[131349] :
  (131346 call eltType _mt[232] this[133424])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[608417] "expr temp" "maybe param" "maybe type" "temp"
    (608420 'move' call_tmp[608417](131373 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[608417]
    {
      (131371 call compilerWarning "insert is deprecated - please use list.insert")
    }
    unknown call_tmp[608424] "expr temp" "maybe param" "maybe type" "temp"
    (608427 'move' call_tmp[608424](131381 call(353730 call (partial) chpl__isDense1DArray _mt[232] this[133424])))
    unknown call_tmp[608429] "expr temp" "maybe param" "maybe type" "temp"
    (608432 'move' call_tmp[608429](131382 call ! call_tmp[608424]))
    unknown call_tmp[608434] "expr temp" "maybe param" "maybe type" "temp"
    (608437 'move' call_tmp[608434](131404 call _cond_test call_tmp[608429]))
    if call_tmp[608434]
    {
      (131402 call compilerError "insert() is only supported on dense 1D arrays")
    }
    (131427 call(353734 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133424]) "insert")
    unknown call_tmp[608443] "expr temp" "maybe param" "maybe type" "temp"
    (608446 'move' call_tmp[608443](131430 call _dom _mt[232] this[133424]))
    unknown call_tmp[608450] "maybe param" "maybe type" "temp"
    (608453 'move' call_tmp[608450](131433 call high _mt[232] call_tmp[608443]))
    const prevHigh[131436] "const" "insert auto destroy"
    (491558 'init var' prevHigh[131436] call_tmp[608450])
    unknown call_tmp[608457] "expr temp" "maybe param" "maybe type" "temp"
    (608460 'move' call_tmp[608457](131440 call _dom _mt[232] this[133424]))
    unknown call_tmp[608464] "expr temp" "maybe param" "maybe type" "temp"
    (608467 'move' call_tmp[608464](131443 call low _mt[232] call_tmp[608457]))
    unknown call_tmp[608471] "expr temp" "maybe param" "maybe type" "temp"
    (608474 'move' call_tmp[608471](131447 call _dom _mt[232] this[133424]))
    unknown call_tmp[608478] "expr temp" "maybe param" "maybe type" "temp"
    (608481 'move' call_tmp[608478](131450 call high _mt[232] call_tmp[608471]))
    unknown call_tmp[608483] "expr temp" "maybe param" "maybe type" "temp"
    (608486 'move' call_tmp[608483](131454 call + call_tmp[608478] 1))
    unknown call_tmp[608488] "maybe param" "maybe type" "temp"
    (608491 'move' call_tmp[608488](131456 call chpl_build_bounded_range call_tmp[608464] call_tmp[608483]))
    const newRange[131458] "const" "insert auto destroy"
    (491560 'init var' newRange[131458] call_tmp[608488])
    unknown tmp[401118] "maybe param" "temp"
    (401129 'move' tmp[401118] 1)
    unknown call_tmp[608493] "expr temp" "maybe param" "maybe type" "temp"
    (608496 'move' call_tmp[608493](401131 call _cond_invalid tmp[401118]))
    if call_tmp[608493]
    {
      (401134 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515384] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515385] "maybe param" "temp"
    unknown call_tmp[608498] "expr temp" "maybe param" "maybe type" "temp"
    (608501 'move' call_tmp[608498](401119 call isTrue tmp[401118]))
    (515390 'move' tmp[515385](515388 call _cond_test call_tmp[608498]))
    if tmp[515385]
    {
      unknown tmp[515392] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[608505] "expr temp" "maybe param" "maybe type" "temp"
      (608508 'move' call_tmp[608505](131468 call(131463 call (partial) contains _mt[232] newRange[131458]) pos[131340]))
      unknown call_tmp[608510] "expr temp" "maybe param" "maybe type" "temp"
      (608513 'move' call_tmp[608510](131469 call ! call_tmp[608505]))
      (515394 'move' tmp[515392](401122 call isTrue call_tmp[608510]))
      (515399 'move' tmp[515384](515396 '_paramFoldLogical' tmp[515385] tmp[515392]))
    }
    {
      (515404 'move' tmp[515384](515401 '_paramFoldLogical' tmp[515385] 0))
    }
    unknown call_tmp[608515] "expr temp" "maybe param" "maybe type" "temp"
    (608518 'move' call_tmp[608515](131510 call _cond_test tmp[515384]))
    if call_tmp[608515]
    {
      (131508 call halt "insert at position " pos[131340] " out of bounds")
    }
    (131535 call(353745 call (partial) reallocateArray _mt[232] this[133424]) newRange[131458](debugMsg = "insert reallocate"))
    {
      unknown _indexOfInterest[131561] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131562] "expr temp" "temp"
      unknown call_tmp[608522] "expr temp" "maybe param" "maybe type" "temp"
      (608525 'move' call_tmp[608522](131578 call - 1))
      unknown call_tmp[608527] "expr temp" "maybe param" "maybe type" "temp"
      (608530 'move' call_tmp[608527](131582 call chpl_direct_range_iter pos[131340] prevHigh[131436] call_tmp[608522]))
      (131571 'move' _iterator[131562](131569 call _getIterator call_tmp[608527]))
      Defer
      {
        {
          (131598 call _freeIterator _iterator[131562])
        }
      }
      { scopeless type
        (131587 'move' _indexOfInterest[131561](131584 call iteratorIndex _iterator[131562]))
      }
      ForLoop
      {
        unknown i[131591] "index var" "insert auto destroy"
        (131593 'move' i[131591] _indexOfInterest[131561])
        unknown call_tmp[608532] "expr temp" "maybe param" "maybe type" "temp"
        (608535 'move' call_tmp[608532](131550 call + i[131591] 1))
        unknown call_tmp[608537] "expr temp" "maybe param" "maybe type" "temp"
        (608540 'move' call_tmp[608537](131553 call this[133424] call_tmp[608532]))
        unknown call_tmp[608542] "expr temp" "maybe param" "maybe type" "temp"
        (608545 'move' call_tmp[608542](131557 call this[133424] i[131591]))
        (131558 call = call_tmp[608537] call_tmp[608542])
        label _continueLabel[131566]
        _indexOfInterest[131561]
        _iterator[131562]
      }
      label _breakLabel[131567]
    }
    unknown call_tmp[608547] "expr temp" "maybe param" "maybe type" "temp"
    (608550 'move' call_tmp[608547](131608 call this[133424] pos[131340]))
    (131610 call = call_tmp[608547] val[131349])
    (469016 return _void[47])
  }
  function _array[133150](?).insert[131624](arg _mt[133430]:_MT[227], arg this[133428]:_array[133150](?), arg pos[131621] :
  (131618 call idxType _mt[232] this[133428]), arg vals[131629]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[608554] "expr temp" "maybe param" "maybe type" "temp"
    (608557 'move' call_tmp[608554](131638 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[608554]
    {
      (131636 call compilerWarning "insert is deprecated - please use list.insert")
    }
    unknown call_tmp[608561] "expr temp" "maybe param" "maybe type" "temp"
    (608564 'move' call_tmp[608561](131646 call(353761 call (partial) chpl__isDense1DArray _mt[232] this[133428])))
    unknown call_tmp[608566] "expr temp" "maybe param" "maybe type" "temp"
    (608569 'move' call_tmp[608566](131647 call ! call_tmp[608561]))
    unknown call_tmp[608571] "expr temp" "maybe param" "maybe type" "temp"
    (608574 'move' call_tmp[608571](131654 call _cond_test call_tmp[608566]))
    if call_tmp[608571]
    {
      (131652 call compilerError "insert() is only supported on dense 1D arrays")
    }
    (131662 call(353765 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133428]) "insert")
    unknown call_tmp[608580] "maybe param" "maybe type" "temp"
    (608583 'move' call_tmp[608580](131665 call size _mt[232] vals[131629]))
    const shift[131668] "const" "insert auto destroy"
    (491562 'init var' shift[131668] call_tmp[608580])
    unknown call_tmp[608587] "expr temp" "maybe param" "maybe type" "temp"
    (608590 'move' call_tmp[608587](131673 call _dom _mt[232] this[133428]))
    unknown call_tmp[608594] "expr temp" "maybe param" "maybe type" "temp"
    (608597 'move' call_tmp[608594](131676 call high _mt[232] call_tmp[608587]))
    unknown call_tmp[608599] "maybe param" "maybe type" "temp"
    (608602 'move' call_tmp[608599](131679 call chpl_build_bounded_range pos[131621] call_tmp[608594]))
    const shiftRange[131681] "const" "insert auto destroy"
    (491564 'init var' shiftRange[131681] call_tmp[608599])
    unknown call_tmp[608606] "expr temp" "maybe param" "maybe type" "temp"
    (608609 'move' call_tmp[608606](131685 call _dom _mt[232] this[133428]))
    unknown call_tmp[608613] "expr temp" "maybe param" "maybe type" "temp"
    (608616 'move' call_tmp[608613](131688 call low _mt[232] call_tmp[608606]))
    unknown call_tmp[608620] "expr temp" "maybe param" "maybe type" "temp"
    (608623 'move' call_tmp[608620](131692 call _dom _mt[232] this[133428]))
    unknown call_tmp[608627] "expr temp" "maybe param" "maybe type" "temp"
    (608630 'move' call_tmp[608627](131695 call high _mt[232] call_tmp[608620]))
    unknown call_tmp[608634] "expr temp" "maybe param" "maybe type" "temp"
    (608637 'move' call_tmp[608634](131699 call size _mt[232] vals[131629]))
    unknown call_tmp[608639] "expr temp" "maybe param" "maybe type" "temp"
    (608642 'move' call_tmp[608639](131702 call + call_tmp[608627] call_tmp[608634]))
    unknown call_tmp[608644] "maybe param" "maybe type" "temp"
    (608647 'move' call_tmp[608644](131704 call chpl_build_bounded_range call_tmp[608613] call_tmp[608639]))
    const newRange[131706] "const" "insert auto destroy"
    (491566 'init var' newRange[131706] call_tmp[608644])
    unknown call_tmp[608651] "expr temp" "maybe param" "maybe type" "temp"
    (608654 'move' call_tmp[608651](131710 call _dom _mt[232] this[133428]))
    unknown call_tmp[608658] "expr temp" "maybe param" "maybe type" "temp"
    (608661 'move' call_tmp[608658](131713 call low _mt[232] call_tmp[608651]))
    unknown call_tmp[608665] "expr temp" "maybe param" "maybe type" "temp"
    (608668 'move' call_tmp[608665](131717 call _dom _mt[232] this[133428]))
    unknown call_tmp[608672] "expr temp" "maybe param" "maybe type" "temp"
    (608675 'move' call_tmp[608672](131720 call high _mt[232] call_tmp[608665]))
    unknown call_tmp[608677] "expr temp" "maybe param" "maybe type" "temp"
    (608680 'move' call_tmp[608677](131724 call + call_tmp[608672] 1))
    unknown call_tmp[608682] "maybe param" "maybe type" "temp"
    (608685 'move' call_tmp[608682](131726 call chpl_build_bounded_range call_tmp[608658] call_tmp[608677]))
    const validInsertRange[131728] "const" "insert auto destroy"
    (491568 'init var' validInsertRange[131728] call_tmp[608682])
    unknown tmp[401139] "maybe param" "temp"
    (401150 'move' tmp[401139] 1)
    unknown call_tmp[608687] "expr temp" "maybe param" "maybe type" "temp"
    (608690 'move' call_tmp[608687](401152 call _cond_invalid tmp[401139]))
    if call_tmp[608687]
    {
      (401155 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515411] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515412] "maybe param" "temp"
    unknown call_tmp[608692] "expr temp" "maybe param" "maybe type" "temp"
    (608695 'move' call_tmp[608692](401140 call isTrue tmp[401139]))
    (515417 'move' tmp[515412](515415 call _cond_test call_tmp[608692]))
    if tmp[515412]
    {
      unknown tmp[515419] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[608699] "expr temp" "maybe param" "maybe type" "temp"
      (608702 'move' call_tmp[608699](131738 call(131733 call (partial) contains _mt[232] validInsertRange[131728]) pos[131621]))
      unknown call_tmp[608704] "expr temp" "maybe param" "maybe type" "temp"
      (608707 'move' call_tmp[608704](131739 call ! call_tmp[608699]))
      (515421 'move' tmp[515419](401143 call isTrue call_tmp[608704]))
      (515426 'move' tmp[515411](515423 '_paramFoldLogical' tmp[515412] tmp[515419]))
    }
    {
      (515431 'move' tmp[515411](515428 '_paramFoldLogical' tmp[515412] 0))
    }
    unknown call_tmp[608709] "expr temp" "maybe param" "maybe type" "temp"
    (608712 'move' call_tmp[608709](131750 call _cond_test tmp[515411]))
    if call_tmp[608709]
    {
      (131748 call halt "insert at position " pos[131621] " out of bounds")
    }
    (131760 call(353781 call (partial) reallocateArray _mt[232] this[133428]) newRange[131706](debugMsg = "insert reallocate"))
    {
      unknown _indexOfInterest[131783] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131784] "expr temp" "temp"
      unknown call_tmp[608716] "expr temp" "maybe param" "maybe type" "temp"
      (608719 'move' call_tmp[608716](131765 call - 1))
      unknown call_tmp[608721] "expr temp" "maybe param" "maybe type" "temp"
      (608724 'move' call_tmp[608721](131767 call chpl_by shiftRange[131681] call_tmp[608716]))
      (131793 'move' _iterator[131784](131791 call _getIterator call_tmp[608721]))
      Defer
      {
        {
          (131813 call _freeIterator _iterator[131784])
        }
      }
      { scopeless type
        (131802 'move' _indexOfInterest[131783](131799 call iteratorIndex _iterator[131784]))
      }
      ForLoop
      {
        unknown i[131806] "index var" "insert auto destroy"
        (131808 'move' i[131806] _indexOfInterest[131783])
        unknown call_tmp[608726] "expr temp" "maybe param" "maybe type" "temp"
        (608729 'move' call_tmp[608726](131772 call + i[131806] shift[131668]))
        unknown call_tmp[608731] "expr temp" "maybe param" "maybe type" "temp"
        (608734 'move' call_tmp[608731](131775 call this[133428] call_tmp[608726]))
        unknown call_tmp[608736] "expr temp" "maybe param" "maybe type" "temp"
        (608739 'move' call_tmp[608736](131779 call this[133428] i[131806]))
        (131780 call = call_tmp[608731] call_tmp[608736])
        label _continueLabel[131788]
        _indexOfInterest[131783]
        _iterator[131784]
      }
      label _breakLabel[131789]
    }
    unknown call_tmp[608741] "expr temp" "maybe param" "maybe type" "temp"
    (608744 'move' call_tmp[608741](131822 call chpl_build_low_bounded_range pos[131621]))
    unknown call_tmp[608746] "expr temp" "maybe param" "maybe type" "temp"
    (608749 'move' call_tmp[608746](131825 call # call_tmp[608741] shift[131668]))
    unknown call_tmp[608751] "expr temp" "maybe param" "maybe type" "temp"
    (608754 'move' call_tmp[608751](131828 call this[133428] call_tmp[608746]))
    (131830 call = call_tmp[608751] vals[131629])
    (469018 return _void[47])
  }
  function _array[133150](?).remove[131844](arg _mt[133434]:_MT[227], arg this[133432]:_array[133150](?), arg pos[131841] :
  (131838 call idxType _mt[232] this[133432])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[608758] "expr temp" "maybe param" "maybe type" "temp"
    (608761 'move' call_tmp[608758](131867 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[608758]
    {
      (131865 call compilerWarning "remove is deprecated - please use list.pop")
    }
    unknown call_tmp[608765] "expr temp" "maybe param" "maybe type" "temp"
    (608768 'move' call_tmp[608765](131875 call(353798 call (partial) chpl__isDense1DArray _mt[232] this[133432])))
    unknown call_tmp[608770] "expr temp" "maybe param" "maybe type" "temp"
    (608773 'move' call_tmp[608770](131876 call ! call_tmp[608765]))
    unknown call_tmp[608775] "expr temp" "maybe param" "maybe type" "temp"
    (608778 'move' call_tmp[608775](131898 call _cond_test call_tmp[608770]))
    if call_tmp[608775]
    {
      (131896 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (131919 call(353802 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133432]) "remove")
    unknown tmp[401160] "maybe param" "temp"
    (401171 'move' tmp[401160] 1)
    unknown call_tmp[608782] "expr temp" "maybe param" "maybe type" "temp"
    (608785 'move' call_tmp[608782](401173 call _cond_invalid tmp[401160]))
    if call_tmp[608782]
    {
      (401176 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515438] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515439] "maybe param" "temp"
    unknown call_tmp[608787] "expr temp" "maybe param" "maybe type" "temp"
    (608790 'move' call_tmp[608787](401161 call isTrue tmp[401160]))
    (515444 'move' tmp[515439](515442 call _cond_test call_tmp[608787]))
    if tmp[515439]
    {
      unknown tmp[515446] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[608794] "expr temp" "maybe param" "maybe type" "temp"
      (608797 'move' call_tmp[608794](131923 call _dom _mt[232] this[133432]))
      unknown call_tmp[608801] "expr temp" "maybe param" "maybe type" "temp"
      (608804 'move' call_tmp[608801](131931 call(131926 call (partial) contains _mt[232] call_tmp[608794]) pos[131841]))
      unknown call_tmp[608806] "expr temp" "maybe param" "maybe type" "temp"
      (608809 'move' call_tmp[608806](131932 call ! call_tmp[608801]))
      (515448 'move' tmp[515446](401164 call isTrue call_tmp[608806]))
      (515453 'move' tmp[515438](515450 '_paramFoldLogical' tmp[515439] tmp[515446]))
    }
    {
      (515458 'move' tmp[515438](515455 '_paramFoldLogical' tmp[515439] 0))
    }
    unknown call_tmp[608811] "expr temp" "maybe param" "maybe type" "temp"
    (608814 'move' call_tmp[608811](131958 call _cond_test tmp[515438]))
    if call_tmp[608811]
    {
      (131956 call halt "remove at position " pos[131841] " out of bounds")
    }
    unknown call_tmp[608818] "expr temp" "maybe param" "maybe type" "temp"
    (608821 'move' call_tmp[608818](131964 call _dom _mt[232] this[133432]))
    unknown call_tmp[608825] "maybe param" "maybe type" "temp"
    (608828 'move' call_tmp[608825](131967 call low _mt[232] call_tmp[608818]))
    const lo[131970] "const" "insert auto destroy"
    (491570 'init var' lo[131970] call_tmp[608825])
    unknown call_tmp[608832] "expr temp" "maybe param" "maybe type" "temp"
    (608835 'move' call_tmp[608832](131974 call _dom _mt[232] this[133432]))
    unknown call_tmp[608839] "expr temp" "maybe param" "maybe type" "temp"
    (608842 'move' call_tmp[608839](131977 call high _mt[232] call_tmp[608832]))
    unknown call_tmp[608844] "maybe param" "maybe type" "temp"
    (608847 'move' call_tmp[608844](131981 call - call_tmp[608839] 1))
    const hi[131983] "const" "insert auto destroy"
    (491572 'init var' hi[131983] call_tmp[608844])
    unknown call_tmp[608849] "maybe param" "maybe type" "temp"
    (608852 'move' call_tmp[608849](131988 call chpl_build_bounded_range lo[131970] hi[131983]))
    const newRange[131990] "const" "insert auto destroy"
    (491574 'init var' newRange[131990] call_tmp[608849])
    {
      unknown _indexOfInterest[132013] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132014] "expr temp" "temp"
      unknown call_tmp[608854] "expr temp" "maybe param" "maybe type" "temp"
      (608857 'move' call_tmp[608854](132028 call chpl_direct_range_iter pos[131841] hi[131983] 1))
      (132023 'move' _iterator[132014](132021 call _getIterator call_tmp[608854]))
      Defer
      {
        {
          (132044 call _freeIterator _iterator[132014])
        }
      }
      { scopeless type
        (132033 'move' _indexOfInterest[132013](132030 call iteratorIndex _iterator[132014]))
      }
      ForLoop
      {
        unknown i[132037] "index var" "insert auto destroy"
        (132039 'move' i[132037] _indexOfInterest[132013])
        {
          unknown call_tmp[608859] "expr temp" "maybe param" "maybe type" "temp"
          (608862 'move' call_tmp[608859](132001 call this[133432] i[132037]))
          unknown call_tmp[608864] "expr temp" "maybe param" "maybe type" "temp"
          (608867 'move' call_tmp[608864](132005 call + i[132037] 1))
          unknown call_tmp[608869] "expr temp" "maybe param" "maybe type" "temp"
          (608872 'move' call_tmp[608869](132008 call this[133432] call_tmp[608864]))
          (132009 call = call_tmp[608859] call_tmp[608869])
        }
        label _continueLabel[132018]
        _indexOfInterest[132013]
        _iterator[132014]
      }
      label _breakLabel[132019]
    }
    {
      const tmp[132185] "const" "temp"
      unknown call_tmp[608876] "expr temp" "maybe param" "maybe type" "temp"
      (608879 'move' call_tmp[608876](132052 call _value _mt[232] this[133432]))
      unknown call_tmp[608881] "expr temp" "maybe param" "maybe type" "temp"
      (608884 'move' call_tmp[608881](132182 '_wide_get_locale' call_tmp[608876]))
      (132186 'move' tmp[132185](132183 'deref' call_tmp[608881]))
      {
        unknown call_tmp[608888] "expr temp" "maybe param" "maybe type" "temp"
        (608891 'move' call_tmp[608888](132056 call _value _mt[232] this[133432]))
        unknown call_tmp[608895] "expr temp" "maybe param" "maybe type" "temp"
        (608898 'move' call_tmp[608895](132059 call dataAllocRange _mt[232] call_tmp[608888]))
        unknown call_tmp[608902] "expr temp" "maybe param" "maybe type" "temp"
        (608905 'move' call_tmp[608902](132062 call length _mt[232] call_tmp[608895]))
        unknown call_tmp[608909] "expr temp" "maybe param" "maybe type" "temp"
        (608912 'move' call_tmp[608909](132066 call _dom _mt[232] this[133432]))
        unknown call_tmp[608916] "expr temp" "maybe param" "maybe type" "temp"
        (608919 'move' call_tmp[608916](132069 call numIndices _mt[232] call_tmp[608909]))
        unknown call_tmp[608921] "expr temp" "maybe param" "maybe type" "temp"
        (608924 'move' call_tmp[608921](132072 call < call_tmp[608902] call_tmp[608916]))
        unknown call_tmp[608926] "expr temp" "maybe param" "maybe type" "temp"
        (608929 'move' call_tmp[608926](132101 call _cond_test call_tmp[608921]))
        if call_tmp[608926]
        {
          unknown call_tmp[608933] "expr temp" "maybe param" "maybe type" "temp"
          (608936 'move' call_tmp[608933](132075 call _value _mt[232] this[133432]))
          unknown call_tmp[608940] "expr temp" "maybe param" "maybe type" "temp"
          (608943 'move' call_tmp[608940](132078 call dataAllocRange _mt[232] call_tmp[608933]))
          unknown call_tmp[608947] "expr temp" "maybe param" "maybe type" "temp"
          (608950 'move' call_tmp[608947](132082 call _dom _mt[232] this[133432]))
          unknown call_tmp[608954] "expr temp" "maybe param" "maybe type" "temp"
          (608957 'move' call_tmp[608954](132085 call low _mt[232] call_tmp[608947]))
          unknown call_tmp[608961] "expr temp" "maybe param" "maybe type" "temp"
          (608964 'move' call_tmp[608961](132089 call _dom _mt[232] this[133432]))
          unknown call_tmp[608968] "expr temp" "maybe param" "maybe type" "temp"
          (608971 'move' call_tmp[608968](132092 call high _mt[232] call_tmp[608961]))
          unknown call_tmp[608973] "expr temp" "maybe param" "maybe type" "temp"
          (608976 'move' call_tmp[608973](132095 call chpl_build_bounded_range call_tmp[608954] call_tmp[608968]))
          (132097 call = call_tmp[608940] call_tmp[608973])
        }
        unknown call_tmp[608980] "expr temp" "maybe param" "maybe type" "temp"
        (608983 'move' call_tmp[608980](132107 call length _mt[232] newRange[131990]))
        unknown call_tmp[608987] "expr temp" "maybe param" "maybe type" "temp"
        (608990 'move' call_tmp[608987](132111 call _value _mt[232] this[133432]))
        unknown call_tmp[608994] "expr temp" "maybe param" "maybe type" "temp"
        (608997 'move' call_tmp[608994](132114 call dataAllocRange _mt[232] call_tmp[608987]))
        unknown call_tmp[609001] "expr temp" "maybe param" "maybe type" "temp"
        (609004 'move' call_tmp[609001](132117 call length _mt[232] call_tmp[608994]))
        unknown call_tmp[609006] "expr temp" "maybe param" "maybe type" "temp"
        (609009 'move' call_tmp[609006](132122 call * arrayAsVecGrowthFactor[111851] arrayAsVecGrowthFactor[111851]))
        unknown call_tmp[609011] "expr temp" "maybe param" "maybe type" "temp"
        (609014 'move' call_tmp[609011](132124 call / call_tmp[609001] call_tmp[609006]))
        unknown call_tmp[609016] "expr temp" "maybe param" "maybe type" "temp"
        (609019 'move' call_tmp[609016](132127 call _cast int(64)[13] call_tmp[609011]))
        unknown call_tmp[609021] "expr temp" "maybe param" "maybe type" "temp"
        (609024 'move' call_tmp[609021](132129 call < call_tmp[608980] call_tmp[609016]))
        unknown call_tmp[609026] "expr temp" "maybe param" "maybe type" "temp"
        (609029 'move' call_tmp[609026](132155 call _cond_test call_tmp[609021]))
        if call_tmp[609026]
        {
          unknown call_tmp[609033] "expr temp" "maybe param" "maybe type" "temp"
          (609036 'move' call_tmp[609033](132135 call - 1))
          unknown call_tmp[609038] "maybe param" "maybe type" "temp"
          (609041 'move' call_tmp[609038](132138 call(353830 call (partial) resizeAllocRange _mt[232] this[133432]) newRange[131990](grow = call_tmp[609033])))
          const nextAllocRange[132139] "const" "insert auto destroy"
          (491576 'init var' nextAllocRange[132139] call_tmp[609038])
          unknown call_tmp[609045] "expr temp" "maybe param" "maybe type" "temp"
          (609048 'move' call_tmp[609045](132144 call _value _mt[232] this[133432]))
          (132153 call(132147 call (partial) dsiReallocate _mt[232] call_tmp[609045]) nextAllocRange[132139] newRange[131990])
        }
        unknown call_tmp[609054] "expr temp" "maybe param" "maybe type" "temp"
        (609057 'move' call_tmp[609054](132160 call _dom _mt[232] this[133432]))
        unknown call_tmp[609061] "expr temp" "maybe param" "maybe type" "temp"
        (609064 'move' call_tmp[609061](132167 call _build_tuple newRange[131990]))
        (132170 call(132163 call (partial) setIndices _mt[232] call_tmp[609054]) call_tmp[609061])
        unknown call_tmp[609068] "expr temp" "maybe param" "maybe type" "temp"
        (609071 'move' call_tmp[609068](132173 call _value _mt[232] this[133432]))
        (132180 call(132176 call (partial) dsiPostReallocate _mt[232] call_tmp[609068]))
      }
    }
    (469020 return _void[47])
  }
  function _array[133150](?).remove[132201](arg _mt[133438]:_MT[227], arg this[133436]:_array[133150](?), arg pos[132198] :
  (132195 call idxType _mt[232] this[133436]), arg count[132207] :
  (132204 call idxType _mt[232] this[133436])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[609079] "expr temp" "maybe param" "maybe type" "temp"
    (609082 'move' call_tmp[609079](132216 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[609079]
    {
      (132214 call compilerWarning "remove is deprecated - please use list.pop")
    }
    unknown call_tmp[609086] "expr temp" "maybe param" "maybe type" "temp"
    (609089 'move' call_tmp[609086](132224 call(353844 call (partial) chpl__isDense1DArray _mt[232] this[133436])))
    unknown call_tmp[609091] "expr temp" "maybe param" "maybe type" "temp"
    (609094 'move' call_tmp[609091](132225 call ! call_tmp[609086]))
    unknown call_tmp[609096] "expr temp" "maybe param" "maybe type" "temp"
    (609099 'move' call_tmp[609096](132232 call _cond_test call_tmp[609091]))
    if call_tmp[609096]
    {
      (132230 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (132255 call(353848 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133436]) "remove count")
    unknown call_tmp[609105] "expr temp" "maybe param" "maybe type" "temp"
    (609108 'move' call_tmp[609105](132258 call _dom _mt[232] this[133436]))
    unknown call_tmp[609112] "maybe param" "maybe type" "temp"
    (609115 'move' call_tmp[609112](132261 call low _mt[232] call_tmp[609105]))
    const lo[132264] "const" "insert auto destroy"
    (491578 'init var' lo[132264] call_tmp[609112])
    unknown call_tmp[609119] "expr temp" "maybe param" "maybe type" "temp"
    (609122 'move' call_tmp[609119](132268 call _dom _mt[232] this[133436]))
    unknown call_tmp[609126] "expr temp" "maybe param" "maybe type" "temp"
    (609129 'move' call_tmp[609126](132271 call high _mt[232] call_tmp[609119]))
    unknown call_tmp[609131] "maybe param" "maybe type" "temp"
    (609134 'move' call_tmp[609131](132275 call - call_tmp[609126] count[132207]))
    const hi[132277] "const" "insert auto destroy"
    (491580 'init var' hi[132277] call_tmp[609131])
    unknown tmp[401181] "maybe param" "temp"
    (401192 'move' tmp[401181] 1)
    unknown call_tmp[609136] "expr temp" "maybe param" "maybe type" "temp"
    (609139 'move' call_tmp[609136](401194 call _cond_invalid tmp[401181]))
    if call_tmp[609136]
    {
      (401197 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515465] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515466] "maybe param" "temp"
    unknown call_tmp[609141] "expr temp" "maybe param" "maybe type" "temp"
    (609144 'move' call_tmp[609141](401182 call isTrue tmp[401181]))
    (515471 'move' tmp[515466](515469 call _cond_test call_tmp[609141]))
    if tmp[515466]
    {
      unknown tmp[515473] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[609146] "expr temp" "maybe param" "maybe type" "temp"
      (609149 'move' call_tmp[609146](132283 call + pos[132198] count[132207]))
      unknown call_tmp[609151] "expr temp" "maybe param" "maybe type" "temp"
      (609154 'move' call_tmp[609151](132286 call - call_tmp[609146] 1))
      unknown call_tmp[609158] "expr temp" "maybe param" "maybe type" "temp"
      (609161 'move' call_tmp[609158](132289 call _dom _mt[232] this[133436]))
      unknown call_tmp[609165] "expr temp" "maybe param" "maybe type" "temp"
      (609168 'move' call_tmp[609165](132292 call high _mt[232] call_tmp[609158]))
      unknown call_tmp[609170] "expr temp" "maybe param" "maybe type" "temp"
      (609173 'move' call_tmp[609170](132295 call > call_tmp[609151] call_tmp[609165]))
      (515475 'move' tmp[515473](401185 call isTrue call_tmp[609170]))
      (515480 'move' tmp[515465](515477 '_paramFoldLogical' tmp[515466] tmp[515473]))
    }
    {
      (515485 'move' tmp[515465](515482 '_paramFoldLogical' tmp[515466] 0))
    }
    unknown call_tmp[609175] "expr temp" "maybe param" "maybe type" "temp"
    (609178 'move' call_tmp[609175](132312 call _cond_test tmp[515465]))
    if call_tmp[609175]
    {
      unknown call_tmp[609180] "expr temp" "maybe param" "maybe type" "temp"
      (609183 'move' call_tmp[609180](132304 call + pos[132198] count[132207]))
      unknown call_tmp[609185] "expr temp" "maybe param" "maybe type" "temp"
      (609188 'move' call_tmp[609185](132307 call - call_tmp[609180] 1))
      (132310 call halt "remove at position " call_tmp[609185] " out of bounds")
    }
    unknown tmp[401202] "maybe param" "temp"
    (401213 'move' tmp[401202] 1)
    unknown call_tmp[609190] "expr temp" "maybe param" "maybe type" "temp"
    (609193 'move' call_tmp[609190](401215 call _cond_invalid tmp[401202]))
    if call_tmp[609190]
    {
      (401218 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515492] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515493] "maybe param" "temp"
    unknown call_tmp[609195] "expr temp" "maybe param" "maybe type" "temp"
    (609198 'move' call_tmp[609195](401203 call isTrue tmp[401202]))
    (515498 'move' tmp[515493](515496 call _cond_test call_tmp[609195]))
    if tmp[515493]
    {
      unknown tmp[515500] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[609200] "expr temp" "maybe param" "maybe type" "temp"
      (609203 'move' call_tmp[609200](132320 call < pos[132198] lo[132264]))
      (515502 'move' tmp[515500](401206 call isTrue call_tmp[609200]))
      (515507 'move' tmp[515492](515504 '_paramFoldLogical' tmp[515493] tmp[515500]))
    }
    {
      (515512 'move' tmp[515492](515509 '_paramFoldLogical' tmp[515493] 0))
    }
    unknown call_tmp[609205] "expr temp" "maybe param" "maybe type" "temp"
    (609208 'move' call_tmp[609205](132331 call _cond_test tmp[515492]))
    if call_tmp[609205]
    {
      (132329 call halt "remove at position " pos[132198] " out of bounds")
    }
    unknown call_tmp[609210] "maybe param" "maybe type" "temp"
    (609213 'move' call_tmp[609210](132338 call chpl_build_bounded_range lo[132264] hi[132277]))
    const newRange[132340] "const" "insert auto destroy"
    (491582 'init var' newRange[132340] call_tmp[609210])
    {
      unknown _indexOfInterest[132363] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132364] "expr temp" "temp"
      unknown call_tmp[609215] "expr temp" "maybe param" "maybe type" "temp"
      (609218 'move' call_tmp[609215](132378 call chpl_direct_range_iter pos[132198] hi[132277] 1))
      (132373 'move' _iterator[132364](132371 call _getIterator call_tmp[609215]))
      Defer
      {
        {
          (132394 call _freeIterator _iterator[132364])
        }
      }
      { scopeless type
        (132383 'move' _indexOfInterest[132363](132380 call iteratorIndex _iterator[132364]))
      }
      ForLoop
      {
        unknown i[132387] "index var" "insert auto destroy"
        (132389 'move' i[132387] _indexOfInterest[132363])
        {
          unknown call_tmp[609220] "expr temp" "maybe param" "maybe type" "temp"
          (609223 'move' call_tmp[609220](132351 call this[133436] i[132387]))
          unknown call_tmp[609225] "expr temp" "maybe param" "maybe type" "temp"
          (609228 'move' call_tmp[609225](132355 call + i[132387] count[132207]))
          unknown call_tmp[609230] "expr temp" "maybe param" "maybe type" "temp"
          (609233 'move' call_tmp[609230](132358 call this[133436] call_tmp[609225]))
          (132359 call = call_tmp[609220] call_tmp[609230])
        }
        label _continueLabel[132368]
        _indexOfInterest[132363]
        _iterator[132364]
      }
      label _breakLabel[132369]
    }
    {
      const tmp[132535] "const" "temp"
      unknown call_tmp[609237] "expr temp" "maybe param" "maybe type" "temp"
      (609240 'move' call_tmp[609237](132402 call _value _mt[232] this[133436]))
      unknown call_tmp[609242] "expr temp" "maybe param" "maybe type" "temp"
      (609245 'move' call_tmp[609242](132532 '_wide_get_locale' call_tmp[609237]))
      (132536 'move' tmp[132535](132533 'deref' call_tmp[609242]))
      {
        unknown call_tmp[609249] "expr temp" "maybe param" "maybe type" "temp"
        (609252 'move' call_tmp[609249](132406 call _value _mt[232] this[133436]))
        unknown call_tmp[609256] "expr temp" "maybe param" "maybe type" "temp"
        (609259 'move' call_tmp[609256](132409 call dataAllocRange _mt[232] call_tmp[609249]))
        unknown call_tmp[609263] "expr temp" "maybe param" "maybe type" "temp"
        (609266 'move' call_tmp[609263](132412 call length _mt[232] call_tmp[609256]))
        unknown call_tmp[609270] "expr temp" "maybe param" "maybe type" "temp"
        (609273 'move' call_tmp[609270](132416 call _dom _mt[232] this[133436]))
        unknown call_tmp[609277] "expr temp" "maybe param" "maybe type" "temp"
        (609280 'move' call_tmp[609277](132419 call numIndices _mt[232] call_tmp[609270]))
        unknown call_tmp[609282] "expr temp" "maybe param" "maybe type" "temp"
        (609285 'move' call_tmp[609282](132422 call < call_tmp[609263] call_tmp[609277]))
        unknown call_tmp[609287] "expr temp" "maybe param" "maybe type" "temp"
        (609290 'move' call_tmp[609287](132451 call _cond_test call_tmp[609282]))
        if call_tmp[609287]
        {
          unknown call_tmp[609294] "expr temp" "maybe param" "maybe type" "temp"
          (609297 'move' call_tmp[609294](132425 call _value _mt[232] this[133436]))
          unknown call_tmp[609301] "expr temp" "maybe param" "maybe type" "temp"
          (609304 'move' call_tmp[609301](132428 call dataAllocRange _mt[232] call_tmp[609294]))
          unknown call_tmp[609308] "expr temp" "maybe param" "maybe type" "temp"
          (609311 'move' call_tmp[609308](132432 call _dom _mt[232] this[133436]))
          unknown call_tmp[609315] "expr temp" "maybe param" "maybe type" "temp"
          (609318 'move' call_tmp[609315](132435 call low _mt[232] call_tmp[609308]))
          unknown call_tmp[609322] "expr temp" "maybe param" "maybe type" "temp"
          (609325 'move' call_tmp[609322](132439 call _dom _mt[232] this[133436]))
          unknown call_tmp[609329] "expr temp" "maybe param" "maybe type" "temp"
          (609332 'move' call_tmp[609329](132442 call high _mt[232] call_tmp[609322]))
          unknown call_tmp[609334] "expr temp" "maybe param" "maybe type" "temp"
          (609337 'move' call_tmp[609334](132445 call chpl_build_bounded_range call_tmp[609315] call_tmp[609329]))
          (132447 call = call_tmp[609301] call_tmp[609334])
        }
        unknown call_tmp[609341] "expr temp" "maybe param" "maybe type" "temp"
        (609344 'move' call_tmp[609341](132457 call length _mt[232] newRange[132340]))
        unknown call_tmp[609348] "expr temp" "maybe param" "maybe type" "temp"
        (609351 'move' call_tmp[609348](132461 call _value _mt[232] this[133436]))
        unknown call_tmp[609355] "expr temp" "maybe param" "maybe type" "temp"
        (609358 'move' call_tmp[609355](132464 call dataAllocRange _mt[232] call_tmp[609348]))
        unknown call_tmp[609362] "expr temp" "maybe param" "maybe type" "temp"
        (609365 'move' call_tmp[609362](132467 call length _mt[232] call_tmp[609355]))
        unknown call_tmp[609367] "expr temp" "maybe param" "maybe type" "temp"
        (609370 'move' call_tmp[609367](132472 call * arrayAsVecGrowthFactor[111851] arrayAsVecGrowthFactor[111851]))
        unknown call_tmp[609372] "expr temp" "maybe param" "maybe type" "temp"
        (609375 'move' call_tmp[609372](132474 call / call_tmp[609362] call_tmp[609367]))
        unknown call_tmp[609377] "expr temp" "maybe param" "maybe type" "temp"
        (609380 'move' call_tmp[609377](132477 call _cast int(64)[13] call_tmp[609372]))
        unknown call_tmp[609382] "expr temp" "maybe param" "maybe type" "temp"
        (609385 'move' call_tmp[609382](132479 call < call_tmp[609341] call_tmp[609377]))
        unknown call_tmp[609387] "expr temp" "maybe param" "maybe type" "temp"
        (609390 'move' call_tmp[609387](132505 call _cond_test call_tmp[609382]))
        if call_tmp[609387]
        {
          unknown call_tmp[609394] "expr temp" "maybe param" "maybe type" "temp"
          (609397 'move' call_tmp[609394](132485 call - 1))
          unknown call_tmp[609399] "maybe param" "maybe type" "temp"
          (609402 'move' call_tmp[609399](132488 call(353884 call (partial) resizeAllocRange _mt[232] this[133436]) newRange[132340](grow = call_tmp[609394])))
          const nextAllocRange[132489] "const" "insert auto destroy"
          (491584 'init var' nextAllocRange[132489] call_tmp[609399])
          unknown call_tmp[609406] "expr temp" "maybe param" "maybe type" "temp"
          (609409 'move' call_tmp[609406](132494 call _value _mt[232] this[133436]))
          (132503 call(132497 call (partial) dsiReallocate _mt[232] call_tmp[609406]) nextAllocRange[132489] newRange[132340])
        }
        unknown call_tmp[609415] "expr temp" "maybe param" "maybe type" "temp"
        (609418 'move' call_tmp[609415](132510 call _dom _mt[232] this[133436]))
        unknown call_tmp[609422] "expr temp" "maybe param" "maybe type" "temp"
        (609425 'move' call_tmp[609422](132517 call _build_tuple newRange[132340]))
        (132520 call(132513 call (partial) setIndices _mt[232] call_tmp[609415]) call_tmp[609422])
        unknown call_tmp[609429] "expr temp" "maybe param" "maybe type" "temp"
        (609432 'move' call_tmp[609429](132523 call _value _mt[232] this[133436]))
        (132530 call(132526 call (partial) dsiPostReallocate _mt[232] call_tmp[609429]))
      }
    }
    (469022 return _void[47])
  }
  function _array[133150](?).remove[132556](arg _mt[133442]:_MT[227], arg this[133440]:_array[133150](?), arg pos[132553] :
  unknown call_tmp[609438] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[609443] "expr temp" "maybe param" "maybe type" "temp"
    (609446 'move' call_tmp[609443](132579 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[609443]
    {
      (132577 call compilerWarning "remove has been deprecated - please use list.pop")
    }
    unknown call_tmp[609450] "expr temp" "maybe param" "maybe type" "temp"
    (609453 'move' call_tmp[609450](132587 call(353898 call (partial) chpl__isDense1DArray _mt[232] this[133440])))
    unknown call_tmp[609455] "expr temp" "maybe param" "maybe type" "temp"
    (609458 'move' call_tmp[609455](132588 call ! call_tmp[609450]))
    unknown call_tmp[609460] "expr temp" "maybe param" "maybe type" "temp"
    (609463 'move' call_tmp[609460](132595 call _cond_test call_tmp[609455]))
    if call_tmp[609460]
    {
      (132593 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (132618 call(353902 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133440]) "remove range")
    unknown call_tmp[609471] "expr temp" "maybe param" "maybe type" "temp"
    (609474 'move' call_tmp[609471](132622 call low _mt[232] pos[132553]))
    unknown call_tmp[609478] "expr temp" "maybe param" "maybe type" "temp"
    (609481 'move' call_tmp[609478](132627 call size _mt[232] pos[132553]))
    (132630 call(353906 call (partial) remove _mt[232] this[133440]) call_tmp[609471] call_tmp[609478])
    (469024 return _void[47])
  }
  function _array[133150](?).reverse[132636](arg _mt[133446]:_MT[227], arg this[133444]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[609485] "expr temp" "maybe param" "maybe type" "temp"
    (609488 'move' call_tmp[609485](132640 call(353912 call (partial) chpl__isDense1DArray _mt[232] this[133444])))
    unknown call_tmp[609490] "expr temp" "maybe param" "maybe type" "temp"
    (609493 'move' call_tmp[609490](132641 call ! call_tmp[609485]))
    unknown call_tmp[609495] "expr temp" "maybe param" "maybe type" "temp"
    (609498 'move' call_tmp[609495](132663 call _cond_test call_tmp[609490]))
    if call_tmp[609495]
    {
      (132661 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    unknown call_tmp[609502] "expr temp" "maybe param" "maybe type" "temp"
    (609505 'move' call_tmp[609502](132670 call _dom _mt[232] this[133444]))
    unknown call_tmp[609509] "maybe param" "maybe type" "temp"
    (609512 'move' call_tmp[609509](132673 call low _mt[232] call_tmp[609502]))
    const lo[132676] "const" "insert auto destroy"
    (491586 'init var' lo[132676] call_tmp[609509])
    unknown call_tmp[609516] "expr temp" "maybe param" "maybe type" "temp"
    (609519 'move' call_tmp[609516](132680 call _dom _mt[232] this[133444]))
    unknown call_tmp[609523] "expr temp" "maybe param" "maybe type" "temp"
    (609526 'move' call_tmp[609523](132683 call size _mt[232] call_tmp[609516]))
    unknown call_tmp[609528] "maybe param" "maybe type" "temp"
    (609531 'move' call_tmp[609528](132687 call / call_tmp[609523] 2))
    const mid[132689] "const" "insert auto destroy"
    (491588 'init var' mid[132689] call_tmp[609528])
    unknown call_tmp[609535] "expr temp" "maybe param" "maybe type" "temp"
    (609538 'move' call_tmp[609535](132693 call _dom _mt[232] this[133444]))
    unknown call_tmp[609542] "maybe param" "maybe type" "temp"
    (609545 'move' call_tmp[609542](132696 call high _mt[232] call_tmp[609535]))
    const hi[132699] "const" "insert auto destroy"
    (491590 'init var' hi[132699] call_tmp[609542])
    {
      unknown _indexOfInterest[132727] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132728] "expr temp" "temp"
      unknown call_tmp[609547] "expr temp" "maybe param" "maybe type" "temp"
      (609550 'move' call_tmp[609547](132744 call chpl_direct_counted_range_iter 0 mid[132689]))
      (132737 'move' _iterator[132728](132735 call _getIterator call_tmp[609547]))
      Defer
      {
        {
          (132760 call _freeIterator _iterator[132728])
        }
      }
      { scopeless type
        (132749 'move' _indexOfInterest[132727](132746 call iteratorIndex _iterator[132728]))
      }
      ForLoop
      {
        unknown i[132753] "index var" "insert auto destroy"
        (132755 'move' i[132753] _indexOfInterest[132727])
        {
          unknown call_tmp[609552] "expr temp" "maybe param" "maybe type" "temp"
          (609555 'move' call_tmp[609552](132712 call + lo[132676] i[132753]))
          unknown call_tmp[609557] "expr temp" "maybe param" "maybe type" "temp"
          (609560 'move' call_tmp[609557](132715 call this[133444] call_tmp[609552]))
          unknown call_tmp[609562] "expr temp" "maybe param" "maybe type" "temp"
          (609565 'move' call_tmp[609562](132719 call - hi[132699] i[132753]))
          unknown call_tmp[609567] "expr temp" "maybe param" "maybe type" "temp"
          (609570 'move' call_tmp[609567](132722 call this[133444] call_tmp[609562]))
          (132723 call <=> call_tmp[609557] call_tmp[609567])
        }
        label _continueLabel[132732]
        _indexOfInterest[132727]
        _iterator[132728]
      }
      label _breakLabel[132733]
    }
    (469026 return _void[47])
  }
  function _array[133150](?).clear[132771](arg _mt[133450]:_MT[227], arg this[133448]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[609572] "expr temp" "maybe param" "maybe type" "temp"
    (609575 'move' call_tmp[609572](132794 call _cond_test showArrayAsVecWarnings[111812]))
    if call_tmp[609572]
    {
      (132792 call compilerWarning "clear is deprecated - please use list.clear")
    }
    unknown call_tmp[609579] "expr temp" "maybe param" "maybe type" "temp"
    (609582 'move' call_tmp[609579](132802 call(353927 call (partial) chpl__isDense1DArray _mt[232] this[133448])))
    unknown call_tmp[609584] "expr temp" "maybe param" "maybe type" "temp"
    (609587 'move' call_tmp[609584](132803 call ! call_tmp[609579]))
    unknown call_tmp[609589] "expr temp" "maybe param" "maybe type" "temp"
    (609592 'move' call_tmp[609589](132825 call _cond_test call_tmp[609584]))
    if call_tmp[609589]
    {
      (132823 call compilerError "clear() is only supported on dense 1D arrays")
    }
    (132846 call(353931 call (partial) chpl__assertSingleArrayDomain _mt[232] this[133448]) "clear")
    unknown call_tmp[609598] "expr temp" "maybe param" "maybe type" "temp"
    (609601 'move' call_tmp[609598](132849 call _dom _mt[232] this[133448]))
    unknown call_tmp[609605] "maybe param" "maybe type" "temp"
    (609608 'move' call_tmp[609605](132852 call low _mt[232] call_tmp[609598]))
    const lo[132855] "const" "insert auto destroy"
    (491592 'init var' lo[132855] call_tmp[609605])
    unknown call_tmp[609612] "expr temp" "maybe param" "maybe type" "temp"
    (609615 'move' call_tmp[609612](132859 call _dom _mt[232] this[133448]))
    unknown call_tmp[609619] "expr temp" "maybe param" "maybe type" "temp"
    (609622 'move' call_tmp[609619](132862 call low _mt[232] call_tmp[609612]))
    unknown call_tmp[609624] "maybe param" "maybe type" "temp"
    (609627 'move' call_tmp[609624](132866 call - call_tmp[609619] 1))
    const hi[132868] "const" "insert auto destroy"
    (491594 'init var' hi[132868] call_tmp[609624])
    unknown call_tmp[609629] "expr temp" "maybe param" "maybe type" "temp"
    (609632 'move' call_tmp[609629](132874 call < hi[132868] lo[132855]))
    (132893 call assert call_tmp[609629] "overflow occurred subtracting 1 from low bound in clear")
    unknown call_tmp[609634] "maybe param" "maybe type" "temp"
    (609637 'move' call_tmp[609634](132897 call chpl_build_bounded_range lo[132855] hi[132868]))
    const newRange[132899] "const" "insert auto destroy"
    (491596 'init var' newRange[132899] call_tmp[609634])
    {
      const tmp[132946] "const" "temp"
      unknown call_tmp[609641] "expr temp" "maybe param" "maybe type" "temp"
      (609644 'move' call_tmp[609641](132903 call _value _mt[232] this[133448]))
      unknown call_tmp[609646] "expr temp" "maybe param" "maybe type" "temp"
      (609649 'move' call_tmp[609646](132943 '_wide_get_locale' call_tmp[609641]))
      (132947 'move' tmp[132946](132944 'deref' call_tmp[609646]))
      {
        unknown call_tmp[609653] "expr temp" "maybe param" "maybe type" "temp"
        (609656 'move' call_tmp[609653](132907 call _value _mt[232] this[133448]))
        unknown call_tmp[609660] "expr temp" "maybe param" "maybe type" "temp"
        (609663 'move' call_tmp[609660](132914 call _build_tuple newRange[132899]))
        (132917 call(132910 call (partial) dsiReallocate _mt[232] call_tmp[609653]) call_tmp[609660])
        unknown call_tmp[609667] "expr temp" "maybe param" "maybe type" "temp"
        (609670 'move' call_tmp[609667](132921 call _dom _mt[232] this[133448]))
        unknown call_tmp[609674] "expr temp" "maybe param" "maybe type" "temp"
        (609677 'move' call_tmp[609674](132928 call _build_tuple newRange[132899]))
        (132931 call(132924 call (partial) setIndices _mt[232] call_tmp[609667]) call_tmp[609674])
        unknown call_tmp[609681] "expr temp" "maybe param" "maybe type" "temp"
        (609684 'move' call_tmp[609681](132934 call _value _mt[232] this[133448]))
        (132941 call(132937 call (partial) dsiPostReallocate _mt[232] call_tmp[609681]))
      }
    }
    (469028 return _void[47])
  }
  function _array[133150](?).find[132962](arg _mt[133454]:_MT[227], arg this[133452]:_array[133150](?), arg val[132959] :
  (132956 call eltType _mt[232] this[133452])) : _unknown[43] "method" "primary method"
  {
    unknown ret[469032] "RVV" "temp"
    {
      unknown _indexOfInterest[133000] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133001] "expr temp" "temp"
      unknown call_tmp[609692] "expr temp" "maybe param" "maybe type" "temp"
      (609695 'move' call_tmp[609692](132977 call _dom _mt[232] this[133452]))
      (133010 'move' _iterator[133001](133008 call _getIterator call_tmp[609692]))
      Defer
      {
        {
          (133027 call _freeIterator _iterator[133001])
        }
      }
      { scopeless type
        (133016 'move' _indexOfInterest[133000](133013 call iteratorIndex _iterator[133001]))
      }
      ForLoop
      {
        unknown i[133020] "index var" "insert auto destroy"
        (133022 'move' i[133020] _indexOfInterest[133000])
        {
          unknown call_tmp[609697] "expr temp" "maybe param" "maybe type" "temp"
          (609700 'move' call_tmp[609697](132983 call this[133452] i[133020]))
          unknown call_tmp[609702] "expr temp" "maybe param" "maybe type" "temp"
          (609705 'move' call_tmp[609702](132985 call == call_tmp[609697] val[132959]))
          unknown call_tmp[609707] "expr temp" "maybe param" "maybe type" "temp"
          (609710 'move' call_tmp[609707](132994 call _cond_test call_tmp[609702]))
          if call_tmp[609707]
          {
            unknown call_tmp[609712] "expr temp" "maybe param" "maybe type" "temp"
            (609715 'move' call_tmp[609712](132990 call _build_tuple 1 i[133020]))
            unknown call_tmp[609719] "expr temp" "maybe param" "maybe type" "temp"
            (609722 'move' call_tmp[609719](469042 call _dom _mt[232] this[133452]))
            unknown call_tmp[609724] "expr temp" "maybe param" "maybe type" "temp"
            (609727 'move' call_tmp[609724](469040 call chpl__buildIndexType call_tmp[609719]))
            unknown call_tmp[609729] "expr temp" "maybe param" "maybe type" "temp"
            (609732 'move' call_tmp[609729](469037 call _build_tuple bool[10] call_tmp[609724]))
            (469046 'move' ret[469032](469045 'coerce' call_tmp[609712] call_tmp[609729]))
            gotoReturn _end_find[469030] _end_find[469030]
          }
        }
        label _continueLabel[133005]
        _indexOfInterest[133000]
        _iterator[133001]
      }
      label _breakLabel[133006]
    }
    unknown arbInd[133042] "insert auto destroy"
    unknown call_tmp[609736] "expr temp" "maybe param" "maybe type" "temp"
    (609739 'move' call_tmp[609736](133036 call _dom _mt[232] this[133452]))
    unknown call_tmp[609741] "expr temp" "maybe param" "maybe type" "temp"
    (609744 'move' call_tmp[609741](133040 call chpl__buildIndexType call_tmp[609736]))
    (491598 'default init var' arbInd[133042] call_tmp[609741])
    unknown call_tmp[609746] "expr temp" "maybe param" "maybe type" "temp"
    (609749 'move' call_tmp[609746](133048 call _build_tuple 0 arbInd[133042]))
    unknown call_tmp[609753] "expr temp" "maybe param" "maybe type" "temp"
    (609756 'move' call_tmp[609753](469056 call _dom _mt[232] this[133452]))
    unknown call_tmp[609758] "expr temp" "maybe param" "maybe type" "temp"
    (609761 'move' call_tmp[609758](469054 call chpl__buildIndexType call_tmp[609753]))
    unknown call_tmp[609763] "expr temp" "maybe param" "maybe type" "temp"
    (609766 'move' call_tmp[609763](469051 call _build_tuple bool[10] call_tmp[609758]))
    (469060 'move' ret[469032](469059 'coerce' call_tmp[609746] call_tmp[609763]))
    label _end_find[469030]
    (469034 return ret[469032])
  }
  { scopeless type
    unknown call_tmp[609770] "expr temp" "maybe param" "maybe type" "temp"
    (609773 'move' call_tmp[609770](132966 call _dom _mt[232] this[133452]))
    unknown call_tmp[609775] "expr temp" "maybe param" "maybe type" "temp"
    (609778 'move' call_tmp[609775](132970 call chpl__buildIndexType call_tmp[609770]))
    (132973 call _build_tuple bool[10] call_tmp[609775])
  }
  function _array[133150](?).count[133064](arg _mt[133458]:_MT[227], arg this[133456]:_array[133150](?), arg val[133061] :
  (133058 call eltType _mt[232] this[133456])) : _unknown[43] "method" "primary method"
  {
    unknown ret[469064] "RVV" "temp"
    unknown call_tmp[609782] "expr temp" "maybe param" "maybe type" "temp"
    (609785 'move' call_tmp[609782](133070 call == this[133456] val[133061]))
    unknown call_tmp[609787] "expr temp" "maybe param" "maybe type" "temp"
    (609790 'move' call_tmp[609787](133072 'reduce' anymanaged SumReduceScanOp[344093](?) call_tmp[609782] 0))
    (469070 'move' ret[469064](469069 'coerce' call_tmp[609787] int(64)[13]))
    (469066 return ret[469064])
  }
  { scopeless type
    int(64)[13]
  }
  function _array[133150](?).shape[133082](arg _mt[133462]:_MT[227], arg this[133460]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[469074] "RVV" "temp"
    unknown call_tmp[609794] "expr temp" "maybe param" "maybe type" "temp"
    (609797 'move' call_tmp[609794](133085 call _dom _mt[232] this[133460]))
    unknown call_tmp[609801] "expr temp" "maybe param" "maybe type" "temp"
    (609804 'move' call_tmp[609801](133090 call shape _mt[232] call_tmp[609794]))
    (469079 'move' ret[469074](469078 'deref' call_tmp[609801]))
    (469076 return ret[469074])
  }
  function _array[133150](?)._scan[133102](arg _mt[133466]:_MT[227], arg this[133464]:_array[133150](?), arg op[133100]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[469083] "RVV" "temp"
    unknown call_tmp[609808] "expr temp" "maybe param" "maybe type" "temp"
    (609811 'move' call_tmp[609808](353968 call _value _mt[232] this[133464]))
    unknown call_tmp[609817] "expr temp" "maybe param" "maybe type" "temp"
    (609820 'move' call_tmp[609817](133139 call _dom _mt[232] this[133464]))
    unknown call_tmp[609822] "expr temp" "maybe param" "maybe type" "temp"
    (609825 'move' call_tmp[609822](133142 call(133133 call (partial) doiScan _mt[232] call_tmp[609808]) op[133100] call_tmp[609817]))
    (469088 'move' ret[469083](469087 'deref' call_tmp[609822]))
    (469085 return ret[469083])
  }
  where {
    unknown call_tmp[609829] "expr temp" "maybe param" "maybe type" "temp"
    (609832 'move' call_tmp[609829](353962 call _value _mt[232] this[133464]))
    unknown call_tmp[609836] "expr temp" "maybe param" "maybe type" "temp"
    (609839 'move' call_tmp[609836](133128 call _dom _mt[232] this[133464]))
    (133131 call canResolveMethod module=[244] Reflection[211223] call_tmp[609829] "doiScan" op[133100] call_tmp[609836])
  }
  type _array[133150](?) val _pid[125853]:int(64)[13] int(64)[13] unknown _instance[125856] "alias scope from this" "owned" val _unowned[125860]:bool[10] bool[10] forwarding ( )
  function _do_destroy_arr[133475](arg _unowned[133472]:bool[10], arg _instance[133477]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    unknown call_tmp[609841] "expr temp" "maybe param" "maybe type" "temp"
    (609844 'move' call_tmp[609841](133480 call ! _unowned[133472]))
    unknown call_tmp[609846] "expr temp" "maybe param" "maybe type" "temp"
    (609849 'move' call_tmp[609846](133665 call _cond_test call_tmp[609841]))
    if call_tmp[609846]
    {
      {
        const tmp[133659] "const" "temp"
        unknown call_tmp[609851] "expr temp" "maybe param" "maybe type" "temp"
        (609854 'move' call_tmp[609851](133656 '_wide_get_locale' _instance[133477]))
        (133660 'move' tmp[133659](133657 'deref' call_tmp[609851]))
        {
          unknown call_tmp[609858] "expr temp" "maybe param" "maybe type" "temp"
          (609861 'move' call_tmp[609858](133488 call(133484 call (partial) isSliceArrayView _mt[232] _instance[133477])))
          unknown call_tmp[609863] "maybe param" "maybe type" "temp"
          (609866 'move' call_tmp[609863](133489 call ! call_tmp[609858]))
          unknown arrIsInList[133491] "param"
          (491600 'init var' arrIsInList[133491] call_tmp[609863])
          unknown call_tmp[609870] "maybe param" "maybe type" "temp"
          (609873 'move' call_tmp[609870](133506 call(133501 call (partial) remove _mt[232] _instance[133477]) arrIsInList[133491]))
          unknown tmp[133507] "insert auto destroy" "no copy" "temp"
          (491602 'init var' tmp[133507] call_tmp[609870])
          (133514 call _check_tuple_var_decl tmp[133507] 2)
          unknown call_tmp[609875] "maybe param" "maybe type" "temp"
          (609878 'move' call_tmp[609875](133508 call tmp[133507] 1))
          unknown arrToFree[133495] "insert auto destroy"
          (491604 'init var' arrToFree[133495] call_tmp[609875])
          unknown call_tmp[609880] "maybe param" "maybe type" "temp"
          (609883 'move' call_tmp[609880](133511 call tmp[133507] 2))
          unknown domToRemove[133497] "insert auto destroy"
          (491606 'init var' domToRemove[133497] call_tmp[609880])
          unknown domToFree[133523] "insert auto destroy"
          (491608 'init var' domToFree[133523] nil[38] unmanaged BaseDom?[389887])
          unknown distToRemove[133530] "insert auto destroy"
          (491610 'init var' distToRemove[133530] nil[38] unmanaged BaseDist?[389876])
          unknown distToFree[133537] "insert auto destroy"
          (491612 'init var' distToFree[133537] nil[38] unmanaged BaseDist?[389876])
          unknown call_tmp[609885] "maybe param" "maybe type" "temp"
          (609888 'move' call_tmp[609885](133543 call _isPrivatized domToRemove[133497]))
          unknown domIsPrivatized[133544] "param"
          (491614 'init var' domIsPrivatized[133544] call_tmp[609885])
          const instanceDom[133548] "const" "insert auto destroy"
          (491616 'init var' instanceDom[133548] domToRemove[133497])
          unknown call_tmp[609890] "expr temp" "maybe param" "maybe type" "temp"
          (609893 'move' call_tmp[609890](133553 call != domToRemove[133497] nil[38]))
          unknown call_tmp[609895] "expr temp" "maybe param" "maybe type" "temp"
          (609898 'move' call_tmp[609895](133572 call _cond_test call_tmp[609890]))
          if call_tmp[609895]
          {
            unknown tmp[328558] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[328583] "maybe param" "temp"
            (328586 'move' tmp[328583](328584 'addr of' domToFree[133523]))
            unknown tmp[328594] "maybe param" "temp"
            (328597 'move' tmp[328594](328595 'addr of' distToRemove[133530]))
            unknown call_tmp[609900] "expr temp" "maybe param" "maybe type" "temp"
            (609903 'move' call_tmp[609900](133561 call postfix! domToRemove[133497]))
            (328559 'move' tmp[328558](133567 call(133563 call (partial) remove _mt[232] call_tmp[609900])))
            { scopeless
              unknown call_tmp[609909] "expr temp" "maybe param" "maybe type" "temp"
              (609912 'move' call_tmp[609909](328565 call size _mt[232] tmp[328558]))
              unknown call_tmp[609914] "expr temp" "maybe param" "maybe type" "temp"
              (609917 'move' call_tmp[609914](328568 call != 2 call_tmp[609909]))
              unknown call_tmp[609919] "expr temp" "maybe param" "maybe type" "temp"
              (609922 'move' call_tmp[609919](328575 call _cond_test call_tmp[609914]))
              if call_tmp[609919]
              {
                (328571 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            unknown call_tmp[609924] "expr temp" "maybe param" "maybe type" "temp"
            (609927 'move' call_tmp[609924](328581 call tmp[328558] 1))
            (328588 call = tmp[328583] call_tmp[609924])
            unknown call_tmp[609929] "expr temp" "maybe param" "maybe type" "temp"
            (609932 'move' call_tmp[609929](328592 call tmp[328558] 2))
            (328599 call = tmp[328594] call_tmp[609929])
          }
          unknown call_tmp[609934] "maybe param" "maybe type" "temp"
          (609937 'move' call_tmp[609934](133579 call _isPrivatized distToRemove[133530]))
          unknown distIsPrivatized[133580] "param"
          (491618 'init var' distIsPrivatized[133580] call_tmp[609934])
          unknown call_tmp[609939] "expr temp" "maybe param" "maybe type" "temp"
          (609942 'move' call_tmp[609939](133585 call != distToRemove[133530] nil[38]))
          unknown call_tmp[609944] "expr temp" "maybe param" "maybe type" "temp"
          (609947 'move' call_tmp[609944](133600 call _cond_test call_tmp[609939]))
          if call_tmp[609944]
          {
            unknown call_tmp[609949] "expr temp" "maybe param" "maybe type" "temp"
            (609952 'move' call_tmp[609949](133589 call postfix! distToRemove[133530]))
            unknown call_tmp[609956] "expr temp" "maybe param" "maybe type" "temp"
            (609959 'move' call_tmp[609956](133595 call(133591 call (partial) remove _mt[232] call_tmp[609949])))
            (133596 call = distToFree[133537] call_tmp[609956])
          }
          unknown call_tmp[609961] "expr temp" "maybe param" "maybe type" "temp"
          (609964 'move' call_tmp[609961](133606 call != arrToFree[133495] nil[38]))
          unknown call_tmp[609966] "expr temp" "maybe param" "maybe type" "temp"
          (609969 'move' call_tmp[609966](133617 call _cond_test call_tmp[609961]))
          if call_tmp[609966]
          {
            unknown call_tmp[609971] "expr temp" "maybe param" "maybe type" "temp"
            (609974 'move' call_tmp[609971](133614 call _isPrivatized _instance[133477]))
            (133615 call _delete_arr _instance[133477] call_tmp[609971])
          }
          unknown call_tmp[609976] "expr temp" "maybe param" "maybe type" "temp"
          (609979 'move' call_tmp[609976](133624 call != domToFree[133523] nil[38]))
          unknown call_tmp[609981] "expr temp" "maybe param" "maybe type" "temp"
          (609984 'move' call_tmp[609981](133634 call _cond_test call_tmp[609976]))
          if call_tmp[609981]
          {
            unknown call_tmp[609986] "expr temp" "maybe param" "maybe type" "temp"
            (609989 'move' call_tmp[609986](133628 call postfix! instanceDom[133548]))
            (133632 call _delete_dom call_tmp[609986] domIsPrivatized[133544])
          }
          unknown call_tmp[609991] "expr temp" "maybe param" "maybe type" "temp"
          (609994 'move' call_tmp[609991](133641 call != distToFree[133537] nil[38]))
          unknown call_tmp[609996] "expr temp" "maybe param" "maybe type" "temp"
          (609999 'move' call_tmp[609996](133651 call _cond_test call_tmp[609991]))
          if call_tmp[609996]
          {
            unknown call_tmp[610001] "expr temp" "maybe param" "maybe type" "temp"
            (610004 'move' call_tmp[610001](133645 call postfix! distToFree[133537]))
            (133649 call _delete_dist call_tmp[610001] distIsPrivatized[133580])
          }
        }
      }
    }
    (469090 return _void[47])
  }
  function _array[133150](?).equals[133679](arg _mt[133684]:_MT[227], arg this[133681]:_array[133150](?) :
  _array[133150](?), arg that[133676]:_array[133150](?)) : _unknown[43] "method"
  {
    unknown ret[469094] "RVV" "temp"
    unknown call_tmp[610008] "expr temp" "maybe param" "maybe type" "temp"
    (610011 'move' call_tmp[610008](133688 call _value _mt[232] this[133681]))
    unknown call_tmp[610015] "expr temp" "maybe param" "maybe type" "temp"
    (610018 'move' call_tmp[610015](133692 call _value _mt[232] that[133676]))
    unknown call_tmp[610020] "expr temp" "maybe param" "maybe type" "temp"
    (610023 'move' call_tmp[610020](133695 call == call_tmp[610008] call_tmp[610015]))
    unknown call_tmp[610025] "expr temp" "maybe param" "maybe type" "temp"
    (610028 'move' call_tmp[610025](133700 call _cond_test call_tmp[610020]))
    if call_tmp[610025]
    {
      (469100 'move' ret[469094](469099 'coerce' 1 bool[10]))
      gotoReturn _end_equals[469092] _end_equals[469092]
    }
    unknown call_tmp[610032] "expr temp" "maybe param" "maybe type" "temp"
    (610035 'move' call_tmp[610032](133707 call rank _mt[232] this[133681]))
    unknown call_tmp[610039] "expr temp" "maybe param" "maybe type" "temp"
    (610042 'move' call_tmp[610039](133711 call rank _mt[232] that[133676]))
    unknown call_tmp[610044] "expr temp" "maybe param" "maybe type" "temp"
    (610047 'move' call_tmp[610044](133714 call != call_tmp[610032] call_tmp[610039]))
    unknown call_tmp[610049] "expr temp" "maybe param" "maybe type" "temp"
    (610052 'move' call_tmp[610049](133719 call _cond_test call_tmp[610044]))
    if call_tmp[610049]
    {
      (469106 'move' ret[469094](469105 'coerce' 0 bool[10]))
      gotoReturn _end_equals[469092] _end_equals[469092]
    }
    unknown call_tmp[610056] "expr temp" "maybe param" "maybe type" "temp"
    (610059 'move' call_tmp[610056](133725 call numElements _mt[232] this[133681]))
    unknown call_tmp[610063] "expr temp" "maybe param" "maybe type" "temp"
    (610066 'move' call_tmp[610063](133729 call numElements _mt[232] that[133676]))
    unknown call_tmp[610068] "expr temp" "maybe param" "maybe type" "temp"
    (610071 'move' call_tmp[610068](133732 call != call_tmp[610056] call_tmp[610063]))
    unknown call_tmp[610073] "expr temp" "maybe param" "maybe type" "temp"
    (610076 'move' call_tmp[610073](133737 call _cond_test call_tmp[610068]))
    if call_tmp[610073]
    {
      (469112 'move' ret[469094](469111 'coerce' 0 bool[10]))
      gotoReturn _end_equals[469092] _end_equals[469092]
    }
    unknown tmp[401223] "maybe param" "temp"
    unknown call_tmp[610080] "expr temp" "maybe param" "maybe type" "temp"
    (610083 'move' call_tmp[610080](133744 call _dom _mt[232] this[133681]))
    (401234 'move' tmp[401223](133748 call isRectangularDom call_tmp[610080]))
    unknown call_tmp[610085] "expr temp" "maybe param" "maybe type" "temp"
    (610088 'move' call_tmp[610085](401236 call _cond_invalid tmp[401223]))
    if call_tmp[610085]
    {
      (401239 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515519] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515520] "maybe param" "temp"
    unknown call_tmp[610090] "expr temp" "maybe param" "maybe type" "temp"
    (610093 'move' call_tmp[610090](401224 call isTrue tmp[401223]))
    (515525 'move' tmp[515520](515523 call _cond_test call_tmp[610090]))
    if tmp[515520]
    {
      unknown tmp[515527] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610097] "expr temp" "maybe param" "maybe type" "temp"
      (610100 'move' call_tmp[610097](133751 call _dom _mt[232] that[133676]))
      unknown call_tmp[610102] "expr temp" "maybe param" "maybe type" "temp"
      (610105 'move' call_tmp[610102](133755 call isRectangularDom call_tmp[610097]))
      (515529 'move' tmp[515527](401227 call isTrue call_tmp[610102]))
      (515534 'move' tmp[515519](515531 '_paramFoldLogical' tmp[515520] tmp[515527]))
    }
    {
      (515539 'move' tmp[515519](515536 '_paramFoldLogical' tmp[515520] 0))
    }
    unknown call_tmp[610107] "expr temp" "maybe param" "maybe type" "temp"
    (610110 'move' call_tmp[610107](133844 call _cond_test tmp[515519]))
    if call_tmp[610107]
    {
      {
        unknown _indexOfInterest[133802] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[133803] "expr temp" "temp"
        unknown call_tmp[610114] "expr temp" "maybe param" "maybe type" "temp"
        (610117 'move' call_tmp[610114](133817 call rank _mt[232] this[133681]))
        unknown call_tmp[610119] "expr temp" "maybe param" "maybe type" "temp"
        (610122 'move' call_tmp[610119](133820 call chpl_direct_range_iter 1 call_tmp[610114] 1))
        (133812 'move' _iterator[133803](133810 call _getIterator call_tmp[610119]))
        Defer
        {
          {
            (133836 call _freeIterator _iterator[133803])
          }
        }
        { scopeless type
          (133825 'move' _indexOfInterest[133802](133822 call iteratorIndex _iterator[133803]))
        }
        ForLoop
        {
          unknown d[133829] "index var" "insert auto destroy"
          (133831 'move' d[133829] _indexOfInterest[133802])
          unknown call_tmp[610126] "expr temp" "maybe param" "maybe type" "temp"
          (610129 'move' call_tmp[610126](133767 call _dom _mt[232] this[133681]))
          unknown call_tmp[610133] "expr temp" "maybe param" "maybe type" "temp"
          (610136 'move' call_tmp[610133](133775 call(133770 call (partial) dim _mt[232] call_tmp[610126]) d[133829]))
          unknown call_tmp[610140] "expr temp" "maybe param" "maybe type" "temp"
          (610143 'move' call_tmp[610140](133776 call size _mt[232] call_tmp[610133]))
          unknown call_tmp[610147] "expr temp" "maybe param" "maybe type" "temp"
          (610150 'move' call_tmp[610147](133780 call _dom _mt[232] that[133676]))
          unknown call_tmp[610154] "expr temp" "maybe param" "maybe type" "temp"
          (610157 'move' call_tmp[610154](133788 call(133783 call (partial) dim _mt[232] call_tmp[610147]) d[133829]))
          unknown call_tmp[610161] "expr temp" "maybe param" "maybe type" "temp"
          (610164 'move' call_tmp[610161](133789 call size _mt[232] call_tmp[610154]))
          unknown call_tmp[610166] "expr temp" "maybe param" "maybe type" "temp"
          (610169 'move' call_tmp[610166](133792 call != call_tmp[610140] call_tmp[610161]))
          unknown call_tmp[610171] "expr temp" "maybe param" "maybe type" "temp"
          (610174 'move' call_tmp[610171](133797 call _cond_test call_tmp[610166]))
          if call_tmp[610171]
          {
            (469118 'move' ret[469094](469117 'coerce' 0 bool[10]))
            gotoReturn _end_equals[469092] _end_equals[469092]
          }
          label _continueLabel[133807]
          _indexOfInterest[133802]
          _iterator[133803]
        }
        label _breakLabel[133808]
      }
    }
    unknown call_tmp[610178] "expr temp" "maybe param" "maybe type" "temp"
    (610181 'move' call_tmp[610178](133850 call eltType _mt[232] this[133681]))
    unknown call_tmp[610183] "expr temp" "maybe param" "maybe type" "temp"
    (610186 'move' call_tmp[610183](133854 call isArrayType call_tmp[610178]))
    unknown call_tmp[610188] "expr temp" "maybe param" "maybe type" "temp"
    (610191 'move' call_tmp[610188](133918 call _cond_test call_tmp[610183]))
    if call_tmp[610188]
    {
      unknown ret[133856] "insert auto destroy"
      (491620 'init var' ret[133856] 1)
      Forall {
        induction variables:
          
          unknown thisArr[133900] "index var" "insert auto destroy"
          
          unknown thatArr[133902] "index var" "insert auto destroy"
        iterated expressions:
          this[133681]
          that[133676]
        shadow variables:
          ret[133871] 'reduce' intent outer var ret[133856]
            init block
            {
            }
            deinit block
            {
            }
        forall body
        {
          unknown tmp[133888] "temp"
          (133891 'move' tmp[133888](133890 'addr of' ret[133871]))
          unknown tmp[401244] "maybe param" "temp"
          (401255 'move' tmp[401244] tmp[133888])
          unknown call_tmp[610193] "expr temp" "maybe param" "maybe type" "temp"
          (610196 'move' call_tmp[610193](401257 call _cond_invalid tmp[401244]))
          if call_tmp[610193]
          {
            (401260 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[515546] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[515547] "maybe param" "temp"
          unknown call_tmp[610198] "expr temp" "maybe param" "maybe type" "temp"
          (610201 'move' call_tmp[610198](401245 call isTrue tmp[401244]))
          (515552 'move' tmp[515547](515550 call _cond_test call_tmp[610198]))
          if tmp[515547]
          {
            unknown tmp[515554] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[610205] "expr temp" "maybe param" "maybe type" "temp"
            (610208 'move' call_tmp[610205](133886 call(133881 call (partial) equals _mt[232] thisArr[133900]) thatArr[133902]))
            (515556 'move' tmp[515554](401248 call isTrue call_tmp[610205]))
            (515561 'move' tmp[515546](515558 '_paramFoldLogical' tmp[515547] tmp[515554]))
          }
          {
            (515566 'move' tmp[515546](515563 '_paramFoldLogical' tmp[515547] 0))
          }
          (133896 call = tmp[133888] tmp[515546])
        }
      }
      (469124 'move' ret[469094](469123 'coerce' ret[133856] bool[10]))
      gotoReturn _end_equals[469092] _end_equals[469092]
    }
    {
      unknown call_tmp[610210] "expr temp" "maybe param" "maybe type" "temp"
      (610213 'move' call_tmp[610210](133911 call == this[133681] that[133676]))
      unknown call_tmp[610215] "expr temp" "maybe param" "maybe type" "temp"
      (610218 'move' call_tmp[610215](133913 'reduce' anymanaged LogicalAndReduceScanOp[344251](?) call_tmp[610210] 0))
      (469130 'move' ret[469094](469129 'coerce' call_tmp[610215] bool[10]))
      gotoReturn _end_equals[469092] _end_equals[469092]
    }
    label _end_equals[469092]
    (469096 return ret[469094])
  }
  { scopeless type
    bool[10]
  }
  function _cast[133931](arg t[133928]:_array[133150](?), param arg arg[133933]:_any[170](?)) : _unknown[43] "no doc"
  {
    unknown ret[469136] "RVV" "temp"
    unknown result[133936] "insert auto destroy"
    (491622 'default init var' result[133936] t[133928])
    (133944 call chpl__transferArray result[133936] arg[133933])
    (469141 'move' ret[469136](469140 'deref' result[133936]))
    (469138 return ret[469136])
  }
  function _cast[133957](arg t[133954]:string[24], arg x[133962]:_array[133150](?)) : _unknown[43] "no doc"
  {
    unknown ret[469145] "RVV" "temp"
    unknown call_tmp[610220] "expr temp" "maybe param" "maybe type" "temp"
    (610223 'move' call_tmp[610220](133968 call stringify x[133962]))
    (469150 'move' ret[469145](469149 'deref' call_tmp[610220]))
    (469147 return ret[469145])
  }
  function isDmapType[133978](arg t[133976]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469172] "RVV" "param" "temp"
    function isDmapHelp[133986](arg t[133983]:_distribution[116702](?)) param : _unknown[43]
    {
      unknown ret[469154] "RVV" "param" "temp"
      (469159 'move' ret[469154](469158 'deref' 1))
      (469156 return ret[469154])
    }
    function isDmapHelp[133999](arg t[133997]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[469163] "RVV" "param" "temp"
      (469168 'move' ret[469163](469167 'deref' 0))
      (469165 return ret[469163])
    }
    unknown call_tmp[610225] "expr temp" "maybe param" "maybe type" "temp"
    (610228 'move' call_tmp[610225](134010 call isDmapHelp t[133976]))
    (469177 'move' ret[469172](469176 'deref' call_tmp[610225]))
    (469174 return ret[469172])
  }
  function isDmapValue[134021](arg e[134018]:_distribution[116702](?)) param : _unknown[43] "no doc"
  {
    unknown ret[469181] "RVV" "param" "temp"
    (469186 'move' ret[469181](469185 'deref' 1))
    (469183 return ret[469181])
  }
  function isDmapValue[134033](arg e[134031]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469190] "RVV" "param" "temp"
    (469195 'move' ret[469190](469194 'deref' 0))
    (469192 return ret[469190])
  }
  function isDomainType[134045](arg t[134043]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469199] "RVV" "param" "temp"
    unknown call_tmp[610230] "expr temp" "maybe param" "maybe type" "temp"
    (610233 'move' call_tmp[610230](328602 'is_subtype' _domain[123390](?) t[134043]))
    (469204 'move' ret[469199](469203 'deref' call_tmp[610230]))
    (469201 return ret[469199])
  }
  function isDomainValue[134063](arg e[134060]:_domain[123390](?)) param : _unknown[43] "no doc"
  {
    unknown ret[469208] "RVV" "param" "temp"
    (469213 'move' ret[469208](469212 'deref' 1))
    (469210 return ret[469208])
  }
  function isDomainValue[134075](arg e[134073]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469217] "RVV" "param" "temp"
    (469222 'move' ret[469217](469221 'deref' 0))
    (469219 return ret[469217])
  }
  function isArrayType[134087](arg t[134085]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469226] "RVV" "param" "temp"
    unknown call_tmp[610235] "expr temp" "maybe param" "maybe type" "temp"
    (610238 'move' call_tmp[610235](328603 'is_subtype' _array[133150](?) t[134085]))
    (469231 'move' ret[469226](469230 'deref' call_tmp[610235]))
    (469228 return ret[469226])
  }
  function isArrayValue[134107](arg e[134104]:_array[133150](?)) param : _unknown[43] "no doc"
  {
    unknown ret[469235] "RVV" "param" "temp"
    (469240 'move' ret[469235](469239 'deref' 1))
    (469237 return ret[469235])
  }
  function isArrayValue[134119](arg e[134117]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469244] "RVV" "param" "temp"
    (469249 'move' ret[469244](469248 'deref' 0))
    (469246 return ret[469244])
  }
  function +[134133](arg a[134130]:_array[133150](?), arg b[134136]:_array[133150](?)) : _unknown[43]
  {
    unknown ret[469253] "RVV" "temp"
    (134175 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown call_tmp[610240] "expr temp" "maybe param" "maybe type" "temp"
    (610243 'move' call_tmp[610240](134180 call | a[134130] b[134136]))
    (469258 'move' ret[469253](469257 'deref' call_tmp[610240]))
    (469255 return ret[469253])
  }
  where {
    unknown tmp[401265] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443541] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610247] "expr temp" "maybe param" "maybe type" "temp"
      (610250 'move' call_tmp[610247](134140 call _value _mt[232] a[134130]))
      (443545 'move' call_type_tmp[443541](134143 'typeof' call_tmp[610247]))
    }
    { scopeless type
      unknown call_type_tmp[443547] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610254] "expr temp" "maybe param" "maybe type" "temp"
      (610257 'move' call_tmp[610254](134145 call _value _mt[232] b[134136]))
      (443551 'move' call_type_tmp[443547](134148 'typeof' call_tmp[610254]))
    }
    (401276 'move' tmp[401265](134149 call == call_type_tmp[443541] call_type_tmp[443547]))
    unknown call_tmp[610259] "expr temp" "maybe param" "maybe type" "temp"
    (610262 'move' call_tmp[610259](401278 call _cond_invalid tmp[401265]))
    if call_tmp[610259]
    {
      (401281 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515573] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515574] "maybe param" "temp"
    unknown call_tmp[610264] "expr temp" "maybe param" "maybe type" "temp"
    (610267 'move' call_tmp[610264](401266 call isTrue tmp[401265]))
    (515579 'move' tmp[515574](515577 call _cond_test call_tmp[610264]))
    if tmp[515574]
    {
      unknown tmp[515581] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610269] "expr temp" "maybe param" "maybe type" "temp"
      (610272 'move' call_tmp[610269](134154 call isAssociativeArr a[134130]))
      (515583 'move' tmp[515581](401269 call isTrue call_tmp[610269]))
      (515588 'move' tmp[515573](515585 '_paramFoldLogical' tmp[515574] tmp[515581]))
    }
    {
      (515593 'move' tmp[515573](515590 '_paramFoldLogical' tmp[515574] 0))
    }
    (691901 call _statementLevelSymbol tmp[515573])
  }
  function +=[134193](ref arg a[134190]:_array[133150](?), arg b[134196]:_array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (134220 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134231 call(134226 call (partial) chpl__assertSingleArrayDomain _mt[232] a[134190]) "+=")
    (134235 call |= a[134190] b[134196])
    (469260 return _void[47])
  }
  where {
    unknown tmp[401286] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443553] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610278] "expr temp" "maybe param" "maybe type" "temp"
      (610281 'move' call_tmp[610278](134200 call _value _mt[232] a[134190]))
      (443557 'move' call_type_tmp[443553](134203 'typeof' call_tmp[610278]))
    }
    { scopeless type
      unknown call_type_tmp[443559] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610285] "expr temp" "maybe param" "maybe type" "temp"
      (610288 'move' call_tmp[610285](134205 call _value _mt[232] b[134196]))
      (443563 'move' call_type_tmp[443559](134208 'typeof' call_tmp[610285]))
    }
    (401297 'move' tmp[401286](134209 call == call_type_tmp[443553] call_type_tmp[443559]))
    unknown call_tmp[610290] "expr temp" "maybe param" "maybe type" "temp"
    (610293 'move' call_tmp[610290](401299 call _cond_invalid tmp[401286]))
    if call_tmp[610290]
    {
      (401302 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515600] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515601] "maybe param" "temp"
    unknown call_tmp[610295] "expr temp" "maybe param" "maybe type" "temp"
    (610298 'move' call_tmp[610295](401287 call isTrue tmp[401286]))
    (515606 'move' tmp[515601](515604 call _cond_test call_tmp[610295]))
    if tmp[515601]
    {
      unknown tmp[515608] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610300] "expr temp" "maybe param" "maybe type" "temp"
      (610303 'move' call_tmp[610300](134214 call isAssociativeArr a[134190]))
      (515610 'move' tmp[515608](401290 call isTrue call_tmp[610300]))
      (515615 'move' tmp[515600](515612 '_paramFoldLogical' tmp[515601] tmp[515608]))
    }
    {
      (515620 'move' tmp[515600](515617 '_paramFoldLogical' tmp[515601] 0))
    }
    (691903 call _statementLevelSymbol tmp[515600])
  }
  function |[134247](arg a[134244]:_array[133150](?), arg b[134250]:_array[133150](?)) : _unknown[43]
  {
    unknown ret[469264] "RVV" "temp"
    (134274 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown call_tmp[610307] "expr temp" "maybe param" "maybe type" "temp"
    (610310 'move' call_tmp[610307](134278 call _dom _mt[232] a[134244]))
    unknown call_tmp[610314] "expr temp" "maybe param" "maybe type" "temp"
    (610317 'move' call_tmp[610314](134282 call _dom _mt[232] b[134250]))
    unknown call_tmp[610319] "maybe param" "maybe type" "temp"
    (610322 'move' call_tmp[610319](134285 call | call_tmp[610307] call_tmp[610314]))
    unknown newDom[134287] "insert auto destroy"
    (491624 'init var' newDom[134287] call_tmp[610319])
    unknown ret[134300] "insert auto destroy"
    unknown call_tmp[610324] "expr temp" "maybe param" "maybe type" "temp"
    (610327 'move' call_tmp[610324](134296 call chpl__ensureDomainExpr newDom[134287]))
    unknown call_tmp[610331] "expr temp" "maybe param" "maybe type" "temp"
    (610334 'move' call_tmp[610331](134293 call eltType _mt[232] a[134244]))
    unknown call_tmp[610336] "expr temp" "maybe param" "maybe type" "temp"
    (610339 'move' call_tmp[610336](134298 call chpl__buildArrayRuntimeType call_tmp[610324] call_tmp[610331]))
    (491626 'default init var' ret[134300] call_tmp[610336])
    {
      unknown call_tmp[610341] "maybe param" "maybe type" "temp"
      (610344 'move' call_tmp[610341](134369 'task_get_serial'))
      unknown tmp[134368] "insert auto destroy" "temp"
      (491628 'init var' tmp[134368] call_tmp[610341])
      unknown call_tmp[610348] "expr temp" "maybe param" "maybe type" "temp"
      (610351 'move' call_tmp[610348](134304 call _value _mt[232] newDom[134287]))
      unknown call_tmp[610355] "expr temp" "maybe param" "maybe type" "temp"
      (610358 'move' call_tmp[610355](134307 call parSafe _mt[232] call_tmp[610348]))
      unknown call_tmp[610360] "expr temp" "maybe param" "maybe type" "temp"
      (610363 'move' call_tmp[610360](134310 call ! call_tmp[610355]))
      unknown call_tmp[610365] "expr temp" "maybe param" "maybe type" "temp"
      (610368 'move' call_tmp[610365](134365 call _cond_test call_tmp[610360]))
      if call_tmp[610365]
      {
        (134371 'task_set_serial' 1)
      }
      {
        unknown call_tmp[610372] "expr temp" "maybe param" "maybe type" "temp"
        (610375 'move' call_tmp[610372](134318 call _dom _mt[232] a[134244]))
        Forall {
          induction variables:
            
            unknown k[134333] "index var" "insert auto destroy"
            
            unknown v[134335] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[610372]
            a[134244]
          shadow variables:
          forall body
          {
            unknown call_tmp[610377] "expr temp" "maybe param" "maybe type" "temp"
            (610380 'move' call_tmp[610377](134327 call ret[134300] k[134333]))
            (134329 call = call_tmp[610377] v[134335])
          }
        }
        unknown call_tmp[610384] "expr temp" "maybe param" "maybe type" "temp"
        (610387 'move' call_tmp[610384](134345 call _dom _mt[232] b[134250]))
        Forall {
          induction variables:
            
            unknown k[134360] "index var" "insert auto destroy"
            
            unknown v[134362] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[610384]
            b[134250]
          shadow variables:
          forall body
          {
            unknown call_tmp[610389] "expr temp" "maybe param" "maybe type" "temp"
            (610392 'move' call_tmp[610389](134354 call ret[134300] k[134360]))
            (134356 call = call_tmp[610389] v[134362])
          }
        }
      }
      (134375 'task_set_serial' tmp[134368])
    }
    (469269 'move' ret[469264](469268 'deref' ret[134300]))
    (469266 return ret[469264])
  }
  where {
    unknown tmp[401307] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443565] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610396] "expr temp" "maybe param" "maybe type" "temp"
      (610399 'move' call_tmp[610396](134254 call _value _mt[232] a[134244]))
      (443569 'move' call_type_tmp[443565](134257 'typeof' call_tmp[610396]))
    }
    { scopeless type
      unknown call_type_tmp[443571] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610403] "expr temp" "maybe param" "maybe type" "temp"
      (610406 'move' call_tmp[610403](134259 call _value _mt[232] b[134250]))
      (443575 'move' call_type_tmp[443571](134262 'typeof' call_tmp[610403]))
    }
    (401318 'move' tmp[401307](134263 call == call_type_tmp[443565] call_type_tmp[443571]))
    unknown call_tmp[610408] "expr temp" "maybe param" "maybe type" "temp"
    (610411 'move' call_tmp[610408](401320 call _cond_invalid tmp[401307]))
    if call_tmp[610408]
    {
      (401323 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515627] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515628] "maybe param" "temp"
    unknown call_tmp[610413] "expr temp" "maybe param" "maybe type" "temp"
    (610416 'move' call_tmp[610413](401308 call isTrue tmp[401307]))
    (515633 'move' tmp[515628](515631 call _cond_test call_tmp[610413]))
    if tmp[515628]
    {
      unknown tmp[515635] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610418] "expr temp" "maybe param" "maybe type" "temp"
      (610421 'move' call_tmp[610418](134268 call isAssociativeArr a[134244]))
      (515637 'move' tmp[515635](401311 call isTrue call_tmp[610418]))
      (515642 'move' tmp[515627](515639 '_paramFoldLogical' tmp[515628] tmp[515635]))
    }
    {
      (515647 'move' tmp[515627](515644 '_paramFoldLogical' tmp[515628] 0))
    }
    (691905 call _statementLevelSymbol tmp[515627])
  }
  function |=[134389](ref arg a[134386]:_array[133150](?), arg b[134392]:_array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (134416 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134425 call(134420 call (partial) chpl__assertSingleArrayDomain _mt[232] a[134386]) "|=")
    {
      unknown call_tmp[610425] "maybe param" "maybe type" "temp"
      (610428 'move' call_tmp[610425](134490 'task_get_serial'))
      unknown tmp[134489] "insert auto destroy" "temp"
      (491630 'init var' tmp[134489] call_tmp[610425])
      unknown call_tmp[610432] "expr temp" "maybe param" "maybe type" "temp"
      (610435 'move' call_tmp[610432](134428 call _dom _mt[232] a[134386]))
      unknown call_tmp[610439] "expr temp" "maybe param" "maybe type" "temp"
      (610442 'move' call_tmp[610439](134431 call _value _mt[232] call_tmp[610432]))
      unknown call_tmp[610446] "expr temp" "maybe param" "maybe type" "temp"
      (610449 'move' call_tmp[610446](134434 call parSafe _mt[232] call_tmp[610439]))
      unknown call_tmp[610451] "expr temp" "maybe param" "maybe type" "temp"
      (610454 'move' call_tmp[610451](134437 call ! call_tmp[610446]))
      unknown call_tmp[610456] "expr temp" "maybe param" "maybe type" "temp"
      (610459 'move' call_tmp[610456](134486 call _cond_test call_tmp[610451]))
      if call_tmp[610456]
      {
        (134492 'task_set_serial' 1)
      }
      {
        unknown call_tmp[610463] "expr temp" "maybe param" "maybe type" "temp"
        (610466 'move' call_tmp[610463](134441 call _dom _mt[232] b[134392]))
        Forall {
          induction variables:
            
            unknown i[134456] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[610463]
          shadow variables:
          forall body
          {
            unknown call_tmp[610470] "expr temp" "maybe param" "maybe type" "temp"
            (610473 'move' call_tmp[610470](134445 call _dom _mt[232] a[134386]))
            (134453 call(134448 call (partial) add _mt[232] call_tmp[610470]) i[134456])
          }
        }
        unknown call_tmp[610479] "expr temp" "maybe param" "maybe type" "temp"
        (610482 'move' call_tmp[610479](134466 call _dom _mt[232] b[134392]))
        Forall {
          induction variables:
            
            unknown k[134481] "index var" "insert auto destroy"
            
            unknown v[134483] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[610479]
            b[134392]
          shadow variables:
          forall body
          {
            unknown call_tmp[610484] "expr temp" "maybe param" "maybe type" "temp"
            (610487 'move' call_tmp[610484](134475 call a[134386] k[134481]))
            (134477 call = call_tmp[610484] v[134483])
          }
        }
      }
      (134496 'task_set_serial' tmp[134489])
    }
    (469271 return _void[47])
  }
  where {
    unknown tmp[401328] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443577] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610491] "expr temp" "maybe param" "maybe type" "temp"
      (610494 'move' call_tmp[610491](134396 call _value _mt[232] a[134386]))
      (443581 'move' call_type_tmp[443577](134399 'typeof' call_tmp[610491]))
    }
    { scopeless type
      unknown call_type_tmp[443583] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610498] "expr temp" "maybe param" "maybe type" "temp"
      (610501 'move' call_tmp[610498](134401 call _value _mt[232] b[134392]))
      (443587 'move' call_type_tmp[443583](134404 'typeof' call_tmp[610498]))
    }
    (401339 'move' tmp[401328](134405 call == call_type_tmp[443577] call_type_tmp[443583]))
    unknown call_tmp[610503] "expr temp" "maybe param" "maybe type" "temp"
    (610506 'move' call_tmp[610503](401341 call _cond_invalid tmp[401328]))
    if call_tmp[610503]
    {
      (401344 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515654] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515655] "maybe param" "temp"
    unknown call_tmp[610508] "expr temp" "maybe param" "maybe type" "temp"
    (610511 'move' call_tmp[610508](401329 call isTrue tmp[401328]))
    (515660 'move' tmp[515655](515658 call _cond_test call_tmp[610508]))
    if tmp[515655]
    {
      unknown tmp[515662] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610513] "expr temp" "maybe param" "maybe type" "temp"
      (610516 'move' call_tmp[610513](134410 call isAssociativeArr a[134386]))
      (515664 'move' tmp[515662](401332 call isTrue call_tmp[610513]))
      (515669 'move' tmp[515654](515666 '_paramFoldLogical' tmp[515655] tmp[515662]))
    }
    {
      (515674 'move' tmp[515654](515671 '_paramFoldLogical' tmp[515655] 0))
    }
    (691907 call _statementLevelSymbol tmp[515654])
  }
  function &[134507](arg a[134504]:_array[133150](?), arg b[134510]:_array[133150](?)) : _unknown[43]
  {
    unknown ret[469275] "RVV" "temp"
    (134534 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown call_tmp[610520] "expr temp" "maybe param" "maybe type" "temp"
    (610523 'move' call_tmp[610520](134538 call _dom _mt[232] a[134504]))
    unknown call_tmp[610527] "expr temp" "maybe param" "maybe type" "temp"
    (610530 'move' call_tmp[610527](134542 call _dom _mt[232] b[134510]))
    unknown call_tmp[610532] "maybe param" "maybe type" "temp"
    (610535 'move' call_tmp[610532](134545 call & call_tmp[610520] call_tmp[610527]))
    unknown newDom[134547] "insert auto destroy"
    (491632 'init var' newDom[134547] call_tmp[610532])
    unknown ret[134560] "insert auto destroy"
    unknown call_tmp[610537] "expr temp" "maybe param" "maybe type" "temp"
    (610540 'move' call_tmp[610537](134556 call chpl__ensureDomainExpr newDom[134547]))
    unknown call_tmp[610544] "expr temp" "maybe param" "maybe type" "temp"
    (610547 'move' call_tmp[610544](134553 call eltType _mt[232] a[134504]))
    unknown call_tmp[610549] "expr temp" "maybe param" "maybe type" "temp"
    (610552 'move' call_tmp[610549](134558 call chpl__buildArrayRuntimeType call_tmp[610537] call_tmp[610544]))
    (491634 'default init var' ret[134560] call_tmp[610549])
    {
      unknown call_tmp[610554] "maybe param" "maybe type" "temp"
      (610557 'move' call_tmp[610554](134593 'task_get_serial'))
      unknown tmp[134592] "insert auto destroy" "temp"
      (491636 'init var' tmp[134592] call_tmp[610554])
      unknown call_tmp[610561] "expr temp" "maybe param" "maybe type" "temp"
      (610564 'move' call_tmp[610561](134564 call _value _mt[232] newDom[134547]))
      unknown call_tmp[610568] "expr temp" "maybe param" "maybe type" "temp"
      (610571 'move' call_tmp[610568](134567 call parSafe _mt[232] call_tmp[610561]))
      unknown call_tmp[610573] "expr temp" "maybe param" "maybe type" "temp"
      (610576 'move' call_tmp[610573](134570 call ! call_tmp[610568]))
      unknown call_tmp[610578] "expr temp" "maybe param" "maybe type" "temp"
      (610581 'move' call_tmp[610578](134589 call _cond_test call_tmp[610573]))
      if call_tmp[610578]
      {
        (134595 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[134586] "index var" "insert auto destroy"
        iterated expressions:
          newDom[134547]
        shadow variables:
        forall body
        {
          unknown call_tmp[610583] "expr temp" "maybe param" "maybe type" "temp"
          (610586 'move' call_tmp[610583](134577 call ret[134560] k[134586]))
          unknown call_tmp[610588] "expr temp" "maybe param" "maybe type" "temp"
          (610591 'move' call_tmp[610588](134581 call a[134504] k[134586]))
          (134582 call = call_tmp[610583] call_tmp[610588])
        }
      }
      (134599 'task_set_serial' tmp[134592])
    }
    (469280 'move' ret[469275](469279 'deref' ret[134560]))
    (469277 return ret[469275])
  }
  where {
    unknown tmp[401349] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443589] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610595] "expr temp" "maybe param" "maybe type" "temp"
      (610598 'move' call_tmp[610595](134514 call _value _mt[232] a[134504]))
      (443593 'move' call_type_tmp[443589](134517 'typeof' call_tmp[610595]))
    }
    { scopeless type
      unknown call_type_tmp[443595] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610602] "expr temp" "maybe param" "maybe type" "temp"
      (610605 'move' call_tmp[610602](134519 call _value _mt[232] b[134510]))
      (443599 'move' call_type_tmp[443595](134522 'typeof' call_tmp[610602]))
    }
    (401360 'move' tmp[401349](134523 call == call_type_tmp[443589] call_type_tmp[443595]))
    unknown call_tmp[610607] "expr temp" "maybe param" "maybe type" "temp"
    (610610 'move' call_tmp[610607](401362 call _cond_invalid tmp[401349]))
    if call_tmp[610607]
    {
      (401365 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515681] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515682] "maybe param" "temp"
    unknown call_tmp[610612] "expr temp" "maybe param" "maybe type" "temp"
    (610615 'move' call_tmp[610612](401350 call isTrue tmp[401349]))
    (515687 'move' tmp[515682](515685 call _cond_test call_tmp[610612]))
    if tmp[515682]
    {
      unknown tmp[515689] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610617] "expr temp" "maybe param" "maybe type" "temp"
      (610620 'move' call_tmp[610617](134528 call isAssociativeArr a[134504]))
      (515691 'move' tmp[515689](401353 call isTrue call_tmp[610617]))
      (515696 'move' tmp[515681](515693 '_paramFoldLogical' tmp[515682] tmp[515689]))
    }
    {
      (515701 'move' tmp[515681](515698 '_paramFoldLogical' tmp[515682] 0))
    }
    (691909 call _statementLevelSymbol tmp[515681])
  }
  function &=[134613](ref arg a[134610]:_array[133150](?), arg b[134616]:_array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (134640 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134649 call(134644 call (partial) chpl__assertSingleArrayDomain _mt[232] a[134610]) "&=")
    {
      unknown call_tmp[610624] "maybe param" "maybe type" "temp"
      (610627 'move' call_tmp[610624](134706 'task_get_serial'))
      unknown tmp[134705] "insert auto destroy" "temp"
      (491638 'init var' tmp[134705] call_tmp[610624])
      unknown call_tmp[610631] "expr temp" "maybe param" "maybe type" "temp"
      (610634 'move' call_tmp[610631](134652 call _dom _mt[232] a[134610]))
      unknown call_tmp[610638] "expr temp" "maybe param" "maybe type" "temp"
      (610641 'move' call_tmp[610638](134655 call _value _mt[232] call_tmp[610631]))
      unknown call_tmp[610645] "expr temp" "maybe param" "maybe type" "temp"
      (610648 'move' call_tmp[610645](134658 call parSafe _mt[232] call_tmp[610638]))
      unknown call_tmp[610650] "expr temp" "maybe param" "maybe type" "temp"
      (610653 'move' call_tmp[610650](134661 call ! call_tmp[610645]))
      unknown call_tmp[610655] "expr temp" "maybe param" "maybe type" "temp"
      (610658 'move' call_tmp[610655](134702 call _cond_test call_tmp[610650]))
      if call_tmp[610655]
      {
        (134708 'task_set_serial' 1)
      }
      {
        unknown call_tmp[610662] "expr temp" "maybe param" "maybe type" "temp"
        (610665 'move' call_tmp[610662](134665 call _dom _mt[232] a[134610]))
        Forall {
          induction variables:
            
            unknown k[134698] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[610662]
          shadow variables:
          forall body
          {
            unknown call_tmp[610669] "expr temp" "maybe param" "maybe type" "temp"
            (610672 'move' call_tmp[610669](134669 call _dom _mt[232] b[134616]))
            unknown call_tmp[610676] "expr temp" "maybe param" "maybe type" "temp"
            (610679 'move' call_tmp[610676](134677 call(134672 call (partial) contains _mt[232] call_tmp[610669]) k[134698]))
            unknown call_tmp[610681] "expr temp" "maybe param" "maybe type" "temp"
            (610684 'move' call_tmp[610681](134678 call ! call_tmp[610676]))
            unknown call_tmp[610686] "expr temp" "maybe param" "maybe type" "temp"
            (610689 'move' call_tmp[610686](134691 call _cond_test call_tmp[610681]))
            if call_tmp[610686]
            {
              unknown call_tmp[610693] "expr temp" "maybe param" "maybe type" "temp"
              (610696 'move' call_tmp[610693](134681 call _dom _mt[232] a[134610]))
              (134689 call(134684 call (partial) remove _mt[232] call_tmp[610693]) k[134698])
            }
          }
        }
      }
      (134712 'task_set_serial' tmp[134705])
    }
    (469282 return _void[47])
  }
  where {
    unknown tmp[401370] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443601] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610702] "expr temp" "maybe param" "maybe type" "temp"
      (610705 'move' call_tmp[610702](134620 call _value _mt[232] a[134610]))
      (443605 'move' call_type_tmp[443601](134623 'typeof' call_tmp[610702]))
    }
    { scopeless type
      unknown call_type_tmp[443607] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610709] "expr temp" "maybe param" "maybe type" "temp"
      (610712 'move' call_tmp[610709](134625 call _value _mt[232] b[134616]))
      (443611 'move' call_type_tmp[443607](134628 'typeof' call_tmp[610709]))
    }
    (401381 'move' tmp[401370](134629 call == call_type_tmp[443601] call_type_tmp[443607]))
    unknown call_tmp[610714] "expr temp" "maybe param" "maybe type" "temp"
    (610717 'move' call_tmp[610714](401383 call _cond_invalid tmp[401370]))
    if call_tmp[610714]
    {
      (401386 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515708] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515709] "maybe param" "temp"
    unknown call_tmp[610719] "expr temp" "maybe param" "maybe type" "temp"
    (610722 'move' call_tmp[610719](401371 call isTrue tmp[401370]))
    (515714 'move' tmp[515709](515712 call _cond_test call_tmp[610719]))
    if tmp[515709]
    {
      unknown tmp[515716] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610724] "expr temp" "maybe param" "maybe type" "temp"
      (610727 'move' call_tmp[610724](134634 call isAssociativeArr a[134610]))
      (515718 'move' tmp[515716](401374 call isTrue call_tmp[610724]))
      (515723 'move' tmp[515708](515720 '_paramFoldLogical' tmp[515709] tmp[515716]))
    }
    {
      (515728 'move' tmp[515708](515725 '_paramFoldLogical' tmp[515709] 0))
    }
    (691911 call _statementLevelSymbol tmp[515708])
  }
  function -[134723](arg a[134720]:_array[133150](?), arg b[134726]:_array[133150](?)) : _unknown[43]
  {
    unknown ret[469286] "RVV" "temp"
    (134750 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown call_tmp[610731] "expr temp" "maybe param" "maybe type" "temp"
    (610734 'move' call_tmp[610731](134754 call _dom _mt[232] a[134720]))
    unknown call_tmp[610738] "expr temp" "maybe param" "maybe type" "temp"
    (610741 'move' call_tmp[610738](134758 call _dom _mt[232] b[134726]))
    unknown call_tmp[610743] "maybe param" "maybe type" "temp"
    (610746 'move' call_tmp[610743](134761 call - call_tmp[610731] call_tmp[610738]))
    unknown newDom[134763] "insert auto destroy"
    (491640 'init var' newDom[134763] call_tmp[610743])
    unknown ret[134776] "insert auto destroy"
    unknown call_tmp[610748] "expr temp" "maybe param" "maybe type" "temp"
    (610751 'move' call_tmp[610748](134772 call chpl__ensureDomainExpr newDom[134763]))
    unknown call_tmp[610755] "expr temp" "maybe param" "maybe type" "temp"
    (610758 'move' call_tmp[610755](134769 call eltType _mt[232] a[134720]))
    unknown call_tmp[610760] "expr temp" "maybe param" "maybe type" "temp"
    (610763 'move' call_tmp[610760](134774 call chpl__buildArrayRuntimeType call_tmp[610748] call_tmp[610755]))
    (491642 'default init var' ret[134776] call_tmp[610760])
    {
      unknown call_tmp[610765] "maybe param" "maybe type" "temp"
      (610768 'move' call_tmp[610765](134809 'task_get_serial'))
      unknown tmp[134808] "insert auto destroy" "temp"
      (491644 'init var' tmp[134808] call_tmp[610765])
      unknown call_tmp[610772] "expr temp" "maybe param" "maybe type" "temp"
      (610775 'move' call_tmp[610772](134780 call _value _mt[232] newDom[134763]))
      unknown call_tmp[610779] "expr temp" "maybe param" "maybe type" "temp"
      (610782 'move' call_tmp[610779](134783 call parSafe _mt[232] call_tmp[610772]))
      unknown call_tmp[610784] "expr temp" "maybe param" "maybe type" "temp"
      (610787 'move' call_tmp[610784](134786 call ! call_tmp[610779]))
      unknown call_tmp[610789] "expr temp" "maybe param" "maybe type" "temp"
      (610792 'move' call_tmp[610789](134805 call _cond_test call_tmp[610784]))
      if call_tmp[610789]
      {
        (134811 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[134802] "index var" "insert auto destroy"
        iterated expressions:
          newDom[134763]
        shadow variables:
        forall body
        {
          unknown call_tmp[610794] "expr temp" "maybe param" "maybe type" "temp"
          (610797 'move' call_tmp[610794](134793 call ret[134776] k[134802]))
          unknown call_tmp[610799] "expr temp" "maybe param" "maybe type" "temp"
          (610802 'move' call_tmp[610799](134797 call a[134720] k[134802]))
          (134798 call = call_tmp[610794] call_tmp[610799])
        }
      }
      (134815 'task_set_serial' tmp[134808])
    }
    (469291 'move' ret[469286](469290 'deref' ret[134776]))
    (469288 return ret[469286])
  }
  where {
    unknown tmp[401391] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443613] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610806] "expr temp" "maybe param" "maybe type" "temp"
      (610809 'move' call_tmp[610806](134730 call _value _mt[232] a[134720]))
      (443617 'move' call_type_tmp[443613](134733 'typeof' call_tmp[610806]))
    }
    { scopeless type
      unknown call_type_tmp[443619] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610813] "expr temp" "maybe param" "maybe type" "temp"
      (610816 'move' call_tmp[610813](134735 call _value _mt[232] b[134726]))
      (443623 'move' call_type_tmp[443619](134738 'typeof' call_tmp[610813]))
    }
    (401402 'move' tmp[401391](134739 call == call_type_tmp[443613] call_type_tmp[443619]))
    unknown call_tmp[610818] "expr temp" "maybe param" "maybe type" "temp"
    (610821 'move' call_tmp[610818](401404 call _cond_invalid tmp[401391]))
    if call_tmp[610818]
    {
      (401407 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515735] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515736] "maybe param" "temp"
    unknown call_tmp[610823] "expr temp" "maybe param" "maybe type" "temp"
    (610826 'move' call_tmp[610823](401392 call isTrue tmp[401391]))
    (515741 'move' tmp[515736](515739 call _cond_test call_tmp[610823]))
    if tmp[515736]
    {
      unknown tmp[515743] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610828] "expr temp" "maybe param" "maybe type" "temp"
      (610831 'move' call_tmp[610828](134744 call isAssociativeArr a[134720]))
      (515745 'move' tmp[515743](401395 call isTrue call_tmp[610828]))
      (515750 'move' tmp[515735](515747 '_paramFoldLogical' tmp[515736] tmp[515743]))
    }
    {
      (515755 'move' tmp[515735](515752 '_paramFoldLogical' tmp[515736] 0))
    }
    (691913 call _statementLevelSymbol tmp[515735])
  }
  function -=[134829](ref arg a[134826]:_array[133150](?), arg b[134832]:_array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (134856 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134865 call(134860 call (partial) chpl__assertSingleArrayDomain _mt[232] a[134826]) "-=")
    {
      unknown call_tmp[610835] "maybe param" "maybe type" "temp"
      (610838 'move' call_tmp[610835](134918 'task_get_serial'))
      unknown tmp[134917] "insert auto destroy" "temp"
      (491646 'init var' tmp[134917] call_tmp[610835])
      unknown call_tmp[610842] "expr temp" "maybe param" "maybe type" "temp"
      (610845 'move' call_tmp[610842](134868 call _dom _mt[232] a[134826]))
      unknown call_tmp[610849] "expr temp" "maybe param" "maybe type" "temp"
      (610852 'move' call_tmp[610849](134871 call _value _mt[232] call_tmp[610842]))
      unknown call_tmp[610856] "expr temp" "maybe param" "maybe type" "temp"
      (610859 'move' call_tmp[610856](134874 call parSafe _mt[232] call_tmp[610849]))
      unknown call_tmp[610861] "expr temp" "maybe param" "maybe type" "temp"
      (610864 'move' call_tmp[610861](134877 call ! call_tmp[610856]))
      unknown call_tmp[610866] "expr temp" "maybe param" "maybe type" "temp"
      (610869 'move' call_tmp[610866](134914 call _cond_test call_tmp[610861]))
      if call_tmp[610866]
      {
        (134920 'task_set_serial' 1)
      }
      unknown call_tmp[610873] "expr temp" "maybe param" "maybe type" "temp"
      (610876 'move' call_tmp[610873](134881 call _dom _mt[232] a[134826]))
      Forall {
        induction variables:
          
          unknown k[134911] "index var" "insert auto destroy"
        iterated expressions:
          call_tmp[610873]
        shadow variables:
        forall body
        {
          unknown call_tmp[610880] "expr temp" "maybe param" "maybe type" "temp"
          (610883 'move' call_tmp[610880](134885 call _dom _mt[232] b[134832]))
          unknown call_tmp[610887] "expr temp" "maybe param" "maybe type" "temp"
          (610890 'move' call_tmp[610887](134893 call(134888 call (partial) contains _mt[232] call_tmp[610880]) k[134911]))
          unknown call_tmp[610892] "expr temp" "maybe param" "maybe type" "temp"
          (610895 'move' call_tmp[610892](134905 call _cond_test call_tmp[610887]))
          if call_tmp[610892]
          {
            unknown call_tmp[610899] "expr temp" "maybe param" "maybe type" "temp"
            (610902 'move' call_tmp[610899](134895 call _dom _mt[232] a[134826]))
            (134903 call(134898 call (partial) remove _mt[232] call_tmp[610899]) k[134911])
          }
        }
      }
      (134924 'task_set_serial' tmp[134917])
    }
    (469293 return _void[47])
  }
  where {
    unknown tmp[401412] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443625] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610908] "expr temp" "maybe param" "maybe type" "temp"
      (610911 'move' call_tmp[610908](134836 call _value _mt[232] a[134826]))
      (443629 'move' call_type_tmp[443625](134839 'typeof' call_tmp[610908]))
    }
    { scopeless type
      unknown call_type_tmp[443631] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[610915] "expr temp" "maybe param" "maybe type" "temp"
      (610918 'move' call_tmp[610915](134841 call _value _mt[232] b[134832]))
      (443635 'move' call_type_tmp[443631](134844 'typeof' call_tmp[610915]))
    }
    (401423 'move' tmp[401412](134845 call == call_type_tmp[443625] call_type_tmp[443631]))
    unknown call_tmp[610920] "expr temp" "maybe param" "maybe type" "temp"
    (610923 'move' call_tmp[610920](401425 call _cond_invalid tmp[401412]))
    if call_tmp[610920]
    {
      (401428 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515762] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515763] "maybe param" "temp"
    unknown call_tmp[610925] "expr temp" "maybe param" "maybe type" "temp"
    (610928 'move' call_tmp[610925](401413 call isTrue tmp[401412]))
    (515768 'move' tmp[515763](515766 call _cond_test call_tmp[610925]))
    if tmp[515763]
    {
      unknown tmp[515770] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[610930] "expr temp" "maybe param" "maybe type" "temp"
      (610933 'move' call_tmp[610930](134850 call isAssociativeArr a[134826]))
      (515772 'move' tmp[515770](401416 call isTrue call_tmp[610930]))
      (515777 'move' tmp[515762](515774 '_paramFoldLogical' tmp[515763] tmp[515770]))
    }
    {
      (515782 'move' tmp[515762](515779 '_paramFoldLogical' tmp[515763] 0))
    }
    (691915 call _statementLevelSymbol tmp[515762])
  }
  function ^[134935](arg a[134932]:_array[133150](?), arg b[134938]:_array[133150](?)) : _unknown[43]
  {
    unknown ret[469297] "RVV" "temp"
    (134962 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown call_tmp[610937] "expr temp" "maybe param" "maybe type" "temp"
    (610940 'move' call_tmp[610937](134966 call _dom _mt[232] a[134932]))
    unknown call_tmp[610944] "expr temp" "maybe param" "maybe type" "temp"
    (610947 'move' call_tmp[610944](134970 call _dom _mt[232] b[134938]))
    unknown call_tmp[610949] "maybe param" "maybe type" "temp"
    (610952 'move' call_tmp[610949](134973 call ^ call_tmp[610937] call_tmp[610944]))
    unknown newDom[134975] "insert auto destroy"
    (491648 'init var' newDom[134975] call_tmp[610949])
    unknown ret[134988] "insert auto destroy"
    unknown call_tmp[610954] "expr temp" "maybe param" "maybe type" "temp"
    (610957 'move' call_tmp[610954](134984 call chpl__ensureDomainExpr newDom[134975]))
    unknown call_tmp[610961] "expr temp" "maybe param" "maybe type" "temp"
    (610964 'move' call_tmp[610961](134981 call eltType _mt[232] a[134932]))
    unknown call_tmp[610966] "expr temp" "maybe param" "maybe type" "temp"
    (610969 'move' call_tmp[610966](134986 call chpl__buildArrayRuntimeType call_tmp[610954] call_tmp[610961]))
    (491650 'default init var' ret[134988] call_tmp[610966])
    {
      unknown call_tmp[610971] "maybe param" "maybe type" "temp"
      (610974 'move' call_tmp[610971](135079 'task_get_serial'))
      unknown tmp[135078] "insert auto destroy" "temp"
      (491652 'init var' tmp[135078] call_tmp[610971])
      unknown call_tmp[610978] "expr temp" "maybe param" "maybe type" "temp"
      (610981 'move' call_tmp[610978](134992 call _value _mt[232] newDom[134975]))
      unknown call_tmp[610985] "expr temp" "maybe param" "maybe type" "temp"
      (610988 'move' call_tmp[610985](134995 call parSafe _mt[232] call_tmp[610978]))
      unknown call_tmp[610990] "expr temp" "maybe param" "maybe type" "temp"
      (610993 'move' call_tmp[610990](134998 call ! call_tmp[610985]))
      unknown call_tmp[610995] "expr temp" "maybe param" "maybe type" "temp"
      (610998 'move' call_tmp[610995](135075 call _cond_test call_tmp[610990]))
      if call_tmp[610995]
      {
        (135081 'task_set_serial' 1)
      }
      {
        unknown call_tmp[611002] "expr temp" "maybe param" "maybe type" "temp"
        (611005 'move' call_tmp[611002](135002 call _dom _mt[232] a[134932]))
        Forall {
          induction variables:
            
            unknown k[135034] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[611002]
          shadow variables:
          forall body
          {
            unknown call_tmp[611009] "expr temp" "maybe param" "maybe type" "temp"
            (611012 'move' call_tmp[611009](135006 call _dom _mt[232] b[134938]))
            unknown call_tmp[611016] "expr temp" "maybe param" "maybe type" "temp"
            (611019 'move' call_tmp[611016](135014 call(135009 call (partial) contains _mt[232] call_tmp[611009]) k[135034]))
            unknown call_tmp[611021] "expr temp" "maybe param" "maybe type" "temp"
            (611024 'move' call_tmp[611021](135015 call ! call_tmp[611016]))
            unknown call_tmp[611026] "expr temp" "maybe param" "maybe type" "temp"
            (611029 'move' call_tmp[611026](135028 call _cond_test call_tmp[611021]))
            if call_tmp[611026]
            {
              unknown call_tmp[611031] "expr temp" "maybe param" "maybe type" "temp"
              (611034 'move' call_tmp[611031](135020 call ret[134988] k[135034]))
              unknown call_tmp[611036] "expr temp" "maybe param" "maybe type" "temp"
              (611039 'move' call_tmp[611036](135024 call a[134932] k[135034]))
              (135025 call = call_tmp[611031] call_tmp[611036])
            }
          }
        }
        unknown call_tmp[611043] "expr temp" "maybe param" "maybe type" "temp"
        (611046 'move' call_tmp[611043](135040 call _dom _mt[232] b[134938]))
        Forall {
          induction variables:
            
            unknown k[135072] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[611043]
          shadow variables:
          forall body
          {
            unknown call_tmp[611050] "expr temp" "maybe param" "maybe type" "temp"
            (611053 'move' call_tmp[611050](135044 call _dom _mt[232] a[134932]))
            unknown call_tmp[611057] "expr temp" "maybe param" "maybe type" "temp"
            (611060 'move' call_tmp[611057](135052 call(135047 call (partial) contains _mt[232] call_tmp[611050]) k[135072]))
            unknown call_tmp[611062] "expr temp" "maybe param" "maybe type" "temp"
            (611065 'move' call_tmp[611062](135053 call ! call_tmp[611057]))
            unknown call_tmp[611067] "expr temp" "maybe param" "maybe type" "temp"
            (611070 'move' call_tmp[611067](135066 call _cond_test call_tmp[611062]))
            if call_tmp[611067]
            {
              unknown call_tmp[611072] "expr temp" "maybe param" "maybe type" "temp"
              (611075 'move' call_tmp[611072](135058 call ret[134988] k[135072]))
              unknown call_tmp[611077] "expr temp" "maybe param" "maybe type" "temp"
              (611080 'move' call_tmp[611077](135062 call b[134938] k[135072]))
              (135063 call = call_tmp[611072] call_tmp[611077])
            }
          }
        }
      }
      (135085 'task_set_serial' tmp[135078])
    }
    (469302 'move' ret[469297](469301 'deref' ret[134988]))
    (469299 return ret[469297])
  }
  where {
    unknown tmp[401433] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443637] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[611084] "expr temp" "maybe param" "maybe type" "temp"
      (611087 'move' call_tmp[611084](134942 call _value _mt[232] a[134932]))
      (443641 'move' call_type_tmp[443637](134945 'typeof' call_tmp[611084]))
    }
    { scopeless type
      unknown call_type_tmp[443643] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[611091] "expr temp" "maybe param" "maybe type" "temp"
      (611094 'move' call_tmp[611091](134947 call _value _mt[232] b[134938]))
      (443647 'move' call_type_tmp[443643](134950 'typeof' call_tmp[611091]))
    }
    (401444 'move' tmp[401433](134951 call == call_type_tmp[443637] call_type_tmp[443643]))
    unknown call_tmp[611096] "expr temp" "maybe param" "maybe type" "temp"
    (611099 'move' call_tmp[611096](401446 call _cond_invalid tmp[401433]))
    if call_tmp[611096]
    {
      (401449 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515789] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515790] "maybe param" "temp"
    unknown call_tmp[611101] "expr temp" "maybe param" "maybe type" "temp"
    (611104 'move' call_tmp[611101](401434 call isTrue tmp[401433]))
    (515795 'move' tmp[515790](515793 call _cond_test call_tmp[611101]))
    if tmp[515790]
    {
      unknown tmp[515797] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611106] "expr temp" "maybe param" "maybe type" "temp"
      (611109 'move' call_tmp[611106](134956 call isAssociativeArr a[134932]))
      (515799 'move' tmp[515797](401437 call isTrue call_tmp[611106]))
      (515804 'move' tmp[515789](515801 '_paramFoldLogical' tmp[515790] tmp[515797]))
    }
    {
      (515809 'move' tmp[515789](515806 '_paramFoldLogical' tmp[515790] 0))
    }
    (691917 call _statementLevelSymbol tmp[515789])
  }
  function ^=[135099](ref arg a[135096]:_array[133150](?), arg b[135102]:_array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (135126 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (135135 call(135130 call (partial) chpl__assertSingleArrayDomain _mt[232] a[135096]) "^=")
    {
      unknown call_tmp[611113] "maybe param" "maybe type" "temp"
      (611116 'move' call_tmp[611113](135238 'task_get_serial'))
      unknown tmp[135237] "insert auto destroy" "temp"
      (491654 'init var' tmp[135237] call_tmp[611113])
      unknown call_tmp[611120] "expr temp" "maybe param" "maybe type" "temp"
      (611123 'move' call_tmp[611120](135138 call _dom _mt[232] a[135096]))
      unknown call_tmp[611127] "expr temp" "maybe param" "maybe type" "temp"
      (611130 'move' call_tmp[611127](135141 call _value _mt[232] call_tmp[611120]))
      unknown call_tmp[611134] "expr temp" "maybe param" "maybe type" "temp"
      (611137 'move' call_tmp[611134](135144 call parSafe _mt[232] call_tmp[611127]))
      unknown call_tmp[611139] "expr temp" "maybe param" "maybe type" "temp"
      (611142 'move' call_tmp[611139](135147 call ! call_tmp[611134]))
      unknown call_tmp[611144] "expr temp" "maybe param" "maybe type" "temp"
      (611147 'move' call_tmp[611144](135234 call _cond_test call_tmp[611139]))
      if call_tmp[611144]
      {
        (135240 'task_set_serial' 1)
      }
      {
        unknown call_tmp[611151] "expr temp" "maybe param" "maybe type" "temp"
        (611154 'move' call_tmp[611151](135151 call _dom _mt[232] b[135102]))
        Forall {
          induction variables:
            
            unknown k[135194] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[611151]
          shadow variables:
          forall body
          {
            unknown call_tmp[611158] "expr temp" "maybe param" "maybe type" "temp"
            (611161 'move' call_tmp[611158](135155 call _dom _mt[232] a[135096]))
            unknown call_tmp[611165] "expr temp" "maybe param" "maybe type" "temp"
            (611168 'move' call_tmp[611165](135163 call(135158 call (partial) contains _mt[232] call_tmp[611158]) k[135194]))
            unknown call_tmp[611170] "expr temp" "maybe param" "maybe type" "temp"
            (611173 'move' call_tmp[611170](135186 call _cond_test call_tmp[611165]))
            if call_tmp[611170]
            {
              unknown call_tmp[611177] "expr temp" "maybe param" "maybe type" "temp"
              (611180 'move' call_tmp[611177](135165 call _dom _mt[232] a[135096]))
              (135173 call(135168 call (partial) remove _mt[232] call_tmp[611177]) k[135194])
            }
            {
              unknown call_tmp[611186] "expr temp" "maybe param" "maybe type" "temp"
              (611189 'move' call_tmp[611186](135176 call _dom _mt[232] a[135096]))
              (135184 call(135179 call (partial) add _mt[232] call_tmp[611186]) k[135194])
            }
          }
        }
        unknown call_tmp[611195] "expr temp" "maybe param" "maybe type" "temp"
        (611198 'move' call_tmp[611195](135200 call _dom _mt[232] b[135102]))
        Forall {
          induction variables:
            
            unknown k[135231] "index var" "insert auto destroy"
          iterated expressions:
            call_tmp[611195]
          shadow variables:
          forall body
          {
            unknown call_tmp[611202] "expr temp" "maybe param" "maybe type" "temp"
            (611205 'move' call_tmp[611202](135204 call _dom _mt[232] a[135096]))
            unknown call_tmp[611209] "expr temp" "maybe param" "maybe type" "temp"
            (611212 'move' call_tmp[611209](135212 call(135207 call (partial) contains _mt[232] call_tmp[611202]) k[135231]))
            unknown call_tmp[611214] "expr temp" "maybe param" "maybe type" "temp"
            (611217 'move' call_tmp[611214](135224 call _cond_test call_tmp[611209]))
            if call_tmp[611214]
            {
              unknown call_tmp[611219] "expr temp" "maybe param" "maybe type" "temp"
              (611222 'move' call_tmp[611219](135216 call a[135096] k[135231]))
              unknown call_tmp[611224] "expr temp" "maybe param" "maybe type" "temp"
              (611227 'move' call_tmp[611224](135220 call b[135102] k[135231]))
              (135221 call = call_tmp[611219] call_tmp[611224])
            }
          }
        }
      }
      (135244 'task_set_serial' tmp[135237])
    }
    (469304 return _void[47])
  }
  where {
    unknown tmp[401454] "maybe param" "temp"
    { scopeless type
      unknown call_type_tmp[443649] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[611231] "expr temp" "maybe param" "maybe type" "temp"
      (611234 'move' call_tmp[611231](135106 call _value _mt[232] a[135096]))
      (443653 'move' call_type_tmp[443649](135109 'typeof' call_tmp[611231]))
    }
    { scopeless type
      unknown call_type_tmp[443655] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[611238] "expr temp" "maybe param" "maybe type" "temp"
      (611241 'move' call_tmp[611238](135111 call _value _mt[232] b[135102]))
      (443659 'move' call_type_tmp[443655](135114 'typeof' call_tmp[611238]))
    }
    (401465 'move' tmp[401454](135115 call == call_type_tmp[443649] call_type_tmp[443655]))
    unknown call_tmp[611243] "expr temp" "maybe param" "maybe type" "temp"
    (611246 'move' call_tmp[611243](401467 call _cond_invalid tmp[401454]))
    if call_tmp[611243]
    {
      (401470 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515816] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515817] "maybe param" "temp"
    unknown call_tmp[611248] "expr temp" "maybe param" "maybe type" "temp"
    (611251 'move' call_tmp[611248](401455 call isTrue tmp[401454]))
    (515822 'move' tmp[515817](515820 call _cond_test call_tmp[611248]))
    if tmp[515817]
    {
      unknown tmp[515824] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611253] "expr temp" "maybe param" "maybe type" "temp"
      (611256 'move' call_tmp[611253](135120 call isAssociativeArr a[135096]))
      (515826 'move' tmp[515824](401458 call isTrue call_tmp[611253]))
      (515831 'move' tmp[515816](515828 '_paramFoldLogical' tmp[515817] tmp[515824]))
    }
    {
      (515836 'move' tmp[515816](515833 '_paramFoldLogical' tmp[515817] 0))
    }
    (691919 call _statementLevelSymbol tmp[515816])
  }
  function -[135255](arg a[135252]:_domain[123390](?), arg b[135258]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[469308] "RVV" "temp"
    unknown newDom[135275] "insert auto destroy"
    unknown call_tmp[611258] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611261 'move' call_tmp[611258](135274 'typeof' a[135252]))
    (491656 'default init var' newDom[135275] call_tmp[611258])
    {
      unknown call_tmp[611263] "maybe param" "maybe type" "temp"
      (611266 'move' call_tmp[611263](135320 'task_get_serial'))
      unknown tmp[135319] "insert auto destroy" "temp"
      (491658 'init var' tmp[135319] call_tmp[611263])
      unknown call_tmp[611270] "expr temp" "maybe param" "maybe type" "temp"
      (611273 'move' call_tmp[611270](135280 call _value _mt[232] newDom[135275]))
      unknown call_tmp[611277] "expr temp" "maybe param" "maybe type" "temp"
      (611280 'move' call_tmp[611277](135283 call parSafe _mt[232] call_tmp[611270]))
      unknown call_tmp[611282] "expr temp" "maybe param" "maybe type" "temp"
      (611285 'move' call_tmp[611282](135286 call ! call_tmp[611277]))
      unknown call_tmp[611287] "expr temp" "maybe param" "maybe type" "temp"
      (611290 'move' call_tmp[611287](135316 call _cond_test call_tmp[611282]))
      if call_tmp[611287]
      {
        (135322 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown e[135313] "index var" "insert auto destroy"
        iterated expressions:
          a[135252]
        shadow variables:
        forall body
        {
          unknown call_tmp[611294] "expr temp" "maybe param" "maybe type" "temp"
          (611297 'move' call_tmp[611294](135296 call(135291 call (partial) contains _mt[232] b[135258]) e[135313]))
          unknown call_tmp[611299] "expr temp" "maybe param" "maybe type" "temp"
          (611302 'move' call_tmp[611299](135297 call ! call_tmp[611294]))
          unknown call_tmp[611304] "expr temp" "maybe param" "maybe type" "temp"
          (611307 'move' call_tmp[611304](135307 call _cond_test call_tmp[611299]))
          if call_tmp[611304]
          {
            (135305 call(135300 call (partial) add _mt[232] newDom[135275]) e[135313])
          }
        }
      }
      (135326 'task_set_serial' tmp[135319])
    }
    (469313 'move' ret[469308](469312 'deref' newDom[135275]))
    (469310 return ret[469308])
  }
  where {
    unknown tmp[401475] "maybe param" "temp"
    unknown call_tmp[611311] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611314 'move' call_tmp[611311](135262 'typeof' a[135252]))
    unknown call_tmp[611316] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611319 'move' call_tmp[611316](135264 'typeof' b[135258]))
    (401486 'move' tmp[401475](135265 call == call_tmp[611311] call_tmp[611316]))
    unknown call_tmp[611321] "expr temp" "maybe param" "maybe type" "temp"
    (611324 'move' call_tmp[611321](401488 call _cond_invalid tmp[401475]))
    if call_tmp[611321]
    {
      (401491 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515843] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515844] "maybe param" "temp"
    unknown call_tmp[611326] "expr temp" "maybe param" "maybe type" "temp"
    (611329 'move' call_tmp[611326](401476 call isTrue tmp[401475]))
    (515849 'move' tmp[515844](515847 call _cond_test call_tmp[611326]))
    if tmp[515844]
    {
      unknown tmp[515851] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611331] "expr temp" "maybe param" "maybe type" "temp"
      (611334 'move' call_tmp[611331](135270 call isAssociativeDom a[135252]))
      (515853 'move' tmp[515851](401479 call isTrue call_tmp[611331]))
      (515858 'move' tmp[515843](515855 '_paramFoldLogical' tmp[515844] tmp[515851]))
    }
    {
      (515863 'move' tmp[515843](515860 '_paramFoldLogical' tmp[515844] 0))
    }
    (691921 call _statementLevelSymbol tmp[515843])
  }
  function -=[135340](ref arg a[135337]:_domain[123390](?), arg b[135343]:_domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135380] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135381] "expr temp" "temp"
      (135390 'move' _iterator[135381](135388 call _getIterator b[135343]))
      Defer
      {
        {
          (135406 call _freeIterator _iterator[135381])
        }
      }
      { scopeless type
        (135395 'move' _indexOfInterest[135380](135392 call iteratorIndex _iterator[135381]))
      }
      ForLoop
      {
        unknown e[135399] "index var" "insert auto destroy"
        (135401 'move' e[135399] _indexOfInterest[135380])
        unknown call_tmp[611338] "expr temp" "maybe param" "maybe type" "temp"
        (611341 'move' call_tmp[611338](135366 call(135361 call (partial) contains _mt[232] a[135337]) e[135399]))
        unknown call_tmp[611343] "expr temp" "maybe param" "maybe type" "temp"
        (611346 'move' call_tmp[611343](135375 call _cond_test call_tmp[611338]))
        if call_tmp[611343]
        {
          (135373 call(135368 call (partial) remove _mt[232] a[135337]) e[135399])
        }
        label _continueLabel[135385]
        _indexOfInterest[135380]
        _iterator[135381]
      }
      label _breakLabel[135386]
    }
    (469315 return _void[47])
  }
  where {
    unknown tmp[401496] "maybe param" "temp"
    unknown call_tmp[611350] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611353 'move' call_tmp[611350](135347 'typeof' a[135337]))
    unknown call_tmp[611355] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611358 'move' call_tmp[611355](135349 'typeof' b[135343]))
    (401507 'move' tmp[401496](135350 call == call_tmp[611350] call_tmp[611355]))
    unknown call_tmp[611360] "expr temp" "maybe param" "maybe type" "temp"
    (611363 'move' call_tmp[611360](401509 call _cond_invalid tmp[401496]))
    if call_tmp[611360]
    {
      (401512 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515870] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515871] "maybe param" "temp"
    unknown call_tmp[611365] "expr temp" "maybe param" "maybe type" "temp"
    (611368 'move' call_tmp[611365](401497 call isTrue tmp[401496]))
    (515876 'move' tmp[515871](515874 call _cond_test call_tmp[611365]))
    if tmp[515871]
    {
      unknown tmp[515878] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611370] "expr temp" "maybe param" "maybe type" "temp"
      (611373 'move' call_tmp[611370](135355 call isAssociativeDom a[135337]))
      (515880 'move' tmp[515878](401500 call isTrue call_tmp[611370]))
      (515885 'move' tmp[515870](515882 '_paramFoldLogical' tmp[515871] tmp[515878]))
    }
    {
      (515890 'move' tmp[515870](515887 '_paramFoldLogical' tmp[515871] 0))
    }
    (691923 call _statementLevelSymbol tmp[515870])
  }
  function |[135423](arg a[135420]:_domain[123390](?), arg b[135426]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[469319] "RVV" "temp"
    unknown call_tmp[611375] "expr temp" "maybe param" "maybe type" "temp"
    (611378 'move' call_tmp[611375](135443 call + a[135420] b[135426]))
    (469324 'move' ret[469319](469323 'deref' call_tmp[611375]))
    (469321 return ret[469319])
  }
  where {
    unknown tmp[401517] "maybe param" "temp"
    unknown call_tmp[611380] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611383 'move' call_tmp[611380](135430 'typeof' a[135420]))
    unknown call_tmp[611385] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611388 'move' call_tmp[611385](135432 'typeof' b[135426]))
    (401528 'move' tmp[401517](135433 call == call_tmp[611380] call_tmp[611385]))
    unknown call_tmp[611390] "expr temp" "maybe param" "maybe type" "temp"
    (611393 'move' call_tmp[611390](401530 call _cond_invalid tmp[401517]))
    if call_tmp[611390]
    {
      (401533 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515897] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515898] "maybe param" "temp"
    unknown call_tmp[611395] "expr temp" "maybe param" "maybe type" "temp"
    (611398 'move' call_tmp[611395](401518 call isTrue tmp[401517]))
    (515903 'move' tmp[515898](515901 call _cond_test call_tmp[611395]))
    if tmp[515898]
    {
      unknown tmp[515905] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611400] "expr temp" "maybe param" "maybe type" "temp"
      (611403 'move' call_tmp[611400](135438 call isAssociativeDom a[135420]))
      (515907 'move' tmp[515905](401521 call isTrue call_tmp[611400]))
      (515912 'move' tmp[515897](515909 '_paramFoldLogical' tmp[515898] tmp[515905]))
    }
    {
      (515917 'move' tmp[515897](515914 '_paramFoldLogical' tmp[515898] 0))
    }
    (691925 call _statementLevelSymbol tmp[515897])
  }
  function |=[135457](ref arg a[135454]:_domain[123390](?), arg b[135460]:_domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135485] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135486] "expr temp" "temp"
      (135495 'move' _iterator[135486](135493 call _getIterator b[135460]))
      Defer
      {
        {
          (135511 call _freeIterator _iterator[135486])
        }
      }
      { scopeless type
        (135500 'move' _indexOfInterest[135485](135497 call iteratorIndex _iterator[135486]))
      }
      ForLoop
      {
        unknown e[135504] "index var" "insert auto destroy"
        (135506 'move' e[135504] _indexOfInterest[135485])
        (135483 call(135478 call (partial) add _mt[232] a[135454]) e[135504])
        label _continueLabel[135490]
        _indexOfInterest[135485]
        _iterator[135486]
      }
      label _breakLabel[135491]
    }
    (469326 return _void[47])
  }
  where {
    unknown tmp[401538] "maybe param" "temp"
    unknown call_tmp[611407] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611410 'move' call_tmp[611407](135464 'typeof' a[135454]))
    unknown call_tmp[611412] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611415 'move' call_tmp[611412](135466 'typeof' b[135460]))
    (401549 'move' tmp[401538](135467 call == call_tmp[611407] call_tmp[611412]))
    unknown call_tmp[611417] "expr temp" "maybe param" "maybe type" "temp"
    (611420 'move' call_tmp[611417](401551 call _cond_invalid tmp[401538]))
    if call_tmp[611417]
    {
      (401554 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515924] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515925] "maybe param" "temp"
    unknown call_tmp[611422] "expr temp" "maybe param" "maybe type" "temp"
    (611425 'move' call_tmp[611422](401539 call isTrue tmp[401538]))
    (515930 'move' tmp[515925](515928 call _cond_test call_tmp[611422]))
    if tmp[515925]
    {
      unknown tmp[515932] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611427] "expr temp" "maybe param" "maybe type" "temp"
      (611430 'move' call_tmp[611427](135472 call isAssociativeDom a[135454]))
      (515934 'move' tmp[515932](401542 call isTrue call_tmp[611427]))
      (515939 'move' tmp[515924](515936 '_paramFoldLogical' tmp[515925] tmp[515932]))
    }
    {
      (515944 'move' tmp[515924](515941 '_paramFoldLogical' tmp[515925] 0))
    }
    (691927 call _statementLevelSymbol tmp[515924])
  }
  function +=[135528](ref arg a[135525]:_domain[123390](?), arg b[135531]:_domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (135548 call |= a[135525] b[135531])
    (469328 return _void[47])
  }
  where {
    unknown tmp[401559] "maybe param" "temp"
    unknown call_tmp[611432] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611435 'move' call_tmp[611432](135535 'typeof' a[135525]))
    unknown call_tmp[611437] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611440 'move' call_tmp[611437](135537 'typeof' b[135531]))
    (401570 'move' tmp[401559](135538 call == call_tmp[611432] call_tmp[611437]))
    unknown call_tmp[611442] "expr temp" "maybe param" "maybe type" "temp"
    (611445 'move' call_tmp[611442](401572 call _cond_invalid tmp[401559]))
    if call_tmp[611442]
    {
      (401575 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515951] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515952] "maybe param" "temp"
    unknown call_tmp[611447] "expr temp" "maybe param" "maybe type" "temp"
    (611450 'move' call_tmp[611447](401560 call isTrue tmp[401559]))
    (515957 'move' tmp[515952](515955 call _cond_test call_tmp[611447]))
    if tmp[515952]
    {
      unknown tmp[515959] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611452] "expr temp" "maybe param" "maybe type" "temp"
      (611455 'move' call_tmp[611452](135543 call isAssociativeDom a[135525]))
      (515961 'move' tmp[515959](401563 call isTrue call_tmp[611452]))
      (515966 'move' tmp[515951](515963 '_paramFoldLogical' tmp[515952] tmp[515959]))
    }
    {
      (515971 'move' tmp[515951](515968 '_paramFoldLogical' tmp[515952] 0))
    }
    (691929 call _statementLevelSymbol tmp[515951])
  }
  function &[135561](arg a[135558]:_domain[123390](?), arg b[135564]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[469332] "RVV" "temp"
    unknown newDom[135581] "insert auto destroy"
    unknown call_tmp[611457] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611460 'move' call_tmp[611457](135580 'typeof' a[135558]))
    (491660 'default init var' newDom[135581] call_tmp[611457])
    {
      unknown call_tmp[611462] "maybe param" "maybe type" "temp"
      (611465 'move' call_tmp[611462](135627 'task_get_serial'))
      unknown tmp[135626] "insert auto destroy" "temp"
      (491662 'init var' tmp[135626] call_tmp[611462])
      unknown call_tmp[611469] "expr temp" "maybe param" "maybe type" "temp"
      (611472 'move' call_tmp[611469](135586 call _value _mt[232] newDom[135581]))
      unknown call_tmp[611476] "expr temp" "maybe param" "maybe type" "temp"
      (611479 'move' call_tmp[611476](135589 call parSafe _mt[232] call_tmp[611469]))
      unknown call_tmp[611481] "expr temp" "maybe param" "maybe type" "temp"
      (611484 'move' call_tmp[611481](135592 call ! call_tmp[611476]))
      unknown call_tmp[611486] "expr temp" "maybe param" "maybe type" "temp"
      (611489 'move' call_tmp[611486](135623 call _cond_test call_tmp[611481]))
      if call_tmp[611486]
      {
        (135629 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[135620] "index var" "insert auto destroy"
        iterated expressions:
          a[135558]
        shadow variables:
          newDom[135597] 'ref' intent outer var newDom[135581]
            init block
            {
            }
            deinit block
            {
            }
        forall body
        {
          unknown call_tmp[611493] "expr temp" "maybe param" "maybe type" "temp"
          (611496 'move' call_tmp[611493](135608 call(135603 call (partial) contains _mt[232] b[135564]) k[135620]))
          unknown call_tmp[611498] "expr temp" "maybe param" "maybe type" "temp"
          (611501 'move' call_tmp[611498](135614 call _cond_test call_tmp[611493]))
          if call_tmp[611498]
          {
            (135611 call += newDom[135597] k[135620])
          }
        }
      }
      (135633 'task_set_serial' tmp[135626])
    }
    (469337 'move' ret[469332](469336 'deref' newDom[135581]))
    (469334 return ret[469332])
  }
  where {
    unknown tmp[401580] "maybe param" "temp"
    unknown call_tmp[611503] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611506 'move' call_tmp[611503](135568 'typeof' a[135558]))
    unknown call_tmp[611508] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611511 'move' call_tmp[611508](135570 'typeof' b[135564]))
    (401591 'move' tmp[401580](135571 call == call_tmp[611503] call_tmp[611508]))
    unknown call_tmp[611513] "expr temp" "maybe param" "maybe type" "temp"
    (611516 'move' call_tmp[611513](401593 call _cond_invalid tmp[401580]))
    if call_tmp[611513]
    {
      (401596 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[515978] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[515979] "maybe param" "temp"
    unknown call_tmp[611518] "expr temp" "maybe param" "maybe type" "temp"
    (611521 'move' call_tmp[611518](401581 call isTrue tmp[401580]))
    (515984 'move' tmp[515979](515982 call _cond_test call_tmp[611518]))
    if tmp[515979]
    {
      unknown tmp[515986] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611523] "expr temp" "maybe param" "maybe type" "temp"
      (611526 'move' call_tmp[611523](135576 call isAssociativeDom a[135558]))
      (515988 'move' tmp[515986](401584 call isTrue call_tmp[611523]))
      (515993 'move' tmp[515978](515990 '_paramFoldLogical' tmp[515979] tmp[515986]))
    }
    {
      (515998 'move' tmp[515978](515995 '_paramFoldLogical' tmp[515979] 0))
    }
    (691931 call _statementLevelSymbol tmp[515978])
  }
  function &=[135647](ref arg a[135644]:_domain[123390](?), arg b[135650]:_domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown removeSet[135673] "insert auto destroy"
    unknown call_tmp[611530] "expr temp" "maybe param" "maybe type" "temp"
    (611533 'move' call_tmp[611530](135666 call idxType _mt[232] a[135644]))
    unknown call_tmp[611535] "expr temp" "maybe param" "maybe type" "temp"
    (611538 'move' call_tmp[611535](135671 call chpl__buildDomainRuntimeType defaultDist[93214] call_tmp[611530]))
    (491664 'default init var' removeSet[135673] call_tmp[611535])
    {
      unknown _indexOfInterest[135698] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135699] "expr temp" "temp"
      (135708 'move' _iterator[135699](135706 call _getIterator a[135644]))
      Defer
      {
        {
          (135724 call _freeIterator _iterator[135699])
        }
      }
      { scopeless type
        (135713 'move' _indexOfInterest[135698](135710 call iteratorIndex _iterator[135699]))
      }
      ForLoop
      {
        unknown e[135717] "index var" "insert auto destroy"
        (135719 'move' e[135717] _indexOfInterest[135698])
        unknown call_tmp[611542] "expr temp" "maybe param" "maybe type" "temp"
        (611545 'move' call_tmp[611542](135685 call(135680 call (partial) contains _mt[232] b[135650]) e[135717]))
        unknown call_tmp[611547] "expr temp" "maybe param" "maybe type" "temp"
        (611550 'move' call_tmp[611547](135686 call ! call_tmp[611542]))
        unknown call_tmp[611552] "expr temp" "maybe param" "maybe type" "temp"
        (611555 'move' call_tmp[611552](135693 call _cond_test call_tmp[611547]))
        if call_tmp[611552]
        {
          (135690 call += removeSet[135673] e[135717])
        }
        label _continueLabel[135703]
        _indexOfInterest[135698]
        _iterator[135699]
      }
      label _breakLabel[135704]
    }
    {
      unknown _indexOfInterest[135741] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135742] "expr temp" "temp"
      (135751 'move' _iterator[135742](135749 call _getIterator removeSet[135673]))
      Defer
      {
        {
          (135767 call _freeIterator _iterator[135742])
        }
      }
      { scopeless type
        (135756 'move' _indexOfInterest[135741](135753 call iteratorIndex _iterator[135742]))
      }
      ForLoop
      {
        unknown e[135760] "index var" "insert auto destroy"
        (135762 'move' e[135760] _indexOfInterest[135741])
        (135739 call(135734 call (partial) remove _mt[232] a[135644]) e[135760])
        label _continueLabel[135746]
        _indexOfInterest[135741]
        _iterator[135742]
      }
      label _breakLabel[135747]
    }
    (469339 return _void[47])
  }
  where {
    unknown tmp[401601] "maybe param" "temp"
    unknown call_tmp[611559] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611562 'move' call_tmp[611559](135654 'typeof' a[135644]))
    unknown call_tmp[611564] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611567 'move' call_tmp[611564](135656 'typeof' b[135650]))
    (401612 'move' tmp[401601](135657 call == call_tmp[611559] call_tmp[611564]))
    unknown call_tmp[611569] "expr temp" "maybe param" "maybe type" "temp"
    (611572 'move' call_tmp[611569](401614 call _cond_invalid tmp[401601]))
    if call_tmp[611569]
    {
      (401617 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516005] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516006] "maybe param" "temp"
    unknown call_tmp[611574] "expr temp" "maybe param" "maybe type" "temp"
    (611577 'move' call_tmp[611574](401602 call isTrue tmp[401601]))
    (516011 'move' tmp[516006](516009 call _cond_test call_tmp[611574]))
    if tmp[516006]
    {
      unknown tmp[516013] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611579] "expr temp" "maybe param" "maybe type" "temp"
      (611582 'move' call_tmp[611579](135662 call isAssociativeDom a[135644]))
      (516015 'move' tmp[516013](401605 call isTrue call_tmp[611579]))
      (516020 'move' tmp[516005](516017 '_paramFoldLogical' tmp[516006] tmp[516013]))
    }
    {
      (516025 'move' tmp[516005](516022 '_paramFoldLogical' tmp[516006] 0))
    }
    (691933 call _statementLevelSymbol tmp[516005])
  }
  function ^[135783](arg a[135780]:_domain[123390](?), arg b[135786]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[469343] "RVV" "temp"
    unknown newDom[135803] "insert auto destroy"
    unknown call_tmp[611584] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611587 'move' call_tmp[611584](135802 'typeof' a[135780]))
    (491666 'default init var' newDom[135803] call_tmp[611584])
    {
      unknown call_tmp[611589] "maybe param" "maybe type" "temp"
      (611592 'move' call_tmp[611589](135877 'task_get_serial'))
      unknown tmp[135876] "insert auto destroy" "temp"
      (491668 'init var' tmp[135876] call_tmp[611589])
      unknown call_tmp[611596] "expr temp" "maybe param" "maybe type" "temp"
      (611599 'move' call_tmp[611596](135808 call _value _mt[232] newDom[135803]))
      unknown call_tmp[611603] "expr temp" "maybe param" "maybe type" "temp"
      (611606 'move' call_tmp[611603](135811 call parSafe _mt[232] call_tmp[611596]))
      unknown call_tmp[611608] "expr temp" "maybe param" "maybe type" "temp"
      (611611 'move' call_tmp[611608](135814 call ! call_tmp[611603]))
      unknown call_tmp[611613] "expr temp" "maybe param" "maybe type" "temp"
      (611616 'move' call_tmp[611613](135873 call _cond_test call_tmp[611608]))
      if call_tmp[611613]
      {
        (135879 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[135841] "index var" "insert auto destroy"
          iterated expressions:
            a[135780]
          shadow variables:
          forall body
          {
            unknown call_tmp[611620] "expr temp" "maybe param" "maybe type" "temp"
            (611623 'move' call_tmp[611620](135824 call(135819 call (partial) contains _mt[232] b[135786]) k[135841]))
            unknown call_tmp[611625] "expr temp" "maybe param" "maybe type" "temp"
            (611628 'move' call_tmp[611625](135825 call ! call_tmp[611620]))
            unknown call_tmp[611630] "expr temp" "maybe param" "maybe type" "temp"
            (611633 'move' call_tmp[611630](135835 call _cond_test call_tmp[611625]))
            if call_tmp[611630]
            {
              (135833 call(135828 call (partial) add _mt[232] newDom[135803]) k[135841])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135870] "index var" "insert auto destroy"
          iterated expressions:
            b[135786]
          shadow variables:
          forall body
          {
            unknown call_tmp[611639] "expr temp" "maybe param" "maybe type" "temp"
            (611642 'move' call_tmp[611639](135853 call(135848 call (partial) contains _mt[232] a[135780]) k[135870]))
            unknown call_tmp[611644] "expr temp" "maybe param" "maybe type" "temp"
            (611647 'move' call_tmp[611644](135854 call ! call_tmp[611639]))
            unknown call_tmp[611649] "expr temp" "maybe param" "maybe type" "temp"
            (611652 'move' call_tmp[611649](135864 call _cond_test call_tmp[611644]))
            if call_tmp[611649]
            {
              (135862 call(135857 call (partial) add _mt[232] newDom[135803]) k[135870])
            }
          }
        }
      }
      (135883 'task_set_serial' tmp[135876])
    }
    (469348 'move' ret[469343](469347 'deref' newDom[135803]))
    (469345 return ret[469343])
  }
  where {
    unknown tmp[401622] "maybe param" "temp"
    unknown call_tmp[611656] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611659 'move' call_tmp[611656](135790 'typeof' a[135780]))
    unknown call_tmp[611661] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611664 'move' call_tmp[611661](135792 'typeof' b[135786]))
    (401633 'move' tmp[401622](135793 call == call_tmp[611656] call_tmp[611661]))
    unknown call_tmp[611666] "expr temp" "maybe param" "maybe type" "temp"
    (611669 'move' call_tmp[611666](401635 call _cond_invalid tmp[401622]))
    if call_tmp[611666]
    {
      (401638 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516032] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516033] "maybe param" "temp"
    unknown call_tmp[611671] "expr temp" "maybe param" "maybe type" "temp"
    (611674 'move' call_tmp[611671](401623 call isTrue tmp[401622]))
    (516038 'move' tmp[516033](516036 call _cond_test call_tmp[611671]))
    if tmp[516033]
    {
      unknown tmp[516040] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611676] "expr temp" "maybe param" "maybe type" "temp"
      (611679 'move' call_tmp[611676](135798 call isAssociativeDom a[135780]))
      (516042 'move' tmp[516040](401626 call isTrue call_tmp[611676]))
      (516047 'move' tmp[516032](516044 '_paramFoldLogical' tmp[516033] tmp[516040]))
    }
    {
      (516052 'move' tmp[516032](516049 '_paramFoldLogical' tmp[516033] 0))
    }
    (691935 call _statementLevelSymbol tmp[516032])
  }
  function ^=[135897](ref arg a[135894]:_domain[123390](?), arg b[135900]:_domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135946] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135947] "expr temp" "temp"
      (135956 'move' _iterator[135947](135954 call _getIterator a[135894]))
      Defer
      {
        {
          (135972 call _freeIterator _iterator[135947])
        }
      }
      { scopeless type
        (135961 'move' _indexOfInterest[135946](135958 call iteratorIndex _iterator[135947]))
      }
      ForLoop
      {
        unknown e[135965] "index var" "insert auto destroy"
        (135967 'move' e[135965] _indexOfInterest[135946])
        unknown call_tmp[611683] "expr temp" "maybe param" "maybe type" "temp"
        (611686 'move' call_tmp[611683](135923 call(135918 call (partial) contains _mt[232] b[135900]) e[135965]))
        unknown call_tmp[611688] "expr temp" "maybe param" "maybe type" "temp"
        (611691 'move' call_tmp[611688](135940 call _cond_test call_tmp[611683]))
        if call_tmp[611688]
        {
          (135930 call(135925 call (partial) remove _mt[232] a[135894]) e[135965])
        }
        {
          (135938 call(135933 call (partial) add _mt[232] a[135894]) e[135965])
        }
        label _continueLabel[135951]
        _indexOfInterest[135946]
        _iterator[135947]
      }
      label _breakLabel[135952]
    }
    (469350 return _void[47])
  }
  where {
    unknown tmp[401643] "maybe param" "temp"
    unknown call_tmp[611697] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611700 'move' call_tmp[611697](135904 'typeof' a[135894]))
    unknown call_tmp[611702] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (611705 'move' call_tmp[611702](135906 'typeof' b[135900]))
    (401654 'move' tmp[401643](135907 call == call_tmp[611697] call_tmp[611702]))
    unknown call_tmp[611707] "expr temp" "maybe param" "maybe type" "temp"
    (611710 'move' call_tmp[611707](401656 call _cond_invalid tmp[401643]))
    if call_tmp[611707]
    {
      (401659 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516059] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516060] "maybe param" "temp"
    unknown call_tmp[611712] "expr temp" "maybe param" "maybe type" "temp"
    (611715 'move' call_tmp[611712](401644 call isTrue tmp[401643]))
    (516065 'move' tmp[516060](516063 call _cond_test call_tmp[611712]))
    if tmp[516060]
    {
      unknown tmp[516067] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611717] "expr temp" "maybe param" "maybe type" "temp"
      (611720 'move' call_tmp[611717](135912 call isAssociativeDom a[135894]))
      (516069 'move' tmp[516067](401647 call isTrue call_tmp[611717]))
      (516074 'move' tmp[516059](516071 '_paramFoldLogical' tmp[516060] tmp[516067]))
    }
    {
      (516079 'move' tmp[516059](516076 '_paramFoldLogical' tmp[516060] 0))
    }
    (691937 call _statementLevelSymbol tmp[516059])
  }
  function +=[135989](ref arg sd[135986]:_domain[123390](?), arg inds[135998]:_array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown call_tmp[611724] "expr temp" "maybe param" "maybe type" "temp"
    (611727 'move' call_tmp[611724](136006 call size _mt[232] inds[135998]))
    unknown call_tmp[611729] "expr temp" "maybe param" "maybe type" "temp"
    (611732 'move' call_tmp[611729](136010 call == call_tmp[611724] 0))
    unknown call_tmp[611734] "expr temp" "maybe param" "maybe type" "temp"
    (611737 'move' call_tmp[611734](136014 call _cond_test call_tmp[611729]))
    if call_tmp[611734]
    {
      gotoReturn _end_+=[469352] _end_+=[469352]
    }
    unknown call_tmp[611741] "expr temp" "maybe param" "maybe type" "temp"
    (611744 'move' call_tmp[611741](136021 call _value _mt[232] sd[135986]))
    (136029 call(136024 call (partial) dsiBulkAdd _mt[232] call_tmp[611741]) inds[135998])
    label _end_+=[469352]
    (469354 return _void[47])
  }
  where {
    unknown call_tmp[611748] "expr temp" "maybe param" "maybe type" "temp"
    (611751 'move' call_tmp[611748](136004 call isSparseDom sd[135986]))
    unknown call_tmp[611753] "expr temp" "maybe param" "maybe type" "temp"
    (611756 'move' call_tmp[611753](135993 call chpl__buildIndexType sd[135986]))
    unknown call_tmp[611760] "expr temp" "maybe param" "maybe type" "temp"
    (611763 'move' call_tmp[611760](436354 call eltType _mt[232] inds[135998]))
    unknown call_tmp[611765] "expr temp" "maybe param" "maybe type" "temp"
    (611768 'move' call_tmp[611765](436358 call == call_tmp[611753] call_tmp[611760]))
    (436352 call & call_tmp[611748] call_tmp[611765])
  }
  function +=[136040](ref arg sd[136037]:_domain[123390](?), arg d[136043]:_domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown call_tmp[611772] "expr temp" "maybe param" "maybe type" "temp"
    (611775 'move' call_tmp[611772](136075 call size _mt[232] d[136043]))
    unknown call_tmp[611777] "expr temp" "maybe param" "maybe type" "temp"
    (611780 'move' call_tmp[611777](136079 call == call_tmp[611772] 0))
    unknown call_tmp[611782] "expr temp" "maybe param" "maybe type" "temp"
    (611785 'move' call_tmp[611782](136083 call _cond_test call_tmp[611777]))
    if call_tmp[611782]
    {
      gotoReturn _end_+=[469358] _end_+=[469358]
    }
    unknown call_tmp[611789] "maybe param" "maybe type" "temp"
    (611792 'move' call_tmp[611789](136090 call numIndices _mt[232] d[136043]))
    const indCount[136093] "const" "insert auto destroy"
    (491670 'init var' indCount[136093] call_tmp[611789])
    unknown arr[136114] "insert auto destroy"
    unknown call_tmp[611794] "expr temp" "maybe param" "maybe type" "temp"
    (611797 'move' call_tmp[611794](136097 call chpl_build_low_bounded_range 0))
    unknown call_tmp[611799] "expr temp" "maybe param" "maybe type" "temp"
    (611802 'move' call_tmp[611799](136100 call # call_tmp[611794] indCount[136093]))
    unknown call_tmp[611804] "expr temp" "maybe param" "maybe type" "temp"
    (611807 'move' call_tmp[611804](136103 call chpl__buildDomainExpr call_tmp[611799]))
    unknown call_tmp[611809] "expr temp" "maybe param" "maybe type" "temp"
    (611812 'move' call_tmp[611809](136110 call chpl__ensureDomainExpr call_tmp[611804]))
    unknown call_tmp[611814] "expr temp" "maybe param" "maybe type" "temp"
    (611817 'move' call_tmp[611814](136108 call chpl__buildIndexType sd[136037]))
    unknown call_tmp[611819] "expr temp" "maybe param" "maybe type" "temp"
    (611822 'move' call_tmp[611819](136112 call chpl__buildArrayRuntimeType call_tmp[611809] call_tmp[611814]))
    (491672 'default init var' arr[136114] call_tmp[611819])
    {
      unknown _indexOfInterest[136136] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136137] "expr temp" "temp"
      unknown call_tmp[611824] "expr temp" "maybe param" "maybe type" "temp"
      (611827 'move' call_tmp[611824](136146 call _getIterator d[136043]))
      unknown call_tmp[611829] "expr temp" "maybe param" "maybe type" "temp"
      (611832 'move' call_tmp[611829](136149 call chpl_build_low_bounded_range 0))
      unknown call_tmp[611834] "expr temp" "maybe param" "maybe type" "temp"
      (611837 'move' call_tmp[611834](136151 call _getIterator call_tmp[611829]))
      (136154 'move' _iterator[136137](136127 call _build_tuple call_tmp[611824] call_tmp[611834]))
      Defer
      {
        {
          (136184 call _freeIterator _iterator[136137])
        }
      }
      { scopeless type
        (136159 'move' _indexOfInterest[136136](136156 call iteratorIndex _iterator[136137]))
      }
      ForLoop
      {
        (136164 call _check_tuple_var_decl _indexOfInterest[136136] 2)
        unknown i[136170] "index var" "insert auto destroy"
        (136172 'move' i[136170](136168 call _indexOfInterest[136136] 1))
        unknown j[136177] "index var" "insert auto destroy"
        (136179 'move' j[136177](136175 call _indexOfInterest[136136] 2))
        unknown call_tmp[611839] "expr temp" "maybe param" "maybe type" "temp"
        (611842 'move' call_tmp[611839](136131 call arr[136114] j[136177]))
        (136133 call = call_tmp[611839] i[136170])
        label _continueLabel[136141]
        _indexOfInterest[136136]
        _iterator[136137]
      }
      label _breakLabel[136142]
    }
    unknown rowSorted[136192] "insert auto destroy"
    (491674 'init var' rowSorted[136192] 0)
    unknown call_tmp[611846] "expr temp" "maybe param" "maybe type" "temp"
    (611849 'move' call_tmp[611846](136196 call _value _mt[232] sd[136037]))
    (136207 call(136199 call (partial) dsiBulkAdd _mt[232] call_tmp[611846]) arr[136114] rowSorted[136192] 1 0)
    label _end_+=[469358]
    (469360 return _void[47])
  }
  where {
    unknown tmp[401664] "maybe param" "temp"
    unknown tmp[401685] "maybe param" "temp"
    (401696 'move' tmp[401685](136049 call isSparseDom sd[136037]))
    unknown call_tmp[611853] "expr temp" "maybe param" "maybe type" "temp"
    (611856 'move' call_tmp[611853](401698 call _cond_invalid tmp[401685]))
    if call_tmp[611853]
    {
      (401701 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516086] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516087] "maybe param" "temp"
    unknown call_tmp[611858] "expr temp" "maybe param" "maybe type" "temp"
    (611861 'move' call_tmp[611858](401686 call isTrue tmp[401685]))
    (516092 'move' tmp[516087](516090 call _cond_test call_tmp[611858]))
    if tmp[516087]
    {
      unknown tmp[516094] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611865] "expr temp" "maybe param" "maybe type" "temp"
      (611868 'move' call_tmp[611865](136051 call rank _mt[232] d[136043]))
      unknown call_tmp[611872] "expr temp" "maybe param" "maybe type" "temp"
      (611875 'move' call_tmp[611872](136055 call rank _mt[232] sd[136037]))
      unknown call_tmp[611877] "expr temp" "maybe param" "maybe type" "temp"
      (611880 'move' call_tmp[611877](136058 call == call_tmp[611865] call_tmp[611872]))
      (516096 'move' tmp[516094](401689 call isTrue call_tmp[611877]))
      (516101 'move' tmp[516086](516098 '_paramFoldLogical' tmp[516087] tmp[516094]))
    }
    {
      (516106 'move' tmp[516086](516103 '_paramFoldLogical' tmp[516087] 0))
    }
    (401675 'move' tmp[401664] tmp[516086])
    unknown call_tmp[611882] "expr temp" "maybe param" "maybe type" "temp"
    (611885 'move' call_tmp[611882](401677 call _cond_invalid tmp[401664]))
    if call_tmp[611882]
    {
      (401680 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516113] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516114] "maybe param" "temp"
    unknown call_tmp[611887] "expr temp" "maybe param" "maybe type" "temp"
    (611890 'move' call_tmp[611887](401665 call isTrue tmp[401664]))
    (516119 'move' tmp[516114](516117 call _cond_test call_tmp[611887]))
    if tmp[516114]
    {
      unknown tmp[516121] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611894] "expr temp" "maybe param" "maybe type" "temp"
      (611897 'move' call_tmp[611894](136063 call idxType _mt[232] sd[136037]))
      unknown call_tmp[611901] "expr temp" "maybe param" "maybe type" "temp"
      (611904 'move' call_tmp[611901](136067 call idxType _mt[232] d[136043]))
      unknown call_tmp[611906] "expr temp" "maybe param" "maybe type" "temp"
      (611909 'move' call_tmp[611906](136070 call == call_tmp[611894] call_tmp[611901]))
      (516123 'move' tmp[516121](401668 call isTrue call_tmp[611906]))
      (516128 'move' tmp[516113](516125 '_paramFoldLogical' tmp[516114] tmp[516121]))
    }
    {
      (516133 'move' tmp[516113](516130 '_paramFoldLogical' tmp[516114] 0))
    }
    (691939 call _statementLevelSymbol tmp[516113])
  }
  function -=[136218](ref arg sd[136215]:_domain[123390](?), arg inds[136227]:_array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[136241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136242] "expr temp" "temp"
      (136251 'move' _iterator[136242](136249 call _getIterator inds[136227]))
      Defer
      {
        {
          (136267 call _freeIterator _iterator[136242])
        }
      }
      { scopeless type
        (136256 'move' _indexOfInterest[136241](136253 call iteratorIndex _iterator[136242]))
      }
      ForLoop
      {
        unknown ind[136260] "index var" "insert auto destroy"
        (136262 'move' ind[136260] _indexOfInterest[136241])
        (136238 call -= sd[136215] ind[136260])
        label _continueLabel[136246]
        _indexOfInterest[136241]
        _iterator[136242]
      }
      label _breakLabel[136247]
    }
    (469364 return _void[47])
  }
  where {
    unknown call_tmp[611911] "expr temp" "maybe param" "maybe type" "temp"
    (611914 'move' call_tmp[611911](136233 call isSparseDom sd[136215]))
    unknown call_tmp[611916] "expr temp" "maybe param" "maybe type" "temp"
    (611919 'move' call_tmp[611916](136222 call chpl__buildIndexType sd[136215]))
    unknown call_tmp[611923] "expr temp" "maybe param" "maybe type" "temp"
    (611926 'move' call_tmp[611923](436364 call eltType _mt[232] inds[136227]))
    unknown call_tmp[611928] "expr temp" "maybe param" "maybe type" "temp"
    (611931 'move' call_tmp[611928](436368 call == call_tmp[611916] call_tmp[611923]))
    (436362 call & call_tmp[611911] call_tmp[611928])
  }
  function -=[136284](ref arg sd[136281]:_domain[123390](?), arg d[136287]:_domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[136325] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136326] "expr temp" "temp"
      (136335 'move' _iterator[136326](136333 call _getIterator d[136287]))
      Defer
      {
        {
          (136351 call _freeIterator _iterator[136326])
        }
      }
      { scopeless type
        (136340 'move' _indexOfInterest[136325](136337 call iteratorIndex _iterator[136326]))
      }
      ForLoop
      {
        unknown ind[136344] "index var" "insert auto destroy"
        (136346 'move' ind[136344] _indexOfInterest[136325])
        (136322 call -= sd[136281] ind[136344])
        label _continueLabel[136330]
        _indexOfInterest[136325]
        _iterator[136326]
      }
      label _breakLabel[136331]
    }
    (469366 return _void[47])
  }
  where {
    unknown tmp[401706] "maybe param" "temp"
    unknown tmp[401727] "maybe param" "temp"
    (401738 'move' tmp[401727](136293 call isSparseDom sd[136281]))
    unknown call_tmp[611933] "expr temp" "maybe param" "maybe type" "temp"
    (611936 'move' call_tmp[611933](401740 call _cond_invalid tmp[401727]))
    if call_tmp[611933]
    {
      (401743 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516140] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516141] "maybe param" "temp"
    unknown call_tmp[611938] "expr temp" "maybe param" "maybe type" "temp"
    (611941 'move' call_tmp[611938](401728 call isTrue tmp[401727]))
    (516146 'move' tmp[516141](516144 call _cond_test call_tmp[611938]))
    if tmp[516141]
    {
      unknown tmp[516148] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611945] "expr temp" "maybe param" "maybe type" "temp"
      (611948 'move' call_tmp[611945](136295 call rank _mt[232] d[136287]))
      unknown call_tmp[611952] "expr temp" "maybe param" "maybe type" "temp"
      (611955 'move' call_tmp[611952](136299 call rank _mt[232] sd[136281]))
      unknown call_tmp[611957] "expr temp" "maybe param" "maybe type" "temp"
      (611960 'move' call_tmp[611957](136302 call == call_tmp[611945] call_tmp[611952]))
      (516150 'move' tmp[516148](401731 call isTrue call_tmp[611957]))
      (516155 'move' tmp[516140](516152 '_paramFoldLogical' tmp[516141] tmp[516148]))
    }
    {
      (516160 'move' tmp[516140](516157 '_paramFoldLogical' tmp[516141] 0))
    }
    (401717 'move' tmp[401706] tmp[516140])
    unknown call_tmp[611962] "expr temp" "maybe param" "maybe type" "temp"
    (611965 'move' call_tmp[611962](401719 call _cond_invalid tmp[401706]))
    if call_tmp[611962]
    {
      (401722 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516167] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516168] "maybe param" "temp"
    unknown call_tmp[611967] "expr temp" "maybe param" "maybe type" "temp"
    (611970 'move' call_tmp[611967](401707 call isTrue tmp[401706]))
    (516173 'move' tmp[516168](516171 call _cond_test call_tmp[611967]))
    if tmp[516168]
    {
      unknown tmp[516175] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[611974] "expr temp" "maybe param" "maybe type" "temp"
      (611977 'move' call_tmp[611974](136307 call idxType _mt[232] sd[136281]))
      unknown call_tmp[611981] "expr temp" "maybe param" "maybe type" "temp"
      (611984 'move' call_tmp[611981](136311 call idxType _mt[232] d[136287]))
      unknown call_tmp[611986] "expr temp" "maybe param" "maybe type" "temp"
      (611989 'move' call_tmp[611986](136314 call == call_tmp[611974] call_tmp[611981]))
      (516177 'move' tmp[516175](401710 call isTrue call_tmp[611986]))
      (516182 'move' tmp[516167](516179 '_paramFoldLogical' tmp[516168] tmp[516175]))
    }
    {
      (516187 'move' tmp[516167](516184 '_paramFoldLogical' tmp[516168] 0))
    }
    (691941 call _statementLevelSymbol tmp[516167])
  }
  function isCollapsedDimension[136378](arg r[136375]:range[66183](?)) param : _unknown[43] "no doc"
  {
    unknown ret[469370] "RVV" "param" "temp"
    (469375 'move' ret[469370](469374 'deref' 0))
    (469372 return ret[469370])
  }
  function isCollapsedDimension[136390](arg r[136388]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[469379] "RVV" "param" "temp"
    (469384 'move' ret[469379](469383 'deref' 1))
    (469381 return ret[469379])
  }
  function chpl__anyStridable[136402](arg ranges[136400]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469388] "RVV" "param" "temp"
    {
      unknown i[136426] "insert auto destroy"
      (491676 'init var' i[136426] 0)
      unknown tmp[136427] "maybe param" "temp"
      unknown call_tmp[611993] "expr temp" "maybe param" "maybe type" "temp"
      (611996 'move' call_tmp[611993](136406 call size _mt[232] ranges[136400]))
      (136439 'move' tmp[136427](136437 call chpl_compute_low_param_loop_bound 1 call_tmp[611993]))
      unknown tmp[136428] "maybe param" "temp"
      unknown call_tmp[612000] "expr temp" "maybe param" "maybe type" "temp"
      (612003 'move' call_tmp[612000](136444 call size _mt[232] ranges[136400]))
      (136449 'move' tmp[136428](136447 call chpl_compute_high_param_loop_bound 1 call_tmp[612000]))
      unknown tmp[136429] "maybe param" "temp"
      (136452 'move' tmp[136429] 1)
      ParamForLoop
      { i[136426] tmp[136427] tmp[136428] tmp[136429]
        unknown call_tmp[612005] "expr temp" "maybe param" "maybe type" "temp"
        (612008 'move' call_tmp[612005](136414 call ranges[136400] i[136426]))
        unknown call_tmp[612012] "expr temp" "maybe param" "maybe type" "temp"
        (612015 'move' call_tmp[612012](136415 call stridable _mt[232] call_tmp[612005]))
        unknown call_tmp[612017] "expr temp" "maybe param" "maybe type" "temp"
        (612020 'move' call_tmp[612017](136421 call _cond_test call_tmp[612012]))
        if call_tmp[612017]
        {
          (469393 'move' ret[469388](469392 'deref' 1))
          gotoReturn _end_chpl__anyStridable[469386] _end_chpl__anyStridable[469386]
        }
      }
      label _unused_continueLabel[136431]
      label _breakLabel[136430]
    }
    (469398 'move' ret[469388](469397 'deref' 0))
    label _end_chpl__anyStridable[469386]
    (469390 return ret[469388])
  }
  function chpl__anyRankChangeStridable[136473](arg args[136471]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469402] "RVV" "param" "temp"
    {
      unknown i[136509] "insert auto destroy"
      (491678 'init var' i[136509] 0)
      unknown tmp[136510] "maybe param" "temp"
      unknown call_tmp[612024] "expr temp" "maybe param" "maybe type" "temp"
      (612027 'move' call_tmp[612024](136477 call size _mt[232] args[136471]))
      (136522 'move' tmp[136510](136520 call chpl_compute_low_param_loop_bound 1 call_tmp[612024]))
      unknown tmp[136511] "maybe param" "temp"
      unknown call_tmp[612031] "expr temp" "maybe param" "maybe type" "temp"
      (612034 'move' call_tmp[612031](136527 call size _mt[232] args[136471]))
      (136532 'move' tmp[136511](136530 call chpl_compute_high_param_loop_bound 1 call_tmp[612031]))
      unknown tmp[136512] "maybe param" "temp"
      (136535 'move' tmp[136512] 1)
      ParamForLoop
      { i[136509] tmp[136510] tmp[136511] tmp[136512]
        unknown call_tmp[612036] "expr temp" "maybe param" "maybe type" "temp"
        (612039 'move' call_tmp[612036](136486 call args[136471] i[136509]))
        unknown call_tmp[612041] "expr temp" "maybe param" "maybe type" "temp"
        (612044 'move' call_tmp[612041](136488 call isRangeValue call_tmp[612036]))
        unknown call_tmp[612046] "expr temp" "maybe param" "maybe type" "temp"
        (612049 'move' call_tmp[612046](136504 call _cond_test call_tmp[612041]))
        if call_tmp[612046]
        {
          unknown call_tmp[612051] "expr temp" "maybe param" "maybe type" "temp"
          (612054 'move' call_tmp[612051](136492 call args[136471] i[136509]))
          unknown call_tmp[612058] "expr temp" "maybe param" "maybe type" "temp"
          (612061 'move' call_tmp[612058](136493 call stridable _mt[232] call_tmp[612051]))
          unknown call_tmp[612063] "expr temp" "maybe param" "maybe type" "temp"
          (612066 'move' call_tmp[612063](136499 call _cond_test call_tmp[612058]))
          if call_tmp[612063]
          {
            (469407 'move' ret[469402](469406 'deref' 1))
            gotoReturn _end_chpl__anyRankChangeStridable[469400] _end_chpl__anyRankChangeStridable[469400]
          }
        }
      }
      label _unused_continueLabel[136514]
      label _breakLabel[136513]
    }
    (469412 'move' ret[469402](469411 'deref' 0))
    label _end_chpl__anyRankChangeStridable[469400]
    (469404 return ret[469402])
  }
  function chpl__countRanges[136556](arg arg[136554]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469416] "RVV" "param" "temp"
    unknown call_tmp[612068] "expr temp" "maybe param" "maybe type" "temp"
    (612071 'move' call_tmp[612068](136561 call isRangeValue arg[136554]))
    unknown call_tmp[612073] "expr temp" "maybe param" "maybe type" "temp"
    (612076 'move' call_tmp[612073](136563 call _cast int(64)[13] call_tmp[612068]))
    (469421 'move' ret[469416](469420 'deref' call_tmp[612073]))
    (469418 return ret[469416])
  }
  function chpl__countRanges[136574](arg arg[136572]:_any[170](?), arg args[136577]:_any[170](?) ...) param : _unknown[43]
  {
    unknown ret[469425] "RVV" "param" "temp"
    unknown call_tmp[612078] "expr temp" "maybe param" "maybe type" "temp"
    (612081 'move' call_tmp[612078](136583 call chpl__countRanges arg[136572]))
    unknown call_tmp[612083] "expr temp" "maybe param" "maybe type" "temp"
    (612086 'move' call_tmp[612083](136588 call chpl__countRanges(136586 'expand_tuple' args[136577])))
    unknown call_tmp[612088] "expr temp" "maybe param" "maybe type" "temp"
    (612091 'move' call_tmp[612088](136589 call + call_tmp[612078] call_tmp[612083]))
    (469430 'move' ret[469425](469429 'deref' call_tmp[612088]))
    (469427 return ret[469425])
  }
  function _validRankChangeArgs[136600](arg args[136598]:_any[170](?), arg idxType[136602]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469503] "RVV" "param" "temp"
    function _validRankChangeArg[136608](arg idxType[136606]:_any[170](?), arg r[136614]:range[66183](?)) param : _unknown[43]
    {
      unknown ret[469434] "RVV" "param" "temp"
      (469439 'move' ret[469434](469438 'deref' 1))
      (469436 return ret[469434])
    }
    function _validRankChangeArg[136628](arg idxType[136626]:_any[170](?), arg i[136631] :
    idxType[136626]) param : _unknown[43]
    {
      unknown ret[469443] "RVV" "param" "temp"
      (469448 'move' ret[469443](469447 'deref' 1))
      (469445 return ret[469443])
    }
    function _validRankChangeArg[136644](arg idxType[136642]:_any[170](?), arg x[136646]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[469452] "RVV" "param" "temp"
      (469457 'move' ret[469452](469456 'deref' 0))
      (469454 return ret[469452])
    }
    function allValid[136656]() param : _unknown[43]
    {
      unknown ret[469461] "RVV" "param" "temp"
      {
        unknown dim[136684] "insert auto destroy"
        (491680 'init var' dim[136684] 0)
        unknown tmp[136685] "maybe param" "temp"
        unknown call_tmp[612095] "expr temp" "maybe param" "maybe type" "temp"
        (612098 'move' call_tmp[612095](136660 call size _mt[232] args[136598]))
        (136697 'move' tmp[136685](136695 call chpl_compute_low_param_loop_bound 1 call_tmp[612095]))
        unknown tmp[136686] "maybe param" "temp"
        unknown call_tmp[612102] "expr temp" "maybe param" "maybe type" "temp"
        (612105 'move' call_tmp[612102](136702 call size _mt[232] args[136598]))
        (136707 'move' tmp[136686](136705 call chpl_compute_high_param_loop_bound 1 call_tmp[612102]))
        unknown tmp[136687] "maybe param" "temp"
        (136710 'move' tmp[136687] 1)
        ParamForLoop
        { dim[136684] tmp[136685] tmp[136686] tmp[136687]
          {
            unknown call_tmp[612107] "expr temp" "maybe param" "maybe type" "temp"
            (612110 'move' call_tmp[612107](136671 call args[136598] dim[136684]))
            unknown call_tmp[612112] "expr temp" "maybe param" "maybe type" "temp"
            (612115 'move' call_tmp[612112](136672 call _validRankChangeArg idxType[136602] call_tmp[612107]))
            unknown call_tmp[612117] "expr temp" "maybe param" "maybe type" "temp"
            (612120 'move' call_tmp[612117](136673 call ! call_tmp[612112]))
            unknown call_tmp[612122] "expr temp" "maybe param" "maybe type" "temp"
            (612125 'move' call_tmp[612122](136678 call _cond_test call_tmp[612117]))
            if call_tmp[612122]
            {
              (469466 'move' ret[469461](469465 'deref' 0))
              gotoReturn _end_allValid[469459] _end_allValid[469459]
            }
          }
        }
        label _unused_continueLabel[136689]
        label _breakLabel[136688]
      }
      (469471 'move' ret[469461](469470 'deref' 1))
      label _end_allValid[469459]
      (469463 return ret[469461])
    }
    function oneRange[136729]() param : _unknown[43]
    {
      unknown ret[469475] "RVV" "param" "temp"
      {
        unknown dim[136754] "insert auto destroy"
        (491682 'init var' dim[136754] 0)
        unknown tmp[136755] "maybe param" "temp"
        unknown call_tmp[612129] "expr temp" "maybe param" "maybe type" "temp"
        (612132 'move' call_tmp[612129](136733 call size _mt[232] args[136598]))
        (136767 'move' tmp[136755](136765 call chpl_compute_low_param_loop_bound 1 call_tmp[612129]))
        unknown tmp[136756] "maybe param" "temp"
        unknown call_tmp[612136] "expr temp" "maybe param" "maybe type" "temp"
        (612139 'move' call_tmp[612136](136772 call size _mt[232] args[136598]))
        (136777 'move' tmp[136756](136775 call chpl_compute_high_param_loop_bound 1 call_tmp[612136]))
        unknown tmp[136757] "maybe param" "temp"
        (136780 'move' tmp[136757] 1)
        ParamForLoop
        { dim[136754] tmp[136755] tmp[136756] tmp[136757]
          {
            unknown call_tmp[612141] "expr temp" "maybe param" "maybe type" "temp"
            (612144 'move' call_tmp[612141](136742 call args[136598] dim[136754]))
            unknown call_tmp[612146] "expr temp" "maybe param" "maybe type" "temp"
            (612149 'move' call_tmp[612146](136744 call isRange call_tmp[612141]))
            unknown call_tmp[612151] "expr temp" "maybe param" "maybe type" "temp"
            (612154 'move' call_tmp[612151](136748 call _cond_test call_tmp[612146]))
            if call_tmp[612151]
            {
              (469480 'move' ret[469475](469479 'deref' 1))
              gotoReturn _end_oneRange[469473] _end_oneRange[469473]
            }
          }
        }
        label _unused_continueLabel[136759]
        label _breakLabel[136758]
      }
      (469485 'move' ret[469475](469484 'deref' 0))
      label _end_oneRange[469473]
      (469477 return ret[469475])
    }
    function oneNonRange[136799]() param : _unknown[43]
    {
      unknown ret[469489] "RVV" "param" "temp"
      {
        unknown dim[136826] "insert auto destroy"
        (491684 'init var' dim[136826] 0)
        unknown tmp[136827] "maybe param" "temp"
        unknown call_tmp[612158] "expr temp" "maybe param" "maybe type" "temp"
        (612161 'move' call_tmp[612158](136803 call size _mt[232] args[136598]))
        (136839 'move' tmp[136827](136837 call chpl_compute_low_param_loop_bound 1 call_tmp[612158]))
        unknown tmp[136828] "maybe param" "temp"
        unknown call_tmp[612165] "expr temp" "maybe param" "maybe type" "temp"
        (612168 'move' call_tmp[612165](136844 call size _mt[232] args[136598]))
        (136849 'move' tmp[136828](136847 call chpl_compute_high_param_loop_bound 1 call_tmp[612165]))
        unknown tmp[136829] "maybe param" "temp"
        (136852 'move' tmp[136829] 1)
        ParamForLoop
        { dim[136826] tmp[136827] tmp[136828] tmp[136829]
          {
            unknown call_tmp[612170] "expr temp" "maybe param" "maybe type" "temp"
            (612173 'move' call_tmp[612170](136812 call args[136598] dim[136826]))
            unknown call_tmp[612175] "expr temp" "maybe param" "maybe type" "temp"
            (612178 'move' call_tmp[612175](136814 call isRange call_tmp[612170]))
            unknown call_tmp[612180] "expr temp" "maybe param" "maybe type" "temp"
            (612183 'move' call_tmp[612180](136815 call ! call_tmp[612175]))
            unknown call_tmp[612185] "expr temp" "maybe param" "maybe type" "temp"
            (612188 'move' call_tmp[612185](136820 call _cond_test call_tmp[612180]))
            if call_tmp[612185]
            {
              (469494 'move' ret[469489](469493 'deref' 1))
              gotoReturn _end_oneNonRange[469487] _end_oneNonRange[469487]
            }
          }
        }
        label _unused_continueLabel[136831]
        label _breakLabel[136830]
      }
      (469499 'move' ret[469489](469498 'deref' 0))
      label _end_oneNonRange[469487]
      (469491 return ret[469489])
    }
    unknown tmp[401748] "maybe param" "temp"
    unknown tmp[401769] "maybe param" "temp"
    (401780 'move' tmp[401769](136871 call allValid))
    unknown call_tmp[612190] "expr temp" "maybe param" "maybe type" "temp"
    (612193 'move' call_tmp[612190](401782 call _cond_invalid tmp[401769]))
    if call_tmp[612190]
    {
      (401785 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516194] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516195] "maybe param" "temp"
    unknown call_tmp[612195] "expr temp" "maybe param" "maybe type" "temp"
    (612198 'move' call_tmp[612195](401770 call isTrue tmp[401769]))
    (516200 'move' tmp[516195](516198 call _cond_test call_tmp[612195]))
    if tmp[516195]
    {
      unknown tmp[516202] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612200] "expr temp" "maybe param" "maybe type" "temp"
      (612203 'move' call_tmp[612200](136874 call oneRange))
      (516204 'move' tmp[516202](401773 call isTrue call_tmp[612200]))
      (516209 'move' tmp[516194](516206 '_paramFoldLogical' tmp[516195] tmp[516202]))
    }
    {
      (516214 'move' tmp[516194](516211 '_paramFoldLogical' tmp[516195] 0))
    }
    (401759 'move' tmp[401748] tmp[516194])
    unknown call_tmp[612205] "expr temp" "maybe param" "maybe type" "temp"
    (612208 'move' call_tmp[612205](401761 call _cond_invalid tmp[401748]))
    if call_tmp[612205]
    {
      (401764 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516221] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516222] "maybe param" "temp"
    unknown call_tmp[612210] "expr temp" "maybe param" "maybe type" "temp"
    (612213 'move' call_tmp[612210](401749 call isTrue tmp[401748]))
    (516227 'move' tmp[516222](516225 call _cond_test call_tmp[612210]))
    if tmp[516222]
    {
      unknown tmp[516229] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612215] "expr temp" "maybe param" "maybe type" "temp"
      (612218 'move' call_tmp[612215](136879 call oneNonRange))
      (516231 'move' tmp[516229](401752 call isTrue call_tmp[612215]))
      (516236 'move' tmp[516221](516233 '_paramFoldLogical' tmp[516222] tmp[516229]))
    }
    {
      (516241 'move' tmp[516221](516238 '_paramFoldLogical' tmp[516222] 0))
    }
    (469508 'move' ret[469503](469507 'deref' tmp[516221]))
    (469505 return ret[469503])
  }
  function =[136892](ref arg a[136889]:_distribution[116702](?), arg b[136895]:_distribution[116702](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown call_tmp[612222] "expr temp" "maybe param" "maybe type" "temp"
    (612225 'move' call_tmp[612222](136899 call _value _mt[232] a[136889]))
    unknown call_tmp[612227] "expr temp" "maybe param" "maybe type" "temp"
    (612230 'move' call_tmp[612227](136903 call == call_tmp[612222] nil[38]))
    unknown call_tmp[612232] "expr temp" "maybe param" "maybe type" "temp"
    (612235 'move' call_tmp[612232](137050 call _cond_test call_tmp[612227]))
    if call_tmp[612232]
    {
      unknown call_tmp[612239] "expr temp" "maybe param" "maybe type" "temp"
      (612242 'move' call_tmp[612239](136914 call(136910 call (partial) clone _mt[232] b[136895])))
      (136917 'move' a[136889](136916 call chpl__autoCopy call_tmp[612239]))
    }
    {
      unknown call_tmp[612246] "expr temp" "maybe param" "maybe type" "temp"
      (612249 'move' call_tmp[612246](136921 call _value _mt[232] a[136889]))
      unknown call_tmp[612253] "expr temp" "maybe param" "maybe type" "temp"
      (612256 'move' call_tmp[612253](136926 call _doms _mt[232] call_tmp[612246]))
      unknown call_tmp[612260] "expr temp" "maybe param" "maybe type" "temp"
      (612263 'move' call_tmp[612260](136929 call length _mt[232] call_tmp[612253]))
      unknown call_tmp[612265] "expr temp" "maybe param" "maybe type" "temp"
      (612268 'move' call_tmp[612265](136933 call == call_tmp[612260] 0))
      unknown call_tmp[612270] "expr temp" "maybe param" "maybe type" "temp"
      (612273 'move' call_tmp[612270](137046 call _cond_test call_tmp[612265]))
      if call_tmp[612270]
      {
        { scopeless type
          unknown call_type_tmp[443661] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[612277] "expr temp" "maybe param" "maybe type" "temp"
          (612280 'move' call_tmp[612277](136936 call _value _mt[232] a[136889]))
          (443665 'move' call_type_tmp[443661](136939 'typeof' call_tmp[612277]))
        }
        { scopeless type
          unknown call_type_tmp[443667] "expr temp" "maybe type" "temp" "type variable"
          unknown call_tmp[612284] "expr temp" "maybe param" "maybe type" "temp"
          (612287 'move' call_tmp[612284](136941 call _value _mt[232] b[136895]))
          (443671 'move' call_type_tmp[443667](136944 'typeof' call_tmp[612284]))
        }
        unknown call_tmp[612289] "expr temp" "maybe param" "maybe type" "temp"
        (612292 'move' call_tmp[612289](136945 call != call_type_tmp[443661] call_type_tmp[443667]))
        unknown call_tmp[612294] "expr temp" "maybe param" "maybe type" "temp"
        (612297 'move' call_tmp[612294](136967 call _cond_test call_tmp[612289]))
        if call_tmp[612294]
        {
          (136965 call compilerError "type mismatch in distribution assignment")
        }
        unknown call_tmp[612301] "expr temp" "maybe param" "maybe type" "temp"
        (612304 'move' call_tmp[612301](136974 call _value _mt[232] a[136889]))
        unknown call_tmp[612308] "expr temp" "maybe param" "maybe type" "temp"
        (612311 'move' call_tmp[612308](136978 call _value _mt[232] b[136895]))
        unknown call_tmp[612313] "expr temp" "maybe param" "maybe type" "temp"
        (612316 'move' call_tmp[612313](136981 call == call_tmp[612301] call_tmp[612308]))
        unknown call_tmp[612318] "expr temp" "maybe param" "maybe type" "temp"
        (612321 'move' call_tmp[612318](137000 call _cond_test call_tmp[612313]))
        if call_tmp[612318]
        {
        }
        {
          unknown call_tmp[612325] "expr temp" "maybe param" "maybe type" "temp"
          (612328 'move' call_tmp[612325](136985 call _value _mt[232] a[136889]))
          unknown call_tmp[612334] "expr temp" "maybe param" "maybe type" "temp"
          (612337 'move' call_tmp[612334](136994 call _value _mt[232] b[136895]))
          (136998 call(136990 call (partial) dsiAssign _mt[232] call_tmp[612325]) call_tmp[612334])
        }
        unknown call_tmp[612341] "expr temp" "maybe param" "maybe type" "temp"
        (612344 'move' call_tmp[612341](137007 call _instance _mt[232] a[136889]))
        unknown call_tmp[612346] "expr temp" "maybe param" "maybe type" "temp"
        (612349 'move' call_tmp[612346](137011 call _isPrivatized call_tmp[612341]))
        unknown call_tmp[612351] "expr temp" "maybe param" "maybe type" "temp"
        (612354 'move' call_tmp[612351](137020 call _cond_test call_tmp[612346]))
        if call_tmp[612351]
        {
          unknown call_tmp[612358] "expr temp" "maybe param" "maybe type" "temp"
          (612361 'move' call_tmp[612358](137014 call _value _mt[232] a[136889]))
          (137018 call _reprivatize call_tmp[612358])
        }
      }
      {
        (137043 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
    (469510 return _void[47])
  }
  function =[137064](ref arg a[137061]:_domain[123390](?), arg b[137067]:_domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown call_tmp[612365] "expr temp" "maybe param" "maybe type" "temp"
    (612368 'move' call_tmp[612365](137071 call rank _mt[232] a[137061]))
    unknown call_tmp[612372] "expr temp" "maybe param" "maybe type" "temp"
    (612375 'move' call_tmp[612372](137075 call rank _mt[232] b[137067]))
    unknown call_tmp[612377] "expr temp" "maybe param" "maybe type" "temp"
    (612380 'move' call_tmp[612377](137078 call != call_tmp[612365] call_tmp[612372]))
    unknown call_tmp[612382] "expr temp" "maybe param" "maybe type" "temp"
    (612385 'move' call_tmp[612382](137100 call _cond_test call_tmp[612377]))
    if call_tmp[612382]
    {
      (137098 call compilerError "rank mismatch in domain assignment")
    }
    unknown tmp[401790] "maybe param" "temp"
    unknown call_tmp[612387] "expr temp" "maybe param" "maybe type" "temp"
    (612390 'move' call_tmp[612387](137109 call isOpaqueDom a[137061]))
    (401801 'move' tmp[401790](137110 call ! call_tmp[612387]))
    unknown call_tmp[612392] "expr temp" "maybe param" "maybe type" "temp"
    (612395 'move' call_tmp[612392](401803 call _cond_invalid tmp[401790]))
    if call_tmp[612392]
    {
      (401806 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516248] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516249] "maybe param" "temp"
    unknown call_tmp[612397] "expr temp" "maybe param" "maybe type" "temp"
    (612400 'move' call_tmp[612397](401791 call isTrue tmp[401790]))
    (516254 'move' tmp[516249](516252 call _cond_test call_tmp[612397]))
    if tmp[516249]
    {
      unknown tmp[516256] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612402] "expr temp" "maybe param" "maybe type" "temp"
      (612405 'move' call_tmp[612402](137115 call isOpaqueDom b[137067]))
      unknown call_tmp[612407] "expr temp" "maybe param" "maybe type" "temp"
      (612410 'move' call_tmp[612407](137116 call ! call_tmp[612402]))
      (516258 'move' tmp[516256](401794 call isTrue call_tmp[612407]))
      (516263 'move' tmp[516248](516260 '_paramFoldLogical' tmp[516249] tmp[516256]))
    }
    {
      (516268 'move' tmp[516248](516265 '_paramFoldLogical' tmp[516249] 0))
    }
    unknown call_tmp[612412] "expr temp" "maybe param" "maybe type" "temp"
    (612415 'move' call_tmp[612412](137155 call _cond_test tmp[516248]))
    if call_tmp[612412]
    {
      unknown call_tmp[612419] "expr temp" "maybe param" "maybe type" "temp"
      (612422 'move' call_tmp[612419](137121 call idxType _mt[232] a[137061]))
      unknown call_tmp[612426] "expr temp" "maybe param" "maybe type" "temp"
      (612429 'move' call_tmp[612426](137125 call idxType _mt[232] b[137067]))
      unknown call_tmp[612431] "expr temp" "maybe param" "maybe type" "temp"
      (612434 'move' call_tmp[612431](137128 call != call_tmp[612419] call_tmp[612426]))
      unknown call_tmp[612436] "expr temp" "maybe param" "maybe type" "temp"
      (612439 'move' call_tmp[612436](137150 call _cond_test call_tmp[612431]))
      if call_tmp[612436]
      {
        (137148 call compilerError "index type mismatch in domain assignment")
      }
    }
    unknown tmp[401832] "maybe param" "temp"
    (401843 'move' tmp[401832](137163 call isRectangularDom a[137061]))
    unknown call_tmp[612441] "expr temp" "maybe param" "maybe type" "temp"
    (612444 'move' call_tmp[612441](401845 call _cond_invalid tmp[401832]))
    if call_tmp[612441]
    {
      (401848 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516275] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516276] "maybe param" "temp"
    unknown call_tmp[612446] "expr temp" "maybe param" "maybe type" "temp"
    (612449 'move' call_tmp[612446](401833 call isTrue tmp[401832]))
    (516281 'move' tmp[516276](516279 call _cond_test call_tmp[612446]))
    if tmp[516276]
    {
      unknown tmp[516283] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612451] "expr temp" "maybe param" "maybe type" "temp"
      (612454 'move' call_tmp[612451](137167 call isRectangularDom b[137067]))
      (516285 'move' tmp[516283](401836 call isTrue call_tmp[612451]))
      (516290 'move' tmp[516275](516287 '_paramFoldLogical' tmp[516276] tmp[516283]))
    }
    {
      (516295 'move' tmp[516275](516292 '_paramFoldLogical' tmp[516276] 0))
    }
    unknown call_tmp[612456] "expr temp" "maybe param" "maybe type" "temp"
    (612459 'move' call_tmp[612456](137209 call _cond_test tmp[516275]))
    if call_tmp[612456]
    {
      unknown tmp[401811] "maybe param" "temp"
      unknown call_tmp[612463] "expr temp" "maybe param" "maybe type" "temp"
      (612466 'move' call_tmp[612463](137171 call stridable _mt[232] a[137061]))
      (401822 'move' tmp[401811](137174 call ! call_tmp[612463]))
      unknown call_tmp[612468] "expr temp" "maybe param" "maybe type" "temp"
      (612471 'move' call_tmp[612468](401824 call _cond_invalid tmp[401811]))
      if call_tmp[612468]
      {
        (401827 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[516302] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[516303] "maybe param" "temp"
      unknown call_tmp[612473] "expr temp" "maybe param" "maybe type" "temp"
      (612476 'move' call_tmp[612473](401812 call isTrue tmp[401811]))
      (516308 'move' tmp[516303](516306 call _cond_test call_tmp[612473]))
      if tmp[516303]
      {
        unknown tmp[516310] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[612480] "expr temp" "maybe param" "maybe type" "temp"
        (612483 'move' call_tmp[612480](137177 call stridable _mt[232] b[137067]))
        (516312 'move' tmp[516310](401815 call isTrue call_tmp[612480]))
        (516317 'move' tmp[516302](516314 '_paramFoldLogical' tmp[516303] tmp[516310]))
      }
      {
        (516322 'move' tmp[516302](516319 '_paramFoldLogical' tmp[516303] 0))
      }
      unknown call_tmp[612485] "expr temp" "maybe param" "maybe type" "temp"
      (612488 'move' call_tmp[612485](137204 call _cond_test tmp[516302]))
      if call_tmp[612485]
      {
        (137202 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    unknown call_tmp[612492] "expr temp" "maybe param" "maybe type" "temp"
    (612495 'move' call_tmp[612492](137215 call _instance _mt[232] a[137061]))
    (137225 call(137218 call (partial) dsiAssignDomain _mt[232] call_tmp[612492]) b[137067](lhsPrivate = 0))
    unknown call_tmp[612501] "expr temp" "maybe param" "maybe type" "temp"
    (612504 'move' call_tmp[612501](137229 call _instance _mt[232] a[137061]))
    unknown call_tmp[612506] "expr temp" "maybe param" "maybe type" "temp"
    (612509 'move' call_tmp[612506](137233 call _isPrivatized call_tmp[612501]))
    unknown call_tmp[612511] "expr temp" "maybe param" "maybe type" "temp"
    (612514 'move' call_tmp[612511](137243 call _cond_test call_tmp[612506]))
    if call_tmp[612511]
    {
      unknown call_tmp[612518] "expr temp" "maybe param" "maybe type" "temp"
      (612521 'move' call_tmp[612518](137236 call _instance _mt[232] a[137061]))
      (137240 call _reprivatize call_tmp[612518])
    }
    (469512 return _void[47])
  }
  function =[137255](ref arg a[137252]:_domain[123390](?), arg b[137258]:_tuple[58502](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (137266 call(137262 call (partial) clear _mt[232] a[137252]))
    {
      unknown _indexOfInterest[137289] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137290] "expr temp" "temp"
      unknown call_tmp[612527] "expr temp" "maybe param" "maybe type" "temp"
      (612530 'move' call_tmp[612527](137304 call size _mt[232] b[137258]))
      unknown call_tmp[612532] "expr temp" "maybe param" "maybe type" "temp"
      (612535 'move' call_tmp[612532](137307 call chpl_direct_range_iter 1 call_tmp[612527] 1))
      (137299 'move' _iterator[137290](137297 call _getIterator call_tmp[612532]))
      Defer
      {
        {
          (137323 call _freeIterator _iterator[137290])
        }
      }
      { scopeless type
        (137312 'move' _indexOfInterest[137289](137309 call iteratorIndex _iterator[137290]))
      }
      ForLoop
      {
        unknown ind[137316] "index var" "insert auto destroy"
        (137318 'move' ind[137316] _indexOfInterest[137289])
        {
          unknown call_tmp[612539] "expr temp" "maybe param" "maybe type" "temp"
          (612542 'move' call_tmp[612539](137284 call b[137258] ind[137316]))
          (137286 call(137278 call (partial) add _mt[232] a[137252]) call_tmp[612539])
        }
        label _continueLabel[137294]
        _indexOfInterest[137289]
        _iterator[137290]
      }
      label _breakLabel[137295]
    }
    (469514 return _void[47])
  }
  function =[137338](ref arg d[137335]:_domain[123390](?), arg r[137344]:range[66183](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown call_tmp[612544] "expr temp" "maybe param" "maybe type" "temp"
    (612547 'move' call_tmp[612544](137350 call chpl__buildDomainExpr r[137344]))
    (137352 call = d[137335] call_tmp[612544])
    (469516 return _void[47])
  }
  function chpl__isLegalRectTupDomAssign[137362](arg d[137360]:_any[170](?), arg t[137364]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469556] "RVV" "param" "temp"
    function isRangeTuple[137370](arg a[137368]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[469538] "RVV" "param" "temp"
      function peelArgs[137376](arg first[137374]:_any[170](?), arg rest[137379]:_any[170](?) ...) param : _unknown[43]
      {
        unknown ret[469520] "RVV" "param" "temp"
        unknown tmp[516383] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[516384] "maybe param" "temp"
        unknown call_tmp[612551] "expr temp" "maybe param" "maybe type" "temp"
        (612554 'move' call_tmp[612551](137383 call size _mt[232] rest[137379]))
        unknown call_tmp[612556] "expr temp" "maybe param" "maybe type" "temp"
        (612559 'move' call_tmp[612556](137387 call > call_tmp[612551] 1))
        (516389 'move' tmp[516384](516387 call _cond_test call_tmp[612556]))
        if tmp[516384]
        {
          unknown tmp[401853] "maybe param" "temp"
          (401864 'move' tmp[401853](137392 call isRange first[137374]))
          unknown call_tmp[612561] "expr temp" "maybe param" "maybe type" "temp"
          (612564 'move' call_tmp[612561](401866 call _cond_invalid tmp[401853]))
          if call_tmp[612561]
          {
            (401869 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[516329] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[516330] "maybe param" "temp"
          unknown call_tmp[612566] "expr temp" "maybe param" "maybe type" "temp"
          (612569 'move' call_tmp[612566](401854 call isTrue tmp[401853]))
          (516335 'move' tmp[516330](516333 call _cond_test call_tmp[612566]))
          if tmp[516330]
          {
            unknown tmp[516337] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[612571] "expr temp" "maybe param" "maybe type" "temp"
            (612574 'move' call_tmp[612571](137397 call peelArgs(137395 'expand_tuple' rest[137379])))
            (516339 'move' tmp[516337](401857 call isTrue call_tmp[612571]))
            (516344 'move' tmp[516329](516341 '_paramFoldLogical' tmp[516330] tmp[516337]))
          }
          {
            (516349 'move' tmp[516329](516346 '_paramFoldLogical' tmp[516330] 0))
          }
          (516394 'move' tmp[516383](516391 '_paramFoldLogical' tmp[516384] tmp[516329]))
        }
        {
          unknown tmp[401874] "maybe param" "temp"
          (401885 'move' tmp[401874](137403 call isRange first[137374]))
          unknown call_tmp[612576] "expr temp" "maybe param" "maybe type" "temp"
          (612579 'move' call_tmp[612576](401887 call _cond_invalid tmp[401874]))
          if call_tmp[612576]
          {
            (401890 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[516356] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[516357] "maybe param" "temp"
          unknown call_tmp[612581] "expr temp" "maybe param" "maybe type" "temp"
          (612584 'move' call_tmp[612581](401875 call isTrue tmp[401874]))
          (516362 'move' tmp[516357](516360 call _cond_test call_tmp[612581]))
          if tmp[516357]
          {
            unknown tmp[516364] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[612586] "expr temp" "maybe param" "maybe type" "temp"
            (612589 'move' call_tmp[612586](137408 call rest[137379] 1))
            unknown call_tmp[612591] "expr temp" "maybe param" "maybe type" "temp"
            (612594 'move' call_tmp[612591](137410 call isRange call_tmp[612586]))
            (516366 'move' tmp[516364](401878 call isTrue call_tmp[612591]))
            (516371 'move' tmp[516356](516368 '_paramFoldLogical' tmp[516357] tmp[516364]))
          }
          {
            (516376 'move' tmp[516356](516373 '_paramFoldLogical' tmp[516357] 0))
          }
          (516399 'move' tmp[516383](516396 '_paramFoldLogical' tmp[516384] tmp[516356]))
        }
        (469525 'move' ret[469520](469524 'deref' tmp[516383]))
        (469522 return ret[469520])
      }
      function peelArgs[137426](arg first[137424]:_any[170](?)) param : _unknown[43]
      {
        unknown ret[469529] "RVV" "param" "temp"
        unknown call_tmp[612596] "expr temp" "maybe param" "maybe type" "temp"
        (612599 'move' call_tmp[612596](137431 call isRange first[137424]))
        (469534 'move' ret[469529](469533 'deref' call_tmp[612596]))
        (469531 return ret[469529])
      }
      unknown tmp[516406] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[516407] "maybe param" "temp"
      unknown call_tmp[612601] "expr temp" "maybe param" "maybe type" "temp"
      (612604 'move' call_tmp[612601](137440 call isTuple a[137368]))
      unknown call_tmp[612606] "expr temp" "maybe param" "maybe type" "temp"
      (612609 'move' call_tmp[612606](137441 call ! call_tmp[612601]))
      (516412 'move' tmp[516407](516410 call _cond_test call_tmp[612606]))
      if tmp[516407]
      {
        (516417 'move' tmp[516406](516414 '_paramFoldLogical' tmp[516407] 0))
      }
      {
        unknown tmp[516419] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (516421 'move' tmp[516419](137448 call peelArgs(137446 'expand_tuple' a[137368])))
        (516426 'move' tmp[516406](516423 '_paramFoldLogical' tmp[516407] tmp[516419]))
      }
      (469543 'move' ret[469538](469542 'deref' tmp[516406]))
      (469540 return ret[469538])
    }
    function strideSafe[137461](arg d[137459]:_any[170](?), arg rt[137463]:_any[170](?), param arg dim[137467]:int(64)[13] =
    1) param : _unknown[43]
    {
      unknown ret[469547] "RVV" "param" "temp"
      unknown tmp[516514] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[516515] "maybe param" "temp"
      unknown call_tmp[612613] "expr temp" "maybe param" "maybe type" "temp"
      (612616 'move' call_tmp[612613](137473 call rank _mt[232] d[137459]))
      unknown call_tmp[612618] "expr temp" "maybe param" "maybe type" "temp"
      (612621 'move' call_tmp[612618](137476 call == dim[137467] call_tmp[612613]))
      (516520 'move' tmp[516515](516518 call _cond_test call_tmp[612618]))
      if tmp[516515]
      {
        unknown tmp[401895] "maybe param" "temp"
        unknown call_tmp[612625] "expr temp" "maybe param" "maybe type" "temp"
        (612628 'move' call_tmp[612625](137484 call(137479 call (partial) dim _mt[232] d[137459]) dim[137467]))
        (401906 'move' tmp[401895](137485 call stridable _mt[232] call_tmp[612625]))
        unknown call_tmp[612632] "expr temp" "maybe param" "maybe type" "temp"
        (612635 'move' call_tmp[612632](401908 call _cond_invalid tmp[401895]))
        if call_tmp[612632]
        {
          (401911 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[516433] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[516434] "maybe param" "temp"
        unknown call_tmp[612637] "expr temp" "maybe param" "maybe type" "temp"
        (612640 'move' call_tmp[612637](401896 call isTrue tmp[401895]))
        (516439 'move' tmp[516434](516437 call _cond_test call_tmp[612637]))
        if tmp[516434]
        {
          (516444 'move' tmp[516433](516441 '_paramFoldLogical' tmp[516434] 1))
        }
        {
          unknown tmp[516446] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[612642] "expr temp" "maybe param" "maybe type" "temp"
          (612645 'move' call_tmp[612642](137491 call rt[137463] dim[137467]))
          unknown call_tmp[612649] "expr temp" "maybe param" "maybe type" "temp"
          (612652 'move' call_tmp[612649](137492 call stridable _mt[232] call_tmp[612642]))
          unknown call_tmp[612654] "expr temp" "maybe param" "maybe type" "temp"
          (612657 'move' call_tmp[612654](137495 call ! call_tmp[612649]))
          (516448 'move' tmp[516446](401900 call isTrue call_tmp[612654]))
          (516453 'move' tmp[516433](516450 '_paramFoldLogical' tmp[516434] tmp[516446]))
        }
        (516525 'move' tmp[516514](516522 '_paramFoldLogical' tmp[516515] tmp[516433]))
      }
      {
        unknown tmp[401916] "maybe param" "temp"
        unknown tmp[401937] "maybe param" "temp"
        unknown call_tmp[612661] "expr temp" "maybe param" "maybe type" "temp"
        (612664 'move' call_tmp[612661](137505 call(137500 call (partial) dim _mt[232] d[137459]) dim[137467]))
        (401948 'move' tmp[401937](137506 call stridable _mt[232] call_tmp[612661]))
        unknown call_tmp[612668] "expr temp" "maybe param" "maybe type" "temp"
        (612671 'move' call_tmp[612668](401950 call _cond_invalid tmp[401937]))
        if call_tmp[612668]
        {
          (401953 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[516460] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[516461] "maybe param" "temp"
        unknown call_tmp[612673] "expr temp" "maybe param" "maybe type" "temp"
        (612676 'move' call_tmp[612673](401938 call isTrue tmp[401937]))
        (516466 'move' tmp[516461](516464 call _cond_test call_tmp[612673]))
        if tmp[516461]
        {
          (516471 'move' tmp[516460](516468 '_paramFoldLogical' tmp[516461] 1))
        }
        {
          unknown tmp[516473] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[612678] "expr temp" "maybe param" "maybe type" "temp"
          (612681 'move' call_tmp[612678](137512 call rt[137463] dim[137467]))
          unknown call_tmp[612685] "expr temp" "maybe param" "maybe type" "temp"
          (612688 'move' call_tmp[612685](137513 call stridable _mt[232] call_tmp[612678]))
          unknown call_tmp[612690] "expr temp" "maybe param" "maybe type" "temp"
          (612693 'move' call_tmp[612690](137516 call ! call_tmp[612685]))
          (516475 'move' tmp[516473](401942 call isTrue call_tmp[612690]))
          (516480 'move' tmp[516460](516477 '_paramFoldLogical' tmp[516461] tmp[516473]))
        }
        (401927 'move' tmp[401916] tmp[516460])
        unknown call_tmp[612695] "expr temp" "maybe param" "maybe type" "temp"
        (612698 'move' call_tmp[612695](401929 call _cond_invalid tmp[401916]))
        if call_tmp[612695]
        {
          (401932 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[516487] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[516488] "maybe param" "temp"
        unknown call_tmp[612700] "expr temp" "maybe param" "maybe type" "temp"
        (612703 'move' call_tmp[612700](401917 call isTrue tmp[401916]))
        (516493 'move' tmp[516488](516491 call _cond_test call_tmp[612700]))
        if tmp[516488]
        {
          unknown tmp[516495] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[612705] "expr temp" "maybe param" "maybe type" "temp"
          (612708 'move' call_tmp[612705](137526 call + dim[137467] 1))
          unknown call_tmp[612710] "expr temp" "maybe param" "maybe type" "temp"
          (612713 'move' call_tmp[612710](137528 call strideSafe d[137459] rt[137463] call_tmp[612705]))
          (516497 'move' tmp[516495](401920 call isTrue call_tmp[612710]))
          (516502 'move' tmp[516487](516499 '_paramFoldLogical' tmp[516488] tmp[516495]))
        }
        {
          (516507 'move' tmp[516487](516504 '_paramFoldLogical' tmp[516488] 0))
        }
        (516530 'move' tmp[516514](516527 '_paramFoldLogical' tmp[516515] tmp[516487]))
      }
      (469552 'move' ret[469547](469551 'deref' tmp[516514]))
      (469549 return ret[469547])
    }
    unknown tmp[401958] "maybe param" "temp"
    unknown tmp[401979] "maybe param" "temp"
    (401990 'move' tmp[401979](137542 call isRangeTuple t[137364]))
    unknown call_tmp[612715] "expr temp" "maybe param" "maybe type" "temp"
    (612718 'move' call_tmp[612715](401992 call _cond_invalid tmp[401979]))
    if call_tmp[612715]
    {
      (401995 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516537] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516538] "maybe param" "temp"
    unknown call_tmp[612720] "expr temp" "maybe param" "maybe type" "temp"
    (612723 'move' call_tmp[612720](401980 call isTrue tmp[401979]))
    (516543 'move' tmp[516538](516541 call _cond_test call_tmp[612720]))
    if tmp[516538]
    {
      unknown tmp[516545] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612727] "expr temp" "maybe param" "maybe type" "temp"
      (612730 'move' call_tmp[612727](137544 call rank _mt[232] d[137360]))
      unknown call_tmp[612734] "expr temp" "maybe param" "maybe type" "temp"
      (612737 'move' call_tmp[612734](137548 call size _mt[232] t[137364]))
      unknown call_tmp[612739] "expr temp" "maybe param" "maybe type" "temp"
      (612742 'move' call_tmp[612739](137551 call == call_tmp[612727] call_tmp[612734]))
      (516547 'move' tmp[516545](401983 call isTrue call_tmp[612739]))
      (516552 'move' tmp[516537](516549 '_paramFoldLogical' tmp[516538] tmp[516545]))
    }
    {
      (516557 'move' tmp[516537](516554 '_paramFoldLogical' tmp[516538] 0))
    }
    (401969 'move' tmp[401958] tmp[516537])
    unknown call_tmp[612744] "expr temp" "maybe param" "maybe type" "temp"
    (612747 'move' call_tmp[612744](401971 call _cond_invalid tmp[401958]))
    if call_tmp[612744]
    {
      (401974 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516564] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516565] "maybe param" "temp"
    unknown call_tmp[612749] "expr temp" "maybe param" "maybe type" "temp"
    (612752 'move' call_tmp[612749](401959 call isTrue tmp[401958]))
    (516570 'move' tmp[516565](516568 call _cond_test call_tmp[612749]))
    if tmp[516565]
    {
      unknown tmp[516572] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612754] "expr temp" "maybe param" "maybe type" "temp"
      (612757 'move' call_tmp[612754](137559 call strideSafe d[137360] t[137364]))
      (516574 'move' tmp[516572](401962 call isTrue call_tmp[612754]))
      (516579 'move' tmp[516564](516576 '_paramFoldLogical' tmp[516565] tmp[516572]))
    }
    {
      (516584 'move' tmp[516564](516581 '_paramFoldLogical' tmp[516565] 0))
    }
    (469561 'move' ret[469556](469560 'deref' tmp[516564]))
    (469558 return ret[469556])
  }
  function =[137572](ref arg d[137569]:_domain[123390](?), arg rt[137575]:_tuple[58502](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown call_tmp[612759] "expr temp" "maybe param" "maybe type" "temp"
    (612762 'move' call_tmp[612759](137587 call chpl__buildDomainExpr(137585 'expand_tuple' rt[137575])))
    (137589 call = d[137569] call_tmp[612759])
    (469563 return _void[47])
  }
  where {
    (137582 call chpl__isLegalRectTupDomAssign d[137569] rt[137575])
  }
  function =[137602](ref arg a[137599]:_domain[123390](?), arg b[137604]:_any[170](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown call_tmp[612764] "expr temp" "maybe param" "maybe type" "temp"
    (612767 'move' call_tmp[612764](137609 call isRectangularDom a[137599]))
    unknown call_tmp[612769] "expr temp" "maybe param" "maybe type" "temp"
    (612772 'move' call_tmp[612769](137630 call _cond_test call_tmp[612764]))
    if call_tmp[612769]
    {
      (137628 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137641 call(137637 call (partial) clear _mt[232] a[137599]))
    {
      unknown _indexOfInterest[137654] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137655] "expr temp" "temp"
      (137664 'move' _iterator[137655](137662 call _getIterator b[137604]))
      Defer
      {
        {
          (137680 call _freeIterator _iterator[137655])
        }
      }
      { scopeless type
        (137669 'move' _indexOfInterest[137654](137666 call iteratorIndex _iterator[137655]))
      }
      ForLoop
      {
        unknown ind[137673] "index var" "insert auto destroy"
        (137675 'move' ind[137673] _indexOfInterest[137654])
        {
          (137651 call(137646 call (partial) add _mt[232] a[137599]) ind[137673])
        }
        label _continueLabel[137659]
        _indexOfInterest[137654]
        _iterator[137655]
      }
      label _breakLabel[137660]
    }
    (469565 return _void[47])
  }
  function chpl__serializeAssignment[137697](arg a[137694]:_array[133150](?), arg b[137699]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469569] "RVV" "param" "temp"
    unknown tmp[402000] "maybe param" "temp"
    unknown call_tmp[612780] "expr temp" "maybe param" "maybe type" "temp"
    (612783 'move' call_tmp[612780](137702 call rank _mt[232] a[137694]))
    (402011 'move' tmp[402000](137706 call != call_tmp[612780] 1))
    unknown call_tmp[612785] "expr temp" "maybe param" "maybe type" "temp"
    (612788 'move' call_tmp[612785](402013 call _cond_invalid tmp[402000]))
    if call_tmp[612785]
    {
      (402016 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516591] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516592] "maybe param" "temp"
    unknown call_tmp[612790] "expr temp" "maybe param" "maybe type" "temp"
    (612793 'move' call_tmp[612790](402001 call isTrue tmp[402000]))
    (516597 'move' tmp[516592](516595 call _cond_test call_tmp[612790]))
    if tmp[516592]
    {
      unknown tmp[516599] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612795] "expr temp" "maybe param" "maybe type" "temp"
      (612798 'move' call_tmp[612795](137711 call isRange b[137699]))
      (516601 'move' tmp[516599](402004 call isTrue call_tmp[612795]))
      (516606 'move' tmp[516591](516603 '_paramFoldLogical' tmp[516592] tmp[516599]))
    }
    {
      (516611 'move' tmp[516591](516608 '_paramFoldLogical' tmp[516592] 0))
    }
    unknown call_tmp[612800] "expr temp" "maybe param" "maybe type" "temp"
    (612803 'move' call_tmp[612800](137717 call _cond_test tmp[516591]))
    if call_tmp[612800]
    {
      (469574 'move' ret[469569](469573 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[469567] _end_chpl__serializeAssignment[469567]
    }
    unknown tmp[402021] "maybe param" "temp"
    unknown tmp[402042] "maybe param" "temp"
    unknown tmp[402063] "maybe param" "temp"
    unknown call_tmp[612805] "expr temp" "maybe param" "maybe type" "temp"
    (612808 'move' call_tmp[612805](137726 call isRectangularArr a[137694]))
    (402074 'move' tmp[402063](137727 call ! call_tmp[612805]))
    unknown call_tmp[612810] "expr temp" "maybe param" "maybe type" "temp"
    (612813 'move' call_tmp[612810](402076 call _cond_invalid tmp[402063]))
    if call_tmp[612810]
    {
      (402079 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516618] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516619] "maybe param" "temp"
    unknown call_tmp[612815] "expr temp" "maybe param" "maybe type" "temp"
    (612818 'move' call_tmp[612815](402064 call isTrue tmp[402063]))
    (516624 'move' tmp[516619](516622 call _cond_test call_tmp[612815]))
    if tmp[516619]
    {
      unknown tmp[516626] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612820] "expr temp" "maybe param" "maybe type" "temp"
      (612823 'move' call_tmp[612820](137732 call isAssociativeArr a[137694]))
      unknown call_tmp[612825] "expr temp" "maybe param" "maybe type" "temp"
      (612828 'move' call_tmp[612825](137733 call ! call_tmp[612820]))
      (516628 'move' tmp[516626](402067 call isTrue call_tmp[612825]))
      (516633 'move' tmp[516618](516630 '_paramFoldLogical' tmp[516619] tmp[516626]))
    }
    {
      (516638 'move' tmp[516618](516635 '_paramFoldLogical' tmp[516619] 0))
    }
    (402053 'move' tmp[402042] tmp[516618])
    unknown call_tmp[612830] "expr temp" "maybe param" "maybe type" "temp"
    (612833 'move' call_tmp[612830](402055 call _cond_invalid tmp[402042]))
    if call_tmp[612830]
    {
      (402058 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516645] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516646] "maybe param" "temp"
    unknown call_tmp[612835] "expr temp" "maybe param" "maybe type" "temp"
    (612838 'move' call_tmp[612835](402043 call isTrue tmp[402042]))
    (516651 'move' tmp[516646](516649 call _cond_test call_tmp[612835]))
    if tmp[516646]
    {
      unknown tmp[516653] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612840] "expr temp" "maybe param" "maybe type" "temp"
      (612843 'move' call_tmp[612840](137740 call isSparseArr a[137694]))
      unknown call_tmp[612845] "expr temp" "maybe param" "maybe type" "temp"
      (612848 'move' call_tmp[612845](137741 call ! call_tmp[612840]))
      (516655 'move' tmp[516653](402046 call isTrue call_tmp[612845]))
      (516660 'move' tmp[516645](516657 '_paramFoldLogical' tmp[516646] tmp[516653]))
    }
    {
      (516665 'move' tmp[516645](516662 '_paramFoldLogical' tmp[516646] 0))
    }
    (402032 'move' tmp[402021] tmp[516645])
    unknown call_tmp[612850] "expr temp" "maybe param" "maybe type" "temp"
    (612853 'move' call_tmp[612850](402034 call _cond_invalid tmp[402021]))
    if call_tmp[612850]
    {
      (402037 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[516753] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516754] "maybe param" "temp"
    unknown call_tmp[612855] "expr temp" "maybe param" "maybe type" "temp"
    (612858 'move' call_tmp[612855](402022 call isTrue tmp[402021]))
    (516759 'move' tmp[516754](516757 call _cond_test call_tmp[612855]))
    if tmp[516754]
    {
      (516764 'move' tmp[516753](516761 '_paramFoldLogical' tmp[516754] 1))
    }
    {
      unknown tmp[402084] "maybe param" "temp"
      unknown tmp[402105] "maybe param" "temp"
      unknown tmp[402126] "maybe param" "temp"
      (402137 'move' tmp[402126](137748 call isArray b[137699]))
      unknown call_tmp[612860] "expr temp" "maybe param" "maybe type" "temp"
      (612863 'move' call_tmp[612860](402139 call _cond_invalid tmp[402126]))
      if call_tmp[612860]
      {
        (402142 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[516672] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[516673] "maybe param" "temp"
      unknown call_tmp[612865] "expr temp" "maybe param" "maybe type" "temp"
      (612868 'move' call_tmp[612865](402127 call isTrue tmp[402126]))
      (516678 'move' tmp[516673](516676 call _cond_test call_tmp[612865]))
      if tmp[516673]
      {
        unknown tmp[516680] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[612870] "expr temp" "maybe param" "maybe type" "temp"
        (612873 'move' call_tmp[612870](137752 call isRectangularArr b[137699]))
        unknown call_tmp[612875] "expr temp" "maybe param" "maybe type" "temp"
        (612878 'move' call_tmp[612875](137753 call ! call_tmp[612870]))
        (516682 'move' tmp[516680](402130 call isTrue call_tmp[612875]))
        (516687 'move' tmp[516672](516684 '_paramFoldLogical' tmp[516673] tmp[516680]))
      }
      {
        (516692 'move' tmp[516672](516689 '_paramFoldLogical' tmp[516673] 0))
      }
      (402116 'move' tmp[402105] tmp[516672])
      unknown call_tmp[612880] "expr temp" "maybe param" "maybe type" "temp"
      (612883 'move' call_tmp[612880](402118 call _cond_invalid tmp[402105]))
      if call_tmp[612880]
      {
        (402121 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[516699] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[516700] "maybe param" "temp"
      unknown call_tmp[612885] "expr temp" "maybe param" "maybe type" "temp"
      (612888 'move' call_tmp[612885](402106 call isTrue tmp[402105]))
      (516705 'move' tmp[516700](516703 call _cond_test call_tmp[612885]))
      if tmp[516700]
      {
        unknown tmp[516707] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[612890] "expr temp" "maybe param" "maybe type" "temp"
        (612893 'move' call_tmp[612890](137760 call isAssociativeArr b[137699]))
        unknown call_tmp[612895] "expr temp" "maybe param" "maybe type" "temp"
        (612898 'move' call_tmp[612895](137761 call ! call_tmp[612890]))
        (516709 'move' tmp[516707](402109 call isTrue call_tmp[612895]))
        (516714 'move' tmp[516699](516711 '_paramFoldLogical' tmp[516700] tmp[516707]))
      }
      {
        (516719 'move' tmp[516699](516716 '_paramFoldLogical' tmp[516700] 0))
      }
      (402095 'move' tmp[402084] tmp[516699])
      unknown call_tmp[612900] "expr temp" "maybe param" "maybe type" "temp"
      (612903 'move' call_tmp[612900](402097 call _cond_invalid tmp[402084]))
      if call_tmp[612900]
      {
        (402100 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[516726] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[516727] "maybe param" "temp"
      unknown call_tmp[612905] "expr temp" "maybe param" "maybe type" "temp"
      (612908 'move' call_tmp[612905](402085 call isTrue tmp[402084]))
      (516732 'move' tmp[516727](516730 call _cond_test call_tmp[612905]))
      if tmp[516727]
      {
        unknown tmp[516734] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[612910] "expr temp" "maybe param" "maybe type" "temp"
        (612913 'move' call_tmp[612910](137768 call isSparseArr b[137699]))
        unknown call_tmp[612915] "expr temp" "maybe param" "maybe type" "temp"
        (612918 'move' call_tmp[612915](137769 call ! call_tmp[612910]))
        (516736 'move' tmp[516734](402088 call isTrue call_tmp[612915]))
        (516741 'move' tmp[516726](516738 '_paramFoldLogical' tmp[516727] tmp[516734]))
      }
      {
        (516746 'move' tmp[516726](516743 '_paramFoldLogical' tmp[516727] 0))
      }
      unknown tmp[516766] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (516768 'move' tmp[516766](402026 call isTrue tmp[516726]))
      (516773 'move' tmp[516753](516770 '_paramFoldLogical' tmp[516754] tmp[516766]))
    }
    unknown call_tmp[612920] "expr temp" "maybe param" "maybe type" "temp"
    (612923 'move' call_tmp[612920](137778 call _cond_test tmp[516753]))
    if call_tmp[612920]
    {
      (469579 'move' ret[469569](469578 'deref' 1))
      gotoReturn _end_chpl__serializeAssignment[469567] _end_chpl__serializeAssignment[469567]
    }
    (469584 'move' ret[469569](469583 'deref' 0))
    label _end_chpl__serializeAssignment[469567]
    (469571 return ret[469569])
  }
  function chpl__compatibleForBulkTransfer[137796](arg a[137793]:_array[133150](?), arg b[137801]:_array[133150](?)) param : _unknown[43]
  {
    unknown ret[469588] "RVV" "param" "temp"
    unknown call_tmp[612925] "expr temp" "maybe param" "maybe type" "temp"
    (612928 'move' call_tmp[612925](137805 call ! useBulkTransfer[111833]))
    unknown call_tmp[612930] "expr temp" "maybe param" "maybe type" "temp"
    (612933 'move' call_tmp[612930](137810 call _cond_test call_tmp[612925]))
    if call_tmp[612930]
    {
      (469593 'move' ret[469588](469592 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[469586] _end_chpl__compatibleForBulkTransfer[469586]
    }
    unknown call_tmp[612937] "expr temp" "maybe param" "maybe type" "temp"
    (612940 'move' call_tmp[612937](137817 call eltType _mt[232] a[137793]))
    unknown call_tmp[612944] "expr temp" "maybe param" "maybe type" "temp"
    (612947 'move' call_tmp[612944](137821 call eltType _mt[232] b[137801]))
    unknown call_tmp[612949] "expr temp" "maybe param" "maybe type" "temp"
    (612952 'move' call_tmp[612949](137824 call != call_tmp[612937] call_tmp[612944]))
    unknown call_tmp[612954] "expr temp" "maybe param" "maybe type" "temp"
    (612957 'move' call_tmp[612954](137829 call _cond_test call_tmp[612949]))
    if call_tmp[612954]
    {
      (469598 'move' ret[469588](469597 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[469586] _end_chpl__compatibleForBulkTransfer[469586]
    }
    unknown call_tmp[612961] "expr temp" "maybe param" "maybe type" "temp"
    (612964 'move' call_tmp[612961](137836 call eltType _mt[232] a[137793]))
    unknown call_tmp[612966] "expr temp" "maybe param" "maybe type" "temp"
    (612969 'move' call_tmp[612966](137840 call chpl__supportedDataTypeForBulkTransfer call_tmp[612961]))
    unknown call_tmp[612971] "expr temp" "maybe param" "maybe type" "temp"
    (612974 'move' call_tmp[612971](137841 call ! call_tmp[612966]))
    unknown call_tmp[612976] "expr temp" "maybe param" "maybe type" "temp"
    (612979 'move' call_tmp[612976](137846 call _cond_test call_tmp[612971]))
    if call_tmp[612976]
    {
      (469603 'move' ret[469588](469602 'deref' 0))
      gotoReturn _end_chpl__compatibleForBulkTransfer[469586] _end_chpl__compatibleForBulkTransfer[469586]
    }
    (469608 'move' ret[469588](469607 'deref' 1))
    label _end_chpl__compatibleForBulkTransfer[469586]
    (469590 return ret[469588])
  }
  function chpl__supportedDataTypeForBulkTransfer[137860](arg t[137858]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469612] "RVV" "param" "temp"
    unknown tmp[402147] "maybe param" "temp"
    (402158 'move' tmp[402147](328606 'is_subtype' borrowed[200](?) t[137858]))
    unknown call_tmp[612981] "expr temp" "maybe param" "maybe type" "temp"
    (612984 'move' call_tmp[612981](402160 call _cond_invalid tmp[402147]))
    if call_tmp[612981]
    {
      (402163 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[516780] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516781] "maybe param" "temp"
    unknown call_tmp[612986] "expr temp" "maybe param" "maybe type" "temp"
    (612989 'move' call_tmp[612986](402148 call isTrue tmp[402147]))
    (516786 'move' tmp[516781](516784 call _cond_test call_tmp[612986]))
    if tmp[516781]
    {
      (516791 'move' tmp[516780](516788 '_paramFoldLogical' tmp[516781] 1))
    }
    {
      unknown tmp[516793] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[612991] "expr temp" "maybe param" "maybe type" "temp"
      (612994 'move' call_tmp[612991](328607 'is_subtype' unmanaged[209](?) t[137858]))
      (516795 'move' tmp[516793](402152 call isTrue call_tmp[612991]))
      (516800 'move' tmp[516780](516797 '_paramFoldLogical' tmp[516781] tmp[516793]))
    }
    unknown call_tmp[612996] "expr temp" "maybe param" "maybe type" "temp"
    (612999 'move' call_tmp[612996](137889 call _cond_test tmp[516780]))
    if call_tmp[612996]
    {
      (469617 'move' ret[469612](469616 'deref' 0))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[469610] _end_chpl__supportedDataTypeForBulkTransfer[469610]
    }
    {
      unknown x[137879] "insert auto destroy"
      (491686 'default init var' x[137879] t[137858])
      unknown call_tmp[613001] "expr temp" "maybe param" "maybe type" "temp"
      (613004 'move' call_tmp[613001](137886 call chpl__supportedDataTypeForBulkTransfer x[137879]))
      (469622 'move' ret[469612](469621 'deref' call_tmp[613001]))
      gotoReturn _end_chpl__supportedDataTypeForBulkTransfer[469610] _end_chpl__supportedDataTypeForBulkTransfer[469610]
    }
    label _end_chpl__supportedDataTypeForBulkTransfer[469610]
    (469614 return ret[469612])
  }
  function chpl__supportedDataTypeForBulkTransfer[137902](arg x[137899]:string[24]) param : _unknown[43]
  {
    unknown ret[469628] "RVV" "param" "temp"
    (469633 'move' ret[469628](469632 'deref' 0))
    (469630 return ret[469628])
  }
  function chpl__supportedDataTypeForBulkTransfer[137916](arg x[137913]:_syncvar[85613](?)) param : _unknown[43]
  {
    unknown ret[469637] "RVV" "param" "temp"
    (469642 'move' ret[469637](469641 'deref' 0))
    (469639 return ret[469637])
  }
  function chpl__supportedDataTypeForBulkTransfer[137930](arg x[137927]:_singlevar[87725](?)) param : _unknown[43]
  {
    unknown ret[469646] "RVV" "param" "temp"
    (469651 'move' ret[469646](469650 'deref' 0))
    (469648 return ret[469646])
  }
  function chpl__supportedDataTypeForBulkTransfer[137944](arg x[137941]:_domain[123390](?)) param : _unknown[43]
  {
    unknown ret[469655] "RVV" "param" "temp"
    (469660 'move' ret[469655](469659 'deref' 0))
    (469657 return ret[469655])
  }
  function chpl__supportedDataTypeForBulkTransfer[137960](arg x[137957]:_array[133150](?)) param : _unknown[43]
  {
    unknown ret[469664] "RVV" "param" "temp"
    (469669 'move' ret[469664](469668 'deref' 0))
    (469666 return ret[469664])
  }
  function chpl__supportedDataTypeForBulkTransfer[137974](arg x[137971]:_distribution[116702](?)) param : _unknown[43]
  {
    unknown ret[469673] "RVV" "param" "temp"
    (469678 'move' ret[469673](469677 'deref' 1))
    (469675 return ret[469673])
  }
  function chpl__supportedDataTypeForBulkTransfer[137988](arg x[137985]:chpl_anycomplex[176](?)) param : _unknown[43]
  {
    unknown ret[469682] "RVV" "param" "temp"
    (469687 'move' ret[469682](469686 'deref' 1))
    (469684 return ret[469682])
  }
  function chpl__supportedDataTypeForBulkTransfer[138003](arg x[138000]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469691] "RVV" "param" "temp"
    unknown call_tmp[613006] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (613009 'move' call_tmp[613006](436411 'typeof' x[138000]))
    unknown call_tmp[613011] "expr temp" "maybe param" "maybe type" "temp"
    (613014 'move' call_tmp[613011](138018 call isPODType call_tmp[613006]))
    (469696 'move' ret[469691](469695 'deref' call_tmp[613011]))
    (469693 return ret[469691])
  }
  where {
    unknown tmp[402168] "maybe param" "temp"
    unknown call_tmp[613016] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (613019 'move' call_tmp[613016](436413 'typeof' x[138000]))
    (402179 'move' tmp[402168](138008 call isRecordType call_tmp[613016]))
    unknown call_tmp[613021] "expr temp" "maybe param" "maybe type" "temp"
    (613024 'move' call_tmp[613021](402181 call _cond_invalid tmp[402168]))
    if call_tmp[613021]
    {
      (402184 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[516807] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516808] "maybe param" "temp"
    unknown call_tmp[613026] "expr temp" "maybe param" "maybe type" "temp"
    (613029 'move' call_tmp[613026](402169 call isTrue tmp[402168]))
    (516813 'move' tmp[516808](516811 call _cond_test call_tmp[613026]))
    if tmp[516808]
    {
      (516818 'move' tmp[516807](516815 '_paramFoldLogical' tmp[516808] 1))
    }
    {
      unknown tmp[516820] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[613031] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (613034 'move' call_tmp[613031](436415 'typeof' x[138000]))
      unknown call_tmp[613036] "expr temp" "maybe param" "maybe type" "temp"
      (613039 'move' call_tmp[613036](138012 call isTupleType call_tmp[613031]))
      (516822 'move' tmp[516820](402173 call isTrue call_tmp[613036]))
      (516827 'move' tmp[516807](516824 '_paramFoldLogical' tmp[516808] tmp[516820]))
    }
    (691943 call _statementLevelSymbol tmp[516807])
  }
  function chpl__supportedDataTypeForBulkTransfer[138032](arg x[138029]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469700] "RVV" "param" "temp"
    (469705 'move' ret[469700](469704 'deref' 0))
    (469702 return ret[469700])
  }
  where {
    unknown call_tmp[613041] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (613044 'move' call_tmp[613041](436417 'typeof' x[138029]))
    (138037 call isUnionType call_tmp[613041])
  }
  function chpl__supportedDataTypeForBulkTransfer[138052](arg x[138049]:object[253]) param : _unknown[43]
  {
    unknown ret[469709] "RVV" "param" "temp"
    (469714 'move' ret[469709](469713 'deref' 0))
    (469711 return ret[469709])
  }
  function chpl__supportedDataTypeForBulkTransfer[138064](arg x[138062]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[469718] "RVV" "param" "temp"
    (469723 'move' ret[469718](469722 'deref' 1))
    (469720 return ret[469718])
  }
  function checkArrayShapesUponAssignment[138080](arg a[138077]:_array[133150](?), arg b[138085]:_array[133150](?)) : _unknown[43] "no doc" "no return value for void"
  {
    unknown tmp[402189] "maybe param" "temp"
    (402200 'move' tmp[402189](138091 call isRectangularArr a[138077]))
    unknown call_tmp[613046] "expr temp" "maybe param" "maybe type" "temp"
    (613049 'move' call_tmp[613046](402202 call _cond_invalid tmp[402189]))
    if call_tmp[613046]
    {
      (402205 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516834] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516835] "maybe param" "temp"
    unknown call_tmp[613051] "expr temp" "maybe param" "maybe type" "temp"
    (613054 'move' call_tmp[613051](402190 call isTrue tmp[402189]))
    (516840 'move' tmp[516835](516838 call _cond_test call_tmp[613051]))
    if tmp[516835]
    {
      unknown tmp[516842] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[613056] "expr temp" "maybe param" "maybe type" "temp"
      (613059 'move' call_tmp[613056](138095 call isRectangularArr b[138085]))
      (516844 'move' tmp[516842](402193 call isTrue call_tmp[613056]))
      (516849 'move' tmp[516834](516846 '_paramFoldLogical' tmp[516835] tmp[516842]))
    }
    {
      (516854 'move' tmp[516834](516851 '_paramFoldLogical' tmp[516835] 0))
    }
    unknown call_tmp[613061] "expr temp" "maybe param" "maybe type" "temp"
    (613064 'move' call_tmp[613061](138262 call _cond_test tmp[516834]))
    if call_tmp[613061]
    {
      unknown call_tmp[613068] "expr temp" "maybe param" "maybe type" "temp"
      (613071 'move' call_tmp[613068](138099 call _value _mt[232] a[138077]))
      unknown call_tmp[613075] "expr temp" "maybe param" "maybe type" "temp"
      (613078 'move' call_tmp[613075](138102 call dom _mt[232] call_tmp[613068]))
      unknown call_tmp[613082] "maybe param" "maybe type" "temp"
      (613085 'move' call_tmp[613082](138109 call(138105 call (partial) dsiDims _mt[232] call_tmp[613075])))
      const aDims[138110] "const" "insert auto destroy"
      (491688 'init var' aDims[138110] call_tmp[613082])
      unknown call_tmp[613089] "expr temp" "maybe param" "maybe type" "temp"
      (613092 'move' call_tmp[613089](138114 call _value _mt[232] b[138085]))
      unknown call_tmp[613096] "expr temp" "maybe param" "maybe type" "temp"
      (613099 'move' call_tmp[613096](138117 call dom _mt[232] call_tmp[613089]))
      unknown call_tmp[613103] "maybe param" "maybe type" "temp"
      (613106 'move' call_tmp[613103](138124 call(138120 call (partial) dsiDims _mt[232] call_tmp[613096])))
      const bDims[138125] "const" "insert auto destroy"
      (491690 'init var' bDims[138125] call_tmp[613103])
      unknown call_tmp[613110] "expr temp" "maybe param" "maybe type" "temp"
      (613113 'move' call_tmp[613110](138131 call size _mt[232] aDims[138110]))
      unknown call_tmp[613117] "expr temp" "maybe param" "maybe type" "temp"
      (613120 'move' call_tmp[613117](138135 call size _mt[232] bDims[138125]))
      unknown call_tmp[613122] "expr temp" "maybe param" "maybe type" "temp"
      (613125 'move' call_tmp[613122](138138 call == call_tmp[613110] call_tmp[613117]))
      (138141 call compilerAssert call_tmp[613122])
      {
        unknown i[138224] "insert auto destroy"
        (491692 'init var' i[138224] 0)
        unknown tmp[138225] "maybe param" "temp"
        unknown call_tmp[613129] "expr temp" "maybe param" "maybe type" "temp"
        (613132 'move' call_tmp[613129](138145 call size _mt[232] aDims[138110]))
        (138237 'move' tmp[138225](138235 call chpl_compute_low_param_loop_bound 1 call_tmp[613129]))
        unknown tmp[138226] "maybe param" "temp"
        unknown call_tmp[613136] "expr temp" "maybe param" "maybe type" "temp"
        (613139 'move' call_tmp[613136](138242 call size _mt[232] aDims[138110]))
        (138247 'move' tmp[138226](138245 call chpl_compute_high_param_loop_bound 1 call_tmp[613136]))
        unknown tmp[138227] "maybe param" "temp"
        (138250 'move' tmp[138227] 1)
        ParamForLoop
        { i[138224] tmp[138225] tmp[138226] tmp[138227]
          {
            unknown call_tmp[613141] "expr temp" "maybe param" "maybe type" "temp"
            (613144 'move' call_tmp[613141](138153 call aDims[138110] i[138224]))
            unknown call_tmp[613148] "expr temp" "maybe param" "maybe type" "temp"
            (613151 'move' call_tmp[613148](138154 call length _mt[232] call_tmp[613141]))
            unknown call_tmp[613153] "expr temp" "maybe param" "maybe type" "temp"
            (613156 'move' call_tmp[613153](138160 call bDims[138125] i[138224]))
            unknown call_tmp[613160] "expr temp" "maybe param" "maybe type" "temp"
            (613163 'move' call_tmp[613160](138161 call length _mt[232] call_tmp[613153]))
            unknown call_tmp[613165] "expr temp" "maybe param" "maybe type" "temp"
            (613168 'move' call_tmp[613165](138164 call != call_tmp[613148] call_tmp[613160]))
            unknown call_tmp[613170] "expr temp" "maybe param" "maybe type" "temp"
            (613173 'move' call_tmp[613170](138218 call _cond_test call_tmp[613165]))
            if call_tmp[613170]
            {
              unknown call_tmp[613175] "expr temp" "maybe param" "maybe type" "temp"
              (613178 'move' call_tmp[613175](138189 call aDims[138110] i[138224]))
              unknown call_tmp[613182] "expr temp" "maybe param" "maybe type" "temp"
              (613185 'move' call_tmp[613182](138190 call length _mt[232] call_tmp[613175]))
              unknown call_tmp[613187] "expr temp" "maybe param" "maybe type" "temp"
              (613190 'move' call_tmp[613187](138212 call bDims[138125] i[138224]))
              unknown call_tmp[613194] "expr temp" "maybe param" "maybe type" "temp"
              (613197 'move' call_tmp[613194](138213 call length _mt[232] call_tmp[613187]))
              (138216 call halt "assigning between arrays of different shapes in dimension " i[138224] ": " call_tmp[613182] " vs. " call_tmp[613194])
            }
          }
        }
        label _unused_continueLabel[138229]
        label _breakLabel[138228]
      }
    }
    {
    }
    (469725 return _void[47])
  }
  function =[138277](ref arg a[138274]:_array[133150](?), arg b[138282]:_array[133150](?)) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[613201] "expr temp" "maybe param" "maybe type" "temp"
    (613204 'move' call_tmp[613201](138286 call rank _mt[232] a[138274]))
    unknown call_tmp[613208] "expr temp" "maybe param" "maybe type" "temp"
    (613211 'move' call_tmp[613208](138290 call rank _mt[232] b[138282]))
    unknown call_tmp[613213] "expr temp" "maybe param" "maybe type" "temp"
    (613216 'move' call_tmp[613213](138293 call != call_tmp[613201] call_tmp[613208]))
    unknown call_tmp[613218] "expr temp" "maybe param" "maybe type" "temp"
    (613221 'move' call_tmp[613218](138315 call _cond_test call_tmp[613213]))
    if call_tmp[613218]
    {
      (138313 call compilerError "rank mismatch in array assignment")
    }
    unknown call_tmp[613225] "expr temp" "maybe param" "maybe type" "temp"
    (613228 'move' call_tmp[613225](138322 call _value _mt[232] b[138282]))
    unknown call_tmp[613230] "expr temp" "maybe param" "maybe type" "temp"
    (613233 'move' call_tmp[613230](138326 call == call_tmp[613225] nil[38]))
    unknown call_tmp[613235] "expr temp" "maybe param" "maybe type" "temp"
    (613238 'move' call_tmp[613235](138330 call _cond_test call_tmp[613230]))
    if call_tmp[613235]
    {
      gotoReturn _end_=[469727] _end_=[469727]
    }
    unknown call_tmp[613242] "expr temp" "maybe param" "maybe type" "temp"
    (613245 'move' call_tmp[613242](138336 call _value _mt[232] a[138274]))
    unknown call_tmp[613249] "expr temp" "maybe param" "maybe type" "temp"
    (613252 'move' call_tmp[613249](138340 call _value _mt[232] b[138282]))
    unknown call_tmp[613254] "expr temp" "maybe param" "maybe type" "temp"
    (613257 'move' call_tmp[613254](138343 call == call_tmp[613242] call_tmp[613249]))
    unknown call_tmp[613259] "expr temp" "maybe param" "maybe type" "temp"
    (613262 'move' call_tmp[613259](138348 call _cond_test call_tmp[613254]))
    if call_tmp[613259]
    {
      gotoReturn _end_=[469727] _end_=[469727]
    }
    unknown tmp[402210] "maybe param" "temp"
    unknown call_tmp[613266] "expr temp" "maybe param" "maybe type" "temp"
    (613269 'move' call_tmp[613266](138353 call size _mt[232] a[138274]))
    (402221 'move' tmp[402210](138357 call == call_tmp[613266] 0))
    unknown call_tmp[613271] "expr temp" "maybe param" "maybe type" "temp"
    (613274 'move' call_tmp[613271](402223 call _cond_invalid tmp[402210]))
    if call_tmp[613271]
    {
      (402226 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516861] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516862] "maybe param" "temp"
    unknown call_tmp[613276] "expr temp" "maybe param" "maybe type" "temp"
    (613279 'move' call_tmp[613276](402211 call isTrue tmp[402210]))
    (516867 'move' tmp[516862](516865 call _cond_test call_tmp[613276]))
    if tmp[516862]
    {
      unknown tmp[516869] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[613283] "expr temp" "maybe param" "maybe type" "temp"
      (613286 'move' call_tmp[613283](138360 call size _mt[232] b[138282]))
      unknown call_tmp[613288] "expr temp" "maybe param" "maybe type" "temp"
      (613291 'move' call_tmp[613288](138364 call == call_tmp[613283] 0))
      (516871 'move' tmp[516869](402214 call isTrue call_tmp[613288]))
      (516876 'move' tmp[516861](516873 '_paramFoldLogical' tmp[516862] tmp[516869]))
    }
    {
      (516881 'move' tmp[516861](516878 '_paramFoldLogical' tmp[516862] 0))
    }
    unknown call_tmp[613293] "expr temp" "maybe param" "maybe type" "temp"
    (613296 'move' call_tmp[613293](138370 call _cond_test tmp[516861]))
    if call_tmp[613293]
    {
      gotoReturn _end_=[469727] _end_=[469727]
    }
    unknown call_tmp[613298] "expr temp" "maybe param" "maybe type" "temp"
    (613301 'move' call_tmp[613298](138382 call _cond_test 1))
    if call_tmp[613298]
    {
      (138380 call checkArrayShapesUponAssignment a[138274] b[138282])
    }
    (138391 call chpl__uncheckedArrayTransfer a[138274] b[138282])
    label _end_=[469727]
    (469729 return _void[47])
  }
  function chpl__uncheckedArrayTransfer[138403](ref arg a[138400]:_array[133150](?), arg b[138408]:_array[133150](?)) : _unknown[43] "inline" "no return value for void"
  {
    unknown tmp[402231] "maybe param" "temp"
    unknown call_tmp[613303] "expr temp" "maybe param" "maybe type" "temp"
    (613306 'move' call_tmp[613303](138415 call chpl__serializeAssignment a[138400] b[138408]))
    (402242 'move' tmp[402231](138416 call ! call_tmp[613303]))
    unknown call_tmp[613308] "expr temp" "maybe param" "maybe type" "temp"
    (613311 'move' call_tmp[613308](402244 call _cond_invalid tmp[402231]))
    if call_tmp[613308]
    {
      (402247 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[516888] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516889] "maybe param" "temp"
    unknown call_tmp[613313] "expr temp" "maybe param" "maybe type" "temp"
    (613316 'move' call_tmp[613313](402232 call isTrue tmp[402231]))
    (516894 'move' tmp[516889](516892 call _cond_test call_tmp[613313]))
    if tmp[516889]
    {
      unknown tmp[516896] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[613318] "expr temp" "maybe param" "maybe type" "temp"
      (613321 'move' call_tmp[613318](138422 call chpl__compatibleForBulkTransfer a[138400] b[138408]))
      (516898 'move' tmp[516896](402235 call isTrue call_tmp[613318]))
      (516903 'move' tmp[516888](516900 '_paramFoldLogical' tmp[516889] tmp[516896]))
    }
    {
      (516908 'move' tmp[516888](516905 '_paramFoldLogical' tmp[516889] 0))
    }
    unknown call_tmp[613323] "expr temp" "maybe param" "maybe type" "temp"
    (613326 'move' call_tmp[613323](138452 call _cond_test tmp[516888]))
    if call_tmp[613323]
    {
      unknown call_tmp[613328] "expr temp" "maybe param" "maybe type" "temp"
      (613331 'move' call_tmp[613328](138429 call chpl__bulkTransferArray a[138400] b[138408]))
      unknown call_tmp[613333] "expr temp" "maybe param" "maybe type" "temp"
      (613336 'move' call_tmp[613333](138431 call == call_tmp[613328] 0))
      unknown call_tmp[613338] "expr temp" "maybe param" "maybe type" "temp"
      (613341 'move' call_tmp[613338](138440 call _cond_test call_tmp[613333]))
      if call_tmp[613338]
      {
        (138437 call chpl__transferArray a[138400] b[138408])
      }
    }
    {
      (138449 call chpl__transferArray a[138400] b[138408])
    }
    (469737 return _void[47])
  }
  function chpl__bulkTransferArray[138469](ref arg a[138466]:_array[133150](?), arg b[138476]:_array[133150](?)) : _unknown[43] "inline"
  {
    unknown ret[469741] "RVV" "temp"
    unknown call_tmp[613345] "expr temp" "maybe param" "maybe type" "temp"
    (613348 'move' call_tmp[613345](436433 call _dom _mt[232] a[138466]))
    unknown call_tmp[613352] "expr temp" "maybe param" "maybe type" "temp"
    (613355 'move' call_tmp[613352](436439 call _dom _mt[232] b[138476]))
    unknown call_tmp[613357] "expr temp" "maybe param" "maybe type" "temp"
    (613360 'move' call_tmp[613357](138485 call chpl__bulkTransferArray a[138466] call_tmp[613345] b[138476] call_tmp[613352]))
    (469746 'move' ret[469741](469745 'deref' call_tmp[613357]))
    (469743 return ret[469741])
  }
  function chpl__bulkTransferArray[138499](ref arg a[138496]:_array[133150](?), arg AD[138502]:_domain[123390](?), const  ref arg b[138508]:_array[133150](?), arg BD[138512]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[469750] "RVV" "temp"
    unknown call_tmp[613364] "expr temp" "maybe param" "maybe type" "temp"
    (613367 'move' call_tmp[613364](138517 call _value _mt[232] a[138496]))
    unknown call_tmp[613371] "expr temp" "maybe param" "maybe type" "temp"
    (613374 'move' call_tmp[613371](138523 call _value _mt[232] b[138508]))
    unknown call_tmp[613376] "expr temp" "maybe param" "maybe type" "temp"
    (613379 'move' call_tmp[613376](138527 call chpl__bulkTransferArray call_tmp[613364] AD[138502] call_tmp[613371] BD[138512]))
    (469755 'move' ret[469750](469754 'deref' call_tmp[613376]))
    (469752 return ret[469750])
  }
  function chpl__bulkTransferArray[138537](arg destClass[138535]:_any[170](?), arg destDom[138540]:_domain[123390](?), arg srcClass[138543]:_any[170](?), arg srcDom[138546]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[469761] "RVV" "temp"
    unknown success[138550] "insert auto destroy"
    (491694 'init var' success[138550] 0)
    function bulkTransferDebug[138560](arg msg[138557]:string[24]) : _unknown[43] "inline" "no return value for void"
    {
      unknown call_tmp[613381] "expr temp" "maybe param" "maybe type" "temp"
      (613384 'move' call_tmp[613381](138584 call _cond_test debugBulkTransfer[111829]))
      if call_tmp[613381]
      {
        (138582 call chpl_debug_writeln "proc =(a:[],b:[]): " msg[138557])
      }
      (469757 return _void[47])
    }
    (138610 call bulkTransferDebug "in chpl__bulkTransferArray")
    unknown call_tmp[613386] "expr temp" "maybe param" "maybe type" "temp"
    (613389 'move' call_tmp[613386](138634 call canResolveMethod destClass[138535] "doiBulkTransferFromKnown" destDom[138540] srcClass[138543] srcDom[138546]))
    unknown call_tmp[613391] "expr temp" "maybe param" "maybe type" "temp"
    (613394 'move' call_tmp[613391](138854 call _cond_test call_tmp[613386]))
    if call_tmp[613391]
    {
      (138653 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      unknown call_tmp[613398] "expr temp" "maybe param" "maybe type" "temp"
      (613401 'move' call_tmp[613398](138665 call(138658 call (partial) doiBulkTransferFromKnown _mt[232] destClass[138535]) destDom[138540] srcClass[138543] srcDom[138546]))
      (138666 call = success[138550] call_tmp[613398])
    }
    {
      unknown call_tmp[613403] "expr temp" "maybe param" "maybe type" "temp"
      (613406 'move' call_tmp[613403](138691 call canResolveMethod srcClass[138543] "doiBulkTransferToKnown" srcDom[138546] destClass[138535] destDom[138540]))
      unknown call_tmp[613408] "expr temp" "maybe param" "maybe type" "temp"
      (613411 'move' call_tmp[613408](138849 call _cond_test call_tmp[613403]))
      if call_tmp[613408]
      {
        (138710 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        unknown call_tmp[613415] "expr temp" "maybe param" "maybe type" "temp"
        (613418 'move' call_tmp[613415](138722 call(138715 call (partial) doiBulkTransferToKnown _mt[232] srcClass[138543]) srcDom[138546] destClass[138535] destDom[138540]))
        (138723 call = success[138550] call_tmp[613415])
      }
      {
        unknown call_tmp[613420] "expr temp" "maybe param" "maybe type" "temp"
        (613423 'move' call_tmp[613420](138748 call canResolveMethod destClass[138535] "doiBulkTransferFromAny" destDom[138540] srcClass[138543] srcDom[138546]))
        unknown call_tmp[613425] "expr temp" "maybe param" "maybe type" "temp"
        (613428 'move' call_tmp[613425](138844 call _cond_test call_tmp[613420]))
        if call_tmp[613425]
        {
          (138767 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          unknown call_tmp[613432] "expr temp" "maybe param" "maybe type" "temp"
          (613435 'move' call_tmp[613432](138779 call(138772 call (partial) doiBulkTransferFromAny _mt[232] destClass[138535]) destDom[138540] srcClass[138543] srcDom[138546]))
          (138780 call = success[138550] call_tmp[613432])
        }
        {
          unknown call_tmp[613437] "expr temp" "maybe param" "maybe type" "temp"
          (613440 'move' call_tmp[613437](138805 call canResolveMethod srcClass[138543] "doiBulkTransferToAny" srcDom[138546] destClass[138535] destDom[138540]))
          unknown call_tmp[613442] "expr temp" "maybe param" "maybe type" "temp"
          (613445 'move' call_tmp[613442](138840 call _cond_test call_tmp[613437]))
          if call_tmp[613442]
          {
            (138824 call bulkTransferDebug "attempting doiBulkTransferToAny")
            unknown call_tmp[613449] "expr temp" "maybe param" "maybe type" "temp"
            (613452 'move' call_tmp[613449](138836 call(138829 call (partial) doiBulkTransferToAny _mt[232] srcClass[138543]) srcDom[138546] destClass[138535] destDom[138540]))
            (138837 call = success[138550] call_tmp[613449])
          }
        }
      }
    }
    unknown call_tmp[613454] "expr temp" "maybe param" "maybe type" "temp"
    (613457 'move' call_tmp[613454](138900 call _cond_test success[138550]))
    if call_tmp[613454]
    {
      (138878 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (138898 call bulkTransferDebug "bulk transfer did not happen")
    }
    (469766 'move' ret[469761](469765 'deref' success[138550]))
    (469763 return ret[469761])
  }
  function chpl__transferArray[138919](ref arg a[138916]:_array[133150](?), const  ref arg b[138921]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    unknown tmp[402252] "maybe param" "temp"
    unknown call_tmp[613461] "expr temp" "maybe param" "maybe type" "temp"
    (613464 'move' call_tmp[613461](138924 call eltType _mt[232] a[138916]))
    unknown call_tmp[613466] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (613469 'move' call_tmp[613466](138928 'typeof' b[138921]))
    (402263 'move' tmp[402252](138929 call == call_tmp[613461] call_tmp[613466]))
    unknown call_tmp[613471] "expr temp" "maybe param" "maybe type" "temp"
    (613474 'move' call_tmp[613471](402265 call _cond_invalid tmp[402252]))
    if call_tmp[613471]
    {
      (402268 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[516942] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516943] "maybe param" "temp"
    unknown call_tmp[613476] "expr temp" "maybe param" "maybe type" "temp"
    (613479 'move' call_tmp[613476](402253 call isTrue tmp[402252]))
    (516948 'move' tmp[516943](516946 call _cond_test call_tmp[613476]))
    if tmp[516943]
    {
      (516953 'move' tmp[516942](516950 '_paramFoldLogical' tmp[516943] 1))
    }
    {
      unknown tmp[402273] "maybe param" "temp"
      unknown call_tmp[613483] "expr temp" "maybe param" "maybe type" "temp"
      (613486 'move' call_tmp[613483](138933 call eltType _mt[232] a[138916]))
      (402284 'move' tmp[402273](138937 call _isPrimitiveType call_tmp[613483]))
      unknown call_tmp[613488] "expr temp" "maybe param" "maybe type" "temp"
      (613491 'move' call_tmp[613488](402286 call _cond_invalid tmp[402273]))
      if call_tmp[613488]
      {
        (402289 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[516915] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[516916] "maybe param" "temp"
      unknown call_tmp[613493] "expr temp" "maybe param" "maybe type" "temp"
      (613496 'move' call_tmp[613493](402274 call isTrue tmp[402273]))
      (516921 'move' tmp[516916](516919 call _cond_test call_tmp[613493]))
      if tmp[516916]
      {
        unknown tmp[516923] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[613498] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (613501 'move' call_tmp[613498](138940 'typeof' b[138921]))
        unknown call_tmp[613503] "expr temp" "maybe param" "maybe type" "temp"
        (613506 'move' call_tmp[613503](138942 call _isPrimitiveType call_tmp[613498]))
        (516925 'move' tmp[516923](402277 call isTrue call_tmp[613503]))
        (516930 'move' tmp[516915](516927 '_paramFoldLogical' tmp[516916] tmp[516923]))
      }
      {
        (516935 'move' tmp[516915](516932 '_paramFoldLogical' tmp[516916] 0))
      }
      unknown tmp[516955] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (516957 'move' tmp[516955](402257 call isTrue tmp[516915]))
      (516962 'move' tmp[516942](516959 '_paramFoldLogical' tmp[516943] tmp[516955]))
    }
    unknown call_tmp[613508] "expr temp" "maybe param" "maybe type" "temp"
    (613511 'move' call_tmp[613508](139058 call _cond_test tmp[516942]))
    if call_tmp[613508]
    {
      Forall {
        induction variables:
          
          unknown aa[138955] "index var" "insert auto destroy"
        iterated expressions:
          a[138916]
        shadow variables:
        forall body
        {
          (138951 call = aa[138955] b[138921])
        }
      }
    }
    {
      unknown call_tmp[613513] "expr temp" "maybe param" "maybe type" "temp"
      (613516 'move' call_tmp[613513](138963 call chpl__serializeAssignment a[138916] b[138921]))
      unknown call_tmp[613518] "expr temp" "maybe param" "maybe type" "temp"
      (613521 'move' call_tmp[613518](139054 call _cond_test call_tmp[613513]))
      if call_tmp[613518]
      {
        {
          unknown _indexOfInterest[138978] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[138979] "expr temp" "temp"
          unknown call_tmp[613523] "expr temp" "maybe param" "maybe type" "temp"
          (613526 'move' call_tmp[613523](138988 call _getIterator a[138916]))
          unknown call_tmp[613528] "expr temp" "maybe param" "maybe type" "temp"
          (613531 'move' call_tmp[613528](138991 call _getIterator b[138921]))
          (138993 'move' _iterator[138979](138972 call _build_tuple call_tmp[613523] call_tmp[613528]))
          Defer
          {
            {
              (139023 call _freeIterator _iterator[138979])
            }
          }
          { scopeless type
            (138998 'move' _indexOfInterest[138978](138995 call iteratorIndex _iterator[138979]))
          }
          ForLoop
          {
            (139003 call _check_tuple_var_decl _indexOfInterest[138978] 2)
            unknown aa[139009] "index var" "insert auto destroy"
            (139011 'move' aa[139009](139007 call _indexOfInterest[138978] 1))
            unknown bb[139016] "index var" "insert auto destroy"
            (139018 'move' bb[139016](139014 call _indexOfInterest[138978] 2))
            (138975 call = aa[139009] bb[139016])
            label _continueLabel[138983]
            _indexOfInterest[138978]
            _iterator[138979]
          }
          label _breakLabel[138984]
        }
      }
      {
        Forall {
          induction variables:
            
            unknown aa[139048] "index var" "insert auto destroy"
            
            unknown bb[139050] "index var" "insert auto destroy"
          iterated expressions:
            a[138916]
            b[138921]
          shadow variables:
          forall body
          {
            (139043 call = aa[139048] bb[139050])
          }
        }
      }
    }
    (469768 return _void[47])
  }
  function chpl__transferArray[139074](arg a[139071]:_array[133150](?), param arg b[139076]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[139086] "index var" "insert auto destroy"
      iterated expressions:
        a[139071]
      shadow variables:
      forall body
      {
        (139082 call = aa[139086] b[139076])
      }
    }
    (469770 return _void[47])
  }
  function =[139100](ref arg a[139097]:_array[133150](?), arg b[139103]:_domain[123390](?)) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[613535] "expr temp" "maybe param" "maybe type" "temp"
    (613538 'move' call_tmp[613535](139107 call rank _mt[232] a[139097]))
    unknown call_tmp[613542] "expr temp" "maybe param" "maybe type" "temp"
    (613545 'move' call_tmp[613542](139111 call rank _mt[232] b[139103]))
    unknown call_tmp[613547] "expr temp" "maybe param" "maybe type" "temp"
    (613550 'move' call_tmp[613547](139114 call != call_tmp[613535] call_tmp[613542]))
    unknown call_tmp[613552] "expr temp" "maybe param" "maybe type" "temp"
    (613555 'move' call_tmp[613552](139121 call _cond_test call_tmp[613547]))
    if call_tmp[613552]
    {
      (139119 call compilerError "rank mismatch in array assignment")
    }
    (139131 call chpl__transferArray a[139097] b[139103])
    (469772 return _void[47])
  }
  function =[139143](arg a[139140]:_array[133150](?), arg b[139149]:range[66183](?)) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    unknown call_tmp[613559] "expr temp" "maybe param" "maybe type" "temp"
    (613562 'move' call_tmp[613559](139153 call rank _mt[232] a[139140]))
    unknown call_tmp[613564] "expr temp" "maybe param" "maybe type" "temp"
    (613567 'move' call_tmp[613564](139157 call == call_tmp[613559] 1))
    unknown call_tmp[613569] "expr temp" "maybe param" "maybe type" "temp"
    (613572 'move' call_tmp[613569](139185 call _cond_test call_tmp[613564]))
    if call_tmp[613569]
    {
      (139163 call chpl__transferArray a[139140] b[139149])
    }
    {
      (139183 call compilerError "cannot from ranges to multidimensional arrays")
    }
    (469774 return _void[47])
  }
  function =[139202](ref arg a[139199]:_array[133150](?), arg b[139204]:_any[170](?)) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    (139210 call chpl__transferArray a[139199] b[139204])
    (469776 return _void[47])
  }
  function =[139223](ref arg a[139220]:_array[133150](?), arg b[139226]:_tuple[58502](?)) : _unknown[43] "assignop" "no return value for void"
  {
    function chpl__tupleInit[139237](ref arg j[139235]:_any[170](?), param arg rank[139240]:int(64)[13], arg b[139244]:_tuple[58502](?)) : _unknown[43] "no return value for void"
    {
      unknown call_tmp[613576] "expr temp" "maybe param" "maybe type" "temp"
      (613579 'move' call_tmp[613576](139254 call _dom _mt[232] a[139220]))
      unknown idxType[139273] "insert auto destroy" "type variable"(139257 call idxType _mt[232] call_tmp[613576])
      unknown call_tmp[613585] "expr temp" "maybe param" "maybe type" "temp"
      (613588 'move' call_tmp[613585](491699 call _dom _mt[232] a[139220]))
      (491703 'move' idxType[139273](491697 call idxType _mt[232] call_tmp[613585]))
      unknown call_tmp[613594] "expr temp" "maybe param" "maybe type" "temp"
      (613597 'move' call_tmp[613594](139262 call _dom _mt[232] a[139220]))
      unknown call_tmp[613601] "expr temp" "maybe param" "maybe type" "temp"
      (613604 'move' call_tmp[613601](139265 call intIdxType _mt[232] call_tmp[613594]))
      unknown strType[139270] "insert auto destroy" "type variable"(139269 call chpl__signedType call_tmp[613601])
      unknown call_tmp[613608] "expr temp" "maybe param" "maybe type" "temp"
      (613611 'move' call_tmp[613608](491710 call _dom _mt[232] a[139220]))
      unknown call_tmp[613615] "expr temp" "maybe param" "maybe type" "temp"
      (613618 'move' call_tmp[613615](491708 call intIdxType _mt[232] call_tmp[613608]))
      (491714 'move' strType[139270](491706 call chpl__signedType call_tmp[613615]))
      unknown call_tmp[613622] "expr temp" "maybe param" "maybe type" "temp"
      (613625 'move' call_tmp[613622](139278 call _dom _mt[232] a[139220]))
      unknown call_tmp[613631] "expr temp" "maybe param" "maybe type" "temp"
      (613634 'move' call_tmp[613631](139285 call rank _mt[232] a[139220]))
      unknown call_tmp[613636] "expr temp" "maybe param" "maybe type" "temp"
      (613639 'move' call_tmp[613636](139289 call - call_tmp[613631] rank[139240]))
      unknown call_tmp[613641] "expr temp" "maybe param" "maybe type" "temp"
      (613644 'move' call_tmp[613641](139292 call + call_tmp[613636] 1))
      unknown call_tmp[613646] "expr temp" "maybe param" "maybe type" "temp"
      (613649 'move' call_tmp[613646](139295 call(139281 call (partial) dim _mt[232] call_tmp[613622]) call_tmp[613641]))
      unknown call_tmp[613653] "maybe param" "maybe type" "temp"
      (613656 'move' call_tmp[613653](139296 call stride _mt[232] call_tmp[613646]))
      const stride[139299] "const" "insert auto destroy"
      (491716 'init var' stride[139299] call_tmp[613653])
      unknown call_tmp[613660] "expr temp" "maybe param" "maybe type" "temp"
      (613663 'move' call_tmp[613660](139303 call _dom _mt[232] a[139220]))
      unknown call_tmp[613669] "expr temp" "maybe param" "maybe type" "temp"
      (613672 'move' call_tmp[613669](139310 call rank _mt[232] a[139220]))
      unknown call_tmp[613674] "expr temp" "maybe param" "maybe type" "temp"
      (613677 'move' call_tmp[613674](139314 call - call_tmp[613669] rank[139240]))
      unknown call_tmp[613679] "expr temp" "maybe param" "maybe type" "temp"
      (613682 'move' call_tmp[613679](139317 call + call_tmp[613674] 1))
      unknown call_tmp[613684] "expr temp" "maybe param" "maybe type" "temp"
      (613687 'move' call_tmp[613684](139320 call(139306 call (partial) dim _mt[232] call_tmp[613660]) call_tmp[613679]))
      unknown call_tmp[613691] "maybe param" "maybe type" "temp"
      (613694 'move' call_tmp[613691](139321 call firstAsInt _mt[232] call_tmp[613684]))
      const start[139324] "const" "insert auto destroy"
      (491718 'init var' start[139324] call_tmp[613691])
      unknown call_tmp[613696] "expr temp" "maybe param" "maybe type" "temp"
      (613699 'move' call_tmp[613696](139329 call == rank[139240] 1))
      unknown call_tmp[613701] "expr temp" "maybe param" "maybe type" "temp"
      (613704 'move' call_tmp[613701](139513 call _cond_test call_tmp[613696]))
      if call_tmp[613701]
      {
        {
          unknown i[139383] "insert auto destroy"
          (491720 'init var' i[139383] 0)
          unknown tmp[139384] "maybe param" "temp"
          unknown call_tmp[613708] "expr temp" "maybe param" "maybe type" "temp"
          (613711 'move' call_tmp[613708](139333 call size _mt[232] b[139244]))
          (139396 'move' tmp[139384](139394 call chpl_compute_low_param_loop_bound 1 call_tmp[613708]))
          unknown tmp[139385] "maybe param" "temp"
          unknown call_tmp[613715] "expr temp" "maybe param" "maybe type" "temp"
          (613718 'move' call_tmp[613715](139401 call size _mt[232] b[139244]))
          (139406 'move' tmp[139385](139404 call chpl_compute_high_param_loop_bound 1 call_tmp[613715]))
          unknown tmp[139386] "maybe param" "temp"
          (139409 'move' tmp[139386] 1)
          ParamForLoop
          { i[139383] tmp[139384] tmp[139385] tmp[139386]
            {
              unknown call_tmp[613722] "expr temp" "maybe param" "maybe type" "temp"
              (613725 'move' call_tmp[613722](139340 call rank _mt[232] a[139220]))
              unknown call_tmp[613727] "expr temp" "maybe param" "maybe type" "temp"
              (613730 'move' call_tmp[613727](139344 call - call_tmp[613722] rank[139240]))
              unknown call_tmp[613732] "expr temp" "maybe param" "maybe type" "temp"
              (613735 'move' call_tmp[613732](139347 call + call_tmp[613727] 1))
              unknown call_tmp[613737] "expr temp" "maybe param" "maybe type" "temp"
              (613740 'move' call_tmp[613737](139350 call j[139235] call_tmp[613732]))
              unknown call_tmp[613742] "expr temp" "maybe param" "maybe type" "temp"
              (613745 'move' call_tmp[613742](139356 call _cast strType[139270] start[139324]))
              unknown call_tmp[613747] "expr temp" "maybe param" "maybe type" "temp"
              (613750 'move' call_tmp[613747](139360 call - i[139383] 1))
              unknown call_tmp[613752] "expr temp" "maybe param" "maybe type" "temp"
              (613755 'move' call_tmp[613752](139363 call * call_tmp[613747] stride[139299]))
              unknown call_tmp[613757] "expr temp" "maybe param" "maybe type" "temp"
              (613760 'move' call_tmp[613757](139365 call + call_tmp[613742] call_tmp[613752]))
              unknown call_tmp[613762] "expr temp" "maybe param" "maybe type" "temp"
              (613765 'move' call_tmp[613762](139367 call chpl__intToIdx idxType[139273] call_tmp[613757]))
              (139368 call = call_tmp[613737] call_tmp[613762])
              unknown call_tmp[613767] "expr temp" "maybe param" "maybe type" "temp"
              (613770 'move' call_tmp[613767](139375 call a[139220] j[139235]))
              unknown call_tmp[613772] "expr temp" "maybe param" "maybe type" "temp"
              (613775 'move' call_tmp[613772](139379 call b[139244] i[139383]))
              (139380 call = call_tmp[613767] call_tmp[613772])
            }
          }
          label _unused_continueLabel[139388]
          label _breakLabel[139387]
        }
      }
      {
        {
          unknown i[139475] "insert auto destroy"
          (491722 'init var' i[139475] 0)
          unknown tmp[139476] "maybe param" "temp"
          unknown call_tmp[613779] "expr temp" "maybe param" "maybe type" "temp"
          (613782 'move' call_tmp[613779](139423 call size _mt[232] b[139244]))
          (139488 'move' tmp[139476](139486 call chpl_compute_low_param_loop_bound 1 call_tmp[613779]))
          unknown tmp[139477] "maybe param" "temp"
          unknown call_tmp[613786] "expr temp" "maybe param" "maybe type" "temp"
          (613789 'move' call_tmp[613786](139493 call size _mt[232] b[139244]))
          (139498 'move' tmp[139477](139496 call chpl_compute_high_param_loop_bound 1 call_tmp[613786]))
          unknown tmp[139478] "maybe param" "temp"
          (139501 'move' tmp[139478] 1)
          ParamForLoop
          { i[139475] tmp[139476] tmp[139477] tmp[139478]
            {
              unknown call_tmp[613793] "expr temp" "maybe param" "maybe type" "temp"
              (613796 'move' call_tmp[613793](139430 call rank _mt[232] a[139220]))
              unknown call_tmp[613798] "expr temp" "maybe param" "maybe type" "temp"
              (613801 'move' call_tmp[613798](139434 call - call_tmp[613793] rank[139240]))
              unknown call_tmp[613803] "expr temp" "maybe param" "maybe type" "temp"
              (613806 'move' call_tmp[613803](139437 call + call_tmp[613798] 1))
              unknown call_tmp[613808] "expr temp" "maybe param" "maybe type" "temp"
              (613811 'move' call_tmp[613808](139440 call j[139235] call_tmp[613803]))
              unknown call_tmp[613813] "expr temp" "maybe param" "maybe type" "temp"
              (613816 'move' call_tmp[613813](139446 call _cast strType[139270] start[139324]))
              unknown call_tmp[613818] "expr temp" "maybe param" "maybe type" "temp"
              (613821 'move' call_tmp[613818](139450 call - i[139475] 1))
              unknown call_tmp[613823] "expr temp" "maybe param" "maybe type" "temp"
              (613826 'move' call_tmp[613823](139453 call * call_tmp[613818] stride[139299]))
              unknown call_tmp[613828] "expr temp" "maybe param" "maybe type" "temp"
              (613831 'move' call_tmp[613828](139455 call + call_tmp[613813] call_tmp[613823]))
              unknown call_tmp[613833] "expr temp" "maybe param" "maybe type" "temp"
              (613836 'move' call_tmp[613833](139457 call chpl__intToIdx idxType[139273] call_tmp[613828]))
              (139458 call = call_tmp[613808] call_tmp[613833])
              unknown call_tmp[613838] "expr temp" "maybe param" "maybe type" "temp"
              (613841 'move' call_tmp[613838](139467 call - rank[139240] 1))
              unknown call_tmp[613843] "expr temp" "maybe param" "maybe type" "temp"
              (613846 'move' call_tmp[613843](139472 call b[139244] i[139475]))
              (139473 call chpl__tupleInit j[139235] call_tmp[613838] call_tmp[613843])
            }
          }
          label _unused_continueLabel[139480]
          label _breakLabel[139479]
        }
      }
      (469778 return _void[47])
    }
    {
      (139251 call <(139248 'lifetime_of' a[139220])(139250 'lifetime_of' b[139244]))
    }
    unknown j[139534] "insert auto destroy"
    unknown call_tmp[613850] "expr temp" "maybe param" "maybe type" "temp"
    (613853 'move' call_tmp[613850](139522 call rank _mt[232] a[139220]))
    unknown call_tmp[613857] "expr temp" "maybe param" "maybe type" "temp"
    (613860 'move' call_tmp[613857](139526 call _dom _mt[232] a[139220]))
    unknown call_tmp[613864] "expr temp" "maybe param" "maybe type" "temp"
    (613867 'move' call_tmp[613864](139529 call idxType _mt[232] call_tmp[613857]))
    unknown call_tmp[613869] "expr temp" "maybe param" "maybe type" "temp"
    (613872 'move' call_tmp[613869](139532 call * call_tmp[613850] call_tmp[613864]))
    (491724 'default init var' j[139534] call_tmp[613869])
    unknown call_tmp[613876] "expr temp" "maybe param" "maybe type" "temp"
    (613879 'move' call_tmp[613876](139541 call rank _mt[232] a[139220]))
    (139545 call chpl__tupleInit j[139534] call_tmp[613876] b[139226])
    (469780 return _void[47])
  }
  where {
    (139232 call isRectangularArr a[139220])
  }
  function _desync[139556](arg t[139553]:_syncvar[85613](?)) type : _unknown[43]
  {
    unknown ret[469784] "RVV" "temp" "type variable"
    unknown x[139559] "insert auto destroy"
    (491726 'default init var' x[139559] t[139553])
    unknown call_tmp[613883] "expr temp" "maybe param" "maybe type" "temp"
    (613886 'move' call_tmp[613883](139564 call valType _mt[232] x[139559]))
    (469789 'move' ret[469784](469788 'deref' call_tmp[613883]))
    (469786 return ret[469784])
  }
  function _desync[139577](arg t[139574]:_singlevar[87725](?)) type : _unknown[43]
  {
    unknown ret[469793] "RVV" "temp" "type variable"
    unknown x[139580] "insert auto destroy"
    (491728 'default init var' x[139580] t[139574])
    unknown call_tmp[613890] "expr temp" "maybe param" "maybe type" "temp"
    (613893 'move' call_tmp[613890](139585 call valType _mt[232] x[139580]))
    (469798 'move' ret[469793](469797 'deref' call_tmp[613890]))
    (469795 return ret[469793])
  }
  function _desync[139596](arg t[139594]:_any[170](?)) type : _unknown[43]
  {
    unknown ret[469802] "RVV" "temp" "type variable"
    (469807 'move' ret[469802](469806 'deref' t[139594]))
    (469804 return ret[469802])
  }
  function =[139612](ref arg a[139609]:_array[133150](?), arg b[139621] :
  unknown call_tmp[613897] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139632] "index var" "insert auto destroy"
      iterated expressions:
        a[139609]
      shadow variables:
      forall body
      {
        (139628 call = e[139632] b[139621])
      }
    }
    (469809 return _void[47])
  }
  function +=[139646](arg a[139643]:_array[133150](?), arg b[139655] :
  unknown call_tmp[613904] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139666] "index var" "insert auto destroy"
      iterated expressions:
        a[139643]
      shadow variables:
      forall body
      {
        (139662 call += e[139666] b[139655])
      }
    }
    (469811 return _void[47])
  }
  function -=[139680](arg a[139677]:_array[133150](?), arg b[139689] :
  unknown call_tmp[613911] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139700] "index var" "insert auto destroy"
      iterated expressions:
        a[139677]
      shadow variables:
      forall body
      {
        (139696 call -= e[139700] b[139689])
      }
    }
    (469813 return _void[47])
  }
  function *=[139714](arg a[139711]:_array[133150](?), arg b[139723] :
  unknown call_tmp[613918] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139734] "index var" "insert auto destroy"
      iterated expressions:
        a[139711]
      shadow variables:
      forall body
      {
        (139730 call *= e[139734] b[139723])
      }
    }
    (469815 return _void[47])
  }
  function /=[139748](arg a[139745]:_array[133150](?), arg b[139757] :
  unknown call_tmp[613925] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139768] "index var" "insert auto destroy"
      iterated expressions:
        a[139745]
      shadow variables:
      forall body
      {
        (139764 call /= e[139768] b[139757])
      }
    }
    (469817 return _void[47])
  }
  function %=[139782](arg a[139779]:_array[133150](?), arg b[139791] :
  unknown call_tmp[613932] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139802] "index var" "insert auto destroy"
      iterated expressions:
        a[139779]
      shadow variables:
      forall body
      {
        (139798 call %= e[139802] b[139791])
      }
    }
    (469819 return _void[47])
  }
  function **=[139816](arg a[139813]:_array[133150](?), arg b[139825] :
  unknown call_tmp[613939] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139836] "index var" "insert auto destroy"
      iterated expressions:
        a[139813]
      shadow variables:
      forall body
      {
        (139832 call **= e[139836] b[139825])
      }
    }
    (469821 return _void[47])
  }
  function &=[139850](arg a[139847]:_array[133150](?), arg b[139859] :
  unknown call_tmp[613946] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139870] "index var" "insert auto destroy"
      iterated expressions:
        a[139847]
      shadow variables:
      forall body
      {
        (139866 call &= e[139870] b[139859])
      }
    }
    (469823 return _void[47])
  }
  function |=[139884](arg a[139881]:_array[133150](?), arg b[139893] :
  unknown call_tmp[613953] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139904] "index var" "insert auto destroy"
      iterated expressions:
        a[139881]
      shadow variables:
      forall body
      {
        (139900 call |= e[139904] b[139893])
      }
    }
    (469825 return _void[47])
  }
  function ^=[139918](arg a[139915]:_array[133150](?), arg b[139927] :
  unknown call_tmp[613960] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139938] "index var" "insert auto destroy"
      iterated expressions:
        a[139915]
      shadow variables:
      forall body
      {
        (139934 call ^= e[139938] b[139927])
      }
    }
    (469827 return _void[47])
  }
  function >>=[139952](arg a[139949]:_array[133150](?), arg b[139961] :
  unknown call_tmp[613967] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139972] "index var" "insert auto destroy"
      iterated expressions:
        a[139949]
      shadow variables:
      forall body
      {
        (139968 call >>= e[139972] b[139961])
      }
    }
    (469829 return _void[47])
  }
  function <<=[139986](arg a[139983]:_array[133150](?), arg b[139995] :
  unknown call_tmp[613974] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140006] "index var" "insert auto destroy"
      iterated expressions:
        a[139983]
      shadow variables:
      forall body
      {
        (140002 call <<= e[140006] b[139995])
      }
    }
    (469831 return _void[47])
  }
  function chpl_by[140018](arg a[140015]:_domain[123390](?), arg b[140020]:_any[170](?)) : _unknown[43]
  {
    unknown ret[469835] "RVV" "temp"
    unknown r[140043] "insert auto destroy"
    unknown call_tmp[613981] "expr temp" "maybe param" "maybe type" "temp"
    (613984 'move' call_tmp[613981](140023 call rank _mt[232] a[140015]))
    unknown call_tmp[613988] "expr temp" "maybe param" "maybe type" "temp"
    (613991 'move' call_tmp[613988](140028 call _value _mt[232] a[140015]))
    unknown call_tmp[613995] "expr temp" "maybe param" "maybe type" "temp"
    (613998 'move' call_tmp[613995](140031 call idxType _mt[232] call_tmp[613988]))
    unknown call_tmp[614000] "expr temp" "maybe param" "maybe type" "temp"
    (614003 'move' call_tmp[614000](140040 call range[66183](?) call_tmp[613995] bounded[66079] 1))
    unknown call_tmp[614005] "expr temp" "maybe param" "maybe type" "temp"
    (614008 'move' call_tmp[614005](140041 call * call_tmp[613981] call_tmp[614000]))
    (491730 'default init var' r[140043] call_tmp[614005])
    unknown call_tmp[614012] "expr temp" "maybe param" "maybe type" "temp"
    (614015 'move' call_tmp[614012](140049 call rank _mt[232] a[140015]))
    unknown call_tmp[614017] "maybe param" "maybe type" "temp"
    (614020 'move' call_tmp[614017](140056 call _makeIndexTuple call_tmp[614012] b[140020](expand = 1)))
    unknown t[140057] "insert auto destroy"
    (491732 'init var' t[140057] call_tmp[614017])
    {
      unknown i[140087] "insert auto destroy"
      (491734 'init var' i[140087] 0)
      unknown tmp[140088] "maybe param" "temp"
      unknown call_tmp[614024] "expr temp" "maybe param" "maybe type" "temp"
      (614027 'move' call_tmp[614024](140062 call rank _mt[232] a[140015]))
      (140100 'move' tmp[140088](140098 call chpl_compute_low_param_loop_bound 1 call_tmp[614024]))
      unknown tmp[140089] "maybe param" "temp"
      unknown call_tmp[614031] "expr temp" "maybe param" "maybe type" "temp"
      (614034 'move' call_tmp[614031](140105 call rank _mt[232] a[140015]))
      (140110 'move' tmp[140089](140108 call chpl_compute_high_param_loop_bound 1 call_tmp[614031]))
      unknown tmp[140090] "maybe param" "temp"
      (140113 'move' tmp[140090] 1)
      ParamForLoop
      { i[140087] tmp[140088] tmp[140089] tmp[140090]
        unknown call_tmp[614036] "expr temp" "maybe param" "maybe type" "temp"
        (614039 'move' call_tmp[614036](140070 call r[140043] i[140087]))
        unknown call_tmp[614043] "expr temp" "maybe param" "maybe type" "temp"
        (614046 'move' call_tmp[614043](140077 call(140072 call (partial) dim _mt[232] a[140015]) i[140087]))
        unknown call_tmp[614048] "expr temp" "maybe param" "maybe type" "temp"
        (614051 'move' call_tmp[614048](140081 call t[140057] i[140087]))
        unknown call_tmp[614053] "expr temp" "maybe param" "maybe type" "temp"
        (614056 'move' call_tmp[614053](140082 call chpl_by call_tmp[614043] call_tmp[614048]))
        (140084 call = call_tmp[614036] call_tmp[614053])
      }
      label _unused_continueLabel[140092]
      label _breakLabel[140091]
    }
    unknown call_tmp[614060] "expr temp" "maybe param" "maybe type" "temp"
    (614063 'move' call_tmp[614060](140126 call dist _mt[232] a[140015]))
    unknown call_tmp[614067] "expr temp" "maybe param" "maybe type" "temp"
    (614070 'move' call_tmp[614067](140131 call rank _mt[232] a[140015]))
    unknown call_tmp[614074] "expr temp" "maybe param" "maybe type" "temp"
    (614077 'move' call_tmp[614074](140135 call _value _mt[232] a[140015]))
    unknown call_tmp[614081] "expr temp" "maybe param" "maybe type" "temp"
    (614084 'move' call_tmp[614081](140138 call idxType _mt[232] call_tmp[614074]))
    unknown call_tmp[614086] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (614089 'move' call_tmp[614086](691444 'new' _domain[123390](?) call_tmp[614060] call_tmp[614067] call_tmp[614081] 1 r[140043]))
    (469840 'move' ret[469835](469839 'deref' call_tmp[614086]))
    (469837 return ret[469835])
  }
  function chpl_align[140155](arg a[140152]:_domain[123390](?), arg b[140157]:_any[170](?)) : _unknown[43]
  {
    unknown ret[469844] "RVV" "temp"
    unknown r[140183] "insert auto destroy"
    unknown call_tmp[614093] "expr temp" "maybe param" "maybe type" "temp"
    (614096 'move' call_tmp[614093](140160 call rank _mt[232] a[140152]))
    unknown call_tmp[614100] "expr temp" "maybe param" "maybe type" "temp"
    (614103 'move' call_tmp[614100](140165 call _value _mt[232] a[140152]))
    unknown call_tmp[614107] "expr temp" "maybe param" "maybe type" "temp"
    (614110 'move' call_tmp[614107](140168 call idxType _mt[232] call_tmp[614100]))
    unknown call_tmp[614114] "expr temp" "maybe param" "maybe type" "temp"
    (614117 'move' call_tmp[614114](140177 call stridable _mt[232] a[140152]))
    unknown call_tmp[614119] "expr temp" "maybe param" "maybe type" "temp"
    (614122 'move' call_tmp[614119](140180 call range[66183](?) call_tmp[614107] bounded[66079] call_tmp[614114]))
    unknown call_tmp[614124] "expr temp" "maybe param" "maybe type" "temp"
    (614127 'move' call_tmp[614124](140181 call * call_tmp[614093] call_tmp[614119]))
    (491736 'default init var' r[140183] call_tmp[614124])
    unknown call_tmp[614131] "expr temp" "maybe param" "maybe type" "temp"
    (614134 'move' call_tmp[614131](140189 call rank _mt[232] a[140152]))
    unknown call_tmp[614136] "maybe param" "maybe type" "temp"
    (614139 'move' call_tmp[614136](140196 call _makeIndexTuple call_tmp[614131] b[140157](expand = 1)))
    unknown t[140197] "insert auto destroy"
    (491738 'init var' t[140197] call_tmp[614136])
    {
      unknown i[140227] "insert auto destroy"
      (491740 'init var' i[140227] 0)
      unknown tmp[140228] "maybe param" "temp"
      unknown call_tmp[614143] "expr temp" "maybe param" "maybe type" "temp"
      (614146 'move' call_tmp[614143](140202 call rank _mt[232] a[140152]))
      (140240 'move' tmp[140228](140238 call chpl_compute_low_param_loop_bound 1 call_tmp[614143]))
      unknown tmp[140229] "maybe param" "temp"
      unknown call_tmp[614150] "expr temp" "maybe param" "maybe type" "temp"
      (614153 'move' call_tmp[614150](140245 call rank _mt[232] a[140152]))
      (140250 'move' tmp[140229](140248 call chpl_compute_high_param_loop_bound 1 call_tmp[614150]))
      unknown tmp[140230] "maybe param" "temp"
      (140253 'move' tmp[140230] 1)
      ParamForLoop
      { i[140227] tmp[140228] tmp[140229] tmp[140230]
        unknown call_tmp[614155] "expr temp" "maybe param" "maybe type" "temp"
        (614158 'move' call_tmp[614155](140210 call r[140183] i[140227]))
        unknown call_tmp[614162] "expr temp" "maybe param" "maybe type" "temp"
        (614165 'move' call_tmp[614162](140217 call(140212 call (partial) dim _mt[232] a[140152]) i[140227]))
        unknown call_tmp[614167] "expr temp" "maybe param" "maybe type" "temp"
        (614170 'move' call_tmp[614167](140221 call t[140197] i[140227]))
        unknown call_tmp[614172] "expr temp" "maybe param" "maybe type" "temp"
        (614175 'move' call_tmp[614172](140222 call chpl_align call_tmp[614162] call_tmp[614167]))
        (140224 call = call_tmp[614155] call_tmp[614172])
      }
      label _unused_continueLabel[140232]
      label _breakLabel[140231]
    }
    unknown call_tmp[614179] "expr temp" "maybe param" "maybe type" "temp"
    (614182 'move' call_tmp[614179](140266 call dist _mt[232] a[140152]))
    unknown call_tmp[614186] "expr temp" "maybe param" "maybe type" "temp"
    (614189 'move' call_tmp[614186](140271 call rank _mt[232] a[140152]))
    unknown call_tmp[614193] "expr temp" "maybe param" "maybe type" "temp"
    (614196 'move' call_tmp[614193](140275 call _value _mt[232] a[140152]))
    unknown call_tmp[614200] "expr temp" "maybe param" "maybe type" "temp"
    (614203 'move' call_tmp[614200](140278 call idxType _mt[232] call_tmp[614193]))
    unknown call_tmp[614207] "expr temp" "maybe param" "maybe type" "temp"
    (614210 'move' call_tmp[614207](140282 call stridable _mt[232] a[140152]))
    unknown call_tmp[614212] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (614215 'move' call_tmp[614212](691445 'new' _domain[123390](?) call_tmp[614179] call_tmp[614186] call_tmp[614200] call_tmp[614207] r[140183]))
    (469849 'move' ret[469844](469848 'deref' call_tmp[614212]))
    (469846 return ret[469844])
  }
  type _OpaqueIndex[140304] val node[140295]:int(64)[13] 0 int(64)[13] val i[140300]:uint(64)[107] 0 uint(64)[107]
  unknown _OpaqueIndexNext[140310] "insert auto destroy" "locale private" "no doc"
  unknown call_tmp[614217] "expr temp" "maybe param" "maybe type" "temp"
  function <=>[140321](arg x[140318]:_array[133150](?), arg y[140326]:_array[133150](?)) : _unknown[43] "inline" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown a[140344] "index var" "insert auto destroy"
        
        unknown b[140346] "index var" "insert auto destroy"
      iterated expressions:
        x[140318]
        y[140326]
      shadow variables:
      forall body
      {
        (140340 call <=> a[140344] b[140346])
      }
    }
    (469851 return _void[47])
  }
  function reshape[140360](arg A[140357]:_array[133150](?), arg D[140363]:_domain[123390](?)) : _unknown[43]
  {
    unknown ret[469855] "RVV" "temp"
    unknown call_tmp[614222] "expr temp" "maybe param" "maybe type" "temp"
    (614225 'move' call_tmp[614222](140369 call isRectangularDom D[140363]))
    unknown call_tmp[614227] "expr temp" "maybe param" "maybe type" "temp"
    (614230 'move' call_tmp[614227](140370 call ! call_tmp[614222]))
    unknown call_tmp[614232] "expr temp" "maybe param" "maybe type" "temp"
    (614235 'move' call_tmp[614232](140397 call _cond_test call_tmp[614227]))
    if call_tmp[614232]
    {
      unknown call_tmp[614237] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (614240 'move' call_tmp[614237](140391 'typeof' D[140363]))
      unknown call_tmp[614242] "expr temp" "maybe param" "maybe type" "temp"
      (614245 'move' call_tmp[614242](140393 call _cast string[24] call_tmp[614237]))
      (140395 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[614242])
    }
    unknown call_tmp[614249] "expr temp" "maybe param" "maybe type" "temp"
    (614252 'move' call_tmp[614249](140404 call size _mt[232] A[140357]))
    unknown call_tmp[614256] "expr temp" "maybe param" "maybe type" "temp"
    (614259 'move' call_tmp[614256](140408 call size _mt[232] D[140363]))
    unknown call_tmp[614261] "expr temp" "maybe param" "maybe type" "temp"
    (614264 'move' call_tmp[614261](140411 call != call_tmp[614249] call_tmp[614256]))
    unknown call_tmp[614266] "expr temp" "maybe param" "maybe type" "temp"
    (614269 'move' call_tmp[614266](140473 call _cond_test call_tmp[614261]))
    if call_tmp[614266]
    {
      unknown call_tmp[614273] "expr temp" "maybe param" "maybe type" "temp"
      (614276 'move' call_tmp[614273](140432 call size _mt[232] A[140357]))
      unknown call_tmp[614280] "expr temp" "maybe param" "maybe type" "temp"
      (614283 'move' call_tmp[614280](140452 call size _mt[232] D[140363]))
      (140471 call halt "reshape(A,D) is invoked when A has " call_tmp[614273] " elements, but D has " call_tmp[614280] " indices")
    }
    unknown B[140488] "insert auto destroy"
    unknown call_tmp[614285] "expr temp" "maybe param" "maybe type" "temp"
    (614288 'move' call_tmp[614285](140484 call chpl__ensureDomainExpr D[140363]))
    unknown call_tmp[614292] "expr temp" "maybe param" "maybe type" "temp"
    (614295 'move' call_tmp[614292](140481 call eltType _mt[232] A[140357]))
    unknown call_tmp[614297] "expr temp" "maybe param" "maybe type" "temp"
    (614300 'move' call_tmp[614297](140486 call chpl__buildArrayRuntimeType call_tmp[614285] call_tmp[614292]))
    (491744 'default init var' B[140488] call_tmp[614297])
    {
      unknown _indexOfInterest[140508] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[140509] "expr temp" "temp"
      unknown call_tmp[614302] "expr temp" "maybe param" "maybe type" "temp"
      (614305 'move' call_tmp[614302](140518 call _getIterator D[140363]))
      unknown call_tmp[614307] "expr temp" "maybe param" "maybe type" "temp"
      (614310 'move' call_tmp[614307](140521 call _getIterator A[140357]))
      (140523 'move' _iterator[140509](140499 call _build_tuple call_tmp[614302] call_tmp[614307]))
      Defer
      {
        {
          (140553 call _freeIterator _iterator[140509])
        }
      }
      { scopeless type
        (140528 'move' _indexOfInterest[140508](140525 call iteratorIndex _iterator[140509]))
      }
      ForLoop
      {
        (140533 call _check_tuple_var_decl _indexOfInterest[140508] 2)
        unknown i[140539] "index var" "insert auto destroy"
        (140541 'move' i[140539](140537 call _indexOfInterest[140508] 1))
        unknown a[140546] "index var" "insert auto destroy"
        (140548 'move' a[140546](140544 call _indexOfInterest[140508] 2))
        unknown call_tmp[614312] "expr temp" "maybe param" "maybe type" "temp"
        (614315 'move' call_tmp[614312](140503 call B[140488] i[140539]))
        (140505 call = call_tmp[614312] a[140546])
        label _continueLabel[140513]
        _indexOfInterest[140508]
        _iterator[140509]
      }
      label _breakLabel[140514]
    }
    (469860 'move' ret[469855](469859 'deref' B[140488]))
    (469857 return ret[469855])
  }
  function reshape[140571](arg A[140568]:_iteratorRecord[194](?), arg D[140574]:_domain[123390](?)) : _unknown[43] "no doc"
  {
    unknown ret[469864] "RVV" "temp"
    unknown call_tmp[614317] "expr temp" "maybe param" "maybe type" "temp"
    (614320 'move' call_tmp[614317](140580 call isRectangularDom D[140574]))
    unknown call_tmp[614322] "expr temp" "maybe param" "maybe type" "temp"
    (614325 'move' call_tmp[614322](140581 call ! call_tmp[614317]))
    unknown call_tmp[614327] "expr temp" "maybe param" "maybe type" "temp"
    (614330 'move' call_tmp[614327](140593 call _cond_test call_tmp[614322]))
    if call_tmp[614327]
    {
      unknown call_tmp[614332] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (614335 'move' call_tmp[614332](140587 'typeof' D[140574]))
      unknown call_tmp[614337] "expr temp" "maybe param" "maybe type" "temp"
      (614340 'move' call_tmp[614337](140589 call _cast string[24] call_tmp[614332]))
      (140591 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: " call_tmp[614337])
    }
    unknown B[140616] "insert auto destroy"
    function chpl__loopexpr_iter6[530394](?)(arg iterator[530396]:_any[170](?)) : _unknown[43] "generic" "iterator fn"
    {
      unknown ret[530447] "RVV" "temp"
      {
        unknown _indexOfInterest[530401] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[530402] "expr temp" "temp"
        (530411 'move' _iterator[530402](530409 call _getIteratorZip iterator[530396]))
        Defer
        {
          {
            (530437 call _freeIterator _iterator[530402])
          }
        }
        { scopeless type
          (530416 'move' _indexOfInterest[530401](530413 call iteratorIndex _iterator[530402]))
        }
        ForLoop
        {
          unknown a[140614] "index var" "insert auto destroy"
          unknown i[140612] "index var" "insert auto destroy"
          (530421 call _check_tuple_var_decl _indexOfInterest[530401] 2)
          (530427 'move' i[140612](530425 call _indexOfInterest[530401] 1))
          (530432 'move' a[140614](530430 call _indexOfInterest[530401] 2))
          {
            {
              unknown yret[530451] "YVV" "temp"
              (530454 'move' yret[530451](530453 'deref' a[140614]))
              (530456 yield yret[530451])
            }
          }
          label _continueLabel[530406]
          _indexOfInterest[530401]
          _iterator[530402]
        }
        label _breakLabel[530407]
      }
      (530449 return ret[530447])
    }
    function chpl__forexpr6[530378](?)(arg iterExpr[530381]:_any[170](?)) : _unknown[43] "compiler generated" "compiler nested function" "generic" "fn returns iterator"
    {
      unknown ret[530460] "RVV" "temp"
      unknown _iterator[530385] "expr temp" "maybe ref" "temp"
      (530387 'move' _iterator[530385] iterExpr[530381])
      unknown call_tmp[530467] "expr temp" "maybe param" "maybe type" "temp"
      (530470 'move' call_tmp[530467](530390 call chpl__loopexpr_iter6 _iterator[530385]))
      (530465 'move' ret[530460](530464 'deref' call_tmp[530467]))
      (530462 return ret[530460])
    }
    unknown call_tmp[530472] "expr temp" "maybe param" "maybe type" "temp"
    (530475 'move' call_tmp[530472](140607 call _build_tuple D[140574] A[140568]))
    unknown call_tmp[530477] "maybe param" "maybe type" "temp"
    (530480 'move' call_tmp[530477](530383 call chpl__forexpr6 call_tmp[530472]))
    (530484 'iterator record set shape' call_tmp[530477] D[140574] 1)
    (491746 'init var' B[140616] call_tmp[530477])
    (469869 'move' ret[469864](469868 'deref' B[140616]))
    (469866 return ret[469864])
  }
  function linearize[140628](arg Xs[140626]:_any[170](?)) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[469873] "RVV" "temp"
    {
      unknown _indexOfInterest[140635] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[140636] "expr temp" "temp"
      (140645 'move' _iterator[140636](140643 call _getIterator Xs[140626]))
      Defer
      {
        {
          (140661 call _freeIterator _iterator[140636])
        }
      }
      { scopeless type
        (140650 'move' _indexOfInterest[140635](140647 call iteratorIndex _iterator[140636]))
      }
      ForLoop
      {
        unknown x[140654] "index var" "insert auto destroy"
        (140656 'move' x[140654] _indexOfInterest[140635])
        unknown yret[469877] "YVV" "temp"
        (469880 'move' yret[469877](469879 'deref' x[140654]))
        (469882 yield yret[469877])
        label _continueLabel[140640]
        _indexOfInterest[140635]
        _iterator[140636]
      }
      label _breakLabel[140641]
    }
    (469875 return ret[469873])
  }
  function chpl__unalias[140677](arg x[140674]:_domain[123390](?)) : _unknown[43] "inline" "unalias fn"
  {
    unknown ret[469886] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443673] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[614344] "expr temp" "maybe param" "maybe type" "temp"
      (614347 'move' call_tmp[614344](140681 call _instance _mt[232] x[140674]))
      (443677 'move' call_type_tmp[443673](140684 'typeof' call_tmp[614344]))
    }
    { scopeless type
      unknown call_type_tmp[443679] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[614351] "expr temp" "maybe param" "maybe type" "temp"
      (614354 'move' call_tmp[614351](140688 call _instance _mt[232] x[140674]))
      (443683 'move' call_type_tmp[443679](140691 'typeof' call_tmp[614351]))
    }
    unknown call_tmp[614356] "expr temp" "maybe param" "maybe type" "temp"
    (614359 'move' call_tmp[614356](140686 call _to_unmanaged call_type_tmp[443673]))
    unknown call_tmp[614361] "expr temp" "maybe param" "maybe type" "temp"
    (614364 'move' call_tmp[614361](140692 call != call_tmp[614356] call_type_tmp[443679]))
    unknown call_tmp[614366] "expr temp" "maybe param" "maybe type" "temp"
    (614369 'move' call_tmp[614366](140699 call _cond_test call_tmp[614361]))
    if call_tmp[614366]
    {
      (140697 call compilerError "Domain on borrow created")
    }
    unknown call_tmp[614373] "expr temp" "maybe param" "maybe type" "temp"
    (614376 'move' call_tmp[614373](140706 call _unowned _mt[232] x[140674]))
    unknown call_tmp[614378] "expr temp" "maybe param" "maybe type" "temp"
    (614381 'move' call_tmp[614378](140725 call _cond_test call_tmp[614373]))
    if call_tmp[614378]
    {
      unknown ret[140710] "no auto destroy"
      (491748 'init var' ret[140710] x[140674])
      (469891 'move' ret[469886](469890 'deref' ret[140710]))
      gotoReturn _end_chpl__unalias[469884] _end_chpl__unalias[469884]
    }
    {
      unknown ret[140718] "insert auto destroy" "no copy"
      (491750 'init var' ret[140718] x[140674])
      (469896 'move' ret[469886](469895 'deref' ret[140718]))
      gotoReturn _end_chpl__unalias[469884] _end_chpl__unalias[469884]
    }
    label _end_chpl__unalias[469884]
    (469888 return ret[469886])
  }
  function chpl__initCopy[140739](const  ref arg a[140736]:_array[133150](?)) : _unknown[43] "init copy fn"
  {
    unknown ret[469902] "RVV" "temp"
    unknown b[140754]
    unknown call_tmp[614385] "expr temp" "maybe param" "maybe type" "temp"
    (614388 'move' call_tmp[614385](140742 call _dom _mt[232] a[140736]))
    unknown call_tmp[614390] "expr temp" "maybe param" "maybe type" "temp"
    (614393 'move' call_tmp[614390](140750 call chpl__ensureDomainExpr call_tmp[614385]))
    unknown call_tmp[614397] "expr temp" "maybe param" "maybe type" "temp"
    (614400 'move' call_tmp[614397](140747 call eltType _mt[232] a[140736]))
    unknown call_tmp[614402] "expr temp" "maybe param" "maybe type" "temp"
    (614405 'move' call_tmp[614402](140752 call chpl__buildArrayRuntimeType call_tmp[614390] call_tmp[614397]))
    (491752 'default init var' b[140754] call_tmp[614402])
    (140762 call chpl__uncheckedArrayTransfer b[140754] a[140736])
    (469907 'move' ret[469902](469906 'deref' b[140754]))
    (469904 return ret[469902])
  }
  function chpl__autoCopy[140777](const  ref arg x[140774]:_array[133150](?)) : _unknown[43] "auto copy fn"
  {
    unknown ret[469911] "RVV" "temp"
    unknown call_tmp[614407] "maybe param" "maybe type" "temp"
    (614410 'move' call_tmp[614407](140782 call chpl__initCopy x[140774]))
    unknown b[140783] "insert auto destroy" "no copy"
    (491754 'init var' b[140783] call_tmp[614407])
    (469916 'move' ret[469911](469915 'deref' b[140783]))
    (469913 return ret[469911])
  }
  function chpl__unref[140800](arg x[140797]:_array[133150](?)) : _unknown[43] "inline" "no copy return" "unref fn"
  {
    unknown ret[469920] "RVV" "temp"
    unknown ret[140810] "no auto destroy"
    (491756 'init var' ret[140810] x[140797])
    (469925 'move' ret[469920](469924 'deref' ret[140810]))
    (469922 return ret[469920])
  }
  where {
    unknown call_tmp[614414] "expr temp" "maybe param" "maybe type" "temp"
    (614417 'move' call_tmp[614414](140804 call _value _mt[232] x[140797]))
    (140808 call chpl__isArrayView call_tmp[614414])
  }
  function chpl__unref[140826](arg ir[140823]:_iteratorRecord[194](?)) : _unknown[43] "no copy return" "unref fn"
  {
    unknown ret[469929] "RVV" "temp"
    unknown call_tmp[614419] "maybe param" "maybe type" "temp"
    (614422 'move' call_tmp[614419](140831 call chpl__initCopy ir[140823]))
    unknown toArray[140832] "no auto destroy" "no copy"
    (491758 'init var' toArray[140832] call_tmp[614419])
    (469934 'move' ret[469929](469933 'deref' toArray[140832]))
    (469931 return ret[469929])
  }
  function chpl__unref[140849](arg x[140846]:_array[133150](?)) : _unknown[43] "inline" "no copy return"
  {
    unknown ret[469938] "RVV" "temp"
    unknown ret[140852] "insert auto destroy" "no copy"
    (491760 'init var' ret[140852] x[140846])
    (469943 'move' ret[469938](469942 'deref' ret[140852]))
    (469940 return ret[469938])
  }
  function chpl__unalias[140869](arg x[140866]:_array[133150](?)) : _unknown[43] "inline" "unalias fn"
  {
    unknown ret[469947] "RVV" "temp"
    unknown tmp[402294] "maybe param" "temp"
    unknown tmp[402315] "maybe param" "temp"
    unknown call_tmp[614426] "expr temp" "maybe param" "maybe type" "temp"
    (614429 'move' call_tmp[614426](140872 call _value _mt[232] x[140866]))
    (402326 'move' tmp[402315](140879 call(140875 call (partial) isSliceArrayView _mt[232] call_tmp[614426])))
    unknown call_tmp[614433] "expr temp" "maybe param" "maybe type" "temp"
    (614436 'move' call_tmp[614433](402328 call _cond_invalid tmp[402315]))
    if call_tmp[614433]
    {
      (402331 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[516969] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516970] "maybe param" "temp"
    unknown call_tmp[614438] "expr temp" "maybe param" "maybe type" "temp"
    (614441 'move' call_tmp[614438](402316 call isTrue tmp[402315]))
    (516975 'move' tmp[516970](516973 call _cond_test call_tmp[614438]))
    if tmp[516970]
    {
      (516980 'move' tmp[516969](516977 '_paramFoldLogical' tmp[516970] 1))
    }
    {
      unknown tmp[516982] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[614445] "expr temp" "maybe param" "maybe type" "temp"
      (614448 'move' call_tmp[614445](140881 call _value _mt[232] x[140866]))
      unknown call_tmp[614452] "expr temp" "maybe param" "maybe type" "temp"
      (614455 'move' call_tmp[614452](140888 call(140884 call (partial) isRankChangeArrayView _mt[232] call_tmp[614445])))
      (516984 'move' tmp[516982](402320 call isTrue call_tmp[614452]))
      (516989 'move' tmp[516969](516986 '_paramFoldLogical' tmp[516970] tmp[516982]))
    }
    (402305 'move' tmp[402294] tmp[516969])
    unknown call_tmp[614457] "expr temp" "maybe param" "maybe type" "temp"
    (614460 'move' call_tmp[614457](402307 call _cond_invalid tmp[402294]))
    if call_tmp[614457]
    {
      (402310 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown isview[140902] "param"
    unknown tmp[516996] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[516997] "maybe param" "temp"
    unknown call_tmp[614462] "expr temp" "maybe param" "maybe type" "temp"
    (614465 'move' call_tmp[614462](402295 call isTrue tmp[402294]))
    (517002 'move' tmp[516997](517000 call _cond_test call_tmp[614462]))
    if tmp[516997]
    {
      (517007 'move' tmp[516996](517004 '_paramFoldLogical' tmp[516997] 1))
    }
    {
      unknown tmp[517009] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[614469] "expr temp" "maybe param" "maybe type" "temp"
      (614472 'move' call_tmp[614469](140892 call _value _mt[232] x[140866]))
      unknown call_tmp[614476] "expr temp" "maybe param" "maybe type" "temp"
      (614479 'move' call_tmp[614476](140899 call(140895 call (partial) isReindexArrayView _mt[232] call_tmp[614469])))
      (517011 'move' tmp[517009](402299 call isTrue call_tmp[614476]))
      (517016 'move' tmp[516996](517013 '_paramFoldLogical' tmp[516997] tmp[517009]))
    }
    (491762 'init var' isview[140902] tmp[516996])
    unknown call_tmp[614483] "maybe param" "maybe type" "temp"
    (614486 'move' call_tmp[614483](140907 call _unowned _mt[232] x[140866]))
    const isalias[140910] "const" "insert auto destroy"
    (491764 'init var' isalias[140910] call_tmp[614483])
    unknown tmp[402336] "maybe param" "temp"
    (402347 'move' tmp[402336] isview[140902])
    unknown call_tmp[614488] "expr temp" "maybe param" "maybe type" "temp"
    (614491 'move' call_tmp[614488](402349 call _cond_invalid tmp[402336]))
    if call_tmp[614488]
    {
      (402352 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[517023] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517024] "maybe param" "temp"
    unknown call_tmp[614493] "expr temp" "maybe param" "maybe type" "temp"
    (614496 'move' call_tmp[614493](402337 call isTrue tmp[402336]))
    (517029 'move' tmp[517024](517027 call _cond_test call_tmp[614493]))
    if tmp[517024]
    {
      (517034 'move' tmp[517023](517031 '_paramFoldLogical' tmp[517024] 1))
    }
    {
      unknown tmp[517036] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (517038 'move' tmp[517036](402341 call isTrue isalias[140910]))
      (517043 'move' tmp[517023](517040 '_paramFoldLogical' tmp[517024] tmp[517036]))
    }
    unknown call_tmp[614498] "expr temp" "maybe param" "maybe type" "temp"
    (614501 'move' call_tmp[614498](140938 call _cond_test tmp[517023]))
    if call_tmp[614498]
    {
      unknown ret[140918] "no auto destroy"
      (491766 'init var' ret[140918] x[140866])
      (140925 call chpl__autoDestroy x[140866])
      (469952 'move' ret[469947](469951 'deref' ret[140918]))
      gotoReturn _end_chpl__unalias[469945] _end_chpl__unalias[469945]
    }
    {
      unknown ret[140931] "insert auto destroy" "no copy"
      (491768 'init var' ret[140931] x[140866])
      (469957 'move' ret[469947](469956 'deref' ret[140931]))
      gotoReturn _end_chpl__unalias[469945] _end_chpl__unalias[469945]
    }
    label _end_chpl__unalias[469945]
    (469949 return ret[469947])
  }
  function chpl__initCopy[140950](arg ir[140947]:_iteratorRecord[194](?)) : _unknown[43] "init copy fn"
  {
    unknown ret[469963] "RVV" "temp"
    unknown call_tmp[614505] "expr temp" "maybe param" "maybe type" "temp"
    (614508 'move' call_tmp[614505](140958 call _shape_ _mt[232] ir[140947]))
    unknown call_tmp[614510] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (614513 'move' call_tmp[614510](691446 'new' _domain[123390](?) call_tmp[614505]))
    unknown shape[140964]
    (491770 'init var' shape[140964] call_tmp[614510])
    unknown call_tmp[614517] "expr temp" "maybe param" "maybe type" "temp"
    (614520 'move' call_tmp[614517](140969 call _unowned _mt[232] shape[140964]))
    (140973 call = call_tmp[614517] 1)
    unknown call_tmp[614522] "expr temp" "maybe param" "maybe type" "temp"
    (614525 'move' call_tmp[614522](140980 call chpl__initCopy_shapeHelp shape[140964] ir[140947]))
    (469968 'move' ret[469963](469967 'deref' call_tmp[614522]))
    (469965 return ret[469963])
  }
  where {
    (140955 call chpl_iteratorHasDomainShape ir[140947])
  }
  function chpl__initCopy[140992](arg ir[140989]:_iteratorRecord[194](?)) : _unknown[43] "init copy fn"
  {
    unknown ret[469972] "RVV" "temp"
    unknown call_tmp[614529] "expr temp" "maybe param" "maybe type" "temp"
    (614532 'move' call_tmp[614529](141007 call _shape_ _mt[232] ir[140989]))
    unknown call_tmp[614534] "maybe param" "maybe type" "temp"
    (614537 'move' call_tmp[614534](141011 call chpl__buildDomainExpr call_tmp[614529]))
    unknown shape[141013] "insert auto destroy"
    (491772 'init var' shape[141013] call_tmp[614534])
    unknown call_tmp[614539] "expr temp" "maybe param" "maybe type" "temp"
    (614542 'move' call_tmp[614539](141021 call chpl__initCopy_shapeHelp shape[141013] ir[140989]))
    (469977 'move' ret[469972](469976 'deref' call_tmp[614539]))
    (469974 return ret[469972])
  }
  where {
    unknown tmp[402357] "maybe param" "temp"
    (402368 'move' tmp[402357](140997 call chpl_iteratorHasRangeShape ir[140989]))
    unknown call_tmp[614544] "expr temp" "maybe param" "maybe type" "temp"
    (614547 'move' call_tmp[614544](402370 call _cond_invalid tmp[402357]))
    if call_tmp[614544]
    {
      (402373 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[517050] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517051] "maybe param" "temp"
    unknown call_tmp[614549] "expr temp" "maybe param" "maybe type" "temp"
    (614552 'move' call_tmp[614549](402358 call isTrue tmp[402357]))
    (517056 'move' tmp[517051](517054 call _cond_test call_tmp[614549]))
    if tmp[517051]
    {
      unknown tmp[517058] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[614554] "expr temp" "maybe param" "maybe type" "temp"
      (614557 'move' call_tmp[614554](141001 call chpl_iteratorFromForExpr ir[140989]))
      unknown call_tmp[614559] "expr temp" "maybe param" "maybe type" "temp"
      (614562 'move' call_tmp[614559](141002 call ! call_tmp[614554]))
      (517060 'move' tmp[517058](402361 call isTrue call_tmp[614559]))
      (517065 'move' tmp[517050](517062 '_paramFoldLogical' tmp[517051] tmp[517058]))
    }
    {
      (517070 'move' tmp[517050](517067 '_paramFoldLogical' tmp[517051] 0))
    }
    (691945 call _statementLevelSymbol tmp[517050])
  }
  function chpl__initCopy_shapeHelp[141033](arg shape[141030]:_domain[123390](?), arg ir[141036]:_iteratorRecord[194](?)) : _unknown[43]
  {
    unknown ret[469981] "RVV" "temp"
    unknown result[141050] "insert auto destroy"
    unknown call_tmp[614564] "expr temp" "maybe param" "maybe type" "temp"
    (614567 'move' call_tmp[614564](141046 call chpl__ensureDomainExpr shape[141030]))
    unknown call_tmp[614569] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (614572 'move' call_tmp[614569](141043 'typeof' ir[141036]))
    unknown call_tmp[614574] "expr temp" "maybe param" "maybe type" "temp"
    (614577 'move' call_tmp[614574](141045 call iteratorToArrayElementType call_tmp[614569]))
    unknown call_tmp[614579] "expr temp" "maybe param" "maybe type" "temp"
    (614582 'move' call_tmp[614579](141048 call chpl__buildArrayRuntimeType call_tmp[614564] call_tmp[614574]))
    (491774 'default init var' result[141050] call_tmp[614579])
    unknown call_tmp[614586] "expr temp" "maybe param" "maybe type" "temp"
    (614589 'move' call_tmp[614586](141056 call eltType _mt[232] result[141050]))
    unknown call_tmp[614591] "expr temp" "maybe param" "maybe type" "temp"
    (614594 'move' call_tmp[614591](141060 call isArray call_tmp[614586]))
    unknown call_tmp[614596] "expr temp" "maybe param" "maybe type" "temp"
    (614599 'move' call_tmp[614596](141083 call _cond_test call_tmp[614591]))
    if call_tmp[614596]
    {
      (141081 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    unknown call_tmp[614601] "expr temp" "maybe param" "maybe type" "temp"
    (614604 'move' call_tmp[614601](141091 call chpl_iteratorFromForExpr ir[141036]))
    unknown call_tmp[614606] "expr temp" "maybe param" "maybe type" "temp"
    (614609 'move' call_tmp[614606](141180 call _cond_test call_tmp[614601]))
    if call_tmp[614606]
    {
      {
        unknown _indexOfInterest[141106] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[141107] "expr temp" "temp"
        unknown call_tmp[614611] "expr temp" "maybe param" "maybe type" "temp"
        (614614 'move' call_tmp[614611](141116 call _getIterator result[141050]))
        unknown call_tmp[614616] "expr temp" "maybe param" "maybe type" "temp"
        (614619 'move' call_tmp[614616](141119 call _getIterator ir[141036]))
        (141121 'move' _iterator[141107](141100 call _build_tuple call_tmp[614611] call_tmp[614616]))
        Defer
        {
          {
            (141151 call _freeIterator _iterator[141107])
          }
        }
        { scopeless type
          (141126 'move' _indexOfInterest[141106](141123 call iteratorIndex _iterator[141107]))
        }
        ForLoop
        {
          (141131 call _check_tuple_var_decl _indexOfInterest[141106] 2)
          unknown r[141137] "index var" "insert auto destroy"
          (141139 'move' r[141137](141135 call _indexOfInterest[141106] 1))
          unknown src[141144] "index var" "insert auto destroy"
          (141146 'move' src[141144](141142 call _indexOfInterest[141106] 2))
          (141103 call = r[141137] src[141144])
          label _continueLabel[141111]
          _indexOfInterest[141106]
          _iterator[141107]
        }
        label _breakLabel[141112]
      }
    }
    {
      Forall {
        induction variables:
          
          unknown r[141174] "index var" "insert auto destroy"
          
          unknown src[141176] "index var" "insert auto destroy"
        iterated expressions:
          result[141050]
          ir[141036]
        shadow variables:
        forall body
        {
          (141170 call = r[141174] src[141176])
        }
      }
    }
    (469986 'move' ret[469981](469985 'deref' result[141050]))
    (469983 return ret[469981])
  }
  function chpl__initCopy[141195](arg ir[141192]:_iteratorRecord[194](?)) : _unknown[43] "init copy fn"
  {
    unknown ret[470000] "RVV" "temp"
    unknown call_tmp[614621] "maybe param" "maybe type" "temp"
    (614624 'move' call_tmp[614621](141200 call chpl_iteratorHasRangeShape ir[141192]))
    unknown shapeful[141201] "param"
    (491776 'init var' shapeful[141201] call_tmp[614621])
    unknown r[141217]
    unknown tmp[517077] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517078] "maybe param" "temp"
    (517083 'move' tmp[517078](517081 call _cond_test shapeful[141201]))
    if tmp[517078]
    {
      unknown tmp[517085] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (517087 'move' tmp[517085](141207 call _shape_ _mt[232] ir[141192]))
      (517092 'move' tmp[517077](517089 '_paramFoldLogical' tmp[517078] tmp[517085]))
    }
    {
      unknown tmp[517094] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (517096 'move' tmp[517094](141212 call chpl_build_bounded_range 1 0))
      (517101 'move' tmp[517077](517098 '_paramFoldLogical' tmp[517078] tmp[517094]))
    }
    (491778 'init var' r[141217] tmp[517077])
    unknown i[141221]
    (491780 'init var' i[141221] 0)
    unknown call_tmp[614630] "expr temp" "maybe param" "maybe type" "temp"
    (614633 'move' call_tmp[614630](141225 call size _mt[232] r[141217]))
    unknown call_tmp[614635] "maybe param" "maybe type" "temp"
    (614638 'move' call_tmp[614635](141229 call _cast size_t[209674] call_tmp[614630]))
    unknown size[141231]
    (491782 'init var' size[141231] call_tmp[614635])
    unknown call_tmp[614640] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (614643 'move' call_tmp[614640](141236 'typeof' ir[141192]))
    unknown elemType[141239] "type variable"(141238 call iteratorToArrayElementType call_tmp[614640])
    unknown call_tmp[614645] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (614648 'move' call_tmp[614645](491786 'typeof' ir[141192]))
    (491788 'move' elemType[141239](491785 call iteratorToArrayElementType call_tmp[614645]))
    unknown call_tmp[614650] "maybe param" "maybe type" "temp"
    (614653 'move' call_tmp[614650](141245 call _ddata[11791](?) elemType[141239]))
    unknown data[141247]
    (491790 'init var' data[141247] nil[38] call_tmp[614650])
    unknown callPostAlloc[141251]
    (491792 'default init var' callPostAlloc[141251] bool[10])
    unknown subloc[141255]
    (491794 'init var' subloc[141255] c_sublocid_none[90216])
    function allocateData[141262](param arg initialAlloc[141260]:_any[170](?), arg allocSize[141264]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
    {
      unknown call_tmp[614655] "expr temp" "maybe param" "maybe type" "temp"
      (614658 'move' call_tmp[614655](141348 call _cond_test initialAlloc[141260]))
      if call_tmp[614655]
      {
        function chpl_mem_array_alloc[141273](arg nmemb[141270] :
        size_t[209674], arg eltSize[141276] :
        size_t[209674], arg subloc[141280] :
        chpl_sublocID_t[90212], ref arg callPostAlloc[141284]:bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
        {
          unknown ret[469990] "RVV" "temp"
          (469992 return ret[469990])
        }
        { scopeless type
          c_void_ptr[141]
        }
        unknown call_tmp[614660] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (614663 'move' call_tmp[614660](141307 'typeof' data[141247]))
        unknown call_tmp[614665] "expr temp" "maybe param" "maybe type" "temp"
        (614668 'move' call_tmp[614665](141296 call _cast size_t[209674] allocSize[141264]))
        unknown call_tmp[614670] "expr temp" "maybe param" "maybe type" "temp"
        (614673 'move' call_tmp[614670](141302 call _ddata_sizeof_element data[141247]))
        unknown call_tmp[614675] "expr temp" "maybe param" "maybe type" "temp"
        (614678 'move' call_tmp[614675](141305 call chpl_mem_array_alloc call_tmp[614665] call_tmp[614670] subloc[141255] callPostAlloc[141251]))
        unknown call_tmp[614680] "expr temp" "maybe param" "maybe type" "temp"
        (614683 'move' call_tmp[614680](141308 call _cast call_tmp[614660] call_tmp[614675]))
        (141310 call = data[141247] call_tmp[614680])
      }
      {
        function chpl_mem_array_postAlloc[141319](arg data[141316]:c_void_ptr[141], arg nmemb[141322] :
        size_t[209674], arg eltSize[141326] :
        size_t[209674]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
        {
          (469994 return _void[47])
        }
        unknown call_tmp[614685] "expr temp" "maybe param" "maybe type" "temp"
        (614688 'move' call_tmp[614685](141335 call _cast c_void_ptr[141] data[141247]))
        unknown call_tmp[614690] "expr temp" "maybe param" "maybe type" "temp"
        (614693 'move' call_tmp[614690](141340 call _cast size_t[209674] allocSize[141264]))
        unknown call_tmp[614695] "expr temp" "maybe param" "maybe type" "temp"
        (614698 'move' call_tmp[614695](141345 call _ddata_sizeof_element data[141247]))
        (141346 call chpl_mem_array_postAlloc call_tmp[614685] call_tmp[614690] call_tmp[614695])
      }
      (469996 return _void[47])
    }
    unknown call_tmp[614700] "expr temp" "maybe param" "maybe type" "temp"
    (614703 'move' call_tmp[614700](141357 call > size[141231] 0))
    unknown call_tmp[614705] "expr temp" "maybe param" "maybe type" "temp"
    (614708 'move' call_tmp[614705](141365 call _cond_test call_tmp[614700]))
    if call_tmp[614705]
    {
      (141363 call allocateData 1 size[141231])
    }
    {
      unknown _indexOfInterest[141506] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141507] "expr temp" "temp"
      (141516 'move' _iterator[141507](141514 call _getIterator ir[141192]))
      Defer
      {
        {
          (141532 call _freeIterator _iterator[141507])
        }
      }
      { scopeless type
        (141521 'move' _indexOfInterest[141506](141518 call iteratorIndex _iterator[141507]))
      }
      ForLoop
      {
        unknown elt[141525] "index var" "insert auto destroy"
        (141527 'move' elt[141525] _indexOfInterest[141506])
        {
          unknown call_tmp[614710] "maybe param" "maybe type" "temp"
          (614713 'move' call_tmp[614710](141375 call chpl__initCopy elt[141525]))
          unknown eltCopy[141376] "no auto destroy" "no copy"
          (491796 'init var' eltCopy[141376] call_tmp[614710])
          unknown call_tmp[614715] "expr temp" "maybe param" "maybe type" "temp"
          (614718 'move' call_tmp[614715](141382 call >= i[141221] size[141231]))
          unknown call_tmp[614720] "expr temp" "maybe param" "maybe type" "temp"
          (614723 'move' call_tmp[614720](141488 call _cond_test call_tmp[614715]))
          if call_tmp[614720]
          {
            unknown oldSize[141385]
            (491798 'init var' oldSize[141385] size[141231])
            unknown oldData[141390]
            (491800 'init var' oldData[141390] data[141247])
            unknown call_tmp[614725] "expr temp" "maybe param" "maybe type" "temp"
            (614728 'move' call_tmp[614725](141395 call == size[141231] 0))
            unknown call_tmp[614730] "expr temp" "maybe param" "maybe type" "temp"
            (614733 'move' call_tmp[614730](141410 call _cond_test call_tmp[614725]))
            if call_tmp[614730]
            {
              (141399 call = size[141231] 4)
            }
            {
              unknown call_tmp[614735] "expr temp" "maybe param" "maybe type" "temp"
              (614738 'move' call_tmp[614735](141405 call * 2 size[141231]))
              (141407 call = size[141231] call_tmp[614735])
            }
            (141420 call allocateData 1 size[141231])
            {
              unknown _indexOfInterest[141442] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[141443] "expr temp" "temp"
              unknown call_tmp[614740] "expr temp" "maybe param" "maybe type" "temp"
              (614743 'move' call_tmp[614740](141459 call chpl_direct_counted_range_iter 0 oldSize[141385]))
              (141452 'move' _iterator[141443](141450 call _getIterator call_tmp[614740]))
              Defer
              {
                {
                  (141475 call _freeIterator _iterator[141443])
                }
              }
              { scopeless type
                (141464 'move' _indexOfInterest[141442](141461 call iteratorIndex _iterator[141443]))
              }
              ForLoop
              {
                unknown i[141468] "index var" "insert auto destroy"
                (141470 'move' i[141468] _indexOfInterest[141442])
                {
                  unknown call_tmp[614745] "expr temp" "maybe param" "maybe type" "temp"
                  (614748 'move' call_tmp[614745](141434 call data[141247] i[141468]))
                  unknown call_tmp[614750] "expr temp" "maybe param" "maybe type" "temp"
                  (614753 'move' call_tmp[614750](141438 call oldData[141390] i[141468]))
                  (141439 '=' call_tmp[614745] call_tmp[614750])
                }
                label _continueLabel[141447]
                _indexOfInterest[141442]
                _iterator[141443]
              }
              label _breakLabel[141448]
            }
            (141486 call _ddata_free oldData[141390] oldSize[141385])
          }
          unknown call_tmp[614755] "expr temp" "maybe param" "maybe type" "temp"
          (614758 'move' call_tmp[614755](141497 call data[141247] i[141221]))
          (141499 '=' call_tmp[614755] eltCopy[141376])
          (141503 call += i[141221] 1)
        }
        label _continueLabel[141511]
        _indexOfInterest[141506]
        _iterator[141507]
      }
      label _breakLabel[141512]
    }
    unknown tmp[402378] "maybe param" "temp"
    (402389 'move' tmp[402378] shapeful[141201])
    unknown call_tmp[614760] "expr temp" "maybe param" "maybe type" "temp"
    (614763 'move' call_tmp[614760](402391 call _cond_invalid tmp[402378]))
    if call_tmp[614760]
    {
      (402394 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[517108] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517109] "maybe param" "temp"
    unknown call_tmp[614765] "expr temp" "maybe param" "maybe type" "temp"
    (614768 'move' call_tmp[614765](402379 call isTrue tmp[402378]))
    (517114 'move' tmp[517109](517112 call _cond_test call_tmp[614765]))
    if tmp[517109]
    {
      unknown tmp[517116] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[614772] "expr temp" "maybe param" "maybe type" "temp"
      (614775 'move' call_tmp[614772](141542 call size _mt[232] r[141217]))
      unknown call_tmp[614777] "expr temp" "maybe param" "maybe type" "temp"
      (614780 'move' call_tmp[614777](141545 call < i[141221] call_tmp[614772]))
      (517118 'move' tmp[517116](402382 call isTrue call_tmp[614777]))
      (517123 'move' tmp[517108](517120 '_paramFoldLogical' tmp[517109] tmp[517116]))
    }
    {
      (517128 'move' tmp[517108](517125 '_paramFoldLogical' tmp[517109] 0))
    }
    unknown call_tmp[614782] "expr temp" "maybe param" "maybe type" "temp"
    (614785 'move' call_tmp[614782](141557 call _cond_test tmp[517108]))
    if call_tmp[614782]
    {
      unknown call_tmp[614787] "expr temp" "maybe param" "maybe type" "temp"
      (614790 'move' call_tmp[614787](141552 call # r[141217] i[141221]))
      (141554 call = r[141217] call_tmp[614787])
    }
    unknown call_tmp[614792] "expr temp" "maybe param" "maybe type" "temp"
    (614795 'move' call_tmp[614792](141563 call ! shapeful[141201]))
    unknown call_tmp[614797] "expr temp" "maybe param" "maybe type" "temp"
    (614800 'move' call_tmp[614797](141575 call _cond_test call_tmp[614792]))
    if call_tmp[614797]
    {
      unknown call_tmp[614802] "expr temp" "maybe param" "maybe type" "temp"
      (614805 'move' call_tmp[614802](141567 call chpl_build_low_bounded_range 1))
      unknown call_tmp[614807] "expr temp" "maybe param" "maybe type" "temp"
      (614810 'move' call_tmp[614807](141570 call # call_tmp[614802] i[141221]))
      (141572 call = r[141217] call_tmp[614807])
    }
    unknown call_tmp[614812] "maybe param" "maybe type" "temp"
    (614815 'move' call_tmp[614812](141582 call chpl__buildDomainExpr r[141217]))
    unknown D[141584] "insert auto destroy"
    (491802 'init var' D[141584] call_tmp[614812])
    unknown call_tmp[614817] "expr temp" "maybe param" "maybe type" "temp"
    (614820 'move' call_tmp[614817](141589 call != data[141247] nil[38]))
    unknown call_tmp[614822] "expr temp" "maybe param" "maybe type" "temp"
    (614825 'move' call_tmp[614822](141709 call _cond_test call_tmp[614817]))
    if call_tmp[614822]
    {
      unknown call_tmp[614827] "expr temp" "maybe param" "maybe type" "temp"
      (614830 'move' call_tmp[614827](141598 call _cond_test callPostAlloc[141251]))
      if call_tmp[614827]
      {
        (141596 call allocateData 0 size[141231])
      }
      { scopeless type
        unknown call_type_tmp[443685] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[614832] "expr temp" "maybe param" "maybe type" "temp"
        (614835 'move' call_tmp[614832](141613 call data[141247] 0))
        (443689 'move' call_type_tmp[443685](141614 'typeof' call_tmp[614832]))
      }
      unknown call_tmp[614839] "expr temp" "maybe param" "maybe type" "temp"
      (614842 'move' call_tmp[614839](141619 call _cast int(64)[13] size[141231]))
      unknown call_tmp[614844] "maybe param" "maybe type" "temp"
      (614847 'move' call_tmp[614844](141621 call(141607 call (partial) buildArrayWith _mt[232] D[141584]) call_type_tmp[443685] data[141247] call_tmp[614839]))
      unknown A[141622]
      (491804 'init var' A[141622] call_tmp[614844])
      { scopeless type
        unknown call_type_tmp[443691] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[614849] "expr temp" "maybe param" "maybe type" "temp"
        (614852 'move' call_tmp[614849](141634 call data[141247] 0))
        (443695 'move' call_type_tmp[443691](141635 'typeof' call_tmp[614849]))
      }
      unknown call_tmp[614856] "expr temp" "maybe param" "maybe type" "temp"
      (614859 'move' call_tmp[614856](141627 call _value _mt[232] A[141622]))
      (141636 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[614856] call_type_tmp[443691])
      unknown call_tmp[614863] "expr temp" "maybe param" "maybe type" "temp"
      (614866 'move' call_tmp[614863](141639 call _value _mt[232] A[141622]))
      unknown call_tmp[614870] "expr temp" "maybe param" "maybe type" "temp"
      (614873 'move' call_tmp[614870](141642 call _decEltRefCounts _mt[232] call_tmp[614863]))
      (141646 call = call_tmp[614870] 0)
      (141667 'auto destroy runtime type' elemType[141239])
      (470005 'move' ret[470000](470004 'deref' A[141622]))
      gotoReturn _end_chpl__initCopy[469998] _end_chpl__initCopy[469998]
    }
    {
      (141676 call allocateData 1 1)
      unknown call_tmp[614875] "expr temp" "maybe param" "maybe type" "temp"
      (614878 'move' call_tmp[614875](141686 call _cond_test callPostAlloc[141251]))
      if call_tmp[614875]
      {
        (141684 call allocateData 0 1)
      }
      unknown call_tmp[614882] "expr temp" "maybe param" "maybe type" "temp"
      (614885 'move' call_tmp[614882](141700 call _cast int(64)[13] size[141231]))
      unknown call_tmp[614887] "maybe param" "maybe type" "temp"
      (614890 'move' call_tmp[614887](141702 call(141692 call (partial) buildArrayWith _mt[232] D[141584]) elemType[141239] data[141247] call_tmp[614882]))
      unknown A[141703]
      (491806 'init var' A[141703] call_tmp[614887])
      (470010 'move' ret[470000](470009 'deref' A[141703]))
      gotoReturn _end_chpl__initCopy[469998] _end_chpl__initCopy[469998]
    }
    label _end_chpl__initCopy[469998]
    (470002 return ret[470000])
  }
  function chpl_checkCopyInit[141721](arg lhs[141718]:_domain[123390](?), arg rhs[141724]:_domain[123390](?)) param : _unknown[43] "no return value for void"
  {
    unknown tmp[402399] "maybe param" "temp"
    unknown call_tmp[614894] "expr temp" "maybe param" "maybe type" "temp"
    (614897 'move' call_tmp[614894](141728 call dist _mt[232] lhs[141718]))
    unknown call_tmp[614901] "expr temp" "maybe param" "maybe type" "temp"
    (614904 'move' call_tmp[614901](141731 call _value _mt[232] call_tmp[614894]))
    (402410 'move' tmp[402399](141740 call(141736 call (partial) dsiIsLayout _mt[232] call_tmp[614901])))
    unknown call_tmp[614908] "expr temp" "maybe param" "maybe type" "temp"
    (614911 'move' call_tmp[614908](402412 call _cond_invalid tmp[402399]))
    if call_tmp[614908]
    {
      (402415 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[517135] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517136] "maybe param" "temp"
    unknown call_tmp[614913] "expr temp" "maybe param" "maybe type" "temp"
    (614916 'move' call_tmp[614913](402400 call isTrue tmp[402399]))
    (517141 'move' tmp[517136](517139 call _cond_test call_tmp[614913]))
    if tmp[517136]
    {
      unknown tmp[517143] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[614920] "expr temp" "maybe param" "maybe type" "temp"
      (614923 'move' call_tmp[614920](141742 call dist _mt[232] rhs[141724]))
      unknown call_tmp[614927] "expr temp" "maybe param" "maybe type" "temp"
      (614930 'move' call_tmp[614927](141745 call _value _mt[232] call_tmp[614920]))
      unknown call_tmp[614934] "expr temp" "maybe param" "maybe type" "temp"
      (614937 'move' call_tmp[614934](141752 call(141748 call (partial) dsiIsLayout _mt[232] call_tmp[614927])))
      unknown call_tmp[614939] "expr temp" "maybe param" "maybe type" "temp"
      (614942 'move' call_tmp[614939](141753 call ! call_tmp[614934]))
      (517145 'move' tmp[517143](402403 call isTrue call_tmp[614939]))
      (517150 'move' tmp[517135](517147 '_paramFoldLogical' tmp[517136] tmp[517143]))
    }
    {
      (517155 'move' tmp[517135](517152 '_paramFoldLogical' tmp[517136] 0))
    }
    unknown call_tmp[614944] "expr temp" "maybe param" "maybe type" "temp"
    (614947 'move' call_tmp[614944](141779 call _cond_test tmp[517135]))
    if call_tmp[614944]
    {
      (141777 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
    (470014 return _void[47])
  }
  (329384 'used modules list'(111784 'use' ChapelBase[302])(111789 'use' ChapelTuple[58490])(111793 'use' ChapelLocale[90191])(111797 'use' ArrayViewSlice[182459])(111801 'use' ArrayViewRankChange[184196])(111805 'use' ArrayViewReindex[188667])(111809 'use' Reflection[211223] 'only' ))
}