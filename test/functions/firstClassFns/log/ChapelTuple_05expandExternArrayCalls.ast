AST dump for ChapelTuple after pass expandExternArrayCalls.
Module use list: 

{
  (58493 'use' ChapelStandard)
  type _tuple[58502](?) unknown size[58498] "param" int[13]
  function chpl__init_tuple[58511](param arg size[58508] :
  int[13]) : _unknown[43] "tuple init fn" "inline"
  {
  }
  function _build_tuple[58522](arg t[58519]:_any[170](?) ...) type : _unknown[43] "build tuple" "build tuple type" "inline"
  {
  }
  function _build_tuple[58533](arg x[58530]:_any[170](?) ...) : _unknown[43] "build tuple" "inline"
  {
    (58536 return x)
  }
  function _build_tuple_noref[58547](arg t[58544]:_any[170](?) ...) type : _unknown[43] "do not allow ref" "build tuple" "build tuple type" "inline"
  {
  }
  function _build_tuple_always_allow_ref[58558](arg x[58555]:_any[170](?) ...) : _unknown[43] "allow ref" "build tuple" "inline" "suppress lvalue error"
  {
    { scopeless
      (58561 return x)
    }
  }
  function chpl__unref[58570](arg t[58568]:_any[170](?)) type : _unknown[43] "inline"
  {
    if(58586 call _cond_test(58575 call isTupleType t))
    {
      { scopeless
        (58581 return(58580 call _build_tuple_noref(58578 'expand_tuple' t)))
      }
    }
    {
      { scopeless
        (58584 return t)
      }
    }
  }
  function *[58601](param arg p[58598] :
  int[13], arg t[58603]:_any[170](?)) type : _unknown[43] "build tuple" "build tuple type" "star tuple"
  {
  }
  function *[58614](param arg p[58611] :
  uint[107], arg t[58616]:_any[170](?)) type : _unknown[43] "no doc"
  {
    if(58672 call _cond_test(58623 call > p(58622 call max int[13])))
    {
      { scopeless
        (58670 call compilerError(58667 call +(58649 call + "Tuples of size >"(58647 call _cast string[24](58645 call max int[13]))) " are not currently supported"))
      }
    }
    unknown pAsInt[58682] "param"(58680 call _cast int[13] p)
    (58689 return(58687 call * pAsInt t))
  }
  function *[58699](param arg p[58696] :
  bool[10], arg t[58701]:_any[170](?)) type : _unknown[43] "last resort" "no doc"
  {
    (58721 call compilerError "Tuple types cannot be defined using boolean sizes")
  }
  function *[58732](arg p[58729] :
  bool[10], arg t[58734]:_any[170](?)) type : _unknown[43] "last resort" "no doc"
  {
    (58739 call compilerError "Tuple types cannot be defined using boolean sizes")
  }
  function _build_star_tuple_noref[58750](param arg p[58747] :
  int[13], arg t[58752]:_any[170](?)) type : _unknown[43] "do not allow ref" "build tuple" "build tuple type" "star tuple"
  {
  }
  function *[58761](arg t[58759]:_any[170](?), param arg p[58764] :
  int[13]) : _unknown[43] "last resort"
  {
    (58787 call compilerError "<type>*<param int> not supported.  If you're trying to specify a homogeneous tuple type, use <param int>*<type>.")
  }
  function *[58798](arg p[58795] :
  integral, arg t[58800]:_any[170](?)) type : _unknown[43] "last resort"
  {
    (58822 call compilerError "tuple size must be known at compile-time")
  }
  function chpl__tuplify[58831](arg x[58829]:_any[170](?)) : _unknown[43] "inline"
  {
    if(58845 call _cond_test(58836 call isTuple x))
    {
      { scopeless
        (58838 return x)
      }
    }
    {
      { scopeless
        (58843 return(58841 call _build_tuple x))
      }
    }
  }
  function isTupleValue[58860](arg x[58857] :
  _tuple) param : _unknown[43] "no doc"
  {
    { scopeless
      (58863 return 1)
    }
  }
  function isTupleValue[58872](arg x[58870]:_any[170](?)) param : _unknown[43] "no doc"
  {
    { scopeless
      (58875 return 0)
    }
  }
  function isHomogeneousTupleValue[58884](arg x[58882]:_any[170](?)) param : _unknown[43] "no doc"
  {
    { scopeless
      (58905 return(58904 'is star tuple type' x))
    }
  }
  function _check_tuple_var_decl[58916](arg x[58913] :
  _tuple, param arg p[58918]:_any[170](?)) param : _unknown[43] "no doc"
  {
    if(58955 call _cond_test(58925 call == p(58922 call . x c"size")))
    {
      (58928 return 1)
    }
    {
      (58949 call compilerError "tuple size must match the number of grouped variables")
      (58953 return 0)
    }
  }
  function _check_tuple_var_decl[58966](arg x[58964]:_any[170](?), param arg p[58968]:_any[170](?)) param : _unknown[43] "no doc"
  {
    (58988 call compilerError "illegal tuple variable declaration with non-tuple initializer")
    (58992 return 0)
  }
  function isTupleType[59000](arg t[58998]:_any[170](?)) param : _unknown[43]
  {
    { scopeless
      (59021 return(59020 'is tuple type' t))
    }
  }
  function isHomogeneousTupleType[59030](arg t[59028]:_any[170](?)) param : _unknown[43]
  {
    { scopeless
      (59036 return(59035 'is star tuple type' t))
    }
  }
  function =[59047](ref arg x[59044] :
  _tuple, arg y[59050] :
  _tuple) : _unknown[43] "assignop" "compiler generated" "inline" "last resort"
  {
    {
      unknown i[59081] 0
      unknown tmp[59082] "maybe param" "temp"
      (59094 'move' tmp[59082](59092 call chpl_compute_low_param_loop_bound 1(59065 call . x c"size")))
      unknown tmp[59083] "maybe param" "temp"
      (59104 'move' tmp[59083](59102 call chpl_compute_high_param_loop_bound 1(59099 call . x c"size")))
      unknown tmp[59084] "maybe param" "temp"
      (59107 'move' tmp[59084] 1)
      ParamForLoop
      { i[59081] tmp[59082] tmp[59083] tmp[59084]
        { scopeless
          (59078 call =(59073 call x i)(59077 call y i))
        }
      }
      label _unused_continueLabel[59086]
      label _breakLabel[59085]
    }
  }
  where {
    (59061 call ==(59054 call . x c"size")(59058 call . y c"size"))
  }
  function _unknown[43].this[59129](arg _mt[59134]:_MT[227], arg this[59131] :
  _tuple, arg i[59126] :
  integral) ref : _unknown[43] "method" "no doc" "reference to const when const this" "star tuple accessor"
  {
    if(59164 call _cond_test(59140 call !(59139 call isHomogeneousTuple this)))
    {
      { scopeless
        (59162 call compilerError "invalid access of non-homogeneous tuple by runtime value")
      }
    }
    if(59207 call _cond_test boundsChecking)
    {
      { scopeless
        if(59202 call _cond_test(59179 call ||(59173 call < i 1)(59177 call > i size)))
        {
          { scopeless
            (59200 call halt "tuple access out of bounds: " i)
          }
        }
      }
    }
    (59232 return(59231 'get svec member' this i))
  }
  unknown CHPL_WARN_TUPLE_ITERATION[59252] "config" "no doc" "param" "unset"
  function _unknown[43].these[59258](arg _mt[59263]:_MT[227], arg this[59260] :
  _tuple) ref : _unknown[43] "iterator fn" "method" "no doc" "reference to const when const this"
  {
    if(59293 call _cond_test(59269 call !(59268 call isHomogeneousTuple this)))
    {
      { scopeless
        (59291 call compilerError "Cannot iterate over non-homogeneous tuples. If you intended to use zippered iteration, add the new keyword 'zip' before the tu)
      }
    }
    if(59340 call _cond_test(59316 call == CHPL_WARN_TUPLE_ITERATION "true"))
    {
      { scopeless
        (59338 call compilerWarning "Iterating over tuples. If you intended to use zippered iteration, add the new keyword 'zip' before the tuple of iteratable exp)
      }
    }
    {
      unknown _indexOfInterest[59360] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[59361] "expr temp" "temp"
      (59370 'move' _iterator[59361](59368 call _getIterator(59378 call chpl_direct_range_iter 1(59375 call . this c"size") 1)))
      Defer
      {
        {
          (59394 call _freeIterator _iterator[59361])
        }
      }
      { scopeless type
        (59383 'move' _indexOfInterest[59360](59380 call iteratorIndex _iterator[59361]))
      }
      ForLoop
      {
        unknown i[59387] "index var" "insert auto destroy"
        (59389 'move' i[59387] _indexOfInterest[59360])
        {
          (59357 yield(59356 call this i))
        }
        label _continueLabel[59365]
        _indexOfInterest[59360]
        _iterator[59361]
      }
      label _breakLabel[59366]
    }
  }
  function _unknown[43].these[59410](arg _mt[59415]:_MT[227], arg this[59412] :
  _tuple, param arg tag[59407] :
  iterKind) ref : _unknown[43] "iterator fn" "method" "no doc" "reference to const when const this"
  {
    const numTasks[59436] "const"(59433 IfExpr (59426 call == dataParTasksPerLocale 0) then
    { scopeless
      (59429 call . here c"maxTaskPar")
    } else
    { scopeless
      dataParTasksPerLocale
    } )
    const ignoreRunning[59441] "const" dataParIgnoreRunningTasks
    const minIndicesPerTask[59445] "const" dataParMinGranularity
    const length[59452] "const"(59449 call . this c"size")
    const myRange[59463] "const"(59461 call _build_tuple(59459 call #(59456 call chpl_build_low_bounded_range 0) length))
    { scopeless
      unknown tmp[59478] "no copy" "temp"(59477 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask myRange)
      (59482 call _check_tuple_var_decl tmp[59478] 2)
      unknown numChunks[59466](59479 call tmp[59478] 1)
    }
    if(59731 call _cond_test(59489 call == numChunks 1))
    {
      (59492 yield myRange)
    }
    {
      {
        unknown tmpIter[59538] "expr temp" "maybe ref" "no copy" "temp"
        (59541 'move' tmpIter[59538](59500 call #(59497 call chpl_build_low_bounded_range 0) numChunks))
        unknown isRngDomArr[59711] "maybe param" "temp"
        (59726 'move' isRngDomArr[59711](59724 call ||(59713 call isBoundedRange tmpIter[59538])(59722 call ||(59716 call isDomain tmpIter[59538])(59719 call isArray tmpIter[59538]))))
        if isRngDomArr[59711]
        {
          const _coforallCount[59578] "const" "end count" "temp"
          (59647 'move' _coforallCount[59578](59644 call _endCountAlloc 1))
          unknown numTasks[59579] "temp"
          (59631 'move' numTasks[59579](59627 call . tmpIter[59538] c"size"))
          (59622 call _upEndCount _coforallCount[59578] 1 numTasks[59579])
          (59619 call chpl_resetTaskSpawn numTasks[59579])
          unknown _indexOfInterest[59586] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[59587] "expr temp" "temp"
          (59596 'move' _iterator[59587](59594 call _getIterator tmpIter[59538]))
          Defer
          {
            {
              (59612 call _freeIterator _iterator[59587])
            }
          }
          { scopeless type
            (59601 'move' _indexOfInterest[59586](59598 call iteratorIndex _iterator[59587]))
          }
          ForLoop
          {
            unknown chunk[59605] "coforall index var" "index var" "insert auto destroy"
            (59607 'move' chunk[59605] _indexOfInterest[59586])
            {
              {
                { scopeless
                  const tmp[59545] "const" "no copy" "temp"(59547 call _computeBlock length numChunks chunk(59552 call - length 1))
                  (59557 call _check_tuple_var_decl tmp[59545] 2)
                  const lo[59560] "const"(59562 call tmp[59545] 1)
                  const hi[59565] "const"(59567 call tmp[59545] 2)
                }
                (59570 yield(59572 call _build_tuple(59574 call chpl_build_bounded_range lo hi)))
              }
              (59581 call _downEndCount _coforallCount[59578] nil[38])
              (59580 'coforall loop')
            }
            label _continueLabel[59591]
            _indexOfInterest[59586]
            _iterator[59587]
          }
          label _breakLabel[59592]
          Defer
          {
            {
              (59634 call _endCountFree _coforallCount[59578])
            }
          }
          (59639 call _waitEndCount _coforallCount[59578] 1 numTasks[59579])
        }
        {
          const _coforallCount[59651] "const" "end count" "temp"
          (59708 'move' _coforallCount[59651](59705 call _endCountAlloc 1))
          unknown _indexOfInterest[59659] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[59660] "expr temp" "temp"
          (59669 'move' _iterator[59660](59667 call _getIterator tmpIter[59538]))
          Defer
          {
            {
              (59685 call _freeIterator _iterator[59660])
            }
          }
          { scopeless type
            (59674 'move' _indexOfInterest[59659](59671 call iteratorIndex _iterator[59660]))
          }
          ForLoop
          {
            unknown chunk[59678] "coforall index var" "index var" "insert auto destroy"
            (59680 'move' chunk[59678] _indexOfInterest[59659])
            (59692 call _upEndCount _coforallCount[59651] 1)
            {
              {
                { scopeless
                  const tmp[59517] "const" "no copy" "temp"(59516 call _computeBlock length numChunks chunk(59514 call - length 1))
                  (59524 call _check_tuple_var_decl tmp[59517] 2)
                  const lo[59502] "const"(59518 call tmp[59517] 1)
                  const hi[59504] "const"(59521 call tmp[59517] 2)
                }
                (59536 yield(59534 call _build_tuple(59532 call chpl_build_bounded_range lo hi)))
              }
              (59654 call _downEndCount _coforallCount[59651] nil[38])
              (59653 'coforall loop')
            }
            label _continueLabel[59664]
            _indexOfInterest[59659]
            _iterator[59660]
          }
          label _breakLabel[59665]
          Defer
          {
            {
              (59696 call _endCountFree _coforallCount[59651])
            }
          }
          (59701 call _waitEndCount _coforallCount[59651] 1)
        }
      }
    }
  }
  where {
    (59422 call == tag(59419 call . iterKind c"leader"))
  }
  function _unknown[43].these[59745](arg _mt[59754]:_MT[227], arg this[59751] :
  _tuple, param arg tag[59742] :
  iterKind, arg followThis[59748] :
  _tuple) ref : _unknown[43] "iterator fn" "method" "no doc" "reference to const when const this"
  {
    if(59790 call _cond_test(59768 call !=(59764 call . followThis c"size") 1))
    {
      { scopeless
        (59788 call compilerError "Tuple zipped with incompatible iterator expression.")
      }
    }
    unknown fThis[59808](59807 call(59802 call .(59799 call followThis 1) c"translate") 1)
    {
      unknown _indexOfInterest[59820] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[59821] "expr temp" "temp"
      (59830 'move' _iterator[59821](59828 call _getIterator fThis))
      Defer
      {
        {
          (59846 call _freeIterator _iterator[59821])
        }
      }
      { scopeless type
        (59835 'move' _indexOfInterest[59820](59832 call iteratorIndex _iterator[59821]))
      }
      ForLoop
      {
        unknown i[59839] "index var" "insert auto destroy"
        (59841 'move' i[59839] _indexOfInterest[59820])
        {
          (59817 yield(59816 call this i))
        }
        label _continueLabel[59825]
        _indexOfInterest[59820]
        _iterator[59821]
      }
      label _breakLabel[59826]
    }
  }
  where {
    (59761 call == tag(59758 call . iterKind c"follower"))
  }
  function _cast[59860](arg t[59858]:_any[170](?), arg x[59867] :
  (59865 call _build_tuple ?[249] ?[249])) : _unknown[43] "inline"
  {
    function _chpl_complex64[59886](arg re[59883] :
    (59882 call real[16] 32), arg im[59892] :
    (59891 call real[16] 32)) : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (59898 call complex[132] 64)
    }
    (59926 return(59925 call _chpl_complex64(59912 call _cast(59911 call real[16] 32)(59907 call x 1))(59923 call _cast(59922 call real[16] 32)(59918 call x 2))))
  }
  where {
    (59875 call == t(59874 call complex[132] 64))
  }
  function _cast[59935](arg t[59933]:_any[170](?), arg x[59942] :
  (59940 call _build_tuple ?[249] ?[249])) : _unknown[43] "inline"
  {
    function _chpl_complex128[59961](arg re[59958] :
    (59957 call real[16] 64), arg im[59967] :
    (59966 call real[16] 64)) : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (59973 call complex[132] 128)
    }
    (60001 return(60000 call _chpl_complex128(59987 call _cast(59986 call real[16] 64)(59982 call x 1))(59998 call _cast(59997 call real[16] 64)(59993 call x 2))))
  }
  where {
    (59950 call == t(59949 call complex[132] 128))
  }
  function _cast[60012](arg t[60009] :
  _tuple, arg x[60015] :
  _tuple) : _unknown[43] "inline" "tuple cast fn" "unsafe"
  {
  }
  function chpl__tupleRest[60027](arg t[60024] :
  _tuple) : _unknown[43] "inline"
  {
    function chpl__tupleRestHelper[60033](arg first[60031]:_any[170](?), arg rest[60036]:_any[170](?) ...) : _unknown[43] "inline"
    {
      { scopeless
        (60040 return rest)
      }
    }
    (60051 return(60050 call chpl__tupleRestHelper(60048 'expand_tuple' t)))
  }
  function +[60061](arg a[60058] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[60065](60064 'typeof' a)
    {
      unknown d[60089] 0
      unknown tmp[60090] "maybe param" "temp"
      (60102 'move' tmp[60090](60100 call chpl_compute_low_param_loop_bound 1(60071 call . a c"size")))
      unknown tmp[60091] "maybe param" "temp"
      (60112 'move' tmp[60091](60110 call chpl_compute_high_param_loop_bound 1(60107 call . a c"size")))
      unknown tmp[60092] "maybe param" "temp"
      (60115 'move' tmp[60092] 1)
      ParamForLoop
      { d[60089] tmp[60090] tmp[60091] tmp[60092]
        { scopeless
          (60086 call =(60079 call result d)(60084 call +(60083 call a d)))
        }
      }
      label _unused_continueLabel[60094]
      label _breakLabel[60093]
    }
    (60127 return result)
  }
  function -[60137](arg a[60134] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[60141](60140 'typeof' a)
    {
      unknown d[60165] 0
      unknown tmp[60166] "maybe param" "temp"
      (60178 'move' tmp[60166](60176 call chpl_compute_low_param_loop_bound 1(60147 call . a c"size")))
      unknown tmp[60167] "maybe param" "temp"
      (60188 'move' tmp[60167](60186 call chpl_compute_high_param_loop_bound 1(60183 call . a c"size")))
      unknown tmp[60168] "maybe param" "temp"
      (60191 'move' tmp[60168] 1)
      ParamForLoop
      { d[60165] tmp[60166] tmp[60167] tmp[60168]
        { scopeless
          (60162 call =(60155 call result d)(60160 call -(60159 call a d)))
        }
      }
      label _unused_continueLabel[60170]
      label _breakLabel[60169]
    }
    (60203 return result)
  }
  function ~[60213](arg a[60210] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[60217](60216 'typeof' a)
    {
      unknown d[60241] 0
      unknown tmp[60242] "maybe param" "temp"
      (60254 'move' tmp[60242](60252 call chpl_compute_low_param_loop_bound 1(60223 call . a c"size")))
      unknown tmp[60243] "maybe param" "temp"
      (60264 'move' tmp[60243](60262 call chpl_compute_high_param_loop_bound 1(60259 call . a c"size")))
      unknown tmp[60244] "maybe param" "temp"
      (60267 'move' tmp[60244] 1)
      ParamForLoop
      { d[60241] tmp[60242] tmp[60243] tmp[60244]
        { scopeless
          (60238 call =(60231 call result d)(60236 call ~(60235 call a d)))
        }
      }
      label _unused_continueLabel[60246]
      label _breakLabel[60245]
    }
    (60279 return result)
  }
  function ![60289](arg a[60286] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[60293](60292 'typeof' a)
    {
      unknown d[60317] 0
      unknown tmp[60318] "maybe param" "temp"
      (60330 'move' tmp[60318](60328 call chpl_compute_low_param_loop_bound 1(60299 call . a c"size")))
      unknown tmp[60319] "maybe param" "temp"
      (60340 'move' tmp[60319](60338 call chpl_compute_high_param_loop_bound 1(60335 call . a c"size")))
      unknown tmp[60320] "maybe param" "temp"
      (60343 'move' tmp[60320] 1)
      ParamForLoop
      { d[60317] tmp[60318] tmp[60319] tmp[60320]
        { scopeless
          (60314 call =(60307 call result d)(60312 call !(60311 call a d)))
        }
      }
      label _unused_continueLabel[60322]
      label _breakLabel[60321]
    }
    (60355 return result)
  }
  function max[60363](arg t[60361]:_any[170](?)) : _unknown[43]
  {
    unknown result[60371] t
    {
      unknown i[60397] 0
      unknown tmp[60398] "maybe param" "temp"
      (60410 'move' tmp[60398](60408 call chpl_compute_low_param_loop_bound 1(60377 call . result c"size")))
      unknown tmp[60399] "maybe param" "temp"
      (60420 'move' tmp[60399](60418 call chpl_compute_high_param_loop_bound 1(60415 call . result c"size")))
      unknown tmp[60400] "maybe param" "temp"
      (60423 'move' tmp[60400] 1)
      ParamForLoop
      { i[60397] tmp[60398] tmp[60399] tmp[60400]
        {
          (60393 call =(60385 call result i)(60392 call max(60390 call t i)))
        }
      }
      label _unused_continueLabel[60402]
      label _breakLabel[60401]
    }
    (60435 return result)
  }
  where {
    (60369 call isTupleType t)
  }
  { scopeless type
    t
  }
  function min[60445](arg t[60443]:_any[170](?)) : _unknown[43]
  {
    unknown result[60453] t
    {
      unknown i[60479] 0
      unknown tmp[60480] "maybe param" "temp"
      (60492 'move' tmp[60480](60490 call chpl_compute_low_param_loop_bound 1(60459 call . result c"size")))
      unknown tmp[60481] "maybe param" "temp"
      (60502 'move' tmp[60481](60500 call chpl_compute_high_param_loop_bound 1(60497 call . result c"size")))
      unknown tmp[60482] "maybe param" "temp"
      (60505 'move' tmp[60482] 1)
      ParamForLoop
      { i[60479] tmp[60480] tmp[60481] tmp[60482]
        {
          (60475 call =(60467 call result i)(60474 call min(60472 call t i)))
        }
      }
      label _unused_continueLabel[60484]
      label _breakLabel[60483]
    }
    (60517 return result)
  }
  where {
    (60451 call isTupleType t)
  }
  { scopeless type
    t
  }
  function chpl_TwoHomogTuples[60527](arg t1[60525]:_any[170](?), arg t2[60529]:_any[170](?)) param : _unknown[43]
  {
    (60541 return(60539 call &&(60534 call isHomogeneousTuple t1)(60538 call isHomogeneousTuple t2)))
  }
  function +[60552](arg a[60549] :
  _tuple, arg b[60555] :
  _tuple) : _unknown[43] "inline"
  {
    if(60593 call _cond_test(60571 call !=(60564 call . a c"size")(60568 call . b c"size")))
    {
      { scopeless
        (60591 call compilerError "tuple operands to + have different sizes")
      }
    }
    unknown result[60616](60614 call *(60600 call . a c"size")(60613 'typeof'(60611 call +(60606 call a 1)(60610 call b 1))))
    {
      unknown d[60643] 0
      unknown tmp[60644] "maybe param" "temp"
      (60656 'move' tmp[60644](60654 call chpl_compute_low_param_loop_bound 1(60621 call . a c"size")))
      unknown tmp[60645] "maybe param" "temp"
      (60666 'move' tmp[60645](60664 call chpl_compute_high_param_loop_bound 1(60661 call . a c"size")))
      unknown tmp[60646] "maybe param" "temp"
      (60669 'move' tmp[60646] 1)
      ParamForLoop
      { d[60643] tmp[60644] tmp[60645] tmp[60646]
        { scopeless
          (60640 call =(60629 call result d)(60638 call +(60633 call a d)(60637 call b d)))
        }
      }
      label _unused_continueLabel[60648]
      label _breakLabel[60647]
    }
    (60681 return result)
  }
  where {
    (60562 call chpl_TwoHomogTuples a b)
  }
  function +[60692](arg a[60689] :
  _tuple, arg b[60695] :
  _tuple) : _unknown[43] "inline"
  {
    if(60713 call _cond_test(60706 call !=(60699 call . a c"size")(60703 call . b c"size")))
    {
      { scopeless
        (60711 call compilerError "tuple operands to + have different sizes")
      }
    }
    if(60766 call _cond_test(60724 call ==(60720 call . a c"size") 1))
    {
      { scopeless
        (60738 return(60736 call _build_tuple(60734 call +(60729 call a 1)(60733 call b 1))))
      }
    }
    {
      { scopeless
        (60764 return(60762 call _build_tuple(60748 call +(60743 call a 1)(60747 call b 1))(60760 'expand_tuple'(60758 call +(60753 call chpl__tupleRest a)(60757 call chpl__tupleRest b)))))
      }
    }
  }
  function -[60780](arg a[60777] :
  _tuple, arg b[60783] :
  _tuple) : _unknown[43] "inline"
  {
    if(60821 call _cond_test(60799 call !=(60792 call . a c"size")(60796 call . b c"size")))
    {
      { scopeless
        (60819 call compilerError "tuple operands to - have different sizes")
      }
    }
    unknown result[60844](60842 call *(60828 call . a c"size")(60841 'typeof'(60839 call -(60834 call a 1)(60838 call b 1))))
    {
      unknown d[60871] 0
      unknown tmp[60872] "maybe param" "temp"
      (60884 'move' tmp[60872](60882 call chpl_compute_low_param_loop_bound 1(60849 call . a c"size")))
      unknown tmp[60873] "maybe param" "temp"
      (60894 'move' tmp[60873](60892 call chpl_compute_high_param_loop_bound 1(60889 call . a c"size")))
      unknown tmp[60874] "maybe param" "temp"
      (60897 'move' tmp[60874] 1)
      ParamForLoop
      { d[60871] tmp[60872] tmp[60873] tmp[60874]
        { scopeless
          (60868 call =(60857 call result d)(60866 call -(60861 call a d)(60865 call b d)))
        }
      }
      label _unused_continueLabel[60876]
      label _breakLabel[60875]
    }
    (60909 return result)
  }
  where {
    (60790 call chpl_TwoHomogTuples a b)
  }
  function -[60920](arg a[60917] :
  _tuple, arg b[60923] :
  _tuple) : _unknown[43] "inline"
  {
    if(60941 call _cond_test(60934 call !=(60927 call . a c"size")(60931 call . b c"size")))
    {
      { scopeless
        (60939 call compilerError "tuple operands to - have different sizes")
      }
    }
    if(60994 call _cond_test(60952 call ==(60948 call . a c"size") 1))
    {
      { scopeless
        (60966 return(60964 call _build_tuple(60962 call -(60957 call a 1)(60961 call b 1))))
      }
    }
    {
      { scopeless
        (60992 return(60990 call _build_tuple(60976 call -(60971 call a 1)(60975 call b 1))(60988 'expand_tuple'(60986 call -(60981 call chpl__tupleRest a)(60985 call chpl__tupleRest b)))))
      }
    }
  }
  function *[61008](arg a[61005] :
  _tuple, arg b[61011] :
  _tuple) : _unknown[43] "inline"
  {
    if(61049 call _cond_test(61027 call !=(61020 call . a c"size")(61024 call . b c"size")))
    {
      { scopeless
        (61047 call compilerError "tuple operands to * have different sizes")
      }
    }
    unknown result[61072](61070 call *(61056 call . a c"size")(61069 'typeof'(61067 call *(61062 call a 1)(61066 call b 1))))
    {
      unknown d[61099] 0
      unknown tmp[61100] "maybe param" "temp"
      (61112 'move' tmp[61100](61110 call chpl_compute_low_param_loop_bound 1(61077 call . a c"size")))
      unknown tmp[61101] "maybe param" "temp"
      (61122 'move' tmp[61101](61120 call chpl_compute_high_param_loop_bound 1(61117 call . a c"size")))
      unknown tmp[61102] "maybe param" "temp"
      (61125 'move' tmp[61102] 1)
      ParamForLoop
      { d[61099] tmp[61100] tmp[61101] tmp[61102]
        { scopeless
          (61096 call =(61085 call result d)(61094 call *(61089 call a d)(61093 call b d)))
        }
      }
      label _unused_continueLabel[61104]
      label _breakLabel[61103]
    }
    (61137 return result)
  }
  where {
    (61018 call chpl_TwoHomogTuples a b)
  }
  function *[61148](arg a[61145] :
  _tuple, arg b[61151] :
  _tuple) : _unknown[43] "inline"
  {
    if(61169 call _cond_test(61162 call !=(61155 call . a c"size")(61159 call . b c"size")))
    {
      { scopeless
        (61167 call compilerError "tuple operands to * have different sizes")
      }
    }
    if(61222 call _cond_test(61180 call ==(61176 call . a c"size") 1))
    {
      { scopeless
        (61194 return(61192 call _build_tuple(61190 call *(61185 call a 1)(61189 call b 1))))
      }
    }
    {
      { scopeless
        (61220 return(61218 call _build_tuple(61204 call *(61199 call a 1)(61203 call b 1))(61216 'expand_tuple'(61214 call *(61209 call chpl__tupleRest a)(61213 call chpl__tupleRest b)))))
      }
    }
  }
  function /[61236](arg a[61233] :
  _tuple, arg b[61239] :
  _tuple) : _unknown[43] "inline"
  {
    if(61277 call _cond_test(61255 call !=(61248 call . a c"size")(61252 call . b c"size")))
    {
      { scopeless
        (61275 call compilerError "tuple operands to / have different sizes")
      }
    }
    unknown result[61300](61298 call *(61284 call . a c"size")(61297 'typeof'(61295 call /(61290 call a 1)(61294 call b 1))))
    {
      unknown d[61327] 0
      unknown tmp[61328] "maybe param" "temp"
      (61340 'move' tmp[61328](61338 call chpl_compute_low_param_loop_bound 1(61305 call . a c"size")))
      unknown tmp[61329] "maybe param" "temp"
      (61350 'move' tmp[61329](61348 call chpl_compute_high_param_loop_bound 1(61345 call . a c"size")))
      unknown tmp[61330] "maybe param" "temp"
      (61353 'move' tmp[61330] 1)
      ParamForLoop
      { d[61327] tmp[61328] tmp[61329] tmp[61330]
        { scopeless
          (61324 call =(61313 call result d)(61322 call /(61317 call a d)(61321 call b d)))
        }
      }
      label _unused_continueLabel[61332]
      label _breakLabel[61331]
    }
    (61365 return result)
  }
  where {
    (61246 call chpl_TwoHomogTuples a b)
  }
  function /[61376](arg a[61373] :
  _tuple, arg b[61379] :
  _tuple) : _unknown[43] "inline"
  {
    if(61397 call _cond_test(61390 call !=(61383 call . a c"size")(61387 call . b c"size")))
    {
      { scopeless
        (61395 call compilerError "tuple operands to / have different sizes")
      }
    }
    if(61450 call _cond_test(61408 call ==(61404 call . a c"size") 1))
    {
      { scopeless
        (61422 return(61420 call _build_tuple(61418 call /(61413 call a 1)(61417 call b 1))))
      }
    }
    {
      { scopeless
        (61448 return(61446 call _build_tuple(61432 call /(61427 call a 1)(61431 call b 1))(61444 'expand_tuple'(61442 call /(61437 call chpl__tupleRest a)(61441 call chpl__tupleRest b)))))
      }
    }
  }
  function %[61464](arg a[61461] :
  _tuple, arg b[61467] :
  _tuple) : _unknown[43] "inline"
  {
    if(61505 call _cond_test(61483 call !=(61476 call . a c"size")(61480 call . b c"size")))
    {
      { scopeless
        (61503 call compilerError "tuple operands to % have different sizes")
      }
    }
    unknown result[61528](61526 call *(61512 call . a c"size")(61525 'typeof'(61523 call %(61518 call a 1)(61522 call b 1))))
    {
      unknown d[61555] 0
      unknown tmp[61556] "maybe param" "temp"
      (61568 'move' tmp[61556](61566 call chpl_compute_low_param_loop_bound 1(61533 call . a c"size")))
      unknown tmp[61557] "maybe param" "temp"
      (61578 'move' tmp[61557](61576 call chpl_compute_high_param_loop_bound 1(61573 call . a c"size")))
      unknown tmp[61558] "maybe param" "temp"
      (61581 'move' tmp[61558] 1)
      ParamForLoop
      { d[61555] tmp[61556] tmp[61557] tmp[61558]
        { scopeless
          (61552 call =(61541 call result d)(61550 call %(61545 call a d)(61549 call b d)))
        }
      }
      label _unused_continueLabel[61560]
      label _breakLabel[61559]
    }
    (61593 return result)
  }
  where {
    (61474 call chpl_TwoHomogTuples a b)
  }
  function %[61604](arg a[61601] :
  _tuple, arg b[61607] :
  _tuple) : _unknown[43] "inline"
  {
    if(61625 call _cond_test(61618 call !=(61611 call . a c"size")(61615 call . b c"size")))
    {
      { scopeless
        (61623 call compilerError "tuple operands to % have different sizes")
      }
    }
    if(61678 call _cond_test(61636 call ==(61632 call . a c"size") 1))
    {
      { scopeless
        (61650 return(61648 call _build_tuple(61646 call %(61641 call a 1)(61645 call b 1))))
      }
    }
    {
      { scopeless
        (61676 return(61674 call _build_tuple(61660 call %(61655 call a 1)(61659 call b 1))(61672 'expand_tuple'(61670 call %(61665 call chpl__tupleRest a)(61669 call chpl__tupleRest b)))))
      }
    }
  }
  function **[61692](arg a[61689] :
  _tuple, arg b[61695] :
  _tuple) : _unknown[43] "inline"
  {
    if(61733 call _cond_test(61711 call !=(61704 call . a c"size")(61708 call . b c"size")))
    {
      { scopeless
        (61731 call compilerError "tuple operands to ** have different sizes")
      }
    }
    unknown result[61756](61754 call *(61740 call . a c"size")(61753 'typeof'(61751 call **(61746 call a 1)(61750 call b 1))))
    {
      unknown d[61783] 0
      unknown tmp[61784] "maybe param" "temp"
      (61796 'move' tmp[61784](61794 call chpl_compute_low_param_loop_bound 1(61761 call . a c"size")))
      unknown tmp[61785] "maybe param" "temp"
      (61806 'move' tmp[61785](61804 call chpl_compute_high_param_loop_bound 1(61801 call . a c"size")))
      unknown tmp[61786] "maybe param" "temp"
      (61809 'move' tmp[61786] 1)
      ParamForLoop
      { d[61783] tmp[61784] tmp[61785] tmp[61786]
        { scopeless
          (61780 call =(61769 call result d)(61778 call **(61773 call a d)(61777 call b d)))
        }
      }
      label _unused_continueLabel[61788]
      label _breakLabel[61787]
    }
    (61821 return result)
  }
  where {
    (61702 call chpl_TwoHomogTuples a b)
  }
  function **[61832](arg a[61829] :
  _tuple, arg b[61835] :
  _tuple) : _unknown[43] "inline"
  {
    if(61853 call _cond_test(61846 call !=(61839 call . a c"size")(61843 call . b c"size")))
    {
      { scopeless
        (61851 call compilerError "tuple operands to ** have different sizes")
      }
    }
    if(61906 call _cond_test(61864 call ==(61860 call . a c"size") 1))
    {
      { scopeless
        (61878 return(61876 call _build_tuple(61874 call **(61869 call a 1)(61873 call b 1))))
      }
    }
    {
      { scopeless
        (61904 return(61902 call _build_tuple(61888 call **(61883 call a 1)(61887 call b 1))(61900 'expand_tuple'(61898 call **(61893 call chpl__tupleRest a)(61897 call chpl__tupleRest b)))))
      }
    }
  }
  function &[61920](arg a[61917] :
  _tuple, arg b[61923] :
  _tuple) : _unknown[43] "inline"
  {
    if(61961 call _cond_test(61939 call !=(61932 call . a c"size")(61936 call . b c"size")))
    {
      { scopeless
        (61959 call compilerError "tuple operands to & have different sizes")
      }
    }
    unknown result[61984](61982 call *(61968 call . a c"size")(61981 'typeof'(61979 call &(61974 call a 1)(61978 call b 1))))
    {
      unknown d[62011] 0
      unknown tmp[62012] "maybe param" "temp"
      (62024 'move' tmp[62012](62022 call chpl_compute_low_param_loop_bound 1(61989 call . a c"size")))
      unknown tmp[62013] "maybe param" "temp"
      (62034 'move' tmp[62013](62032 call chpl_compute_high_param_loop_bound 1(62029 call . a c"size")))
      unknown tmp[62014] "maybe param" "temp"
      (62037 'move' tmp[62014] 1)
      ParamForLoop
      { d[62011] tmp[62012] tmp[62013] tmp[62014]
        { scopeless
          (62008 call =(61997 call result d)(62006 call &(62001 call a d)(62005 call b d)))
        }
      }
      label _unused_continueLabel[62016]
      label _breakLabel[62015]
    }
    (62049 return result)
  }
  where {
    (61930 call chpl_TwoHomogTuples a b)
  }
  function &[62060](arg a[62057] :
  _tuple, arg b[62063] :
  _tuple) : _unknown[43] "inline"
  {
    if(62081 call _cond_test(62074 call !=(62067 call . a c"size")(62071 call . b c"size")))
    {
      { scopeless
        (62079 call compilerError "tuple operands to & have different sizes")
      }
    }
    if(62134 call _cond_test(62092 call ==(62088 call . a c"size") 1))
    {
      { scopeless
        (62106 return(62104 call _build_tuple(62102 call &(62097 call a 1)(62101 call b 1))))
      }
    }
    {
      { scopeless
        (62132 return(62130 call _build_tuple(62116 call &(62111 call a 1)(62115 call b 1))(62128 'expand_tuple'(62126 call &(62121 call chpl__tupleRest a)(62125 call chpl__tupleRest b)))))
      }
    }
  }
  function |[62148](arg a[62145] :
  _tuple, arg b[62151] :
  _tuple) : _unknown[43] "inline"
  {
    if(62189 call _cond_test(62167 call !=(62160 call . a c"size")(62164 call . b c"size")))
    {
      { scopeless
        (62187 call compilerError "tuple operands to | have different sizes")
      }
    }
    unknown result[62212](62210 call *(62196 call . a c"size")(62209 'typeof'(62207 call |(62202 call a 1)(62206 call b 1))))
    {
      unknown d[62239] 0
      unknown tmp[62240] "maybe param" "temp"
      (62252 'move' tmp[62240](62250 call chpl_compute_low_param_loop_bound 1(62217 call . a c"size")))
      unknown tmp[62241] "maybe param" "temp"
      (62262 'move' tmp[62241](62260 call chpl_compute_high_param_loop_bound 1(62257 call . a c"size")))
      unknown tmp[62242] "maybe param" "temp"
      (62265 'move' tmp[62242] 1)
      ParamForLoop
      { d[62239] tmp[62240] tmp[62241] tmp[62242]
        { scopeless
          (62236 call =(62225 call result d)(62234 call |(62229 call a d)(62233 call b d)))
        }
      }
      label _unused_continueLabel[62244]
      label _breakLabel[62243]
    }
    (62277 return result)
  }
  where {
    (62158 call chpl_TwoHomogTuples a b)
  }
  function |[62288](arg a[62285] :
  _tuple, arg b[62291] :
  _tuple) : _unknown[43] "inline"
  {
    if(62309 call _cond_test(62302 call !=(62295 call . a c"size")(62299 call . b c"size")))
    {
      { scopeless
        (62307 call compilerError "tuple operands to | have different sizes")
      }
    }
    if(62362 call _cond_test(62320 call ==(62316 call . a c"size") 1))
    {
      { scopeless
        (62334 return(62332 call _build_tuple(62330 call |(62325 call a 1)(62329 call b 1))))
      }
    }
    {
      { scopeless
        (62360 return(62358 call _build_tuple(62344 call |(62339 call a 1)(62343 call b 1))(62356 'expand_tuple'(62354 call |(62349 call chpl__tupleRest a)(62353 call chpl__tupleRest b)))))
      }
    }
  }
  function ^[62376](arg a[62373] :
  _tuple, arg b[62379] :
  _tuple) : _unknown[43] "inline"
  {
    if(62417 call _cond_test(62395 call !=(62388 call . a c"size")(62392 call . b c"size")))
    {
      { scopeless
        (62415 call compilerError "tuple operands to ^ have different sizes")
      }
    }
    unknown result[62440](62438 call *(62424 call . a c"size")(62437 'typeof'(62435 call ^(62430 call a 1)(62434 call b 1))))
    {
      unknown d[62467] 0
      unknown tmp[62468] "maybe param" "temp"
      (62480 'move' tmp[62468](62478 call chpl_compute_low_param_loop_bound 1(62445 call . a c"size")))
      unknown tmp[62469] "maybe param" "temp"
      (62490 'move' tmp[62469](62488 call chpl_compute_high_param_loop_bound 1(62485 call . a c"size")))
      unknown tmp[62470] "maybe param" "temp"
      (62493 'move' tmp[62470] 1)
      ParamForLoop
      { d[62467] tmp[62468] tmp[62469] tmp[62470]
        { scopeless
          (62464 call =(62453 call result d)(62462 call ^(62457 call a d)(62461 call b d)))
        }
      }
      label _unused_continueLabel[62472]
      label _breakLabel[62471]
    }
    (62505 return result)
  }
  where {
    (62386 call chpl_TwoHomogTuples a b)
  }
  function ^[62516](arg a[62513] :
  _tuple, arg b[62519] :
  _tuple) : _unknown[43] "inline"
  {
    if(62537 call _cond_test(62530 call !=(62523 call . a c"size")(62527 call . b c"size")))
    {
      { scopeless
        (62535 call compilerError "tuple operands to ^ have different sizes")
      }
    }
    if(62590 call _cond_test(62548 call ==(62544 call . a c"size") 1))
    {
      { scopeless
        (62562 return(62560 call _build_tuple(62558 call ^(62553 call a 1)(62557 call b 1))))
      }
    }
    {
      { scopeless
        (62588 return(62586 call _build_tuple(62572 call ^(62567 call a 1)(62571 call b 1))(62584 'expand_tuple'(62582 call ^(62577 call chpl__tupleRest a)(62581 call chpl__tupleRest b)))))
      }
    }
  }
  function <<[62604](arg a[62601] :
  _tuple, arg b[62607] :
  _tuple) : _unknown[43] "inline"
  {
    if(62645 call _cond_test(62623 call !=(62616 call . a c"size")(62620 call . b c"size")))
    {
      { scopeless
        (62643 call compilerError "tuple operands to << have different sizes")
      }
    }
    unknown result[62668](62666 call *(62652 call . a c"size")(62665 'typeof'(62663 call <<(62658 call a 1)(62662 call b 1))))
    {
      unknown d[62695] 0
      unknown tmp[62696] "maybe param" "temp"
      (62708 'move' tmp[62696](62706 call chpl_compute_low_param_loop_bound 1(62673 call . a c"size")))
      unknown tmp[62697] "maybe param" "temp"
      (62718 'move' tmp[62697](62716 call chpl_compute_high_param_loop_bound 1(62713 call . a c"size")))
      unknown tmp[62698] "maybe param" "temp"
      (62721 'move' tmp[62698] 1)
      ParamForLoop
      { d[62695] tmp[62696] tmp[62697] tmp[62698]
        { scopeless
          (62692 call =(62681 call result d)(62690 call <<(62685 call a d)(62689 call b d)))
        }
      }
      label _unused_continueLabel[62700]
      label _breakLabel[62699]
    }
    (62733 return result)
  }
  where {
    (62614 call chpl_TwoHomogTuples a b)
  }
  function <<[62744](arg a[62741] :
  _tuple, arg b[62747] :
  _tuple) : _unknown[43] "inline"
  {
    if(62765 call _cond_test(62758 call !=(62751 call . a c"size")(62755 call . b c"size")))
    {
      { scopeless
        (62763 call compilerError "tuple operands to << have different sizes")
      }
    }
    if(62818 call _cond_test(62776 call ==(62772 call . a c"size") 1))
    {
      { scopeless
        (62790 return(62788 call _build_tuple(62786 call <<(62781 call a 1)(62785 call b 1))))
      }
    }
    {
      { scopeless
        (62816 return(62814 call _build_tuple(62800 call <<(62795 call a 1)(62799 call b 1))(62812 'expand_tuple'(62810 call <<(62805 call chpl__tupleRest a)(62809 call chpl__tupleRest b)))))
      }
    }
  }
  function >>[62832](arg a[62829] :
  _tuple, arg b[62835] :
  _tuple) : _unknown[43] "inline"
  {
    if(62873 call _cond_test(62851 call !=(62844 call . a c"size")(62848 call . b c"size")))
    {
      { scopeless
        (62871 call compilerError "tuple operands to >> have different sizes")
      }
    }
    unknown result[62896](62894 call *(62880 call . a c"size")(62893 'typeof'(62891 call >>(62886 call a 1)(62890 call b 1))))
    {
      unknown d[62923] 0
      unknown tmp[62924] "maybe param" "temp"
      (62936 'move' tmp[62924](62934 call chpl_compute_low_param_loop_bound 1(62901 call . a c"size")))
      unknown tmp[62925] "maybe param" "temp"
      (62946 'move' tmp[62925](62944 call chpl_compute_high_param_loop_bound 1(62941 call . a c"size")))
      unknown tmp[62926] "maybe param" "temp"
      (62949 'move' tmp[62926] 1)
      ParamForLoop
      { d[62923] tmp[62924] tmp[62925] tmp[62926]
        { scopeless
          (62920 call =(62909 call result d)(62918 call >>(62913 call a d)(62917 call b d)))
        }
      }
      label _unused_continueLabel[62928]
      label _breakLabel[62927]
    }
    (62961 return result)
  }
  where {
    (62842 call chpl_TwoHomogTuples a b)
  }
  function >>[62972](arg a[62969] :
  _tuple, arg b[62975] :
  _tuple) : _unknown[43] "inline"
  {
    if(62993 call _cond_test(62986 call !=(62979 call . a c"size")(62983 call . b c"size")))
    {
      { scopeless
        (62991 call compilerError "tuple operands to >> have different sizes")
      }
    }
    if(63046 call _cond_test(63004 call ==(63000 call . a c"size") 1))
    {
      { scopeless
        (63018 return(63016 call _build_tuple(63014 call >>(63009 call a 1)(63013 call b 1))))
      }
    }
    {
      { scopeless
        (63044 return(63042 call _build_tuple(63028 call >>(63023 call a 1)(63027 call b 1))(63040 'expand_tuple'(63038 call >>(63033 call chpl__tupleRest a)(63037 call chpl__tupleRest b)))))
      }
    }
  }
  function >[63060](arg a[63057] :
  _tuple, arg b[63063] :
  _tuple) : _unknown[43] "inline"
  {
    if(63096 call _cond_test(63074 call !=(63067 call . a c"size")(63071 call . b c"size")))
    {
      { scopeless
        (63094 call compilerError "tuple operands to > have different sizes")
      }
    }
    {
      unknown i[63146] 0
      unknown tmp[63147] "maybe param" "temp"
      (63159 'move' tmp[63147](63157 call chpl_compute_low_param_loop_bound 1(63104 call . a c"size")))
      unknown tmp[63148] "maybe param" "temp"
      (63169 'move' tmp[63148](63167 call chpl_compute_high_param_loop_bound 1(63164 call . a c"size")))
      unknown tmp[63149] "maybe param" "temp"
      (63172 'move' tmp[63149] 1)
      ParamForLoop
      { i[63146] tmp[63147] tmp[63148] tmp[63149]
        { scopeless
          if(63140 call _cond_test(63117 call >(63112 call a i)(63116 call b i)))
          {
            { scopeless
              (63120 return 1)
            }
          }
          {
            { scopeless
              if(63135 call _cond_test(63130 call <(63125 call a i)(63129 call b i)))
              {
                { scopeless
                  (63133 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[63151]
      label _breakLabel[63150]
    }
    (63184 return 0)
  }
  function >=[63194](arg a[63191] :
  _tuple, arg b[63197] :
  _tuple) : _unknown[43] "inline"
  {
    if(63230 call _cond_test(63208 call !=(63201 call . a c"size")(63205 call . b c"size")))
    {
      { scopeless
        (63228 call compilerError "tuple operands to >= have different sizes")
      }
    }
    {
      unknown i[63280] 0
      unknown tmp[63281] "maybe param" "temp"
      (63293 'move' tmp[63281](63291 call chpl_compute_low_param_loop_bound 1(63238 call . a c"size")))
      unknown tmp[63282] "maybe param" "temp"
      (63303 'move' tmp[63282](63301 call chpl_compute_high_param_loop_bound 1(63298 call . a c"size")))
      unknown tmp[63283] "maybe param" "temp"
      (63306 'move' tmp[63283] 1)
      ParamForLoop
      { i[63280] tmp[63281] tmp[63282] tmp[63283]
        { scopeless
          if(63274 call _cond_test(63251 call >(63246 call a i)(63250 call b i)))
          {
            { scopeless
              (63254 return 1)
            }
          }
          {
            { scopeless
              if(63269 call _cond_test(63264 call <(63259 call a i)(63263 call b i)))
              {
                { scopeless
                  (63267 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[63285]
      label _breakLabel[63284]
    }
    (63318 return 1)
  }
  function <[63328](arg a[63325] :
  _tuple, arg b[63331] :
  _tuple) : _unknown[43] "inline"
  {
    if(63364 call _cond_test(63342 call !=(63335 call . a c"size")(63339 call . b c"size")))
    {
      { scopeless
        (63362 call compilerError "tuple operands to < have different sizes")
      }
    }
    {
      unknown i[63414] 0
      unknown tmp[63415] "maybe param" "temp"
      (63427 'move' tmp[63415](63425 call chpl_compute_low_param_loop_bound 1(63372 call . a c"size")))
      unknown tmp[63416] "maybe param" "temp"
      (63437 'move' tmp[63416](63435 call chpl_compute_high_param_loop_bound 1(63432 call . a c"size")))
      unknown tmp[63417] "maybe param" "temp"
      (63440 'move' tmp[63417] 1)
      ParamForLoop
      { i[63414] tmp[63415] tmp[63416] tmp[63417]
        { scopeless
          if(63408 call _cond_test(63385 call <(63380 call a i)(63384 call b i)))
          {
            { scopeless
              (63388 return 1)
            }
          }
          {
            { scopeless
              if(63403 call _cond_test(63398 call >(63393 call a i)(63397 call b i)))
              {
                { scopeless
                  (63401 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[63419]
      label _breakLabel[63418]
    }
    (63452 return 0)
  }
  function <=[63462](arg a[63459] :
  _tuple, arg b[63465] :
  _tuple) : _unknown[43] "inline"
  {
    if(63498 call _cond_test(63476 call !=(63469 call . a c"size")(63473 call . b c"size")))
    {
      { scopeless
        (63496 call compilerError "tuple operands to <= have different sizes")
      }
    }
    {
      unknown i[63548] 0
      unknown tmp[63549] "maybe param" "temp"
      (63561 'move' tmp[63549](63559 call chpl_compute_low_param_loop_bound 1(63506 call . a c"size")))
      unknown tmp[63550] "maybe param" "temp"
      (63571 'move' tmp[63550](63569 call chpl_compute_high_param_loop_bound 1(63566 call . a c"size")))
      unknown tmp[63551] "maybe param" "temp"
      (63574 'move' tmp[63551] 1)
      ParamForLoop
      { i[63548] tmp[63549] tmp[63550] tmp[63551]
        { scopeless
          if(63542 call _cond_test(63519 call <(63514 call a i)(63518 call b i)))
          {
            { scopeless
              (63522 return 1)
            }
          }
          {
            { scopeless
              if(63537 call _cond_test(63532 call >(63527 call a i)(63531 call b i)))
              {
                { scopeless
                  (63535 return 0)
                }
              }
            }
          }
        }
      }
      label _unused_continueLabel[63553]
      label _breakLabel[63552]
    }
    (63586 return 1)
  }
  function ==[63596](arg a[63593] :
  _tuple, arg b[63599] :
  _tuple) : _unknown[43] "inline"
  {
    if(63615 call _cond_test(63610 call !=(63603 call . a c"size")(63607 call . b c"size")))
    {
      { scopeless
        (63613 return 0)
      }
    }
    {
      unknown i[63646] 0
      unknown tmp[63647] "maybe param" "temp"
      (63659 'move' tmp[63647](63657 call chpl_compute_low_param_loop_bound 1(63623 call . a c"size")))
      unknown tmp[63648] "maybe param" "temp"
      (63669 'move' tmp[63648](63667 call chpl_compute_high_param_loop_bound 1(63664 call . a c"size")))
      unknown tmp[63649] "maybe param" "temp"
      (63672 'move' tmp[63649] 1)
      ParamForLoop
      { i[63646] tmp[63647] tmp[63648] tmp[63649]
        { scopeless
          if(63641 call _cond_test(63636 call !=(63631 call a i)(63635 call b i)))
          {
            { scopeless
              (63639 return 0)
            }
          }
        }
      }
      label _unused_continueLabel[63651]
      label _breakLabel[63650]
    }
    (63684 return 1)
  }
  function !=[63694](arg a[63691] :
  _tuple, arg b[63697] :
  _tuple) : _unknown[43] "inline"
  {
    if(63713 call _cond_test(63708 call !=(63701 call . a c"size")(63705 call . b c"size")))
    {
      { scopeless
        (63711 return 1)
      }
    }
    {
      unknown i[63744] 0
      unknown tmp[63745] "maybe param" "temp"
      (63757 'move' tmp[63745](63755 call chpl_compute_low_param_loop_bound 1(63721 call . a c"size")))
      unknown tmp[63746] "maybe param" "temp"
      (63767 'move' tmp[63746](63765 call chpl_compute_high_param_loop_bound 1(63762 call . a c"size")))
      unknown tmp[63747] "maybe param" "temp"
      (63770 'move' tmp[63747] 1)
      ParamForLoop
      { i[63744] tmp[63745] tmp[63746] tmp[63747]
        { scopeless
          if(63739 call _cond_test(63734 call !=(63729 call a i)(63733 call b i)))
          {
            { scopeless
              (63737 return 1)
            }
          }
        }
      }
      label _unused_continueLabel[63749]
      label _breakLabel[63748]
    }
    (63782 return 0)
  }
  function +[63792](arg x[63789] :
  _tuple, arg y[63799] :
  (63798 'typeof'(63797 call x 1))) : _unknown[43] "inline"
  {
    unknown result[63817](63815 call *(63807 call . x c"size")(63814 'typeof'(63813 call x 1)))
    {
      unknown d[63842] 0
      unknown tmp[63843] "maybe param" "temp"
      (63855 'move' tmp[63843](63853 call chpl_compute_low_param_loop_bound 1(63823 call . x c"size")))
      unknown tmp[63844] "maybe param" "temp"
      (63865 'move' tmp[63844](63863 call chpl_compute_high_param_loop_bound 1(63860 call . x c"size")))
      unknown tmp[63845] "maybe param" "temp"
      (63868 'move' tmp[63845] 1)
      ParamForLoop
      { d[63842] tmp[63843] tmp[63844] tmp[63845]
        { scopeless
          (63839 call =(63831 call result d)(63837 call +(63835 call x d) y))
        }
      }
      label _unused_continueLabel[63847]
      label _breakLabel[63846]
    }
    (63880 return result)
  }
  where {
    (63805 call isHomogeneousTuple x)
  }
  function +[63892](arg x[63889] :
  unknown t[63887], arg y[63895] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[63924](63922 call *(63914 call . y c"size")(63921 'typeof'(63920 call y 1)))
    {
      unknown d[63949] 0
      unknown tmp[63950] "maybe param" "temp"
      (63962 'move' tmp[63950](63960 call chpl_compute_low_param_loop_bound 1(63930 call . y c"size")))
      unknown tmp[63951] "maybe param" "temp"
      (63972 'move' tmp[63951](63970 call chpl_compute_high_param_loop_bound 1(63967 call . y c"size")))
      unknown tmp[63952] "maybe param" "temp"
      (63975 'move' tmp[63952] 1)
      ParamForLoop
      { d[63949] tmp[63950] tmp[63951] tmp[63952]
        { scopeless
          (63946 call =(63938 call result d)(63944 call + x(63943 call y d)))
        }
      }
      label _unused_continueLabel[63954]
      label _breakLabel[63953]
    }
    (63987 return result)
  }
  where {
    (63911 call &&(63901 call isHomogeneousTuple y)(63910 call isSubtype t(63909 'typeof'(63908 call y 1))))
  }
  function -[63998](arg x[63995] :
  _tuple, arg y[64005] :
  (64004 'typeof'(64003 call x 1))) : _unknown[43] "inline"
  {
    unknown result[64023](64021 call *(64013 call . x c"size")(64020 'typeof'(64019 call x 1)))
    {
      unknown d[64048] 0
      unknown tmp[64049] "maybe param" "temp"
      (64061 'move' tmp[64049](64059 call chpl_compute_low_param_loop_bound 1(64029 call . x c"size")))
      unknown tmp[64050] "maybe param" "temp"
      (64071 'move' tmp[64050](64069 call chpl_compute_high_param_loop_bound 1(64066 call . x c"size")))
      unknown tmp[64051] "maybe param" "temp"
      (64074 'move' tmp[64051] 1)
      ParamForLoop
      { d[64048] tmp[64049] tmp[64050] tmp[64051]
        { scopeless
          (64045 call =(64037 call result d)(64043 call -(64041 call x d) y))
        }
      }
      label _unused_continueLabel[64053]
      label _breakLabel[64052]
    }
    (64086 return result)
  }
  where {
    (64011 call isHomogeneousTuple x)
  }
  function -[64098](arg x[64095] :
  unknown t[64093], arg y[64101] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[64130](64128 call *(64120 call . y c"size")(64127 'typeof'(64126 call y 1)))
    {
      unknown d[64155] 0
      unknown tmp[64156] "maybe param" "temp"
      (64168 'move' tmp[64156](64166 call chpl_compute_low_param_loop_bound 1(64136 call . y c"size")))
      unknown tmp[64157] "maybe param" "temp"
      (64178 'move' tmp[64157](64176 call chpl_compute_high_param_loop_bound 1(64173 call . y c"size")))
      unknown tmp[64158] "maybe param" "temp"
      (64181 'move' tmp[64158] 1)
      ParamForLoop
      { d[64155] tmp[64156] tmp[64157] tmp[64158]
        { scopeless
          (64152 call =(64144 call result d)(64150 call - x(64149 call y d)))
        }
      }
      label _unused_continueLabel[64160]
      label _breakLabel[64159]
    }
    (64193 return result)
  }
  where {
    (64117 call &&(64107 call isHomogeneousTuple y)(64116 call isSubtype t(64115 'typeof'(64114 call y 1))))
  }
  function *[64204](arg x[64201] :
  _tuple, arg y[64211] :
  (64210 'typeof'(64209 call x 1))) : _unknown[43] "inline"
  {
    unknown result[64229](64227 call *(64219 call . x c"size")(64226 'typeof'(64225 call x 1)))
    {
      unknown d[64254] 0
      unknown tmp[64255] "maybe param" "temp"
      (64267 'move' tmp[64255](64265 call chpl_compute_low_param_loop_bound 1(64235 call . x c"size")))
      unknown tmp[64256] "maybe param" "temp"
      (64277 'move' tmp[64256](64275 call chpl_compute_high_param_loop_bound 1(64272 call . x c"size")))
      unknown tmp[64257] "maybe param" "temp"
      (64280 'move' tmp[64257] 1)
      ParamForLoop
      { d[64254] tmp[64255] tmp[64256] tmp[64257]
        { scopeless
          (64251 call =(64243 call result d)(64249 call *(64247 call x d) y))
        }
      }
      label _unused_continueLabel[64259]
      label _breakLabel[64258]
    }
    (64292 return result)
  }
  where {
    (64217 call isHomogeneousTuple x)
  }
  function *[64304](arg x[64301] :
  unknown t[64299], arg y[64307] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[64336](64334 call *(64326 call . y c"size")(64333 'typeof'(64332 call y 1)))
    {
      unknown d[64361] 0
      unknown tmp[64362] "maybe param" "temp"
      (64374 'move' tmp[64362](64372 call chpl_compute_low_param_loop_bound 1(64342 call . y c"size")))
      unknown tmp[64363] "maybe param" "temp"
      (64384 'move' tmp[64363](64382 call chpl_compute_high_param_loop_bound 1(64379 call . y c"size")))
      unknown tmp[64364] "maybe param" "temp"
      (64387 'move' tmp[64364] 1)
      ParamForLoop
      { d[64361] tmp[64362] tmp[64363] tmp[64364]
        { scopeless
          (64358 call =(64350 call result d)(64356 call * x(64355 call y d)))
        }
      }
      label _unused_continueLabel[64366]
      label _breakLabel[64365]
    }
    (64399 return result)
  }
  where {
    (64323 call &&(64313 call isHomogeneousTuple y)(64322 call isSubtype t(64321 'typeof'(64320 call y 1))))
  }
  function /[64410](arg x[64407] :
  _tuple, arg y[64417] :
  (64416 'typeof'(64415 call x 1))) : _unknown[43] "inline"
  {
    unknown result[64435](64433 call *(64425 call . x c"size")(64432 'typeof'(64431 call x 1)))
    {
      unknown d[64460] 0
      unknown tmp[64461] "maybe param" "temp"
      (64473 'move' tmp[64461](64471 call chpl_compute_low_param_loop_bound 1(64441 call . x c"size")))
      unknown tmp[64462] "maybe param" "temp"
      (64483 'move' tmp[64462](64481 call chpl_compute_high_param_loop_bound 1(64478 call . x c"size")))
      unknown tmp[64463] "maybe param" "temp"
      (64486 'move' tmp[64463] 1)
      ParamForLoop
      { d[64460] tmp[64461] tmp[64462] tmp[64463]
        { scopeless
          (64457 call =(64449 call result d)(64455 call /(64453 call x d) y))
        }
      }
      label _unused_continueLabel[64465]
      label _breakLabel[64464]
    }
    (64498 return result)
  }
  where {
    (64423 call isHomogeneousTuple x)
  }
  function /[64510](arg x[64507] :
  unknown t[64505], arg y[64513] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[64542](64540 call *(64532 call . y c"size")(64539 'typeof'(64538 call y 1)))
    {
      unknown d[64567] 0
      unknown tmp[64568] "maybe param" "temp"
      (64580 'move' tmp[64568](64578 call chpl_compute_low_param_loop_bound 1(64548 call . y c"size")))
      unknown tmp[64569] "maybe param" "temp"
      (64590 'move' tmp[64569](64588 call chpl_compute_high_param_loop_bound 1(64585 call . y c"size")))
      unknown tmp[64570] "maybe param" "temp"
      (64593 'move' tmp[64570] 1)
      ParamForLoop
      { d[64567] tmp[64568] tmp[64569] tmp[64570]
        { scopeless
          (64564 call =(64556 call result d)(64562 call / x(64561 call y d)))
        }
      }
      label _unused_continueLabel[64572]
      label _breakLabel[64571]
    }
    (64605 return result)
  }
  where {
    (64529 call &&(64519 call isHomogeneousTuple y)(64528 call isSubtype t(64527 'typeof'(64526 call y 1))))
  }
  function %[64616](arg x[64613] :
  _tuple, arg y[64623] :
  (64622 'typeof'(64621 call x 1))) : _unknown[43] "inline"
  {
    unknown result[64641](64639 call *(64631 call . x c"size")(64638 'typeof'(64637 call x 1)))
    {
      unknown d[64666] 0
      unknown tmp[64667] "maybe param" "temp"
      (64679 'move' tmp[64667](64677 call chpl_compute_low_param_loop_bound 1(64647 call . x c"size")))
      unknown tmp[64668] "maybe param" "temp"
      (64689 'move' tmp[64668](64687 call chpl_compute_high_param_loop_bound 1(64684 call . x c"size")))
      unknown tmp[64669] "maybe param" "temp"
      (64692 'move' tmp[64669] 1)
      ParamForLoop
      { d[64666] tmp[64667] tmp[64668] tmp[64669]
        { scopeless
          (64663 call =(64655 call result d)(64661 call %(64659 call x d) y))
        }
      }
      label _unused_continueLabel[64671]
      label _breakLabel[64670]
    }
    (64704 return result)
  }
  where {
    (64629 call isHomogeneousTuple x)
  }
  function %[64716](arg x[64713] :
  unknown t[64711], arg y[64719] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[64748](64746 call *(64738 call . y c"size")(64745 'typeof'(64744 call y 1)))
    {
      unknown d[64773] 0
      unknown tmp[64774] "maybe param" "temp"
      (64786 'move' tmp[64774](64784 call chpl_compute_low_param_loop_bound 1(64754 call . y c"size")))
      unknown tmp[64775] "maybe param" "temp"
      (64796 'move' tmp[64775](64794 call chpl_compute_high_param_loop_bound 1(64791 call . y c"size")))
      unknown tmp[64776] "maybe param" "temp"
      (64799 'move' tmp[64776] 1)
      ParamForLoop
      { d[64773] tmp[64774] tmp[64775] tmp[64776]
        { scopeless
          (64770 call =(64762 call result d)(64768 call % x(64767 call y d)))
        }
      }
      label _unused_continueLabel[64778]
      label _breakLabel[64777]
    }
    (64811 return result)
  }
  where {
    (64735 call &&(64725 call isHomogeneousTuple y)(64734 call isSubtype t(64733 'typeof'(64732 call y 1))))
  }
  function **[64822](arg x[64819] :
  _tuple, arg y[64829] :
  (64828 'typeof'(64827 call x 1))) : _unknown[43] "inline"
  {
    unknown result[64847](64845 call *(64837 call . x c"size")(64844 'typeof'(64843 call x 1)))
    {
      unknown d[64872] 0
      unknown tmp[64873] "maybe param" "temp"
      (64885 'move' tmp[64873](64883 call chpl_compute_low_param_loop_bound 1(64853 call . x c"size")))
      unknown tmp[64874] "maybe param" "temp"
      (64895 'move' tmp[64874](64893 call chpl_compute_high_param_loop_bound 1(64890 call . x c"size")))
      unknown tmp[64875] "maybe param" "temp"
      (64898 'move' tmp[64875] 1)
      ParamForLoop
      { d[64872] tmp[64873] tmp[64874] tmp[64875]
        { scopeless
          (64869 call =(64861 call result d)(64867 call **(64865 call x d) y))
        }
      }
      label _unused_continueLabel[64877]
      label _breakLabel[64876]
    }
    (64910 return result)
  }
  where {
    (64835 call isHomogeneousTuple x)
  }
  function **[64922](arg x[64919] :
  unknown t[64917], arg y[64925] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[64954](64952 call *(64944 call . y c"size")(64951 'typeof'(64950 call y 1)))
    {
      unknown d[64979] 0
      unknown tmp[64980] "maybe param" "temp"
      (64992 'move' tmp[64980](64990 call chpl_compute_low_param_loop_bound 1(64960 call . y c"size")))
      unknown tmp[64981] "maybe param" "temp"
      (65002 'move' tmp[64981](65000 call chpl_compute_high_param_loop_bound 1(64997 call . y c"size")))
      unknown tmp[64982] "maybe param" "temp"
      (65005 'move' tmp[64982] 1)
      ParamForLoop
      { d[64979] tmp[64980] tmp[64981] tmp[64982]
        { scopeless
          (64976 call =(64968 call result d)(64974 call ** x(64973 call y d)))
        }
      }
      label _unused_continueLabel[64984]
      label _breakLabel[64983]
    }
    (65017 return result)
  }
  where {
    (64941 call &&(64931 call isHomogeneousTuple y)(64940 call isSubtype t(64939 'typeof'(64938 call y 1))))
  }
  function &[65028](arg x[65025] :
  _tuple, arg y[65035] :
  (65034 'typeof'(65033 call x 1))) : _unknown[43] "inline"
  {
    unknown result[65053](65051 call *(65043 call . x c"size")(65050 'typeof'(65049 call x 1)))
    {
      unknown d[65078] 0
      unknown tmp[65079] "maybe param" "temp"
      (65091 'move' tmp[65079](65089 call chpl_compute_low_param_loop_bound 1(65059 call . x c"size")))
      unknown tmp[65080] "maybe param" "temp"
      (65101 'move' tmp[65080](65099 call chpl_compute_high_param_loop_bound 1(65096 call . x c"size")))
      unknown tmp[65081] "maybe param" "temp"
      (65104 'move' tmp[65081] 1)
      ParamForLoop
      { d[65078] tmp[65079] tmp[65080] tmp[65081]
        { scopeless
          (65075 call =(65067 call result d)(65073 call &(65071 call x d) y))
        }
      }
      label _unused_continueLabel[65083]
      label _breakLabel[65082]
    }
    (65116 return result)
  }
  where {
    (65041 call isHomogeneousTuple x)
  }
  function &[65128](arg x[65125] :
  unknown t[65123], arg y[65131] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[65160](65158 call *(65150 call . y c"size")(65157 'typeof'(65156 call y 1)))
    {
      unknown d[65185] 0
      unknown tmp[65186] "maybe param" "temp"
      (65198 'move' tmp[65186](65196 call chpl_compute_low_param_loop_bound 1(65166 call . y c"size")))
      unknown tmp[65187] "maybe param" "temp"
      (65208 'move' tmp[65187](65206 call chpl_compute_high_param_loop_bound 1(65203 call . y c"size")))
      unknown tmp[65188] "maybe param" "temp"
      (65211 'move' tmp[65188] 1)
      ParamForLoop
      { d[65185] tmp[65186] tmp[65187] tmp[65188]
        { scopeless
          (65182 call =(65174 call result d)(65180 call & x(65179 call y d)))
        }
      }
      label _unused_continueLabel[65190]
      label _breakLabel[65189]
    }
    (65223 return result)
  }
  where {
    (65147 call &&(65137 call isHomogeneousTuple y)(65146 call isSubtype t(65145 'typeof'(65144 call y 1))))
  }
  function |[65234](arg x[65231] :
  _tuple, arg y[65241] :
  (65240 'typeof'(65239 call x 1))) : _unknown[43] "inline"
  {
    unknown result[65259](65257 call *(65249 call . x c"size")(65256 'typeof'(65255 call x 1)))
    {
      unknown d[65284] 0
      unknown tmp[65285] "maybe param" "temp"
      (65297 'move' tmp[65285](65295 call chpl_compute_low_param_loop_bound 1(65265 call . x c"size")))
      unknown tmp[65286] "maybe param" "temp"
      (65307 'move' tmp[65286](65305 call chpl_compute_high_param_loop_bound 1(65302 call . x c"size")))
      unknown tmp[65287] "maybe param" "temp"
      (65310 'move' tmp[65287] 1)
      ParamForLoop
      { d[65284] tmp[65285] tmp[65286] tmp[65287]
        { scopeless
          (65281 call =(65273 call result d)(65279 call |(65277 call x d) y))
        }
      }
      label _unused_continueLabel[65289]
      label _breakLabel[65288]
    }
    (65322 return result)
  }
  where {
    (65247 call isHomogeneousTuple x)
  }
  function |[65334](arg x[65331] :
  unknown t[65329], arg y[65337] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[65366](65364 call *(65356 call . y c"size")(65363 'typeof'(65362 call y 1)))
    {
      unknown d[65391] 0
      unknown tmp[65392] "maybe param" "temp"
      (65404 'move' tmp[65392](65402 call chpl_compute_low_param_loop_bound 1(65372 call . y c"size")))
      unknown tmp[65393] "maybe param" "temp"
      (65414 'move' tmp[65393](65412 call chpl_compute_high_param_loop_bound 1(65409 call . y c"size")))
      unknown tmp[65394] "maybe param" "temp"
      (65417 'move' tmp[65394] 1)
      ParamForLoop
      { d[65391] tmp[65392] tmp[65393] tmp[65394]
        { scopeless
          (65388 call =(65380 call result d)(65386 call | x(65385 call y d)))
        }
      }
      label _unused_continueLabel[65396]
      label _breakLabel[65395]
    }
    (65429 return result)
  }
  where {
    (65353 call &&(65343 call isHomogeneousTuple y)(65352 call isSubtype t(65351 'typeof'(65350 call y 1))))
  }
  function ^[65440](arg x[65437] :
  _tuple, arg y[65447] :
  (65446 'typeof'(65445 call x 1))) : _unknown[43] "inline"
  {
    unknown result[65465](65463 call *(65455 call . x c"size")(65462 'typeof'(65461 call x 1)))
    {
      unknown d[65490] 0
      unknown tmp[65491] "maybe param" "temp"
      (65503 'move' tmp[65491](65501 call chpl_compute_low_param_loop_bound 1(65471 call . x c"size")))
      unknown tmp[65492] "maybe param" "temp"
      (65513 'move' tmp[65492](65511 call chpl_compute_high_param_loop_bound 1(65508 call . x c"size")))
      unknown tmp[65493] "maybe param" "temp"
      (65516 'move' tmp[65493] 1)
      ParamForLoop
      { d[65490] tmp[65491] tmp[65492] tmp[65493]
        { scopeless
          (65487 call =(65479 call result d)(65485 call ^(65483 call x d) y))
        }
      }
      label _unused_continueLabel[65495]
      label _breakLabel[65494]
    }
    (65528 return result)
  }
  where {
    (65453 call isHomogeneousTuple x)
  }
  function ^[65540](arg x[65537] :
  unknown t[65535], arg y[65543] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[65572](65570 call *(65562 call . y c"size")(65569 'typeof'(65568 call y 1)))
    {
      unknown d[65597] 0
      unknown tmp[65598] "maybe param" "temp"
      (65610 'move' tmp[65598](65608 call chpl_compute_low_param_loop_bound 1(65578 call . y c"size")))
      unknown tmp[65599] "maybe param" "temp"
      (65620 'move' tmp[65599](65618 call chpl_compute_high_param_loop_bound 1(65615 call . y c"size")))
      unknown tmp[65600] "maybe param" "temp"
      (65623 'move' tmp[65600] 1)
      ParamForLoop
      { d[65597] tmp[65598] tmp[65599] tmp[65600]
        { scopeless
          (65594 call =(65586 call result d)(65592 call ^ x(65591 call y d)))
        }
      }
      label _unused_continueLabel[65602]
      label _breakLabel[65601]
    }
    (65635 return result)
  }
  where {
    (65559 call &&(65549 call isHomogeneousTuple y)(65558 call isSubtype t(65557 'typeof'(65556 call y 1))))
  }
  function <<[65646](arg x[65643] :
  _tuple, arg y[65653] :
  (65652 'typeof'(65651 call x 1))) : _unknown[43] "inline"
  {
    unknown result[65671](65669 call *(65661 call . x c"size")(65668 'typeof'(65667 call x 1)))
    {
      unknown d[65696] 0
      unknown tmp[65697] "maybe param" "temp"
      (65709 'move' tmp[65697](65707 call chpl_compute_low_param_loop_bound 1(65677 call . x c"size")))
      unknown tmp[65698] "maybe param" "temp"
      (65719 'move' tmp[65698](65717 call chpl_compute_high_param_loop_bound 1(65714 call . x c"size")))
      unknown tmp[65699] "maybe param" "temp"
      (65722 'move' tmp[65699] 1)
      ParamForLoop
      { d[65696] tmp[65697] tmp[65698] tmp[65699]
        { scopeless
          (65693 call =(65685 call result d)(65691 call <<(65689 call x d) y))
        }
      }
      label _unused_continueLabel[65701]
      label _breakLabel[65700]
    }
    (65734 return result)
  }
  where {
    (65659 call isHomogeneousTuple x)
  }
  function <<[65746](arg x[65743] :
  unknown t[65741], arg y[65749] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[65778](65776 call *(65768 call . y c"size")(65775 'typeof'(65774 call y 1)))
    {
      unknown d[65803] 0
      unknown tmp[65804] "maybe param" "temp"
      (65816 'move' tmp[65804](65814 call chpl_compute_low_param_loop_bound 1(65784 call . y c"size")))
      unknown tmp[65805] "maybe param" "temp"
      (65826 'move' tmp[65805](65824 call chpl_compute_high_param_loop_bound 1(65821 call . y c"size")))
      unknown tmp[65806] "maybe param" "temp"
      (65829 'move' tmp[65806] 1)
      ParamForLoop
      { d[65803] tmp[65804] tmp[65805] tmp[65806]
        { scopeless
          (65800 call =(65792 call result d)(65798 call << x(65797 call y d)))
        }
      }
      label _unused_continueLabel[65808]
      label _breakLabel[65807]
    }
    (65841 return result)
  }
  where {
    (65765 call &&(65755 call isHomogeneousTuple y)(65764 call isSubtype t(65763 'typeof'(65762 call y 1))))
  }
  function >>[65852](arg x[65849] :
  _tuple, arg y[65859] :
  (65858 'typeof'(65857 call x 1))) : _unknown[43] "inline"
  {
    unknown result[65877](65875 call *(65867 call . x c"size")(65874 'typeof'(65873 call x 1)))
    {
      unknown d[65902] 0
      unknown tmp[65903] "maybe param" "temp"
      (65915 'move' tmp[65903](65913 call chpl_compute_low_param_loop_bound 1(65883 call . x c"size")))
      unknown tmp[65904] "maybe param" "temp"
      (65925 'move' tmp[65904](65923 call chpl_compute_high_param_loop_bound 1(65920 call . x c"size")))
      unknown tmp[65905] "maybe param" "temp"
      (65928 'move' tmp[65905] 1)
      ParamForLoop
      { d[65902] tmp[65903] tmp[65904] tmp[65905]
        { scopeless
          (65899 call =(65891 call result d)(65897 call >>(65895 call x d) y))
        }
      }
      label _unused_continueLabel[65907]
      label _breakLabel[65906]
    }
    (65940 return result)
  }
  where {
    (65865 call isHomogeneousTuple x)
  }
  function >>[65952](arg x[65949] :
  unknown t[65947], arg y[65955] :
  _tuple) : _unknown[43] "inline"
  {
    unknown result[65984](65982 call *(65974 call . y c"size")(65981 'typeof'(65980 call y 1)))
    {
      unknown d[66009] 0
      unknown tmp[66010] "maybe param" "temp"
      (66022 'move' tmp[66010](66020 call chpl_compute_low_param_loop_bound 1(65990 call . y c"size")))
      unknown tmp[66011] "maybe param" "temp"
      (66032 'move' tmp[66011](66030 call chpl_compute_high_param_loop_bound 1(66027 call . y c"size")))
      unknown tmp[66012] "maybe param" "temp"
      (66035 'move' tmp[66012] 1)
      ParamForLoop
      { d[66009] tmp[66010] tmp[66011] tmp[66012]
        { scopeless
          (66006 call =(65998 call result d)(66004 call >> x(66003 call y d)))
        }
      }
      label _unused_continueLabel[66014]
      label _breakLabel[66013]
    }
    (66047 return result)
  }
  where {
    (65971 call &&(65961 call isHomogeneousTuple y)(65970 call isSubtype t(65969 'typeof'(65968 call y 1))))
  }
}