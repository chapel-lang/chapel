AST dump for ShallowCopy after pass parse.
Module use list: 

{
  (328352 'use' ChapelStandard)
  function shallowCopy[260332](ref arg A[260330]:_any[170](?), arg dst[260334]:_any[170](?), arg src[260336]:_any[170](?), arg nElts[260338]:_any[170](?)) : _unknown[43] "inline"
  {
    if(260388 call _cond_test boundsChecking)
    {
      (260347 call assert(260344 call > nElts 0))
      (260367 call assert(260365 call(260355 call .(260352 call . A c"_dom") c"contains")(260362 call #(260359 call chpl_build_low_bounded_range dst) nElts)))
      (260386 call assert(260384 call(260374 call .(260371 call . A c"_dom") c"contains")(260381 call #(260378 call chpl_build_low_bounded_range src) nElts)))
    }
    if(260556 call _cond_test(260401 call(260397 call .(260394 call . A c"_instance") c"isDefaultRectangular")))
    {
      unknown size[260415](260413 call *(260404 call _cast size_t nElts)(260412 call c_sizeof(260408 call . A c"eltType")))
      (260436 call c_memcpy(260426 call c_ptrTo(260424 call A dst))(260434 call c_ptrTo(260432 call A src)) size)
    }
    {
      unknown ok[260461](260460 call chpl__bulkTransferArray A(260448 call chpl__buildDomainExpr(260445 call #(260442 call chpl_build_low_bounded_range dst) nElts)) A(260458 call chpl__buildDomainExpr(260455 call #(260452 call chpl_build_low_bounded_range src) nElts)))
      if(260552 call _cond_test(260466 call ! ok))
      {
        (260486 call halt "bulk transfer failed in sorting")
        {
          unknown _indexOfInterest[260518] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[260519] "expr temp" "temp"
          (260528 'move' _iterator[260519](260526 call _getIterator(260498 call vectorizeOnly(260495 call #(260492 call chpl_build_low_bounded_range 0) nElts))))
          Defer
          {
            {
              (260545 call _freeIterator _iterator[260519])
            }
          }
          { scopeless type
            (260534 'move' _indexOfInterest[260518](260531 call iteratorIndex _iterator[260519]))
          }
          ForLoop
          {
            unknown i[260538] "index var" "insert auto destroy"
            (260540 'move' i[260538] _indexOfInterest[260518])
            {
              (260515 '='(260507 call A(260504 call + dst i))(260514 call A(260511 call + src i)))
            }
            label _continueLabel[260523]
            _indexOfInterest[260518]
            _iterator[260519]
          }
          label _breakLabel[260524]
        }
      }
    }
  }
  function shallowCopy[260567](ref arg DstA[260565]:_any[170](?), arg dst[260569]:_any[170](?), ref arg SrcA[260571]:_any[170](?), arg src[260573]:_any[170](?), arg nElts[260575]:_any[170](?)) : _unknown[43] "inline"
  {
    if(260625 call _cond_test boundsChecking)
    {
      (260584 call assert(260581 call > nElts 0))
      (260604 call assert(260602 call(260592 call .(260589 call . DstA c"_dom") c"contains")(260599 call #(260596 call chpl_build_low_bounded_range dst) nElts)))
      (260623 call assert(260621 call(260611 call .(260608 call . SrcA c"_dom") c"contains")(260618 call #(260615 call chpl_build_low_bounded_range src) nElts)))
    }
    if(260789 call _cond_test(260648 call &&(260638 call(260634 call .(260631 call . DstA c"_instance") c"isDefaultRectangular"))(260647 call(260643 call .(260640 call . SrcA c"_instance") c"isDefaultRectangular"))))
    {
      unknown size[260663](260661 call *(260652 call _cast size_t nElts)(260660 call c_sizeof(260656 call . DstA c"eltType")))
      (260684 call c_memcpy(260674 call c_ptrTo(260672 call DstA dst))(260682 call c_ptrTo(260680 call SrcA src)) size)
    }
    {
      unknown ok[260709](260708 call chpl__bulkTransferArray DstA(260696 call chpl__buildDomainExpr(260693 call #(260690 call chpl_build_low_bounded_range dst) nElts)) SrcA(260706 call chpl__buildDomainExpr(260703 call #(260700 call chpl_build_low_bounded_range src) nElts)))
      if(260785 call _cond_test(260714 call ! ok))
      {
        (260719 call halt "bulk transfer failed in sorting")
        {
          unknown _indexOfInterest[260751] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[260752] "expr temp" "temp"
          (260761 'move' _iterator[260752](260759 call _getIterator(260731 call vectorizeOnly(260728 call #(260725 call chpl_build_low_bounded_range 0) nElts))))
          Defer
          {
            {
              (260778 call _freeIterator _iterator[260752])
            }
          }
          { scopeless type
            (260767 'move' _indexOfInterest[260751](260764 call iteratorIndex _iterator[260752]))
          }
          ForLoop
          {
            unknown i[260771] "index var" "insert auto destroy"
            (260773 'move' i[260771] _indexOfInterest[260751])
            {
              (260748 '='(260740 call DstA(260737 call + dst i))(260747 call SrcA(260744 call + src i)))
            }
            label _continueLabel[260756]
            _indexOfInterest[260751]
            _iterator[260752]
          }
          label _breakLabel[260757]
        }
      }
    }
  }
  function parallelShallowCopy[260799](ref arg DstA[260797]:_any[170](?), arg dst[260801]:_any[170](?), ref arg SrcA[260803]:_any[170](?), arg src[260805]:_any[170](?), arg nElts[260807]:_any[170](?)) : _unknown[43] "inline"
  {
    const nTasks[260821] "const"(260818 IfExpr (260811 call > dataParTasksPerLocale 0) then
    { scopeless
      dataParTasksPerLocale
    } else
    { scopeless
      (260815 call . here c"maxTaskPar")
    } )
    (260843 call halt "buggy")
    const blockSize[260850] "const"(260849 call divceil nElts nTasks)
    const nBlocks[260858] "const"(260857 call divceil nElts blockSize)
    {
      unknown tmpIter[260915] "expr temp" "maybe ref" "no copy" "temp"
      (260918 'move' tmpIter[260915](260866 call #(260863 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[261096] "maybe param" "temp"
      (261111 'move' isRngDomArr[261096](261109 call ||(261098 call isBoundedRange tmpIter[260915])(261107 call ||(261101 call isDomain tmpIter[260915])(261104 call isArray tmpIter[260915]))))
      if isRngDomArr[261096]
      {
        const _coforallCount[260963] "const" "end count" "temp"
        (261032 'move' _coforallCount[260963](261029 call _endCountAlloc 1))
        unknown numTasks[260964] "temp"
        (261016 'move' numTasks[260964](261012 call . tmpIter[260915] c"size"))
        (261007 call _upEndCount _coforallCount[260963] 1 numTasks[260964])
        (261004 call chpl_resetTaskSpawn numTasks[260964])
        unknown _indexOfInterest[260971] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[260972] "expr temp" "temp"
        (260981 'move' _iterator[260972](260979 call _getIterator tmpIter[260915]))
        Defer
        {
          {
            (260997 call _freeIterator _iterator[260972])
          }
        }
        { scopeless type
          (260986 'move' _indexOfInterest[260971](260983 call iteratorIndex _iterator[260972]))
        }
        ForLoop
        {
          unknown tid[260990] "coforall index var" "index var" "insert auto destroy"
          (260992 'move' tid[260990] _indexOfInterest[260971])
          {
            {
              unknown start[260921](260923 call * tid blockSize)
              unknown n[260927] blockSize
              if(260931 call _cond_test(260933 call >(260935 call + start n) nElts))
              {
                { scopeless
                  (260942 call = n(260945 call - nElts start))
                }
              }
              (260950 call shallowCopy DstA(260953 call + dst start) SrcA(260958 call + src start) n)
            }
            (260966 call _downEndCount _coforallCount[260963] nil[38])
            (260965 'coforall loop')
          }
          label _continueLabel[260976]
          _indexOfInterest[260971]
          _iterator[260972]
        }
        label _breakLabel[260977]
        Defer
        {
          {
            (261019 call _endCountFree _coforallCount[260963])
          }
        }
        (261024 call _waitEndCount _coforallCount[260963] 1 numTasks[260964])
      }
      {
        const _coforallCount[261036] "const" "end count" "temp"
        (261093 'move' _coforallCount[261036](261090 call _endCountAlloc 1))
        unknown _indexOfInterest[261044] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[261045] "expr temp" "temp"
        (261054 'move' _iterator[261045](261052 call _getIterator tmpIter[260915]))
        Defer
        {
          {
            (261070 call _freeIterator _iterator[261045])
          }
        }
        { scopeless type
          (261059 'move' _indexOfInterest[261044](261056 call iteratorIndex _iterator[261045]))
        }
        ForLoop
        {
          unknown tid[261063] "coforall index var" "index var" "insert auto destroy"
          (261065 'move' tid[261063] _indexOfInterest[261044])
          (261077 call _upEndCount _coforallCount[261036] 1)
          {
            {
              unknown start[260872](260870 call * tid blockSize)
              unknown n[260877] blockSize
              if(260895 call _cond_test(260885 call >(260882 call + start n) nElts))
              {
                { scopeless
                  (260892 call = n(260890 call - nElts start))
                }
              }
              (260913 call shallowCopy DstA(260905 call + dst start) SrcA(260910 call + src start) n)
            }
            (261039 call _downEndCount _coforallCount[261036] nil[38])
            (261038 'coforall loop')
          }
          label _continueLabel[261049]
          _indexOfInterest[261044]
          _iterator[261045]
        }
        label _breakLabel[261050]
        Defer
        {
          {
            (261081 call _endCountFree _coforallCount[261036])
          }
        }
        (261086 call _waitEndCount _coforallCount[261036] 1)
      }
    }
  }
}