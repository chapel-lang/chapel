AST dump for ChapelDebugPrint after pass normalize.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelDebugPrint[390282]() : void[4] "insert line file info" "module init"
  {
    (493313 'init var' chpl__testParFlag[181291] 0)
    (493315 'init var' chpl__testParOn[181295] 0)
    (474206 return _void[47])
  }
  function chpl_debug_stringify[181127](arg args[181124]:_any[170](?) ...) : _unknown[43]
  {
    unknown ret[474184] "RVV" "temp"
    unknown str[181146] "insert auto destroy"
    (493305 'init var' str[181146] "")
    {
      unknown i[181188] "insert auto destroy"
      (493307 'init var' i[181188] 0)
      unknown tmp[181189] "maybe param" "temp"
      unknown call_tmp[636709] "expr temp" "maybe param" "maybe type" "temp"
      (636712 'move' call_tmp[636709](181152 call size _mt[232] args[181124]))
      (181201 'move' tmp[181189](181199 call chpl_compute_low_param_loop_bound 1 call_tmp[636709]))
      unknown tmp[181190] "maybe param" "temp"
      unknown call_tmp[636716] "expr temp" "maybe param" "maybe type" "temp"
      (636719 'move' call_tmp[636716](181206 call size _mt[232] args[181124]))
      (181211 'move' tmp[181190](181209 call chpl_compute_high_param_loop_bound 1 call_tmp[636716]))
      unknown tmp[181191] "maybe param" "temp"
      (181214 'move' tmp[181191] 1)
      ParamForLoop
      { i[181188] tmp[181189] tmp[181190] tmp[181191]
        {
          unknown call_tmp[636721] "maybe param" "maybe type" "temp"
          (636724 'move' call_tmp[636721](181160 call args[181124] i[181188]))
          unknown tmp[181161] "insert auto destroy"
          (493309 'init var' tmp[181161] call_tmp[636721])
          unknown call_tmp[636726] "expr temp" "maybe param" "maybe type" "temp"
          (636729 'move' call_tmp[636726](181168 call _can_stringify_direct tmp[181161]))
          unknown call_tmp[636731] "expr temp" "maybe param" "maybe type" "temp"
          (636734 'move' call_tmp[636731](181184 call _cond_test call_tmp[636726]))
          if call_tmp[636731]
          {
            unknown call_tmp[636736] "expr temp" "maybe param" "maybe type" "temp"
            (636739 'move' call_tmp[636736](181173 call stringify tmp[181161]))
            (181174 call += str[181146] call_tmp[636736])
          }
          {
            (181180 call += str[181146] "\?")
          }
        }
      }
      label _unused_continueLabel[181193]
      label _breakLabel[181192]
    }
    (474190 'move' ret[474184](474189 'coerce' str[181146] string[24]))
    (474186 return ret[474184])
  }
  { scopeless type
    string[24]
  }
  function chpl_debug_writeln[181237](arg args[181234]:_any[170](?) ...) : _unknown[43] "no return value for void"
  {
    function printf[181245](arg fmt[181242]:c_string[19], arg f[181248]:c_string[19]) : void[4] "extern" "local args" "no fn body" "no return value for void"
    {
      (474192 return _void[47])
    }
    unknown call_tmp[636741] "maybe param" "maybe type" "temp"
    (636744 'move' call_tmp[636741](181258 call chpl_debug_stringify(181256 'expand_tuple' args[181234])))
    unknown str[181259] "insert auto destroy"
    (493311 'init var' str[181259] call_tmp[636741])
    unknown call_tmp[636748] "expr temp" "maybe param" "maybe type" "temp"
    (636751 'move' call_tmp[636748](181285 call(181281 call (partial) c_str _mt[232] str[181259])))
    (181286 call printf "%s\n" call_tmp[636748])
    (474194 return _void[47])
  }
  unknown chpl__testParFlag[181291] "config" "no doc" "param"
  unknown chpl__testParOn[181295] "insert auto destroy" "no doc"
  function chpl__testParStart[181300]() : _unknown[43] "no doc" "no return value for void"
  {
    (181304 call = chpl__testParOn[181295] 1)
    (474196 return _void[47])
  }
  function chpl__testParStop[181312]() : _unknown[43] "no doc" "no return value for void"
  {
    (181316 call = chpl__testParOn[181295] 0)
    (474198 return _void[47])
  }
  function chpl__testPar[181328](arg args[181325]:_any[170](?) ...) : _unknown[43] "no doc" "no return value for void"
  {
    unknown tmp[404625] "maybe param" "temp"
    (404636 'move' tmp[404625] chpl__testParFlag[181291])
    unknown call_tmp[636753] "expr temp" "maybe param" "maybe type" "temp"
    (636756 'move' call_tmp[636753](404638 call _cond_invalid tmp[404625]))
    if call_tmp[636753]
    {
      (404641 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[520182] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[520183] "maybe param" "temp"
    unknown call_tmp[636758] "expr temp" "maybe param" "maybe type" "temp"
    (636761 'move' call_tmp[636758](404626 call isTrue tmp[404625]))
    (520188 'move' tmp[520183](520186 call _cond_test call_tmp[636758]))
    if tmp[520183]
    {
      unknown tmp[520190] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (520192 'move' tmp[520190](404629 call isTrue chpl__testParOn[181295]))
      (520197 'move' tmp[520182](520194 '_paramFoldLogical' tmp[520183] tmp[520190]))
    }
    {
      (520202 'move' tmp[520182](520199 '_paramFoldLogical' tmp[520183] 0))
    }
    unknown call_tmp[636763] "expr temp" "maybe param" "maybe type" "temp"
    (636766 'move' call_tmp[636763](181419 call _cond_test tmp[520182]))
    if call_tmp[636763]
    {
      unknown call_tmp[636768] "expr temp" "maybe param" "maybe type" "temp"
      (636771 'move' call_tmp[636768](181339 '_get_user_file'))
      unknown call_tmp[636773] "maybe param" "maybe type" "temp"
      (636776 'move' call_tmp[636773](181340 'chpl_lookupFilename' call_tmp[636768]))
      const file_cs[181341] "const" "insert auto destroy"
      (493317 'init var' file_cs[181341] call_tmp[636773] c_string[19])
      unknown call_tmp[636778] "maybe param" "maybe type" "temp"
      (636781 'move' call_tmp[636778](181347 call _cast string[24] file_cs[181341]))
      const file[181349] "const" "insert auto destroy"
      (493319 'init var' file[181349] call_tmp[636778])
      unknown call_tmp[636783] "maybe param" "maybe type" "temp"
      (636786 'move' call_tmp[636783](181354 '_get_user_line'))
      const line[181355] "const" "insert auto destroy"
      (493321 'init var' line[181355] call_tmp[636783])
      unknown call_tmp[636788] "maybe param" "maybe type" "temp"
      (636791 'move' call_tmp[636788](181362 call chpl_debug_stringify(181360 'expand_tuple' args[181325])))
      unknown str[181363] "insert auto destroy"
      (493323 'init var' str[181363] call_tmp[636788])
      function printf[181372](arg fmt[181369]:c_string[19], arg f[181375]:c_string[19], arg ln[181379] :
      c_int[209569], arg s[181383]:c_string[19]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
        (474200 return _void[47])
      }
      unknown call_tmp[636793] "expr temp" "maybe param" "maybe type" "temp"
      (636796 'move' call_tmp[636793](181409 call _cast c_int[209569] line[181355]))
      unknown call_tmp[636800] "expr temp" "maybe param" "maybe type" "temp"
      (636803 'move' call_tmp[636800](181416 call(181412 call (partial) c_str _mt[232] str[181363])))
      (181417 call printf "CHPL TEST PAR (%s:%i): %s\n" file_cs[181341] call_tmp[636793] call_tmp[636800])
    }
    (474202 return _void[47])
  }
  function chpl__testParWriteln[181432](arg args[181429]:_any[170](?) ...) : _unknown[43] "no doc" "no return value for void"
  {
    unknown tmp[404646] "maybe param" "temp"
    (404657 'move' tmp[404646] chpl__testParFlag[181291])
    unknown call_tmp[636805] "expr temp" "maybe param" "maybe type" "temp"
    (636808 'move' call_tmp[636805](404659 call _cond_invalid tmp[404646]))
    if call_tmp[636805]
    {
      (404662 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[520209] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[520210] "maybe param" "temp"
    unknown call_tmp[636810] "expr temp" "maybe param" "maybe type" "temp"
    (636813 'move' call_tmp[636810](404647 call isTrue tmp[404646]))
    (520215 'move' tmp[520210](520213 call _cond_test call_tmp[636810]))
    if tmp[520210]
    {
      unknown tmp[520217] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (520219 'move' tmp[520217](404650 call isTrue chpl__testParOn[181295]))
      (520224 'move' tmp[520209](520221 '_paramFoldLogical' tmp[520210] tmp[520217]))
    }
    {
      (520229 'move' tmp[520209](520226 '_paramFoldLogical' tmp[520210] 0))
    }
    unknown call_tmp[636815] "expr temp" "maybe param" "maybe type" "temp"
    (636818 'move' call_tmp[636815](181503 call _cond_test tmp[520209]))
    if call_tmp[636815]
    {
      unknown call_tmp[636820] "expr temp" "maybe param" "maybe type" "temp"
      (636823 'move' call_tmp[636820](181443 '_get_user_file'))
      unknown call_tmp[636825] "maybe param" "maybe type" "temp"
      (636828 'move' call_tmp[636825](181444 'chpl_lookupFilename' call_tmp[636820]))
      const file_cs[181445] "const" "insert auto destroy"
      (493325 'init var' file_cs[181445] call_tmp[636825] c_string[19])
      unknown call_tmp[636830] "maybe param" "maybe type" "temp"
      (636833 'move' call_tmp[636830](181451 call _cast string[24] file_cs[181445]))
      const file[181453] "const" "insert auto destroy"
      (493327 'init var' file[181453] call_tmp[636830])
      unknown call_tmp[636835] "maybe param" "maybe type" "temp"
      (636838 'move' call_tmp[636835](181458 '_get_user_line'))
      const line[181459] "const" "insert auto destroy"
      (493329 'init var' line[181459] call_tmp[636835])
      (181501 call writeln "CHPL TEST PAR (" file[181453] ":" line[181459] "): "(181500 'expand_tuple' args[181429]))
    }
    (474204 return _void[47])
  }
  (329472 'used modules list'(181118 'use' ChapelStandard[19734]))
}