AST dump for HeapSort after pass scopeResolve.
Module use list: ChapelStandard 

{
  function heapSort[253471](arg Data[253468] :
  (253466 call chpl__buildArrayRuntimeType unknown Dom[253461] unknown eltType[253464]), arg comparator[253476] :
  unknown rec[253473] =
  defaultComparator[251428]) : _unknown[43]
  {
    (253484 call chpl_check_comparator comparator[253476] eltType[253464])
    if(253515 call _cond_test(253492 call !=(253488 call . Dom[253461] c"rank") 1))
    {
      (253512 call compilerError "heapSort() requires 1-D array")
    }
    const low[253523] "const"(253520 call . Dom[253461] c"alignedLow")
    const high[253530] "const"(253527 call . Dom[253461] c"alignedHigh")
    const size[253537] "const"(253534 call . Dom[253461] c"size")
    const stride[253547] "const"(253546 call abs(253542 call . Dom[253461] c"stride"))
    unknown start[253591](253588 IfExpr (253552 call == high[253530] low[253523]) then
    { scopeless
      high[253530]
    } else
    { scopeless(253585 IfExpr (253557 call % size[253537] 2) then
      { scopeless
        (253570 call + low[253523](253568 call *(253565 call /(253562 call - size[253537] 1) 2) stride[253547]))
      } else
      { scopeless
        (253583 call + low[253523](253581 call *(253578 call -(253575 call / size[253537] 2) 1) stride[253547]))
      } )
    } )
    {
      unknown tmp[253614] "temp"
      (253638 'move' tmp[253614](253633 call _cond_test(253635 call >= start[253591] low[253523])))
      WhileDo
      {
        {
          (253603 call SiftDown start[253591] high[253530] comparator[253476])
          (253611 call = start[253591](253609 call - start[253591] stride[253547]))
        }
        label _continueLabel[253617]
        (253628 'move' tmp[253614](253623 call _cond_test(253625 call >= start[253591] low[253523])))
        tmp[253614]
      }
      label _breakLabel[253618]
    }
    unknown end[253642] high[253530]
    {
      unknown tmp[253676] "temp"
      (253700 'move' tmp[253676](253695 call _cond_test(253697 call > end[253642] low[253523])))
      WhileDo
      {
        {
          (253657 call <=>(253652 call Data[253468] end[253642])(253656 call Data[253468] low[253523]))
          (253666 call = end[253642](253664 call - end[253642] stride[253547]))
          (253674 call SiftDown low[253523] end[253642] comparator[253476])
        }
        label _continueLabel[253679]
        (253690 'move' tmp[253676](253685 call _cond_test(253687 call > end[253642] low[253523])))
        tmp[253676]
      }
      label _breakLabel[253680]
    }
    function SiftDown[253707](arg start[253705]:_any[170](?), arg end[253709]:_any[170](?), arg comparator[253714] :
    unknown rec[253711] =
    defaultComparator[251428]) : _unknown[43] "no return value for void"
    {
      unknown root[253719] start[253705]
      {
        unknown tmp[253847] "temp"
        (253889 'move' tmp[253847](253875 call _cond_test(253877 call <=(253879 call +(253881 call -(253883 call * 2 root[253719]) low[253523]) stride[253547]) end[253709])))
        WhileDo
        {
          {
            const child[253746] "const"(253744 call +(253741 call -(253738 call * 2 root[253719]) low[253523]) stride[253547])
            unknown swap[253751] root[253719]
            if(253774 call _cond_test(253767 call <(253765 call chpl_compare(253758 call Data[253468] swap[253751])(253763 call Data[253468] child[253746]) comparator[253714]) 0))
            {
              (253771 call = swap[253751] child[253746])
            }
            if(253814 call _cond_test(253804 call &&(253784 call <=(253781 call + child[253746] stride[253547]) end[253709])(253802 call <(253800 call chpl_compare(253790 call Data[253468] swap[253751])(253798 call Data[253468](253795 call + child[253746] stride[253547])) comparator[253714]) 0)))
            {
              (253811 call = swap[253751](253809 call + child[253746] stride[253547]))
            }
            if(253843 call _cond_test(253821 call != swap[253751] root[253719]))
            {
              (253831 call <=>(253826 call Data[253468] root[253719])(253830 call Data[253468] swap[253751]))
              (253837 call = root[253719] swap[253751])
            }
            {
              (253840 return _void[47])
            }
          }
          label _continueLabel[253850]
          (253870 'move' tmp[253847](253856 call _cond_test(253858 call <=(253860 call +(253862 call -(253864 call * 2 root[253719]) low[253523]) stride[253547]) end[253709])))
          tmp[253847]
        }
        label _breakLabel[253851]
      }
    }
  }
  (329579 'used modules list'(328334 'use' ChapelStandard[19734]))
}