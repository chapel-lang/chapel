AST dump for ChapelDistribution after pass buildDefaultFunctions.
Module use list: ChapelArray ChapelLocks ChapelRange LinkedLists Sort 

{
  function chpl__init_ChapelDistribution[390213]() : void[4] "insert line file info" "module init"
  {
    (470712 return _void[47])
  }
  function BaseDist[142349].deinit[141829](arg _mt[142353]:_MT[227], arg this[142351]:BaseDist[142349]) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470018 return _void[47])
  }
  function BaseDist[142349].remove[141836](arg _mt[142357]:_MT[227], arg this[142355]:BaseDist[142349]) : _unknown[43] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[470022] "RVV" "temp"
    unknown free_dist[141842] "insert auto destroy"
    (491808 'init var' free_dist[141842] 0)
    unknown call_tmp[614951] "expr temp" "maybe param" "maybe type" "temp"
    (614954 'move' call_tmp[614951](141848 call(354921 call (partial) dsiTrackDomains _mt[232] this[142355])))
    unknown call_tmp[614956] "expr temp" "maybe param" "maybe type" "temp"
    (614959 'move' call_tmp[614956](141915 call _cond_test call_tmp[614951]))
    if call_tmp[614956]
    {
      {
        const tmp[141903] "const" "temp"
        unknown call_tmp[614961] "expr temp" "maybe param" "maybe type" "temp"
        (614964 'move' call_tmp[614961](141900 '_wide_get_locale' this[142355]))
        (141904 'move' tmp[141903](141901 'deref' call_tmp[614961]))
        {
          unknown call_tmp[614966] "maybe param" "maybe type" "temp"
          (614969 'move' call_tmp[614966](141851 call - 1))
          unknown dom_count[141853] "insert auto destroy"
          (491810 'init var' dom_count[141853] call_tmp[614966])
          {
            unknown call_tmp[614973] "expr temp" "maybe param" "maybe type" "temp"
            (614976 'move' call_tmp[614973](354929 call _domsLock _mt[232] this[142355]))
            (141862 call(141858 call (partial) lock _mt[232] call_tmp[614973]))
            unknown call_tmp[614982] "expr temp" "maybe param" "maybe type" "temp"
            (614985 'move' call_tmp[614982](354936 call _free_when_no_doms _mt[232] this[142355]))
            (141867 call = call_tmp[614982] 1)
            unknown call_tmp[614989] "expr temp" "maybe param" "maybe type" "temp"
            (614992 'move' call_tmp[614989](354942 call _doms _mt[232] this[142355]))
            unknown call_tmp[614996] "expr temp" "maybe param" "maybe type" "temp"
            (614999 'move' call_tmp[614996](141872 call size _mt[232] call_tmp[614989]))
            (141875 call = dom_count[141853] call_tmp[614996])
            unknown call_tmp[615003] "expr temp" "maybe param" "maybe type" "temp"
            (615006 'move' call_tmp[615003](354947 call _domsLock _mt[232] this[142355]))
            (141883 call(141879 call (partial) unlock _mt[232] call_tmp[615003]))
          }
          unknown call_tmp[615010] "expr temp" "maybe param" "maybe type" "temp"
          (615013 'move' call_tmp[615010](141888 call == dom_count[141853] 0))
          unknown call_tmp[615015] "expr temp" "maybe param" "maybe type" "temp"
          (615018 'move' call_tmp[615015](141895 call _cond_test call_tmp[615010]))
          if call_tmp[615015]
          {
            (141892 call = free_dist[141842] 1)
          }
        }
      }
    }
    {
      (141911 call = free_dist[141842] 1)
    }
    unknown call_tmp[615020] "expr temp" "maybe param" "maybe type" "temp"
    (615023 'move' call_tmp[615020](141929 call _cond_test free_dist[141842]))
    if call_tmp[615020]
    {
      unknown call_tmp[615025] "expr temp" "maybe param" "maybe type" "temp"
      (615028 'move' call_tmp[615025](141923 call _to_unmanaged this[142355]))
      (470028 'move' ret[470022](470027 'coerce' call_tmp[615025] unmanaged BaseDist?[389876]))
      gotoReturn _end_remove[470020] _end_remove[470020]
    }
    {
      (470034 'move' ret[470022](470033 'coerce' nil[38] unmanaged BaseDist?[389876]))
      gotoReturn _end_remove[470020] _end_remove[470020]
    }
    label _end_remove[470020]
    (470024 return ret[470022])
  }
  { scopeless type
    unmanaged BaseDist?[389876]
  }
  function BaseDist[142349].remove_dom[141945](arg _mt[142361]:_MT[227], arg this[142359]:BaseDist[142349], arg x[141942]:unmanaged BaseDom[389803]) : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[470040] "RVV" "temp"
    unknown call_tmp[615030] "maybe param" "maybe type" "temp"
    (615033 'move' call_tmp[615030](141949 call - 1))
    unknown count[141951] "insert auto destroy"
    (491812 'init var' count[141951] call_tmp[615030])
    {
      const tmp[142016] "const" "temp"
      unknown call_tmp[615035] "expr temp" "maybe param" "maybe type" "temp"
      (615038 'move' call_tmp[615035](142013 '_wide_get_locale' this[142359]))
      (142017 'move' tmp[142016](142014 'deref' call_tmp[615035]))
      {
        unknown call_tmp[615040] "maybe param" "maybe type" "temp"
        (615043 'move' call_tmp[615040](141957 call - 1))
        unknown cnt[141959] "insert auto destroy"
        (491814 'init var' cnt[141959] call_tmp[615040])
        {
          unknown call_tmp[615047] "expr temp" "maybe param" "maybe type" "temp"
          (615050 'move' call_tmp[615047](354959 call _domsLock _mt[232] this[142359]))
          (141968 call(141964 call (partial) lock _mt[232] call_tmp[615047]))
          unknown call_tmp[615056] "expr temp" "maybe param" "maybe type" "temp"
          (615059 'move' call_tmp[615056](354964 call _doms _mt[232] this[142359]))
          (141977 call(141972 call (partial) remove _mt[232] call_tmp[615056]) x[141942])
          unknown call_tmp[615065] "expr temp" "maybe param" "maybe type" "temp"
          (615068 'move' call_tmp[615065](354971 call _doms _mt[232] this[142359]))
          unknown call_tmp[615072] "expr temp" "maybe param" "maybe type" "temp"
          (615075 'move' call_tmp[615072](141981 call size _mt[232] call_tmp[615065]))
          (141984 call = cnt[141959] call_tmp[615072])
          unknown call_tmp[615079] "expr temp" "maybe param" "maybe type" "temp"
          (615082 'move' call_tmp[615079](354976 call _free_when_no_doms _mt[232] this[142359]))
          unknown call_tmp[615084] "expr temp" "maybe param" "maybe type" "temp"
          (615087 'move' call_tmp[615084](141988 call ! call_tmp[615079]))
          unknown call_tmp[615089] "expr temp" "maybe param" "maybe type" "temp"
          (615092 'move' call_tmp[615089](141995 call _cond_test call_tmp[615084]))
          if call_tmp[615089]
          {
            (141992 call += cnt[141959] 1)
          }
          unknown call_tmp[615096] "expr temp" "maybe param" "maybe type" "temp"
          (615099 'move' call_tmp[615096](354982 call _domsLock _mt[232] this[142359]))
          (142005 call(142001 call (partial) unlock _mt[232] call_tmp[615096]))
        }
        (142010 call = count[141951] cnt[141959])
      }
    }
    unknown call_tmp[615103] "expr temp" "maybe param" "maybe type" "temp"
    (615106 'move' call_tmp[615103](142023 call == count[141951] 0))
    (470046 'move' ret[470040](470045 'coerce' call_tmp[615103] bool[10]))
    (470042 return ret[470040])
  }
  { scopeless type
    bool[10]
  }
  function BaseDist[142349].add_dom[142037](arg _mt[142365]:_MT[227], arg this[142363]:BaseDist[142349], arg x[142034]:unmanaged BaseDom[389803]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    {
      const tmp[142066] "const" "temp"
      unknown call_tmp[615108] "expr temp" "maybe param" "maybe type" "temp"
      (615111 'move' call_tmp[615108](142063 '_wide_get_locale' this[142363]))
      (142067 'move' tmp[142066](142064 'deref' call_tmp[615108]))
      {
        unknown call_tmp[615115] "expr temp" "maybe param" "maybe type" "temp"
        (615118 'move' call_tmp[615115](354992 call _domsLock _mt[232] this[142363]))
        (142045 call(142041 call (partial) lock _mt[232] call_tmp[615115]))
        unknown call_tmp[615124] "expr temp" "maybe param" "maybe type" "temp"
        (615127 'move' call_tmp[615124](354997 call _doms _mt[232] this[142363]))
        (142054 call(142049 call (partial) append _mt[232] call_tmp[615124]) x[142034])
        unknown call_tmp[615133] "expr temp" "maybe param" "maybe type" "temp"
        (615136 'move' call_tmp[615133](355003 call _domsLock _mt[232] this[142363]))
        (142061 call(142057 call (partial) unlock _mt[232] call_tmp[615133]))
      }
    }
    (470048 return _void[47])
  }
  function BaseDist[142349].dsiNewRectangularDom[142080](arg _mt[142369]:_MT[227], arg this[142367]:BaseDist[142349], param arg rank[142077]:int(64)[13], arg idxType[142082]:_any[170](?), param arg stridable[142085]:bool[10], arg inds[142088]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (142108 call compilerError "rectangular domains not supported by this distribution")
    (470050 return _void[47])
  }
  function BaseDist[142349].dsiNewAssociativeDom[142117](arg _mt[142373]:_MT[227], arg this[142371]:BaseDist[142349], arg idxType[142115]:_any[170](?), param arg parSafe[142120]:bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (142141 call compilerError "associative domains not supported by this distribution")
    (470052 return _void[47])
  }
  function BaseDist[142349].dsiNewAssociativeDom[142150](arg _mt[142377]:_MT[227], arg this[142375]:BaseDist[142349], arg idxType[142148]:_any[170](?), param arg parSafe[142153]:bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (142178 call compilerError "enumerated domains not supported by this distribution")
    (470054 return _void[47])
  }
  where {
    (142159 call isEnumType idxType[142148])
  }
  function BaseDist[142349].dsiNewOpaqueDom[142188](arg _mt[142381]:_MT[227], arg this[142379]:BaseDist[142349], arg idxType[142186]:_any[170](?), param arg parSafe[142191]:bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (142212 call compilerError "opaque domains not supported by this distribution")
    (470056 return _void[47])
  }
  function BaseDist[142349].dsiNewSparseDom[142223](arg _mt[142385]:_MT[227], arg this[142383]:BaseDist[142349], param arg rank[142220]:int(64)[13], arg idxType[142225]:_any[170](?), arg dom[142228]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (142249 call compilerError "sparse domains not supported by this distribution")
    (470058 return _void[47])
  }
  function BaseDist[142349].dsiSupportsPrivatization[142256](arg _mt[142389]:_MT[227], arg this[142387]:BaseDist[142349]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470062] "RVV" "param" "temp"
    (470067 'move' ret[470062](470066 'deref' 0))
    (470064 return ret[470062])
  }
  function BaseDist[142349].dsiRequiresPrivatization[142266](arg _mt[142393]:_MT[227], arg this[142391]:BaseDist[142349]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470071] "RVV" "param" "temp"
    (470076 'move' ret[470071](470075 'deref' 0))
    (470073 return ret[470071])
  }
  function BaseDist[142349].dsiDestroyDist[142276](arg _mt[142397]:_MT[227], arg this[142395]:BaseDist[142349]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (470078 return _void[47])
  }
  function BaseDist[142349].dsiDisplayRepresentation[142283](arg _mt[142401]:_MT[227], arg this[142399]:BaseDist[142349]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (142303 call writeln "<no way to display representation>")
    (470080 return _void[47])
  }
  function BaseDist[142349].trackDomains[142310](arg _mt[142405]:_MT[227], arg this[142403]:BaseDist[142349]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470084] "RVV" "param" "temp"
    (470089 'move' ret[470084](470088 'deref' 1))
    (470086 return ret[470084])
  }
  function BaseDist[142349].dsiTrackDomains[142320](arg _mt[142409]:_MT[227], arg this[142407]:BaseDist[142349]) : _unknown[43] "method" "primary method"
  {
    unknown ret[470093] "RVV" "temp"
    (470098 'move' ret[470093](470097 'deref' 1))
    (470095 return ret[470093])
  }
  function BaseDist[142349].singleton[142330](arg _mt[142413]:_MT[227], arg this[142411]:BaseDist[142349]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470102] "RVV" "param" "temp"
    (470107 'move' ret[470102](470106 'deref' 0))
    (470104 return ret[470102])
  }
  function BaseDist[142349].dsiIsLayout[142340](arg _mt[142417]:_MT[227], arg this[142415]:BaseDist[142349]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470111] "RVV" "param" "temp"
    (470116 'move' ret[470111](470115 'deref' 0))
    (470113 return ret[470111])
  }
  function BaseDist[142349].init[710999](arg _mt[711001]:_MT[227], arg this[711002]:BaseDist[142349], in arg _doms[711013] :
  (711016 call LinkedList[275404](?) unmanaged BaseDom[389803]) =
  _typeDefaultT[239], in arg _domsLock[711028]:chpl_LocalSpinlock[180469] =
  _typeDefaultT[239], in arg _free_when_no_doms[711041]:bool[10] =
  _typeDefaultT[239], in arg pid[711054]:int(64)[13] =
  (711087 'default init field' "BaseDist" "pid" int(64)[13] nullPid[111825])) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[711101] "temporary of super field" "temp"
    (711103 'move' super_tmp[711101](711100 '.v' this[711002] c"super"))
    (711012 call(711010 call (partial) init _mt[232] super_tmp[711101]))
    unknown tmp[711106] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[711136] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[711148] "expr temp" "maybe param" "maybe type" "temp"
      (711151 'move' call_tmp[711148](711108 '.v' this[711002] c"super"))
      (711140 'move' call_type_tmp[711136](711111 'typeof' call_tmp[711148]))
    }
    (711112 'move' tmp[711106] call_type_tmp[711136])
    unknown call_tmp[711153] "maybe param" "maybe type" "temp"
    (711156 'move' call_tmp[711153](711117 'cast' tmp[711106] this[711002]))
    unknown chpl__thisAsParent[711114] "insert auto destroy" "temp"
    (711144 'init var' chpl__thisAsParent[711114] call_tmp[711153] tmp[711106])
    (711120 'setcid' chpl__thisAsParent[711114])
    (711122 'init field' this[711002] c"_doms" _doms[711013])
    (711125 'init field' this[711002] c"_domsLock" _domsLock[711028])
    (711128 'init field' this[711002] c"_free_when_no_doms" _free_when_no_doms[711041])
    (711131 'init field' this[711002] c"pid" pid[711054])
    (711134 'setcid' this[711002])
    (711142 return _void[47])
  }
  function BaseDist[142349].super[718634](arg _mt[718636]:_MT[227], arg this[718638]:BaseDist[142349]) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718647] "RVV" "temp"
    unknown call_tmp[718654] "expr temp" "maybe param" "maybe type" "temp"
    (718657 'move' call_tmp[718654](718642 '.v' this[718638] c"super"))
    (718652 'move' ret[718647](718651 'deref' call_tmp[718654]))
    (718649 return ret[718647])
  }
  function BaseDist[142349]._doms[718659](arg _mt[718661]:_MT[227], arg this[718663]:BaseDist[142349]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718672] "RVV" "temp"
    unknown call_tmp[718679] "expr temp" "maybe param" "maybe type" "temp"
    (718682 'move' call_tmp[718679](718667 '.' this[718663] c"_doms"))
    (718677 'move' ret[718672](718676 'addr of' call_tmp[718679]))
    (718674 return ret[718672])
  }
  function BaseDist[142349]._domsLock[718684](arg _mt[718686]:_MT[227], arg this[718688]:BaseDist[142349]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718697] "RVV" "temp"
    unknown call_tmp[718704] "expr temp" "maybe param" "maybe type" "temp"
    (718707 'move' call_tmp[718704](718692 '.' this[718688] c"_domsLock"))
    (718702 'move' ret[718697](718701 'addr of' call_tmp[718704]))
    (718699 return ret[718697])
  }
  function BaseDist[142349]._free_when_no_doms[718709](arg _mt[718711]:_MT[227], arg this[718713]:BaseDist[142349]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718722] "RVV" "temp"
    unknown call_tmp[718729] "expr temp" "maybe param" "maybe type" "temp"
    (718732 'move' call_tmp[718729](718717 '.' this[718713] c"_free_when_no_doms"))
    (718727 'move' ret[718722](718726 'addr of' call_tmp[718729]))
    (718724 return ret[718722])
  }
  function BaseDist[142349].pid[718734](arg _mt[718736]:_MT[227], arg this[718738]:BaseDist[142349]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718747] "RVV" "temp"
    unknown call_tmp[718754] "expr temp" "maybe param" "maybe type" "temp"
    (718757 'move' call_tmp[718754](718742 '.' this[718738] c"pid"))
    (718752 'move' ret[718747](718751 'addr of' call_tmp[718754]))
    (718749 return ret[718747])
  }
  function BaseDist[142349].writeThis[718759](arg _mt[718763]:_MT[227], arg this[718761]:BaseDist[142349], arg f[718762]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (718768 call writeThisDefaultImpl f[718762] this[718761])
    (718772 return _void[47])
  }
  function BaseDist[142349].readThis[718774](arg _mt[718778]:_MT[227], arg this[718776]:BaseDist[142349], arg f[718777]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (718782 call readThisDefaultImpl f[718777] this[718776])
    (718787 return _void[47])
  }
  type BaseDist[142349] val super[331007]:object[253] "super class" unknown _doms[141811](141810 call LinkedList[275404](?) unmanaged BaseDom[389803]) val _domsLock[141815]:chpl_LocalSpinlock[180469] chpl_LocalSpinlock[180469] val _free_when_no_doms[141819]:bool[10] bool[10] val pid[141824]:int(64)[13] nullPid[111825] int(64)[13]
  type unmanaged BaseDist[389902]
  type unmanaged BaseDist?[389876]
  type anymanaged BaseDist?[389872](?)
  type anymanaged BaseDist[350867](?)
  function BaseDom[143244].init[142448](arg _mt[143248]:_MT[227], arg this[143246]:BaseDom[143244]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[436577] "temporary of super field" "temp"
    (436585 'move' super_tmp[436577](436578 '.v' this[143246] c"super"))
    (436581 call init _mt[232] super_tmp[436577])
    unknown tmp[436512] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443697] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[615140] "expr temp" "maybe param" "maybe type" "temp"
      (615143 'move' call_tmp[615140](436514 '.v' this[143246] c"super"))
      (443701 'move' call_type_tmp[443697](436517 'typeof' call_tmp[615140]))
    }
    (436518 'move' tmp[436512] call_type_tmp[443697])
    unknown call_tmp[615145] "maybe param" "maybe type" "temp"
    (615148 'move' call_tmp[615145](436523 'cast' tmp[436512] this[143246]))
    unknown chpl__thisAsParent[436520] "insert auto destroy" "temp"
    (491816 'init var' chpl__thisAsParent[436520] call_tmp[615145] tmp[436512])
    (436526 'setcid' chpl__thisAsParent[436520])
    unknown tmp[436529] "temp"
    unknown call_tmp[615150] "expr temp" "maybe param" "maybe type" "temp"
    (615153 'move' call_tmp[615150](436532 call LinkedList[275404](?) unmanaged BaseArr[389867]))
    (436534 'default init var' tmp[436529] call_tmp[615150])
    (436536 '.=' this[143246] c"_arrs" tmp[436529])
    val tmp[436540]:int(64)[13] "temp"
    (436543 'default init var' tmp[436540] int(64)[13])
    (436545 '.=' this[143246] c"_arrs_containing_dom" tmp[436540])
    val tmp[436549]:chpl_LocalSpinlock[180469] "temp"
    (436552 'default init var' tmp[436549] chpl_LocalSpinlock[180469])
    (436554 '.=' this[143246] c"_arrsLock" tmp[436549])
    val tmp[436558]:bool[10] "temp"
    (436561 'default init var' tmp[436558] bool[10])
    (436563 '.=' this[143246] c"_free_when_no_arrs" tmp[436558])
    unknown tmp[436568] "temp"
    (436571 'init var' tmp[436568] nullPid[111825] int(64)[13])
    (436573 'init field' this[143246] c"pid" tmp[436568])
    (436588 'setcid' this[143246])
    (470118 return _void[47])
  }
  function BaseDom[143244].deinit[142455](arg _mt[143252]:_MT[227], arg this[143250]:BaseDom[143244]) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470120 return _void[47])
  }
  function BaseDom[143244].dsiMyDist[142462](arg _mt[143256]:_MT[227], arg this[143254]:BaseDom[143244]) : _unknown[43] "method" "primary method" "unsafe"
  {
    unknown ret[470124] "RVV" "temp"
    (142484 call halt "internal error: dsiMyDist is not implemented")
    unknown ret[142489] "insert auto destroy"
    (491818 'default init var' ret[142489] unmanaged BaseDist[389902])
    (470130 'move' ret[470124](470129 'coerce' ret[142489] unmanaged BaseDist[389902]))
    (470126 return ret[470124])
  }
  { scopeless type
    unmanaged BaseDist[389902]
  }
  function BaseDom[143244].remove[142500](arg _mt[143260]:_MT[227], arg this[143258]:BaseDom[143244]) : _unknown[43] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[470134] "RVV" "temp"
    unknown call_tmp[615157] "expr temp" "maybe param" "maybe type" "temp"
    (615160 'move' call_tmp[615157](142514 call(355020 call (partial) dsiMyDist _mt[232] this[143258])))
    unknown call_tmp[615164] "expr temp" "maybe param" "maybe type" "temp"
    (615167 'move' call_tmp[615164](142521 call(142517 call (partial) dsiTrackDomains _mt[232] call_tmp[615157])))
    unknown call_tmp[615171] "expr temp" "maybe param" "maybe type" "temp"
    (615174 'move' call_tmp[615171](142524 call(355026 call (partial) dsiLinksDistribution _mt[232] this[143258])))
    unknown call_tmp[615176] "expr temp" "maybe param" "maybe type" "temp"
    (615179 'move' call_tmp[615176](142525 call == call_tmp[615164] call_tmp[615171]))
    (142528 call assert call_tmp[615176])
    unknown ret_dom[142535] "insert auto destroy"
    (491820 'init var' ret_dom[142535] nil[38] unmanaged BaseDom?[389887])
    unknown ret_dist[142542] "insert auto destroy"
    (491822 'init var' ret_dist[142542] nil[38] unmanaged BaseDist?[389876])
    unknown call_tmp[615183] "maybe param" "maybe type" "temp"
    (615186 'move' call_tmp[615183](142547 call(355032 call (partial) dsiMyDist _mt[232] this[143258])))
    unknown dist[142548] "insert auto destroy"
    (491824 'init var' dist[142548] call_tmp[615183])
    unknown free_dom[142552] "insert auto destroy"
    (491826 'init var' free_dom[142552] 0)
    unknown remove_dist[142556] "insert auto destroy"
    (491828 'init var' remove_dist[142556] 0)
    {
      const tmp[142640] "const" "temp"
      unknown call_tmp[615188] "expr temp" "maybe param" "maybe type" "temp"
      (615191 'move' call_tmp[615188](142637 '_wide_get_locale' this[143258]))
      (142641 'move' tmp[142640](142638 'deref' call_tmp[615188]))
      {
        unknown arr_count[142561] "insert auto destroy"
        (491830 'init var' arr_count[142561] 0)
        {
          unknown call_tmp[615195] "expr temp" "maybe param" "maybe type" "temp"
          (615198 'move' call_tmp[615195](355040 call _arrsLock _mt[232] this[143258]))
          (142570 call(142566 call (partial) lock _mt[232] call_tmp[615195]))
          unknown call_tmp[615204] "expr temp" "maybe param" "maybe type" "temp"
          (615207 'move' call_tmp[615204](355046 call _arrs _mt[232] this[143258]))
          unknown call_tmp[615211] "expr temp" "maybe param" "maybe type" "temp"
          (615214 'move' call_tmp[615211](142575 call size _mt[232] call_tmp[615204]))
          (142578 call = arr_count[142561] call_tmp[615211])
          unknown call_tmp[615218] "expr temp" "maybe param" "maybe type" "temp"
          (615221 'move' call_tmp[615218](355054 call _arrs_containing_dom _mt[232] this[143258]))
          (142583 call += arr_count[142561] call_tmp[615218])
          unknown call_tmp[615225] "expr temp" "maybe param" "maybe type" "temp"
          (615228 'move' call_tmp[615225](355059 call _free_when_no_arrs _mt[232] this[143258]))
          (142588 call = call_tmp[615225] 1)
          unknown call_tmp[615232] "expr temp" "maybe param" "maybe type" "temp"
          (615235 'move' call_tmp[615232](355064 call _arrsLock _mt[232] this[143258]))
          (142596 call(142592 call (partial) unlock _mt[232] call_tmp[615232]))
        }
        unknown call_tmp[615239] "expr temp" "maybe param" "maybe type" "temp"
        (615242 'move' call_tmp[615239](142601 call == arr_count[142561] 0))
        unknown call_tmp[615244] "expr temp" "maybe param" "maybe type" "temp"
        (615247 'move' call_tmp[615244](142633 call _cond_test call_tmp[615239]))
        if call_tmp[615244]
        {
          (142605 call = free_dom[142552] 1)
          unknown call_tmp[615251] "expr temp" "maybe param" "maybe type" "temp"
          (615254 'move' call_tmp[615251](142611 call(355070 call (partial) dsiLinksDistribution _mt[232] this[143258])))
          unknown call_tmp[615256] "expr temp" "maybe param" "maybe type" "temp"
          (615259 'move' call_tmp[615256](142629 call _cond_test call_tmp[615251]))
          if call_tmp[615256]
          {
            unknown call_tmp[615263] "expr temp" "maybe param" "maybe type" "temp"
            (615266 'move' call_tmp[615263](142622 call _to_unmanaged this[143258]))
            unknown call_tmp[615268] "expr temp" "maybe param" "maybe type" "temp"
            (615271 'move' call_tmp[615268](142624 call(142616 call (partial) remove_dom _mt[232] dist[142548]) call_tmp[615263]))
            (142625 call = remove_dist[142556] call_tmp[615268])
          }
        }
      }
    }
    unknown call_tmp[615273] "expr temp" "maybe param" "maybe type" "temp"
    (615276 'move' call_tmp[615273](142654 call _cond_test free_dom[142552]))
    if call_tmp[615273]
    {
      unknown call_tmp[615278] "expr temp" "maybe param" "maybe type" "temp"
      (615281 'move' call_tmp[615278](142650 call _to_unmanaged this[143258]))
      (142651 call = ret_dom[142535] call_tmp[615278])
    }
    unknown call_tmp[615283] "expr temp" "maybe param" "maybe type" "temp"
    (615286 'move' call_tmp[615283](142665 call _cond_test remove_dist[142556]))
    if call_tmp[615283]
    {
      (142662 call = ret_dist[142542] dist[142548])
    }
    unknown call_tmp[615288] "expr temp" "maybe param" "maybe type" "temp"
    (615291 'move' call_tmp[615288](142673 call _build_tuple ret_dom[142535] ret_dist[142542]))
    unknown call_tmp[615293] "expr temp" "maybe param" "maybe type" "temp"
    (615296 'move' call_tmp[615293](470139 call _build_tuple unmanaged BaseDom?[389887] unmanaged BaseDist?[389876]))
    (470143 'move' ret[470134](470142 'coerce' call_tmp[615288] call_tmp[615293]))
    (470136 return ret[470134])
  }
  { scopeless type
    (142509 call _build_tuple unmanaged BaseDom?[389887] unmanaged BaseDist?[389876])
  }
  function BaseDom[143244].remove_arr[142687](arg _mt[143264]:_MT[227], arg this[143262]:BaseDom[143244], arg x[142684]:unmanaged BaseArr[389867], param arg rmFromList[142690] :
  1 =
  1) : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[470147] "RVV" "temp"
    unknown call_tmp[615298] "maybe param" "maybe type" "temp"
    (615301 'move' call_tmp[615298](142695 call - 1))
    unknown count[142697] "insert auto destroy"
    (491832 'init var' count[142697] call_tmp[615298])
    {
      const tmp[142779] "const" "temp"
      unknown call_tmp[615303] "expr temp" "maybe param" "maybe type" "temp"
      (615306 'move' call_tmp[615303](142776 '_wide_get_locale' this[143262]))
      (142780 'move' tmp[142779](142777 'deref' call_tmp[615303]))
      {
        unknown call_tmp[615308] "maybe param" "maybe type" "temp"
        (615311 'move' call_tmp[615308](142703 call - 1))
        unknown cnt[142705] "insert auto destroy"
        (491834 'init var' cnt[142705] call_tmp[615308])
        {
          unknown call_tmp[615315] "expr temp" "maybe param" "maybe type" "temp"
          (615318 'move' call_tmp[615315](355088 call _arrsLock _mt[232] this[143262]))
          (142714 call(142710 call (partial) lock _mt[232] call_tmp[615315]))
          unknown call_tmp[615322] "expr temp" "maybe param" "maybe type" "temp"
          (615325 'move' call_tmp[615322](142731 call _cond_test rmFromList[142690]))
          if call_tmp[615322]
          {
            unknown call_tmp[615329] "expr temp" "maybe param" "maybe type" "temp"
            (615332 'move' call_tmp[615329](355094 call _arrs _mt[232] this[143262]))
            (142724 call(142719 call (partial) remove _mt[232] call_tmp[615329]) x[142684])
          }
          {
            unknown call_tmp[615338] "expr temp" "maybe param" "maybe type" "temp"
            (615341 'move' call_tmp[615338](355100 call _arrs_containing_dom _mt[232] this[143262]))
            (142728 call -= call_tmp[615338] 1)
          }
          unknown call_tmp[615345] "expr temp" "maybe param" "maybe type" "temp"
          (615348 'move' call_tmp[615345](355106 call _arrs _mt[232] this[143262]))
          unknown call_tmp[615352] "expr temp" "maybe param" "maybe type" "temp"
          (615355 'move' call_tmp[615352](142739 call size _mt[232] call_tmp[615345]))
          (142742 call = cnt[142705] call_tmp[615352])
          unknown call_tmp[615359] "expr temp" "maybe param" "maybe type" "temp"
          (615362 'move' call_tmp[615359](355112 call _arrs_containing_dom _mt[232] this[143262]))
          (142747 call += cnt[142705] call_tmp[615359])
          unknown call_tmp[615366] "expr temp" "maybe param" "maybe type" "temp"
          (615369 'move' call_tmp[615366](355117 call _free_when_no_arrs _mt[232] this[143262]))
          unknown call_tmp[615371] "expr temp" "maybe param" "maybe type" "temp"
          (615374 'move' call_tmp[615371](142751 call ! call_tmp[615366]))
          unknown call_tmp[615376] "expr temp" "maybe param" "maybe type" "temp"
          (615379 'move' call_tmp[615376](142758 call _cond_test call_tmp[615371]))
          if call_tmp[615376]
          {
            (142755 call += cnt[142705] 1)
          }
          unknown call_tmp[615383] "expr temp" "maybe param" "maybe type" "temp"
          (615386 'move' call_tmp[615383](355123 call _arrsLock _mt[232] this[143262]))
          (142768 call(142764 call (partial) unlock _mt[232] call_tmp[615383]))
        }
        (142773 call = count[142697] cnt[142705])
      }
    }
    unknown call_tmp[615390] "expr temp" "maybe param" "maybe type" "temp"
    (615393 'move' call_tmp[615390](142786 call == count[142697] 0))
    (470153 'move' ret[470147](470152 'coerce' call_tmp[615390] bool[10]))
    (470149 return ret[470147])
  }
  { scopeless type
    bool[10]
  }
  function BaseDom[143244].add_arr[142800](arg _mt[143268]:_MT[227], arg this[143266]:BaseDom[143244], arg x[142797]:unmanaged BaseArr[389867], param arg locking[142803] :
  1 =
  1, param arg addToList[142807] :
  1 =
  1) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    {
      const tmp[142861] "const" "temp"
      unknown call_tmp[615395] "expr temp" "maybe param" "maybe type" "temp"
      (615398 'move' call_tmp[615395](142858 '_wide_get_locale' this[143266]))
      (142862 'move' tmp[142861](142859 'deref' call_tmp[615395]))
      {
        unknown call_tmp[615400] "expr temp" "maybe param" "maybe type" "temp"
        (615403 'move' call_tmp[615400](142819 call _cond_test locking[142803]))
        if call_tmp[615400]
        {
          unknown call_tmp[615407] "expr temp" "maybe param" "maybe type" "temp"
          (615410 'move' call_tmp[615407](355134 call _arrsLock _mt[232] this[143266]))
          (142817 call(142813 call (partial) lock _mt[232] call_tmp[615407]))
        }
        unknown call_tmp[615414] "expr temp" "maybe param" "maybe type" "temp"
        (615417 'move' call_tmp[615414](142839 call _cond_test addToList[142807]))
        if call_tmp[615414]
        {
          unknown call_tmp[615421] "expr temp" "maybe param" "maybe type" "temp"
          (615424 'move' call_tmp[615421](355140 call _arrs _mt[232] this[143266]))
          (142832 call(142827 call (partial) append _mt[232] call_tmp[615421]) x[142797])
        }
        {
          unknown call_tmp[615430] "expr temp" "maybe param" "maybe type" "temp"
          (615433 'move' call_tmp[615430](355146 call _arrs_containing_dom _mt[232] this[143266]))
          (142836 call += call_tmp[615430] 1)
        }
        unknown call_tmp[615435] "expr temp" "maybe param" "maybe type" "temp"
        (615438 'move' call_tmp[615435](142853 call _cond_test locking[142803]))
        if call_tmp[615435]
        {
          unknown call_tmp[615442] "expr temp" "maybe param" "maybe type" "temp"
          (615445 'move' call_tmp[615442](355152 call _arrsLock _mt[232] this[143266]))
          (142851 call(142847 call (partial) unlock _mt[232] call_tmp[615442]))
        }
      }
    }
    (470155 return _void[47])
  }
  function BaseDom[143244].remove_containing_arr[142876](arg _mt[143272]:_MT[227], arg this[143270]:BaseDom[143244], arg x[142873]:unmanaged BaseArr[389867]) : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[470159] "RVV" "temp"
    unknown call_tmp[615449] "maybe param" "maybe type" "temp"
    (615452 'move' call_tmp[615449](142880 call - 1))
    unknown count[142882] "insert auto destroy"
    (491836 'init var' count[142882] call_tmp[615449])
    {
      const tmp[142923] "const" "temp"
      unknown call_tmp[615454] "expr temp" "maybe param" "maybe type" "temp"
      (615457 'move' call_tmp[615454](142920 '_wide_get_locale' this[143270]))
      (142924 'move' tmp[142923](142921 'deref' call_tmp[615454]))
      {
        unknown call_tmp[615461] "expr temp" "maybe param" "maybe type" "temp"
        (615464 'move' call_tmp[615461](355159 call _arrsLock _mt[232] this[143270]))
        (142892 call(142888 call (partial) lock _mt[232] call_tmp[615461]))
        unknown call_tmp[615470] "expr temp" "maybe param" "maybe type" "temp"
        (615473 'move' call_tmp[615470](355164 call _arrs_containing_dom _mt[232] this[143270]))
        (142897 call -= call_tmp[615470] 1)
        unknown call_tmp[615477] "expr temp" "maybe param" "maybe type" "temp"
        (615480 'move' call_tmp[615477](355170 call _arrs _mt[232] this[143270]))
        unknown call_tmp[615484] "expr temp" "maybe param" "maybe type" "temp"
        (615487 'move' call_tmp[615484](142902 call size _mt[232] call_tmp[615477]))
        (142905 call = count[142882] call_tmp[615484])
        unknown call_tmp[615491] "expr temp" "maybe param" "maybe type" "temp"
        (615494 'move' call_tmp[615491](355176 call _arrs_containing_dom _mt[232] this[143270]))
        (142910 call += count[142882] call_tmp[615491])
        unknown call_tmp[615498] "expr temp" "maybe param" "maybe type" "temp"
        (615501 'move' call_tmp[615498](355181 call _arrsLock _mt[232] this[143270]))
        (142918 call(142914 call (partial) unlock _mt[232] call_tmp[615498]))
      }
    }
    (470165 'move' ret[470159](470164 'coerce' count[142882] int(64)[13]))
    (470161 return ret[470159])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseDom[143244].add_containing_arr[142941](arg _mt[143276]:_MT[227], arg this[143274]:BaseDom[143244], arg x[142938]:unmanaged BaseArr[389867]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    {
      const tmp[142967] "const" "temp"
      unknown call_tmp[615505] "expr temp" "maybe param" "maybe type" "temp"
      (615508 'move' call_tmp[615505](142964 '_wide_get_locale' this[143274]))
      (142968 'move' tmp[142967](142965 'deref' call_tmp[615505]))
      {
        unknown call_tmp[615512] "expr temp" "maybe param" "maybe type" "temp"
        (615515 'move' call_tmp[615512](355189 call _arrsLock _mt[232] this[143274]))
        (142949 call(142945 call (partial) lock _mt[232] call_tmp[615512]))
        unknown call_tmp[615521] "expr temp" "maybe param" "maybe type" "temp"
        (615524 'move' call_tmp[615521](355194 call _arrs_containing_dom _mt[232] this[143274]))
        (142954 call += call_tmp[615521] 1)
        unknown call_tmp[615528] "expr temp" "maybe param" "maybe type" "temp"
        (615531 'move' call_tmp[615528](355199 call _arrsLock _mt[232] this[143274]))
        (142962 call(142958 call (partial) unlock _mt[232] call_tmp[615528]))
      }
    }
    (470167 return _void[47])
  }
  function BaseDom[143244]._backupArrays[142977](arg _mt[143280]:_MT[227], arg this[143278]:BaseDom[143244]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[142990] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[142991] "expr temp" "temp"
      unknown call_tmp[615537] "expr temp" "maybe param" "maybe type" "temp"
      (615540 'move' call_tmp[615537](355204 call _arrs _mt[232] this[143278]))
      (143000 'move' _iterator[142991](142998 call _getIterator call_tmp[615537]))
      Defer
      {
        {
          (143016 call _freeIterator _iterator[142991])
        }
      }
      { scopeless type
        (143005 'move' _indexOfInterest[142990](143002 call iteratorIndex _iterator[142991]))
      }
      ForLoop
      {
        unknown arr[143009] "index var" "insert auto destroy"
        (143011 'move' arr[143009] _indexOfInterest[142990])
        (142988 call(142984 call (partial) _backupArray _mt[232] arr[143009]))
        label _continueLabel[142995]
        _indexOfInterest[142990]
        _iterator[142991]
      }
      label _breakLabel[142996]
    }
    (470169 return _void[47])
  }
  function BaseDom[143244]._removeArrayBackups[143028](arg _mt[143284]:_MT[227], arg this[143282]:BaseDom[143244]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[143041] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[143042] "expr temp" "temp"
      unknown call_tmp[615546] "expr temp" "maybe param" "maybe type" "temp"
      (615549 'move' call_tmp[615546](355210 call _arrs _mt[232] this[143282]))
      (143051 'move' _iterator[143042](143049 call _getIterator call_tmp[615546]))
      Defer
      {
        {
          (143067 call _freeIterator _iterator[143042])
        }
      }
      { scopeless type
        (143056 'move' _indexOfInterest[143041](143053 call iteratorIndex _iterator[143042]))
      }
      ForLoop
      {
        unknown arr[143060] "index var" "insert auto destroy"
        (143062 'move' arr[143060] _indexOfInterest[143041])
        (143039 call(143035 call (partial) _removeArrayBackup _mt[232] arr[143060]))
        label _continueLabel[143046]
        _indexOfInterest[143041]
        _iterator[143042]
      }
      label _breakLabel[143047]
    }
    (470171 return _void[47])
  }
  function BaseDom[143244]._preserveArrayElements[143081](arg _mt[143288]:_MT[227], arg this[143286]:BaseDom[143244], arg oldslot[143079]:_any[170](?), arg newslot[143083]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[143098] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[143099] "expr temp" "temp"
      unknown call_tmp[615555] "expr temp" "maybe param" "maybe type" "temp"
      (615558 'move' call_tmp[615555](355216 call _arrs _mt[232] this[143286]))
      (143108 'move' _iterator[143099](143106 call _getIterator call_tmp[615555]))
      Defer
      {
        {
          (143124 call _freeIterator _iterator[143099])
        }
      }
      { scopeless type
        (143113 'move' _indexOfInterest[143098](143110 call iteratorIndex _iterator[143099]))
      }
      ForLoop
      {
        unknown arr[143117] "index var" "insert auto destroy"
        (143119 'move' arr[143117] _indexOfInterest[143098])
        (143096 call(143090 call (partial) _preserveArrayElement _mt[232] arr[143117]) oldslot[143079] newslot[143083])
        label _continueLabel[143103]
        _indexOfInterest[143098]
        _iterator[143099]
      }
      label _breakLabel[143104]
    }
    (470173 return _void[47])
  }
  function BaseDom[143244].dsiSupportsPrivatization[143136](arg _mt[143292]:_MT[227], arg this[143290]:BaseDom[143244]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470177] "RVV" "param" "temp"
    (470182 'move' ret[470177](470181 'deref' 0))
    (470179 return ret[470177])
  }
  function BaseDom[143244].dsiRequiresPrivatization[143146](arg _mt[143296]:_MT[227], arg this[143294]:BaseDom[143244]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470186] "RVV" "param" "temp"
    (470191 'move' ret[470186](470190 'deref' 0))
    (470188 return ret[470186])
  }
  function BaseDom[143244].linksDistribution[143156](arg _mt[143300]:_MT[227], arg this[143298]:BaseDom[143244]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470195] "RVV" "param" "temp"
    (470200 'move' ret[470195](470199 'deref' 1))
    (470197 return ret[470195])
  }
  function BaseDom[143244].dsiLinksDistribution[143166](arg _mt[143304]:_MT[227], arg this[143302]:BaseDom[143244]) : _unknown[43] "method" "primary method"
  {
    unknown ret[470204] "RVV" "temp"
    (470209 'move' ret[470204](470208 'deref' 1))
    (470206 return ret[470204])
  }
  function BaseDom[143244].dsiDestroyDom[143176](arg _mt[143308]:_MT[227], arg this[143306]:BaseDom[143244]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (470211 return _void[47])
  }
  function BaseDom[143244].dsiDisplayRepresentation[143183](arg _mt[143312]:_MT[227], arg this[143310]:BaseDom[143244]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (143188 call writeln "<no way to display representation>")
    (470213 return _void[47])
  }
  function anymanaged anynil BaseDom[389611](?).isDefaultRectangular[143195](arg _mt[143316]:_MT[227], arg this[143314]:anymanaged anynil BaseDom[389611](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470217] "RVV" "param" "temp"
    (470222 'move' ret[470217](470221 'deref' 0))
    (470219 return ret[470217])
  }
  function BaseDom[143244].isDefaultRectangular[143205](arg _mt[143320]:_MT[227], arg this[143318]:BaseDom[143244]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470226] "RVV" "param" "temp"
    (470231 'move' ret[470226](470230 'deref' 0))
    (470228 return ret[470226])
  }
  function BaseDom[143244].isSliceDomainView[143215](arg _mt[143324]:_MT[227], arg this[143322]:BaseDom[143244]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470235] "RVV" "param" "temp"
    (470240 'move' ret[470235](470239 'deref' 0))
    (470237 return ret[470235])
  }
  function BaseDom[143244].isRankChangeDomainView[143225](arg _mt[143328]:_MT[227], arg this[143326]:BaseDom[143244]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470244] "RVV" "param" "temp"
    (470249 'move' ret[470244](470248 'deref' 0))
    (470246 return ret[470244])
  }
  function BaseDom[143244].isReindexDomainView[143235](arg _mt[143332]:_MT[227], arg this[143330]:BaseDom[143244]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470253] "RVV" "param" "temp"
    (470258 'move' ret[470253](470257 'deref' 0))
    (470255 return ret[470253])
  }
  function BaseDom[143244].super[718789](arg _mt[718791]:_MT[227], arg this[718793]:BaseDom[143244]) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718802] "RVV" "temp"
    unknown call_tmp[718809] "expr temp" "maybe param" "maybe type" "temp"
    (718812 'move' call_tmp[718809](718797 '.v' this[718793] c"super"))
    (718807 'move' ret[718802](718806 'deref' call_tmp[718809]))
    (718804 return ret[718802])
  }
  function BaseDom[143244]._arrs[718814](arg _mt[718816]:_MT[227], arg this[718818]:BaseDom[143244]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718827] "RVV" "temp"
    unknown call_tmp[718834] "expr temp" "maybe param" "maybe type" "temp"
    (718837 'move' call_tmp[718834](718822 '.' this[718818] c"_arrs"))
    (718832 'move' ret[718827](718831 'addr of' call_tmp[718834]))
    (718829 return ret[718827])
  }
  function BaseDom[143244]._arrs_containing_dom[718839](arg _mt[718841]:_MT[227], arg this[718843]:BaseDom[143244]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718852] "RVV" "temp"
    unknown call_tmp[718859] "expr temp" "maybe param" "maybe type" "temp"
    (718862 'move' call_tmp[718859](718847 '.' this[718843] c"_arrs_containing_dom"))
    (718857 'move' ret[718852](718856 'addr of' call_tmp[718859]))
    (718854 return ret[718852])
  }
  function BaseDom[143244]._arrsLock[718864](arg _mt[718866]:_MT[227], arg this[718868]:BaseDom[143244]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718877] "RVV" "temp"
    unknown call_tmp[718884] "expr temp" "maybe param" "maybe type" "temp"
    (718887 'move' call_tmp[718884](718872 '.' this[718868] c"_arrsLock"))
    (718882 'move' ret[718877](718881 'addr of' call_tmp[718884]))
    (718879 return ret[718877])
  }
  function BaseDom[143244]._free_when_no_arrs[718889](arg _mt[718891]:_MT[227], arg this[718893]:BaseDom[143244]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718902] "RVV" "temp"
    unknown call_tmp[718909] "expr temp" "maybe param" "maybe type" "temp"
    (718912 'move' call_tmp[718909](718897 '.' this[718893] c"_free_when_no_arrs"))
    (718907 'move' ret[718902](718906 'addr of' call_tmp[718909]))
    (718904 return ret[718902])
  }
  function BaseDom[143244].pid[718914](arg _mt[718916]:_MT[227], arg this[718918]:BaseDom[143244]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718927] "RVV" "temp"
    unknown call_tmp[718934] "expr temp" "maybe param" "maybe type" "temp"
    (718937 'move' call_tmp[718934](718922 '.' this[718918] c"pid"))
    (718932 'move' ret[718927](718931 'addr of' call_tmp[718934]))
    (718929 return ret[718927])
  }
  function BaseDom[143244].writeThis[718939](arg _mt[718943]:_MT[227], arg this[718941]:BaseDom[143244], arg f[718942]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (718948 call writeThisDefaultImpl f[718942] this[718941])
    (718952 return _void[47])
  }
  function BaseDom[143244].readThis[718954](arg _mt[718958]:_MT[227], arg this[718956]:BaseDom[143244], arg f[718957]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (718962 call readThisDefaultImpl f[718957] this[718956])
    (718967 return _void[47])
  }
  type BaseDom[143244] val super[331011]:object[253] "super class" unknown _arrs[142426](142425 call LinkedList[275404](?) unmanaged BaseArr[389867]) val _arrs_containing_dom[142430]:int(64)[13] int(64)[13] val _arrsLock[142434]:chpl_LocalSpinlock[180469] chpl_LocalSpinlock[180469] val _free_when_no_arrs[142438]:bool[10] bool[10] val pid[142443]:int(64)[13] nullPid[111825] int(64)[13]
  type unmanaged BaseDom?[389887]
  type anymanaged BaseDom?[389883](?)
  type unmanaged BaseDom[389803]
  type anymanaged anynil BaseDom[389611](?)
  type anymanaged BaseDom[339776](?)
  function BaseRectangularDom[143416](?).getBaseArrType[143351](arg _mt[143420]:_MT[227], arg this[143418]:BaseRectangularDom[143416](?)) type : _unknown[43] "method" "primary method"
  {
    unknown ret[470262] "RVV" "temp" "type variable"
    unknown call_tmp[615564] "expr temp" "maybe param" "maybe type" "temp"
    (615567 'move' call_tmp[615564](355228 call rank _mt[232] this[143418]))
    unknown call_tmp[615571] "expr temp" "maybe param" "maybe type" "temp"
    (615574 'move' call_tmp[615571](355233 call idxType _mt[232] this[143418]))
    unknown call_tmp[615578] "expr temp" "maybe param" "maybe type" "temp"
    (615581 'move' call_tmp[615578](355238 call stridable _mt[232] this[143418]))
    unknown call_tmp[615583] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (615586 'move' call_tmp[615583](691447 'new' anymanaged BaseArrOverRectangularDom[355223](?)(rank = call_tmp[615564])(idxType = call_tmp[615571])(stridable = call_tmp[615578])(_chpl_manager = unmanaged[209](?))))
    unknown tmp[143364] "insert auto destroy"
    (491838 'init var' tmp[143364] call_tmp[615583])
    unknown call_tmp[615588] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (615591 'move' call_tmp[615588](143369 'typeof' tmp[143364]))
    (470267 'move' ret[470262](470266 'deref' call_tmp[615588]))
    (470264 return ret[470262])
  }
  function BaseRectangularDom[143416](?).deinit[143376](arg _mt[143424]:_MT[227], arg this[143422]:BaseRectangularDom[143416](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470269 return _void[47])
  }
  function BaseRectangularDom[143416](?).dsiAdd[143385](arg _mt[143428]:_MT[227], arg this[143426]:BaseRectangularDom[143416](?), arg x[143383]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[470273] "RVV" "temp"
    (143390 call compilerError "Cannot add indices to a rectangular domain")
    (470278 'move' ret[470273](470277 'deref' 0))
    (470275 return ret[470273])
  }
  function BaseRectangularDom[143416](?).dsiRemove[143402](arg _mt[143432]:_MT[227], arg this[143430]:BaseRectangularDom[143416](?), arg x[143400]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[470282] "RVV" "temp"
    (143407 call compilerError "Cannot remove indices from a rectangular domain")
    (470287 'move' ret[470282](470286 'deref' 0))
    (470284 return ret[470282])
  }
  function BaseRectangularDom[143416](?).super[718969](arg _mt[718971]:_MT[227], arg this[718973]:BaseRectangularDom[143416](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[718982] "RVV" "temp"
    unknown call_tmp[718989] "expr temp" "maybe param" "maybe type" "temp"
    (718992 'move' call_tmp[718989](718977 '.v' this[718973] c"super"))
    (718987 'move' ret[718982](718986 'deref' call_tmp[718989]))
    (718984 return ret[718982])
  }
  function BaseRectangularDom[143416](?).rank[718994](arg _mt[718996]:_MT[227], arg this[718998]:BaseRectangularDom[143416](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719015] "RVV" "param" "temp"
    unknown call_tmp[719029] "expr temp" "maybe param" "maybe type" "temp"
    (719032 'move' call_tmp[719029](719003 'is bound' this[718998] c"rank"))
    if call_tmp[719029]
    {
      unknown call_tmp[719034] "expr temp" "maybe param" "maybe type" "temp"
      (719037 'move' call_tmp[719034](719002 '.' this[718998] c"rank"))
      (719020 'move' ret[719015](719019 'deref' call_tmp[719034]))
      gotoReturn _end_rank[719013] _end_rank[719013]
    }
    {
      (719025 'move' ret[719015](719024 'deref' ?[249]))
      gotoReturn _end_rank[719013] _end_rank[719013]
    }
    label _end_rank[719013]
    (719017 return ret[719015])
  }
  function anymanaged anynil BaseRectangularDom[719044](?).rank[719039](arg _mt[719041]:_MT[227], arg this[719046]:anymanaged anynil BaseRectangularDom[719044](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719063] "RVV" "param" "temp"
    unknown call_tmp[719077] "expr temp" "maybe param" "maybe type" "temp"
    (719080 'move' call_tmp[719077](719051 'is bound' this[719046] c"rank"))
    if call_tmp[719077]
    {
      unknown call_tmp[719082] "expr temp" "maybe param" "maybe type" "temp"
      (719085 'move' call_tmp[719082](719050 '.' this[719046] c"rank"))
      (719068 'move' ret[719063](719067 'deref' call_tmp[719082]))
      gotoReturn _end_rank[719061] _end_rank[719061]
    }
    {
      (719073 'move' ret[719063](719072 'deref' ?[249]))
      gotoReturn _end_rank[719061] _end_rank[719061]
    }
    label _end_rank[719061]
    (719065 return ret[719063])
  }
  function BaseRectangularDom[143416](?).idxType[719087](arg _mt[719089]:_MT[227], arg this[719091]:BaseRectangularDom[143416](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719108] "RVV" "temp" "type variable"
    unknown call_tmp[719122] "expr temp" "maybe param" "maybe type" "temp"
    (719125 'move' call_tmp[719122](719096 'is bound' this[719091] c"idxType"))
    if call_tmp[719122]
    {
      unknown call_tmp[719127] "expr temp" "maybe param" "maybe type" "temp"
      (719130 'move' call_tmp[719127](719095 '.v' this[719091] c"idxType"))
      (719113 'move' ret[719108](719112 'deref' call_tmp[719127]))
      gotoReturn _end_idxType[719106] _end_idxType[719106]
    }
    {
      (719118 'move' ret[719108](719117 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[719106] _end_idxType[719106]
    }
    label _end_idxType[719106]
    (719110 return ret[719108])
  }
  function anymanaged anynil BaseRectangularDom[719044](?).idxType[719132](arg _mt[719134]:_MT[227], arg this[719136]:anymanaged anynil BaseRectangularDom[719044](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719153] "RVV" "temp" "type variable"
    unknown call_tmp[719167] "expr temp" "maybe param" "maybe type" "temp"
    (719170 'move' call_tmp[719167](719141 'is bound' this[719136] c"idxType"))
    if call_tmp[719167]
    {
      unknown call_tmp[719172] "expr temp" "maybe param" "maybe type" "temp"
      (719175 'move' call_tmp[719172](719140 '.v' this[719136] c"idxType"))
      (719158 'move' ret[719153](719157 'deref' call_tmp[719172]))
      gotoReturn _end_idxType[719151] _end_idxType[719151]
    }
    {
      (719163 'move' ret[719153](719162 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[719151] _end_idxType[719151]
    }
    label _end_idxType[719151]
    (719155 return ret[719153])
  }
  function BaseRectangularDom[143416](?).stridable[719177](arg _mt[719179]:_MT[227], arg this[719181]:BaseRectangularDom[143416](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719198] "RVV" "param" "temp"
    unknown call_tmp[719212] "expr temp" "maybe param" "maybe type" "temp"
    (719215 'move' call_tmp[719212](719186 'is bound' this[719181] c"stridable"))
    if call_tmp[719212]
    {
      unknown call_tmp[719217] "expr temp" "maybe param" "maybe type" "temp"
      (719220 'move' call_tmp[719217](719185 '.' this[719181] c"stridable"))
      (719203 'move' ret[719198](719202 'deref' call_tmp[719217]))
      gotoReturn _end_stridable[719196] _end_stridable[719196]
    }
    {
      (719208 'move' ret[719198](719207 'deref' ?[249]))
      gotoReturn _end_stridable[719196] _end_stridable[719196]
    }
    label _end_stridable[719196]
    (719200 return ret[719198])
  }
  function anymanaged anynil BaseRectangularDom[719044](?).stridable[719222](arg _mt[719224]:_MT[227], arg this[719226]:anymanaged anynil BaseRectangularDom[719044](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719243] "RVV" "param" "temp"
    unknown call_tmp[719257] "expr temp" "maybe param" "maybe type" "temp"
    (719260 'move' call_tmp[719257](719231 'is bound' this[719226] c"stridable"))
    if call_tmp[719257]
    {
      unknown call_tmp[719262] "expr temp" "maybe param" "maybe type" "temp"
      (719265 'move' call_tmp[719262](719230 '.' this[719226] c"stridable"))
      (719248 'move' ret[719243](719247 'deref' call_tmp[719262]))
      gotoReturn _end_stridable[719241] _end_stridable[719241]
    }
    {
      (719253 'move' ret[719243](719252 'deref' ?[249]))
      gotoReturn _end_stridable[719241] _end_stridable[719241]
    }
    label _end_stridable[719241]
    (719245 return ret[719243])
  }
  function BaseRectangularDom[143416](?).init[719267](arg _mt[719269]:_MT[227], arg this[719270]:BaseRectangularDom[143416](?), param arg rank[719281]:int(64)[13], arg idxType[719293]:_any[170](?), param arg stridable[719302]:bool[10]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[719316] "temporary of super field" "temp"
    (719318 'move' super_tmp[719316](719315 '.v' this[719270] c"super"))
    (719280 call(719278 call (partial) init _mt[232] super_tmp[719316]))
    unknown tmp[719321] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[719354] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[719366] "expr temp" "maybe param" "maybe type" "temp"
      (719369 'move' call_tmp[719366](719323 '.v' this[719270] c"super"))
      (719358 'move' call_type_tmp[719354](719326 'typeof' call_tmp[719366]))
    }
    (719327 'move' tmp[719321] call_type_tmp[719354])
    unknown call_tmp[719371] "maybe param" "maybe type" "temp"
    (719374 'move' call_tmp[719371](719332 'cast' tmp[719321] this[719270]))
    unknown chpl__thisAsParent[719329] "insert auto destroy" "temp"
    (719362 'init var' chpl__thisAsParent[719329] call_tmp[719371] tmp[719321])
    (719335 'setcid' chpl__thisAsParent[719329])
    unknown call_tmp[719376] "expr temp" "maybe param" "maybe type" "temp"
    (719379 'move' call_tmp[719376](719338 call _cast int(64)[13] rank[719281]))
    (719340 'init field' this[719270] c"rank" call_tmp[719376])
    (719343 'init field' this[719270] c"idxType" idxType[719293])
    unknown call_tmp[719381] "expr temp" "maybe param" "maybe type" "temp"
    (719384 'move' call_tmp[719381](719347 call _cast bool[10] stridable[719302]))
    (719349 'init field' this[719270] c"stridable" call_tmp[719381])
    (719352 'setcid' this[719270])
    (719360 return _void[47])
  }
  function BaseRectangularDom[143416](?).writeThis[719386](arg _mt[719390]:_MT[227], arg this[719388]:BaseRectangularDom[143416](?), arg f[719389]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (719395 call writeThisDefaultImpl f[719389] this[719388])
    (719399 return _void[47])
  }
  function BaseRectangularDom[143416](?).readThis[719401](arg _mt[719405]:_MT[227], arg this[719403]:BaseRectangularDom[143416](?), arg f[719404]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (719409 call readThisDefaultImpl f[719404] this[719403])
    (719414 return _void[47])
  }
  type BaseRectangularDom[143416](?) val super[331013]:BaseDom[143244] "super class" unknown rank[143339] "param" int(64)[13] unknown idxType[143342] "type variable" unknown stridable[143346] "param" bool[10]
  type anymanaged anynil BaseRectangularDom[719044](?)
  type anymanaged BaseRectangularDom[350552](?)
  function BaseSparseDomImpl[144471](?).deinit[143450](arg _mt[144475]:_MT[227], arg this[144473]:BaseSparseDomImpl[144471](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470289 return _void[47])
  }
  function BaseSparseDomImpl[144471](?).dsiBulkAdd[143468](arg _mt[144479]:_MT[227], arg this[144477]:BaseSparseDomImpl[144471](?), arg inds[143465]:_array[133150](?), arg dataSorted[143471] :
  0 =
  0, arg isUnique[143475] :
  0 =
  0, arg preserveInds[143479] :
  1 =
  1, arg addOn[143487] :
  (692371 call _cast borrowed locale?[389810] nil[38]) =
  (143485 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[470293] "RVV" "temp"
    unknown tmp[402420] "maybe param" "temp"
    (402431 'move' tmp[402420](143491 call ! dataSorted[143471]))
    unknown call_tmp[615593] "expr temp" "maybe param" "maybe type" "temp"
    (615596 'move' call_tmp[615593](402433 call _cond_invalid tmp[402420]))
    if call_tmp[615593]
    {
      (402436 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[517162] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517163] "maybe param" "temp"
    unknown call_tmp[615598] "expr temp" "maybe param" "maybe type" "temp"
    (615601 'move' call_tmp[615598](402421 call isTrue tmp[402420]))
    (517168 'move' tmp[517163](517166 call _cond_test call_tmp[615598]))
    if tmp[517163]
    {
      unknown tmp[517170] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (517172 'move' tmp[517170](402424 call isTrue preserveInds[143479]))
      (517177 'move' tmp[517162](517174 '_paramFoldLogical' tmp[517163] tmp[517170]))
    }
    {
      (517182 'move' tmp[517162](517179 '_paramFoldLogical' tmp[517163] 0))
    }
    unknown call_tmp[615603] "expr temp" "maybe param" "maybe type" "temp"
    (615606 'move' call_tmp[615603](143520 call _cond_test tmp[517162]))
    if call_tmp[615603]
    {
      unknown _inds[143497] "insert auto destroy"
      (491840 'init var' _inds[143497] inds[143465])
      unknown call_tmp[615610] "expr temp" "maybe param" "maybe type" "temp"
      (615613 'move' call_tmp[615610](143507 call(355258 call (partial) bulkAdd_help _mt[232] this[144477]) _inds[143497] dataSorted[143471] isUnique[143475] addOn[143487]))
      (470298 'move' ret[470293](470297 'deref' call_tmp[615610]))
      gotoReturn _end_dsiBulkAdd[470291] _end_dsiBulkAdd[470291]
    }
    {
      unknown call_tmp[615617] "expr temp" "maybe param" "maybe type" "temp"
      (615620 'move' call_tmp[615617](143516 call(355266 call (partial) bulkAdd_help _mt[232] this[144477]) inds[143465] dataSorted[143471] isUnique[143475] addOn[143487]))
      (470303 'move' ret[470293](470302 'deref' call_tmp[615617]))
      gotoReturn _end_dsiBulkAdd[470291] _end_dsiBulkAdd[470291]
    }
    label _end_dsiBulkAdd[470291]
    (470295 return ret[470293])
  }
  where {
    unknown call_tmp[615624] "expr temp" "maybe param" "maybe type" "temp"
    (615627 'move' call_tmp[615624](355244 call rank _mt[232] this[144477]))
    unknown call_tmp[615631] "expr temp" "maybe param" "maybe type" "temp"
    (615634 'move' call_tmp[615631](355249 call idxType _mt[232] this[144477]))
    unknown call_tmp[615636] "expr temp" "maybe param" "maybe type" "temp"
    (615639 'move' call_tmp[615636](143460 call chpl__buildIndexType call_tmp[615624] call_tmp[615631]))
    unknown call_tmp[615643] "expr temp" "maybe param" "maybe type" "temp"
    (615646 'move' call_tmp[615643](436596 call eltType _mt[232] inds[143465]))
    unknown call_tmp[615648] "expr temp" "maybe param" "maybe type" "temp"
    (615651 'move' call_tmp[615648](436600 call == call_tmp[615636] call_tmp[615643]))
    (436594 call & 1 call_tmp[615648])
  }
  function BaseSparseDomImpl[144471](?).bulkAdd_help[143542](arg _mt[144483]:_MT[227], arg this[144481]:BaseSparseDomImpl[144471](?), arg inds[143539]:_array[133150](?), arg dataSorted[143545] :
  0 =
  0, arg isUnique[143549] :
  0 =
  0, arg addOn[143557] :
  (692380 call _cast borrowed locale?[389810] nil[38]) =
  (143555 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "compiler added where" "method" "primary method"
  {
    unknown ret[470309] "RVV" "temp"
    (143578 call halt "Helper function called on the BaseSparseDomImpl")
    unknown call_tmp[615653] "expr temp" "maybe param" "maybe type" "temp"
    (615656 'move' call_tmp[615653](143582 call - 1))
    (470314 'move' ret[470309](470313 'deref' call_tmp[615653]))
    (470311 return ret[470309])
  }
  where {
    unknown call_tmp[615660] "expr temp" "maybe param" "maybe type" "temp"
    (615663 'move' call_tmp[615660](355275 call rank _mt[232] this[144481]))
    unknown call_tmp[615667] "expr temp" "maybe param" "maybe type" "temp"
    (615670 'move' call_tmp[615667](355280 call idxType _mt[232] this[144481]))
    unknown call_tmp[615672] "expr temp" "maybe param" "maybe type" "temp"
    (615675 'move' call_tmp[615672](143535 call chpl__buildIndexType call_tmp[615660] call_tmp[615667]))
    unknown call_tmp[615679] "expr temp" "maybe param" "maybe type" "temp"
    (615682 'move' call_tmp[615679](436608 call eltType _mt[232] inds[143539]))
    unknown call_tmp[615684] "expr temp" "maybe param" "maybe type" "temp"
    (615687 'move' call_tmp[615684](436612 call == call_tmp[615672] call_tmp[615679]))
    (436606 call & 1 call_tmp[615684])
  }
  function BaseSparseDomImpl[144471](?)._grow[143594](arg _mt[144487]:_MT[227], arg this[144485]:BaseSparseDomImpl[144471](?), arg size[143591]:int(64)[13], arg factor[143597] :
  arrayAsVecGrowthFactor[111851] =
  arrayAsVecGrowthFactor[111851]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[615691] "expr temp" "maybe param" "maybe type" "temp"
    (615694 'move' call_tmp[615691](355286 call nnzDom _mt[232] this[144485]))
    unknown call_tmp[615698] "maybe param" "maybe type" "temp"
    (615701 'move' call_tmp[615698](143601 call size _mt[232] call_tmp[615691]))
    const oldNNZDomSize[143604] "const" "insert auto destroy"
    (491842 'init var' oldNNZDomSize[143604] call_tmp[615698])
    unknown call_tmp[615703] "expr temp" "maybe param" "maybe type" "temp"
    (615706 'move' call_tmp[615703](143610 call > size[143591] oldNNZDomSize[143604]))
    unknown call_tmp[615708] "expr temp" "maybe param" "maybe type" "temp"
    (615711 'move' call_tmp[615708](143644 call _cond_test call_tmp[615703]))
    if call_tmp[615708]
    {
      const _newNNZDomSize[143627] "const" "insert auto destroy"
      unknown tmp[517189] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[517190] "maybe param" "temp"
      (517195 'move' tmp[517190](517193 call _cond_test oldNNZDomSize[143604]))
      if tmp[517190]
      {
        unknown tmp[517197] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[615713] "expr temp" "maybe param" "maybe type" "temp"
        (615716 'move' call_tmp[615713](143616 call * factor[143597] oldNNZDomSize[143604]))
        unknown call_tmp[615718] "expr temp" "maybe param" "maybe type" "temp"
        (615721 'move' call_tmp[615718](143619 call ceil call_tmp[615713]))
        (517199 'move' tmp[517197](143621 call _cast int(64)[13] call_tmp[615718]))
        (517204 'move' tmp[517189](517201 '_paramFoldLogical' tmp[517190] tmp[517197]))
      }
      {
        (517209 'move' tmp[517189](517206 '_paramFoldLogical' tmp[517190] 1))
      }
      (491844 'init var' _newNNZDomSize[143627] tmp[517189])
      unknown call_tmp[615725] "expr temp" "maybe param" "maybe type" "temp"
      (615728 'move' call_tmp[615725](355296 call nnzDom _mt[232] this[144485]))
      unknown call_tmp[615730] "expr temp" "maybe param" "maybe type" "temp"
      (615733 'move' call_tmp[615730](143633 call chpl_build_low_bounded_range 1))
      unknown call_tmp[615735] "expr temp" "maybe param" "maybe type" "temp"
      (615738 'move' call_tmp[615735](143636 call # call_tmp[615730] _newNNZDomSize[143627]))
      unknown call_tmp[615740] "expr temp" "maybe param" "maybe type" "temp"
      (615743 'move' call_tmp[615740](143639 call chpl__buildDomainExpr call_tmp[615735]))
      (143641 call = call_tmp[615725] call_tmp[615740])
    }
    (470316 return _void[47])
  }
  function BaseSparseDomImpl[144471](?)._shrink[143656](arg _mt[144491]:_MT[227], arg this[144489]:BaseSparseDomImpl[144471](?), arg size[143653]:int(64)[13], arg factor[143659] :
  arrayAsVecGrowthFactor[111851] =
  arrayAsVecGrowthFactor[111851]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[615745] "expr temp" "maybe param" "maybe type" "temp"
    (615748 'move' call_tmp[615745](143664 call == size[143653] 0))
    unknown call_tmp[615750] "expr temp" "maybe param" "maybe type" "temp"
    (615753 'move' call_tmp[615750](143728 call _cond_test call_tmp[615745]))
    if call_tmp[615750]
    {
      unknown call_tmp[615757] "expr temp" "maybe param" "maybe type" "temp"
      (615760 'move' call_tmp[615757](355304 call nnzDom _mt[232] this[144489]))
      unknown call_tmp[615762] "expr temp" "maybe param" "maybe type" "temp"
      (615765 'move' call_tmp[615762](143669 call chpl_build_bounded_range 1 0))
      unknown call_tmp[615767] "expr temp" "maybe param" "maybe type" "temp"
      (615770 'move' call_tmp[615767](143672 call chpl__buildDomainExpr call_tmp[615762]))
      (143674 call = call_tmp[615757] call_tmp[615767])
    }
    {
      unknown call_tmp[615774] "expr temp" "maybe param" "maybe type" "temp"
      (615777 'move' call_tmp[615774](355309 call nnzDom _mt[232] this[144489]))
      unknown call_tmp[615781] "expr temp" "maybe param" "maybe type" "temp"
      (615784 'move' call_tmp[615781](143679 call size _mt[232] call_tmp[615774]))
      unknown call_tmp[615786] "expr temp" "maybe param" "maybe type" "temp"
      (615789 'move' call_tmp[615786](143684 call ** factor[143659] 2))
      unknown call_tmp[615791] "expr temp" "maybe param" "maybe type" "temp"
      (615794 'move' call_tmp[615791](143686 call / call_tmp[615781] call_tmp[615786]))
      unknown call_tmp[615796] "maybe param" "maybe type" "temp"
      (615799 'move' call_tmp[615796](143689 call _cast int(64)[13] call_tmp[615791]))
      const shrinkThreshold[143691] "const" "insert auto destroy"
      (491846 'init var' shrinkThreshold[143691] call_tmp[615796])
      unknown call_tmp[615801] "expr temp" "maybe param" "maybe type" "temp"
      (615804 'move' call_tmp[615801](143697 call < size[143653] shrinkThreshold[143691]))
      unknown call_tmp[615806] "expr temp" "maybe param" "maybe type" "temp"
      (615809 'move' call_tmp[615806](143724 call _cond_test call_tmp[615801]))
      if call_tmp[615806]
      {
        unknown call_tmp[615813] "expr temp" "maybe param" "maybe type" "temp"
        (615816 'move' call_tmp[615813](355317 call nnzDom _mt[232] this[144489]))
        unknown call_tmp[615820] "expr temp" "maybe param" "maybe type" "temp"
        (615823 'move' call_tmp[615820](143700 call size _mt[232] call_tmp[615813]))
        unknown call_tmp[615825] "expr temp" "maybe param" "maybe type" "temp"
        (615828 'move' call_tmp[615825](143704 call / call_tmp[615820] factor[143659]))
        unknown call_tmp[615830] "maybe param" "maybe type" "temp"
        (615833 'move' call_tmp[615830](143707 call _cast int(64)[13] call_tmp[615825]))
        const _newNNZDomSize[143709] "const" "insert auto destroy"
        (491848 'init var' _newNNZDomSize[143709] call_tmp[615830])
        unknown call_tmp[615837] "expr temp" "maybe param" "maybe type" "temp"
        (615840 'move' call_tmp[615837](355323 call nnzDom _mt[232] this[144489]))
        unknown call_tmp[615842] "expr temp" "maybe param" "maybe type" "temp"
        (615845 'move' call_tmp[615842](143716 call chpl_build_bounded_range 1 _newNNZDomSize[143709]))
        unknown call_tmp[615847] "expr temp" "maybe param" "maybe type" "temp"
        (615850 'move' call_tmp[615847](143719 call chpl__buildDomainExpr call_tmp[615842]))
        (143721 call = call_tmp[615837] call_tmp[615847])
      }
    }
    (470318 return _void[47])
  }
  function BaseSparseDomImpl[144471](?)._bulkGrow[143737](arg _mt[144495]:_MT[227], arg this[144493]:BaseSparseDomImpl[144471](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[615854] "maybe param" "maybe type" "temp"
    (615857 'move' call_tmp[615854](143741 call(355330 call (partial) getNNZ _mt[232] this[144493])))
    const nnz[143742] "const" "insert auto destroy"
    (491850 'init var' nnz[143742] call_tmp[615854])
    unknown call_tmp[615861] "expr temp" "maybe param" "maybe type" "temp"
    (615864 'move' call_tmp[615861](355336 call nnzDom _mt[232] this[144493]))
    unknown call_tmp[615868] "expr temp" "maybe param" "maybe type" "temp"
    (615871 'move' call_tmp[615868](143748 call size _mt[232] call_tmp[615861]))
    unknown call_tmp[615873] "expr temp" "maybe param" "maybe type" "temp"
    (615876 'move' call_tmp[615873](143751 call > nnz[143742] call_tmp[615868]))
    unknown call_tmp[615878] "expr temp" "maybe param" "maybe type" "temp"
    (615881 'move' call_tmp[615878](143783 call _cond_test call_tmp[615873]))
    if call_tmp[615878]
    {
      unknown call_tmp[615883] "expr temp" "maybe param" "maybe type" "temp"
      (615886 'move' call_tmp[615883](143757 call log2 nnz[143742]))
      unknown call_tmp[615888] "expr temp" "maybe param" "maybe type" "temp"
      (615891 'move' call_tmp[615888](143761 call + call_tmp[615883] 1.0))
      unknown call_tmp[615893] "expr temp" "maybe param" "maybe type" "temp"
      (615896 'move' call_tmp[615893](143764 call exp2 call_tmp[615888]))
      unknown call_tmp[615898] "maybe param" "maybe type" "temp"
      (615901 'move' call_tmp[615898](143766 call _cast int(64)[13] call_tmp[615893]))
      const _newNNZDomSize[143768] "const" "insert auto destroy"
      (491852 'init var' _newNNZDomSize[143768] call_tmp[615898])
      unknown call_tmp[615905] "expr temp" "maybe param" "maybe type" "temp"
      (615908 'move' call_tmp[615905](355342 call nnzDom _mt[232] this[144493]))
      unknown call_tmp[615910] "expr temp" "maybe param" "maybe type" "temp"
      (615913 'move' call_tmp[615910](143775 call chpl_build_bounded_range 1 _newNNZDomSize[143768]))
      unknown call_tmp[615915] "expr temp" "maybe param" "maybe type" "temp"
      (615918 'move' call_tmp[615915](143778 call chpl__buildDomainExpr call_tmp[615910]))
      (143780 call = call_tmp[615905] call_tmp[615915])
    }
    (470320 return _void[47])
  }
  function BaseSparseDomImpl[144471](?)._countDuplicates[143793](arg _mt[144499]:_MT[227], arg this[144497]:BaseSparseDomImpl[144471](?), arg arr[143791]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[470324] "RVV" "temp"
    unknown call_tmp[615920] "maybe param" "maybe type" "temp"
    (615923 'move' call_tmp[615920](143800 call - 1))
    unknown dupCount[143802] "insert auto destroy"
    (491854 'init var' dupCount[143802] call_tmp[615920])
    unknown call_tmp[615927] "expr temp" "maybe param" "maybe type" "temp"
    (615930 'move' call_tmp[615927](143808 call _dom _mt[232] arr[143791]))
    unknown call_tmp[615934] "expr temp" "maybe param" "maybe type" "temp"
    (615937 'move' call_tmp[615934](143811 call low _mt[232] call_tmp[615927]))
    unknown call_tmp[615939] "maybe param" "maybe type" "temp"
    (615942 'move' call_tmp[615939](143815 call arr[143791] call_tmp[615934]))
    unknown prev[143816] "insert auto destroy"
    (491856 'init var' prev[143816] call_tmp[615939])
    {
      unknown _indexOfInterest[143844] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[143845] "expr temp" "temp"
      (143854 'move' _iterator[143845](143852 call _getIterator arr[143791]))
      Defer
      {
        {
          (143870 call _freeIterator _iterator[143845])
        }
      }
      { scopeless type
        (143859 'move' _indexOfInterest[143844](143856 call iteratorIndex _iterator[143845]))
      }
      ForLoop
      {
        unknown a[143863] "index var" "insert auto destroy"
        (143865 'move' a[143863] _indexOfInterest[143844])
        {
          unknown call_tmp[615944] "expr temp" "maybe param" "maybe type" "temp"
          (615947 'move' call_tmp[615944](143823 call == a[143863] prev[143816]))
          unknown call_tmp[615949] "expr temp" "maybe param" "maybe type" "temp"
          (615952 'move' call_tmp[615949](143835 call _cond_test call_tmp[615944]))
          if call_tmp[615949]
          {
            (143827 call += dupCount[143802] 1)
          }
          {
            (143832 call = prev[143816] a[143863])
          }
          {
          }
        }
        label _continueLabel[143849]
        _indexOfInterest[143844]
        _iterator[143845]
      }
      label _breakLabel[143850]
    }
    (470329 'move' ret[470324](470328 'deref' dupCount[143802]))
    (470326 return ret[470324])
  }
  where {
    (143798 call isArray arr[143791])
  }
  function BaseSparseDomImpl[144471](?).bulkAdd_prepareInds[143887](arg _mt[144503]:_MT[227], arg this[144501]:BaseSparseDomImpl[144471](?), arg inds[143885]:_any[170](?), arg dataSorted[143889]:_any[170](?), arg isUnique[143891]:_any[170](?), arg cmp[143893]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[615954] "expr temp" "maybe param" "maybe type" "temp"
    (615957 'move' call_tmp[615954](143901 call ! dataSorted[143889]))
    unknown call_tmp[615959] "expr temp" "maybe param" "maybe type" "temp"
    (615962 'move' call_tmp[615959](143910 call _cond_test call_tmp[615954]))
    if call_tmp[615959]
    {
      (143908 call sort inds[143885](comparator = cmp[143893]))
    }
    unknown call_tmp[615964] "expr temp" "maybe param" "maybe type" "temp"
    (615967 'move' call_tmp[615964](144119 call _cond_test 1))
    if call_tmp[615964]
    {
      unknown tmp[402441] "maybe param" "temp"
      (402452 'move' tmp[402441] dataSorted[143889])
      unknown call_tmp[615969] "expr temp" "maybe param" "maybe type" "temp"
      (615972 'move' call_tmp[615969](402454 call _cond_invalid tmp[402441]))
      if call_tmp[615969]
      {
        (402457 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[517216] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[517217] "maybe param" "temp"
      unknown call_tmp[615974] "expr temp" "maybe param" "maybe type" "temp"
      (615977 'move' call_tmp[615974](402442 call isTrue tmp[402441]))
      (517222 'move' tmp[517217](517220 call _cond_test call_tmp[615974]))
      if tmp[517217]
      {
        unknown tmp[517224] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[615979] "expr temp" "maybe param" "maybe type" "temp"
        (615982 'move' call_tmp[615979](143922 call isSorted inds[143885](comparator = cmp[143893])))
        unknown call_tmp[615984] "expr temp" "maybe param" "maybe type" "temp"
        (615987 'move' call_tmp[615984](143923 call ! call_tmp[615979]))
        (517226 'move' tmp[517224](402445 call isTrue call_tmp[615984]))
        (517231 'move' tmp[517216](517228 '_paramFoldLogical' tmp[517217] tmp[517224]))
      }
      {
        (517236 'move' tmp[517216](517233 '_paramFoldLogical' tmp[517217] 0))
      }
      unknown call_tmp[615989] "expr temp" "maybe param" "maybe type" "temp"
      (615992 'move' call_tmp[615989](143949 call _cond_test tmp[517216]))
      if call_tmp[615989]
      {
        (143947 call halt "bulkAdd: Data not sorted, call the function with \n              dataSorted=false")
      }
      unknown call_tmp[615994] "expr temp" "maybe param" "maybe type" "temp"
      (615997 'move' call_tmp[615994](144075 call _cond_test isUnique[143891]))
      if call_tmp[615994]
      {
        unknown call_tmp[616001] "expr temp" "maybe param" "maybe type" "temp"
        (616004 'move' call_tmp[616001](143957 call _dom _mt[232] inds[143885]))
        unknown call_tmp[616008] "maybe param" "maybe type" "temp"
        (616011 'move' call_tmp[616008](143960 call low _mt[232] call_tmp[616001]))
        const indsStart[143963] "const" "insert auto destroy"
        (491858 'init var' indsStart[143963] call_tmp[616008])
        unknown call_tmp[616015] "expr temp" "maybe param" "maybe type" "temp"
        (616018 'move' call_tmp[616015](143968 call _dom _mt[232] inds[143885]))
        unknown call_tmp[616022] "maybe param" "maybe type" "temp"
        (616025 'move' call_tmp[616022](143971 call high _mt[232] call_tmp[616015]))
        const indsEnd[143974] "const" "insert auto destroy"
        (491860 'init var' indsEnd[143974] call_tmp[616022])
        unknown call_tmp[616027] "maybe param" "maybe type" "temp"
        (616030 'move' call_tmp[616027](143980 call inds[143885] indsStart[143963]))
        unknown lastInd[143981] "insert auto destroy"
        (491862 'init var' lastInd[143981] call_tmp[616027])
        {
          unknown _indexOfInterest[144034] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[144035] "expr temp" "temp"
          unknown call_tmp[616032] "expr temp" "maybe param" "maybe type" "temp"
          (616035 'move' call_tmp[616032](144048 call + indsStart[143963] 1))
          unknown call_tmp[616037] "expr temp" "maybe param" "maybe type" "temp"
          (616040 'move' call_tmp[616037](144052 call chpl_direct_range_iter call_tmp[616032] indsEnd[143974] 1))
          (144044 'move' _iterator[144035](144042 call _getIterator call_tmp[616037]))
          Defer
          {
            {
              (144068 call _freeIterator _iterator[144035])
            }
          }
          { scopeless type
            (144057 'move' _indexOfInterest[144034](144054 call iteratorIndex _iterator[144035]))
          }
          ForLoop
          {
            unknown i[144061] "index var" "insert auto destroy"
            (144063 'move' i[144061] _indexOfInterest[144034])
            {
              unknown call_tmp[616042] "expr temp" "maybe param" "maybe type" "temp"
              (616045 'move' call_tmp[616042](143995 call inds[143885] i[144061]))
              unknown call_tmp[616047] "expr temp" "maybe param" "maybe type" "temp"
              (616050 'move' call_tmp[616047](143997 call == call_tmp[616042] lastInd[143981]))
              unknown call_tmp[616052] "expr temp" "maybe param" "maybe type" "temp"
              (616055 'move' call_tmp[616052](144027 call _cond_test call_tmp[616047]))
              if call_tmp[616052]
              {
                (144017 call halt "bulkAdd: There are duplicates, call the function \n                  with isUnique=false")
              }
              {
                unknown call_tmp[616057] "expr temp" "maybe param" "maybe type" "temp"
                (616060 'move' call_tmp[616057](144023 call inds[143885] i[144061]))
                (144024 call = lastInd[143981] call_tmp[616057])
              }
            }
            label _continueLabel[144039]
            _indexOfInterest[144034]
            _iterator[144035]
          }
          label _breakLabel[144040]
        }
      }
      {
        unknown _indexOfInterest[144086] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[144087] "expr temp" "temp"
        (144096 'move' _iterator[144087](144094 call _getIterator inds[143885]))
        Defer
        {
          {
            (144112 call _freeIterator _iterator[144087])
          }
        }
        { scopeless type
          (144101 'move' _indexOfInterest[144086](144098 call iteratorIndex _iterator[144087]))
        }
        ForLoop
        {
          unknown i[144105] "index var" "insert auto destroy"
          (144107 'move' i[144105] _indexOfInterest[144086])
          (144084 call(355378 call (partial) boundsCheck _mt[232] this[144501]) i[144105])
          label _continueLabel[144091]
          _indexOfInterest[144086]
          _iterator[144087]
        }
        label _breakLabel[144092]
      }
    }
    (470331 return _void[47])
    (329405 'used modules list'(143897 'use' Sort[251417]))
  }
  function BaseSparseDomImpl[144471](?).__getActualInsertPts[144129](arg _mt[144507]:_MT[227], arg this[144505]:BaseSparseDomImpl[144471](?), arg d[144127]:_any[170](?), arg inds[144131]:_any[170](?), arg isUnique[144133]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[470335] "RVV" "temp"
    unknown indivInsertPts[144145] "insert auto destroy"
    unknown call_tmp[616066] "expr temp" "maybe param" "maybe type" "temp"
    (616069 'move' call_tmp[616066](144136 call _dom _mt[232] inds[144131]))
    unknown call_tmp[616071] "expr temp" "maybe param" "maybe type" "temp"
    (616074 'move' call_tmp[616071](144141 call chpl__ensureDomainExpr call_tmp[616066]))
    unknown call_tmp[616076] "expr temp" "maybe param" "maybe type" "temp"
    (616079 'move' call_tmp[616076](144143 call chpl__buildArrayRuntimeType call_tmp[616071] int(64)[13]))
    (491864 'default init var' indivInsertPts[144145] call_tmp[616076])
    unknown actualInsertPts[144159] "insert auto destroy"
    unknown call_tmp[616083] "expr temp" "maybe param" "maybe type" "temp"
    (616086 'move' call_tmp[616083](144150 call _dom _mt[232] inds[144131]))
    unknown call_tmp[616088] "expr temp" "maybe param" "maybe type" "temp"
    (616091 'move' call_tmp[616088](144155 call chpl__ensureDomainExpr call_tmp[616083]))
    unknown call_tmp[616093] "expr temp" "maybe param" "maybe type" "temp"
    (616096 'move' call_tmp[616093](144157 call chpl__buildArrayRuntimeType call_tmp[616088] int(64)[13]))
    (491866 'default init var' actualInsertPts[144159] call_tmp[616093])
    unknown call_tmp[616098] "expr temp" "maybe param" "maybe type" "temp"
    (616101 'move' call_tmp[616098](144163 call ! isUnique[144133]))
    unknown call_tmp[616103] "expr temp" "maybe param" "maybe type" "temp"
    (616106 'move' call_tmp[616103](144266 call _cond_test call_tmp[616098]))
    if call_tmp[616103]
    {
      unknown call_tmp[616110] "expr temp" "maybe param" "maybe type" "temp"
      (616113 'move' call_tmp[616110](144167 call _dom _mt[232] inds[144131]))
      unknown call_tmp[616117] "expr temp" "maybe param" "maybe type" "temp"
      (616120 'move' call_tmp[616117](144170 call low _mt[232] call_tmp[616110]))
      unknown call_tmp[616122] "expr temp" "maybe param" "maybe type" "temp"
      (616125 'move' call_tmp[616122](144174 call inds[144131] call_tmp[616117]))
      unknown call_tmp[616127] "maybe param" "maybe type" "temp"
      (616130 'move' call_tmp[616127](144176 call + call_tmp[616122] 1))
      unknown lastInd[144178] "insert auto destroy"
      (491868 'init var' lastInd[144178] call_tmp[616127])
      {
        unknown _indexOfInterest[144214] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[144215] "expr temp" "temp"
        unknown call_tmp[616132] "expr temp" "maybe param" "maybe type" "temp"
        (616135 'move' call_tmp[616132](144224 call _getIterator inds[144131]))
        unknown call_tmp[616137] "expr temp" "maybe param" "maybe type" "temp"
        (616140 'move' call_tmp[616137](144227 call _getIterator indivInsertPts[144145]))
        (144229 'move' _iterator[144215](144190 call _build_tuple call_tmp[616132] call_tmp[616137]))
        Defer
        {
          {
            (144259 call _freeIterator _iterator[144215])
          }
        }
        { scopeless type
          (144234 'move' _indexOfInterest[144214](144231 call iteratorIndex _iterator[144215]))
        }
        ForLoop
        {
          (144239 call _check_tuple_var_decl _indexOfInterest[144214] 2)
          unknown i[144245] "index var" "insert auto destroy"
          (144247 'move' i[144245](144243 call _indexOfInterest[144214] 1))
          unknown p[144252] "index var" "insert auto destroy"
          (144254 'move' p[144252](144250 call _indexOfInterest[144214] 2))
          {
            unknown call_tmp[616142] "expr temp" "maybe param" "maybe type" "temp"
            (616145 'move' call_tmp[616142](144193 call == i[144245] lastInd[144178]))
            unknown call_tmp[616147] "expr temp" "maybe param" "maybe type" "temp"
            (616150 'move' call_tmp[616147](144207 call _cond_test call_tmp[616142]))
            if call_tmp[616147]
            {
              unknown call_tmp[616152] "expr temp" "maybe param" "maybe type" "temp"
              (616155 'move' call_tmp[616152](144197 call - 1))
              (144199 call = p[144252] call_tmp[616152])
            }
            {
              (144204 call = lastInd[144178] i[144245])
            }
          }
          label _continueLabel[144219]
          _indexOfInterest[144214]
          _iterator[144215]
        }
        label _breakLabel[144220]
      }
    }
    Forall {
      induction variables:
        
        unknown i[144333] "index var" "insert auto destroy"
        
        unknown p[144335] "index var" "insert auto destroy"
      iterated expressions:
        inds[144131]
        indivInsertPts[144145]
      shadow variables:
      forall body
      {
        unknown tmp[402462] "maybe param" "temp"
        (402473 'move' tmp[402462] isUnique[144133])
        unknown call_tmp[616157] "expr temp" "maybe param" "maybe type" "temp"
        (616160 'move' call_tmp[616157](402475 call _cond_invalid tmp[402462]))
        if call_tmp[616157]
        {
          (402478 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[517243] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[517244] "maybe param" "temp"
        unknown call_tmp[616162] "expr temp" "maybe param" "maybe type" "temp"
        (616165 'move' call_tmp[616162](402463 call isTrue tmp[402462]))
        (517249 'move' tmp[517244](517247 call _cond_test call_tmp[616162]))
        if tmp[517244]
        {
          (517254 'move' tmp[517243](517251 '_paramFoldLogical' tmp[517244] 1))
        }
        {
          unknown tmp[517256] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[616167] "expr temp" "maybe param" "maybe type" "temp"
          (616170 'move' call_tmp[616167](144282 call - 1))
          unknown call_tmp[616172] "expr temp" "maybe param" "maybe type" "temp"
          (616175 'move' call_tmp[616172](144284 call != p[144335] call_tmp[616167]))
          (517258 'move' tmp[517256](402467 call isTrue call_tmp[616172]))
          (517263 'move' tmp[517243](517260 '_paramFoldLogical' tmp[517244] tmp[517256]))
        }
        unknown call_tmp[616177] "expr temp" "maybe param" "maybe type" "temp"
        (616180 'move' call_tmp[616177](144327 call _cond_test tmp[517243]))
        if call_tmp[616177]
        {
          unknown call_tmp[616184] "maybe param" "maybe type" "temp"
          (616187 'move' call_tmp[616184](144301 call(144296 call (partial) find _mt[232] d[144127]) i[144333]))
          const tmp[144302] "const" "insert auto destroy" "no copy" "temp"
          (491870 'init var' tmp[144302] call_tmp[616184])
          (144309 call _check_tuple_var_decl tmp[144302] 2)
          unknown call_tmp[616189] "maybe param" "maybe type" "temp"
          (616192 'move' call_tmp[616189](144303 call tmp[144302] 1))
          const found[144288] "const" "insert auto destroy"
          (491872 'init var' found[144288] call_tmp[616189])
          unknown call_tmp[616194] "maybe param" "maybe type" "temp"
          (616197 'move' call_tmp[616194](144306 call tmp[144302] 2))
          const insertPt[144290] "const" "insert auto destroy"
          (491874 'init var' insertPt[144290] call_tmp[616194])
          unknown tmp[517270] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[517271] "maybe param" "temp"
          (517276 'move' tmp[517271](517274 call _cond_test found[144288]))
          if tmp[517271]
          {
            unknown tmp[517278] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (517280 'move' tmp[517278](144318 call - 1))
            (517285 'move' tmp[517270](517282 '_paramFoldLogical' tmp[517271] tmp[517278]))
          }
          {
            (517290 'move' tmp[517270](517287 '_paramFoldLogical' tmp[517271] insertPt[144290]))
          }
          (144324 call = p[144335] tmp[517270])
        }
      }
    }
    unknown actualAddCnt[144339] "insert auto destroy"
    (491876 'init var' actualAddCnt[144339] 0)
    {
      unknown _indexOfInterest[144382] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[144383] "expr temp" "temp"
      unknown call_tmp[616199] "expr temp" "maybe param" "maybe type" "temp"
      (616202 'move' call_tmp[616199](144392 call _getIterator indivInsertPts[144145]))
      unknown call_tmp[616204] "expr temp" "maybe param" "maybe type" "temp"
      (616207 'move' call_tmp[616204](144395 call _getIterator actualInsertPts[144159]))
      (144397 'move' _iterator[144383](144350 call _build_tuple call_tmp[616199] call_tmp[616204]))
      Defer
      {
        {
          (144427 call _freeIterator _iterator[144383])
        }
      }
      { scopeless type
        (144402 'move' _indexOfInterest[144382](144399 call iteratorIndex _iterator[144383]))
      }
      ForLoop
      {
        (144407 call _check_tuple_var_decl _indexOfInterest[144382] 2)
        unknown ip[144413] "index var" "insert auto destroy"
        (144415 'move' ip[144413](144411 call _indexOfInterest[144382] 1))
        unknown ap[144420] "index var" "insert auto destroy"
        (144422 'move' ap[144420](144418 call _indexOfInterest[144382] 2))
        {
          unknown call_tmp[616209] "expr temp" "maybe param" "maybe type" "temp"
          (616212 'move' call_tmp[616209](144353 call - 1))
          unknown call_tmp[616214] "expr temp" "maybe param" "maybe type" "temp"
          (616217 'move' call_tmp[616214](144355 call != ip[144413] call_tmp[616209]))
          unknown call_tmp[616219] "expr temp" "maybe param" "maybe type" "temp"
          (616222 'move' call_tmp[616219](144376 call _cond_test call_tmp[616214]))
          if call_tmp[616219]
          {
            unknown call_tmp[616224] "expr temp" "maybe param" "maybe type" "temp"
            (616227 'move' call_tmp[616224](144360 call + ip[144413] actualAddCnt[144339]))
            (144362 call = ap[144420] call_tmp[616224])
            (144368 call += actualAddCnt[144339] 1)
          }
          {
            (144373 call = ap[144420] ip[144413])
          }
        }
        label _continueLabel[144387]
        _indexOfInterest[144382]
        _iterator[144383]
      }
      label _breakLabel[144388]
    }
    unknown call_tmp[616229] "expr temp" "maybe param" "maybe type" "temp"
    (616232 'move' call_tmp[616229](144437 call _build_tuple actualInsertPts[144159] actualAddCnt[144339]))
    (470340 'move' ret[470335](470339 'deref' call_tmp[616229]))
    (470337 return ret[470335])
  }
  function BaseSparseDomImpl[144471](?).dsiClear[144445](arg _mt[144511]:_MT[227], arg this[144509]:BaseSparseDomImpl[144471](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (144465 call halt "not implemented")
    (470342 return _void[47])
  }
  function BaseSparseDomImpl[144471](?).super[719416](arg _mt[719418]:_MT[227], arg this[719420]:BaseSparseDomImpl[144471](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719429] "RVV" "temp"
    unknown call_tmp[719436] "expr temp" "maybe param" "maybe type" "temp"
    (719439 'move' call_tmp[719436](719424 '.v' this[719420] c"super"))
    (719434 'move' ret[719429](719433 'deref' call_tmp[719436]))
    (719431 return ret[719429])
  }
  function BaseSparseDomImpl[144471](?).nnzDom[719441](arg _mt[719443]:_MT[227], arg this[719445]:BaseSparseDomImpl[144471](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719454] "RVV" "temp"
    unknown call_tmp[719461] "expr temp" "maybe param" "maybe type" "temp"
    (719464 'move' call_tmp[719461](719449 '.' this[719445] c"nnzDom"))
    (719459 'move' ret[719454](719458 'addr of' call_tmp[719461]))
    (719456 return ret[719454])
  }
  function BaseSparseDomImpl[144471](?).init[719466](arg _mt[719468]:_MT[227], arg this[719469]:BaseSparseDomImpl[144471](?), param arg rank[719588]:int(64)[13], arg idxType[719591]:_any[170](?), in arg parentDom[719594]:_any[170](?), in arg nnzDom[719597] :
  unknown call_tmp[719658] "expr temp" "maybe param" "maybe type" "temp" =
  unknown call_tmp[719663] "expr temp" "maybe param" "maybe type" "temp") : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[719622] "temporary of super field" "temp"
    (719624 'move' super_tmp[719622](719621 '.v' this[719469] c"super"))
    (719479 call(719477 call (partial) init _mt[232] super_tmp[719622]) rank[719588] idxType[719591] parentDom[719594])
    unknown tmp[719627] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[719648] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[719670] "expr temp" "maybe param" "maybe type" "temp"
      (719673 'move' call_tmp[719670](719629 '.v' this[719469] c"super"))
      (719652 'move' call_type_tmp[719648](719632 'typeof' call_tmp[719670]))
    }
    (719633 'move' tmp[719627] call_type_tmp[719648])
    unknown call_tmp[719675] "maybe param" "maybe type" "temp"
    (719678 'move' call_tmp[719675](719638 'cast' tmp[719627] this[719469]))
    unknown chpl__thisAsParent[719635] "insert auto destroy" "temp"
    (719656 'init var' chpl__thisAsParent[719635] call_tmp[719675] tmp[719627])
    (719641 'setcid' chpl__thisAsParent[719635])
    (719643 '.=' this[719469] c"nnzDom" nnzDom[719597])
    (719646 'setcid' this[719469])
    (719654 return _void[47])
  }
  function BaseSparseDomImpl[144471](?).writeThis[719680](arg _mt[719684]:_MT[227], arg this[719682]:BaseSparseDomImpl[144471](?), arg f[719683]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (719689 call writeThisDefaultImpl f[719683] this[719682])
    (719693 return _void[47])
  }
  function BaseSparseDomImpl[144471](?).readThis[719695](arg _mt[719699]:_MT[227], arg this[719697]:BaseSparseDomImpl[144471](?), arg f[719698]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (719703 call readThisDefaultImpl f[719698] this[719697])
    (719708 return _void[47])
  }
  type BaseSparseDomImpl[144471](?) val super[331029]:BaseSparseDom[145163](?) "delay instantiation" "super class" unknown nnzDom[143445](143443 call chpl__buildDomainExpr(143440 call chpl_build_bounded_range 1 0))
  function SparseIndexBuffer[144693](?).init[144564](arg _mt[144697]:_MT[227], ref arg this[144695]:SparseIndexBuffer[144693](?), arg size[144562]:_any[170](?), param arg rank[144567]:int(64)[13], arg obj[144570]:_any[170](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[616234] "expr temp" "maybe param" "maybe type" "temp"
    (616237 'move' call_tmp[616234](436615 call _cast int(64)[13] rank[144567]))
    (436617 'init field' this[144695] c"rank" call_tmp[616234])
    unknown tmp[436620] "temp"
    (436623 'init var' tmp[436620] obj[144570] anymanaged BaseSparseDom[350579](?))
    (436625 'init field' this[144695] c"obj" tmp[436620])
    unknown tmp[436641] "temp" "type variable"
    unknown tmp[517297] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517298] "maybe param" "temp"
    unknown call_tmp[616239] "expr temp" "maybe param" "maybe type" "temp"
    (616242 'move' call_tmp[616239](436649 '.v' this[144695] c"rank"))
    unknown call_tmp[616244] "expr temp" "maybe param" "maybe type" "temp"
    (616247 'move' call_tmp[616244](436630 call == call_tmp[616239] 1))
    (517303 'move' tmp[517298](517301 call _cond_test call_tmp[616244]))
    if tmp[517298]
    {
      (517308 'move' tmp[517297](517305 '_paramFoldLogical' tmp[517298] int(64)[13]))
    }
    {
      unknown tmp[517310] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[616249] "expr temp" "maybe param" "maybe type" "temp"
      (616252 'move' call_tmp[616249](436652 '.v' this[144695] c"rank"))
      (517312 'move' tmp[517310](436637 call * call_tmp[616249] int(64)[13]))
      (517317 'move' tmp[517297](517314 '_paramFoldLogical' tmp[517298] tmp[517310]))
    }
    (436643 'move' tmp[436641] tmp[517297])
    (436645 'init field' this[144695] c"idxType" tmp[436641])
    unknown call_tmp[616254] "expr temp" "maybe param" "maybe type" "temp"
    (616257 'move' call_tmp[616254](144591 call chpl_build_low_bounded_range 0))
    unknown call_tmp[616259] "expr temp" "maybe param" "maybe type" "temp"
    (616262 'move' call_tmp[616259](144594 call # call_tmp[616254] size[144562]))
    unknown call_tmp[616264] "maybe param" "maybe type" "temp"
    (616267 'move' call_tmp[616264](144597 call chpl__buildDomainExpr call_tmp[616259]))
    unknown tmp[436655] "temp"
    (436657 'init var' tmp[436655] call_tmp[616264])
    (436659 '.=' this[144695] c"bufDom" tmp[436655])
    unknown tmp[436664] "temp"
    unknown call_tmp[616269] "expr temp" "maybe param" "maybe type" "temp"
    (616272 'move' call_tmp[616269](436678 '.' this[144695] c"bufDom"))
    unknown call_tmp[616274] "expr temp" "maybe param" "maybe type" "temp"
    (616277 'move' call_tmp[616274](436669 call chpl__ensureDomainExpr call_tmp[616269]))
    unknown call_tmp[616279] "expr temp" "maybe param" "maybe type" "temp"
    (616282 'move' call_tmp[616279](436681 '.v' this[144695] c"idxType"))
    unknown call_tmp[616284] "expr temp" "maybe param" "maybe type" "temp"
    (616287 'move' call_tmp[616284](436667 call chpl__buildArrayRuntimeType call_tmp[616274] call_tmp[616279]))
    (436672 'default init var' tmp[436664] call_tmp[616284])
    (436674 '.=' this[144695] c"buf" tmp[436664])
    unknown tmp[436685] "temp"
    (436687 'init var' tmp[436685] 0)
    (436689 '.=' this[144695] c"cur" tmp[436685])
    (470344 return _void[47])
  }
  function SparseIndexBuffer[144693](?).deinit[144606](arg _mt[144701]:_MT[227], arg this[144699]:SparseIndexBuffer[144693](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (144610 call(355435 call (partial) commit _mt[232] this[144699]))
    (470346 return _void[47])
  }
  function SparseIndexBuffer[144693](?).add[144621](arg _mt[144705]:_MT[227], arg this[144703]:SparseIndexBuffer[144693](?), arg idx[144618] :
  (355440 call idxType _mt[232] this[144703])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[616297] "expr temp" "maybe param" "maybe type" "temp"
    (616300 'move' call_tmp[616297](355454 call cur _mt[232] this[144703]))
    unknown call_tmp[616302] "expr temp" "maybe param" "maybe type" "temp"
    (616305 'move' call_tmp[616302](144626 call(355447 call (partial) buf _mt[232] this[144703]) call_tmp[616297]))
    (144628 call = call_tmp[616302] idx[144618])
    unknown call_tmp[616309] "expr temp" "maybe param" "maybe type" "temp"
    (616312 'move' call_tmp[616309](355460 call cur _mt[232] this[144703]))
    (144634 call += call_tmp[616309] 1)
    unknown call_tmp[616316] "expr temp" "maybe param" "maybe type" "temp"
    (616319 'move' call_tmp[616316](355465 call cur _mt[232] this[144703]))
    unknown call_tmp[616323] "expr temp" "maybe param" "maybe type" "temp"
    (616326 'move' call_tmp[616323](355470 call buf _mt[232] this[144703]))
    unknown call_tmp[616330] "expr temp" "maybe param" "maybe type" "temp"
    (616333 'move' call_tmp[616330](144639 call size _mt[232] call_tmp[616323]))
    unknown call_tmp[616335] "expr temp" "maybe param" "maybe type" "temp"
    (616338 'move' call_tmp[616335](144642 call == call_tmp[616316] call_tmp[616330]))
    unknown call_tmp[616340] "expr temp" "maybe param" "maybe type" "temp"
    (616343 'move' call_tmp[616340](144648 call _cond_test call_tmp[616335]))
    if call_tmp[616340]
    {
      (144646 call(355474 call (partial) commit _mt[232] this[144703]))
    }
    (470348 return _void[47])
  }
  function SparseIndexBuffer[144693](?).commit[144657](arg _mt[144709]:_MT[227], arg this[144707]:SparseIndexBuffer[144693](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[616349] "expr temp" "maybe param" "maybe type" "temp"
    (616352 'move' call_tmp[616349](355479 call cur _mt[232] this[144707]))
    unknown call_tmp[616354] "expr temp" "maybe param" "maybe type" "temp"
    (616357 'move' call_tmp[616354](144661 call >= call_tmp[616349] 1))
    unknown call_tmp[616359] "expr temp" "maybe param" "maybe type" "temp"
    (616362 'move' call_tmp[616359](144679 call _cond_test call_tmp[616354]))
    if call_tmp[616359]
    {
      unknown call_tmp[616366] "expr temp" "maybe param" "maybe type" "temp"
      (616369 'move' call_tmp[616366](355484 call obj _mt[232] this[144707]))
      unknown call_tmp[616377] "expr temp" "maybe param" "maybe type" "temp"
      (616380 'move' call_tmp[616377](355494 call cur _mt[232] this[144707]))
      unknown call_tmp[616382] "expr temp" "maybe param" "maybe type" "temp"
      (616385 'move' call_tmp[616382](144670 call - call_tmp[616377] 1))
      unknown call_tmp[616387] "expr temp" "maybe param" "maybe type" "temp"
      (616390 'move' call_tmp[616387](144672 call chpl_build_high_bounded_range call_tmp[616382]))
      unknown call_tmp[616392] "expr temp" "maybe param" "maybe type" "temp"
      (616395 'move' call_tmp[616392](144675 call(355489 call (partial) buf _mt[232] this[144707]) call_tmp[616387]))
      (144677 call(144664 call (partial) dsiBulkAdd _mt[232] call_tmp[616366]) call_tmp[616392])
    }
    unknown call_tmp[616399] "expr temp" "maybe param" "maybe type" "temp"
    (616402 'move' call_tmp[616399](355499 call cur _mt[232] this[144707]))
    (144687 call = call_tmp[616399] 0)
    (470350 return _void[47])
  }
  function SparseIndexBuffer[144693](?).rank[719710](arg _mt[719712]:_MT[227], arg this[719714]:SparseIndexBuffer[144693](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[719731] "RVV" "param" "temp"
    unknown call_tmp[719745] "expr temp" "maybe param" "maybe type" "temp"
    (719748 'move' call_tmp[719745](719719 'is bound' this[719714] c"rank"))
    if call_tmp[719745]
    {
      unknown call_tmp[719750] "expr temp" "maybe param" "maybe type" "temp"
      (719753 'move' call_tmp[719750](719718 '.' this[719714] c"rank"))
      (719736 'move' ret[719731](719735 'deref' call_tmp[719750]))
      gotoReturn _end_rank[719729] _end_rank[719729]
    }
    {
      (719741 'move' ret[719731](719740 'deref' ?[249]))
      gotoReturn _end_rank[719729] _end_rank[719729]
    }
    label _end_rank[719729]
    (719733 return ret[719731])
  }
  function SparseIndexBuffer[144693](?).rank[719755](arg _mt[719757]:_MT[227], arg this[719759]:SparseIndexBuffer[144693](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719776] "RVV" "param" "temp"
    unknown call_tmp[719790] "expr temp" "maybe param" "maybe type" "temp"
    (719793 'move' call_tmp[719790](719764 'is bound' this[719759] c"rank"))
    if call_tmp[719790]
    {
      unknown call_tmp[719795] "expr temp" "maybe param" "maybe type" "temp"
      (719798 'move' call_tmp[719795](719763 '.' this[719759] c"rank"))
      (719781 'move' ret[719776](719780 'deref' call_tmp[719795]))
      gotoReturn _end_rank[719774] _end_rank[719774]
    }
    {
      (719786 'move' ret[719776](719785 'deref' ?[249]))
      gotoReturn _end_rank[719774] _end_rank[719774]
    }
    label _end_rank[719774]
    (719778 return ret[719776])
  }
  function SparseIndexBuffer[144693](?).obj[719800](arg _mt[719802]:_MT[227], ref arg this[719804]:SparseIndexBuffer[144693](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[719813] "RVV" "temp"
    unknown call_tmp[719820] "expr temp" "maybe param" "maybe type" "temp"
    (719823 'move' call_tmp[719820](719808 '.' this[719804] c"obj"))
    (719818 'move' ret[719813](719817 'addr of' call_tmp[719820]))
    (719815 return ret[719813])
  }
  function SparseIndexBuffer[144693](?).idxType[719825](arg _mt[719827]:_MT[227], arg this[719829]:SparseIndexBuffer[144693](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[719846] "RVV" "temp" "type variable"
    unknown call_tmp[719860] "expr temp" "maybe param" "maybe type" "temp"
    (719863 'move' call_tmp[719860](719834 'is bound' this[719829] c"idxType"))
    if call_tmp[719860]
    {
      unknown call_tmp[719865] "expr temp" "maybe param" "maybe type" "temp"
      (719868 'move' call_tmp[719865](719833 '.v' this[719829] c"idxType"))
      (719851 'move' ret[719846](719850 'deref' call_tmp[719865]))
      gotoReturn _end_idxType[719844] _end_idxType[719844]
    }
    {
      (719856 'move' ret[719846](719855 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[719844] _end_idxType[719844]
    }
    label _end_idxType[719844]
    (719848 return ret[719846])
  }
  function SparseIndexBuffer[144693](?).idxType[719870](arg _mt[719872]:_MT[227], arg this[719874]:SparseIndexBuffer[144693](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[719891] "RVV" "temp" "type variable"
    unknown call_tmp[719905] "expr temp" "maybe param" "maybe type" "temp"
    (719908 'move' call_tmp[719905](719879 'is bound' this[719874] c"idxType"))
    if call_tmp[719905]
    {
      unknown call_tmp[719910] "expr temp" "maybe param" "maybe type" "temp"
      (719913 'move' call_tmp[719910](719878 '.v' this[719874] c"idxType"))
      (719896 'move' ret[719891](719895 'deref' call_tmp[719910]))
      gotoReturn _end_idxType[719889] _end_idxType[719889]
    }
    {
      (719901 'move' ret[719891](719900 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[719889] _end_idxType[719889]
    }
    label _end_idxType[719889]
    (719893 return ret[719891])
  }
  function SparseIndexBuffer[144693](?).bufDom[719915](arg _mt[719917]:_MT[227], ref arg this[719919]:SparseIndexBuffer[144693](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[719928] "RVV" "temp"
    unknown call_tmp[719935] "expr temp" "maybe param" "maybe type" "temp"
    (719938 'move' call_tmp[719935](719923 '.' this[719919] c"bufDom"))
    (719933 'move' ret[719928](719932 'addr of' call_tmp[719935]))
    (719930 return ret[719928])
  }
  function SparseIndexBuffer[144693](?).buf[719940](arg _mt[719942]:_MT[227], ref arg this[719944]:SparseIndexBuffer[144693](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[719953] "RVV" "temp"
    unknown call_tmp[719960] "expr temp" "maybe param" "maybe type" "temp"
    (719963 'move' call_tmp[719960](719948 '.' this[719944] c"buf"))
    (719958 'move' ret[719953](719957 'addr of' call_tmp[719960]))
    (719955 return ret[719953])
  }
  function SparseIndexBuffer[144693](?).cur[719965](arg _mt[719967]:_MT[227], ref arg this[719969]:SparseIndexBuffer[144693](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[719978] "RVV" "temp"
    unknown call_tmp[719985] "expr temp" "maybe param" "maybe type" "temp"
    (719988 'move' call_tmp[719985](719973 '.' this[719969] c"cur"))
    (719983 'move' ret[719978](719982 'addr of' call_tmp[719985]))
    (719980 return ret[719978])
  }
  function SparseIndexBuffer[144693](?).init=[719990](arg _mt[719993]:_MT[227], ref arg this[719994]:SparseIndexBuffer[144693](?), arg other[719997] :
  (719996 'typeof' this[719994])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method"
  {
    unknown call_tmp[720125] "expr temp" "maybe param" "maybe type" "temp"
    (720128 'move' call_tmp[720125](720006 call rank _mt[232] other[719997]))
    unknown call_tmp[720130] "expr temp" "maybe param" "maybe type" "temp"
    (720133 'move' call_tmp[720130](720063 call _cast int(64)[13] call_tmp[720125]))
    (720065 'init field' this[719994] c"rank" call_tmp[720130])
    unknown call_tmp[720137] "maybe param" "maybe type" "temp"
    (720140 'move' call_tmp[720137](720016 call obj _mt[232] other[719997]))
    unknown tmp[720068] "temp"
    (720071 'init var' tmp[720068] call_tmp[720137] anymanaged BaseSparseDom[350579](?))
    (720073 'init field' this[719994] c"obj" tmp[720068])
    unknown tmp[720077] "temp" "type variable"
    (720079 'move' tmp[720077](720026 call idxType _mt[232] other[719997]))
    (720081 'init field' this[719994] c"idxType" tmp[720077])
    unknown call_tmp[720146] "maybe param" "maybe type" "temp"
    (720149 'move' call_tmp[720146](720036 call bufDom _mt[232] other[719997]))
    unknown tmp[720085] "temp"
    (720087 'init var' tmp[720085] call_tmp[720146])
    (720089 '.=' this[719994] c"bufDom" tmp[720085])
    unknown call_tmp[720153] "maybe param" "maybe type" "temp"
    (720156 'move' call_tmp[720153](720046 call buf _mt[232] other[719997]))
    unknown call_tmp[720158] "expr temp" "maybe param" "maybe type" "temp"
    (720161 'move' call_tmp[720158](720107 '.' this[719994] c"bufDom"))
    unknown call_tmp[720163] "expr temp" "maybe param" "maybe type" "temp"
    (720166 'move' call_tmp[720163](720098 call chpl__ensureDomainExpr call_tmp[720158]))
    unknown call_tmp[720168] "expr temp" "maybe param" "maybe type" "temp"
    (720171 'move' call_tmp[720168](720110 '.v' this[719994] c"idxType"))
    unknown call_tmp[720173] "maybe param" "maybe type" "temp"
    (720176 'move' call_tmp[720173](720096 call chpl__buildArrayRuntimeType call_tmp[720163] call_tmp[720168]))
    unknown tmp[720093] "temp"
    (720101 'init var' tmp[720093] call_tmp[720153] call_tmp[720173])
    (720103 'init field' this[719994] c"buf" tmp[720093])
    unknown call_tmp[720180] "maybe param" "maybe type" "temp"
    (720183 'move' call_tmp[720180](720056 call cur _mt[232] other[719997]))
    unknown tmp[720113] "temp"
    (720115 'init var' tmp[720113] call_tmp[720180])
    (720117 '.=' this[719994] c"cur" tmp[720113])
    (720121 return _void[47])
  }
  function SparseIndexBuffer[144693](?).writeThis[720185](arg _mt[720189]:_MT[227], arg this[720187]:SparseIndexBuffer[144693](?), arg f[720188]:_any[170](?)) : void[4] "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (720194 call writeThisDefaultImpl f[720188] this[720187])
    (720198 return _void[47])
  }
  function SparseIndexBuffer[144693](?).readThis[720200](arg _mt[720204]:_MT[227], arg this[720202]:SparseIndexBuffer[144693](?), arg f[720203]:_any[170](?)) : void[4] "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (720208 call readThisDefaultImpl f[720203] this[720202])
    (720213 return _void[47])
  }
  function ==[720215](arg _arg1[720217]:SparseIndexBuffer[144693](?), arg _arg2[720218]:SparseIndexBuffer[144693](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[720317]:bool[10] "RVV" "temp"
    unknown call_tmp[720354] "expr temp" "maybe param" "maybe type" "temp"
    (720357 'move' call_tmp[720354](720228 call rank _mt[232] _arg1[720217]))
    unknown call_tmp[720359] "expr temp" "maybe param" "maybe type" "temp"
    (720362 'move' call_tmp[720359](720232 call rank _mt[232] _arg2[720218]))
    unknown call_tmp[720364] "expr temp" "maybe param" "maybe type" "temp"
    (720367 'move' call_tmp[720364](720236 call != call_tmp[720354] call_tmp[720359]))
    if call_tmp[720364]
    {
      (720322 'move' ret[720317](720321 'deref' 0))
      gotoReturn _end_==[720315] _end_==[720315]
    }
    unknown call_tmp[720369] "expr temp" "maybe param" "maybe type" "temp"
    (720372 'move' call_tmp[720369](720242 call obj _mt[232] _arg1[720217]))
    unknown call_tmp[720374] "expr temp" "maybe param" "maybe type" "temp"
    (720377 'move' call_tmp[720374](720246 call obj _mt[232] _arg2[720218]))
    unknown call_tmp[720379] "expr temp" "maybe param" "maybe type" "temp"
    (720382 'move' call_tmp[720379](720250 call != call_tmp[720369] call_tmp[720374]))
    if call_tmp[720379]
    {
      (720327 'move' ret[720317](720326 'deref' 0))
      gotoReturn _end_==[720315] _end_==[720315]
    }
    unknown call_tmp[720384] "expr temp" "maybe param" "maybe type" "temp"
    (720387 'move' call_tmp[720384](720256 call idxType _mt[232] _arg1[720217]))
    unknown call_tmp[720389] "expr temp" "maybe param" "maybe type" "temp"
    (720392 'move' call_tmp[720389](720260 call idxType _mt[232] _arg2[720218]))
    unknown call_tmp[720394] "expr temp" "maybe param" "maybe type" "temp"
    (720397 'move' call_tmp[720394](720264 call != call_tmp[720384] call_tmp[720389]))
    if call_tmp[720394]
    {
      (720332 'move' ret[720317](720331 'deref' 0))
      gotoReturn _end_==[720315] _end_==[720315]
    }
    unknown call_tmp[720399] "expr temp" "maybe param" "maybe type" "temp"
    (720402 'move' call_tmp[720399](720270 call bufDom _mt[232] _arg1[720217]))
    unknown call_tmp[720404] "expr temp" "maybe param" "maybe type" "temp"
    (720407 'move' call_tmp[720404](720274 call bufDom _mt[232] _arg2[720218]))
    unknown call_tmp[720409] "expr temp" "maybe param" "maybe type" "temp"
    (720412 'move' call_tmp[720409](720278 call != call_tmp[720399] call_tmp[720404]))
    if call_tmp[720409]
    {
      (720337 'move' ret[720317](720336 'deref' 0))
      gotoReturn _end_==[720315] _end_==[720315]
    }
    unknown call_tmp[720414] "expr temp" "maybe param" "maybe type" "temp"
    (720417 'move' call_tmp[720414](720284 call buf _mt[232] _arg1[720217]))
    unknown call_tmp[720419] "expr temp" "maybe param" "maybe type" "temp"
    (720422 'move' call_tmp[720419](720288 call buf _mt[232] _arg2[720218]))
    unknown call_tmp[720424] "expr temp" "maybe param" "maybe type" "temp"
    (720427 'move' call_tmp[720424](720292 call != call_tmp[720414] call_tmp[720419]))
    if call_tmp[720424]
    {
      (720342 'move' ret[720317](720341 'deref' 0))
      gotoReturn _end_==[720315] _end_==[720315]
    }
    unknown call_tmp[720429] "expr temp" "maybe param" "maybe type" "temp"
    (720432 'move' call_tmp[720429](720298 call cur _mt[232] _arg1[720217]))
    unknown call_tmp[720434] "expr temp" "maybe param" "maybe type" "temp"
    (720437 'move' call_tmp[720434](720302 call cur _mt[232] _arg2[720218]))
    unknown call_tmp[720439] "expr temp" "maybe param" "maybe type" "temp"
    (720442 'move' call_tmp[720439](720306 call != call_tmp[720429] call_tmp[720434]))
    if call_tmp[720439]
    {
      (720347 'move' ret[720317](720346 'deref' 0))
      gotoReturn _end_==[720315] _end_==[720315]
    }
    (720352 'move' ret[720317](720351 'deref' 1))
    label _end_==[720315]
    (720319 return ret[720317])
  }
  where {
    unknown call_tmp[720444] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (720447 'move' call_tmp[720444](720221 'typeof' _arg1[720217]))
    unknown call_tmp[720449] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (720452 'move' call_tmp[720449](720223 'typeof' _arg2[720218]))
    (720225 call == call_tmp[720444] call_tmp[720449])
  }
  function !=[720454](arg _arg1[720456]:SparseIndexBuffer[144693](?), arg _arg2[720457]:SparseIndexBuffer[144693](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[720556]:bool[10] "RVV" "temp"
    unknown call_tmp[720593] "expr temp" "maybe param" "maybe type" "temp"
    (720596 'move' call_tmp[720593](720467 call rank _mt[232] _arg1[720456]))
    unknown call_tmp[720598] "expr temp" "maybe param" "maybe type" "temp"
    (720601 'move' call_tmp[720598](720471 call rank _mt[232] _arg2[720457]))
    unknown call_tmp[720603] "expr temp" "maybe param" "maybe type" "temp"
    (720606 'move' call_tmp[720603](720475 call != call_tmp[720593] call_tmp[720598]))
    if call_tmp[720603]
    {
      (720561 'move' ret[720556](720560 'deref' 1))
      gotoReturn _end_!=[720554] _end_!=[720554]
    }
    unknown call_tmp[720608] "expr temp" "maybe param" "maybe type" "temp"
    (720611 'move' call_tmp[720608](720481 call obj _mt[232] _arg1[720456]))
    unknown call_tmp[720613] "expr temp" "maybe param" "maybe type" "temp"
    (720616 'move' call_tmp[720613](720485 call obj _mt[232] _arg2[720457]))
    unknown call_tmp[720618] "expr temp" "maybe param" "maybe type" "temp"
    (720621 'move' call_tmp[720618](720489 call != call_tmp[720608] call_tmp[720613]))
    if call_tmp[720618]
    {
      (720566 'move' ret[720556](720565 'deref' 1))
      gotoReturn _end_!=[720554] _end_!=[720554]
    }
    unknown call_tmp[720623] "expr temp" "maybe param" "maybe type" "temp"
    (720626 'move' call_tmp[720623](720495 call idxType _mt[232] _arg1[720456]))
    unknown call_tmp[720628] "expr temp" "maybe param" "maybe type" "temp"
    (720631 'move' call_tmp[720628](720499 call idxType _mt[232] _arg2[720457]))
    unknown call_tmp[720633] "expr temp" "maybe param" "maybe type" "temp"
    (720636 'move' call_tmp[720633](720503 call != call_tmp[720623] call_tmp[720628]))
    if call_tmp[720633]
    {
      (720571 'move' ret[720556](720570 'deref' 1))
      gotoReturn _end_!=[720554] _end_!=[720554]
    }
    unknown call_tmp[720638] "expr temp" "maybe param" "maybe type" "temp"
    (720641 'move' call_tmp[720638](720509 call bufDom _mt[232] _arg1[720456]))
    unknown call_tmp[720643] "expr temp" "maybe param" "maybe type" "temp"
    (720646 'move' call_tmp[720643](720513 call bufDom _mt[232] _arg2[720457]))
    unknown call_tmp[720648] "expr temp" "maybe param" "maybe type" "temp"
    (720651 'move' call_tmp[720648](720517 call != call_tmp[720638] call_tmp[720643]))
    if call_tmp[720648]
    {
      (720576 'move' ret[720556](720575 'deref' 1))
      gotoReturn _end_!=[720554] _end_!=[720554]
    }
    unknown call_tmp[720653] "expr temp" "maybe param" "maybe type" "temp"
    (720656 'move' call_tmp[720653](720523 call buf _mt[232] _arg1[720456]))
    unknown call_tmp[720658] "expr temp" "maybe param" "maybe type" "temp"
    (720661 'move' call_tmp[720658](720527 call buf _mt[232] _arg2[720457]))
    unknown call_tmp[720663] "expr temp" "maybe param" "maybe type" "temp"
    (720666 'move' call_tmp[720663](720531 call != call_tmp[720653] call_tmp[720658]))
    if call_tmp[720663]
    {
      (720581 'move' ret[720556](720580 'deref' 1))
      gotoReturn _end_!=[720554] _end_!=[720554]
    }
    unknown call_tmp[720668] "expr temp" "maybe param" "maybe type" "temp"
    (720671 'move' call_tmp[720668](720537 call cur _mt[232] _arg1[720456]))
    unknown call_tmp[720673] "expr temp" "maybe param" "maybe type" "temp"
    (720676 'move' call_tmp[720673](720541 call cur _mt[232] _arg2[720457]))
    unknown call_tmp[720678] "expr temp" "maybe param" "maybe type" "temp"
    (720681 'move' call_tmp[720678](720545 call != call_tmp[720668] call_tmp[720673]))
    if call_tmp[720678]
    {
      (720586 'move' ret[720556](720585 'deref' 1))
      gotoReturn _end_!=[720554] _end_!=[720554]
    }
    (720591 'move' ret[720556](720590 'deref' 0))
    label _end_!=[720554]
    (720558 return ret[720556])
  }
  where {
    unknown call_tmp[720683] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (720686 'move' call_tmp[720683](720460 'typeof' _arg1[720456]))
    unknown call_tmp[720688] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (720691 'move' call_tmp[720688](720462 'typeof' _arg2[720457]))
    (720464 call == call_tmp[720683] call_tmp[720688])
  }
  function =[720693](ref arg _arg1[720695]:SparseIndexBuffer[144693](?), const?  ref arg _arg2[720696]:SparseIndexBuffer[144693](?)) : void[4] "assignop" "compiler generated" "last resort"
  {
    unknown call_tmp[720751] "expr temp" "maybe param" "maybe type" "temp"
    (720754 'move' call_tmp[720751](720706 call obj _mt[232] _arg1[720695]))
    unknown call_tmp[720758] "expr temp" "maybe param" "maybe type" "temp"
    (720761 'move' call_tmp[720758](720710 call obj _mt[232] _arg2[720696]))
    (720714 call = call_tmp[720751] call_tmp[720758])
    unknown call_tmp[720765] "expr temp" "maybe param" "maybe type" "temp"
    (720768 'move' call_tmp[720765](720716 call bufDom _mt[232] _arg1[720695]))
    unknown call_tmp[720772] "expr temp" "maybe param" "maybe type" "temp"
    (720775 'move' call_tmp[720772](720720 call bufDom _mt[232] _arg2[720696]))
    (720724 call = call_tmp[720765] call_tmp[720772])
    unknown call_tmp[720779] "expr temp" "maybe param" "maybe type" "temp"
    (720782 'move' call_tmp[720779](720726 call buf _mt[232] _arg1[720695]))
    unknown call_tmp[720786] "expr temp" "maybe param" "maybe type" "temp"
    (720789 'move' call_tmp[720786](720730 call buf _mt[232] _arg2[720696]))
    (720734 call = call_tmp[720779] call_tmp[720786])
    unknown call_tmp[720793] "expr temp" "maybe param" "maybe type" "temp"
    (720796 'move' call_tmp[720793](720736 call cur _mt[232] _arg1[720695]))
    unknown call_tmp[720800] "expr temp" "maybe param" "maybe type" "temp"
    (720803 'move' call_tmp[720800](720740 call cur _mt[232] _arg2[720696]))
    (720744 call = call_tmp[720793] call_tmp[720800])
    (720747 return _void[47])
  }
  where {
    unknown call_tmp[720805] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (720808 'move' call_tmp[720805](720699 'typeof' _arg1[720695]))
    unknown call_tmp[720810] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (720813 'move' call_tmp[720810](720701 'typeof' _arg2[720696]))
    (720703 call == call_tmp[720805] call_tmp[720810])
  }
  function chpl__defaultHash[720815](arg r[720817]:SparseIndexBuffer[144693](?)) : _unknown[43] "compiler generated" "last resort"
  {
    unknown ret[720874] "RVV" "temp"
    unknown call_tmp[720881] "expr temp" "maybe param" "maybe type" "temp"
    (720884 'move' call_tmp[720881](720861 call cur _mt[232] r[720817]))
    unknown call_tmp[720886] "expr temp" "maybe param" "maybe type" "temp"
    (720889 'move' call_tmp[720886](720865 call chpl__defaultHash call_tmp[720881]))
    unknown call_tmp[720891] "expr temp" "maybe param" "maybe type" "temp"
    (720894 'move' call_tmp[720891](720852 call buf _mt[232] r[720817]))
    unknown call_tmp[720896] "expr temp" "maybe param" "maybe type" "temp"
    (720899 'move' call_tmp[720896](720856 call chpl__defaultHash call_tmp[720891]))
    unknown call_tmp[720901] "expr temp" "maybe param" "maybe type" "temp"
    (720904 'move' call_tmp[720901](720843 call bufDom _mt[232] r[720817]))
    unknown call_tmp[720906] "expr temp" "maybe param" "maybe type" "temp"
    (720909 'move' call_tmp[720906](720847 call chpl__defaultHash call_tmp[720901]))
    unknown call_tmp[720911] "expr temp" "maybe param" "maybe type" "temp"
    (720914 'move' call_tmp[720911](720834 call idxType _mt[232] r[720817]))
    unknown call_tmp[720916] "expr temp" "maybe param" "maybe type" "temp"
    (720919 'move' call_tmp[720916](720838 call chpl__defaultHash call_tmp[720911]))
    unknown call_tmp[720921] "expr temp" "maybe param" "maybe type" "temp"
    (720924 'move' call_tmp[720921](720825 call obj _mt[232] r[720817]))
    unknown call_tmp[720926] "expr temp" "maybe param" "maybe type" "temp"
    (720929 'move' call_tmp[720926](720829 call chpl__defaultHash call_tmp[720921]))
    unknown call_tmp[720931] "expr temp" "maybe param" "maybe type" "temp"
    (720934 'move' call_tmp[720931](720819 call rank _mt[232] r[720817]))
    unknown call_tmp[720936] "expr temp" "maybe param" "maybe type" "temp"
    (720939 'move' call_tmp[720936](720823 call chpl__defaultHash call_tmp[720931]))
    unknown call_tmp[720941] "expr temp" "maybe param" "maybe type" "temp"
    (720944 'move' call_tmp[720941](720831 call chpl__defaultHashCombine call_tmp[720926] call_tmp[720936] 2))
    unknown call_tmp[720946] "expr temp" "maybe param" "maybe type" "temp"
    (720949 'move' call_tmp[720946](720840 call chpl__defaultHashCombine call_tmp[720916] call_tmp[720941] 3))
    unknown call_tmp[720951] "expr temp" "maybe param" "maybe type" "temp"
    (720954 'move' call_tmp[720951](720849 call chpl__defaultHashCombine call_tmp[720906] call_tmp[720946] 4))
    unknown call_tmp[720956] "expr temp" "maybe param" "maybe type" "temp"
    (720959 'move' call_tmp[720956](720858 call chpl__defaultHashCombine call_tmp[720896] call_tmp[720951] 5))
    unknown call_tmp[720961] "expr temp" "maybe param" "maybe type" "temp"
    (720964 'move' call_tmp[720961](720867 call chpl__defaultHashCombine call_tmp[720886] call_tmp[720956] 6))
    (720879 'move' ret[720874](720878 'deref' call_tmp[720961]))
    (720876 return ret[720874])
  }
  type SparseIndexBuffer[144693](?) unknown rank[144516] "param" int(64)[13] val obj[144520]:anymanaged BaseSparseDom[350579](?) anymanaged BaseSparseDom[350579](?) unknown idxType[144535] "type variable"(144532 IfExpr (144525 call == rank[144516] 1) then
  { scopeless
    int(64)[13]
  } else
  { scopeless
    (144530 call * rank[144516] int(64)[13])
  } ) unknown bufDom[144543](144541 call chpl__buildDomainRuntimeType defaultDist[93214] 1) unknown buf[144553](144551 call chpl__buildArrayRuntimeType(144549 call chpl__ensureDomainExpr bufDom[144543]) idxType[144535]) val cur[144557]:int(64)[13] 0
  function BaseSparseDom[145163](?).getNNZ[144727](arg _mt[145167]:_MT[227], arg this[145165]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown ret[470354] "RVV" "temp"
    (144748 call halt "nnz queried on base class")
    (470356 return ret[470354])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[145163](?).deinit[144756](arg _mt[145171]:_MT[227], arg this[145169]:BaseSparseDom[145163](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470358 return _void[47])
  }
  function BaseSparseDom[145163](?).dsiClear[144763](arg _mt[145175]:_MT[227], arg this[145173]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (144783 call halt "clear not implemented for this distribution - BaseSparseDom")
    (470360 return _void[47])
  }
  function BaseSparseDom[145163](?).dsiBulkAdd[144801](arg _mt[145179]:_MT[227], arg this[145177]:BaseSparseDom[145163](?), arg inds[144798]:_array[133150](?), arg dataSorted[144804] :
  0 =
  0, arg isUnique[144808] :
  0 =
  0, arg preserveInds[144812] :
  1 =
  1, arg addOn[144820] :
  (692395 call _cast borrowed locale?[389810] nil[38]) =
  (144818 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "compiler added where" "method" "primary method"
  {
    unknown ret[470364] "RVV" "temp"
    (144842 call halt "Bulk addition is not supported by this sparse domain")
    (470370 'move' ret[470364](470369 'coerce' 0 int(64)[13]))
    (470366 return ret[470364])
  }
  where {
    unknown call_tmp[616406] "expr temp" "maybe param" "maybe type" "temp"
    (616409 'move' call_tmp[616406](355504 call rank _mt[232] this[145177]))
    unknown call_tmp[616413] "expr temp" "maybe param" "maybe type" "temp"
    (616416 'move' call_tmp[616413](355509 call idxType _mt[232] this[145177]))
    unknown call_tmp[616418] "expr temp" "maybe param" "maybe type" "temp"
    (616421 'move' call_tmp[616418](144793 call chpl__buildIndexType call_tmp[616406] call_tmp[616413]))
    unknown call_tmp[616425] "expr temp" "maybe param" "maybe type" "temp"
    (616428 'move' call_tmp[616425](436699 call eltType _mt[232] inds[144798]))
    unknown call_tmp[616430] "expr temp" "maybe param" "maybe type" "temp"
    (616433 'move' call_tmp[616430](436703 call == call_tmp[616418] call_tmp[616425]))
    (436697 call & 1 call_tmp[616430])
  }
  { scopeless type
    int(64)[13]
  }
  function BaseSparseDom[145163](?).boundsCheck[144861](arg _mt[145183]:_MT[227], arg this[145181]:BaseSparseDom[145163](?), arg ind[144858] :
  unknown call_tmp[616437] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown ret[470374] "RVV" "temp"
    unknown call_tmp[616449] "expr temp" "maybe param" "maybe type" "temp"
    (616452 'move' call_tmp[616449](144918 call _cond_test 1))
    if call_tmp[616449]
    {
      unknown call_tmp[616456] "expr temp" "maybe param" "maybe type" "temp"
      (616459 'move' call_tmp[616456](355525 call parentDom _mt[232] this[145181]))
      unknown call_tmp[616463] "expr temp" "maybe param" "maybe type" "temp"
      (616466 'move' call_tmp[616463](144871 call(144866 call (partial) contains _mt[232] call_tmp[616456]) ind[144858]))
      unknown call_tmp[616468] "expr temp" "maybe param" "maybe type" "temp"
      (616471 'move' call_tmp[616468](144872 call ! call_tmp[616463]))
      unknown call_tmp[616473] "expr temp" "maybe param" "maybe type" "temp"
      (616476 'move' call_tmp[616473](144913 call _cond_test call_tmp[616468]))
      if call_tmp[616473]
      {
        unknown call_tmp[616480] "expr temp" "maybe param" "maybe type" "temp"
        (616483 'move' call_tmp[616480](355532 call parentDom _mt[232] this[145181]))
        (144911 call halt "Sparse domain/array index out of bounds: " ind[144858] " (expected to be within " call_tmp[616480] ")")
      }
    }
    (470376 return ret[470374])
  }
  { scopeless type
    void[4]
  }
  function BaseSparseDom[145163](?).dsiDim[144933](arg _mt[145187]:_MT[227], arg this[145185]:BaseSparseDom[145163](?), arg d[144930]:int(64)[13]) : _unknown[43] "method" "primary method"
  {
    unknown ret[470380] "RVV" "temp"
    unknown call_tmp[616487] "expr temp" "maybe param" "maybe type" "temp"
    (616490 'move' call_tmp[616487](355537 call parentDom _mt[232] this[145185]))
    unknown call_tmp[616494] "expr temp" "maybe param" "maybe type" "temp"
    (616497 'move' call_tmp[616494](144941 call(144936 call (partial) dim _mt[232] call_tmp[616487]) d[144930]))
    (470385 'move' ret[470380](470384 'deref' call_tmp[616494]))
    (470382 return ret[470380])
  }
  function BaseSparseDom[145163](?).dsiDims[144949](arg _mt[145191]:_MT[227], arg this[145189]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[470389] "RVV" "temp"
    unknown call_tmp[616501] "expr temp" "maybe param" "maybe type" "temp"
    (616504 'move' call_tmp[616501](355543 call parentDom _mt[232] this[145189]))
    unknown call_tmp[616508] "expr temp" "maybe param" "maybe type" "temp"
    (616511 'move' call_tmp[616508](144956 call(144952 call (partial) dims _mt[232] call_tmp[616501])))
    (470394 'move' ret[470389](470393 'deref' call_tmp[616508]))
    (470391 return ret[470389])
  }
  function BaseSparseDom[145163](?).dsiNumIndices[144964](arg _mt[145195]:_MT[227], arg this[145193]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470398] "RVV" "temp"
    unknown call_tmp[616515] "expr temp" "maybe param" "maybe type" "temp"
    (616518 'move' call_tmp[616515](144968 call(355547 call (partial) getNNZ _mt[232] this[145193])))
    (470403 'move' ret[470398](470402 'deref' call_tmp[616515]))
    (470400 return ret[470398])
  }
  function BaseSparseDom[145163](?).dsiSize[144976](arg _mt[145199]:_MT[227], arg this[145197]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470407] "RVV" "temp"
    unknown call_tmp[616522] "expr temp" "maybe param" "maybe type" "temp"
    (616525 'move' call_tmp[616522](144980 call(355551 call (partial) getNNZ _mt[232] this[145197])))
    (470412 'move' ret[470407](470411 'deref' call_tmp[616522]))
    (470409 return ret[470407])
  }
  function BaseSparseDom[145163](?).dsiLow[144988](arg _mt[145203]:_MT[227], arg this[145201]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470416] "RVV" "temp"
    unknown call_tmp[616529] "expr temp" "maybe param" "maybe type" "temp"
    (616532 'move' call_tmp[616529](355556 call parentDom _mt[232] this[145201]))
    unknown call_tmp[616536] "expr temp" "maybe param" "maybe type" "temp"
    (616539 'move' call_tmp[616536](144991 call low _mt[232] call_tmp[616529]))
    (470421 'move' ret[470416](470420 'deref' call_tmp[616536]))
    (470418 return ret[470416])
  }
  function BaseSparseDom[145163](?).dsiHigh[145001](arg _mt[145207]:_MT[227], arg this[145205]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470425] "RVV" "temp"
    unknown call_tmp[616543] "expr temp" "maybe param" "maybe type" "temp"
    (616546 'move' call_tmp[616543](355561 call parentDom _mt[232] this[145205]))
    unknown call_tmp[616550] "expr temp" "maybe param" "maybe type" "temp"
    (616553 'move' call_tmp[616550](145004 call high _mt[232] call_tmp[616543]))
    (470430 'move' ret[470425](470429 'deref' call_tmp[616550]))
    (470427 return ret[470425])
  }
  function BaseSparseDom[145163](?).dsiStride[145014](arg _mt[145211]:_MT[227], arg this[145209]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470434] "RVV" "temp"
    unknown call_tmp[616557] "expr temp" "maybe param" "maybe type" "temp"
    (616560 'move' call_tmp[616557](355566 call parentDom _mt[232] this[145209]))
    unknown call_tmp[616564] "expr temp" "maybe param" "maybe type" "temp"
    (616567 'move' call_tmp[616564](145017 call stride _mt[232] call_tmp[616557]))
    (470439 'move' ret[470434](470438 'deref' call_tmp[616564]))
    (470436 return ret[470434])
  }
  function BaseSparseDom[145163](?).dsiAlignment[145027](arg _mt[145215]:_MT[227], arg this[145213]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470443] "RVV" "temp"
    unknown call_tmp[616571] "expr temp" "maybe param" "maybe type" "temp"
    (616574 'move' call_tmp[616571](355571 call parentDom _mt[232] this[145213]))
    unknown call_tmp[616578] "expr temp" "maybe param" "maybe type" "temp"
    (616581 'move' call_tmp[616578](145030 call alignment _mt[232] call_tmp[616571]))
    (470448 'move' ret[470443](470447 'deref' call_tmp[616578]))
    (470445 return ret[470443])
  }
  function BaseSparseDom[145163](?).dsiFirst[145040](arg _mt[145219]:_MT[227], arg this[145217]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470452] "RVV" "temp"
    (145060 call halt "dsiFirst is not implemented")
    const _tmp[145067] "const" "insert auto destroy"
    unknown call_tmp[616585] "expr temp" "maybe param" "maybe type" "temp"
    (616588 'move' call_tmp[616585](355576 call rank _mt[232] this[145217]))
    unknown call_tmp[616592] "expr temp" "maybe param" "maybe type" "temp"
    (616595 'move' call_tmp[616592](355581 call idxType _mt[232] this[145217]))
    unknown call_tmp[616597] "expr temp" "maybe param" "maybe type" "temp"
    (616600 'move' call_tmp[616597](145065 call * call_tmp[616585] call_tmp[616592]))
    (491878 'default init var' _tmp[145067] call_tmp[616597])
    (470457 'move' ret[470452](470456 'deref' _tmp[145067]))
    (470454 return ret[470452])
  }
  function BaseSparseDom[145163](?).dsiLast[145077](arg _mt[145223]:_MT[227], arg this[145221]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470461] "RVV" "temp"
    (145097 call halt "dsiLast not implemented")
    const _tmp[145104] "const" "insert auto destroy"
    unknown call_tmp[616604] "expr temp" "maybe param" "maybe type" "temp"
    (616607 'move' call_tmp[616604](355587 call rank _mt[232] this[145221]))
    unknown call_tmp[616611] "expr temp" "maybe param" "maybe type" "temp"
    (616614 'move' call_tmp[616611](355592 call idxType _mt[232] this[145221]))
    unknown call_tmp[616616] "expr temp" "maybe param" "maybe type" "temp"
    (616619 'move' call_tmp[616616](145102 call * call_tmp[616604] call_tmp[616611]))
    (491880 'default init var' _tmp[145104] call_tmp[616616])
    (470466 'move' ret[470461](470465 'deref' _tmp[145104]))
    (470463 return ret[470461])
  }
  function BaseSparseDom[145163](?).dsiAlignedLow[145114](arg _mt[145227]:_MT[227], arg this[145225]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470470] "RVV" "temp"
    unknown call_tmp[616623] "expr temp" "maybe param" "maybe type" "temp"
    (616626 'move' call_tmp[616623](355598 call parentDom _mt[232] this[145225]))
    unknown call_tmp[616630] "expr temp" "maybe param" "maybe type" "temp"
    (616633 'move' call_tmp[616630](145117 call alignedLow _mt[232] call_tmp[616623]))
    (470475 'move' ret[470470](470474 'deref' call_tmp[616630]))
    (470472 return ret[470470])
  }
  function BaseSparseDom[145163](?).dsiAlignedHigh[145127](arg _mt[145231]:_MT[227], arg this[145229]:BaseSparseDom[145163](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470479] "RVV" "temp"
    unknown call_tmp[616637] "expr temp" "maybe param" "maybe type" "temp"
    (616640 'move' call_tmp[616637](355603 call parentDom _mt[232] this[145229]))
    unknown call_tmp[616644] "expr temp" "maybe param" "maybe type" "temp"
    (616647 'move' call_tmp[616644](145130 call alignedHigh _mt[232] call_tmp[616637]))
    (470484 'move' ret[470479](470483 'deref' call_tmp[616644]))
    (470481 return ret[470479])
  }
  function BaseSparseDom[145163](?).dsiMakeIndexBuffer[145142](arg _mt[145235]:_MT[227], arg this[145233]:BaseSparseDom[145163](?), arg size[145140]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[470488] "RVV" "temp"
    unknown call_tmp[616651] "expr temp" "maybe param" "maybe type" "temp"
    (616654 'move' call_tmp[616651](145146 call rank _mt[232] this[145233]))
    unknown call_tmp[616656] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (616659 'move' call_tmp[616656](691448 'new' SparseIndexBuffer[144693](?)(rank = call_tmp[616651])(obj = this[145233])(size = size[145140])))
    (470493 'move' ret[470488](470492 'deref' call_tmp[616656]))
    (470490 return ret[470488])
  }
  function BaseSparseDom[145163](?).init[719480](arg _mt[719482]:_MT[227], arg this[719483]:BaseSparseDom[145163](?), param arg rank[719494]:int(64)[13], arg idxType[719506]:_any[170](?), in arg parentDom[719515]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[719526] "temporary of super field" "temp"
    (719528 'move' super_tmp[719526](719525 '.v' this[719483] c"super"))
    (719493 call(719491 call (partial) init _mt[232] super_tmp[719526]))
    unknown tmp[719531] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[719561] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[719573] "expr temp" "maybe param" "maybe type" "temp"
      (719576 'move' call_tmp[719573](719533 '.v' this[719483] c"super"))
      (719565 'move' call_type_tmp[719561](719536 'typeof' call_tmp[719573]))
    }
    (719537 'move' tmp[719531] call_type_tmp[719561])
    unknown call_tmp[719578] "maybe param" "maybe type" "temp"
    (719581 'move' call_tmp[719578](719542 'cast' tmp[719531] this[719483]))
    unknown chpl__thisAsParent[719539] "insert auto destroy" "temp"
    (719569 'init var' chpl__thisAsParent[719539] call_tmp[719578] tmp[719531])
    (719545 'setcid' chpl__thisAsParent[719539])
    unknown call_tmp[719583] "expr temp" "maybe param" "maybe type" "temp"
    (719586 'move' call_tmp[719583](719548 call _cast int(64)[13] rank[719494]))
    (719550 'init field' this[719483] c"rank" call_tmp[719583])
    (719553 'init field' this[719483] c"idxType" idxType[719506])
    (719556 'init field' this[719483] c"parentDom" parentDom[719515])
    (719559 'setcid' this[719483])
    (719567 return _void[47])
  }
  function BaseSparseDom[145163](?).super[720966](arg _mt[720968]:_MT[227], arg this[720970]:BaseSparseDom[145163](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[720979] "RVV" "temp"
    unknown call_tmp[720986] "expr temp" "maybe param" "maybe type" "temp"
    (720989 'move' call_tmp[720986](720974 '.v' this[720970] c"super"))
    (720984 'move' ret[720979](720983 'deref' call_tmp[720986]))
    (720981 return ret[720979])
  }
  function BaseSparseDom[145163](?).rank[720991](arg _mt[720993]:_MT[227], arg this[720995]:BaseSparseDom[145163](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721012] "RVV" "param" "temp"
    unknown call_tmp[721026] "expr temp" "maybe param" "maybe type" "temp"
    (721029 'move' call_tmp[721026](721000 'is bound' this[720995] c"rank"))
    if call_tmp[721026]
    {
      unknown call_tmp[721031] "expr temp" "maybe param" "maybe type" "temp"
      (721034 'move' call_tmp[721031](720999 '.' this[720995] c"rank"))
      (721017 'move' ret[721012](721016 'deref' call_tmp[721031]))
      gotoReturn _end_rank[721010] _end_rank[721010]
    }
    {
      (721022 'move' ret[721012](721021 'deref' ?[249]))
      gotoReturn _end_rank[721010] _end_rank[721010]
    }
    label _end_rank[721010]
    (721014 return ret[721012])
  }
  function anymanaged anynil BaseSparseDom[721041](?).rank[721036](arg _mt[721038]:_MT[227], arg this[721043]:anymanaged anynil BaseSparseDom[721041](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721060] "RVV" "param" "temp"
    unknown call_tmp[721074] "expr temp" "maybe param" "maybe type" "temp"
    (721077 'move' call_tmp[721074](721048 'is bound' this[721043] c"rank"))
    if call_tmp[721074]
    {
      unknown call_tmp[721079] "expr temp" "maybe param" "maybe type" "temp"
      (721082 'move' call_tmp[721079](721047 '.' this[721043] c"rank"))
      (721065 'move' ret[721060](721064 'deref' call_tmp[721079]))
      gotoReturn _end_rank[721058] _end_rank[721058]
    }
    {
      (721070 'move' ret[721060](721069 'deref' ?[249]))
      gotoReturn _end_rank[721058] _end_rank[721058]
    }
    label _end_rank[721058]
    (721062 return ret[721060])
  }
  function BaseSparseDom[145163](?).idxType[721084](arg _mt[721086]:_MT[227], arg this[721088]:BaseSparseDom[145163](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721105] "RVV" "temp" "type variable"
    unknown call_tmp[721119] "expr temp" "maybe param" "maybe type" "temp"
    (721122 'move' call_tmp[721119](721093 'is bound' this[721088] c"idxType"))
    if call_tmp[721119]
    {
      unknown call_tmp[721124] "expr temp" "maybe param" "maybe type" "temp"
      (721127 'move' call_tmp[721124](721092 '.v' this[721088] c"idxType"))
      (721110 'move' ret[721105](721109 'deref' call_tmp[721124]))
      gotoReturn _end_idxType[721103] _end_idxType[721103]
    }
    {
      (721115 'move' ret[721105](721114 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[721103] _end_idxType[721103]
    }
    label _end_idxType[721103]
    (721107 return ret[721105])
  }
  function anymanaged anynil BaseSparseDom[721041](?).idxType[721129](arg _mt[721131]:_MT[227], arg this[721133]:anymanaged anynil BaseSparseDom[721041](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721150] "RVV" "temp" "type variable"
    unknown call_tmp[721164] "expr temp" "maybe param" "maybe type" "temp"
    (721167 'move' call_tmp[721164](721138 'is bound' this[721133] c"idxType"))
    if call_tmp[721164]
    {
      unknown call_tmp[721169] "expr temp" "maybe param" "maybe type" "temp"
      (721172 'move' call_tmp[721169](721137 '.v' this[721133] c"idxType"))
      (721155 'move' ret[721150](721154 'deref' call_tmp[721169]))
      gotoReturn _end_idxType[721148] _end_idxType[721148]
    }
    {
      (721160 'move' ret[721150](721159 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[721148] _end_idxType[721148]
    }
    label _end_idxType[721148]
    (721152 return ret[721150])
  }
  function BaseSparseDom[145163](?).parentDom[721174](arg _mt[721176]:_MT[227], arg this[721178]:BaseSparseDom[145163](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721187] "RVV" "temp"
    unknown call_tmp[721194] "expr temp" "maybe param" "maybe type" "temp"
    (721197 'move' call_tmp[721194](721182 '.' this[721178] c"parentDom"))
    (721192 'move' ret[721187](721191 'addr of' call_tmp[721194]))
    (721189 return ret[721187])
  }
  function BaseSparseDom[145163](?).writeThis[721199](arg _mt[721203]:_MT[227], arg this[721201]:BaseSparseDom[145163](?), arg f[721202]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721208 call writeThisDefaultImpl f[721202] this[721201])
    (721212 return _void[47])
  }
  function BaseSparseDom[145163](?).readThis[721214](arg _mt[721218]:_MT[227], arg this[721216]:BaseSparseDom[145163](?), arg f[721217]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721222 call readThisDefaultImpl f[721217] this[721216])
    (721227 return _void[47])
  }
  type BaseSparseDom[145163](?) val super[331027]:BaseDom[143244] "super class" unknown rank[144716] "param" int(64)[13] unknown idxType[144719] "type variable" unknown parentDom[144722]
  type anymanaged anynil BaseSparseDom[721041](?)
  type anymanaged BaseSparseDom[350579](?)
  function BaseAssociativeDom[145308].deinit[145243](arg _mt[145312]:_MT[227], arg this[145310]:BaseAssociativeDom[145308]) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470495 return _void[47])
  }
  function BaseAssociativeDom[145308].dsiClear[145250](arg _mt[145316]:_MT[227], arg this[145314]:BaseAssociativeDom[145308]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145270 call halt "clear not implemented for this distribution")
    (470497 return _void[47])
  }
  function BaseAssociativeDom[145308].dsiAdd[145279](arg _mt[145320]:_MT[227], arg this[145318]:BaseAssociativeDom[145308], arg idx[145277]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[470501] "RVV" "temp"
    (145299 call compilerError "Index addition is not supported by this domain")
    (470506 'move' ret[470501](470505 'deref' 0))
    (470503 return ret[470501])
  }
  function BaseAssociativeDom[145308].super[721229](arg _mt[721231]:_MT[227], arg this[721233]:BaseAssociativeDom[145308]) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721242] "RVV" "temp"
    unknown call_tmp[721249] "expr temp" "maybe param" "maybe type" "temp"
    (721252 'move' call_tmp[721249](721237 '.v' this[721233] c"super"))
    (721247 'move' ret[721242](721246 'deref' call_tmp[721249]))
    (721244 return ret[721242])
  }
  function BaseAssociativeDom[145308].init[721254](arg _mt[721256]:_MT[227], arg this[721257]:BaseAssociativeDom[145308]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[721270] "temporary of super field" "temp"
    (721272 'move' super_tmp[721270](721269 '.v' this[721257] c"super"))
    (721267 call(721265 call (partial) init _mt[232] super_tmp[721270]))
    unknown tmp[721275] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[721293] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[721305] "expr temp" "maybe param" "maybe type" "temp"
      (721308 'move' call_tmp[721305](721277 '.v' this[721257] c"super"))
      (721297 'move' call_type_tmp[721293](721280 'typeof' call_tmp[721305]))
    }
    (721281 'move' tmp[721275] call_type_tmp[721293])
    unknown call_tmp[721310] "maybe param" "maybe type" "temp"
    (721313 'move' call_tmp[721310](721286 'cast' tmp[721275] this[721257]))
    unknown chpl__thisAsParent[721283] "insert auto destroy" "temp"
    (721301 'init var' chpl__thisAsParent[721283] call_tmp[721310] tmp[721275])
    (721289 'setcid' chpl__thisAsParent[721283])
    (721291 'setcid' this[721257])
    (721299 return _void[47])
  }
  function BaseAssociativeDom[145308].writeThis[721315](arg _mt[721319]:_MT[227], arg this[721317]:BaseAssociativeDom[145308], arg f[721318]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721324 call writeThisDefaultImpl f[721318] this[721317])
    (721328 return _void[47])
  }
  function BaseAssociativeDom[145308].readThis[721330](arg _mt[721334]:_MT[227], arg this[721332]:BaseAssociativeDom[145308], arg f[721333]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721338 call readThisDefaultImpl f[721333] this[721332])
    (721343 return _void[47])
  }
  type BaseAssociativeDom[145308] val super[331031]:BaseDom[143244] "super class"
  type anymanaged BaseAssociativeDom[350562](?)
  function BaseOpaqueDom[145346].deinit[145328](arg _mt[145350]:_MT[227], arg this[145348]:BaseOpaqueDom[145346]) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470508 return _void[47])
  }
  function BaseOpaqueDom[145346].dsiClear[145335](arg _mt[145354]:_MT[227], arg this[145352]:BaseOpaqueDom[145346]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145340 call halt "clear not implemented for this distribution")
    (470510 return _void[47])
  }
  function BaseOpaqueDom[145346].super[721345](arg _mt[721347]:_MT[227], arg this[721349]:BaseOpaqueDom[145346]) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721358] "RVV" "temp"
    unknown call_tmp[721365] "expr temp" "maybe param" "maybe type" "temp"
    (721368 'move' call_tmp[721365](721353 '.v' this[721349] c"super"))
    (721363 'move' ret[721358](721362 'deref' call_tmp[721365]))
    (721360 return ret[721358])
  }
  function BaseOpaqueDom[145346].init[721370](arg _mt[721372]:_MT[227], arg this[721373]:BaseOpaqueDom[145346]) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[721386] "temporary of super field" "temp"
    (721388 'move' super_tmp[721386](721385 '.v' this[721373] c"super"))
    (721383 call(721381 call (partial) init _mt[232] super_tmp[721386]))
    unknown tmp[721391] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[721409] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[721421] "expr temp" "maybe param" "maybe type" "temp"
      (721424 'move' call_tmp[721421](721393 '.v' this[721373] c"super"))
      (721413 'move' call_type_tmp[721409](721396 'typeof' call_tmp[721421]))
    }
    (721397 'move' tmp[721391] call_type_tmp[721409])
    unknown call_tmp[721426] "maybe param" "maybe type" "temp"
    (721429 'move' call_tmp[721426](721402 'cast' tmp[721391] this[721373]))
    unknown chpl__thisAsParent[721399] "insert auto destroy" "temp"
    (721417 'init var' chpl__thisAsParent[721399] call_tmp[721426] tmp[721391])
    (721405 'setcid' chpl__thisAsParent[721399])
    (721407 'setcid' this[721373])
    (721415 return _void[47])
  }
  function BaseOpaqueDom[145346].writeThis[721431](arg _mt[721435]:_MT[227], arg this[721433]:BaseOpaqueDom[145346], arg f[721434]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721440 call writeThisDefaultImpl f[721434] this[721433])
    (721444 return _void[47])
  }
  function BaseOpaqueDom[145346].readThis[721446](arg _mt[721450]:_MT[227], arg this[721448]:BaseOpaqueDom[145346], arg f[721449]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721454 call readThisDefaultImpl f[721449] this[721448])
    (721459 return _void[47])
  }
  type BaseOpaqueDom[145346] val super[331033]:BaseDom[143244] "super class"
  type anymanaged BaseOpaqueDom[350571](?)
  function BaseArr[145926].chpl__rvfMe[145370](arg _mt[145930]:_MT[227], arg this[145928]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470514] "RVV" "param" "temp"
    (470519 'move' ret[470514](470518 'deref' 0))
    (470516 return ret[470514])
  }
  function BaseArr[145926].isSliceArrayView[145380](arg _mt[145934]:_MT[227], arg this[145932]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470523] "RVV" "param" "temp"
    (470528 'move' ret[470523](470527 'deref' 0))
    (470525 return ret[470523])
  }
  function BaseArr[145926].isRankChangeArrayView[145390](arg _mt[145938]:_MT[227], arg this[145936]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470532] "RVV" "param" "temp"
    (470537 'move' ret[470532](470536 'deref' 0))
    (470534 return ret[470532])
  }
  function BaseArr[145926].isReindexArrayView[145400](arg _mt[145942]:_MT[227], arg this[145940]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470541] "RVV" "param" "temp"
    (470546 'move' ret[470541](470545 'deref' 0))
    (470543 return ret[470541])
  }
  function BaseArr[145926].deinit[145410](arg _mt[145946]:_MT[227], arg this[145944]:BaseArr[145926]) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470548 return _void[47])
  }
  function BaseArr[145926].dsiStaticFastFollowCheck[145419](arg _mt[145950]:_MT[227], arg this[145948]:BaseArr[145926], arg leadType[145417]:_any[170](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470552] "RVV" "param" "temp"
    (470557 'move' ret[470552](470556 'deref' 0))
    (470554 return ret[470552])
  }
  function BaseArr[145926].dsiGetBaseDom[145429](arg _mt[145954]:_MT[227], arg this[145952]:BaseArr[145926]) : _unknown[43] "method" "primary method" "unsafe"
  {
    unknown ret[470561] "RVV" "temp"
    (145451 call halt "internal error: dsiGetBaseDom is not implemented")
    unknown ret[145456] "insert auto destroy"
    (491882 'default init var' ret[145456] unmanaged BaseDom[389803])
    (470567 'move' ret[470561](470566 'coerce' ret[145456] unmanaged BaseDom[389803]))
    (470563 return ret[470561])
  }
  { scopeless type
    unmanaged BaseDom[389803]
  }
  function BaseArr[145926].remove[145471](arg _mt[145958]:_MT[227], arg this[145956]:BaseArr[145926], param arg rmFromList[145468]:bool[10]) : _unknown[43] "dont disable remote value forwarding" "method" "primary method"
  {
    unknown ret[470571] "RVV" "temp"
    unknown ret_arr[145474] "insert auto destroy"
    (491884 'init var' ret_arr[145474] this[145956])
    unknown ret_dom[145482] "insert auto destroy"
    (491886 'init var' ret_dom[145482] nil[38] unmanaged BaseDom?[389887])
    unknown rm_dom[145486] "insert auto destroy"
    (491888 'init var' rm_dom[145486] 0)
    unknown call_tmp[616663] "maybe param" "maybe type" "temp"
    (616666 'move' call_tmp[616663](145491 call(355619 call (partial) dsiGetBaseDom _mt[232] this[145956])))
    unknown dom[145492] "insert auto destroy"
    (491890 'init var' dom[145492] call_tmp[616663])
    unknown call_tmp[616670] "expr temp" "maybe param" "maybe type" "temp"
    (616673 'move' call_tmp[616670](145505 call _to_unmanaged this[145956]))
    unknown call_tmp[616675] "expr temp" "maybe param" "maybe type" "temp"
    (616678 'move' call_tmp[616675](145508 call(145499 call (partial) remove_arr _mt[232] dom[145492]) call_tmp[616670] rmFromList[145468]))
    (145509 call = rm_dom[145486] call_tmp[616675])
    unknown call_tmp[616680] "expr temp" "maybe param" "maybe type" "temp"
    (616683 'move' call_tmp[616680](145518 call _cond_test rm_dom[145486]))
    if call_tmp[616680]
    {
      (145515 call = ret_dom[145482] dom[145492])
    }
    unknown call_tmp[616685] "expr temp" "maybe param" "maybe type" "temp"
    (616688 'move' call_tmp[616685](145526 call _build_tuple ret_arr[145474] ret_dom[145482]))
    (470576 'move' ret[470571](470575 'deref' call_tmp[616685]))
    (470573 return ret[470571])
  }
  function BaseArr[145926].dsiDestroyArr[145534](arg _mt[145962]:_MT[227], arg this[145960]:BaseArr[145926]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (470578 return _void[47])
  }
  function BaseArr[145926].dsiReallocate[145545](arg _mt[145966]:_MT[227], arg this[145964]:BaseArr[145926], arg d[145542]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145565 call halt "reallocating not supported for this array type")
    (470580 return _void[47])
  }
  function BaseArr[145926].dsiPostReallocate[145572](arg _mt[145970]:_MT[227], arg this[145968]:BaseArr[145926]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (470582 return _void[47])
  }
  function BaseArr[145926]._purge[145583](arg _mt[145974]:_MT[227], arg this[145972]:BaseArr[145926], arg ind[145580]:int(64)[13]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145603 call halt "purging not supported for this array type")
    (470584 return _void[47])
  }
  function BaseArr[145926]._resize[145614](arg _mt[145978]:_MT[227], arg this[145976]:BaseArr[145926], arg length[145611]:int(64)[13], arg old_map[145616]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145636 call halt "resizing not supported for this array type")
    (470586 return _void[47])
  }
  function BaseArr[145926].sparseShiftArray[145645](arg _mt[145982]:_MT[227], arg this[145980]:BaseArr[145926], arg shiftrange[145643]:_any[170](?), arg initrange[145647]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145667 call halt "sparseGrowDomain not supported for non-sparse arrays")
    (470588 return _void[47])
  }
  function BaseArr[145926].sparseShiftArrayBack[145676](arg _mt[145986]:_MT[227], arg this[145984]:BaseArr[145926], arg shiftrange[145674]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145696 call halt "sparseShiftArrayBack not supported for non-sparse arrays")
    (470590 return _void[47])
  }
  function BaseArr[145926].sparseBulkShiftArray[145705](arg _mt[145990]:_MT[227], arg this[145988]:BaseArr[145926], arg shiftMap[145703]:_any[170](?), arg oldnnz[145707]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145727 call halt "sparseBulkShiftArray not supported for non-sparse arrays")
    (470592 return _void[47])
  }
  function BaseArr[145926].clearEntry[145736](arg _mt[145994]:_MT[227], arg this[145992]:BaseArr[145926], arg idx[145734]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145756 call halt "clearEntry() not supported for non-associative arrays")
    (470594 return _void[47])
  }
  function BaseArr[145926]._backupArray[145763](arg _mt[145998]:_MT[227], arg this[145996]:BaseArr[145926]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145783 call halt "_backupArray() not supported for non-associative arrays")
    (470596 return _void[47])
  }
  function BaseArr[145926]._removeArrayBackup[145790](arg _mt[146002]:_MT[227], arg this[146000]:BaseArr[145926]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145810 call halt "_removeArrayBackup() not supported for non-associative arrays")
    (470598 return _void[47])
  }
  function BaseArr[145926]._preserveArrayElement[145819](arg _mt[146006]:_MT[227], arg this[146004]:BaseArr[145926], arg oldslot[145817]:_any[170](?), arg newslot[145821]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145841 call halt "_preserveArrayElement() not supported for non-associative arrays")
    (470600 return _void[47])
  }
  function BaseArr[145926].dsiSupportsAlignedFollower[145848](arg _mt[146010]:_MT[227], arg this[146008]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470604] "RVV" "param" "temp"
    (470609 'move' ret[470604](470608 'deref' 0))
    (470606 return ret[470604])
  }
  function BaseArr[145926].dsiSupportsPrivatization[145858](arg _mt[146014]:_MT[227], arg this[146012]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470613] "RVV" "param" "temp"
    (470618 'move' ret[470613](470617 'deref' 0))
    (470615 return ret[470613])
  }
  function BaseArr[145926].dsiRequiresPrivatization[145868](arg _mt[146018]:_MT[227], arg this[146016]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470622] "RVV" "param" "temp"
    (470627 'move' ret[470622](470626 'deref' 0))
    (470624 return ret[470622])
  }
  function BaseArr[145926].dsiDisplayRepresentation[145878](arg _mt[146022]:_MT[227], arg this[146020]:BaseArr[145926]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (145883 call writeln "<no way to display representation>")
    (470629 return _void[47])
  }
  function anymanaged anynil BaseArr[389614](?).isDefaultRectangular[145890](arg _mt[146026]:_MT[227], arg this[146024]:anymanaged anynil BaseArr[389614](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470633] "RVV" "param" "temp"
    (470638 'move' ret[470633](470637 'deref' 0))
    (470635 return ret[470633])
  }
  function BaseArr[145926].isDefaultRectangular[145900](arg _mt[146030]:_MT[227], arg this[146028]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470642] "RVV" "param" "temp"
    (470647 'move' ret[470642](470646 'deref' 0))
    (470644 return ret[470642])
  }
  function BaseArr[145926].doiCanBulkTransferRankChange[145910](arg _mt[146034]:_MT[227], arg this[146032]:BaseArr[145926]) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470651] "RVV" "param" "temp"
    (470656 'move' ret[470651](470655 'deref' 0))
    (470653 return ret[470651])
  }
  function BaseArr[145926].decEltCountsIfNeeded[145920](arg _mt[146038]:_MT[227], arg this[146036]:BaseArr[145926]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (470658 return _void[47])
  }
  function BaseArr[145926].init[715135](arg _mt[715137]:_MT[227], arg this[715138]:BaseArr[145926], in arg pid[715149]:int(64)[13] =
  (715169 'default init field' "BaseArr" "pid" int(64)[13] nullPid[111825]), in arg _decEltRefCounts[715181]:bool[10] =
  (715199 'default init field' "BaseArr" "_decEltRefCounts" bool[10] 0)) : void[4] "compiler generated" "inline" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[715213] "temporary of super field" "temp"
    (715215 'move' super_tmp[715213](715212 '.v' this[715138] c"super"))
    (715148 call(715146 call (partial) init _mt[232] super_tmp[715213]))
    unknown tmp[715218] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[715242] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[715254] "expr temp" "maybe param" "maybe type" "temp"
      (715257 'move' call_tmp[715254](715220 '.v' this[715138] c"super"))
      (715246 'move' call_type_tmp[715242](715223 'typeof' call_tmp[715254]))
    }
    (715224 'move' tmp[715218] call_type_tmp[715242])
    unknown call_tmp[715259] "maybe param" "maybe type" "temp"
    (715262 'move' call_tmp[715259](715229 'cast' tmp[715218] this[715138]))
    unknown chpl__thisAsParent[715226] "insert auto destroy" "temp"
    (715250 'init var' chpl__thisAsParent[715226] call_tmp[715259] tmp[715218])
    (715232 'setcid' chpl__thisAsParent[715226])
    (715234 'init field' this[715138] c"pid" pid[715149])
    (715237 'init field' this[715138] c"_decEltRefCounts" _decEltRefCounts[715181])
    (715240 'setcid' this[715138])
    (715248 return _void[47])
  }
  function BaseArr[145926].super[721461](arg _mt[721463]:_MT[227], arg this[721465]:BaseArr[145926]) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721474] "RVV" "temp"
    unknown call_tmp[721481] "expr temp" "maybe param" "maybe type" "temp"
    (721484 'move' call_tmp[721481](721469 '.v' this[721465] c"super"))
    (721479 'move' ret[721474](721478 'deref' call_tmp[721481]))
    (721476 return ret[721474])
  }
  function BaseArr[145926].pid[721486](arg _mt[721488]:_MT[227], arg this[721490]:BaseArr[145926]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721499] "RVV" "temp"
    unknown call_tmp[721506] "expr temp" "maybe param" "maybe type" "temp"
    (721509 'move' call_tmp[721506](721494 '.' this[721490] c"pid"))
    (721504 'move' ret[721499](721503 'addr of' call_tmp[721506]))
    (721501 return ret[721499])
  }
  function BaseArr[145926]._decEltRefCounts[721511](arg _mt[721513]:_MT[227], arg this[721515]:BaseArr[145926]) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721524] "RVV" "temp"
    unknown call_tmp[721531] "expr temp" "maybe param" "maybe type" "temp"
    (721534 'move' call_tmp[721531](721519 '.' this[721515] c"_decEltRefCounts"))
    (721529 'move' ret[721524](721528 'addr of' call_tmp[721531]))
    (721526 return ret[721524])
  }
  function BaseArr[145926].writeThis[721536](arg _mt[721540]:_MT[227], arg this[721538]:BaseArr[145926], arg f[721539]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721545 call writeThisDefaultImpl f[721539] this[721538])
    (721549 return _void[47])
  }
  function BaseArr[145926].readThis[721551](arg _mt[721555]:_MT[227], arg this[721553]:BaseArr[145926], arg f[721554]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721559 call readThisDefaultImpl f[721554] this[721553])
    (721564 return _void[47])
  }
  type BaseArr[145926] val super[331019]:object[253] "super class" val pid[145360]:int(64)[13] nullPid[111825] int(64)[13] val _decEltRefCounts[145365]:bool[10] 0 bool[10]
  type unmanaged BaseArr?[390007]
  type anymanaged BaseArr?[390003](?)
  type unmanaged BaseArr[389867]
  type anymanaged anynil BaseArr[389614](?)
  type anymanaged BaseArr[350645](?)
  function AbsBaseArr[146070](?).decEltCountsIfNeeded[146049](arg _mt[146074]:_MT[227], arg this[146072]:AbsBaseArr[146070](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[616692] "expr temp" "maybe param" "maybe type" "temp"
    (616695 'move' call_tmp[616692](355634 call _decEltRefCounts _mt[232] this[146072]))
    unknown call_tmp[616697] "expr temp" "maybe param" "maybe type" "temp"
    (616700 'move' call_tmp[616697](146062 call _cond_test call_tmp[616692]))
    if call_tmp[616697]
    {
      unknown call_tmp[616702] "expr temp" "maybe param" "maybe type" "temp"
      (616705 'move' call_tmp[616702](146056 call _to_unmanaged this[146072]))
      unknown call_tmp[616709] "expr temp" "maybe param" "maybe type" "temp"
      (616712 'move' call_tmp[616709](355640 call eltType _mt[232] this[146072]))
      (146059 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[616702] call_tmp[616709])
    }
    (470660 return _void[47])
  }
  function AbsBaseArr[146070](?).super[721566](arg _mt[721568]:_MT[227], arg this[721570]:AbsBaseArr[146070](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721579] "RVV" "temp"
    unknown call_tmp[721586] "expr temp" "maybe param" "maybe type" "temp"
    (721589 'move' call_tmp[721586](721574 '.v' this[721570] c"super"))
    (721584 'move' ret[721579](721583 'deref' call_tmp[721586]))
    (721581 return ret[721579])
  }
  function AbsBaseArr[146070](?).eltType[721591](arg _mt[721593]:_MT[227], arg this[721595]:AbsBaseArr[146070](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721612] "RVV" "temp" "type variable"
    unknown call_tmp[721626] "expr temp" "maybe param" "maybe type" "temp"
    (721629 'move' call_tmp[721626](721600 'is bound' this[721595] c"eltType"))
    if call_tmp[721626]
    {
      unknown call_tmp[721631] "expr temp" "maybe param" "maybe type" "temp"
      (721634 'move' call_tmp[721631](721599 '.v' this[721595] c"eltType"))
      (721617 'move' ret[721612](721616 'deref' call_tmp[721631]))
      gotoReturn _end_eltType[721610] _end_eltType[721610]
    }
    {
      (721622 'move' ret[721612](721621 'deref' _uninstantiated[247]))
      gotoReturn _end_eltType[721610] _end_eltType[721610]
    }
    label _end_eltType[721610]
    (721614 return ret[721612])
  }
  function anymanaged anynil AbsBaseArr[721641](?).eltType[721636](arg _mt[721638]:_MT[227], arg this[721643]:anymanaged anynil AbsBaseArr[721641](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721660] "RVV" "temp" "type variable"
    unknown call_tmp[721674] "expr temp" "maybe param" "maybe type" "temp"
    (721677 'move' call_tmp[721674](721648 'is bound' this[721643] c"eltType"))
    if call_tmp[721674]
    {
      unknown call_tmp[721679] "expr temp" "maybe param" "maybe type" "temp"
      (721682 'move' call_tmp[721679](721647 '.v' this[721643] c"eltType"))
      (721665 'move' ret[721660](721664 'deref' call_tmp[721679]))
      gotoReturn _end_eltType[721658] _end_eltType[721658]
    }
    {
      (721670 'move' ret[721660](721669 'deref' _uninstantiated[247]))
      gotoReturn _end_eltType[721658] _end_eltType[721658]
    }
    label _end_eltType[721658]
    (721662 return ret[721660])
  }
  function AbsBaseArr[146070](?).init[721684](arg _mt[721686]:_MT[227], arg this[721687]:AbsBaseArr[146070](?), in arg pid[721704]:int(64)[13] =
  (721699 'default init field' "BaseArr" "pid" int(64)[13] nullPid[111825]), in arg _decEltRefCounts[721713]:bool[10] =
  (721708 'default init field' "BaseArr" "_decEltRefCounts" bool[10] 0), arg eltType[721716]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[721727] "temporary of super field" "temp"
    (721729 'move' super_tmp[721727](721726 '.v' this[721687] c"super"))
    (721697 call(721695 call (partial) init _mt[232] super_tmp[721727]) pid[721704] _decEltRefCounts[721713])
    unknown tmp[721732] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[721753] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[721765] "expr temp" "maybe param" "maybe type" "temp"
      (721768 'move' call_tmp[721765](721734 '.v' this[721687] c"super"))
      (721757 'move' call_type_tmp[721753](721737 'typeof' call_tmp[721765]))
    }
    (721738 'move' tmp[721732] call_type_tmp[721753])
    unknown call_tmp[721770] "maybe param" "maybe type" "temp"
    (721773 'move' call_tmp[721770](721743 'cast' tmp[721732] this[721687]))
    unknown chpl__thisAsParent[721740] "insert auto destroy" "temp"
    (721761 'init var' chpl__thisAsParent[721740] call_tmp[721770] tmp[721732])
    (721746 'setcid' chpl__thisAsParent[721740])
    (721748 'init field' this[721687] c"eltType" eltType[721716])
    (721751 'setcid' this[721687])
    (721759 return _void[47])
  }
  function AbsBaseArr[146070](?).deinit[721775](arg _mt[721777]:_MT[227], arg this[721779]:AbsBaseArr[146070](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (721781 return _void[47])
  }
  function AbsBaseArr[146070](?).writeThis[721784](arg _mt[721788]:_MT[227], arg this[721786]:AbsBaseArr[146070](?), arg f[721787]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721793 call writeThisDefaultImpl f[721787] this[721786])
    (721797 return _void[47])
  }
  function AbsBaseArr[146070](?).readThis[721799](arg _mt[721803]:_MT[227], arg this[721801]:AbsBaseArr[146070](?), arg f[721802]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (721807 call readThisDefaultImpl f[721802] this[721801])
    (721812 return _void[47])
  }
  type AbsBaseArr[146070](?) val super[331035]:BaseArr[145926] "super class" unknown eltType[146044] "type variable"
  type anymanaged anynil AbsBaseArr[721641](?)
  function BaseArrOverRectangularDom[146174](?).dsiReallocate[146108](arg _mt[146178]:_MT[227], arg this[146176]:BaseArrOverRectangularDom[146174](?), arg bounds[146105] :
  unknown call_tmp[616716] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no return value for void"
  {
    (146113 call halt "reallocating not supported for this array type")
    (470662 return _void[47])
  }
  function BaseArrOverRectangularDom[146174](?).dsiReallocate[146132](arg _mt[146182]:_MT[227], arg this[146180]:BaseArrOverRectangularDom[146174](?), arg allocBound[146129] :
  unknown call_tmp[616742] "expr temp" "maybe param" "maybe type" "temp", arg arrayBound[146143] :
  unknown call_tmp[616756] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no return value for void"
  {
    (146153 call halt "reallocating not supported for this array type")
    (470664 return _void[47])
  }
  where {
    unknown call_tmp[616770] "expr temp" "maybe param" "maybe type" "temp"
    (616773 'move' call_tmp[616770](355686 call rank _mt[232] this[146180]))
    (146148 call == call_tmp[616770] 1)
  }
  function BaseArrOverRectangularDom[146174](?).dsiPostReallocate[146161](arg _mt[146186]:_MT[227], arg this[146184]:BaseArrOverRectangularDom[146174](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    (470666 return _void[47])
  }
  function BaseArrOverRectangularDom[146174](?).deinit[146168](arg _mt[146190]:_MT[227], arg this[146188]:BaseArrOverRectangularDom[146174](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470668 return _void[47])
  }
  function BaseArrOverRectangularDom[146174](?).init[715121](arg _mt[715123]:_MT[227], arg this[715124]:BaseArrOverRectangularDom[146174](?), in arg pid[715270]:int(64)[13] =
  (715265 'default init field' "BaseArr" "pid" int(64)[13] nullPid[111825]), in arg _decEltRefCounts[715279]:bool[10] =
  (715274 'default init field' "BaseArr" "_decEltRefCounts" bool[10] 0), param arg rank[715282]:int(64)[13], arg idxType[715294]:_any[170](?), param arg stridable[715303]:bool[10]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[715317] "temporary of super field" "temp"
    (715319 'move' super_tmp[715317](715316 '.v' this[715124] c"super"))
    (715134 call(715132 call (partial) init _mt[232] super_tmp[715317]) pid[715270] _decEltRefCounts[715279])
    unknown tmp[715322] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[715355] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[715367] "expr temp" "maybe param" "maybe type" "temp"
      (715370 'move' call_tmp[715367](715324 '.v' this[715124] c"super"))
      (715359 'move' call_type_tmp[715355](715327 'typeof' call_tmp[715367]))
    }
    (715328 'move' tmp[715322] call_type_tmp[715355])
    unknown call_tmp[715372] "maybe param" "maybe type" "temp"
    (715375 'move' call_tmp[715372](715333 'cast' tmp[715322] this[715124]))
    unknown chpl__thisAsParent[715330] "insert auto destroy" "temp"
    (715363 'init var' chpl__thisAsParent[715330] call_tmp[715372] tmp[715322])
    (715336 'setcid' chpl__thisAsParent[715330])
    unknown call_tmp[715377] "expr temp" "maybe param" "maybe type" "temp"
    (715380 'move' call_tmp[715377](715339 call _cast int(64)[13] rank[715282]))
    (715341 'init field' this[715124] c"rank" call_tmp[715377])
    (715344 'init field' this[715124] c"idxType" idxType[715294])
    unknown call_tmp[715382] "expr temp" "maybe param" "maybe type" "temp"
    (715385 'move' call_tmp[715382](715348 call _cast bool[10] stridable[715303]))
    (715350 'init field' this[715124] c"stridable" call_tmp[715382])
    (715353 'setcid' this[715124])
    (715361 return _void[47])
  }
  function BaseArrOverRectangularDom[146174](?).super[721814](arg _mt[721816]:_MT[227], arg this[721818]:BaseArrOverRectangularDom[146174](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721827] "RVV" "temp"
    unknown call_tmp[721834] "expr temp" "maybe param" "maybe type" "temp"
    (721837 'move' call_tmp[721834](721822 '.v' this[721818] c"super"))
    (721832 'move' ret[721827](721831 'deref' call_tmp[721834]))
    (721829 return ret[721827])
  }
  function BaseArrOverRectangularDom[146174](?).rank[721839](arg _mt[721841]:_MT[227], arg this[721843]:BaseArrOverRectangularDom[146174](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721860] "RVV" "param" "temp"
    unknown call_tmp[721874] "expr temp" "maybe param" "maybe type" "temp"
    (721877 'move' call_tmp[721874](721848 'is bound' this[721843] c"rank"))
    if call_tmp[721874]
    {
      unknown call_tmp[721879] "expr temp" "maybe param" "maybe type" "temp"
      (721882 'move' call_tmp[721879](721847 '.' this[721843] c"rank"))
      (721865 'move' ret[721860](721864 'deref' call_tmp[721879]))
      gotoReturn _end_rank[721858] _end_rank[721858]
    }
    {
      (721870 'move' ret[721860](721869 'deref' ?[249]))
      gotoReturn _end_rank[721858] _end_rank[721858]
    }
    label _end_rank[721858]
    (721862 return ret[721860])
  }
  function anymanaged anynil BaseArrOverRectangularDom[721889](?).rank[721884](arg _mt[721886]:_MT[227], arg this[721891]:anymanaged anynil BaseArrOverRectangularDom[721889](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721908] "RVV" "param" "temp"
    unknown call_tmp[721922] "expr temp" "maybe param" "maybe type" "temp"
    (721925 'move' call_tmp[721922](721896 'is bound' this[721891] c"rank"))
    if call_tmp[721922]
    {
      unknown call_tmp[721927] "expr temp" "maybe param" "maybe type" "temp"
      (721930 'move' call_tmp[721927](721895 '.' this[721891] c"rank"))
      (721913 'move' ret[721908](721912 'deref' call_tmp[721927]))
      gotoReturn _end_rank[721906] _end_rank[721906]
    }
    {
      (721918 'move' ret[721908](721917 'deref' ?[249]))
      gotoReturn _end_rank[721906] _end_rank[721906]
    }
    label _end_rank[721906]
    (721910 return ret[721908])
  }
  function BaseArrOverRectangularDom[146174](?).idxType[721932](arg _mt[721934]:_MT[227], arg this[721936]:BaseArrOverRectangularDom[146174](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721953] "RVV" "temp" "type variable"
    unknown call_tmp[721967] "expr temp" "maybe param" "maybe type" "temp"
    (721970 'move' call_tmp[721967](721941 'is bound' this[721936] c"idxType"))
    if call_tmp[721967]
    {
      unknown call_tmp[721972] "expr temp" "maybe param" "maybe type" "temp"
      (721975 'move' call_tmp[721972](721940 '.v' this[721936] c"idxType"))
      (721958 'move' ret[721953](721957 'deref' call_tmp[721972]))
      gotoReturn _end_idxType[721951] _end_idxType[721951]
    }
    {
      (721963 'move' ret[721953](721962 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[721951] _end_idxType[721951]
    }
    label _end_idxType[721951]
    (721955 return ret[721953])
  }
  function anymanaged anynil BaseArrOverRectangularDom[721889](?).idxType[721977](arg _mt[721979]:_MT[227], arg this[721981]:anymanaged anynil BaseArrOverRectangularDom[721889](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[721998] "RVV" "temp" "type variable"
    unknown call_tmp[722012] "expr temp" "maybe param" "maybe type" "temp"
    (722015 'move' call_tmp[722012](721986 'is bound' this[721981] c"idxType"))
    if call_tmp[722012]
    {
      unknown call_tmp[722017] "expr temp" "maybe param" "maybe type" "temp"
      (722020 'move' call_tmp[722017](721985 '.v' this[721981] c"idxType"))
      (722003 'move' ret[721998](722002 'deref' call_tmp[722017]))
      gotoReturn _end_idxType[721996] _end_idxType[721996]
    }
    {
      (722008 'move' ret[721998](722007 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[721996] _end_idxType[721996]
    }
    label _end_idxType[721996]
    (722000 return ret[721998])
  }
  function BaseArrOverRectangularDom[146174](?).stridable[722022](arg _mt[722024]:_MT[227], arg this[722026]:BaseArrOverRectangularDom[146174](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722043] "RVV" "param" "temp"
    unknown call_tmp[722057] "expr temp" "maybe param" "maybe type" "temp"
    (722060 'move' call_tmp[722057](722031 'is bound' this[722026] c"stridable"))
    if call_tmp[722057]
    {
      unknown call_tmp[722062] "expr temp" "maybe param" "maybe type" "temp"
      (722065 'move' call_tmp[722062](722030 '.' this[722026] c"stridable"))
      (722048 'move' ret[722043](722047 'deref' call_tmp[722062]))
      gotoReturn _end_stridable[722041] _end_stridable[722041]
    }
    {
      (722053 'move' ret[722043](722052 'deref' ?[249]))
      gotoReturn _end_stridable[722041] _end_stridable[722041]
    }
    label _end_stridable[722041]
    (722045 return ret[722043])
  }
  function anymanaged anynil BaseArrOverRectangularDom[721889](?).stridable[722067](arg _mt[722069]:_MT[227], arg this[722071]:anymanaged anynil BaseArrOverRectangularDom[721889](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722088] "RVV" "param" "temp"
    unknown call_tmp[722102] "expr temp" "maybe param" "maybe type" "temp"
    (722105 'move' call_tmp[722102](722076 'is bound' this[722071] c"stridable"))
    if call_tmp[722102]
    {
      unknown call_tmp[722107] "expr temp" "maybe param" "maybe type" "temp"
      (722110 'move' call_tmp[722107](722075 '.' this[722071] c"stridable"))
      (722093 'move' ret[722088](722092 'deref' call_tmp[722107]))
      gotoReturn _end_stridable[722086] _end_stridable[722086]
    }
    {
      (722098 'move' ret[722088](722097 'deref' ?[249]))
      gotoReturn _end_stridable[722086] _end_stridable[722086]
    }
    label _end_stridable[722086]
    (722090 return ret[722088])
  }
  function BaseArrOverRectangularDom[146174](?).writeThis[722112](arg _mt[722116]:_MT[227], arg this[722114]:BaseArrOverRectangularDom[146174](?), arg f[722115]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (722121 call writeThisDefaultImpl f[722115] this[722114])
    (722125 return _void[47])
  }
  function BaseArrOverRectangularDom[146174](?).readThis[722127](arg _mt[722131]:_MT[227], arg this[722129]:BaseArrOverRectangularDom[146174](?), arg f[722130]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (722135 call readThisDefaultImpl f[722130] this[722129])
    (722140 return _void[47])
  }
  type BaseArrOverRectangularDom[146174](?) val super[331021]:BaseArr[145926] "super class" unknown rank[146081] "param" int(64)[13] unknown idxType[146084] "type variable" unknown stridable[146088] "param" bool[10]
  type anymanaged anynil BaseArrOverRectangularDom[721889](?)
  type anymanaged BaseArrOverRectangularDom[355223](?)
  function BaseRectangularArr[146229](?).deinit[146201](arg _mt[146233]:_MT[227], arg this[146231]:BaseRectangularArr[146229](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470670 return _void[47])
  }
  function BaseRectangularArr[146229](?).decEltCountsIfNeeded[146208](arg _mt[146237]:_MT[227], arg this[146235]:BaseRectangularArr[146229](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[616777] "expr temp" "maybe param" "maybe type" "temp"
    (616780 'move' call_tmp[616777](355691 call _decEltRefCounts _mt[232] this[146235]))
    unknown call_tmp[616782] "expr temp" "maybe param" "maybe type" "temp"
    (616785 'move' call_tmp[616782](146221 call _cond_test call_tmp[616777]))
    if call_tmp[616782]
    {
      unknown call_tmp[616787] "expr temp" "maybe param" "maybe type" "temp"
      (616790 'move' call_tmp[616787](146215 call _to_unmanaged this[146235]))
      unknown call_tmp[616794] "expr temp" "maybe param" "maybe type" "temp"
      (616797 'move' call_tmp[616794](355697 call eltType _mt[232] this[146235]))
      (146218 call chpl_decRefCountsForDomainsInArrayEltTypes call_tmp[616787] call_tmp[616794])
    }
    (470672 return _void[47])
  }
  function BaseRectangularArr[146229](?).init[715107](arg _mt[715109]:_MT[227], arg this[715110]:BaseRectangularArr[146229](?), in arg pid[715393]:int(64)[13] =
  (715388 'default init field' "BaseArr" "pid" int(64)[13] nullPid[111825]), in arg _decEltRefCounts[715402]:bool[10] =
  (715397 'default init field' "BaseArr" "_decEltRefCounts" bool[10] 0), param arg rank[715405]:int(64)[13], arg idxType[715408]:_any[170](?), param arg stridable[715411]:bool[10], arg eltType[715414]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[715425] "temporary of super field" "temp"
    (715427 'move' super_tmp[715425](715424 '.v' this[715110] c"super"))
    (715120 call(715118 call (partial) init _mt[232] super_tmp[715425]) pid[715393] _decEltRefCounts[715402] rank[715405] idxType[715408] stridable[715411])
    unknown tmp[715430] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[715451] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[715463] "expr temp" "maybe param" "maybe type" "temp"
      (715466 'move' call_tmp[715463](715432 '.v' this[715110] c"super"))
      (715455 'move' call_type_tmp[715451](715435 'typeof' call_tmp[715463]))
    }
    (715436 'move' tmp[715430] call_type_tmp[715451])
    unknown call_tmp[715468] "maybe param" "maybe type" "temp"
    (715471 'move' call_tmp[715468](715441 'cast' tmp[715430] this[715110]))
    unknown chpl__thisAsParent[715438] "insert auto destroy" "temp"
    (715459 'init var' chpl__thisAsParent[715438] call_tmp[715468] tmp[715430])
    (715444 'setcid' chpl__thisAsParent[715438])
    (715446 'init field' this[715110] c"eltType" eltType[715414])
    (715449 'setcid' this[715110])
    (715457 return _void[47])
  }
  function BaseRectangularArr[146229](?).super[722142](arg _mt[722144]:_MT[227], arg this[722146]:BaseRectangularArr[146229](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722155] "RVV" "temp"
    unknown call_tmp[722162] "expr temp" "maybe param" "maybe type" "temp"
    (722165 'move' call_tmp[722162](722150 '.v' this[722146] c"super"))
    (722160 'move' ret[722155](722159 'deref' call_tmp[722162]))
    (722157 return ret[722155])
  }
  function BaseRectangularArr[146229](?).eltType[722167](arg _mt[722169]:_MT[227], arg this[722171]:BaseRectangularArr[146229](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722188] "RVV" "temp" "type variable"
    unknown call_tmp[722202] "expr temp" "maybe param" "maybe type" "temp"
    (722205 'move' call_tmp[722202](722176 'is bound' this[722171] c"eltType"))
    if call_tmp[722202]
    {
      unknown call_tmp[722207] "expr temp" "maybe param" "maybe type" "temp"
      (722210 'move' call_tmp[722207](722175 '.v' this[722171] c"eltType"))
      (722193 'move' ret[722188](722192 'deref' call_tmp[722207]))
      gotoReturn _end_eltType[722186] _end_eltType[722186]
    }
    {
      (722198 'move' ret[722188](722197 'deref' _uninstantiated[247]))
      gotoReturn _end_eltType[722186] _end_eltType[722186]
    }
    label _end_eltType[722186]
    (722190 return ret[722188])
  }
  function anymanaged anynil BaseRectangularArr[722217](?).eltType[722212](arg _mt[722214]:_MT[227], arg this[722219]:anymanaged anynil BaseRectangularArr[722217](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722236] "RVV" "temp" "type variable"
    unknown call_tmp[722250] "expr temp" "maybe param" "maybe type" "temp"
    (722253 'move' call_tmp[722250](722224 'is bound' this[722219] c"eltType"))
    if call_tmp[722250]
    {
      unknown call_tmp[722255] "expr temp" "maybe param" "maybe type" "temp"
      (722258 'move' call_tmp[722255](722223 '.v' this[722219] c"eltType"))
      (722241 'move' ret[722236](722240 'deref' call_tmp[722255]))
      gotoReturn _end_eltType[722234] _end_eltType[722234]
    }
    {
      (722246 'move' ret[722236](722245 'deref' _uninstantiated[247]))
      gotoReturn _end_eltType[722234] _end_eltType[722234]
    }
    label _end_eltType[722234]
    (722238 return ret[722236])
  }
  function BaseRectangularArr[146229](?).writeThis[722260](arg _mt[722264]:_MT[227], arg this[722262]:BaseRectangularArr[146229](?), arg f[722263]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (722269 call writeThisDefaultImpl f[722263] this[722262])
    (722273 return _void[47])
  }
  function BaseRectangularArr[146229](?).readThis[722275](arg _mt[722279]:_MT[227], arg this[722277]:BaseRectangularArr[146229](?), arg f[722278]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (722283 call readThisDefaultImpl f[722278] this[722277])
    (722288 return _void[47])
  }
  type BaseRectangularArr[146229](?) val super[331023]:BaseArrOverRectangularDom[146174](?) "delay instantiation" "super class" unknown eltType[146196] "type variable"
  type anymanaged anynil BaseRectangularArr[722217](?)
  function BaseSparseArr[146286](?).dsiGetBaseDom[146270](arg _mt[146290]:_MT[227], arg this[146288]:BaseSparseArr[146286](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[470676] "RVV" "temp"
    unknown call_tmp[616801] "expr temp" "maybe param" "maybe type" "temp"
    (616804 'move' call_tmp[616801](355704 call dom _mt[232] this[146288]))
    (470681 'move' ret[470676](470680 'deref' call_tmp[616801]))
    (470678 return ret[470676])
  }
  function BaseSparseArr[146286](?).deinit[146280](arg _mt[146294]:_MT[227], arg this[146292]:BaseSparseArr[146286](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470683 return _void[47])
  }
  function BaseSparseArr[146286](?).super[722290](arg _mt[722292]:_MT[227], arg this[722294]:BaseSparseArr[146286](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722303] "RVV" "temp"
    unknown call_tmp[722310] "expr temp" "maybe param" "maybe type" "temp"
    (722313 'move' call_tmp[722310](722298 '.v' this[722294] c"super"))
    (722308 'move' ret[722303](722307 'deref' call_tmp[722310]))
    (722305 return ret[722303])
  }
  function BaseSparseArr[146286](?).rank[722315](arg _mt[722317]:_MT[227], arg this[722319]:BaseSparseArr[146286](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722336] "RVV" "param" "temp"
    unknown call_tmp[722350] "expr temp" "maybe param" "maybe type" "temp"
    (722353 'move' call_tmp[722350](722324 'is bound' this[722319] c"rank"))
    if call_tmp[722350]
    {
      unknown call_tmp[722355] "expr temp" "maybe param" "maybe type" "temp"
      (722358 'move' call_tmp[722355](722323 '.' this[722319] c"rank"))
      (722341 'move' ret[722336](722340 'deref' call_tmp[722355]))
      gotoReturn _end_rank[722334] _end_rank[722334]
    }
    {
      (722346 'move' ret[722336](722345 'deref' ?[249]))
      gotoReturn _end_rank[722334] _end_rank[722334]
    }
    label _end_rank[722334]
    (722338 return ret[722336])
  }
  function anymanaged anynil BaseSparseArr[722365](?).rank[722360](arg _mt[722362]:_MT[227], arg this[722367]:anymanaged anynil BaseSparseArr[722365](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722384] "RVV" "param" "temp"
    unknown call_tmp[722398] "expr temp" "maybe param" "maybe type" "temp"
    (722401 'move' call_tmp[722398](722372 'is bound' this[722367] c"rank"))
    if call_tmp[722398]
    {
      unknown call_tmp[722403] "expr temp" "maybe param" "maybe type" "temp"
      (722406 'move' call_tmp[722403](722371 '.' this[722367] c"rank"))
      (722389 'move' ret[722384](722388 'deref' call_tmp[722403]))
      gotoReturn _end_rank[722382] _end_rank[722382]
    }
    {
      (722394 'move' ret[722384](722393 'deref' ?[249]))
      gotoReturn _end_rank[722382] _end_rank[722382]
    }
    label _end_rank[722382]
    (722386 return ret[722384])
  }
  function BaseSparseArr[146286](?).idxType[722408](arg _mt[722410]:_MT[227], arg this[722412]:BaseSparseArr[146286](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722429] "RVV" "temp" "type variable"
    unknown call_tmp[722443] "expr temp" "maybe param" "maybe type" "temp"
    (722446 'move' call_tmp[722443](722417 'is bound' this[722412] c"idxType"))
    if call_tmp[722443]
    {
      unknown call_tmp[722448] "expr temp" "maybe param" "maybe type" "temp"
      (722451 'move' call_tmp[722448](722416 '.v' this[722412] c"idxType"))
      (722434 'move' ret[722429](722433 'deref' call_tmp[722448]))
      gotoReturn _end_idxType[722427] _end_idxType[722427]
    }
    {
      (722439 'move' ret[722429](722438 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[722427] _end_idxType[722427]
    }
    label _end_idxType[722427]
    (722431 return ret[722429])
  }
  function anymanaged anynil BaseSparseArr[722365](?).idxType[722453](arg _mt[722455]:_MT[227], arg this[722457]:anymanaged anynil BaseSparseArr[722365](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722474] "RVV" "temp" "type variable"
    unknown call_tmp[722488] "expr temp" "maybe param" "maybe type" "temp"
    (722491 'move' call_tmp[722488](722462 'is bound' this[722457] c"idxType"))
    if call_tmp[722488]
    {
      unknown call_tmp[722493] "expr temp" "maybe param" "maybe type" "temp"
      (722496 'move' call_tmp[722493](722461 '.v' this[722457] c"idxType"))
      (722479 'move' ret[722474](722478 'deref' call_tmp[722493]))
      gotoReturn _end_idxType[722472] _end_idxType[722472]
    }
    {
      (722484 'move' ret[722474](722483 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[722472] _end_idxType[722472]
    }
    label _end_idxType[722472]
    (722476 return ret[722474])
  }
  function BaseSparseArr[146286](?).dom[722498](arg _mt[722500]:_MT[227], arg this[722502]:BaseSparseArr[146286](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722511] "RVV" "temp"
    unknown call_tmp[722518] "expr temp" "maybe param" "maybe type" "temp"
    (722521 'move' call_tmp[722518](722506 '.' this[722502] c"dom"))
    (722516 'move' ret[722511](722515 'addr of' call_tmp[722518]))
    (722513 return ret[722511])
  }
  function BaseSparseArr[146286](?).data[722523](arg _mt[722525]:_MT[227], arg this[722527]:BaseSparseArr[146286](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722536] "RVV" "temp"
    unknown call_tmp[722543] "expr temp" "maybe param" "maybe type" "temp"
    (722546 'move' call_tmp[722543](722531 '.' this[722527] c"data"))
    (722541 'move' ret[722536](722540 'addr of' call_tmp[722543]))
    (722538 return ret[722536])
  }
  function BaseSparseArr[146286](?).init[722548](arg _mt[722550]:_MT[227], arg this[722551]:BaseSparseArr[146286](?), in arg pid[722568]:int(64)[13] =
  (722563 'default init field' "BaseArr" "pid" int(64)[13] nullPid[111825]), in arg _decEltRefCounts[722577]:bool[10] =
  (722572 'default init field' "BaseArr" "_decEltRefCounts" bool[10] 0), arg eltType[722580]:_any[170](?), param arg rank[722583]:int(64)[13], arg idxType[722595]:_any[170](?), in arg dom[722604]:_any[170](?), in arg data[722613] :
  unknown call_tmp[722684] "expr temp" "maybe param" "maybe type" "temp" =
  _typeDefaultT[239]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[722636] "temporary of super field" "temp"
    (722638 'move' super_tmp[722636](722635 '.v' this[722551] c"super"))
    (722561 call(722559 call (partial) init _mt[232] super_tmp[722636]) pid[722568] _decEltRefCounts[722577] eltType[722580])
    unknown tmp[722641] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[722674] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[722696] "expr temp" "maybe param" "maybe type" "temp"
      (722699 'move' call_tmp[722696](722643 '.v' this[722551] c"super"))
      (722678 'move' call_type_tmp[722674](722646 'typeof' call_tmp[722696]))
    }
    (722647 'move' tmp[722641] call_type_tmp[722674])
    unknown call_tmp[722701] "maybe param" "maybe type" "temp"
    (722704 'move' call_tmp[722701](722652 'cast' tmp[722641] this[722551]))
    unknown chpl__thisAsParent[722649] "insert auto destroy" "temp"
    (722682 'init var' chpl__thisAsParent[722649] call_tmp[722701] tmp[722641])
    (722655 'setcid' chpl__thisAsParent[722649])
    unknown call_tmp[722706] "expr temp" "maybe param" "maybe type" "temp"
    (722709 'move' call_tmp[722706](722658 call _cast int(64)[13] rank[722583]))
    (722660 'init field' this[722551] c"rank" call_tmp[722706])
    (722663 'init field' this[722551] c"idxType" idxType[722595])
    (722666 'init field' this[722551] c"dom" dom[722604])
    (722669 'init field' this[722551] c"data" data[722613])
    (722672 'setcid' this[722551])
    (722680 return _void[47])
  }
  function BaseSparseArr[146286](?).writeThis[722711](arg _mt[722715]:_MT[227], arg this[722713]:BaseSparseArr[146286](?), arg f[722714]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (722720 call writeThisDefaultImpl f[722714] this[722713])
    (722724 return _void[47])
  }
  function BaseSparseArr[146286](?).readThis[722726](arg _mt[722730]:_MT[227], arg this[722728]:BaseSparseArr[146286](?), arg f[722729]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (722734 call readThisDefaultImpl f[722729] this[722728])
    (722739 return _void[47])
  }
  type BaseSparseArr[146286](?) val super[331037]:AbsBaseArr[146070](?) "delay instantiation" "super class" unknown rank[146244] "param" int(64)[13] unknown idxType[146247] "type variable" unknown dom[146250] unknown data[146265] "local field"(146263 call chpl__buildArrayRuntimeType(146261 call chpl__ensureDomainExpr(146256 call nnzDom _mt[232] dom[146250])) eltType[146044])
  type anymanaged anynil BaseSparseArr[722365](?)
  function BaseSparseArrImpl[146829](?).deinit[146302](arg _mt[146833]:_MT[227], arg this[146831]:BaseSparseArrImpl[146829](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (470685 return _void[47])
  }
  function BaseSparseArrImpl[146829](?).IRV[146313](arg _mt[146837]:_MT[227], arg this[146835]:BaseSparseArrImpl[146829](?)) ref : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[470689] "RVV" "temp"
    unknown call_tmp[616810] "expr temp" "maybe param" "maybe type" "temp"
    (616813 'move' call_tmp[616810](355712 call irv _mt[232] this[146835]))
    (470694 'move' ret[470689](470693 'addr of' call_tmp[616810]))
    (470691 return ret[470689])
  }
  function BaseSparseArrImpl[146829](?).sparseBulkShiftArray[146325](arg _mt[146841]:_MT[227], arg this[146839]:BaseSparseArrImpl[146829](?), arg shiftMap[146323]:_any[170](?), arg oldnnz[146327]:_any[170](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown newIdx[146330] "insert auto destroy"
    (491892 'default init var' newIdx[146330] int(64)[13])
    unknown prevNewIdx[146335] "insert auto destroy"
    (491894 'init var' prevNewIdx[146335] 1)
    unknown call_tmp[616817] "expr temp" "maybe param" "maybe type" "temp"
    (616820 'move' call_tmp[616817](146340 call _dom _mt[232] shiftMap[146323]))
    unknown call_tmp[616824] "expr temp" "maybe param" "maybe type" "temp"
    (616827 'move' call_tmp[616824](146343 call high _mt[232] call_tmp[616817]))
    unknown call_tmp[616829] "expr temp" "maybe param" "maybe type" "temp"
    (616832 'move' call_tmp[616829](146347 call + call_tmp[616824] 1))
    unknown call_tmp[616836] "expr temp" "maybe param" "maybe type" "temp"
    (616839 'move' call_tmp[616836](355718 call dom _mt[232] this[146839]))
    unknown call_tmp[616843] "expr temp" "maybe param" "maybe type" "temp"
    (616846 'move' call_tmp[616843](146350 call nnzDom _mt[232] call_tmp[616836]))
    unknown call_tmp[616850] "expr temp" "maybe param" "maybe type" "temp"
    (616853 'move' call_tmp[616850](146353 call high _mt[232] call_tmp[616843]))
    unknown call_tmp[616855] "expr temp" "maybe param" "maybe type" "temp"
    (616858 'move' call_tmp[616855](146356 call chpl_build_bounded_range call_tmp[616829] call_tmp[616850]))
    Forall {
      induction variables:
        
        unknown i[146367] "index var" "insert auto destroy"
      iterated expressions:
        call_tmp[616855]
      shadow variables:
      forall body
      {
        unknown call_tmp[616862] "expr temp" "maybe param" "maybe type" "temp"
        (616865 'move' call_tmp[616862](146361 call(355723 call (partial) data _mt[232] this[146839]) i[146367]))
        unknown call_tmp[616869] "expr temp" "maybe param" "maybe type" "temp"
        (616872 'move' call_tmp[616869](355729 call irv _mt[232] this[146839]))
        (146363 call = call_tmp[616862] call_tmp[616869])
      }
    }
    {
      unknown _indexOfInterest[146489] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[146490] "expr temp" "temp"
      unknown call_tmp[616874] "expr temp" "maybe param" "maybe type" "temp"
      (616877 'move' call_tmp[616874](146514 call - 1))
      unknown call_tmp[616879] "expr temp" "maybe param" "maybe type" "temp"
      (616882 'move' call_tmp[616879](146518 call chpl_direct_range_iter 1 oldnnz[146327] call_tmp[616874]))
      unknown call_tmp[616884] "expr temp" "maybe param" "maybe type" "temp"
      (616887 'move' call_tmp[616884](146507 call _getIterator call_tmp[616879]))
      unknown call_tmp[616891] "expr temp" "maybe param" "maybe type" "temp"
      (616894 'move' call_tmp[616891](146525 call _dom _mt[232] shiftMap[146323]))
      unknown call_tmp[616898] "expr temp" "maybe param" "maybe type" "temp"
      (616901 'move' call_tmp[616898](146529 call(146523 call (partial) dim _mt[232] call_tmp[616891]) 1))
      unknown call_tmp[616903] "expr temp" "maybe param" "maybe type" "temp"
      (616906 'move' call_tmp[616903](146532 call - 1))
      unknown call_tmp[616908] "expr temp" "maybe param" "maybe type" "temp"
      (616911 'move' call_tmp[616908](146521 call chpl_by call_tmp[616898] call_tmp[616903]))
      unknown call_tmp[616913] "expr temp" "maybe param" "maybe type" "temp"
      (616916 'move' call_tmp[616913](146534 call _getIterator call_tmp[616908]))
      (146548 'move' _iterator[146490](146400 call _build_tuple call_tmp[616884] call_tmp[616913]))
      Defer
      {
        {
          (146578 call _freeIterator _iterator[146490])
        }
      }
      { scopeless type
        (146553 'move' _indexOfInterest[146489](146550 call iteratorIndex _iterator[146490]))
      }
      ForLoop
      {
        (146558 call _check_tuple_var_decl _indexOfInterest[146489] 2)
        unknown i[146564] "index var" "insert auto destroy"
        (146566 'move' i[146564](146562 call _indexOfInterest[146489] 1))
        unknown _newIdx[146571] "index var" "insert auto destroy"
        (146573 'move' _newIdx[146571](146569 call _indexOfInterest[146489] 2))
        {
          unknown call_tmp[616918] "expr temp" "maybe param" "maybe type" "temp"
          (616921 'move' call_tmp[616918](146405 call shiftMap[146323] _newIdx[146571]))
          (146406 call = newIdx[146330] call_tmp[616918])
          unknown call_tmp[616925] "expr temp" "maybe param" "maybe type" "temp"
          (616928 'move' call_tmp[616925](146413 call(355737 call (partial) data _mt[232] this[146839]) newIdx[146330]))
          unknown call_tmp[616932] "expr temp" "maybe param" "maybe type" "temp"
          (616935 'move' call_tmp[616932](146417 call(355743 call (partial) data _mt[232] this[146839]) i[146564]))
          (146418 call = call_tmp[616925] call_tmp[616932])
          {
            unknown _indexOfInterest[146440] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[146441] "expr temp" "temp"
            unknown call_tmp[616937] "expr temp" "maybe param" "maybe type" "temp"
            (616940 'move' call_tmp[616937](146454 call + newIdx[146330] 1))
            unknown call_tmp[616942] "expr temp" "maybe param" "maybe type" "temp"
            (616945 'move' call_tmp[616942](146458 call - prevNewIdx[146335] 1))
            unknown call_tmp[616947] "expr temp" "maybe param" "maybe type" "temp"
            (616950 'move' call_tmp[616947](146461 call chpl_direct_range_iter call_tmp[616937] call_tmp[616942] 1))
            (146450 'move' _iterator[146441](146448 call _getIterator call_tmp[616947]))
            Defer
            {
              {
                (146477 call _freeIterator _iterator[146441])
              }
            }
            { scopeless type
              (146466 'move' _indexOfInterest[146440](146463 call iteratorIndex _iterator[146441]))
            }
            ForLoop
            {
              unknown emptyIndex[146470] "index var" "insert auto destroy"
              (146472 'move' emptyIndex[146470] _indexOfInterest[146440])
              unknown call_tmp[616954] "expr temp" "maybe param" "maybe type" "temp"
              (616957 'move' call_tmp[616954](146435 call(355749 call (partial) data _mt[232] this[146839]) emptyIndex[146470]))
              unknown call_tmp[616961] "expr temp" "maybe param" "maybe type" "temp"
              (616964 'move' call_tmp[616961](355755 call irv _mt[232] this[146839]))
              (146437 call = call_tmp[616954] call_tmp[616961])
              label _continueLabel[146445]
              _indexOfInterest[146440]
              _iterator[146441]
            }
            label _breakLabel[146446]
          }
          (146486 call = prevNewIdx[146335] newIdx[146330])
        }
        label _continueLabel[146494]
        _indexOfInterest[146489]
        _iterator[146490]
      }
      label _breakLabel[146495]
    }
    {
      unknown _indexOfInterest[146601] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[146602] "expr temp" "temp"
      unknown call_tmp[616966] "expr temp" "maybe param" "maybe type" "temp"
      (616969 'move' call_tmp[616966](146616 call - prevNewIdx[146335] 1))
      unknown call_tmp[616971] "expr temp" "maybe param" "maybe type" "temp"
      (616974 'move' call_tmp[616971](146619 call chpl_direct_range_iter 1 call_tmp[616966] 1))
      (146611 'move' _iterator[146602](146609 call _getIterator call_tmp[616971]))
      Defer
      {
        {
          (146635 call _freeIterator _iterator[146602])
        }
      }
      { scopeless type
        (146624 'move' _indexOfInterest[146601](146621 call iteratorIndex _iterator[146602]))
      }
      ForLoop
      {
        unknown i[146628] "index var" "insert auto destroy"
        (146630 'move' i[146628] _indexOfInterest[146601])
        unknown call_tmp[616978] "expr temp" "maybe param" "maybe type" "temp"
        (616981 'move' call_tmp[616978](146596 call(355766 call (partial) data _mt[232] this[146839]) i[146628]))
        unknown call_tmp[616985] "expr temp" "maybe param" "maybe type" "temp"
        (616988 'move' call_tmp[616985](355772 call irv _mt[232] this[146839]))
        (146598 call = call_tmp[616978] call_tmp[616985])
        label _continueLabel[146606]
        _indexOfInterest[146601]
        _iterator[146602]
      }
      label _breakLabel[146607]
    }
    (470696 return _void[47])
  }
  function BaseSparseArrImpl[146829](?).sparseShiftArray[146648](arg _mt[146845]:_MT[227], arg this[146843]:BaseSparseArrImpl[146829](?), arg shiftrange[146646]:_any[170](?), arg initrange[146650]:_any[170](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[146663] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[146664] "expr temp" "temp"
      (146673 'move' _iterator[146664](146671 call _getIterator initrange[146650]))
      Defer
      {
        {
          (146689 call _freeIterator _iterator[146664])
        }
      }
      { scopeless type
        (146678 'move' _indexOfInterest[146663](146675 call iteratorIndex _iterator[146664]))
      }
      ForLoop
      {
        unknown i[146682] "index var" "insert auto destroy"
        (146684 'move' i[146682] _indexOfInterest[146663])
        {
          unknown call_tmp[616992] "expr temp" "maybe param" "maybe type" "temp"
          (616995 'move' call_tmp[616992](146657 call(355779 call (partial) data _mt[232] this[146843]) i[146682]))
          unknown call_tmp[616999] "expr temp" "maybe param" "maybe type" "temp"
          (617002 'move' call_tmp[616999](355785 call irv _mt[232] this[146843]))
          (146659 call = call_tmp[616992] call_tmp[616999])
        }
        label _continueLabel[146668]
        _indexOfInterest[146663]
        _iterator[146664]
      }
      label _breakLabel[146669]
    }
    {
      unknown _indexOfInterest[146719] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[146720] "expr temp" "temp"
      unknown call_tmp[617004] "expr temp" "maybe param" "maybe type" "temp"
      (617007 'move' call_tmp[617004](146700 call - 1))
      unknown call_tmp[617009] "expr temp" "maybe param" "maybe type" "temp"
      (617012 'move' call_tmp[617009](146702 call chpl_by shiftrange[146646] call_tmp[617004]))
      (146729 'move' _iterator[146720](146727 call _getIterator call_tmp[617009]))
      Defer
      {
        {
          (146749 call _freeIterator _iterator[146720])
        }
      }
      { scopeless type
        (146738 'move' _indexOfInterest[146719](146735 call iteratorIndex _iterator[146720]))
      }
      ForLoop
      {
        unknown i[146742] "index var" "insert auto destroy"
        (146744 'move' i[146742] _indexOfInterest[146719])
        {
          unknown call_tmp[617016] "expr temp" "maybe param" "maybe type" "temp"
          (617019 'move' call_tmp[617016](146707 call + i[146742] 1))
          unknown call_tmp[617021] "expr temp" "maybe param" "maybe type" "temp"
          (617024 'move' call_tmp[617021](146710 call(355791 call (partial) data _mt[232] this[146843]) call_tmp[617016]))
          unknown call_tmp[617028] "expr temp" "maybe param" "maybe type" "temp"
          (617031 'move' call_tmp[617028](146714 call(355797 call (partial) data _mt[232] this[146843]) i[146742]))
          (146715 call = call_tmp[617021] call_tmp[617028])
        }
        label _continueLabel[146724]
        _indexOfInterest[146719]
        _iterator[146720]
      }
      label _breakLabel[146725]
    }
    unknown call_tmp[617037] "expr temp" "maybe param" "maybe type" "temp"
    (617040 'move' call_tmp[617037](146758 call low _mt[232] shiftrange[146646]))
    unknown call_tmp[617042] "expr temp" "maybe param" "maybe type" "temp"
    (617045 'move' call_tmp[617042](146762 call(355803 call (partial) data _mt[232] this[146843]) call_tmp[617037]))
    unknown call_tmp[617049] "expr temp" "maybe param" "maybe type" "temp"
    (617052 'move' call_tmp[617049](355809 call irv _mt[232] this[146843]))
    (146764 call = call_tmp[617042] call_tmp[617049])
    (470698 return _void[47])
  }
  function BaseSparseArrImpl[146829](?).sparseShiftArrayBack[146773](arg _mt[146849]:_MT[227], arg this[146847]:BaseSparseArrImpl[146829](?), arg shiftrange[146771]:_any[170](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      unknown _indexOfInterest[146792] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[146793] "expr temp" "temp"
      (146802 'move' _iterator[146793](146800 call _getIterator shiftrange[146771]))
      Defer
      {
        {
          (146818 call _freeIterator _iterator[146793])
        }
      }
      { scopeless type
        (146807 'move' _indexOfInterest[146792](146804 call iteratorIndex _iterator[146793]))
      }
      ForLoop
      {
        unknown i[146811] "index var" "insert auto destroy"
        (146813 'move' i[146811] _indexOfInterest[146792])
        {
          unknown call_tmp[617056] "expr temp" "maybe param" "maybe type" "temp"
          (617059 'move' call_tmp[617056](146780 call(355815 call (partial) data _mt[232] this[146847]) i[146811]))
          unknown call_tmp[617063] "expr temp" "maybe param" "maybe type" "temp"
          (617066 'move' call_tmp[617063](146784 call + i[146811] 1))
          unknown call_tmp[617068] "expr temp" "maybe param" "maybe type" "temp"
          (617071 'move' call_tmp[617068](146787 call(355821 call (partial) data _mt[232] this[146847]) call_tmp[617063]))
          (146788 call = call_tmp[617056] call_tmp[617068])
        }
        label _continueLabel[146797]
        _indexOfInterest[146792]
        _iterator[146793]
      }
      label _breakLabel[146798]
    }
    (470700 return _void[47])
  }
  function BaseSparseArrImpl[146829](?).super[722741](arg _mt[722743]:_MT[227], arg this[722745]:BaseSparseArrImpl[146829](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722754] "RVV" "temp"
    unknown call_tmp[722761] "expr temp" "maybe param" "maybe type" "temp"
    (722764 'move' call_tmp[722761](722749 '.v' this[722745] c"super"))
    (722759 'move' ret[722754](722758 'deref' call_tmp[722761]))
    (722756 return ret[722754])
  }
  function BaseSparseArrImpl[146829](?).irv[722766](arg _mt[722768]:_MT[227], arg this[722770]:BaseSparseArrImpl[146829](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[722779] "RVV" "temp"
    unknown call_tmp[722786] "expr temp" "maybe param" "maybe type" "temp"
    (722789 'move' call_tmp[722786](722774 '.' this[722770] c"irv"))
    (722784 'move' ret[722779](722783 'addr of' call_tmp[722786]))
    (722781 return ret[722779])
  }
  function BaseSparseArrImpl[146829](?).init[722791](arg _mt[722793]:_MT[227], arg this[722794]:BaseSparseArrImpl[146829](?), in arg pid[722811]:int(64)[13] =
  (722806 'default init field' "BaseArr" "pid" int(64)[13] nullPid[111825]), in arg _decEltRefCounts[722820]:bool[10] =
  (722815 'default init field' "BaseArr" "_decEltRefCounts" bool[10] 0), arg eltType[722823]:_any[170](?), param arg rank[722826]:int(64)[13], arg idxType[722829]:_any[170](?), in arg dom[722832]:_any[170](?), in arg data[722857] :
  unknown call_tmp[722836] "expr temp" "maybe param" "maybe type" "temp" =
  _typeDefaultT[239], in arg irv[722860] :
  eltType[722823] =
  _typeDefaultT[239]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[722875] "temporary of super field" "temp"
    (722877 'move' super_tmp[722875](722874 '.v' this[722794] c"super"))
    (722804 call(722802 call (partial) init _mt[232] super_tmp[722875]) pid[722811] _decEltRefCounts[722820] eltType[722823] rank[722826] idxType[722829] dom[722832] data[722857])
    unknown tmp[722880] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[722901] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[722913] "expr temp" "maybe param" "maybe type" "temp"
      (722916 'move' call_tmp[722913](722882 '.v' this[722794] c"super"))
      (722905 'move' call_type_tmp[722901](722885 'typeof' call_tmp[722913]))
    }
    (722886 'move' tmp[722880] call_type_tmp[722901])
    unknown call_tmp[722918] "maybe param" "maybe type" "temp"
    (722921 'move' call_tmp[722918](722891 'cast' tmp[722880] this[722794]))
    unknown chpl__thisAsParent[722888] "insert auto destroy" "temp"
    (722909 'init var' chpl__thisAsParent[722888] call_tmp[722918] tmp[722880])
    (722894 'setcid' chpl__thisAsParent[722888])
    (722896 'init field' this[722794] c"irv" irv[722860])
    (722899 'setcid' this[722794])
    (722907 return _void[47])
  }
  function BaseSparseArrImpl[146829](?).writeThis[722923](arg _mt[722927]:_MT[227], arg this[722925]:BaseSparseArrImpl[146829](?), arg f[722926]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (722932 call writeThisDefaultImpl f[722926] this[722925])
    (722936 return _void[47])
  }
  function BaseSparseArrImpl[146829](?).readThis[722938](arg _mt[722942]:_MT[227], arg this[722940]:BaseSparseArrImpl[146829](?), arg f[722941]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (722946 call readThisDefaultImpl f[722941] this[722940])
    (722951 return _void[47])
  }
  type BaseSparseArrImpl[146829](?) val super[331039]:BaseSparseArr[146286](?) "delay instantiation" "super class" unknown irv[146308] eltType[146044]
  function _delete_dist[146859](arg dist[146856]:unmanaged BaseDist[389902], param arg privatized[146862]:bool[10]) : _unknown[43] "no return value for void"
  {
    (146872 call(146868 call (partial) dsiDestroyDist _mt[232] dist[146856]))
    unknown call_tmp[617075] "expr temp" "maybe param" "maybe type" "temp"
    (617078 'move' call_tmp[617075](146886 call _cond_test privatized[146862]))
    if call_tmp[617075]
    {
      unknown call_tmp[617082] "expr temp" "maybe param" "maybe type" "temp"
      (617085 'move' call_tmp[617082](146878 call pid _mt[232] dist[146856]))
      (146883 call _freePrivatizedClass call_tmp[617082] dist[146856])
    }
    (146892 call chpl__delete dist[146856])
    (470702 return _void[47])
  }
  function _delete_dom[146901](arg dom[146899]:_any[170](?), param arg privatized[146904]:bool[10]) : _unknown[43] "no return value for void"
  {
    (146914 call(146910 call (partial) dsiDestroyDom _mt[232] dom[146899]))
    unknown call_tmp[617089] "expr temp" "maybe param" "maybe type" "temp"
    (617092 'move' call_tmp[617089](146928 call _cond_test privatized[146904]))
    if call_tmp[617089]
    {
      unknown call_tmp[617096] "expr temp" "maybe param" "maybe type" "temp"
      (617099 'move' call_tmp[617096](146920 call pid _mt[232] dom[146899]))
      (146925 call _freePrivatizedClass call_tmp[617096] dom[146899])
    }
    (146934 call chpl__delete dom[146899])
    (470704 return _void[47])
  }
  function _delete_arr[146946](arg arr[146943]:unmanaged BaseArr[389867], param arg privatized[146949]:bool[10]) : _unknown[43] "no return value for void"
  {
    (146959 call(146955 call (partial) dsiDestroyArr _mt[232] arr[146943]))
    (146969 call(146965 call (partial) decEltCountsIfNeeded _mt[232] arr[146943]))
    unknown call_tmp[617105] "expr temp" "maybe param" "maybe type" "temp"
    (617108 'move' call_tmp[617105](146982 call _cond_test privatized[146949]))
    if call_tmp[617105]
    {
      unknown call_tmp[617112] "expr temp" "maybe param" "maybe type" "temp"
      (617115 'move' call_tmp[617112](146974 call pid _mt[232] arr[146943]))
      (146979 call _freePrivatizedClass call_tmp[617112] arr[146943])
    }
    (146988 call chpl__delete arr[146943])
    (470706 return _void[47])
  }
  function chpl_assignDomainWithGetSetIndices[147000](arg lhs[146997]:_any[170](?), arg rhs[147003]:_domain[123390](?)) : _unknown[43] "no return value for void"
  {
    unknown arrType[147022] "insert auto destroy" "type variable"(147021 call(147017 call (partial) getBaseArrType _mt[232] lhs[146997]))
    (491901 'move' arrType[147022](491900 call(491897 call (partial) getBaseArrType _mt[232] lhs[146997])))
    unknown call_tmp[617123] "maybe param" "maybe type" "temp"
    (617126 'move' call_tmp[617123](147027 call rank _mt[232] lhs[146997]))
    unknown rank[147030] "param"
    (491903 'init var' rank[147030] call_tmp[617123])
    unknown idxType[147037] "insert auto destroy" "type variable"(147034 call idxType _mt[232] lhs[146997])
    (491909 'move' idxType[147037](491906 call idxType _mt[232] lhs[146997]))
    unknown call_tmp[617134] "maybe param" "maybe type" "temp"
    (617137 'move' call_tmp[617134](147041 call stridable _mt[232] lhs[146997]))
    unknown stridable[147044] "param"
    (491911 'init var' stridable[147044] call_tmp[617134])
    {
      unknown _indexOfInterest[147230] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147231] "expr temp" "temp"
      unknown call_tmp[617141] "expr temp" "maybe param" "maybe type" "temp"
      (617144 'move' call_tmp[617141](147049 call _arrs _mt[232] lhs[146997]))
      (147240 'move' _iterator[147231](147238 call _getIterator call_tmp[617141]))
      Defer
      {
        {
          (147257 call _freeIterator _iterator[147231])
        }
      }
      { scopeless type
        (147246 'move' _indexOfInterest[147230](147243 call iteratorIndex _iterator[147231]))
      }
      ForLoop
      {
        unknown e[147250] "index var" "insert auto destroy"
        (147252 'move' e[147250] _indexOfInterest[147230])
        {
          {
            const tmp[147224] "const" "temp"
            unknown call_tmp[617146] "expr temp" "maybe param" "maybe type" "temp"
            (617149 'move' call_tmp[617146](147221 '_wide_get_locale' e[147250]))
            (147225 'move' tmp[147224](147222 'deref' call_tmp[617146]))
            {
              unknown call_tmp[617151] "expr temp" "maybe param" "maybe type" "temp"
              (617154 'move' call_tmp[617151](147055 'to nilable class from type' arrType[147022]))
              unknown call_tmp[617156] "maybe param" "maybe type" "temp"
              (617159 'move' call_tmp[617156](147056 call _cast call_tmp[617151] e[147250]))
              unknown eCastQ[147058] "insert auto destroy"
              (491913 'init var' eCastQ[147058] call_tmp[617156])
              unknown call_tmp[617161] "expr temp" "maybe param" "maybe type" "temp"
              (617164 'move' call_tmp[617161](147064 call == eCastQ[147058] nil[38]))
              unknown call_tmp[617166] "expr temp" "maybe param" "maybe type" "temp"
              (617169 'move' call_tmp[617166](147110 call _cond_test call_tmp[617161]))
              if call_tmp[617166]
              {
                unknown call_tmp[617171] "expr temp" "maybe param" "maybe type" "temp" "type variable"
                (617174 'move' call_tmp[617171](436705 'typeof' lhs[146997]))
                unknown call_tmp[617176] "expr temp" "maybe param" "maybe type" "temp"
                (617179 'move' call_tmp[617176](147086 call _cast string[24] call_tmp[617171]))
                unknown call_tmp[617181] "expr temp" "maybe param" "maybe type" "temp"
                (617184 'move' call_tmp[617181](147106 call _cast string[24] arrType[147022]))
                (147108 call halt "internal error: " call_tmp[617176] " contains an bad array type " call_tmp[617181])
              }
              unknown call_tmp[617186] "maybe param" "maybe type" "temp"
              (617189 'move' call_tmp[617186](147116 call postfix! eCastQ[147058]))
              unknown eCast[147118] "insert auto destroy"
              (491915 'init var' eCast[147118] call_tmp[617186])
              unknown call_tmp[617193] "maybe param" "maybe type" "temp"
              (617196 'move' call_tmp[617193](147126 call(147122 call (partial) getIndices _mt[232] rhs[147003])))
              unknown inds[147127] "insert auto destroy"
              (491917 'init var' inds[147127] call_tmp[617193])
              unknown tmp[147142] "insert auto destroy"
              unknown call_tmp[617198] "expr temp" "maybe param" "maybe type" "temp"
              (617201 'move' call_tmp[617198](147139 call range[66183](?) idxType[147037] bounded[66079] stridable[147044]))
              unknown call_tmp[617203] "expr temp" "maybe param" "maybe type" "temp"
              (617206 'move' call_tmp[617203](147140 call * rank[147030] call_tmp[617198]))
              (491919 'default init var' tmp[147142] call_tmp[617203])
              {
                unknown i[147179] "insert auto destroy"
                (491921 'init var' i[147179] 0)
                unknown tmp[147180] "maybe param" "temp"
                (147192 'move' tmp[147180](147190 call chpl_compute_low_param_loop_bound 1 rank[147030]))
                unknown tmp[147181] "maybe param" "temp"
                (147199 'move' tmp[147181](147197 call chpl_compute_high_param_loop_bound 1 rank[147030]))
                unknown tmp[147182] "maybe param" "temp"
                (147202 'move' tmp[147182] 1)
                ParamForLoop
                { i[147179] tmp[147180] tmp[147181] tmp[147182]
                  {
                    unknown call_tmp[617208] "maybe param" "maybe type" "temp"
                    (617211 'move' call_tmp[617208](147152 call inds[147127] i[147179]))
                    unknown from[147153] "insert auto destroy"
                    (491923 'init var' from[147153] call_tmp[617208])
                    unknown call_tmp[617213] "expr temp" "maybe param" "maybe type" "temp"
                    (617216 'move' call_tmp[617213](147160 call tmp[147142] i[147179]))
                    unknown call_tmp[617220] "expr temp" "maybe param" "maybe type" "temp"
                    (617223 'move' call_tmp[617220](147173 call range[66183](?) idxType[147037] bounded[66079] stridable[147044]))
                    unknown call_tmp[617225] "expr temp" "maybe param" "maybe type" "temp"
                    (617228 'move' call_tmp[617225](147175 call(147162 call (partial) safeCast _mt[232] from[147153]) call_tmp[617220]))
                    (147176 call = call_tmp[617213] call_tmp[617225])
                  }
                }
                label _unused_continueLabel[147184]
                label _breakLabel[147183]
              }
              (147219 call(147214 call (partial) dsiReallocate _mt[232] eCast[147118]) tmp[147142])
            }
          }
        }
        label _continueLabel[147235]
        _indexOfInterest[147230]
        _iterator[147231]
      }
      label _breakLabel[147236]
    }
    unknown call_tmp[617236] "expr temp" "maybe param" "maybe type" "temp"
    (617239 'move' call_tmp[617236](147273 call(147269 call (partial) getIndices _mt[232] rhs[147003])))
    (147275 call(147265 call (partial) dsiSetIndices _mt[232] lhs[146997]) call_tmp[617236])
    {
      unknown _indexOfInterest[147313] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147314] "expr temp" "temp"
      unknown call_tmp[617243] "expr temp" "maybe param" "maybe type" "temp"
      (617246 'move' call_tmp[617243](147279 call _arrs _mt[232] lhs[146997]))
      (147323 'move' _iterator[147314](147321 call _getIterator call_tmp[617243]))
      Defer
      {
        {
          (147340 call _freeIterator _iterator[147314])
        }
      }
      { scopeless type
        (147329 'move' _indexOfInterest[147313](147326 call iteratorIndex _iterator[147314]))
      }
      ForLoop
      {
        unknown e[147333] "index var" "insert auto destroy"
        (147335 'move' e[147333] _indexOfInterest[147313])
        {
          unknown call_tmp[617248] "expr temp" "maybe param" "maybe type" "temp"
          (617251 'move' call_tmp[617248](147284 'to nilable class from type' arrType[147022]))
          unknown call_tmp[617253] "maybe param" "maybe type" "temp"
          (617256 'move' call_tmp[617253](147285 call _cast call_tmp[617248] e[147333]))
          unknown eCastQ[147287] "insert auto destroy"
          (491925 'init var' eCastQ[147287] call_tmp[617253])
          unknown call_tmp[617258] "maybe param" "maybe type" "temp"
          (617261 'move' call_tmp[617258](147292 call postfix! eCastQ[147287]))
          unknown eCast[147294] "insert auto destroy"
          (491927 'init var' eCast[147294] call_tmp[617258])
          {
            const tmp[147308] "const" "temp"
            unknown call_tmp[617263] "expr temp" "maybe param" "maybe type" "temp"
            (617266 'move' call_tmp[617263](147305 '_wide_get_locale' e[147333]))
            (147309 'move' tmp[147308](147306 'deref' call_tmp[617263]))
            (147303 call(147299 call (partial) dsiPostReallocate _mt[232] eCast[147294]))
          }
        }
        label _continueLabel[147318]
        _indexOfInterest[147313]
        _iterator[147314]
      }
      label _breakLabel[147319]
    }
    unknown call_tmp[617272] "expr temp" "maybe param" "maybe type" "temp"
    (617275 'move' call_tmp[617272](147352 call(147348 call (partial) dsiSupportsPrivatization _mt[232] lhs[146997])))
    unknown call_tmp[617277] "expr temp" "maybe param" "maybe type" "temp"
    (617280 'move' call_tmp[617277](147359 call _cond_test call_tmp[617272]))
    if call_tmp[617277]
    {
      (147356 call _reprivatize lhs[146997])
    }
    (470708 return _void[47])
  }
  where {
    unknown call_tmp[617282] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617285 'move' call_tmp[617282](436707 'typeof' lhs[146997]))
    unknown call_tmp[617287] "expr temp" "maybe param" "maybe type" "temp"
    (617290 'move' call_tmp[617287](147010 call _to_borrowed call_tmp[617282]))
    (328611 'is_subtype' anymanaged BaseRectangularDom[350552](?) call_tmp[617287])
  }
  function chpl_assignDomainWithIndsIterSafeForRemoving[147373](arg lhs[147370]:_any[170](?), arg rhs[147376]:_domain[123390](?)) : _unknown[43] "no return value for void"
  {
    {
      unknown _indexOfInterest[147439] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147440] "expr temp" "temp"
      unknown call_tmp[617294] "expr temp" "maybe param" "maybe type" "temp"
      (617297 'move' call_tmp[617294](147415 call(147411 call (partial) dsiIndsIterSafeForRemoving _mt[232] lhs[147370])))
      (147449 'move' _iterator[147440](147447 call _getIterator call_tmp[617294]))
      Defer
      {
        {
          (147466 call _freeIterator _iterator[147440])
        }
      }
      { scopeless type
        (147455 'move' _indexOfInterest[147439](147452 call iteratorIndex _iterator[147440]))
      }
      ForLoop
      {
        unknown i[147459] "index var" "insert auto destroy"
        (147461 'move' i[147459] _indexOfInterest[147439])
        {
          unknown call_tmp[617301] "expr temp" "maybe param" "maybe type" "temp"
          (617304 'move' call_tmp[617301](147422 call(147417 call (partial) contains _mt[232] rhs[147376]) i[147459]))
          unknown call_tmp[617306] "expr temp" "maybe param" "maybe type" "temp"
          (617309 'move' call_tmp[617306](147423 call ! call_tmp[617301]))
          unknown call_tmp[617311] "expr temp" "maybe param" "maybe type" "temp"
          (617314 'move' call_tmp[617311](147434 call _cond_test call_tmp[617306]))
          if call_tmp[617311]
          {
            (147431 call(147426 call (partial) dsiRemove _mt[232] lhs[147370]) i[147459])
          }
        }
        label _continueLabel[147444]
        _indexOfInterest[147439]
        _iterator[147440]
      }
      label _breakLabel[147445]
    }
    {
      unknown _indexOfInterest[147499] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[147500] "expr temp" "temp"
      (147509 'move' _iterator[147500](147507 call _getIterator rhs[147376]))
      Defer
      {
        {
          (147525 call _freeIterator _iterator[147500])
        }
      }
      { scopeless type
        (147514 'move' _indexOfInterest[147499](147511 call iteratorIndex _iterator[147500]))
      }
      ForLoop
      {
        unknown i[147518] "index var" "insert auto destroy"
        (147520 'move' i[147518] _indexOfInterest[147499])
        {
          unknown call_tmp[617320] "expr temp" "maybe param" "maybe type" "temp"
          (617323 'move' call_tmp[617320](147482 call(147477 call (partial) dsiMember _mt[232] lhs[147370]) i[147518]))
          unknown call_tmp[617325] "expr temp" "maybe param" "maybe type" "temp"
          (617328 'move' call_tmp[617325](147483 call ! call_tmp[617320]))
          unknown call_tmp[617330] "expr temp" "maybe param" "maybe type" "temp"
          (617333 'move' call_tmp[617330](147494 call _cond_test call_tmp[617325]))
          if call_tmp[617330]
          {
            (147491 call(147486 call (partial) dsiAdd _mt[232] lhs[147370]) i[147518])
          }
        }
        label _continueLabel[147504]
        _indexOfInterest[147499]
        _iterator[147500]
      }
      label _breakLabel[147505]
    }
    (470710 return _void[47])
  }
  where {
    unknown tmp[402483] "maybe param" "temp"
    unknown tmp[402504] "maybe param" "temp"
    unknown call_tmp[617337] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (617340 'move' call_tmp[617337](436709 'typeof' lhs[147370]))
    unknown call_tmp[617342] "expr temp" "maybe param" "maybe type" "temp"
    (617345 'move' call_tmp[617342](147383 call _to_borrowed call_tmp[617337]))
    (402515 'move' tmp[402504](328612 'is_subtype' anymanaged BaseSparseDom[350579](?) call_tmp[617342]))
    unknown call_tmp[617347] "expr temp" "maybe param" "maybe type" "temp"
    (617350 'move' call_tmp[617347](402517 call _cond_invalid tmp[402504]))
    if call_tmp[617347]
    {
      (402520 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[517324] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517325] "maybe param" "temp"
    unknown call_tmp[617352] "expr temp" "maybe param" "maybe type" "temp"
    (617355 'move' call_tmp[617352](402505 call isTrue tmp[402504]))
    (517330 'move' tmp[517325](517328 call _cond_test call_tmp[617352]))
    if tmp[517325]
    {
      (517335 'move' tmp[517324](517332 '_paramFoldLogical' tmp[517325] 1))
    }
    {
      unknown tmp[517337] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617357] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (617360 'move' call_tmp[617357](436711 'typeof' lhs[147370]))
      unknown call_tmp[617362] "expr temp" "maybe param" "maybe type" "temp"
      (617365 'move' call_tmp[617362](147391 call _to_borrowed call_tmp[617357]))
      unknown call_tmp[617367] "expr temp" "maybe param" "maybe type" "temp"
      (617370 'move' call_tmp[617367](328613 'is_subtype' anymanaged BaseAssociativeDom[350562](?) call_tmp[617362]))
      (517339 'move' tmp[517337](402509 call isTrue call_tmp[617367]))
      (517344 'move' tmp[517324](517341 '_paramFoldLogical' tmp[517325] tmp[517337]))
    }
    (402494 'move' tmp[402483] tmp[517324])
    unknown call_tmp[617372] "expr temp" "maybe param" "maybe type" "temp"
    (617375 'move' call_tmp[617372](402496 call _cond_invalid tmp[402483]))
    if call_tmp[617372]
    {
      (402499 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[517351] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517352] "maybe param" "temp"
    unknown call_tmp[617377] "expr temp" "maybe param" "maybe type" "temp"
    (617380 'move' call_tmp[617377](402484 call isTrue tmp[402483]))
    (517357 'move' tmp[517352](517355 call _cond_test call_tmp[617377]))
    if tmp[517352]
    {
      (517362 'move' tmp[517351](517359 '_paramFoldLogical' tmp[517352] 1))
    }
    {
      unknown tmp[517364] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[617382] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (617385 'move' call_tmp[617382](436713 'typeof' lhs[147370]))
      unknown call_tmp[617387] "expr temp" "maybe param" "maybe type" "temp"
      (617390 'move' call_tmp[617387](147401 call _to_borrowed call_tmp[617382]))
      unknown call_tmp[617392] "expr temp" "maybe param" "maybe type" "temp"
      (617395 'move' call_tmp[617392](328614 'is_subtype' anymanaged BaseOpaqueDom[350571](?) call_tmp[617387]))
      (517366 'move' tmp[517364](402488 call isTrue call_tmp[617392]))
      (517371 'move' tmp[517351](517368 '_paramFoldLogical' tmp[517352] tmp[517364]))
    }
    (691947 call _statementLevelSymbol tmp[517351])
  }
  (329400 'used modules list'(141796 'use' ChapelArray[111781])(141798 'use' ChapelLocks[180347])(141799 'use' ChapelRange[66056])(141803 'use' LinkedLists[273878]))
}