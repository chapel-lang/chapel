AST dump for ChapelArray after pass scopeResolve.
Module use list: ChapelBase ChapelTuple ChapelLocale ArrayViewSlice ArrayViewRankChange ArrayViewReindex Reflection HaltWrappers Sort 

{
  unknown showArrayAsVecWarnings[111812] "config" "no doc" "param" 1
  unknown numPrivateObjects[111819] "no doc"(111818 call chpl__processorAtomicType int(64)[13])
  unknown nullPid[111825] "no doc" "param"(111823 call - 1)
  unknown debugBulkTransfer[111829] "config" "no doc" "param" 0
  unknown useBulkTransfer[111833] "config" "no doc" "param" 1
  unknown useBulkTransferStride[111837] "config" "no doc" "param" 1
  unknown PODValAccess[111841] "config" "no doc" "param" 1
  unknown useBulkTransferDist[111845] "config" "no doc" "param" 0
  unknown arrayAsVecGrowthFactor[111851] "config" "no doc" "param" 1.5
  unknown debugArrayAsVec[111855] "config" "no doc" "param" 0
  function _isPrivatized[111862](arg value[111860]:_any[170](?)) param : _unknown[43]
  {
    (111894 return(111892 call &&(111865 call ! 1)(111890 call ||(111878 call && 0(111877 call(111873 call .(111869 call postfix! value[111860]) c"dsiSupportsPrivatization")))(111889 call(111885 call .(111881 call postfix! value[111860]) c"dsiRequiresPrivatization")))))
  }
  function _newPrivatizedClass[111903](arg value[111901]:_any[170](?)) : _unknown[43]
  {
    const n[111915] "const"(111914 call(111909 call . numPrivateObjects[111819] c"fetchAdd") 1)
    const hereID[111923] "const"(111920 call .(350387 call here[92085]) c"id")
    const privatizeData[111934] "const"(111933 call(111929 call . value[111901] c"dsiGetPrivatizeData"))
    {
      const tmp[111953] "const" "temp"
      (111954 'move' tmp[111953](111951 'deref'(111950 '_wide_get_locale'(111940 call Locales[111767] 0))))
      (111948 call _newPrivatizedClassHelp value[111901] value[111901] n[111915] hereID[111923] privatizeData[111934])
    }
    function _newPrivatizedClassHelp[111962](arg parentValue[111960]:_any[170](?), arg originalValue[111964]:_any[170](?), arg n[111966]:_any[170](?), arg hereID[111968]:_any[170](?), arg privatizeData[111970]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown newValue[111973] originalValue[111964]
      if(112044 call _cond_test(111982 call != hereID[111968](111979 call .(350398 call here[92085]) c"id")))
      {
        (111994 call = newValue[111973](111993 call(111988 call . parentValue[111960] c"dsiPrivatize") privatizeData[111970]))
        (112017 'chpl_newPrivatizedClass' newValue[111973] n[111966])
        (112026 call =(112022 call . newValue[111973] c"pid") n[111966])
      }
      {
        (112033 'chpl_newPrivatizedClass' newValue[111973] n[111966])
        (112041 call =(112037 call . newValue[111973] c"pid") n[111966])
      }
      {
        const _cobeginCount[112113] "const" "end count" "temp"
        (112134 'move' _cobeginCount[112113](112131 call _endCountAlloc 1))
        (112126 call _upEndCount _cobeginCount[112113] 1 2)
        {
          if(112075 call _cond_test(112051 call . chpl_localeTree[150995] c"left"))
          {
            {
              const tmp[112070] "const" "temp"
              (112071 'move' tmp[112070](112068 'deref'(112067 '_wide_get_locale'(112055 call . chpl_localeTree[150995] c"left"))))
              (112065 call _newPrivatizedClassHelp newValue[111973] originalValue[111964] n[111966] hereID[111968] privatizeData[111970])
            }
          }
          (112116 call _downEndCount _cobeginCount[112113] nil[38])
          (112115 'cobegin block')
        }
        {
          if(112108 call _cond_test(112084 call . chpl_localeTree[150995] c"right"))
          {
            {
              const tmp[112103] "const" "temp"
              (112104 'move' tmp[112103](112101 'deref'(112100 '_wide_get_locale'(112088 call . chpl_localeTree[150995] c"right"))))
              (112098 call _newPrivatizedClassHelp newValue[111973] originalValue[111964] n[111966] hereID[111968] privatizeData[111970])
            }
          }
          (112122 call _downEndCount _cobeginCount[112113] nil[38])
          (112121 'cobegin block')
        }
        Defer
        {
          {
            (112137 call _endCountFree _cobeginCount[112113])
          }
        }
        (112142 call _waitEndCount _cobeginCount[112113] 1 2)
      }
    }
    (112150 return n[111915])
  }
  { scopeless type
    int(64)[13]
  }
  function _freePrivatizedClass[112161](arg pid[112158] :
  int(64)[13], arg original[112164] :
  anymanaged object[331796](?)) : _unknown[43] "no return value for void"
  {
    if(112174 call _cond_test(112170 call == pid[112158] nullPid[111825]))
    {
      (112172 return _void[47])
    }
    {
      const tmp[112194] "const" "temp"
      (112195 'move' tmp[112194](112192 'deref'(112191 '_wide_get_locale'(112183 call Locales[111767] 0))))
      {
        (112188 call _freePrivatizedClassHelp pid[112158] original[112164])
      }
    }
    function _freePrivatizedClassHelp[112203](arg pid[112201]:_any[170](?), arg original[112205]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown prv[112213](112212 call chpl_getPrivatizedCopy unmanaged object[389863] pid[112201])
      if(112226 call _cond_test(112219 call != prv[112213] original[112205]))
      {
        (112223 call chpl__delete prv[112213])
      }
      function chpl_clearPrivatizedClass[112237](arg pid[112234] :
      int(64)[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
      }
      (112244 call chpl_clearPrivatizedClass pid[112201])
      {
        const _cobeginCount[112301] "const" "end count" "temp"
        (112322 'move' _cobeginCount[112301](112319 call _endCountAlloc 1))
        (112314 call _upEndCount _cobeginCount[112301] 1 2)
        {
          if(112268 call _cond_test(112247 call . chpl_localeTree[150995] c"left"))
          {
            {
              const tmp[112263] "const" "temp"
              (112264 'move' tmp[112263](112261 'deref'(112260 '_wide_get_locale'(112251 call . chpl_localeTree[150995] c"left"))))
              (112258 call _freePrivatizedClassHelp pid[112201] original[112205])
            }
          }
          (112304 call _downEndCount _cobeginCount[112301] nil[38])
          (112303 'cobegin block')
        }
        {
          if(112296 call _cond_test(112275 call . chpl_localeTree[150995] c"right"))
          {
            {
              const tmp[112291] "const" "temp"
              (112292 'move' tmp[112291](112289 'deref'(112288 '_wide_get_locale'(112279 call . chpl_localeTree[150995] c"right"))))
              (112286 call _freePrivatizedClassHelp pid[112201] original[112205])
            }
          }
          (112310 call _downEndCount _cobeginCount[112301] nil[38])
          (112309 'cobegin block')
        }
        Defer
        {
          {
            (112325 call _endCountFree _cobeginCount[112301])
          }
        }
        (112330 call _waitEndCount _cobeginCount[112301] 1 2)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[112344](arg value[112342]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    const pid[112350] "const"(112347 call . value[112342] c"pid")
    const hereID[112358] "const"(112355 call .(350447 call here[92085]) c"id")
    const reprivatizeData[112369] "const"(112368 call(112364 call . value[112342] c"dsiGetReprivatizeData"))
    {
      const tmp[112388] "const" "temp"
      (112389 'move' tmp[112388](112386 'deref'(112385 '_wide_get_locale'(112375 call Locales[111767] 0))))
      (112383 call _reprivatizeHelp value[112342] value[112342] pid[112350] hereID[112358] reprivatizeData[112369])
    }
    function _reprivatizeHelp[112397](arg parentValue[112395]:_any[170](?), arg originalValue[112399]:_any[170](?), arg pid[112401]:_any[170](?), arg hereID[112403]:_any[170](?), arg reprivatizeData[112405]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown newValue[112408] originalValue[112399]
      if(112441 call _cond_test(112417 call != hereID[112403](112414 call .(350458 call here[92085]) c"id")))
      {
        (112426 call = newValue[112408](112425 call chpl_getPrivatizedCopy(112422 'typeof' newValue[112408]) pid[112401]))
        (112439 call(112433 call . newValue[112408] c"dsiReprivatize") parentValue[112395] reprivatizeData[112405])
      }
      {
        const _cobeginCount[112506] "const" "end count" "temp"
        (112527 'move' _cobeginCount[112506](112524 call _endCountAlloc 1))
        (112519 call _upEndCount _cobeginCount[112506] 1 2)
        {
          if(112470 call _cond_test(112446 call . chpl_localeTree[150995] c"left"))
          {
            {
              const tmp[112465] "const" "temp"
              (112466 'move' tmp[112465](112463 'deref'(112462 '_wide_get_locale'(112450 call . chpl_localeTree[150995] c"left"))))
              (112460 call _reprivatizeHelp newValue[112408] originalValue[112399] pid[112401] hereID[112403] reprivatizeData[112405])
            }
          }
          (112509 call _downEndCount _cobeginCount[112506] nil[38])
          (112508 'cobegin block')
        }
        {
          if(112501 call _cond_test(112477 call . chpl_localeTree[150995] c"right"))
          {
            {
              const tmp[112496] "const" "temp"
              (112497 'move' tmp[112496](112494 'deref'(112493 '_wide_get_locale'(112481 call . chpl_localeTree[150995] c"right"))))
              (112491 call _reprivatizeHelp newValue[112408] originalValue[112399] pid[112401] hereID[112403] reprivatizeData[112405])
            }
          }
          (112515 call _downEndCount _cobeginCount[112506] nil[38])
          (112514 'cobegin block')
        }
        Defer
        {
          {
            (112530 call _endCountFree _cobeginCount[112506])
          }
        }
        (112535 call _waitEndCount _cobeginCount[112506] 1 2)
      }
    }
  }
  function _makeIndexTuple[112548](param arg rank[112546]:_any[170](?), arg t[112551] :
  _tuple[58502](?), param arg expand[112556] :
  bool[10] =
  0) : _unknown[43]
  {
    (112568 return t[112551])
  }
  where {
    (112565 call == rank[112546](112562 call . t[112551] c"size"))
  }
  function _makeIndexTuple[112578](param arg rank[112576]:_any[170](?), arg t[112581] :
  _tuple[58502](?), param arg expand[112586] :
  bool[10] =
  0) : _unknown[43] "no return value for void"
  {
    (112615 call compilerError "index rank must match domain rank")
  }
  where {
    (112595 call != rank[112576](112592 call . t[112581] c"size"))
  }
  function _makeIndexTuple[112625](param arg rank[112623]:_any[170](?), arg val[112628] :
  integral[188](?), param arg expand[112633] :
  bool[10] =
  0) : _unknown[43]
  {
    if(112720 call _cond_test(112642 call || expand[112633](112640 call == rank[112623] 1)))
    {
      unknown t[112649](112647 call * rank[112623](112646 'typeof' val[112628]))
      {
        unknown i[112665] 0
        unknown tmp[112666] "maybe param" "temp"
        (112678 'move' tmp[112666](112676 call chpl_compute_low_param_loop_bound 1 rank[112623]))
        unknown tmp[112667] "maybe param" "temp"
        (112685 'move' tmp[112667](112683 call chpl_compute_high_param_loop_bound 1 rank[112623]))
        unknown tmp[112668] "maybe param" "temp"
        (112688 'move' tmp[112668] 1)
        ParamForLoop
        { i[112665] tmp[112666] tmp[112667] tmp[112668]
          (112662 call =(112660 call t[112649] i[112665]) val[112628])
        }
        label _unused_continueLabel[112670]
        label _breakLabel[112669]
      }
      (112700 return t[112649])
    }
    {
      (112709 call compilerWarning(112706 call _cast string[24](112704 'typeof' val[112628])))
      (112715 call compilerError "index rank must match domain rank")
      (112718 return val[112628])
    }
  }
  function _newArray[112731](arg value[112729]:_any[170](?)) : _unknown[43] "no copy return"
  {
    if(112756 call _cond_test(112736 call _isPrivatized value[112729]))
    {
      (112746 return(112745 'new'(112744 call _array[133150](?)(112741 call _newPrivatizedClass value[112729]) value[112729])))
    }
    {
      (112754 return(112753 'new'(112752 call _array[133150](?) nullPid[111825] value[112729])))
    }
  }
  function _getDomain[112769](arg value[112767]:_any[170](?)) : _unknown[43]
  {
    if(112800 call _cond_test(112778 call !=(112775 call _to_unmanaged(112773 'typeof' value[112767]))(112777 'typeof' value[112767])))
    {
      (112798 call compilerError "Domain on borrow created")
    }
    if(112833 call _cond_test(112809 call _isPrivatized value[112767]))
    {
      (112821 return(112820 'new'(112819 call _domain[123390](?)(112812 call . value[112767] c"pid") value[112767](_unowned = 1))))
    }
    {
      (112831 return(112830 'new'(112829 call _domain[123390](?) nullPid[111825] value[112767](_unowned = 1))))
    }
  }
  function _getDistribution[112845](arg value[112843]:_any[170](?)) : _unknown[43]
  {
    if(112874 call _cond_test(112850 call _isPrivatized value[112843]))
    {
      (112862 return(112861 'new'(112860 call _distribution[116702](?)(112853 call . value[112843] c"pid") value[112843](_unowned = 1))))
    }
    {
      (112872 return(112871 'new'(112870 call _distribution[116702](?) nullPid[111825] value[112843](_unowned = 1))))
    }
  }
  function chpl__buildDomainRuntimeType[112889](arg d[112886] :
  _distribution[116702](?), param arg rank[112892] :
  int(64)[13], arg idxType[112896]:_any[170](?) =
  int(64)[13], param arg stridable[112901] :
  bool[10] =
  0) type : _unknown[43] "runtime type init fn"
  {
    (112913 return(112912 'new'(112911 call _domain[123390](?) d[112886] rank[112892] idxType[112896] stridable[112901])))
  }
  function chpl__buildDomainRuntimeType[112924](arg d[112921] :
  _distribution[116702](?), arg idxType[112926]:_any[170](?), param arg parSafe[112930] :
  bool[10] =
  1) type : _unknown[43] "runtime type init fn"
  {
    (112941 return(112940 'new'(112939 call _domain[123390](?) d[112921] idxType[112926] parSafe[112930])))
  }
  function chpl__buildDomainRuntimeType[112952](arg d[112949] :
  _distribution[116702](?), arg idxType[112955] :
  _OpaqueIndex[140304], param arg parSafe[112960] :
  bool[10] =
  1) type : _unknown[43] "runtime type init fn"
  {
    (112971 return(112970 'new'(112969 call _domain[123390](?) d[112949] idxType[112955] parSafe[112960])))
  }
  function chpl__buildDomainRuntimeType[112982](arg d[112979] :
  _distribution[116702](?), arg idxType[112985] :
  opaque[150]) type : _unknown[43]
  {
    (113008 call compilerWarning "Opaque domains are deprecated - please switch to another domain type")
    (113016 return(113015 call chpl__buildDomainRuntimeType d[112979] _OpaqueIndex[140304]))
  }
  function chpl__buildSparseDomainRuntimeType[113026](arg d[113023] :
  _distribution[116702](?), arg dom[113029] :
  _domain[123390](?)) type : _unknown[43] "runtime type init fn"
  {
    (113038 return(113037 'new'(113036 call _domain[123390](?) d[113023] dom[113029])))
  }
  function chpl__convertValueToRuntimeType[113049](arg dom[113046] :
  _domain[123390](?)) type : _unknown[43]
  {
    (113088 return(113087 call chpl__buildDomainRuntimeType(113062 call . dom[113046] c"dist")(113070 call .(113067 call . dom[113046] c"_value") c"rank")(113077 call .(113074 call . dom[113046] c"_value") c"idxType")(113084 call .(113081 call . dom[113046] c"_value") c"stridable")))
  }
  where {
    (328543 'is_subtype' anymanaged BaseRectangularDom[350552](?)(113056 'typeof'(113053 call . dom[113046] c"_value")))
  }
  function chpl__convertValueToRuntimeType[113100](arg dom[113097] :
  _domain[123390](?)) type : _unknown[43]
  {
    (113134 return(113133 call chpl__buildDomainRuntimeType(113113 call . dom[113097] c"dist")(113121 call .(113118 call . dom[113097] c"_value") c"idxType")(113130 call .(113125 call . dom[113097] c"_value") c"parSafe")))
  }
  where {
    (328544 'is_subtype' anymanaged BaseAssociativeDom[350562](?)(113107 'typeof'(113104 call . dom[113097] c"_value")))
  }
  function chpl__convertValueToRuntimeType[113146](arg dom[113143] :
  _domain[123390](?)) type : _unknown[43]
  {
    (113171 return(113170 call chpl__buildDomainRuntimeType(113159 call . dom[113143] c"dist")(113167 call .(113164 call . dom[113143] c"_value") c"idxType")))
  }
  where {
    (328545 'is_subtype' anymanaged BaseOpaqueDom[350571](?)(113153 'typeof'(113150 call . dom[113143] c"_value")))
  }
  function chpl__convertValueToRuntimeType[113183](arg dom[113180] :
  _domain[123390](?)) type : _unknown[43]
  {
    (113213 return(113212 call chpl__buildSparseDomainRuntimeType(113199 call . dom[113180] c"dist")(113209 call .(113204 call . dom[113180] c"_value") c"parentDom")))
  }
  where {
    (328546 'is_subtype' anymanaged BaseSparseDom[350579](?)(113193 call _to_borrowed(113191 'typeof'(113188 call . dom[113180] c"_value"))))
  }
  function chpl__convertValueToRuntimeType[113225](arg dom[113222] :
  _domain[123390](?)) type : _unknown[43]
  {
    (113248 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, BaseOp 0)
    (113252 return 0)
  }
  function chpl__buildArrayRuntimeType[113262](arg dom[113259] :
  _domain[123390](?), arg eltType[113264]:_any[170](?)) type : _unknown[43] "runtime type init fn"
  {
    (113275 return(113274 call(113269 call . dom[113259] c"buildArray") eltType[113264]))
  }
  function _getLiteralType[113284](arg t[113282]:_any[170](?)) type : _unknown[43]
  {
    if(113296 call _cond_test(113288 call != t[113282] c_string[19]))
    {
      (113291 return t[113282])
    }
    {
      (113294 return string[24])
    }
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[113306] "config" "no doc" "param" "unset"
  function chpl__buildArrayExpr[113316](arg elems[113313]:_any[170](?) ...) : _unknown[43]
  {
    if(113384 call _cond_test(113329 call &&(113320 call == CHPL_WARN_DOMAIN_LITERAL[113306] "true")(113328 call isRange(113326 call elems[113313] 1))))
    {
      (113381 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    unknown elemType[113397] "type variable"(113396 call _getLiteralType(113394 'typeof'(113393 call elems[113313] 1)))
    unknown A[113410](113408 call chpl__buildArrayRuntimeType(113406 call chpl__ensureDomainExpr(113402 call chpl_build_bounded_range 1 k[113311])) elemType[113397])
    {
      unknown i[113523] 0
      unknown tmp[113524] "maybe param" "temp"
      (113536 'move' tmp[113524](113534 call chpl_compute_low_param_loop_bound 1 k[113311]))
      unknown tmp[113525] "maybe param" "temp"
      (113543 'move' tmp[113525](113541 call chpl_compute_high_param_loop_bound 1 k[113311]))
      unknown tmp[113526] "maybe param" "temp"
      (113546 'move' tmp[113526] 1)
      ParamForLoop
      { i[113523] tmp[113524] tmp[113525] tmp[113526]
        {
          unknown currType[113425] "type variable"(113424 call _getLiteralType(113422 'typeof'(113421 call elems[113313] i[113523])))
          if(113508 call _cond_test(113431 call != currType[113425] elemType[113397]))
          {
            (113505 call compilerError(113502 call +(113496 call +(113478 call +(113472 call +(113454 call + "Array literal element "(113452 call _cast string[24] i[113523])) " expected to be of type ")(113476 call _cast string[24] elemType[113397])) " but is of type ")(113500 call _cast string[24] currType[113425])))
          }
          (113520 call =(113515 call A[113410] i[113523])(113519 call elems[113313] i[113523]))
        }
      }
      label _unused_continueLabel[113528]
      label _breakLabel[113527]
    }
    (113558 return A[113410])
  }
  function chpl__buildAssociativeArrayExpr[113569](arg elems[113566]:_any[170](?) ...) : _unknown[43]
  {
    unknown keyType[113579] "type variable"(113578 call _getLiteralType(113576 'typeof'(113575 call elems[113566] 1)))
    unknown valType[113591] "type variable"(113590 call _getLiteralType(113588 'typeof'(113587 call elems[113566] 2)))
    unknown D[113599](113597 call chpl__buildDomainRuntimeType defaultDist[93214] keyType[113579])
    (113613 call(113605 call . D[113599] c"requestCapacity")(113610 call / k[113564] 2))
    unknown A[113622](113620 call chpl__buildArrayRuntimeType(113618 call chpl__ensureDomainExpr D[113599]) valType[113591])
    {
      unknown i[113797] 0
      unknown tmp[113798] "maybe param" "temp"
      (113809 'move' tmp[113798](113807 call chpl_compute_low_param_loop_bound 1 k[113564]))
      unknown tmp[113799] "maybe param" "temp"
      (113816 'move' tmp[113799](113814 call chpl_compute_high_param_loop_bound 1 k[113564]))
      unknown tmp[113800] "maybe param" "temp"
      (113819 'move' tmp[113800] 2)
      ParamForLoop
      { i[113797] tmp[113798] tmp[113799] tmp[113800]
        {
          unknown elemKey[113636](113635 call elems[113566] i[113797])
          unknown elemVal[113647](113646 call elems[113566](113643 call + i[113797] 1))
          unknown elemKeyType[113655] "type variable"(113654 call _getLiteralType(113652 'typeof' elemKey[113636]))
          unknown elemValType[113663] "type variable"(113662 call _getLiteralType(113660 'typeof' elemVal[113647]))
          if(113721 call _cond_test(113668 call != elemKeyType[113655] keyType[113579]))
          {
            (113718 call compilerError(113715 call +(113709 call +(113706 call +(113700 call +(113697 call + "Associative array key element "(113695 call _cast string[24](113692 call /(113689 call + i[113797] 2) 2))) " expected to be of type ")(113704 call _cast string[24] keyType[113579])) " but is of type ")(113713 call _cast string[24] elemKeyType[113655])))
          }
          if(113780 call _cond_test(113727 call != elemValType[113663] valType[113591]))
          {
            (113777 call compilerError(113774 call +(113768 call +(113765 call +(113759 call +(113756 call + "Associative array value element "(113754 call _cast string[24](113751 call /(113748 call + i[113797] 1) 2))) " expected to be of type ")(113763 call _cast string[24] valType[113591])) " but is of type ")(113772 call _cast string[24] elemValType[113663])))
          }
          (113786 call += D[113599] elemKey[113636])
          (113794 call =(113792 call A[113622] elemKey[113636]) elemVal[113647])
        }
      }
      label _unused_continueLabel[113802]
      label _breakLabel[113801]
    }
    (113831 return A[113622])
  }
  function chpl__convertValueToRuntimeType[113843](arg arr[113840] :
  (113837 call chpl__buildArrayRuntimeType nil[38])) type : _unknown[43]
  {
    (113856 return(113855 call chpl__buildArrayRuntimeType(113847 call . arr[113840] c"_dom")(113852 call . arr[113840] c"eltType")))
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[113868](arg arr[113865] :
  unmanaged BaseArr[389867], arg eltType[113870]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    if(113916 call _cond_test(113875 call isArrayType eltType[113870]))
    {
      (113883 call =(113879 call . arr[113865] c"_decEltRefCounts") 1)
      unknown ev[113888] eltType[113870]
      (113905 call(113900 call .(113895 call .(113892 call . ev[113888] c"_dom") c"_value") c"add_containing_arr") arr[113865])
      (113914 call chpl_incRefCountsForDomainsInArrayEltTypes arr[113865](113911 call . ev[113888] c"eltType"))
    }
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[113930](arg arr[113927] :
  unmanaged BaseArr[389867], arg eltType[113932]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    if(114032 call _cond_test(113937 call isArrayType eltType[113932]))
    {
      if(113965 call _cond_test(113943 call ==(113939 call . arr[113927] c"_decEltRefCounts") 0))
      {
        (113963 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown ev[113972] eltType[113932]
      const refcount[113990] "const"(113989 call(113984 call .(113979 call .(113976 call . ev[113972] c"_dom") c"_value") c"remove_containing_arr") arr[113927])
      if(114018 call _cond_test(113995 call == refcount[113990] 0))
      {
        (114016 call _delete_dom(114002 call .(113999 call . ev[113972] c"_dom") c"_value")(114015 call _isPrivatized(114011 call .(114008 call . ev[113972] c"_dom") c"_value")))
      }
      (114030 call chpl_decRefCountsForDomainsInArrayEltTypes arr[113927](114027 call . ev[113972] c"eltType"))
    }
  }
  function chpl__buildSubDomainType[114045](arg dom[114042] :
  _domain[123390](?)) type : _unknown[43]
  {
    (114051 return(114050 call chpl__convertValueToRuntimeType dom[114042]))
  }
  function chpl__isTupleOfRanges[114060](arg tup[114058]:_any[170](?)) param : _unknown[43]
  {
    {
      unknown i[114088] 0
      unknown tmp[114089] "maybe param" "temp"
      (114101 'move' tmp[114089](114099 call chpl_compute_low_param_loop_bound 1(114064 call . tup[114058] c"size")))
      unknown tmp[114090] "maybe param" "temp"
      (114111 'move' tmp[114090](114109 call chpl_compute_high_param_loop_bound 1(114106 call . tup[114058] c"size")))
      unknown tmp[114091] "maybe param" "temp"
      (114114 'move' tmp[114091] 1)
      ParamForLoop
      { i[114088] tmp[114089] tmp[114090] tmp[114091]
        {
          if(114082 call _cond_test(114077 call !(114076 call isRangeType(114074 'typeof'(114073 call tup[114058] i[114088])))))
          {
            (114080 return 0)
          }
        }
      }
      label _unused_continueLabel[114093]
      label _breakLabel[114092]
    }
    (114127 return 1)
  }
  function chpl__buildDomainExpr[114137](arg ranges[114134]:_any[170](?) ...) : _unknown[43]
  {
    unknown rank[114147] "param"(114144 call . ranges[114134] c"size")
    {
      unknown i[114196] 0
      unknown tmp[114197] "maybe param" "temp"
      (114209 'move' tmp[114197](114207 call chpl_compute_low_param_loop_bound 2 rank[114147]))
      unknown tmp[114198] "maybe param" "temp"
      (114216 'move' tmp[114198](114214 call chpl_compute_high_param_loop_bound 2 rank[114147]))
      unknown tmp[114199] "maybe param" "temp"
      (114219 'move' tmp[114199] 1)
      ParamForLoop
      { i[114196] tmp[114197] tmp[114198] tmp[114199]
        if(114191 call _cond_test(114169 call !=(114159 call .(114158 call ranges[114134] 1) c"idxType")(114166 call .(114165 call ranges[114134] i[114196]) c"idxType")))
        {
          (114189 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[114201]
      label _breakLabel[114200]
    }
    {
      unknown i[114268] 0
      unknown tmp[114269] "maybe param" "temp"
      (114281 'move' tmp[114269](114279 call chpl_compute_low_param_loop_bound 1 rank[114147]))
      unknown tmp[114270] "maybe param" "temp"
      (114288 'move' tmp[114270](114286 call chpl_compute_high_param_loop_bound 1 rank[114147]))
      unknown tmp[114271] "maybe param" "temp"
      (114291 'move' tmp[114271] 1)
      ParamForLoop
      { i[114268] tmp[114269] tmp[114270] tmp[114271]
        if(114263 call _cond_test(114241 call !(114240 call isBoundedRange(114238 call ranges[114134] i[114268]))))
        {
          (114261 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[114273]
      label _breakLabel[114272]
    }
    unknown d[114318](114316 call chpl__buildDomainRuntimeType defaultDist[93214] rank[114147](114308 call .(114307 call ranges[114134] 1) c"idxType")(114314 call chpl__anyStridable ranges[114134]))
    (114329 call(114324 call . d[114318] c"setIndices") ranges[114134])
    (114332 return d[114318])
  }
  where {
    (114142 call chpl__isTupleOfRanges ranges[114134])
  }
  function chpl__buildDomainExpr[114343](arg keys[114340]:_any[170](?) ...) : _unknown[43]
  {
    unknown count[114349] "param"(114346 call . keys[114340] c"size")
    unknown keyType[114361] "type variable"(114360 call _getLiteralType(114358 'typeof'(114357 call keys[114340] 1)))
    {
      unknown i[114435] 0
      unknown tmp[114436] "maybe param" "temp"
      (114448 'move' tmp[114436](114446 call chpl_compute_low_param_loop_bound 2 count[114349]))
      unknown tmp[114437] "maybe param" "temp"
      (114455 'move' tmp[114437](114453 call chpl_compute_high_param_loop_bound 2 count[114349]))
      unknown tmp[114438] "maybe param" "temp"
      (114458 'move' tmp[114438] 1)
      ParamForLoop
      { i[114435] tmp[114436] tmp[114437] tmp[114438]
        if(114431 call _cond_test(114377 call != keyType[114361](114376 call _getLiteralType(114374 'typeof'(114373 call keys[114340] i[114435])))))
        {
          (114428 call compilerError(114425 call +(114412 call +(114409 call +(114403 call +(114400 call + "Associative domain element "(114398 call _cast string[24] i[114435])) " expected to be of type ")(114407 call _cast string[24] keyType[114361])) " but is of type ")(114423 call _cast string[24](114421 call _getLiteralType(114419 'typeof'(114418 call keys[114340] i[114435]))))))
        }
      }
      label _unused_continueLabel[114440]
      label _breakLabel[114439]
    }
    unknown D[114474](114472 call chpl__buildDomainRuntimeType defaultDist[93214] keyType[114361])
    (114483 call(114478 call . D[114474] c"requestCapacity") count[114349])
    {
      unknown i[114497] 0
      unknown tmp[114498] "maybe param" "temp"
      (114510 'move' tmp[114498](114508 call chpl_compute_low_param_loop_bound 1 count[114349]))
      unknown tmp[114499] "maybe param" "temp"
      (114517 'move' tmp[114499](114515 call chpl_compute_high_param_loop_bound 1 count[114349]))
      unknown tmp[114500] "maybe param" "temp"
      (114520 'move' tmp[114500] 1)
      ParamForLoop
      { i[114497] tmp[114498] tmp[114499] tmp[114500]
        (114494 call += D[114474](114493 call keys[114340] i[114497]))
      }
      label _unused_continueLabel[114502]
      label _breakLabel[114501]
    }
    (114532 return D[114474])
  }
  function chpl__ensureDomainExpr[114542](const  ref arg x[114539] :
  _domain[123390](?)) const ref : _unknown[43]
  {
    (114545 return x[114539])
  }
  function chpl__ensureDomainExpr[114556](arg x[114553]:_any[170](?) ...) : _unknown[43] "compiler generated" "last resort"
  {
    (114563 return(114562 call chpl__buildDomainExpr(114560 'expand_tuple' x[114553])))
  }
  function chpl__ensureDomainExpr[114572](arg t[114570]:_any[170](?)) : _unknown[43] "compiler generated" "last resort" "no return value for void"
  {
    (114614 call compilerError "Domain expression was a type ('"(114594 call _cast string[24] t[114570]) "') rather than a domain value or range list as expected")
  }
  function chpl__distributed[114625](arg d[114622] :
  _distribution[116702](?), arg dom[114628] :
  _domain[123390](?)) : _unknown[43]
  {
    if(114690 call _cond_test(114634 call isRectangularDom dom[114628]))
    {
      unknown distDom[114661] dom[114628](114658 call chpl__distributed d[114622](114655 call chpl__buildDomainRuntimeType defaultDist[93214](114636 call . dom[114628] c"rank")(114644 call .(114641 call . dom[114628] c"_value") c"idxType")(114651 call .(114648 call . dom[114628] c"_value") c"stridable")))
      (114666 return distDom[114661])
    }
    {
      unknown distDom[114683] dom[114628](114680 call chpl__distributed d[114622](114677 call chpl__buildDomainRuntimeType defaultDist[93214](114672 call .(114669 call . dom[114628] c"_value") c"idxType")))
      (114688 return distDom[114683])
    }
  }
  function chpl__distributed[114703](arg d[114700] :
  _distribution[116702](?), arg ranges[114706]:_any[170](?) ...) : _unknown[43]
  {
    (114722 return(114721 call chpl__distributed d[114700](114720 call chpl__buildDomainExpr(114718 'expand_tuple' ranges[114706]))))
  }
  where {
    (114712 call chpl__isTupleOfRanges ranges[114706])
  }
  function chpl__isArrayView[114732](arg arr[114730]:_any[170](?)) param : _unknown[43]
  {
    const value[114746] "const"(114743 IfExpr (114737 call isArray arr[114730]) then
    { scopeless
      (114739 call . arr[114730] c"_value")
    } else
    { scopeless
      arr[114730]
    } )
    unknown isSlice[114756] "param"(114755 call(114751 call . value[114746] c"isSliceArrayView"))
    unknown isRankChange[114765] "param"(114764 call(114760 call . value[114746] c"isRankChangeArrayView"))
    unknown isReindex[114774] "param"(114773 call(114769 call . value[114746] c"isReindexArrayView"))
    (114784 return(114782 call ||(114779 call || isSlice[114756] isRankChange[114765]) isReindex[114774]))
  }
  function chpl__getActualArray[114792](arg arr[114790]:_any[170](?)) : _unknown[43]
  {
    unknown value[114806](114803 IfExpr (114797 call isArray arr[114790]) then
    { scopeless
      (114799 call . arr[114790] c"_value")
    } else
    { scopeless
      arr[114790]
    } )
    unknown ret[114826](114823 IfExpr (114813 call chpl__isArrayView value[114806]) then
    { scopeless
      (114821 call(114817 call . value[114806] c"_getActualArray"))
    } else
    { scopeless
      value[114806]
    } )
    (114830 return ret[114826])
  }
  function chpl__isDROrDRView[114838](arg arg[114836]:_any[170](?)) param : _unknown[43]
  {
    if(114987 call _cond_test(114850 call ||(114843 call isDomain arg[114836])(328547 'is_subtype' anymanaged BaseDom[339776](?)(114846 'typeof' arg[114836]))))
    {
      const value[114864] "const"(114861 IfExpr (114855 call isDomain arg[114836]) then
      { scopeless
        (114857 call . arg[114836] c"_value")
      } else
      { scopeless
        arg[114836]
      } )
      unknown isDR[114874] "param"(114873 call(114869 call . value[114864] c"isDefaultRectangular"))
      unknown isDRView[114892] "param"(114890 call &&(114880 call chpl__isDomainView value[114864])(114889 call(114885 call .(114884 call chpl__getActualDomain value[114864]) c"isDefaultRectangular")))
      (114899 return(114897 call || isDR[114874] isDRView[114892]))
    }
    {
      if(114983 call _cond_test(114911 call ||(114904 call isArray arg[114836])(328548 'is_subtype' anymanaged BaseArr[350645](?)(114907 'typeof' arg[114836]))))
      {
        const value[114925] "const"(114922 IfExpr (114916 call isArray arg[114836]) then
        { scopeless
          (114918 call . arg[114836] c"_value")
        } else
        { scopeless
          arg[114836]
        } )
        unknown isDR[114935] "param"(114934 call(114930 call . value[114925] c"isDefaultRectangular"))
        unknown isDRView[114953] "param"(114951 call &&(114941 call chpl__isArrayView value[114925])(114950 call(114946 call .(114945 call chpl__getActualArray value[114925]) c"isDefaultRectangular")))
        (114960 return(114958 call || isDR[114935] isDRView[114953]))
      }
      {
        (114980 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
  }
  function chpl__isDomainView[114999](arg dom[114997]:_any[170](?)) param : _unknown[43]
  {
    const value[115013] "const"(115010 IfExpr (115004 call isDomain dom[114997]) then
    { scopeless
      (115006 call . dom[114997] c"_value")
    } else
    { scopeless
      dom[114997]
    } )
    unknown isSlice[115025] "param"(115024 call(115020 call . value[115013] c"isSliceDomainView"))
    unknown isRankChange[115036] "param"(115035 call(115031 call . value[115013] c"isRankChangeDomainView"))
    unknown isReindex[115047] "param"(115046 call(115042 call . value[115013] c"isReindexDomainView"))
    (115057 return(115055 call ||(115052 call || isSlice[115025] isRankChange[115036]) isReindex[115047]))
  }
  function chpl__getActualDomain[115065](arg dom[115063]:_any[170](?)) : _unknown[43]
  {
    unknown value[115079](115076 IfExpr (115070 call isDomain dom[115063]) then
    { scopeless
      (115072 call . dom[115063] c"_value")
    } else
    { scopeless
      dom[115063]
    } )
    unknown ret[115099](115096 IfExpr (115086 call chpl__isDomainView value[115079]) then
    { scopeless
      (115094 call(115090 call . value[115079] c"_getActualDomain"))
    } else
    { scopeless
      value[115079]
    } )
    (115103 return ret[115099])
  }
  function chpl__isRectangularDomType[115111](arg domainType[115109]:_any[170](?)) param : _unknown[43]
  {
    unknown dom[115114] domainType[115109]
    (115128 return(115126 call &&(115121 call isDomainType domainType[115109])(115125 call isRectangularDom dom[115114])))
  }
  function chpl__isSparseDomType[115136](arg domainType[115134]:_any[170](?)) param : _unknown[43]
  {
    unknown dom[115139] domainType[115134]
    (115147 return(115146 call isSparseDom dom[115139]))
  }
  function chpl__distributed[115157](arg d[115154] :
  _distribution[116702](?), arg domainType[115159]:_any[170](?)) type : _unknown[43]
  {
    if(115191 call _cond_test(115165 call !(115164 call isDomainType domainType[115159])))
    {
      (115189 call compilerError "cannot apply 'dmapped' to the non-domain type "(115187 call _cast string[24] domainType[115159]))
    }
    if(115324 call _cond_test(115200 call chpl__isRectangularDomType domainType[115159]))
    {
      unknown dom[115202] domainType[115159]
      (115231 return(115230 call chpl__buildDomainRuntimeType d[115154](115213 call .(115210 call . dom[115202] c"_value") c"rank")(115220 call .(115217 call . dom[115202] c"_value") c"idxType")(115227 call .(115224 call . dom[115202] c"_value") c"stridable")))
    }
    {
      if(115320 call _cond_test(115236 call chpl__isSparseDomType domainType[115159]))
      {
        function getParentDomType[115239]() type : _unknown[43]
        {
          unknown dom[115242] domainType[115159]
          (115257 return(115256 'static typeof'(115255 'typeof'(115252 call .(115249 call . dom[115242] c"_value") c"parentDom"))))
        }
        unknown parentDom[115285] "no auto destroy" "no copy"(115284 'get runtime type field'(115281 call getParentDomType) domainType[115159] "dom")
        (115293 return(115292 call chpl__buildSparseDomainRuntimeType d[115154] parentDom[115285]))
      }
      {
        unknown dom[115296] domainType[115159]
        (115318 return(115317 call chpl__buildDomainRuntimeType d[115154](115307 call .(115304 call . dom[115296] c"_value") c"idxType")(115314 call .(115311 call . dom[115296] c"_value") c"parSafe")))
      }
    }
  }
  function chpl__buildIndexType[115337](param arg rank[115334] :
  int(64)[13], arg idxType[115339]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown x[115346] idxType[115339]
    (115352 return(115351 'typeof' x[115346]))
  }
  where {
    (115343 call == rank[115334] 1)
  }
  function chpl__buildIndexType[115363](param arg rank[115360] :
  int(64)[13], arg idxType[115365]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown x[115375](115373 call * rank[115360] idxType[115365])
    (115381 return(115380 'typeof' x[115375]))
  }
  where {
    (115369 call > rank[115360] 1)
  }
  function chpl__buildIndexType[115392](param arg rank[115389] :
  int(64)[13]) type : _unknown[43]
  {
    (115399 return(115398 call chpl__buildIndexType rank[115389] int(64)[13]))
  }
  function chpl__buildIndexType[115410](arg d[115407] :
  _domain[123390](?)) type : _unknown[43]
  {
    (115426 return(115425 call chpl__buildIndexType(115414 call . d[115407] c"rank")(115422 call .(115419 call . d[115407] c"_value") c"idxType")))
  }
  function chpl__buildIndexType[115437](arg idxType[115434] :
  opaque[150]) type : _unknown[43]
  {
    (115440 return _OpaqueIndex[140304])
  }
  function isRectangularDom[115451](arg d[115448] :
  _domain[123390](?)) param : _unknown[43]
  {
    (115465 return(328549 'is_subtype' anymanaged BaseRectangularDom[350552](?)(115461 call _to_borrowed(115459 'typeof'(115456 call . d[115448] c"_value")))))
  }
  function isRectangularArr[115478](arg a[115475] :
  (115472 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (115487 return(115486 call isRectangularDom(115482 call . a[115475] c"_dom")))
  }
  function isIrregularDom[115498](arg d[115495] :
  _domain[123390](?)) param : _unknown[43]
  {
    (115516 return(115514 call ||(115508 call ||(115503 call isSparseDom d[115495])(115507 call isAssociativeDom d[115495]))(115513 call isOpaqueDom d[115495])))
  }
  function isIrregularArr[115529](arg a[115526] :
  (115523 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (115538 return(115537 call isIrregularDom(115533 call . a[115526] c"_dom")))
  }
  function isAssociativeDom[115549](arg d[115546] :
  _domain[123390](?)) param : _unknown[43]
  {
    function isAssociativeDomClass[115557](arg dc[115554] :
    anymanaged BaseAssociativeDom[350562](?)) param : _unknown[43]
    {
      (115560 return 1)
    }
    function isAssociativeDomClass[115570](arg dc[115568]:_any[170](?)) param : _unknown[43]
    {
      (115573 return 0)
    }
    (115588 return(115587 call isAssociativeDomClass(115585 call _to_borrowed(115581 call . d[115546] c"_value"))))
  }
  function isAssociativeArr[115600](arg a[115597] :
  (115594 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (115609 return(115608 call isAssociativeDom(115604 call . a[115597] c"_dom")))
  }
  function isOpaqueDom[115620](arg d[115617] :
  _domain[123390](?)) param : _unknown[43]
  {
    function isOpaqueDomClass[115628](arg dc[115625] :
    anymanaged BaseOpaqueDom[350571](?)) param : _unknown[43]
    {
      (115631 return 1)
    }
    function isOpaqueDomClass[115641](arg dc[115639]:_any[170](?)) param : _unknown[43]
    {
      (115644 return 0)
    }
    (115659 return(115658 call isOpaqueDomClass(115656 call _to_borrowed(115652 call . d[115617] c"_value"))))
  }
  function isSparseDom[115669](arg d[115666] :
  _domain[123390](?)) param : _unknown[43]
  {
    function isSparseDomClass[115677](arg dc[115674] :
    anymanaged BaseSparseDom[350579](?)) param : _unknown[43]
    {
      (115680 return 1)
    }
    function isSparseDomClass[115690](arg dc[115688]:_any[170](?)) param : _unknown[43]
    {
      (115693 return 0)
    }
    (115705 return(115704 call isSparseDomClass(115700 call . d[115666] c"_value")))
  }
  function isSparseArr[115717](arg a[115714] :
  (115711 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (115726 return(115725 call isSparseDom(115721 call . a[115714] c"_dom")))
  }
  function chpl__checkDomainsMatch[115739](arg a[115736] :
  (115733 call chpl__buildArrayRuntimeType nil[38]), arg b[115741]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    if(115785 call _cond_test 1)
    {
      if(115780 call _cond_test(115754 call !=(115750 call . a[115736] c"_dom") b[115741]))
      {
        (115777 call boundsCheckHalt module=[244] HaltWrappers[197622] "domain mismatch on return")
      }
    }
    (329392 'used modules list'(115745 'use' HaltWrappers[197622] 'only' ))
  }
  function chpl__checkDomainsMatch[115797](arg a[115794] :
  _iteratorRecord[194](?), arg b[115799]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    if(115832 call _cond_test 1)
    {
      unknown tmp[115808] a[115794]
      if(115828 call _cond_test(115817 call !=(115813 call . tmp[115808] c"_dom") b[115799]))
      {
        (115825 call boundsCheckHalt module=[244] HaltWrappers[197622] "domain mismatch on return")
      }
    }
    (329394 'used modules list'(115803 'use' HaltWrappers[197622] 'only' ))
  }
  function chpl__checkEltTypeMatch[115846](arg a[115843] :
  (115840 call chpl__buildArrayRuntimeType nil[38]), arg b[115848]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    if(115890 call _cond_test(115855 call !=(115851 call . a[115843] c"eltType") b[115848]))
    {
      (115887 call compilerError "array element type mismatch in return from "(115880 call _cast string[24](115876 call . a[115843] c"eltType")) " to "(115885 call _cast string[24] b[115848]))
    }
  }
  function chpl__checkEltTypeMatch[115903](arg a[115900] :
  _iteratorRecord[194](?), arg b[115905]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown eltType[115912] "type variable"(115911 call iteratorToArrayElementType(115909 'typeof' a[115900]))
    if(115935 call _cond_test(115918 call != eltType[115912] b[115905]))
    {
      (115932 call compilerError "array element type mismatch in return from "(115925 call _cast string[24] eltType[115912]) " to "(115930 call _cast string[24] b[115905]))
    }
  }
  type dmap[115943]
  function chpl__buildDistType[115950](arg t[115948]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown x[115964](115963 call _to_unmanaged t[115948])
    unknown y[115973](115972 'new'(115971 call _distribution[116702](?) x[115964]))
    (115978 return(115977 'typeof' y[115973]))
  }
  where {
    (328550 'is_subtype' anymanaged BaseDist[350867](?)(115956 call _to_borrowed t[115948]))
  }
  function chpl__buildDistType[115987](arg t[115985]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (116007 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
  }
  function chpl__buildDistValue[116018](arg x[116015] :
  unmanaged[209](?)) : _unknown[43]
  {
    (116036 return(116035 'new'(116034 call _distribution[116702](?) x[116015])))
  }
  where {
    (328551 'is_subtype' anymanaged BaseDist[350867](?)(116027 'typeof'(116026 call(116022 call . x[116015] c"borrow"))))
  }
  function chpl__buildDistValue[116048](in arg x[116045] :
  _owned[39039](?)) : _unknown[43]
  {
    (116071 return(116070 'new'(116069 call _distribution[116702](?)(116067 call(116063 call . x[116045] c"release")))))
  }
  where {
    (328552 'is_subtype' anymanaged BaseDist[350867](?)(116057 'typeof'(116056 call(116052 call . x[116045] c"borrow"))))
  }
  function chpl__buildDistValue[116081](arg x[116079]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (116101 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
  }
  function _distribution[116702](?).init[116124](arg _mt[116706]:_MT[227], arg this[116704]:_distribution[116702](?), arg _pid[116121] :
  int(64)[13], arg _instance[116126]:_any[170](?), arg _unowned[116129] :
  bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116139 call =(116135 call . this[116704] c"_pid") _pid[116121])
    (116148 call =(116144 call . this[116704] c"_instance") _instance[116126])
    (116158 call =(116154 call . this[116704] c"_unowned") _unowned[116129])
  }
  function _distribution[116702](?).init[116167](arg _mt[116710]:_MT[227], arg this[116708]:_distribution[116702](?), arg value[116165]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116185 call =(116170 call . this[116708] c"_pid")(116182 IfExpr (116176 call _isPrivatized value[116165]) then
    { scopeless
      (116180 call _newPrivatizedClass value[116165])
    } else
    { scopeless
      nullPid[111825]
    } ))
    (116197 call =(116190 call . this[116708] c"_instance")(116196 call _to_unmanaged value[116165]))
  }
  function _distribution[116702](?).init=[116208](arg _mt[116714]:_MT[227], arg this[116712]:_distribution[116702](?), const  ref arg other[116205] :
  _distribution[116702](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown value[116221](116220 call(116216 call .(116211 call . other[116205] c"_value") c"dsiClone"))
    (116231 call(116226 call . this[116712] c"init") value[116221])
  }
  function _distribution[116702](?)._value[116237](arg _mt[116718]:_MT[227], arg this[116716]:_distribution[116702](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    if(116256 call _cond_test(116242 call _isPrivatized(350901 call . this[116716] c"_instance")))
    {
      (116249 return(116248 call chpl_getPrivatizedCopy(116245 'typeof'(350906 call . this[116716] c"_instance"))(350911 call . this[116716] c"_pid")))
    }
    {
      (116253 return(350916 call . this[116716] c"_instance"))
    }
  }
  function _distribution[116702](?).chpl_forwarding_expr3__value[116265](arg _mt[116722]:_MT[227], arg this[116720]:_distribution[116702](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (116267 return(350920 call . this[116720] c"_value"))
  }
  function _distribution[116702](?)._do_destroy[116273](arg _mt[116726]:_MT[227], arg this[116724]:_distribution[116702](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    if(116330 call _cond_test(116288 call &&(116276 call !(350925 call . this[116724] c"_unowned"))(116286 call !(116285 call(116281 call .(350930 call . this[116724] c"_instance") c"singleton")))))
    {
      {
        const tmp[116324] "const" "temp"
        (116325 'move' tmp[116324](116322 'deref'(116321 '_wide_get_locale'(350935 call . this[116724] c"_instance"))))
        {
          unknown distToFree[116297](116296 call(116292 call .(350940 call . this[116724] c"_instance") c"remove"))
          if(116317 call _cond_test(116303 call != distToFree[116297] nil[38]))
          {
            (116314 call _delete_dist(116307 call postfix! distToFree[116297])(116313 call _isPrivatized(350947 call . this[116724] c"_instance")))
          }
        }
      }
    }
  }
  function _distribution[116702](?).deinit[116339](arg _mt[116730]:_MT[227], arg this[116728]:_distribution[116702](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (116343 call(350953 call . this[116728] c"_do_destroy"))
  }
  function _distribution[116702](?).clone[116350](arg _mt[116734]:_MT[227], arg this[116732]:_distribution[116702](?)) : _unknown[43] "method" "primary method"
  {
    (116362 return(116361 'new'(116360 call _distribution[116702](?)(116358 call(116354 call .(350958 call . this[116732] c"_value") c"dsiClone")))))
  }
  function _distribution[116702](?).newRectangularDom[116373](arg _mt[116738]:_MT[227], arg this[116736]:_distribution[116702](?), param arg rank[116370] :
  int(64)[13], arg idxType[116375]:_any[170](?), param arg stridable[116378] :
  bool[10], arg ranges[116393] :
  (116391 call * rank[116370](116390 call range[66183](?) idxType[116375] bounded[66079] stridable[116378]))) : _unknown[43] "method" "primary method"
  {
    unknown x[116408](116407 call(116399 call .(350967 call . this[116736] c"_value") c"dsiNewRectangularDom") rank[116370] idxType[116375] stridable[116378] ranges[116393])
    if(116431 call _cond_test(116419 call(116415 call . x[116408] c"linksDistribution")))
    {
      (116428 call(116423 call .(350976 call . this[116736] c"_value") c"add_dom") x[116408])
    }
    (116436 return x[116408])
  }
  function _distribution[116702](?).newRectangularDom[116446](arg _mt[116742]:_MT[227], arg this[116740]:_distribution[116702](?), param arg rank[116443] :
  int(64)[13], arg idxType[116448]:_any[170](?), param arg stridable[116451] :
  bool[10]) : _unknown[43] "method" "primary method"
  {
    unknown ranges[116466](116464 call * rank[116443](116463 call range[66183](?) idxType[116448] bounded[66079] stridable[116451]))
    (116477 return(116476 call(350987 call . this[116740] c"newRectangularDom") rank[116443] idxType[116448] stridable[116451] ranges[116466]))
  }
  function _distribution[116702](?).newAssociativeDom[116485](arg _mt[116746]:_MT[227], arg this[116744]:_distribution[116702](?), arg idxType[116483]:_any[170](?), param arg parSafe[116489] :
  bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    unknown x[116503](116502 call(116496 call .(350995 call . this[116744] c"_value") c"dsiNewAssociativeDom") idxType[116483] parSafe[116489])
    if(116522 call _cond_test(116512 call(116508 call . x[116503] c"linksDistribution")))
    {
      (116519 call(116514 call .(351002 call . this[116744] c"_value") c"add_dom") x[116503])
    }
    (116527 return x[116503])
  }
  function _distribution[116702](?).newOpaqueDom[116535](arg _mt[116750]:_MT[227], arg this[116748]:_distribution[116702](?), arg idxType[116533]:_any[170](?), param arg parSafe[116539] :
  bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    unknown x[116553](116552 call(116546 call .(351008 call . this[116748] c"_value") c"dsiNewOpaqueDom") idxType[116533] parSafe[116539])
    if(116572 call _cond_test(116562 call(116558 call . x[116553] c"linksDistribution")))
    {
      (116569 call(116564 call .(351015 call . this[116748] c"_value") c"add_dom") x[116553])
    }
    (116577 return x[116553])
  }
  function _distribution[116702](?).newSparseDom[116587](arg _mt[116754]:_MT[227], arg this[116752]:_distribution[116702](?), param arg rank[116584] :
  int(64)[13], arg idxType[116589]:_any[170](?), arg dom[116592] :
  _domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    unknown x[116606](116605 call(116598 call .(351022 call . this[116752] c"_value") c"dsiNewSparseDom") rank[116584] idxType[116589] dom[116592])
    if(116625 call _cond_test(116615 call(116611 call . x[116606] c"linksDistribution")))
    {
      (116622 call(116617 call .(351030 call . this[116752] c"_value") c"add_dom") x[116606])
    }
    (116630 return x[116606])
  }
  function _distribution[116702](?).idxToLocale[116638](arg _mt[116758]:_MT[227], arg this[116756]:_distribution[116702](?), arg ind[116636]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (116649 return(116648 call(116643 call .(351036 call . this[116756] c"_value") c"dsiIndexToLocale") ind[116636]))
  }
  function _distribution[116702](?).readWriteThis[116658](arg _mt[116762]:_MT[227], arg this[116760]:_distribution[116702](?), arg f[116656]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116662 call <~> f[116656](351042 call . this[116760] c"_value"))
  }
  function _distribution[116702](?).displayRepresentation[116670](arg _mt[116766]:_MT[227], arg this[116764]:_distribution[116702](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116679 call(116675 call .(351046 call . this[116764] c"_value") c"dsiDisplayRepresentation"))
  }
  function _distribution[116702](?).targetLocales[116686](arg _mt[116770]:_MT[227], arg this[116768]:_distribution[116702](?)) : _unknown[43] "method" "primary method"
  {
    (116696 return(116695 call(116691 call .(351050 call . this[116768] c"_value") c"dsiTargetLocales")))
  }
  type _distribution[116702](?) unknown _pid[116108] int(64)[13] unknown _instance[116111] "owned" unknown _unowned[116115] bool[10] forwarding ( )
  function ==[116782](arg d1[116779] :
  (116778 call _distribution[116702](?) ?[249]), arg d2[116788] :
  (116787 call _distribution[116702](?) ?[249])) : _unknown[43] "inline"
  {
    if(116804 call _cond_test(116799 call ==(116792 call . d1[116779] c"_value")(116796 call . d2[116788] c"_value")))
    {
      (116802 return 1)
    }
    (116825 return(116824 call(116816 call .(116811 call . d1[116779] c"_value") c"dsiEqualDMaps")(116820 call . d2[116788] c"_value")))
  }
  function !=[116838](arg d1[116835] :
  (116834 call _distribution[116702](?) ?[249]), arg d2[116844] :
  (116843 call _distribution[116702](?) ?[249])) : _unknown[43] "inline"
  {
    if(116860 call _cond_test(116855 call ==(116848 call . d1[116835] c"_value")(116852 call . d2[116844] c"_value")))
    {
      (116858 return 0)
    }
    (116881 return(116879 call !(116878 call(116870 call .(116867 call . d1[116835] c"_value") c"dsiEqualDMaps")(116874 call . d2[116844] c"_value"))))
  }
  function chpl_defaultComparator[116887]() : _unknown[43]
  {
    (116895 return defaultComparator[251428])
    (329396 'used modules list'(116891 'use' Sort[251417]))
  }
  function _domain[123390](?).chpl__promotionType[116913](arg _mt[123394]:_MT[227], arg this[123392]:_domain[123390](?)) type : _unknown[43] "method" "primary method"
  {
    (116923 return(116921 call chpl__buildIndexType(351067 call . this[123392] c"rank")(116918 call .(351071 call . this[123392] c"_value") c"idxType")))
  }
  function _domain[123390](?).init[116934](arg _mt[123398]:_MT[227], arg this[123396]:_domain[123390](?), arg _pid[116931] :
  int(64)[13], arg _instance[116936]:_any[170](?), arg _unowned[116939] :
  bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116947 call =(116943 call . this[123396] c"_pid") _pid[116931])
    (116956 call =(116952 call . this[123396] c"_instance") _instance[116936])
    (116964 call =(116960 call . this[123396] c"_unowned") _unowned[116939])
  }
  function _domain[123390](?).init[116973](arg _mt[123402]:_MT[227], arg this[123400]:_domain[123390](?), arg value[116971]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(116989 call _cond_test(116982 call !=(116979 call _to_unmanaged(116977 'typeof' value[116971]))(116981 'typeof' value[116971])))
    {
      (116987 call compilerError "Domain on borrow created")
    }
    (117011 call =(116996 call . this[123400] c"_pid")(117008 IfExpr (117002 call _isPrivatized value[116971]) then
    { scopeless
      (117006 call _newPrivatizedClass value[116971])
    } else
    { scopeless
      nullPid[111825]
    } ))
    (117019 call =(117015 call . this[123400] c"_instance") value[116971])
  }
  function _domain[123390](?).init[117030](arg _mt[123406]:_MT[227], arg this[123404]:_domain[123390](?), arg d[117027] :
  _distribution[116702](?), param arg rank[117033] :
  int(64)[13], arg idxType[117037]:_any[170](?) =
  int(64)[13], param arg stridable[117042] :
  bool[10] =
  0) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117060 call(117047 call . this[123404] c"init")(117058 call(117051 call . d[117027] c"newRectangularDom") rank[117033] idxType[117037] stridable[117042]))
  }
  function _domain[123390](?).init[117071](arg _mt[123410]:_MT[227], arg this[123408]:_domain[123390](?), arg d[117068] :
  _distribution[116702](?), param arg rank[117074] :
  int(64)[13], arg idxType[117078]:_any[170](?) =
  int(64)[13], param arg stridable[117083] :
  bool[10] =
  0, arg ranges[117099] :
  (117097 call * rank[117074](117096 call range[66183](?) idxType[117078] bounded[66079] stridable[117083]))) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117117 call(117103 call . this[123408] c"init")(117115 call(117107 call . d[117068] c"newRectangularDom") rank[117074] idxType[117078] stridable[117083] ranges[117099]))
  }
  function _domain[123390](?).init[117128](arg _mt[123414]:_MT[227], arg this[123412]:_domain[123390](?), arg d[117125] :
  _distribution[116702](?), arg idxType[117130]:_any[170](?), param arg parSafe[117134] :
  bool[10] =
  1) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117153 call(117139 call . this[123412] c"init")(117151 call(117145 call . d[117125] c"newAssociativeDom") idxType[117130] parSafe[117134]))
  }
  function _domain[123390](?).init[117164](arg _mt[123418]:_MT[227], arg this[123416]:_domain[123390](?), arg d[117161] :
  _distribution[116702](?), arg idxType[117167] :
  _OpaqueIndex[140304], param arg parSafe[117172] :
  bool[10] =
  1) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117191 call(117177 call . this[123416] c"init")(117189 call(117183 call . d[117161] c"newOpaqueDom") idxType[117167] parSafe[117172]))
  }
  function _domain[123390](?).init[117202](arg _mt[123422]:_MT[227], arg this[123420]:_domain[123390](?), arg d[117199] :
  _distribution[116702](?), arg dom[117205] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117233 call(117209 call . this[123420] c"init")(117231 call(117215 call . d[117199] c"newSparseDom")(117219 call . dom[117205] c"rank")(117227 call .(117224 call . dom[117205] c"_value") c"idxType") dom[117205]))
  }
  function _domain[123390](?).init=[117244](arg _mt[123426]:_MT[227], arg this[123424]:_domain[123390](?), const  ref arg other[117241] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117277 call(117251 call . this[123424] c"init")(117255 call . other[117241] c"dist")(117260 call . other[117241] c"rank")(117264 call . other[117241] c"idxType")(117268 call . other[117241] c"stridable")(117276 call(117272 call . other[117241] c"dims")))
  }
  where {
    (117249 call isRectangularDom other[117241])
  }
  function _domain[123390](?).init=[117289](arg _mt[123430]:_MT[227], arg this[123428]:_domain[123390](?), const  ref arg other[117286] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(117421 call _cond_test(117294 call isAssociativeDom other[117286]))
    {
      (117312 call(117296 call . this[123428] c"init")(117300 call . other[117286] c"dist")(117305 call . other[117286] c"idxType")(117309 call . other[117286] c"parSafe"))
    }
    {
      if(117416 call _cond_test(117318 call isOpaqueDom other[117286]))
      {
        (117333 call(117320 call . this[123428] c"init")(117324 call . other[117286] c"dist") _OpaqueIndex[140304](117330 call . other[117286] c"parSafe"))
      }
      {
        if(117412 call _cond_test(117339 call isSparseDom other[117286]))
        {
          (117353 call(117341 call . this[123428] c"init")(117345 call . other[117286] c"dist")(117350 call . other[117286] c"parentDom"))
        }
        {
          (117401 call compilerError "Cannot initialize '"(117377 call _cast string[24](117375 'typeof' this[123428])) "' from '"(117398 call _cast string[24](117396 'typeof' other[117286])) "'")
          (117410 call(117405 call . this[123428] c"init") nil[38])
        }
      }
    }
    (117437 call(117430 call .(351152 call . this[123428] c"_instance") c"dsiAssignDomain") other[117286](lhsPrivate = 1))
  }
  function _domain[123390](?)._value[117443](arg _mt[123434]:_MT[227], arg this[123432]:_domain[123390](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    if(117462 call _cond_test(117448 call _isPrivatized(351158 call . this[123432] c"_instance")))
    {
      (117455 return(117454 call chpl_getPrivatizedCopy(117451 'typeof'(351163 call . this[123432] c"_instance"))(351168 call . this[123432] c"_pid")))
    }
    {
      (117459 return(351173 call . this[123432] c"_instance"))
    }
  }
  function _domain[123390](?).chpl_forwarding_expr4__value[117472](arg _mt[123438]:_MT[227], arg this[123436]:_domain[123390](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (117474 return(351177 call . this[123436] c"_value"))
  }
  function _domain[123390](?).chpl__serialize[117480](arg _mt[123442]:_MT[227], arg this[123440]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (117502 return(117501 call(117497 call .(117492 call . this[123440] c"_value") c"chpl__serialize")))
  }
  where {
    (117490 call(117486 call .(117483 call . this[123440] c"_value") c"isDefaultRectangular"))
  }
  function _domain[123390](?).chpl__deserialize[117512](arg _mt[123446]:_MT[227], arg this[123444]:_domain[123390](?), arg data[117510]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown valueType[117519] "type variable"(117518 'static field type' this[123444] "_instance")
    (117539 return(117538 'new'(117537 call _domain[123390](?)(117535 call(117530 call .(117527 call _to_borrowed valueType[117519]) c"chpl__deserialize") data[117510]))))
  }
  function _domain[123390](?)._do_destroy[117545](arg _mt[123450]:_MT[227], arg this[123448]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(117657 call _cond_test(117548 call !(351188 call . this[123448] c"_unowned")))
    {
      {
        const tmp[117651] "const" "temp"
        (117652 'move' tmp[117651](117649 'deref'(117648 '_wide_get_locale'(351193 call . this[123448] c"_instance"))))
        {
          const inst[117552] "const"(351198 call . this[123448] c"_instance")
          unknown tmp[117567] "no copy" "temp"(117566 call(117562 call . inst[117552] c"remove"))
          (117574 call _check_tuple_var_decl tmp[117567] 2)
          unknown domToFree[117556](117568 call tmp[117567] 1)
          unknown distToRemove[117558](117571 call tmp[117567] 2)
          unknown distToFree[117583] nil[38] unmanaged BaseDist?[389876]
          if(117603 call _cond_test(117588 call != distToRemove[117558] nil[38]))
          {
            (117599 call = distToFree[117583](117598 call(117594 call .(117592 call postfix! distToRemove[117558]) c"remove")))
          }
          if(117620 call _cond_test(117609 call != domToFree[117556] nil[38]))
          {
            (117618 call _delete_dom inst[117552](117617 call _isPrivatized inst[117552]))
          }
          if(117643 call _cond_test(117627 call != distToFree[117583] nil[38]))
          {
            (117641 call _delete_dist(117631 call postfix! distToFree[117583])(117640 call _isPrivatized(117636 call . inst[117552] c"dist")))
          }
        }
      }
    }
  }
  function _domain[123390](?).deinit[117666](arg _mt[123454]:_MT[227], arg this[123452]:_domain[123390](?)) : _unknown[43] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (117670 call(351213 call . this[123452] c"_do_destroy"))
  }
  function _domain[123390](?).dist[117677](arg _mt[123458]:_MT[227], arg this[123456]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens" "return not owned"
  {
    (117686 return(117685 call _getDistribution(117681 call .(351217 call . this[123456] c"_value") c"dist")))
  }
  function _domain[123390](?).rank[117693](arg _mt[123462]:_MT[227], arg this[123460]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    if(117714 call _cond_test(117703 call ||(117698 call isRectangularDom this[123460])(117702 call isSparseDom this[123460])))
    {
      (117709 return(117706 call .(351223 call . this[123460] c"_value") c"rank"))
    }
    {
      (117712 return 1)
    }
  }
  function _domain[123390](?).idxType[117725](arg _mt[123466]:_MT[227], arg this[123464]:_domain[123390](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    if(117751 call _cond_test(117730 call isOpaqueDom this[123464]))
    {
      (117749 call compilerError "opaque domains do not currently support .idxType")
    }
    (117761 return(117758 call .(351228 call . this[123464] c"_value") c"idxType"))
  }
  function _domain[123390](?).intIdxType[117767](arg _mt[123470]:_MT[227], arg this[123468]:_domain[123390](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (117776 return(117775 call chpl__idxTypeToIntIdxType(117771 call .(351232 call . this[123468] c"_value") c"idxType")))
  }
  function _domain[123390](?).stridable[117783](arg _mt[123474]:_MT[227], arg this[123472]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    (117793 return(117790 call .(351237 call . this[123472] c"_value") c"stridable"))
  }
  where {
    (117788 call isRectangularDom this[123472])
  }
  function _domain[123390](?).stridable[117801](arg _mt[123478]:_MT[227], arg this[123476]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    (117814 return(117811 call .(117808 call .(351242 call . this[123476] c"_value") c"parentDom") c"stridable"))
  }
  where {
    (117806 call isSparseDom this[123476])
  }
  function _domain[123390](?).stridable[117822](arg _mt[123482]:_MT[227], arg this[123480]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (117846 call compilerError "opaque domains do not support .stridable")
  }
  where {
    (117827 call isOpaqueDom this[123480])
  }
  function _domain[123390](?).stridable[117854](arg _mt[123486]:_MT[227], arg this[123484]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (117878 call compilerError "associative domains do not support .stridable")
  }
  where {
    (117859 call isAssociativeDom this[123484])
  }
  function _domain[123390](?).these[117886](arg _mt[123490]:_MT[227], arg this[123488]:_domain[123390](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[117899] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[117900] "expr temp" "temp"
      (117909 'move' _iterator[117900](117907 call _getIterator(117894 call(117890 call .(351248 call . this[123488] c"_value") c"these"))))
      Defer
      {
        {
          (117926 call _freeIterator _iterator[117900])
        }
      }
      { scopeless type
        (117915 'move' _indexOfInterest[117899](117912 call iteratorIndex _iterator[117900]))
      }
      ForLoop
      {
        unknown i[117919] "index var" "insert auto destroy"
        (117921 'move' i[117919] _indexOfInterest[117899])
        {
          (117896 yield i[117919])
        }
        label _continueLabel[117904]
        _indexOfInterest[117899]
        _iterator[117900]
      }
      label _breakLabel[117905]
    }
  }
  function _domain[123390](?).these[117942](arg _mt[123494]:_MT[227], arg this[123492]:_domain[123390](?), param arg tag[117939] :
  iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[117999] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118000] "expr temp" "temp"
      (118009 'move' _iterator[118000](118007 call _getIterator(117995 call(117990 call .(351261 call . this[123492] c"_value") c"these") tag[117939])))
      Defer
      {
        {
          (118026 call _freeIterator _iterator[118000])
        }
      }
      { scopeless type
        (118015 'move' _indexOfInterest[117999](118012 call iteratorIndex _iterator[118000]))
      }
      ForLoop
      {
        unknown i[118019] "index var" "insert auto destroy"
        (118021 'move' i[118019] _indexOfInterest[117999])
        (117997 yield i[118019])
        label _continueLabel[118004]
        _indexOfInterest[117999]
        _iterator[118000]
      }
      label _breakLabel[118005]
    }
  }
  where {
    (117986 call &&(117949 call == tag[117939] standalone[695])(117985 'method call resolves'(351256 call . this[123492] c"_value") "these"(tag = tag[117939])))
  }
  function _domain[123390](?).these[118043](arg _mt[123498]:_MT[227], arg this[123496]:_domain[123390](?), param arg tag[118040] :
  iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[118063] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118064] "expr temp" "temp"
      (118073 'move' _iterator[118064](118071 call _getIterator(118059 call(118054 call .(351270 call . this[123496] c"_value") c"these") tag[118040])))
      Defer
      {
        {
          (118090 call _freeIterator _iterator[118064])
        }
      }
      { scopeless type
        (118079 'move' _indexOfInterest[118063](118076 call iteratorIndex _iterator[118064]))
      }
      ForLoop
      {
        unknown followThis[118083] "index var" "insert auto destroy"
        (118085 'move' followThis[118083] _indexOfInterest[118063])
        (118061 yield followThis[118083])
        label _continueLabel[118068]
        _indexOfInterest[118063]
        _iterator[118064]
      }
      label _breakLabel[118069]
    }
  }
  where {
    (118050 call == tag[118040] leader[691])
  }
  function _domain[123390](?).these[118107](arg _mt[123502]:_MT[227], arg this[123500]:_domain[123390](?), param arg tag[118104] :
  iterKind[697], arg followThis[118109]:_any[170](?), param arg fast[118113] :
  bool[10] =
  0) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    if(118231 call _cond_test(118133 'method call resolves'(351279 call . this[123500] c"_value") "these"(tag = tag[118104]) followThis[118109](fast = fast[118113])))
    {
      {
        unknown _indexOfInterest[118149] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[118150] "expr temp" "temp"
        (118159 'move' _iterator[118150](118157 call _getIterator(118145 call(118136 call .(351286 call . this[123500] c"_value") c"these")(tag = tag[118104]) followThis[118109](fast = fast[118113]))))
        Defer
        {
          {
            (118176 call _freeIterator _iterator[118150])
          }
        }
        { scopeless type
          (118165 'move' _indexOfInterest[118149](118162 call iteratorIndex _iterator[118150]))
        }
        ForLoop
        {
          unknown i[118169] "index var" "insert auto destroy"
          (118171 'move' i[118169] _indexOfInterest[118149])
          (118147 yield i[118169])
          label _continueLabel[118154]
          _indexOfInterest[118149]
          _iterator[118150]
        }
        label _breakLabel[118155]
      }
    }
    {
      {
        unknown _indexOfInterest[118196] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[118197] "expr temp" "temp"
        (118206 'move' _iterator[118197](118204 call _getIterator(118192 call(118186 call .(351294 call . this[123500] c"_value") c"these") tag[118104] followThis[118109])))
        Defer
        {
          {
            (118223 call _freeIterator _iterator[118197])
          }
        }
        { scopeless type
          (118212 'move' _indexOfInterest[118196](118209 call iteratorIndex _iterator[118197]))
        }
        ForLoop
        {
          unknown i[118216] "index var" "insert auto destroy"
          (118218 'move' i[118216] _indexOfInterest[118196])
          (118194 yield i[118216])
          label _continueLabel[118201]
          _indexOfInterest[118196]
          _iterator[118197]
        }
        label _breakLabel[118202]
      }
    }
  }
  where {
    (118122 call == tag[118104] follower[693])
  }
  function _domain[123390](?).this[118245](arg _mt[123506]:_MT[227], arg this[123504]:_domain[123390](?), arg d[118242] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(118286 call _cond_test(118252 call ==(118248 call . d[118242] c"rank")(351303 call . this[123504] c"rank")))
    {
      (118264 return(118263 call this[123504](118261 'expand_tuple'(118260 call(118256 call . d[118242] c"getIndices")))))
    }
    {
      (118284 call compilerError "slicing a domain with a domain of a different rank")
    }
  }
  function _domain[123390](?).this[118301](arg _mt[123510]:_MT[227], arg this[123508]:_domain[123390](?), arg ranges[118298]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown stridable[118317] "param"(118315 call ||(118308 call .(351314 call . this[123508] c"_value") c"stridable")(118314 call chpl__anyStridable ranges[118298]))
    unknown r[118336](118334 call *(351319 call . this[123508] c"rank")(118333 call range[66183](?)(118324 call .(351324 call . this[123508] c"_value") c"idxType") bounded[66079] stridable[118317]))
    {
      unknown i[118364] 0
      unknown tmp[118365] "maybe param" "temp"
      (118377 'move' tmp[118365](118375 call chpl_compute_low_param_loop_bound 1(351330 call . this[123508] c"rank")))
      unknown tmp[118366] "maybe param" "temp"
      (118384 'move' tmp[118366](118382 call chpl_compute_high_param_loop_bound 1(351343 call . this[123508] c"rank")))
      unknown tmp[118367] "maybe param" "temp"
      (118387 'move' tmp[118367] 1)
      ParamForLoop
      { i[118364] tmp[118365] tmp[118366] tmp[118367]
        {
          (118360 call =(118346 call r[118336] i[118364])(118359 call(118353 call(118348 call .(351336 call . this[123508] c"_value") c"dsiDim") i[118364])(118357 call ranges[118298] i[118364])))
        }
      }
      label _unused_continueLabel[118369]
      label _breakLabel[118368]
    }
    (118410 return(118409 'new'(118408 call _domain[123390](?)(351348 call . this[123508] c"dist")(351352 call . this[123508] c"rank")(118403 call .(351356 call . this[123508] c"_value") c"idxType") stridable[118317] r[118336])))
  }
  where {
    (118306 call chpl__isTupleOfRanges ranges[118298])
  }
  function _domain[123390](?).this[118421](arg _mt[123514]:_MT[227], arg this[123512]:_domain[123390](?), arg args[118418]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown collapsedDim[118435](118433 call *(351371 call . this[123512] c"rank") bool[10])
    unknown idx[118443](118441 call *(351375 call . this[123512] c"rank")(351379 call . this[123512] c"idxType"))
    unknown uprank[118451] "param"(118450 call chpl__countRanges(118448 'expand_tuple' args[118418]))
    unknown upstridable[118464] "param"(118462 call ||(118455 call . this[123512] c"stridable")(118461 call chpl__anyRankChangeStridable args[118418]))
    unknown upranges[118480](118478 call * uprank[118451](118477 call range[66183](?)(idxType =(118470 call .(351388 call . this[123512] c"_value") c"idxType"))(stridable = upstridable[118464])))
    unknown updim[118484] 1
    {
      unknown i[118574] 0
      unknown tmp[118575] "maybe param" "temp"
      (118587 'move' tmp[118575](118585 call chpl_compute_low_param_loop_bound 1(351393 call . this[123512] c"rank")))
      unknown tmp[118576] "maybe param" "temp"
      (118594 'move' tmp[118576](118592 call chpl_compute_high_param_loop_bound 1(351421 call . this[123512] c"rank")))
      unknown tmp[118577] "maybe param" "temp"
      (118597 'move' tmp[118577] 1)
      ParamForLoop
      { i[118574] tmp[118575] tmp[118576] tmp[118577]
        {
          if(118569 call _cond_test(118497 call isRange(118495 call args[118418] i[118574])))
          {
            (118503 call =(118501 call collapsedDim[118435] i[118574]) 0)
            (118518 call =(118510 call idx[118443] i[118574])(118515 call .(118514 call(351403 call . this[123512] c"dim") i[118574]) c"alignedLow"))
            (118541 call =(118524 call upranges[118480] updim[118484])(118540 call(118534 call(118529 call .(118526 call . this[123512] c"_value") c"dsiDim") i[118574])(118538 call args[118418] i[118574])))
            (118546 call += updim[118484] 1)
          }
          {
            (118554 call =(118552 call collapsedDim[118435] i[118574]) 1)
            (118566 call =(118561 call idx[118443] i[118574])(118565 call args[118418] i[118574]))
          }
        }
      }
      label _unused_continueLabel[118579]
      label _breakLabel[118578]
    }
    const emptyrange[118613] "const"(118612 'typeof'(118611 call upranges[118480] 1))
    if(118669 call _cond_test(118620 call !(118619 call(351426 call . this[123512] c"contains") idx[118443])))
    {
      {
        unknown d[118634] 0
        unknown tmp[118635] "maybe param" "temp"
        (118647 'move' tmp[118635](118645 call chpl_compute_low_param_loop_bound 1 uprank[118451]))
        unknown tmp[118636] "maybe param" "temp"
        (118654 'move' tmp[118636](118652 call chpl_compute_high_param_loop_bound 1 uprank[118451]))
        unknown tmp[118637] "maybe param" "temp"
        (118657 'move' tmp[118637] 1)
        ParamForLoop
        { d[118634] tmp[118635] tmp[118636] tmp[118637]
          (118631 call =(118629 call upranges[118480] d[118634]) emptyrange[118613])
        }
        label _unused_continueLabel[118639]
        label _breakLabel[118638]
      }
    }
    const rcdist[118692] "const"(118691 'new'(118690 'to unmanaged class from unknown'(118689 call anymanaged ArrayViewRankChangeDist[351436](?)(downDistPid =(118675 call .(351440 call . this[123512] c"dist") c"_pid"))(downDistInst =(118681 call .(351444 call . this[123512] c"dist") c"_instance"))(collapsedDim = collapsedDim[118435])(idx = idx[118443]))))
    const rcdistRec[118700] "const"(118699 'new'(118698 call _distribution[116702](?) rcdist[118692]))
    (118724 return(118723 'new'(118722 call _domain[123390](?) rcdistRec[118700] uprank[118451](118711 call .(118710 call upranges[118480] 1) c"idxType")(118718 call .(118717 call upranges[118480] 1) c"stridable") upranges[118480])))
  }
  where {
    (118430 call _validRankChangeArgs args[118418](118427 call .(351367 call . this[123512] c"_value") c"idxType"))
  }
  function _domain[123390](?).this[118737](arg _mt[123518]:_MT[227], arg this[123516]:_domain[123390](?), arg i[118733] ... :
  integral[188](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (118757 call compilerError "domain slice requires a range in at least one dimension")
  }
  function _domain[123390](?).this[118769](arg _mt[123522]:_MT[227], arg this[123520]:_domain[123390](?), arg args[118766]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(118816 call _cond_test(118773 call == numArgs[118764](351464 call . this[123520] c"rank")))
    {
      (118793 call compilerError "invalid argument types for domain slicing")
    }
    {
      (118814 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
  }
  function _domain[123390](?).dims[118826](arg _mt[123526]:_MT[227], arg this[123524]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    (118834 return(118833 call(118829 call .(351468 call . this[123524] c"_value") c"dsiDims")))
  }
  function _domain[123390](?).dim[118845](arg _mt[123530]:_MT[227], arg this[123528]:_domain[123390](?), arg d[118842] :
  int(64)[13]) : _unknown[43] "method" "primary method"
  {
    (118854 return(118853 call(118848 call .(351472 call . this[123528] c"_value") c"dsiDim") d[118842]))
  }
  function _domain[123390](?).dim[118865](arg _mt[123534]:_MT[227], arg this[123532]:_domain[123390](?), param arg d[118862] :
  int(64)[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    (118874 return(118873 call(118868 call .(351477 call . this[123532] c"_value") c"dsiDim") d[118862]))
  }
  function _domain[123390](?).dimIter[118883](arg _mt[123538]:_MT[227], arg this[123536]:_domain[123390](?), param arg d[118881]:_any[170](?), arg ind[118885]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[118901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118902] "expr temp" "temp"
      (118911 'move' _iterator[118902](118909 call _getIterator(118897 call(118891 call .(351482 call . this[123536] c"_value") c"dimIter") d[118881] ind[118885])))
      Defer
      {
        {
          (118928 call _freeIterator _iterator[118902])
        }
      }
      { scopeless type
        (118917 'move' _indexOfInterest[118901](118914 call iteratorIndex _iterator[118902]))
      }
      ForLoop
      {
        unknown i[118921] "index var" "insert auto destroy"
        (118923 'move' i[118921] _indexOfInterest[118901])
        (118899 yield i[118921])
        label _continueLabel[118906]
        _indexOfInterest[118901]
        _iterator[118902]
      }
      label _breakLabel[118907]
    }
  }
  function _domain[123390](?).shape[118940](arg _mt[123542]:_MT[227], arg this[123540]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown s[118962](118960 call *(351491 call . this[123540] c"rank")(118957 call .(118956 call(351495 call . this[123540] c"dim") 1) c"intIdxType"))
    {
      unknown _indexOfInterest[118994] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118995] "expr temp" "temp"
      (119025 'move' _iterator[118995](118982 call _build_tuple(119010 call _getIterator(119018 call chpl_direct_range_iter 1(119015 call . s[118962] c"size") 1))(119022 call _getIterator(119021 call(351503 call . this[123540] c"dims")))))
      Defer
      {
        {
          (119055 call _freeIterator _iterator[118995])
        }
      }
      { scopeless type
        (119030 'move' _indexOfInterest[118994](119027 call iteratorIndex _iterator[118995]))
      }
      ForLoop
      {
        (119035 call _check_tuple_var_decl _indexOfInterest[118994] 2)
        unknown i[119041] "index var" "insert auto destroy"
        (119043 'move' i[119041](119039 call _indexOfInterest[118994] 1))
        unknown r[119048] "index var" "insert auto destroy"
        (119050 'move' r[119048](119046 call _indexOfInterest[118994] 2))
        (118991 call =(118986 call s[118962] i[119041])(118988 call . r[119048] c"size"))
        label _continueLabel[118999]
        _indexOfInterest[118994]
        _iterator[118995]
      }
      label _breakLabel[119000]
    }
    (119063 return s[118962])
  }
  where {
    (118950 call ||(118945 call isRectangularDom this[123540])(118949 call isSparseDom this[123540]))
  }
  function _domain[123390](?).shape[119070](arg _mt[123546]:_MT[227], arg this[123544]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    unknown s[119086](119084 call _build_tuple(119083 'typeof'(351510 call . this[123544] c"size")))
    (119095 call =(119093 call s[119086] 1)(351515 call . this[123544] c"size"))
    (119099 return s[119086])
  }
  where {
    (119080 call ||(119075 call isAssociativeDom this[123544])(119079 call isOpaqueDom this[123544]))
  }
  function _domain[123390](?).shape[119106](arg _mt[123550]:_MT[227], arg this[123548]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (119126 call compilerError ".shape not supported on this domain")
  }
  function _domain[123390](?).buildArray[119135](arg _mt[123554]:_MT[227], arg this[123552]:_domain[123390](?), arg eltType[119133]:_any[170](?)) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    if(119162 call _cond_test(119139 call == eltType[119133] void[4]))
    {
      (119159 call compilerError "array element type cannot be void")
    }
    if(119256 call _cond_test(119170 call isGenericType eltType[119133]))
    {
      (119195 call compilerWarning(119192 call + "creating an array with element type "(119190 call _cast string[24] eltType[119133])))
      if(119232 call _cond_test(119209 call &&(119201 call isClassType eltType[119133])(119207 call !(119206 call isGenericType(119204 'to borrowed class from unknown' eltType[119133])))))
      {
        (119229 call compilerWarning "which now means class type with generic management")
      }
      (119254 call compilerError "array element type cannot currently be generic")
    }
    unknown x[119269](119268 call(119263 call .(351525 call . this[123552] c"_value") c"dsiBuildArray") eltType[119133])
    function help[119274]() : _unknown[43] "dont disable remote value forwarding" "no return value for void"
    {
      (119284 call(119279 call .(351530 call . this[123552] c"_value") c"add_arr") x[119269])
    }
    (119291 call help)
    (119300 call chpl_incRefCountsForDomainsInArrayEltTypes x[119269](119297 call . x[119269] c"eltType"))
    (119306 return(119305 call _newArray x[119269]))
  }
  function _domain[123390](?).buildArrayWith[119314](arg _mt[123558]:_MT[227], arg this[123556]:_domain[123390](?), arg eltType[119312]:_any[170](?), arg data[119320] :
  (119319 call _ddata[11791](?) eltType[119312]), arg allocSize[119324] :
  int(64)[13]) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    if(119337 call _cond_test(119329 call == eltType[119312] void[4]))
    {
      (119334 call compilerError "array element type cannot be void")
    }
    unknown x[119353](119352 call(119345 call .(351541 call . this[123556] c"_value") c"dsiBuildArrayWith") eltType[119312] data[119320] allocSize[119324])
    function help[119358]() : _unknown[43] "dont disable remote value forwarding" "no return value for void"
    {
      (119366 call(119361 call .(351548 call . this[123556] c"_value") c"add_arr") x[119353])
    }
    (119373 call help)
    (119382 call chpl_incRefCountsForDomainsInArrayEltTypes x[119353](119379 call . x[119353] c"eltType"))
    (119388 return(119387 call _newArray x[119353]))
  }
  function _domain[123390](?).clear[119394](arg _mt[123562]:_MT[227], arg this[123560]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[119402](119401 'typeof' this[123560])
    (119408 call = this[123560] emptyDom[119402])
  }
  where {
    (119399 call isRectangularDom this[123560])
  }
  function _domain[123390](?).clear[119416](arg _mt[123566]:_MT[227], arg this[123564]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (119425 call(119421 call .(351560 call . this[123564] c"_value") c"dsiClear"))
  }
  function _domain[123390](?).create[119432](arg _mt[123570]:_MT[227], arg this[123568]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(119461 call _cond_test(119439 call !=(119435 call .(351564 call . this[123568] c"_value") c"idxType") _OpaqueIndex[140304]))
    {
      (119459 call compilerError "domain.create() only applies to opaque domains")
    }
    (119475 return(119474 call(119470 call .(351569 call . this[123568] c"_value") c"dsiCreate")))
  }
  function _domain[123390](?).add[119483](arg _mt[123574]:_MT[227], arg this[123572]:_domain[123390](?), arg i[119481]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (119494 return(119493 call(119488 call .(351573 call . this[123572] c"_value") c"dsiAdd") i[119481]))
  }
  function _domain[123390](?).bulkAdd[119511](arg _mt[123578]:_MT[227], arg this[123576]:_domain[123390](?), arg inds[119508] :
  (119505 call chpl__buildArrayRuntimeType nil[38](119502 call .(351578 call . this[123576] c"_value") c"idxType")), arg dataSorted[119514] =
  0, arg isUnique[119518] =
  0, arg preserveInds[119522] =
  1, arg addOn[119530] =
  (119528 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "method" "primary method" "no doc"
  {
    if(119556 call _cond_test(119551 call ==(119547 call . inds[119508] c"size") 0))
    {
      (119554 return 0)
    }
    (119575 return(119574 call(119565 call .(351588 call . this[123576] c"_value") c"dsiBulkAdd") inds[119508] dataSorted[119514] isUnique[119518] preserveInds[119522] addOn[119530]))
  }
  where {
    (119544 call &&(119536 call isSparseDom this[123576])(119542 call ==(119538 call .(351583 call . this[123576] c"_value") c"rank") 1))
  }
  function _domain[123390](?).makeIndexBuffer[119586](arg _mt[123582]:_MT[227], arg this[123580]:_domain[123390](?), arg size[119583] :
  int(64)[13]) : _unknown[43] "inline" "method" "primary method"
  {
    (119597 return(119596 call(119591 call .(351597 call . this[123580] c"_value") c"dsiMakeIndexBuffer") size[119583]))
  }
  function _domain[123390](?).bulkAdd[119620](arg _mt[123586]:_MT[227], arg this[123584]:_domain[123390](?), arg inds[119617] :
  (119614 call chpl__buildArrayRuntimeType nil[38](119612 call *(119605 call .(351602 call . this[123584] c"_value") c"rank")(119609 call .(351606 call . this[123584] c"_value") c"idxType"))), arg dataSorted[119623] =
  0, arg isUnique[119627] =
  0, arg preserveInds[119631] =
  1, arg addOn[119639] =
  (119637 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "method" "primary method"
  {
    if(119665 call _cond_test(119660 call ==(119656 call . inds[119617] c"size") 0))
    {
      (119663 return 0)
    }
    (119682 return(119681 call(119672 call .(351616 call . this[123584] c"_value") c"dsiBulkAdd") inds[119617] dataSorted[119623] isUnique[119627] preserveInds[119631] addOn[119639]))
  }
  where {
    (119653 call &&(119645 call isSparseDom this[123584])(119651 call >(119647 call .(351611 call . this[123584] c"_value") c"rank") 1))
  }
  function _domain[123390](?).remove[119691](arg _mt[123590]:_MT[227], arg this[123588]:_domain[123390](?), arg i[119689]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (119702 return(119701 call(119696 call .(351625 call . this[123588] c"_value") c"dsiRemove") i[119689]))
  }
  function _domain[123390](?).requestCapacity[119711](arg _mt[123594]:_MT[227], arg this[123592]:_domain[123390](?), arg i[119709]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(119738 call _cond_test(119715 call < i[119709] 0))
    {
      (119735 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    if(119769 call _cond_test(119747 call !(119746 call isAssociativeDom this[123592])))
    {
      (119767 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    (119782 call(119777 call .(351632 call . this[123592] c"_value") c"dsiRequestCapacity") i[119709])
  }
  function _domain[123390](?).size[119788](arg _mt[123598]:_MT[227], arg this[123596]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119791 return(351637 call . this[123596] c"numIndices"))
  }
  function _domain[123390](?).numIndices[119798](arg _mt[123602]:_MT[227], arg this[123600]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119804 return(119801 call .(351641 call . this[123600] c"_value") c"dsiNumIndices"))
  }
  function _domain[123390](?).low[119811](arg _mt[123606]:_MT[227], arg this[123604]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119817 return(119814 call .(351645 call . this[123604] c"_value") c"dsiLow"))
  }
  function _domain[123390](?).high[119824](arg _mt[123610]:_MT[227], arg this[123608]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119832 return(119829 call .(351649 call . this[123608] c"_value") c"dsiHigh"))
  }
  function _domain[123390](?).stride[119839](arg _mt[123614]:_MT[227], arg this[123612]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119845 return(119842 call .(351653 call . this[123612] c"_value") c"dsiStride"))
  }
  function _domain[123390](?).alignment[119852](arg _mt[123618]:_MT[227], arg this[123616]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119860 return(119857 call .(351657 call . this[123616] c"_value") c"dsiAlignment"))
  }
  function _domain[123390](?).first[119867](arg _mt[123622]:_MT[227], arg this[123620]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119875 return(119872 call .(351661 call . this[123620] c"_value") c"dsiFirst"))
  }
  function _domain[123390](?).last[119882](arg _mt[123626]:_MT[227], arg this[123624]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119890 return(119887 call .(351665 call . this[123624] c"_value") c"dsiLast"))
  }
  function _domain[123390](?).alignedLow[119897](arg _mt[123630]:_MT[227], arg this[123628]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119905 return(119902 call .(351669 call . this[123628] c"_value") c"dsiAlignedLow"))
  }
  function _domain[123390](?).alignedHigh[119912](arg _mt[123634]:_MT[227], arg this[123632]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119920 return(119917 call .(351673 call . this[123632] c"_value") c"dsiAlignedHigh"))
  }
  function _domain[123390](?).contains[119937](arg _mt[123638]:_MT[227], arg this[123636]:_domain[123390](?), arg i[119934] :
  (119932 call *(351677 call . this[123636] c"rank")(119929 call .(351681 call . this[123636] c"_value") c"idxType"))) : _unknown[43] "method" "primary method" "no doc"
  {
    if(119974 call _cond_test(119947 call ||(119942 call isRectangularDom this[123636])(119946 call isSparseDom this[123636])))
    {
      (119960 return(119959 call(119950 call .(351687 call . this[123636] c"_value") c"dsiMember")(119957 call _makeIndexTuple(351691 call . this[123636] c"rank") i[119934])))
    }
    {
      (119972 return(119971 call(119963 call .(351696 call . this[123636] c"_value") c"dsiMember")(119969 call i[119934] 1)))
    }
  }
  function _domain[123390](?).contains[119994](arg _mt[123642]:_MT[227], arg this[123640]:_domain[123390](?), arg i[119990] ... :
  (119986 call .(351701 call . this[123640] c"_value") c"idxType")) : _unknown[43] "inline" "method" "primary method"
  {
    (120000 return(119999 call(351709 call . this[123640] c"contains") i[119990]))
  }
  function _domain[123390](?).member[120017](arg _mt[123646]:_MT[227], arg this[123644]:_domain[123390](?), arg i[120014] :
  (120012 call *(351714 call . this[123644] c"rank")(120009 call .(351718 call . this[123644] c"_value") c"idxType"))) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (120055 call compilerWarning(120052 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (120065 return(120064 call(120059 call . this[123644] c"contains") i[120014]))
  }
  function _domain[123390](?).member[120080](arg _mt[123650]:_MT[227], arg this[123648]:_domain[123390](?), arg i[120076] ... :
  (120072 call .(351724 call . this[123648] c"_value") c"idxType")) : _unknown[43] "inline" "method" "primary method"
  {
    (120088 call compilerWarning(120085 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (120098 return(120097 call(120092 call . this[123648] c"contains") i[120076]))
  }
  function _domain[123390](?).isSubset[120108](arg _mt[123654]:_MT[227], arg this[123652]:_domain[123390](?), arg super[120105] :
  _domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    if(120203 call _cond_test(120120 call !(120118 call ||(120113 call isAssociativeDom this[123652])(120117 call isRectangularDom this[123652]))))
    {
      if(120196 call _cond_test(120125 call isOpaqueDom this[123652]))
      {
        (120144 call compilerError "isSubset not supported on opaque domains")
      }
      {
        if(120190 call _cond_test(120149 call isSparseDom this[123652]))
        {
          (120168 call compilerError "isSubset not supported on sparse domains")
        }
        {
          (120188 call compilerError "isSubset not supported on this domain type")
        }
      }
    }
    if(120317 call _cond_test(120212 call !=(120209 'typeof' super[120105])(120211 'typeof' this[123652])))
    {
      if(120312 call _cond_test(120217 call isRectangularDom this[123652]))
      {
        if(120285 call _cond_test(120226 call !=(120219 call . super[120105] c"rank")(120223 call . this[123652] c"rank")))
        {
          (120246 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          if(120280 call _cond_test(120258 call !=(120252 'typeof'(120249 call . super[120105] c"low"))(120257 'typeof'(120254 call . this[123652] c"low"))))
          {
            (120278 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (120310 call compilerError "isSubset called with different associative domain types")
      }
    }
    if(120441 call _cond_test(120325 call isRectangularDom this[123652]))
    {
      unknown contains[120327] 1
      {
        unknown _indexOfInterest[120393] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120394] "expr temp" "temp"
        (120403 'move' _iterator[120394](120401 call _getIterator(120415 call chpl_direct_range_iter 1(120408 call .(120413 call(120410 call . this[123652] c"dims")) c"size") 1)))
        Defer
        {
          {
            (120431 call _freeIterator _iterator[120394])
          }
        }
        { scopeless type
          (120420 'move' _indexOfInterest[120393](120417 call iteratorIndex _iterator[120394]))
        }
        ForLoop
        {
          unknown i[120424] "index var" "insert auto destroy"
          (120426 'move' i[120424] _indexOfInterest[120393])
          {
            {
              unknown tmp[120369] "temp"
              (120372 'move' tmp[120369](120371 'addr of' contains[120327]))
              (120377 call = tmp[120369](120374 call && tmp[120369](120367 call(120354 call .(120353 call(120350 call(120346 call . super[120105] c"dims")) i[120424]) c"contains")(120365 call(120362 call(120358 call . this[123652] c"dims")) i[120424]))))
            }
            if(120388 call _cond_test(120383 call == contains[120327] 0))
            {
              break _breakLabel[120399] _breakLabel[120399]
            }
          }
          label _continueLabel[120398]
          _indexOfInterest[120393]
          _iterator[120394]
        }
        label _breakLabel[120399]
      }
      (120439 return contains[120327])
    }
    (120461 return(120459 'reduce' anymanaged LogicalAndReduceScanOp[344251](?)(120455 forall  i[120457]  in  this[123652] do
    {
      (120454 call(120449 call . super[120105] c"contains") i[120457])
    } ) 0))
  }
  function _domain[123390](?).isSuper[120471](arg _mt[123658]:_MT[227], arg this[123656]:_domain[123390](?), arg sub[120468] :
  _domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    if(120568 call _cond_test(120483 call !(120481 call ||(120476 call isAssociativeDom this[123656])(120480 call isRectangularDom this[123656]))))
    {
      if(120561 call _cond_test(120488 call isOpaqueDom this[123656]))
      {
        (120507 call compilerError "isSuper not supported on opaque domains")
      }
      {
        if(120555 call _cond_test(120512 call isSparseDom this[123656]))
        {
          (120531 call compilerError "isSuper not supported on sparse domains")
        }
        {
          (120553 call compilerError "isSuper not supported on the domain type "(120552 'typeof' this[123656]))
        }
      }
    }
    if(120682 call _cond_test(120577 call !=(120574 'typeof' sub[120468])(120576 'typeof' this[123656])))
    {
      if(120677 call _cond_test(120582 call isRectangularDom this[123656]))
      {
        if(120650 call _cond_test(120591 call !=(120584 call . sub[120468] c"rank")(120588 call . this[123656] c"rank")))
        {
          (120611 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          if(120645 call _cond_test(120623 call !=(120617 'typeof'(120614 call . sub[120468] c"low"))(120622 'typeof'(120619 call . this[123656] c"low"))))
          {
            (120643 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (120675 call compilerError "isSuper called with different associative domain types")
      }
    }
    if(120806 call _cond_test(120690 call isRectangularDom this[123656]))
    {
      unknown contains[120692] 1
      {
        unknown _indexOfInterest[120758] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120759] "expr temp" "temp"
        (120768 'move' _iterator[120759](120766 call _getIterator(120780 call chpl_direct_range_iter 1(120773 call .(120778 call(120775 call . this[123656] c"dims")) c"size") 1)))
        Defer
        {
          {
            (120796 call _freeIterator _iterator[120759])
          }
        }
        { scopeless type
          (120785 'move' _indexOfInterest[120758](120782 call iteratorIndex _iterator[120759]))
        }
        ForLoop
        {
          unknown i[120789] "index var" "insert auto destroy"
          (120791 'move' i[120789] _indexOfInterest[120758])
          {
            {
              unknown tmp[120734] "temp"
              (120737 'move' tmp[120734](120736 'addr of' contains[120692]))
              (120742 call = tmp[120734](120739 call && tmp[120734](120732 call(120719 call .(120718 call(120715 call(120711 call . this[123656] c"dims")) i[120789]) c"contains")(120730 call(120727 call(120723 call . sub[120468] c"dims")) i[120789]))))
            }
            if(120753 call _cond_test(120748 call == contains[120692] 0))
            {
              break _breakLabel[120764] _breakLabel[120764]
            }
          }
          label _continueLabel[120763]
          _indexOfInterest[120758]
          _iterator[120759]
        }
        label _breakLabel[120764]
      }
      (120804 return contains[120692])
    }
    (120826 return(120824 'reduce' anymanaged LogicalAndReduceScanOp[344251](?)(120820 forall  i[120822]  in  sub[120468] do
    {
      (120819 call(120814 call . this[123656] c"contains") i[120822])
    } ) 0))
  }
  function _domain[123390](?).indexOrder[120834](arg _mt[123662]:_MT[227], arg this[123660]:_domain[123390](?), arg i[120832]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (120849 return(120848 call(120839 call .(351787 call . this[123660] c"_value") c"dsiIndexOrder")(120846 call _makeIndexTuple(351791 call . this[123660] c"rank") i[120832])))
  }
  function _domain[123390](?).position[120858](arg _mt[123666]:_MT[227], arg this[123664]:_domain[123390](?), arg i[120856]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ind[120865](120864 call _makeIndexTuple(351796 call . this[123664] c"rank") i[120856])
    unknown pos[120872](120870 call *(351801 call . this[123664] c"rank")(351805 call . this[123664] c"intIdxType"))
    {
      unknown _indexOfInterest[120904] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120905] "expr temp" "temp"
      (120914 'move' _iterator[120905](120912 call _getIterator(120919 call chpl_direct_range_iter 1(351818 call . this[123664] c"rank") 1)))
      Defer
      {
        {
          (120935 call _freeIterator _iterator[120905])
        }
      }
      { scopeless type
        (120924 'move' _indexOfInterest[120904](120921 call iteratorIndex _iterator[120905]))
      }
      ForLoop
      {
        unknown d[120928] "index var" "insert auto destroy"
        (120930 'move' d[120928] _indexOfInterest[120904])
        (120901 call =(120884 call pos[120872] d[120928])(120900 call(120892 call .(120891 call(120886 call .(351811 call . this[123664] c"_value") c"dsiDim") d[120928]) c"indexOrder")(120898 call ind[120865] d[120928])))
        label _continueLabel[120909]
        _indexOfInterest[120904]
        _iterator[120905]
      }
      label _breakLabel[120910]
    }
    (120943 return pos[120872])
  }
  function _domain[123390](?).expand[120956](arg _mt[123670]:_MT[227], arg this[123668]:_domain[123390](?), arg off[120953] :
  (120951 call *(351823 call . this[123668] c"rank")(351827 call . this[123668] c"intIdxType"))) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(121068 call _cond_test(120967 call isAssociativeDom this[123668]))
    {
      (120986 call compilerError "expand not supported on associative domains")
    }
    {
      if(121062 call _cond_test(120991 call isOpaqueDom this[123668]))
      {
        (121010 call compilerError "expand not supported on opaque domains")
      }
      {
        if(121056 call _cond_test(121015 call isSparseDom this[123668]))
        {
          (121034 call compilerError "expand not supported on sparse domains")
        }
        {
          (121054 call compilerError "expand not supported on this domain type")
        }
      }
    }
  }
  where {
    (120962 call !(120961 call isRectangularDom this[123668]))
  }
  function _domain[123390](?).expand[121086](arg _mt[123674]:_MT[227], arg this[123672]:_domain[123390](?), arg off[121082] ... :
  (351835 call . this[123672] c"intIdxType")) : _unknown[43] "method" "primary method" "no doc"
  {
    (121092 return(121091 call(351843 call . this[123672] c"expand") off[121082]))
  }
  function _domain[123390](?).expand[121106](arg _mt[123678]:_MT[227], arg this[123676]:_domain[123390](?), arg off[121103] :
  (121101 call *(351848 call . this[123676] c"rank")(351852 call . this[123676] c"intIdxType"))) : _unknown[43] "method" "primary method"
  {
    unknown ranges[121111](121110 call(351856 call . this[123676] c"dims"))
    {
      unknown _indexOfInterest[121201] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121202] "expr temp" "temp"
      (121211 'move' _iterator[121202](121209 call _getIterator(121216 call chpl_direct_range_iter 1(351871 call . this[123676] c"rank") 1)))
      Defer
      {
        {
          (121232 call _freeIterator _iterator[121202])
        }
      }
      { scopeless type
        (121221 'move' _indexOfInterest[121201](121218 call iteratorIndex _iterator[121202]))
      }
      ForLoop
      {
        unknown i[121225] "index var" "insert auto destroy"
        (121227 'move' i[121225] _indexOfInterest[121201])
        {
          (121139 call =(121123 call ranges[121111] i[121225])(121138 call(121130 call .(121127 call ranges[121111] i[121225]) c"expand")(121136 call off[121103] i[121225])))
          if(121197 call _cond_test(121157 call >(121147 call .(121146 call ranges[121111] i[121225]) c"low")(121154 call .(121153 call ranges[121111] i[121225]) c"high")))
          {
            (121194 call halt "***Error: Degenerate dimension created in dimension " i[121225] "***")
          }
        }
        label _continueLabel[121206]
        _indexOfInterest[121201]
        _iterator[121202]
      }
      label _breakLabel[121207]
    }
    (121251 return(121250 'new'(121249 call _domain[123390](?)(351876 call . this[123676] c"dist")(351880 call . this[123676] c"rank")(121244 call .(351884 call . this[123676] c"_value") c"idxType")(351888 call . this[123676] c"stridable") ranges[121111])))
  }
  function _domain[123390](?).expand[121261](arg _mt[123682]:_MT[227], arg this[123680]:_domain[123390](?), arg off[121258] :
  (351893 call . this[123680] c"intIdxType")) : _unknown[43] "method" "primary method"
  {
    unknown ranges[121270](121269 call(351901 call . this[123680] c"dims"))
    {
      unknown _indexOfInterest[121296] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121297] "expr temp" "temp"
      (121306 'move' _iterator[121297](121304 call _getIterator(121311 call chpl_direct_range_iter 1(351913 call . this[123680] c"rank") 1)))
      Defer
      {
        {
          (121327 call _freeIterator _iterator[121297])
        }
      }
      { scopeless type
        (121316 'move' _indexOfInterest[121296](121313 call iteratorIndex _iterator[121297]))
      }
      ForLoop
      {
        unknown i[121320] "index var" "insert auto destroy"
        (121322 'move' i[121320] _indexOfInterest[121296])
        (121293 call =(121282 call ranges[121270] i[121320])(121292 call(121287 call .(121286 call(351907 call . this[123680] c"dim") i[121320]) c"expand") off[121258]))
        label _continueLabel[121301]
        _indexOfInterest[121296]
        _iterator[121297]
      }
      label _breakLabel[121302]
    }
    (121346 return(121345 'new'(121344 call _domain[123390](?)(351918 call . this[123680] c"dist")(351922 call . this[123680] c"rank")(121339 call .(351926 call . this[123680] c"_value") c"idxType")(351930 call . this[123680] c"stridable") ranges[121270])))
  }
  where {
    (121265 call >(351897 call . this[123680] c"rank") 1)
  }
  function _domain[123390](?).exterior[121360](arg _mt[123686]:_MT[227], arg this[123684]:_domain[123390](?), arg off[121357] :
  (121355 call *(351935 call . this[123684] c"rank")(351939 call . this[123684] c"intIdxType"))) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(121472 call _cond_test(121371 call isAssociativeDom this[123684]))
    {
      (121390 call compilerError "exterior not supported on associative domains")
    }
    {
      if(121466 call _cond_test(121395 call isOpaqueDom this[123684]))
      {
        (121414 call compilerError "exterior not supported on opaque domains")
      }
      {
        if(121460 call _cond_test(121419 call isSparseDom this[123684]))
        {
          (121438 call compilerError "exterior not supported on sparse domains")
        }
        {
          (121458 call compilerError "exterior not supported on this domain type")
        }
      }
    }
  }
  where {
    (121366 call !(121365 call isRectangularDom this[123684]))
  }
  function _domain[123390](?).exterior[121490](arg _mt[123690]:_MT[227], arg this[123688]:_domain[123390](?), arg off[121486] ... :
  (351947 call . this[123688] c"intIdxType")) : _unknown[43] "method" "primary method" "no doc"
  {
    (121496 return(121495 call(351955 call . this[123688] c"exterior") off[121486]))
  }
  function _domain[123390](?).exterior[121510](arg _mt[123694]:_MT[227], arg this[123692]:_domain[123390](?), arg off[121507] :
  (121505 call *(351960 call . this[123692] c"rank")(351964 call . this[123692] c"intIdxType"))) : _unknown[43] "method" "primary method"
  {
    unknown ranges[121515](121514 call(351968 call . this[123692] c"dims"))
    {
      unknown _indexOfInterest[121546] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121547] "expr temp" "temp"
      (121556 'move' _iterator[121547](121554 call _getIterator(121561 call chpl_direct_range_iter 1(351981 call . this[123692] c"rank") 1)))
      Defer
      {
        {
          (121577 call _freeIterator _iterator[121547])
        }
      }
      { scopeless type
        (121566 'move' _indexOfInterest[121546](121563 call iteratorIndex _iterator[121547]))
      }
      ForLoop
      {
        unknown i[121570] "index var" "insert auto destroy"
        (121572 'move' i[121570] _indexOfInterest[121546])
        (121543 call =(121527 call ranges[121515] i[121570])(121542 call(121534 call .(121531 call(351974 call . this[123692] c"dim") i[121570]) c"exterior")(121540 call off[121507] i[121570])))
        label _continueLabel[121551]
        _indexOfInterest[121546]
        _iterator[121547]
      }
      label _breakLabel[121552]
    }
    (121596 return(121595 'new'(121594 call _domain[123390](?)(351986 call . this[123692] c"dist")(351990 call . this[123692] c"rank")(121589 call .(351994 call . this[123692] c"_value") c"idxType")(351998 call . this[123692] c"stridable") ranges[121515])))
  }
  function _domain[123390](?).exterior[121606](arg _mt[123698]:_MT[227], arg this[123696]:_domain[123390](?), arg off[121603] :
  (352003 call . this[123696] c"intIdxType")) : _unknown[43] "method" "primary method"
  {
    unknown offTup[121616](121614 call *(352011 call . this[123696] c"rank")(352015 call . this[123696] c"intIdxType"))
    {
      unknown _indexOfInterest[121633] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121634] "expr temp" "temp"
      (121643 'move' _iterator[121634](121641 call _getIterator(121648 call chpl_direct_range_iter 1(352022 call . this[123696] c"rank") 1)))
      Defer
      {
        {
          (121664 call _freeIterator _iterator[121634])
        }
      }
      { scopeless type
        (121653 'move' _indexOfInterest[121633](121650 call iteratorIndex _iterator[121634]))
      }
      ForLoop
      {
        unknown i[121657] "index var" "insert auto destroy"
        (121659 'move' i[121657] _indexOfInterest[121633])
        (121630 call =(121628 call offTup[121616] i[121657]) off[121603])
        label _continueLabel[121638]
        _indexOfInterest[121633]
        _iterator[121634]
      }
      label _breakLabel[121639]
    }
    (121675 return(121674 call(352026 call . this[123696] c"exterior") offTup[121616]))
  }
  where {
    (121610 call !=(352007 call . this[123696] c"rank") 1)
  }
  function _domain[123390](?).interior[121689](arg _mt[123702]:_MT[227], arg this[123700]:_domain[123390](?), arg off[121686] :
  (121684 call *(352031 call . this[123700] c"rank")(352035 call . this[123700] c"intIdxType"))) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(121801 call _cond_test(121700 call isAssociativeDom this[123700]))
    {
      (121719 call compilerError "interior not supported on associative domains")
    }
    {
      if(121795 call _cond_test(121724 call isOpaqueDom this[123700]))
      {
        (121743 call compilerError "interior not supported on opaque domains")
      }
      {
        if(121789 call _cond_test(121748 call isSparseDom this[123700]))
        {
          (121767 call compilerError "interior not supported on sparse domains")
        }
        {
          (121787 call compilerError "interior not supported on this domain type")
        }
      }
    }
  }
  where {
    (121695 call !(121694 call isRectangularDom this[123700]))
  }
  function _domain[123390](?).interior[121819](arg _mt[123706]:_MT[227], arg this[123704]:_domain[123390](?), arg off[121815] ... :
  (352043 call . this[123704] c"intIdxType")) : _unknown[43] "method" "primary method" "no doc"
  {
    (121825 return(121824 call(352051 call . this[123704] c"interior") off[121815]))
  }
  function _domain[123390](?).interior[121839](arg _mt[123710]:_MT[227], arg this[123708]:_domain[123390](?), arg off[121836] :
  (121834 call *(352056 call . this[123708] c"rank")(352060 call . this[123708] c"intIdxType"))) : _unknown[43] "method" "primary method"
  {
    unknown ranges[121844](121843 call(352064 call . this[123708] c"dims"))
    {
      unknown _indexOfInterest[121976] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121977] "expr temp" "temp"
      (121986 'move' _iterator[121977](121984 call _getIterator(121991 call chpl_direct_range_iter 1(352106 call . this[123708] c"rank") 1)))
      Defer
      {
        {
          (122007 call _freeIterator _iterator[121977])
        }
      }
      { scopeless type
        (121996 'move' _indexOfInterest[121976](121993 call iteratorIndex _iterator[121977]))
      }
      ForLoop
      {
        unknown i[122000] "index var" "insert auto destroy"
        (122002 'move' i[122000] _indexOfInterest[121976])
        {
          if(121946 call _cond_test(121921 call ||(121885 call &&(121858 call >(121856 call off[121836] i[122000]) 0)(121883 call <(121874 call -(121868 call +(121864 call .(121863 call(352070 call . this[123708] c"dim") i[122000]) c"_high") 1)(121873 call off[121836] i[122000]))(121880 call .(121879 call(352077 call . this[123708] c"dim") i[122000]) c"_low")))(121919 call &&(121892 call <(121890 call off[121836] i[122000]) 0)(121917 call >(121908 call -(121902 call -(121898 call .(121897 call(352084 call . this[123708] c"dim") i[122000]) c"_low") 1)(121907 call off[121836] i[122000]))(121914 call .(121913 call(352091 call . this[123708] c"dim") i[122000]) c"_high")))))
          {
            (121943 call halt "***Error: Argument to 'interior' function out of range in dimension " i[122000] "***")
          }
          (121973 call =(121954 call ranges[121844] i[122000])(121972 call(121964 call .(121961 call(121956 call .(352099 call . this[123708] c"_value") c"dsiDim") i[122000]) c"interior")(121970 call off[121836] i[122000])))
        }
        label _continueLabel[121981]
        _indexOfInterest[121976]
        _iterator[121977]
      }
      label _breakLabel[121982]
    }
    (122026 return(122025 'new'(122024 call _domain[123390](?)(352111 call . this[123708] c"dist")(352115 call . this[123708] c"rank")(122019 call .(352119 call . this[123708] c"_value") c"idxType")(352123 call . this[123708] c"stridable") ranges[121844])))
  }
  function _domain[123390](?).interior[122036](arg _mt[123714]:_MT[227], arg this[123712]:_domain[123390](?), arg off[122033] :
  (352128 call . this[123712] c"intIdxType")) : _unknown[43] "method" "primary method"
  {
    unknown offTup[122046](122044 call *(352136 call . this[123712] c"rank")(352140 call . this[123712] c"intIdxType"))
    {
      unknown _indexOfInterest[122063] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122064] "expr temp" "temp"
      (122073 'move' _iterator[122064](122071 call _getIterator(122078 call chpl_direct_range_iter 1(352147 call . this[123712] c"rank") 1)))
      Defer
      {
        {
          (122094 call _freeIterator _iterator[122064])
        }
      }
      { scopeless type
        (122083 'move' _indexOfInterest[122063](122080 call iteratorIndex _iterator[122064]))
      }
      ForLoop
      {
        unknown i[122087] "index var" "insert auto destroy"
        (122089 'move' i[122087] _indexOfInterest[122063])
        (122060 call =(122058 call offTup[122046] i[122087]) off[122033])
        label _continueLabel[122068]
        _indexOfInterest[122063]
        _iterator[122064]
      }
      label _breakLabel[122069]
    }
    (122105 return(122104 call(352151 call . this[123712] c"interior") offTup[122046]))
  }
  where {
    (122040 call !=(352132 call . this[123712] c"rank") 1)
  }
  function _domain[123390](?).translate[122114](arg _mt[123718]:_MT[227], arg this[123716]:_domain[123390](?), arg off[122112]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(122226 call _cond_test(122125 call isAssociativeDom this[123716]))
    {
      (122144 call compilerError "translate not supported on associative domains")
    }
    {
      if(122220 call _cond_test(122149 call isOpaqueDom this[123716]))
      {
        (122168 call compilerError "translate not supported on opaque domains")
      }
      {
        if(122214 call _cond_test(122173 call isSparseDom this[123716]))
        {
          (122192 call compilerError "translate not supported on sparse domains")
        }
        {
          (122212 call compilerError "translate not supported on this domain type")
        }
      }
    }
  }
  where {
    (122120 call !(122119 call isRectangularDom this[123716]))
  }
  function _domain[123390](?).translate[122242](arg _mt[123722]:_MT[227], arg this[123720]:_domain[123390](?), arg off[122239]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    (122248 return(122247 call(352164 call . this[123720] c"translate") off[122239]))
  }
  function _domain[123390](?).translate[122257](arg _mt[123726]:_MT[227], arg this[123724]:_domain[123390](?), arg off[122255]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    if(122290 call _cond_test(122268 call !=(122264 call . off[122255] c"size")(352171 call . this[123724] c"rank")))
    {
      (122288 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown ranges[122299](122298 call(352175 call . this[123724] c"dims"))
    {
      unknown _indexOfInterest[122330] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122331] "expr temp" "temp"
      (122340 'move' _iterator[122331](122338 call _getIterator(122345 call chpl_direct_range_iter 1(352188 call . this[123724] c"rank") 1)))
      Defer
      {
        {
          (122361 call _freeIterator _iterator[122331])
        }
      }
      { scopeless type
        (122350 'move' _indexOfInterest[122330](122347 call iteratorIndex _iterator[122331]))
      }
      ForLoop
      {
        unknown i[122354] "index var" "insert auto destroy"
        (122356 'move' i[122354] _indexOfInterest[122330])
        (122327 call =(122310 call ranges[122299] i[122354])(122326 call(122318 call .(122317 call(122312 call .(352181 call . this[123724] c"_value") c"dsiDim") i[122354]) c"translate")(122324 call off[122255] i[122354])))
        label _continueLabel[122335]
        _indexOfInterest[122330]
        _iterator[122331]
      }
      label _breakLabel[122336]
    }
    (122380 return(122379 'new'(122378 call _domain[123390](?)(352193 call . this[123724] c"dist")(352197 call . this[123724] c"rank")(122373 call .(352201 call . this[123724] c"_value") c"idxType")(352205 call . this[123724] c"stridable") ranges[122299])))
  }
  where {
    (122262 call isTuple off[122255])
  }
  function _domain[123390](?).translate[122389](arg _mt[123730]:_MT[227], arg this[123728]:_domain[123390](?), arg off[122387]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown offTup[122408](122406 call *(352215 call . this[123728] c"rank")(122405 'typeof' off[122387]))
    {
      unknown _indexOfInterest[122425] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122426] "expr temp" "temp"
      (122435 'move' _iterator[122426](122433 call _getIterator(122440 call chpl_direct_range_iter 1(352223 call . this[123728] c"rank") 1)))
      Defer
      {
        {
          (122456 call _freeIterator _iterator[122426])
        }
      }
      { scopeless type
        (122445 'move' _indexOfInterest[122425](122442 call iteratorIndex _iterator[122426]))
      }
      ForLoop
      {
        unknown i[122449] "index var" "insert auto destroy"
        (122451 'move' i[122449] _indexOfInterest[122425])
        (122422 call =(122420 call offTup[122408] i[122449]) off[122387])
        label _continueLabel[122430]
        _indexOfInterest[122425]
        _iterator[122426]
      }
      label _breakLabel[122431]
    }
    (122467 return(122466 call(352227 call . this[123728] c"translate") offTup[122408]))
  }
  where {
    (122401 call &&(122393 call !=(352210 call . this[123728] c"rank") 1)(122399 call !(122398 call isTuple off[122387])))
  }
  function _domain[123390](?).isEmpty[122474](arg _mt[123734]:_MT[227], arg this[123732]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    (122484 return(122482 call ==(122478 call . this[123732] c"size") 0))
  }
  { scopeless type
    bool[10]
  }
  function _domain[123390](?).chpl__unTranslate[122498](arg _mt[123738]:_MT[227], arg this[123736]:_domain[123390](?), arg off[122494] ... :
  integral[188](?)) : _unknown[43] "method" "primary method"
  {
    (122504 return(122503 call(352238 call . this[123736] c"chpl__unTranslate") off[122494]))
  }
  function _domain[123390](?).chpl__unTranslate[122518](arg _mt[123742]:_MT[227], arg this[123740]:_domain[123390](?), arg off[122515] :
  (122513 call *(352243 call . this[123740] c"rank")(352247 call . this[123740] c"intIdxType"))) : _unknown[43] "method" "primary method"
  {
    unknown ranges[122523](122522 call(352251 call . this[123740] c"dims"))
    {
      unknown _indexOfInterest[122554] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122555] "expr temp" "temp"
      (122564 'move' _iterator[122555](122562 call _getIterator(122569 call chpl_direct_range_iter 1(352264 call . this[123740] c"rank") 1)))
      Defer
      {
        {
          (122585 call _freeIterator _iterator[122555])
        }
      }
      { scopeless type
        (122574 'move' _indexOfInterest[122554](122571 call iteratorIndex _iterator[122555]))
      }
      ForLoop
      {
        unknown i[122578] "index var" "insert auto destroy"
        (122580 'move' i[122578] _indexOfInterest[122554])
        (122551 call =(122535 call ranges[122523] i[122578])(122550 call(122542 call .(122539 call(352257 call . this[123740] c"dim") i[122578]) c"chpl__unTranslate")(122548 call off[122515] i[122578])))
        label _continueLabel[122559]
        _indexOfInterest[122554]
        _iterator[122555]
      }
      label _breakLabel[122560]
    }
    (122604 return(122603 'new'(122602 call _domain[123390](?)(352269 call . this[123740] c"dist")(352273 call . this[123740] c"rank")(122597 call .(352277 call . this[123740] c"_value") c"idxType")(352281 call . this[123740] c"stridable") ranges[122523])))
  }
  function _domain[123390](?).setIndices[122612](arg _mt[123746]:_MT[227], arg this[123744]:_domain[123390](?), arg x[122610]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (122620 call(122615 call .(352286 call . this[123744] c"_value") c"dsiSetIndices") x[122610])
    if(122633 call _cond_test(122626 call _isPrivatized(352292 call . this[123744] c"_instance")))
    {
      (122630 call _reprivatize(352296 call . this[123744] c"_value"))
    }
  }
  function _domain[123390](?).getIndices[122641](arg _mt[123750]:_MT[227], arg this[123748]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (122651 return(122650 call(122646 call .(352300 call . this[123748] c"_value") c"dsiGetIndices")))
  }
  function _domain[123390](?).writeThis[122660](arg _mt[123754]:_MT[227], arg this[123752]:_domain[123390](?), arg f[122658]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (122670 call(122665 call .(352304 call . this[123752] c"_value") c"dsiSerialWrite") f[122658])
  }
  function _domain[123390](?).readThis[122679](arg _mt[123758]:_MT[227], arg this[123756]:_domain[123390](?), arg f[122677]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (122689 call(122684 call .(352309 call . this[123756] c"_value") c"dsiSerialRead") f[122677])
  }
  function _domain[123390](?).localSlice[122700](arg _mt[123762]:_MT[227], arg this[123760]:_domain[123390](?), arg r[122697]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    if(122766 call _cond_test(122719 call !=(122716 call chpl_localeID_to_locale(122715 '_wide_get_locale'(352323 call . this[123760] c"_value")))(352326 call here[92085])))
    {
      (122764 call halt "Attempting to take a local slice of a domain on locale "(122743 '_wide_get_node'(352329 call . this[123760] c"_value")) " from locale "(122761 call .(352332 call here[92085]) c"id"))
    }
    (122777 return(122776 call this[123760](122774 'expand_tuple' r[122697])))
  }
  where {
    (122712 call &&(122705 call chpl__isTupleOfRanges r[122697])(122711 call(122707 call .(352319 call . this[123760] c"_value") c"isDefaultRectangular")))
  }
  function _domain[123390](?).localSlice[122788](arg _mt[123766]:_MT[227], arg this[123764]:_domain[123390](?), arg r[122785]:_any[170](?) ...) : _unknown[43] "method" "primary method"
  {
    (122817 return(122816 call(122807 call .(352346 call . this[123764] c"_value") c"dsiLocalSlice")(122813 call chpl__anyStridable r[122785]) r[122785]))
  }
  where {
    (122802 call &&(122793 call chpl__isTupleOfRanges r[122785])(122800 call !(122799 call(122795 call .(352342 call . this[123764] c"_value") c"isDefaultRectangular"))))
  }
  function _domain[123390](?).localSlice[122829](arg _mt[123770]:_MT[227], arg this[123768]:_domain[123390](?), arg d[122826] :
  _domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    (122841 return(122840 call(352353 call . this[123768] c"localSlice")(122838 'expand_tuple'(122837 call(122833 call . d[122826] c"getIndices")))))
  }
  function _domain[123390](?).sorted[122857](arg _mt[123774]:_MT[227], arg this[123772]:_domain[123390](?), arg comparator[122853] :
  unknown t[122848] =
  (122852 call chpl_defaultComparator)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[122873] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122874] "expr temp" "temp"
      (122883 'move' _iterator[122874](122881 call _getIterator(122868 call(122863 call .(352358 call . this[123772] c"_value") c"dsiSorted") comparator[122853])))
      Defer
      {
        {
          (122900 call _freeIterator _iterator[122874])
        }
      }
      { scopeless type
        (122889 'move' _indexOfInterest[122873](122886 call iteratorIndex _iterator[122874]))
      }
      ForLoop
      {
        unknown i[122893] "index var" "insert auto destroy"
        (122895 'move' i[122893] _indexOfInterest[122873])
        {
          (122870 yield i[122893])
        }
        label _continueLabel[122878]
        _indexOfInterest[122873]
        _iterator[122874]
      }
      label _breakLabel[122879]
    }
  }
  function _domain[123390](?).displayRepresentation[122912](arg _mt[123778]:_MT[227], arg this[123776]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (122919 call(122915 call .(352364 call . this[123776] c"_value") c"dsiDisplayRepresentation"))
  }
  function _domain[123390](?).defaultSparseDist[122926](arg _mt[123782]:_MT[227], arg this[123780]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    (122935 return(122934 call _getDistribution(122930 call .(352368 call . this[123780] c"_value") c"dist")))
  }
  function _domain[123390](?).safeCast[122946](arg _mt[123786]:_MT[227], arg this[123784]:_domain[123390](?), arg t[122943] :
  _domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    const tmpD[122959] "const" t[122943]
    if(122993 call _cond_test(122971 call !=(122964 call . tmpD[122959] c"rank")(122968 call . this[123784] c"rank")))
    {
      (122991 call compilerError "rank mismatch in cast")
    }
    if(123028 call _cond_test(123006 call !=(122999 call . tmpD[122959] c"idxType")(123003 call . this[123784] c"idxType")))
    {
      (123026 call compilerError "idxType mismatch in cast")
    }
    if(123213 call _cond_test(123041 call ==(123034 call . tmpD[122959] c"stridable")(123038 call . this[123784] c"stridable")))
    {
      (123044 return this[123784])
    }
    {
      if(123209 call _cond_test(123056 call &&(123050 call !(123047 call . tmpD[122959] c"stridable"))(123053 call . this[123784] c"stridable")))
      {
        const inds[123064] "const"(123063 call(123059 call . this[123784] c"getIndices"))
        unknown unstridableInds[123080](123078 call *(352386 call . this[123784] c"rank")(123077 call range[66183](?)(123071 call . tmpD[122959] c"idxType")(stridable = 0)))
        {
          unknown dim[123152] 0
          unknown tmp[123153] "maybe param" "temp"
          (123165 'move' tmp[123153](123163 call chpl_compute_low_param_loop_bound 1(123085 call . inds[123064] c"size")))
          unknown tmp[123154] "maybe param" "temp"
          (123175 'move' tmp[123154](123173 call chpl_compute_high_param_loop_bound 1(123170 call . inds[123064] c"size")))
          unknown tmp[123155] "maybe param" "temp"
          (123178 'move' tmp[123155] 1)
          ParamForLoop
          { dim[123152] tmp[123153] tmp[123154] tmp[123155]
            {
              if(123121 call _cond_test(123098 call !=(123094 call .(123093 call inds[123064] dim[123152]) c"stride") 1))
              {
                (123119 call halt "non-stridable domain assigned non-unit stride in dimension " dim[123152])
              }
              (123149 call =(123130 call unstridableInds[123080] dim[123152])(123148 call(123135 call .(123134 call inds[123064] dim[123152]) c"safeCast")(123146 call range[66183](?)(123140 call . tmpD[122959] c"idxType")(stridable = 0))))
            }
          }
          label _unused_continueLabel[123157]
          label _breakLabel[123156]
        }
        (123195 call(123190 call . tmpD[122959] c"setIndices") unstridableInds[123080])
        (123198 return tmpD[122959])
      }
      {
        (123202 call = tmpD[122959] this[123784])
        (123207 return tmpD[122959])
      }
    }
  }
  where {
    (122956 call &&(122951 call chpl__isRectangularDomType t[122943])(122955 call isRectangularDom this[123784]))
  }
  function _domain[123390](?).targetLocales[123224](arg _mt[123790]:_MT[227], arg this[123788]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    (123232 return(123231 call(123227 call .(352409 call . this[123788] c"_value") c"dsiTargetLocales")))
  }
  function _domain[123390](?).hasSingleLocalSubdomain[123239](arg _mt[123794]:_MT[227], arg this[123792]:_domain[123390](?)) param : _unknown[43] "method" "primary method"
  {
    (123249 return(123248 call(123244 call .(352413 call . this[123792] c"_value") c"dsiHasSingleLocalSubdomain")))
  }
  function _domain[123390](?).localSubdomain[123262](arg _mt[123798]:_MT[227], arg this[123796]:_domain[123390](?), arg loc[123258] :
  locale[26] =
  (352416 call here[92085])) : _unknown[43] "method" "primary method"
  {
    if(123292 call _cond_test(123270 call !(123269 call(123265 call .(352419 call . this[123796] c"_value") c"dsiHasSingleLocalSubdomain"))))
    {
      (123290 call compilerError "Domain's local domain is not a single domain")
    }
    (123307 return(123306 call(123301 call .(352423 call . this[123796] c"_value") c"dsiLocalSubdomain") loc[123258]))
  }
  function _domain[123390](?).localSubdomains[123319](arg _mt[123802]:_MT[227], arg this[123800]:_domain[123390](?), arg loc[123315] :
  locale[26] =
  (352427 call here[92085])) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(123382 call _cond_test(123326 call(123322 call .(352430 call . this[123800] c"_value") c"dsiHasSingleLocalSubdomain")))
    {
      (123331 yield(123330 call(352434 call . this[123800] c"localSubdomain") loc[123315]))
    }
    {
      {
        unknown _indexOfInterest[123347] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123348] "expr temp" "temp"
        (123357 'move' _iterator[123348](123355 call _getIterator(123343 call(123338 call .(352439 call . this[123800] c"_value") c"dsiLocalSubdomains") loc[123315])))
        Defer
        {
          {
            (123374 call _freeIterator _iterator[123348])
          }
        }
        { scopeless type
          (123363 'move' _indexOfInterest[123347](123360 call iteratorIndex _iterator[123348]))
        }
        ForLoop
        {
          unknown d[123367] "index var" "insert auto destroy"
          (123369 'move' d[123367] _indexOfInterest[123347])
          (123345 yield d[123367])
          label _continueLabel[123352]
          _indexOfInterest[123347]
          _iterator[123348]
        }
        label _breakLabel[123353]
      }
    }
  }
  type _domain[123390](?) unknown _pid[116901] int(64)[13] unknown _instance[116904] "owned" unknown _unowned[116908] bool[10] forwarding ( )
  function _cast[123811](arg t[123808] :
  _domain[123390](?), arg d[123814] :
  _domain[123390](?)) : _unknown[43] "no doc"
  {
    const tmpD[123828] "const" t[123808]
    if(123847 call _cond_test(123840 call !=(123833 call . tmpD[123828] c"rank")(123837 call . d[123814] c"rank")))
    {
      (123845 call compilerError "rank mismatch in cast")
    }
    if(123867 call _cond_test(123860 call !=(123853 call . tmpD[123828] c"idxType")(123857 call . d[123814] c"idxType")))
    {
      (123865 call compilerError "idxType mismatch in cast")
    }
    if(124016 call _cond_test(123880 call ==(123873 call . tmpD[123828] c"stridable")(123877 call . d[123814] c"stridable")))
    {
      (123883 return d[123814])
    }
    {
      if(124012 call _cond_test(123895 call &&(123889 call !(123886 call . tmpD[123828] c"stridable"))(123892 call . d[123814] c"stridable")))
      {
        unknown inds[123903](123902 call(123898 call . d[123814] c"getIndices"))
        unknown unstridableInds[123922](123920 call *(123908 call . d[123814] c"rank")(123919 call range[66183](?)(123913 call . tmpD[123828] c"idxType")(stridable = 0)))
        {
          unknown i[123955] 0
          unknown tmp[123956] "maybe param" "temp"
          (123968 'move' tmp[123956](123966 call chpl_compute_low_param_loop_bound 1(123927 call . tmpD[123828] c"rank")))
          unknown tmp[123957] "maybe param" "temp"
          (123978 'move' tmp[123957](123976 call chpl_compute_high_param_loop_bound 1(123973 call . tmpD[123828] c"rank")))
          unknown tmp[123958] "maybe param" "temp"
          (123981 'move' tmp[123958] 1)
          ParamForLoop
          { i[123955] tmp[123956] tmp[123957] tmp[123958]
            {
              (123951 call =(123935 call unstridableInds[123922] i[123955])(123949 call _cast(123948 call range[66183](?)(123942 call . tmpD[123828] c"idxType")(stridable = 0))(123939 call inds[123903] i[123955])))
            }
          }
          label _unused_continueLabel[123960]
          label _breakLabel[123959]
        }
        (123998 call(123993 call . tmpD[123828] c"setIndices") unstridableInds[123922])
        (124001 return tmpD[123828])
      }
      {
        (124005 call = tmpD[123828] d[123814])
        (124010 return tmpD[123828])
      }
    }
  }
  where {
    (123825 call &&(123820 call chpl__isRectangularDomType t[123808])(123824 call isRectangularDom d[123814]))
  }
  function chpl_countDomHelp[124029](arg dom[124027]:_any[170](?), arg counts[124031]:_any[170](?)) : _unknown[43]
  {
    unknown ranges[124039](124038 call(124034 call . dom[124027] c"dims"))
    {
      unknown i[124067] 0
      unknown tmp[124068] "maybe param" "temp"
      (124080 'move' tmp[124068](124078 call chpl_compute_low_param_loop_bound 1(124045 call . dom[124027] c"rank")))
      unknown tmp[124069] "maybe param" "temp"
      (124090 'move' tmp[124069](124088 call chpl_compute_high_param_loop_bound 1(124085 call . dom[124027] c"rank")))
      unknown tmp[124070] "maybe param" "temp"
      (124093 'move' tmp[124070] 1)
      ParamForLoop
      { i[124067] tmp[124068] tmp[124069] tmp[124070]
        (124064 call =(124053 call ranges[124039] i[124067])(124062 call #(124057 call ranges[124039] i[124067])(124061 call counts[124031] i[124067])))
      }
      label _unused_continueLabel[124072]
      label _breakLabel[124071]
    }
    (124109 return(124108 call dom[124027](124106 'expand_tuple' ranges[124039])))
  }
  function #[124119](arg dom[124116] :
  _domain[123390](?), arg counts[124122] :
  integral[188](?)) : _unknown[43]
  {
    (124145 return(124144 call chpl_countDomHelp dom[124116](124142 call _build_tuple counts[124122])))
  }
  where {
    (124136 call &&(124128 call isRectangularDom dom[124116])(124134 call ==(124130 call . dom[124116] c"rank") 1))
  }
  function #[124157](arg dom[124154] :
  _domain[123390](?), arg counts[124159]:_any[170](?)) : _unknown[43]
  {
    if(124201 call _cond_test(124179 call !=(124172 call . counts[124159] c"size")(124176 call . dom[124154] c"rank")))
    {
      (124199 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    (124212 return(124211 call chpl_countDomHelp dom[124154] counts[124159]))
  }
  where {
    (124169 call &&(124164 call isRectangularDom dom[124154])(124168 call isTuple counts[124159]))
  }
  function #[124225](arg arr[124222] :
  (124219 call chpl__buildArrayRuntimeType nil[38]), arg counts[124228] :
  integral[188](?)) : _unknown[43] "fn returns aliasing array"
  {
    (124254 return(124253 call arr[124222](124250 call #(124246 call . arr[124222] c"_dom") counts[124228])))
  }
  where {
    (124242 call &&(124234 call isRectangularArr arr[124222])(124240 call ==(124236 call . arr[124222] c"rank") 1))
  }
  function #[124268](arg arr[124265] :
  (124262 call chpl__buildArrayRuntimeType nil[38]), arg counts[124270]:_any[170](?)) : _unknown[43] "fn returns aliasing array"
  {
    if(124312 call _cond_test(124290 call !=(124283 call . counts[124270] c"size")(124287 call . arr[124265] c"rank")))
    {
      (124310 call compilerError "the domain and array arguments of # must have the same rank")
    }
    (124328 return(124327 call arr[124265](124324 call #(124320 call . arr[124265] c"_dom") counts[124270])))
  }
  where {
    (124280 call &&(124275 call isRectangularArr arr[124265])(124279 call isTuple counts[124270]))
  }
  function +[124339](arg d[124336] :
  _domain[123390](?), arg i[124345] :
  (124343 call chpl__buildIndexType d[124336])) : _unknown[43] "no return value for void"
  {
    if(124392 call _cond_test(124351 call isRectangularDom d[124336]))
    {
      (124370 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124390 call compilerError "Cannot add indices to this domain type")
    }
  }
  function +[124405](arg i[124403]:_any[170](?), arg d[124408] :
  _domain[123390](?)) : _unknown[43] "no return value for void"
  {
    if(124434 call _cond_test(124423 call isRectangularDom d[124408]))
    {
      (124427 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124432 call compilerError "Cannot add indices to this domain type")
    }
  }
  where {
    (328553 'is_subtype'(124417 call chpl__buildIndexType d[124408])(124413 'typeof' i[124403]))
  }
  function +[124450](arg d[124447] :
  _domain[123390](?), arg i[124456] :
  (124454 call chpl__buildIndexType d[124447])) : _unknown[43]
  {
    (124469 call(124464 call . d[124447] c"add") i[124456])
    (124473 return d[124447])
  }
  where {
    (124462 call isIrregularDom d[124447])
  }
  function +[124482](arg i[124480]:_any[170](?), arg d[124485] :
  _domain[123390](?)) : _unknown[43]
  {
    (124509 call(124504 call . d[124485] c"add") i[124480])
    (124513 return d[124485])
  }
  where {
    (124501 call &&(328554 'is_subtype'(124494 call chpl__buildIndexType d[124485])(124490 'typeof' i[124480]))(124500 call isIrregularDom d[124485]))
  }
  function +[124524](arg d1[124521] :
  _domain[123390](?), arg d2[124527] :
  _domain[123390](?)) : _unknown[43]
  {
    unknown d3[124550](124549 'typeof' d1[124521])
    {
      unknown _indexOfInterest[124564] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124565] "expr temp" "temp"
      (124574 'move' _iterator[124565](124572 call _getIterator d1[124521]))
      Defer
      {
        {
          (124590 call _freeIterator _iterator[124565])
        }
      }
      { scopeless type
        (124579 'move' _indexOfInterest[124564](124576 call iteratorIndex _iterator[124565]))
      }
      ForLoop
      {
        unknown e[124583] "index var" "insert auto destroy"
        (124585 'move' e[124583] _indexOfInterest[124564])
        (124562 call(124557 call . d3[124550] c"add") e[124583])
        label _continueLabel[124569]
        _indexOfInterest[124564]
        _iterator[124565]
      }
      label _breakLabel[124570]
    }
    {
      unknown _indexOfInterest[124607] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124608] "expr temp" "temp"
      (124617 'move' _iterator[124608](124615 call _getIterator d2[124527]))
      Defer
      {
        {
          (124633 call _freeIterator _iterator[124608])
        }
      }
      { scopeless type
        (124622 'move' _indexOfInterest[124607](124619 call iteratorIndex _iterator[124608]))
      }
      ForLoop
      {
        unknown e[124626] "index var" "insert auto destroy"
        (124628 'move' e[124626] _indexOfInterest[124607])
        (124605 call(124600 call . d3[124550] c"add") e[124626])
        label _continueLabel[124612]
        _indexOfInterest[124607]
        _iterator[124608]
      }
      label _breakLabel[124613]
    }
    (124641 return d3[124550])
  }
  where {
    (124546 call &&(124534 call ==(124531 'typeof' d1[124521])(124533 'typeof' d2[124527]))(124544 call &&(124539 call isIrregularDom d1[124521])(124543 call isIrregularDom d2[124527])))
  }
  function +[124652](arg d1[124649] :
  _domain[123390](?), arg d2[124655] :
  _domain[123390](?)) : _unknown[43] "no return value for void"
  {
    if(124678 call _cond_test(124666 call ||(124661 call isRectangularDom d1[124649])(124665 call isRectangularDom d2[124655])))
    {
      (124671 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124676 call compilerError "Cannot add indices to this domain type")
    }
  }
  function -[124693](arg d[124690] :
  _domain[123390](?), arg i[124699] :
  (124697 call chpl__buildIndexType d[124690])) : _unknown[43] "no return value for void"
  {
    if(124746 call _cond_test(124705 call isRectangularDom d[124690]))
    {
      (124724 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (124744 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function -[124761](arg d[124758] :
  _domain[123390](?), arg i[124767] :
  (124765 call chpl__buildIndexType d[124758])) : _unknown[43]
  {
    (124780 call(124775 call . d[124758] c"remove") i[124767])
    (124784 return d[124758])
  }
  where {
    (124773 call isIrregularDom d[124758])
  }
  function -[124795](arg d1[124792] :
  _domain[123390](?), arg d2[124798] :
  _domain[123390](?)) : _unknown[43]
  {
    unknown d3[124821](124820 'typeof' d1[124792])
    {
      unknown _indexOfInterest[124835] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124836] "expr temp" "temp"
      (124845 'move' _iterator[124836](124843 call _getIterator d1[124792]))
      Defer
      {
        {
          (124861 call _freeIterator _iterator[124836])
        }
      }
      { scopeless type
        (124850 'move' _indexOfInterest[124835](124847 call iteratorIndex _iterator[124836]))
      }
      ForLoop
      {
        unknown e[124854] "index var" "insert auto destroy"
        (124856 'move' e[124854] _indexOfInterest[124835])
        (124833 call(124828 call . d3[124821] c"add") e[124854])
        label _continueLabel[124840]
        _indexOfInterest[124835]
        _iterator[124836]
      }
      label _breakLabel[124841]
    }
    {
      unknown _indexOfInterest[124878] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124879] "expr temp" "temp"
      (124888 'move' _iterator[124879](124886 call _getIterator d2[124798]))
      Defer
      {
        {
          (124904 call _freeIterator _iterator[124879])
        }
      }
      { scopeless type
        (124893 'move' _indexOfInterest[124878](124890 call iteratorIndex _iterator[124879]))
      }
      ForLoop
      {
        unknown e[124897] "index var" "insert auto destroy"
        (124899 'move' e[124897] _indexOfInterest[124878])
        (124876 call(124871 call . d3[124821] c"remove") e[124897])
        label _continueLabel[124883]
        _indexOfInterest[124878]
        _iterator[124879]
      }
      label _breakLabel[124884]
    }
    (124912 return d3[124821])
  }
  where {
    (124817 call &&(124805 call ==(124802 'typeof' d1[124792])(124804 'typeof' d2[124798]))(124815 call ||(124810 call isSparseDom d1[124792])(124814 call isOpaqueDom d1[124792])))
  }
  function -[124923](arg d1[124920] :
  _domain[123390](?), arg d2[124926] :
  _domain[123390](?)) : _unknown[43] "no return value for void"
  {
    if(124949 call _cond_test(124937 call ||(124932 call isRectangularDom d1[124920])(124936 call isRectangularDom d2[124926])))
    {
      (124942 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (124947 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function ==[124964](arg d1[124961] :
  _domain[123390](?), arg d2[124967] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    if(125096 call _cond_test(124994 call !=(124984 call .(124981 call . d1[124961] c"_value") c"rank")(124991 call .(124988 call . d2[124967] c"_value") c"rank")))
    {
      (124997 return 0)
    }
    {
      if(125092 call _cond_test(125008 call ==(125001 call . d1[124961] c"_value")(125005 call . d2[124967] c"_value")))
      {
        (125011 return 1)
      }
      {
        {
          unknown i[125048] 0
          unknown tmp[125049] "maybe param" "temp"
          (125061 'move' tmp[125049](125059 call chpl_compute_low_param_loop_bound 1(125019 call .(125016 call . d1[124961] c"_value") c"rank")))
          unknown tmp[125050] "maybe param" "temp"
          (125074 'move' tmp[125050](125072 call chpl_compute_high_param_loop_bound 1(125066 call .(125068 call . d1[124961] c"_value") c"rank")))
          unknown tmp[125051] "maybe param" "temp"
          (125077 'move' tmp[125051] 1)
          ParamForLoop
          { i[125048] tmp[125049] tmp[125050] tmp[125051]
            if(125043 call _cond_test(125038 call !=(125030 call(125025 call . d1[124961] c"dim") i[125048])(125037 call(125032 call . d2[124967] c"dim") i[125048])))
            {
              (125041 return 0)
            }
          }
          label _unused_continueLabel[125053]
          label _breakLabel[125052]
        }
        (125090 return 1)
      }
    }
  }
  where {
    (124978 call &&(124973 call isRectangularDom d1[124961])(124977 call isRectangularDom d2[124967]))
  }
  function !=[125111](arg d1[125108] :
  _domain[123390](?), arg d2[125114] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    if(125243 call _cond_test(125141 call !=(125131 call .(125128 call . d1[125108] c"_value") c"rank")(125138 call .(125135 call . d2[125114] c"_value") c"rank")))
    {
      (125144 return 1)
    }
    {
      if(125239 call _cond_test(125155 call ==(125148 call . d1[125108] c"_value")(125152 call . d2[125114] c"_value")))
      {
        (125158 return 0)
      }
      {
        {
          unknown i[125195] 0
          unknown tmp[125196] "maybe param" "temp"
          (125208 'move' tmp[125196](125206 call chpl_compute_low_param_loop_bound 1(125166 call .(125163 call . d1[125108] c"_value") c"rank")))
          unknown tmp[125197] "maybe param" "temp"
          (125221 'move' tmp[125197](125219 call chpl_compute_high_param_loop_bound 1(125213 call .(125215 call . d1[125108] c"_value") c"rank")))
          unknown tmp[125198] "maybe param" "temp"
          (125224 'move' tmp[125198] 1)
          ParamForLoop
          { i[125195] tmp[125196] tmp[125197] tmp[125198]
            if(125190 call _cond_test(125185 call !=(125177 call(125172 call . d1[125108] c"dim") i[125195])(125184 call(125179 call . d2[125114] c"dim") i[125195])))
            {
              (125188 return 1)
            }
          }
          label _unused_continueLabel[125200]
          label _breakLabel[125199]
        }
        (125237 return 0)
      }
    }
  }
  where {
    (125125 call &&(125120 call isRectangularDom d1[125108])(125124 call isRectangularDom d2[125114]))
  }
  function ==[125258](arg d1[125255] :
  _domain[123390](?), arg d2[125261] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    if(125287 call _cond_test(125282 call ==(125275 call . d1[125255] c"_value")(125279 call . d2[125261] c"_value")))
    {
      (125285 return 1)
    }
    if(125306 call _cond_test(125301 call !=(125294 call . d1[125255] c"numIndices")(125298 call . d2[125261] c"numIndices")))
    {
      (125304 return 0)
    }
    {
      unknown _indexOfInterest[125330] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125331] "expr temp" "temp"
      (125340 'move' _iterator[125331](125338 call _getIterator d1[125255]))
      Defer
      {
        {
          (125356 call _freeIterator _iterator[125331])
        }
      }
      { scopeless type
        (125345 'move' _indexOfInterest[125330](125342 call iteratorIndex _iterator[125331]))
      }
      ForLoop
      {
        unknown idx[125349] "index var" "insert auto destroy"
        (125351 'move' idx[125349] _indexOfInterest[125330])
        if(125325 call _cond_test(125320 call !(125319 call(125314 call . d2[125261] c"contains") idx[125349])))
        {
          (125323 return 0)
        }
        label _continueLabel[125335]
        _indexOfInterest[125330]
        _iterator[125331]
      }
      label _breakLabel[125336]
    }
    (125364 return 1)
  }
  where {
    (125272 call &&(125267 call isAssociativeDom d1[125255])(125271 call isAssociativeDom d2[125261]))
  }
  function !=[125375](arg d1[125372] :
  _domain[123390](?), arg d2[125378] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    if(125404 call _cond_test(125399 call ==(125392 call . d1[125372] c"_value")(125396 call . d2[125378] c"_value")))
    {
      (125402 return 0)
    }
    if(125423 call _cond_test(125418 call !=(125411 call . d1[125372] c"numIndices")(125415 call . d2[125378] c"numIndices")))
    {
      (125421 return 1)
    }
    {
      unknown _indexOfInterest[125447] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125448] "expr temp" "temp"
      (125457 'move' _iterator[125448](125455 call _getIterator d1[125372]))
      Defer
      {
        {
          (125473 call _freeIterator _iterator[125448])
        }
      }
      { scopeless type
        (125462 'move' _indexOfInterest[125447](125459 call iteratorIndex _iterator[125448]))
      }
      ForLoop
      {
        unknown idx[125466] "index var" "insert auto destroy"
        (125468 'move' idx[125466] _indexOfInterest[125447])
        if(125442 call _cond_test(125437 call !(125436 call(125431 call . d2[125378] c"contains") idx[125466])))
        {
          (125440 return 1)
        }
        label _continueLabel[125452]
        _indexOfInterest[125447]
        _iterator[125448]
      }
      label _breakLabel[125453]
    }
    (125481 return 0)
  }
  where {
    (125389 call &&(125384 call isAssociativeDom d1[125372])(125388 call isAssociativeDom d2[125378]))
  }
  function ==[125492](arg d1[125489] :
  _domain[123390](?), arg d2[125495] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    if(125521 call _cond_test(125516 call ==(125509 call . d1[125489] c"_value")(125513 call . d2[125495] c"_value")))
    {
      (125519 return 1)
    }
    if(125540 call _cond_test(125535 call !=(125528 call . d1[125489] c"numIndices")(125532 call . d2[125495] c"numIndices")))
    {
      (125538 return 0)
    }
    if(125564 call _cond_test(125559 call !=(125549 call .(125546 call . d1[125489] c"_value") c"parentDom")(125556 call .(125553 call . d2[125495] c"_value") c"parentDom")))
    {
      (125562 return 0)
    }
    {
      unknown _indexOfInterest[125588] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125589] "expr temp" "temp"
      (125598 'move' _iterator[125589](125596 call _getIterator d1[125489]))
      Defer
      {
        {
          (125614 call _freeIterator _iterator[125589])
        }
      }
      { scopeless type
        (125603 'move' _indexOfInterest[125588](125600 call iteratorIndex _iterator[125589]))
      }
      ForLoop
      {
        unknown idx[125607] "index var" "insert auto destroy"
        (125609 'move' idx[125607] _indexOfInterest[125588])
        if(125583 call _cond_test(125578 call !(125577 call(125572 call . d2[125495] c"contains") idx[125607])))
        {
          (125581 return 0)
        }
        label _continueLabel[125593]
        _indexOfInterest[125588]
        _iterator[125589]
      }
      label _breakLabel[125594]
    }
    (125622 return 1)
  }
  where {
    (125506 call &&(125501 call isSparseDom d1[125489])(125505 call isSparseDom d2[125495]))
  }
  function !=[125633](arg d1[125630] :
  _domain[123390](?), arg d2[125636] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    if(125662 call _cond_test(125657 call ==(125650 call . d1[125630] c"_value")(125654 call . d2[125636] c"_value")))
    {
      (125660 return 0)
    }
    if(125681 call _cond_test(125676 call !=(125669 call . d1[125630] c"numIndices")(125673 call . d2[125636] c"numIndices")))
    {
      (125679 return 1)
    }
    if(125705 call _cond_test(125700 call !=(125690 call .(125687 call . d1[125630] c"_value") c"parentDom")(125697 call .(125694 call . d2[125636] c"_value") c"parentDom")))
    {
      (125703 return 1)
    }
    {
      unknown _indexOfInterest[125729] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125730] "expr temp" "temp"
      (125739 'move' _iterator[125730](125737 call _getIterator d1[125630]))
      Defer
      {
        {
          (125755 call _freeIterator _iterator[125730])
        }
      }
      { scopeless type
        (125744 'move' _indexOfInterest[125729](125741 call iteratorIndex _iterator[125730]))
      }
      ForLoop
      {
        unknown idx[125748] "index var" "insert auto destroy"
        (125750 'move' idx[125748] _indexOfInterest[125729])
        if(125724 call _cond_test(125719 call !(125718 call(125713 call . d2[125636] c"contains") idx[125748])))
        {
          (125722 return 1)
        }
        label _continueLabel[125734]
        _indexOfInterest[125729]
        _iterator[125730]
      }
      label _breakLabel[125735]
    }
    (125763 return 0)
  }
  where {
    (125647 call &&(125642 call isSparseDom d1[125630])(125646 call isSparseDom d2[125636]))
  }
  function ==[125774](arg d1[125771] :
  _domain[123390](?), arg d2[125777] :
  _domain[123390](?)) param : _unknown[43] "inline"
  {
    (125781 return 0)
  }
  function !=[125792](arg d1[125789] :
  _domain[123390](?), arg d2[125795] :
  _domain[123390](?)) param : _unknown[43] "inline"
  {
    (125799 return 1)
  }
  function shouldReturnRvalueByConstRef[125808](arg t[125806]:_any[170](?)) param : _unknown[43] "no doc"
  {
    (125811 return 1)
  }
  function shouldReturnRvalueByValue[125820](arg t[125818]:_any[170](?)) param : _unknown[43] "no doc"
  {
    if(125828 call _cond_test(125823 call ! PODValAccess[111841]))
    {
      (125826 return 0)
    }
    if(125841 call _cond_test(125837 call isPODType t[125818]))
    {
      (125839 return 1)
    }
    (125847 return 0)
  }
  function _array[133150](?).chpl__serialize[125865](arg _mt[133154]:_MT[227], arg this[133152]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    (125881 return(125880 call(125876 call .(352667 call . this[133152] c"_instance") c"chpl__serialize")))
  }
  where {
    (125874 call(125870 call .(352662 call . this[133152] c"_instance") c"chpl__rvfMe"))
  }
  function _array[133150](?).chpl__deserialize[125891](arg _mt[133158]:_MT[227], arg this[133156]:_array[133150](?), arg data[125889]:_any[170](?)) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    unknown arrinst[125907](125906 call(125901 call .(125900 call _to_borrowed(125898 'static field type' this[133156] "_instance")) c"chpl__deserialize") data[125889])
    (125919 return(125918 'new'(125917 call _array[133150](?) nullPid[111825] arrinst[125907](_unowned = 1))))
  }
  function _array[133150](?).chpl__promotionType[125925](arg _mt[133162]:_MT[227], arg this[133160]:_array[133150](?)) type : _unknown[43] "method" "primary method"
  {
    (125931 return(125928 call .(352676 call . this[133160] c"_value") c"eltType"))
  }
  function _array[133150](?)._value[125938](arg _mt[133166]:_MT[227], arg this[133164]:_array[133150](?)) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    if(125957 call _cond_test(125943 call _isPrivatized(352681 call . this[133164] c"_instance")))
    {
      (125950 return(125949 call chpl_getPrivatizedCopy(125946 'typeof'(352686 call . this[133164] c"_instance"))(352691 call . this[133164] c"_pid")))
    }
    {
      (125954 return(352696 call . this[133164] c"_instance"))
    }
  }
  function _array[133150](?).chpl_forwarding_expr5__value[125971](arg _mt[133170]:_MT[227], arg this[133168]:_array[133150](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (125973 return(352700 call . this[133168] c"_value"))
  }
  function _array[133150](?).deinit[125979](arg _mt[133174]:_MT[227], arg this[133172]:_array[133150](?)) : _unknown[43] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (125985 call _do_destroy_arr(352705 call . this[133172] c"_unowned")(352710 call . this[133172] c"_instance"))
  }
  function _array[133150](?).eltType[125992](arg _mt[133178]:_MT[227], arg this[133176]:_array[133150](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (125998 return(125995 call .(352714 call . this[133176] c"_value") c"eltType"))
  }
  function _array[133150](?).idxType[126005](arg _mt[133182]:_MT[227], arg this[133180]:_array[133150](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (126011 return(126008 call .(352718 call . this[133180] c"_value") c"idxType"))
  }
  function _array[133150](?)._dom[126018](arg _mt[133186]:_MT[227], arg this[133184]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens" "return not owned"
  {
    (126027 return(126026 call _getDomain(126022 call .(352722 call . this[133184] c"_value") c"dom")))
  }
  function _array[133150](?).rank[126034](arg _mt[133190]:_MT[227], arg this[133188]:_array[133150](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    (126043 return(126040 call .(126037 call . this[133188] c"_dom") c"rank"))
  }
  function _array[133150](?).this[126063](arg _mt[133194]:_MT[227], ref arg this[133192]:_array[133150](?), arg i[126060] :
  (126058 call *(352727 call . this[133192] c"rank")(126055 call .(126052 call .(352731 call . this[133192] c"_value") c"dom") c"idxType"))) ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    if(126096 call _cond_test(126073 call ||(126068 call isRectangularArr this[133192])(126072 call isSparseArr this[133192])))
    {
      (126082 return(126081 call(126076 call .(352737 call . this[133192] c"_value") c"dsiAccess") i[126060]))
    }
    {
      (126094 return(126093 call(126085 call .(352742 call . this[133192] c"_value") c"dsiAccess")(126091 call i[126060] 1)))
    }
  }
  function _array[133150](?).this[126120](arg _mt[133198]:_MT[227], const arg this[133196]:_array[133150](?), arg i[126117] :
  (126115 call *(352747 call . this[133196] c"rank")(126112 call .(126109 call .(352751 call . this[133196] c"_value") c"dom") c"idxType"))) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    if(126160 call _cond_test(126137 call ||(126132 call isRectangularArr this[133196])(126136 call isSparseArr this[133196])))
    {
      (126146 return(126145 call(126140 call .(352761 call . this[133196] c"_value") c"dsiAccess") i[126117]))
    }
    {
      (126158 return(126157 call(126149 call .(352766 call . this[133196] c"_value") c"dsiAccess")(126155 call i[126117] 1)))
    }
  }
  where {
    (126128 call shouldReturnRvalueByValue(126124 call .(352755 call . this[133196] c"_value") c"eltType"))
  }
  function _array[133150](?).this[126185](arg _mt[133202]:_MT[227], const arg this[133200]:_array[133150](?), arg i[126182] :
  (126180 call *(352771 call . this[133200] c"rank")(126177 call .(126174 call .(352775 call . this[133200] c"_value") c"dom") c"idxType"))) const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    if(126225 call _cond_test(126202 call ||(126197 call isRectangularArr this[133200])(126201 call isSparseArr this[133200])))
    {
      (126211 return(126210 call(126205 call .(352785 call . this[133200] c"_value") c"dsiAccess") i[126182]))
    }
    {
      (126223 return(126222 call(126214 call .(352790 call . this[133200] c"_value") c"dsiAccess")(126220 call i[126182] 1)))
    }
  }
  where {
    (126193 call shouldReturnRvalueByConstRef(126189 call .(352779 call . this[133200] c"_value") c"eltType"))
  }
  function _array[133150](?).this[126249](arg _mt[133206]:_MT[227], ref arg this[133204]:_array[133150](?), arg i[126245] ... :
  (126241 call .(126238 call .(352795 call . this[133204] c"_value") c"dom") c"idxType")) ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    (126255 return(126254 call this[133204] i[126245]))
  }
  function _array[133150](?).this[126274](arg _mt[133210]:_MT[227], const arg this[133208]:_array[133150](?), arg i[126270] ... :
  (126266 call .(126263 call .(352805 call . this[133208] c"_value") c"dom") c"idxType")) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (126287 return(126286 call this[133208] i[126270]))
  }
  where {
    (126282 call shouldReturnRvalueByValue(126278 call .(352813 call . this[133208] c"_value") c"eltType"))
  }
  function _array[133150](?).this[126307](arg _mt[133214]:_MT[227], const arg this[133212]:_array[133150](?), arg i[126303] ... :
  (126299 call .(126296 call .(352819 call . this[133212] c"_value") c"dom") c"idxType")) const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (126320 return(126319 call this[133212] i[126303]))
  }
  where {
    (126315 call shouldReturnRvalueByConstRef(126311 call .(352827 call . this[133212] c"_value") c"eltType"))
  }
  function _array[133150](?).localAccess[126341](arg _mt[133218]:_MT[227], ref arg this[133216]:_array[133150](?), arg i[126338] :
  (126336 call *(352833 call . this[133216] c"rank")(126333 call .(126330 call .(352837 call . this[133216] c"_value") c"dom") c"idxType"))) ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    if(126376 call _cond_test(126351 call ||(126346 call isRectangularArr this[133216])(126350 call isSparseArr this[133216])))
    {
      (126362 return(126361 call(126356 call .(352843 call . this[133216] c"_value") c"dsiLocalAccess") i[126338]))
    }
    {
      (126374 return(126373 call(126365 call .(352848 call . this[133216] c"_value") c"dsiLocalAccess")(126371 call i[126338] 1)))
    }
  }
  function _array[133150](?).localAccess[126400](arg _mt[133222]:_MT[227], const arg this[133220]:_array[133150](?), arg i[126397] :
  (126395 call *(352853 call . this[133220] c"rank")(126392 call .(126389 call .(352857 call . this[133220] c"_value") c"dom") c"idxType"))) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    if(126440 call _cond_test(126417 call ||(126412 call isRectangularArr this[133220])(126416 call isSparseArr this[133220])))
    {
      (126426 return(126425 call(126420 call .(352867 call . this[133220] c"_value") c"dsiLocalAccess") i[126397]))
    }
    {
      (126438 return(126437 call(126429 call .(352872 call . this[133220] c"_value") c"dsiLocalAccess")(126435 call i[126397] 1)))
    }
  }
  where {
    (126408 call shouldReturnRvalueByValue(126404 call .(352861 call . this[133220] c"_value") c"eltType"))
  }
  function _array[133150](?).localAccess[126465](arg _mt[133226]:_MT[227], const arg this[133224]:_array[133150](?), arg i[126462] :
  (126460 call *(352877 call . this[133224] c"rank")(126457 call .(126454 call .(352881 call . this[133224] c"_value") c"dom") c"idxType"))) const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    if(126505 call _cond_test(126482 call ||(126477 call isRectangularArr this[133224])(126481 call isSparseArr this[133224])))
    {
      (126491 return(126490 call(126485 call .(352891 call . this[133224] c"_value") c"dsiLocalAccess") i[126462]))
    }
    {
      (126503 return(126502 call(126494 call .(352896 call . this[133224] c"_value") c"dsiLocalAccess")(126500 call i[126462] 1)))
    }
  }
  where {
    (126473 call shouldReturnRvalueByConstRef(126469 call .(352885 call . this[133224] c"_value") c"eltType"))
  }
  function _array[133150](?).localAccess[126529](arg _mt[133230]:_MT[227], arg this[133228]:_array[133150](?), arg i[126525] ... :
  (126521 call .(126518 call .(352901 call . this[133228] c"_value") c"dom") c"idxType")) ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    (126535 return(126534 call(352911 call . this[133228] c"localAccess") i[126525]))
  }
  function _array[133150](?).localAccess[126554](arg _mt[133234]:_MT[227], arg this[133232]:_array[133150](?), arg i[126550] ... :
  (126546 call .(126543 call .(352916 call . this[133232] c"_value") c"dom") c"idxType")) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (126567 return(126566 call(352928 call . this[133232] c"localAccess") i[126550]))
  }
  where {
    (126562 call shouldReturnRvalueByValue(126558 call .(352924 call . this[133232] c"_value") c"eltType"))
  }
  function _array[133150](?).localAccess[126587](arg _mt[133238]:_MT[227], arg this[133236]:_array[133150](?), arg i[126583] ... :
  (126579 call .(126576 call .(352933 call . this[133236] c"_value") c"dom") c"idxType")) const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (126600 return(126599 call(352945 call . this[133236] c"localAccess") i[126583]))
  }
  where {
    (126595 call shouldReturnRvalueByConstRef(126591 call .(352941 call . this[133236] c"_value") c"eltType"))
  }
  function _array[133150](?).this[126612](arg _mt[133242]:_MT[227], arg this[133240]:_array[133150](?), arg d[126609] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(126641 call _cond_test(126619 call !=(126615 call . d[126609] c"rank")(352952 call . this[133240] c"rank")))
    {
      (126639 call compilerError "slicing an array with a domain of a different rank")
    }
    if(126653 call _cond_test 1)
    {
      (126651 call(352959 call . this[133240] c"checkSlice") d[126609])
    }
    const tmp[126702] "const" "no auto destroy" "no copy" "temp"(126699 IfExpr (126668 call(126664 call .(352964 call . this[133240] c"_value") c"isSliceArrayView")) then
    { scopeless
      (126686 call _build_tuple(126673 call .(126670 call . this[133240] c"_value") c"arr")(126682 call .(126677 call . this[133240] c"_value") c"_ArrPid"))
    } else
    { scopeless
      (126697 call _build_tuple(126689 call . this[133240] c"_value")(126693 call . this[133240] c"_pid"))
    } )
    (126709 call _check_tuple_var_decl tmp[126702] 2)
    const arr[126658] "const"(126703 call tmp[126702] 1)
    const arrpid[126660] "const"(126706 call tmp[126702] 2)
    unknown a[126738](126737 'new'(126736 'to unmanaged class from unknown'(126735 call anymanaged ArrayViewSliceArr[352972](?)(eltType =(126716 call . this[133240] c"eltType"))(_DomPid =(126722 call . d[126609] c"_pid"))(dom =(126727 call . d[126609] c"_instance"))(_ArrPid = arrpid[126660])(_ArrInstance = arr[126658]))))
    (126754 call(126745 call .(126742 call . d[126609] c"_value") c"add_arr") a[126738](locking = 1)(addToList = 0))
    (126760 return(126759 call _newArray a[126738]))
  }
  function _array[133150](?).checkSlice[126770](arg _mt[133246]:_MT[227], arg this[133244]:_array[133150](?), arg d[126767] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[126857] 0
      unknown tmp[126858] "maybe param" "temp"
      (126870 'move' tmp[126858](126868 call chpl_compute_low_param_loop_bound 1(126777 call .(126774 call .(352985 call . this[133244] c"_value") c"dom") c"rank")))
      unknown tmp[126859] "maybe param" "temp"
      (126883 'move' tmp[126859](126881 call chpl_compute_high_param_loop_bound 1(126875 call .(126877 call .(352999 call . this[133244] c"_value") c"dom") c"rank")))
      unknown tmp[126860] "maybe param" "temp"
      (126886 'move' tmp[126860] 1)
      ParamForLoop
      { i[126857] tmp[126858] tmp[126859] tmp[126860]
        if(126852 call _cond_test(126806 call !(126805 call(126794 call .(126791 call(126786 call .(126783 call .(352989 call . this[133244] c"_value") c"dom") c"dsiDim") i[126857]) c"boundsCheck")(126803 call(126798 call . d[126767] c"dsiDim") i[126857]))))
        {
          (126850 call halt "array slice out of bounds in dimension " i[126857] ": "(126849 call(126844 call . d[126767] c"dsiDim") i[126857]))
        }
      }
      label _unused_continueLabel[126862]
      label _breakLabel[126861]
    }
  }
  function _array[133150](?).checkSlice[126906](arg _mt[133250]:_MT[227], arg this[133248]:_array[133150](?), arg ranges[126903]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[126959] 0
      unknown tmp[126960] "maybe param" "temp"
      (126972 'move' tmp[126960](126970 call chpl_compute_low_param_loop_bound 1(126917 call .(126914 call .(353008 call . this[133248] c"_value") c"dom") c"rank")))
      unknown tmp[126961] "maybe param" "temp"
      (126985 'move' tmp[126961](126983 call chpl_compute_high_param_loop_bound 1(126977 call .(126979 call .(353022 call . this[133248] c"_value") c"dom") c"rank")))
      unknown tmp[126962] "maybe param" "temp"
      (126988 'move' tmp[126962] 1)
      ParamForLoop
      { i[126959] tmp[126960] tmp[126961] tmp[126962]
        if(126954 call _cond_test(126941 call !(126940 call(126932 call .(126931 call(126926 call .(126923 call .(353012 call . this[133248] c"_value") c"dom") c"dsiDim") i[126959]) c"boundsCheck")(126938 call ranges[126903] i[126959]))))
        {
          (126952 call halt "array slice out of bounds in dimension " i[126959] ": "(126951 call ranges[126903] i[126959]))
        }
      }
      label _unused_continueLabel[126964]
      label _breakLabel[126963]
    }
  }
  where {
    (126911 call chpl__isTupleOfRanges ranges[126903])
  }
  function _array[133150](?).this[127009](arg _mt[133254]:_MT[227], arg this[133252]:_array[133150](?), arg ranges[127006]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127022 call _cond_test 1)
    {
      (127020 call(353032 call . this[133252] c"checkSlice")(127018 'expand_tuple' ranges[127006]))
    }
    unknown d[127033] "no auto destroy"(127032 call(353037 call . this[133252] c"_dom")(127030 'expand_tuple' ranges[127006]))
    (127046 call =(127042 call .(127037 call . d[127033] c"_value") c"_free_when_no_arrs") 1)
    const tmp[127091] "const" "no auto destroy" "no copy" "temp"(127088 IfExpr (127059 call(127055 call .(353043 call . this[133252] c"_value") c"isSliceArrayView")) then
    { scopeless
      (127075 call _build_tuple(127064 call .(127061 call . this[133252] c"_value") c"arr")(127071 call .(127068 call . this[133252] c"_value") c"_ArrPid"))
    } else
    { scopeless
      (127086 call _build_tuple(127078 call . this[133252] c"_value")(127082 call . this[133252] c"_pid"))
    } )
    (127098 call _check_tuple_var_decl tmp[127091] 2)
    const arr[127049] "const"(127092 call tmp[127091] 1)
    const arrpid[127051] "const"(127095 call tmp[127091] 2)
    unknown a[127127](127126 'new'(127125 'to unmanaged class from unknown'(127124 call anymanaged ArrayViewSliceArr[352972](?)(eltType =(127105 call . this[133252] c"eltType"))(_DomPid =(127111 call . d[127033] c"_pid"))(dom =(127116 call . d[127033] c"_instance"))(_ArrPid = arrpid[127051])(_ArrInstance = arr[127049]))))
    (127143 call(127134 call .(127131 call . d[127033] c"_value") c"add_arr") a[127127](locking = 0)(addToList = 0))
    (127149 return(127148 call _newArray a[127127]))
  }
  where {
    (127014 call chpl__isTupleOfRanges ranges[127006])
  }
  function _array[133150](?).this[127160](arg _mt[133258]:_MT[227], arg this[133256]:_array[133150](?), arg args[127157]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127179 call _cond_test 1)
    {
      (127177 call(353072 call . this[133256] c"checkRankChange") args[127157])
    }
    const rcdom[127193] "const"(127192 call(127186 call . this[133256] c"_dom")(127190 'expand_tuple' args[127157]))
    const tmp[127212] "const" "no copy" "temp"(127210 call _build_tuple(127202 call . this[133256] c"_value")(127206 call . this[133256] c"_pid"))
    (127219 call _check_tuple_var_decl tmp[127212] 2)
    const arr[127196] "const"(127213 call tmp[127212] 1)
    const arrpid[127198] "const"(127216 call tmp[127212] 2)
    unknown a[127264](127263 'new'(127262 'to unmanaged class from unknown'(127261 call anymanaged ArrayViewRankChangeArr[353081](?)(eltType =(127226 call . this[133256] c"eltType"))(_DomPid =(127232 call . rcdom[127193] c"_pid"))(dom =(127237 call . rcdom[127193] c"_instance"))(_ArrPid = arrpid[127198])(_ArrInstance = arr[127196])(collapsedDim =(127249 call .(127246 call . rcdom[127193] c"_value") c"collapsedDim"))(idx =(127257 call .(127254 call . rcdom[127193] c"_value") c"idx")))))
    (127278 call(127271 call .(127268 call . rcdom[127193] c"_value") c"add_arr") a[127264](locking = 0))
    (127284 return(127283 call _newArray a[127264]))
  }
  where {
    (127172 call _validRankChangeArgs args[127157](127169 call .(127166 call .(353065 call . this[133256] c"_value") c"dom") c"idxType"))
  }
  function _array[133150](?).checkRankChange[127293](arg _mt[133262]:_MT[227], arg this[133260]:_array[133150](?), arg args[127291]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[127339] 0
      unknown tmp[127340] "maybe param" "temp"
      (127352 'move' tmp[127340](127350 call chpl_compute_low_param_loop_bound 1(127297 call . args[127291] c"size")))
      unknown tmp[127341] "maybe param" "temp"
      (127362 'move' tmp[127341](127360 call chpl_compute_high_param_loop_bound 1(127357 call . args[127291] c"size")))
      unknown tmp[127342] "maybe param" "temp"
      (127365 'move' tmp[127342] 1)
      ParamForLoop
      { i[127339] tmp[127340] tmp[127341] tmp[127342]
        if(127334 call _cond_test(127321 call !(127320 call(127312 call .(127311 call(127306 call .(127303 call .(353096 call . this[133260] c"_value") c"dom") c"dsiDim") i[127339]) c"boundsCheck")(127318 call args[127291] i[127339]))))
        {
          (127332 call halt "array slice out of bounds in dimension " i[127339] ": "(127331 call args[127291] i[127339]))
        }
      }
      label _unused_continueLabel[127344]
      label _breakLabel[127343]
    }
  }
  function _array[133150](?).localSlice[127385](arg _mt[133266]:_MT[227], arg this[133264]:_array[133150](?), arg r[127382]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127406 call _cond_test 1)
    {
      (127404 call(353118 call . this[133264] c"checkSlice")(127402 'expand_tuple' r[127382]))
    }
    unknown dom[127417](127416 call(353123 call . this[133264] c"_dom")(127414 'expand_tuple' r[127382]))
    (127424 return(127423 call(353130 call . this[133264] c"chpl__localSliceDefaultArithArrHelp") dom[127417]))
  }
  where {
    (127397 call &&(328555 'is_subtype' anymanaged DefaultRectangularArr[347545](?)(127389 'typeof'(353111 call . this[133264] c"_value")))(127396 call chpl__isTupleOfRanges r[127382]))
  }
  function _array[133150](?).localSlice[127435](arg _mt[133270]:_MT[227], arg this[133268]:_array[133150](?), arg d[127432] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127455 call _cond_test 1)
    {
      (127453 call(353142 call . this[133268] c"checkSlice")(127451 'expand_tuple'(127450 call(127446 call . d[127432] c"getIndices"))))
    }
    (127465 return(127464 call(353147 call . this[133268] c"chpl__localSliceDefaultArithArrHelp") d[127432]))
  }
  where {
    (328556 'is_subtype' anymanaged DefaultRectangularArr[347545](?)(127439 'typeof'(353136 call . this[133268] c"_value")))
  }
  function _array[133150](?).chpl__localSliceDefaultArithArrHelp[127476](arg _mt[133274]:_MT[227], arg this[133272]:_array[133150](?), arg d[127473] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no copy return"
  {
    if(127515 call _cond_test(127483 call !=(127480 call chpl_localeID_to_locale(127479 '_wide_get_locale'(353153 call . this[133272] c"_value")))(353156 call here[92085])))
    {
      (127513 call halt "Attempting to take a local slice of an array on locale "(127507 '_wide_get_node'(353159 call . this[133272] c"_value")) " from locale "(127510 call .(353162 call here[92085]) c"id"))
    }
    (127525 return(127524 call this[133272] d[127473]))
  }
  function _array[133150](?).localSlice[127535](arg _mt[133278]:_MT[227], arg this[133276]:_array[133150](?), arg r[127532]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127558 call _cond_test 1)
    {
      (127556 call(353178 call . this[133276] c"checkSlice")(127554 'expand_tuple' r[127532]))
    }
    (127571 return(127570 call(127565 call .(353183 call . this[133276] c"_value") c"dsiLocalSlice") r[127532]))
  }
  where {
    (127549 call &&(127540 call chpl__isTupleOfRanges r[127532])(127547 call !(328557 'is_subtype' anymanaged DefaultRectangularArr[347545](?)(127543 'typeof'(353172 call . this[133276] c"_value")))))
  }
  function _array[133150](?).localSlice[127582](arg _mt[133282]:_MT[227], arg this[133280]:_array[133150](?), arg d[127579] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    (127594 return(127593 call(353189 call . this[133280] c"localSlice")(127591 'expand_tuple'(127590 call(127586 call . d[127579] c"getIndices")))))
  }
  function _array[133150](?).these[127601](arg _mt[133286]:_MT[227], arg this[133284]:_array[133150](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[127614] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127615] "expr temp" "temp"
      (127624 'move' _iterator[127615](127622 call _getIterator(127609 call(127605 call .(353194 call . this[133284] c"_value") c"these"))))
      Defer
      {
        {
          (127641 call _freeIterator _iterator[127615])
        }
      }
      { scopeless type
        (127630 'move' _indexOfInterest[127614](127627 call iteratorIndex _iterator[127615]))
      }
      ForLoop
      {
        unknown i[127634] "index var" "insert auto destroy"
        (127636 'move' i[127634] _indexOfInterest[127614])
        {
          (127611 yield i[127634])
        }
        label _continueLabel[127619]
        _indexOfInterest[127614]
        _iterator[127615]
      }
      label _breakLabel[127620]
    }
  }
  function _array[133150](?).these[127657](arg _mt[133290]:_MT[227], arg this[133288]:_array[133150](?), param arg tag[127654] :
  iterKind[697]) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[127686] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127687] "expr temp" "temp"
      (127696 'move' _iterator[127687](127694 call _getIterator(127682 call(127677 call .(353207 call . this[133288] c"_value") c"these") tag[127654])))
      Defer
      {
        {
          (127713 call _freeIterator _iterator[127687])
        }
      }
      { scopeless type
        (127702 'move' _indexOfInterest[127686](127699 call iteratorIndex _iterator[127687]))
      }
      ForLoop
      {
        unknown i[127706] "index var" "insert auto destroy"
        (127708 'move' i[127706] _indexOfInterest[127686])
        (127684 yield i[127706])
        label _continueLabel[127691]
        _indexOfInterest[127686]
        _iterator[127687]
      }
      label _breakLabel[127692]
    }
  }
  where {
    (127673 call &&(127664 call == tag[127654] standalone[695])(127672 'method call resolves'(353202 call . this[133288] c"_value") "these"(tag = tag[127654])))
  }
  function _array[133150](?).these[127730](arg _mt[133294]:_MT[227], arg this[133292]:_array[133150](?), param arg tag[127727] :
  iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[127750] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127751] "expr temp" "temp"
      (127760 'move' _iterator[127751](127758 call _getIterator(127746 call(127741 call .(353216 call . this[133292] c"_value") c"these") tag[127727])))
      Defer
      {
        {
          (127777 call _freeIterator _iterator[127751])
        }
      }
      { scopeless type
        (127766 'move' _indexOfInterest[127750](127763 call iteratorIndex _iterator[127751]))
      }
      ForLoop
      {
        unknown followThis[127770] "index var" "insert auto destroy"
        (127772 'move' followThis[127770] _indexOfInterest[127750])
        (127748 yield followThis[127770])
        label _continueLabel[127755]
        _indexOfInterest[127750]
        _iterator[127751]
      }
      label _breakLabel[127756]
    }
  }
  where {
    (127737 call == tag[127727] leader[691])
  }
  function _array[133150](?).these[127794](arg _mt[133298]:_MT[227], arg this[133296]:_array[133150](?), param arg tag[127791] :
  iterKind[697], arg followThis[127796]:_any[170](?), param arg fast[127800] :
  bool[10] =
  0) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    if(127918 call _cond_test(127820 'method call resolves'(353225 call . this[133296] c"_value") "these"(tag = tag[127791]) followThis[127796](fast = fast[127800])))
    {
      {
        unknown _indexOfInterest[127836] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[127837] "expr temp" "temp"
        (127846 'move' _iterator[127837](127844 call _getIterator(127832 call(127823 call .(353232 call . this[133296] c"_value") c"these")(tag = tag[127791]) followThis[127796](fast = fast[127800]))))
        Defer
        {
          {
            (127863 call _freeIterator _iterator[127837])
          }
        }
        { scopeless type
          (127852 'move' _indexOfInterest[127836](127849 call iteratorIndex _iterator[127837]))
        }
        ForLoop
        {
          unknown i[127856] "index var" "insert auto destroy"
          (127858 'move' i[127856] _indexOfInterest[127836])
          (127834 yield i[127856])
          label _continueLabel[127841]
          _indexOfInterest[127836]
          _iterator[127837]
        }
        label _breakLabel[127842]
      }
    }
    {
      {
        unknown _indexOfInterest[127883] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[127884] "expr temp" "temp"
        (127893 'move' _iterator[127884](127891 call _getIterator(127879 call(127873 call .(353240 call . this[133296] c"_value") c"these") tag[127791] followThis[127796])))
        Defer
        {
          {
            (127910 call _freeIterator _iterator[127884])
          }
        }
        { scopeless type
          (127899 'move' _indexOfInterest[127883](127896 call iteratorIndex _iterator[127884]))
        }
        ForLoop
        {
          unknown i[127903] "index var" "insert auto destroy"
          (127905 'move' i[127903] _indexOfInterest[127883])
          (127881 yield i[127903])
          label _continueLabel[127888]
          _indexOfInterest[127883]
          _iterator[127884]
        }
        label _breakLabel[127889]
      }
    }
  }
  where {
    (127809 call == tag[127791] follower[693])
  }
  function _array[133150](?).numElements[127928](arg _mt[133302]:_MT[227], arg this[133300]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (127937 return(127934 call .(127931 call .(353247 call . this[133300] c"_value") c"dom") c"dsiNumIndices"))
  }
  function _array[133150](?).size[127944](arg _mt[133306]:_MT[227], arg this[133304]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (127947 return(353251 call . this[133304] c"numElements"))
  }
  function _array[133150](?).chpl_checkArrArgDoms[127958](arg _mt[133310]:_MT[227], arg this[133308]:_array[133150](?), arg formalDom[127955] :
  _domain[123390](?), param arg runtimeChecks[127961] :
  bool[10]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    if(128038 call _cond_test(127975 call !=(127965 call . formalDom[127955] c"rank")(127972 call .(127969 call . this[133308] c"_dom") c"rank")))
    {
      (128036 call compilerError(128031 call +(128019 call +(128001 call + "Rank mismatch passing array argument: expected "(127999 call _cast string[24](127995 call . formalDom[127955] c"rank"))) " but got ")(128029 call _cast string[24](128025 call .(128022 call . this[133308] c"_dom") c"rank")))(errorDepth = 2))
    }
    if(128178 call _cond_test(128054 call !=(128051 'typeof'(128048 call .(128045 call . formalDom[127955] c"dist") c"_value")) unmanaged DefaultDist[389849]))
    {
      if(128087 call _cond_test(128063 call !=(128057 'typeof' formalDom[127955])(128062 'typeof'(128059 call . this[133308] c"_dom"))))
      {
        (128085 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      if(128173 call _cond_test(128107 call && runtimeChecks[127961](128105 call !=(128095 call . formalDom[127955] c"dist")(128102 call .(128099 call . this[133308] c"_dom") c"dist"))))
      {
        (128171 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: "(128144 call . formalDom[127955] c"dist") "\n" "  Actual domain map is: "(128168 call .(128165 call . this[133308] c"_dom") c"dist"))
      }
    }
    if(128250 call _cond_test(128190 call && runtimeChecks[127961](128188 call != formalDom[127955](128185 call . this[133308] c"_dom"))))
    {
      (128248 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom[127955] "\n" "  Actual domain is: "(128245 call . this[133308] c"_dom"))
    }
  }
  function _array[133150](?).reindex[128263](arg _mt[133314]:_MT[227], arg this[133312]:_array[133150](?), arg newDomain[128260] :
  _domain[123390](?)) : _unknown[43] "inline" "method" "primary method" "fn returns aliasing array"
  {
    (128288 return(128287 call(353277 call . this[133312] c"reindex")(128285 'expand_tuple'(128284 call(128280 call . newDomain[128260] c"dims")))))
  }
  where {
    (128276 call &&(128271 call isRectangularDom(128267 call . this[133312] c"_dom"))(128275 call isRectangularDom newDomain[128260]))
  }
  function _array[133150](?).reindex[128300](arg _mt[133318]:_MT[227], arg this[133316]:_array[133150](?), arg newDims[128297]:_any[170](?) ...) : _unknown[43] "method" "primary method" "fn returns aliasing array"
  {
    {
      unknown i[128350] 0
      unknown tmp[128351] "maybe param" "temp"
      (128363 'move' tmp[128351](128361 call chpl_compute_low_param_loop_bound 1(128311 call . newDims[128297] c"size")))
      unknown tmp[128352] "maybe param" "temp"
      (128373 'move' tmp[128352](128371 call chpl_compute_high_param_loop_bound 1(128368 call . newDims[128297] c"size")))
      unknown tmp[128353] "maybe param" "temp"
      (128376 'move' tmp[128353] 1)
      ParamForLoop
      { i[128350] tmp[128351] tmp[128352] tmp[128353]
        if(128345 call _cond_test(128323 call !(128322 call isRange(128320 call newDims[128297] i[128350]))))
        {
          (128343 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[128355]
      label _breakLabel[128354]
    }
    if(128454 call _cond_test(128396 call !=(128389 call . this[133316] c"rank")(128393 call . newDims[128297] c"size")))
    {
      (128452 call compilerError(128449 call +(128440 call +(128422 call + "rank mismatch: cannot reindex() from "(128420 call _cast string[24](128416 call . this[133316] c"rank"))) " dimension(s) to ")(128447 call _cast string[24](128443 call . newDims[128297] c"size"))))
    }
    {
      unknown i[128527] 0
      unknown tmp[128528] "maybe param" "temp"
      (128540 'move' tmp[128528](128538 call chpl_compute_low_param_loop_bound 1(353291 call . this[133316] c"rank")))
      unknown tmp[128529] "maybe param" "temp"
      (128547 'move' tmp[128529](128545 call chpl_compute_high_param_loop_bound 1(353303 call . this[133316] c"rank")))
      unknown tmp[128530] "maybe param" "temp"
      (128550 'move' tmp[128530] 1)
      ParamForLoop
      { i[128527] tmp[128528] tmp[128529] tmp[128530]
        if(128522 call _cond_test(128483 call !=(128467 call .(128466 call newDims[128297] i[128527]) c"length")(128480 call .(128479 call(128474 call .(128471 call .(353297 call . this[133316] c"_value") c"dom") c"dsiDim") i[128527]) c"length")))
        {
          (128520 call halt "extent in dimension " i[128527] " does not match actual")
        }
      }
      label _unused_continueLabel[128532]
      label _breakLabel[128531]
    }
    const thisDomClass[128568] "const"(128565 call .(128562 call . this[133316] c"_value") c"dom")
    const tmp[128584] "const" "no copy" "temp"(128582 call _build_tuple thisDomClass[128568](128578 call . thisDomClass[128568] c"pid"))
    (128591 call _check_tuple_var_decl tmp[128584] 2)
    const dom[128571] "const"(128585 call tmp[128584] 1)
    const dompid[128573] "const"(128588 call tmp[128584] 2)
    const updom[128601] "const" "no auto destroy"(128599 call chpl__buildDomainExpr(128597 'expand_tuple' newDims[128297]))
    const redist[128640] "const"(128639 'new'(128638 'to unmanaged class from unknown'(128637 call anymanaged ArrayViewReindexDist[353311](?)(downDistPid =(128612 call .(128609 call .(128606 call . this[133316] c"_dom") c"dist") c"_pid"))(downDistInst =(128624 call .(128621 call .(128618 call . this[133316] c"_dom") c"dist") c"_instance"))(updom =(128629 call . updom[128601] c"_value"))(downdomPid = dompid[128573])(downdomInst = dom[128571]))))
    const redistRec[128648] "const"(128647 'new'(128646 call _distribution[116702](?) redist[128640]))
    const newDom[128671] "const" "no auto destroy"(128670 'new'(128669 call _domain[123390](?) redistRec[128648](353324 call . this[133316] c"rank")(128656 call . updom[128601] c"idxType")(128660 call . updom[128601] c"stridable")(128668 call(128664 call . updom[128601] c"dims"))))
    (128682 call =(128678 call .(128675 call . newDom[128671] c"_value") c"_free_when_no_arrs") 1)
    const tmp[128701] "const" "no copy" "temp"(128699 call _build_tuple(128691 call . this[133316] c"_value")(128695 call . this[133316] c"_pid"))
    (128708 call _check_tuple_var_decl tmp[128701] 2)
    const arr[128685] "const"(128702 call tmp[128701] 1)
    const arrpid[128687] "const"(128705 call tmp[128701] 2)
    unknown x[128737](128736 'new'(128735 'to unmanaged class from unknown'(128734 call anymanaged ArrayViewReindexArr[353334](?)(eltType =(128715 call . this[133316] c"eltType"))(_DomPid =(128721 call . newDom[128671] c"_pid"))(dom =(128726 call . newDom[128671] c"_instance"))(_ArrPid = arrpid[128687])(_ArrInstance = arr[128685]))))
    (128751 call(128744 call .(128741 call . newDom[128671] c"_value") c"add_arr") x[128737](locking = 0))
    (128757 return(128756 call _newArray x[128737]))
  }
  where {
    (128308 call isRectangularDom(128304 call . this[133316] c"_dom"))
  }
  function _array[133150](?).reindex[128768](arg _mt[133322]:_MT[227], arg this[133320]:_array[133150](?), arg d[128765] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (128788 call compilerError "Reindexing non-rectangular arrays is not permitted.")
  }
  function _array[133150](?).writeThis[128797](arg _mt[133326]:_MT[227], arg this[133324]:_array[133150](?), arg f[128795]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (128805 call(128800 call .(353347 call . this[133324] c"_value") c"dsiSerialWrite") f[128795])
  }
  function _array[133150](?).readThis[128814](arg _mt[133330]:_MT[227], arg this[133328]:_array[133150](?), arg f[128812]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (128822 call(128817 call .(353352 call . this[133328] c"_value") c"dsiSerialRead") f[128812])
  }
  function _array[133150](?).IRV[128829](arg _mt[133334]:_MT[227], arg this[133332]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens" "no return value for void"
  {
    (128855 call compilerError "only sparse arrays have an IRV")
  }
  where {
    (128835 call !(128834 call isSparseArr this[133332]))
  }
  function _array[133150](?).IRV[128863](arg _mt[133338]:_MT[227], arg this[133336]:_array[133150](?)) ref : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    (128875 return(128872 call .(353359 call . this[133336] c"_value") c"IRV"))
  }
  where {
    (128868 call isSparseArr this[133336])
  }
  function _array[133150](?).sorted[128892](arg _mt[133342]:_MT[227], arg this[133340]:_array[133150](?), arg comparator[128888] :
  unknown t[128883] =
  (128887 call chpl_defaultComparator)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(129051 call _cond_test(128912 call canResolveMethod(353363 call . this[133340] c"_value") "dsiSorted" comparator[128888]))
    {
      {
        unknown _indexOfInterest[128925] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[128926] "expr temp" "temp"
        (128935 'move' _iterator[128926](128933 call _getIterator(128920 call(128915 call .(353368 call . this[133340] c"_value") c"dsiSorted") comparator[128888])))
        Defer
        {
          {
            (128952 call _freeIterator _iterator[128926])
          }
        }
        { scopeless type
          (128941 'move' _indexOfInterest[128925](128938 call iteratorIndex _iterator[128926]))
        }
        ForLoop
        {
          unknown i[128945] "index var" "insert auto destroy"
          (128947 'move' i[128945] _indexOfInterest[128925])
          {
            (128922 yield i[128945])
          }
          label _continueLabel[128930]
          _indexOfInterest[128925]
          _iterator[128926]
        }
        label _breakLabel[128931]
      }
    }
    {
      if(129047 call _cond_test(128964 call canResolveMethod(353374 call . this[133340] c"_value") "dsiSorted"))
      {
        (128990 call compilerError(128987 call +(128969 call _cast string[24](128967 'typeof'(353378 call . this[133340] c"_value"))) " does not support dsiSorted(comparator)"))
      }
      {
        unknown copy[128999] this[133340]
        (129007 call sort copy[128999](comparator = comparator[128888]))
        {
          unknown _indexOfInterest[129014] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[129015] "expr temp" "temp"
          (129024 'move' _iterator[129015](129022 call _getIterator copy[128999]))
          Defer
          {
            {
              (129040 call _freeIterator _iterator[129015])
            }
          }
          { scopeless type
            (129029 'move' _indexOfInterest[129014](129026 call iteratorIndex _iterator[129015]))
          }
          ForLoop
          {
            unknown ind[129033] "index var" "insert auto destroy"
            (129035 'move' ind[129033] _indexOfInterest[129014])
            (129012 yield ind[129033])
            label _continueLabel[129019]
            _indexOfInterest[129014]
            _iterator[129015]
          }
          label _breakLabel[129020]
        }
        (329398 'used modules list'(128995 'use' Sort[251417]))
      }
    }
  }
  function _array[133150](?).displayRepresentation[129061](arg _mt[133346]:_MT[227], arg this[133344]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (129068 call(129064 call .(353387 call . this[133344] c"_value") c"dsiDisplayRepresentation"))
  }
  function _array[133150](?).targetLocales[129075](arg _mt[133350]:_MT[227], arg this[133348]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    (129083 return(129082 call(129078 call .(353391 call . this[133348] c"_value") c"dsiTargetLocales")))
  }
  function _array[133150](?).hasSingleLocalSubdomain[129090](arg _mt[133354]:_MT[227], arg this[133352]:_array[133150](?)) param : _unknown[43] "method" "primary method"
  {
    (129098 return(129097 call(129093 call .(353395 call . this[133352] c"_value") c"dsiHasSingleLocalSubdomain")))
  }
  function _array[133150](?).localSubdomain[129111](arg _mt[133358]:_MT[227], arg this[133356]:_array[133150](?), arg loc[129107] :
  locale[26] =
  (353398 call here[92085])) : _unknown[43] "method" "primary method"
  {
    if(129126 call _cond_test(129119 call !(129118 call(129114 call .(353401 call . this[133356] c"_value") c"dsiHasSingleLocalSubdomain"))))
    {
      (129124 call compilerError "Domain's local domain is not a single domain")
    }
    (129139 return(129138 call(129133 call .(353405 call . this[133356] c"_value") c"dsiLocalSubdomain") loc[129107]))
  }
  function _array[133150](?).localSubdomains[129151](arg _mt[133362]:_MT[227], arg this[133360]:_array[133150](?), arg loc[129147] :
  locale[26] =
  (353409 call here[92085])) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(129212 call _cond_test(129158 call(129154 call .(353412 call . this[133360] c"_value") c"dsiHasSingleLocalSubdomain")))
    {
      (129163 yield(129162 call(353416 call . this[133360] c"localSubdomain") loc[129147]))
    }
    {
      {
        unknown _indexOfInterest[129177] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[129178] "expr temp" "temp"
        (129187 'move' _iterator[129178](129185 call _getIterator(129173 call(129168 call .(353421 call . this[133360] c"_value") c"dsiLocalSubdomains") loc[129147])))
        Defer
        {
          {
            (129204 call _freeIterator _iterator[129178])
          }
        }
        { scopeless type
          (129193 'move' _indexOfInterest[129177](129190 call iteratorIndex _iterator[129178]))
        }
        ForLoop
        {
          unknown d[129197] "index var" "insert auto destroy"
          (129199 'move' d[129197] _indexOfInterest[129177])
          (129175 yield d[129197])
          label _continueLabel[129182]
          _indexOfInterest[129177]
          _iterator[129178]
        }
        label _breakLabel[129183]
      }
    }
  }
  function _array[133150](?).chpl__isDense1DArray[129221](arg _mt[133366]:_MT[227], arg this[133364]:_array[133150](?)) param : _unknown[43] "method" "primary method"
  {
    (129247 return(129245 call &&(129234 call &&(129226 call isRectangularArr this[133364])(129232 call ==(129228 call . this[133364] c"rank") 1))(129243 call !(129240 call .(129237 call . this[133364] c"_value") c"stridable"))))
  }
  function _array[133150](?).chpl__assertSingleArrayDomain[129258](arg _mt[133370]:_MT[227], arg this[133368]:_array[133150](?), arg fnName[129255] :
  string[24]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    if(129317 call _cond_test(129274 call !=(129270 call .(129267 call .(129264 call .(129261 call . this[133368] c"_dom") c"_value") c"_arrs") c"length") 1))
    {
      (129315 call halt(129312 call +(129294 call + "cannot call " fnName[129255]) " on an array defined over a domain with multiple arrays"))
    }
  }
  function _array[133150](?).isEmpty[129327](arg _mt[133374]:_MT[227], arg this[133372]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    (129339 return(129337 call ==(129333 call . this[133372] c"numElements") 0))
  }
  { scopeless type
    bool[10]
  }
  function _array[133150](?).head[129347](arg _mt[133378]:_MT[227], arg this[133376]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (129366 return(129365 call this[133376](129361 call .(129358 call . this[133376] c"_dom") c"alignedLow")))
  }
  { scopeless type
    (129353 call .(129350 call . this[133376] c"_value") c"eltType")
  }
  function _array[133150](?).tail[129374](arg _mt[133382]:_MT[227], arg this[133380]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (129393 return(129392 call this[133380](129388 call .(129385 call . this[133380] c"_dom") c"alignedHigh")))
  }
  { scopeless type
    (129380 call .(129377 call . this[133380] c"_value") c"eltType")
  }
  function _array[133150](?).resizeAllocRange[129405](arg _mt[133386]:_MT[227], arg this[133384]:_array[133150](?), arg r2[129402] :
  range[66183](?), arg factor[129408] =
  arrayAsVecGrowthFactor[111851], param arg direction[129412] =
  1, param arg grow[129416] =
  1) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    const r[129426] "const" "ref var"(129423 call .(129420 call . this[133384] c"_value") c"dataAllocRange")
    const lo[129434] "const"(129431 call . r[129426] c"low")
    const hi[129441] "const"(129438 call . r[129426] c"high")
    const size[129448] "const"(129445 call . r[129426] c"size")
    if(129649 call _cond_test(129453 call > grow[129416] 0))
    {
      const newSize[129473] "const"(129472 call max(129458 call + size[129448] 1)(129466 call _cast int(64)[13](129463 call * size[129448] factor[129408]))(129469 call . r2[129402] c"size"))
      if(129501 call _cond_test(129479 call > direction[129412] 0))
      {
        (129487 return(129485 call #(129482 call chpl_build_low_bounded_range lo[129434]) newSize[129473]))
      }
      {
        (129498 return(129496 call #(129491 call chpl_build_high_bounded_range hi[129441])(129494 call - newSize[129473])))
      }
    }
    {
      const newSize[129519] "const"(129518 call min(129508 call - size[129448] 1)(129516 call _cast int(64)[13](129513 call / size[129448] factor[129408])))
      if(129645 call _cond_test(129525 call > direction[129412] 0))
      {
        unknown newRange[129533](129531 call #(129528 call chpl_build_low_bounded_range lo[129434]) newSize[129519])
        if(129578 call _cond_test(129545 call <(129538 call . newRange[129533] c"high")(129542 call . r2[129402] c"high")))
        {
          const spaceNeeded[129557] "const"(129555 call -(129548 call . r2[129402] c"high")(129552 call . newRange[129533] c"high"))
          (129575 call = newRange[129533](129573 call chpl_build_bounded_range(129567 call +(129563 call . newRange[129533] c"low") spaceNeeded[129557])(129570 call . r2[129402] c"high")))
        }
        (129583 return newRange[129533])
      }
      {
        unknown newRange[129593](129591 call #(129586 call chpl_build_high_bounded_range hi[129441])(129589 call - newSize[129519]))
        if(129638 call _cond_test(129605 call >(129598 call . newRange[129593] c"low")(129602 call . r2[129402] c"low")))
        {
          const spaceNeeded[129617] "const"(129615 call -(129608 call . newRange[129593] c"low")(129612 call . r2[129402] c"low"))
          (129635 call = newRange[129593](129633 call chpl_build_bounded_range(129623 call . r2[129402] c"low")(129631 call -(129627 call . newRange[129593] c"high") spaceNeeded[129617])))
        }
        (129643 return newRange[129593])
      }
    }
  }
  function _array[133150](?).reallocateArray[129661](arg _mt[133390]:_MT[227], arg this[133388]:_array[133150](?), arg newRange[129658] :
  range[66183](?), param arg direction[129664] =
  1, arg debugMsg[129683] =
  "reallocateArray") : _unknown[43] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    {
      const tmp[129870] "const" "temp"
      (129871 'move' tmp[129870](129868 'deref'(129867 '_wide_get_locale'(129687 call . this[133388] c"_value"))))
      {
        const check[129705] "const"(129702 IfExpr (129692 call > direction[129664] 0) then
        { scopeless
          (129695 call . newRange[129658] c"high")
        } else
        { scopeless
          (129699 call . newRange[129658] c"low")
        } )
        if(129840 call _cond_test(129722 call !(129721 call(129716 call .(129713 call .(129710 call . this[133388] c"_value") c"dataAllocRange") c"contains") check[129705])))
        {
          if(129770 call _cond_test(129741 call <(129731 call .(129728 call .(129725 call . this[133388] c"_value") c"dataAllocRange") c"length")(129738 call .(129735 call . this[133388] c"_dom") c"numIndices")))
          {
            (129766 call =(129747 call .(129744 call . this[133388] c"_value") c"dataAllocRange")(129764 call chpl_build_bounded_range(129754 call .(129751 call . this[133388] c"_dom") c"low")(129761 call .(129758 call . this[133388] c"_dom") c"high")))
          }
          const oldRange[129782] "const"(129779 call .(129776 call . this[133388] c"_value") c"dataAllocRange")
          const nextAllocRange[129791] "const"(129790 call(353496 call . this[133388] c"resizeAllocRange") newRange[129658](direction = direction[129664]))
          if(129822 call _cond_test debugArrayAsVec[111855])
          {
            (129820 call writeln debugMsg[129683] ": " oldRange[129782] " => " nextAllocRange[129791] " (" newRange[129658] ")")
          }
          (129838 call(129831 call .(129828 call . this[133388] c"_value") c"dsiReallocate")(129835 call _build_tuple nextAllocRange[129791]))
        }
        (129855 call(129848 call .(129845 call . this[133388] c"_dom") c"setIndices")(129852 call _build_tuple newRange[129658]))
        (129865 call(129861 call .(129858 call . this[133388] c"_value") c"dsiPostReallocate"))
      }
    }
  }
  function _array[133150](?).back[129880](arg _mt[133394]:_MT[227], arg this[133392]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    if(129917 call _cond_test(129895 call ||(129886 call !(129885 call isRectangularArr this[133392]))(129893 call !=(129889 call . this[133392] c"rank") 1)))
    {
      (129915 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    if(129949 call _cond_test(129927 call && 1(129926 call(353515 call . this[133392] c"isEmpty"))))
    {
      (129947 call halt "back called on an empty array")
    }
    (129964 return(129963 call this[133392](129959 call .(129956 call . this[133392] c"_dom") c"high")))
  }
  function _array[133150](?).push_back[129977](arg _mt[133398]:_MT[227], arg this[133396]:_array[133150](?), in arg val[129974] :
  (129971 call . this[133396] c"eltType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(130006 call _cond_test showArrayAsVecWarnings[111812])
    {
      (130004 call compilerWarning "push_back is deprecated - please use list.append")
    }
    if(130037 call _cond_test(130015 call !(130014 call(353527 call . this[133396] c"chpl__isDense1DArray"))))
    {
      (130035 call compilerError "push_back() is only supported on dense 1D arrays")
    }
    (130060 call(353531 call . this[133396] c"chpl__assertSingleArrayDomain") "push_back")
    const newRange[130081] "const"(130079 call chpl_build_bounded_range(130066 call .(130063 call . this[133396] c"_dom") c"low")(130077 call +(130073 call .(130070 call . this[133396] c"_dom") c"high") 1))
    (130104 call(353537 call . this[133396] c"reallocateArray") newRange[130081](debugMsg = "push_back reallocate"))
    (130117 call =(130115 call this[133396](130111 call .(130108 call . this[133396] c"_dom") c"high")) val[129974])
  }
  {
    (129983 call <(129980 'lifetime_of' this[133396])(129982 'lifetime_of' val[129974]))
  }
  function _array[133150](?).push_back[130129](arg _mt[133402]:_MT[227], arg this[133400]:_array[133150](?), arg vals[130126] :
  _array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(130158 call _cond_test showArrayAsVecWarnings[111812])
    {
      (130156 call compilerWarning "push_back is deprecated - please use list.extend")
    }
    if(130174 call _cond_test(130167 call !(130166 call(353549 call . this[133400] c"chpl__isDense1DArray"))))
    {
      (130172 call compilerError "push_back() is only supported on dense 1D arrays")
    }
    (130182 call(353553 call . this[133400] c"chpl__assertSingleArrayDomain") "push_back")
    const thisRange[130202] "const"(130200 call #(130194 call chpl_build_low_bounded_range(130192 call +(130188 call .(130185 call . this[133400] c"_dom") c"high") 1))(130197 call . vals[130126] c"size"))
    const valsRange[130215] "const"(130214 call(130209 call .(130206 call . vals[130126] c"_dom") c"dim") 1)
    const newRange[130240] "const"(130238 call chpl_build_bounded_range(130222 call .(130219 call . this[133400] c"_dom") c"low")(130236 call +(130229 call .(130226 call . this[133400] c"_dom") c"high")(130233 call . vals[130126] c"size")))
    (130248 call(353563 call . this[133400] c"reallocateArray") newRange[130240](debugMsg = "push_back reallocate"))
    (130258 call =(130253 call this[133400] thisRange[130202])(130257 call vals[130126] valsRange[130215]))
  }
  {
    (130135 call <(130132 'lifetime_of' this[133400])(130134 'lifetime_of' vals[130126]))
  }
  function _array[133150](?).pop_back[130266](arg _mt[133406]:_MT[227], arg this[133404]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    if(130289 call _cond_test showArrayAsVecWarnings[111812])
    {
      (130287 call compilerWarning "pop_back is deprecated - please use list.pop")
    }
    if(130320 call _cond_test(130298 call !(130297 call(353573 call . this[133404] c"chpl__isDense1DArray"))))
    {
      (130318 call compilerError "pop_back() is only supported on dense 1D arrays")
    }
    (130343 call(353577 call . this[133404] c"chpl__assertSingleArrayDomain") "pop_back")
    if(130371 call _cond_test(130349 call && 1(130348 call(353582 call . this[133404] c"isEmpty"))))
    {
      (130369 call halt "pop_back called on empty array")
    }
    const lo[130383] "const"(130380 call .(130377 call . this[133404] c"_dom") c"low")
    const hi[130396] "const"(130394 call -(130390 call .(130387 call . this[133404] c"_dom") c"high") 1)
    const newRange[130403] "const"(130401 call chpl_build_bounded_range lo[130383] hi[130396])
    const ret[130416] "const"(130415 call this[133404](130411 call .(130408 call . this[133404] c"_dom") c"high"))
    {
      const tmp[130595] "const" "temp"
      (130596 'move' tmp[130595](130593 'deref'(130592 '_wide_get_locale'(130420 call . this[133404] c"_value"))))
      {
        if(130469 call _cond_test(130440 call <(130430 call .(130427 call .(130424 call . this[133404] c"_value") c"dataAllocRange") c"length")(130437 call .(130434 call . this[133404] c"_dom") c"numIndices")))
        {
          (130465 call =(130446 call .(130443 call . this[133404] c"_value") c"dataAllocRange")(130463 call chpl_build_bounded_range(130453 call .(130450 call . this[133404] c"_dom") c"low")(130460 call .(130457 call . this[133404] c"_dom") c"high")))
        }
        if(130565 call _cond_test(130497 call <(130475 call . newRange[130403] c"length")(130495 call _cast int(64)[13](130492 call /(130485 call .(130482 call .(130479 call . this[133404] c"_value") c"dataAllocRange") c"length")(130490 call * arrayAsVecGrowthFactor[111851] arrayAsVecGrowthFactor[111851])))))
        {
          const oldRng[130506] "const"(130503 call .(130500 call . this[133404] c"_value") c"dataAllocRange")
          const nextAllocRange[130518] "const"(130517 call(353603 call . this[133404] c"resizeAllocRange") newRange[130403](grow =(130514 call - 1)))
          if(130548 call _cond_test debugArrayAsVec[111855])
          {
            (130546 call writeln "pop_back reallocate: " oldRng[130506] " => " nextAllocRange[130518] " (" newRange[130403] ")")
          }
          (130563 call(130557 call .(130554 call . this[133404] c"_value") c"dsiReallocate") nextAllocRange[130518] newRange[130403])
        }
        (130580 call(130573 call .(130570 call . this[133404] c"_dom") c"setIndices")(130577 call _build_tuple newRange[130403]))
        (130590 call(130586 call .(130583 call . this[133404] c"_value") c"dsiPostReallocate"))
      }
    }
    (130601 return ret[130416])
  }
  function _array[133150](?).front[130607](arg _mt[133410]:_MT[227], arg this[133408]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    if(130644 call _cond_test(130622 call ||(130613 call !(130612 call isRectangularArr this[133408]))(130620 call !=(130616 call . this[133408] c"rank") 1)))
    {
      (130642 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    if(130676 call _cond_test(130654 call && 1(130653 call(353622 call . this[133408] c"isEmpty"))))
    {
      (130674 call halt "front called on an empty array")
    }
    (130691 return(130690 call this[133408](130686 call .(130683 call . this[133408] c"_dom") c"low")))
  }
  function _array[133150](?).push_front[130704](arg _mt[133414]:_MT[227], arg this[133412]:_array[133150](?), in arg val[130701] :
  (130698 call . this[133412] c"eltType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(130733 call _cond_test showArrayAsVecWarnings[111812])
    {
      (130731 call compilerWarning "push_front is deprecated - please use list.insert")
    }
    if(130764 call _cond_test(130742 call !(130741 call(353632 call . this[133412] c"chpl__isDense1DArray"))))
    {
      (130762 call compilerError "push_front() is only supported on dense 1D arrays")
    }
    (130787 call(353636 call . this[133412] c"chpl__assertSingleArrayDomain") "push_front")
    const lo[130799] "const"(130797 call -(130793 call .(130790 call . this[133412] c"_dom") c"low") 1)
    const hi[130809] "const"(130806 call .(130803 call . this[133412] c"_dom") c"high")
    const newRange[130816] "const"(130814 call chpl_build_bounded_range lo[130799] hi[130809])
    (130843 call(353644 call . this[133412] c"reallocateArray") newRange[130816](direction =(130823 call - 1))(debugMsg = "push_front reallocate"))
    (130850 call =(130848 call this[133412] lo[130799]) val[130701])
  }
  {
    (130710 call <(130707 'lifetime_of' this[133412])(130709 'lifetime_of' val[130701]))
  }
  function _array[133150](?).push_front[130862](arg _mt[133418]:_MT[227], arg this[133416]:_array[133150](?), arg vals[130859] :
  _array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(130876 call _cond_test showArrayAsVecWarnings[111812])
    {
      (130874 call compilerWarning "push_front is deprecated - please use list.insert")
    }
    if(130892 call _cond_test(130885 call !(130884 call(353656 call . this[133416] c"chpl__isDense1DArray"))))
    {
      (130890 call compilerError "push_front() is only supported on dense 1D arrays")
    }
    (130900 call(353660 call . this[133416] c"chpl__assertSingleArrayDomain") "push_front")
    const thisRange[130923] "const"(130921 call #(130915 call chpl_build_low_bounded_range(130913 call -(130906 call .(130903 call . this[133416] c"_dom") c"low")(130910 call . vals[130859] c"size")))(130918 call . vals[130859] c"size"))
    const valsRange[130936] "const"(130935 call(130930 call .(130927 call . vals[130859] c"_dom") c"dim") 1)
    const newRange[130961] "const"(130959 call chpl_build_bounded_range(130950 call -(130943 call .(130940 call . this[133416] c"_dom") c"low")(130947 call . vals[130859] c"size"))(130956 call .(130953 call . this[133416] c"_dom") c"high"))
    (130973 call(353671 call . this[133416] c"reallocateArray") newRange[130961](direction =(130968 call - 1))(debugMsg = "push_front reallocate"))
    (130983 call =(130978 call this[133416] thisRange[130923])(130982 call vals[130859] valsRange[130936]))
  }
  {
    (130868 call <(130865 'lifetime_of' this[133416])(130867 'lifetime_of' vals[130859]))
  }
  function _array[133150](?).pop_front[130991](arg _mt[133422]:_MT[227], arg this[133420]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    if(131014 call _cond_test showArrayAsVecWarnings[111812])
    {
      (131012 call compilerWarning "pop_front is deprecated - please use list.pop")
    }
    if(131045 call _cond_test(131023 call !(131022 call(353681 call . this[133420] c"chpl__isDense1DArray"))))
    {
      (131043 call compilerError "pop_front() is only supported on dense 1D arrays")
    }
    (131068 call(353685 call . this[133420] c"chpl__assertSingleArrayDomain") "pop_front")
    if(131096 call _cond_test(131074 call && 1(131073 call(353690 call . this[133420] c"isEmpty"))))
    {
      (131094 call halt "pop_front called on empty array")
    }
    const lo[131111] "const"(131109 call +(131105 call .(131102 call . this[133420] c"_dom") c"low") 1)
    const hi[131121] "const"(131118 call .(131115 call . this[133420] c"_dom") c"high")
    const newRange[131128] "const"(131126 call chpl_build_bounded_range lo[131111] hi[131121])
    const ret[131141] "const"(131140 call this[133420](131136 call .(131133 call . this[133420] c"_dom") c"low"))
    {
      const tmp[131324] "const" "temp"
      (131325 'move' tmp[131324](131322 'deref'(131321 '_wide_get_locale'(131145 call . this[133420] c"_value"))))
      {
        if(131194 call _cond_test(131165 call <(131155 call .(131152 call .(131149 call . this[133420] c"_value") c"dataAllocRange") c"length")(131162 call .(131159 call . this[133420] c"_dom") c"numIndices")))
        {
          (131190 call =(131171 call .(131168 call . this[133420] c"_value") c"dataAllocRange")(131188 call chpl_build_bounded_range(131178 call .(131175 call . this[133420] c"_dom") c"low")(131185 call .(131182 call . this[133420] c"_dom") c"high")))
        }
        if(131294 call _cond_test(131222 call <(131200 call . newRange[131128] c"length")(131220 call _cast int(64)[13](131217 call /(131210 call .(131207 call .(131204 call . this[133420] c"_value") c"dataAllocRange") c"length")(131215 call * arrayAsVecGrowthFactor[111851] arrayAsVecGrowthFactor[111851])))))
        {
          const oldRng[131231] "const"(131228 call .(131225 call . this[133420] c"_value") c"dataAllocRange")
          const nextAllocRange[131247] "const"(131246 call(353711 call . this[133420] c"resizeAllocRange") newRange[131128](direction =(131239 call - 1))(grow =(131243 call - 1)))
          if(131277 call _cond_test debugArrayAsVec[111855])
          {
            (131275 call writeln "pop_front reallocate: " oldRng[131231] " => " nextAllocRange[131247] " (" newRange[131128] ")")
          }
          (131292 call(131286 call .(131283 call . this[133420] c"_value") c"dsiReallocate") nextAllocRange[131247] newRange[131128])
        }
        (131309 call(131302 call .(131299 call . this[133420] c"_dom") c"setIndices")(131306 call _build_tuple newRange[131128]))
        (131319 call(131315 call .(131312 call . this[133420] c"_value") c"dsiPostReallocate"))
      }
    }
    (131330 return ret[131141])
  }
  function _array[133150](?).insert[131343](arg _mt[133426]:_MT[227], arg this[133424]:_array[133150](?), arg pos[131340] :
  (131337 call . this[133424] c"idxType"), in arg val[131349] :
  (131346 call . this[133424] c"eltType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(131373 call _cond_test showArrayAsVecWarnings[111812])
    {
      (131371 call compilerWarning "insert is deprecated - please use list.insert")
    }
    if(131404 call _cond_test(131382 call !(131381 call(353730 call . this[133424] c"chpl__isDense1DArray"))))
    {
      (131402 call compilerError "insert() is only supported on dense 1D arrays")
    }
    (131427 call(353734 call . this[133424] c"chpl__assertSingleArrayDomain") "insert")
    const prevHigh[131436] "const"(131433 call .(131430 call . this[133424] c"_dom") c"high")
    const newRange[131458] "const"(131456 call chpl_build_bounded_range(131443 call .(131440 call . this[133424] c"_dom") c"low")(131454 call +(131450 call .(131447 call . this[133424] c"_dom") c"high") 1))
    if(131510 call _cond_test(131471 call && 1(131469 call !(131468 call(131463 call . newRange[131458] c"contains") pos[131340]))))
    {
      (131508 call halt "insert at position " pos[131340] " out of bounds")
    }
    (131535 call(353745 call . this[133424] c"reallocateArray") newRange[131458](debugMsg = "insert reallocate"))
    {
      unknown _indexOfInterest[131561] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131562] "expr temp" "temp"
      (131571 'move' _iterator[131562](131569 call _getIterator(131582 call chpl_direct_range_iter pos[131340] prevHigh[131436](131578 call - 1))))
      Defer
      {
        {
          (131598 call _freeIterator _iterator[131562])
        }
      }
      { scopeless type
        (131587 'move' _indexOfInterest[131561](131584 call iteratorIndex _iterator[131562]))
      }
      ForLoop
      {
        unknown i[131591] "index var" "insert auto destroy"
        (131593 'move' i[131591] _indexOfInterest[131561])
        (131558 call =(131553 call this[133424](131550 call + i[131591] 1))(131557 call this[133424] i[131591]))
        label _continueLabel[131566]
        _indexOfInterest[131561]
        _iterator[131562]
      }
      label _breakLabel[131567]
    }
    (131610 call =(131608 call this[133424] pos[131340]) val[131349])
  }
  function _array[133150](?).insert[131624](arg _mt[133430]:_MT[227], arg this[133428]:_array[133150](?), arg pos[131621] :
  (131618 call . this[133428] c"idxType"), arg vals[131629] :
  (131626 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(131638 call _cond_test showArrayAsVecWarnings[111812])
    {
      (131636 call compilerWarning "insert is deprecated - please use list.insert")
    }
    if(131654 call _cond_test(131647 call !(131646 call(353761 call . this[133428] c"chpl__isDense1DArray"))))
    {
      (131652 call compilerError "insert() is only supported on dense 1D arrays")
    }
    (131662 call(353765 call . this[133428] c"chpl__assertSingleArrayDomain") "insert")
    const shift[131668] "const"(131665 call . vals[131629] c"size")
    const shiftRange[131681] "const"(131679 call chpl_build_bounded_range pos[131621](131676 call .(131673 call . this[133428] c"_dom") c"high"))
    const newRange[131706] "const"(131704 call chpl_build_bounded_range(131688 call .(131685 call . this[133428] c"_dom") c"low")(131702 call +(131695 call .(131692 call . this[133428] c"_dom") c"high")(131699 call . vals[131629] c"size")))
    const validInsertRange[131728] "const"(131726 call chpl_build_bounded_range(131713 call .(131710 call . this[133428] c"_dom") c"low")(131724 call +(131720 call .(131717 call . this[133428] c"_dom") c"high") 1))
    if(131750 call _cond_test(131741 call && 1(131739 call !(131738 call(131733 call . validInsertRange[131728] c"contains") pos[131621]))))
    {
      (131748 call halt "insert at position " pos[131621] " out of bounds")
    }
    (131760 call(353781 call . this[133428] c"reallocateArray") newRange[131706](debugMsg = "insert reallocate"))
    {
      unknown _indexOfInterest[131783] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131784] "expr temp" "temp"
      (131793 'move' _iterator[131784](131791 call _getIterator(131767 call chpl_by shiftRange[131681](131765 call - 1))))
      Defer
      {
        {
          (131813 call _freeIterator _iterator[131784])
        }
      }
      { scopeless type
        (131802 'move' _indexOfInterest[131783](131799 call iteratorIndex _iterator[131784]))
      }
      ForLoop
      {
        unknown i[131806] "index var" "insert auto destroy"
        (131808 'move' i[131806] _indexOfInterest[131783])
        (131780 call =(131775 call this[133428](131772 call + i[131806] shift[131668]))(131779 call this[133428] i[131806]))
        label _continueLabel[131788]
        _indexOfInterest[131783]
        _iterator[131784]
      }
      label _breakLabel[131789]
    }
    (131830 call =(131828 call this[133428](131825 call #(131822 call chpl_build_low_bounded_range pos[131621]) shift[131668])) vals[131629])
  }
  function _array[133150](?).remove[131844](arg _mt[133434]:_MT[227], arg this[133432]:_array[133150](?), arg pos[131841] :
  (131838 call . this[133432] c"idxType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(131867 call _cond_test showArrayAsVecWarnings[111812])
    {
      (131865 call compilerWarning "remove is deprecated - please use list.pop")
    }
    if(131898 call _cond_test(131876 call !(131875 call(353798 call . this[133432] c"chpl__isDense1DArray"))))
    {
      (131896 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (131919 call(353802 call . this[133432] c"chpl__assertSingleArrayDomain") "remove")
    if(131958 call _cond_test(131934 call && 1(131932 call !(131931 call(131926 call .(131923 call . this[133432] c"_dom") c"contains") pos[131841]))))
    {
      (131956 call halt "remove at position " pos[131841] " out of bounds")
    }
    const lo[131970] "const"(131967 call .(131964 call . this[133432] c"_dom") c"low")
    const hi[131983] "const"(131981 call -(131977 call .(131974 call . this[133432] c"_dom") c"high") 1)
    const newRange[131990] "const"(131988 call chpl_build_bounded_range lo[131970] hi[131983])
    {
      unknown _indexOfInterest[132013] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132014] "expr temp" "temp"
      (132023 'move' _iterator[132014](132021 call _getIterator(132028 call chpl_direct_range_iter pos[131841] hi[131983] 1)))
      Defer
      {
        {
          (132044 call _freeIterator _iterator[132014])
        }
      }
      { scopeless type
        (132033 'move' _indexOfInterest[132013](132030 call iteratorIndex _iterator[132014]))
      }
      ForLoop
      {
        unknown i[132037] "index var" "insert auto destroy"
        (132039 'move' i[132037] _indexOfInterest[132013])
        {
          (132009 call =(132001 call this[133432] i[132037])(132008 call this[133432](132005 call + i[132037] 1)))
        }
        label _continueLabel[132018]
        _indexOfInterest[132013]
        _iterator[132014]
      }
      label _breakLabel[132019]
    }
    {
      const tmp[132185] "const" "temp"
      (132186 'move' tmp[132185](132183 'deref'(132182 '_wide_get_locale'(132052 call . this[133432] c"_value"))))
      {
        if(132101 call _cond_test(132072 call <(132062 call .(132059 call .(132056 call . this[133432] c"_value") c"dataAllocRange") c"length")(132069 call .(132066 call . this[133432] c"_dom") c"numIndices")))
        {
          (132097 call =(132078 call .(132075 call . this[133432] c"_value") c"dataAllocRange")(132095 call chpl_build_bounded_range(132085 call .(132082 call . this[133432] c"_dom") c"low")(132092 call .(132089 call . this[133432] c"_dom") c"high")))
        }
        if(132155 call _cond_test(132129 call <(132107 call . newRange[131990] c"length")(132127 call _cast int(64)[13](132124 call /(132117 call .(132114 call .(132111 call . this[133432] c"_value") c"dataAllocRange") c"length")(132122 call * arrayAsVecGrowthFactor[111851] arrayAsVecGrowthFactor[111851])))))
        {
          const nextAllocRange[132139] "const"(132138 call(353830 call . this[133432] c"resizeAllocRange") newRange[131990](grow =(132135 call - 1)))
          (132153 call(132147 call .(132144 call . this[133432] c"_value") c"dsiReallocate") nextAllocRange[132139] newRange[131990])
        }
        (132170 call(132163 call .(132160 call . this[133432] c"_dom") c"setIndices")(132167 call _build_tuple newRange[131990]))
        (132180 call(132176 call .(132173 call . this[133432] c"_value") c"dsiPostReallocate"))
      }
    }
  }
  function _array[133150](?).remove[132201](arg _mt[133438]:_MT[227], arg this[133436]:_array[133150](?), arg pos[132198] :
  (132195 call . this[133436] c"idxType"), arg count[132207] :
  (132204 call . this[133436] c"idxType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(132216 call _cond_test showArrayAsVecWarnings[111812])
    {
      (132214 call compilerWarning "remove is deprecated - please use list.pop")
    }
    if(132232 call _cond_test(132225 call !(132224 call(353844 call . this[133436] c"chpl__isDense1DArray"))))
    {
      (132230 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (132255 call(353848 call . this[133436] c"chpl__assertSingleArrayDomain") "remove count")
    const lo[132264] "const"(132261 call .(132258 call . this[133436] c"_dom") c"low")
    const hi[132277] "const"(132275 call -(132271 call .(132268 call . this[133436] c"_dom") c"high") count[132207])
    if(132312 call _cond_test(132297 call && 1(132295 call >(132286 call -(132283 call + pos[132198] count[132207]) 1)(132292 call .(132289 call . this[133436] c"_dom") c"high"))))
    {
      (132310 call halt "remove at position "(132307 call -(132304 call + pos[132198] count[132207]) 1) " out of bounds")
    }
    if(132331 call _cond_test(132322 call && 1(132320 call < pos[132198] lo[132264])))
    {
      (132329 call halt "remove at position " pos[132198] " out of bounds")
    }
    const newRange[132340] "const"(132338 call chpl_build_bounded_range lo[132264] hi[132277])
    {
      unknown _indexOfInterest[132363] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132364] "expr temp" "temp"
      (132373 'move' _iterator[132364](132371 call _getIterator(132378 call chpl_direct_range_iter pos[132198] hi[132277] 1)))
      Defer
      {
        {
          (132394 call _freeIterator _iterator[132364])
        }
      }
      { scopeless type
        (132383 'move' _indexOfInterest[132363](132380 call iteratorIndex _iterator[132364]))
      }
      ForLoop
      {
        unknown i[132387] "index var" "insert auto destroy"
        (132389 'move' i[132387] _indexOfInterest[132363])
        {
          (132359 call =(132351 call this[133436] i[132387])(132358 call this[133436](132355 call + i[132387] count[132207])))
        }
        label _continueLabel[132368]
        _indexOfInterest[132363]
        _iterator[132364]
      }
      label _breakLabel[132369]
    }
    {
      const tmp[132535] "const" "temp"
      (132536 'move' tmp[132535](132533 'deref'(132532 '_wide_get_locale'(132402 call . this[133436] c"_value"))))
      {
        if(132451 call _cond_test(132422 call <(132412 call .(132409 call .(132406 call . this[133436] c"_value") c"dataAllocRange") c"length")(132419 call .(132416 call . this[133436] c"_dom") c"numIndices")))
        {
          (132447 call =(132428 call .(132425 call . this[133436] c"_value") c"dataAllocRange")(132445 call chpl_build_bounded_range(132435 call .(132432 call . this[133436] c"_dom") c"low")(132442 call .(132439 call . this[133436] c"_dom") c"high")))
        }
        if(132505 call _cond_test(132479 call <(132457 call . newRange[132340] c"length")(132477 call _cast int(64)[13](132474 call /(132467 call .(132464 call .(132461 call . this[133436] c"_value") c"dataAllocRange") c"length")(132472 call * arrayAsVecGrowthFactor[111851] arrayAsVecGrowthFactor[111851])))))
        {
          const nextAllocRange[132489] "const"(132488 call(353884 call . this[133436] c"resizeAllocRange") newRange[132340](grow =(132485 call - 1)))
          (132503 call(132497 call .(132494 call . this[133436] c"_value") c"dsiReallocate") nextAllocRange[132489] newRange[132340])
        }
        (132520 call(132513 call .(132510 call . this[133436] c"_dom") c"setIndices")(132517 call _build_tuple newRange[132340]))
        (132530 call(132526 call .(132523 call . this[133436] c"_value") c"dsiPostReallocate"))
      }
    }
  }
  function _array[133150](?).remove[132556](arg _mt[133442]:_MT[227], arg this[133440]:_array[133150](?), arg pos[132553] :
  (132552 call range[66183](?)(132546 call . this[133440] c"idxType")(stridable = 0))) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(132579 call _cond_test showArrayAsVecWarnings[111812])
    {
      (132577 call compilerWarning "remove has been deprecated - please use list.pop")
    }
    if(132595 call _cond_test(132588 call !(132587 call(353898 call . this[133440] c"chpl__isDense1DArray"))))
    {
      (132593 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (132618 call(353902 call . this[133440] c"chpl__assertSingleArrayDomain") "remove range")
    (132630 call(353906 call . this[133440] c"remove")(132622 call . pos[132553] c"low")(132627 call . pos[132553] c"size"))
  }
  function _array[133150](?).reverse[132636](arg _mt[133446]:_MT[227], arg this[133444]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(132663 call _cond_test(132641 call !(132640 call(353912 call . this[133444] c"chpl__isDense1DArray"))))
    {
      (132661 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    const lo[132676] "const"(132673 call .(132670 call . this[133444] c"_dom") c"low")
    const mid[132689] "const"(132687 call /(132683 call .(132680 call . this[133444] c"_dom") c"size") 2)
    const hi[132699] "const"(132696 call .(132693 call . this[133444] c"_dom") c"high")
    {
      unknown _indexOfInterest[132727] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132728] "expr temp" "temp"
      (132737 'move' _iterator[132728](132735 call _getIterator(132744 call chpl_direct_counted_range_iter 0 mid[132689])))
      Defer
      {
        {
          (132760 call _freeIterator _iterator[132728])
        }
      }
      { scopeless type
        (132749 'move' _indexOfInterest[132727](132746 call iteratorIndex _iterator[132728]))
      }
      ForLoop
      {
        unknown i[132753] "index var" "insert auto destroy"
        (132755 'move' i[132753] _indexOfInterest[132727])
        {
          (132723 call <=>(132715 call this[133444](132712 call + lo[132676] i[132753]))(132722 call this[133444](132719 call - hi[132699] i[132753])))
        }
        label _continueLabel[132732]
        _indexOfInterest[132727]
        _iterator[132728]
      }
      label _breakLabel[132733]
    }
  }
  function _array[133150](?).clear[132771](arg _mt[133450]:_MT[227], arg this[133448]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(132794 call _cond_test showArrayAsVecWarnings[111812])
    {
      (132792 call compilerWarning "clear is deprecated - please use list.clear")
    }
    if(132825 call _cond_test(132803 call !(132802 call(353927 call . this[133448] c"chpl__isDense1DArray"))))
    {
      (132823 call compilerError "clear() is only supported on dense 1D arrays")
    }
    (132846 call(353931 call . this[133448] c"chpl__assertSingleArrayDomain") "clear")
    const lo[132855] "const"(132852 call .(132849 call . this[133448] c"_dom") c"low")
    const hi[132868] "const"(132866 call -(132862 call .(132859 call . this[133448] c"_dom") c"low") 1)
    (132893 call assert(132874 call < hi[132868] lo[132855]) "overflow occurred subtracting 1 from low bound in clear")
    const newRange[132899] "const"(132897 call chpl_build_bounded_range lo[132855] hi[132868])
    {
      const tmp[132946] "const" "temp"
      (132947 'move' tmp[132946](132944 'deref'(132943 '_wide_get_locale'(132903 call . this[133448] c"_value"))))
      {
        (132917 call(132910 call .(132907 call . this[133448] c"_value") c"dsiReallocate")(132914 call _build_tuple newRange[132899]))
        (132931 call(132924 call .(132921 call . this[133448] c"_dom") c"setIndices")(132928 call _build_tuple newRange[132899]))
        (132941 call(132937 call .(132934 call . this[133448] c"_value") c"dsiPostReallocate"))
      }
    }
  }
  function _array[133150](?).find[132962](arg _mt[133454]:_MT[227], arg this[133452]:_array[133150](?), arg val[132959] :
  (132956 call . this[133452] c"eltType")) : _unknown[43] "method" "primary method"
  {
    {
      unknown _indexOfInterest[133000] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133001] "expr temp" "temp"
      (133010 'move' _iterator[133001](133008 call _getIterator(132977 call . this[133452] c"_dom")))
      Defer
      {
        {
          (133027 call _freeIterator _iterator[133001])
        }
      }
      { scopeless type
        (133016 'move' _indexOfInterest[133000](133013 call iteratorIndex _iterator[133001]))
      }
      ForLoop
      {
        unknown i[133020] "index var" "insert auto destroy"
        (133022 'move' i[133020] _indexOfInterest[133000])
        {
          if(132994 call _cond_test(132985 call ==(132983 call this[133452] i[133020]) val[132959]))
          {
            (132992 return(132990 call _build_tuple 1 i[133020]))
          }
        }
        label _continueLabel[133005]
        _indexOfInterest[133000]
        _iterator[133001]
      }
      label _breakLabel[133006]
    }
    unknown arbInd[133042](133040 call chpl__buildIndexType(133036 call . this[133452] c"_dom"))
    (133050 return(133048 call _build_tuple 0 arbInd[133042]))
  }
  { scopeless type
    (132973 call _build_tuple bool[10](132970 call chpl__buildIndexType(132966 call . this[133452] c"_dom")))
  }
  function _array[133150](?).count[133064](arg _mt[133458]:_MT[227], arg this[133456]:_array[133150](?), arg val[133061] :
  (133058 call . this[133456] c"eltType")) : _unknown[43] "method" "primary method"
  {
    (133074 return(133072 'reduce' anymanaged SumReduceScanOp[344093](?)(133070 call == this[133456] val[133061]) 0))
  }
  { scopeless type
    int(64)[13]
  }
  function _array[133150](?).shape[133082](arg _mt[133462]:_MT[227], arg this[133460]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (133093 return(133090 call .(133085 call . this[133460] c"_dom") c"shape"))
  }
  function _array[133150](?)._scan[133102](arg _mt[133466]:_MT[227], arg this[133464]:_array[133150](?), arg op[133100]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (133143 return(133142 call(133133 call .(353968 call . this[133464] c"_value") c"doiScan") op[133100](133139 call . this[133464] c"_dom")))
  }
  where {
    (133131 call canResolveMethod module=[244] Reflection[211223](353962 call . this[133464] c"_value") "doiScan" op[133100](133128 call . this[133464] c"_dom"))
  }
  type _array[133150](?) unknown _pid[125853] int(64)[13] unknown _instance[125856] "alias scope from this" "owned" unknown _unowned[125860] bool[10] forwarding ( )
  function _do_destroy_arr[133475](arg _unowned[133472] :
  bool[10], arg _instance[133477]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    if(133665 call _cond_test(133480 call ! _unowned[133472]))
    {
      {
        const tmp[133659] "const" "temp"
        (133660 'move' tmp[133659](133657 'deref'(133656 '_wide_get_locale' _instance[133477])))
        {
          unknown arrIsInList[133491] "param"(133489 call !(133488 call(133484 call . _instance[133477] c"isSliceArrayView")))
          unknown tmp[133507] "no copy" "temp"(133506 call(133501 call . _instance[133477] c"remove") arrIsInList[133491])
          (133514 call _check_tuple_var_decl tmp[133507] 2)
          unknown arrToFree[133495](133508 call tmp[133507] 1)
          unknown domToRemove[133497](133511 call tmp[133507] 2)
          unknown domToFree[133523] nil[38] unmanaged BaseDom?[389887]
          unknown distToRemove[133530] nil[38] unmanaged BaseDist?[389876]
          unknown distToFree[133537] nil[38] unmanaged BaseDist?[389876]
          unknown domIsPrivatized[133544] "param"(133543 call _isPrivatized domToRemove[133497])
          const instanceDom[133548] "const" domToRemove[133497]
          if(133572 call _cond_test(133553 call != domToRemove[133497] nil[38]))
          {
            unknown tmp[328558] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[328583] "maybe param" "temp"
            (328586 'move' tmp[328583](328584 'addr of' domToFree[133523]))
            unknown tmp[328594] "maybe param" "temp"
            (328597 'move' tmp[328594](328595 'addr of' distToRemove[133530]))
            (328559 'move' tmp[328558](133567 call(133563 call .(133561 call postfix! domToRemove[133497]) c"remove")))
            { scopeless
              if(328575 call _cond_test(328568 call != 2(328565 call . tmp[328558] c"size")))
              {
                (328571 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            (328588 call = tmp[328583](328581 call tmp[328558] 1))
            (328599 call = tmp[328594](328592 call tmp[328558] 2))
          }
          unknown distIsPrivatized[133580] "param"(133579 call _isPrivatized distToRemove[133530])
          if(133600 call _cond_test(133585 call != distToRemove[133530] nil[38]))
          {
            (133596 call = distToFree[133537](133595 call(133591 call .(133589 call postfix! distToRemove[133530]) c"remove")))
          }
          if(133617 call _cond_test(133606 call != arrToFree[133495] nil[38]))
          {
            (133615 call _delete_arr _instance[133477](133614 call _isPrivatized _instance[133477]))
          }
          if(133634 call _cond_test(133624 call != domToFree[133523] nil[38]))
          {
            (133632 call _delete_dom(133628 call postfix! instanceDom[133548]) domIsPrivatized[133544])
          }
          if(133651 call _cond_test(133641 call != distToFree[133537] nil[38]))
          {
            (133649 call _delete_dist(133645 call postfix! distToFree[133537]) distIsPrivatized[133580])
          }
        }
      }
    }
  }
  function _array[133150](?).equals[133679](arg _mt[133684]:_MT[227], arg this[133681]:_array[133150](?) :
  _array[133150](?), arg that[133676] :
  _array[133150](?)) : _unknown[43] "method"
  {
    if(133700 call _cond_test(133695 call ==(133688 call . this[133681] c"_value")(133692 call . that[133676] c"_value")))
    {
      (133698 return 1)
    }
    if(133719 call _cond_test(133714 call !=(133707 call . this[133681] c"rank")(133711 call . that[133676] c"rank")))
    {
      (133717 return 0)
    }
    if(133737 call _cond_test(133732 call !=(133725 call . this[133681] c"numElements")(133729 call . that[133676] c"numElements")))
    {
      (133735 return 0)
    }
    if(133844 call _cond_test(133756 call &&(133748 call isRectangularDom(133744 call . this[133681] c"_dom"))(133755 call isRectangularDom(133751 call . that[133676] c"_dom"))))
    {
      {
        unknown _indexOfInterest[133802] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[133803] "expr temp" "temp"
        (133812 'move' _iterator[133803](133810 call _getIterator(133820 call chpl_direct_range_iter 1(133817 call . this[133681] c"rank") 1)))
        Defer
        {
          {
            (133836 call _freeIterator _iterator[133803])
          }
        }
        { scopeless type
          (133825 'move' _indexOfInterest[133802](133822 call iteratorIndex _iterator[133803]))
        }
        ForLoop
        {
          unknown d[133829] "index var" "insert auto destroy"
          (133831 'move' d[133829] _indexOfInterest[133802])
          if(133797 call _cond_test(133792 call !=(133776 call .(133775 call(133770 call .(133767 call . this[133681] c"_dom") c"dim") d[133829]) c"size")(133789 call .(133788 call(133783 call .(133780 call . that[133676] c"_dom") c"dim") d[133829]) c"size")))
          {
            (133795 return 0)
          }
          label _continueLabel[133807]
          _indexOfInterest[133802]
          _iterator[133803]
        }
        label _breakLabel[133808]
      }
    }
    if(133918 call _cond_test(133854 call isArrayType(133850 call . this[133681] c"eltType")))
    {
      unknown ret[133856] 1
      Forall {
        induction variables:
          
          unknown thisArr[133900] "index var" "insert auto destroy"
          
          unknown thatArr[133902] "index var" "insert auto destroy"
        iterated expressions:
          this[133681]
          that[133676]
        shadow variables:
          ret[133871] 'reduce' intent outer var ret[133856]
            init block
            {
            }
            deinit block
            {
            }
        forall body
        {
          unknown tmp[133888] "temp"
          (133891 'move' tmp[133888](133890 'addr of' ret[133871]))
          (133896 call = tmp[133888](133893 call && tmp[133888](133886 call(133881 call . thisArr[133900] c"equals") thatArr[133902])))
        }
      }
      (133906 return ret[133856])
    }
    {
      (133915 return(133913 'reduce' anymanaged LogicalAndReduceScanOp[344251](?)(133911 call == this[133681] that[133676]) 0))
    }
  }
  { scopeless type
    bool[10]
  }
  function _cast[133931](arg t[133928] :
  _array[133150](?), param arg arg[133933]:_any[170](?)) : _unknown[43] "no doc"
  {
    unknown result[133936] t[133928]
    (133944 call chpl__transferArray result[133936] arg[133933])
    (133947 return result[133936])
  }
  function _cast[133957](arg t[133954] :
  string[24], arg x[133962] :
  (133959 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "no doc"
  {
    (133969 return(133968 call stringify x[133962]))
  }
  function isDmapType[133978](arg t[133976]:_any[170](?)) param : _unknown[43]
  {
    function isDmapHelp[133986](arg t[133983] :
    _distribution[116702](?)) param : _unknown[43]
    {
      (133989 return 1)
    }
    function isDmapHelp[133999](arg t[133997]:_any[170](?)) param : _unknown[43]
    {
      (134002 return 0)
    }
    (134011 return(134010 call isDmapHelp t[133976]))
  }
  function isDmapValue[134021](arg e[134018] :
  _distribution[116702](?)) param : _unknown[43] "no doc"
  {
    (134024 return 1)
  }
  function isDmapValue[134033](arg e[134031]:_any[170](?)) param : _unknown[43]
  {
    (134036 return 0)
  }
  function isDomainType[134045](arg t[134043]:_any[170](?)) param : _unknown[43]
  {
    (134052 return(328602 'is_subtype' _domain[123390](?) t[134043]))
  }
  function isDomainValue[134063](arg e[134060] :
  _domain[123390](?)) param : _unknown[43] "no doc"
  {
    (134066 return 1)
  }
  function isDomainValue[134075](arg e[134073]:_any[170](?)) param : _unknown[43]
  {
    (134078 return 0)
  }
  function isArrayType[134087](arg t[134085]:_any[170](?)) param : _unknown[43]
  {
    (134094 return(328603 'is_subtype' _array[133150](?) t[134085]))
  }
  function isArrayValue[134107](arg e[134104] :
  (134101 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43] "no doc"
  {
    (134110 return 1)
  }
  function isArrayValue[134119](arg e[134117]:_any[170](?)) param : _unknown[43]
  {
    (134122 return 0)
  }
  function +[134133](arg a[134130] :
  _array[133150](?), arg b[134136] :
  _array[133150](?)) : _unknown[43]
  {
    (134175 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134182 return(134180 call | a[134130] b[134136]))
  }
  where {
    (134155 call &&(134149 call ==(134143 'typeof'(134140 call . a[134130] c"_value"))(134148 'typeof'(134145 call . b[134136] c"_value")))(134154 call isAssociativeArr a[134130]))
  }
  function +=[134193](ref arg a[134190] :
  _array[133150](?), arg b[134196] :
  _array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (134220 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134231 call(134226 call . a[134190] c"chpl__assertSingleArrayDomain") "+=")
    (134235 call |= a[134190] b[134196])
  }
  where {
    (134215 call &&(134209 call ==(134203 'typeof'(134200 call . a[134190] c"_value"))(134208 'typeof'(134205 call . b[134196] c"_value")))(134214 call isAssociativeArr a[134190]))
  }
  function |[134247](arg a[134244] :
  _array[133150](?), arg b[134250] :
  _array[133150](?)) : _unknown[43]
  {
    (134274 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown newDom[134287](134285 call |(134278 call . a[134244] c"_dom")(134282 call . b[134250] c"_dom"))
    unknown ret[134300](134298 call chpl__buildArrayRuntimeType(134296 call chpl__ensureDomainExpr newDom[134287])(134293 call . a[134244] c"eltType"))
    {
      unknown tmp[134368] "temp"(134369 'task_get_serial')
      if(134365 call _cond_test(134310 call !(134307 call .(134304 call . newDom[134287] c"_value") c"parSafe")))
      {
        (134371 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[134333] "index var" "insert auto destroy"
            
            unknown v[134335] "index var" "insert auto destroy"
          iterated expressions:
            (134318 call . a[134244] c"_dom")
            a[134244]
          shadow variables:
          forall body
          {
            (134329 call =(134327 call ret[134300] k[134333]) v[134335])
          }
        }
        Forall {
          induction variables:
            
            unknown k[134360] "index var" "insert auto destroy"
            
            unknown v[134362] "index var" "insert auto destroy"
          iterated expressions:
            (134345 call . b[134250] c"_dom")
            b[134250]
          shadow variables:
          forall body
          {
            (134356 call =(134354 call ret[134300] k[134360]) v[134362])
          }
        }
      }
      (134375 'task_set_serial' tmp[134368])
    }
    (134378 return ret[134300])
  }
  where {
    (134269 call &&(134263 call ==(134257 'typeof'(134254 call . a[134244] c"_value"))(134262 'typeof'(134259 call . b[134250] c"_value")))(134268 call isAssociativeArr a[134244]))
  }
  function |=[134389](ref arg a[134386] :
  _array[133150](?), arg b[134392] :
  _array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (134416 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134425 call(134420 call . a[134386] c"chpl__assertSingleArrayDomain") "|=")
    {
      unknown tmp[134489] "temp"(134490 'task_get_serial')
      if(134486 call _cond_test(134437 call !(134434 call .(134431 call .(134428 call . a[134386] c"_dom") c"_value") c"parSafe")))
      {
        (134492 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown i[134456] "index var" "insert auto destroy"
          iterated expressions:
            (134441 call . b[134392] c"_dom")
          shadow variables:
          forall body
          {
            (134453 call(134448 call .(134445 call . a[134386] c"_dom") c"add") i[134456])
          }
        }
        Forall {
          induction variables:
            
            unknown k[134481] "index var" "insert auto destroy"
            
            unknown v[134483] "index var" "insert auto destroy"
          iterated expressions:
            (134466 call . b[134392] c"_dom")
            b[134392]
          shadow variables:
          forall body
          {
            (134477 call =(134475 call a[134386] k[134481]) v[134483])
          }
        }
      }
      (134496 'task_set_serial' tmp[134489])
    }
  }
  where {
    (134411 call &&(134405 call ==(134399 'typeof'(134396 call . a[134386] c"_value"))(134404 'typeof'(134401 call . b[134392] c"_value")))(134410 call isAssociativeArr a[134386]))
  }
  function &[134507](arg a[134504] :
  _array[133150](?), arg b[134510] :
  _array[133150](?)) : _unknown[43]
  {
    (134534 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown newDom[134547](134545 call &(134538 call . a[134504] c"_dom")(134542 call . b[134510] c"_dom"))
    unknown ret[134560](134558 call chpl__buildArrayRuntimeType(134556 call chpl__ensureDomainExpr newDom[134547])(134553 call . a[134504] c"eltType"))
    {
      unknown tmp[134592] "temp"(134593 'task_get_serial')
      if(134589 call _cond_test(134570 call !(134567 call .(134564 call . newDom[134547] c"_value") c"parSafe")))
      {
        (134595 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[134586] "index var" "insert auto destroy"
        iterated expressions:
          newDom[134547]
        shadow variables:
        forall body
        {
          (134582 call =(134577 call ret[134560] k[134586])(134581 call a[134504] k[134586]))
        }
      }
      (134599 'task_set_serial' tmp[134592])
    }
    (134602 return ret[134560])
  }
  where {
    (134529 call &&(134523 call ==(134517 'typeof'(134514 call . a[134504] c"_value"))(134522 'typeof'(134519 call . b[134510] c"_value")))(134528 call isAssociativeArr a[134504]))
  }
  function &=[134613](ref arg a[134610] :
  _array[133150](?), arg b[134616] :
  _array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (134640 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134649 call(134644 call . a[134610] c"chpl__assertSingleArrayDomain") "&=")
    {
      unknown tmp[134705] "temp"(134706 'task_get_serial')
      if(134702 call _cond_test(134661 call !(134658 call .(134655 call .(134652 call . a[134610] c"_dom") c"_value") c"parSafe")))
      {
        (134708 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[134698] "index var" "insert auto destroy"
          iterated expressions:
            (134665 call . a[134610] c"_dom")
          shadow variables:
          forall body
          {
            if(134691 call _cond_test(134678 call !(134677 call(134672 call .(134669 call . b[134616] c"_dom") c"contains") k[134698])))
            {
              (134689 call(134684 call .(134681 call . a[134610] c"_dom") c"remove") k[134698])
            }
          }
        }
      }
      (134712 'task_set_serial' tmp[134705])
    }
  }
  where {
    (134635 call &&(134629 call ==(134623 'typeof'(134620 call . a[134610] c"_value"))(134628 'typeof'(134625 call . b[134616] c"_value")))(134634 call isAssociativeArr a[134610]))
  }
  function -[134723](arg a[134720] :
  _array[133150](?), arg b[134726] :
  _array[133150](?)) : _unknown[43]
  {
    (134750 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown newDom[134763](134761 call -(134754 call . a[134720] c"_dom")(134758 call . b[134726] c"_dom"))
    unknown ret[134776](134774 call chpl__buildArrayRuntimeType(134772 call chpl__ensureDomainExpr newDom[134763])(134769 call . a[134720] c"eltType"))
    {
      unknown tmp[134808] "temp"(134809 'task_get_serial')
      if(134805 call _cond_test(134786 call !(134783 call .(134780 call . newDom[134763] c"_value") c"parSafe")))
      {
        (134811 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[134802] "index var" "insert auto destroy"
        iterated expressions:
          newDom[134763]
        shadow variables:
        forall body
        {
          (134798 call =(134793 call ret[134776] k[134802])(134797 call a[134720] k[134802]))
        }
      }
      (134815 'task_set_serial' tmp[134808])
    }
    (134818 return ret[134776])
  }
  where {
    (134745 call &&(134739 call ==(134733 'typeof'(134730 call . a[134720] c"_value"))(134738 'typeof'(134735 call . b[134726] c"_value")))(134744 call isAssociativeArr a[134720]))
  }
  function -=[134829](ref arg a[134826] :
  _array[133150](?), arg b[134832] :
  _array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (134856 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134865 call(134860 call . a[134826] c"chpl__assertSingleArrayDomain") "-=")
    {
      unknown tmp[134917] "temp"(134918 'task_get_serial')
      if(134914 call _cond_test(134877 call !(134874 call .(134871 call .(134868 call . a[134826] c"_dom") c"_value") c"parSafe")))
      {
        (134920 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[134911] "index var" "insert auto destroy"
        iterated expressions:
          (134881 call . a[134826] c"_dom")
        shadow variables:
        forall body
        {
          if(134905 call _cond_test(134893 call(134888 call .(134885 call . b[134832] c"_dom") c"contains") k[134911]))
          {
            (134903 call(134898 call .(134895 call . a[134826] c"_dom") c"remove") k[134911])
          }
        }
      }
      (134924 'task_set_serial' tmp[134917])
    }
  }
  where {
    (134851 call &&(134845 call ==(134839 'typeof'(134836 call . a[134826] c"_value"))(134844 'typeof'(134841 call . b[134832] c"_value")))(134850 call isAssociativeArr a[134826]))
  }
  function ^[134935](arg a[134932] :
  _array[133150](?), arg b[134938] :
  _array[133150](?)) : _unknown[43]
  {
    (134962 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown newDom[134975](134973 call ^(134966 call . a[134932] c"_dom")(134970 call . b[134938] c"_dom"))
    unknown ret[134988](134986 call chpl__buildArrayRuntimeType(134984 call chpl__ensureDomainExpr newDom[134975])(134981 call . a[134932] c"eltType"))
    {
      unknown tmp[135078] "temp"(135079 'task_get_serial')
      if(135075 call _cond_test(134998 call !(134995 call .(134992 call . newDom[134975] c"_value") c"parSafe")))
      {
        (135081 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[135034] "index var" "insert auto destroy"
          iterated expressions:
            (135002 call . a[134932] c"_dom")
          shadow variables:
          forall body
          {
            if(135028 call _cond_test(135015 call !(135014 call(135009 call .(135006 call . b[134938] c"_dom") c"contains") k[135034])))
            {
              (135025 call =(135020 call ret[134988] k[135034])(135024 call a[134932] k[135034]))
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135072] "index var" "insert auto destroy"
          iterated expressions:
            (135040 call . b[134938] c"_dom")
          shadow variables:
          forall body
          {
            if(135066 call _cond_test(135053 call !(135052 call(135047 call .(135044 call . a[134932] c"_dom") c"contains") k[135072])))
            {
              (135063 call =(135058 call ret[134988] k[135072])(135062 call b[134938] k[135072]))
            }
          }
        }
      }
      (135085 'task_set_serial' tmp[135078])
    }
    (135088 return ret[134988])
  }
  where {
    (134957 call &&(134951 call ==(134945 'typeof'(134942 call . a[134932] c"_value"))(134950 'typeof'(134947 call . b[134938] c"_value")))(134956 call isAssociativeArr a[134932]))
  }
  function ^=[135099](ref arg a[135096] :
  _array[133150](?), arg b[135102] :
  _array[133150](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (135126 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (135135 call(135130 call . a[135096] c"chpl__assertSingleArrayDomain") "^=")
    {
      unknown tmp[135237] "temp"(135238 'task_get_serial')
      if(135234 call _cond_test(135147 call !(135144 call .(135141 call .(135138 call . a[135096] c"_dom") c"_value") c"parSafe")))
      {
        (135240 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[135194] "index var" "insert auto destroy"
          iterated expressions:
            (135151 call . b[135102] c"_dom")
          shadow variables:
          forall body
          {
            if(135186 call _cond_test(135163 call(135158 call .(135155 call . a[135096] c"_dom") c"contains") k[135194]))
            {
              (135173 call(135168 call .(135165 call . a[135096] c"_dom") c"remove") k[135194])
            }
            {
              (135184 call(135179 call .(135176 call . a[135096] c"_dom") c"add") k[135194])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135231] "index var" "insert auto destroy"
          iterated expressions:
            (135200 call . b[135102] c"_dom")
          shadow variables:
          forall body
          {
            if(135224 call _cond_test(135212 call(135207 call .(135204 call . a[135096] c"_dom") c"contains") k[135231]))
            {
              (135221 call =(135216 call a[135096] k[135231])(135220 call b[135102] k[135231]))
            }
          }
        }
      }
      (135244 'task_set_serial' tmp[135237])
    }
  }
  where {
    (135121 call &&(135115 call ==(135109 'typeof'(135106 call . a[135096] c"_value"))(135114 'typeof'(135111 call . b[135102] c"_value")))(135120 call isAssociativeArr a[135096]))
  }
  function -[135255](arg a[135252] :
  _domain[123390](?), arg b[135258] :
  _domain[123390](?)) : _unknown[43]
  {
    unknown newDom[135275](135274 'typeof' a[135252])
    {
      unknown tmp[135319] "temp"(135320 'task_get_serial')
      if(135316 call _cond_test(135286 call !(135283 call .(135280 call . newDom[135275] c"_value") c"parSafe")))
      {
        (135322 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown e[135313] "index var" "insert auto destroy"
        iterated expressions:
          a[135252]
        shadow variables:
        forall body
        {
          if(135307 call _cond_test(135297 call !(135296 call(135291 call . b[135258] c"contains") e[135313])))
          {
            (135305 call(135300 call . newDom[135275] c"add") e[135313])
          }
        }
      }
      (135326 'task_set_serial' tmp[135319])
    }
    (135329 return newDom[135275])
  }
  where {
    (135271 call &&(135265 call ==(135262 'typeof' a[135252])(135264 'typeof' b[135258]))(135270 call isAssociativeDom a[135252]))
  }
  function -=[135340](ref arg a[135337] :
  _domain[123390](?), arg b[135343] :
  _domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135380] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135381] "expr temp" "temp"
      (135390 'move' _iterator[135381](135388 call _getIterator b[135343]))
      Defer
      {
        {
          (135406 call _freeIterator _iterator[135381])
        }
      }
      { scopeless type
        (135395 'move' _indexOfInterest[135380](135392 call iteratorIndex _iterator[135381]))
      }
      ForLoop
      {
        unknown e[135399] "index var" "insert auto destroy"
        (135401 'move' e[135399] _indexOfInterest[135380])
        if(135375 call _cond_test(135366 call(135361 call . a[135337] c"contains") e[135399]))
        {
          (135373 call(135368 call . a[135337] c"remove") e[135399])
        }
        label _continueLabel[135385]
        _indexOfInterest[135380]
        _iterator[135381]
      }
      label _breakLabel[135386]
    }
  }
  where {
    (135356 call &&(135350 call ==(135347 'typeof' a[135337])(135349 'typeof' b[135343]))(135355 call isAssociativeDom a[135337]))
  }
  function |[135423](arg a[135420] :
  _domain[123390](?), arg b[135426] :
  _domain[123390](?)) : _unknown[43]
  {
    (135445 return(135443 call + a[135420] b[135426]))
  }
  where {
    (135439 call &&(135433 call ==(135430 'typeof' a[135420])(135432 'typeof' b[135426]))(135438 call isAssociativeDom a[135420]))
  }
  function |=[135457](ref arg a[135454] :
  _domain[123390](?), arg b[135460] :
  _domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135485] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135486] "expr temp" "temp"
      (135495 'move' _iterator[135486](135493 call _getIterator b[135460]))
      Defer
      {
        {
          (135511 call _freeIterator _iterator[135486])
        }
      }
      { scopeless type
        (135500 'move' _indexOfInterest[135485](135497 call iteratorIndex _iterator[135486]))
      }
      ForLoop
      {
        unknown e[135504] "index var" "insert auto destroy"
        (135506 'move' e[135504] _indexOfInterest[135485])
        (135483 call(135478 call . a[135454] c"add") e[135504])
        label _continueLabel[135490]
        _indexOfInterest[135485]
        _iterator[135486]
      }
      label _breakLabel[135491]
    }
  }
  where {
    (135473 call &&(135467 call ==(135464 'typeof' a[135454])(135466 'typeof' b[135460]))(135472 call isAssociativeDom a[135454]))
  }
  function +=[135528](ref arg a[135525] :
  _domain[123390](?), arg b[135531] :
  _domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (135548 call |= a[135525] b[135531])
  }
  where {
    (135544 call &&(135538 call ==(135535 'typeof' a[135525])(135537 'typeof' b[135531]))(135543 call isAssociativeDom a[135525]))
  }
  function &[135561](arg a[135558] :
  _domain[123390](?), arg b[135564] :
  _domain[123390](?)) : _unknown[43]
  {
    unknown newDom[135581](135580 'typeof' a[135558])
    {
      unknown tmp[135626] "temp"(135627 'task_get_serial')
      if(135623 call _cond_test(135592 call !(135589 call .(135586 call . newDom[135581] c"_value") c"parSafe")))
      {
        (135629 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[135620] "index var" "insert auto destroy"
        iterated expressions:
          a[135558]
        shadow variables:
          newDom[135597] 'ref' intent outer var newDom[135581]
            init block
            {
            }
            deinit block
            {
            }
        forall body
        {
          if(135614 call _cond_test(135608 call(135603 call . b[135564] c"contains") k[135620]))
          {
            (135611 call += newDom[135597] k[135620])
          }
        }
      }
      (135633 'task_set_serial' tmp[135626])
    }
    (135636 return newDom[135581])
  }
  where {
    (135577 call &&(135571 call ==(135568 'typeof' a[135558])(135570 'typeof' b[135564]))(135576 call isAssociativeDom a[135558]))
  }
  function &=[135647](ref arg a[135644] :
  _domain[123390](?), arg b[135650] :
  _domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown removeSet[135673](135671 call chpl__buildDomainRuntimeType defaultDist[93214](135666 call . a[135644] c"idxType"))
    {
      unknown _indexOfInterest[135698] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135699] "expr temp" "temp"
      (135708 'move' _iterator[135699](135706 call _getIterator a[135644]))
      Defer
      {
        {
          (135724 call _freeIterator _iterator[135699])
        }
      }
      { scopeless type
        (135713 'move' _indexOfInterest[135698](135710 call iteratorIndex _iterator[135699]))
      }
      ForLoop
      {
        unknown e[135717] "index var" "insert auto destroy"
        (135719 'move' e[135717] _indexOfInterest[135698])
        if(135693 call _cond_test(135686 call !(135685 call(135680 call . b[135650] c"contains") e[135717])))
        {
          (135690 call += removeSet[135673] e[135717])
        }
        label _continueLabel[135703]
        _indexOfInterest[135698]
        _iterator[135699]
      }
      label _breakLabel[135704]
    }
    {
      unknown _indexOfInterest[135741] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135742] "expr temp" "temp"
      (135751 'move' _iterator[135742](135749 call _getIterator removeSet[135673]))
      Defer
      {
        {
          (135767 call _freeIterator _iterator[135742])
        }
      }
      { scopeless type
        (135756 'move' _indexOfInterest[135741](135753 call iteratorIndex _iterator[135742]))
      }
      ForLoop
      {
        unknown e[135760] "index var" "insert auto destroy"
        (135762 'move' e[135760] _indexOfInterest[135741])
        (135739 call(135734 call . a[135644] c"remove") e[135760])
        label _continueLabel[135746]
        _indexOfInterest[135741]
        _iterator[135742]
      }
      label _breakLabel[135747]
    }
  }
  where {
    (135663 call &&(135657 call ==(135654 'typeof' a[135644])(135656 'typeof' b[135650]))(135662 call isAssociativeDom a[135644]))
  }
  function ^[135783](arg a[135780] :
  _domain[123390](?), arg b[135786] :
  _domain[123390](?)) : _unknown[43]
  {
    unknown newDom[135803](135802 'typeof' a[135780])
    {
      unknown tmp[135876] "temp"(135877 'task_get_serial')
      if(135873 call _cond_test(135814 call !(135811 call .(135808 call . newDom[135803] c"_value") c"parSafe")))
      {
        (135879 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[135841] "index var" "insert auto destroy"
          iterated expressions:
            a[135780]
          shadow variables:
          forall body
          {
            if(135835 call _cond_test(135825 call !(135824 call(135819 call . b[135786] c"contains") k[135841])))
            {
              (135833 call(135828 call . newDom[135803] c"add") k[135841])
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135870] "index var" "insert auto destroy"
          iterated expressions:
            b[135786]
          shadow variables:
          forall body
          {
            if(135864 call _cond_test(135854 call !(135853 call(135848 call . a[135780] c"contains") k[135870])))
            {
              (135862 call(135857 call . newDom[135803] c"add") k[135870])
            }
          }
        }
      }
      (135883 'task_set_serial' tmp[135876])
    }
    (135886 return newDom[135803])
  }
  where {
    (135799 call &&(135793 call ==(135790 'typeof' a[135780])(135792 'typeof' b[135786]))(135798 call isAssociativeDom a[135780]))
  }
  function ^=[135897](ref arg a[135894] :
  _domain[123390](?), arg b[135900] :
  _domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135946] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135947] "expr temp" "temp"
      (135956 'move' _iterator[135947](135954 call _getIterator a[135894]))
      Defer
      {
        {
          (135972 call _freeIterator _iterator[135947])
        }
      }
      { scopeless type
        (135961 'move' _indexOfInterest[135946](135958 call iteratorIndex _iterator[135947]))
      }
      ForLoop
      {
        unknown e[135965] "index var" "insert auto destroy"
        (135967 'move' e[135965] _indexOfInterest[135946])
        if(135940 call _cond_test(135923 call(135918 call . b[135900] c"contains") e[135965]))
        {
          (135930 call(135925 call . a[135894] c"remove") e[135965])
        }
        {
          (135938 call(135933 call . a[135894] c"add") e[135965])
        }
        label _continueLabel[135951]
        _indexOfInterest[135946]
        _iterator[135947]
      }
      label _breakLabel[135952]
    }
  }
  where {
    (135913 call &&(135907 call ==(135904 'typeof' a[135894])(135906 'typeof' b[135900]))(135912 call isAssociativeDom a[135894]))
  }
  function +=[135989](ref arg sd[135986] :
  _domain[123390](?), arg inds[135998] :
  (135995 call chpl__buildArrayRuntimeType nil[38](135993 call chpl__buildIndexType sd[135986]))) : _unknown[43] "assignop" "no return value for void"
  {
    if(136014 call _cond_test(136010 call ==(136006 call . inds[135998] c"size") 0))
    {
      (136012 return _void[47])
    }
    (136029 call(136024 call .(136021 call . sd[135986] c"_value") c"dsiBulkAdd") inds[135998])
  }
  where {
    (136004 call isSparseDom sd[135986])
  }
  function +=[136040](ref arg sd[136037] :
  _domain[123390](?), arg d[136043] :
  _domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    if(136083 call _cond_test(136079 call ==(136075 call . d[136043] c"size") 0))
    {
      (136081 return _void[47])
    }
    const indCount[136093] "const"(136090 call . d[136043] c"numIndices")
    unknown arr[136114](136112 call chpl__buildArrayRuntimeType(136110 call chpl__ensureDomainExpr(136103 call chpl__buildDomainExpr(136100 call #(136097 call chpl_build_low_bounded_range 0) indCount[136093])))(136108 call chpl__buildIndexType sd[136037]))
    {
      unknown _indexOfInterest[136136] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136137] "expr temp" "temp"
      (136154 'move' _iterator[136137](136127 call _build_tuple(136146 call _getIterator d[136043])(136151 call _getIterator(136149 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (136184 call _freeIterator _iterator[136137])
        }
      }
      { scopeless type
        (136159 'move' _indexOfInterest[136136](136156 call iteratorIndex _iterator[136137]))
      }
      ForLoop
      {
        (136164 call _check_tuple_var_decl _indexOfInterest[136136] 2)
        unknown i[136170] "index var" "insert auto destroy"
        (136172 'move' i[136170](136168 call _indexOfInterest[136136] 1))
        unknown j[136177] "index var" "insert auto destroy"
        (136179 'move' j[136177](136175 call _indexOfInterest[136136] 2))
        (136133 call =(136131 call arr[136114] j[136177]) i[136170])
        label _continueLabel[136141]
        _indexOfInterest[136136]
        _iterator[136137]
      }
      label _breakLabel[136142]
    }
    unknown rowSorted[136192] 0
    (136207 call(136199 call .(136196 call . sd[136037] c"_value") c"dsiBulkAdd") arr[136114] rowSorted[136192] 1 0)
  }
  where {
    (136072 call &&(136060 call &&(136049 call isSparseDom sd[136037])(136058 call ==(136051 call . d[136043] c"rank")(136055 call . sd[136037] c"rank")))(136070 call ==(136063 call . sd[136037] c"idxType")(136067 call . d[136043] c"idxType")))
  }
  function -=[136218](ref arg sd[136215] :
  _domain[123390](?), arg inds[136227] :
  (136224 call chpl__buildArrayRuntimeType nil[38](136222 call chpl__buildIndexType sd[136215]))) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[136241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136242] "expr temp" "temp"
      (136251 'move' _iterator[136242](136249 call _getIterator inds[136227]))
      Defer
      {
        {
          (136267 call _freeIterator _iterator[136242])
        }
      }
      { scopeless type
        (136256 'move' _indexOfInterest[136241](136253 call iteratorIndex _iterator[136242]))
      }
      ForLoop
      {
        unknown ind[136260] "index var" "insert auto destroy"
        (136262 'move' ind[136260] _indexOfInterest[136241])
        (136238 call -= sd[136215] ind[136260])
        label _continueLabel[136246]
        _indexOfInterest[136241]
        _iterator[136242]
      }
      label _breakLabel[136247]
    }
  }
  where {
    (136233 call isSparseDom sd[136215])
  }
  function -=[136284](ref arg sd[136281] :
  _domain[123390](?), arg d[136287] :
  _domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[136325] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136326] "expr temp" "temp"
      (136335 'move' _iterator[136326](136333 call _getIterator d[136287]))
      Defer
      {
        {
          (136351 call _freeIterator _iterator[136326])
        }
      }
      { scopeless type
        (136340 'move' _indexOfInterest[136325](136337 call iteratorIndex _iterator[136326]))
      }
      ForLoop
      {
        unknown ind[136344] "index var" "insert auto destroy"
        (136346 'move' ind[136344] _indexOfInterest[136325])
        (136322 call -= sd[136281] ind[136344])
        label _continueLabel[136330]
        _indexOfInterest[136325]
        _iterator[136326]
      }
      label _breakLabel[136331]
    }
  }
  where {
    (136316 call &&(136304 call &&(136293 call isSparseDom sd[136281])(136302 call ==(136295 call . d[136287] c"rank")(136299 call . sd[136281] c"rank")))(136314 call ==(136307 call . sd[136281] c"idxType")(136311 call . d[136287] c"idxType")))
  }
  function isCollapsedDimension[136378](arg r[136375] :
  (136374 call range[66183](?) unknown e[136365] unknown b[136368] unknown s[136370] unknown a[136372])) param : _unknown[43] "no doc"
  {
    (136381 return 0)
  }
  function isCollapsedDimension[136390](arg r[136388]:_any[170](?)) param : _unknown[43] "no doc"
  {
    (136393 return 1)
  }
  function chpl__anyStridable[136402](arg ranges[136400]:_any[170](?)) param : _unknown[43]
  {
    {
      unknown i[136426] 0
      unknown tmp[136427] "maybe param" "temp"
      (136439 'move' tmp[136427](136437 call chpl_compute_low_param_loop_bound 1(136406 call . ranges[136400] c"size")))
      unknown tmp[136428] "maybe param" "temp"
      (136449 'move' tmp[136428](136447 call chpl_compute_high_param_loop_bound 1(136444 call . ranges[136400] c"size")))
      unknown tmp[136429] "maybe param" "temp"
      (136452 'move' tmp[136429] 1)
      ParamForLoop
      { i[136426] tmp[136427] tmp[136428] tmp[136429]
        if(136421 call _cond_test(136415 call .(136414 call ranges[136400] i[136426]) c"stridable"))
        {
          (136419 return 1)
        }
      }
      label _unused_continueLabel[136431]
      label _breakLabel[136430]
    }
    (136465 return 0)
  }
  function chpl__anyRankChangeStridable[136473](arg args[136471]:_any[170](?)) param : _unknown[43]
  {
    {
      unknown i[136509] 0
      unknown tmp[136510] "maybe param" "temp"
      (136522 'move' tmp[136510](136520 call chpl_compute_low_param_loop_bound 1(136477 call . args[136471] c"size")))
      unknown tmp[136511] "maybe param" "temp"
      (136532 'move' tmp[136511](136530 call chpl_compute_high_param_loop_bound 1(136527 call . args[136471] c"size")))
      unknown tmp[136512] "maybe param" "temp"
      (136535 'move' tmp[136512] 1)
      ParamForLoop
      { i[136509] tmp[136510] tmp[136511] tmp[136512]
        if(136504 call _cond_test(136488 call isRangeValue(136486 call args[136471] i[136509])))
        {
          if(136499 call _cond_test(136493 call .(136492 call args[136471] i[136509]) c"stridable"))
          {
            (136497 return 1)
          }
        }
      }
      label _unused_continueLabel[136514]
      label _breakLabel[136513]
    }
    (136548 return 0)
  }
  function chpl__countRanges[136556](arg arg[136554]:_any[170](?)) param : _unknown[43]
  {
    (136565 return(136563 call _cast int(64)[13](136561 call isRangeValue arg[136554])))
  }
  function chpl__countRanges[136574](arg arg[136572]:_any[170](?), arg args[136577]:_any[170](?) ...) param : _unknown[43]
  {
    (136591 return(136589 call +(136583 call chpl__countRanges arg[136572])(136588 call chpl__countRanges(136586 'expand_tuple' args[136577]))))
  }
  function _validRankChangeArgs[136600](arg args[136598]:_any[170](?), arg idxType[136602]:_any[170](?)) param : _unknown[43]
  {
    function _validRankChangeArg[136608](arg idxType[136606]:_any[170](?), arg r[136614] :
    (136613 call range[66183](?) ?[249])) param : _unknown[43]
    {
      (136618 return 1)
    }
    function _validRankChangeArg[136628](arg idxType[136626]:_any[170](?), arg i[136631] :
    idxType[136626]) param : _unknown[43]
    {
      (136635 return 1)
    }
    function _validRankChangeArg[136644](arg idxType[136642]:_any[170](?), arg x[136646]:_any[170](?)) param : _unknown[43]
    {
      (136649 return 0)
    }
    function allValid[136656]() param : _unknown[43]
    {
      {
        unknown dim[136684] 0
        unknown tmp[136685] "maybe param" "temp"
        (136697 'move' tmp[136685](136695 call chpl_compute_low_param_loop_bound 1(136660 call . args[136598] c"size")))
        unknown tmp[136686] "maybe param" "temp"
        (136707 'move' tmp[136686](136705 call chpl_compute_high_param_loop_bound 1(136702 call . args[136598] c"size")))
        unknown tmp[136687] "maybe param" "temp"
        (136710 'move' tmp[136687] 1)
        ParamForLoop
        { dim[136684] tmp[136685] tmp[136686] tmp[136687]
          {
            if(136678 call _cond_test(136673 call !(136672 call _validRankChangeArg idxType[136602](136671 call args[136598] dim[136684]))))
            {
              (136676 return 0)
            }
          }
        }
        label _unused_continueLabel[136689]
        label _breakLabel[136688]
      }
      (136723 return 1)
    }
    function oneRange[136729]() param : _unknown[43]
    {
      {
        unknown dim[136754] 0
        unknown tmp[136755] "maybe param" "temp"
        (136767 'move' tmp[136755](136765 call chpl_compute_low_param_loop_bound 1(136733 call . args[136598] c"size")))
        unknown tmp[136756] "maybe param" "temp"
        (136777 'move' tmp[136756](136775 call chpl_compute_high_param_loop_bound 1(136772 call . args[136598] c"size")))
        unknown tmp[136757] "maybe param" "temp"
        (136780 'move' tmp[136757] 1)
        ParamForLoop
        { dim[136754] tmp[136755] tmp[136756] tmp[136757]
          {
            if(136748 call _cond_test(136744 call isRange(136742 call args[136598] dim[136754])))
            {
              (136746 return 1)
            }
          }
        }
        label _unused_continueLabel[136759]
        label _breakLabel[136758]
      }
      (136793 return 0)
    }
    function oneNonRange[136799]() param : _unknown[43]
    {
      {
        unknown dim[136826] 0
        unknown tmp[136827] "maybe param" "temp"
        (136839 'move' tmp[136827](136837 call chpl_compute_low_param_loop_bound 1(136803 call . args[136598] c"size")))
        unknown tmp[136828] "maybe param" "temp"
        (136849 'move' tmp[136828](136847 call chpl_compute_high_param_loop_bound 1(136844 call . args[136598] c"size")))
        unknown tmp[136829] "maybe param" "temp"
        (136852 'move' tmp[136829] 1)
        ParamForLoop
        { dim[136826] tmp[136827] tmp[136828] tmp[136829]
          {
            if(136820 call _cond_test(136815 call !(136814 call isRange(136812 call args[136598] dim[136826]))))
            {
              (136818 return 1)
            }
          }
        }
        label _unused_continueLabel[136831]
        label _breakLabel[136830]
      }
      (136865 return 0)
    }
    (136882 return(136880 call &&(136875 call &&(136871 call allValid)(136874 call oneRange))(136879 call oneNonRange)))
  }
  function =[136892](ref arg a[136889] :
  _distribution[116702](?), arg b[136895] :
  _distribution[116702](?)) : _unknown[43] "assignop" "no return value for void"
  {
    if(137050 call _cond_test(136903 call ==(136899 call . a[136889] c"_value") nil[38]))
    {
      (136917 'move' a[136889](136916 call chpl__autoCopy(136914 call(136910 call . b[136895] c"clone"))))
    }
    {
      if(137046 call _cond_test(136933 call ==(136929 call .(136926 call .(136921 call . a[136889] c"_value") c"_doms") c"length") 0))
      {
        if(136967 call _cond_test(136945 call !=(136939 'typeof'(136936 call . a[136889] c"_value"))(136944 'typeof'(136941 call . b[136895] c"_value"))))
        {
          (136965 call compilerError "type mismatch in distribution assignment")
        }
        if(137000 call _cond_test(136981 call ==(136974 call . a[136889] c"_value")(136978 call . b[136895] c"_value")))
        {
        }
        {
          (136998 call(136990 call .(136985 call . a[136889] c"_value") c"dsiAssign")(136994 call . b[136895] c"_value"))
        }
        if(137020 call _cond_test(137011 call _isPrivatized(137007 call . a[136889] c"_instance")))
        {
          (137018 call _reprivatize(137014 call . a[136889] c"_value"))
        }
      }
      {
        (137043 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
  }
  function =[137064](ref arg a[137061] :
  _domain[123390](?), arg b[137067] :
  _domain[123390](?)) : _unknown[43] "assignop" "no return value for void"
  {
    if(137100 call _cond_test(137078 call !=(137071 call . a[137061] c"rank")(137075 call . b[137067] c"rank")))
    {
      (137098 call compilerError "rank mismatch in domain assignment")
    }
    if(137155 call _cond_test(137118 call &&(137110 call !(137109 call isOpaqueDom a[137061]))(137116 call !(137115 call isOpaqueDom b[137067]))))
    {
      if(137150 call _cond_test(137128 call !=(137121 call . a[137061] c"idxType")(137125 call . b[137067] c"idxType")))
      {
        (137148 call compilerError "index type mismatch in domain assignment")
      }
    }
    if(137209 call _cond_test(137168 call &&(137163 call isRectangularDom a[137061])(137167 call isRectangularDom b[137067])))
    {
      if(137204 call _cond_test(137180 call &&(137174 call !(137171 call . a[137061] c"stridable"))(137177 call . b[137067] c"stridable")))
      {
        (137202 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    (137225 call(137218 call .(137215 call . a[137061] c"_instance") c"dsiAssignDomain") b[137067](lhsPrivate = 0))
    if(137243 call _cond_test(137233 call _isPrivatized(137229 call . a[137061] c"_instance")))
    {
      (137240 call _reprivatize(137236 call . a[137061] c"_instance"))
    }
  }
  function =[137255](ref arg a[137252] :
  _domain[123390](?), arg b[137258] :
  _tuple[58502](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (137266 call(137262 call . a[137252] c"clear"))
    {
      unknown _indexOfInterest[137289] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137290] "expr temp" "temp"
      (137299 'move' _iterator[137290](137297 call _getIterator(137307 call chpl_direct_range_iter 1(137304 call . b[137258] c"size") 1)))
      Defer
      {
        {
          (137323 call _freeIterator _iterator[137290])
        }
      }
      { scopeless type
        (137312 'move' _indexOfInterest[137289](137309 call iteratorIndex _iterator[137290]))
      }
      ForLoop
      {
        unknown ind[137316] "index var" "insert auto destroy"
        (137318 'move' ind[137316] _indexOfInterest[137289])
        {
          (137286 call(137278 call . a[137252] c"add")(137284 call b[137258] ind[137316]))
        }
        label _continueLabel[137294]
        _indexOfInterest[137289]
        _iterator[137290]
      }
      label _breakLabel[137295]
    }
  }
  function =[137338](ref arg d[137335] :
  _domain[123390](?), arg r[137344] :
  (137343 call range[66183](?) ?[249])) : _unknown[43] "assignop" "no return value for void"
  {
    (137352 call = d[137335](137350 call chpl__buildDomainExpr r[137344]))
  }
  function chpl__isLegalRectTupDomAssign[137362](arg d[137360]:_any[170](?), arg t[137364]:_any[170](?)) param : _unknown[43]
  {
    function isRangeTuple[137370](arg a[137368]:_any[170](?)) param : _unknown[43]
    {
      function peelArgs[137376](arg first[137374]:_any[170](?), arg rest[137379]:_any[170](?) ...) param : _unknown[43]
      {
        (137416 return(137413 IfExpr (137387 call >(137383 call . rest[137379] c"size") 1) then
        { scopeless
          (137398 call &&(137392 call isRange first[137374])(137397 call peelArgs(137395 'expand_tuple' rest[137379])))
        } else
        { scopeless
          (137411 call &&(137403 call isRange first[137374])(137410 call isRange(137408 call rest[137379] 1)))
        } ))
      }
      function peelArgs[137426](arg first[137424]:_any[170](?)) param : _unknown[43]
      {
        (137432 return(137431 call isRange first[137424]))
      }
      (137452 return(137449 IfExpr (137441 call !(137440 call isTuple a[137368])) then
      { scopeless
        0
      } else
      { scopeless
        (137448 call peelArgs(137446 'expand_tuple' a[137368]))
      } ))
    }
    function strideSafe[137461](arg d[137459]:_any[170](?), arg rt[137463]:_any[170](?), param arg dim[137467] :
    int(64)[13] =
    1) param : _unknown[43]
    {
      (137534 return(137531 IfExpr (137476 call == dim[137467](137473 call . d[137459] c"rank")) then
      { scopeless
        (137497 call ||(137485 call .(137484 call(137479 call . d[137459] c"dim") dim[137467]) c"stridable")(137495 call !(137492 call .(137491 call rt[137463] dim[137467]) c"stridable")))
      } else
      { scopeless
        (137529 call &&(137518 call ||(137506 call .(137505 call(137500 call . d[137459] c"dim") dim[137467]) c"stridable")(137516 call !(137513 call .(137512 call rt[137463] dim[137467]) c"stridable")))(137528 call strideSafe d[137459] rt[137463](137526 call + dim[137467] 1)))
      } ))
    }
    (137562 return(137560 call &&(137553 call &&(137542 call isRangeTuple t[137364])(137551 call ==(137544 call . d[137360] c"rank")(137548 call . t[137364] c"size")))(137559 call strideSafe d[137360] t[137364])))
  }
  function =[137572](ref arg d[137569] :
  _domain[123390](?), arg rt[137575] :
  _tuple[58502](?)) : _unknown[43] "assignop" "no return value for void"
  {
    (137589 call = d[137569](137587 call chpl__buildDomainExpr(137585 'expand_tuple' rt[137575])))
  }
  where {
    (137582 call chpl__isLegalRectTupDomAssign d[137569] rt[137575])
  }
  function =[137602](ref arg a[137599] :
  _domain[123390](?), arg b[137604]:_any[170](?)) : _unknown[43] "assignop" "no return value for void"
  {
    if(137630 call _cond_test(137609 call isRectangularDom a[137599]))
    {
      (137628 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137641 call(137637 call . a[137599] c"clear"))
    {
      unknown _indexOfInterest[137654] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137655] "expr temp" "temp"
      (137664 'move' _iterator[137655](137662 call _getIterator b[137604]))
      Defer
      {
        {
          (137680 call _freeIterator _iterator[137655])
        }
      }
      { scopeless type
        (137669 'move' _indexOfInterest[137654](137666 call iteratorIndex _iterator[137655]))
      }
      ForLoop
      {
        unknown ind[137673] "index var" "insert auto destroy"
        (137675 'move' ind[137673] _indexOfInterest[137654])
        {
          (137651 call(137646 call . a[137599] c"add") ind[137673])
        }
        label _continueLabel[137659]
        _indexOfInterest[137654]
        _iterator[137655]
      }
      label _breakLabel[137660]
    }
  }
  function chpl__serializeAssignment[137697](arg a[137694] :
  (137691 call chpl__buildArrayRuntimeType nil[38]), arg b[137699]:_any[170](?)) param : _unknown[43]
  {
    if(137717 call _cond_test(137712 call &&(137706 call !=(137702 call . a[137694] c"rank") 1)(137711 call isRange b[137699])))
    {
      (137715 return 1)
    }
    if(137778 call _cond_test(137773 call ||(137743 call &&(137735 call &&(137727 call !(137726 call isRectangularArr a[137694]))(137733 call !(137732 call isAssociativeArr a[137694])))(137741 call !(137740 call isSparseArr a[137694])))(137771 call &&(137763 call &&(137755 call &&(137748 call isArray b[137699])(137753 call !(137752 call isRectangularArr b[137699])))(137761 call !(137760 call isAssociativeArr b[137699])))(137769 call !(137768 call isSparseArr b[137699])))))
    {
      (137776 return 1)
    }
    (137784 return 0)
  }
  function chpl__compatibleForBulkTransfer[137796](arg a[137793] :
  (137790 call chpl__buildArrayRuntimeType nil[38]), arg b[137801] :
  (137798 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    if(137810 call _cond_test(137805 call ! useBulkTransfer[111833]))
    {
      (137808 return 0)
    }
    if(137829 call _cond_test(137824 call !=(137817 call . a[137793] c"eltType")(137821 call . b[137801] c"eltType")))
    {
      (137827 return 0)
    }
    if(137846 call _cond_test(137841 call !(137840 call chpl__supportedDataTypeForBulkTransfer(137836 call . a[137793] c"eltType"))))
    {
      (137844 return 0)
    }
    (137852 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137860](arg t[137858]:_any[170](?)) param : _unknown[43]
  {
    if(137889 call _cond_test(137872 call ||(328606 'is_subtype' borrowed[200](?) t[137858])(328607 'is_subtype' unmanaged[209](?) t[137858])))
    {
      (137875 return 0)
    }
    {
      unknown x[137879] t[137858]
      (137887 return(137886 call chpl__supportedDataTypeForBulkTransfer x[137879]))
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137902](arg x[137899] :
  string[24]) param : _unknown[43]
  {
    (137905 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137916](arg x[137913] :
  _syncvar[85613](?)) param : _unknown[43]
  {
    (137919 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137930](arg x[137927] :
  _singlevar[87725](?)) param : _unknown[43]
  {
    (137933 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137944](arg x[137941] :
  _domain[123390](?)) param : _unknown[43]
  {
    (137947 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137960](arg x[137957] :
  (137954 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (137963 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137974](arg x[137971] :
  _distribution[116702](?)) param : _unknown[43]
  {
    (137977 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137988](arg x[137985] :
  chpl_anycomplex[176](?)) param : _unknown[43]
  {
    (137991 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[138003](arg x[138000] :
  unknown t[137998]) param : _unknown[43]
  {
    (138019 return(138018 call isPODType t[137998]))
  }
  where {
    (138013 call ||(138008 call isRecordType t[137998])(138012 call isTupleType t[137998]))
  }
  function chpl__supportedDataTypeForBulkTransfer[138032](arg x[138029] :
  unknown t[138027]) param : _unknown[43]
  {
    (138039 return 0)
  }
  where {
    (138037 call isUnionType t[138027])
  }
  function chpl__supportedDataTypeForBulkTransfer[138052](arg x[138049] :
  object[253]) param : _unknown[43]
  {
    (138055 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[138064](arg x[138062]:_any[170](?)) param : _unknown[43]
  {
    (138067 return 1)
  }
  function checkArrayShapesUponAssignment[138080](arg a[138077] :
  (138074 call chpl__buildArrayRuntimeType nil[38]), arg b[138085] :
  (138082 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "no doc" "no return value for void"
  {
    if(138262 call _cond_test(138096 call &&(138091 call isRectangularArr a[138077])(138095 call isRectangularArr b[138085])))
    {
      const aDims[138110] "const"(138109 call(138105 call .(138102 call .(138099 call . a[138077] c"_value") c"dom") c"dsiDims"))
      const bDims[138125] "const"(138124 call(138120 call .(138117 call .(138114 call . b[138085] c"_value") c"dom") c"dsiDims"))
      (138141 call compilerAssert(138138 call ==(138131 call . aDims[138110] c"size")(138135 call . bDims[138125] c"size")))
      {
        unknown i[138224] 0
        unknown tmp[138225] "maybe param" "temp"
        (138237 'move' tmp[138225](138235 call chpl_compute_low_param_loop_bound 1(138145 call . aDims[138110] c"size")))
        unknown tmp[138226] "maybe param" "temp"
        (138247 'move' tmp[138226](138245 call chpl_compute_high_param_loop_bound 1(138242 call . aDims[138110] c"size")))
        unknown tmp[138227] "maybe param" "temp"
        (138250 'move' tmp[138227] 1)
        ParamForLoop
        { i[138224] tmp[138225] tmp[138226] tmp[138227]
          {
            if(138218 call _cond_test(138164 call !=(138154 call .(138153 call aDims[138110] i[138224]) c"length")(138161 call .(138160 call bDims[138125] i[138224]) c"length")))
            {
              (138216 call halt "assigning between arrays of different shapes in dimension " i[138224] ": "(138190 call .(138189 call aDims[138110] i[138224]) c"length") " vs. "(138213 call .(138212 call bDims[138125] i[138224]) c"length"))
            }
          }
        }
        label _unused_continueLabel[138229]
        label _breakLabel[138228]
      }
    }
    {
    }
  }
  function =[138277](ref arg a[138274] :
  (138271 call chpl__buildArrayRuntimeType nil[38]), arg b[138282] :
  (138279 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    if(138315 call _cond_test(138293 call !=(138286 call . a[138274] c"rank")(138290 call . b[138282] c"rank")))
    {
      (138313 call compilerError "rank mismatch in array assignment")
    }
    if(138330 call _cond_test(138326 call ==(138322 call . b[138282] c"_value") nil[38]))
    {
      (138328 return _void[47])
    }
    if(138348 call _cond_test(138343 call ==(138336 call . a[138274] c"_value")(138340 call . b[138282] c"_value")))
    {
      (138345 return _void[47])
    }
    if(138370 call _cond_test(138366 call &&(138357 call ==(138353 call . a[138274] c"size") 0)(138364 call ==(138360 call . b[138282] c"size") 0)))
    {
      (138368 return _void[47])
    }
    if(138382 call _cond_test 1)
    {
      (138380 call checkArrayShapesUponAssignment a[138274] b[138282])
    }
    (138391 call chpl__uncheckedArrayTransfer a[138274] b[138282])
  }
  function chpl__uncheckedArrayTransfer[138403](ref arg a[138400] :
  (138397 call chpl__buildArrayRuntimeType nil[38]), arg b[138408] :
  (138405 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "no return value for void"
  {
    if(138452 call _cond_test(138423 call &&(138416 call !(138415 call chpl__serializeAssignment a[138400] b[138408]))(138422 call chpl__compatibleForBulkTransfer a[138400] b[138408])))
    {
      if(138440 call _cond_test(138431 call ==(138429 call chpl__bulkTransferArray a[138400] b[138408]) 0))
      {
        (138437 call chpl__transferArray a[138400] b[138408])
      }
    }
    {
      (138449 call chpl__transferArray a[138400] b[138408])
    }
  }
  function chpl__bulkTransferArray[138469](ref arg a[138466] :
  (138464 call chpl__buildArrayRuntimeType unknown AD[138461]), arg b[138476] :
  (138474 call chpl__buildArrayRuntimeType unknown BD[138471])) : _unknown[43] "inline"
  {
    (138486 return(138485 call chpl__bulkTransferArray a[138466] AD[138461] b[138476] BD[138471]))
  }
  function chpl__bulkTransferArray[138499](ref arg a[138496] :
  (138493 call chpl__buildArrayRuntimeType nil[38]), arg AD[138502] :
  _domain[123390](?), const  ref arg b[138508] :
  (138505 call chpl__buildArrayRuntimeType nil[38]), arg BD[138512] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    (138528 return(138527 call chpl__bulkTransferArray(138517 call . a[138496] c"_value") AD[138502](138523 call . b[138508] c"_value") BD[138512]))
  }
  function chpl__bulkTransferArray[138537](arg destClass[138535]:_any[170](?), arg destDom[138540] :
  _domain[123390](?), arg srcClass[138543]:_any[170](?), arg srcDom[138546] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    unknown success[138550] 0
    function bulkTransferDebug[138560](arg msg[138557] :
    string[24]) : _unknown[43] "inline" "no return value for void"
    {
      if(138584 call _cond_test debugBulkTransfer[111829])
      {
        (138582 call chpl_debug_writeln "proc =(a:[],b:[]): " msg[138557])
      }
    }
    (138610 call bulkTransferDebug "in chpl__bulkTransferArray")
    if(138854 call _cond_test(138634 call canResolveMethod destClass[138535] "doiBulkTransferFromKnown" destDom[138540] srcClass[138543] srcDom[138546]))
    {
      (138653 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (138666 call = success[138550](138665 call(138658 call . destClass[138535] c"doiBulkTransferFromKnown") destDom[138540] srcClass[138543] srcDom[138546]))
    }
    {
      if(138849 call _cond_test(138691 call canResolveMethod srcClass[138543] "doiBulkTransferToKnown" srcDom[138546] destClass[138535] destDom[138540]))
      {
        (138710 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (138723 call = success[138550](138722 call(138715 call . srcClass[138543] c"doiBulkTransferToKnown") srcDom[138546] destClass[138535] destDom[138540]))
      }
      {
        if(138844 call _cond_test(138748 call canResolveMethod destClass[138535] "doiBulkTransferFromAny" destDom[138540] srcClass[138543] srcDom[138546]))
        {
          (138767 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (138780 call = success[138550](138779 call(138772 call . destClass[138535] c"doiBulkTransferFromAny") destDom[138540] srcClass[138543] srcDom[138546]))
        }
        {
          if(138840 call _cond_test(138805 call canResolveMethod srcClass[138543] "doiBulkTransferToAny" srcDom[138546] destClass[138535] destDom[138540]))
          {
            (138824 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (138837 call = success[138550](138836 call(138829 call . srcClass[138543] c"doiBulkTransferToAny") srcDom[138546] destClass[138535] destDom[138540]))
          }
        }
      }
    }
    if(138900 call _cond_test success[138550])
    {
      (138878 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (138898 call bulkTransferDebug "bulk transfer did not happen")
    }
    (138907 return success[138550])
  }
  function chpl__transferArray[138919](ref arg a[138916] :
  (138913 call chpl__buildArrayRuntimeType nil[38]), const  ref arg b[138921]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    if(139058 call _cond_test(138945 call ||(138929 call ==(138924 call . a[138916] c"eltType")(138928 'typeof' b[138921]))(138943 call &&(138937 call _isPrimitiveType(138933 call . a[138916] c"eltType"))(138942 call _isPrimitiveType(138940 'typeof' b[138921])))))
    {
      Forall {
        induction variables:
          
          unknown aa[138955] "index var" "insert auto destroy"
        iterated expressions:
          a[138916]
        shadow variables:
        forall body
        {
          (138951 call = aa[138955] b[138921])
        }
      }
    }
    {
      if(139054 call _cond_test(138963 call chpl__serializeAssignment a[138916] b[138921]))
      {
        {
          unknown _indexOfInterest[138978] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[138979] "expr temp" "temp"
          (138993 'move' _iterator[138979](138972 call _build_tuple(138988 call _getIterator a[138916])(138991 call _getIterator b[138921])))
          Defer
          {
            {
              (139023 call _freeIterator _iterator[138979])
            }
          }
          { scopeless type
            (138998 'move' _indexOfInterest[138978](138995 call iteratorIndex _iterator[138979]))
          }
          ForLoop
          {
            (139003 call _check_tuple_var_decl _indexOfInterest[138978] 2)
            unknown aa[139009] "index var" "insert auto destroy"
            (139011 'move' aa[139009](139007 call _indexOfInterest[138978] 1))
            unknown bb[139016] "index var" "insert auto destroy"
            (139018 'move' bb[139016](139014 call _indexOfInterest[138978] 2))
            (138975 call = aa[139009] bb[139016])
            label _continueLabel[138983]
            _indexOfInterest[138978]
            _iterator[138979]
          }
          label _breakLabel[138984]
        }
      }
      {
        Forall {
          induction variables:
            
            unknown aa[139048] "index var" "insert auto destroy"
            
            unknown bb[139050] "index var" "insert auto destroy"
          iterated expressions:
            a[138916]
            b[138921]
          shadow variables:
          forall body
          {
            (139043 call = aa[139048] bb[139050])
          }
        }
      }
    }
  }
  function chpl__transferArray[139074](arg a[139071] :
  (139068 call chpl__buildArrayRuntimeType nil[38]), param arg b[139076]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[139086] "index var" "insert auto destroy"
      iterated expressions:
        a[139071]
      shadow variables:
      forall body
      {
        (139082 call = aa[139086] b[139076])
      }
    }
  }
  function =[139100](ref arg a[139097] :
  (139094 call chpl__buildArrayRuntimeType nil[38]), arg b[139103] :
  _domain[123390](?)) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    if(139121 call _cond_test(139114 call !=(139107 call . a[139097] c"rank")(139111 call . b[139103] c"rank")))
    {
      (139119 call compilerError "rank mismatch in array assignment")
    }
    (139131 call chpl__transferArray a[139097] b[139103])
  }
  function =[139143](arg a[139140] :
  (139137 call chpl__buildArrayRuntimeType nil[38]), arg b[139149] :
  (139148 call range[66183](?) ?[249])) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    if(139185 call _cond_test(139157 call ==(139153 call . a[139140] c"rank") 1))
    {
      (139163 call chpl__transferArray a[139140] b[139149])
    }
    {
      (139183 call compilerError "cannot from ranges to multidimensional arrays")
    }
  }
  function =[139202](ref arg a[139199] :
  (139196 call chpl__buildArrayRuntimeType nil[38]), arg b[139204]:_any[170](?)) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    (139210 call chpl__transferArray a[139199] b[139204])
  }
  function =[139223](ref arg a[139220] :
  (139217 call chpl__buildArrayRuntimeType nil[38]), arg b[139226] :
  _tuple[58502](?)) : _unknown[43] "assignop" "no return value for void"
  {
    function chpl__tupleInit[139237](ref arg j[139235]:_any[170](?), param arg rank[139240] :
    int(64)[13], arg b[139244] :
    _tuple[58502](?)) : _unknown[43] "no return value for void"
    {
      unknown idxType[139273] "type variable"(139257 call .(139254 call . a[139220] c"_dom") c"idxType")
      unknown strType[139270] "type variable"(139269 call chpl__signedType(139265 call .(139262 call . a[139220] c"_dom") c"intIdxType"))
      const stride[139299] "const"(139296 call .(139295 call(139281 call .(139278 call . a[139220] c"_dom") c"dim")(139292 call +(139289 call -(139285 call . a[139220] c"rank") rank[139240]) 1)) c"stride")
      const start[139324] "const"(139321 call .(139320 call(139306 call .(139303 call . a[139220] c"_dom") c"dim")(139317 call +(139314 call -(139310 call . a[139220] c"rank") rank[139240]) 1)) c"firstAsInt")
      if(139513 call _cond_test(139329 call == rank[139240] 1))
      {
        {
          unknown i[139383] 0
          unknown tmp[139384] "maybe param" "temp"
          (139396 'move' tmp[139384](139394 call chpl_compute_low_param_loop_bound 1(139333 call . b[139244] c"size")))
          unknown tmp[139385] "maybe param" "temp"
          (139406 'move' tmp[139385](139404 call chpl_compute_high_param_loop_bound 1(139401 call . b[139244] c"size")))
          unknown tmp[139386] "maybe param" "temp"
          (139409 'move' tmp[139386] 1)
          ParamForLoop
          { i[139383] tmp[139384] tmp[139385] tmp[139386]
            {
              (139368 call =(139350 call j[139235](139347 call +(139344 call -(139340 call . a[139220] c"rank") rank[139240]) 1))(139367 call chpl__intToIdx idxType[139273](139365 call +(139356 call _cast strType[139270] start[139324])(139363 call *(139360 call - i[139383] 1) stride[139299]))))
              (139380 call =(139375 call a[139220] j[139235])(139379 call b[139244] i[139383]))
            }
          }
          label _unused_continueLabel[139388]
          label _breakLabel[139387]
        }
      }
      {
        {
          unknown i[139475] 0
          unknown tmp[139476] "maybe param" "temp"
          (139488 'move' tmp[139476](139486 call chpl_compute_low_param_loop_bound 1(139423 call . b[139244] c"size")))
          unknown tmp[139477] "maybe param" "temp"
          (139498 'move' tmp[139477](139496 call chpl_compute_high_param_loop_bound 1(139493 call . b[139244] c"size")))
          unknown tmp[139478] "maybe param" "temp"
          (139501 'move' tmp[139478] 1)
          ParamForLoop
          { i[139475] tmp[139476] tmp[139477] tmp[139478]
            {
              (139458 call =(139440 call j[139235](139437 call +(139434 call -(139430 call . a[139220] c"rank") rank[139240]) 1))(139457 call chpl__intToIdx idxType[139273](139455 call +(139446 call _cast strType[139270] start[139324])(139453 call *(139450 call - i[139475] 1) stride[139299]))))
              (139473 call chpl__tupleInit j[139235](139467 call - rank[139240] 1)(139472 call b[139244] i[139475]))
            }
          }
          label _unused_continueLabel[139480]
          label _breakLabel[139479]
        }
      }
    }
    {
      (139251 call <(139248 'lifetime_of' a[139220])(139250 'lifetime_of' b[139244]))
    }
    unknown j[139534](139532 call *(139522 call . a[139220] c"rank")(139529 call .(139526 call . a[139220] c"_dom") c"idxType"))
    (139545 call chpl__tupleInit j[139534](139541 call . a[139220] c"rank") b[139226])
  }
  where {
    (139232 call isRectangularArr a[139220])
  }
  function _desync[139556](arg t[139553] :
  _syncvar[85613](?)) type : _unknown[43]
  {
    unknown x[139559] t[139553]
    (139567 return(139564 call . x[139559] c"valType"))
  }
  function _desync[139577](arg t[139574] :
  _singlevar[87725](?)) type : _unknown[43]
  {
    unknown x[139580] t[139574]
    (139588 return(139585 call . x[139580] c"valType"))
  }
  function _desync[139596](arg t[139594]:_any[170](?)) type : _unknown[43]
  {
    (139599 return t[139594])
  }
  function =[139612](ref arg a[139609] :
  (139606 call chpl__buildArrayRuntimeType nil[38]), arg b[139621] :
  (139620 call _desync(139616 call . a[139609] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139632] "index var" "insert auto destroy"
      iterated expressions:
        a[139609]
      shadow variables:
      forall body
      {
        (139628 call = e[139632] b[139621])
      }
    }
  }
  function +=[139646](arg a[139643] :
  (139640 call chpl__buildArrayRuntimeType nil[38]), arg b[139655] :
  (139654 call _desync(139650 call . a[139643] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139666] "index var" "insert auto destroy"
      iterated expressions:
        a[139643]
      shadow variables:
      forall body
      {
        (139662 call += e[139666] b[139655])
      }
    }
  }
  function -=[139680](arg a[139677] :
  (139674 call chpl__buildArrayRuntimeType nil[38]), arg b[139689] :
  (139688 call _desync(139684 call . a[139677] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139700] "index var" "insert auto destroy"
      iterated expressions:
        a[139677]
      shadow variables:
      forall body
      {
        (139696 call -= e[139700] b[139689])
      }
    }
  }
  function *=[139714](arg a[139711] :
  (139708 call chpl__buildArrayRuntimeType nil[38]), arg b[139723] :
  (139722 call _desync(139718 call . a[139711] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139734] "index var" "insert auto destroy"
      iterated expressions:
        a[139711]
      shadow variables:
      forall body
      {
        (139730 call *= e[139734] b[139723])
      }
    }
  }
  function /=[139748](arg a[139745] :
  (139742 call chpl__buildArrayRuntimeType nil[38]), arg b[139757] :
  (139756 call _desync(139752 call . a[139745] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139768] "index var" "insert auto destroy"
      iterated expressions:
        a[139745]
      shadow variables:
      forall body
      {
        (139764 call /= e[139768] b[139757])
      }
    }
  }
  function %=[139782](arg a[139779] :
  (139776 call chpl__buildArrayRuntimeType nil[38]), arg b[139791] :
  (139790 call _desync(139786 call . a[139779] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139802] "index var" "insert auto destroy"
      iterated expressions:
        a[139779]
      shadow variables:
      forall body
      {
        (139798 call %= e[139802] b[139791])
      }
    }
  }
  function **=[139816](arg a[139813] :
  (139810 call chpl__buildArrayRuntimeType nil[38]), arg b[139825] :
  (139824 call _desync(139820 call . a[139813] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139836] "index var" "insert auto destroy"
      iterated expressions:
        a[139813]
      shadow variables:
      forall body
      {
        (139832 call **= e[139836] b[139825])
      }
    }
  }
  function &=[139850](arg a[139847] :
  (139844 call chpl__buildArrayRuntimeType nil[38]), arg b[139859] :
  (139858 call _desync(139854 call . a[139847] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139870] "index var" "insert auto destroy"
      iterated expressions:
        a[139847]
      shadow variables:
      forall body
      {
        (139866 call &= e[139870] b[139859])
      }
    }
  }
  function |=[139884](arg a[139881] :
  (139878 call chpl__buildArrayRuntimeType nil[38]), arg b[139893] :
  (139892 call _desync(139888 call . a[139881] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139904] "index var" "insert auto destroy"
      iterated expressions:
        a[139881]
      shadow variables:
      forall body
      {
        (139900 call |= e[139904] b[139893])
      }
    }
  }
  function ^=[139918](arg a[139915] :
  (139912 call chpl__buildArrayRuntimeType nil[38]), arg b[139927] :
  (139926 call _desync(139922 call . a[139915] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139938] "index var" "insert auto destroy"
      iterated expressions:
        a[139915]
      shadow variables:
      forall body
      {
        (139934 call ^= e[139938] b[139927])
      }
    }
  }
  function >>=[139952](arg a[139949] :
  (139946 call chpl__buildArrayRuntimeType nil[38]), arg b[139961] :
  (139960 call _desync(139956 call . a[139949] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139972] "index var" "insert auto destroy"
      iterated expressions:
        a[139949]
      shadow variables:
      forall body
      {
        (139968 call >>= e[139972] b[139961])
      }
    }
  }
  function <<=[139986](arg a[139983] :
  (139980 call chpl__buildArrayRuntimeType nil[38]), arg b[139995] :
  (139994 call _desync(139990 call . a[139983] c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140006] "index var" "insert auto destroy"
      iterated expressions:
        a[139983]
      shadow variables:
      forall body
      {
        (140002 call <<= e[140006] b[139995])
      }
    }
  }
  function chpl_by[140018](arg a[140015] :
  _domain[123390](?), arg b[140020]:_any[170](?)) : _unknown[43]
  {
    unknown r[140043](140041 call *(140023 call . a[140015] c"rank")(140040 call range[66183](?)(140031 call .(140028 call . a[140015] c"_value") c"idxType") bounded[66079] 1))
    unknown t[140057](140056 call _makeIndexTuple(140049 call . a[140015] c"rank") b[140020](expand = 1))
    {
      unknown i[140087] 0
      unknown tmp[140088] "maybe param" "temp"
      (140100 'move' tmp[140088](140098 call chpl_compute_low_param_loop_bound 1(140062 call . a[140015] c"rank")))
      unknown tmp[140089] "maybe param" "temp"
      (140110 'move' tmp[140089](140108 call chpl_compute_high_param_loop_bound 1(140105 call . a[140015] c"rank")))
      unknown tmp[140090] "maybe param" "temp"
      (140113 'move' tmp[140090] 1)
      ParamForLoop
      { i[140087] tmp[140088] tmp[140089] tmp[140090]
        (140084 call =(140070 call r[140043] i[140087])(140082 call chpl_by(140077 call(140072 call . a[140015] c"dim") i[140087])(140081 call t[140057] i[140087])))
      }
      label _unused_continueLabel[140092]
      label _breakLabel[140091]
    }
    (140145 return(140144 'new'(140143 call _domain[123390](?)(140126 call . a[140015] c"dist")(140131 call . a[140015] c"rank")(140138 call .(140135 call . a[140015] c"_value") c"idxType") 1 r[140043])))
  }
  function chpl_align[140155](arg a[140152] :
  _domain[123390](?), arg b[140157]:_any[170](?)) : _unknown[43]
  {
    unknown r[140183](140181 call *(140160 call . a[140152] c"rank")(140180 call range[66183](?)(140168 call .(140165 call . a[140152] c"_value") c"idxType") bounded[66079](140177 call . a[140152] c"stridable")))
    unknown t[140197](140196 call _makeIndexTuple(140189 call . a[140152] c"rank") b[140157](expand = 1))
    {
      unknown i[140227] 0
      unknown tmp[140228] "maybe param" "temp"
      (140240 'move' tmp[140228](140238 call chpl_compute_low_param_loop_bound 1(140202 call . a[140152] c"rank")))
      unknown tmp[140229] "maybe param" "temp"
      (140250 'move' tmp[140229](140248 call chpl_compute_high_param_loop_bound 1(140245 call . a[140152] c"rank")))
      unknown tmp[140230] "maybe param" "temp"
      (140253 'move' tmp[140230] 1)
      ParamForLoop
      { i[140227] tmp[140228] tmp[140229] tmp[140230]
        (140224 call =(140210 call r[140183] i[140227])(140222 call chpl_align(140217 call(140212 call . a[140152] c"dim") i[140227])(140221 call t[140197] i[140227])))
      }
      label _unused_continueLabel[140232]
      label _breakLabel[140231]
    }
    (140288 return(140287 'new'(140286 call _domain[123390](?)(140266 call . a[140152] c"dist")(140271 call . a[140152] c"rank")(140278 call .(140275 call . a[140152] c"_value") c"idxType")(140282 call . a[140152] c"stridable") r[140183])))
  }
  type _OpaqueIndex[140304] unknown node[140295] 0 int(64)[13] unknown i[140300] 0 uint(64)[107]
  unknown _OpaqueIndexNext[140310] "locale private" "no doc"(140308 call chpl__atomicType uint(64)[107])
  function <=>[140321](arg x[140318] :
  (140315 call chpl__buildArrayRuntimeType nil[38]), arg y[140326] :
  (140323 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown a[140344] "index var" "insert auto destroy"
        
        unknown b[140346] "index var" "insert auto destroy"
      iterated expressions:
        x[140318]
        y[140326]
      shadow variables:
      forall body
      {
        (140340 call <=> a[140344] b[140346])
      }
    }
  }
  function reshape[140360](arg A[140357] :
  (140354 call chpl__buildArrayRuntimeType nil[38]), arg D[140363] :
  _domain[123390](?)) : _unknown[43]
  {
    if(140397 call _cond_test(140370 call !(140369 call isRectangularDom D[140363])))
    {
      (140395 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(140393 call _cast string[24](140391 'typeof' D[140363])))
    }
    if(140473 call _cond_test(140411 call !=(140404 call . A[140357] c"size")(140408 call . D[140363] c"size")))
    {
      (140471 call halt "reshape(A,D) is invoked when A has "(140432 call . A[140357] c"size") " elements, but D has "(140452 call . D[140363] c"size") " indices")
    }
    unknown B[140488](140486 call chpl__buildArrayRuntimeType(140484 call chpl__ensureDomainExpr D[140363])(140481 call . A[140357] c"eltType"))
    {
      unknown _indexOfInterest[140508] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[140509] "expr temp" "temp"
      (140523 'move' _iterator[140509](140499 call _build_tuple(140518 call _getIterator D[140363])(140521 call _getIterator A[140357])))
      Defer
      {
        {
          (140553 call _freeIterator _iterator[140509])
        }
      }
      { scopeless type
        (140528 'move' _indexOfInterest[140508](140525 call iteratorIndex _iterator[140509]))
      }
      ForLoop
      {
        (140533 call _check_tuple_var_decl _indexOfInterest[140508] 2)
        unknown i[140539] "index var" "insert auto destroy"
        (140541 'move' i[140539](140537 call _indexOfInterest[140508] 1))
        unknown a[140546] "index var" "insert auto destroy"
        (140548 'move' a[140546](140544 call _indexOfInterest[140508] 2))
        (140505 call =(140503 call B[140488] i[140539]) a[140546])
        label _continueLabel[140513]
        _indexOfInterest[140508]
        _iterator[140509]
      }
      label _breakLabel[140514]
    }
    (140561 return B[140488])
  }
  function reshape[140571](arg A[140568] :
  _iteratorRecord[194](?), arg D[140574] :
  _domain[123390](?)) : _unknown[43] "no doc"
  {
    if(140593 call _cond_test(140581 call !(140580 call isRectangularDom D[140574])))
    {
      (140591 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(140589 call _cast string[24](140587 'typeof' D[140574])))
    }
    unknown B[140616](140610 for (140602 call _build_tuple i[140612] a[140614])  in  zip(140607 call _build_tuple D[140574] A[140568]) do
    {
      a[140614]
    } )
    (140620 return B[140616])
  }
  function linearize[140628](arg Xs[140626]:_any[170](?)) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[140635] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[140636] "expr temp" "temp"
      (140645 'move' _iterator[140636](140643 call _getIterator Xs[140626]))
      Defer
      {
        {
          (140661 call _freeIterator _iterator[140636])
        }
      }
      { scopeless type
        (140650 'move' _indexOfInterest[140635](140647 call iteratorIndex _iterator[140636]))
      }
      ForLoop
      {
        unknown x[140654] "index var" "insert auto destroy"
        (140656 'move' x[140654] _indexOfInterest[140635])
        (140633 yield x[140654])
        label _continueLabel[140640]
        _indexOfInterest[140635]
        _iterator[140636]
      }
      label _breakLabel[140641]
    }
  }
  function chpl__unalias[140677](arg x[140674] :
  _domain[123390](?)) : _unknown[43] "inline" "unalias fn"
  {
    if(140699 call _cond_test(140692 call !=(140686 call _to_unmanaged(140684 'typeof'(140681 call . x[140674] c"_instance")))(140691 'typeof'(140688 call . x[140674] c"_instance"))))
    {
      (140697 call compilerError "Domain on borrow created")
    }
    if(140725 call _cond_test(140706 call . x[140674] c"_unowned"))
    {
      unknown ret[140710] "no auto destroy" x[140674]
      (140715 return ret[140710])
    }
    {
      unknown ret[140718] "no copy" x[140674]
      (140723 return ret[140718])
    }
  }
  function chpl__initCopy[140739](const  ref arg a[140736] :
  (140733 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "init copy fn"
  {
    unknown b[140754](140752 call chpl__buildArrayRuntimeType(140750 call chpl__ensureDomainExpr(140742 call . a[140736] c"_dom"))(140747 call . a[140736] c"eltType"))
    (140762 call chpl__uncheckedArrayTransfer b[140754] a[140736])
    (140765 return b[140754])
  }
  function chpl__autoCopy[140777](const  ref arg x[140774] :
  (140771 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "auto copy fn"
  {
    unknown b[140783] "no copy"(140782 call chpl__initCopy x[140774])
    (140788 return b[140783])
  }
  function chpl__unref[140800](arg x[140797] :
  (140794 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "no copy return" "unref fn"
  {
    unknown ret[140810] "no auto destroy" x[140797]
    (140815 return ret[140810])
  }
  where {
    (140808 call chpl__isArrayView(140804 call . x[140797] c"_value"))
  }
  function chpl__unref[140826](arg ir[140823] :
  _iteratorRecord[194](?)) : _unknown[43] "no copy return" "unref fn"
  {
    unknown toArray[140832] "no auto destroy" "no copy"(140831 call chpl__initCopy ir[140823])
    (140837 return toArray[140832])
  }
  function chpl__unref[140849](arg x[140846] :
  (140843 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "no copy return"
  {
    unknown ret[140852] "no copy" x[140846]
    (140857 return ret[140852])
  }
  function chpl__unalias[140869](arg x[140866] :
  (140863 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "unalias fn"
  {
    unknown isview[140902] "param"(140900 call ||(140889 call ||(140879 call(140875 call .(140872 call . x[140866] c"_value") c"isSliceArrayView"))(140888 call(140884 call .(140881 call . x[140866] c"_value") c"isRankChangeArrayView")))(140899 call(140895 call .(140892 call . x[140866] c"_value") c"isReindexArrayView")))
    const isalias[140910] "const"(140907 call . x[140866] c"_unowned")
    if(140938 call _cond_test(140915 call || isview[140902] isalias[140910]))
    {
      unknown ret[140918] "no auto destroy" x[140866]
      (140925 call chpl__autoDestroy x[140866])
      (140928 return ret[140918])
    }
    {
      unknown ret[140931] "no copy" x[140866]
      (140936 return ret[140931])
    }
  }
  function chpl__initCopy[140950](arg ir[140947] :
  _iteratorRecord[194](?)) : _unknown[43] "init copy fn"
  {
    unknown shape[140964](140963 'new'(140962 call _domain[123390](?)(140958 call . ir[140947] c"_shape_")))
    (140973 call =(140969 call . shape[140964] c"_unowned") 1)
    (140981 return(140980 call chpl__initCopy_shapeHelp shape[140964] ir[140947]))
  }
  where {
    (140955 call chpl_iteratorHasDomainShape ir[140947])
  }
  function chpl__initCopy[140992](arg ir[140989] :
  _iteratorRecord[194](?)) : _unknown[43] "init copy fn"
  {
    unknown shape[141013] "insert auto destroy"(141011 call chpl__buildDomainExpr(141007 call . ir[140989] c"_shape_"))
    (141022 return(141021 call chpl__initCopy_shapeHelp shape[141013] ir[140989]))
  }
  where {
    (141004 call &&(140997 call chpl_iteratorHasRangeShape ir[140989])(141002 call !(141001 call chpl_iteratorFromForExpr ir[140989])))
  }
  function chpl__initCopy_shapeHelp[141033](arg shape[141030] :
  _domain[123390](?), arg ir[141036] :
  _iteratorRecord[194](?)) : _unknown[43]
  {
    unknown result[141050](141048 call chpl__buildArrayRuntimeType(141046 call chpl__ensureDomainExpr shape[141030])(141045 call iteratorToArrayElementType(141043 'typeof' ir[141036])))
    if(141083 call _cond_test(141060 call isArray(141056 call . result[141050] c"eltType")))
    {
      (141081 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    if(141180 call _cond_test(141091 call chpl_iteratorFromForExpr ir[141036]))
    {
      {
        unknown _indexOfInterest[141106] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[141107] "expr temp" "temp"
        (141121 'move' _iterator[141107](141100 call _build_tuple(141116 call _getIterator result[141050])(141119 call _getIterator ir[141036])))
        Defer
        {
          {
            (141151 call _freeIterator _iterator[141107])
          }
        }
        { scopeless type
          (141126 'move' _indexOfInterest[141106](141123 call iteratorIndex _iterator[141107]))
        }
        ForLoop
        {
          (141131 call _check_tuple_var_decl _indexOfInterest[141106] 2)
          unknown r[141137] "index var" "insert auto destroy"
          (141139 'move' r[141137](141135 call _indexOfInterest[141106] 1))
          unknown src[141144] "index var" "insert auto destroy"
          (141146 'move' src[141144](141142 call _indexOfInterest[141106] 2))
          (141103 call = r[141137] src[141144])
          label _continueLabel[141111]
          _indexOfInterest[141106]
          _iterator[141107]
        }
        label _breakLabel[141112]
      }
    }
    {
      Forall {
        induction variables:
          
          unknown r[141174] "index var" "insert auto destroy"
          
          unknown src[141176] "index var" "insert auto destroy"
        iterated expressions:
          result[141050]
          ir[141036]
        shadow variables:
        forall body
        {
          (141170 call = r[141174] src[141176])
        }
      }
    }
    (141185 return result[141050])
  }
  function chpl__initCopy[141195](arg ir[141192] :
  _iteratorRecord[194](?)) : _unknown[43] "init copy fn"
  {
    unknown shapeful[141201] "param"(141200 call chpl_iteratorHasRangeShape ir[141192])
    unknown r[141217](141214 IfExpr  shapeful[141201] then
    { scopeless
      (141207 call . ir[141192] c"_shape_")
    } else
    { scopeless
      (141212 call chpl_build_bounded_range 1 0)
    } )
    unknown i[141221] 0
    unknown size[141231](141229 call _cast size_t[209674](141225 call . r[141217] c"size"))
    unknown elemType[141239] "type variable"(141238 call iteratorToArrayElementType(141236 'typeof' ir[141192]))
    unknown data[141247] nil[38](141245 call _ddata[11791](?) elemType[141239])
    unknown callPostAlloc[141251] bool[10]
    unknown subloc[141255] c_sublocid_none[90216]
    function allocateData[141262](param arg initialAlloc[141260]:_any[170](?), arg allocSize[141264]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
    {
      if(141348 call _cond_test initialAlloc[141260])
      {
        function chpl_mem_array_alloc[141273](arg nmemb[141270] :
        size_t[209674], arg eltSize[141276] :
        size_t[209674], arg subloc[141280] :
        chpl_sublocID_t[90212], ref arg callPostAlloc[141284] :
        bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
        {
        }
        { scopeless type
          c_void_ptr[141]
        }
        (141310 call = data[141247](141308 call _cast(141307 'typeof' data[141247])(141305 call chpl_mem_array_alloc(141296 call _cast size_t[209674] allocSize[141264])(141302 call _ddata_sizeof_element data[141247]) subloc[141255] callPostAlloc[141251])))
      }
      {
        function chpl_mem_array_postAlloc[141319](arg data[141316] :
        c_void_ptr[141], arg nmemb[141322] :
        size_t[209674], arg eltSize[141326] :
        size_t[209674]) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
        {
        }
        (141346 call chpl_mem_array_postAlloc(141335 call _cast c_void_ptr[141] data[141247])(141340 call _cast size_t[209674] allocSize[141264])(141345 call _ddata_sizeof_element data[141247]))
      }
    }
    if(141365 call _cond_test(141357 call > size[141231] 0))
    {
      (141363 call allocateData 1 size[141231])
    }
    {
      unknown _indexOfInterest[141506] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141507] "expr temp" "temp"
      (141516 'move' _iterator[141507](141514 call _getIterator ir[141192]))
      Defer
      {
        {
          (141532 call _freeIterator _iterator[141507])
        }
      }
      { scopeless type
        (141521 'move' _indexOfInterest[141506](141518 call iteratorIndex _iterator[141507]))
      }
      ForLoop
      {
        unknown elt[141525] "index var" "insert auto destroy"
        (141527 'move' elt[141525] _indexOfInterest[141506])
        {
          unknown eltCopy[141376] "no auto destroy" "no copy"(141375 call chpl__initCopy elt[141525])
          if(141488 call _cond_test(141382 call >= i[141221] size[141231]))
          {
            unknown oldSize[141385] size[141231]
            unknown oldData[141390] data[141247]
            if(141410 call _cond_test(141395 call == size[141231] 0))
            {
              (141399 call = size[141231] 4)
            }
            {
              (141407 call = size[141231](141405 call * 2 size[141231]))
            }
            (141420 call allocateData 1 size[141231])
            {
              unknown _indexOfInterest[141442] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[141443] "expr temp" "temp"
              (141452 'move' _iterator[141443](141450 call _getIterator(141459 call chpl_direct_counted_range_iter 0 oldSize[141385])))
              Defer
              {
                {
                  (141475 call _freeIterator _iterator[141443])
                }
              }
              { scopeless type
                (141464 'move' _indexOfInterest[141442](141461 call iteratorIndex _iterator[141443]))
              }
              ForLoop
              {
                unknown i[141468] "index var" "insert auto destroy"
                (141470 'move' i[141468] _indexOfInterest[141442])
                {
                  (141439 '='(141434 call data[141247] i[141468])(141438 call oldData[141390] i[141468]))
                }
                label _continueLabel[141447]
                _indexOfInterest[141442]
                _iterator[141443]
              }
              label _breakLabel[141448]
            }
            (141486 call _ddata_free oldData[141390] oldSize[141385])
          }
          (141499 '='(141497 call data[141247] i[141221]) eltCopy[141376])
          (141503 call += i[141221] 1)
        }
        label _continueLabel[141511]
        _indexOfInterest[141506]
        _iterator[141507]
      }
      label _breakLabel[141512]
    }
    if(141557 call _cond_test(141547 call && shapeful[141201](141545 call < i[141221](141542 call . r[141217] c"size"))))
    {
      (141554 call = r[141217](141552 call # r[141217] i[141221]))
    }
    if(141575 call _cond_test(141563 call ! shapeful[141201]))
    {
      (141572 call = r[141217](141570 call #(141567 call chpl_build_low_bounded_range 1) i[141221]))
    }
    unknown D[141584] "insert auto destroy"(141582 call chpl__buildDomainExpr r[141217])
    if(141709 call _cond_test(141589 call != data[141247] nil[38]))
    {
      if(141598 call _cond_test callPostAlloc[141251])
      {
        (141596 call allocateData 0 size[141231])
      }
      unknown A[141622](141621 call(141607 call . D[141584] c"buildArrayWith")(141614 'typeof'(141613 call data[141247] 0)) data[141247](141619 call _cast int(64)[13] size[141231]))
      (141636 call chpl_decRefCountsForDomainsInArrayEltTypes(141627 call . A[141622] c"_value")(141635 'typeof'(141634 call data[141247] 0)))
      (141646 call =(141642 call .(141639 call . A[141622] c"_value") c"_decEltRefCounts") 0)
      (141667 'auto destroy runtime type' elemType[141239])
      (141670 return A[141622])
    }
    {
      (141676 call allocateData 1 1)
      if(141686 call _cond_test callPostAlloc[141251])
      {
        (141684 call allocateData 0 1)
      }
      unknown A[141703](141702 call(141692 call . D[141584] c"buildArrayWith") elemType[141239] data[141247](141700 call _cast int(64)[13] size[141231]))
      (141707 return A[141703])
    }
  }
  function chpl_checkCopyInit[141721](arg lhs[141718] :
  _domain[123390](?), arg rhs[141724] :
  _domain[123390](?)) param : _unknown[43] "no return value for void"
  {
    if(141779 call _cond_test(141755 call &&(141740 call(141736 call .(141731 call .(141728 call . lhs[141718] c"dist") c"_value") c"dsiIsLayout"))(141753 call !(141752 call(141748 call .(141745 call .(141742 call . rhs[141724] c"dist") c"_value") c"dsiIsLayout")))))
    {
      (141777 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
  }
  (329384 'used modules list'(111784 'use' ChapelBase[302])(111789 'use' ChapelTuple[58490])(111793 'use' ChapelLocale[90191])(111797 'use' ArrayViewSlice[182459])(111801 'use' ArrayViewRankChange[184196])(111805 'use' ArrayViewReindex[188667])(111809 'use' Reflection[211223] 'only' ))
}