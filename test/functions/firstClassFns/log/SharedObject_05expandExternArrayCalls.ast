AST dump for SharedObject after pass expandExternArrayCalls.
Module use list: 

{
  (40171 'use' OwnedObject)
  type ReferenceCount[40246] unknown count[40178](40176 call chpl__atomicType int[13]) function ReferenceCount[40246].init[40183](arg _mt[40250]:_MT[227], arg this[40248]:ReferenceCount[40246]) : _unknown[43] "method" "primary method"
  {
    (40190 call(40186 call . this c"complete"))
    (40201 call(40196 call . count c"write") 1)
  } function ReferenceCount[40246].retain[40207](arg _mt[40254]:_MT[227], arg this[40252]:ReferenceCount[40246]) : _unknown[43] "method" "primary method"
  {
    (40215 call(40210 call . count c"add") 1)
  } function ReferenceCount[40246].release[40222](arg _mt[40258]:_MT[227], arg this[40256]:ReferenceCount[40246]) : _unknown[43] "method" "primary method"
  {
    unknown oldValue[40233](40232 call(40227 call . count c"fetchSub") 1)
    (40241 return(40239 call - oldValue 1))
  }
  type _shared[41357](?) unknown chpl_t[40262] "no doc" "type variable" unknown chpl_p[40269] "no doc" "owned"(40268 'to nilable class' chpl_t) function _shared[41357](?).chpl_forwarding_expr2[40275](arg _mt[41361]:_MT[227], arg this[41359]:_shared[41357](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (40277 return(40274 call borrow))
  } unknown chpl_pn[40284] "no doc" "owned"(40283 'to unmanaged class from unknown'(40282 'to nilable class from type' ReferenceCount)) function _shared[41357](?).init[40291](arg _mt[41365]:_MT[227], arg this[41363]:_shared[41357](?), arg chpl_t[40289]:_any[170](?)) : _unknown[43] "leaves this nil" "method" "primary method"
  {
    if(40319 call _cond_test(40297 call !(40296 call isClass chpl_t)))
    {
      { scopeless
        (40317 call compilerError "shared only works with classes")
      }
    }
    (40333 call =(40326 call . this c"chpl_t")(40332 call _to_borrowed chpl_t))
    (40341 call =(40337 call . this c"chpl_p") nil[38])
    (40351 call =(40347 call . this c"chpl_pn") nil[38])
  } function _shared[41357](?).init[40362](arg _mt[41369]:_MT[227], arg this[41367]:_shared[41357](?), arg p[40359] :
  borrowed[200](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (40382 call compilerError "cannot initialize shared from a borrow")
    (40394 call(40386 call . this c"init")(40392 call _to_unmanaged p))
  } function _shared[41357](?).init[40404](arg _mt[41373]:_MT[227], arg this[41371]:_shared[41357](?), arg p[40401] :
  unmanaged[209](?)) : _unknown[43] "method" "primary method"
  {
    (40415 call =(40407 call . this c"chpl_t")(40414 call _to_borrowed(40412 'typeof' p)))
    unknown rc[40423] nil[38](40421 'to unmanaged class from unknown'(40420 'to nilable class from type' ReferenceCount))
    if(40439 call _cond_test(40428 call != p nil[38]))
    {
      { scopeless
        (40436 call = rc(40435 'new'(40434 'to unmanaged class from unknown'(40433 call ReferenceCount))))
      }
    }
    (40452 call =(40445 call . this c"chpl_p")(40451 call _to_borrowed p))
    (40460 call =(40456 call . this c"chpl_pn") rc)
    (40468 call(40464 call . this c"complete"))
  } function _shared[41357](?).init[40479](arg _mt[41377]:_MT[227], arg this[41375]:_shared[41357](?), arg p[40476] :
  unknown T[40474]) : _unknown[43] "method" "primary method"
  {
    (40510 call compilerError "shared only works with classes")
    (40518 call =(40514 call . this c"chpl_t") T)
    (40526 call =(40522 call . this c"chpl_p") p)
  }
  where {
    (40505 call &&(40496 call &&(40486 call ==(40484 call isClass T) 0)(40494 call ==(40492 call isSubtype T _shared) 0))(40503 call ==(40501 call isIterator p) 0))
  } function _shared[41357](?).init[40538](arg _mt[41381]:_MT[227], arg this[41379]:_shared[41357](?), in arg take[40535] :
  _owned) : _unknown[43] "method" "primary method"
  {
    unknown p[40546](40545 call(40541 call . take c"release"))
    (40575 call =(40551 call . this c"chpl_t")(40572 IfExpr (40560 call ==(40556 call .(40555 'typeof' this) c"chpl_t") ?[249]) then
    { scopeless
      (40566 call _to_borrowed(40564 'typeof' p))
    } else
    { scopeless
      (40569 call .(40568 'typeof' this) c"chpl_t")
    } ))
    if(40589 call _cond_test(40582 call !(40581 call isClass p)))
    {
      { scopeless
        (40587 call compilerError "shared only works with classes")
      }
    }
    unknown rc[40598] nil[38](40596 'to unmanaged class from unknown'(40595 'to nilable class from type' ReferenceCount))
    if(40614 call _cond_test(40603 call != p nil[38]))
    {
      { scopeless
        (40611 call = rc(40610 'new'(40609 'to unmanaged class from unknown'(40608 call ReferenceCount))))
      }
    }
    (40624 call =(40620 call . this c"chpl_p") p)
    (40632 call =(40628 call . this c"chpl_pn") rc)
    (40640 call(40636 call . this c"complete"))
  } function _shared[41357](?).init[40650](arg _mt[41385]:_MT[227], arg this[41383]:_shared[41357](?), arg _private[40647] :
  bool[10], arg t[40652]:_any[170](?), ref arg src[40658] :
  (40657 call _shared ?[249])) : _unknown[43] "method" "primary method" "no doc"
  {
    (40666 call =(40662 call . this c"chpl_t") t)
    (40687 call =(40671 call . this c"chpl_p")(40685 call _cast(40684 call _to_nilable(40682 call _to_unmanaged t))(40675 call . src c"chpl_p")))
    (40698 call =(40691 call . this c"chpl_pn")(40695 call . src c"chpl_pn"))
    (40706 call =(40702 call . src c"chpl_p") nil[38])
    (40714 call =(40710 call . src c"chpl_pn") nil[38])
  } function _shared[41357](?).init[40725](arg _mt[41389]:_MT[227], arg this[41387]:_shared[41357](?), arg _private[40722] :
  bool[10], arg t[40727]:_any[170](?), arg p[40729]:_any[170](?), arg pn[40731]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ptr[40743](40741 call _cast(40740 call _to_nilable(40738 call _to_unmanaged t)) p)
    unknown count[40748] pn
    if(40771 call _cond_test(40753 call != ptr nil[38]))
    {
      (40762 call(40758 call .(40756 call postfix! count) c"retain"))
    }
    {
      (40767 call = count nil[38])
    }
    (40780 call =(40776 call . this c"chpl_t") t)
    (40788 call =(40784 call . this c"chpl_p") ptr)
    (40796 call =(40792 call . this c"chpl_pn") count)
  } function _shared[41357](?).init=[40807](arg _mt[41393]:_MT[227], arg this[41391]:_shared[41357](?), in arg take[40804] :
  _owned) : _unknown[43] "method" "primary method" "no doc"
  {
    if(40847 call _cond_test(40823 call &&(40818 call &&(40813 call isNonNilableClass(40811 'typeof' this))(40817 call isNilableClass take))(40821 call ! chpl_legacyClasses)))
    {
      { scopeless
        (40845 call compilerError "cannot create a non-nilable shared variable from a nilable class instance")
      }
    }
    (40859 call(40854 call . this c"init") take)
  } function _shared[41357](?).init=[40872](arg _mt[41397]:_MT[227], arg this[41395]:_shared[41357](?), const  ref arg src[40869] :
  (40868 call _shared ?[249])) : _unknown[43] "method" "primary method"
  {
    if(40895 call _cond_test(40888 call &&(40883 call &&(40878 call isNonNilableClass(40876 'typeof' this))(40882 call isNilableClass src))(40886 call ! chpl_legacyClasses)))
    {
      { scopeless
        (40893 call compilerError "cannot create a non-nilable shared variable from a nilable class instance")
      }
    }
    if(40933 call _cond_test(40914 call ==(40912 call isCoercible(40903 call . src c"chpl_t")(40909 call .(40908 'typeof' this) c"chpl_t")) 0))
    {
      { scopeless
        (40931 call compilerError "cannot coerce '"(40922 call _cast string[24](40920 'typeof' src)) "' to '"(40928 call _cast string[24](40926 'typeof' this)) "' in initialization")
      }
    }
    (40947 call =(40939 call . this c"chpl_t")(40944 call .(40943 'typeof' this) c"chpl_t"))
    (40958 call =(40951 call . this c"chpl_p")(40955 call . src c"chpl_p"))
    (40969 call =(40962 call . this c"chpl_pn")(40966 call . src c"chpl_pn"))
    (40977 call(40973 call . this c"complete"))
    if(40998 call _cond_test(40984 call !=(40980 call . this c"chpl_pn") nil[38]))
    {
      { scopeless
        (40996 call(40992 call .(40990 call postfix!(40987 call . this c"chpl_pn")) c"retain"))
      }
    }
  } function _shared[41357](?).init=[41011](arg _mt[41401]:_MT[227], arg this[41399]:_shared[41357](?), arg src[41008] :
  borrowed[200](?)) : _unknown[43] "method" "primary method"
  {
    (41031 call compilerError "cannot create a shared variable from a borrowed class instance")
    (41039 call =(41035 call . this c"chpl_t") int[13])
  } function _shared[41357](?).init=[41050](arg _mt[41405]:_MT[227], arg this[41403]:_shared[41357](?), arg src[41047] :
  unmanaged[209](?)) : _unknown[43] "method" "primary method"
  {
    (41070 call compilerError "cannot create a shared variable from an unmanaged class instance")
    (41078 call =(41074 call . this c"chpl_t") int[13])
  } function _shared[41357](?).init=[41089](arg _mt[41409]:_MT[227], arg this[41407]:_shared[41357](?), arg src[41086] :
  _nilType) : _unknown[43] "method" "primary method"
  {
    (41101 call(41092 call . this c"init")(41097 call .(41096 'typeof' this) c"chpl_t"))
    if(41137 call _cond_test(41114 call &&(41109 call !=(41107 call _to_nilable chpl_t) chpl_t)(41112 call ! chpl_legacyClasses)))
    {
      (41134 call compilerError "Assigning non-nilable shared to nil")
    }
  } function _shared[41357](?).deinit[41145](arg _mt[41413]:_MT[227], arg this[41411]:_shared[41357](?)) : _unknown[43] "destructor" "method" "primary method"
  {
    (41149 call clear)
  } function _shared[41357](?).retain[41160](arg _mt[41417]:_MT[227], ref arg this[41415]:_shared[41357](?), arg newPtr[41157] :
  unmanaged[209](?)) : _unknown[43] "method" "primary method"
  {
    if(41200 call _cond_test(41168 call !(41167 call isCoercible(41164 'typeof' newPtr) chpl_t)))
    {
      { scopeless
        (41198 call compilerError(41195 call +(41192 call +(41183 call +(41180 call +(41177 call + "cannot retain '"(41175 call _cast string[24](41173 'typeof' newPtr))) "' ") "(expected '")(41190 call _cast string[24](41188 call _to_unmanaged chpl_t))) "')"))
      }
    }
    (41208 call clear)
    (41215 call =(41211 call . this c"chpl_p") newPtr)
    if(41235 call _cond_test(41220 call != newPtr nil[38]))
    {
      (41231 call =(41223 call . this c"chpl_pn")(41230 'new'(41229 'to unmanaged class from unknown'(41228 call ReferenceCount))))
    }
  } function _shared[41357](?).clear[41243](arg _mt[41421]:_MT[227], ref arg this[41419]:_shared[41357](?)) : _unknown[43] "leaves this nil" "method" "primary method"
  {
    if(41308 call _cond_test(41248 call isClass chpl_p))
    {
      if(41293 call _cond_test(41257 call &&(41251 call != chpl_p nil[38])(41255 call != chpl_pn nil[38])))
      {
        unknown count[41267](41266 call(41262 call .(41260 call postfix! chpl_pn) c"release"))
        if(41289 call _cond_test(41273 call == count 0))
        {
          (41280 call chpl__delete(41278 call _to_unmanaged chpl_p))
          (41286 call chpl__delete chpl_pn)
        }
      }
      (41300 call = chpl_p nil[38])
      (41305 call = chpl_pn nil[38])
    }
  } function _shared[41357](?).borrow[41317](arg _mt[41425]:_MT[227], arg this[41423]:_shared[41357](?)) : _unknown[43] "nil from this" "method" "primary method"
  {
    if(41348 call _cond_test(41324 call ==(41322 call _to_nilable chpl_t) chpl_t))
    {
      (41327 return chpl_p)
    }
    {
      { scopeless
        if(41344 call _cond_test chpl_legacyClasses)
        {
          (41335 return(41334 call _to_nonnil chpl_p))
        }
        {
          (41341 return(41339 call postfix! chpl_p))
        }
      }
    }
  } forwarding ( )
  function =[41434](ref arg lhs[41431] :
  _shared, arg rhs[41437] :
  _shared) : _unknown[43] "assignop"
  {
    if(41474 call _cond_test(41460 call !=(41456 call . rhs c"chpl_pn") nil[38]))
    {
      { scopeless
        (41472 call(41468 call .(41466 call postfix!(41463 call . rhs c"chpl_pn")) c"retain"))
      }
    }
    (41485 call(41481 call . lhs c"clear"))
    (41495 call =(41488 call . lhs c"chpl_p")(41492 call . rhs c"chpl_p"))
    (41506 call =(41499 call . lhs c"chpl_pn")(41503 call . rhs c"chpl_pn"))
  }
  where {
    (41453 call || chpl_legacyClasses(41451 call !(41449 call &&(41444 call isNonNilableClass lhs)(41448 call isNilableClass rhs))))
  }
  function =[41518](ref arg lhs[41515] :
  _shared, in arg rhs[41521] :
  _owned) : _unknown[43] "assignop"
  {
    (41547 call(41537 call . lhs c"retain")(41545 call(41541 call . rhs c"release")))
  }
  where {
    (41534 call !(41532 call &&(41527 call isNonNilableClass lhs)(41531 call isNilableClass rhs)))
  }
  function =[41559](ref arg lhs[41556] :
  _shared, arg rhs[41562] :
  _nilType) : _unknown[43] "assignop" "no doc"
  {
    (41579 call(41575 call . lhs c"clear"))
  }
  where {
    (41572 call || chpl_legacyClasses(41570 call !(41569 call isNonNilableClass lhs)))
  }
  function <=>[41591](ref arg lhs[41588] :
  _shared, ref arg rhs[41594] :
  _shared) : _unknown[43]
  {
    (41605 call <=>(41598 call . lhs c"chpl_pn")(41602 call . rhs c"chpl_pn"))
    (41617 call <=>(41610 call . lhs c"chpl_p")(41614 call . rhs c"chpl_p"))
  }
  function chpl__autoDestroy[41628](ref arg x[41625] :
  _shared) : _unknown[43] "auto destroy fn" "no doc"
  {
    (41636 'call destructor'(41635 'deref' x))
  }
  function _unknown[43].readWriteThis[41646](arg _mt[41651]:_MT[227], arg this[41648] :
  _shared, arg f[41644]:_any[170](?)) : _unknown[43] "method" "no doc"
  {
    (41658 call <~> f(41655 call . this c"chpl_p"))
  }
  function _cast[41670](arg t[41667] :
  borrowed[200](?), const  ref arg x[41673] :
  _shared) : _unknown[43] "inline" "no doc"
  {
    (41692 return(41691 call(41687 call . x c"borrow")))
  }
  where {
    (41683 call isSubtype t(41680 call . x c"chpl_t"))
  }
  function _cast[41707](arg t[41704] :
  (41702 call _shared(41701 'to nilable class from type' class[221](?))), in arg x[41712] :
  (41710 call _shared class[221](?))) : _unknown[43] "inline" "no doc"
  {
    (41742 return(41741 'new'(41740 call _shared 1(41738 call _to_nilable(41734 call . t c"chpl_t")) x)))
  }
  where {
    (41728 call isSubtype(41717 call . x c"chpl_t")(41727 call _to_nonnil(41723 call . t c"chpl_t")))
  }
  function _cast[41757](arg t[41754] :
  (41752 call _shared(41751 'to nilable class from type' class[221](?))), in arg x[41763] :
  (41761 call _shared(41760 'to nilable class from type' class[221](?)))) : _unknown[43] "inline" "no doc"
  {
    (41787 return(41786 'new'(41785 call _shared 1(41781 call . t c"chpl_t") x)))
  }
  where {
    (41776 call isSubtype(41768 call . x c"chpl_t")(41773 call . t c"chpl_t"))
  }
  function _cast[41801](arg t[41798] :
  (41796 call _shared class[221](?)), in arg x[41806] :
  (41804 call _shared class[221](?))) : _unknown[43] "inline" "no doc"
  {
    (41830 return(41829 'new'(41828 call _shared 1(41824 call . t c"chpl_t") x)))
  }
  where {
    (41819 call isSubtype(41811 call . x c"chpl_t")(41816 call . t c"chpl_t"))
  }
  function _cast[41844](arg t[41841] :
  (41839 call _shared class[221](?)), in arg x[41850] :
  (41848 call _shared(41847 'to nilable class from type' class[221](?)))) : _unknown[43] throws "inline" "no doc"
  {
    if(41883 call _cond_test(41872 call ==(41868 call . x c"chpl_p") nil[38]))
    {
      (41880 'throw'(41879 'new'(41877 call _owned(41876 call NilClassError))))
    }
    (41901 return(41900 'new'(41899 call _shared 1(41897 call _to_nonnil(41893 call . t c"chpl_t")) x)))
  }
  where {
    (41866 call isSubtype(41860 call _to_nonnil(41856 call . x c"chpl_t"))(41863 call . t c"chpl_t"))
  }
  function _cast[41914](arg t[41911] :
  (41909 call _shared class[221](?)), const  ref arg x[41920] :
  (41918 call _shared(41917 'to nilable class from type' class[221](?)))) : _unknown[43] throws "inline"
  {
    if(41953 call _cond_test(41942 call ==(41938 call . x c"chpl_p") nil[38]))
    {
      (41950 'throw'(41949 'new'(41947 call _owned(41946 call NilClassError))))
    }
    unknown p[41975](41974 'try-expr'(41972 call _cast(41971 call _to_nonnil(41969 call _to_unmanaged(41965 call . t c"chpl_t")))(41959 call . x c"chpl_p")))
    (41993 return(41992 'new'(41991 call _shared 1(41985 call _to_borrowed(41983 'typeof' p)) p(41988 call . x c"chpl_pn"))))
  }
  where {
    (41936 call isProperSubtype(41925 call . t c"chpl_t")(41935 call _to_nonnil(41931 call . x c"chpl_t")))
  }
  function _cast[42006](arg t[42003] :
  (42001 call _shared class[221](?)), const  ref arg x[42011] :
  (42009 call _shared class[221](?))) : _unknown[43] throws "inline"
  {
    unknown p[42042](42041 'try-expr'(42039 call _cast(42038 call _to_nonnil(42036 call _to_unmanaged(42032 call . t c"chpl_t")))(42026 call . x c"chpl_p")))
    (42061 return(42060 'new'(42059 call _shared 1(42053 call _to_borrowed(42051 'typeof' p)) p(42056 call . x c"chpl_pn"))))
  }
  where {
    (42024 call isProperSubtype(42016 call . t c"chpl_t")(42021 call . x c"chpl_t"))
  }
  function _cast[42075](arg t[42072] :
  (42070 call _shared(42069 'to nilable class from type' class[221](?))), const  ref arg x[42081] :
  (42079 call _shared(42078 'to nilable class from type' class[221](?)))) : _unknown[43] "inline"
  {
    unknown p[42111](42109 call _cast(42108 call _to_nilable(42106 call _to_unmanaged(42102 call . t c"chpl_t")))(42096 call . x c"chpl_p"))
    (42130 return(42129 'new'(42128 call _shared 1(42122 call _to_borrowed(42120 'typeof' p)) p(42125 call . x c"chpl_pn"))))
  }
  where {
    (42094 call isProperSubtype(42086 call . t c"chpl_t")(42091 call . x c"chpl_t"))
  }
  function _cast[42144](arg t[42141] :
  (42139 call _shared(42138 'to nilable class from type' class[221](?))), const  ref arg x[42149] :
  (42147 call _shared class[221](?))) : _unknown[43] "inline"
  {
    unknown p[42182](42180 call _cast(42179 call _to_nilable(42177 call _to_unmanaged(42173 call . t c"chpl_t")))(42167 call . x c"chpl_p"))
    (42201 return(42200 'new'(42199 call _shared 1(42193 call _to_borrowed(42191 'typeof' p)) p(42196 call . x c"chpl_pn"))))
  }
  where {
    (42165 call isProperSubtype(42154 call . t c"chpl_t")(42164 call _to_nilable(42160 call . x c"chpl_t")))
  }
  function _cast[42212](arg t[42209] :
  _shared, arg x[42215] :
  _nilType) : _unknown[43] "inline" "no doc"
  {
    if(42256 call _cond_test(42234 call &&(42229 call !=(42224 call _to_nilable(42220 call . t c"chpl_t"))(42226 call . t c"chpl_t"))(42232 call ! chpl_legacyClasses)))
    {
      { scopeless
        (42254 call compilerError "Illegal cast from nil to non-nilable shared type")
      }
    }
    unknown tmp[42263] t
    (42267 return tmp)
  }
  function postfix![42277](arg x[42274] :
  _shared) : _unknown[43] "always propagate line file info" "inline" "no doc"
  {
    (42281 'use' HaltWrappers 'only' )
    if(42324 call _cond_test chpl_checkNilDereferences)
    {
      if(42319 call _cond_test(42296 call ==(42291 call _to_nilable(42287 call . x c"chpl_t"))(42293 call . x c"chpl_t")))
      {
        if(42314 call _cond_test(42303 call ==(42299 call . x c"chpl_p") nil[38]))
        {
          (42311 call(42306 call . HaltWrappers c"nilCheckHalt") "argument to ! is nil")
        }
      }
    }
    (42335 return(42334 call _to_nonnil(42330 call . x c"chpl_p")))
  }
}