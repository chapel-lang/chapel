AST dump for LocaleModelHelpSetup after pass readExternC.
Module use list: 

{
  (195904 'use' ChapelLocale)
  (195909 'use' DefaultRectangular)
  (195913 'use' ChapelNumLocales)
  (195917 'use' ChapelEnv)
  (195921 'use' Sys)
  unknown debugLocaleModel[195924] "config" "param" 0
  unknown doneCreatingLocales[195929] 0 bool[10]
  unknown chpl_nodeID[195933] "extern" chpl_nodeID_t
  type chpl_root_locale_accum[196119] unknown nPUsPhysAcc[195940](195938 call chpl__atomicType int[13]) unknown nPUsPhysAll[195946](195944 call chpl__atomicType int[13]) unknown nPUsLogAcc[195952](195950 call chpl__atomicType int[13]) unknown nPUsLogAll[195958](195956 call chpl__atomicType int[13]) unknown maxTaskPar[195964](195962 call chpl__atomicType int[13]) function chpl_root_locale_accum[196119].accum[195973](arg _mt[196123]:_MT[227], arg this[196121]:chpl_root_locale_accum[196119], arg loc[195970] :
  locale[26]) : _unknown[43] "method" "primary method"
  {
    (195986 call(195976 call . nPUsPhysAcc c"add")(195982 call . loc c"nPUsPhysAcc"))
    (196000 call(195990 call . nPUsPhysAll c"add")(195996 call . loc c"nPUsPhysAll"))
    (196013 call(196003 call . nPUsLogAcc c"add")(196009 call . loc c"nPUsLogAcc"))
    (196026 call(196016 call . nPUsLogAll c"add")(196022 call . loc c"nPUsLogAll"))
    (196037 call(196029 call . maxTaskPar c"add")(196033 call . loc c"maxTaskPar"))
  } function chpl_root_locale_accum[196119].setRootLocaleValues[196048](arg _mt[196127]:_MT[227], arg this[196125]:chpl_root_locale_accum[196119], arg dst[196045] :
  (196044 'to borrowed class from unknown' RootLocale)) : _unknown[43] "method" "primary method"
  {
    (196060 call =(196051 call . dst c"nPUsPhysAcc")(196059 call(196055 call . nPUsPhysAcc c"read")))
    (196074 call =(196065 call . dst c"nPUsPhysAll")(196073 call(196069 call . nPUsPhysAll c"read")))
    (196087 call =(196078 call . dst c"nPUsLogAcc")(196086 call(196082 call . nPUsLogAcc c"read")))
    (196100 call =(196091 call . dst c"nPUsLogAll")(196099 call(196095 call . nPUsLogAll c"read")))
    (196113 call =(196104 call . dst c"maxTaskPar")(196112 call(196108 call . maxTaskPar c"read")))
  }
  function helpSetupRootLocaleFlat[196137](arg dst[196134] :
  (196133 'to borrowed class from unknown' RootLocale)) : _unknown[43]
  {
    unknown root_accum[196140] chpl_root_locale_accum
    Forall {
      induction variables:
        
        unknown locIdx[196191] "index var" "insert auto destroy"
      iterated expressions:
        (196152 call(196148 call . dst c"chpl_initOnLocales"))
      shadow variables:
        root_accum[196154] 'ref' intent
          init block
          {
          }
          deinit block
          {
          }
      forall body
      {
        const node[196165] "const"(196164 'new'(196163 'to unmanaged class from unknown'(196162 call LocaleModel dst)))
        (196177 call =(196175 call(196170 call . dst c"myLocales") locIdx) node)
        (196188 call(196183 call . root_accum c"accum") node)
      }
    }
    (196202 call(196197 call . root_accum c"setRootLocaleValues") dst)
  }
  function helpSetupRootLocaleNUMA[196213](arg dst[196210] :
  (196209 'to borrowed class from unknown' RootLocale)) : _unknown[43]
  {
    unknown root_accum[196216] chpl_root_locale_accum
    Forall {
      induction variables:
        
        unknown locIdx[196268] "index var" "insert auto destroy"
      iterated expressions:
        (196226 call(196222 call . dst c"chpl_initOnLocales"))
      shadow variables:
        root_accum[196228] 'ref' intent
          init block
          {
          }
          deinit block
          {
          }
      forall body
      {
        (196236 call chpl_task_setSubloc c_sublocid_any)
        const node[196245] "const"(196244 'new'(196243 'to unmanaged class from unknown'(196242 call LocaleModel dst)))
        (196256 call =(196254 call(196249 call . dst c"myLocales") locIdx) node)
        (196265 call(196260 call . root_accum c"accum") node)
      }
    }
    (196277 call(196272 call . root_accum c"setRootLocaleValues") dst)
  }
  function helpSetupRootLocaleAPU[196288](arg dst[196285] :
  (196284 'to borrowed class from unknown' RootLocale)) : _unknown[43]
  {
    unknown root_accum[196291] chpl_root_locale_accum
    Forall {
      induction variables:
        
        unknown locIdx[196343] "index var" "insert auto destroy"
      iterated expressions:
        (196301 call(196297 call . dst c"chpl_initOnLocales"))
      shadow variables:
        root_accum[196303] 'ref' intent
          init block
          {
          }
          deinit block
          {
          }
      forall body
      {
        (196311 call chpl_task_setSubloc c_sublocid_any)
        const node[196320] "const"(196319 'new'(196318 'to unmanaged class from unknown'(196317 call LocaleModel dst)))
        (196331 call =(196329 call(196324 call . dst c"myLocales") locIdx) node)
        (196340 call(196335 call . root_accum c"accum") node)
      }
    }
    (196352 call(196347 call . root_accum c"setRootLocaleValues") dst)
    (196360 call(196355 call . here c"runningTaskCntSet") 0)
  }
  function localSpawn[196366]() : _unknown[43] "inline" "private"
  {
    if(196467 call _cond_test(196385 call == CHPL_COMM "gasnet"))
    {
      unknown spawnfn[196388] c_string
      if(196462 call _cond_test(196429 call &&(196421 call &&(196409 call == CHPL_COMM_SUBSTRATE "udp")(196419 call ==(196417 call sys_getenv c"GASNET_SPAWNFN" spawnfn) 1))(196427 call == spawnfn c"L")))
      {
        (196432 return 1)
      }
      {
        { scopeless
          if(196458 call _cond_test(196452 call == CHPL_COMM_SUBSTRATE "smp"))
          {
            (196455 return 1)
          }
        }
      }
    }
    (196473 return 0)
  }
  function getNodeName[196479]() : _unknown[43] "inline" "private"
  {
    function chpl_nodeName[196483]() : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      c_string
    }
    const _node_name[196496] "const"(196494 call _cast string[24](196492 call chpl_nodeName))
    const _node_id[196506] "const"(196504 call _cast string[24](196501 call _cast int[13] chpl_nodeID))
    (196523 return(196520 IfExpr (196511 call localSpawn) then
    { scopeless
      (196517 call +(196514 call + _node_name "-") _node_id)
    } else
    { scopeless
      _node_name
    } ))
  }
  function helpSetupLocaleFlat[196534](arg dst[196531] :
  (196530 'to borrowed class from unknown' LocaleModel), out arg local_name[196537] :
  string[24]) : _unknown[43]
  {
    (196544 call = local_name(196543 call getNodeName))
    function chpl_task_getCallStackSize[196550]() : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      size_t
    }
    (196565 call =(196559 call . dst c"callStackSize")(196564 call chpl_task_getCallStackSize))
    function chpl_topo_getNumCPUsPhysical[196574](arg accessible_only[196571] :
    bool[10]) : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      c_int
    }
    (196588 call =(196581 call . dst c"nPUsPhysAcc")(196587 call chpl_topo_getNumCPUsPhysical 1))
    (196599 call =(196592 call . dst c"nPUsPhysAll")(196598 call chpl_topo_getNumCPUsPhysical 0))
    function chpl_topo_getNumCPUsLogical[196608](arg accessible_only[196605] :
    bool[10]) : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      c_int
    }
    (196622 call =(196615 call . dst c"nPUsLogAcc")(196621 call chpl_topo_getNumCPUsLogical 1))
    (196633 call =(196626 call . dst c"nPUsLogAll")(196632 call chpl_topo_getNumCPUsLogical 0))
    function chpl_task_getMaxPar[196638]() : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (196643 call uint[107] 32)
    }
    (196654 call =(196648 call . dst c"maxTaskPar")(196653 call chpl_task_getMaxPar))
  }
  function helpSetupLocaleNUMA[196666](arg dst[196663] :
  (196662 'to borrowed class from unknown' LocaleModel), out arg local_name[196669] :
  string[24], out arg numSublocales[196672]:_any[170](?)) : _unknown[43]
  {
    (196678 call helpSetupLocaleFlat dst local_name)
    function chpl_task_getNumSublocales[196683]() : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (196688 call int[13] 32)
    }
    (196696 call = numSublocales(196695 call chpl_task_getNumSublocales))
    function chpl_task_getMaxPar[196701]() : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (196706 call uint[107] 32)
    }
    if(196933 call _cond_test(196712 call >= numSublocales 1))
    {
      (196729 call =(196717 call . dst c"childSpace")(196727 call chpl__buildDomainExpr(196724 call #(196721 call chpl_build_low_bounded_range 0) numSublocales)))
      const nPUsPhysAccPerSubloc[196740] "const"(196738 call /(196734 call . dst c"nPUsPhysAcc") numSublocales)
      const nPUsPhysAllPerSubloc[196750] "const"(196748 call /(196744 call . dst c"nPUsPhysAll") numSublocales)
      const nPUsLogAccPerSubloc[196760] "const"(196758 call /(196754 call . dst c"nPUsLogAcc") numSublocales)
      const nPUsLogAllPerSubloc[196770] "const"(196768 call /(196764 call . dst c"nPUsLogAll") numSublocales)
      const maxTaskParPerSubloc[196779] "const"(196777 call /(196775 call chpl_task_getMaxPar) numSublocales)
      const origSubloc[196785] "const"(196784 call chpl_task_getRequestedSubloc)
      {
        unknown _indexOfInterest[196894] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[196895] "expr temp" "temp"
        (196904 'move' _iterator[196895](196902 call _getIterator(196790 call . dst c"childSpace")))
        Defer
        {
          {
            (196921 call _freeIterator _iterator[196895])
          }
        }
        { scopeless type
          (196910 'move' _indexOfInterest[196894](196907 call iteratorIndex _iterator[196895]))
        }
        ForLoop
        {
          unknown i[196914] "index var" "insert auto destroy"
          (196916 'move' i[196914] _indexOfInterest[196894])
          {
            (196799 call chpl_task_setSubloc(196796 call _cast chpl_sublocID_t i))
            (196821 call =(196810 call(196805 call . dst c"childLocales") i)(196820 'new'(196819 'to unmanaged class from unknown'(196818 call NumaDomain(196814 call _cast chpl_sublocID_t i) dst))))
            (196835 call =(196831 call .(196830 call(196825 call . dst c"childLocales") i) c"nPUsPhysAcc") nPUsPhysAccPerSubloc)
            (196849 call =(196845 call .(196844 call(196839 call . dst c"childLocales") i) c"nPUsPhysAll") nPUsPhysAllPerSubloc)
            (196863 call =(196859 call .(196858 call(196853 call . dst c"childLocales") i) c"nPUsLogAcc") nPUsLogAccPerSubloc)
            (196877 call =(196873 call .(196872 call(196867 call . dst c"childLocales") i) c"nPUsLogAll") nPUsLogAllPerSubloc)
            (196891 call =(196887 call .(196886 call(196881 call . dst c"childLocales") i) c"maxTaskPar") maxTaskParPerSubloc)
          }
          label _continueLabel[196899]
          _indexOfInterest[196894]
          _iterator[196895]
        }
        label _breakLabel[196900]
      }
      (196931 call chpl_task_setSubloc origSubloc)
    }
  }
  function helpSetupLocaleAPU[196946](arg dst[196943] :
  (196942 'to borrowed class from unknown' LocaleModel), out arg local_name[196949] :
  string[24], out arg numSublocales[196952]:_any[170](?)) : _unknown[43]
  {
    (196958 call helpSetupLocaleFlat dst local_name)
    function chpl_task_getMaxPar[196963]() : _unknown[43] "extern" "local args" "no fn body"
    {
    }
    { scopeless type
      (196968 call uint[107] 32)
    }
    (196974 call = numSublocales 2)
    const origSubloc[196980] "const"(196979 call chpl_task_getRequestedSubloc)
    (196989 call chpl_task_setSubloc(196986 call _cast chpl_sublocID_t 0))
    (197007 call =(196994 call . dst c"CPU")(197006 'new'(197005 'to unmanaged class from unknown'(197004 call CPULocale(197000 call _cast chpl_sublocID_t 0) dst))))
    (197016 call chpl_task_setSubloc(197013 call _cast chpl_sublocID_t 1))
    (197034 call =(197021 call . dst c"GPU")(197033 'new'(197032 'to unmanaged class from unknown'(197031 call GPULocale(197027 call _cast chpl_sublocID_t 1) dst))))
    (197040 call chpl_task_setSubloc origSubloc)
  }
}