AST dump for BytesCasts after pass cleanup.
Module use list: 

{
  (170459 'use' ChapelStandard)
  function _cast[170468](arg t[170465] :
  bytes[22], arg x[170471] :
  bool[10]) : _unknown[43] "inline"
  {
    if(170504 call _cond_test x)
    {
      (170479 return(170477 call _cast bytes[22] "true"))
    }
    {
      (170501 return(170499 call _cast bytes[22] "false"))
    }
  }
  function _cast[170517](arg t[170514] :
  chpl_anybool, arg x[170520] :
  bytes[22]) : _unknown[43] throws
  {
    unknown b[170529](170528 call(170524 call . x c"strip"))
    if(170646 call _cond_test(170538 call(170534 call . b c"isEmpty")))
    {
      (170561 'throw'(170560 'new'(170558 call _owned(170557 call IllegalArgumentError "bad cast from empty bytes to bool"))))
    }
    {
      if(170641 call _cond_test(170566 call == b "true"))
      {
        (170569 return 1)
      }
      {
        if(170637 call _cond_test(170574 call == b "false"))
        {
          (170577 return 0)
        }
        {
          (170634 'throw'(170633 'new'(170631 call _owned(170630 call IllegalArgumentError(170627 call +(170609 call + "bad cast from bytes '"(170608 call(170600 call . x c"decode")(170604 call . decodePolicy c"ignore"))) "' to bool")))))
        }
      }
    }
    (170652 return 0)
  }
  function _cast[170662](arg t[170659] :
  bytes[22], arg x[170665] :
  integral) : _unknown[43]
  {
    function integral_to_c_string[170677](arg x[170674] :
    (170673 call int[13] 64), arg size[170683] :
    (170682 call uint[107] 32), arg isSigned[170687] :
    bool[10], ref arg err[170691] :
    bool[10]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_string
    }
    function strlen[170705](const arg str[170702] :
    c_string) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      size_t
    }
    unknown isErr[170712] bool[10]
    unknown csc[170736](170735 call integral_to_c_string(170721 call _cast(170720 call int[13] 64) x)(170728 call numBytes(170726 'typeof' x))(170733 call isIntType(170731 'typeof' x)) isErr)
    if(170769 call _cond_test isErr)
    {
      Try!
      {
        {
          (170762 'throw'(170761 'new'(170759 call _owned(170758 call IllegalArgumentError "Unexpected case in integral_to_c_string"))))
        }
      }
    }
    unknown ret[170774] bytes[22]
    (170791 call =(170778 call . ret c"buff")(170789 call _cast(170788 call c_ptr(170786 call uint[107] 8)) csc))
    (170808 call =(170795 call . ret c"len")(170807 call(170802 call .(170801 call strlen csc) c"safeCast") int[13]))
    (170822 call =(170812 call . ret c"_size")(170820 call +(170816 call . ret c"len") 1))
    (170826 return ret)
  }
  function _cast[170836](arg t[170833] :
  integral, arg x[170839] :
  bytes[22]) : _unknown[43] throws "inline"
  {
    function c_string_to_int8_t[170848](arg x[170845] :
    c_string, ref arg err[170851] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (170857 call int[13] 8)
    }
    function c_string_to_int16_t[170868](arg x[170865] :
    c_string, ref arg err[170871] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (170877 call int[13] 16)
    }
    function c_string_to_int32_t[170887](arg x[170884] :
    c_string, ref arg err[170890] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (170896 call int[13] 32)
    }
    function c_string_to_int64_t[170906](arg x[170903] :
    c_string, ref arg err[170909] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (170915 call int[13] 64)
    }
    function c_string_to_uint8_t[170925](arg x[170922] :
    c_string, ref arg err[170928] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (170934 call uint[107] 8)
    }
    function c_string_to_uint16_t[170944](arg x[170941] :
    c_string, ref arg err[170947] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (170953 call uint[107] 16)
    }
    function c_string_to_uint32_t[170963](arg x[170960] :
    c_string, ref arg err[170966] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (170972 call uint[107] 32)
    }
    function c_string_to_uint64_t[170982](arg x[170979] :
    c_string, ref arg err[170985] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (170991 call uint[107] 64)
    }
    unknown retVal[170996] t
    unknown isErr[171000] bool[10]
    unknown localX[171009](171008 call(171004 call . x c"localize"))
    const hasUnderscores[171025] "const"(171023 call !=(171021 call(171013 call . localX c"find")(171018 call _cast bytes[22] "_")) 0)
    if(171202 call _cond_test hasUnderscores)
    {
      (171036 call = localX(171035 call(171031 call . localX c"strip")))
      unknown numElements[171041] int[13]
      {
        unknown _indexOfInterest[171070] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[171071] "expr temp" "temp"
        (171080 'move' _iterator[171071](171078 call _getIterator(171051 call(171047 call . localX c"split"))))
        Defer
        {
          {
            (171098 call _freeIterator _iterator[171071])
          }
        }
        { scopeless type
          (171086 'move' _indexOfInterest[171070](171083 call iteratorIndex _iterator[171071]))
        }
        ForLoop
        {
          unknown chpl__elidedIdx[171091] "index var" "insert auto destroy"
          (171093 'move' chpl__elidedIdx[171091] _indexOfInterest[171070])
          {
            (171054 call += numElements 1)
            if(171065 call _cond_test(171060 call > numElements 1))
            {
              break nil[38]
            }
          }
          label _continueLabel[171075]
          _indexOfInterest[171070]
          _iterator[171071]
        }
        label _breakLabel[171076]
      }
      if(171139 call _cond_test(171107 call > numElements 1))
      {
        (171137 'throw'(171136 'new'(171134 call _owned(171133 call IllegalArgumentError(171130 call +(171124 call +(171121 call + "bad cast from bytes '"(171120 call(171112 call . x c"decode")(171116 call . decodePolicy c"ignore"))) "' to ")(171128 call _cast string[24] t))))))
      }
      if(171197 call _cond_test(171149 call >=(171145 call . localX c"length") 2))
      {
        (171194 call = localX(171192 call +(171155 call localX 1)(171191 call(171164 call .(171161 call localX(171158 call chpl_build_low_bounded_range 2)) c"replace")(171169 call _cast bytes[22] "_")(171189 call _cast bytes[22] ""))))
      }
    }
    if(171242 call _cond_test(171211 call(171207 call . localX c"isEmpty")))
    {
      (171240 'throw'(171239 'new'(171237 call _owned(171236 call IllegalArgumentError(171233 call + "bad cast from empty bytes to "(171231 call _cast string[24] t))))))
    }
    if(171549 call _cond_test(171250 call isIntType t))
    {
      {
        unknown tmp[171382] "expr temp" "maybe param" "maybe type" "temp"
        (171384 'move' tmp[171382](171254 call numBits t))
        if(171389 call _cond_test(171386 call == tmp[171382] 8))
        {
          (171269 call = retVal(171268 call c_string_to_int8_t(171265 call(171261 call . localX c"c_str")) isErr))
        }
        {
          if(171395 call _cond_test(171392 call == tmp[171382] 16))
          {
            (171288 call = retVal(171287 call c_string_to_int16_t(171284 call(171280 call . localX c"c_str")) isErr))
          }
          {
            if(171402 call _cond_test(171399 call == tmp[171382] 32))
            {
              (171307 call = retVal(171306 call c_string_to_int32_t(171303 call(171299 call . localX c"c_str")) isErr))
            }
            {
              if(171409 call _cond_test(171406 call == tmp[171382] 64))
              {
                (171326 call = retVal(171325 call c_string_to_int64_t(171322 call(171318 call . localX c"c_str")) isErr))
              }
              {
                (171376 call compilerError "Unsupported bit width "(171353 call numBits t)(171374 call + " in cast from bytes to "(171372 call _cast string[24] t)))
              }
            }
          }
        }
      }
    }
    {
      {
        unknown tmp[171516] "expr temp" "maybe param" "maybe type" "temp"
        (171518 'move' tmp[171516](171418 call numBits t))
        if(171523 call _cond_test(171520 call == tmp[171516] 8))
        {
          (171433 call = retVal(171432 call c_string_to_uint8_t(171429 call(171425 call . localX c"c_str")) isErr))
        }
        {
          if(171529 call _cond_test(171526 call == tmp[171516] 16))
          {
            (171452 call = retVal(171451 call c_string_to_uint16_t(171448 call(171444 call . localX c"c_str")) isErr))
          }
          {
            if(171536 call _cond_test(171533 call == tmp[171516] 32))
            {
              (171471 call = retVal(171470 call c_string_to_uint32_t(171467 call(171463 call . localX c"c_str")) isErr))
            }
            {
              if(171543 call _cond_test(171540 call == tmp[171516] 64))
              {
                (171490 call = retVal(171489 call c_string_to_uint64_t(171486 call(171482 call . localX c"c_str")) isErr))
              }
              {
                (171510 call compilerError "Unsupported bit width "(171502 call numBits t)(171508 call + " in cast from bytes to "(171506 call _cast string[24] t)))
              }
            }
          }
        }
      }
    }
    if(171584 call _cond_test isErr)
    {
      (171582 'throw'(171581 'new'(171579 call _owned(171578 call IllegalArgumentError(171575 call +(171569 call +(171566 call + "bad cast from bytes '"(171565 call(171557 call . x c"decode")(171561 call . decodePolicy c"ignore"))) "' to ")(171573 call _cast string[24] t))))))
    }
    (171590 return retVal)
  }
  function _real_cast_helper[171603](arg x[171600] :
  (171599 call real[16] 64), param arg isImag[171606] :
  bool[10]) : _unknown[43] "inline"
  {
    function real_to_c_string[171619](arg x[171616] :
    (171615 call real[16] 64), arg isImag[171622] :
    bool[10]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_string
    }
    function strlen[171636](const arg str[171633] :
    c_string) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      size_t
    }
    unknown csc[171653](171652 call real_to_c_string(171648 call _cast(171647 call real[16] 64) x) isImag)
    unknown ret[171657] bytes[22]
    (171674 call =(171661 call . ret c"buff")(171672 call _cast(171671 call c_ptr(171669 call uint[107] 8)) csc))
    (171691 call =(171678 call . ret c"len")(171690 call(171685 call .(171684 call strlen csc) c"safeCast") int[13]))
    (171705 call =(171695 call . ret c"_size")(171703 call +(171699 call . ret c"len") 1))
    (171709 return ret)
  }
  { scopeless type
    bytes[22]
  }
  function _cast[171720](arg t[171717] :
  bytes[22], arg x[171723] :
  chpl_anyreal) : _unknown[43]
  {
    (171737 return(171736 call _real_cast_helper(171732 call _cast(171731 call real[16] 64) x) 0))
  }
  function _cast[171748](arg t[171745] :
  bytes[22], arg x[171751] :
  chpl_anyimag) : _unknown[43]
  {
    unknown r[171762](171761 'cast'(171759 call real[16] 64) x)
    (171771 return(171770 call _real_cast_helper r 1))
  }
  function _cleanupBytesForRealCast[171779](arg t[171777]:_any[170](?), ref arg s[171782] :
  bytes[22]) : _unknown[43] throws "inline" "no return value for void"
  {
    unknown len[171789](171786 call . s c"length")
    if(171814 call _cond_test(171798 call(171794 call . s c"isEmpty")))
    {
      (171812 'throw'(171811 'new'(171809 call _owned(171808 call IllegalArgumentError(171805 call + "bad cast from empty bytes to "(171803 call _cast string[24] t))))))
    }
    if(171940 call _cond_test(171841 call &&(171821 call >= len 2)(171839 call !=(171837 call(171829 call .(171828 call s(171825 call chpl_build_low_bounded_range 2)) c"find")(171834 call _cast bytes[22] "_")) 0)))
    {
      if(171935 call _cond_test(171854 call &&(171845 call > len 2)(171852 call ==(171850 call s 1) "_")))
      {
        (171897 call = s(171895 call +(171860 call s 1)(171894 call(171867 call .(171866 call s(171863 call chpl_build_low_bounded_range 2)) c"replace")(171872 call _cast bytes[22] "_")(171892 call _cast bytes[22] ""))))
      }
      {
        (171931 call = s(171930 call(171903 call . s c"replace")(171908 call _cast bytes[22] "_")(171928 call _cast bytes[22] "")))
      }
    }
  }
  function _cast[171952](arg t[171949] :
  chpl_anyreal, arg x[171955] :
  bytes[22]) : _unknown[43] throws "inline"
  {
    function c_string_to_real32[171964](arg x[171961] :
    c_string, ref arg err[171967] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (171973 call real[16] 32)
    }
    function c_string_to_real64[171984](arg x[171981] :
    c_string, ref arg err[171987] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (171993 call real[16] 64)
    }
    unknown retVal[171998] t
    unknown isErr[172002] bool[10]
    unknown localX[172011](172010 call(172006 call . x c"localize"))
    (172018 call _cleanupBytesForRealCast t localX)
    {
      unknown tmp[172092] "expr temp" "maybe param" "maybe type" "temp"
      (172094 'move' tmp[172092](172023 call numBits t))
      if(172099 call _cond_test(172096 call == tmp[172092] 32))
      {
        (172038 call = retVal(172037 call c_string_to_real32(172034 call(172030 call . localX c"c_str")) isErr))
      }
      {
        if(172105 call _cond_test(172102 call == tmp[172092] 64))
        {
          (172057 call = retVal(172056 call c_string_to_real64(172053 call(172049 call . localX c"c_str")) isErr))
        }
        {
          (172086 call compilerError "Unsupported bit width "(172069 call numBits t) " in cast to bytes")
        }
      }
    }
    if(172162 call _cond_test isErr)
    {
      (172160 'throw'(172159 'new'(172157 call _owned(172156 call IllegalArgumentError(172153 call +(172150 call +(172141 call +(172123 call + "bad cast from bytes '"(172122 call(172114 call . x c"decode")(172118 call . decodePolicy c"ignore"))) "' to real(")(172148 call _cast string[24](172146 call numBits t))) ")")))))
    }
    (172168 return retVal)
  }
  function _cast[172178](arg t[172175] :
  chpl_anyimag, arg x[172181] :
  bytes[22]) : _unknown[43] throws "inline"
  {
    function c_string_to_imag32[172190](arg x[172187] :
    c_string, ref arg err[172193] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (172199 call imag[122] 32)
    }
    function c_string_to_imag64[172210](arg x[172207] :
    c_string, ref arg err[172213] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (172219 call imag[122] 64)
    }
    unknown retVal[172224] t
    unknown isErr[172228] bool[10]
    unknown localX[172237](172236 call(172232 call . x c"localize"))
    (172244 call _cleanupBytesForRealCast t localX)
    {
      unknown tmp[172303] "expr temp" "maybe param" "maybe type" "temp"
      (172305 'move' tmp[172303](172249 call numBits t))
      if(172310 call _cond_test(172307 call == tmp[172303] 32))
      {
        (172264 call = retVal(172263 call c_string_to_imag32(172260 call(172256 call . localX c"c_str")) isErr))
      }
      {
        if(172316 call _cond_test(172313 call == tmp[172303] 64))
        {
          (172283 call = retVal(172282 call c_string_to_imag64(172279 call(172275 call . localX c"c_str")) isErr))
        }
        {
          (172297 call compilerError "Unsupported bit width "(172295 call numBits t) " in cast to bytes")
        }
      }
    }
    if(172373 call _cond_test isErr)
    {
      (172371 'throw'(172370 'new'(172368 call _owned(172367 call IllegalArgumentError(172364 call +(172361 call +(172352 call +(172334 call + "bad cast from bytes '"(172333 call(172325 call . x c"decode")(172329 call . decodePolicy c"ignore"))) "' to imag(")(172359 call _cast string[24](172357 call numBits t))) ")")))))
    }
    (172379 return retVal)
  }
  function _cast[172389](arg t[172386] :
  bytes[22], arg x[172392] :
  chpl_anycomplex) : _unknown[43]
  {
    if(172432 call _cond_test(172409 call ||(172401 call isnan(172397 call . x c"re"))(172408 call isnan(172404 call . x c"im"))))
    {
      (172430 return(172428 call _cast bytes[22] "nan"))
    }
    unknown re[172445](172443 call _cast bytes[22](172439 call . x c"re"))
    unknown im[172449] bytes[22]
    unknown op[172453] bytes[22]
    if(172576 call _cond_test(172461 call <(172457 call . x c"im") 0))
    {
      (172473 call = im(172471 call _cast bytes[22](172468 call -(172465 call . x c"im"))))
      (172494 call = op " - ")
    }
    {
      if(172572 call _cond_test(172512 call &&(172504 call ==(172498 call . x c"im")(172502 call - 0.0))(172510 call !=(172507 call - 0.0) 0.0)))
      {
        (172531 call = im "0.0")
        (172537 call = op " - ")
      }
      {
        (172548 call = im(172546 call _cast bytes[22](172542 call . x c"im")))
        (172569 call = op " + ")
      }
    }
    const ts0[172585] "const"(172583 call + re op)
    const ts1[172592] "const"(172590 call + ts0 im)
    const ret[172615] "const"(172613 call + ts1(172611 call _cast bytes[22] "i"))
    (172619 return ret)
  }
  function _cast[172629](arg t[172626] :
  chpl_anycomplex, arg x[172632] :
  bytes[22]) : _unknown[43] throws "inline"
  {
    function c_string_to_complex64[172641](arg x[172638] :
    c_string, ref arg err[172644] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (172650 call complex[132] 64)
    }
    function c_string_to_complex128[172661](arg x[172658] :
    c_string, ref arg err[172664] :
    bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      (172670 call complex[132] 128)
    }
    unknown retVal[172675] t
    unknown isErr[172679] bool[10]
    const localX[172688] "const"(172687 call(172683 call . x c"localize"))
    if(172733 call _cond_test(172696 call(172692 call . localX c"isEmpty")))
    {
      (172731 'throw'(172730 'new'(172728 call _owned(172727 call IllegalArgumentError(172724 call +(172721 call + "bad cast from empty bytes to complex("(172719 call _cast string[24](172717 call numBits t))) ")")))))
    }
    {
      unknown tmp[172795] "expr temp" "maybe param" "maybe type" "temp"
      (172797 'move' tmp[172795](172741 call numBits t))
      if(172802 call _cond_test(172799 call == tmp[172795] 64))
      {
        (172756 call = retVal(172755 call c_string_to_complex64(172752 call(172748 call . localX c"c_str")) isErr))
      }
      {
        if(172808 call _cond_test(172805 call == tmp[172795] 128))
        {
          (172775 call = retVal(172774 call c_string_to_complex128(172771 call(172767 call . localX c"c_str")) isErr))
        }
        {
          (172789 call compilerError "Unsupported bit width "(172787 call numBits t) " in cast to bytes")
        }
      }
    }
    if(172865 call _cond_test isErr)
    {
      (172863 'throw'(172862 'new'(172860 call _owned(172859 call IllegalArgumentError(172856 call +(172853 call +(172844 call +(172826 call + "bad cast from bytes '"(172825 call(172817 call . x c"decode")(172821 call . decodePolicy c"ignore"))) "' to complex(")(172851 call _cast string[24](172849 call numBits t))) ")")))))
    }
    (172871 return retVal)
  }
  function _cast[172881](arg t[172878] :
  bytes[22], arg x[172884] :
  enumerated) : _unknown[43]
  {
    (172894 return(172892 call _cast bytes[22](172889 call _cast string[24] x)))
  }
}