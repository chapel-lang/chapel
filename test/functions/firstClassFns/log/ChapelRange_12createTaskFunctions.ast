AST dump for ChapelRange after pass createTaskFunctions.
Module use list: ChapelBase SysBasic HaltWrappers Math 

{
  function chpl__init_ChapelRange[390180]() : void[4] "insert line file info" "module init"
  {
    (489636 'init var' debugChapelRange[66071] 0)
    (489638 'init var' useOptimizedRangeIterators[66075] 1)
    {
    }
    (463163 return _void[47])
  }
  unknown debugChapelRange[66071] "config" "no doc" "param"
  unknown useOptimizedRangeIterators[66075] "config" "no doc" "param"
  type BoundedRangeType[66087] def bounded[66079]:BoundedRangeType[66087] def boundedLow[66081]:BoundedRangeType[66087] def boundedHigh[66083]:BoundedRangeType[66087] def boundedNone[66085]:BoundedRangeType[66087]
  function range[66183](?).strType[66161](arg _mt[66187]:_MT[227], arg this[66185]:range[66183](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[460154] "RVV" "temp" "type variable"
    unknown call_tmp[565302] "expr temp" "maybe param" "maybe type" "temp"
    (565305 'move' call_tmp[565302](340940 call idxType _mt[232] this[66185]))
    unknown call_tmp[565307] "expr temp" "maybe param" "maybe type" "temp"
    (565310 'move' call_tmp[565307](66166 call chpl__rangeStrideType call_tmp[565302]))
    (460159 'move' ret[460154](460158 'deref' call_tmp[565307]))
    (460156 return ret[460154])
  }
  function range[66183](?).chpl__promotionType[66174](arg _mt[66191]:_MT[227], arg this[66189]:range[66183](?)) type : _unknown[43] "method" "primary method"
  {
    unknown ret[460163] "RVV" "temp" "type variable"
    unknown call_tmp[565314] "expr temp" "maybe param" "maybe type" "temp"
    (565317 'move' call_tmp[565314](340945 call idxType _mt[232] this[66189]))
    (460168 'move' ret[460163](460167 'deref' call_tmp[565314]))
    (460165 return ret[460163])
  }
  function range[66183](?).idxType[702876](arg _mt[702878]:_MT[227], arg this[702880]:range[66183](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[702897] "RVV" "temp" "type variable"
    unknown call_tmp[702911] "expr temp" "maybe param" "maybe type" "temp"
    (702914 'move' call_tmp[702911](702885 'is bound' this[702880] c"idxType"))
    if call_tmp[702911]
    {
      unknown call_tmp[702916] "expr temp" "maybe param" "maybe type" "temp"
      (702919 'move' call_tmp[702916](702884 '.v' this[702880] c"idxType"))
      (702902 'move' ret[702897](702901 'deref' call_tmp[702916]))
      gotoReturn _end_idxType[702895] _end_idxType[702895]
    }
    {
      (702907 'move' ret[702897](702906 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[702895] _end_idxType[702895]
    }
    label _end_idxType[702895]
    (702899 return ret[702897])
  }
  function range[66183](?).idxType[702921](arg _mt[702923]:_MT[227], arg this[702925]:range[66183](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[702942] "RVV" "temp" "type variable"
    unknown call_tmp[702956] "expr temp" "maybe param" "maybe type" "temp"
    (702959 'move' call_tmp[702956](702930 'is bound' this[702925] c"idxType"))
    if call_tmp[702956]
    {
      unknown call_tmp[702961] "expr temp" "maybe param" "maybe type" "temp"
      (702964 'move' call_tmp[702961](702929 '.v' this[702925] c"idxType"))
      (702947 'move' ret[702942](702946 'deref' call_tmp[702961]))
      gotoReturn _end_idxType[702940] _end_idxType[702940]
    }
    {
      (702952 'move' ret[702942](702951 'deref' _uninstantiated[247]))
      gotoReturn _end_idxType[702940] _end_idxType[702940]
    }
    label _end_idxType[702940]
    (702944 return ret[702942])
  }
  function range[66183](?).boundedType[702966](arg _mt[702968]:_MT[227], arg this[702970]:range[66183](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[702987] "RVV" "param" "temp"
    unknown call_tmp[703001] "expr temp" "maybe param" "maybe type" "temp"
    (703004 'move' call_tmp[703001](702975 'is bound' this[702970] c"boundedType"))
    if call_tmp[703001]
    {
      unknown call_tmp[703006] "expr temp" "maybe param" "maybe type" "temp"
      (703009 'move' call_tmp[703006](702974 '.' this[702970] c"boundedType"))
      (702992 'move' ret[702987](702991 'deref' call_tmp[703006]))
      gotoReturn _end_boundedType[702985] _end_boundedType[702985]
    }
    {
      (702997 'move' ret[702987](702996 'deref' ?[249]))
      gotoReturn _end_boundedType[702985] _end_boundedType[702985]
    }
    label _end_boundedType[702985]
    (702989 return ret[702987])
  }
  function range[66183](?).boundedType[703011](arg _mt[703013]:_MT[227], arg this[703015]:range[66183](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[703032] "RVV" "param" "temp"
    unknown call_tmp[703046] "expr temp" "maybe param" "maybe type" "temp"
    (703049 'move' call_tmp[703046](703020 'is bound' this[703015] c"boundedType"))
    if call_tmp[703046]
    {
      unknown call_tmp[703051] "expr temp" "maybe param" "maybe type" "temp"
      (703054 'move' call_tmp[703051](703019 '.' this[703015] c"boundedType"))
      (703037 'move' ret[703032](703036 'deref' call_tmp[703051]))
      gotoReturn _end_boundedType[703030] _end_boundedType[703030]
    }
    {
      (703042 'move' ret[703032](703041 'deref' ?[249]))
      gotoReturn _end_boundedType[703030] _end_boundedType[703030]
    }
    label _end_boundedType[703030]
    (703034 return ret[703032])
  }
  function range[66183](?).stridable[703056](arg _mt[703058]:_MT[227], arg this[703060]:range[66183](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[703077] "RVV" "param" "temp"
    unknown call_tmp[703091] "expr temp" "maybe param" "maybe type" "temp"
    (703094 'move' call_tmp[703091](703065 'is bound' this[703060] c"stridable"))
    if call_tmp[703091]
    {
      unknown call_tmp[703096] "expr temp" "maybe param" "maybe type" "temp"
      (703099 'move' call_tmp[703096](703064 '.' this[703060] c"stridable"))
      (703082 'move' ret[703077](703081 'deref' call_tmp[703096]))
      gotoReturn _end_stridable[703075] _end_stridable[703075]
    }
    {
      (703087 'move' ret[703077](703086 'deref' ?[249]))
      gotoReturn _end_stridable[703075] _end_stridable[703075]
    }
    label _end_stridable[703075]
    (703079 return ret[703077])
  }
  function range[66183](?).stridable[703101](arg _mt[703103]:_MT[227], arg this[703105]:range[66183](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[703122] "RVV" "param" "temp"
    unknown call_tmp[703136] "expr temp" "maybe param" "maybe type" "temp"
    (703139 'move' call_tmp[703136](703110 'is bound' this[703105] c"stridable"))
    if call_tmp[703136]
    {
      unknown call_tmp[703141] "expr temp" "maybe param" "maybe type" "temp"
      (703144 'move' call_tmp[703141](703109 '.' this[703105] c"stridable"))
      (703127 'move' ret[703122](703126 'deref' call_tmp[703141]))
      gotoReturn _end_stridable[703120] _end_stridable[703120]
    }
    {
      (703132 'move' ret[703122](703131 'deref' ?[249]))
      gotoReturn _end_stridable[703120] _end_stridable[703120]
    }
    label _end_stridable[703120]
    (703124 return ret[703122])
  }
  function range[66183](?)._low[703146](arg _mt[703148]:_MT[227], ref arg this[703150]:range[66183](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[703159] "RVV" "temp"
    unknown call_tmp[703166] "expr temp" "maybe param" "maybe type" "temp"
    (703169 'move' call_tmp[703166](703154 '.' this[703150] c"_low"))
    (703164 'move' ret[703159](703163 'addr of' call_tmp[703166]))
    (703161 return ret[703159])
  }
  function range[66183](?)._high[703171](arg _mt[703173]:_MT[227], ref arg this[703175]:range[66183](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[703184] "RVV" "temp"
    unknown call_tmp[703191] "expr temp" "maybe param" "maybe type" "temp"
    (703194 'move' call_tmp[703191](703179 '.' this[703175] c"_high"))
    (703189 'move' ret[703184](703188 'addr of' call_tmp[703191]))
    (703186 return ret[703184])
  }
  function range[66183](?)._stride[703196](arg _mt[703198]:_MT[227], ref arg this[703200]:range[66183](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[703209] "RVV" "temp"
    unknown call_tmp[703216] "expr temp" "maybe param" "maybe type" "temp"
    (703219 'move' call_tmp[703216](703204 '.' this[703200] c"_stride"))
    (703214 'move' ret[703209](703213 'addr of' call_tmp[703216]))
    (703211 return ret[703209])
  }
  function range[66183](?)._alignment[703221](arg _mt[703223]:_MT[227], ref arg this[703225]:range[66183](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[703234] "RVV" "temp"
    unknown call_tmp[703241] "expr temp" "maybe param" "maybe type" "temp"
    (703244 'move' call_tmp[703241](703229 '.' this[703225] c"_alignment"))
    (703239 'move' ret[703234](703238 'addr of' call_tmp[703241]))
    (703236 return ret[703234])
  }
  function range[66183](?)._aligned[703246](arg _mt[703248]:_MT[227], ref arg this[703250]:range[66183](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[703259] "RVV" "temp"
    unknown call_tmp[703266] "expr temp" "maybe param" "maybe type" "temp"
    (703269 'move' call_tmp[703266](703254 '.' this[703250] c"_aligned"))
    (703264 'move' ret[703259](703263 'addr of' call_tmp[703266]))
    (703261 return ret[703259])
  }
  function range[66183](?).init=[703271](arg _mt[703274]:_MT[227], ref arg this[703275]:range[66183](?), arg other[703278] :
  (703277 'typeof' this[703275])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method"
  {
    unknown tmp[703363] "temp" "type variable"
    (703365 'move' tmp[703363](703287 call idxType _mt[232] other[703278]))
    (703367 'init field' this[703275] c"idxType" tmp[703363])
    unknown call_tmp[703555] "expr temp" "maybe param" "maybe type" "temp"
    (703558 'move' call_tmp[703555](703297 call boundedType _mt[232] other[703278]))
    unknown call_tmp[703560] "expr temp" "maybe param" "maybe type" "temp"
    (703563 'move' call_tmp[703560](703372 call _cast BoundedRangeType[66087] call_tmp[703555]))
    (703374 'init field' this[703275] c"boundedType" call_tmp[703560])
    unknown call_tmp[703567] "expr temp" "maybe param" "maybe type" "temp"
    (703570 'move' call_tmp[703567](703307 call stridable _mt[232] other[703278]))
    unknown call_tmp[703572] "expr temp" "maybe param" "maybe type" "temp"
    (703575 'move' call_tmp[703572](703378 call _cast bool[10] call_tmp[703567]))
    (703380 'init field' this[703275] c"stridable" call_tmp[703572])
    unknown call_tmp[703579] "maybe param" "maybe type" "temp"
    (703582 'move' call_tmp[703579](703317 call _low _mt[232] other[703278]))
    unknown call_tmp[703584] "expr temp" "maybe param" "maybe type" "temp"
    (703587 'move' call_tmp[703584](703394 '.v' this[703275] c"idxType"))
    unknown call_tmp[703589] "maybe param" "maybe type" "temp"
    (703592 'move' call_tmp[703589](703386 call chpl__idxTypeToIntIdxType call_tmp[703584]))
    unknown tmp[703383] "temp"
    (703388 'init var' tmp[703383] call_tmp[703579] call_tmp[703589])
    (703390 'init field' this[703275] c"_low" tmp[703383])
    unknown call_tmp[703596] "maybe param" "maybe type" "temp"
    (703599 'move' call_tmp[703596](703327 call _high _mt[232] other[703278]))
    unknown call_tmp[703601] "expr temp" "maybe param" "maybe type" "temp"
    (703604 'move' call_tmp[703601](703408 '.v' this[703275] c"idxType"))
    unknown call_tmp[703606] "maybe param" "maybe type" "temp"
    (703609 'move' call_tmp[703606](703400 call chpl__idxTypeToIntIdxType call_tmp[703601]))
    unknown tmp[703397] "temp"
    (703402 'init var' tmp[703397] call_tmp[703596] call_tmp[703606])
    (703404 'init field' this[703275] c"_high" tmp[703397])
    unknown tmp[703411] "temp"
    unknown tmp[703474] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[703475] "maybe param" "temp"
    unknown call_tmp[703611] "expr temp" "maybe param" "maybe type" "temp"
    (703614 'move' call_tmp[703611](703427 '.v' this[703275] c"stridable"))
    (703480 'move' tmp[703475](703478 call _cond_test call_tmp[703611]))
    if tmp[703475]
    {
      unknown tmp[703482] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[703616] "expr temp" "maybe param" "maybe type" "temp"
      (703619 'move' call_tmp[703616](703430 '.v' this[703275] c"idxType"))
      (703484 'move' tmp[703482](703416 call chpl__rangeStrideType call_tmp[703616]))
      (703489 'move' tmp[703474](703486 '_paramFoldLogical' tmp[703475] tmp[703482]))
    }
    {
      (703494 'move' tmp[703474](703491 '_paramFoldLogical' tmp[703475] nothing[7]))
    }
    unknown call_tmp[703623] "maybe param" "maybe type" "temp"
    (703626 'move' call_tmp[703623](703337 call _stride _mt[232] other[703278]))
    (703421 'init var' tmp[703411] call_tmp[703623] tmp[703474])
    (703423 'init field' this[703275] c"_stride" tmp[703411])
    unknown tmp[703433] "temp"
    unknown tmp[703501] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[703502] "maybe param" "temp"
    unknown call_tmp[703628] "expr temp" "maybe param" "maybe type" "temp"
    (703631 'move' call_tmp[703628](703449 '.v' this[703275] c"stridable"))
    (703507 'move' tmp[703502](703505 call _cond_test call_tmp[703628]))
    if tmp[703502]
    {
      unknown tmp[703509] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[703633] "expr temp" "maybe param" "maybe type" "temp"
      (703636 'move' call_tmp[703633](703452 '.v' this[703275] c"idxType"))
      (703511 'move' tmp[703509](703438 call chpl__idxTypeToIntIdxType call_tmp[703633]))
      (703516 'move' tmp[703501](703513 '_paramFoldLogical' tmp[703502] tmp[703509]))
    }
    {
      (703521 'move' tmp[703501](703518 '_paramFoldLogical' tmp[703502] nothing[7]))
    }
    unknown call_tmp[703640] "maybe param" "maybe type" "temp"
    (703643 'move' call_tmp[703640](703347 call _alignment _mt[232] other[703278]))
    (703443 'init var' tmp[703433] call_tmp[703640] tmp[703501])
    (703445 'init field' this[703275] c"_alignment" tmp[703433])
    unknown tmp[703455] "temp"
    unknown tmp[703528] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[703529] "maybe param" "temp"
    unknown call_tmp[703645] "expr temp" "maybe param" "maybe type" "temp"
    (703648 'move' call_tmp[703645](703469 '.v' this[703275] c"stridable"))
    (703534 'move' tmp[703529](703532 call _cond_test call_tmp[703645]))
    if tmp[703529]
    {
      (703539 'move' tmp[703528](703536 '_paramFoldLogical' tmp[703529] bool[10]))
    }
    {
      (703544 'move' tmp[703528](703541 '_paramFoldLogical' tmp[703529] nothing[7]))
    }
    unknown call_tmp[703652] "maybe param" "maybe type" "temp"
    (703655 'move' call_tmp[703652](703357 call _aligned _mt[232] other[703278]))
    (703463 'init var' tmp[703455] call_tmp[703652] tmp[703528])
    (703465 'init field' this[703275] c"_aligned" tmp[703455])
    (703472 return _void[47])
  }
  function range[66183](?).deinit[703657](arg _mt[703659]:_MT[227], arg this[703661]:range[66183](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (703663 return _void[47])
  }
  type range[66183](?) unknown idxType[66094] "type variable" int(64)[13] unknown boundedType[66104] "param" bounded[66079] BoundedRangeType[66087] unknown stridable[66109] "param" 0 bool[10] unknown _low[66116](66115 call chpl__idxTypeToIntIdxType idxType[66094]) unknown _high[66123](66122 call chpl__idxTypeToIntIdxType idxType[66094]) unknown _stride[66135](66132 IfExpr  stridable[66109] then
  { scopeless
    (66130 call chpl__rangeStrideType idxType[66094])
  } else
  { scopeless
    nothing[7]
  } ) unknown _alignment[66147](66144 IfExpr  stridable[66109] then
  { scopeless
    (66142 call chpl__idxTypeToIntIdxType idxType[66094])
  } else
  { scopeless
    nothing[7]
  } ) unknown _aligned[66156](66153 IfExpr  stridable[66109] then
  { scopeless
    bool[10]
  } else
  { scopeless
    nothing[7]
  } )
  function range[66183](?).intIdxType[66197](arg _mt[66202]:_MT[227], arg this[66199]:range[66183](?) :
  range[66183](?)) type : _unknown[43] "method" "no parens"
  {
    unknown ret[460172] "RVV" "temp" "type variable"
    unknown call_tmp[565321] "expr temp" "maybe param" "maybe type" "temp"
    (565324 'move' call_tmp[565321](340950 call idxType _mt[232] this[66199]))
    unknown call_tmp[565326] "expr temp" "maybe param" "maybe type" "temp"
    (565329 'move' call_tmp[565326](66207 call chpl__idxTypeToIntIdxType call_tmp[565321]))
    (460177 'move' ret[460172](460176 'deref' call_tmp[565326]))
    (460174 return ret[460172])
  }
  function range[66183](?).init[66220](arg _mt[66285]:_MT[227], ref arg this[66282]:range[66183](?) :
  range[66183](?), arg idxType[66217]:_any[170](?) =
  int(64)[13], param arg boundedType[66227]:BoundedRangeType[66087] =
  bounded[66079], param arg stridable[66233]:bool[10] =
  0, arg _low[66243] :
  idxType[66217] =
  (66242 call chpl__intToIdx idxType[66217] 1), arg _high[66253] :
  idxType[66217] =
  (66252 call chpl__intToIdx idxType[66217] 0), arg _stride[66262] :
  (66260 call chpl__rangeStrideType idxType[66217]) =
  1, arg _alignment[66272] :
  idxType[66217] =
  (66271 call chpl__intToIdx idxType[66217] 0), arg _aligned[66278]:bool[10] =
  0) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[430037] "temp" "type variable"
    (430039 'move' tmp[430037] idxType[66217])
    (430041 'init field' this[66282] c"idxType" tmp[430037])
    unknown call_tmp[565331] "expr temp" "maybe param" "maybe type" "temp"
    (565334 'move' call_tmp[565331](430046 call _cast BoundedRangeType[66087] boundedType[66227]))
    (430048 'init field' this[66282] c"boundedType" call_tmp[565331])
    unknown call_tmp[565336] "expr temp" "maybe param" "maybe type" "temp"
    (565339 'move' call_tmp[565336](430052 call _cast bool[10] stridable[66233]))
    (430054 'init field' this[66282] c"stridable" call_tmp[565336])
    unknown call_tmp[565341] "maybe param" "maybe type" "temp"
    (565344 'move' call_tmp[565341](66323 call chpl__idxToInt _low[66243]))
    unknown call_tmp[565346] "expr temp" "maybe param" "maybe type" "temp"
    (565349 'move' call_tmp[565346](430068 '.v' this[66282] c"idxType"))
    unknown call_tmp[565351] "maybe param" "maybe type" "temp"
    (565354 'move' call_tmp[565351](430060 call chpl__idxTypeToIntIdxType call_tmp[565346]))
    unknown tmp[430057] "temp"
    (430062 'init var' tmp[430057] call_tmp[565341] call_tmp[565351])
    (430064 'init field' this[66282] c"_low" tmp[430057])
    unknown call_tmp[565356] "maybe param" "maybe type" "temp"
    (565359 'move' call_tmp[565356](66336 call chpl__idxToInt _high[66253]))
    unknown call_tmp[565361] "expr temp" "maybe param" "maybe type" "temp"
    (565364 'move' call_tmp[565361](430082 '.v' this[66282] c"idxType"))
    unknown call_tmp[565366] "maybe param" "maybe type" "temp"
    (565369 'move' call_tmp[565366](430074 call chpl__idxTypeToIntIdxType call_tmp[565361]))
    unknown tmp[430071] "temp"
    (430076 'init var' tmp[430071] call_tmp[565356] call_tmp[565366])
    (430078 'init field' this[66282] c"_high" tmp[430071])
    unknown tmp[430085] "temp"
    unknown tmp[504274] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504275] "maybe param" "temp"
    unknown call_tmp[565371] "expr temp" "maybe param" "maybe type" "temp"
    (565374 'move' call_tmp[565371](430101 '.v' this[66282] c"stridable"))
    (504280 'move' tmp[504275](504278 call _cond_test call_tmp[565371]))
    if tmp[504275]
    {
      unknown tmp[504282] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565376] "expr temp" "maybe param" "maybe type" "temp"
      (565379 'move' call_tmp[565376](430104 '.v' this[66282] c"idxType"))
      (504284 'move' tmp[504282](430090 call chpl__rangeStrideType call_tmp[565376]))
      (504289 'move' tmp[504274](504286 '_paramFoldLogical' tmp[504275] tmp[504282]))
    }
    {
      (504294 'move' tmp[504274](504291 '_paramFoldLogical' tmp[504275] nothing[7]))
    }
    (430095 'default init var' tmp[430085] tmp[504274])
    (430097 '.=' this[66282] c"_stride" tmp[430085])
    unknown tmp[430107] "temp"
    unknown tmp[504301] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504302] "maybe param" "temp"
    unknown call_tmp[565381] "expr temp" "maybe param" "maybe type" "temp"
    (565384 'move' call_tmp[565381](430123 '.v' this[66282] c"stridable"))
    (504307 'move' tmp[504302](504305 call _cond_test call_tmp[565381]))
    if tmp[504302]
    {
      unknown tmp[504309] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565386] "expr temp" "maybe param" "maybe type" "temp"
      (565389 'move' call_tmp[565386](430126 '.v' this[66282] c"idxType"))
      (504311 'move' tmp[504309](430112 call chpl__idxTypeToIntIdxType call_tmp[565386]))
      (504316 'move' tmp[504301](504313 '_paramFoldLogical' tmp[504302] tmp[504309]))
    }
    {
      (504321 'move' tmp[504301](504318 '_paramFoldLogical' tmp[504302] nothing[7]))
    }
    (430117 'default init var' tmp[430107] tmp[504301])
    (430119 '.=' this[66282] c"_alignment" tmp[430107])
    unknown tmp[430129] "temp"
    unknown tmp[504328] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504329] "maybe param" "temp"
    unknown call_tmp[565391] "expr temp" "maybe param" "maybe type" "temp"
    (565394 'move' call_tmp[565391](430143 '.v' this[66282] c"stridable"))
    (504334 'move' tmp[504329](504332 call _cond_test call_tmp[565391]))
    if tmp[504329]
    {
      (504339 'move' tmp[504328](504336 '_paramFoldLogical' tmp[504329] bool[10]))
    }
    {
      (504344 'move' tmp[504328](504341 '_paramFoldLogical' tmp[504329] nothing[7]))
    }
    (430137 'default init var' tmp[430129] tmp[504328])
    (430139 '.=' this[66282] c"_aligned" tmp[430129])
    unknown call_tmp[565396] "expr temp" "maybe param" "maybe type" "temp"
    (565399 'move' call_tmp[565396](66382 call _cond_test stridable[66233]))
    if call_tmp[565396]
    {
      unknown call_tmp[565403] "expr temp" "maybe param" "maybe type" "temp"
      (565406 'move' call_tmp[565403](66351 call _stride _mt[232] this[66282]))
      (66355 call = call_tmp[565403] _stride[66262])
      unknown call_tmp[565410] "expr temp" "maybe param" "maybe type" "temp"
      (565413 'move' call_tmp[565410](66362 call _alignment _mt[232] this[66282]))
      unknown call_tmp[565415] "expr temp" "maybe param" "maybe type" "temp"
      (565418 'move' call_tmp[565415](66368 call chpl__idxToInt _alignment[66272]))
      (66369 call = call_tmp[565410] call_tmp[565415])
      unknown call_tmp[565422] "expr temp" "maybe param" "maybe type" "temp"
      (565425 'move' call_tmp[565422](66375 call _aligned _mt[232] this[66282]))
      (66379 call = call_tmp[565422] _aligned[66278])
    }
    unknown tmp[394671] "maybe param" "temp"
    (394682 'move' tmp[394671](66387 call ! stridable[66233]))
    unknown call_tmp[565427] "expr temp" "maybe param" "maybe type" "temp"
    (565430 'move' call_tmp[565427](394684 call _cond_invalid tmp[394671]))
    if call_tmp[565427]
    {
      (394687 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504351] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504352] "maybe param" "temp"
    unknown call_tmp[565432] "expr temp" "maybe param" "maybe type" "temp"
    (565435 'move' call_tmp[565432](394672 call isTrue tmp[394671]))
    (504357 'move' tmp[504352](504355 call _cond_test call_tmp[565432]))
    if tmp[504352]
    {
      unknown tmp[504359] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (504361 'move' tmp[504359](394675 call isTrue 1))
      (504366 'move' tmp[504351](504363 '_paramFoldLogical' tmp[504352] tmp[504359]))
    }
    {
      (504371 'move' tmp[504351](504368 '_paramFoldLogical' tmp[504352] 0))
    }
    unknown call_tmp[565437] "expr temp" "maybe param" "maybe type" "temp"
    (565440 'move' call_tmp[565437](66400 call _cond_test tmp[504351]))
    if call_tmp[565437]
    {
      unknown call_tmp[565442] "expr temp" "maybe param" "maybe type" "temp"
      (565445 'move' call_tmp[565442](66395 call == _stride[66262] 1))
      (66398 call assert call_tmp[565442])
    }
    (460179 return _void[47])
  }
  function _isAnyNothing[66413](arg args[66410]:_any[170](?) ...) param : _unknown[43] "private"
  {
    unknown ret[460183] "RVV" "param" "temp"
    {
      unknown i[66440] "insert auto destroy"
      (489640 'init var' i[66440] 0)
      unknown tmp[66441] "maybe param" "temp"
      unknown call_tmp[565449] "expr temp" "maybe param" "maybe type" "temp"
      (565452 'move' call_tmp[565449](66418 call size _mt[232] args[66410]))
      (66453 'move' tmp[66441](66451 call chpl_compute_low_param_loop_bound 1 call_tmp[565449]))
      unknown tmp[66442] "maybe param" "temp"
      unknown call_tmp[565456] "expr temp" "maybe param" "maybe type" "temp"
      (565459 'move' call_tmp[565456](66458 call size _mt[232] args[66410]))
      (66463 'move' tmp[66442](66461 call chpl_compute_high_param_loop_bound 1 call_tmp[565456]))
      unknown tmp[66443] "maybe param" "temp"
      (66466 'move' tmp[66443] 1)
      ParamForLoop
      { i[66440] tmp[66441] tmp[66442] tmp[66443]
        {
          { scopeless type
            unknown call_type_tmp[443125] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[565461] "expr temp" "maybe param" "maybe type" "temp"
            (565464 'move' call_tmp[565461](66427 call args[66410] i[66440]))
            (443129 'move' call_type_tmp[443125](66428 'typeof' call_tmp[565461]))
          }
          unknown call_tmp[565466] "expr temp" "maybe param" "maybe type" "temp"
          (565469 'move' call_tmp[565466](66430 call isNothingType call_type_tmp[443125]))
          unknown call_tmp[565471] "expr temp" "maybe param" "maybe type" "temp"
          (565474 'move' call_tmp[565471](66434 call _cond_test call_tmp[565466]))
          if call_tmp[565471]
          {
            (460189 'move' ret[460183](460188 'coerce' 1 bool[10]))
            gotoReturn _end__isAnyNothing[460181] _end__isAnyNothing[460181]
          }
        }
      }
      label _unused_continueLabel[66445]
      label _breakLabel[66444]
    }
    (460195 'move' ret[460183](460194 'coerce' 0 bool[10]))
    label _end__isAnyNothing[460181]
    (460185 return ret[460183])
  }
  { scopeless type
    bool[10]
  }
  function range[66183](?).init[66491](arg _mt[66537]:_MT[227], ref arg this[66534]:range[66183](?) :
  range[66183](?), arg idxType[66488]:_any[170](?) =
  int(64)[13], param arg boundedType[66498]:BoundedRangeType[66087] =
  bounded[66079], param arg stridable[66504]:bool[10] =
  0, arg _low[66514] :
  idxType[66488] =
  (66513 call chpl__intToIdx idxType[66488] 1), arg _high[66524] :
  idxType[66488] =
  (66523 call chpl__intToIdx idxType[66488] 0), arg _stride[66528]:_any[170](?), arg _alignment[66530]:_any[170](?), arg _aligned[66532]:_any[170](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown tmp[430146] "temp" "type variable"
    (430148 'move' tmp[430146] idxType[66488])
    (430150 'init field' this[66534] c"idxType" tmp[430146])
    unknown call_tmp[565476] "expr temp" "maybe param" "maybe type" "temp"
    (565479 'move' call_tmp[565476](430155 call _cast BoundedRangeType[66087] boundedType[66498]))
    (430157 'init field' this[66534] c"boundedType" call_tmp[565476])
    unknown call_tmp[565481] "expr temp" "maybe param" "maybe type" "temp"
    (565484 'move' call_tmp[565481](430161 call _cast bool[10] stridable[66504]))
    (430163 'init field' this[66534] c"stridable" call_tmp[565481])
    unknown call_tmp[565486] "maybe param" "maybe type" "temp"
    (565489 'move' call_tmp[565486](66577 call chpl__idxToInt _low[66514]))
    unknown call_tmp[565491] "expr temp" "maybe param" "maybe type" "temp"
    (565494 'move' call_tmp[565491](430177 '.v' this[66534] c"idxType"))
    unknown call_tmp[565496] "maybe param" "maybe type" "temp"
    (565499 'move' call_tmp[565496](430169 call chpl__idxTypeToIntIdxType call_tmp[565491]))
    unknown tmp[430166] "temp"
    (430171 'init var' tmp[430166] call_tmp[565486] call_tmp[565496])
    (430173 'init field' this[66534] c"_low" tmp[430166])
    unknown call_tmp[565501] "maybe param" "maybe type" "temp"
    (565504 'move' call_tmp[565501](66588 call chpl__idxToInt _high[66524]))
    unknown call_tmp[565506] "expr temp" "maybe param" "maybe type" "temp"
    (565509 'move' call_tmp[565506](430191 '.v' this[66534] c"idxType"))
    unknown call_tmp[565511] "maybe param" "maybe type" "temp"
    (565514 'move' call_tmp[565511](430183 call chpl__idxTypeToIntIdxType call_tmp[565506]))
    unknown tmp[430180] "temp"
    (430185 'init var' tmp[430180] call_tmp[565501] call_tmp[565511])
    (430187 'init field' this[66534] c"_high" tmp[430180])
    unknown tmp[430194] "temp"
    unknown tmp[504378] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504379] "maybe param" "temp"
    unknown call_tmp[565516] "expr temp" "maybe param" "maybe type" "temp"
    (565519 'move' call_tmp[565516](430210 '.v' this[66534] c"stridable"))
    (504384 'move' tmp[504379](504382 call _cond_test call_tmp[565516]))
    if tmp[504379]
    {
      unknown tmp[504386] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565521] "expr temp" "maybe param" "maybe type" "temp"
      (565524 'move' call_tmp[565521](430213 '.v' this[66534] c"idxType"))
      (504388 'move' tmp[504386](430199 call chpl__rangeStrideType call_tmp[565521]))
      (504393 'move' tmp[504378](504390 '_paramFoldLogical' tmp[504379] tmp[504386]))
    }
    {
      (504398 'move' tmp[504378](504395 '_paramFoldLogical' tmp[504379] nothing[7]))
    }
    (430204 'default init var' tmp[430194] tmp[504378])
    (430206 '.=' this[66534] c"_stride" tmp[430194])
    unknown tmp[430216] "temp"
    unknown tmp[504405] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504406] "maybe param" "temp"
    unknown call_tmp[565526] "expr temp" "maybe param" "maybe type" "temp"
    (565529 'move' call_tmp[565526](430232 '.v' this[66534] c"stridable"))
    (504411 'move' tmp[504406](504409 call _cond_test call_tmp[565526]))
    if tmp[504406]
    {
      unknown tmp[504413] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565531] "expr temp" "maybe param" "maybe type" "temp"
      (565534 'move' call_tmp[565531](430235 '.v' this[66534] c"idxType"))
      (504415 'move' tmp[504413](430221 call chpl__idxTypeToIntIdxType call_tmp[565531]))
      (504420 'move' tmp[504405](504417 '_paramFoldLogical' tmp[504406] tmp[504413]))
    }
    {
      (504425 'move' tmp[504405](504422 '_paramFoldLogical' tmp[504406] nothing[7]))
    }
    (430226 'default init var' tmp[430216] tmp[504405])
    (430228 '.=' this[66534] c"_alignment" tmp[430216])
    unknown tmp[430238] "temp"
    unknown tmp[504432] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504433] "maybe param" "temp"
    unknown call_tmp[565536] "expr temp" "maybe param" "maybe type" "temp"
    (565539 'move' call_tmp[565536](430252 '.v' this[66534] c"stridable"))
    (504438 'move' tmp[504433](504436 call _cond_test call_tmp[565536]))
    if tmp[504433]
    {
      (504443 'move' tmp[504432](504440 '_paramFoldLogical' tmp[504433] bool[10]))
    }
    {
      (504448 'move' tmp[504432](504445 '_paramFoldLogical' tmp[504433] nothing[7]))
    }
    (430246 'default init var' tmp[430238] tmp[504432])
    (430248 '.=' this[66534] c"_aligned" tmp[430238])
    unknown call_tmp[565541] "expr temp" "maybe param" "maybe type" "temp"
    (565544 'move' call_tmp[565541](66620 call _cond_test stridable[66504]))
    if call_tmp[565541]
    {
      (66618 call compilerError "non-stridable range initializer called with stridable=true")
    }
    (460197 return _void[47])
  }
  where {
    (66544 call _isAnyNothing _stride[66528] _alignment[66530] _aligned[66532])
  }
  function range[66183](?).init=[66643](arg _mt[66648]:_MT[227], ref arg this[66645]:range[66183](?) :
  range[66183](?), arg other[66640]:range[66183](?)) : void[4] "method" "no doc" "no return value for void"
  {
    unknown call_tmp[565546] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565549 'move' call_tmp[565546](66651 'typeof' this[66645]))
    unknown call_tmp[565553] "expr temp" "maybe param" "maybe type" "temp"
    (565556 'move' call_tmp[565553](66652 call idxType _mt[232] call_tmp[565546]))
    unknown call_tmp[565558] "expr temp" "maybe param" "maybe type" "temp"
    (565561 'move' call_tmp[565558](66656 call == call_tmp[565553] ?[249]))
    unknown idxType[66667] "insert auto destroy" "type variable"(66664 IfExpr  call_tmp[565558] then
    { scopeless
      (430260 'query' other[66640] 1)
    } else
    { scopeless
      unknown call_tmp[565563] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (565566 'move' call_tmp[565563](66660 'typeof' this[66645]))
      (66661 call idxType _mt[232] call_tmp[565563])
    } )
    unknown tmp[504455] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504456] "maybe param" "temp"
    unknown call_tmp[565570] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565573 'move' call_tmp[565570](489646 'typeof' this[66645]))
    unknown call_tmp[565577] "expr temp" "maybe param" "maybe type" "temp"
    (565580 'move' call_tmp[565577](489645 call idxType _mt[232] call_tmp[565570]))
    unknown call_tmp[565582] "expr temp" "maybe param" "maybe type" "temp"
    (565585 'move' call_tmp[565582](489643 call == call_tmp[565577] ?[249]))
    (504461 'move' tmp[504456](504459 call _cond_test call_tmp[565582]))
    if tmp[504456]
    {
      unknown tmp[504463] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (504465 'move' tmp[504463](489651 'query' other[66640] 1))
      (504470 'move' tmp[504455](504467 '_paramFoldLogical' tmp[504456] tmp[504463]))
    }
    {
      unknown tmp[504472] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565587] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (565590 'move' call_tmp[565587](489657 'typeof' this[66645]))
      (504474 'move' tmp[504472](489656 call idxType _mt[232] call_tmp[565587]))
      (504479 'move' tmp[504455](504476 '_paramFoldLogical' tmp[504456] tmp[504472]))
    }
    (489661 'move' idxType[66667] tmp[504455])
    unknown boundedType[66688] "param"
    unknown tmp[504486] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504487] "maybe param" "temp"
    unknown call_tmp[565594] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565597 'move' call_tmp[565594](66672 'typeof' this[66645]))
    unknown call_tmp[565601] "expr temp" "maybe param" "maybe type" "temp"
    (565604 'move' call_tmp[565601](66673 call boundedType _mt[232] call_tmp[565594]))
    unknown call_tmp[565606] "expr temp" "maybe param" "maybe type" "temp"
    (565609 'move' call_tmp[565606](66677 call == call_tmp[565601] ?[249]))
    (504492 'move' tmp[504487](504490 call _cond_test call_tmp[565606]))
    if tmp[504487]
    {
      unknown tmp[504494] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (504496 'move' tmp[504494](430266 'query' other[66640] 2))
      (504501 'move' tmp[504486](504498 '_paramFoldLogical' tmp[504487] tmp[504494]))
    }
    {
      unknown tmp[504503] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565611] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (565614 'move' call_tmp[565611](66681 'typeof' this[66645]))
      (504505 'move' tmp[504503](66682 call boundedType _mt[232] call_tmp[565611]))
      (504510 'move' tmp[504486](504507 '_paramFoldLogical' tmp[504487] tmp[504503]))
    }
    (489663 'init var' boundedType[66688] tmp[504486])
    unknown stridable[66708] "param"
    unknown tmp[504517] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504518] "maybe param" "temp"
    unknown call_tmp[565618] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565621 'move' call_tmp[565618](66692 'typeof' this[66645]))
    unknown call_tmp[565625] "expr temp" "maybe param" "maybe type" "temp"
    (565628 'move' call_tmp[565625](66693 call stridable _mt[232] call_tmp[565618]))
    unknown call_tmp[565630] "expr temp" "maybe param" "maybe type" "temp"
    (565633 'move' call_tmp[565630](66697 call == call_tmp[565625] ?[249]))
    (504523 'move' tmp[504518](504521 call _cond_test call_tmp[565630]))
    if tmp[504518]
    {
      unknown tmp[504525] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (504527 'move' tmp[504525](430278 'query' other[66640] 3))
      (504532 'move' tmp[504517](504529 '_paramFoldLogical' tmp[504518] tmp[504525]))
    }
    {
      unknown tmp[504534] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565635] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (565638 'move' call_tmp[565635](66701 'typeof' this[66645]))
      (504536 'move' tmp[504534](66702 call stridable _mt[232] call_tmp[565635]))
      (504541 'move' tmp[504517](504538 '_paramFoldLogical' tmp[504518] tmp[504534]))
    }
    (489665 'init var' stridable[66708] tmp[504517])
    unknown call_tmp[565642] "expr temp" "maybe param" "maybe type" "temp"
    (565645 'move' call_tmp[565642](430269 'query' other[66640] 2))
    unknown call_tmp[565647] "expr temp" "maybe param" "maybe type" "temp"
    (565650 'move' call_tmp[565647](66713 call != boundedType[66688] call_tmp[565642]))
    unknown call_tmp[565652] "expr temp" "maybe param" "maybe type" "temp"
    (565655 'move' call_tmp[565652](66788 call _cond_test call_tmp[565647]))
    if call_tmp[565652]
    {
      unknown call_tmp[565657] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (565660 'move' call_tmp[565657](66733 'typeof' this[66645]))
      unknown call_tmp[565664] "expr temp" "maybe param" "maybe type" "temp"
      (565667 'move' call_tmp[565664](66734 call boundedType _mt[232] call_tmp[565657]))
      unknown call_tmp[565669] "expr temp" "maybe param" "maybe type" "temp"
      (565672 'move' call_tmp[565669](66738 call _cast string[24] call_tmp[565664]))
      unknown call_tmp[565674] "expr temp" "maybe param" "maybe type" "temp"
      (565677 'move' call_tmp[565674](66740 call + "range(boundedType=" call_tmp[565669]))
      unknown call_tmp[565679] "expr temp" "maybe param" "maybe type" "temp"
      (565682 'move' call_tmp[565679](66758 call + call_tmp[565674] ") cannot be initialized from range(boundedType="))
      unknown call_tmp[565684] "expr temp" "maybe param" "maybe type" "temp"
      (565687 'move' call_tmp[565684](430272 'query' other[66640] 2))
      unknown call_tmp[565689] "expr temp" "maybe param" "maybe type" "temp"
      (565692 'move' call_tmp[565689](66762 call _cast string[24] call_tmp[565684]))
      unknown call_tmp[565694] "expr temp" "maybe param" "maybe type" "temp"
      (565697 'move' call_tmp[565694](66764 call + call_tmp[565679] call_tmp[565689]))
      unknown call_tmp[565699] "expr temp" "maybe param" "maybe type" "temp"
      (565702 'move' call_tmp[565699](66782 call + call_tmp[565694] ")"))
      (66785 call compilerError call_tmp[565699])
    }
    unknown tmp[394692] "maybe param" "temp"
    (394703 'move' tmp[394692](66793 call ! stridable[66708]))
    unknown call_tmp[565704] "expr temp" "maybe param" "maybe type" "temp"
    (565707 'move' call_tmp[565704](394705 call _cond_invalid tmp[394692]))
    if call_tmp[565704]
    {
      (394708 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504548] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504549] "maybe param" "temp"
    unknown call_tmp[565709] "expr temp" "maybe param" "maybe type" "temp"
    (565712 'move' call_tmp[565709](394693 call isTrue tmp[394692]))
    (504554 'move' tmp[504549](504552 call _cond_test call_tmp[565709]))
    if tmp[504549]
    {
      unknown tmp[504556] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565714] "expr temp" "maybe param" "maybe type" "temp"
      (565717 'move' call_tmp[565714](430281 'query' other[66640] 3))
      (504558 'move' tmp[504556](394696 call isTrue call_tmp[565714]))
      (504563 'move' tmp[504548](504560 '_paramFoldLogical' tmp[504549] tmp[504556]))
    }
    {
      (504568 'move' tmp[504548](504565 '_paramFoldLogical' tmp[504549] 0))
    }
    unknown call_tmp[565719] "expr temp" "maybe param" "maybe type" "temp"
    (565722 'move' call_tmp[565719](66818 call _cond_test tmp[504548]))
    if call_tmp[565719]
    {
      (66816 call compilerError "cannot initialize a non-stridable range from a stridable range")
    }
    unknown tmp[394713] "maybe param" "temp"
    (394724 'move' tmp[394713] stridable[66708])
    unknown call_tmp[565724] "expr temp" "maybe param" "maybe type" "temp"
    (565727 'move' call_tmp[565724](394726 call _cond_invalid tmp[394713]))
    if call_tmp[565724]
    {
      (394729 call compilerError "cannot promote short-circuiting && operator")
    }
    const str[66841] "const" "insert auto destroy"
    unknown tmp[504575] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504576] "maybe param" "temp"
    unknown call_tmp[565729] "expr temp" "maybe param" "maybe type" "temp"
    (565732 'move' call_tmp[565729](394714 call isTrue tmp[394713]))
    (504581 'move' tmp[504576](504579 call _cond_test call_tmp[565729]))
    if tmp[504576]
    {
      unknown tmp[504583] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565734] "expr temp" "maybe param" "maybe type" "temp"
      (565737 'move' call_tmp[565734](430284 'query' other[66640] 3))
      (504585 'move' tmp[504583](394717 call isTrue call_tmp[565734]))
      (504590 'move' tmp[504575](504587 '_paramFoldLogical' tmp[504576] tmp[504583]))
    }
    {
      (504595 'move' tmp[504575](504592 '_paramFoldLogical' tmp[504576] 0))
    }
    unknown tmp[504602] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504603] "maybe param" "temp"
    (504608 'move' tmp[504603](504606 call _cond_test tmp[504575]))
    if tmp[504603]
    {
      unknown tmp[504610] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (504612 'move' tmp[504610](66828 call stride _mt[232] other[66640]))
      (504617 'move' tmp[504602](504614 '_paramFoldLogical' tmp[504603] tmp[504610]))
    }
    {
      unknown tmp[504619] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565741] "expr temp" "maybe param" "maybe type" "temp"
      (565744 'move' call_tmp[565741](66835 call chpl__rangeStrideType idxType[66667]))
      (504621 'move' tmp[504619](66836 call _cast call_tmp[565741] 1))
      (504626 'move' tmp[504602](504623 '_paramFoldLogical' tmp[504603] tmp[504619]))
    }
    (489667 'init var' str[66841] tmp[504602])
    unknown call_tmp[565750] "expr temp" "maybe param" "maybe type" "temp"
    (565753 'move' call_tmp[565750](66856 call _low _mt[232] other[66640]))
    unknown call_tmp[565755] "expr temp" "maybe param" "maybe type" "temp"
    (565758 'move' call_tmp[565755](66859 call chpl__intToIdx idxType[66667] call_tmp[565750]))
    unknown call_tmp[565762] "expr temp" "maybe param" "maybe type" "temp"
    (565765 'move' call_tmp[565762](66864 call _high _mt[232] other[66640]))
    unknown call_tmp[565767] "expr temp" "maybe param" "maybe type" "temp"
    (565770 'move' call_tmp[565767](66867 call chpl__intToIdx idxType[66667] call_tmp[565762]))
    unknown call_tmp[565774] "expr temp" "maybe param" "maybe type" "temp"
    (565777 'move' call_tmp[565774](66876 call alignment _mt[232] other[66640]))
    unknown call_tmp[565779] "expr temp" "maybe param" "maybe type" "temp"
    (565782 'move' call_tmp[565779](66880 call chpl__idxToInt call_tmp[565774]))
    unknown call_tmp[565784] "expr temp" "maybe param" "maybe type" "temp"
    (565787 'move' call_tmp[565784](66881 call chpl__intToIdx idxType[66667] call_tmp[565779]))
    unknown call_tmp[565791] "expr temp" "maybe param" "maybe type" "temp"
    (565794 'move' call_tmp[565791](66885 call aligned _mt[232] other[66640]))
    (66888 call(66845 call (partial) init _mt[232] this[66645]) idxType[66667] boundedType[66688] stridable[66708] call_tmp[565755] call_tmp[565767] str[66841] call_tmp[565784] call_tmp[565791])
    (460199 return _void[47])
  }
  function range[66183](?).displayRepresentation[66916](arg _mt[66921]:_MT[227], arg this[66918]:range[66183](?) :
  range[66183](?), arg msg[66912]:string[24] =
  "") : _unknown[43] "method" "no doc" "no return value for void"
  {
    unknown ret[460203] "RVV" "temp"
    unknown tmp[504633] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504634] "maybe param" "temp"
    unknown call_tmp[565798] "expr temp" "maybe param" "maybe type" "temp"
    (565801 'move' call_tmp[565798](341069 call aligned _mt[232] this[66918]))
    (504639 'move' tmp[504634](504637 call _cond_test call_tmp[565798]))
    if tmp[504634]
    {
      unknown tmp[504641] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565805] "expr temp" "maybe param" "maybe type" "temp"
      (565808 'move' call_tmp[565805](341073 call alignment _mt[232] this[66918]))
      (504643 'move' tmp[504641](66991 call _cast string[24] call_tmp[565805]))
      (504648 'move' tmp[504633](504645 '_paramFoldLogical' tmp[504634] tmp[504641]))
    }
    {
      (504653 'move' tmp[504633](504650 '_paramFoldLogical' tmp[504634] "\?"))
    }
    unknown call_tmp[565812] "expr temp" "maybe param" "maybe type" "temp"
    (565815 'move' call_tmp[565812](341043 call idxType _mt[232] this[66918]))
    unknown call_tmp[565817] "expr temp" "maybe param" "maybe type" "temp"
    (565820 'move' call_tmp[565817](66945 call _cast string[24] call_tmp[565812]))
    unknown call_tmp[565824] "expr temp" "maybe param" "maybe type" "temp"
    (565827 'move' call_tmp[565824](341048 call boundedType _mt[232] this[66918]))
    unknown call_tmp[565831] "expr temp" "maybe param" "maybe type" "temp"
    (565834 'move' call_tmp[565831](341053 call stridable _mt[232] this[66918]))
    unknown call_tmp[565838] "expr temp" "maybe param" "maybe type" "temp"
    (565841 'move' call_tmp[565838](341057 call low _mt[232] this[66918]))
    unknown call_tmp[565845] "expr temp" "maybe param" "maybe type" "temp"
    (565848 'move' call_tmp[565845](341061 call high _mt[232] this[66918]))
    unknown call_tmp[565852] "expr temp" "maybe param" "maybe type" "temp"
    (565855 'move' call_tmp[565852](341065 call stride _mt[232] this[66918]))
    (67013 call chpl_debug_writeln msg[66912] "(" call_tmp[565817] "," call_tmp[565824] "," call_tmp[565831] " : " call_tmp[565838] "," call_tmp[565845] "," call_tmp[565852] "," tmp[504633] ")")
    (460205 return ret[460203])
  }
  { scopeless type
    void[4]
  }
  function chpl_build_bounded_range[430375](arg low[430382] :
  (430379 call int(64)[13] 64), arg high[430388] :
  (430386 call int(64)[13] 64)) : _unknown[43]
  {
    unknown ret[460209] "RVV" "temp"
    unknown call_tmp[565857] "expr temp" "maybe param" "maybe type" "temp"
    (565860 'move' call_tmp[565857](430396 call int(64)[13] 64))
    unknown call_tmp[565862] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565865 'move' call_tmp[565862](691326 'new' range[66183](?) call_tmp[565857](_low = low[430382])(_high = high[430388])))
    (460214 'move' ret[460209](460213 'deref' call_tmp[565862]))
    (460211 return ret[460209])
  }
  function chpl_build_bounded_range[430346](arg low[430353] :
  (430350 call int(64)[13] 32), arg high[430359] :
  (430357 call int(64)[13] 32)) : _unknown[43]
  {
    unknown ret[460218] "RVV" "temp"
    unknown call_tmp[565867] "expr temp" "maybe param" "maybe type" "temp"
    (565870 'move' call_tmp[565867](430367 call int(64)[13] 32))
    unknown call_tmp[565872] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565875 'move' call_tmp[565872](691327 'new' range[66183](?) call_tmp[565867](_low = low[430353])(_high = high[430359])))
    (460223 'move' ret[460218](460222 'deref' call_tmp[565872]))
    (460220 return ret[460218])
  }
  function chpl_build_bounded_range[430317](arg low[430324] :
  (430321 call int(64)[13] 16), arg high[430330] :
  (430328 call int(64)[13] 16)) : _unknown[43]
  {
    unknown ret[460227] "RVV" "temp"
    unknown call_tmp[565877] "expr temp" "maybe param" "maybe type" "temp"
    (565880 'move' call_tmp[565877](430338 call int(64)[13] 16))
    unknown call_tmp[565882] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565885 'move' call_tmp[565882](691328 'new' range[66183](?) call_tmp[565877](_low = low[430324])(_high = high[430330])))
    (460232 'move' ret[460227](460231 'deref' call_tmp[565882]))
    (460229 return ret[460227])
  }
  function chpl_build_bounded_range[430288](arg low[430295] :
  (430292 call int(64)[13] 8), arg high[430301] :
  (430299 call int(64)[13] 8)) : _unknown[43]
  {
    unknown ret[460236] "RVV" "temp"
    unknown call_tmp[565887] "expr temp" "maybe param" "maybe type" "temp"
    (565890 'move' call_tmp[565887](430309 call int(64)[13] 8))
    unknown call_tmp[565892] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565895 'move' call_tmp[565892](691329 'new' range[66183](?) call_tmp[565887](_low = low[430295])(_high = high[430301])))
    (460241 'move' ret[460236](460240 'deref' call_tmp[565892]))
    (460238 return ret[460236])
  }
  function chpl_build_bounded_range[430491](arg low[430498] :
  (430495 call uint(64)[107] 64), arg high[430504] :
  (430502 call uint(64)[107] 64)) : _unknown[43]
  {
    unknown ret[460245] "RVV" "temp"
    unknown call_tmp[565897] "expr temp" "maybe param" "maybe type" "temp"
    (565900 'move' call_tmp[565897](430512 call uint(64)[107] 64))
    unknown call_tmp[565902] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565905 'move' call_tmp[565902](691330 'new' range[66183](?) call_tmp[565897](_low = low[430498])(_high = high[430504])))
    (460250 'move' ret[460245](460249 'deref' call_tmp[565902]))
    (460247 return ret[460245])
  }
  function chpl_build_bounded_range[430462](arg low[430469] :
  (430466 call uint(64)[107] 32), arg high[430475] :
  (430473 call uint(64)[107] 32)) : _unknown[43]
  {
    unknown ret[460254] "RVV" "temp"
    unknown call_tmp[565907] "expr temp" "maybe param" "maybe type" "temp"
    (565910 'move' call_tmp[565907](430483 call uint(64)[107] 32))
    unknown call_tmp[565912] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565915 'move' call_tmp[565912](691331 'new' range[66183](?) call_tmp[565907](_low = low[430469])(_high = high[430475])))
    (460259 'move' ret[460254](460258 'deref' call_tmp[565912]))
    (460256 return ret[460254])
  }
  function chpl_build_bounded_range[430433](arg low[430440] :
  (430437 call uint(64)[107] 16), arg high[430446] :
  (430444 call uint(64)[107] 16)) : _unknown[43]
  {
    unknown ret[460263] "RVV" "temp"
    unknown call_tmp[565917] "expr temp" "maybe param" "maybe type" "temp"
    (565920 'move' call_tmp[565917](430454 call uint(64)[107] 16))
    unknown call_tmp[565922] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565925 'move' call_tmp[565922](691332 'new' range[66183](?) call_tmp[565917](_low = low[430440])(_high = high[430446])))
    (460268 'move' ret[460263](460267 'deref' call_tmp[565922]))
    (460265 return ret[460263])
  }
  function chpl_build_bounded_range[430404](arg low[430411] :
  (430408 call uint(64)[107] 8), arg high[430417] :
  (430415 call uint(64)[107] 8)) : _unknown[43]
  {
    unknown ret[460272] "RVV" "temp"
    unknown call_tmp[565927] "expr temp" "maybe param" "maybe type" "temp"
    (565930 'move' call_tmp[565927](430425 call uint(64)[107] 8))
    unknown call_tmp[565932] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565935 'move' call_tmp[565932](691333 'new' range[66183](?) call_tmp[565927](_low = low[430411])(_high = high[430417])))
    (460277 'move' ret[460272](460276 'deref' call_tmp[565932]))
    (460274 return ret[460272])
  }
  function chpl_build_bounded_range[67097](arg low[67094]:enumerated[179](?), arg high[67100]:enumerated[179](?)) : _unknown[43]
  {
    unknown ret[460281] "RVV" "temp"
    unknown call_tmp[565937] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565940 'move' call_tmp[565937](67104 'typeof' low[67094]))
    unknown call_tmp[565942] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565945 'move' call_tmp[565942](67106 'typeof' high[67100]))
    unknown call_tmp[565947] "expr temp" "maybe param" "maybe type" "temp"
    (565950 'move' call_tmp[565947](67107 call != call_tmp[565937] call_tmp[565942]))
    unknown call_tmp[565952] "expr temp" "maybe param" "maybe type" "temp"
    (565955 'move' call_tmp[565952](67129 call _cond_test call_tmp[565947]))
    if call_tmp[565952]
    {
      (67127 call compilerError "ranges of enums must use a single enum type")
    }
    unknown call_tmp[565957] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565960 'move' call_tmp[565957](67137 'typeof' low[67094]))
    unknown call_tmp[565962] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565965 'move' call_tmp[565962](691334 'new' range[66183](?) call_tmp[565957](_low = low[67094])(_high = high[67100])))
    (460286 'move' ret[460281](460285 'deref' call_tmp[565962]))
    (460283 return ret[460281])
  }
  function chpl_build_bounded_range[67155](arg low[67152]:bool[10], arg high[67158]:bool[10]) : _unknown[43]
  {
    unknown ret[460290] "RVV" "temp"
    unknown call_tmp[565967] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565970 'move' call_tmp[565967](691335 'new' range[66183](?) bool[10](_low = low[67152])(_high = high[67158])))
    (460295 'move' ret[460290](460294 'deref' call_tmp[565967]))
    (460292 return ret[460290])
  }
  function chpl_build_bounded_range[67179](arg low[67177]:_any[170](?), arg high[67181]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (67201 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (460297 return _void[47])
  }
  function chpl_build_low_bounded_range[67212](arg low[67209]:integral[188](?)) : _unknown[43]
  {
    unknown ret[460301] "RVV" "temp"
    unknown call_tmp[565972] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565975 'move' call_tmp[565972](67216 'typeof' low[67209]))
    unknown call_tmp[565977] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565980 'move' call_tmp[565977](691336 'new' range[66183](?) call_tmp[565972] boundedLow[66081](_low = low[67209])))
    (460306 'move' ret[460301](460305 'deref' call_tmp[565977]))
    (460303 return ret[460301])
  }
  function chpl_build_low_bounded_range[67237](arg low[67234]:enumerated[179](?)) : _unknown[43]
  {
    unknown ret[460310] "RVV" "temp"
    unknown call_tmp[565982] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565985 'move' call_tmp[565982](67241 'typeof' low[67234]))
    unknown call_tmp[565987] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (565990 'move' call_tmp[565987](691337 'new' range[66183](?) call_tmp[565982] boundedLow[66081](_low = low[67234])))
    (460315 'move' ret[460310](460314 'deref' call_tmp[565987]))
    (460312 return ret[460310])
  }
  function chpl_build_low_bounded_range[67262](arg low[67259]:bool[10]) : _unknown[43]
  {
    unknown ret[460319] "RVV" "temp"
    unknown call_tmp[565992] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (565995 'move' call_tmp[565992](67266 'typeof' low[67259]))
    unknown call_tmp[565997] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (566000 'move' call_tmp[565997](691338 'new' range[66183](?) call_tmp[565992] boundedLow[66081](_low = low[67259])))
    (460324 'move' ret[460319](460323 'deref' call_tmp[565997]))
    (460321 return ret[460319])
  }
  function chpl_build_low_bounded_range[67285](arg low[67283]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (67305 call compilerError "Bound of 'low..' must be an integer")
    (460326 return _void[47])
  }
  function chpl_build_high_bounded_range[67316](arg high[67313]:integral[188](?)) : _unknown[43]
  {
    unknown ret[460330] "RVV" "temp"
    unknown call_tmp[566002] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (566005 'move' call_tmp[566002](67320 'typeof' high[67313]))
    unknown call_tmp[566007] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (566010 'move' call_tmp[566007](691339 'new' range[66183](?) call_tmp[566002] boundedHigh[66083](_high = high[67313])))
    (460335 'move' ret[460330](460334 'deref' call_tmp[566007]))
    (460332 return ret[460330])
  }
  function chpl_build_high_bounded_range[67341](arg high[67338]:enumerated[179](?)) : _unknown[43]
  {
    unknown ret[460339] "RVV" "temp"
    unknown call_tmp[566012] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (566015 'move' call_tmp[566012](67345 'typeof' high[67338]))
    unknown call_tmp[566017] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (566020 'move' call_tmp[566017](691340 'new' range[66183](?) call_tmp[566012] boundedHigh[66083](_high = high[67338])))
    (460344 'move' ret[460339](460343 'deref' call_tmp[566017]))
    (460341 return ret[460339])
  }
  function chpl_build_high_bounded_range[67366](arg high[67363]:bool[10]) : _unknown[43]
  {
    unknown ret[460348] "RVV" "temp"
    unknown call_tmp[566022] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (566025 'move' call_tmp[566022](67370 'typeof' high[67363]))
    unknown call_tmp[566027] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (566030 'move' call_tmp[566027](691341 'new' range[66183](?) call_tmp[566022] boundedHigh[66083](_high = high[67363])))
    (460353 'move' ret[460348](460352 'deref' call_tmp[566027]))
    (460350 return ret[460348])
  }
  function chpl_build_high_bounded_range[67389](arg high[67387]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (67409 call compilerError "Bound of '..high' must be an integer.")
    (460355 return _void[47])
  }
  function chpl_build_unbounded_range[67416]() : _unknown[43]
  {
    unknown ret[460359] "RVV" "temp"
    unknown call_tmp[566032] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (566035 'move' call_tmp[566032](691342 'new' range[66183](?) int(64)[13] boundedNone[66085]))
    (460364 'move' ret[460359](460363 'deref' call_tmp[566032]))
    (460361 return ret[460359])
  }
  function chpl_compute_low_param_loop_bound[430580](param arg low[430587] :
  (430584 call int(64)[13] 64), param arg high[430593] :
  (430591 call int(64)[13] 64)) param : _unknown[43]
  {
    unknown ret[460368] "RVV" "param" "temp"
    (460373 'move' ret[460368](460372 'deref' low[430587]))
    (460370 return ret[460368])
  }
  function chpl_compute_low_param_loop_bound[430560](param arg low[430567] :
  (430564 call int(64)[13] 32), param arg high[430573] :
  (430571 call int(64)[13] 32)) param : _unknown[43]
  {
    unknown ret[460377] "RVV" "param" "temp"
    (460382 'move' ret[460377](460381 'deref' low[430567]))
    (460379 return ret[460377])
  }
  function chpl_compute_low_param_loop_bound[430540](param arg low[430547] :
  (430544 call int(64)[13] 16), param arg high[430553] :
  (430551 call int(64)[13] 16)) param : _unknown[43]
  {
    unknown ret[460386] "RVV" "param" "temp"
    (460391 'move' ret[460386](460390 'deref' low[430547]))
    (460388 return ret[460386])
  }
  function chpl_compute_low_param_loop_bound[430520](param arg low[430527] :
  (430524 call int(64)[13] 8), param arg high[430533] :
  (430531 call int(64)[13] 8)) param : _unknown[43]
  {
    unknown ret[460395] "RVV" "param" "temp"
    (460400 'move' ret[460395](460399 'deref' low[430527]))
    (460397 return ret[460395])
  }
  function chpl_compute_high_param_loop_bound[430660](param arg low[430667] :
  (430664 call int(64)[13] 64), param arg high[430673] :
  (430671 call int(64)[13] 64)) param : _unknown[43]
  {
    unknown ret[460404] "RVV" "param" "temp"
    (460409 'move' ret[460404](460408 'deref' high[430673]))
    (460406 return ret[460404])
  }
  function chpl_compute_high_param_loop_bound[430640](param arg low[430647] :
  (430644 call int(64)[13] 32), param arg high[430653] :
  (430651 call int(64)[13] 32)) param : _unknown[43]
  {
    unknown ret[460413] "RVV" "param" "temp"
    (460418 'move' ret[460413](460417 'deref' high[430653]))
    (460415 return ret[460413])
  }
  function chpl_compute_high_param_loop_bound[430620](param arg low[430627] :
  (430624 call int(64)[13] 16), param arg high[430633] :
  (430631 call int(64)[13] 16)) param : _unknown[43]
  {
    unknown ret[460422] "RVV" "param" "temp"
    (460427 'move' ret[460422](460426 'deref' high[430633]))
    (460424 return ret[460422])
  }
  function chpl_compute_high_param_loop_bound[430600](param arg low[430607] :
  (430604 call int(64)[13] 8), param arg high[430613] :
  (430611 call int(64)[13] 8)) param : _unknown[43]
  {
    unknown ret[460431] "RVV" "param" "temp"
    (460436 'move' ret[460431](460435 'deref' high[430613]))
    (460433 return ret[460431])
  }
  function chpl_compute_low_param_loop_bound[430740](param arg low[430747] :
  (430744 call uint(64)[107] 64), param arg high[430753] :
  (430751 call uint(64)[107] 64)) param : _unknown[43]
  {
    unknown ret[460440] "RVV" "param" "temp"
    (460445 'move' ret[460440](460444 'deref' low[430747]))
    (460442 return ret[460440])
  }
  function chpl_compute_low_param_loop_bound[430720](param arg low[430727] :
  (430724 call uint(64)[107] 32), param arg high[430733] :
  (430731 call uint(64)[107] 32)) param : _unknown[43]
  {
    unknown ret[460449] "RVV" "param" "temp"
    (460454 'move' ret[460449](460453 'deref' low[430727]))
    (460451 return ret[460449])
  }
  function chpl_compute_low_param_loop_bound[430700](param arg low[430707] :
  (430704 call uint(64)[107] 16), param arg high[430713] :
  (430711 call uint(64)[107] 16)) param : _unknown[43]
  {
    unknown ret[460458] "RVV" "param" "temp"
    (460463 'move' ret[460458](460462 'deref' low[430707]))
    (460460 return ret[460458])
  }
  function chpl_compute_low_param_loop_bound[430680](param arg low[430687] :
  (430684 call uint(64)[107] 8), param arg high[430693] :
  (430691 call uint(64)[107] 8)) param : _unknown[43]
  {
    unknown ret[460467] "RVV" "param" "temp"
    (460472 'move' ret[460467](460471 'deref' low[430687]))
    (460469 return ret[460467])
  }
  function chpl_compute_high_param_loop_bound[430820](param arg low[430827] :
  (430824 call uint(64)[107] 64), param arg high[430833] :
  (430831 call uint(64)[107] 64)) param : _unknown[43]
  {
    unknown ret[460476] "RVV" "param" "temp"
    (460481 'move' ret[460476](460480 'deref' high[430833]))
    (460478 return ret[460476])
  }
  function chpl_compute_high_param_loop_bound[430800](param arg low[430807] :
  (430804 call uint(64)[107] 32), param arg high[430813] :
  (430811 call uint(64)[107] 32)) param : _unknown[43]
  {
    unknown ret[460485] "RVV" "param" "temp"
    (460490 'move' ret[460485](460489 'deref' high[430813]))
    (460487 return ret[460485])
  }
  function chpl_compute_high_param_loop_bound[430780](param arg low[430787] :
  (430784 call uint(64)[107] 16), param arg high[430793] :
  (430791 call uint(64)[107] 16)) param : _unknown[43]
  {
    unknown ret[460494] "RVV" "param" "temp"
    (460499 'move' ret[460494](460498 'deref' high[430793]))
    (460496 return ret[460494])
  }
  function chpl_compute_high_param_loop_bound[430760](param arg low[430767] :
  (430764 call uint(64)[107] 8), param arg high[430773] :
  (430771 call uint(64)[107] 8)) param : _unknown[43]
  {
    unknown ret[460503] "RVV" "param" "temp"
    (460508 'move' ret[460503](460507 'deref' high[430773]))
    (460505 return ret[460503])
  }
  function chpl_compute_low_param_loop_bound[67540](param arg low[67537]:bool[10], param arg high[67543]:bool[10]) param : _unknown[43]
  {
    unknown ret[460512] "RVV" "param" "temp"
    (460517 'move' ret[460512](460516 'deref' low[67537]))
    (460514 return ret[460512])
  }
  function chpl_compute_high_param_loop_bound[67558](param arg low[67555]:bool[10], param arg high[67561]:bool[10]) param : _unknown[43]
  {
    unknown ret[460521] "RVV" "param" "temp"
    (460526 'move' ret[460521](460525 'deref' high[67561]))
    (460523 return ret[460521])
  }
  function chpl_compute_low_param_loop_bound[67574](param arg low[67572]:_any[170](?), param arg high[67576]:_any[170](?)) param : _unknown[43] "last resort" "no return value for void"
  {
    (67596 call compilerError "Range bounds must be integers of compatible types")
    (460528 return _void[47])
  }
  function chpl_compute_low_param_loop_bound[67605](arg low[67603]:_any[170](?), arg high[67607]:_any[170](?)) : _unknown[43] "last resort" "no return value for void"
  {
    (67627 call compilerError "param for loop must be defined over a bounded param range")
    (460530 return _void[47])
  }
  function isRangeType[67636](arg t[67634]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[460552] "RVV" "param" "temp"
    function isRangeHelp[67647](arg t[67644]:range[66183](?)) param : _unknown[43]
    {
      unknown ret[460534] "RVV" "param" "temp"
      (460539 'move' ret[460534](460538 'deref' 1))
      (460536 return ret[460534])
    }
    function isRangeHelp[67660](arg t[67658]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[460543] "RVV" "param" "temp"
      (460548 'move' ret[460543](460547 'deref' 0))
      (460545 return ret[460543])
    }
    unknown call_tmp[566037] "expr temp" "maybe param" "maybe type" "temp"
    (566040 'move' call_tmp[566037](67671 call isRangeHelp t[67634]))
    (460557 'move' ret[460552](460556 'deref' call_tmp[566037]))
    (460554 return ret[460552])
  }
  function isRangeValue[67685](arg r[67682]:range[66183](?)) param : _unknown[43] "no doc"
  {
    unknown ret[460561] "RVV" "param" "temp"
    (460566 'move' ret[460561](460565 'deref' 1))
    (460563 return ret[460561])
  }
  function isRangeValue[67697](arg r[67695]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[460570] "RVV" "param" "temp"
    (460575 'move' ret[460570](460574 'deref' 0))
    (460572 return ret[460570])
  }
  function isBoundedRange[67709](arg r[67707]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[460579] "RVV" "param" "temp"
    (460584 'move' ret[460579](460583 'deref' 0))
    (460581 return ret[460579])
  }
  function isBoundedRange[67726](arg r[67723]:range[66183](?)) param : _unknown[43]
  {
    unknown ret[460588] "RVV" "param" "temp"
    unknown call_tmp[566044] "expr temp" "maybe param" "maybe type" "temp"
    (566047 'move' call_tmp[566044](67730 call boundedType _mt[232] r[67723]))
    unknown call_tmp[566049] "expr temp" "maybe param" "maybe type" "temp"
    (566052 'move' call_tmp[566049](67734 call isBoundedRange call_tmp[566044]))
    (460593 'move' ret[460588](460592 'deref' call_tmp[566049]))
    (460590 return ret[460588])
  }
  function isBoundedRange[67746](param arg B[67743]:BoundedRangeType[66087]) param : _unknown[43] "no doc"
  {
    unknown ret[460597] "RVV" "param" "temp"
    unknown call_tmp[566054] "expr temp" "maybe param" "maybe type" "temp"
    (566057 'move' call_tmp[566054](67753 call == B[67743] bounded[66079]))
    (460602 'move' ret[460597](460601 'deref' call_tmp[566054]))
    (460599 return ret[460597])
  }
  function range[66183](?).hasLowBound[67763](arg _mt[67768]:_MT[227], arg this[67765]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "method"
  {
    unknown ret[460606] "RVV" "param" "temp"
    unknown tmp[394734] "maybe param" "temp"
    unknown call_tmp[566061] "expr temp" "maybe param" "maybe type" "temp"
    (566064 'move' call_tmp[566061](341147 call boundedType _mt[232] this[67765]))
    (394745 'move' tmp[394734](67775 call == call_tmp[566061] bounded[66079]))
    unknown call_tmp[566066] "expr temp" "maybe param" "maybe type" "temp"
    (566069 'move' call_tmp[566066](394747 call _cond_invalid tmp[394734]))
    if call_tmp[566066]
    {
      (394750 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[504660] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504661] "maybe param" "temp"
    unknown call_tmp[566071] "expr temp" "maybe param" "maybe type" "temp"
    (566074 'move' call_tmp[566071](394735 call isTrue tmp[394734]))
    (504666 'move' tmp[504661](504664 call _cond_test call_tmp[566071]))
    if tmp[504661]
    {
      (504671 'move' tmp[504660](504668 '_paramFoldLogical' tmp[504661] 1))
    }
    {
      unknown tmp[504673] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566078] "expr temp" "maybe param" "maybe type" "temp"
      (566081 'move' call_tmp[566078](341153 call boundedType _mt[232] this[67765]))
      unknown call_tmp[566083] "expr temp" "maybe param" "maybe type" "temp"
      (566086 'move' call_tmp[566083](67782 call == call_tmp[566078] boundedLow[66081]))
      (504675 'move' tmp[504673](394739 call isTrue call_tmp[566083]))
      (504680 'move' tmp[504660](504677 '_paramFoldLogical' tmp[504661] tmp[504673]))
    }
    (460611 'move' ret[460606](460610 'deref' tmp[504660]))
    (460608 return ret[460606])
  }
  function range[66183](?).hasHighBound[67794](arg _mt[67799]:_MT[227], arg this[67796]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "method"
  {
    unknown ret[460615] "RVV" "param" "temp"
    unknown tmp[394755] "maybe param" "temp"
    unknown call_tmp[566090] "expr temp" "maybe param" "maybe type" "temp"
    (566093 'move' call_tmp[566090](341159 call boundedType _mt[232] this[67796]))
    (394766 'move' tmp[394755](67806 call == call_tmp[566090] bounded[66079]))
    unknown call_tmp[566095] "expr temp" "maybe param" "maybe type" "temp"
    (566098 'move' call_tmp[566095](394768 call _cond_invalid tmp[394755]))
    if call_tmp[566095]
    {
      (394771 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[504687] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504688] "maybe param" "temp"
    unknown call_tmp[566100] "expr temp" "maybe param" "maybe type" "temp"
    (566103 'move' call_tmp[566100](394756 call isTrue tmp[394755]))
    (504693 'move' tmp[504688](504691 call _cond_test call_tmp[566100]))
    if tmp[504688]
    {
      (504698 'move' tmp[504687](504695 '_paramFoldLogical' tmp[504688] 1))
    }
    {
      unknown tmp[504700] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566107] "expr temp" "maybe param" "maybe type" "temp"
      (566110 'move' call_tmp[566107](341165 call boundedType _mt[232] this[67796]))
      unknown call_tmp[566112] "expr temp" "maybe param" "maybe type" "temp"
      (566115 'move' call_tmp[566112](67813 call == call_tmp[566107] boundedHigh[66083]))
      (504702 'move' tmp[504700](394760 call isTrue call_tmp[566112]))
      (504707 'move' tmp[504687](504704 '_paramFoldLogical' tmp[504688] tmp[504700]))
    }
    (460620 'move' ret[460615](460619 'deref' tmp[504687]))
    (460617 return ret[460615])
  }
  function range[66183](?).stride[67825](arg _mt[67830]:_MT[227], arg this[67827]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460624] "RVV" "temp"
    unknown call_tmp[566119] "expr temp" "maybe param" "maybe type" "temp"
    (566122 'move' call_tmp[566119](341176 call _stride _mt[232] this[67827]))
    (460629 'move' ret[460624](460628 'deref' call_tmp[566119]))
    (460626 return ret[460624])
  }
  where {
    (341171 call stridable _mt[232] this[67827])
  }
  function range[66183](?).stride[67843](arg _mt[67848]:_MT[227], arg this[67845]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "method" "no doc" "no parens"
  {
    unknown ret[460633] "RVV" "param" "temp"
    unknown call_tmp[566128] "expr temp" "maybe param" "maybe type" "temp"
    (566131 'move' call_tmp[566128](341185 call strType _mt[232] this[67845]))
    unknown call_tmp[566133] "expr temp" "maybe param" "maybe type" "temp"
    (566136 'move' call_tmp[566133](67855 call _cast call_tmp[566128] 1))
    (460638 'move' ret[460633](460637 'deref' call_tmp[566133]))
    (460635 return ret[460633])
  }
  where {
    unknown call_tmp[566140] "expr temp" "maybe param" "maybe type" "temp"
    (566143 'move' call_tmp[566140](341181 call stridable _mt[232] this[67845]))
    (67851 call ! call_tmp[566140])
  }
  function range[66183](?).alignment[67866](arg _mt[67871]:_MT[227], arg this[67868]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460642] "RVV" "temp"
    unknown call_tmp[566149] "expr temp" "maybe param" "maybe type" "temp"
    (566152 'move' call_tmp[566149](341199 call _alignment _mt[232] this[67868]))
    unknown call_tmp[566154] "expr temp" "maybe param" "maybe type" "temp"
    (566157 'move' call_tmp[566154](67877 call(341194 call (partial) chpl_intToIdx _mt[232] this[67868]) call_tmp[566149]))
    (460647 'move' ret[460642](460646 'deref' call_tmp[566154]))
    (460644 return ret[460642])
  }
  where {
    (341190 call stridable _mt[232] this[67868])
  }
  function range[66183](?).alignment[67887](arg _mt[67892]:_MT[227], arg this[67889]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method" "no doc" "no parens"
  {
    unknown ret[460651] "RVV" "temp"
    unknown call_tmp[566163] "expr temp" "maybe param" "maybe type" "temp"
    (566166 'move' call_tmp[566163](341212 call low _mt[232] this[67889]))
    (460656 'move' ret[460651](460655 'deref' call_tmp[566163]))
    (460653 return ret[460651])
  }
  where {
    unknown tmp[394776] "maybe param" "temp"
    unknown call_tmp[566170] "expr temp" "maybe param" "maybe type" "temp"
    (566173 'move' call_tmp[566170](341204 call stridable _mt[232] this[67889]))
    (394787 'move' tmp[394776](67895 call ! call_tmp[566170]))
    unknown call_tmp[566175] "expr temp" "maybe param" "maybe type" "temp"
    (566178 'move' call_tmp[566175](394789 call _cond_invalid tmp[394776]))
    if call_tmp[566175]
    {
      (394792 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504714] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504715] "maybe param" "temp"
    unknown call_tmp[566180] "expr temp" "maybe param" "maybe type" "temp"
    (566183 'move' call_tmp[566180](394777 call isTrue tmp[394776]))
    (504720 'move' tmp[504715](504718 call _cond_test call_tmp[566180]))
    if tmp[504715]
    {
      unknown tmp[504722] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566187] "expr temp" "maybe param" "maybe type" "temp"
      (566190 'move' call_tmp[566187](67899 call(341208 call (partial) hasLowBound _mt[232] this[67889])))
      (504724 'move' tmp[504722](394780 call isTrue call_tmp[566187]))
      (504729 'move' tmp[504714](504726 '_paramFoldLogical' tmp[504715] tmp[504722]))
    }
    {
      (504734 'move' tmp[504714](504731 '_paramFoldLogical' tmp[504715] 0))
    }
    (691815 call _statementLevelSymbol tmp[504714])
  }
  function range[66183](?).alignment[67912](arg _mt[67917]:_MT[227], arg this[67914]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method" "no doc" "no parens"
  {
    unknown ret[460660] "RVV" "temp"
    unknown call_tmp[566194] "expr temp" "maybe param" "maybe type" "temp"
    (566197 'move' call_tmp[566194](67922 call(341216 call (partial) chpl_intToIdx _mt[232] this[67914]) 0))
    (460665 'move' ret[460660](460664 'deref' call_tmp[566194]))
    (460662 return ret[460660])
  }
  function range[66183](?).aligned[67931](arg _mt[67936]:_MT[227], arg this[67933]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460669] "RVV" "temp"
    unknown call_tmp[566201] "expr temp" "maybe param" "maybe type" "temp"
    (566204 'move' call_tmp[566201](341226 call _aligned _mt[232] this[67933]))
    (460674 'move' ret[460669](460673 'deref' call_tmp[566201]))
    (460671 return ret[460669])
  }
  where {
    (341221 call stridable _mt[232] this[67933])
  }
  function range[66183](?).aligned[67949](arg _mt[67954]:_MT[227], arg this[67951]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "method" "no doc" "no parens"
  {
    unknown ret[460678] "RVV" "param" "temp"
    (460683 'move' ret[460678](460682 'deref' 1))
    (460680 return ret[460678])
  }
  where {
    unknown tmp[394797] "maybe param" "temp"
    unknown call_tmp[566210] "expr temp" "maybe param" "maybe type" "temp"
    (566213 'move' call_tmp[566210](341231 call stridable _mt[232] this[67951]))
    (394808 'move' tmp[394797](67957 call ! call_tmp[566210]))
    unknown call_tmp[566215] "expr temp" "maybe param" "maybe type" "temp"
    (566218 'move' call_tmp[566215](394810 call _cond_invalid tmp[394797]))
    if call_tmp[566215]
    {
      (394813 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504768] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504769] "maybe param" "temp"
    unknown call_tmp[566220] "expr temp" "maybe param" "maybe type" "temp"
    (566223 'move' call_tmp[566220](394798 call isTrue tmp[394797]))
    (504774 'move' tmp[504769](504772 call _cond_test call_tmp[566220]))
    if tmp[504769]
    {
      unknown tmp[394818] "maybe param" "temp"
      unknown call_tmp[566227] "expr temp" "maybe param" "maybe type" "temp"
      (566230 'move' call_tmp[566227](341236 call boundedType _mt[232] this[67951]))
      (394829 'move' tmp[394818](67964 call == call_tmp[566227] bounded[66079]))
      unknown call_tmp[566232] "expr temp" "maybe param" "maybe type" "temp"
      (566235 'move' call_tmp[566232](394831 call _cond_invalid tmp[394818]))
      if call_tmp[566232]
      {
        (394834 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[504741] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[504742] "maybe param" "temp"
      unknown call_tmp[566237] "expr temp" "maybe param" "maybe type" "temp"
      (566240 'move' call_tmp[566237](394819 call isTrue tmp[394818]))
      (504747 'move' tmp[504742](504745 call _cond_test call_tmp[566237]))
      if tmp[504742]
      {
        (504752 'move' tmp[504741](504749 '_paramFoldLogical' tmp[504742] 1))
      }
      {
        unknown tmp[504754] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[566244] "expr temp" "maybe param" "maybe type" "temp"
        (566247 'move' call_tmp[566244](341242 call boundedType _mt[232] this[67951]))
        unknown call_tmp[566249] "expr temp" "maybe param" "maybe type" "temp"
        (566252 'move' call_tmp[566249](67971 call == call_tmp[566244] boundedLow[66081]))
        (504756 'move' tmp[504754](394823 call isTrue call_tmp[566249]))
        (504761 'move' tmp[504741](504758 '_paramFoldLogical' tmp[504742] tmp[504754]))
      }
      unknown tmp[504776] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (504778 'move' tmp[504776](394801 call isTrue tmp[504741]))
      (504783 'move' tmp[504768](504780 '_paramFoldLogical' tmp[504769] tmp[504776]))
    }
    {
      (504788 'move' tmp[504768](504785 '_paramFoldLogical' tmp[504769] 0))
    }
    (691817 call _statementLevelSymbol tmp[504768])
  }
  function range[66183](?).aligned[67987](arg _mt[67992]:_MT[227], arg this[67989]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "method" "no doc" "no parens"
  {
    unknown ret[460687] "RVV" "param" "temp"
    (460692 'move' ret[460687](460691 'deref' 0))
    (460689 return ret[460687])
  }
  function range[66183](?).first[68003](arg _mt[68008]:_MT[227], arg this[68005]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460696] "RVV" "temp"
    unknown call_tmp[566258] "expr temp" "maybe param" "maybe type" "temp"
    (566261 'move' call_tmp[566258](68014 call firstAsInt _mt[232] this[68005]))
    unknown call_tmp[566263] "expr temp" "maybe param" "maybe type" "temp"
    (566266 'move' call_tmp[566263](68018 call(341247 call (partial) chpl_intToIdx _mt[232] this[68005]) call_tmp[566258]))
    (460701 'move' ret[460696](460700 'deref' call_tmp[566263]))
    (460698 return ret[460696])
  }
  function range[66183](?).firstAsInt[68027](arg _mt[68032]:_MT[227], arg this[68029]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc" "no parens"
  {
    unknown ret[460705] "RVV" "temp"
    unknown call_tmp[566270] "expr temp" "maybe param" "maybe type" "temp"
    (566273 'move' call_tmp[566270](341253 call stridable _mt[232] this[68029]))
    unknown call_tmp[566275] "expr temp" "maybe param" "maybe type" "temp"
    (566278 'move' call_tmp[566275](68035 call ! call_tmp[566270]))
    unknown call_tmp[566280] "expr temp" "maybe param" "maybe type" "temp"
    (566283 'move' call_tmp[566280](68061 call _cond_test call_tmp[566275]))
    if call_tmp[566280]
    {
      unknown call_tmp[566287] "expr temp" "maybe param" "maybe type" "temp"
      (566290 'move' call_tmp[566287](341258 call _low _mt[232] this[68029]))
      (460710 'move' ret[460705](460709 'deref' call_tmp[566287]))
      gotoReturn _end_firstAsInt[460703] _end_firstAsInt[460703]
    }
    {
      unknown tmp[504795] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[504796] "maybe param" "temp"
      unknown call_tmp[566294] "expr temp" "maybe param" "maybe type" "temp"
      (566297 'move' call_tmp[566294](341263 call _stride _mt[232] this[68029]))
      unknown call_tmp[566299] "expr temp" "maybe param" "maybe type" "temp"
      (566302 'move' call_tmp[566299](68042 call > call_tmp[566294] 0))
      (504801 'move' tmp[504796](504799 call _cond_test call_tmp[566299]))
      if tmp[504796]
      {
        unknown tmp[504803] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (504805 'move' tmp[504803](68047 call alignedLowAsInt _mt[232] this[68029]))
        (504810 'move' tmp[504795](504807 '_paramFoldLogical' tmp[504796] tmp[504803]))
      }
      {
        unknown tmp[504812] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (504814 'move' tmp[504812](68053 call alignedHighAsInt _mt[232] this[68029]))
        (504819 'move' tmp[504795](504816 '_paramFoldLogical' tmp[504796] tmp[504812]))
      }
      (460715 'move' ret[460705](460714 'deref' tmp[504795]))
      gotoReturn _end_firstAsInt[460703] _end_firstAsInt[460703]
    }
    label _end_firstAsInt[460703]
    (460707 return ret[460705])
  }
  function range[66183](?).last[68073](arg _mt[68078]:_MT[227], arg this[68075]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460721] "RVV" "temp"
    unknown call_tmp[566312] "expr temp" "maybe param" "maybe type" "temp"
    (566315 'move' call_tmp[566312](68084 call lastAsInt _mt[232] this[68075]))
    unknown call_tmp[566317] "expr temp" "maybe param" "maybe type" "temp"
    (566320 'move' call_tmp[566317](68088 call(341269 call (partial) chpl_intToIdx _mt[232] this[68075]) call_tmp[566312]))
    (460726 'move' ret[460721](460725 'deref' call_tmp[566317]))
    (460723 return ret[460721])
  }
  function range[66183](?).lastAsInt[68097](arg _mt[68102]:_MT[227], arg this[68099]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc" "no parens"
  {
    unknown ret[460730] "RVV" "temp"
    unknown call_tmp[566324] "expr temp" "maybe param" "maybe type" "temp"
    (566327 'move' call_tmp[566324](341275 call stridable _mt[232] this[68099]))
    unknown call_tmp[566329] "expr temp" "maybe param" "maybe type" "temp"
    (566332 'move' call_tmp[566329](68105 call ! call_tmp[566324]))
    unknown call_tmp[566334] "expr temp" "maybe param" "maybe type" "temp"
    (566337 'move' call_tmp[566334](68127 call _cond_test call_tmp[566329]))
    if call_tmp[566334]
    {
      unknown call_tmp[566341] "expr temp" "maybe param" "maybe type" "temp"
      (566344 'move' call_tmp[566341](341280 call _high _mt[232] this[68099]))
      (460735 'move' ret[460730](460734 'deref' call_tmp[566341]))
      gotoReturn _end_lastAsInt[460728] _end_lastAsInt[460728]
    }
    {
      unknown tmp[504826] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[504827] "maybe param" "temp"
      unknown call_tmp[566348] "expr temp" "maybe param" "maybe type" "temp"
      (566351 'move' call_tmp[566348](341284 call stride _mt[232] this[68099]))
      unknown call_tmp[566353] "expr temp" "maybe param" "maybe type" "temp"
      (566356 'move' call_tmp[566353](68112 call > call_tmp[566348] 0))
      (504832 'move' tmp[504827](504830 call _cond_test call_tmp[566353]))
      if tmp[504827]
      {
        unknown tmp[504834] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (504836 'move' tmp[504834](68115 call alignedHighAsInt _mt[232] this[68099]))
        (504841 'move' tmp[504826](504838 '_paramFoldLogical' tmp[504827] tmp[504834]))
      }
      {
        unknown tmp[504843] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (504845 'move' tmp[504843](68119 call alignedLowAsInt _mt[232] this[68099]))
        (504850 'move' tmp[504826](504847 '_paramFoldLogical' tmp[504827] tmp[504843]))
      }
      (460740 'move' ret[460730](460739 'deref' tmp[504826]))
      gotoReturn _end_lastAsInt[460728] _end_lastAsInt[460728]
    }
    label _end_lastAsInt[460728]
    (460732 return ret[460730])
  }
  function range[66183](?).low[68139](arg _mt[68144]:_MT[227], arg this[68141]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460746] "RVV" "temp"
    unknown call_tmp[566366] "expr temp" "maybe param" "maybe type" "temp"
    (566369 'move' call_tmp[566366](341295 call _low _mt[232] this[68141]))
    unknown call_tmp[566371] "expr temp" "maybe param" "maybe type" "temp"
    (566374 'move' call_tmp[566371](68149 call(341290 call (partial) chpl_intToIdx _mt[232] this[68141]) call_tmp[566366]))
    (460751 'move' ret[460746](460750 'deref' call_tmp[566371]))
    (460748 return ret[460746])
  }
  function range[66183](?).high[68158](arg _mt[68163]:_MT[227], arg this[68160]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460755] "RVV" "temp"
    unknown call_tmp[566380] "expr temp" "maybe param" "maybe type" "temp"
    (566383 'move' call_tmp[566380](341304 call _high _mt[232] this[68160]))
    unknown call_tmp[566385] "expr temp" "maybe param" "maybe type" "temp"
    (566388 'move' call_tmp[566385](68168 call(341299 call (partial) chpl_intToIdx _mt[232] this[68160]) call_tmp[566380]))
    (460760 'move' ret[460755](460759 'deref' call_tmp[566385]))
    (460757 return ret[460755])
  }
  function range[66183](?).alignedLow[68177](arg _mt[68182]:_MT[227], arg this[68179]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460764] "RVV" "temp"
    unknown call_tmp[566394] "expr temp" "maybe param" "maybe type" "temp"
    (566397 'move' call_tmp[566394](68187 call alignedLowAsInt _mt[232] this[68179]))
    unknown call_tmp[566399] "expr temp" "maybe param" "maybe type" "temp"
    (566402 'move' call_tmp[566399](68191 call(341313 call (partial) chpl_intToIdx _mt[232] this[68179]) call_tmp[566394]))
    unknown call_tmp[566406] "expr temp" "maybe param" "maybe type" "temp"
    (566409 'move' call_tmp[566406](460769 call idxType _mt[232] this[68179]))
    (460773 'move' ret[460764](460772 'coerce' call_tmp[566399] call_tmp[566406]))
    (460766 return ret[460764])
  }
  { scopeless type
    (341309 call idxType _mt[232] this[68179])
  }
  function range[66183](?).alignedLowAsInt[68201](arg _mt[68206]:_MT[227], arg this[68203]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc" "no parens"
  {
    unknown ret[460777] "RVV" "temp"
    unknown call_tmp[566415] "expr temp" "maybe param" "maybe type" "temp"
    (566418 'move' call_tmp[566415](341319 call stridable _mt[232] this[68203]))
    unknown call_tmp[566420] "expr temp" "maybe param" "maybe type" "temp"
    (566423 'move' call_tmp[566420](68209 call ! call_tmp[566415]))
    unknown call_tmp[566425] "expr temp" "maybe param" "maybe type" "temp"
    (566428 'move' call_tmp[566425](68225 call _cond_test call_tmp[566420]))
    if call_tmp[566425]
    {
      unknown call_tmp[566432] "expr temp" "maybe param" "maybe type" "temp"
      (566435 'move' call_tmp[566432](341324 call _low _mt[232] this[68203]))
      (460782 'move' ret[460777](460781 'deref' call_tmp[566432]))
      gotoReturn _end_alignedLowAsInt[460775] _end_alignedLowAsInt[460775]
    }
    {
      unknown call_tmp[566439] "expr temp" "maybe param" "maybe type" "temp"
      (566442 'move' call_tmp[566439](341329 call _low _mt[232] this[68203]))
      unknown call_tmp[566446] "expr temp" "maybe param" "maybe type" "temp"
      (566449 'move' call_tmp[566446](341334 call _alignment _mt[232] this[68203]))
      unknown call_tmp[566453] "expr temp" "maybe param" "maybe type" "temp"
      (566456 'move' call_tmp[566453](341339 call _low _mt[232] this[68203]))
      unknown call_tmp[566460] "expr temp" "maybe param" "maybe type" "temp"
      (566463 'move' call_tmp[566460](341343 call stride _mt[232] this[68203]))
      unknown call_tmp[566465] "expr temp" "maybe param" "maybe type" "temp"
      (566468 'move' call_tmp[566465](68220 call chpl__diffMod call_tmp[566446] call_tmp[566453] call_tmp[566460]))
      unknown call_tmp[566470] "expr temp" "maybe param" "maybe type" "temp"
      (566473 'move' call_tmp[566470](68221 call + call_tmp[566439] call_tmp[566465]))
      (460787 'move' ret[460777](460786 'deref' call_tmp[566470]))
      gotoReturn _end_alignedLowAsInt[460775] _end_alignedLowAsInt[460775]
    }
    label _end_alignedLowAsInt[460775]
    (460779 return ret[460777])
  }
  function range[66183](?).alignedHigh[68237](arg _mt[68242]:_MT[227], arg this[68239]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460793] "RVV" "temp"
    unknown call_tmp[566479] "expr temp" "maybe param" "maybe type" "temp"
    (566482 'move' call_tmp[566479](68247 call alignedHighAsInt _mt[232] this[68239]))
    unknown call_tmp[566484] "expr temp" "maybe param" "maybe type" "temp"
    (566487 'move' call_tmp[566484](68251 call(341352 call (partial) chpl_intToIdx _mt[232] this[68239]) call_tmp[566479]))
    unknown call_tmp[566491] "expr temp" "maybe param" "maybe type" "temp"
    (566494 'move' call_tmp[566491](460798 call idxType _mt[232] this[68239]))
    (460802 'move' ret[460793](460801 'coerce' call_tmp[566484] call_tmp[566491]))
    (460795 return ret[460793])
  }
  { scopeless type
    (341348 call idxType _mt[232] this[68239])
  }
  function range[66183](?).alignedHighAsInt[68261](arg _mt[68266]:_MT[227], arg this[68263]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc" "no parens"
  {
    unknown ret[460806] "RVV" "temp"
    unknown call_tmp[566500] "expr temp" "maybe param" "maybe type" "temp"
    (566503 'move' call_tmp[566500](341358 call stridable _mt[232] this[68263]))
    unknown call_tmp[566505] "expr temp" "maybe param" "maybe type" "temp"
    (566508 'move' call_tmp[566505](68269 call ! call_tmp[566500]))
    unknown call_tmp[566510] "expr temp" "maybe param" "maybe type" "temp"
    (566513 'move' call_tmp[566510](68285 call _cond_test call_tmp[566505]))
    if call_tmp[566510]
    {
      unknown call_tmp[566517] "expr temp" "maybe param" "maybe type" "temp"
      (566520 'move' call_tmp[566517](341363 call _high _mt[232] this[68263]))
      (460811 'move' ret[460806](460810 'deref' call_tmp[566517]))
      gotoReturn _end_alignedHighAsInt[460804] _end_alignedHighAsInt[460804]
    }
    {
      unknown call_tmp[566524] "expr temp" "maybe param" "maybe type" "temp"
      (566527 'move' call_tmp[566524](341368 call _high _mt[232] this[68263]))
      unknown call_tmp[566531] "expr temp" "maybe param" "maybe type" "temp"
      (566534 'move' call_tmp[566531](341373 call _high _mt[232] this[68263]))
      unknown call_tmp[566538] "expr temp" "maybe param" "maybe type" "temp"
      (566541 'move' call_tmp[566538](341378 call _alignment _mt[232] this[68263]))
      unknown call_tmp[566545] "expr temp" "maybe param" "maybe type" "temp"
      (566548 'move' call_tmp[566545](341382 call stride _mt[232] this[68263]))
      unknown call_tmp[566550] "expr temp" "maybe param" "maybe type" "temp"
      (566553 'move' call_tmp[566550](68280 call chpl__diffMod call_tmp[566531] call_tmp[566538] call_tmp[566545]))
      unknown call_tmp[566555] "expr temp" "maybe param" "maybe type" "temp"
      (566558 'move' call_tmp[566555](68281 call - call_tmp[566524] call_tmp[566550]))
      (460816 'move' ret[460806](460815 'deref' call_tmp[566555]))
      gotoReturn _end_alignedHighAsInt[460804] _end_alignedHighAsInt[460804]
    }
    label _end_alignedHighAsInt[460804]
    (460808 return ret[460806])
  }
  function range[66183](?).isEmpty[68297](arg _mt[68302]:_MT[227], arg this[68299]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method"
  {
    unknown ret[460822] "RVV" "temp"
    unknown tmp[394860] "maybe param" "temp"
    (394871 'move' tmp[394860] 1)
    unknown call_tmp[566560] "expr temp" "maybe param" "maybe type" "temp"
    (566563 'move' call_tmp[566560](394873 call _cond_invalid tmp[394860]))
    if call_tmp[566560]
    {
      (394876 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504857] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504858] "maybe param" "temp"
    unknown call_tmp[566565] "expr temp" "maybe param" "maybe type" "temp"
    (566568 'move' call_tmp[566565](394861 call isTrue tmp[394860]))
    (504863 'move' tmp[504858](504861 call _cond_test call_tmp[566565]))
    if tmp[504858]
    {
      unknown tmp[504865] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566572] "expr temp" "maybe param" "maybe type" "temp"
      (566575 'move' call_tmp[566572](68307 call(341387 call (partial) isAmbiguous _mt[232] this[68299])))
      (504867 'move' tmp[504865](394864 call isTrue call_tmp[566572]))
      (504872 'move' tmp[504857](504869 '_paramFoldLogical' tmp[504858] tmp[504865]))
    }
    {
      (504877 'move' tmp[504857](504874 '_paramFoldLogical' tmp[504858] 0))
    }
    unknown call_tmp[566577] "expr temp" "maybe param" "maybe type" "temp"
    (566580 'move' call_tmp[566577](68353 call _cond_test tmp[504857]))
    if call_tmp[566577]
    {
      (68333 call boundsCheckHalt module=[244] HaltWrappers[197622] "isEmpty() is invoked on an ambiguously-aligned range")
    }
    {
      unknown tmp[394839] "maybe param" "temp"
      (394850 'move' tmp[394839](68338 call isBoundedRange this[68299]))
      unknown call_tmp[566582] "expr temp" "maybe param" "maybe type" "temp"
      (566585 'move' call_tmp[566582](394852 call _cond_invalid tmp[394839]))
      if call_tmp[566582]
      {
        (394855 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[504884] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[504885] "maybe param" "temp"
      unknown call_tmp[566587] "expr temp" "maybe param" "maybe type" "temp"
      (566590 'move' call_tmp[566587](394840 call isTrue tmp[394839]))
      (504890 'move' tmp[504885](504888 call _cond_test call_tmp[566587]))
      if tmp[504885]
      {
        unknown tmp[504892] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[566594] "expr temp" "maybe param" "maybe type" "temp"
        (566597 'move' call_tmp[566594](68340 call alignedLow _mt[232] this[68299]))
        unknown call_tmp[566601] "expr temp" "maybe param" "maybe type" "temp"
        (566604 'move' call_tmp[566601](68344 call alignedHigh _mt[232] this[68299]))
        unknown call_tmp[566606] "expr temp" "maybe param" "maybe type" "temp"
        (566609 'move' call_tmp[566606](68347 call > call_tmp[566594] call_tmp[566601]))
        (504894 'move' tmp[504892](394843 call isTrue call_tmp[566606]))
        (504899 'move' tmp[504884](504896 '_paramFoldLogical' tmp[504885] tmp[504892]))
      }
      {
        (504904 'move' tmp[504884](504901 '_paramFoldLogical' tmp[504885] 0))
      }
      (460827 'move' ret[460822](460826 'deref' tmp[504884]))
      gotoReturn _end_isEmpty[460820] _end_isEmpty[460820]
    }
    label _end_isEmpty[460820]
    (460824 return ret[460822])
  }
  function range[66183](?).size[68365](arg _mt[68370]:_MT[227], arg this[68367]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no parens"
  {
    unknown ret[460833] "RVV" "temp"
    unknown call_tmp[566613] "expr temp" "maybe param" "maybe type" "temp"
    (566616 'move' call_tmp[566613](68374 call length _mt[232] this[68367]))
    unknown call_tmp[566620] "expr temp" "maybe param" "maybe type" "temp"
    (566623 'move' call_tmp[566620](460838 call intIdxType _mt[232] this[68367]))
    (460842 'move' ret[460833](460841 'coerce' call_tmp[566613] call_tmp[566620]))
    (460835 return ret[460833])
  }
  { scopeless type
    (341395 call intIdxType _mt[232] this[68367])
  }
  function range[66183](?).length[68386](arg _mt[68391]:_MT[227], arg this[68388]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method" "no parens"
  {
    unknown ret[460846] "RVV" "temp"
    unknown call_tmp[566627] "expr temp" "maybe param" "maybe type" "temp"
    (566630 'move' call_tmp[566627](68397 call isBoundedRange this[68388]))
    unknown call_tmp[566632] "expr temp" "maybe param" "maybe type" "temp"
    (566635 'move' call_tmp[566632](68398 call ! call_tmp[566627]))
    unknown call_tmp[566637] "expr temp" "maybe param" "maybe type" "temp"
    (566640 'move' call_tmp[566637](68420 call _cond_test call_tmp[566632]))
    if call_tmp[566637]
    {
      (68418 call compilerError "length is not defined on unbounded ranges")
    }
    unknown call_tmp[566644] "maybe param" "maybe type" "temp"
    (566647 'move' call_tmp[566644](68427 call alignedHighAsInt _mt[232] this[68388]))
    const ah[68430] "const" "insert auto destroy"
    (489669 'init var' ah[68430] call_tmp[566644])
    unknown call_tmp[566651] "maybe param" "maybe type" "temp"
    (566654 'move' call_tmp[566651](68434 call alignedLowAsInt _mt[232] this[68388]))
    const al[68437] "const" "insert auto destroy"
    (489671 'init var' al[68437] call_tmp[566651])
    unknown call_tmp[566656] "expr temp" "maybe param" "maybe type" "temp"
    (566659 'move' call_tmp[566656](68442 call > al[68437] ah[68430]))
    unknown call_tmp[566661] "expr temp" "maybe param" "maybe type" "temp"
    (566664 'move' call_tmp[566661](68450 call _cond_test call_tmp[566656]))
    if call_tmp[566661]
    {
      unknown call_tmp[566668] "expr temp" "maybe param" "maybe type" "temp"
      (566671 'move' call_tmp[566668](341409 call intIdxType _mt[232] this[68388]))
      unknown call_tmp[566673] "expr temp" "maybe param" "maybe type" "temp"
      (566676 'move' call_tmp[566673](68446 call _cast call_tmp[566668] 0))
      unknown call_tmp[566680] "expr temp" "maybe param" "maybe type" "temp"
      (566683 'move' call_tmp[566680](460851 call intIdxType _mt[232] this[68388]))
      (460855 'move' ret[460846](460854 'coerce' call_tmp[566673] call_tmp[566680]))
      gotoReturn _end_length[460844] _end_length[460844]
    }
    unknown call_tmp[566687] "expr temp" "maybe param" "maybe type" "temp"
    (566690 'move' call_tmp[566687](341414 call intIdxType _mt[232] this[68388]))
    unknown call_tmp[566694] "expr temp" "maybe param" "maybe type" "temp"
    (566697 'move' call_tmp[566694](68457 call stride _mt[232] this[68388]))
    unknown call_tmp[566699] "expr temp" "maybe param" "maybe type" "temp"
    (566702 'move' call_tmp[566699](68461 call abs call_tmp[566694]))
    unknown call_tmp[566704] "maybe param" "maybe type" "temp"
    (566707 'move' call_tmp[566704](68463 call _cast call_tmp[566687] call_tmp[566699]))
    const s[68465] "const" "insert auto destroy"
    (489673 'init var' s[68465] call_tmp[566704])
    unknown call_tmp[566709] "expr temp" "maybe param" "maybe type" "temp"
    (566712 'move' call_tmp[566709](68470 call - ah[68430] al[68437]))
    unknown call_tmp[566714] "expr temp" "maybe param" "maybe type" "temp"
    (566717 'move' call_tmp[566714](68473 call / call_tmp[566709] s[68465]))
    unknown call_tmp[566721] "expr temp" "maybe param" "maybe type" "temp"
    (566724 'move' call_tmp[566721](341421 call intIdxType _mt[232] this[68388]))
    unknown call_tmp[566726] "expr temp" "maybe param" "maybe type" "temp"
    (566729 'move' call_tmp[566726](68477 call _cast call_tmp[566721] 1))
    unknown call_tmp[566731] "expr temp" "maybe param" "maybe type" "temp"
    (566734 'move' call_tmp[566731](68479 call + call_tmp[566714] call_tmp[566726]))
    unknown call_tmp[566738] "expr temp" "maybe param" "maybe type" "temp"
    (566741 'move' call_tmp[566738](460860 call intIdxType _mt[232] this[68388]))
    (460864 'move' ret[460846](460863 'coerce' call_tmp[566731] call_tmp[566738]))
    label _end_length[460844]
    (460848 return ret[460846])
  }
  { scopeless type
    (341400 call intIdxType _mt[232] this[68388])
  }
  function range[66183](?).hasFirst[68489](arg _mt[68494]:_MT[227], arg this[68491]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "method"
  {
    unknown ret[460868] "RVV" "param" "temp"
    unknown call_tmp[566747] "expr temp" "maybe param" "maybe type" "temp"
    (566750 'move' call_tmp[566747](68508 call(341434 call (partial) hasLowBound _mt[232] this[68491])))
    (460873 'move' ret[460868](460872 'deref' call_tmp[566747]))
    (460870 return ret[460868])
  }
  where {
    unknown tmp[394881] "maybe param" "temp"
    unknown call_tmp[566754] "expr temp" "maybe param" "maybe type" "temp"
    (566757 'move' call_tmp[566754](341426 call stridable _mt[232] this[68491]))
    (394892 'move' tmp[394881](68497 call ! call_tmp[566754]))
    unknown call_tmp[566759] "expr temp" "maybe param" "maybe type" "temp"
    (566762 'move' call_tmp[566759](394894 call _cond_invalid tmp[394881]))
    if call_tmp[566759]
    {
      (394897 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504911] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504912] "maybe param" "temp"
    unknown call_tmp[566764] "expr temp" "maybe param" "maybe type" "temp"
    (566767 'move' call_tmp[566764](394882 call isTrue tmp[394881]))
    (504917 'move' tmp[504912](504915 call _cond_test call_tmp[566764]))
    if tmp[504912]
    {
      unknown tmp[504919] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566771] "expr temp" "maybe param" "maybe type" "temp"
      (566774 'move' call_tmp[566771](68501 call(341430 call (partial) hasHighBound _mt[232] this[68491])))
      unknown call_tmp[566776] "expr temp" "maybe param" "maybe type" "temp"
      (566779 'move' call_tmp[566776](68502 call ! call_tmp[566771]))
      (504921 'move' tmp[504919](394885 call isTrue call_tmp[566776]))
      (504926 'move' tmp[504911](504923 '_paramFoldLogical' tmp[504912] tmp[504919]))
    }
    {
      (504931 'move' tmp[504911](504928 '_paramFoldLogical' tmp[504912] 0))
    }
    (691819 call _statementLevelSymbol tmp[504911])
  }
  function range[66183](?).hasFirst[68518](arg _mt[68523]:_MT[227], arg this[68520]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[460877] "RVV" "temp"
    unknown tmp[394902] "maybe param" "temp"
    (394913 'move' tmp[394902](68527 call(341438 call (partial) isAmbiguous _mt[232] this[68520])))
    unknown call_tmp[566783] "expr temp" "maybe param" "maybe type" "temp"
    (566786 'move' call_tmp[566783](394915 call _cond_invalid tmp[394902]))
    if call_tmp[566783]
    {
      (394918 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[504938] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504939] "maybe param" "temp"
    unknown call_tmp[566788] "expr temp" "maybe param" "maybe type" "temp"
    (566791 'move' call_tmp[566788](394903 call isTrue tmp[394902]))
    (504944 'move' tmp[504939](504942 call _cond_test call_tmp[566788]))
    if tmp[504939]
    {
      (504949 'move' tmp[504938](504946 '_paramFoldLogical' tmp[504939] 1))
    }
    {
      unknown tmp[504951] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566795] "expr temp" "maybe param" "maybe type" "temp"
      (566798 'move' call_tmp[566795](68530 call(341442 call (partial) isEmpty _mt[232] this[68520])))
      (504953 'move' tmp[504951](394907 call isTrue call_tmp[566795]))
      (504958 'move' tmp[504938](504955 '_paramFoldLogical' tmp[504939] tmp[504951]))
    }
    unknown tmp[504996] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504997] "maybe param" "temp"
    (505002 'move' tmp[504997](505000 call _cond_test tmp[504938]))
    if tmp[504997]
    {
      (505007 'move' tmp[504996](505004 '_paramFoldLogical' tmp[504997] 0))
    }
    {
      unknown tmp[504965] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[504966] "maybe param" "temp"
      unknown call_tmp[566802] "expr temp" "maybe param" "maybe type" "temp"
      (566805 'move' call_tmp[566802](341446 call stride _mt[232] this[68520]))
      unknown call_tmp[566807] "expr temp" "maybe param" "maybe type" "temp"
      (566810 'move' call_tmp[566807](68536 call > call_tmp[566802] 0))
      (504971 'move' tmp[504966](504969 call _cond_test call_tmp[566807]))
      if tmp[504966]
      {
        unknown tmp[504973] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (504975 'move' tmp[504973](68540 call(341450 call (partial) hasLowBound _mt[232] this[68520])))
        (504980 'move' tmp[504965](504977 '_paramFoldLogical' tmp[504966] tmp[504973]))
      }
      {
        unknown tmp[504982] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (504984 'move' tmp[504982](68543 call(341454 call (partial) hasHighBound _mt[232] this[68520])))
        (504989 'move' tmp[504965](504986 '_paramFoldLogical' tmp[504966] tmp[504982]))
      }
      (505012 'move' tmp[504996](505009 '_paramFoldLogical' tmp[504997] tmp[504965]))
    }
    (460882 'move' ret[460877](460881 'deref' tmp[504996]))
    (460879 return ret[460877])
  }
  function range[66183](?).hasLast[68558](arg _mt[68563]:_MT[227], arg this[68560]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "method"
  {
    unknown ret[460886] "RVV" "param" "temp"
    unknown call_tmp[566818] "expr temp" "maybe param" "maybe type" "temp"
    (566821 'move' call_tmp[566818](68577 call(341467 call (partial) hasHighBound _mt[232] this[68560])))
    (460891 'move' ret[460886](460890 'deref' call_tmp[566818]))
    (460888 return ret[460886])
  }
  where {
    unknown tmp[394923] "maybe param" "temp"
    unknown call_tmp[566825] "expr temp" "maybe param" "maybe type" "temp"
    (566828 'move' call_tmp[566825](341459 call stridable _mt[232] this[68560]))
    (394934 'move' tmp[394923](68566 call ! call_tmp[566825]))
    unknown call_tmp[566830] "expr temp" "maybe param" "maybe type" "temp"
    (566833 'move' call_tmp[566830](394936 call _cond_invalid tmp[394923]))
    if call_tmp[566830]
    {
      (394939 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505019] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505020] "maybe param" "temp"
    unknown call_tmp[566835] "expr temp" "maybe param" "maybe type" "temp"
    (566838 'move' call_tmp[566835](394924 call isTrue tmp[394923]))
    (505025 'move' tmp[505020](505023 call _cond_test call_tmp[566835]))
    if tmp[505020]
    {
      unknown tmp[505027] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566842] "expr temp" "maybe param" "maybe type" "temp"
      (566845 'move' call_tmp[566842](68570 call(341463 call (partial) hasLowBound _mt[232] this[68560])))
      unknown call_tmp[566847] "expr temp" "maybe param" "maybe type" "temp"
      (566850 'move' call_tmp[566847](68571 call ! call_tmp[566842]))
      (505029 'move' tmp[505027](394927 call isTrue call_tmp[566847]))
      (505034 'move' tmp[505019](505031 '_paramFoldLogical' tmp[505020] tmp[505027]))
    }
    {
      (505039 'move' tmp[505019](505036 '_paramFoldLogical' tmp[505020] 0))
    }
    (691821 call _statementLevelSymbol tmp[505019])
  }
  function range[66183](?).hasLast[68587](arg _mt[68592]:_MT[227], arg this[68589]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[460895] "RVV" "temp"
    unknown tmp[394944] "maybe param" "temp"
    (394955 'move' tmp[394944](68596 call(341471 call (partial) isAmbiguous _mt[232] this[68589])))
    unknown call_tmp[566854] "expr temp" "maybe param" "maybe type" "temp"
    (566857 'move' call_tmp[566854](394957 call _cond_invalid tmp[394944]))
    if call_tmp[566854]
    {
      (394960 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[505046] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505047] "maybe param" "temp"
    unknown call_tmp[566859] "expr temp" "maybe param" "maybe type" "temp"
    (566862 'move' call_tmp[566859](394945 call isTrue tmp[394944]))
    (505052 'move' tmp[505047](505050 call _cond_test call_tmp[566859]))
    if tmp[505047]
    {
      (505057 'move' tmp[505046](505054 '_paramFoldLogical' tmp[505047] 1))
    }
    {
      unknown tmp[505059] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566866] "expr temp" "maybe param" "maybe type" "temp"
      (566869 'move' call_tmp[566866](68599 call(341475 call (partial) isEmpty _mt[232] this[68589])))
      (505061 'move' tmp[505059](394949 call isTrue call_tmp[566866]))
      (505066 'move' tmp[505046](505063 '_paramFoldLogical' tmp[505047] tmp[505059]))
    }
    unknown tmp[505104] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505105] "maybe param" "temp"
    (505110 'move' tmp[505105](505108 call _cond_test tmp[505046]))
    if tmp[505105]
    {
      (505115 'move' tmp[505104](505112 '_paramFoldLogical' tmp[505105] 0))
    }
    {
      unknown tmp[505073] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[505074] "maybe param" "temp"
      unknown call_tmp[566873] "expr temp" "maybe param" "maybe type" "temp"
      (566876 'move' call_tmp[566873](341479 call stride _mt[232] this[68589]))
      unknown call_tmp[566878] "expr temp" "maybe param" "maybe type" "temp"
      (566881 'move' call_tmp[566878](68605 call > call_tmp[566873] 0))
      (505079 'move' tmp[505074](505077 call _cond_test call_tmp[566878]))
      if tmp[505074]
      {
        unknown tmp[505081] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (505083 'move' tmp[505081](68609 call(341483 call (partial) hasHighBound _mt[232] this[68589])))
        (505088 'move' tmp[505073](505085 '_paramFoldLogical' tmp[505074] tmp[505081]))
      }
      {
        unknown tmp[505090] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (505092 'move' tmp[505090](68612 call(341487 call (partial) hasLowBound _mt[232] this[68589])))
        (505097 'move' tmp[505073](505094 '_paramFoldLogical' tmp[505074] tmp[505090]))
      }
      (505120 'move' tmp[505104](505117 '_paramFoldLogical' tmp[505105] tmp[505073]))
    }
    (460900 'move' ret[460895](460899 'deref' tmp[505104]))
    (460897 return ret[460895])
  }
  function range[66183](?).isNaturallyAligned[68627](arg _mt[68632]:_MT[227], arg this[68629]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method"
  {
    unknown ret[460904] "RVV" "temp"
    unknown call_tmp[566889] "expr temp" "maybe param" "maybe type" "temp"
    (566892 'move' call_tmp[566889](341498 call stride _mt[232] this[68629]))
    unknown call_tmp[566894] "expr temp" "maybe param" "maybe type" "temp"
    (566897 'move' call_tmp[566894](68649 call > call_tmp[566889] 0))
    unknown call_tmp[566899] "expr temp" "maybe param" "maybe type" "temp"
    (566902 'move' call_tmp[566899](68660 call _cond_test call_tmp[566894]))
    if call_tmp[566899]
    {
      unknown call_tmp[566906] "expr temp" "maybe param" "maybe type" "temp"
      (566909 'move' call_tmp[566906](68652 call alignedLowAsInt _mt[232] this[68629]))
      unknown call_tmp[566913] "expr temp" "maybe param" "maybe type" "temp"
      (566916 'move' call_tmp[566913](341504 call _low _mt[232] this[68629]))
      unknown call_tmp[566918] "expr temp" "maybe param" "maybe type" "temp"
      (566921 'move' call_tmp[566918](68656 call == call_tmp[566906] call_tmp[566913]))
      (460909 'move' ret[460904](460908 'deref' call_tmp[566918]))
      gotoReturn _end_isNaturallyAligned[460902] _end_isNaturallyAligned[460902]
    }
    unknown call_tmp[566925] "expr temp" "maybe param" "maybe type" "temp"
    (566928 'move' call_tmp[566925](341508 call stride _mt[232] this[68629]))
    unknown call_tmp[566930] "expr temp" "maybe param" "maybe type" "temp"
    (566933 'move' call_tmp[566930](68668 call < call_tmp[566925] 0))
    unknown call_tmp[566935] "expr temp" "maybe param" "maybe type" "temp"
    (566938 'move' call_tmp[566935](68679 call _cond_test call_tmp[566930]))
    if call_tmp[566935]
    {
      unknown call_tmp[566942] "expr temp" "maybe param" "maybe type" "temp"
      (566945 'move' call_tmp[566942](68671 call alignedHighAsInt _mt[232] this[68629]))
      unknown call_tmp[566949] "expr temp" "maybe param" "maybe type" "temp"
      (566952 'move' call_tmp[566949](341514 call _high _mt[232] this[68629]))
      unknown call_tmp[566954] "expr temp" "maybe param" "maybe type" "temp"
      (566957 'move' call_tmp[566954](68675 call == call_tmp[566942] call_tmp[566949]))
      (460914 'move' ret[460904](460913 'deref' call_tmp[566954]))
      gotoReturn _end_isNaturallyAligned[460902] _end_isNaturallyAligned[460902]
    }
    (460919 'move' ret[460904](460918 'deref' 0))
    label _end_isNaturallyAligned[460902]
    (460906 return ret[460904])
  }
  where {
    unknown tmp[394965] "maybe param" "temp"
    (394976 'move' tmp[394965](341492 call stridable _mt[232] this[68629]))
    unknown call_tmp[566961] "expr temp" "maybe param" "maybe type" "temp"
    (566964 'move' call_tmp[566961](394978 call _cond_invalid tmp[394965]))
    if call_tmp[566961]
    {
      (394981 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505127] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505128] "maybe param" "temp"
    unknown call_tmp[566966] "expr temp" "maybe param" "maybe type" "temp"
    (566969 'move' call_tmp[566966](394966 call isTrue tmp[394965]))
    (505133 'move' tmp[505128](505131 call _cond_test call_tmp[566966]))
    if tmp[505128]
    {
      unknown tmp[505135] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[566973] "expr temp" "maybe param" "maybe type" "temp"
      (566976 'move' call_tmp[566973](68636 call boundedType _mt[232] this[68629]))
      unknown call_tmp[566978] "expr temp" "maybe param" "maybe type" "temp"
      (566981 'move' call_tmp[566978](68643 call == call_tmp[566973] bounded[66079]))
      (505137 'move' tmp[505135](394969 call isTrue call_tmp[566978]))
      (505142 'move' tmp[505127](505139 '_paramFoldLogical' tmp[505128] tmp[505135]))
    }
    {
      (505147 'move' tmp[505127](505144 '_paramFoldLogical' tmp[505128] 0))
    }
    (691823 call _statementLevelSymbol tmp[505127])
  }
  function range[66183](?).isNaturallyAligned[68693](arg _mt[68698]:_MT[227], arg this[68695]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[460923] "RVV" "param" "temp"
    (460928 'move' ret[460923](460927 'deref' 1))
    (460925 return ret[460923])
  }
  where {
    unknown tmp[394986] "maybe param" "temp"
    unknown call_tmp[566985] "expr temp" "maybe param" "maybe type" "temp"
    (566988 'move' call_tmp[566985](341519 call stridable _mt[232] this[68695]))
    (394997 'move' tmp[394986](68701 call ! call_tmp[566985]))
    unknown call_tmp[566990] "expr temp" "maybe param" "maybe type" "temp"
    (566993 'move' call_tmp[566990](394999 call _cond_invalid tmp[394986]))
    if call_tmp[566990]
    {
      (395002 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505154] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505155] "maybe param" "temp"
    unknown call_tmp[566995] "expr temp" "maybe param" "maybe type" "temp"
    (566998 'move' call_tmp[566995](394987 call isTrue tmp[394986]))
    (505160 'move' tmp[505155](505158 call _cond_test call_tmp[566995]))
    if tmp[505155]
    {
      unknown tmp[505162] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[567002] "expr temp" "maybe param" "maybe type" "temp"
      (567005 'move' call_tmp[567002](68704 call boundedType _mt[232] this[68695]))
      unknown call_tmp[567007] "expr temp" "maybe param" "maybe type" "temp"
      (567010 'move' call_tmp[567007](68711 call == call_tmp[567002] bounded[66079]))
      (505164 'move' tmp[505162](394990 call isTrue call_tmp[567007]))
      (505169 'move' tmp[505154](505166 '_paramFoldLogical' tmp[505155] tmp[505162]))
    }
    {
      (505174 'move' tmp[505154](505171 '_paramFoldLogical' tmp[505155] 0))
    }
    (691825 call _statementLevelSymbol tmp[505154])
  }
  function range[66183](?).isNaturallyAligned[68725](arg _mt[68730]:_MT[227], arg this[68727]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[460932] "RVV" "temp"
    unknown call_tmp[567014] "expr temp" "maybe param" "maybe type" "temp"
    (567017 'move' call_tmp[567014](68748 call alignedLowAsInt _mt[232] this[68727]))
    unknown call_tmp[567021] "expr temp" "maybe param" "maybe type" "temp"
    (567024 'move' call_tmp[567021](341534 call _low _mt[232] this[68727]))
    unknown call_tmp[567026] "expr temp" "maybe param" "maybe type" "temp"
    (567029 'move' call_tmp[567026](68752 call == call_tmp[567014] call_tmp[567021]))
    (460937 'move' ret[460932](460936 'deref' call_tmp[567026]))
    (460934 return ret[460932])
  }
  where {
    unknown tmp[395007] "maybe param" "temp"
    unknown call_tmp[567033] "expr temp" "maybe param" "maybe type" "temp"
    (567036 'move' call_tmp[567033](341526 call stridable _mt[232] this[68727]))
    (395018 'move' tmp[395007](68733 call ! call_tmp[567033]))
    unknown call_tmp[567038] "expr temp" "maybe param" "maybe type" "temp"
    (567041 'move' call_tmp[567038](395020 call _cond_invalid tmp[395007]))
    if call_tmp[567038]
    {
      (395023 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505181] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505182] "maybe param" "temp"
    unknown call_tmp[567043] "expr temp" "maybe param" "maybe type" "temp"
    (567046 'move' call_tmp[567043](395008 call isTrue tmp[395007]))
    (505187 'move' tmp[505182](505185 call _cond_test call_tmp[567043]))
    if tmp[505182]
    {
      unknown tmp[505189] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[567050] "expr temp" "maybe param" "maybe type" "temp"
      (567053 'move' call_tmp[567050](68736 call boundedType _mt[232] this[68727]))
      unknown call_tmp[567055] "expr temp" "maybe param" "maybe type" "temp"
      (567058 'move' call_tmp[567055](68743 call == call_tmp[567050] boundedLow[66081]))
      (505191 'move' tmp[505189](395011 call isTrue call_tmp[567055]))
      (505196 'move' tmp[505181](505193 '_paramFoldLogical' tmp[505182] tmp[505189]))
    }
    {
      (505201 'move' tmp[505181](505198 '_paramFoldLogical' tmp[505182] 0))
    }
    (691827 call _statementLevelSymbol tmp[505181])
  }
  function range[66183](?).isNaturallyAligned[68763](arg _mt[68768]:_MT[227], arg this[68765]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[460941] "RVV" "temp"
    unknown tmp[395049] "maybe param" "temp"
    unknown call_tmp[567062] "expr temp" "maybe param" "maybe type" "temp"
    (567065 'move' call_tmp[567062](341545 call stride _mt[232] this[68765]))
    (395060 'move' tmp[395049](68785 call > call_tmp[567062] 0))
    unknown call_tmp[567067] "expr temp" "maybe param" "maybe type" "temp"
    (567070 'move' call_tmp[567067](395062 call _cond_invalid tmp[395049]))
    if call_tmp[567067]
    {
      (395065 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505208] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505209] "maybe param" "temp"
    unknown call_tmp[567072] "expr temp" "maybe param" "maybe type" "temp"
    (567075 'move' call_tmp[567072](395050 call isTrue tmp[395049]))
    (505214 'move' tmp[505209](505212 call _cond_test call_tmp[567072]))
    if tmp[505209]
    {
      unknown tmp[505216] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[567079] "expr temp" "maybe param" "maybe type" "temp"
      (567082 'move' call_tmp[567079](68788 call alignedLowAsInt _mt[232] this[68765]))
      unknown call_tmp[567086] "expr temp" "maybe param" "maybe type" "temp"
      (567089 'move' call_tmp[567086](341551 call _low _mt[232] this[68765]))
      unknown call_tmp[567091] "expr temp" "maybe param" "maybe type" "temp"
      (567094 'move' call_tmp[567091](68792 call == call_tmp[567079] call_tmp[567086]))
      (505218 'move' tmp[505216](395053 call isTrue call_tmp[567091]))
      (505223 'move' tmp[505208](505220 '_paramFoldLogical' tmp[505209] tmp[505216]))
    }
    {
      (505228 'move' tmp[505208](505225 '_paramFoldLogical' tmp[505209] 0))
    }
    (460946 'move' ret[460941](460945 'deref' tmp[505208]))
    (460943 return ret[460941])
  }
  where {
    unknown tmp[395028] "maybe param" "temp"
    (395039 'move' tmp[395028](341539 call stridable _mt[232] this[68765]))
    unknown call_tmp[567098] "expr temp" "maybe param" "maybe type" "temp"
    (567101 'move' call_tmp[567098](395041 call _cond_invalid tmp[395028]))
    if call_tmp[567098]
    {
      (395044 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505235] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505236] "maybe param" "temp"
    unknown call_tmp[567103] "expr temp" "maybe param" "maybe type" "temp"
    (567106 'move' call_tmp[567103](395029 call isTrue tmp[395028]))
    (505241 'move' tmp[505236](505239 call _cond_test call_tmp[567103]))
    if tmp[505236]
    {
      unknown tmp[505243] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[567110] "expr temp" "maybe param" "maybe type" "temp"
      (567113 'move' call_tmp[567110](68772 call boundedType _mt[232] this[68765]))
      unknown call_tmp[567115] "expr temp" "maybe param" "maybe type" "temp"
      (567118 'move' call_tmp[567115](68779 call == call_tmp[567110] boundedLow[66081]))
      (505245 'move' tmp[505243](395032 call isTrue call_tmp[567115]))
      (505250 'move' tmp[505235](505247 '_paramFoldLogical' tmp[505236] tmp[505243]))
    }
    {
      (505255 'move' tmp[505235](505252 '_paramFoldLogical' tmp[505236] 0))
    }
    (691829 call _statementLevelSymbol tmp[505235])
  }
  function range[66183](?).isNaturallyAligned[68805](arg _mt[68810]:_MT[227], arg this[68807]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[460950] "RVV" "param" "temp"
    (460955 'move' ret[460950](460954 'deref' 0))
    (460952 return ret[460950])
  }
  where {
    unknown tmp[395070] "maybe param" "temp"
    unknown call_tmp[567122] "expr temp" "maybe param" "maybe type" "temp"
    (567125 'move' call_tmp[567122](68813 call boundedType _mt[232] this[68807]))
    (395081 'move' tmp[395070](68820 call == call_tmp[567122] boundedNone[66085]))
    unknown call_tmp[567127] "expr temp" "maybe param" "maybe type" "temp"
    (567130 'move' call_tmp[567127](395083 call _cond_invalid tmp[395070]))
    if call_tmp[567127]
    {
      (395086 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[505289] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505290] "maybe param" "temp"
    unknown call_tmp[567132] "expr temp" "maybe param" "maybe type" "temp"
    (567135 'move' call_tmp[567132](395071 call isTrue tmp[395070]))
    (505295 'move' tmp[505290](505293 call _cond_test call_tmp[567132]))
    if tmp[505290]
    {
      (505300 'move' tmp[505289](505297 '_paramFoldLogical' tmp[505290] 1))
    }
    {
      unknown tmp[395091] "maybe param" "temp"
      unknown call_tmp[567139] "expr temp" "maybe param" "maybe type" "temp"
      (567142 'move' call_tmp[567139](341558 call stridable _mt[232] this[68807]))
      (395102 'move' tmp[395091](68823 call ! call_tmp[567139]))
      unknown call_tmp[567144] "expr temp" "maybe param" "maybe type" "temp"
      (567147 'move' call_tmp[567144](395104 call _cond_invalid tmp[395091]))
      if call_tmp[567144]
      {
        (395107 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[505262] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[505263] "maybe param" "temp"
      unknown call_tmp[567149] "expr temp" "maybe param" "maybe type" "temp"
      (567152 'move' call_tmp[567149](395092 call isTrue tmp[395091]))
      (505268 'move' tmp[505263](505266 call _cond_test call_tmp[567149]))
      if tmp[505263]
      {
        unknown tmp[505270] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[567156] "expr temp" "maybe param" "maybe type" "temp"
        (567159 'move' call_tmp[567156](68826 call boundedType _mt[232] this[68807]))
        unknown call_tmp[567161] "expr temp" "maybe param" "maybe type" "temp"
        (567164 'move' call_tmp[567161](68833 call == call_tmp[567156] boundedHigh[66083]))
        (505272 'move' tmp[505270](395095 call isTrue call_tmp[567161]))
        (505277 'move' tmp[505262](505274 '_paramFoldLogical' tmp[505263] tmp[505270]))
      }
      {
        (505282 'move' tmp[505262](505279 '_paramFoldLogical' tmp[505263] 0))
      }
      unknown tmp[505302] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (505304 'move' tmp[505302](395075 call isTrue tmp[505262]))
      (505309 'move' tmp[505289](505306 '_paramFoldLogical' tmp[505290] tmp[505302]))
    }
    (691831 call _statementLevelSymbol tmp[505289])
  }
  function range[66183](?).isNaturallyAligned[68849](arg _mt[68854]:_MT[227], arg this[68851]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[460959] "RVV" "temp"
    unknown tmp[395133] "maybe param" "temp"
    unknown call_tmp[567168] "expr temp" "maybe param" "maybe type" "temp"
    (567171 'move' call_tmp[567168](341571 call stride _mt[232] this[68851]))
    (395144 'move' tmp[395133](68871 call < call_tmp[567168] 0))
    unknown call_tmp[567173] "expr temp" "maybe param" "maybe type" "temp"
    (567176 'move' call_tmp[567173](395146 call _cond_invalid tmp[395133]))
    if call_tmp[567173]
    {
      (395149 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505316] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505317] "maybe param" "temp"
    unknown call_tmp[567178] "expr temp" "maybe param" "maybe type" "temp"
    (567181 'move' call_tmp[567178](395134 call isTrue tmp[395133]))
    (505322 'move' tmp[505317](505320 call _cond_test call_tmp[567178]))
    if tmp[505317]
    {
      unknown tmp[505324] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[567185] "expr temp" "maybe param" "maybe type" "temp"
      (567188 'move' call_tmp[567185](68874 call alignedHighAsInt _mt[232] this[68851]))
      unknown call_tmp[567192] "expr temp" "maybe param" "maybe type" "temp"
      (567195 'move' call_tmp[567192](341577 call _high _mt[232] this[68851]))
      unknown call_tmp[567197] "expr temp" "maybe param" "maybe type" "temp"
      (567200 'move' call_tmp[567197](68878 call == call_tmp[567185] call_tmp[567192]))
      (505326 'move' tmp[505324](395137 call isTrue call_tmp[567197]))
      (505331 'move' tmp[505316](505328 '_paramFoldLogical' tmp[505317] tmp[505324]))
    }
    {
      (505336 'move' tmp[505316](505333 '_paramFoldLogical' tmp[505317] 0))
    }
    (460964 'move' ret[460959](460963 'deref' tmp[505316]))
    (460961 return ret[460959])
  }
  where {
    unknown tmp[395112] "maybe param" "temp"
    (395123 'move' tmp[395112](341565 call stridable _mt[232] this[68851]))
    unknown call_tmp[567204] "expr temp" "maybe param" "maybe type" "temp"
    (567207 'move' call_tmp[567204](395125 call _cond_invalid tmp[395112]))
    if call_tmp[567204]
    {
      (395128 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505343] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505344] "maybe param" "temp"
    unknown call_tmp[567209] "expr temp" "maybe param" "maybe type" "temp"
    (567212 'move' call_tmp[567209](395113 call isTrue tmp[395112]))
    (505349 'move' tmp[505344](505347 call _cond_test call_tmp[567209]))
    if tmp[505344]
    {
      unknown tmp[505351] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[567216] "expr temp" "maybe param" "maybe type" "temp"
      (567219 'move' call_tmp[567216](68858 call boundedType _mt[232] this[68851]))
      unknown call_tmp[567221] "expr temp" "maybe param" "maybe type" "temp"
      (567224 'move' call_tmp[567221](68865 call == call_tmp[567216] boundedHigh[66083]))
      (505353 'move' tmp[505351](395116 call isTrue call_tmp[567221]))
      (505358 'move' tmp[505343](505355 '_paramFoldLogical' tmp[505344] tmp[505351]))
    }
    {
      (505363 'move' tmp[505343](505360 '_paramFoldLogical' tmp[505344] 0))
    }
    (691833 call _statementLevelSymbol tmp[505343])
  }
  function range[66183](?).isAmbiguous[68891](arg _mt[68896]:_MT[227], arg this[68893]:range[66183](?) :
  range[66183](?)) param : _unknown[43] "method"
  {
    unknown ret[460968] "RVV" "param" "temp"
    (460973 'move' ret[460968](460972 'deref' 0))
    (460970 return ret[460968])
  }
  where {
    unknown call_tmp[567228] "expr temp" "maybe param" "maybe type" "temp"
    (567231 'move' call_tmp[567228](341582 call stridable _mt[232] this[68893]))
    (68899 call ! call_tmp[567228])
  }
  function range[66183](?).isAmbiguous[68911](arg _mt[68916]:_MT[227], arg this[68913]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method" "no doc"
  {
    unknown ret[460977] "RVV" "temp"
    unknown tmp[395154] "maybe param" "temp"
    unknown call_tmp[567235] "expr temp" "maybe param" "maybe type" "temp"
    (567238 'move' call_tmp[567235](341591 call aligned _mt[232] this[68913]))
    (395165 'move' tmp[395154](68920 call ! call_tmp[567235]))
    unknown call_tmp[567240] "expr temp" "maybe param" "maybe type" "temp"
    (567243 'move' call_tmp[567240](395167 call _cond_invalid tmp[395154]))
    if call_tmp[567240]
    {
      (395170 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505397] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505398] "maybe param" "temp"
    unknown call_tmp[567245] "expr temp" "maybe param" "maybe type" "temp"
    (567248 'move' call_tmp[567245](395155 call isTrue tmp[395154]))
    (505403 'move' tmp[505398](505401 call _cond_test call_tmp[567245]))
    if tmp[505398]
    {
      unknown tmp[395175] "maybe param" "temp"
      unknown call_tmp[567252] "expr temp" "maybe param" "maybe type" "temp"
      (567255 'move' call_tmp[567252](341595 call stride _mt[232] this[68913]))
      (395186 'move' tmp[395175](68924 call > call_tmp[567252] 1))
      unknown call_tmp[567257] "expr temp" "maybe param" "maybe type" "temp"
      (567260 'move' call_tmp[567257](395188 call _cond_invalid tmp[395175]))
      if call_tmp[567257]
      {
        (395191 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[505370] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[505371] "maybe param" "temp"
      unknown call_tmp[567262] "expr temp" "maybe param" "maybe type" "temp"
      (567265 'move' call_tmp[567262](395176 call isTrue tmp[395175]))
      (505376 'move' tmp[505371](505374 call _cond_test call_tmp[567262]))
      if tmp[505371]
      {
        (505381 'move' tmp[505370](505378 '_paramFoldLogical' tmp[505371] 1))
      }
      {
        unknown tmp[505383] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[567269] "expr temp" "maybe param" "maybe type" "temp"
        (567272 'move' call_tmp[567269](341599 call stride _mt[232] this[68913]))
        unknown call_tmp[567274] "expr temp" "maybe param" "maybe type" "temp"
        (567277 'move' call_tmp[567274](68928 call - 1))
        unknown call_tmp[567279] "expr temp" "maybe param" "maybe type" "temp"
        (567282 'move' call_tmp[567279](68930 call < call_tmp[567269] call_tmp[567274]))
        (505385 'move' tmp[505383](395180 call isTrue call_tmp[567279]))
        (505390 'move' tmp[505370](505387 '_paramFoldLogical' tmp[505371] tmp[505383]))
      }
      unknown tmp[505405] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (505407 'move' tmp[505405](395158 call isTrue tmp[505370]))
      (505412 'move' tmp[505397](505409 '_paramFoldLogical' tmp[505398] tmp[505405]))
    }
    {
      (505417 'move' tmp[505397](505414 '_paramFoldLogical' tmp[505398] 0))
    }
    (460982 'move' ret[460977](460981 'deref' tmp[505397]))
    (460979 return ret[460977])
  }
  where {
    (341587 call stridable _mt[232] this[68913])
  }
  function range[66183](?).contains[68949](arg _mt[68954]:_MT[227], arg this[68951]:range[66183](?) :
  range[66183](?), arg ind[68946] :
  (341604 call idxType _mt[232] this[68951])) : _unknown[43] "inline" "method"
  {
    unknown ret[460986] "RVV" "temp"
    unknown call_tmp[567290] "expr temp" "maybe param" "maybe type" "temp"
    (567293 'move' call_tmp[567290](68963 call(68959 call (partial) isAmbiguous _mt[232] this[68951])))
    unknown call_tmp[567295] "expr temp" "maybe param" "maybe type" "temp"
    (567298 'move' call_tmp[567295](68967 call _cond_test call_tmp[567290]))
    if call_tmp[567295]
    {
      (460991 'move' ret[460986](460990 'deref' 0))
      gotoReturn _end_contains[460984] _end_contains[460984]
    }
    unknown call_tmp[567300] "maybe param" "maybe type" "temp"
    (567303 'move' call_tmp[567300](68976 call chpl__idxToInt ind[68946]))
    const i[68977] "const" "insert auto destroy"
    (489675 'init var' i[68977] call_tmp[567300])
    unknown call_tmp[567307] "expr temp" "maybe param" "maybe type" "temp"
    (567310 'move' call_tmp[567307](68982 call(341610 call (partial) hasHighBound _mt[232] this[68951])))
    unknown call_tmp[567312] "expr temp" "maybe param" "maybe type" "temp"
    (567315 'move' call_tmp[567312](68996 call _cond_test call_tmp[567307]))
    if call_tmp[567312]
    {
      unknown call_tmp[567319] "expr temp" "maybe param" "maybe type" "temp"
      (567322 'move' call_tmp[567319](341616 call _high _mt[232] this[68951]))
      unknown call_tmp[567324] "expr temp" "maybe param" "maybe type" "temp"
      (567327 'move' call_tmp[567324](68985 call > i[68977] call_tmp[567319]))
      unknown call_tmp[567329] "expr temp" "maybe param" "maybe type" "temp"
      (567332 'move' call_tmp[567329](68990 call _cond_test call_tmp[567324]))
      if call_tmp[567329]
      {
        (460996 'move' ret[460986](460995 'deref' 0))
        gotoReturn _end_contains[460984] _end_contains[460984]
      }
    }
    unknown call_tmp[567336] "expr temp" "maybe param" "maybe type" "temp"
    (567339 'move' call_tmp[567336](69002 call(341620 call (partial) hasLowBound _mt[232] this[68951])))
    unknown call_tmp[567341] "expr temp" "maybe param" "maybe type" "temp"
    (567344 'move' call_tmp[567341](69016 call _cond_test call_tmp[567336]))
    if call_tmp[567341]
    {
      unknown call_tmp[567348] "expr temp" "maybe param" "maybe type" "temp"
      (567351 'move' call_tmp[567348](341626 call _low _mt[232] this[68951]))
      unknown call_tmp[567353] "expr temp" "maybe param" "maybe type" "temp"
      (567356 'move' call_tmp[567353](69005 call < i[68977] call_tmp[567348]))
      unknown call_tmp[567358] "expr temp" "maybe param" "maybe type" "temp"
      (567361 'move' call_tmp[567358](69010 call _cond_test call_tmp[567353]))
      if call_tmp[567358]
      {
        (461001 'move' ret[460986](461000 'deref' 0))
        gotoReturn _end_contains[460984] _end_contains[460984]
      }
    }
    unknown call_tmp[567365] "expr temp" "maybe param" "maybe type" "temp"
    (567368 'move' call_tmp[567365](341631 call stridable _mt[232] this[68951]))
    unknown call_tmp[567370] "expr temp" "maybe param" "maybe type" "temp"
    (567373 'move' call_tmp[567370](69049 call _cond_test call_tmp[567365]))
    if call_tmp[567370]
    {
      unknown call_tmp[567377] "expr temp" "maybe param" "maybe type" "temp"
      (567380 'move' call_tmp[567377](341640 call intIdxType _mt[232] this[68951]))
      unknown call_tmp[567384] "expr temp" "maybe param" "maybe type" "temp"
      (567387 'move' call_tmp[567384](341636 call _stride _mt[232] this[68951]))
      unknown call_tmp[567389] "expr temp" "maybe param" "maybe type" "temp"
      (567392 'move' call_tmp[567389](69024 call abs call_tmp[567384]))
      unknown call_tmp[567394] "maybe param" "maybe type" "temp"
      (567397 'move' call_tmp[567394](69026 call _cast call_tmp[567377] call_tmp[567389]))
      unknown s[69028] "insert auto destroy"
      (489677 'init var' s[69028] call_tmp[567394])
      unknown call_tmp[567401] "expr temp" "maybe param" "maybe type" "temp"
      (567404 'move' call_tmp[567401](341646 call _alignment _mt[232] this[68951]))
      unknown call_tmp[567406] "expr temp" "maybe param" "maybe type" "temp"
      (567409 'move' call_tmp[567406](69037 call chpl__diffMod i[68977] call_tmp[567401] s[69028]))
      unknown call_tmp[567411] "expr temp" "maybe param" "maybe type" "temp"
      (567414 'move' call_tmp[567411](69039 call != call_tmp[567406] 0))
      unknown call_tmp[567416] "expr temp" "maybe param" "maybe type" "temp"
      (567419 'move' call_tmp[567416](69044 call _cond_test call_tmp[567411]))
      if call_tmp[567416]
      {
        (461006 'move' ret[460986](461005 'deref' 0))
        gotoReturn _end_contains[460984] _end_contains[460984]
      }
    }
    (461011 'move' ret[460986](461010 'deref' 1))
    label _end_contains[460984]
    (460988 return ret[460986])
  }
  function range[66183](?).contains[69068](arg _mt[69073]:_MT[227], arg this[69070]:range[66183](?) :
  range[66183](?), arg other[69065]:range[66183](?)) : _unknown[43] "inline" "method"
  {
    unknown ret[461015] "RVV" "temp"
    unknown tmp[395196] "maybe param" "temp"
    (395207 'move' tmp[395196](69080 call(69076 call (partial) isAmbiguous _mt[232] this[69070])))
    unknown call_tmp[567423] "expr temp" "maybe param" "maybe type" "temp"
    (567426 'move' call_tmp[567423](395209 call _cond_invalid tmp[395196]))
    if call_tmp[567423]
    {
      (395212 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[505424] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505425] "maybe param" "temp"
    unknown call_tmp[567428] "expr temp" "maybe param" "maybe type" "temp"
    (567431 'move' call_tmp[567428](395197 call isTrue tmp[395196]))
    (505430 'move' tmp[505425](505428 call _cond_test call_tmp[567428]))
    if tmp[505425]
    {
      (505435 'move' tmp[505424](505432 '_paramFoldLogical' tmp[505425] 1))
    }
    {
      unknown tmp[505437] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[567435] "expr temp" "maybe param" "maybe type" "temp"
      (567438 'move' call_tmp[567435](69086 call(69082 call (partial) isAmbiguous _mt[232] other[69065])))
      (505439 'move' tmp[505437](395201 call isTrue call_tmp[567435]))
      (505444 'move' tmp[505424](505441 '_paramFoldLogical' tmp[505425] tmp[505437]))
    }
    unknown call_tmp[567440] "expr temp" "maybe param" "maybe type" "temp"
    (567443 'move' call_tmp[567440](69092 call _cond_test tmp[505424]))
    if call_tmp[567440]
    {
      (461020 'move' ret[461015](461019 'deref' 0))
      gotoReturn _end_contains[461013] _end_contains[461013]
    }
    unknown call_tmp[567447] "expr temp" "maybe param" "maybe type" "temp"
    (567450 'move' call_tmp[567447](341655 call stridable _mt[232] this[69070]))
    unknown call_tmp[567452] "expr temp" "maybe param" "maybe type" "temp"
    (567455 'move' call_tmp[567452](69160 call _cond_test call_tmp[567447]))
    if call_tmp[567452]
    {
      unknown tmp[395217] "maybe param" "temp"
      unknown tmp[395238] "maybe param" "temp"
      unknown call_tmp[567459] "expr temp" "maybe param" "maybe type" "temp"
      (567462 'move' call_tmp[567459](341659 call stride _mt[232] this[69070]))
      (395249 'move' tmp[395238](69101 call > call_tmp[567459] 0))
      unknown call_tmp[567464] "expr temp" "maybe param" "maybe type" "temp"
      (567467 'move' call_tmp[567464](395251 call _cond_invalid tmp[395238]))
      if call_tmp[567464]
      {
        (395254 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[505451] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[505452] "maybe param" "temp"
      unknown call_tmp[567469] "expr temp" "maybe param" "maybe type" "temp"
      (567472 'move' call_tmp[567469](395239 call isTrue tmp[395238]))
      (505457 'move' tmp[505452](505455 call _cond_test call_tmp[567469]))
      if tmp[505452]
      {
        unknown tmp[505459] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[567476] "expr temp" "maybe param" "maybe type" "temp"
        (567479 'move' call_tmp[567476](69104 call stride _mt[232] other[69065]))
        unknown call_tmp[567481] "expr temp" "maybe param" "maybe type" "temp"
        (567484 'move' call_tmp[567481](69108 call < call_tmp[567476] 0))
        (505461 'move' tmp[505459](395242 call isTrue call_tmp[567481]))
        (505466 'move' tmp[505451](505463 '_paramFoldLogical' tmp[505452] tmp[505459]))
      }
      {
        (505471 'move' tmp[505451](505468 '_paramFoldLogical' tmp[505452] 0))
      }
      (395228 'move' tmp[395217] tmp[505451])
      unknown call_tmp[567486] "expr temp" "maybe param" "maybe type" "temp"
      (567489 'move' call_tmp[567486](395230 call _cond_invalid tmp[395217]))
      if call_tmp[567486]
      {
        (395233 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[505505] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[505506] "maybe param" "temp"
      unknown call_tmp[567491] "expr temp" "maybe param" "maybe type" "temp"
      (567494 'move' call_tmp[567491](395218 call isTrue tmp[395217]))
      (505511 'move' tmp[505506](505509 call _cond_test call_tmp[567491]))
      if tmp[505506]
      {
        (505516 'move' tmp[505505](505513 '_paramFoldLogical' tmp[505506] 1))
      }
      {
        unknown tmp[395259] "maybe param" "temp"
        unknown call_tmp[567498] "expr temp" "maybe param" "maybe type" "temp"
        (567501 'move' call_tmp[567498](341664 call stride _mt[232] this[69070]))
        (395270 'move' tmp[395259](69114 call < call_tmp[567498] 0))
        unknown call_tmp[567503] "expr temp" "maybe param" "maybe type" "temp"
        (567506 'move' call_tmp[567503](395272 call _cond_invalid tmp[395259]))
        if call_tmp[567503]
        {
          (395275 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[505478] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[505479] "maybe param" "temp"
        unknown call_tmp[567508] "expr temp" "maybe param" "maybe type" "temp"
        (567511 'move' call_tmp[567508](395260 call isTrue tmp[395259]))
        (505484 'move' tmp[505479](505482 call _cond_test call_tmp[567508]))
        if tmp[505479]
        {
          unknown tmp[505486] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[567515] "expr temp" "maybe param" "maybe type" "temp"
          (567518 'move' call_tmp[567515](69117 call stride _mt[232] other[69065]))
          unknown call_tmp[567520] "expr temp" "maybe param" "maybe type" "temp"
          (567523 'move' call_tmp[567520](69121 call > call_tmp[567515] 0))
          (505488 'move' tmp[505486](395263 call isTrue call_tmp[567520]))
          (505493 'move' tmp[505478](505490 '_paramFoldLogical' tmp[505479] tmp[505486]))
        }
        {
          (505498 'move' tmp[505478](505495 '_paramFoldLogical' tmp[505479] 0))
        }
        unknown tmp[505518] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (505520 'move' tmp[505518](395222 call isTrue tmp[505478]))
        (505525 'move' tmp[505505](505522 '_paramFoldLogical' tmp[505506] tmp[505518]))
      }
      unknown call_tmp[567525] "expr temp" "maybe param" "maybe type" "temp"
      (567528 'move' call_tmp[567525](69134 call _cond_test tmp[505505]))
      if call_tmp[567525]
      {
        unknown call_tmp[567530] "expr temp" "maybe param" "maybe type" "temp"
        (567533 'move' call_tmp[567530](69131 call _containsHelp this[69070] other[69065]))
        (461025 'move' ret[461015](461024 'deref' call_tmp[567530]))
        gotoReturn _end_contains[461013] _end_contains[461013]
      }
    }
    {
      unknown call_tmp[567537] "expr temp" "maybe param" "maybe type" "temp"
      (567540 'move' call_tmp[567537](69141 call stride _mt[232] other[69065]))
      unknown call_tmp[567542] "expr temp" "maybe param" "maybe type" "temp"
      (567545 'move' call_tmp[567542](69145 call < call_tmp[567537] 0))
      unknown call_tmp[567547] "expr temp" "maybe param" "maybe type" "temp"
      (567550 'move' call_tmp[567547](69154 call _cond_test call_tmp[567542]))
      if call_tmp[567547]
      {
        unknown call_tmp[567552] "expr temp" "maybe param" "maybe type" "temp"
        (567555 'move' call_tmp[567552](69151 call _containsHelp this[69070] other[69065]))
        (461030 'move' ret[461015](461029 'deref' call_tmp[567552]))
        gotoReturn _end_contains[461013] _end_contains[461013]
      }
    }
    unknown call_tmp[567557] "expr temp" "maybe param" "maybe type" "temp"
    (567560 'move' call_tmp[567557](69168 call this[69070] other[69065]))
    unknown call_tmp[567562] "expr temp" "maybe param" "maybe type" "temp"
    (567565 'move' call_tmp[567562](69169 call == other[69065] call_tmp[567557]))
    (461035 'move' ret[461015](461034 'deref' call_tmp[567562]))
    label _end_contains[461013]
    (461017 return ret[461015])
  }
  function range[66183](?).member[69182](arg _mt[69187]:_MT[227], arg this[69184]:range[66183](?) :
  range[66183](?), arg ind[69179] :
  (341678 call idxType _mt[232] this[69184])) : _unknown[43] "inline" "method"
  {
    unknown ret[461039] "RVV" "temp"
    unknown call_tmp[567569] "expr temp" "maybe param" "maybe type" "temp"
    (567572 'move' call_tmp[567569](69224 call + "range.member is deprecated - " "please use range.contains instead"))
    (69227 call compilerWarning call_tmp[567569])
    unknown call_tmp[567576] "expr temp" "maybe param" "maybe type" "temp"
    (567579 'move' call_tmp[567576](69238 call(69233 call (partial) contains _mt[232] this[69184]) ind[69179]))
    (461044 'move' ret[461039](461043 'deref' call_tmp[567576]))
    (461041 return ret[461039])
  }
  function range[66183](?).member[69253](arg _mt[69258]:_MT[227], arg this[69255]:range[66183](?) :
  range[66183](?), arg other[69250]:range[66183](?)) : _unknown[43] "inline" "method"
  {
    unknown ret[461048] "RVV" "temp"
    unknown call_tmp[567581] "expr temp" "maybe param" "maybe type" "temp"
    (567584 'move' call_tmp[567581](69263 call + "range.member is deprecated - " "please use range.contains instead"))
    (69266 call compilerWarning call_tmp[567581])
    unknown call_tmp[567588] "expr temp" "maybe param" "maybe type" "temp"
    (567591 'move' call_tmp[567588](69275 call(69270 call (partial) contains _mt[232] this[69255]) other[69250]))
    (461053 'move' ret[461048](461052 'deref' call_tmp[567588]))
    (461050 return ret[461048])
  }
  function _containsHelp[69289](in arg arg1[69286]:range[66183](?), in arg arg2[69295]:range[66183](?)) : _unknown[43] "inline" "private"
  {
    unknown ret[461057] "RVV" "temp"
    unknown call_tmp[567595] "expr temp" "maybe param" "maybe type" "temp"
    (567598 'move' call_tmp[567595](69299 call stridable _mt[232] arg2[69295]))
    unknown call_tmp[567600] "expr temp" "maybe param" "maybe type" "temp"
    (567603 'move' call_tmp[567600](69328 call _cond_test call_tmp[567595]))
    if call_tmp[567600]
    {
      unknown call_tmp[567607] "expr temp" "maybe param" "maybe type" "temp"
      (567610 'move' call_tmp[567607](69303 call _stride _mt[232] arg2[69295]))
      unknown call_tmp[567614] "expr temp" "maybe param" "maybe type" "temp"
      (567617 'move' call_tmp[567614](69307 call _stride _mt[232] arg2[69295]))
      unknown call_tmp[567619] "expr temp" "maybe param" "maybe type" "temp"
      (567622 'move' call_tmp[567619](69310 call - call_tmp[567614]))
      (69312 call = call_tmp[567607] call_tmp[567619])
    }
    {
      unknown call_tmp[567626] "expr temp" "maybe param" "maybe type" "temp"
      (567629 'move' call_tmp[567626](69316 call _stride _mt[232] arg1[69286]))
      unknown call_tmp[567633] "expr temp" "maybe param" "maybe type" "temp"
      (567636 'move' call_tmp[567633](69320 call _stride _mt[232] arg1[69286]))
      unknown call_tmp[567638] "expr temp" "maybe param" "maybe type" "temp"
      (567641 'move' call_tmp[567638](69323 call - call_tmp[567633]))
      (69325 call = call_tmp[567626] call_tmp[567638])
    }
    unknown call_tmp[567643] "expr temp" "maybe param" "maybe type" "temp"
    (567646 'move' call_tmp[567643](69339 call arg1[69286] arg2[69295]))
    unknown call_tmp[567648] "expr temp" "maybe param" "maybe type" "temp"
    (567651 'move' call_tmp[567648](69340 call == arg2[69295] call_tmp[567643]))
    (461062 'move' ret[461057](461061 'deref' call_tmp[567648]))
    (461059 return ret[461057])
  }
  function ==[69355](arg r1[69352]:range[66183](?), arg r2[69361]:range[66183](?)) param : _unknown[43]
  {
    unknown ret[461066] "RVV" "param" "temp"
    (461071 'move' ret[461066](461070 'deref' 0))
    (461068 return ret[461066])
  }
  where {
    unknown call_tmp[567655] "expr temp" "maybe param" "maybe type" "temp"
    (567658 'move' call_tmp[567655](69365 call boundedType _mt[232] r1[69352]))
    unknown call_tmp[567662] "expr temp" "maybe param" "maybe type" "temp"
    (567665 'move' call_tmp[567662](69369 call boundedType _mt[232] r2[69361]))
    (69372 call != call_tmp[567655] call_tmp[567662])
  }
  function ==[69390](arg r1[69387]:range[66183](?), arg r2[69396]:range[66183](?)) : _unknown[43]
  {
    unknown ret[461075] "RVV" "temp"
    unknown call_tmp[567669] "expr temp" "maybe param" "maybe type" "temp"
    (567672 'move' call_tmp[567669](69415 call(69411 call (partial) isAmbiguous _mt[232] r1[69387])))
    unknown call_tmp[567676] "expr temp" "maybe param" "maybe type" "temp"
    (567679 'move' call_tmp[567676](69421 call(69417 call (partial) isAmbiguous _mt[232] r2[69396])))
    unknown call_tmp[567681] "expr temp" "maybe param" "maybe type" "temp"
    (567684 'move' call_tmp[567681](69422 call != call_tmp[567669] call_tmp[567676]))
    unknown call_tmp[567686] "expr temp" "maybe param" "maybe type" "temp"
    (567689 'move' call_tmp[567686](69427 call _cond_test call_tmp[567681]))
    if call_tmp[567686]
    {
      (461081 'move' ret[461075](461080 'coerce' 0 bool[10]))
      gotoReturn _end_==[461073] _end_==[461073]
    }
    unknown call_tmp[567693] "expr temp" "maybe param" "maybe type" "temp"
    (567696 'move' call_tmp[567693](69438 call(69434 call (partial) isAmbiguous _mt[232] r1[69387])))
    unknown call_tmp[567698] "expr temp" "maybe param" "maybe type" "temp"
    (567701 'move' call_tmp[567698](69446 call _cond_test call_tmp[567693]))
    if call_tmp[567698]
    {
      unknown call_tmp[567703] "expr temp" "maybe param" "maybe type" "temp"
      (567706 'move' call_tmp[567703](69443 call ident r1[69387] r2[69396]))
      (461087 'move' ret[461075](461086 'coerce' call_tmp[567703] bool[10]))
      gotoReturn _end_==[461073] _end_==[461073]
    }
    unknown call_tmp[567708] "expr temp" "maybe param" "maybe type" "temp"
    (567711 'move' call_tmp[567708](69454 call isBoundedRange r1[69387]))
    unknown call_tmp[567713] "expr temp" "maybe param" "maybe type" "temp"
    (567716 'move' call_tmp[567713](69627 call _cond_test call_tmp[567708]))
    if call_tmp[567713]
    {
      unknown call_tmp[567720] "maybe param" "maybe type" "temp"
      (567723 'move' call_tmp[567720](69456 call length _mt[232] r1[69387]))
      const len[69459] "const" "insert auto destroy"
      (489679 'init var' len[69459] call_tmp[567720])
      unknown call_tmp[567727] "maybe param" "maybe type" "temp"
      (567730 'move' call_tmp[567727](69463 call length _mt[232] r2[69396]))
      const l2[69466] "const" "insert auto destroy"
      (489681 'init var' l2[69466] call_tmp[567727])
      unknown call_tmp[567732] "expr temp" "maybe param" "maybe type" "temp"
      (567735 'move' call_tmp[567732](69472 call != len[69459] l2[69466]))
      unknown call_tmp[567737] "expr temp" "maybe param" "maybe type" "temp"
      (567740 'move' call_tmp[567737](69477 call _cond_test call_tmp[567732]))
      if call_tmp[567737]
      {
        (461093 'move' ret[461075](461092 'coerce' 0 bool[10]))
        gotoReturn _end_==[461073] _end_==[461073]
      }
      unknown call_tmp[567742] "expr temp" "maybe param" "maybe type" "temp"
      (567745 'move' call_tmp[567742](69484 call == len[69459] 0))
      unknown call_tmp[567747] "expr temp" "maybe param" "maybe type" "temp"
      (567750 'move' call_tmp[567747](69489 call _cond_test call_tmp[567742]))
      if call_tmp[567747]
      {
        (461099 'move' ret[461075](461098 'coerce' 1 bool[10]))
        gotoReturn _end_==[461073] _end_==[461073]
      }
      unknown call_tmp[567754] "expr temp" "maybe param" "maybe type" "temp"
      (567757 'move' call_tmp[567754](69497 call first _mt[232] r1[69387]))
      unknown call_tmp[567761] "expr temp" "maybe param" "maybe type" "temp"
      (567764 'move' call_tmp[567761](69501 call first _mt[232] r2[69396]))
      unknown call_tmp[567766] "expr temp" "maybe param" "maybe type" "temp"
      (567769 'move' call_tmp[567766](69504 call != call_tmp[567754] call_tmp[567761]))
      unknown call_tmp[567771] "expr temp" "maybe param" "maybe type" "temp"
      (567774 'move' call_tmp[567771](69509 call _cond_test call_tmp[567766]))
      if call_tmp[567771]
      {
        (461105 'move' ret[461075](461104 'coerce' 0 bool[10]))
        gotoReturn _end_==[461073] _end_==[461073]
      }
      unknown call_tmp[567776] "expr temp" "maybe param" "maybe type" "temp"
      (567779 'move' call_tmp[567776](69516 call == len[69459] 1))
      unknown call_tmp[567781] "expr temp" "maybe param" "maybe type" "temp"
      (567784 'move' call_tmp[567781](69521 call _cond_test call_tmp[567776]))
      if call_tmp[567781]
      {
        (461111 'move' ret[461075](461110 'coerce' 1 bool[10]))
        gotoReturn _end_==[461073] _end_==[461073]
      }
      unknown call_tmp[567788] "expr temp" "maybe param" "maybe type" "temp"
      (567791 'move' call_tmp[567788](69527 call stride _mt[232] r1[69387]))
      unknown call_tmp[567795] "expr temp" "maybe param" "maybe type" "temp"
      (567798 'move' call_tmp[567795](69531 call stride _mt[232] r2[69396]))
      unknown call_tmp[567800] "expr temp" "maybe param" "maybe type" "temp"
      (567803 'move' call_tmp[567800](69534 call != call_tmp[567788] call_tmp[567795]))
      unknown call_tmp[567805] "expr temp" "maybe param" "maybe type" "temp"
      (567808 'move' call_tmp[567805](69539 call _cond_test call_tmp[567800]))
      if call_tmp[567805]
      {
        (461117 'move' ret[461075](461116 'coerce' 0 bool[10]))
        gotoReturn _end_==[461073] _end_==[461073]
      }
      (461123 'move' ret[461075](461122 'coerce' 1 bool[10]))
      gotoReturn _end_==[461073] _end_==[461073]
    }
    {
      unknown call_tmp[567812] "expr temp" "maybe param" "maybe type" "temp"
      (567815 'move' call_tmp[567812](69548 call stride _mt[232] r1[69387]))
      unknown call_tmp[567819] "expr temp" "maybe param" "maybe type" "temp"
      (567822 'move' call_tmp[567819](69552 call stride _mt[232] r2[69396]))
      unknown call_tmp[567824] "expr temp" "maybe param" "maybe type" "temp"
      (567827 'move' call_tmp[567824](69555 call != call_tmp[567812] call_tmp[567819]))
      unknown call_tmp[567829] "expr temp" "maybe param" "maybe type" "temp"
      (567832 'move' call_tmp[567829](69560 call _cond_test call_tmp[567824]))
      if call_tmp[567829]
      {
        (461129 'move' ret[461075](461128 'coerce' 0 bool[10]))
        gotoReturn _end_==[461073] _end_==[461073]
      }
      unknown call_tmp[567836] "expr temp" "maybe param" "maybe type" "temp"
      (567839 'move' call_tmp[567836](69571 call(69567 call (partial) hasLowBound _mt[232] r1[69387])))
      unknown call_tmp[567841] "expr temp" "maybe param" "maybe type" "temp"
      (567844 'move' call_tmp[567841](69590 call _cond_test call_tmp[567836]))
      if call_tmp[567841]
      {
        unknown call_tmp[567848] "expr temp" "maybe param" "maybe type" "temp"
        (567851 'move' call_tmp[567848](69573 call alignedLow _mt[232] r1[69387]))
        unknown call_tmp[567855] "expr temp" "maybe param" "maybe type" "temp"
        (567858 'move' call_tmp[567855](69577 call alignedLow _mt[232] r2[69396]))
        unknown call_tmp[567860] "expr temp" "maybe param" "maybe type" "temp"
        (567863 'move' call_tmp[567860](69580 call != call_tmp[567848] call_tmp[567855]))
        unknown call_tmp[567865] "expr temp" "maybe param" "maybe type" "temp"
        (567868 'move' call_tmp[567865](69585 call _cond_test call_tmp[567860]))
        if call_tmp[567865]
        {
          (461135 'move' ret[461075](461134 'coerce' 0 bool[10]))
          gotoReturn _end_==[461073] _end_==[461073]
        }
      }
      unknown call_tmp[567872] "expr temp" "maybe param" "maybe type" "temp"
      (567875 'move' call_tmp[567872](69600 call(69596 call (partial) hasHighBound _mt[232] r1[69387])))
      unknown call_tmp[567877] "expr temp" "maybe param" "maybe type" "temp"
      (567880 'move' call_tmp[567877](69619 call _cond_test call_tmp[567872]))
      if call_tmp[567877]
      {
        unknown call_tmp[567884] "expr temp" "maybe param" "maybe type" "temp"
        (567887 'move' call_tmp[567884](69602 call alignedHigh _mt[232] r1[69387]))
        unknown call_tmp[567891] "expr temp" "maybe param" "maybe type" "temp"
        (567894 'move' call_tmp[567891](69606 call alignedHigh _mt[232] r2[69396]))
        unknown call_tmp[567896] "expr temp" "maybe param" "maybe type" "temp"
        (567899 'move' call_tmp[567896](69609 call != call_tmp[567884] call_tmp[567891]))
        unknown call_tmp[567901] "expr temp" "maybe param" "maybe type" "temp"
        (567904 'move' call_tmp[567901](69614 call _cond_test call_tmp[567896]))
        if call_tmp[567901]
        {
          (461141 'move' ret[461075](461140 'coerce' 0 bool[10]))
          gotoReturn _end_==[461073] _end_==[461073]
        }
      }
      (461147 'move' ret[461075](461146 'coerce' 1 bool[10]))
      gotoReturn _end_==[461073] _end_==[461073]
    }
    label _end_==[461073]
    (461077 return ret[461075])
  }
  where {
    unknown call_tmp[567908] "expr temp" "maybe param" "maybe type" "temp"
    (567911 'move' call_tmp[567908](69401 call boundedType _mt[232] r1[69387]))
    unknown call_tmp[567915] "expr temp" "maybe param" "maybe type" "temp"
    (567918 'move' call_tmp[567915](69405 call boundedType _mt[232] r2[69396]))
    (69408 call == call_tmp[567908] call_tmp[567915])
  }
  { scopeless type
    bool[10]
  }
  function !=[69644](arg r1[69641]:range[66183](?), arg r2[69650]:range[66183](?)) : _unknown[43]
  {
    unknown ret[461153] "RVV" "temp"
    unknown call_tmp[567920] "expr temp" "maybe param" "maybe type" "temp"
    (567923 'move' call_tmp[567920](69655 call == r1[69641] r2[69650]))
    unknown call_tmp[567925] "expr temp" "maybe param" "maybe type" "temp"
    (567928 'move' call_tmp[567925](69657 call ! call_tmp[567920]))
    (461158 'move' ret[461153](461157 'deref' call_tmp[567925]))
    (461155 return ret[461153])
  }
  function ident[69673](arg r1[69670]:range[66183](?), arg r2[69679]:range[66183](?)) : _unknown[43]
  {
    unknown ret[461162] "RVV" "temp"
    unknown call_tmp[567932] "expr temp" "maybe param" "maybe type" "temp"
    (567935 'move' call_tmp[567932](69717 call _low _mt[232] r1[69670]))
    unknown call_tmp[567939] "expr temp" "maybe param" "maybe type" "temp"
    (567942 'move' call_tmp[567939](69721 call _low _mt[232] r2[69679]))
    unknown call_tmp[567944] "expr temp" "maybe param" "maybe type" "temp"
    (567947 'move' call_tmp[567944](69724 call != call_tmp[567932] call_tmp[567939]))
    unknown call_tmp[567949] "expr temp" "maybe param" "maybe type" "temp"
    (567952 'move' call_tmp[567949](69729 call _cond_test call_tmp[567944]))
    if call_tmp[567949]
    {
      (461167 'move' ret[461162](461166 'deref' 0))
      gotoReturn _end_ident[461160] _end_ident[461160]
    }
    unknown call_tmp[567956] "expr temp" "maybe param" "maybe type" "temp"
    (567959 'move' call_tmp[567956](69736 call _high _mt[232] r1[69670]))
    unknown call_tmp[567963] "expr temp" "maybe param" "maybe type" "temp"
    (567966 'move' call_tmp[567963](69740 call _high _mt[232] r2[69679]))
    unknown call_tmp[567968] "expr temp" "maybe param" "maybe type" "temp"
    (567971 'move' call_tmp[567968](69743 call != call_tmp[567956] call_tmp[567963]))
    unknown call_tmp[567973] "expr temp" "maybe param" "maybe type" "temp"
    (567976 'move' call_tmp[567973](69748 call _cond_test call_tmp[567968]))
    if call_tmp[567973]
    {
      (461172 'move' ret[461162](461171 'deref' 0))
      gotoReturn _end_ident[461160] _end_ident[461160]
    }
    unknown call_tmp[567980] "expr temp" "maybe param" "maybe type" "temp"
    (567983 'move' call_tmp[567980](69754 call stridable _mt[232] r1[69670]))
    unknown call_tmp[567985] "expr temp" "maybe param" "maybe type" "temp"
    (567988 'move' call_tmp[567985](69825 call _cond_test call_tmp[567980]))
    if call_tmp[567985]
    {
      unknown call_tmp[567992] "expr temp" "maybe param" "maybe type" "temp"
      (567995 'move' call_tmp[567992](69758 call stridable _mt[232] r2[69679]))
      unknown call_tmp[567997] "expr temp" "maybe param" "maybe type" "temp"
      (568000 'move' call_tmp[567997](69820 call _cond_test call_tmp[567992]))
      if call_tmp[567997]
      {
        unknown call_tmp[568004] "expr temp" "maybe param" "maybe type" "temp"
        (568007 'move' call_tmp[568004](69762 call _stride _mt[232] r1[69670]))
        unknown call_tmp[568011] "expr temp" "maybe param" "maybe type" "temp"
        (568014 'move' call_tmp[568011](69766 call _stride _mt[232] r2[69679]))
        unknown call_tmp[568016] "expr temp" "maybe param" "maybe type" "temp"
        (568019 'move' call_tmp[568016](69769 call != call_tmp[568004] call_tmp[568011]))
        unknown call_tmp[568021] "expr temp" "maybe param" "maybe type" "temp"
        (568024 'move' call_tmp[568021](69774 call _cond_test call_tmp[568016]))
        if call_tmp[568021]
        {
          (461177 'move' ret[461162](461176 'deref' 0))
          gotoReturn _end_ident[461160] _end_ident[461160]
        }
        unknown call_tmp[568028] "expr temp" "maybe param" "maybe type" "temp"
        (568031 'move' call_tmp[568028](69781 call _alignment _mt[232] r1[69670]))
        unknown call_tmp[568035] "expr temp" "maybe param" "maybe type" "temp"
        (568038 'move' call_tmp[568035](69785 call _alignment _mt[232] r2[69679]))
        unknown call_tmp[568040] "expr temp" "maybe param" "maybe type" "temp"
        (568043 'move' call_tmp[568040](69788 call != call_tmp[568028] call_tmp[568035]))
        unknown call_tmp[568045] "expr temp" "maybe param" "maybe type" "temp"
        (568048 'move' call_tmp[568045](69793 call _cond_test call_tmp[568040]))
        if call_tmp[568045]
        {
          (461182 'move' ret[461162](461181 'deref' 0))
          gotoReturn _end_ident[461160] _end_ident[461160]
        }
        unknown call_tmp[568052] "expr temp" "maybe param" "maybe type" "temp"
        (568055 'move' call_tmp[568052](69799 call _aligned _mt[232] r1[69670]))
        unknown call_tmp[568059] "expr temp" "maybe param" "maybe type" "temp"
        (568062 'move' call_tmp[568059](69803 call _aligned _mt[232] r2[69679]))
        unknown call_tmp[568064] "expr temp" "maybe param" "maybe type" "temp"
        (568067 'move' call_tmp[568064](69806 call != call_tmp[568052] call_tmp[568059]))
        unknown call_tmp[568069] "expr temp" "maybe param" "maybe type" "temp"
        (568072 'move' call_tmp[568069](69811 call _cond_test call_tmp[568064]))
        if call_tmp[568069]
        {
          (461187 'move' ret[461162](461186 'deref' 0))
          gotoReturn _end_ident[461160] _end_ident[461160]
        }
      }
      {
        (461192 'move' ret[461162](461191 'deref' 0))
        gotoReturn _end_ident[461160] _end_ident[461160]
      }
    }
    (461197 'move' ret[461162](461196 'deref' 1))
    label _end_ident[461160]
    (461164 return ret[461162])
  }
  where {
    unknown tmp[395280] "maybe param" "temp"
    unknown tmp[395301] "maybe param" "temp"
    unknown call_tmp[568076] "expr temp" "maybe param" "maybe type" "temp"
    (568079 'move' call_tmp[568076](69683 call idxType _mt[232] r1[69670]))
    unknown call_tmp[568083] "expr temp" "maybe param" "maybe type" "temp"
    (568086 'move' call_tmp[568083](69687 call idxType _mt[232] r2[69679]))
    (395312 'move' tmp[395301](69690 call == call_tmp[568076] call_tmp[568083]))
    unknown call_tmp[568088] "expr temp" "maybe param" "maybe type" "temp"
    (568091 'move' call_tmp[568088](395314 call _cond_invalid tmp[395301]))
    if call_tmp[568088]
    {
      (395317 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505532] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505533] "maybe param" "temp"
    unknown call_tmp[568093] "expr temp" "maybe param" "maybe type" "temp"
    (568096 'move' call_tmp[568093](395302 call isTrue tmp[395301]))
    (505538 'move' tmp[505533](505536 call _cond_test call_tmp[568093]))
    if tmp[505533]
    {
      unknown tmp[505540] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568100] "expr temp" "maybe param" "maybe type" "temp"
      (568103 'move' call_tmp[568100](69693 call boundedType _mt[232] r1[69670]))
      unknown call_tmp[568107] "expr temp" "maybe param" "maybe type" "temp"
      (568110 'move' call_tmp[568107](69697 call boundedType _mt[232] r2[69679]))
      unknown call_tmp[568112] "expr temp" "maybe param" "maybe type" "temp"
      (568115 'move' call_tmp[568112](69700 call == call_tmp[568100] call_tmp[568107]))
      (505542 'move' tmp[505540](395305 call isTrue call_tmp[568112]))
      (505547 'move' tmp[505532](505544 '_paramFoldLogical' tmp[505533] tmp[505540]))
    }
    {
      (505552 'move' tmp[505532](505549 '_paramFoldLogical' tmp[505533] 0))
    }
    (395291 'move' tmp[395280] tmp[505532])
    unknown call_tmp[568117] "expr temp" "maybe param" "maybe type" "temp"
    (568120 'move' call_tmp[568117](395293 call _cond_invalid tmp[395280]))
    if call_tmp[568117]
    {
      (395296 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505559] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505560] "maybe param" "temp"
    unknown call_tmp[568122] "expr temp" "maybe param" "maybe type" "temp"
    (568125 'move' call_tmp[568122](395281 call isTrue tmp[395280]))
    (505565 'move' tmp[505560](505563 call _cond_test call_tmp[568122]))
    if tmp[505560]
    {
      unknown tmp[505567] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568129] "expr temp" "maybe param" "maybe type" "temp"
      (568132 'move' call_tmp[568129](69705 call stridable _mt[232] r1[69670]))
      unknown call_tmp[568136] "expr temp" "maybe param" "maybe type" "temp"
      (568139 'move' call_tmp[568136](69709 call stridable _mt[232] r2[69679]))
      unknown call_tmp[568141] "expr temp" "maybe param" "maybe type" "temp"
      (568144 'move' call_tmp[568141](69712 call == call_tmp[568129] call_tmp[568136]))
      (505569 'move' tmp[505567](395284 call isTrue call_tmp[568141]))
      (505574 'move' tmp[505559](505571 '_paramFoldLogical' tmp[505560] tmp[505567]))
    }
    {
      (505579 'move' tmp[505559](505576 '_paramFoldLogical' tmp[505560] 0))
    }
    (691835 call _statementLevelSymbol tmp[505559])
  }
  function ident[69844](arg r1[69841]:range[66183](?), arg r2[69850]:range[66183](?)) param : _unknown[43] "no doc"
  {
    unknown ret[461201] "RVV" "param" "temp"
    (461206 'move' ret[461201](461205 'deref' 0))
    (461203 return ret[461201])
  }
  function range[66183](?).safeCast[69864](arg _mt[69869]:_MT[227], arg this[69866]:range[66183](?) :
  range[66183](?), arg t[69862]:_any[170](?)) : _unknown[43] "method" "no doc"
  {
    unknown ret[461210] "RVV" "temp"
    unknown tmp[69876] "insert auto destroy"
    (489683 'default init var' tmp[69876] t[69862])
    unknown call_tmp[568148] "expr temp" "maybe param" "maybe type" "temp"
    (568151 'move' call_tmp[568148](69881 call boundedType _mt[232] tmp[69876]))
    unknown call_tmp[568155] "expr temp" "maybe param" "maybe type" "temp"
    (568158 'move' call_tmp[568155](69885 call boundedType _mt[232] this[69866]))
    unknown call_tmp[568160] "expr temp" "maybe param" "maybe type" "temp"
    (568163 'move' call_tmp[568160](69888 call != call_tmp[568148] call_tmp[568155]))
    unknown call_tmp[568165] "expr temp" "maybe param" "maybe type" "temp"
    (568168 'move' call_tmp[568165](69941 call _cond_test call_tmp[568160]))
    if call_tmp[568165]
    {
      unknown call_tmp[568172] "expr temp" "maybe param" "maybe type" "temp"
      (568175 'move' call_tmp[568172](69909 call boundedType _mt[232] this[69866]))
      unknown call_tmp[568177] "expr temp" "maybe param" "maybe type" "temp"
      (568180 'move' call_tmp[568177](69913 call _cast string[24] call_tmp[568172]))
      unknown call_tmp[568184] "expr temp" "maybe param" "maybe type" "temp"
      (568187 'move' call_tmp[568184](69932 call boundedType _mt[232] tmp[69876]))
      unknown call_tmp[568189] "expr temp" "maybe param" "maybe type" "temp"
      (568192 'move' call_tmp[568189](69936 call _cast string[24] call_tmp[568184]))
      (69938 call compilerError "cannot cast range from " call_tmp[568177] " to " call_tmp[568189])
    }
    unknown call_tmp[568196] "expr temp" "maybe param" "maybe type" "temp"
    (568199 'move' call_tmp[568196](69946 call stridable _mt[232] tmp[69876]))
    unknown call_tmp[568201] "expr temp" "maybe param" "maybe type" "temp"
    (568204 'move' call_tmp[568201](70034 call _cond_test call_tmp[568196]))
    if call_tmp[568201]
    {
      unknown call_tmp[568208] "expr temp" "maybe param" "maybe type" "temp"
      (568211 'move' call_tmp[568208](69950 call _stride _mt[232] tmp[69876]))
      unknown call_tmp[568215] "expr temp" "maybe param" "maybe type" "temp"
      (568218 'move' call_tmp[568215](69954 call stride _mt[232] this[69866]))
      (69957 call = call_tmp[568208] call_tmp[568215])
      unknown call_tmp[568222] "expr temp" "maybe param" "maybe type" "temp"
      (568225 'move' call_tmp[568222](69962 call _alignment _mt[232] tmp[69876]))
      unknown call_tmp[568229] "expr temp" "maybe param" "maybe type" "temp"
      (568232 'move' call_tmp[568229](69967 call alignment _mt[232] this[69866]))
      unknown call_tmp[568234] "expr temp" "maybe param" "maybe type" "temp"
      (568237 'move' call_tmp[568234](69971 call chpl__idxToInt call_tmp[568229]))
      unknown call_tmp[568243] "expr temp" "maybe param" "maybe type" "temp"
      (568246 'move' call_tmp[568243](69978 call intIdxType _mt[232] tmp[69876]))
      unknown call_tmp[568248] "expr temp" "maybe param" "maybe type" "temp"
      (568251 'move' call_tmp[568248](69982 call(69972 call (partial) safeCast _mt[232] call_tmp[568234]) call_tmp[568243]))
      (69983 call = call_tmp[568222] call_tmp[568248])
      unknown call_tmp[568255] "expr temp" "maybe param" "maybe type" "temp"
      (568258 'move' call_tmp[568255](69987 call _aligned _mt[232] tmp[69876]))
      unknown call_tmp[568262] "expr temp" "maybe param" "maybe type" "temp"
      (568265 'move' call_tmp[568262](69991 call aligned _mt[232] this[69866]))
      (69994 call = call_tmp[568255] call_tmp[568262])
    }
    {
      unknown call_tmp[568269] "expr temp" "maybe param" "maybe type" "temp"
      (568272 'move' call_tmp[568269](69998 call stride _mt[232] this[69866]))
      unknown call_tmp[568274] "expr temp" "maybe param" "maybe type" "temp"
      (568277 'move' call_tmp[568274](70002 call != call_tmp[568269] 1))
      unknown call_tmp[568279] "expr temp" "maybe param" "maybe type" "temp"
      (568282 'move' call_tmp[568279](70030 call _cond_test call_tmp[568274]))
      if call_tmp[568279]
      {
        (70027 call safeCastCheckHalt module=[244] HaltWrappers[197622] "illegal safeCast from non-unit stride range to unstridable range")
      }
    }
    unknown call_tmp[568286] "expr temp" "maybe param" "maybe type" "temp"
    (568289 'move' call_tmp[568286](70040 call _low _mt[232] tmp[69876]))
    unknown call_tmp[568293] "expr temp" "maybe param" "maybe type" "temp"
    (568296 'move' call_tmp[568293](70044 call _low _mt[232] this[69866]))
    unknown call_tmp[568302] "expr temp" "maybe param" "maybe type" "temp"
    (568305 'move' call_tmp[568302](70051 call intIdxType _mt[232] tmp[69876]))
    unknown call_tmp[568307] "expr temp" "maybe param" "maybe type" "temp"
    (568310 'move' call_tmp[568307](70055 call(70047 call (partial) safeCast _mt[232] call_tmp[568293]) call_tmp[568302]))
    (70056 call = call_tmp[568286] call_tmp[568307])
    unknown call_tmp[568314] "expr temp" "maybe param" "maybe type" "temp"
    (568317 'move' call_tmp[568314](70060 call _high _mt[232] tmp[69876]))
    unknown call_tmp[568321] "expr temp" "maybe param" "maybe type" "temp"
    (568324 'move' call_tmp[568321](70064 call _high _mt[232] this[69866]))
    unknown call_tmp[568330] "expr temp" "maybe param" "maybe type" "temp"
    (568333 'move' call_tmp[568330](70071 call intIdxType _mt[232] tmp[69876]))
    unknown call_tmp[568335] "expr temp" "maybe param" "maybe type" "temp"
    (568338 'move' call_tmp[568335](70075 call(70067 call (partial) safeCast _mt[232] call_tmp[568321]) call_tmp[568330]))
    (70076 call = call_tmp[568314] call_tmp[568335])
    (461215 'move' ret[461210](461214 'deref' tmp[69876]))
    (461212 return ret[461210])
  }
  where {
    (69874 call isRangeType t[69862])
  }
  function _cast[70089](arg t[70087]:_any[170](?), arg r[70095]:range[66183](?)) : _unknown[43] "no doc"
  {
    unknown ret[461219] "RVV" "temp"
    unknown tmp[70103] "insert auto destroy"
    (489685 'default init var' tmp[70103] t[70087])
    unknown call_tmp[568342] "expr temp" "maybe param" "maybe type" "temp"
    (568345 'move' call_tmp[568342](70108 call boundedType _mt[232] tmp[70103]))
    unknown call_tmp[568349] "expr temp" "maybe param" "maybe type" "temp"
    (568352 'move' call_tmp[568349](70112 call boundedType _mt[232] r[70095]))
    unknown call_tmp[568354] "expr temp" "maybe param" "maybe type" "temp"
    (568357 'move' call_tmp[568354](70115 call != call_tmp[568342] call_tmp[568349]))
    unknown call_tmp[568359] "expr temp" "maybe param" "maybe type" "temp"
    (568362 'move' call_tmp[568359](70138 call _cond_test call_tmp[568354]))
    if call_tmp[568359]
    {
      unknown call_tmp[568366] "expr temp" "maybe param" "maybe type" "temp"
      (568369 'move' call_tmp[568366](70121 call boundedType _mt[232] r[70095]))
      unknown call_tmp[568371] "expr temp" "maybe param" "maybe type" "temp"
      (568374 'move' call_tmp[568371](70125 call _cast string[24] call_tmp[568366]))
      unknown call_tmp[568378] "expr temp" "maybe param" "maybe type" "temp"
      (568381 'move' call_tmp[568378](70129 call boundedType _mt[232] tmp[70103]))
      unknown call_tmp[568383] "expr temp" "maybe param" "maybe type" "temp"
      (568386 'move' call_tmp[568383](70133 call _cast string[24] call_tmp[568378]))
      (70135 call compilerError "cannot cast range from " call_tmp[568371] " to " call_tmp[568383])
    }
    unknown call_tmp[568390] "expr temp" "maybe param" "maybe type" "temp"
    (568393 'move' call_tmp[568390](70143 call stridable _mt[232] tmp[70103]))
    unknown call_tmp[568395] "expr temp" "maybe param" "maybe type" "temp"
    (568398 'move' call_tmp[568395](70186 call _cond_test call_tmp[568390]))
    if call_tmp[568395]
    {
      unknown call_tmp[568402] "expr temp" "maybe param" "maybe type" "temp"
      (568405 'move' call_tmp[568402](70147 call _stride _mt[232] tmp[70103]))
      unknown call_tmp[568409] "expr temp" "maybe param" "maybe type" "temp"
      (568412 'move' call_tmp[568409](70151 call _stride _mt[232] r[70095]))
      (70154 call = call_tmp[568402] call_tmp[568409])
      unknown call_tmp[568416] "expr temp" "maybe param" "maybe type" "temp"
      (568419 'move' call_tmp[568416](70159 call _alignment _mt[232] tmp[70103]))
      unknown call_tmp[568423] "expr temp" "maybe param" "maybe type" "temp"
      (568426 'move' call_tmp[568423](70167 call intIdxType _mt[232] tmp[70103]))
      unknown call_tmp[568430] "expr temp" "maybe param" "maybe type" "temp"
      (568433 'move' call_tmp[568430](70163 call _alignment _mt[232] r[70095]))
      unknown call_tmp[568435] "expr temp" "maybe param" "maybe type" "temp"
      (568438 'move' call_tmp[568435](70170 call _cast call_tmp[568423] call_tmp[568430]))
      (70172 call = call_tmp[568416] call_tmp[568435])
      unknown call_tmp[568442] "expr temp" "maybe param" "maybe type" "temp"
      (568445 'move' call_tmp[568442](70176 call _aligned _mt[232] tmp[70103]))
      unknown call_tmp[568449] "expr temp" "maybe param" "maybe type" "temp"
      (568452 'move' call_tmp[568449](70180 call _aligned _mt[232] r[70095]))
      (70183 call = call_tmp[568442] call_tmp[568449])
    }
    unknown call_tmp[568456] "expr temp" "maybe param" "maybe type" "temp"
    (568459 'move' call_tmp[568456](70191 call _low _mt[232] tmp[70103]))
    unknown call_tmp[568463] "expr temp" "maybe param" "maybe type" "temp"
    (568466 'move' call_tmp[568463](70199 call intIdxType _mt[232] tmp[70103]))
    unknown call_tmp[568470] "expr temp" "maybe param" "maybe type" "temp"
    (568473 'move' call_tmp[568470](70195 call low _mt[232] r[70095]))
    unknown call_tmp[568475] "expr temp" "maybe param" "maybe type" "temp"
    (568478 'move' call_tmp[568475](70202 call _cast call_tmp[568463] call_tmp[568470]))
    (70204 call = call_tmp[568456] call_tmp[568475])
    unknown call_tmp[568482] "expr temp" "maybe param" "maybe type" "temp"
    (568485 'move' call_tmp[568482](70208 call _high _mt[232] tmp[70103]))
    unknown call_tmp[568489] "expr temp" "maybe param" "maybe type" "temp"
    (568492 'move' call_tmp[568489](70216 call intIdxType _mt[232] tmp[70103]))
    unknown call_tmp[568496] "expr temp" "maybe param" "maybe type" "temp"
    (568499 'move' call_tmp[568496](70212 call high _mt[232] r[70095]))
    unknown call_tmp[568501] "expr temp" "maybe param" "maybe type" "temp"
    (568504 'move' call_tmp[568501](70219 call _cast call_tmp[568489] call_tmp[568496]))
    (70221 call = call_tmp[568482] call_tmp[568501])
    (461224 'move' ret[461219](461223 'deref' tmp[70103]))
    (461221 return ret[461219])
  }
  where {
    (70101 call isRangeType t[70087])
  }
  function range[66183](?).boundsCheck[70245](arg _mt[70250]:_MT[227], arg this[70247]:range[66183](?) :
  range[66183](?), arg other[70242]:range[66183](?)) : _unknown[43] "inline" "method"
  {
    unknown ret[461228] "RVV" "temp"
    unknown tmp[395322] "maybe param" "temp"
    (395333 'move' tmp[395322](70264 call(70260 call (partial) isAmbiguous _mt[232] this[70247])))
    unknown call_tmp[568508] "expr temp" "maybe param" "maybe type" "temp"
    (568511 'move' call_tmp[568508](395335 call _cond_invalid tmp[395322]))
    if call_tmp[568508]
    {
      (395338 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[505586] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505587] "maybe param" "temp"
    unknown call_tmp[568513] "expr temp" "maybe param" "maybe type" "temp"
    (568516 'move' call_tmp[568513](395323 call isTrue tmp[395322]))
    (505592 'move' tmp[505587](505590 call _cond_test call_tmp[568513]))
    if tmp[505587]
    {
      (505597 'move' tmp[505586](505594 '_paramFoldLogical' tmp[505587] 1))
    }
    {
      unknown tmp[505599] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568520] "expr temp" "maybe param" "maybe type" "temp"
      (568523 'move' call_tmp[568520](70270 call(70266 call (partial) isAmbiguous _mt[232] other[70242])))
      (505601 'move' tmp[505599](395327 call isTrue call_tmp[568520]))
      (505606 'move' tmp[505586](505603 '_paramFoldLogical' tmp[505587] tmp[505599]))
    }
    unknown call_tmp[568525] "expr temp" "maybe param" "maybe type" "temp"
    (568528 'move' call_tmp[568525](70276 call _cond_test tmp[505586]))
    if call_tmp[568525]
    {
      (461233 'move' ret[461228](461232 'deref' 0))
      gotoReturn _end_boundsCheck[461226] _end_boundsCheck[461226]
    }
    (461238 'move' ret[461228](461237 'deref' 1))
    label _end_boundsCheck[461226]
    (461230 return ret[461228])
  }
  where {
    unknown call_tmp[568530] "expr temp" "maybe param" "maybe type" "temp"
    (568533 'move' call_tmp[568530](431010 'query' other[70242] 2))
    (70257 call == call_tmp[568530] boundedNone[66085])
  }
  function range[66183](?).boundsCheck[70303](arg _mt[70308]:_MT[227], arg this[70305]:range[66183](?) :
  range[66183](?), arg other[70300]:range[66183](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[461242] "RVV" "temp"
    unknown tmp[395343] "maybe param" "temp"
    (395354 'move' tmp[395343](70315 call(70311 call (partial) isAmbiguous _mt[232] this[70305])))
    unknown call_tmp[568537] "expr temp" "maybe param" "maybe type" "temp"
    (568540 'move' call_tmp[568537](395356 call _cond_invalid tmp[395343]))
    if call_tmp[568537]
    {
      (395359 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[505613] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505614] "maybe param" "temp"
    unknown call_tmp[568542] "expr temp" "maybe param" "maybe type" "temp"
    (568545 'move' call_tmp[568542](395344 call isTrue tmp[395343]))
    (505619 'move' tmp[505614](505617 call _cond_test call_tmp[568542]))
    if tmp[505614]
    {
      (505624 'move' tmp[505613](505621 '_paramFoldLogical' tmp[505614] 1))
    }
    {
      unknown tmp[505626] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568549] "expr temp" "maybe param" "maybe type" "temp"
      (568552 'move' call_tmp[568549](70321 call(70317 call (partial) isAmbiguous _mt[232] other[70300])))
      (505628 'move' tmp[505626](395348 call isTrue call_tmp[568549]))
      (505633 'move' tmp[505613](505630 '_paramFoldLogical' tmp[505614] tmp[505626]))
    }
    unknown call_tmp[568554] "expr temp" "maybe param" "maybe type" "temp"
    (568557 'move' call_tmp[568554](70327 call _cond_test tmp[505613]))
    if call_tmp[568554]
    {
      (461247 'move' ret[461242](461246 'deref' 0))
      gotoReturn _end_boundsCheck[461240] _end_boundsCheck[461240]
    }
    unknown tmp[395364] "maybe param" "temp"
    (395375 'move' tmp[395364](431028 'query' other[70300] 3))
    unknown call_tmp[568559] "expr temp" "maybe param" "maybe type" "temp"
    (568562 'move' call_tmp[568559](395377 call _cond_invalid tmp[395364]))
    if call_tmp[568559]
    {
      (395380 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown boundedOther[70386] "insert auto destroy"
    unknown tmp[505640] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505641] "maybe param" "temp"
    unknown call_tmp[568564] "expr temp" "maybe param" "maybe type" "temp"
    (568567 'move' call_tmp[568564](395365 call isTrue tmp[395364]))
    (505646 'move' tmp[505641](505644 call _cond_test call_tmp[568564]))
    if tmp[505641]
    {
      (505651 'move' tmp[505640](505648 '_paramFoldLogical' tmp[505641] 1))
    }
    {
      unknown tmp[505653] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568571] "expr temp" "maybe param" "maybe type" "temp"
      (568574 'move' call_tmp[568571](70342 call stridable _mt[232] this[70305]))
      (505655 'move' tmp[505653](395369 call isTrue call_tmp[568571]))
      (505660 'move' tmp[505640](505657 '_paramFoldLogical' tmp[505641] tmp[505653]))
    }
    unknown tmp[505667] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505668] "maybe param" "temp"
    unknown call_tmp[568578] "expr temp" "maybe param" "maybe type" "temp"
    (568581 'move' call_tmp[568578](70352 call(70348 call (partial) hasLowBound _mt[232] other[70300])))
    (505673 'move' tmp[505668](505671 call _cond_test call_tmp[568578]))
    if tmp[505668]
    {
      unknown tmp[505675] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (505677 'move' tmp[505675](70354 call low _mt[232] other[70300]))
      (505682 'move' tmp[505667](505679 '_paramFoldLogical' tmp[505668] tmp[505675]))
    }
    {
      unknown tmp[505684] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (505686 'move' tmp[505684](341819 call low _mt[232] this[70305]))
      (505691 'move' tmp[505667](505688 '_paramFoldLogical' tmp[505668] tmp[505684]))
    }
    unknown tmp[505698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505699] "maybe param" "temp"
    unknown call_tmp[568589] "expr temp" "maybe param" "maybe type" "temp"
    (568592 'move' call_tmp[568589](70366 call(70362 call (partial) hasHighBound _mt[232] other[70300])))
    (505704 'move' tmp[505699](505702 call _cond_test call_tmp[568589]))
    if tmp[505699]
    {
      unknown tmp[505706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (505708 'move' tmp[505706](70368 call high _mt[232] other[70300]))
      (505713 'move' tmp[505698](505710 '_paramFoldLogical' tmp[505699] tmp[505706]))
    }
    {
      unknown tmp[505715] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (505717 'move' tmp[505715](341825 call high _mt[232] this[70305]))
      (505722 'move' tmp[505698](505719 '_paramFoldLogical' tmp[505699] tmp[505715]))
    }
    unknown call_tmp[568600] "expr temp" "maybe param" "maybe type" "temp"
    (568603 'move' call_tmp[568600](341810 call idxType _mt[232] this[70305]))
    unknown call_tmp[568607] "expr temp" "maybe param" "maybe type" "temp"
    (568610 'move' call_tmp[568607](70376 call stride _mt[232] other[70300]))
    unknown call_tmp[568614] "expr temp" "maybe param" "maybe type" "temp"
    (568617 'move' call_tmp[568614](70380 call alignment _mt[232] other[70300]))
    unknown call_tmp[568619] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (568622 'move' call_tmp[568619](691343 'new' range[66183](?) call_tmp[568600] bounded[66079] tmp[505640] tmp[505667] tmp[505698] call_tmp[568607] call_tmp[568614] 1))
    (489687 'init var' boundedOther[70386] call_tmp[568619])
    unknown tmp[395385] "maybe param" "temp"
    unknown call_tmp[568626] "expr temp" "maybe param" "maybe type" "temp"
    (568629 'move' call_tmp[568626](70390 call length _mt[232] boundedOther[70386]))
    (395396 'move' tmp[395385](70394 call == call_tmp[568626] 0))
    unknown call_tmp[568631] "expr temp" "maybe param" "maybe type" "temp"
    (568634 'move' call_tmp[568631](395398 call _cond_invalid tmp[395385]))
    if call_tmp[568631]
    {
      (395401 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[505729] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505730] "maybe param" "temp"
    unknown call_tmp[568636] "expr temp" "maybe param" "maybe type" "temp"
    (568639 'move' call_tmp[568636](395386 call isTrue tmp[395385]))
    (505735 'move' tmp[505730](505733 call _cond_test call_tmp[568636]))
    if tmp[505730]
    {
      (505740 'move' tmp[505729](505737 '_paramFoldLogical' tmp[505730] 1))
    }
    {
      unknown tmp[505742] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568643] "expr temp" "maybe param" "maybe type" "temp"
      (568646 'move' call_tmp[568643](70399 call(341832 call (partial) contains _mt[232] this[70305]) boundedOther[70386]))
      (505744 'move' tmp[505742](395390 call isTrue call_tmp[568643]))
      (505749 'move' tmp[505729](505746 '_paramFoldLogical' tmp[505730] tmp[505742]))
    }
    (461252 'move' ret[461242](461251 'deref' tmp[505729]))
    label _end_boundsCheck[461240]
    (461244 return ret[461242])
  }
  function range[66183](?).boundsCheck[70413](arg _mt[70418]:_MT[227], arg this[70415]:range[66183](?) :
  range[66183](?), arg other[70410] :
  (341838 call idxType _mt[232] this[70415])) : _unknown[43] "inline" "method"
  {
    unknown ret[461256] "RVV" "temp"
    unknown call_tmp[568652] "expr temp" "maybe param" "maybe type" "temp"
    (568655 'move' call_tmp[568652](70423 call(341842 call (partial) contains _mt[232] this[70415]) other[70410]))
    (461261 'move' ret[461256](461260 'deref' call_tmp[568652]))
    (461258 return ret[461256])
  }
  function range[66183](?).alignLow[70432](arg _mt[70437]:_MT[227], ref arg this[70434]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method" "no doc"
  {
    unknown ret[461265] "RVV" "temp"
    unknown tmp[395406] "maybe param" "temp"
    (395417 'move' tmp[395406] 1)
    unknown call_tmp[568657] "expr temp" "maybe param" "maybe type" "temp"
    (568660 'move' call_tmp[568657](395419 call _cond_invalid tmp[395406]))
    if call_tmp[568657]
    {
      (395422 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505756] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505757] "maybe param" "temp"
    unknown call_tmp[568662] "expr temp" "maybe param" "maybe type" "temp"
    (568665 'move' call_tmp[568662](395407 call isTrue tmp[395406]))
    (505762 'move' tmp[505757](505760 call _cond_test call_tmp[568662]))
    if tmp[505757]
    {
      unknown tmp[505764] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568669] "expr temp" "maybe param" "maybe type" "temp"
      (568672 'move' call_tmp[568669](70445 call(70441 call (partial) isAmbiguous _mt[232] this[70434])))
      (505766 'move' tmp[505764](395410 call isTrue call_tmp[568669]))
      (505771 'move' tmp[505756](505768 '_paramFoldLogical' tmp[505757] tmp[505764]))
    }
    {
      (505776 'move' tmp[505756](505773 '_paramFoldLogical' tmp[505757] 0))
    }
    unknown call_tmp[568674] "expr temp" "maybe param" "maybe type" "temp"
    (568677 'move' call_tmp[568674](70471 call _cond_test tmp[505756]))
    if call_tmp[568674]
    {
      (70469 call boundsCheckHalt module=[244] HaltWrappers[197622] "alignLow -- Cannot be applied to a range with ambiguous alignment.")
    }
    unknown call_tmp[568681] "expr temp" "maybe param" "maybe type" "temp"
    (568684 'move' call_tmp[568681](341851 call stridable _mt[232] this[70434]))
    unknown call_tmp[568686] "expr temp" "maybe param" "maybe type" "temp"
    (568689 'move' call_tmp[568686](70486 call _cond_test call_tmp[568681]))
    if call_tmp[568686]
    {
      unknown call_tmp[568693] "expr temp" "maybe param" "maybe type" "temp"
      (568696 'move' call_tmp[568693](341856 call _low _mt[232] this[70434]))
      unknown call_tmp[568700] "expr temp" "maybe param" "maybe type" "temp"
      (568703 'move' call_tmp[568700](70480 call alignedLowAsInt _mt[232] this[70434]))
      (70483 call = call_tmp[568693] call_tmp[568700])
    }
    (461270 'move' ret[461265](461269 'deref' this[70434]))
    (461267 return ret[461265])
  }
  function range[66183](?).alignHigh[70499](arg _mt[70504]:_MT[227], ref arg this[70501]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method" "no doc"
  {
    unknown ret[461274] "RVV" "temp"
    unknown tmp[395427] "maybe param" "temp"
    (395438 'move' tmp[395427] 1)
    unknown call_tmp[568705] "expr temp" "maybe param" "maybe type" "temp"
    (568708 'move' call_tmp[568705](395440 call _cond_invalid tmp[395427]))
    if call_tmp[568705]
    {
      (395443 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505783] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505784] "maybe param" "temp"
    unknown call_tmp[568710] "expr temp" "maybe param" "maybe type" "temp"
    (568713 'move' call_tmp[568710](395428 call isTrue tmp[395427]))
    (505789 'move' tmp[505784](505787 call _cond_test call_tmp[568710]))
    if tmp[505784]
    {
      unknown tmp[505791] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568717] "expr temp" "maybe param" "maybe type" "temp"
      (568720 'move' call_tmp[568717](70512 call(70508 call (partial) isAmbiguous _mt[232] this[70501])))
      (505793 'move' tmp[505791](395431 call isTrue call_tmp[568717]))
      (505798 'move' tmp[505783](505795 '_paramFoldLogical' tmp[505784] tmp[505791]))
    }
    {
      (505803 'move' tmp[505783](505800 '_paramFoldLogical' tmp[505784] 0))
    }
    unknown call_tmp[568722] "expr temp" "maybe param" "maybe type" "temp"
    (568725 'move' call_tmp[568722](70538 call _cond_test tmp[505783]))
    if call_tmp[568722]
    {
      (70536 call boundsCheckHalt module=[244] HaltWrappers[197622] "alignHigh -- Cannot be applied to a range with ambiguous alignment.")
    }
    unknown call_tmp[568729] "expr temp" "maybe param" "maybe type" "temp"
    (568732 'move' call_tmp[568729](341866 call stridable _mt[232] this[70501]))
    unknown call_tmp[568734] "expr temp" "maybe param" "maybe type" "temp"
    (568737 'move' call_tmp[568734](70553 call _cond_test call_tmp[568729]))
    if call_tmp[568734]
    {
      unknown call_tmp[568741] "expr temp" "maybe param" "maybe type" "temp"
      (568744 'move' call_tmp[568741](341871 call _high _mt[232] this[70501]))
      unknown call_tmp[568748] "expr temp" "maybe param" "maybe type" "temp"
      (568751 'move' call_tmp[568748](70547 call alignedHighAsInt _mt[232] this[70501]))
      (70550 call = call_tmp[568741] call_tmp[568748])
    }
    (461279 'move' ret[461274](461278 'deref' this[70501]))
    (461276 return ret[461274])
  }
  function range[66183](?).indexOrder[70570](arg _mt[70575]:_MT[227], arg this[70572]:range[66183](?) :
  range[66183](?), arg ind[70567] :
  (341878 call idxType _mt[232] this[70572])) : _unknown[43] "method"
  {
    unknown ret[461283] "RVV" "temp"
    unknown tmp[395448] "maybe param" "temp"
    (395459 'move' tmp[395448] 1)
    unknown call_tmp[568755] "expr temp" "maybe param" "maybe type" "temp"
    (568758 'move' call_tmp[568755](395461 call _cond_invalid tmp[395448]))
    if call_tmp[568755]
    {
      (395464 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505810] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505811] "maybe param" "temp"
    unknown call_tmp[568760] "expr temp" "maybe param" "maybe type" "temp"
    (568763 'move' call_tmp[568760](395449 call isTrue tmp[395448]))
    (505816 'move' tmp[505811](505814 call _cond_test call_tmp[568760]))
    if tmp[505811]
    {
      unknown tmp[505818] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[568767] "expr temp" "maybe param" "maybe type" "temp"
      (568770 'move' call_tmp[568767](70583 call(70579 call (partial) isAmbiguous _mt[232] this[70572])))
      (505820 'move' tmp[505818](395452 call isTrue call_tmp[568767]))
      (505825 'move' tmp[505810](505822 '_paramFoldLogical' tmp[505811] tmp[505818]))
    }
    {
      (505830 'move' tmp[505810](505827 '_paramFoldLogical' tmp[505811] 0))
    }
    unknown call_tmp[568772] "expr temp" "maybe param" "maybe type" "temp"
    (568775 'move' call_tmp[568772](70609 call _cond_test tmp[505810]))
    if call_tmp[568772]
    {
      (70607 call boundsCheckHalt module=[244] HaltWrappers[197622] "indexOrder -- Undefined on a range with ambiguous alignment.")
    }
    unknown call_tmp[568779] "expr temp" "maybe param" "maybe type" "temp"
    (568782 'move' call_tmp[568779](70618 call(341885 call (partial) contains _mt[232] this[70572]) ind[70567]))
    unknown call_tmp[568784] "expr temp" "maybe param" "maybe type" "temp"
    (568787 'move' call_tmp[568784](70619 call ! call_tmp[568779]))
    unknown call_tmp[568789] "expr temp" "maybe param" "maybe type" "temp"
    (568792 'move' call_tmp[568789](70629 call _cond_test call_tmp[568784]))
    if call_tmp[568789]
    {
      unknown call_tmp[568796] "expr temp" "maybe param" "maybe type" "temp"
      (568799 'move' call_tmp[568796](341890 call intIdxType _mt[232] this[70572]))
      unknown call_tmp[568801] "expr temp" "maybe param" "maybe type" "temp"
      (568804 'move' call_tmp[568801](70622 call - 1))
      unknown call_tmp[568806] "expr temp" "maybe param" "maybe type" "temp"
      (568809 'move' call_tmp[568806](70625 call _cast call_tmp[568796] call_tmp[568801]))
      (461288 'move' ret[461283](461287 'deref' call_tmp[568806]))
      gotoReturn _end_indexOrder[461281] _end_indexOrder[461281]
    }
    unknown call_tmp[568813] "expr temp" "maybe param" "maybe type" "temp"
    (568816 'move' call_tmp[568813](341895 call stridable _mt[232] this[70572]))
    unknown call_tmp[568818] "expr temp" "maybe param" "maybe type" "temp"
    (568821 'move' call_tmp[568818](70635 call ! call_tmp[568813]))
    unknown call_tmp[568823] "expr temp" "maybe param" "maybe type" "temp"
    (568826 'move' call_tmp[568823](70699 call _cond_test call_tmp[568818]))
    if call_tmp[568823]
    {
      unknown call_tmp[568830] "expr temp" "maybe param" "maybe type" "temp"
      (568833 'move' call_tmp[568830](70642 call(70638 call (partial) hasLowBound _mt[232] this[70572])))
      unknown call_tmp[568835] "expr temp" "maybe param" "maybe type" "temp"
      (568838 'move' call_tmp[568835](70652 call _cond_test call_tmp[568830]))
      if call_tmp[568835]
      {
        unknown call_tmp[568840] "expr temp" "maybe param" "maybe type" "temp"
        (568843 'move' call_tmp[568840](70646 call chpl__idxToInt ind[70567]))
        unknown call_tmp[568847] "expr temp" "maybe param" "maybe type" "temp"
        (568850 'move' call_tmp[568847](341902 call _low _mt[232] this[70572]))
        unknown call_tmp[568852] "expr temp" "maybe param" "maybe type" "temp"
        (568855 'move' call_tmp[568852](70648 call - call_tmp[568840] call_tmp[568847]))
        (461293 'move' ret[461283](461292 'deref' call_tmp[568852]))
        gotoReturn _end_indexOrder[461281] _end_indexOrder[461281]
      }
    }
    {
      unknown call_tmp[568859] "expr temp" "maybe param" "maybe type" "temp"
      (568862 'move' call_tmp[568859](70665 call(70661 call (partial) hasFirst _mt[232] this[70572])))
      unknown call_tmp[568864] "expr temp" "maybe param" "maybe type" "temp"
      (568867 'move' call_tmp[568864](70693 call _cond_test call_tmp[568859]))
      if call_tmp[568864]
      {
        unknown call_tmp[568871] "expr temp" "maybe param" "maybe type" "temp"
        (568874 'move' call_tmp[568871](341922 call intIdxType _mt[232] this[70572]))
        unknown call_tmp[568878] "expr temp" "maybe param" "maybe type" "temp"
        (568881 'move' call_tmp[568878](341908 call strType _mt[232] this[70572]))
        unknown call_tmp[568883] "expr temp" "maybe param" "maybe type" "temp"
        (568886 'move' call_tmp[568883](70669 call chpl__idxToInt ind[70567]))
        unknown call_tmp[568888] "expr temp" "maybe param" "maybe type" "temp"
        (568891 'move' call_tmp[568888](70671 call _cast call_tmp[568878] call_tmp[568883]))
        unknown call_tmp[568895] "expr temp" "maybe param" "maybe type" "temp"
        (568898 'move' call_tmp[568895](341913 call strType _mt[232] this[70572]))
        unknown call_tmp[568902] "expr temp" "maybe param" "maybe type" "temp"
        (568905 'move' call_tmp[568902](70675 call first _mt[232] this[70572]))
        unknown call_tmp[568907] "expr temp" "maybe param" "maybe type" "temp"
        (568910 'move' call_tmp[568907](70679 call chpl__idxToInt call_tmp[568902]))
        unknown call_tmp[568912] "expr temp" "maybe param" "maybe type" "temp"
        (568915 'move' call_tmp[568912](70681 call _cast call_tmp[568895] call_tmp[568907]))
        unknown call_tmp[568917] "expr temp" "maybe param" "maybe type" "temp"
        (568920 'move' call_tmp[568917](70683 call - call_tmp[568888] call_tmp[568912]))
        unknown call_tmp[568924] "expr temp" "maybe param" "maybe type" "temp"
        (568927 'move' call_tmp[568924](341918 call _stride _mt[232] this[70572]))
        unknown call_tmp[568929] "expr temp" "maybe param" "maybe type" "temp"
        (568932 'move' call_tmp[568929](70686 call / call_tmp[568917] call_tmp[568924]))
        unknown call_tmp[568934] "expr temp" "maybe param" "maybe type" "temp"
        (568937 'move' call_tmp[568934](70689 call _cast call_tmp[568871] call_tmp[568929]))
        (461298 'move' ret[461283](461297 'deref' call_tmp[568934]))
        gotoReturn _end_indexOrder[461281] _end_indexOrder[461281]
      }
    }
    unknown call_tmp[568941] "expr temp" "maybe param" "maybe type" "temp"
    (568944 'move' call_tmp[568941](341926 call intIdxType _mt[232] this[70572]))
    unknown call_tmp[568946] "expr temp" "maybe param" "maybe type" "temp"
    (568949 'move' call_tmp[568946](70704 call - 1))
    unknown call_tmp[568951] "expr temp" "maybe param" "maybe type" "temp"
    (568954 'move' call_tmp[568951](70707 call _cast call_tmp[568941] call_tmp[568946]))
    (461303 'move' ret[461283](461302 'deref' call_tmp[568951]))
    label _end_indexOrder[461281]
    (461285 return ret[461283])
  }
  function range[66183](?).orderToIndex[70720](arg _mt[70725]:_MT[227], arg this[70722]:range[66183](?) :
  range[66183](?), arg ord[70717]:integral[188](?)) : _unknown[43] "method"
  {
    unknown ret[461307] "RVV" "temp"
    unknown call_tmp[568956] "expr temp" "maybe param" "maybe type" "temp"
    (568959 'move' call_tmp[568956](70908 call _cond_test 1))
    if call_tmp[568956]
    {
      unknown call_tmp[568963] "expr temp" "maybe param" "maybe type" "temp"
      (568966 'move' call_tmp[568963](70731 call(341937 call (partial) hasFirst _mt[232] this[70722])))
      unknown call_tmp[568968] "expr temp" "maybe param" "maybe type" "temp"
      (568971 'move' call_tmp[568968](70732 call ! call_tmp[568963]))
      unknown call_tmp[568973] "expr temp" "maybe param" "maybe type" "temp"
      (568976 'move' call_tmp[568973](70757 call _cond_test call_tmp[568968]))
      if call_tmp[568973]
      {
        (70755 call boundsCheckHalt module=[244] HaltWrappers[197622] "invoking orderToIndex on a range that has no first index")
      }
      unknown call_tmp[568980] "expr temp" "maybe param" "maybe type" "temp"
      (568983 'move' call_tmp[568980](70765 call(341942 call (partial) isAmbiguous _mt[232] this[70722])))
      unknown call_tmp[568985] "expr temp" "maybe param" "maybe type" "temp"
      (568988 'move' call_tmp[568985](70789 call _cond_test call_tmp[568980]))
      if call_tmp[568985]
      {
        (70787 call boundsCheckHalt module=[244] HaltWrappers[197622] "invoking orderToIndex on a range that is ambiguously aligned")
      }
      unknown call_tmp[568990] "expr temp" "maybe param" "maybe type" "temp"
      (568993 'move' call_tmp[568990](70796 call < ord[70717] 0))
      unknown call_tmp[568995] "expr temp" "maybe param" "maybe type" "temp"
      (568998 'move' call_tmp[568995](70829 call _cond_test call_tmp[568990]))
      if call_tmp[568995]
      {
        unknown call_tmp[569000] "expr temp" "maybe param" "maybe type" "temp"
        (569003 'move' call_tmp[569000](70822 call _cast string[24] ord[70717]))
        unknown call_tmp[569005] "expr temp" "maybe param" "maybe type" "temp"
        (569008 'move' call_tmp[569005](70824 call + "invoking orderToIndex on a negative integer: " call_tmp[569000]))
        (70827 call boundsCheckHalt module=[244] HaltWrappers[197622] call_tmp[569005])
      }
      unknown tmp[395469] "maybe param" "temp"
      (395480 'move' tmp[395469](70837 call isBoundedRange this[70722]))
      unknown call_tmp[569010] "expr temp" "maybe param" "maybe type" "temp"
      (569013 'move' call_tmp[569010](395482 call _cond_invalid tmp[395469]))
      if call_tmp[569010]
      {
        (395485 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[505837] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[505838] "maybe param" "temp"
      unknown call_tmp[569015] "expr temp" "maybe param" "maybe type" "temp"
      (569018 'move' call_tmp[569015](395470 call isTrue tmp[395469]))
      (505843 'move' tmp[505838](505841 call _cond_test call_tmp[569015]))
      if tmp[505838]
      {
        unknown tmp[505845] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[569022] "expr temp" "maybe param" "maybe type" "temp"
        (569025 'move' call_tmp[569022](70840 call length _mt[232] this[70722]))
        unknown call_tmp[569027] "expr temp" "maybe param" "maybe type" "temp"
        (569030 'move' call_tmp[569027](70843 call >= ord[70717] call_tmp[569022]))
        (505847 'move' tmp[505845](395473 call isTrue call_tmp[569027]))
        (505852 'move' tmp[505837](505849 '_paramFoldLogical' tmp[505838] tmp[505845]))
      }
      {
        (505857 'move' tmp[505837](505854 '_paramFoldLogical' tmp[505838] 0))
      }
      unknown call_tmp[569032] "expr temp" "maybe param" "maybe type" "temp"
      (569035 'move' call_tmp[569032](70903 call _cond_test tmp[505837]))
      if call_tmp[569032]
      {
        unknown call_tmp[569037] "expr temp" "maybe param" "maybe type" "temp"
        (569040 'move' call_tmp[569037](70869 call _cast string[24] ord[70717]))
        unknown call_tmp[569042] "expr temp" "maybe param" "maybe type" "temp"
        (569045 'move' call_tmp[569042](70871 call + "invoking orderToIndex on an integer " call_tmp[569037]))
        unknown call_tmp[569047] "expr temp" "maybe param" "maybe type" "temp"
        (569050 'move' call_tmp[569047](70889 call + call_tmp[569042] " that is larger than the range's number of indices "))
        unknown call_tmp[569054] "expr temp" "maybe param" "maybe type" "temp"
        (569057 'move' call_tmp[569054](70892 call length _mt[232] this[70722]))
        unknown call_tmp[569059] "expr temp" "maybe param" "maybe type" "temp"
        (569062 'move' call_tmp[569059](70896 call _cast string[24] call_tmp[569054]))
        unknown call_tmp[569064] "expr temp" "maybe param" "maybe type" "temp"
        (569067 'move' call_tmp[569064](70898 call + call_tmp[569047] call_tmp[569059]))
        (70901 call boundsCheckHalt module=[244] HaltWrappers[197622] call_tmp[569064])
      }
    }
    unknown call_tmp[569073] "expr temp" "maybe param" "maybe type" "temp"
    (569076 'move' call_tmp[569073](70916 call firstAsInt _mt[232] this[70722]))
    unknown call_tmp[569080] "expr temp" "maybe param" "maybe type" "temp"
    (569083 'move' call_tmp[569080](70921 call stride _mt[232] this[70722]))
    unknown call_tmp[569085] "expr temp" "maybe param" "maybe type" "temp"
    (569088 'move' call_tmp[569085](70925 call chpl__addRangeStrides call_tmp[569073] call_tmp[569080] ord[70717]))
    unknown call_tmp[569090] "expr temp" "maybe param" "maybe type" "temp"
    (569093 'move' call_tmp[569090](70927 call(341956 call (partial) chpl_intToIdx _mt[232] this[70722]) call_tmp[569085]))
    unknown call_tmp[569097] "expr temp" "maybe param" "maybe type" "temp"
    (569100 'move' call_tmp[569097](461312 call idxType _mt[232] this[70722]))
    (461316 'move' ret[461307](461315 'coerce' call_tmp[569090] call_tmp[569097]))
    (461309 return ret[461307])
  }
  { scopeless type
    (341932 call idxType _mt[232] this[70722])
  }
  function range[66183](?).translate[70940](arg _mt[70945]:_MT[227], arg this[70942]:range[66183](?) :
  range[66183](?), arg offset[70937]:integral[188](?)) : _unknown[43] "inline" "method"
  {
    unknown ret[461320] "RVV" "temp"
    unknown call_tmp[569104] "expr temp" "maybe param" "maybe type" "temp"
    (569107 'move' call_tmp[569104](70949 call + this[70942] offset[70937]))
    (461325 'move' ret[461320](461324 'deref' call_tmp[569104]))
    (461322 return ret[461320])
  }
  function range[66183](?).translate[70961](arg _mt[70966]:_MT[227], arg this[70963]:range[66183](?) :
  range[66183](?), arg i[70959]:_any[170](?)) : _unknown[43] "inline" "method" "no doc" "no return value for void"
  {
    (70986 call compilerError "offsets must be of integral type")
    (461327 return _void[47])
  }
  function range[66183](?)._effAlmt[70994](arg _mt[70999]:_MT[227], arg this[70996]:range[66183](?) :
  range[66183](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[461331] "RVV" "temp"
    unknown call_tmp[569111] "expr temp" "maybe param" "maybe type" "temp"
    (569114 'move' call_tmp[569111](341971 call alignment _mt[232] this[70996]))
    (461336 'move' ret[461331](461335 'deref' call_tmp[569111]))
    (461333 return ret[461331])
  }
  where {
    (341967 call stridable _mt[232] this[70996])
  }
  function range[66183](?)._effAlmt[71012](arg _mt[71017]:_MT[227], arg this[71014]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method" "no doc"
  {
    unknown ret[461340] "RVV" "temp"
    unknown call_tmp[569120] "expr temp" "maybe param" "maybe type" "temp"
    (569123 'move' call_tmp[569120](71025 call(341980 call (partial) chpl_intToIdx _mt[232] this[71014]) 0))
    (461345 'move' ret[461340](461344 'deref' call_tmp[569120]))
    (461342 return ret[461340])
  }
  where {
    unknown call_tmp[569127] "expr temp" "maybe param" "maybe type" "temp"
    (569130 'move' call_tmp[569127](341976 call stridable _mt[232] this[71014]))
    (71020 call ! call_tmp[569127])
  }
  function range[66183](?).interior[71039](arg _mt[71044]:_MT[227], arg this[71041]:range[66183](?) :
  range[66183](?), arg offset[71036]:integral[188](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    (71071 call compilerError "interior is not supported on unbounded ranges")
    (461347 return _void[47])
  }
  where {
    unknown call_tmp[569134] "expr temp" "maybe param" "maybe type" "temp"
    (569137 'move' call_tmp[569134](341986 call boundedType _mt[232] this[71041]))
    (71051 call != call_tmp[569134] bounded[66079])
  }
  function range[66183](?).interior[71084](arg _mt[71089]:_MT[227], arg this[71086]:range[66183](?) :
  range[66183](?), arg offset[71081]:integral[188](?)) : _unknown[43] "method"
  {
    unknown ret[461351] "RVV" "temp"
    unknown call_tmp[569143] "expr temp" "maybe param" "maybe type" "temp"
    (569146 'move' call_tmp[569143](341993 call intIdxType _mt[232] this[71086]))
    unknown call_tmp[569148] "maybe param" "maybe type" "temp"
    (569151 'move' call_tmp[569148](71097 call(71092 call (partial) safeCast _mt[232] offset[71081]) call_tmp[569143]))
    const i[71098] "const" "insert auto destroy"
    (489689 'init var' i[71098] call_tmp[569148])
    unknown call_tmp[569153] "expr temp" "maybe param" "maybe type" "temp"
    (569156 'move' call_tmp[569153](71104 call < i[71098] 0))
    unknown call_tmp[569158] "expr temp" "maybe param" "maybe type" "temp"
    (569161 'move' call_tmp[569158](71131 call _cond_test call_tmp[569153]))
    if call_tmp[569158]
    {
      unknown call_tmp[569165] "expr temp" "maybe param" "maybe type" "temp"
      (569168 'move' call_tmp[569165](342000 call idxType _mt[232] this[71086]))
      unknown call_tmp[569172] "expr temp" "maybe param" "maybe type" "temp"
      (569175 'move' call_tmp[569172](342005 call boundedType _mt[232] this[71086]))
      unknown call_tmp[569179] "expr temp" "maybe param" "maybe type" "temp"
      (569182 'move' call_tmp[569179](342010 call stridable _mt[232] this[71086]))
      unknown call_tmp[569186] "expr temp" "maybe param" "maybe type" "temp"
      (569189 'move' call_tmp[569186](342014 call low _mt[232] this[71086]))
      unknown call_tmp[569195] "expr temp" "maybe param" "maybe type" "temp"
      (569198 'move' call_tmp[569195](342023 call _low _mt[232] this[71086]))
      unknown call_tmp[569200] "expr temp" "maybe param" "maybe type" "temp"
      (569203 'move' call_tmp[569200](71115 call - call_tmp[569195] 1))
      unknown call_tmp[569205] "expr temp" "maybe param" "maybe type" "temp"
      (569208 'move' call_tmp[569205](71118 call - call_tmp[569200] i[71098]))
      unknown call_tmp[569210] "expr temp" "maybe param" "maybe type" "temp"
      (569213 'move' call_tmp[569210](71121 call(342018 call (partial) chpl_intToIdx _mt[232] this[71086]) call_tmp[569205]))
      unknown call_tmp[569217] "expr temp" "maybe param" "maybe type" "temp"
      (569220 'move' call_tmp[569217](342028 call stride _mt[232] this[71086]))
      unknown call_tmp[569224] "expr temp" "maybe param" "maybe type" "temp"
      (569227 'move' call_tmp[569224](71125 call(342034 call (partial) _effAlmt _mt[232] this[71086])))
      unknown call_tmp[569231] "expr temp" "maybe param" "maybe type" "temp"
      (569234 'move' call_tmp[569231](342038 call aligned _mt[232] this[71086]))
      unknown call_tmp[569236] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (569239 'move' call_tmp[569236](691344 'new' range[66183](?) call_tmp[569165] call_tmp[569172] call_tmp[569179] call_tmp[569186] call_tmp[569210] call_tmp[569217] call_tmp[569224] call_tmp[569231]))
      (461356 'move' ret[461351](461355 'deref' call_tmp[569236]))
      gotoReturn _end_interior[461349] _end_interior[461349]
    }
    unknown call_tmp[569241] "expr temp" "maybe param" "maybe type" "temp"
    (569244 'move' call_tmp[569241](71138 call > i[71098] 0))
    unknown call_tmp[569246] "expr temp" "maybe param" "maybe type" "temp"
    (569249 'move' call_tmp[569246](71165 call _cond_test call_tmp[569241]))
    if call_tmp[569246]
    {
      unknown call_tmp[569253] "expr temp" "maybe param" "maybe type" "temp"
      (569256 'move' call_tmp[569253](342045 call idxType _mt[232] this[71086]))
      unknown call_tmp[569260] "expr temp" "maybe param" "maybe type" "temp"
      (569263 'move' call_tmp[569260](342050 call boundedType _mt[232] this[71086]))
      unknown call_tmp[569267] "expr temp" "maybe param" "maybe type" "temp"
      (569270 'move' call_tmp[569267](342055 call stridable _mt[232] this[71086]))
      unknown call_tmp[569276] "expr temp" "maybe param" "maybe type" "temp"
      (569279 'move' call_tmp[569276](342064 call _high _mt[232] this[71086]))
      unknown call_tmp[569281] "expr temp" "maybe param" "maybe type" "temp"
      (569284 'move' call_tmp[569281](71148 call + call_tmp[569276] 1))
      unknown call_tmp[569286] "expr temp" "maybe param" "maybe type" "temp"
      (569289 'move' call_tmp[569286](71151 call - call_tmp[569281] i[71098]))
      unknown call_tmp[569291] "expr temp" "maybe param" "maybe type" "temp"
      (569294 'move' call_tmp[569291](71154 call(342059 call (partial) chpl_intToIdx _mt[232] this[71086]) call_tmp[569286]))
      unknown call_tmp[569298] "expr temp" "maybe param" "maybe type" "temp"
      (569301 'move' call_tmp[569298](342069 call high _mt[232] this[71086]))
      unknown call_tmp[569305] "expr temp" "maybe param" "maybe type" "temp"
      (569308 'move' call_tmp[569305](342073 call stride _mt[232] this[71086]))
      unknown call_tmp[569312] "expr temp" "maybe param" "maybe type" "temp"
      (569315 'move' call_tmp[569312](71159 call(342077 call (partial) _effAlmt _mt[232] this[71086])))
      unknown call_tmp[569319] "expr temp" "maybe param" "maybe type" "temp"
      (569322 'move' call_tmp[569319](342081 call aligned _mt[232] this[71086]))
      unknown call_tmp[569324] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (569327 'move' call_tmp[569324](691345 'new' range[66183](?) call_tmp[569253] call_tmp[569260] call_tmp[569267] call_tmp[569291] call_tmp[569298] call_tmp[569305] call_tmp[569312] call_tmp[569319]))
      (461361 'move' ret[461351](461360 'deref' call_tmp[569324]))
      gotoReturn _end_interior[461349] _end_interior[461349]
    }
    unknown call_tmp[569331] "expr temp" "maybe param" "maybe type" "temp"
    (569334 'move' call_tmp[569331](342087 call idxType _mt[232] this[71086]))
    unknown call_tmp[569338] "expr temp" "maybe param" "maybe type" "temp"
    (569341 'move' call_tmp[569338](342092 call boundedType _mt[232] this[71086]))
    unknown call_tmp[569345] "expr temp" "maybe param" "maybe type" "temp"
    (569348 'move' call_tmp[569345](342097 call stridable _mt[232] this[71086]))
    unknown call_tmp[569352] "expr temp" "maybe param" "maybe type" "temp"
    (569355 'move' call_tmp[569352](342101 call low _mt[232] this[71086]))
    unknown call_tmp[569359] "expr temp" "maybe param" "maybe type" "temp"
    (569362 'move' call_tmp[569359](342105 call high _mt[232] this[71086]))
    unknown call_tmp[569366] "expr temp" "maybe param" "maybe type" "temp"
    (569369 'move' call_tmp[569366](342109 call stride _mt[232] this[71086]))
    unknown call_tmp[569373] "expr temp" "maybe param" "maybe type" "temp"
    (569376 'move' call_tmp[569373](71180 call(342113 call (partial) _effAlmt _mt[232] this[71086])))
    unknown call_tmp[569380] "expr temp" "maybe param" "maybe type" "temp"
    (569383 'move' call_tmp[569380](342117 call aligned _mt[232] this[71086]))
    unknown call_tmp[569385] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (569388 'move' call_tmp[569385](691346 'new' range[66183](?) call_tmp[569331] call_tmp[569338] call_tmp[569345] call_tmp[569352] call_tmp[569359] call_tmp[569366] call_tmp[569373] call_tmp[569380]))
    (461366 'move' ret[461351](461365 'deref' call_tmp[569385]))
    label _end_interior[461349]
    (461353 return ret[461351])
  }
  function range[66183](?).exterior[71195](arg _mt[71200]:_MT[227], arg this[71197]:range[66183](?) :
  range[66183](?), arg offset[71192]:integral[188](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    (71227 call compilerError "exterior is not supported on unbounded ranges")
    (461368 return _void[47])
  }
  where {
    unknown call_tmp[569392] "expr temp" "maybe param" "maybe type" "temp"
    (569395 'move' call_tmp[569392](342123 call boundedType _mt[232] this[71197]))
    (71207 call != call_tmp[569392] bounded[66079])
  }
  function range[66183](?).exterior[71240](arg _mt[71245]:_MT[227], arg this[71242]:range[66183](?) :
  range[66183](?), arg offset[71237]:integral[188](?)) : _unknown[43] "method"
  {
    unknown ret[461372] "RVV" "temp"
    unknown call_tmp[569401] "expr temp" "maybe param" "maybe type" "temp"
    (569404 'move' call_tmp[569401](342130 call intIdxType _mt[232] this[71242]))
    unknown call_tmp[569406] "maybe param" "maybe type" "temp"
    (569409 'move' call_tmp[569406](71253 call(71248 call (partial) safeCast _mt[232] offset[71237]) call_tmp[569401]))
    const i[71254] "const" "insert auto destroy"
    (489691 'init var' i[71254] call_tmp[569406])
    unknown call_tmp[569411] "expr temp" "maybe param" "maybe type" "temp"
    (569414 'move' call_tmp[569411](71260 call < i[71254] 0))
    unknown call_tmp[569416] "expr temp" "maybe param" "maybe type" "temp"
    (569419 'move' call_tmp[569416](71290 call _cond_test call_tmp[569411]))
    if call_tmp[569416]
    {
      unknown call_tmp[569423] "expr temp" "maybe param" "maybe type" "temp"
      (569426 'move' call_tmp[569423](342137 call idxType _mt[232] this[71242]))
      unknown call_tmp[569430] "expr temp" "maybe param" "maybe type" "temp"
      (569433 'move' call_tmp[569430](342142 call boundedType _mt[232] this[71242]))
      unknown call_tmp[569437] "expr temp" "maybe param" "maybe type" "temp"
      (569440 'move' call_tmp[569437](342147 call stridable _mt[232] this[71242]))
      unknown call_tmp[569446] "expr temp" "maybe param" "maybe type" "temp"
      (569449 'move' call_tmp[569446](342156 call _low _mt[232] this[71242]))
      unknown call_tmp[569451] "expr temp" "maybe param" "maybe type" "temp"
      (569454 'move' call_tmp[569451](71270 call + call_tmp[569446] i[71254]))
      unknown call_tmp[569456] "expr temp" "maybe param" "maybe type" "temp"
      (569459 'move' call_tmp[569456](71273 call(342151 call (partial) chpl_intToIdx _mt[232] this[71242]) call_tmp[569451]))
      unknown call_tmp[569465] "expr temp" "maybe param" "maybe type" "temp"
      (569468 'move' call_tmp[569465](342166 call _low _mt[232] this[71242]))
      unknown call_tmp[569470] "expr temp" "maybe param" "maybe type" "temp"
      (569473 'move' call_tmp[569470](71277 call - call_tmp[569465] 1))
      unknown call_tmp[569475] "expr temp" "maybe param" "maybe type" "temp"
      (569478 'move' call_tmp[569475](71280 call(342161 call (partial) chpl_intToIdx _mt[232] this[71242]) call_tmp[569470]))
      unknown call_tmp[569482] "expr temp" "maybe param" "maybe type" "temp"
      (569485 'move' call_tmp[569482](342170 call stride _mt[232] this[71242]))
      unknown call_tmp[569489] "expr temp" "maybe param" "maybe type" "temp"
      (569492 'move' call_tmp[569489](71284 call(342174 call (partial) _effAlmt _mt[232] this[71242])))
      unknown call_tmp[569496] "expr temp" "maybe param" "maybe type" "temp"
      (569499 'move' call_tmp[569496](342178 call aligned _mt[232] this[71242]))
      unknown call_tmp[569501] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (569504 'move' call_tmp[569501](691347 'new' range[66183](?) call_tmp[569423] call_tmp[569430] call_tmp[569437] call_tmp[569456] call_tmp[569475] call_tmp[569482] call_tmp[569489] call_tmp[569496]))
      (461377 'move' ret[461372](461376 'deref' call_tmp[569501]))
      gotoReturn _end_exterior[461370] _end_exterior[461370]
    }
    unknown call_tmp[569506] "expr temp" "maybe param" "maybe type" "temp"
    (569509 'move' call_tmp[569506](71297 call > i[71254] 0))
    unknown call_tmp[569511] "expr temp" "maybe param" "maybe type" "temp"
    (569514 'move' call_tmp[569511](71327 call _cond_test call_tmp[569506]))
    if call_tmp[569511]
    {
      unknown call_tmp[569518] "expr temp" "maybe param" "maybe type" "temp"
      (569521 'move' call_tmp[569518](342185 call idxType _mt[232] this[71242]))
      unknown call_tmp[569525] "expr temp" "maybe param" "maybe type" "temp"
      (569528 'move' call_tmp[569525](342190 call boundedType _mt[232] this[71242]))
      unknown call_tmp[569532] "expr temp" "maybe param" "maybe type" "temp"
      (569535 'move' call_tmp[569532](342195 call stridable _mt[232] this[71242]))
      unknown call_tmp[569541] "expr temp" "maybe param" "maybe type" "temp"
      (569544 'move' call_tmp[569541](342204 call _high _mt[232] this[71242]))
      unknown call_tmp[569546] "expr temp" "maybe param" "maybe type" "temp"
      (569549 'move' call_tmp[569546](71307 call + call_tmp[569541] 1))
      unknown call_tmp[569551] "expr temp" "maybe param" "maybe type" "temp"
      (569554 'move' call_tmp[569551](71310 call(342199 call (partial) chpl_intToIdx _mt[232] this[71242]) call_tmp[569546]))
      unknown call_tmp[569560] "expr temp" "maybe param" "maybe type" "temp"
      (569563 'move' call_tmp[569560](342213 call _high _mt[232] this[71242]))
      unknown call_tmp[569565] "expr temp" "maybe param" "maybe type" "temp"
      (569568 'move' call_tmp[569565](71314 call + call_tmp[569560] i[71254]))
      unknown call_tmp[569570] "expr temp" "maybe param" "maybe type" "temp"
      (569573 'move' call_tmp[569570](71317 call(342208 call (partial) chpl_intToIdx _mt[232] this[71242]) call_tmp[569565]))
      unknown call_tmp[569577] "expr temp" "maybe param" "maybe type" "temp"
      (569580 'move' call_tmp[569577](342218 call stride _mt[232] this[71242]))
      unknown call_tmp[569584] "expr temp" "maybe param" "maybe type" "temp"
      (569587 'move' call_tmp[569584](71321 call(342222 call (partial) _effAlmt _mt[232] this[71242])))
      unknown call_tmp[569591] "expr temp" "maybe param" "maybe type" "temp"
      (569594 'move' call_tmp[569591](342226 call aligned _mt[232] this[71242]))
      unknown call_tmp[569596] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (569599 'move' call_tmp[569596](691348 'new' range[66183](?) call_tmp[569518] call_tmp[569525] call_tmp[569532] call_tmp[569551] call_tmp[569570] call_tmp[569577] call_tmp[569584] call_tmp[569591]))
      (461382 'move' ret[461372](461381 'deref' call_tmp[569596]))
      gotoReturn _end_exterior[461370] _end_exterior[461370]
    }
    unknown call_tmp[569603] "expr temp" "maybe param" "maybe type" "temp"
    (569606 'move' call_tmp[569603](342232 call idxType _mt[232] this[71242]))
    unknown call_tmp[569610] "expr temp" "maybe param" "maybe type" "temp"
    (569613 'move' call_tmp[569610](342237 call boundedType _mt[232] this[71242]))
    unknown call_tmp[569617] "expr temp" "maybe param" "maybe type" "temp"
    (569620 'move' call_tmp[569617](342242 call stridable _mt[232] this[71242]))
    unknown call_tmp[569624] "expr temp" "maybe param" "maybe type" "temp"
    (569627 'move' call_tmp[569624](342246 call low _mt[232] this[71242]))
    unknown call_tmp[569631] "expr temp" "maybe param" "maybe type" "temp"
    (569634 'move' call_tmp[569631](342250 call high _mt[232] this[71242]))
    unknown call_tmp[569638] "expr temp" "maybe param" "maybe type" "temp"
    (569641 'move' call_tmp[569638](342254 call stride _mt[232] this[71242]))
    unknown call_tmp[569645] "expr temp" "maybe param" "maybe type" "temp"
    (569648 'move' call_tmp[569645](71342 call(342258 call (partial) _effAlmt _mt[232] this[71242])))
    unknown call_tmp[569652] "expr temp" "maybe param" "maybe type" "temp"
    (569655 'move' call_tmp[569652](342262 call aligned _mt[232] this[71242]))
    unknown call_tmp[569657] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (569660 'move' call_tmp[569657](691349 'new' range[66183](?) call_tmp[569603] call_tmp[569610] call_tmp[569617] call_tmp[569624] call_tmp[569631] call_tmp[569638] call_tmp[569645] call_tmp[569652]))
    (461387 'move' ret[461372](461386 'deref' call_tmp[569657]))
    label _end_exterior[461370]
    (461374 return ret[461372])
  }
  function range[66183](?).expand[71357](arg _mt[71362]:_MT[227], arg this[71359]:range[66183](?) :
  range[66183](?), arg offset[71354]:integral[188](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    (71389 call compilerError "expand() is not supported on unbounded ranges")
    (461389 return _void[47])
  }
  where {
    unknown call_tmp[569664] "expr temp" "maybe param" "maybe type" "temp"
    (569667 'move' call_tmp[569664](342268 call boundedType _mt[232] this[71359]))
    (71369 call != call_tmp[569664] bounded[66079])
  }
  function range[66183](?).expand[71402](arg _mt[71407]:_MT[227], arg this[71404]:range[66183](?) :
  range[66183](?), arg offset[71399]:integral[188](?)) : _unknown[43] "method"
  {
    unknown ret[461393] "RVV" "temp"
    unknown call_tmp[569673] "expr temp" "maybe param" "maybe type" "temp"
    (569676 'move' call_tmp[569673](342275 call intIdxType _mt[232] this[71404]))
    unknown call_tmp[569678] "maybe param" "maybe type" "temp"
    (569681 'move' call_tmp[569678](71415 call(71410 call (partial) safeCast _mt[232] offset[71399]) call_tmp[569673]))
    const i[71416] "const" "insert auto destroy"
    (489693 'init var' i[71416] call_tmp[569678])
    unknown call_tmp[569685] "expr temp" "maybe param" "maybe type" "temp"
    (569688 'move' call_tmp[569685](342281 call idxType _mt[232] this[71404]))
    unknown call_tmp[569692] "expr temp" "maybe param" "maybe type" "temp"
    (569695 'move' call_tmp[569692](342286 call boundedType _mt[232] this[71404]))
    unknown call_tmp[569699] "expr temp" "maybe param" "maybe type" "temp"
    (569702 'move' call_tmp[569699](342291 call stridable _mt[232] this[71404]))
    unknown call_tmp[569708] "expr temp" "maybe param" "maybe type" "temp"
    (569711 'move' call_tmp[569708](342300 call _low _mt[232] this[71404]))
    unknown call_tmp[569713] "expr temp" "maybe param" "maybe type" "temp"
    (569716 'move' call_tmp[569713](71428 call - call_tmp[569708] i[71416]))
    unknown call_tmp[569718] "expr temp" "maybe param" "maybe type" "temp"
    (569721 'move' call_tmp[569718](71431 call(342295 call (partial) chpl_intToIdx _mt[232] this[71404]) call_tmp[569713]))
    unknown call_tmp[569727] "expr temp" "maybe param" "maybe type" "temp"
    (569730 'move' call_tmp[569727](342310 call _high _mt[232] this[71404]))
    unknown call_tmp[569732] "expr temp" "maybe param" "maybe type" "temp"
    (569735 'move' call_tmp[569732](71435 call + call_tmp[569727] i[71416]))
    unknown call_tmp[569737] "expr temp" "maybe param" "maybe type" "temp"
    (569740 'move' call_tmp[569737](71438 call(342305 call (partial) chpl_intToIdx _mt[232] this[71404]) call_tmp[569732]))
    unknown call_tmp[569744] "expr temp" "maybe param" "maybe type" "temp"
    (569747 'move' call_tmp[569744](342315 call stride _mt[232] this[71404]))
    unknown call_tmp[569751] "expr temp" "maybe param" "maybe type" "temp"
    (569754 'move' call_tmp[569751](342319 call alignment _mt[232] this[71404]))
    unknown call_tmp[569758] "expr temp" "maybe param" "maybe type" "temp"
    (569761 'move' call_tmp[569758](342324 call _aligned _mt[232] this[71404]))
    unknown call_tmp[569763] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (569766 'move' call_tmp[569763](691350 'new' range[66183](?) call_tmp[569685] call_tmp[569692] call_tmp[569699] call_tmp[569718] call_tmp[569737] call_tmp[569744] call_tmp[569751] call_tmp[569758]))
    (461398 'move' ret[461393](461397 'deref' call_tmp[569763]))
    (461395 return ret[461393])
  }
  function =[71459](ref arg r1[71456]:range[66183](?), arg r2[71467]:range[66183](?)) : _unknown[43] "assignop" "compiler generated" "inline" "no return value for void"
  {
    unknown call_tmp[569770] "expr temp" "maybe param" "maybe type" "temp"
    (569773 'move' call_tmp[569770](71471 call boundedType _mt[232] r1[71456]))
    unknown call_tmp[569777] "expr temp" "maybe param" "maybe type" "temp"
    (569780 'move' call_tmp[569777](71475 call boundedType _mt[232] r2[71467]))
    unknown call_tmp[569782] "expr temp" "maybe param" "maybe type" "temp"
    (569785 'move' call_tmp[569782](71478 call != call_tmp[569770] call_tmp[569777]))
    unknown call_tmp[569787] "expr temp" "maybe param" "maybe type" "temp"
    (569790 'move' call_tmp[569787](71502 call _cond_test call_tmp[569782]))
    if call_tmp[569787]
    {
      (71500 call compilerError "type mismatch in assignment of ranges with different boundedType parameters")
    }
    unknown tmp[395511] "maybe param" "temp"
    unknown call_tmp[569792] "expr temp" "maybe param" "maybe type" "temp"
    (569795 'move' call_tmp[569792](431038 'query' r1[71456] c"stridable"))
    (395522 'move' tmp[395511](71509 call ! call_tmp[569792]))
    unknown call_tmp[569797] "expr temp" "maybe param" "maybe type" "temp"
    (569800 'move' call_tmp[569797](395524 call _cond_invalid tmp[395511]))
    if call_tmp[569797]
    {
      (395527 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505864] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505865] "maybe param" "temp"
    unknown call_tmp[569802] "expr temp" "maybe param" "maybe type" "temp"
    (569805 'move' call_tmp[569802](395512 call isTrue tmp[395511]))
    (505870 'move' tmp[505865](505868 call _cond_test call_tmp[569802]))
    if tmp[505865]
    {
      unknown tmp[505872] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[569807] "expr temp" "maybe param" "maybe type" "temp"
      (569810 'move' call_tmp[569807](431057 'query' r2[71467] c"stridable"))
      (505874 'move' tmp[505872](395515 call isTrue call_tmp[569807]))
      (505879 'move' tmp[505864](505876 '_paramFoldLogical' tmp[505865] tmp[505872]))
    }
    {
      (505884 'move' tmp[505864](505881 '_paramFoldLogical' tmp[505865] 0))
    }
    unknown call_tmp[569812] "expr temp" "maybe param" "maybe type" "temp"
    (569815 'move' call_tmp[569812](71569 call _cond_test tmp[505864]))
    if call_tmp[569812]
    {
      (71532 call compilerError "type mismatch in assignment of ranges with different stridable parameters")
    }
    {
      unknown tmp[395490] "maybe param" "temp"
      (395501 'move' tmp[395490](431041 'query' r1[71456] c"stridable"))
      unknown call_tmp[569817] "expr temp" "maybe param" "maybe type" "temp"
      (569820 'move' call_tmp[569817](395503 call _cond_invalid tmp[395490]))
      if call_tmp[569817]
      {
        (395506 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[505891] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[505892] "maybe param" "temp"
      unknown call_tmp[569822] "expr temp" "maybe param" "maybe type" "temp"
      (569825 'move' call_tmp[569822](395491 call isTrue tmp[395490]))
      (505897 'move' tmp[505892](505895 call _cond_test call_tmp[569822]))
      if tmp[505892]
      {
        unknown tmp[505899] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[569827] "expr temp" "maybe param" "maybe type" "temp"
        (569830 'move' call_tmp[569827](431060 'query' r2[71467] c"stridable"))
        (505901 'move' tmp[505899](395494 call isTrue call_tmp[569827]))
        (505906 'move' tmp[505891](505903 '_paramFoldLogical' tmp[505892] tmp[505899]))
      }
      {
        (505911 'move' tmp[505891](505908 '_paramFoldLogical' tmp[505892] 0))
      }
      unknown call_tmp[569832] "expr temp" "maybe param" "maybe type" "temp"
      (569835 'move' call_tmp[569832](71563 call _cond_test tmp[505891]))
      if call_tmp[569832]
      {
        unknown call_tmp[569839] "expr temp" "maybe param" "maybe type" "temp"
        (569842 'move' call_tmp[569839](71539 call _stride _mt[232] r1[71456]))
        unknown call_tmp[569846] "expr temp" "maybe param" "maybe type" "temp"
        (569849 'move' call_tmp[569846](71543 call stride _mt[232] r2[71467]))
        (71546 call = call_tmp[569839] call_tmp[569846])
      }
      {
        unknown call_tmp[569851] "expr temp" "maybe param" "maybe type" "temp"
        (569854 'move' call_tmp[569851](431044 'query' r1[71456] c"stridable"))
        unknown call_tmp[569856] "expr temp" "maybe param" "maybe type" "temp"
        (569859 'move' call_tmp[569856](71558 call _cond_test call_tmp[569851]))
        if call_tmp[569856]
        {
          unknown call_tmp[569863] "expr temp" "maybe param" "maybe type" "temp"
          (569866 'move' call_tmp[569863](71551 call _stride _mt[232] r1[71456]))
          (71555 call = call_tmp[569863] 1)
        }
      }
    }
    unknown call_tmp[569870] "expr temp" "maybe param" "maybe type" "temp"
    (569873 'move' call_tmp[569870](71576 call _low _mt[232] r1[71456]))
    unknown call_tmp[569877] "expr temp" "maybe param" "maybe type" "temp"
    (569880 'move' call_tmp[569877](71580 call _low _mt[232] r2[71467]))
    (71583 call = call_tmp[569870] call_tmp[569877])
    unknown call_tmp[569884] "expr temp" "maybe param" "maybe type" "temp"
    (569887 'move' call_tmp[569884](71587 call _high _mt[232] r1[71456]))
    unknown call_tmp[569891] "expr temp" "maybe param" "maybe type" "temp"
    (569894 'move' call_tmp[569891](71591 call _high _mt[232] r2[71467]))
    (71594 call = call_tmp[569884] call_tmp[569891])
    unknown call_tmp[569896] "expr temp" "maybe param" "maybe type" "temp"
    (569899 'move' call_tmp[569896](431047 'query' r1[71456] c"stridable"))
    unknown call_tmp[569901] "expr temp" "maybe param" "maybe type" "temp"
    (569904 'move' call_tmp[569901](71624 call _cond_test call_tmp[569896]))
    if call_tmp[569901]
    {
      unknown call_tmp[569908] "expr temp" "maybe param" "maybe type" "temp"
      (569911 'move' call_tmp[569908](71599 call _alignment _mt[232] r1[71456]))
      unknown call_tmp[569915] "expr temp" "maybe param" "maybe type" "temp"
      (569918 'move' call_tmp[569915](71604 call alignment _mt[232] r2[71467]))
      unknown call_tmp[569920] "expr temp" "maybe param" "maybe type" "temp"
      (569923 'move' call_tmp[569920](71608 call chpl__idxToInt call_tmp[569915]))
      (71609 call = call_tmp[569908] call_tmp[569920])
      unknown call_tmp[569927] "expr temp" "maybe param" "maybe type" "temp"
      (569930 'move' call_tmp[569927](71614 call _aligned _mt[232] r1[71456]))
      unknown call_tmp[569934] "expr temp" "maybe param" "maybe type" "temp"
      (569937 'move' call_tmp[569934](71618 call aligned _mt[232] r2[71467]))
      (71621 call = call_tmp[569927] call_tmp[569934])
    }
    (461400 return _void[47])
  }
  function +[71644](arg r[71641]:range[66183](?), arg offset[71647]:integral[188](?)) : _unknown[43] "inline"
  {
    unknown ret[461404] "RVV" "temp"
    unknown call_tmp[569941] "expr temp" "maybe param" "maybe type" "temp"
    (569944 'move' call_tmp[569941](71652 call intIdxType _mt[232] r[71641]))
    unknown call_tmp[569946] "maybe param" "maybe type" "temp"
    (569949 'move' call_tmp[569946](71655 call _cast call_tmp[569941] offset[71647]))
    const i[71657] "const" "insert auto destroy"
    (489695 'init var' i[71657] call_tmp[569946])
    unknown call_tmp[569951] "expr temp" "maybe param" "maybe type" "temp"
    (569954 'move' call_tmp[569951](431069 'query' r[71641] 1))
    unknown strType[71665] "insert auto destroy" "type variable"(71664 call chpl__rangeStrideType call_tmp[569951])
    unknown call_tmp[569956] "expr temp" "maybe param" "maybe type" "temp"
    (569959 'move' call_tmp[569956](489699 'query' r[71641] 1))
    (489702 'move' strType[71665](489698 call chpl__rangeStrideType call_tmp[569956]))
    unknown call_tmp[569961] "expr temp" "maybe param" "maybe type" "temp"
    (569964 'move' call_tmp[569961](431072 'query' r[71641] 1))
    unknown call_tmp[569966] "expr temp" "maybe param" "maybe type" "temp"
    (569969 'move' call_tmp[569966](431078 'query' r[71641] 2))
    unknown call_tmp[569971] "expr temp" "maybe param" "maybe type" "temp"
    (569974 'move' call_tmp[569971](431084 'query' r[71641] 3))
    unknown call_tmp[569980] "expr temp" "maybe param" "maybe type" "temp"
    (569983 'move' call_tmp[569980](71680 call _low _mt[232] r[71641]))
    unknown call_tmp[569985] "expr temp" "maybe param" "maybe type" "temp"
    (569988 'move' call_tmp[569985](71684 call + call_tmp[569980] i[71657]))
    unknown call_tmp[569990] "expr temp" "maybe param" "maybe type" "temp"
    (569993 'move' call_tmp[569990](71687 call(71676 call (partial) chpl_intToIdx _mt[232] r[71641]) call_tmp[569985]))
    unknown call_tmp[569999] "expr temp" "maybe param" "maybe type" "temp"
    (570002 'move' call_tmp[569999](71693 call _high _mt[232] r[71641]))
    unknown call_tmp[570004] "expr temp" "maybe param" "maybe type" "temp"
    (570007 'move' call_tmp[570004](71697 call + call_tmp[569999] i[71657]))
    unknown call_tmp[570009] "expr temp" "maybe param" "maybe type" "temp"
    (570012 'move' call_tmp[570009](71700 call(71689 call (partial) chpl_intToIdx _mt[232] r[71641]) call_tmp[570004]))
    unknown call_tmp[570016] "expr temp" "maybe param" "maybe type" "temp"
    (570019 'move' call_tmp[570016](71702 call stride _mt[232] r[71641]))
    unknown call_tmp[570021] "expr temp" "maybe param" "maybe type" "temp"
    (570024 'move' call_tmp[570021](71706 call _cast strType[71665] call_tmp[570016]))
    unknown call_tmp[570030] "expr temp" "maybe param" "maybe type" "temp"
    (570033 'move' call_tmp[570030](71714 call alignment _mt[232] r[71641]))
    unknown call_tmp[570035] "expr temp" "maybe param" "maybe type" "temp"
    (570038 'move' call_tmp[570035](71718 call chpl__idxToInt call_tmp[570030]))
    unknown call_tmp[570040] "expr temp" "maybe param" "maybe type" "temp"
    (570043 'move' call_tmp[570040](71720 call + call_tmp[570035] i[71657]))
    unknown call_tmp[570045] "expr temp" "maybe param" "maybe type" "temp"
    (570048 'move' call_tmp[570045](71723 call(71709 call (partial) chpl_intToIdx _mt[232] r[71641]) call_tmp[570040]))
    unknown call_tmp[570052] "expr temp" "maybe param" "maybe type" "temp"
    (570055 'move' call_tmp[570052](71725 call aligned _mt[232] r[71641]))
    unknown call_tmp[570057] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (570060 'move' call_tmp[570057](691351 'new' range[66183](?) call_tmp[569961] call_tmp[569966] call_tmp[569971] call_tmp[569990] call_tmp[570009] call_tmp[570021] call_tmp[570045] call_tmp[570052]))
    (461409 'move' ret[461404](461408 'deref' call_tmp[570057]))
    (461406 return ret[461404])
  }
  function +[71740](arg i[71737]:integral[188](?), arg r[71751]:range[66183](?)) : _unknown[43] "inline"
  {
    unknown ret[461413] "RVV" "temp"
    unknown call_tmp[570062] "expr temp" "maybe param" "maybe type" "temp"
    (570065 'move' call_tmp[570062](71756 call + r[71751] i[71737]))
    (461418 'move' ret[461413](461417 'deref' call_tmp[570062]))
    (461415 return ret[461413])
  }
  function -[71777](arg r[71774]:range[66183](?), arg i[71780]:integral[188](?)) : _unknown[43] "inline"
  {
    unknown ret[461422] "RVV" "temp"
    unknown call_tmp[570067] "expr temp" "maybe param" "maybe type" "temp"
    (570070 'move' call_tmp[570067](431105 'query' r[71774] 1))
    unknown strType[71787] "insert auto destroy" "type variable"(71786 call chpl__rangeStrideType call_tmp[570067])
    unknown call_tmp[570072] "expr temp" "maybe param" "maybe type" "temp"
    (570075 'move' call_tmp[570072](489706 'query' r[71774] 1))
    (489709 'move' strType[71787](489705 call chpl__rangeStrideType call_tmp[570072]))
    unknown call_tmp[570077] "expr temp" "maybe param" "maybe type" "temp"
    (570080 'move' call_tmp[570077](431108 'query' r[71774] 1))
    unknown call_tmp[570082] "expr temp" "maybe param" "maybe type" "temp"
    (570085 'move' call_tmp[570082](431114 'query' r[71774] 2))
    unknown call_tmp[570087] "expr temp" "maybe param" "maybe type" "temp"
    (570090 'move' call_tmp[570087](431120 'query' r[71774] 3))
    unknown call_tmp[570096] "expr temp" "maybe param" "maybe type" "temp"
    (570099 'move' call_tmp[570096](71801 call _low _mt[232] r[71774]))
    unknown call_tmp[570101] "expr temp" "maybe param" "maybe type" "temp"
    (570104 'move' call_tmp[570101](71805 call - call_tmp[570096] i[71780]))
    unknown call_tmp[570106] "expr temp" "maybe param" "maybe type" "temp"
    (570109 'move' call_tmp[570106](71808 call(71797 call (partial) chpl_intToIdx _mt[232] r[71774]) call_tmp[570101]))
    unknown call_tmp[570115] "expr temp" "maybe param" "maybe type" "temp"
    (570118 'move' call_tmp[570115](71814 call _high _mt[232] r[71774]))
    unknown call_tmp[570120] "expr temp" "maybe param" "maybe type" "temp"
    (570123 'move' call_tmp[570120](71818 call - call_tmp[570115] i[71780]))
    unknown call_tmp[570125] "expr temp" "maybe param" "maybe type" "temp"
    (570128 'move' call_tmp[570125](71821 call(71810 call (partial) chpl_intToIdx _mt[232] r[71774]) call_tmp[570120]))
    unknown call_tmp[570132] "expr temp" "maybe param" "maybe type" "temp"
    (570135 'move' call_tmp[570132](71823 call stride _mt[232] r[71774]))
    unknown call_tmp[570137] "expr temp" "maybe param" "maybe type" "temp"
    (570140 'move' call_tmp[570137](71827 call _cast strType[71787] call_tmp[570132]))
    unknown call_tmp[570146] "expr temp" "maybe param" "maybe type" "temp"
    (570149 'move' call_tmp[570146](71835 call alignment _mt[232] r[71774]))
    unknown call_tmp[570151] "expr temp" "maybe param" "maybe type" "temp"
    (570154 'move' call_tmp[570151](71839 call chpl__idxToInt call_tmp[570146]))
    unknown call_tmp[570156] "expr temp" "maybe param" "maybe type" "temp"
    (570159 'move' call_tmp[570156](71841 call - call_tmp[570151] i[71780]))
    unknown call_tmp[570161] "expr temp" "maybe param" "maybe type" "temp"
    (570164 'move' call_tmp[570161](71844 call(71830 call (partial) chpl_intToIdx _mt[232] r[71774]) call_tmp[570156]))
    unknown call_tmp[570168] "expr temp" "maybe param" "maybe type" "temp"
    (570171 'move' call_tmp[570168](71846 call aligned _mt[232] r[71774]))
    unknown call_tmp[570173] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (570176 'move' call_tmp[570173](691352 'new' range[66183](?) call_tmp[570077] call_tmp[570082] call_tmp[570087] call_tmp[570106] call_tmp[570125] call_tmp[570137] call_tmp[570161] call_tmp[570168]))
    (461427 'move' ret[461422](461426 'deref' call_tmp[570173]))
    (461424 return ret[461422])
  }
  function chpl_check_step_integral[71859](arg step[71857]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    unknown call_tmp[570178] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (570181 'move' call_tmp[570178](71863 'typeof' step[71857]))
    unknown call_tmp[570183] "expr temp" "maybe param" "maybe type" "temp"
    (570186 'move' call_tmp[570183](71865 call isIntegral call_tmp[570178]))
    unknown call_tmp[570188] "expr temp" "maybe param" "maybe type" "temp"
    (570191 'move' call_tmp[570188](71866 call ! call_tmp[570183]))
    unknown call_tmp[570193] "expr temp" "maybe param" "maybe type" "temp"
    (570196 'move' call_tmp[570193](71893 call _cond_test call_tmp[570188]))
    if call_tmp[570193]
    {
      unknown call_tmp[570198] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (570201 'move' call_tmp[570198](71887 'typeof' step[71857]))
      unknown call_tmp[570203] "expr temp" "maybe param" "maybe type" "temp"
      (570206 'move' call_tmp[570203](71889 call _cast string[24] call_tmp[570198]))
      (71891 call compilerError "can't apply 'by' using step of a non-integral type " call_tmp[570203])
    }
    (461429 return _void[47])
  }
  function chpl_need_to_check_step[71905](arg step[71903]:_any[170](?), arg strType[71907]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[461433] "RVV" "param" "temp"
    unknown call_tmp[570208] "expr temp" "maybe param" "maybe type" "temp"
    (570211 'move' call_tmp[570208](71913 call isInt strType[71907]))
    (71915 call compilerAssert call_tmp[570208])
    unknown tmp[395532] "maybe param" "temp"
    unknown call_tmp[570213] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (570216 'move' call_tmp[570213](71919 'typeof' step[71903]))
    (395543 'move' tmp[395532](71921 call != call_tmp[570213] strType[71907]))
    unknown call_tmp[570218] "expr temp" "maybe param" "maybe type" "temp"
    (570221 'move' call_tmp[570218](395545 call _cond_invalid tmp[395532]))
    if call_tmp[570218]
    {
      (395548 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505918] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505919] "maybe param" "temp"
    unknown call_tmp[570223] "expr temp" "maybe param" "maybe type" "temp"
    (570226 'move' call_tmp[570223](395533 call isTrue tmp[395532]))
    (505924 'move' tmp[505919](505922 call _cond_test call_tmp[570223]))
    if tmp[505919]
    {
      unknown tmp[505926] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[570228] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (570231 'move' call_tmp[570228](71925 'typeof' step[71903]))
      unknown call_tmp[570233] "expr temp" "maybe param" "maybe type" "temp"
      (570236 'move' call_tmp[570233](71927 call numBits call_tmp[570228]))
      unknown call_tmp[570238] "expr temp" "maybe param" "maybe type" "temp"
      (570241 'move' call_tmp[570238](71931 call numBits strType[71907]))
      unknown call_tmp[570243] "expr temp" "maybe param" "maybe type" "temp"
      (570246 'move' call_tmp[570243](71932 call >= call_tmp[570233] call_tmp[570238]))
      (505928 'move' tmp[505926](395536 call isTrue call_tmp[570243]))
      (505933 'move' tmp[505918](505930 '_paramFoldLogical' tmp[505919] tmp[505926]))
    }
    {
      (505938 'move' tmp[505918](505935 '_paramFoldLogical' tmp[505919] 0))
    }
    (461438 'move' ret[461433](461437 'deref' tmp[505918]))
    (461435 return ret[461433])
  }
  function chpl_range_check_stride[71944](arg step[71942]:_any[170](?), arg idxType[71946]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    (71951 call chpl_check_step_integral step[71942])
    unknown strType[71958] "insert auto destroy" "type variable"(71957 call chpl__rangeStrideType idxType[71946])
    (489714 'move' strType[71958](489712 call chpl__rangeStrideType idxType[71946]))
    unknown call_tmp[570248] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (570251 'move' call_tmp[570248](71963 'typeof' step[71942]))
    unknown call_tmp[570253] "expr temp" "maybe param" "maybe type" "temp"
    (570256 'move' call_tmp[570253](71965 call numBits call_tmp[570248]))
    unknown call_tmp[570258] "expr temp" "maybe param" "maybe type" "temp"
    (570261 'move' call_tmp[570258](71969 call numBits strType[71958]))
    unknown call_tmp[570263] "expr temp" "maybe param" "maybe type" "temp"
    (570266 'move' call_tmp[570263](71970 call > call_tmp[570253] call_tmp[570258]))
    unknown call_tmp[570268] "expr temp" "maybe param" "maybe type" "temp"
    (570271 'move' call_tmp[570268](72017 call _cond_test call_tmp[570263]))
    if call_tmp[570268]
    {
      unknown call_tmp[570273] "expr temp" "maybe param" "maybe type" "temp"
      (570276 'move' call_tmp[570273](71992 call _cast string[24] idxType[71946]))
      unknown call_tmp[570278] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (570281 'move' call_tmp[570278](72011 'typeof' step[71942]))
      unknown call_tmp[570283] "expr temp" "maybe param" "maybe type" "temp"
      (570286 'move' call_tmp[570283](72013 call _cast string[24] call_tmp[570278]))
      (72015 call compilerError "can't apply 'by' to a range with idxType " call_tmp[570273] " using a step of type " call_tmp[570283])
    }
    unknown call_tmp[570288] "expr temp" "maybe param" "maybe type" "temp"
    (570291 'move' call_tmp[570288](72110 call _cond_test 1))
    if call_tmp[570288]
    {
      unknown call_tmp[570293] "expr temp" "maybe param" "maybe type" "temp"
      (570296 'move' call_tmp[570293](72025 call == step[71942] 0))
      unknown call_tmp[570298] "expr temp" "maybe param" "maybe type" "temp"
      (570301 'move' call_tmp[570298](72050 call _cond_test call_tmp[570293]))
      if call_tmp[570298]
      {
        (72048 call boundsCheckHalt module=[244] HaltWrappers[197622] "the step argument of the 'by' operator is zero")
      }
      unknown tmp[395553] "maybe param" "temp"
      (395564 'move' tmp[395553](72060 call chpl_need_to_check_step step[71942] strType[71958]))
      unknown call_tmp[570303] "expr temp" "maybe param" "maybe type" "temp"
      (570306 'move' call_tmp[570303](395566 call _cond_invalid tmp[395553]))
      if call_tmp[570303]
      {
        (395569 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[505945] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[505946] "maybe param" "temp"
      unknown call_tmp[570308] "expr temp" "maybe param" "maybe type" "temp"
      (570311 'move' call_tmp[570308](395554 call isTrue tmp[395553]))
      (505951 'move' tmp[505946](505949 call _cond_test call_tmp[570308]))
      if tmp[505946]
      {
        unknown tmp[505953] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[570313] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (570316 'move' call_tmp[570313](72067 'typeof' step[71942]))
        unknown call_tmp[570318] "expr temp" "maybe param" "maybe type" "temp"
        (570321 'move' call_tmp[570318](72065 call max strType[71958]))
        unknown call_tmp[570323] "expr temp" "maybe param" "maybe type" "temp"
        (570326 'move' call_tmp[570323](72068 call _cast call_tmp[570313] call_tmp[570318]))
        unknown call_tmp[570328] "expr temp" "maybe param" "maybe type" "temp"
        (570331 'move' call_tmp[570328](72070 call > step[71942] call_tmp[570323]))
        (505955 'move' tmp[505953](395557 call isTrue call_tmp[570328]))
        (505960 'move' tmp[505945](505957 '_paramFoldLogical' tmp[505946] tmp[505953]))
      }
      {
        (505965 'move' tmp[505945](505962 '_paramFoldLogical' tmp[505946] 0))
      }
      unknown call_tmp[570333] "expr temp" "maybe param" "maybe type" "temp"
      (570336 'move' call_tmp[570333](72105 call _cond_test tmp[505945]))
      if call_tmp[570333]
      {
        unknown call_tmp[570338] "expr temp" "maybe param" "maybe type" "temp"
        (570341 'move' call_tmp[570338](72098 call _cast string[24] strType[71958]))
        unknown call_tmp[570343] "expr temp" "maybe param" "maybe type" "temp"
        (570346 'move' call_tmp[570343](72100 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[570338]))
        (72103 call boundsCheckHalt module=[244] HaltWrappers[197622] call_tmp[570343])
      }
    }
    (461440 return _void[47])
  }
  function chpl_range_check_stride[72120](param arg step[72118]:_any[170](?), arg idxType[72122]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    (72127 call chpl_check_step_integral step[72118])
    unknown strType[72134] "insert auto destroy" "type variable"(72133 call chpl__rangeStrideType idxType[72122])
    (489719 'move' strType[72134](489717 call chpl__rangeStrideType idxType[72122]))
    unknown call_tmp[570348] "expr temp" "maybe param" "maybe type" "temp"
    (570351 'move' call_tmp[570348](72139 call == step[72118] 0))
    unknown call_tmp[570353] "expr temp" "maybe param" "maybe type" "temp"
    (570356 'move' call_tmp[570353](72146 call _cond_test call_tmp[570348]))
    if call_tmp[570353]
    {
      (72144 call compilerError "the step argument of the 'by' operator is zero")
    }
    unknown tmp[395574] "maybe param" "temp"
    (395585 'move' tmp[395574](72155 call chpl_need_to_check_step step[72118] strType[72134]))
    unknown call_tmp[570358] "expr temp" "maybe param" "maybe type" "temp"
    (570361 'move' call_tmp[570358](395587 call _cond_invalid tmp[395574]))
    if call_tmp[570358]
    {
      (395590 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[505972] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[505973] "maybe param" "temp"
    unknown call_tmp[570363] "expr temp" "maybe param" "maybe type" "temp"
    (570366 'move' call_tmp[570363](395575 call isTrue tmp[395574]))
    (505978 'move' tmp[505973](505976 call _cond_test call_tmp[570363]))
    if tmp[505973]
    {
      unknown tmp[505980] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[570368] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (570371 'move' call_tmp[570368](72162 'typeof' step[72118]))
      unknown call_tmp[570373] "expr temp" "maybe param" "maybe type" "temp"
      (570376 'move' call_tmp[570373](72160 call max strType[72134]))
      unknown call_tmp[570378] "expr temp" "maybe param" "maybe type" "temp"
      (570381 'move' call_tmp[570378](72163 call _cast call_tmp[570368] call_tmp[570373]))
      unknown call_tmp[570383] "expr temp" "maybe param" "maybe type" "temp"
      (570386 'move' call_tmp[570383](72165 call > step[72118] call_tmp[570378]))
      (505982 'move' tmp[505980](395578 call isTrue call_tmp[570383]))
      (505987 'move' tmp[505972](505984 '_paramFoldLogical' tmp[505973] tmp[505980]))
    }
    {
      (505992 'move' tmp[505972](505989 '_paramFoldLogical' tmp[505973] 0))
    }
    unknown call_tmp[570388] "expr temp" "maybe param" "maybe type" "temp"
    (570391 'move' call_tmp[570388](72180 call _cond_test tmp[505972]))
    if call_tmp[570388]
    {
      unknown call_tmp[570393] "expr temp" "maybe param" "maybe type" "temp"
      (570396 'move' call_tmp[570393](72173 call _cast string[24] strType[72134]))
      unknown call_tmp[570398] "expr temp" "maybe param" "maybe type" "temp"
      (570401 'move' call_tmp[570398](72175 call + "the step argument of the 'by' operator is too large and cannot be represented within the range's stride type " call_tmp[570393]))
      (72178 call compilerError call_tmp[570398])
    }
    (461442 return _void[47])
  }
  function chpl_by_help[72201](arg r[72198]:range[66183](?), arg step[72203]:_any[170](?)) : _unknown[43]
  {
    unknown ret[461446] "RVV" "temp"
    unknown call_tmp[570405] "maybe param" "maybe type" "temp"
    (570408 'move' call_tmp[570405](72207 call low _mt[232] r[72198]))
    unknown call_tmp[570410] "maybe param" "maybe type" "temp"
    (570413 'move' call_tmp[570410](431129 'query' r[72198] 1))
    const lw[72210] "const" "insert auto destroy"
    (489721 'init var' lw[72210] call_tmp[570405] call_tmp[570410])
    unknown call_tmp[570417] "maybe param" "maybe type" "temp"
    (570420 'move' call_tmp[570417](72215 call high _mt[232] r[72198]))
    unknown call_tmp[570422] "maybe param" "maybe type" "temp"
    (570425 'move' call_tmp[570422](431132 'query' r[72198] 1))
    const hh[72218] "const" "insert auto destroy"
    (489723 'init var' hh[72218] call_tmp[570417] call_tmp[570422])
    unknown call_tmp[570429] "expr temp" "maybe param" "maybe type" "temp"
    (570432 'move' call_tmp[570429](72228 call stride _mt[232] r[72198]))
    unknown call_tmp[570436] "expr temp" "maybe param" "maybe type" "temp"
    (570439 'move' call_tmp[570436](72233 call strType _mt[232] r[72198]))
    unknown call_tmp[570441] "expr temp" "maybe param" "maybe type" "temp"
    (570444 'move' call_tmp[570441](72236 call _cast call_tmp[570436] step[72203]))
    unknown call_tmp[570446] "maybe param" "maybe type" "temp"
    (570449 'move' call_tmp[570446](72238 call * call_tmp[570429] call_tmp[570441]))
    unknown call_tmp[570453] "maybe param" "maybe type" "temp"
    (570456 'move' call_tmp[570453](72224 call strType _mt[232] r[72198]))
    const st[72240] "const" "insert auto destroy"
    (489725 'init var' st[72240] call_tmp[570446] call_tmp[570453])
    const tmp[72364] "const" "insert auto destroy" "temp"
    unknown tmp[506169] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506170] "maybe param" "temp"
    unknown call_tmp[570460] "expr temp" "maybe param" "maybe type" "temp"
    (570463 'move' call_tmp[570460](72259 call(72255 call (partial) isAmbiguous _mt[232] r[72198])))
    (506175 'move' tmp[506170](506173 call _cond_test call_tmp[570460]))
    if tmp[506170]
    {
      unknown tmp[505999] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[506000] "maybe param" "temp"
      unknown call_tmp[570467] "expr temp" "maybe param" "maybe type" "temp"
      (570470 'move' call_tmp[570467](72261 call stridable _mt[232] r[72198]))
      (506005 'move' tmp[506000](506003 call _cond_test call_tmp[570467]))
      if tmp[506000]
      {
        unknown tmp[506007] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[570474] "expr temp" "maybe param" "maybe type" "temp"
        (570477 'move' call_tmp[570474](72266 call alignment _mt[232] r[72198]))
        (506009 'move' tmp[506007](72270 call _build_tuple 0 call_tmp[570474]))
        (506014 'move' tmp[505999](506011 '_paramFoldLogical' tmp[506000] tmp[506007]))
      }
      {
        unknown tmp[506016] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[570481] "expr temp" "maybe param" "maybe type" "temp"
        (570484 'move' call_tmp[570481](72279 call(72274 call (partial) chpl_intToIdx _mt[232] r[72198]) 0))
        (506018 'move' tmp[506016](72281 call _build_tuple 0 call_tmp[570481]))
        (506023 'move' tmp[505999](506020 '_paramFoldLogical' tmp[506000] tmp[506016]))
      }
      (506180 'move' tmp[506169](506177 '_paramFoldLogical' tmp[506170] tmp[505999]))
    }
    {
      unknown tmp[395616] "maybe param" "temp"
      (395627 'move' tmp[395616](72291 call(72287 call (partial) hasLowBound _mt[232] r[72198])))
      unknown call_tmp[570488] "expr temp" "maybe param" "maybe type" "temp"
      (570491 'move' call_tmp[570488](395629 call _cond_invalid tmp[395616]))
      if call_tmp[570488]
      {
        (395632 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[506030] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506031] "maybe param" "temp"
      unknown call_tmp[570493] "expr temp" "maybe param" "maybe type" "temp"
      (570496 'move' call_tmp[570493](395617 call isTrue tmp[395616]))
      (506036 'move' tmp[506031](506034 call _cond_test call_tmp[570493]))
      if tmp[506031]
      {
        unknown tmp[506038] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[570498] "expr temp" "maybe param" "maybe type" "temp"
        (570501 'move' call_tmp[570498](72294 call > st[72240] 0))
        (506040 'move' tmp[506038](395620 call isTrue call_tmp[570498]))
        (506045 'move' tmp[506030](506042 '_paramFoldLogical' tmp[506031] tmp[506038]))
      }
      {
        (506050 'move' tmp[506030](506047 '_paramFoldLogical' tmp[506031] 0))
      }
      unknown tmp[506142] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[506143] "maybe param" "temp"
      (506148 'move' tmp[506143](506146 call _cond_test tmp[506030]))
      if tmp[506143]
      {
        unknown tmp[506150] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[570505] "expr temp" "maybe param" "maybe type" "temp"
        (570508 'move' call_tmp[570505](72300 call alignedLow _mt[232] r[72198]))
        (506152 'move' tmp[506150](72304 call _build_tuple 1 call_tmp[570505]))
        (506157 'move' tmp[506142](506154 '_paramFoldLogical' tmp[506143] tmp[506150]))
      }
      {
        unknown tmp[395595] "maybe param" "temp"
        (395606 'move' tmp[395595](72311 call(72307 call (partial) hasHighBound _mt[232] r[72198])))
        unknown call_tmp[570512] "expr temp" "maybe param" "maybe type" "temp"
        (570515 'move' call_tmp[570512](395608 call _cond_invalid tmp[395595]))
        if call_tmp[570512]
        {
          (395611 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[506057] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[506058] "maybe param" "temp"
        unknown call_tmp[570517] "expr temp" "maybe param" "maybe type" "temp"
        (570520 'move' call_tmp[570517](395596 call isTrue tmp[395595]))
        (506063 'move' tmp[506058](506061 call _cond_test call_tmp[570517]))
        if tmp[506058]
        {
          unknown tmp[506065] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[570522] "expr temp" "maybe param" "maybe type" "temp"
          (570525 'move' call_tmp[570522](72314 call < st[72240] 0))
          (506067 'move' tmp[506065](395599 call isTrue call_tmp[570522]))
          (506072 'move' tmp[506057](506069 '_paramFoldLogical' tmp[506058] tmp[506065]))
        }
        {
          (506077 'move' tmp[506057](506074 '_paramFoldLogical' tmp[506058] 0))
        }
        unknown tmp[506115] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[506116] "maybe param" "temp"
        (506121 'move' tmp[506116](506119 call _cond_test tmp[506057]))
        if tmp[506116]
        {
          unknown tmp[506123] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[570529] "expr temp" "maybe param" "maybe type" "temp"
          (570532 'move' call_tmp[570529](72320 call alignedHigh _mt[232] r[72198]))
          (506125 'move' tmp[506123](72324 call _build_tuple 1 call_tmp[570529]))
          (506130 'move' tmp[506115](506127 '_paramFoldLogical' tmp[506116] tmp[506123]))
        }
        {
          unknown tmp[506084] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[506085] "maybe param" "temp"
          unknown call_tmp[570536] "expr temp" "maybe param" "maybe type" "temp"
          (570539 'move' call_tmp[570536](72327 call stridable _mt[232] r[72198]))
          (506090 'move' tmp[506085](506088 call _cond_test call_tmp[570536]))
          if tmp[506085]
          {
            unknown tmp[506092] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[570543] "expr temp" "maybe param" "maybe type" "temp"
            (570546 'move' call_tmp[570543](72331 call aligned _mt[232] r[72198]))
            unknown call_tmp[570550] "expr temp" "maybe param" "maybe type" "temp"
            (570553 'move' call_tmp[570550](72335 call alignment _mt[232] r[72198]))
            (506094 'move' tmp[506092](72339 call _build_tuple call_tmp[570543] call_tmp[570550]))
            (506099 'move' tmp[506084](506096 '_paramFoldLogical' tmp[506085] tmp[506092]))
          }
          {
            unknown tmp[506101] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[570557] "expr temp" "maybe param" "maybe type" "temp"
            (570560 'move' call_tmp[570557](72348 call(72343 call (partial) chpl_intToIdx _mt[232] r[72198]) 0))
            (506103 'move' tmp[506101](72350 call _build_tuple 0 call_tmp[570557]))
            (506108 'move' tmp[506084](506105 '_paramFoldLogical' tmp[506085] tmp[506101]))
          }
          (506135 'move' tmp[506115](506132 '_paramFoldLogical' tmp[506116] tmp[506084]))
        }
        (506162 'move' tmp[506142](506159 '_paramFoldLogical' tmp[506143] tmp[506115]))
      }
      (506185 'move' tmp[506169](506182 '_paramFoldLogical' tmp[506170] tmp[506142]))
    }
    unknown call_tmp[570562] "expr temp" "maybe param" "maybe type" "temp"
    (570565 'move' call_tmp[570562](431135 'query' r[72198] 1))
    unknown call_tmp[570567] "maybe param" "maybe type" "temp"
    (570570 'move' call_tmp[570567](72252 call _build_tuple bool[10] call_tmp[570562]))
    (489727 'init var' tmp[72364] tmp[506169] call_tmp[570567])
    (72371 call _check_tuple_var_decl tmp[72364] 2)
    unknown call_tmp[570572] "maybe param" "maybe type" "temp"
    (570575 'move' call_tmp[570572](72365 call tmp[72364] 1))
    const ald[72244] "const" "insert auto destroy"
    (489729 'init var' ald[72244] call_tmp[570572])
    unknown call_tmp[570577] "maybe param" "maybe type" "temp"
    (570580 'move' call_tmp[570577](72368 call tmp[72364] 2))
    const alt[72246] "const" "insert auto destroy"
    (489731 'init var' alt[72246] call_tmp[570577])
    unknown call_tmp[570582] "expr temp" "maybe param" "maybe type" "temp"
    (570585 'move' call_tmp[570582](431138 'query' r[72198] 1))
    unknown call_tmp[570587] "expr temp" "maybe param" "maybe type" "temp"
    (570590 'move' call_tmp[570587](431144 'query' r[72198] 2))
    unknown call_tmp[570592] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (570595 'move' call_tmp[570592](691353 'new' range[66183](?) call_tmp[570582] call_tmp[570587] 1 lw[72210] hh[72218] st[72240] alt[72246] ald[72244]))
    (461451 'move' ret[461446](461450 'deref' call_tmp[570592]))
    (461448 return ret[461446])
  }
  function chpl_by[72396](arg r[72394]:_any[170](?), arg step[72398]:_any[170](?)) : _unknown[43] "inline" "no doc"
  {
    unknown ret[461455] "RVV" "temp"
    unknown call_tmp[570597] "expr temp" "maybe param" "maybe type" "temp"
    (570600 'move' call_tmp[570597](72403 call isRange r[72394]))
    unknown call_tmp[570602] "expr temp" "maybe param" "maybe type" "temp"
    (570605 'move' call_tmp[570602](72404 call ! call_tmp[570597]))
    unknown call_tmp[570607] "expr temp" "maybe param" "maybe type" "temp"
    (570610 'move' call_tmp[570607](72426 call _cond_test call_tmp[570602]))
    if call_tmp[570607]
    {
      (72424 call compilerError "the first argument of the 'by' operator is not a range")
    }
    unknown call_tmp[570614] "expr temp" "maybe param" "maybe type" "temp"
    (570617 'move' call_tmp[570614](72436 call idxType _mt[232] r[72394]))
    (72439 call chpl_range_check_stride step[72398] call_tmp[570614])
    unknown call_tmp[570619] "expr temp" "maybe param" "maybe type" "temp"
    (570622 'move' call_tmp[570619](72445 call chpl_by_help r[72394] step[72398]))
    (461460 'move' ret[461455](461459 'deref' call_tmp[570619]))
    (461457 return ret[461455])
  }
  function chpl_by[72459](arg r[72456]:range[66183](?), param arg step[72461]:_any[170](?)) : _unknown[43] "inline" "no doc"
  {
    unknown ret[461464] "RVV" "temp"
    unknown call_tmp[570626] "expr temp" "maybe param" "maybe type" "temp"
    (570629 'move' call_tmp[570626](72467 call idxType _mt[232] r[72456]))
    (72470 call chpl_range_check_stride step[72461] call_tmp[570626])
    unknown call_tmp[570633] "expr temp" "maybe param" "maybe type" "temp"
    (570636 'move' call_tmp[570633](72478 call strType _mt[232] r[72456]))
    unknown call_tmp[570638] "expr temp" "maybe param" "maybe type" "temp"
    (570641 'move' call_tmp[570638](72481 call _cast call_tmp[570633] step[72461]))
    unknown call_tmp[570643] "expr temp" "maybe param" "maybe type" "temp"
    (570646 'move' call_tmp[570643](72483 call chpl_by_help r[72456] call_tmp[570638]))
    (461469 'move' ret[461464](461468 'deref' call_tmp[570643]))
    (461466 return ret[461464])
  }
  function chpl_align[72502](arg r[72499]:range[66183](?), arg algn[72505] :
  (431165 'query' r[72499] 1)) : _unknown[43] "inline" "no doc"
  {
    unknown ret[461473] "RVV" "temp"
    unknown call_tmp[570648] "expr temp" "maybe param" "maybe type" "temp"
    (570651 'move' call_tmp[570648](431168 'query' r[72499] 1))
    unknown call_tmp[570653] "expr temp" "maybe param" "maybe type" "temp"
    (570656 'move' call_tmp[570653](431174 'query' r[72499] 2))
    unknown call_tmp[570662] "expr temp" "maybe param" "maybe type" "temp"
    (570665 'move' call_tmp[570662](72518 call _low _mt[232] r[72499]))
    unknown call_tmp[570667] "expr temp" "maybe param" "maybe type" "temp"
    (570670 'move' call_tmp[570667](72522 call(72514 call (partial) chpl_intToIdx _mt[232] r[72499]) call_tmp[570662]))
    unknown call_tmp[570676] "expr temp" "maybe param" "maybe type" "temp"
    (570679 'move' call_tmp[570676](72528 call _high _mt[232] r[72499]))
    unknown call_tmp[570681] "expr temp" "maybe param" "maybe type" "temp"
    (570684 'move' call_tmp[570681](72532 call(72524 call (partial) chpl_intToIdx _mt[232] r[72499]) call_tmp[570676]))
    unknown call_tmp[570688] "expr temp" "maybe param" "maybe type" "temp"
    (570691 'move' call_tmp[570688](72534 call stride _mt[232] r[72499]))
    unknown call_tmp[570693] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (570696 'move' call_tmp[570693](691354 'new' range[66183](?) call_tmp[570648] call_tmp[570653] 1 call_tmp[570667] call_tmp[570681] call_tmp[570688] algn[72505] 1))
    (461478 'move' ret[461473](461477 'deref' call_tmp[570693]))
    (461475 return ret[461473])
  }
  function chpl_align[72560](arg r[72557]:range[66183](?), arg algn[72562]:_any[170](?)) : _unknown[43] "inline" "no doc"
  {
    unknown ret[461482] "RVV" "temp"
    unknown call_tmp[570698] "expr temp" "maybe param" "maybe type" "temp"
    (570701 'move' call_tmp[570698](431186 'query' r[72557] 1))
    unknown call_tmp[570703] "expr temp" "maybe param" "maybe type" "temp"
    (570706 'move' call_tmp[570703](72584 call _cast string[24] call_tmp[570698]))
    unknown call_tmp[570708] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (570711 'move' call_tmp[570708](72603 'typeof' algn[72562]))
    unknown call_tmp[570713] "expr temp" "maybe param" "maybe type" "temp"
    (570716 'move' call_tmp[570713](72605 call _cast string[24] call_tmp[570708]))
    (72607 call compilerError "can't align a range with idxType " call_tmp[570703] " using a value of type " call_tmp[570713])
    (461487 'move' ret[461482](461486 'deref' r[72557]))
    (461484 return ret[461482])
  }
  function range[66183](?).offset[72622](arg _mt[72627]:_MT[227], arg this[72624]:range[66183](?) :
  range[66183](?), in arg offset[72619]:integral[188](?)) : _unknown[43] "method"
  {
    unknown ret[461491] "RVV" "temp"
    unknown call_tmp[570722] "expr temp" "maybe param" "maybe type" "temp"
    (570725 'move' call_tmp[570722](342485 call intIdxType _mt[232] this[72624]))
    unknown call_tmp[570727] "maybe param" "maybe type" "temp"
    (570730 'move' call_tmp[570727](72635 call(72630 call (partial) safeCast _mt[232] offset[72619]) call_tmp[570722]))
    unknown offs[72636] "insert auto destroy"
    (489733 'init var' offs[72636] call_tmp[570727])
    unknown call_tmp[570734] "expr temp" "maybe param" "maybe type" "temp"
    (570737 'move' call_tmp[570734](342490 call stridable _mt[232] this[72624]))
    unknown call_tmp[570739] "expr temp" "maybe param" "maybe type" "temp"
    (570742 'move' call_tmp[570739](72641 call ! call_tmp[570734]))
    unknown call_tmp[570744] "expr temp" "maybe param" "maybe type" "temp"
    (570747 'move' call_tmp[570744](72669 call _cond_test call_tmp[570739]))
    if call_tmp[570744]
    {
      (72661 call compilerWarning "invoking 'offset' on an unstrided range has no effect.")
      (72666 call = offs[72636] 0)
    }
    unknown tmp[395637] "maybe param" "temp"
    (395648 'move' tmp[395637] 1)
    unknown call_tmp[570749] "expr temp" "maybe param" "maybe type" "temp"
    (570752 'move' call_tmp[570749](395650 call _cond_invalid tmp[395637]))
    if call_tmp[570749]
    {
      (395653 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506192] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506193] "maybe param" "temp"
    unknown call_tmp[570754] "expr temp" "maybe param" "maybe type" "temp"
    (570757 'move' call_tmp[570754](395638 call isTrue tmp[395637]))
    (506198 'move' tmp[506193](506196 call _cond_test call_tmp[570754]))
    if tmp[506193]
    {
      unknown tmp[506200] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[570761] "expr temp" "maybe param" "maybe type" "temp"
      (570764 'move' call_tmp[570761](72676 call(342496 call (partial) hasFirst _mt[232] this[72624])))
      unknown call_tmp[570766] "expr temp" "maybe param" "maybe type" "temp"
      (570769 'move' call_tmp[570766](72677 call ! call_tmp[570761]))
      (506202 'move' tmp[506200](395641 call isTrue call_tmp[570766]))
      (506207 'move' tmp[506192](506204 '_paramFoldLogical' tmp[506193] tmp[506200]))
    }
    {
      (506212 'move' tmp[506192](506209 '_paramFoldLogical' tmp[506193] 0))
    }
    unknown call_tmp[570771] "expr temp" "maybe param" "maybe type" "temp"
    (570774 'move' call_tmp[570771](72704 call _cond_test tmp[506192]))
    if call_tmp[570771]
    {
      (72702 call boundsCheckHalt module=[244] HaltWrappers[197622] "invoking 'offset' on a range without the first index")
    }
    unknown call_tmp[570778] "expr temp" "maybe param" "maybe type" "temp"
    (570781 'move' call_tmp[570778](342503 call idxType _mt[232] this[72624]))
    unknown call_tmp[570785] "expr temp" "maybe param" "maybe type" "temp"
    (570788 'move' call_tmp[570785](342508 call boundedType _mt[232] this[72624]))
    unknown call_tmp[570792] "expr temp" "maybe param" "maybe type" "temp"
    (570795 'move' call_tmp[570792](342513 call stridable _mt[232] this[72624]))
    unknown call_tmp[570799] "expr temp" "maybe param" "maybe type" "temp"
    (570802 'move' call_tmp[570799](342517 call low _mt[232] this[72624]))
    unknown call_tmp[570806] "expr temp" "maybe param" "maybe type" "temp"
    (570809 'move' call_tmp[570806](342521 call high _mt[232] this[72624]))
    unknown call_tmp[570813] "expr temp" "maybe param" "maybe type" "temp"
    (570816 'move' call_tmp[570813](342525 call stride _mt[232] this[72624]))
    unknown call_tmp[570822] "expr temp" "maybe param" "maybe type" "temp"
    (570825 'move' call_tmp[570822](72719 call firstAsInt _mt[232] this[72624]))
    unknown call_tmp[570827] "expr temp" "maybe param" "maybe type" "temp"
    (570830 'move' call_tmp[570827](72723 call + call_tmp[570822] offs[72636]))
    unknown call_tmp[570832] "expr temp" "maybe param" "maybe type" "temp"
    (570835 'move' call_tmp[570832](72726 call(342529 call (partial) chpl_intToIdx _mt[232] this[72624]) call_tmp[570827]))
    unknown call_tmp[570837] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (570840 'move' call_tmp[570837](691355 'new' range[66183](?) call_tmp[570778] call_tmp[570785] call_tmp[570792] call_tmp[570799] call_tmp[570806] call_tmp[570813] call_tmp[570832] 1))
    (461496 'move' ret[461491](461495 'deref' call_tmp[570837]))
    (461493 return ret[461491])
  }
  function range[66183](?).this[72744](arg _mt[72749]:_MT[227], const arg this[72746]:range[66183](?) :
  range[66183](?), arg other[72741]:range[66183](?)) : _unknown[43] "method" "no doc"
  {
    unknown ret[461582] "RVV" "temp"
    unknown ambig[72752] "insert auto destroy"
    (489735 'init var' ambig[72752] 0)
    unknown tmp[395679] "maybe param" "temp"
    (395690 'move' tmp[395679](72761 call(72757 call (partial) isAmbiguous _mt[232] this[72746])))
    unknown call_tmp[570844] "expr temp" "maybe param" "maybe type" "temp"
    (570847 'move' call_tmp[570844](395692 call _cond_invalid tmp[395679]))
    if call_tmp[570844]
    {
      (395695 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[506219] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506220] "maybe param" "temp"
    unknown call_tmp[570849] "expr temp" "maybe param" "maybe type" "temp"
    (570852 'move' call_tmp[570849](395680 call isTrue tmp[395679]))
    (506225 'move' tmp[506220](506223 call _cond_test call_tmp[570849]))
    if tmp[506220]
    {
      (506230 'move' tmp[506219](506227 '_paramFoldLogical' tmp[506220] 1))
    }
    {
      unknown tmp[506232] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[570856] "expr temp" "maybe param" "maybe type" "temp"
      (570859 'move' call_tmp[570856](72767 call(72763 call (partial) isAmbiguous _mt[232] other[72741])))
      (506234 'move' tmp[506232](395684 call isTrue call_tmp[570856]))
      (506239 'move' tmp[506219](506236 '_paramFoldLogical' tmp[506220] tmp[506232]))
    }
    unknown call_tmp[570861] "expr temp" "maybe param" "maybe type" "temp"
    (570864 'move' call_tmp[570861](72855 call _cond_test tmp[506219]))
    if call_tmp[570861]
    {
      unknown call_tmp[570868] "expr temp" "maybe param" "maybe type" "temp"
      (570871 'move' call_tmp[570868](72772 call stride _mt[232] this[72746]))
      unknown call_tmp[570873] "maybe param" "maybe type" "temp"
      (570876 'move' call_tmp[570873](72776 call abs call_tmp[570868]))
      unknown st1[72777] "insert auto destroy"
      (489737 'init var' st1[72777] call_tmp[570873])
      unknown call_tmp[570880] "expr temp" "maybe param" "maybe type" "temp"
      (570883 'move' call_tmp[570880](72783 call stride _mt[232] other[72741]))
      unknown call_tmp[570885] "maybe param" "maybe type" "temp"
      (570888 'move' call_tmp[570885](72787 call abs call_tmp[570880]))
      unknown st2[72788] "insert auto destroy"
      (489739 'init var' st2[72788] call_tmp[570885])
      unknown call_tmp[570890] "maybe param" "maybe type" "temp"
      (570893 'move' call_tmp[570890](72800 call chpl__extendedEuclid st1[72777] st2[72788]))
      unknown tmp[72801] "insert auto destroy" "no copy" "temp"
      (489741 'init var' tmp[72801] call_tmp[570890])
      (72808 call _check_tuple_var_decl tmp[72801] 2)
      unknown call_tmp[570895] "maybe param" "maybe type" "temp"
      (570898 'move' call_tmp[570895](72802 call tmp[72801] 1))
      unknown g[72791] "insert auto destroy"
      (489743 'init var' g[72791] call_tmp[570895])
      unknown call_tmp[570900] "maybe param" "maybe type" "temp"
      (570903 'move' call_tmp[570900](72805 call tmp[72801] 2))
      unknown x[72793] "insert auto destroy"
      (489745 'init var' x[72793] call_tmp[570900])
      unknown tmp[395658] "maybe param" "temp"
      (395669 'move' tmp[395658] 1)
      unknown call_tmp[570905] "expr temp" "maybe param" "maybe type" "temp"
      (570908 'move' call_tmp[570905](395671 call _cond_invalid tmp[395658]))
      if call_tmp[570905]
      {
        (395674 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[506246] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506247] "maybe param" "temp"
      unknown call_tmp[570910] "expr temp" "maybe param" "maybe type" "temp"
      (570913 'move' call_tmp[570910](395659 call isTrue tmp[395658]))
      (506252 'move' tmp[506247](506250 call _cond_test call_tmp[570910]))
      if tmp[506247]
      {
        unknown tmp[506254] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[570915] "expr temp" "maybe param" "maybe type" "temp"
        (570918 'move' call_tmp[570915](72816 call > g[72791] 1))
        (506256 'move' tmp[506254](395662 call isTrue call_tmp[570915]))
        (506261 'move' tmp[506246](506258 '_paramFoldLogical' tmp[506247] tmp[506254]))
      }
      {
        (506266 'move' tmp[506246](506263 '_paramFoldLogical' tmp[506247] 0))
      }
      unknown call_tmp[570920] "expr temp" "maybe param" "maybe type" "temp"
      (570923 'move' call_tmp[570920](72845 call _cond_test tmp[506246]))
      if call_tmp[570920]
      {
        (72843 call boundsCheckHalt module=[244] HaltWrappers[197622] "Cannot slice ranges with ambiguous alignments unless their strides are relatively prime.")
      }
      (72852 call = ambig[72752] 1)
    }
    function computeBoundedType[72863](arg r1[72861]:_any[170](?), arg r2[72865]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[461500] "RVV" "param" "temp"
      unknown tmp[395700] "maybe param" "temp"
      (395711 'move' tmp[395700](72872 call(72868 call (partial) hasLowBound _mt[232] r1[72861])))
      unknown call_tmp[570927] "expr temp" "maybe param" "maybe type" "temp"
      (570930 'move' call_tmp[570927](395713 call _cond_invalid tmp[395700]))
      if call_tmp[570927]
      {
        (395716 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown low[72881] "param"
      unknown tmp[506273] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506274] "maybe param" "temp"
      unknown call_tmp[570932] "expr temp" "maybe param" "maybe type" "temp"
      (570935 'move' call_tmp[570932](395701 call isTrue tmp[395700]))
      (506279 'move' tmp[506274](506277 call _cond_test call_tmp[570932]))
      if tmp[506274]
      {
        (506284 'move' tmp[506273](506281 '_paramFoldLogical' tmp[506274] 1))
      }
      {
        unknown tmp[506286] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[570939] "expr temp" "maybe param" "maybe type" "temp"
        (570942 'move' call_tmp[570939](72878 call(72874 call (partial) hasLowBound _mt[232] r2[72865])))
        (506288 'move' tmp[506286](395705 call isTrue call_tmp[570939]))
        (506293 'move' tmp[506273](506290 '_paramFoldLogical' tmp[506274] tmp[506286]))
      }
      (489747 'init var' low[72881] tmp[506273])
      unknown tmp[395721] "maybe param" "temp"
      (395732 'move' tmp[395721](72890 call(72886 call (partial) hasHighBound _mt[232] r1[72861])))
      unknown call_tmp[570946] "expr temp" "maybe param" "maybe type" "temp"
      (570949 'move' call_tmp[570946](395734 call _cond_invalid tmp[395721]))
      if call_tmp[570946]
      {
        (395737 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown high[72899] "param"
      unknown tmp[506300] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506301] "maybe param" "temp"
      unknown call_tmp[570951] "expr temp" "maybe param" "maybe type" "temp"
      (570954 'move' call_tmp[570951](395722 call isTrue tmp[395721]))
      (506306 'move' tmp[506301](506304 call _cond_test call_tmp[570951]))
      if tmp[506301]
      {
        (506311 'move' tmp[506300](506308 '_paramFoldLogical' tmp[506301] 1))
      }
      {
        unknown tmp[506313] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[570958] "expr temp" "maybe param" "maybe type" "temp"
        (570961 'move' call_tmp[570958](72896 call(72892 call (partial) hasHighBound _mt[232] r2[72865])))
        (506315 'move' tmp[506313](395726 call isTrue call_tmp[570958]))
        (506320 'move' tmp[506300](506317 '_paramFoldLogical' tmp[506301] tmp[506313]))
      }
      (489749 'init var' high[72899] tmp[506300])
      unknown tmp[395742] "maybe param" "temp"
      (395753 'move' tmp[395742] low[72881])
      unknown call_tmp[570963] "expr temp" "maybe param" "maybe type" "temp"
      (570966 'move' call_tmp[570963](395755 call _cond_invalid tmp[395742]))
      if call_tmp[570963]
      {
        (395758 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[506327] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506328] "maybe param" "temp"
      unknown call_tmp[570968] "expr temp" "maybe param" "maybe type" "temp"
      (570971 'move' call_tmp[570968](395743 call isTrue tmp[395742]))
      (506333 'move' tmp[506328](506331 call _cond_test call_tmp[570968]))
      if tmp[506328]
      {
        unknown tmp[506335] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (506337 'move' tmp[506335](395746 call isTrue high[72899]))
        (506342 'move' tmp[506327](506339 '_paramFoldLogical' tmp[506328] tmp[506335]))
      }
      {
        (506347 'move' tmp[506327](506344 '_paramFoldLogical' tmp[506328] 0))
      }
      unknown call_tmp[570973] "expr temp" "maybe param" "maybe type" "temp"
      (570976 'move' call_tmp[570973](72944 call _cond_test tmp[506327]))
      if call_tmp[570973]
      {
        (461505 'move' ret[461500](461504 'deref' bounded[66079]))
        gotoReturn _end_computeBoundedType[461498] _end_computeBoundedType[461498]
      }
      {
        unknown call_tmp[570978] "expr temp" "maybe param" "maybe type" "temp"
        (570981 'move' call_tmp[570978](72938 call _cond_test low[72881]))
        if call_tmp[570978]
        {
          (461510 'move' ret[461500](461509 'deref' boundedLow[66081]))
          gotoReturn _end_computeBoundedType[461498] _end_computeBoundedType[461498]
        }
        {
          unknown call_tmp[570983] "expr temp" "maybe param" "maybe type" "temp"
          (570986 'move' call_tmp[570983](72932 call _cond_test high[72899]))
          if call_tmp[570983]
          {
            (461515 'move' ret[461500](461514 'deref' boundedHigh[66083]))
            gotoReturn _end_computeBoundedType[461498] _end_computeBoundedType[461498]
          }
          {
            (461520 'move' ret[461500](461519 'deref' boundedNone[66085]))
            gotoReturn _end_computeBoundedType[461498] _end_computeBoundedType[461498]
          }
        }
      }
      label _end_computeBoundedType[461498]
      (461502 return ret[461500])
    }
    unknown lo1[72966] "insert auto destroy"
    unknown tmp[506354] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506355] "maybe param" "temp"
    unknown call_tmp[570990] "expr temp" "maybe param" "maybe type" "temp"
    (570993 'move' call_tmp[570990](72954 call(342558 call (partial) hasLowBound _mt[232] this[72746])))
    (506360 'move' tmp[506355](506358 call _cond_test call_tmp[570990]))
    if tmp[506355]
    {
      unknown tmp[506362] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506364 'move' tmp[506362](72956 call _low _mt[232] this[72746]))
      (506369 'move' tmp[506354](506366 '_paramFoldLogical' tmp[506355] tmp[506362]))
    }
    {
      unknown tmp[506371] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506373 'move' tmp[506371](72960 call _low _mt[232] other[72741]))
      (506378 'move' tmp[506354](506375 '_paramFoldLogical' tmp[506355] tmp[506371]))
    }
    (489751 'init var' lo1[72966] tmp[506354])
    unknown hi1[72983] "insert auto destroy"
    unknown tmp[506385] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506386] "maybe param" "temp"
    unknown call_tmp[571001] "expr temp" "maybe param" "maybe type" "temp"
    (571004 'move' call_tmp[571001](72971 call(342564 call (partial) hasHighBound _mt[232] this[72746])))
    (506391 'move' tmp[506386](506389 call _cond_test call_tmp[571001]))
    if tmp[506386]
    {
      unknown tmp[506393] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506395 'move' tmp[506393](72973 call _high _mt[232] this[72746]))
      (506400 'move' tmp[506385](506397 '_paramFoldLogical' tmp[506386] tmp[506393]))
    }
    {
      unknown tmp[506402] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506404 'move' tmp[506402](72977 call _high _mt[232] other[72741]))
      (506409 'move' tmp[506385](506406 '_paramFoldLogical' tmp[506386] tmp[506402]))
    }
    (489753 'init var' hi1[72983] tmp[506385])
    unknown call_tmp[571012] "expr temp" "maybe param" "maybe type" "temp"
    (571015 'move' call_tmp[571012](72988 call stride _mt[232] this[72746]))
    unknown call_tmp[571017] "maybe param" "maybe type" "temp"
    (571020 'move' call_tmp[571017](72992 call abs call_tmp[571012]))
    unknown st1[72993] "insert auto destroy"
    (489755 'init var' st1[72993] call_tmp[571017])
    unknown lo2[73013] "insert auto destroy"
    unknown tmp[506416] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506417] "maybe param" "temp"
    unknown call_tmp[571024] "expr temp" "maybe param" "maybe type" "temp"
    (571027 'move' call_tmp[571024](73001 call(72997 call (partial) hasLowBound _mt[232] other[72741])))
    (506422 'move' tmp[506417](506420 call _cond_test call_tmp[571024]))
    if tmp[506417]
    {
      unknown tmp[506424] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506426 'move' tmp[506424](73003 call _low _mt[232] other[72741]))
      (506431 'move' tmp[506416](506428 '_paramFoldLogical' tmp[506417] tmp[506424]))
    }
    {
      unknown tmp[506433] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506435 'move' tmp[506433](73007 call _low _mt[232] this[72746]))
      (506440 'move' tmp[506416](506437 '_paramFoldLogical' tmp[506417] tmp[506433]))
    }
    (489757 'init var' lo2[73013] tmp[506416])
    unknown hi2[73033] "insert auto destroy"
    unknown tmp[506447] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506448] "maybe param" "temp"
    unknown call_tmp[571035] "expr temp" "maybe param" "maybe type" "temp"
    (571038 'move' call_tmp[571035](73021 call(73017 call (partial) hasHighBound _mt[232] other[72741])))
    (506453 'move' tmp[506448](506451 call _cond_test call_tmp[571035]))
    if tmp[506448]
    {
      unknown tmp[506455] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506457 'move' tmp[506455](73023 call _high _mt[232] other[72741]))
      (506462 'move' tmp[506447](506459 '_paramFoldLogical' tmp[506448] tmp[506455]))
    }
    {
      unknown tmp[506464] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506466 'move' tmp[506464](73027 call _high _mt[232] this[72746]))
      (506471 'move' tmp[506447](506468 '_paramFoldLogical' tmp[506448] tmp[506464]))
    }
    (489759 'init var' hi2[73033] tmp[506447])
    unknown call_tmp[571046] "expr temp" "maybe param" "maybe type" "temp"
    (571049 'move' call_tmp[571046](73038 call stride _mt[232] other[72741]))
    unknown call_tmp[571051] "maybe param" "maybe type" "temp"
    (571054 'move' call_tmp[571051](73042 call abs call_tmp[571046]))
    unknown st2[73043] "insert auto destroy"
    (489761 'init var' st2[73043] call_tmp[571051])
    unknown call_tmp[571058] "expr temp" "maybe param" "maybe type" "temp"
    (571061 'move' call_tmp[571058](342578 call intIdxType _mt[232] this[72746]))
    unknown call_tmp[571063] "expr temp" "maybe param" "maybe type" "temp"
    (571066 'move' call_tmp[571063](73049 call isUintType call_tmp[571058]))
    unknown call_tmp[571068] "expr temp" "maybe param" "maybe type" "temp"
    (571071 'move' call_tmp[571068](73065 call _cond_test call_tmp[571063]))
    if call_tmp[571068]
    {
      unknown call_tmp[571073] "expr temp" "maybe param" "maybe type" "temp"
      (571076 'move' call_tmp[571073](73052 call < lo1[72966] 0))
      unknown call_tmp[571078] "expr temp" "maybe param" "maybe type" "temp"
      (571081 'move' call_tmp[571078](73059 call _cond_test call_tmp[571073]))
      if call_tmp[571078]
      {
        (73056 call = lo1[72966] 0)
      }
    }
    unknown call_tmp[571085] "maybe param" "maybe type" "temp"
    (571088 'move' call_tmp[571085](73071 call stride _mt[232] this[72746]))
    unknown call_tmp[571092] "maybe param" "maybe type" "temp"
    (571095 'move' call_tmp[571092](342584 call strType _mt[232] this[72746]))
    unknown newStride[73074] "insert auto destroy"
    (489763 'init var' newStride[73074] call_tmp[571085] call_tmp[571092])
    unknown call_tmp[571099] "expr temp" "maybe param" "maybe type" "temp"
    (571102 'move' call_tmp[571099](73080 call stride _mt[232] this[72746]))
    unknown call_tmp[571104] "maybe param" "maybe type" "temp"
    (571107 'move' call_tmp[571104](73084 call abs call_tmp[571099]))
    unknown call_tmp[571111] "maybe param" "maybe type" "temp"
    (571114 'move' call_tmp[571111](342589 call strType _mt[232] this[72746]))
    unknown lcm[73085] "insert auto destroy"
    (489765 'init var' lcm[73085] call_tmp[571104] call_tmp[571111])
    unknown call_tmp[571118] "expr temp" "maybe param" "maybe type" "temp"
    (571121 'move' call_tmp[571118](342599 call strType _mt[232] this[72746]))
    unknown call_tmp[571123] "expr temp" "maybe param" "maybe type" "temp"
    (571126 'move' call_tmp[571123](73100 call _cast call_tmp[571118] 0))
    unknown call_tmp[571128] "maybe param" "maybe type" "temp"
    (571131 'move' call_tmp[571128](73103 call _build_tuple lcm[73085] call_tmp[571123]))
    unknown call_tmp[571135] "expr temp" "maybe param" "maybe type" "temp"
    (571138 'move' call_tmp[571135](342594 call strType _mt[232] this[72746]))
    unknown call_tmp[571140] "maybe param" "maybe type" "temp"
    (571143 'move' call_tmp[571140](73095 call * 2 call_tmp[571135]))
    unknown tmp[73105] "insert auto destroy" "temp"
    (489767 'init var' tmp[73105] call_tmp[571128] call_tmp[571140])
    (73112 call _check_tuple_var_decl tmp[73105] 2)
    unknown call_tmp[571145] "maybe param" "maybe type" "temp"
    (571148 'move' call_tmp[571145](73106 call tmp[73105] 1))
    unknown g[73088] "insert auto destroy"
    (489769 'init var' g[73088] call_tmp[571145])
    unknown call_tmp[571150] "maybe param" "maybe type" "temp"
    (571153 'move' call_tmp[571150](73109 call tmp[73105] 2))
    unknown x[73090] "insert auto destroy"
    (489771 'init var' x[73090] call_tmp[571150])
    unknown tmp[395763] "maybe param" "temp"
    unknown call_tmp[571157] "expr temp" "maybe param" "maybe type" "temp"
    (571160 'move' call_tmp[571157](73118 call stride _mt[232] this[72746]))
    unknown call_tmp[571164] "expr temp" "maybe param" "maybe type" "temp"
    (571167 'move' call_tmp[571164](73122 call stride _mt[232] other[72741]))
    (395774 'move' tmp[395763](73125 call != call_tmp[571157] call_tmp[571164]))
    unknown call_tmp[571169] "expr temp" "maybe param" "maybe type" "temp"
    (571172 'move' call_tmp[571169](395776 call _cond_invalid tmp[395763]))
    if call_tmp[571169]
    {
      (395779 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506478] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506479] "maybe param" "temp"
    unknown call_tmp[571174] "expr temp" "maybe param" "maybe type" "temp"
    (571177 'move' call_tmp[571174](395764 call isTrue tmp[395763]))
    (506484 'move' tmp[506479](506482 call _cond_test call_tmp[571174]))
    if tmp[506479]
    {
      unknown tmp[506486] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[571181] "expr temp" "maybe param" "maybe type" "temp"
      (571184 'move' call_tmp[571181](73128 call stride _mt[232] this[72746]))
      unknown call_tmp[571188] "expr temp" "maybe param" "maybe type" "temp"
      (571191 'move' call_tmp[571188](73132 call stride _mt[232] other[72741]))
      unknown call_tmp[571193] "expr temp" "maybe param" "maybe type" "temp"
      (571196 'move' call_tmp[571193](73135 call - call_tmp[571188]))
      unknown call_tmp[571198] "expr temp" "maybe param" "maybe type" "temp"
      (571201 'move' call_tmp[571198](73137 call != call_tmp[571181] call_tmp[571193]))
      (506488 'move' tmp[506486](395767 call isTrue call_tmp[571198]))
      (506493 'move' tmp[506478](506490 '_paramFoldLogical' tmp[506479] tmp[506486]))
    }
    {
      (506498 'move' tmp[506478](506495 '_paramFoldLogical' tmp[506479] 0))
    }
    unknown call_tmp[571203] "expr temp" "maybe param" "maybe type" "temp"
    (571206 'move' call_tmp[571203](73218 call _cond_test tmp[506478]))
    if call_tmp[571203]
    {
      unknown call_tmp[571208] "maybe param" "maybe type" "temp"
      (571211 'move' call_tmp[571208](73150 call chpl__extendedEuclid st1[72993] st2[73043]))
      const tmp[73151] "const" "insert auto destroy" "no copy" "temp"
      (489773 'init var' tmp[73151] call_tmp[571208])
      (73158 call _check_tuple_var_decl tmp[73151] 2)
      unknown call_tmp[571213] "maybe param" "maybe type" "temp"
      (571216 'move' call_tmp[571213](73152 call tmp[73151] 1))
      const tg[73141] "const" "insert auto destroy"
      (489775 'init var' tg[73141] call_tmp[571213])
      unknown call_tmp[571218] "maybe param" "maybe type" "temp"
      (571221 'move' call_tmp[571218](73155 call tmp[73151] 2))
      const tx[73143] "const" "insert auto destroy"
      (489777 'init var' tx[73143] call_tmp[571218])
      unknown tmp[328458] "expr temp" "maybe param" "maybe type" "temp"
      unknown tmp[328483] "maybe param" "temp"
      (328486 'move' tmp[328483](328484 'addr of' g[73088]))
      unknown tmp[328494] "maybe param" "temp"
      (328497 'move' tmp[328494](328495 'addr of' x[73090]))
      unknown call_tmp[571227] "expr temp" "maybe param" "maybe type" "temp"
      (571230 'move' call_tmp[571227](342612 call strType _mt[232] this[72746]))
      unknown call_tmp[571232] "expr temp" "maybe param" "maybe type" "temp"
      (571235 'move' call_tmp[571232](73175 call(73170 call (partial) safeCast _mt[232] tg[73141]) call_tmp[571227]))
      unknown call_tmp[571241] "expr temp" "maybe param" "maybe type" "temp"
      (571244 'move' call_tmp[571241](342617 call strType _mt[232] this[72746]))
      unknown call_tmp[571246] "expr temp" "maybe param" "maybe type" "temp"
      (571249 'move' call_tmp[571246](73182 call(73177 call (partial) safeCast _mt[232] tx[73143]) call_tmp[571241]))
      (328459 'move' tmp[328458](73184 call _build_tuple call_tmp[571232] call_tmp[571246]))
      { scopeless
        unknown call_tmp[571253] "expr temp" "maybe param" "maybe type" "temp"
        (571256 'move' call_tmp[571253](328465 call size _mt[232] tmp[328458]))
        unknown call_tmp[571258] "expr temp" "maybe param" "maybe type" "temp"
        (571261 'move' call_tmp[571258](328468 call != 2 call_tmp[571253]))
        unknown call_tmp[571263] "expr temp" "maybe param" "maybe type" "temp"
        (571266 'move' call_tmp[571263](328475 call _cond_test call_tmp[571258]))
        if call_tmp[571263]
        {
          (328471 call compilerError "tuple size must match the number of grouped variables" 0)
        }
      }
      unknown call_tmp[571268] "expr temp" "maybe param" "maybe type" "temp"
      (571271 'move' call_tmp[571268](328481 call tmp[328458] 1))
      (328488 call = tmp[328483] call_tmp[571268])
      unknown call_tmp[571273] "expr temp" "maybe param" "maybe type" "temp"
      (571276 'move' call_tmp[571273](328492 call tmp[328458] 2))
      (328499 call = tmp[328494] call_tmp[571273])
      unknown call_tmp[571278] "expr temp" "maybe param" "maybe type" "temp"
      (571281 'move' call_tmp[571278](73192 call / st1[72993] g[73088]))
      unknown call_tmp[571283] "expr temp" "maybe param" "maybe type" "temp"
      (571286 'move' call_tmp[571283](73195 call * call_tmp[571278] st2[73043]))
      (73197 call = lcm[73085] call_tmp[571283])
      unknown tmp[506505] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506506] "maybe param" "temp"
      unknown call_tmp[571290] "expr temp" "maybe param" "maybe type" "temp"
      (571293 'move' call_tmp[571290](73202 call stride _mt[232] this[72746]))
      unknown call_tmp[571295] "expr temp" "maybe param" "maybe type" "temp"
      (571298 'move' call_tmp[571295](73206 call > call_tmp[571290] 0))
      (506511 'move' tmp[506506](506509 call _cond_test call_tmp[571295]))
      if tmp[506506]
      {
        (506516 'move' tmp[506505](506513 '_paramFoldLogical' tmp[506506] lcm[73085]))
      }
      {
        unknown tmp[506518] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (506520 'move' tmp[506518](73210 call - lcm[73085]))
        (506525 'move' tmp[506505](506522 '_paramFoldLogical' tmp[506506] tmp[506518]))
      }
      (73215 call = newStride[73074] tmp[506505])
    }
    unknown emptyIntersection[73223] "insert auto destroy"
    (489779 'default init var' emptyIntersection[73223] bool[10])
    function min[73232](arg x[73229]:int(64)[13], arg y[73235]:uint(64)[107]) : _unknown[43]
    {
      unknown ret[461526] "RVV" "temp"
      unknown call_tmp[571300] "expr temp" "maybe param" "maybe type" "temp"
      (571303 'move' call_tmp[571300](73242 call max int(64)[13]))
      unknown call_tmp[571305] "expr temp" "maybe param" "maybe type" "temp"
      (571308 'move' call_tmp[571305](73243 call > y[73235] call_tmp[571300]))
      unknown call_tmp[571310] "expr temp" "maybe param" "maybe type" "temp"
      (571313 'move' call_tmp[571310](73249 call _cond_test call_tmp[571305]))
      if call_tmp[571310]
      {
        (461531 'move' ret[461526](461530 'deref' x[73229]))
        gotoReturn _end_min[461524] _end_min[461524]
      }
      unknown call_tmp[571315] "expr temp" "maybe param" "maybe type" "temp"
      (571318 'move' call_tmp[571315](73259 call _cast int(64)[13] y[73235]))
      unknown call_tmp[571320] "expr temp" "maybe param" "maybe type" "temp"
      (571323 'move' call_tmp[571320](73261 call min x[73229] call_tmp[571315]))
      (461536 'move' ret[461526](461535 'deref' call_tmp[571320]))
      label _end_min[461524]
      (461528 return ret[461526])
    }
    function min[73272](arg x[73269]:uint(64)[107], arg y[73275]:int(64)[13]) : _unknown[43]
    {
      unknown ret[461540] "RVV" "temp"
      unknown call_tmp[571325] "expr temp" "maybe param" "maybe type" "temp"
      (571328 'move' call_tmp[571325](73280 call < y[73275] 0))
      unknown call_tmp[571330] "expr temp" "maybe param" "maybe type" "temp"
      (571333 'move' call_tmp[571330](73291 call _cond_test call_tmp[571325]))
      if call_tmp[571330]
      {
        (73284 call = emptyIntersection[73223] 1)
        (461545 'move' ret[461540](461544 'deref' x[73269]))
        gotoReturn _end_min[461538] _end_min[461538]
      }
      unknown call_tmp[571335] "expr temp" "maybe param" "maybe type" "temp"
      (571338 'move' call_tmp[571335](73301 call _cast uint(64)[107] y[73275]))
      unknown call_tmp[571340] "expr temp" "maybe param" "maybe type" "temp"
      (571343 'move' call_tmp[571340](73303 call min x[73269] call_tmp[571335]))
      (461550 'move' ret[461540](461549 'deref' call_tmp[571340]))
      label _end_min[461538]
      (461542 return ret[461540])
    }
    function max[73314](arg x[73311]:int(64)[13], arg y[73317]:uint(64)[107]) : _unknown[43]
    {
      unknown ret[461554] "RVV" "temp"
      unknown call_tmp[571345] "expr temp" "maybe param" "maybe type" "temp"
      (571348 'move' call_tmp[571345](73324 call max int(64)[13]))
      unknown call_tmp[571350] "expr temp" "maybe param" "maybe type" "temp"
      (571353 'move' call_tmp[571350](73325 call > y[73317] call_tmp[571345]))
      unknown call_tmp[571355] "expr temp" "maybe param" "maybe type" "temp"
      (571358 'move' call_tmp[571355](73336 call _cond_test call_tmp[571350]))
      if call_tmp[571355]
      {
        (73329 call = emptyIntersection[73223] 1)
        (461559 'move' ret[461554](461558 'deref' x[73311]))
        gotoReturn _end_max[461552] _end_max[461552]
      }
      unknown call_tmp[571360] "expr temp" "maybe param" "maybe type" "temp"
      (571363 'move' call_tmp[571360](73346 call _cast int(64)[13] y[73317]))
      unknown call_tmp[571365] "expr temp" "maybe param" "maybe type" "temp"
      (571368 'move' call_tmp[571365](73348 call max x[73311] call_tmp[571360]))
      (461564 'move' ret[461554](461563 'deref' call_tmp[571365]))
      label _end_max[461552]
      (461556 return ret[461554])
    }
    function max[73359](arg x[73356]:uint(64)[107], arg y[73362]:int(64)[13]) : _unknown[43]
    {
      unknown ret[461568] "RVV" "temp"
      unknown call_tmp[571370] "expr temp" "maybe param" "maybe type" "temp"
      (571373 'move' call_tmp[571370](73367 call < y[73362] 0))
      unknown call_tmp[571375] "expr temp" "maybe param" "maybe type" "temp"
      (571378 'move' call_tmp[571375](73373 call _cond_test call_tmp[571370]))
      if call_tmp[571375]
      {
        (461573 'move' ret[461568](461572 'deref' x[73356]))
        gotoReturn _end_max[461566] _end_max[461566]
      }
      unknown call_tmp[571380] "expr temp" "maybe param" "maybe type" "temp"
      (571383 'move' call_tmp[571380](73383 call _cast uint(64)[107] y[73362]))
      unknown call_tmp[571385] "expr temp" "maybe param" "maybe type" "temp"
      (571388 'move' call_tmp[571385](73385 call max x[73356] call_tmp[571380]))
      (461578 'move' ret[461568](461577 'deref' call_tmp[571385]))
      label _end_max[461566]
      (461570 return ret[461568])
    }
    (73392 call = emptyIntersection[73223] 0)
    unknown call_tmp[571392] "expr temp" "maybe param" "maybe type" "temp"
    (571395 'move' call_tmp[571392](342650 call intIdxType _mt[232] this[72746]))
    unknown call_tmp[571397] "expr temp" "maybe param" "maybe type" "temp"
    (571400 'move' call_tmp[571397](73399 call max lo1[72966] lo2[73013]))
    unknown call_tmp[571402] "maybe param" "maybe type" "temp"
    (571405 'move' call_tmp[571402](73401 call _cast call_tmp[571392] call_tmp[571397]))
    unknown newlo[73403] "insert auto destroy"
    (489781 'init var' newlo[73403] call_tmp[571402])
    unknown call_tmp[571409] "expr temp" "maybe param" "maybe type" "temp"
    (571412 'move' call_tmp[571409](342656 call intIdxType _mt[232] this[72746]))
    unknown call_tmp[571414] "expr temp" "maybe param" "maybe type" "temp"
    (571417 'move' call_tmp[571414](73410 call min hi1[72983] hi2[73033]))
    unknown call_tmp[571419] "maybe param" "maybe type" "temp"
    (571422 'move' call_tmp[571419](73412 call _cast call_tmp[571409] call_tmp[571414]))
    unknown newhi[73414] "insert auto destroy"
    (489783 'init var' newhi[73414] call_tmp[571419])
    unknown call_tmp[571424] "expr temp" "maybe param" "maybe type" "temp"
    (571427 'move' call_tmp[571424](73429 call _cond_test emptyIntersection[73223]))
    if call_tmp[571424]
    {
      (73420 call = newlo[73403] 1)
      (73426 call = newhi[73414] 0)
    }
    unknown tmp[395784] "maybe param" "temp"
    (395795 'move' tmp[395784](73465 call ! ambig[72752]))
    unknown call_tmp[571429] "expr temp" "maybe param" "maybe type" "temp"
    (571432 'move' call_tmp[571429](395797 call _cond_invalid tmp[395784]))
    if call_tmp[571429]
    {
      (395800 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown result[73481] "insert auto destroy"
    unknown tmp[506559] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506560] "maybe param" "temp"
    unknown call_tmp[571434] "expr temp" "maybe param" "maybe type" "temp"
    (571437 'move' call_tmp[571434](395785 call isTrue tmp[395784]))
    (506565 'move' tmp[506560](506563 call _cond_test call_tmp[571434]))
    if tmp[506560]
    {
      unknown tmp[395805] "maybe param" "temp"
      (395816 'move' tmp[395805](73468 call aligned _mt[232] this[72746]))
      unknown call_tmp[571441] "expr temp" "maybe param" "maybe type" "temp"
      (571444 'move' call_tmp[571441](395818 call _cond_invalid tmp[395805]))
      if call_tmp[571441]
      {
        (395821 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[506532] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506533] "maybe param" "temp"
      unknown call_tmp[571446] "expr temp" "maybe param" "maybe type" "temp"
      (571449 'move' call_tmp[571446](395806 call isTrue tmp[395805]))
      (506538 'move' tmp[506533](506536 call _cond_test call_tmp[571446]))
      if tmp[506533]
      {
        (506543 'move' tmp[506532](506540 '_paramFoldLogical' tmp[506533] 1))
      }
      {
        unknown tmp[506545] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[571453] "expr temp" "maybe param" "maybe type" "temp"
        (571456 'move' call_tmp[571453](73472 call aligned _mt[232] other[72741]))
        (506547 'move' tmp[506545](395810 call isTrue call_tmp[571453]))
        (506552 'move' tmp[506532](506549 '_paramFoldLogical' tmp[506533] tmp[506545]))
      }
      unknown tmp[506567] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506569 'move' tmp[506567](395788 call isTrue tmp[506532]))
      (506574 'move' tmp[506559](506571 '_paramFoldLogical' tmp[506560] tmp[506567]))
    }
    {
      (506579 'move' tmp[506559](506576 '_paramFoldLogical' tmp[506560] 0))
    }
    unknown call_tmp[571460] "expr temp" "maybe param" "maybe type" "temp"
    (571463 'move' call_tmp[571460](342665 call idxType _mt[232] this[72746]))
    unknown call_tmp[571465] "expr temp" "maybe param" "maybe type" "temp"
    (571468 'move' call_tmp[571465](73440 call computeBoundedType this[72746] other[72741]))
    unknown call_tmp[571472] "expr temp" "maybe param" "maybe type" "temp"
    (571475 'move' call_tmp[571472](73442 call stridable _mt[232] this[72746]))
    unknown call_tmp[571479] "expr temp" "maybe param" "maybe type" "temp"
    (571482 'move' call_tmp[571479](73446 call stridable _mt[232] other[72741]))
    unknown call_tmp[571484] "expr temp" "maybe param" "maybe type" "temp"
    (571487 'move' call_tmp[571484](73449 call | call_tmp[571472] call_tmp[571479]))
    unknown call_tmp[571491] "expr temp" "maybe param" "maybe type" "temp"
    (571494 'move' call_tmp[571491](73454 call(342673 call (partial) chpl_intToIdx _mt[232] this[72746]) newlo[73403]))
    unknown call_tmp[571498] "expr temp" "maybe param" "maybe type" "temp"
    (571501 'move' call_tmp[571498](73458 call(342678 call (partial) chpl_intToIdx _mt[232] this[72746]) newhi[73414]))
    unknown call_tmp[571505] "expr temp" "maybe param" "maybe type" "temp"
    (571508 'move' call_tmp[571505](73463 call(342684 call (partial) chpl_intToIdx _mt[232] this[72746]) 0))
    unknown call_tmp[571510] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (571513 'move' call_tmp[571510](691356 'new' range[66183](?) call_tmp[571460] call_tmp[571465] call_tmp[571484] call_tmp[571491] call_tmp[571498] newStride[73074] call_tmp[571505] tmp[506559]))
    (489785 'init var' result[73481] call_tmp[571510])
    unknown call_tmp[571517] "expr temp" "maybe param" "maybe type" "temp"
    (571520 'move' call_tmp[571517](73485 call stridable _mt[232] result[73481]))
    unknown call_tmp[571522] "expr temp" "maybe param" "maybe type" "temp"
    (571525 'move' call_tmp[571522](73685 call _cond_test call_tmp[571517]))
    if call_tmp[571522]
    {
      unknown call_tmp[571529] "expr temp" "maybe param" "maybe type" "temp"
      (571532 'move' call_tmp[571529](73490 call alignment _mt[232] this[72746]))
      unknown call_tmp[571534] "expr temp" "maybe param" "maybe type" "temp"
      (571537 'move' call_tmp[571534](73494 call chpl__idxToInt call_tmp[571529]))
      unknown call_tmp[571541] "expr temp" "maybe param" "maybe type" "temp"
      (571544 'move' call_tmp[571541](342694 call intIdxType _mt[232] this[72746]))
      unknown call_tmp[571546] "expr temp" "maybe param" "maybe type" "temp"
      (571549 'move' call_tmp[571546](73497 call _cast call_tmp[571541] st1[72993]))
      unknown call_tmp[571551] "expr temp" "maybe param" "maybe type" "temp"
      (571554 'move' call_tmp[571551](73499 call % call_tmp[571534] call_tmp[571546]))
      unknown call_tmp[571556] "maybe param" "maybe type" "temp"
      (571559 'move' call_tmp[571556](73502 call _cast int(64)[13] call_tmp[571551]))
      unknown al1[73504] "insert auto destroy"
      (489787 'init var' al1[73504] call_tmp[571556])
      unknown call_tmp[571563] "expr temp" "maybe param" "maybe type" "temp"
      (571566 'move' call_tmp[571563](73510 call alignment _mt[232] other[72741]))
      unknown call_tmp[571568] "expr temp" "maybe param" "maybe type" "temp"
      (571571 'move' call_tmp[571568](73514 call chpl__idxToInt call_tmp[571563]))
      unknown call_tmp[571575] "expr temp" "maybe param" "maybe type" "temp"
      (571578 'move' call_tmp[571575](73517 call intIdxType _mt[232] other[72741]))
      unknown call_tmp[571580] "expr temp" "maybe param" "maybe type" "temp"
      (571583 'move' call_tmp[571580](73520 call _cast call_tmp[571575] st2[73043]))
      unknown call_tmp[571585] "expr temp" "maybe param" "maybe type" "temp"
      (571588 'move' call_tmp[571585](73522 call % call_tmp[571568] call_tmp[571580]))
      unknown call_tmp[571590] "maybe param" "maybe type" "temp"
      (571593 'move' call_tmp[571590](73525 call _cast int(64)[13] call_tmp[571585]))
      unknown al2[73527] "insert auto destroy"
      (489789 'init var' al2[73527] call_tmp[571590])
      unknown call_tmp[571595] "expr temp" "maybe param" "maybe type" "temp"
      (571598 'move' call_tmp[571595](73532 call - al2[73527] al1[73504]))
      unknown call_tmp[571600] "expr temp" "maybe param" "maybe type" "temp"
      (571603 'move' call_tmp[571600](73535 call % call_tmp[571595] g[73088]))
      unknown call_tmp[571605] "expr temp" "maybe param" "maybe type" "temp"
      (571608 'move' call_tmp[571605](73538 call != call_tmp[571600] 0))
      unknown call_tmp[571610] "expr temp" "maybe param" "maybe type" "temp"
      (571613 'move' call_tmp[571610](73681 call _cond_test call_tmp[571605]))
      if call_tmp[571610]
      {
        unknown tmp[395826] "maybe param" "temp"
        (395837 'move' tmp[395826] 1)
        unknown call_tmp[571615] "expr temp" "maybe param" "maybe type" "temp"
        (571618 'move' call_tmp[571615](395839 call _cond_invalid tmp[395826]))
        if call_tmp[571615]
        {
          (395842 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[506586] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[506587] "maybe param" "temp"
        unknown call_tmp[571620] "expr temp" "maybe param" "maybe type" "temp"
        (571623 'move' call_tmp[571620](395827 call isTrue tmp[395826]))
        (506592 'move' tmp[506587](506590 call _cond_test call_tmp[571620]))
        if tmp[506587]
        {
          unknown tmp[506594] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[571625] "expr temp" "maybe param" "maybe type" "temp"
          (571628 'move' call_tmp[571625](73544 call isBoundedRange result[73481]))
          unknown call_tmp[571630] "expr temp" "maybe param" "maybe type" "temp"
          (571633 'move' call_tmp[571630](73545 call ! call_tmp[571625]))
          (506596 'move' tmp[506594](395830 call isTrue call_tmp[571630]))
          (506601 'move' tmp[506586](506598 '_paramFoldLogical' tmp[506587] tmp[506594]))
        }
        {
          (506606 'move' tmp[506586](506603 '_paramFoldLogical' tmp[506587] 0))
        }
        unknown call_tmp[571635] "expr temp" "maybe param" "maybe type" "temp"
        (571638 'move' call_tmp[571635](73574 call _cond_test tmp[506586]))
        if call_tmp[571635]
        {
          (73572 call boundsCheckHalt module=[244] HaltWrappers[197622] "could not represent range slice - it needs to be empty, but the slice type is not bounded")
        }
        unknown call_tmp[571642] "expr temp" "maybe param" "maybe type" "temp"
        (571645 'move' call_tmp[571642](73581 call _low _mt[232] result[73481]))
        unknown call_tmp[571649] "expr temp" "maybe param" "maybe type" "temp"
        (571652 'move' call_tmp[571649](342708 call intIdxType _mt[232] this[72746]))
        unknown call_tmp[571654] "expr temp" "maybe param" "maybe type" "temp"
        (571657 'move' call_tmp[571654](73586 call _cast call_tmp[571649] 1))
        (73588 call = call_tmp[571642] call_tmp[571654])
        unknown call_tmp[571661] "expr temp" "maybe param" "maybe type" "temp"
        (571664 'move' call_tmp[571661](73592 call _high _mt[232] result[73481]))
        unknown call_tmp[571668] "expr temp" "maybe param" "maybe type" "temp"
        (571671 'move' call_tmp[571668](342713 call intIdxType _mt[232] this[72746]))
        unknown call_tmp[571673] "expr temp" "maybe param" "maybe type" "temp"
        (571676 'move' call_tmp[571673](73597 call _cast call_tmp[571668] 0))
        (73599 call = call_tmp[571661] call_tmp[571673])
        unknown tmp[506613] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[506614] "maybe param" "temp"
        unknown call_tmp[571680] "expr temp" "maybe param" "maybe type" "temp"
        (571683 'move' call_tmp[571680](73607 call stride _mt[232] this[72746]))
        unknown call_tmp[571685] "expr temp" "maybe param" "maybe type" "temp"
        (571688 'move' call_tmp[571685](73611 call > call_tmp[571680] 0))
        (506619 'move' tmp[506614](506617 call _cond_test call_tmp[571685]))
        if tmp[506614]
        {
          unknown tmp[506621] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[571692] "expr temp" "maybe param" "maybe type" "temp"
          (571695 'move' call_tmp[571692](342719 call intIdxType _mt[232] this[72746]))
          (506623 'move' tmp[506621](73615 call _cast call_tmp[571692] 1))
          (506628 'move' tmp[506613](506625 '_paramFoldLogical' tmp[506614] tmp[506621]))
        }
        {
          unknown tmp[506630] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[571699] "expr temp" "maybe param" "maybe type" "temp"
          (571702 'move' call_tmp[571699](342723 call intIdxType _mt[232] this[72746]))
          (506632 'move' tmp[506630](73619 call _cast call_tmp[571699] 0))
          (506637 'move' tmp[506613](506634 '_paramFoldLogical' tmp[506614] tmp[506630]))
        }
        unknown call_tmp[571706] "expr temp" "maybe param" "maybe type" "temp"
        (571709 'move' call_tmp[571706](73603 call _alignment _mt[232] result[73481]))
        (73624 call = call_tmp[571706] tmp[506613])
      }
      {
        unknown call_tmp[571711] "expr temp" "maybe param" "maybe type" "temp"
        (571714 'move' call_tmp[571711](73629 call - al2[73527] al1[73504]))
        unknown call_tmp[571716] "maybe param" "maybe type" "temp"
        (571719 'move' call_tmp[571716](73632 call * call_tmp[571711] x[73090]))
        unknown offset[73634] "insert auto destroy"
        (489791 'init var' offset[73634] call_tmp[571716])
        unknown call_tmp[571721] "expr temp" "maybe param" "maybe type" "temp"
        (571724 'move' call_tmp[571721](73640 call < offset[73634] 0))
        unknown call_tmp[571726] "expr temp" "maybe param" "maybe type" "temp"
        (571729 'move' call_tmp[571726](73647 call _cond_test call_tmp[571721]))
        if call_tmp[571726]
        {
          (73644 call += offset[73634] lcm[73085])
        }
        unknown call_tmp[571733] "expr temp" "maybe param" "maybe type" "temp"
        (571736 'move' call_tmp[571733](73653 call _alignment _mt[232] result[73481]))
        unknown call_tmp[571740] "expr temp" "maybe param" "maybe type" "temp"
        (571743 'move' call_tmp[571740](342735 call intIdxType _mt[232] this[72746]))
        unknown call_tmp[571745] "expr temp" "maybe param" "maybe type" "temp"
        (571748 'move' call_tmp[571745](73658 call _cast call_tmp[571740] al1[73504]))
        unknown call_tmp[571752] "expr temp" "maybe param" "maybe type" "temp"
        (571755 'move' call_tmp[571752](342740 call intIdxType _mt[232] this[72746]))
        unknown call_tmp[571757] "expr temp" "maybe param" "maybe type" "temp"
        (571760 'move' call_tmp[571757](73662 call _cast call_tmp[571752] offset[73634]))
        unknown call_tmp[571764] "expr temp" "maybe param" "maybe type" "temp"
        (571767 'move' call_tmp[571764](342745 call intIdxType _mt[232] this[72746]))
        unknown call_tmp[571769] "expr temp" "maybe param" "maybe type" "temp"
        (571772 'move' call_tmp[571769](73666 call _cast call_tmp[571764] st1[72993]))
        unknown call_tmp[571774] "expr temp" "maybe param" "maybe type" "temp"
        (571777 'move' call_tmp[571774](73668 call * call_tmp[571757] call_tmp[571769]))
        unknown call_tmp[571781] "expr temp" "maybe param" "maybe type" "temp"
        (571784 'move' call_tmp[571781](342750 call intIdxType _mt[232] this[72746]))
        unknown call_tmp[571786] "expr temp" "maybe param" "maybe type" "temp"
        (571789 'move' call_tmp[571786](73672 call _cast call_tmp[571781] g[73088]))
        unknown call_tmp[571791] "expr temp" "maybe param" "maybe type" "temp"
        (571794 'move' call_tmp[571791](73674 call / call_tmp[571774] call_tmp[571786]))
        unknown call_tmp[571796] "expr temp" "maybe param" "maybe type" "temp"
        (571799 'move' call_tmp[571796](73676 call + call_tmp[571745] call_tmp[571791]))
        (73678 call = call_tmp[571733] call_tmp[571796])
      }
    }
    (461587 'move' ret[461582](461586 'deref' result[73481]))
    (461584 return ret[461582])
  }
  function chpl_count_help[73703](arg r[73700]:range[66183](?), arg i[73705]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (73737 call compilerError "count operator is not defined for unbounded ranges")
    (461589 return _void[47])
  }
  where {
    unknown call_tmp[571803] "expr temp" "maybe param" "maybe type" "temp"
    (571806 'move' call_tmp[571803](73708 call boundedType _mt[232] r[73700]))
    (73715 call == call_tmp[571803] boundedNone[66085])
  }
  function chpl_count_help[73747](arg r[73745]:_any[170](?), arg count[73750]:integral[188](?)) : _unknown[43]
  {
    unknown ret[461630] "RVV" "temp"
    unknown tmp[395847] "maybe param" "temp"
    (395858 'move' tmp[395847] 1)
    unknown call_tmp[571808] "expr temp" "maybe param" "maybe type" "temp"
    (571811 'move' call_tmp[571808](395860 call _cond_invalid tmp[395847]))
    if call_tmp[571808]
    {
      (395863 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506644] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506645] "maybe param" "temp"
    unknown call_tmp[571813] "expr temp" "maybe param" "maybe type" "temp"
    (571816 'move' call_tmp[571813](395848 call isTrue tmp[395847]))
    (506650 'move' tmp[506645](506648 call _cond_test call_tmp[571813]))
    if tmp[506645]
    {
      unknown tmp[506652] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[571820] "expr temp" "maybe param" "maybe type" "temp"
      (571823 'move' call_tmp[571820](73759 call(73755 call (partial) isAmbiguous _mt[232] r[73745])))
      (506654 'move' tmp[506652](395851 call isTrue call_tmp[571820]))
      (506659 'move' tmp[506644](506656 '_paramFoldLogical' tmp[506645] tmp[506652]))
    }
    {
      (506664 'move' tmp[506644](506661 '_paramFoldLogical' tmp[506645] 0))
    }
    unknown call_tmp[571825] "expr temp" "maybe param" "maybe type" "temp"
    (571828 'move' call_tmp[571825](73784 call _cond_test tmp[506644]))
    if call_tmp[571825]
    {
      (73782 call boundsCheckHalt "count -- Cannot count off elements from a range which is ambiguously aligned.")
    }
    unknown resultType[73794] "insert auto destroy" "type variable"(73791 call intIdxType _mt[232] r[73745])
    (489797 'move' resultType[73794](489794 call intIdxType _mt[232] r[73745]))
    unknown strType[73801] "insert auto destroy" "type variable"(73800 call chpl__rangeStrideType resultType[73794])
    (489802 'move' strType[73801](489800 call chpl__rangeStrideType resultType[73794]))
    function absSameType[73808](arg str[73806]:_any[170](?)) : _unknown[43]
    {
      unknown ret[461593] "RVV" "temp"
      unknown call_tmp[571836] "expr temp" "maybe param" "maybe type" "temp"
      (571839 'move' call_tmp[571836](73811 call stride _mt[232] r[73745]))
      unknown call_tmp[571841] "expr temp" "maybe param" "maybe type" "temp"
      (571844 'move' call_tmp[571841](73815 call < call_tmp[571836] 0))
      unknown call_tmp[571846] "expr temp" "maybe param" "maybe type" "temp"
      (571849 'move' call_tmp[571846](73839 call _cond_test call_tmp[571841]))
      if call_tmp[571846]
      {
        unknown call_tmp[571853] "expr temp" "maybe param" "maybe type" "temp"
        (571856 'move' call_tmp[571853](73818 call stride _mt[232] r[73745]))
        unknown call_tmp[571858] "expr temp" "maybe param" "maybe type" "temp"
        (571861 'move' call_tmp[571858](73821 call - call_tmp[571853]))
        unknown call_tmp[571863] "expr temp" "maybe param" "maybe type" "temp"
        (571866 'move' call_tmp[571863](73824 call _cast resultType[73794] call_tmp[571858]))
        (461598 'move' ret[461593](461597 'deref' call_tmp[571863]))
        gotoReturn _end_absSameType[461591] _end_absSameType[461591]
      }
      {
        unknown call_tmp[571870] "expr temp" "maybe param" "maybe type" "temp"
        (571873 'move' call_tmp[571870](73830 call stride _mt[232] r[73745]))
        unknown call_tmp[571875] "expr temp" "maybe param" "maybe type" "temp"
        (571878 'move' call_tmp[571875](73834 call _cast resultType[73794] call_tmp[571870]))
        (461603 'move' ret[461593](461602 'deref' call_tmp[571875]))
        gotoReturn _end_absSameType[461591] _end_absSameType[461591]
      }
      label _end_absSameType[461591]
      (461595 return ret[461593])
    }
    unknown call_tmp[571880] "expr temp" "maybe param" "maybe type" "temp"
    (571883 'move' call_tmp[571880](73848 call == count[73750] 0))
    unknown call_tmp[571885] "expr temp" "maybe param" "maybe type" "temp"
    (571888 'move' call_tmp[571885](74047 call _cond_test call_tmp[571880]))
    if call_tmp[571885]
    {
      unknown call_tmp[571892] "expr temp" "maybe param" "maybe type" "temp"
      (571895 'move' call_tmp[571892](73855 call(73851 call (partial) hasLowBound _mt[232] r[73745])))
      unknown call_tmp[571897] "expr temp" "maybe param" "maybe type" "temp"
      (571900 'move' call_tmp[571897](74041 call _cond_test call_tmp[571892]))
      if call_tmp[571897]
      {
        unknown call_tmp[571904] "expr temp" "maybe param" "maybe type" "temp"
        (571907 'move' call_tmp[571904](73858 call idxType _mt[232] r[73745]))
        unknown call_tmp[571911] "expr temp" "maybe param" "maybe type" "temp"
        (571914 'move' call_tmp[571911](73869 call stridable _mt[232] r[73745]))
        unknown call_tmp[571918] "expr temp" "maybe param" "maybe type" "temp"
        (571921 'move' call_tmp[571918](73875 call idxType _mt[232] r[73745]))
        unknown call_tmp[571925] "expr temp" "maybe param" "maybe type" "temp"
        (571928 'move' call_tmp[571925](73880 call _low _mt[232] r[73745]))
        unknown call_tmp[571930] "expr temp" "maybe param" "maybe type" "temp"
        (571933 'move' call_tmp[571930](73883 call chpl__intToIdx call_tmp[571918] call_tmp[571925]))
        unknown call_tmp[571937] "expr temp" "maybe param" "maybe type" "temp"
        (571940 'move' call_tmp[571937](73887 call idxType _mt[232] r[73745]))
        unknown call_tmp[571944] "expr temp" "maybe param" "maybe type" "temp"
        (571947 'move' call_tmp[571944](73892 call _low _mt[232] r[73745]))
        unknown call_tmp[571951] "expr temp" "maybe param" "maybe type" "temp"
        (571954 'move' call_tmp[571951](73897 call stride _mt[232] r[73745]))
        unknown call_tmp[571956] "expr temp" "maybe param" "maybe type" "temp"
        (571959 'move' call_tmp[571956](73901 call absSameType call_tmp[571951]))
        unknown call_tmp[571961] "expr temp" "maybe param" "maybe type" "temp"
        (571964 'move' call_tmp[571961](73902 call - call_tmp[571944] call_tmp[571956]))
        unknown call_tmp[571966] "expr temp" "maybe param" "maybe type" "temp"
        (571969 'move' call_tmp[571966](73904 call chpl__intToIdx call_tmp[571937] call_tmp[571961]))
        unknown call_tmp[571973] "expr temp" "maybe param" "maybe type" "temp"
        (571976 'move' call_tmp[571973](73907 call stride _mt[232] r[73745]))
        unknown call_tmp[571980] "expr temp" "maybe param" "maybe type" "temp"
        (571983 'move' call_tmp[571980](73913 call idxType _mt[232] r[73745]))
        unknown call_tmp[571987] "expr temp" "maybe param" "maybe type" "temp"
        (571990 'move' call_tmp[571987](73918 call _alignment _mt[232] r[73745]))
        unknown call_tmp[571992] "expr temp" "maybe param" "maybe type" "temp"
        (571995 'move' call_tmp[571992](73921 call chpl__intToIdx call_tmp[571980] call_tmp[571987]))
        unknown call_tmp[571999] "expr temp" "maybe param" "maybe type" "temp"
        (572002 'move' call_tmp[571999](73924 call aligned _mt[232] r[73745]))
        unknown call_tmp[572004] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (572007 'move' call_tmp[572004](691357 'new' range[66183](?)(idxType = call_tmp[571904])(boundedType = bounded[66079])(stridable = call_tmp[571911])(_low = call_tmp[571930])(_high = call_tmp[571966])(_stride = call_tmp[571973])(_alignment = call_tmp[571992])(_aligned = call_tmp[571999])))
        (461635 'move' ret[461630](461634 'deref' call_tmp[572004]))
        gotoReturn _end_chpl_count_help[461628] _end_chpl_count_help[461628]
      }
      {
        unknown call_tmp[572011] "expr temp" "maybe param" "maybe type" "temp"
        (572014 'move' call_tmp[572011](73938 call(73934 call (partial) hasHighBound _mt[232] r[73745])))
        unknown call_tmp[572016] "expr temp" "maybe param" "maybe type" "temp"
        (572019 'move' call_tmp[572016](74037 call _cond_test call_tmp[572011]))
        if call_tmp[572016]
        {
          unknown call_tmp[572023] "expr temp" "maybe param" "maybe type" "temp"
          (572026 'move' call_tmp[572023](73941 call idxType _mt[232] r[73745]))
          unknown call_tmp[572030] "expr temp" "maybe param" "maybe type" "temp"
          (572033 'move' call_tmp[572030](73952 call stridable _mt[232] r[73745]))
          unknown call_tmp[572037] "expr temp" "maybe param" "maybe type" "temp"
          (572040 'move' call_tmp[572037](73958 call idxType _mt[232] r[73745]))
          unknown call_tmp[572044] "expr temp" "maybe param" "maybe type" "temp"
          (572047 'move' call_tmp[572044](73963 call _high _mt[232] r[73745]))
          unknown call_tmp[572051] "expr temp" "maybe param" "maybe type" "temp"
          (572054 'move' call_tmp[572051](73968 call stride _mt[232] r[73745]))
          unknown call_tmp[572056] "expr temp" "maybe param" "maybe type" "temp"
          (572059 'move' call_tmp[572056](73972 call absSameType call_tmp[572051]))
          unknown call_tmp[572061] "expr temp" "maybe param" "maybe type" "temp"
          (572064 'move' call_tmp[572061](73973 call + call_tmp[572044] call_tmp[572056]))
          unknown call_tmp[572066] "expr temp" "maybe param" "maybe type" "temp"
          (572069 'move' call_tmp[572066](73975 call chpl__intToIdx call_tmp[572037] call_tmp[572061]))
          unknown call_tmp[572073] "expr temp" "maybe param" "maybe type" "temp"
          (572076 'move' call_tmp[572073](73979 call idxType _mt[232] r[73745]))
          unknown call_tmp[572080] "expr temp" "maybe param" "maybe type" "temp"
          (572083 'move' call_tmp[572080](73984 call _high _mt[232] r[73745]))
          unknown call_tmp[572085] "expr temp" "maybe param" "maybe type" "temp"
          (572088 'move' call_tmp[572085](73987 call chpl__intToIdx call_tmp[572073] call_tmp[572080]))
          unknown call_tmp[572092] "expr temp" "maybe param" "maybe type" "temp"
          (572095 'move' call_tmp[572092](73990 call stride _mt[232] r[73745]))
          unknown call_tmp[572099] "expr temp" "maybe param" "maybe type" "temp"
          (572102 'move' call_tmp[572099](73996 call idxType _mt[232] r[73745]))
          unknown call_tmp[572106] "expr temp" "maybe param" "maybe type" "temp"
          (572109 'move' call_tmp[572106](74001 call _alignment _mt[232] r[73745]))
          unknown call_tmp[572111] "expr temp" "maybe param" "maybe type" "temp"
          (572114 'move' call_tmp[572111](74004 call chpl__intToIdx call_tmp[572099] call_tmp[572106]))
          unknown call_tmp[572118] "expr temp" "maybe param" "maybe type" "temp"
          (572121 'move' call_tmp[572118](74007 call aligned _mt[232] r[73745]))
          unknown call_tmp[572123] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (572126 'move' call_tmp[572123](691358 'new' range[66183](?)(idxType = call_tmp[572023])(boundedType = bounded[66079])(stridable = call_tmp[572030])(_low = call_tmp[572066])(_high = call_tmp[572085])(_stride = call_tmp[572092])(_alignment = call_tmp[572111])(_aligned = call_tmp[572118])))
          (461640 'move' ret[461630](461639 'deref' call_tmp[572123]))
          gotoReturn _end_chpl_count_help[461628] _end_chpl_count_help[461628]
        }
        {
          (74034 call halt "Internal error: Unexpected case in chpl_count_help")
        }
      }
    }
    unknown tmp[395868] "maybe param" "temp"
    unknown tmp[395889] "maybe param" "temp"
    (395900 'move' tmp[395889] 1)
    unknown call_tmp[572128] "expr temp" "maybe param" "maybe type" "temp"
    (572131 'move' call_tmp[572128](395902 call _cond_invalid tmp[395889]))
    if call_tmp[572128]
    {
      (395905 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506671] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506672] "maybe param" "temp"
    unknown call_tmp[572133] "expr temp" "maybe param" "maybe type" "temp"
    (572136 'move' call_tmp[572133](395890 call isTrue tmp[395889]))
    (506677 'move' tmp[506672](506675 call _cond_test call_tmp[572133]))
    if tmp[506672]
    {
      unknown tmp[506679] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572140] "expr temp" "maybe param" "maybe type" "temp"
      (572143 'move' call_tmp[572140](74057 call(74053 call (partial) hasFirst _mt[232] r[73745])))
      unknown call_tmp[572145] "expr temp" "maybe param" "maybe type" "temp"
      (572148 'move' call_tmp[572145](74058 call ! call_tmp[572140]))
      (506681 'move' tmp[506679](395893 call isTrue call_tmp[572145]))
      (506686 'move' tmp[506671](506683 '_paramFoldLogical' tmp[506672] tmp[506679]))
    }
    {
      (506691 'move' tmp[506671](506688 '_paramFoldLogical' tmp[506672] 0))
    }
    (395879 'move' tmp[395868] tmp[506671])
    unknown call_tmp[572150] "expr temp" "maybe param" "maybe type" "temp"
    (572153 'move' call_tmp[572150](395881 call _cond_invalid tmp[395868]))
    if call_tmp[572150]
    {
      (395884 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506699] "maybe param" "temp"
    unknown call_tmp[572155] "expr temp" "maybe param" "maybe type" "temp"
    (572158 'move' call_tmp[572155](395869 call isTrue tmp[395868]))
    (506704 'move' tmp[506699](506702 call _cond_test call_tmp[572155]))
    if tmp[506699]
    {
      unknown tmp[506706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572160] "expr temp" "maybe param" "maybe type" "temp"
      (572163 'move' call_tmp[572160](74064 call > count[73750] 0))
      (506708 'move' tmp[506706](395872 call isTrue call_tmp[572160]))
      (506713 'move' tmp[506698](506710 '_paramFoldLogical' tmp[506699] tmp[506706]))
    }
    {
      (506718 'move' tmp[506698](506715 '_paramFoldLogical' tmp[506699] 0))
    }
    unknown call_tmp[572165] "expr temp" "maybe param" "maybe type" "temp"
    (572168 'move' call_tmp[572165](74088 call _cond_test tmp[506698]))
    if call_tmp[572165]
    {
      (74086 call boundsCheckHalt "With a positive count, the range must have a first index.")
    }
    unknown tmp[395910] "maybe param" "temp"
    unknown tmp[395931] "maybe param" "temp"
    (395942 'move' tmp[395931] 1)
    unknown call_tmp[572170] "expr temp" "maybe param" "maybe type" "temp"
    (572173 'move' call_tmp[572170](395944 call _cond_invalid tmp[395931]))
    if call_tmp[572170]
    {
      (395947 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506726] "maybe param" "temp"
    unknown call_tmp[572175] "expr temp" "maybe param" "maybe type" "temp"
    (572178 'move' call_tmp[572175](395932 call isTrue tmp[395931]))
    (506731 'move' tmp[506726](506729 call _cond_test call_tmp[572175]))
    if tmp[506726]
    {
      unknown tmp[506733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572182] "expr temp" "maybe param" "maybe type" "temp"
      (572185 'move' call_tmp[572182](74101 call(74097 call (partial) hasLast _mt[232] r[73745])))
      unknown call_tmp[572187] "expr temp" "maybe param" "maybe type" "temp"
      (572190 'move' call_tmp[572187](74102 call ! call_tmp[572182]))
      (506735 'move' tmp[506733](395935 call isTrue call_tmp[572187]))
      (506740 'move' tmp[506725](506737 '_paramFoldLogical' tmp[506726] tmp[506733]))
    }
    {
      (506745 'move' tmp[506725](506742 '_paramFoldLogical' tmp[506726] 0))
    }
    (395921 'move' tmp[395910] tmp[506725])
    unknown call_tmp[572192] "expr temp" "maybe param" "maybe type" "temp"
    (572195 'move' call_tmp[572192](395923 call _cond_invalid tmp[395910]))
    if call_tmp[572192]
    {
      (395926 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506753] "maybe param" "temp"
    unknown call_tmp[572197] "expr temp" "maybe param" "maybe type" "temp"
    (572200 'move' call_tmp[572197](395911 call isTrue tmp[395910]))
    (506758 'move' tmp[506753](506756 call _cond_test call_tmp[572197]))
    if tmp[506753]
    {
      unknown tmp[506760] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572202] "expr temp" "maybe param" "maybe type" "temp"
      (572205 'move' call_tmp[572202](74108 call < count[73750] 0))
      (506762 'move' tmp[506760](395914 call isTrue call_tmp[572202]))
      (506767 'move' tmp[506752](506764 '_paramFoldLogical' tmp[506753] tmp[506760]))
    }
    {
      (506772 'move' tmp[506752](506769 '_paramFoldLogical' tmp[506753] 0))
    }
    unknown call_tmp[572207] "expr temp" "maybe param" "maybe type" "temp"
    (572210 'move' call_tmp[572207](74132 call _cond_test tmp[506752]))
    if call_tmp[572207]
    {
      (74130 call boundsCheckHalt "With a negative count, the range must have a last index.")
    }
    unknown tmp[395952] "maybe param" "temp"
    unknown tmp[395973] "maybe param" "temp"
    (395984 'move' tmp[395973] 1)
    unknown call_tmp[572212] "expr temp" "maybe param" "maybe type" "temp"
    (572215 'move' call_tmp[572212](395986 call _cond_invalid tmp[395973]))
    if call_tmp[572212]
    {
      (395989 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506780] "maybe param" "temp"
    unknown call_tmp[572217] "expr temp" "maybe param" "maybe type" "temp"
    (572220 'move' call_tmp[572217](395974 call isTrue tmp[395973]))
    (506785 'move' tmp[506780](506783 call _cond_test call_tmp[572217]))
    if tmp[506780]
    {
      unknown tmp[506787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572224] "expr temp" "maybe param" "maybe type" "temp"
      (572227 'move' call_tmp[572224](74139 call boundedType _mt[232] r[73745]))
      unknown call_tmp[572229] "expr temp" "maybe param" "maybe type" "temp"
      (572232 'move' call_tmp[572229](74146 call == call_tmp[572224] bounded[66079]))
      (506789 'move' tmp[506787](395977 call isTrue call_tmp[572229]))
      (506794 'move' tmp[506779](506791 '_paramFoldLogical' tmp[506780] tmp[506787]))
    }
    {
      (506799 'move' tmp[506779](506796 '_paramFoldLogical' tmp[506780] 0))
    }
    (395963 'move' tmp[395952] tmp[506779])
    unknown call_tmp[572234] "expr temp" "maybe param" "maybe type" "temp"
    (572237 'move' call_tmp[572234](395965 call _cond_invalid tmp[395952]))
    if call_tmp[572234]
    {
      (395968 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[506806] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506807] "maybe param" "temp"
    unknown call_tmp[572239] "expr temp" "maybe param" "maybe type" "temp"
    (572242 'move' call_tmp[572239](395953 call isTrue tmp[395952]))
    (506812 'move' tmp[506807](506810 call _cond_test call_tmp[572239]))
    if tmp[506807]
    {
      unknown tmp[506814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572244] "expr temp" "maybe param" "maybe type" "temp"
      (572247 'move' call_tmp[572244](74164 call uint(64)[107] 64))
      unknown call_tmp[572249] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (572252 'move' call_tmp[572249](74154 'typeof' count[73750]))
      unknown call_tmp[572254] "expr temp" "maybe param" "maybe type" "temp"
      (572257 'move' call_tmp[572254](74156 call chpl__maxIntTypeSameSign call_tmp[572249]))
      unknown call_tmp[572259] "expr temp" "maybe param" "maybe type" "temp"
      (572262 'move' call_tmp[572259](74157 call _cast call_tmp[572254] count[73750]))
      unknown call_tmp[572264] "expr temp" "maybe param" "maybe type" "temp"
      (572267 'move' call_tmp[572264](74160 call abs call_tmp[572259]))
      unknown call_tmp[572269] "expr temp" "maybe param" "maybe type" "temp"
      (572272 'move' call_tmp[572269](74165 call _cast call_tmp[572244] call_tmp[572264]))
      unknown call_tmp[572274] "expr temp" "maybe param" "maybe type" "temp"
      (572277 'move' call_tmp[572274](74174 call uint(64)[107] 64))
      unknown call_tmp[572281] "expr temp" "maybe param" "maybe type" "temp"
      (572284 'move' call_tmp[572281](74168 call length _mt[232] r[73745]))
      unknown call_tmp[572286] "expr temp" "maybe param" "maybe type" "temp"
      (572289 'move' call_tmp[572286](74175 call _cast call_tmp[572274] call_tmp[572281]))
      unknown call_tmp[572291] "expr temp" "maybe param" "maybe type" "temp"
      (572294 'move' call_tmp[572291](74177 call > call_tmp[572269] call_tmp[572286]))
      (506816 'move' tmp[506814](395956 call isTrue call_tmp[572291]))
      (506821 'move' tmp[506806](506818 '_paramFoldLogical' tmp[506807] tmp[506814]))
    }
    {
      (506826 'move' tmp[506806](506823 '_paramFoldLogical' tmp[506807] 0))
    }
    unknown call_tmp[572296] "expr temp" "maybe param" "maybe type" "temp"
    (572299 'move' call_tmp[572296](74229 call _cond_test tmp[506806]))
    if call_tmp[572296]
    {
      unknown call_tmp[572301] "expr temp" "maybe param" "maybe type" "temp"
      (572304 'move' call_tmp[572301](74201 call abs count[73750]))
      unknown call_tmp[572306] "expr temp" "maybe param" "maybe type" "temp"
      (572309 'move' call_tmp[572306](74203 call _cast string[24] call_tmp[572301]))
      unknown call_tmp[572311] "expr temp" "maybe param" "maybe type" "temp"
      (572314 'move' call_tmp[572311](74205 call + "bounded range is too small to access " call_tmp[572306]))
      unknown call_tmp[572316] "expr temp" "maybe param" "maybe type" "temp"
      (572319 'move' call_tmp[572316](74223 call + call_tmp[572311] " elements"))
      (74226 call boundsCheckHalt call_tmp[572316])
    }
    function chpl__computeTypeForCountMath[74237](arg t1[74235]:_any[170](?), arg t2[74239]:_any[170](?)) type : _unknown[43]
    {
      unknown ret[461609] "RVV" "temp" "type variable"
      unknown call_tmp[572321] "expr temp" "maybe param" "maybe type" "temp"
      (572324 'move' call_tmp[572321](74243 call == t1[74235] t2[74239]))
      unknown call_tmp[572326] "expr temp" "maybe param" "maybe type" "temp"
      (572329 'move' call_tmp[572326](74295 call _cond_test call_tmp[572321]))
      if call_tmp[572326]
      {
        unknown call_tmp[572331] "expr temp" "maybe param" "maybe type" "temp"
        (572334 'move' call_tmp[572331](74248 call chpl__idxTypeToIntIdxType t1[74235]))
        (461614 'move' ret[461609](461613 'deref' call_tmp[572331]))
        gotoReturn _end_chpl__computeTypeForCountMath[461607] _end_chpl__computeTypeForCountMath[461607]
      }
      {
        unknown tmp[395994] "maybe param" "temp"
        unknown call_tmp[572336] "expr temp" "maybe param" "maybe type" "temp"
        (572339 'move' call_tmp[572336](74255 call numBits t1[74235]))
        (396005 'move' tmp[395994](74257 call == call_tmp[572336] 64))
        unknown call_tmp[572341] "expr temp" "maybe param" "maybe type" "temp"
        (572344 'move' call_tmp[572341](396007 call _cond_invalid tmp[395994]))
        if call_tmp[572341]
        {
          (396010 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[506833] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[506834] "maybe param" "temp"
        unknown call_tmp[572346] "expr temp" "maybe param" "maybe type" "temp"
        (572349 'move' call_tmp[572346](395995 call isTrue tmp[395994]))
        (506839 'move' tmp[506834](506837 call _cond_test call_tmp[572346]))
        if tmp[506834]
        {
          (506844 'move' tmp[506833](506841 '_paramFoldLogical' tmp[506834] 1))
        }
        {
          unknown tmp[506846] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[572351] "expr temp" "maybe param" "maybe type" "temp"
          (572354 'move' call_tmp[572351](74262 call numBits t2[74239]))
          unknown call_tmp[572356] "expr temp" "maybe param" "maybe type" "temp"
          (572359 'move' call_tmp[572356](74264 call == call_tmp[572351] 64))
          (506848 'move' tmp[506846](395999 call isTrue call_tmp[572356]))
          (506853 'move' tmp[506833](506850 '_paramFoldLogical' tmp[506834] tmp[506846]))
        }
        unknown call_tmp[572361] "expr temp" "maybe param" "maybe type" "temp"
        (572364 'move' call_tmp[572361](74291 call _cond_test tmp[506833]))
        if call_tmp[572361]
        {
          unknown call_tmp[572366] "expr temp" "maybe param" "maybe type" "temp"
          (572369 'move' call_tmp[572366](74271 call int(64)[13] 64))
          (461619 'move' ret[461609](461618 'deref' call_tmp[572366]))
          gotoReturn _end_chpl__computeTypeForCountMath[461607] _end_chpl__computeTypeForCountMath[461607]
        }
        {
          unknown x1[74276] "insert auto destroy"
          (489804 'default init var' x1[74276] t1[74235])
          unknown x2[74281] "insert auto destroy"
          (489806 'default init var' x2[74281] t2[74239])
          { scopeless type
            unknown call_type_tmp[443131] "expr temp" "maybe type" "temp" "type variable"
            unknown call_tmp[572371] "expr temp" "maybe param" "maybe type" "temp"
            (572374 'move' call_tmp[572371](74286 call + x1[74276] x2[74281]))
            (443135 'move' call_type_tmp[443131](74288 'typeof' call_tmp[572371]))
          }
          (461624 'move' ret[461609](461623 'deref' call_type_tmp[443131]))
          gotoReturn _end_chpl__computeTypeForCountMath[461607] _end_chpl__computeTypeForCountMath[461607]
        }
      }
      label _end_chpl__computeTypeForCountMath[461607]
      (461611 return ret[461609])
    }
    unknown call_tmp[572376] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (572379 'move' call_tmp[572376](74307 'typeof' count[73750]))
    unknown computeType[74309] "insert auto destroy" "type variable"(74308 call chpl__computeTypeForCountMath resultType[73794] call_tmp[572376])
    unknown call_tmp[572381] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (572384 'move' call_tmp[572381](489811 'typeof' count[73750]))
    (489813 'move' computeType[74309](489809 call chpl__computeTypeForCountMath resultType[73794] call_tmp[572381]))
    unknown signedComputeType[74316] "insert auto destroy" "type variable"(74315 call chpl__signedType computeType[74309])
    (489818 'move' signedComputeType[74316](489816 call chpl__signedType computeType[74309]))
    unknown call_tmp[572386] "expr temp" "maybe param" "maybe type" "temp"
    (572389 'move' call_tmp[572386](74321 call _cast signedComputeType[74316] count[73750]))
    unknown call_tmp[572393] "expr temp" "maybe param" "maybe type" "temp"
    (572396 'move' call_tmp[572393](74324 call stride _mt[232] r[73745]))
    unknown call_tmp[572398] "expr temp" "maybe param" "maybe type" "temp"
    (572401 'move' call_tmp[572398](74328 call _cast signedComputeType[74316] call_tmp[572393]))
    unknown call_tmp[572403] "maybe param" "maybe type" "temp"
    (572406 'move' call_tmp[572403](74330 call * call_tmp[572386] call_tmp[572398]))
    unknown diff[74332] "insert auto destroy"
    (489820 'init var' diff[74332] call_tmp[572403])
    unknown lo[74365] "insert auto destroy"
    unknown tmp[506860] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506861] "maybe param" "temp"
    unknown call_tmp[572408] "expr temp" "maybe param" "maybe type" "temp"
    (572411 'move' call_tmp[572408](74338 call > diff[74332] 0))
    (506866 'move' tmp[506861](506864 call _cond_test call_tmp[572408]))
    if tmp[506861]
    {
      unknown tmp[506868] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506870 'move' tmp[506868](74341 call _low _mt[232] r[73745]))
      (506875 'move' tmp[506860](506872 '_paramFoldLogical' tmp[506861] tmp[506868]))
    }
    {
      unknown tmp[506877] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572417] "expr temp" "maybe param" "maybe type" "temp"
      (572420 'move' call_tmp[572417](74346 call _high _mt[232] r[73745]))
      unknown call_tmp[572422] "expr temp" "maybe param" "maybe type" "temp"
      (572425 'move' call_tmp[572422](74350 call _cast computeType[74309] call_tmp[572417]))
      unknown call_tmp[572427] "expr temp" "maybe param" "maybe type" "temp"
      (572430 'move' call_tmp[572427](74355 call + diff[74332] 1))
      unknown call_tmp[572432] "expr temp" "maybe param" "maybe type" "temp"
      (572435 'move' call_tmp[572432](74358 call _cast computeType[74309] call_tmp[572427]))
      (506879 'move' tmp[506877](74361 call chpl__add call_tmp[572422] call_tmp[572432] resultType[73794]))
      (506884 'move' tmp[506860](506881 '_paramFoldLogical' tmp[506861] tmp[506877]))
    }
    (489822 'init var' lo[74365] tmp[506860] resultType[73794])
    unknown hi[74398] "insert auto destroy"
    unknown tmp[506891] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506892] "maybe param" "temp"
    unknown call_tmp[572437] "expr temp" "maybe param" "maybe type" "temp"
    (572440 'move' call_tmp[572437](74371 call < diff[74332] 0))
    (506897 'move' tmp[506892](506895 call _cond_test call_tmp[572437]))
    if tmp[506892]
    {
      unknown tmp[506899] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (506901 'move' tmp[506899](74374 call _high _mt[232] r[73745]))
      (506906 'move' tmp[506891](506903 '_paramFoldLogical' tmp[506892] tmp[506899]))
    }
    {
      unknown tmp[506908] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572446] "expr temp" "maybe param" "maybe type" "temp"
      (572449 'move' call_tmp[572446](74379 call _low _mt[232] r[73745]))
      unknown call_tmp[572451] "expr temp" "maybe param" "maybe type" "temp"
      (572454 'move' call_tmp[572451](74383 call _cast computeType[74309] call_tmp[572446]))
      unknown call_tmp[572456] "expr temp" "maybe param" "maybe type" "temp"
      (572459 'move' call_tmp[572456](74388 call _cast computeType[74309] diff[74332]))
      unknown call_tmp[572461] "expr temp" "maybe param" "maybe type" "temp"
      (572464 'move' call_tmp[572461](74391 call - call_tmp[572456] 1))
      (506910 'move' tmp[506908](74394 call chpl__add call_tmp[572451] call_tmp[572461] resultType[73794]))
      (506915 'move' tmp[506891](506912 '_paramFoldLogical' tmp[506892] tmp[506908]))
    }
    (489824 'init var' hi[74398] tmp[506891] resultType[73794])
    unknown call_tmp[572468] "expr temp" "maybe param" "maybe type" "temp"
    (572471 'move' call_tmp[572468](74402 call stridable _mt[232] r[73745]))
    unknown call_tmp[572473] "expr temp" "maybe param" "maybe type" "temp"
    (572476 'move' call_tmp[572473](74462 call _cond_test call_tmp[572468]))
    if call_tmp[572473]
    {
      unknown tmp[396015] "maybe param" "temp"
      (396026 'move' tmp[396015](74410 call(74406 call (partial) hasLowBound _mt[232] r[73745])))
      unknown call_tmp[572480] "expr temp" "maybe param" "maybe type" "temp"
      (572483 'move' call_tmp[572480](396028 call _cond_invalid tmp[396015]))
      if call_tmp[572480]
      {
        (396031 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[506922] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506923] "maybe param" "temp"
      unknown call_tmp[572485] "expr temp" "maybe param" "maybe type" "temp"
      (572488 'move' call_tmp[572485](396016 call isTrue tmp[396015]))
      (506928 'move' tmp[506923](506926 call _cond_test call_tmp[572485]))
      if tmp[506923]
      {
        unknown tmp[506930] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[572492] "expr temp" "maybe param" "maybe type" "temp"
        (572495 'move' call_tmp[572492](74413 call _low _mt[232] r[73745]))
        unknown call_tmp[572497] "expr temp" "maybe param" "maybe type" "temp"
        (572500 'move' call_tmp[572497](74416 call < lo[74365] call_tmp[572492]))
        (506932 'move' tmp[506930](396019 call isTrue call_tmp[572497]))
        (506937 'move' tmp[506922](506934 '_paramFoldLogical' tmp[506923] tmp[506930]))
      }
      {
        (506942 'move' tmp[506922](506939 '_paramFoldLogical' tmp[506923] 0))
      }
      unknown call_tmp[572502] "expr temp" "maybe param" "maybe type" "temp"
      (572505 'move' call_tmp[572502](74428 call _cond_test tmp[506922]))
      if call_tmp[572502]
      {
        unknown call_tmp[572509] "expr temp" "maybe param" "maybe type" "temp"
        (572512 'move' call_tmp[572509](74422 call _low _mt[232] r[73745]))
        (74425 call = lo[74365] call_tmp[572509])
      }
      unknown tmp[396036] "maybe param" "temp"
      (396047 'move' tmp[396036](74439 call(74435 call (partial) hasHighBound _mt[232] r[73745])))
      unknown call_tmp[572516] "expr temp" "maybe param" "maybe type" "temp"
      (572519 'move' call_tmp[572516](396049 call _cond_invalid tmp[396036]))
      if call_tmp[572516]
      {
        (396052 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[506949] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[506950] "maybe param" "temp"
      unknown call_tmp[572521] "expr temp" "maybe param" "maybe type" "temp"
      (572524 'move' call_tmp[572521](396037 call isTrue tmp[396036]))
      (506955 'move' tmp[506950](506953 call _cond_test call_tmp[572521]))
      if tmp[506950]
      {
        unknown tmp[506957] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[572528] "expr temp" "maybe param" "maybe type" "temp"
        (572531 'move' call_tmp[572528](74442 call _high _mt[232] r[73745]))
        unknown call_tmp[572533] "expr temp" "maybe param" "maybe type" "temp"
        (572536 'move' call_tmp[572533](74445 call > hi[74398] call_tmp[572528]))
        (506959 'move' tmp[506957](396040 call isTrue call_tmp[572533]))
        (506964 'move' tmp[506949](506961 '_paramFoldLogical' tmp[506950] tmp[506957]))
      }
      {
        (506969 'move' tmp[506949](506966 '_paramFoldLogical' tmp[506950] 0))
      }
      unknown call_tmp[572538] "expr temp" "maybe param" "maybe type" "temp"
      (572541 'move' call_tmp[572538](74457 call _cond_test tmp[506949]))
      if call_tmp[572538]
      {
        unknown call_tmp[572545] "expr temp" "maybe param" "maybe type" "temp"
        (572548 'move' call_tmp[572545](74451 call _high _mt[232] r[73745]))
        (74454 call = hi[74398] call_tmp[572545])
      }
    }
    unknown tmp[506976] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[506977] "maybe param" "temp"
    unknown call_tmp[572552] "expr temp" "maybe param" "maybe type" "temp"
    (572555 'move' call_tmp[572552](74500 call stridable _mt[232] r[73745]))
    (506982 'move' tmp[506977](506980 call _cond_test call_tmp[572552]))
    if tmp[506977]
    {
      unknown tmp[506984] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[572559] "expr temp" "maybe param" "maybe type" "temp"
      (572562 'move' call_tmp[572559](74504 call stride _mt[232] r[73745]))
      (506986 'move' tmp[506984](74508 call _cast strType[73801] call_tmp[572559]))
      (506991 'move' tmp[506976](506988 '_paramFoldLogical' tmp[506977] tmp[506984]))
    }
    {
      (506996 'move' tmp[506976](506993 '_paramFoldLogical' tmp[506977] none[49]))
    }
    unknown tmp[507003] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507004] "maybe param" "temp"
    unknown call_tmp[572566] "expr temp" "maybe param" "maybe type" "temp"
    (572569 'move' call_tmp[572566](74516 call stridable _mt[232] r[73745]))
    (507009 'move' tmp[507004](507007 call _cond_test call_tmp[572566]))
    if tmp[507004]
    {
      unknown tmp[507011] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (507013 'move' tmp[507011](74520 call alignment _mt[232] r[73745]))
      (507018 'move' tmp[507003](507015 '_paramFoldLogical' tmp[507004] tmp[507011]))
    }
    {
      (507023 'move' tmp[507003](507020 '_paramFoldLogical' tmp[507004] none[49]))
    }
    unknown tmp[507030] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507031] "maybe param" "temp"
    unknown call_tmp[572575] "expr temp" "maybe param" "maybe type" "temp"
    (572578 'move' call_tmp[572575](74529 call stridable _mt[232] r[73745]))
    (507036 'move' tmp[507031](507034 call _cond_test call_tmp[572575]))
    if tmp[507031]
    {
      unknown tmp[507038] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (507040 'move' tmp[507038](74533 call aligned _mt[232] r[73745]))
      (507045 'move' tmp[507030](507042 '_paramFoldLogical' tmp[507031] tmp[507038]))
    }
    {
      (507050 'move' tmp[507030](507047 '_paramFoldLogical' tmp[507031] none[49]))
    }
    unknown call_tmp[572584] "expr temp" "maybe param" "maybe type" "temp"
    (572587 'move' call_tmp[572584](74468 call idxType _mt[232] r[73745]))
    unknown call_tmp[572591] "expr temp" "maybe param" "maybe type" "temp"
    (572594 'move' call_tmp[572591](74479 call stridable _mt[232] r[73745]))
    unknown call_tmp[572598] "expr temp" "maybe param" "maybe type" "temp"
    (572601 'move' call_tmp[572598](74489 call(74484 call (partial) chpl_intToIdx _mt[232] r[73745]) lo[74365]))
    unknown call_tmp[572605] "expr temp" "maybe param" "maybe type" "temp"
    (572608 'move' call_tmp[572605](74497 call(74492 call (partial) chpl_intToIdx _mt[232] r[73745]) hi[74398]))
    unknown call_tmp[572610] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (572613 'move' call_tmp[572610](691359 'new' range[66183](?)(idxType = call_tmp[572584])(boundedType = bounded[66079])(stridable = call_tmp[572591])(_low = call_tmp[572598])(_high = call_tmp[572605])(_stride = tmp[506976])(_alignment = tmp[507003])(_aligned = tmp[507030])))
    (461645 'move' ret[461630](461644 'deref' call_tmp[572610]))
    label _end_chpl_count_help[461628]
    (461632 return ret[461630])
  }
  function #[74557](arg r[74554]:range[66183](?), arg count[74563] :
  unknown call_tmp[572615] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43]
  {
    unknown ret[461649] "RVV" "temp"
    unknown call_tmp[572620] "expr temp" "maybe param" "maybe type" "temp"
    (572623 'move' call_tmp[572620](74570 call chpl_count_help r[74554] count[74563]))
    (461654 'move' ret[461649](461653 'deref' call_tmp[572620]))
    (461651 return ret[461649])
  }
  function #[74586](arg r[74583]:range[66183](?), arg count[74592] :
  unknown call_tmp[572625] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43]
  {
    unknown ret[461658] "RVV" "temp"
    unknown call_tmp[572630] "expr temp" "maybe param" "maybe type" "temp"
    (572633 'move' call_tmp[572630](74599 call chpl_count_help r[74583] count[74592]))
    (461663 'move' ret[461658](461662 'deref' call_tmp[572630]))
    (461660 return ret[461658])
  }
  function #[74615](arg r[74612]:range[66183](?), arg count[74617]:_any[170](?)) : _unknown[43]
  {
    unknown ret[461667] "RVV" "temp"
    unknown call_tmp[572635] "expr temp" "maybe param" "maybe type" "temp"
    (572638 'move' call_tmp[572635](431237 'query' r[74612] 1))
    unknown call_tmp[572640] "expr temp" "maybe param" "maybe type" "temp"
    (572643 'move' call_tmp[572640](74639 call _cast string[24] call_tmp[572635]))
    unknown call_tmp[572645] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (572648 'move' call_tmp[572645](74658 'typeof' count[74617]))
    unknown call_tmp[572650] "expr temp" "maybe param" "maybe type" "temp"
    (572653 'move' call_tmp[572650](74660 call _cast string[24] call_tmp[572645]))
    (74662 call compilerError "can't apply '#' to a range with idxType " call_tmp[572640] " using a count of type " call_tmp[572650])
    (461672 'move' ret[461667](461671 'deref' r[74612]))
    (461669 return ret[461667])
  }
  function chpl_checkIfRangeIterWillOverflow[74674](arg idxType[74672]:_any[170](?), arg low[74676]:_any[170](?), arg high[74678]:_any[170](?), arg stride[74680]:_any[170](?), arg first[74683] :
  low[74676] =
  low[74676], arg last[74687] :
  high[74678] =
  high[74678], arg shouldHalt[74691] :
  1 =
  1) : _unknown[43]
  {
    unknown ret[461676] "RVV" "temp"
    unknown call_tmp[572655] "expr temp" "maybe param" "maybe type" "temp"
    (572658 'move' call_tmp[572655](74696 call > low[74676] high[74678]))
    unknown call_tmp[572660] "expr temp" "maybe param" "maybe type" "temp"
    (572663 'move' call_tmp[572660](74702 call _cond_test call_tmp[572655]))
    if call_tmp[572660]
    {
      (461681 'move' ret[461676](461680 'deref' 0))
      gotoReturn _end_chpl_checkIfRangeIterWillOverflow[461674] _end_chpl_checkIfRangeIterWillOverflow[461674]
    }
    unknown willOverFlow[74708] "insert auto destroy"
    (489826 'init var' willOverFlow[74708] 0)
    unknown call_tmp[572665] "expr temp" "maybe param" "maybe type" "temp"
    (572668 'move' call_tmp[572665](74714 call isIntType idxType[74672]))
    unknown call_tmp[572670] "expr temp" "maybe param" "maybe type" "temp"
    (572673 'move' call_tmp[572670](74892 call _cond_test call_tmp[572665]))
    if call_tmp[572670]
    {
      unknown tmp[396078] "maybe param" "temp"
      (396089 'move' tmp[396078](74717 call > last[74687] 0))
      unknown call_tmp[572675] "expr temp" "maybe param" "maybe type" "temp"
      (572678 'move' call_tmp[572675](396091 call _cond_invalid tmp[396078]))
      if call_tmp[572675]
      {
        (396094 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[507057] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[507058] "maybe param" "temp"
      unknown call_tmp[572680] "expr temp" "maybe param" "maybe type" "temp"
      (572683 'move' call_tmp[572680](396079 call isTrue tmp[396078]))
      (507063 'move' tmp[507058](507061 call _cond_test call_tmp[572680]))
      if tmp[507058]
      {
        unknown tmp[507065] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[572685] "expr temp" "maybe param" "maybe type" "temp"
        (572688 'move' call_tmp[572685](74721 call > stride[74680] 0))
        (507067 'move' tmp[507065](396082 call isTrue call_tmp[572685]))
        (507072 'move' tmp[507057](507069 '_paramFoldLogical' tmp[507058] tmp[507065]))
      }
      {
        (507077 'move' tmp[507057](507074 '_paramFoldLogical' tmp[507058] 0))
      }
      unknown call_tmp[572690] "expr temp" "maybe param" "maybe type" "temp"
      (572693 'move' call_tmp[572690](74781 call _cond_test tmp[507057]))
      if call_tmp[572690]
      {
        unknown call_tmp[572695] "expr temp" "maybe param" "maybe type" "temp"
        (572698 'move' call_tmp[572695](74729 call max idxType[74672]))
        unknown call_tmp[572700] "expr temp" "maybe param" "maybe type" "temp"
        (572703 'move' call_tmp[572700](74731 call - call_tmp[572695] last[74687]))
        unknown call_tmp[572705] "expr temp" "maybe param" "maybe type" "temp"
        (572708 'move' call_tmp[572705](74733 call > stride[74680] call_tmp[572700]))
        unknown call_tmp[572710] "expr temp" "maybe param" "maybe type" "temp"
        (572713 'move' call_tmp[572710](74741 call _cond_test call_tmp[572705]))
        if call_tmp[572710]
        {
          (74737 call = willOverFlow[74708] 1)
        }
      }
      {
        unknown tmp[396057] "maybe param" "temp"
        (396068 'move' tmp[396057](74748 call < last[74687] 0))
        unknown call_tmp[572715] "expr temp" "maybe param" "maybe type" "temp"
        (572718 'move' call_tmp[572715](396070 call _cond_invalid tmp[396057]))
        if call_tmp[572715]
        {
          (396073 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[507084] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[507085] "maybe param" "temp"
        unknown call_tmp[572720] "expr temp" "maybe param" "maybe type" "temp"
        (572723 'move' call_tmp[572720](396058 call isTrue tmp[396057]))
        (507090 'move' tmp[507085](507088 call _cond_test call_tmp[572720]))
        if tmp[507085]
        {
          unknown tmp[507092] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[572725] "expr temp" "maybe param" "maybe type" "temp"
          (572728 'move' call_tmp[572725](74752 call < stride[74680] 0))
          (507094 'move' tmp[507092](396061 call isTrue call_tmp[572725]))
          (507099 'move' tmp[507084](507096 '_paramFoldLogical' tmp[507085] tmp[507092]))
        }
        {
          (507104 'move' tmp[507084](507101 '_paramFoldLogical' tmp[507085] 0))
        }
        unknown call_tmp[572730] "expr temp" "maybe param" "maybe type" "temp"
        (572733 'move' call_tmp[572730](74777 call _cond_test tmp[507084]))
        if call_tmp[572730]
        {
          unknown call_tmp[572735] "expr temp" "maybe param" "maybe type" "temp"
          (572738 'move' call_tmp[572735](74760 call min idxType[74672]))
          unknown call_tmp[572740] "expr temp" "maybe param" "maybe type" "temp"
          (572743 'move' call_tmp[572740](74762 call - call_tmp[572735] last[74687]))
          unknown call_tmp[572745] "expr temp" "maybe param" "maybe type" "temp"
          (572748 'move' call_tmp[572745](74764 call < stride[74680] call_tmp[572740]))
          unknown call_tmp[572750] "expr temp" "maybe param" "maybe type" "temp"
          (572753 'move' call_tmp[572750](74772 call _cond_test call_tmp[572745]))
          if call_tmp[572750]
          {
            (74768 call = willOverFlow[74708] 1)
          }
        }
      }
    }
    {
      unknown call_tmp[572755] "expr temp" "maybe param" "maybe type" "temp"
      (572758 'move' call_tmp[572755](74790 call isUintType idxType[74672]))
      unknown call_tmp[572760] "expr temp" "maybe param" "maybe type" "temp"
      (572763 'move' call_tmp[572760](74888 call _cond_test call_tmp[572755]))
      if call_tmp[572760]
      {
        unknown call_tmp[572765] "expr temp" "maybe param" "maybe type" "temp"
        (572768 'move' call_tmp[572765](74793 call > stride[74680] 0))
        unknown call_tmp[572770] "expr temp" "maybe param" "maybe type" "temp"
        (572773 'move' call_tmp[572770](74845 call _cond_test call_tmp[572765]))
        if call_tmp[572770]
        {
          unknown call_tmp[572775] "expr temp" "maybe param" "maybe type" "temp"
          (572778 'move' call_tmp[572775](74798 call _cast idxType[74672] stride[74680]))
          unknown call_tmp[572780] "expr temp" "maybe param" "maybe type" "temp"
          (572783 'move' call_tmp[572780](74800 call + last[74687] call_tmp[572775]))
          unknown call_tmp[572785] "expr temp" "maybe param" "maybe type" "temp"
          (572788 'move' call_tmp[572785](74803 call < call_tmp[572780] last[74687]))
          unknown call_tmp[572790] "expr temp" "maybe param" "maybe type" "temp"
          (572793 'move' call_tmp[572790](74811 call _cond_test call_tmp[572785]))
          if call_tmp[572790]
          {
            (74807 call = willOverFlow[74708] 1)
          }
        }
        {
          unknown call_tmp[572795] "expr temp" "maybe param" "maybe type" "temp"
          (572798 'move' call_tmp[572795](74818 call < stride[74680] 0))
          unknown call_tmp[572800] "expr temp" "maybe param" "maybe type" "temp"
          (572803 'move' call_tmp[572800](74841 call _cond_test call_tmp[572795]))
          if call_tmp[572800]
          {
            unknown call_tmp[572805] "expr temp" "maybe param" "maybe type" "temp"
            (572808 'move' call_tmp[572805](74823 call _cast idxType[74672] stride[74680]))
            unknown call_tmp[572810] "expr temp" "maybe param" "maybe type" "temp"
            (572813 'move' call_tmp[572810](74825 call + last[74687] call_tmp[572805]))
            unknown call_tmp[572815] "expr temp" "maybe param" "maybe type" "temp"
            (572818 'move' call_tmp[572815](74828 call > call_tmp[572810] last[74687]))
            unknown call_tmp[572820] "expr temp" "maybe param" "maybe type" "temp"
            (572823 'move' call_tmp[572820](74836 call _cond_test call_tmp[572815]))
            if call_tmp[572820]
            {
              (74832 call = willOverFlow[74708] 1)
            }
          }
        }
      }
      {
        (74885 call compilerError "Iterator overflow checking is only supported " "for integral types")
      }
    }
    unknown tmp[396099] "maybe param" "temp"
    (396110 'move' tmp[396099] willOverFlow[74708])
    unknown call_tmp[572825] "expr temp" "maybe param" "maybe type" "temp"
    (572828 'move' call_tmp[572825](396112 call _cond_invalid tmp[396099]))
    if call_tmp[572825]
    {
      (396115 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507111] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507112] "maybe param" "temp"
    unknown call_tmp[572830] "expr temp" "maybe param" "maybe type" "temp"
    (572833 'move' call_tmp[572830](396100 call isTrue tmp[396099]))
    (507117 'move' tmp[507112](507115 call _cond_test call_tmp[572830]))
    if tmp[507112]
    {
      unknown tmp[507119] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (507121 'move' tmp[507119](396103 call isTrue shouldHalt[74691]))
      (507126 'move' tmp[507111](507123 '_paramFoldLogical' tmp[507112] tmp[507119]))
    }
    {
      (507131 'move' tmp[507111](507128 '_paramFoldLogical' tmp[507112] 0))
    }
    unknown call_tmp[572835] "expr temp" "maybe param" "maybe type" "temp"
    (572838 'move' call_tmp[572835](74925 call _cond_test tmp[507111]))
    if call_tmp[572835]
    {
      (74922 call boundsCheckHalt module=[244] HaltWrappers[197622] "Iteration over a bounded range may be incorrect due to overflow.")
    }
    (461686 'move' ret[461676](461685 'deref' willOverFlow[74708]))
    label _end_chpl_checkIfRangeIterWillOverflow[461674]
    (461678 return ret[461676])
  }
  function range[66183](?).checkIfIterWillOverflow[74941](arg _mt[74946]:_MT[227], arg this[74943]:range[66183](?) :
  range[66183](?), arg shouldHalt[74938] :
  1 =
  1) : _unknown[43] "method" "no doc"
  {
    unknown ret[461690] "RVV" "temp"
    unknown call_tmp[572842] "expr temp" "maybe param" "maybe type" "temp"
    (572845 'move' call_tmp[572842](74950 call intIdxType _mt[232] this[74943]))
    unknown call_tmp[572849] "expr temp" "maybe param" "maybe type" "temp"
    (572852 'move' call_tmp[572849](74955 call _low _mt[232] this[74943]))
    unknown call_tmp[572856] "expr temp" "maybe param" "maybe type" "temp"
    (572859 'move' call_tmp[572856](74959 call _high _mt[232] this[74943]))
    unknown call_tmp[572863] "expr temp" "maybe param" "maybe type" "temp"
    (572866 'move' call_tmp[572863](74963 call stride _mt[232] this[74943]))
    unknown call_tmp[572870] "expr temp" "maybe param" "maybe type" "temp"
    (572873 'move' call_tmp[572870](74967 call firstAsInt _mt[232] this[74943]))
    unknown call_tmp[572877] "expr temp" "maybe param" "maybe type" "temp"
    (572880 'move' call_tmp[572877](74971 call lastAsInt _mt[232] this[74943]))
    unknown call_tmp[572882] "expr temp" "maybe param" "maybe type" "temp"
    (572885 'move' call_tmp[572882](74975 call chpl_checkIfRangeIterWillOverflow call_tmp[572842] call_tmp[572849] call_tmp[572856] call_tmp[572863] call_tmp[572870] call_tmp[572877] shouldHalt[74938]))
    (461695 'move' ret[461690](461694 'deref' call_tmp[572882]))
    (461692 return ret[461690])
  }
  function chpl_direct_range_iter[431445](arg low[431452] :
  (431449 call int(64)[13] 64), arg high[431458] :
  (431456 call int(64)[13] 64), arg stride[431464] :
  (431462 call int(64)[13] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461699] "RVV" "temp"
    unknown call_tmp[572887] "expr temp" "maybe param" "maybe type" "temp"
    (572890 'move' call_tmp[572887](431471 call chpl_build_bounded_range low[431452] high[431458]))
    unknown call_tmp[572892] "maybe param" "maybe type" "temp"
    (572895 'move' call_tmp[572892](431469 call chpl_by call_tmp[572887] stride[431464]))
    const r[431467] "const" "insert auto destroy"
    (489828 'init var' r[431467] call_tmp[572892])
    {
      unknown _indexOfInterest[431477] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431479] "expr temp" "temp"
      (431481 'move' _iterator[431479](431484 call _getIterator r[431467]))
      Defer
      {
        {
          (431488 call _freeIterator _iterator[431479])
        }
      }
      { scopeless type
        (431492 'move' _indexOfInterest[431477](431495 call iteratorIndex _iterator[431479]))
      }
      ForLoop
      {
        unknown i[431500] "index var" "insert auto destroy"
        (431502 'move' i[431500] _indexOfInterest[431477])
        unknown yret[461703] "YVV" "temp"
        (461706 'move' yret[461703](461705 'deref' i[431500]))
        (461708 yield yret[461703])
        label _continueLabel[431507]
        _indexOfInterest[431477]
        _iterator[431479]
      }
      label _breakLabel[431509]
    }
    (461701 return ret[461699])
  }
  function chpl_direct_range_iter[431377](arg low[431384] :
  (431381 call int(64)[13] 32), arg high[431390] :
  (431388 call int(64)[13] 32), arg stride[431396] :
  (431394 call int(64)[13] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461712] "RVV" "temp"
    unknown call_tmp[572897] "expr temp" "maybe param" "maybe type" "temp"
    (572900 'move' call_tmp[572897](431403 call chpl_build_bounded_range low[431384] high[431390]))
    unknown call_tmp[572902] "maybe param" "maybe type" "temp"
    (572905 'move' call_tmp[572902](431401 call chpl_by call_tmp[572897] stride[431396]))
    const r[431399] "const" "insert auto destroy"
    (489830 'init var' r[431399] call_tmp[572902])
    {
      unknown _indexOfInterest[431409] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431411] "expr temp" "temp"
      (431413 'move' _iterator[431411](431416 call _getIterator r[431399]))
      Defer
      {
        {
          (431420 call _freeIterator _iterator[431411])
        }
      }
      { scopeless type
        (431424 'move' _indexOfInterest[431409](431427 call iteratorIndex _iterator[431411]))
      }
      ForLoop
      {
        unknown i[431432] "index var" "insert auto destroy"
        (431434 'move' i[431432] _indexOfInterest[431409])
        unknown yret[461716] "YVV" "temp"
        (461719 'move' yret[461716](461718 'deref' i[431432]))
        (461721 yield yret[461716])
        label _continueLabel[431439]
        _indexOfInterest[431409]
        _iterator[431411]
      }
      label _breakLabel[431441]
    }
    (461714 return ret[461712])
  }
  function chpl_direct_range_iter[431309](arg low[431316] :
  (431313 call int(64)[13] 16), arg high[431322] :
  (431320 call int(64)[13] 16), arg stride[431328] :
  (431326 call int(64)[13] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461725] "RVV" "temp"
    unknown call_tmp[572907] "expr temp" "maybe param" "maybe type" "temp"
    (572910 'move' call_tmp[572907](431335 call chpl_build_bounded_range low[431316] high[431322]))
    unknown call_tmp[572912] "maybe param" "maybe type" "temp"
    (572915 'move' call_tmp[572912](431333 call chpl_by call_tmp[572907] stride[431328]))
    const r[431331] "const" "insert auto destroy"
    (489832 'init var' r[431331] call_tmp[572912])
    {
      unknown _indexOfInterest[431341] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431343] "expr temp" "temp"
      (431345 'move' _iterator[431343](431348 call _getIterator r[431331]))
      Defer
      {
        {
          (431352 call _freeIterator _iterator[431343])
        }
      }
      { scopeless type
        (431356 'move' _indexOfInterest[431341](431359 call iteratorIndex _iterator[431343]))
      }
      ForLoop
      {
        unknown i[431364] "index var" "insert auto destroy"
        (431366 'move' i[431364] _indexOfInterest[431341])
        unknown yret[461729] "YVV" "temp"
        (461732 'move' yret[461729](461731 'deref' i[431364]))
        (461734 yield yret[461729])
        label _continueLabel[431371]
        _indexOfInterest[431341]
        _iterator[431343]
      }
      label _breakLabel[431373]
    }
    (461727 return ret[461725])
  }
  function chpl_direct_range_iter[431241](arg low[431248] :
  (431245 call int(64)[13] 8), arg high[431254] :
  (431252 call int(64)[13] 8), arg stride[431260] :
  (431258 call int(64)[13] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461738] "RVV" "temp"
    unknown call_tmp[572917] "expr temp" "maybe param" "maybe type" "temp"
    (572920 'move' call_tmp[572917](431267 call chpl_build_bounded_range low[431248] high[431254]))
    unknown call_tmp[572922] "maybe param" "maybe type" "temp"
    (572925 'move' call_tmp[572922](431265 call chpl_by call_tmp[572917] stride[431260]))
    const r[431263] "const" "insert auto destroy"
    (489834 'init var' r[431263] call_tmp[572922])
    {
      unknown _indexOfInterest[431273] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431275] "expr temp" "temp"
      (431277 'move' _iterator[431275](431280 call _getIterator r[431263]))
      Defer
      {
        {
          (431284 call _freeIterator _iterator[431275])
        }
      }
      { scopeless type
        (431288 'move' _indexOfInterest[431273](431291 call iteratorIndex _iterator[431275]))
      }
      ForLoop
      {
        unknown i[431296] "index var" "insert auto destroy"
        (431298 'move' i[431296] _indexOfInterest[431273])
        unknown yret[461742] "YVV" "temp"
        (461745 'move' yret[461742](461744 'deref' i[431296]))
        (461747 yield yret[461742])
        label _continueLabel[431303]
        _indexOfInterest[431273]
        _iterator[431275]
      }
      label _breakLabel[431305]
    }
    (461740 return ret[461738])
  }
  function chpl_direct_range_iter[431717](arg low[431724] :
  (431721 call uint(64)[107] 64), arg high[431730] :
  (431728 call uint(64)[107] 64), arg stride[431736] :
  (431734 call int(64)[13] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461751] "RVV" "temp"
    unknown call_tmp[572927] "expr temp" "maybe param" "maybe type" "temp"
    (572930 'move' call_tmp[572927](431743 call chpl_build_bounded_range low[431724] high[431730]))
    unknown call_tmp[572932] "maybe param" "maybe type" "temp"
    (572935 'move' call_tmp[572932](431741 call chpl_by call_tmp[572927] stride[431736]))
    const r[431739] "const" "insert auto destroy"
    (489836 'init var' r[431739] call_tmp[572932])
    {
      unknown _indexOfInterest[431749] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431751] "expr temp" "temp"
      (431753 'move' _iterator[431751](431756 call _getIterator r[431739]))
      Defer
      {
        {
          (431760 call _freeIterator _iterator[431751])
        }
      }
      { scopeless type
        (431764 'move' _indexOfInterest[431749](431767 call iteratorIndex _iterator[431751]))
      }
      ForLoop
      {
        unknown i[431772] "index var" "insert auto destroy"
        (431774 'move' i[431772] _indexOfInterest[431749])
        unknown yret[461755] "YVV" "temp"
        (461758 'move' yret[461755](461757 'deref' i[431772]))
        (461760 yield yret[461755])
        label _continueLabel[431779]
        _indexOfInterest[431749]
        _iterator[431751]
      }
      label _breakLabel[431781]
    }
    (461753 return ret[461751])
  }
  function chpl_direct_range_iter[431649](arg low[431656] :
  (431653 call uint(64)[107] 32), arg high[431662] :
  (431660 call uint(64)[107] 32), arg stride[431668] :
  (431666 call int(64)[13] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461764] "RVV" "temp"
    unknown call_tmp[572937] "expr temp" "maybe param" "maybe type" "temp"
    (572940 'move' call_tmp[572937](431675 call chpl_build_bounded_range low[431656] high[431662]))
    unknown call_tmp[572942] "maybe param" "maybe type" "temp"
    (572945 'move' call_tmp[572942](431673 call chpl_by call_tmp[572937] stride[431668]))
    const r[431671] "const" "insert auto destroy"
    (489838 'init var' r[431671] call_tmp[572942])
    {
      unknown _indexOfInterest[431681] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431683] "expr temp" "temp"
      (431685 'move' _iterator[431683](431688 call _getIterator r[431671]))
      Defer
      {
        {
          (431692 call _freeIterator _iterator[431683])
        }
      }
      { scopeless type
        (431696 'move' _indexOfInterest[431681](431699 call iteratorIndex _iterator[431683]))
      }
      ForLoop
      {
        unknown i[431704] "index var" "insert auto destroy"
        (431706 'move' i[431704] _indexOfInterest[431681])
        unknown yret[461768] "YVV" "temp"
        (461771 'move' yret[461768](461770 'deref' i[431704]))
        (461773 yield yret[461768])
        label _continueLabel[431711]
        _indexOfInterest[431681]
        _iterator[431683]
      }
      label _breakLabel[431713]
    }
    (461766 return ret[461764])
  }
  function chpl_direct_range_iter[431581](arg low[431588] :
  (431585 call uint(64)[107] 16), arg high[431594] :
  (431592 call uint(64)[107] 16), arg stride[431600] :
  (431598 call int(64)[13] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461777] "RVV" "temp"
    unknown call_tmp[572947] "expr temp" "maybe param" "maybe type" "temp"
    (572950 'move' call_tmp[572947](431607 call chpl_build_bounded_range low[431588] high[431594]))
    unknown call_tmp[572952] "maybe param" "maybe type" "temp"
    (572955 'move' call_tmp[572952](431605 call chpl_by call_tmp[572947] stride[431600]))
    const r[431603] "const" "insert auto destroy"
    (489840 'init var' r[431603] call_tmp[572952])
    {
      unknown _indexOfInterest[431613] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431615] "expr temp" "temp"
      (431617 'move' _iterator[431615](431620 call _getIterator r[431603]))
      Defer
      {
        {
          (431624 call _freeIterator _iterator[431615])
        }
      }
      { scopeless type
        (431628 'move' _indexOfInterest[431613](431631 call iteratorIndex _iterator[431615]))
      }
      ForLoop
      {
        unknown i[431636] "index var" "insert auto destroy"
        (431638 'move' i[431636] _indexOfInterest[431613])
        unknown yret[461781] "YVV" "temp"
        (461784 'move' yret[461781](461783 'deref' i[431636]))
        (461786 yield yret[461781])
        label _continueLabel[431643]
        _indexOfInterest[431613]
        _iterator[431615]
      }
      label _breakLabel[431645]
    }
    (461779 return ret[461777])
  }
  function chpl_direct_range_iter[431513](arg low[431520] :
  (431517 call uint(64)[107] 8), arg high[431526] :
  (431524 call uint(64)[107] 8), arg stride[431532] :
  (431530 call int(64)[13] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461790] "RVV" "temp"
    unknown call_tmp[572957] "expr temp" "maybe param" "maybe type" "temp"
    (572960 'move' call_tmp[572957](431539 call chpl_build_bounded_range low[431520] high[431526]))
    unknown call_tmp[572962] "maybe param" "maybe type" "temp"
    (572965 'move' call_tmp[572962](431537 call chpl_by call_tmp[572957] stride[431532]))
    const r[431535] "const" "insert auto destroy"
    (489842 'init var' r[431535] call_tmp[572962])
    {
      unknown _indexOfInterest[431545] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431547] "expr temp" "temp"
      (431549 'move' _iterator[431547](431552 call _getIterator r[431535]))
      Defer
      {
        {
          (431556 call _freeIterator _iterator[431547])
        }
      }
      { scopeless type
        (431560 'move' _indexOfInterest[431545](431563 call iteratorIndex _iterator[431547]))
      }
      ForLoop
      {
        unknown i[431568] "index var" "insert auto destroy"
        (431570 'move' i[431568] _indexOfInterest[431545])
        unknown yret[461794] "YVV" "temp"
        (461797 'move' yret[461794](461796 'deref' i[431568]))
        (461799 yield yret[461794])
        label _continueLabel[431575]
        _indexOfInterest[431545]
        _iterator[431547]
      }
      label _breakLabel[431577]
    }
    (461792 return ret[461790])
  }
  function chpl_direct_range_iter[75141](arg low[75138]:enumerated[179](?), arg high[75144]:enumerated[179](?), arg stride[75148]:integral[188](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461803] "RVV" "temp"
    unknown call_tmp[572967] "expr temp" "maybe param" "maybe type" "temp"
    (572970 'move' call_tmp[572967](75153 call chpl_build_bounded_range low[75138] high[75144]))
    unknown call_tmp[572972] "maybe param" "maybe type" "temp"
    (572975 'move' call_tmp[572972](75156 call chpl_by call_tmp[572967] stride[75148]))
    const r[75158] "const" "insert auto destroy"
    (489844 'init var' r[75158] call_tmp[572972])
    {
      unknown _indexOfInterest[75167] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[75168] "expr temp" "temp"
      (75177 'move' _iterator[75168](75175 call _getIterator r[75158]))
      Defer
      {
        {
          (75193 call _freeIterator _iterator[75168])
        }
      }
      { scopeless type
        (75182 'move' _indexOfInterest[75167](75179 call iteratorIndex _iterator[75168]))
      }
      ForLoop
      {
        unknown i[75186] "index var" "insert auto destroy"
        (75188 'move' i[75186] _indexOfInterest[75167])
        unknown yret[461807] "YVV" "temp"
        (461810 'move' yret[461807](461809 'deref' i[75186]))
        (461812 yield yret[461807])
        label _continueLabel[75172]
        _indexOfInterest[75167]
        _iterator[75168]
      }
      label _breakLabel[75173]
    }
    (461805 return ret[461803])
  }
  function chpl_direct_range_iter[75208](arg low[75205]:bool[10], arg high[75211]:bool[10], arg stride[75215]:integral[188](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461816] "RVV" "temp"
    unknown call_tmp[572977] "expr temp" "maybe param" "maybe type" "temp"
    (572980 'move' call_tmp[572977](75220 call chpl_build_bounded_range low[75205] high[75211]))
    unknown call_tmp[572982] "maybe param" "maybe type" "temp"
    (572985 'move' call_tmp[572982](75223 call chpl_by call_tmp[572977] stride[75215]))
    const r[75225] "const" "insert auto destroy"
    (489846 'init var' r[75225] call_tmp[572982])
    {
      unknown _indexOfInterest[75234] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[75235] "expr temp" "temp"
      (75244 'move' _iterator[75235](75242 call _getIterator r[75225]))
      Defer
      {
        {
          (75260 call _freeIterator _iterator[75235])
        }
      }
      { scopeless type
        (75249 'move' _indexOfInterest[75234](75246 call iteratorIndex _iterator[75235]))
      }
      ForLoop
      {
        unknown i[75253] "index var" "insert auto destroy"
        (75255 'move' i[75253] _indexOfInterest[75234])
        unknown yret[461820] "YVV" "temp"
        (461823 'move' yret[461820](461822 'deref' i[75253]))
        (461825 yield yret[461820])
        label _continueLabel[75239]
        _indexOfInterest[75234]
        _iterator[75235]
      }
      label _breakLabel[75240]
    }
    (461818 return ret[461816])
  }
  function chpl_direct_range_iter[431974](arg low[431981] :
  (431978 call int(64)[13] 64), arg high[431987] :
  (431985 call int(64)[13] 64), param arg stride[431993] :
  (431991 call int(64)[13] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461829] "RVV" "temp"
    {
      unknown _indexOfInterest[431997] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431999] "expr temp" "temp"
      unknown call_tmp[572987] "expr temp" "maybe param" "maybe type" "temp"
      (572990 'move' call_tmp[572987](432006 call chpl_direct_param_stride_range_iter low[431981] high[431987] stride[431993]))
      (432001 'move' _iterator[431999](432004 call _getIterator call_tmp[572987]))
      Defer
      {
        {
          (432012 call _freeIterator _iterator[431999])
        }
      }
      { scopeless type
        (432016 'move' _indexOfInterest[431997](432019 call iteratorIndex _iterator[431999]))
      }
      ForLoop
      {
        unknown i[432024] "index var" "insert auto destroy"
        (432026 'move' i[432024] _indexOfInterest[431997])
        unknown yret[461833] "YVV" "temp"
        (461836 'move' yret[461833](461835 'deref' i[432024]))
        (461838 yield yret[461833])
        label _continueLabel[432031]
        _indexOfInterest[431997]
        _iterator[431999]
      }
      label _breakLabel[432033]
    }
    (461831 return ret[461829])
  }
  function chpl_direct_range_iter[431911](arg low[431918] :
  (431915 call int(64)[13] 32), arg high[431924] :
  (431922 call int(64)[13] 32), param arg stride[431930] :
  (431928 call int(64)[13] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461842] "RVV" "temp"
    {
      unknown _indexOfInterest[431934] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431936] "expr temp" "temp"
      unknown call_tmp[572992] "expr temp" "maybe param" "maybe type" "temp"
      (572995 'move' call_tmp[572992](431943 call chpl_direct_param_stride_range_iter low[431918] high[431924] stride[431930]))
      (431938 'move' _iterator[431936](431941 call _getIterator call_tmp[572992]))
      Defer
      {
        {
          (431949 call _freeIterator _iterator[431936])
        }
      }
      { scopeless type
        (431953 'move' _indexOfInterest[431934](431956 call iteratorIndex _iterator[431936]))
      }
      ForLoop
      {
        unknown i[431961] "index var" "insert auto destroy"
        (431963 'move' i[431961] _indexOfInterest[431934])
        unknown yret[461846] "YVV" "temp"
        (461849 'move' yret[461846](461848 'deref' i[431961]))
        (461851 yield yret[461846])
        label _continueLabel[431968]
        _indexOfInterest[431934]
        _iterator[431936]
      }
      label _breakLabel[431970]
    }
    (461844 return ret[461842])
  }
  function chpl_direct_range_iter[431848](arg low[431855] :
  (431852 call int(64)[13] 16), arg high[431861] :
  (431859 call int(64)[13] 16), param arg stride[431867] :
  (431865 call int(64)[13] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461855] "RVV" "temp"
    {
      unknown _indexOfInterest[431871] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431873] "expr temp" "temp"
      unknown call_tmp[572997] "expr temp" "maybe param" "maybe type" "temp"
      (573000 'move' call_tmp[572997](431880 call chpl_direct_param_stride_range_iter low[431855] high[431861] stride[431867]))
      (431875 'move' _iterator[431873](431878 call _getIterator call_tmp[572997]))
      Defer
      {
        {
          (431886 call _freeIterator _iterator[431873])
        }
      }
      { scopeless type
        (431890 'move' _indexOfInterest[431871](431893 call iteratorIndex _iterator[431873]))
      }
      ForLoop
      {
        unknown i[431898] "index var" "insert auto destroy"
        (431900 'move' i[431898] _indexOfInterest[431871])
        unknown yret[461859] "YVV" "temp"
        (461862 'move' yret[461859](461861 'deref' i[431898]))
        (461864 yield yret[461859])
        label _continueLabel[431905]
        _indexOfInterest[431871]
        _iterator[431873]
      }
      label _breakLabel[431907]
    }
    (461857 return ret[461855])
  }
  function chpl_direct_range_iter[431785](arg low[431792] :
  (431789 call int(64)[13] 8), arg high[431798] :
  (431796 call int(64)[13] 8), param arg stride[431804] :
  (431802 call int(64)[13] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461868] "RVV" "temp"
    {
      unknown _indexOfInterest[431808] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[431810] "expr temp" "temp"
      unknown call_tmp[573002] "expr temp" "maybe param" "maybe type" "temp"
      (573005 'move' call_tmp[573002](431817 call chpl_direct_param_stride_range_iter low[431792] high[431798] stride[431804]))
      (431812 'move' _iterator[431810](431815 call _getIterator call_tmp[573002]))
      Defer
      {
        {
          (431823 call _freeIterator _iterator[431810])
        }
      }
      { scopeless type
        (431827 'move' _indexOfInterest[431808](431830 call iteratorIndex _iterator[431810]))
      }
      ForLoop
      {
        unknown i[431835] "index var" "insert auto destroy"
        (431837 'move' i[431835] _indexOfInterest[431808])
        unknown yret[461872] "YVV" "temp"
        (461875 'move' yret[461872](461874 'deref' i[431835]))
        (461877 yield yret[461872])
        label _continueLabel[431842]
        _indexOfInterest[431808]
        _iterator[431810]
      }
      label _breakLabel[431844]
    }
    (461870 return ret[461868])
  }
  function chpl_direct_range_iter[432226](arg low[432233] :
  (432230 call uint(64)[107] 64), arg high[432239] :
  (432237 call uint(64)[107] 64), param arg stride[432245] :
  (432243 call int(64)[13] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461881] "RVV" "temp"
    {
      unknown _indexOfInterest[432249] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432251] "expr temp" "temp"
      unknown call_tmp[573007] "expr temp" "maybe param" "maybe type" "temp"
      (573010 'move' call_tmp[573007](432258 call chpl_direct_param_stride_range_iter low[432233] high[432239] stride[432245]))
      (432253 'move' _iterator[432251](432256 call _getIterator call_tmp[573007]))
      Defer
      {
        {
          (432264 call _freeIterator _iterator[432251])
        }
      }
      { scopeless type
        (432268 'move' _indexOfInterest[432249](432271 call iteratorIndex _iterator[432251]))
      }
      ForLoop
      {
        unknown i[432276] "index var" "insert auto destroy"
        (432278 'move' i[432276] _indexOfInterest[432249])
        unknown yret[461885] "YVV" "temp"
        (461888 'move' yret[461885](461887 'deref' i[432276]))
        (461890 yield yret[461885])
        label _continueLabel[432283]
        _indexOfInterest[432249]
        _iterator[432251]
      }
      label _breakLabel[432285]
    }
    (461883 return ret[461881])
  }
  function chpl_direct_range_iter[432163](arg low[432170] :
  (432167 call uint(64)[107] 32), arg high[432176] :
  (432174 call uint(64)[107] 32), param arg stride[432182] :
  (432180 call int(64)[13] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461894] "RVV" "temp"
    {
      unknown _indexOfInterest[432186] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432188] "expr temp" "temp"
      unknown call_tmp[573012] "expr temp" "maybe param" "maybe type" "temp"
      (573015 'move' call_tmp[573012](432195 call chpl_direct_param_stride_range_iter low[432170] high[432176] stride[432182]))
      (432190 'move' _iterator[432188](432193 call _getIterator call_tmp[573012]))
      Defer
      {
        {
          (432201 call _freeIterator _iterator[432188])
        }
      }
      { scopeless type
        (432205 'move' _indexOfInterest[432186](432208 call iteratorIndex _iterator[432188]))
      }
      ForLoop
      {
        unknown i[432213] "index var" "insert auto destroy"
        (432215 'move' i[432213] _indexOfInterest[432186])
        unknown yret[461898] "YVV" "temp"
        (461901 'move' yret[461898](461900 'deref' i[432213]))
        (461903 yield yret[461898])
        label _continueLabel[432220]
        _indexOfInterest[432186]
        _iterator[432188]
      }
      label _breakLabel[432222]
    }
    (461896 return ret[461894])
  }
  function chpl_direct_range_iter[432100](arg low[432107] :
  (432104 call uint(64)[107] 16), arg high[432113] :
  (432111 call uint(64)[107] 16), param arg stride[432119] :
  (432117 call int(64)[13] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461907] "RVV" "temp"
    {
      unknown _indexOfInterest[432123] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432125] "expr temp" "temp"
      unknown call_tmp[573017] "expr temp" "maybe param" "maybe type" "temp"
      (573020 'move' call_tmp[573017](432132 call chpl_direct_param_stride_range_iter low[432107] high[432113] stride[432119]))
      (432127 'move' _iterator[432125](432130 call _getIterator call_tmp[573017]))
      Defer
      {
        {
          (432138 call _freeIterator _iterator[432125])
        }
      }
      { scopeless type
        (432142 'move' _indexOfInterest[432123](432145 call iteratorIndex _iterator[432125]))
      }
      ForLoop
      {
        unknown i[432150] "index var" "insert auto destroy"
        (432152 'move' i[432150] _indexOfInterest[432123])
        unknown yret[461911] "YVV" "temp"
        (461914 'move' yret[461911](461913 'deref' i[432150]))
        (461916 yield yret[461911])
        label _continueLabel[432157]
        _indexOfInterest[432123]
        _iterator[432125]
      }
      label _breakLabel[432159]
    }
    (461909 return ret[461907])
  }
  function chpl_direct_range_iter[432037](arg low[432044] :
  (432041 call uint(64)[107] 8), arg high[432050] :
  (432048 call uint(64)[107] 8), param arg stride[432056] :
  (432054 call int(64)[13] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461920] "RVV" "temp"
    {
      unknown _indexOfInterest[432060] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432062] "expr temp" "temp"
      unknown call_tmp[573022] "expr temp" "maybe param" "maybe type" "temp"
      (573025 'move' call_tmp[573022](432069 call chpl_direct_param_stride_range_iter low[432044] high[432050] stride[432056]))
      (432064 'move' _iterator[432062](432067 call _getIterator call_tmp[573022]))
      Defer
      {
        {
          (432075 call _freeIterator _iterator[432062])
        }
      }
      { scopeless type
        (432079 'move' _indexOfInterest[432060](432082 call iteratorIndex _iterator[432062]))
      }
      ForLoop
      {
        unknown i[432087] "index var" "insert auto destroy"
        (432089 'move' i[432087] _indexOfInterest[432060])
        unknown yret[461924] "YVV" "temp"
        (461927 'move' yret[461924](461926 'deref' i[432087]))
        (461929 yield yret[461924])
        label _continueLabel[432094]
        _indexOfInterest[432060]
        _iterator[432062]
      }
      label _breakLabel[432096]
    }
    (461922 return ret[461920])
  }
  function chpl_direct_range_iter[75421](arg low[75418]:enumerated[179](?), arg high[75424]:enumerated[179](?), param arg stride[75428]:integral[188](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461933] "RVV" "temp"
    unknown call_tmp[573027] "expr temp" "maybe param" "maybe type" "temp"
    (573030 'move' call_tmp[573027](75433 call == stride[75428] 1))
    unknown call_tmp[573032] "expr temp" "maybe param" "maybe type" "temp"
    (573035 'move' call_tmp[573032](75530 call _cond_test call_tmp[573027]))
    if call_tmp[573032]
    {
      unknown call_tmp[573037] "maybe param" "maybe type" "temp"
      (573040 'move' call_tmp[573037](75437 call chpl_build_bounded_range low[75418] high[75424]))
      const r[75439] "const" "insert auto destroy"
      (489848 'init var' r[75439] call_tmp[573037])
      {
        unknown _indexOfInterest[75448] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75449] "expr temp" "temp"
        (75458 'move' _iterator[75449](75456 call _getIterator r[75439]))
        Defer
        {
          {
            (75474 call _freeIterator _iterator[75449])
          }
        }
        { scopeless type
          (75463 'move' _indexOfInterest[75448](75460 call iteratorIndex _iterator[75449]))
        }
        ForLoop
        {
          unknown i[75467] "index var" "insert auto destroy"
          (75469 'move' i[75467] _indexOfInterest[75448])
          unknown yret[461937] "YVV" "temp"
          (461940 'move' yret[461937](461939 'deref' i[75467]))
          (461942 yield yret[461937])
          label _continueLabel[75453]
          _indexOfInterest[75448]
          _iterator[75449]
        }
        label _breakLabel[75454]
      }
    }
    {
      unknown call_tmp[573042] "expr temp" "maybe param" "maybe type" "temp"
      (573045 'move' call_tmp[573042](75483 call chpl_build_bounded_range low[75418] high[75424]))
      unknown call_tmp[573047] "maybe param" "maybe type" "temp"
      (573050 'move' call_tmp[573047](75486 call chpl_by call_tmp[573042] stride[75428]))
      const r[75488] "const" "insert auto destroy"
      (489850 'init var' r[75488] call_tmp[573047])
      {
        unknown _indexOfInterest[75497] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75498] "expr temp" "temp"
        (75507 'move' _iterator[75498](75505 call _getIterator r[75488]))
        Defer
        {
          {
            (75523 call _freeIterator _iterator[75498])
          }
        }
        { scopeless type
          (75512 'move' _indexOfInterest[75497](75509 call iteratorIndex _iterator[75498]))
        }
        ForLoop
        {
          unknown i[75516] "index var" "insert auto destroy"
          (75518 'move' i[75516] _indexOfInterest[75497])
          unknown yret[461944] "YVV" "temp"
          (461947 'move' yret[461944](461946 'deref' i[75516]))
          (461949 yield yret[461944])
          label _continueLabel[75502]
          _indexOfInterest[75497]
          _iterator[75498]
        }
        label _breakLabel[75503]
      }
    }
    (461935 return ret[461933])
  }
  function chpl_direct_range_iter[75543](arg low[75540]:bool[10], arg high[75546]:bool[10], param arg stride[75550]:integral[188](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461953] "RVV" "temp"
    unknown call_tmp[573052] "expr temp" "maybe param" "maybe type" "temp"
    (573055 'move' call_tmp[573052](75555 call == stride[75550] 1))
    unknown call_tmp[573057] "expr temp" "maybe param" "maybe type" "temp"
    (573060 'move' call_tmp[573057](75652 call _cond_test call_tmp[573052]))
    if call_tmp[573057]
    {
      unknown call_tmp[573062] "maybe param" "maybe type" "temp"
      (573065 'move' call_tmp[573062](75559 call chpl_build_bounded_range low[75540] high[75546]))
      const r[75561] "const" "insert auto destroy"
      (489852 'init var' r[75561] call_tmp[573062])
      {
        unknown _indexOfInterest[75570] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75571] "expr temp" "temp"
        (75580 'move' _iterator[75571](75578 call _getIterator r[75561]))
        Defer
        {
          {
            (75596 call _freeIterator _iterator[75571])
          }
        }
        { scopeless type
          (75585 'move' _indexOfInterest[75570](75582 call iteratorIndex _iterator[75571]))
        }
        ForLoop
        {
          unknown i[75589] "index var" "insert auto destroy"
          (75591 'move' i[75589] _indexOfInterest[75570])
          unknown yret[461957] "YVV" "temp"
          (461960 'move' yret[461957](461959 'deref' i[75589]))
          (461962 yield yret[461957])
          label _continueLabel[75575]
          _indexOfInterest[75570]
          _iterator[75571]
        }
        label _breakLabel[75576]
      }
    }
    {
      unknown call_tmp[573067] "expr temp" "maybe param" "maybe type" "temp"
      (573070 'move' call_tmp[573067](75605 call chpl_build_bounded_range low[75540] high[75546]))
      unknown call_tmp[573072] "maybe param" "maybe type" "temp"
      (573075 'move' call_tmp[573072](75608 call chpl_by call_tmp[573067] stride[75550]))
      const r[75610] "const" "insert auto destroy"
      (489854 'init var' r[75610] call_tmp[573072])
      {
        unknown _indexOfInterest[75619] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[75620] "expr temp" "temp"
        (75629 'move' _iterator[75620](75627 call _getIterator r[75610]))
        Defer
        {
          {
            (75645 call _freeIterator _iterator[75620])
          }
        }
        { scopeless type
          (75634 'move' _indexOfInterest[75619](75631 call iteratorIndex _iterator[75620]))
        }
        ForLoop
        {
          unknown i[75638] "index var" "insert auto destroy"
          (75640 'move' i[75638] _indexOfInterest[75619])
          unknown yret[461964] "YVV" "temp"
          (461967 'move' yret[461964](461966 'deref' i[75638]))
          (461969 yield yret[461964])
          label _continueLabel[75624]
          _indexOfInterest[75619]
          _iterator[75620]
        }
        label _breakLabel[75625]
      }
    }
    (461955 return ret[461953])
  }
  function chpl_direct_range_iter[432478](arg low[432485] :
  (432482 call int(64)[13] 64), arg high[432491] :
  (432489 call int(64)[13] 64), arg stride[432497] :
  (432495 call uint(64)[107] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461973] "RVV" "temp"
    {
      unknown _indexOfInterest[432501] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432503] "expr temp" "temp"
      unknown call_tmp[573077] "expr temp" "maybe param" "maybe type" "temp"
      (573080 'move' call_tmp[573077](432510 call chpl_direct_pos_stride_range_iter low[432485] high[432491] stride[432497]))
      (432505 'move' _iterator[432503](432508 call _getIterator call_tmp[573077]))
      Defer
      {
        {
          (432516 call _freeIterator _iterator[432503])
        }
      }
      { scopeless type
        (432520 'move' _indexOfInterest[432501](432523 call iteratorIndex _iterator[432503]))
      }
      ForLoop
      {
        unknown i[432528] "index var" "insert auto destroy"
        (432530 'move' i[432528] _indexOfInterest[432501])
        unknown yret[461977] "YVV" "temp"
        (461980 'move' yret[461977](461979 'deref' i[432528]))
        (461982 yield yret[461977])
        label _continueLabel[432535]
        _indexOfInterest[432501]
        _iterator[432503]
      }
      label _breakLabel[432537]
    }
    (461975 return ret[461973])
  }
  function chpl_direct_range_iter[432415](arg low[432422] :
  (432419 call int(64)[13] 32), arg high[432428] :
  (432426 call int(64)[13] 32), arg stride[432434] :
  (432432 call uint(64)[107] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461986] "RVV" "temp"
    {
      unknown _indexOfInterest[432438] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432440] "expr temp" "temp"
      unknown call_tmp[573082] "expr temp" "maybe param" "maybe type" "temp"
      (573085 'move' call_tmp[573082](432447 call chpl_direct_pos_stride_range_iter low[432422] high[432428] stride[432434]))
      (432442 'move' _iterator[432440](432445 call _getIterator call_tmp[573082]))
      Defer
      {
        {
          (432453 call _freeIterator _iterator[432440])
        }
      }
      { scopeless type
        (432457 'move' _indexOfInterest[432438](432460 call iteratorIndex _iterator[432440]))
      }
      ForLoop
      {
        unknown i[432465] "index var" "insert auto destroy"
        (432467 'move' i[432465] _indexOfInterest[432438])
        unknown yret[461990] "YVV" "temp"
        (461993 'move' yret[461990](461992 'deref' i[432465]))
        (461995 yield yret[461990])
        label _continueLabel[432472]
        _indexOfInterest[432438]
        _iterator[432440]
      }
      label _breakLabel[432474]
    }
    (461988 return ret[461986])
  }
  function chpl_direct_range_iter[432352](arg low[432359] :
  (432356 call int(64)[13] 16), arg high[432365] :
  (432363 call int(64)[13] 16), arg stride[432371] :
  (432369 call uint(64)[107] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[461999] "RVV" "temp"
    {
      unknown _indexOfInterest[432375] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432377] "expr temp" "temp"
      unknown call_tmp[573087] "expr temp" "maybe param" "maybe type" "temp"
      (573090 'move' call_tmp[573087](432384 call chpl_direct_pos_stride_range_iter low[432359] high[432365] stride[432371]))
      (432379 'move' _iterator[432377](432382 call _getIterator call_tmp[573087]))
      Defer
      {
        {
          (432390 call _freeIterator _iterator[432377])
        }
      }
      { scopeless type
        (432394 'move' _indexOfInterest[432375](432397 call iteratorIndex _iterator[432377]))
      }
      ForLoop
      {
        unknown i[432402] "index var" "insert auto destroy"
        (432404 'move' i[432402] _indexOfInterest[432375])
        unknown yret[462003] "YVV" "temp"
        (462006 'move' yret[462003](462005 'deref' i[432402]))
        (462008 yield yret[462003])
        label _continueLabel[432409]
        _indexOfInterest[432375]
        _iterator[432377]
      }
      label _breakLabel[432411]
    }
    (462001 return ret[461999])
  }
  function chpl_direct_range_iter[432289](arg low[432296] :
  (432293 call int(64)[13] 8), arg high[432302] :
  (432300 call int(64)[13] 8), arg stride[432308] :
  (432306 call uint(64)[107] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462012] "RVV" "temp"
    {
      unknown _indexOfInterest[432312] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432314] "expr temp" "temp"
      unknown call_tmp[573092] "expr temp" "maybe param" "maybe type" "temp"
      (573095 'move' call_tmp[573092](432321 call chpl_direct_pos_stride_range_iter low[432296] high[432302] stride[432308]))
      (432316 'move' _iterator[432314](432319 call _getIterator call_tmp[573092]))
      Defer
      {
        {
          (432327 call _freeIterator _iterator[432314])
        }
      }
      { scopeless type
        (432331 'move' _indexOfInterest[432312](432334 call iteratorIndex _iterator[432314]))
      }
      ForLoop
      {
        unknown i[432339] "index var" "insert auto destroy"
        (432341 'move' i[432339] _indexOfInterest[432312])
        unknown yret[462016] "YVV" "temp"
        (462019 'move' yret[462016](462018 'deref' i[432339]))
        (462021 yield yret[462016])
        label _continueLabel[432346]
        _indexOfInterest[432312]
        _iterator[432314]
      }
      label _breakLabel[432348]
    }
    (462014 return ret[462012])
  }
  function chpl_direct_range_iter[432730](arg low[432737] :
  (432734 call uint(64)[107] 64), arg high[432743] :
  (432741 call uint(64)[107] 64), arg stride[432749] :
  (432747 call uint(64)[107] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462025] "RVV" "temp"
    {
      unknown _indexOfInterest[432753] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432755] "expr temp" "temp"
      unknown call_tmp[573097] "expr temp" "maybe param" "maybe type" "temp"
      (573100 'move' call_tmp[573097](432762 call chpl_direct_pos_stride_range_iter low[432737] high[432743] stride[432749]))
      (432757 'move' _iterator[432755](432760 call _getIterator call_tmp[573097]))
      Defer
      {
        {
          (432768 call _freeIterator _iterator[432755])
        }
      }
      { scopeless type
        (432772 'move' _indexOfInterest[432753](432775 call iteratorIndex _iterator[432755]))
      }
      ForLoop
      {
        unknown i[432780] "index var" "insert auto destroy"
        (432782 'move' i[432780] _indexOfInterest[432753])
        unknown yret[462029] "YVV" "temp"
        (462032 'move' yret[462029](462031 'deref' i[432780]))
        (462034 yield yret[462029])
        label _continueLabel[432787]
        _indexOfInterest[432753]
        _iterator[432755]
      }
      label _breakLabel[432789]
    }
    (462027 return ret[462025])
  }
  function chpl_direct_range_iter[432667](arg low[432674] :
  (432671 call uint(64)[107] 32), arg high[432680] :
  (432678 call uint(64)[107] 32), arg stride[432686] :
  (432684 call uint(64)[107] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462038] "RVV" "temp"
    {
      unknown _indexOfInterest[432690] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432692] "expr temp" "temp"
      unknown call_tmp[573102] "expr temp" "maybe param" "maybe type" "temp"
      (573105 'move' call_tmp[573102](432699 call chpl_direct_pos_stride_range_iter low[432674] high[432680] stride[432686]))
      (432694 'move' _iterator[432692](432697 call _getIterator call_tmp[573102]))
      Defer
      {
        {
          (432705 call _freeIterator _iterator[432692])
        }
      }
      { scopeless type
        (432709 'move' _indexOfInterest[432690](432712 call iteratorIndex _iterator[432692]))
      }
      ForLoop
      {
        unknown i[432717] "index var" "insert auto destroy"
        (432719 'move' i[432717] _indexOfInterest[432690])
        unknown yret[462042] "YVV" "temp"
        (462045 'move' yret[462042](462044 'deref' i[432717]))
        (462047 yield yret[462042])
        label _continueLabel[432724]
        _indexOfInterest[432690]
        _iterator[432692]
      }
      label _breakLabel[432726]
    }
    (462040 return ret[462038])
  }
  function chpl_direct_range_iter[432604](arg low[432611] :
  (432608 call uint(64)[107] 16), arg high[432617] :
  (432615 call uint(64)[107] 16), arg stride[432623] :
  (432621 call uint(64)[107] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462051] "RVV" "temp"
    {
      unknown _indexOfInterest[432627] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432629] "expr temp" "temp"
      unknown call_tmp[573107] "expr temp" "maybe param" "maybe type" "temp"
      (573110 'move' call_tmp[573107](432636 call chpl_direct_pos_stride_range_iter low[432611] high[432617] stride[432623]))
      (432631 'move' _iterator[432629](432634 call _getIterator call_tmp[573107]))
      Defer
      {
        {
          (432642 call _freeIterator _iterator[432629])
        }
      }
      { scopeless type
        (432646 'move' _indexOfInterest[432627](432649 call iteratorIndex _iterator[432629]))
      }
      ForLoop
      {
        unknown i[432654] "index var" "insert auto destroy"
        (432656 'move' i[432654] _indexOfInterest[432627])
        unknown yret[462055] "YVV" "temp"
        (462058 'move' yret[462055](462057 'deref' i[432654]))
        (462060 yield yret[462055])
        label _continueLabel[432661]
        _indexOfInterest[432627]
        _iterator[432629]
      }
      label _breakLabel[432663]
    }
    (462053 return ret[462051])
  }
  function chpl_direct_range_iter[432541](arg low[432548] :
  (432545 call uint(64)[107] 8), arg high[432554] :
  (432552 call uint(64)[107] 8), arg stride[432560] :
  (432558 call uint(64)[107] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462064] "RVV" "temp"
    {
      unknown _indexOfInterest[432564] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[432566] "expr temp" "temp"
      unknown call_tmp[573112] "expr temp" "maybe param" "maybe type" "temp"
      (573115 'move' call_tmp[573112](432573 call chpl_direct_pos_stride_range_iter low[432548] high[432554] stride[432560]))
      (432568 'move' _iterator[432566](432571 call _getIterator call_tmp[573112]))
      Defer
      {
        {
          (432579 call _freeIterator _iterator[432566])
        }
      }
      { scopeless type
        (432583 'move' _indexOfInterest[432564](432586 call iteratorIndex _iterator[432566]))
      }
      ForLoop
      {
        unknown i[432591] "index var" "insert auto destroy"
        (432593 'move' i[432591] _indexOfInterest[432564])
        unknown yret[462068] "YVV" "temp"
        (462071 'move' yret[462068](462070 'deref' i[432591]))
        (462073 yield yret[462068])
        label _continueLabel[432598]
        _indexOfInterest[432564]
        _iterator[432566]
      }
      label _breakLabel[432600]
    }
    (462066 return ret[462064])
  }
  function chpl_direct_range_iter[432898](arg low[432905] :
  (432902 call int(64)[13] 64), arg high[432911] :
  (432909 call int(64)[13] 64), arg stride[432913]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462077] "RVV" "temp"
    unknown call_tmp[573117] "expr temp" "maybe param" "maybe type" "temp"
    (573120 'move' call_tmp[573117](432923 call int(64)[13] 64))
    unknown call_tmp[573122] "expr temp" "maybe param" "maybe type" "temp"
    (573125 'move' call_tmp[573122](432920 call _cast string[24] call_tmp[573117]))
    unknown call_tmp[573127] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573130 'move' call_tmp[573127](432929 'typeof' stride[432913]))
    unknown call_tmp[573132] "expr temp" "maybe param" "maybe type" "temp"
    (573135 'move' call_tmp[573132](432927 call _cast string[24] call_tmp[573127]))
    (432917 call compilerError "can't apply 'by' to a range with idxType " call_tmp[573122] " using a step of type " call_tmp[573132])
    (462079 return ret[462077])
  }
  function chpl_direct_range_iter[432863](arg low[432870] :
  (432867 call int(64)[13] 32), arg high[432876] :
  (432874 call int(64)[13] 32), arg stride[432878]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462083] "RVV" "temp"
    unknown call_tmp[573137] "expr temp" "maybe param" "maybe type" "temp"
    (573140 'move' call_tmp[573137](432888 call int(64)[13] 32))
    unknown call_tmp[573142] "expr temp" "maybe param" "maybe type" "temp"
    (573145 'move' call_tmp[573142](432885 call _cast string[24] call_tmp[573137]))
    unknown call_tmp[573147] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573150 'move' call_tmp[573147](432894 'typeof' stride[432878]))
    unknown call_tmp[573152] "expr temp" "maybe param" "maybe type" "temp"
    (573155 'move' call_tmp[573152](432892 call _cast string[24] call_tmp[573147]))
    (432882 call compilerError "can't apply 'by' to a range with idxType " call_tmp[573142] " using a step of type " call_tmp[573152])
    (462085 return ret[462083])
  }
  function chpl_direct_range_iter[432828](arg low[432835] :
  (432832 call int(64)[13] 16), arg high[432841] :
  (432839 call int(64)[13] 16), arg stride[432843]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462089] "RVV" "temp"
    unknown call_tmp[573157] "expr temp" "maybe param" "maybe type" "temp"
    (573160 'move' call_tmp[573157](432853 call int(64)[13] 16))
    unknown call_tmp[573162] "expr temp" "maybe param" "maybe type" "temp"
    (573165 'move' call_tmp[573162](432850 call _cast string[24] call_tmp[573157]))
    unknown call_tmp[573167] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573170 'move' call_tmp[573167](432859 'typeof' stride[432843]))
    unknown call_tmp[573172] "expr temp" "maybe param" "maybe type" "temp"
    (573175 'move' call_tmp[573172](432857 call _cast string[24] call_tmp[573167]))
    (432847 call compilerError "can't apply 'by' to a range with idxType " call_tmp[573162] " using a step of type " call_tmp[573172])
    (462091 return ret[462089])
  }
  function chpl_direct_range_iter[432793](arg low[432800] :
  (432797 call int(64)[13] 8), arg high[432806] :
  (432804 call int(64)[13] 8), arg stride[432808]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462095] "RVV" "temp"
    unknown call_tmp[573177] "expr temp" "maybe param" "maybe type" "temp"
    (573180 'move' call_tmp[573177](432818 call int(64)[13] 8))
    unknown call_tmp[573182] "expr temp" "maybe param" "maybe type" "temp"
    (573185 'move' call_tmp[573182](432815 call _cast string[24] call_tmp[573177]))
    unknown call_tmp[573187] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573190 'move' call_tmp[573187](432824 'typeof' stride[432808]))
    unknown call_tmp[573192] "expr temp" "maybe param" "maybe type" "temp"
    (573195 'move' call_tmp[573192](432822 call _cast string[24] call_tmp[573187]))
    (432812 call compilerError "can't apply 'by' to a range with idxType " call_tmp[573182] " using a step of type " call_tmp[573192])
    (462097 return ret[462095])
  }
  function chpl_direct_range_iter[433038](arg low[433045] :
  (433042 call uint(64)[107] 64), arg high[433051] :
  (433049 call uint(64)[107] 64), arg stride[433053]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462101] "RVV" "temp"
    unknown call_tmp[573197] "expr temp" "maybe param" "maybe type" "temp"
    (573200 'move' call_tmp[573197](433063 call uint(64)[107] 64))
    unknown call_tmp[573202] "expr temp" "maybe param" "maybe type" "temp"
    (573205 'move' call_tmp[573202](433060 call _cast string[24] call_tmp[573197]))
    unknown call_tmp[573207] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573210 'move' call_tmp[573207](433069 'typeof' stride[433053]))
    unknown call_tmp[573212] "expr temp" "maybe param" "maybe type" "temp"
    (573215 'move' call_tmp[573212](433067 call _cast string[24] call_tmp[573207]))
    (433057 call compilerError "can't apply 'by' to a range with idxType " call_tmp[573202] " using a step of type " call_tmp[573212])
    (462103 return ret[462101])
  }
  function chpl_direct_range_iter[433003](arg low[433010] :
  (433007 call uint(64)[107] 32), arg high[433016] :
  (433014 call uint(64)[107] 32), arg stride[433018]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462107] "RVV" "temp"
    unknown call_tmp[573217] "expr temp" "maybe param" "maybe type" "temp"
    (573220 'move' call_tmp[573217](433028 call uint(64)[107] 32))
    unknown call_tmp[573222] "expr temp" "maybe param" "maybe type" "temp"
    (573225 'move' call_tmp[573222](433025 call _cast string[24] call_tmp[573217]))
    unknown call_tmp[573227] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573230 'move' call_tmp[573227](433034 'typeof' stride[433018]))
    unknown call_tmp[573232] "expr temp" "maybe param" "maybe type" "temp"
    (573235 'move' call_tmp[573232](433032 call _cast string[24] call_tmp[573227]))
    (433022 call compilerError "can't apply 'by' to a range with idxType " call_tmp[573222] " using a step of type " call_tmp[573232])
    (462109 return ret[462107])
  }
  function chpl_direct_range_iter[432968](arg low[432975] :
  (432972 call uint(64)[107] 16), arg high[432981] :
  (432979 call uint(64)[107] 16), arg stride[432983]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462113] "RVV" "temp"
    unknown call_tmp[573237] "expr temp" "maybe param" "maybe type" "temp"
    (573240 'move' call_tmp[573237](432993 call uint(64)[107] 16))
    unknown call_tmp[573242] "expr temp" "maybe param" "maybe type" "temp"
    (573245 'move' call_tmp[573242](432990 call _cast string[24] call_tmp[573237]))
    unknown call_tmp[573247] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573250 'move' call_tmp[573247](432999 'typeof' stride[432983]))
    unknown call_tmp[573252] "expr temp" "maybe param" "maybe type" "temp"
    (573255 'move' call_tmp[573252](432997 call _cast string[24] call_tmp[573247]))
    (432987 call compilerError "can't apply 'by' to a range with idxType " call_tmp[573242] " using a step of type " call_tmp[573252])
    (462115 return ret[462113])
  }
  function chpl_direct_range_iter[432933](arg low[432940] :
  (432937 call uint(64)[107] 8), arg high[432946] :
  (432944 call uint(64)[107] 8), arg stride[432948]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462119] "RVV" "temp"
    unknown call_tmp[573257] "expr temp" "maybe param" "maybe type" "temp"
    (573260 'move' call_tmp[573257](432958 call uint(64)[107] 8))
    unknown call_tmp[573262] "expr temp" "maybe param" "maybe type" "temp"
    (573265 'move' call_tmp[573262](432955 call _cast string[24] call_tmp[573257]))
    unknown call_tmp[573267] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573270 'move' call_tmp[573267](432964 'typeof' stride[432948]))
    unknown call_tmp[573272] "expr temp" "maybe param" "maybe type" "temp"
    (573275 'move' call_tmp[573272](432962 call _cast string[24] call_tmp[573267]))
    (432952 call compilerError "can't apply 'by' to a range with idxType " call_tmp[573262] " using a step of type " call_tmp[573272])
    (462121 return ret[462119])
  }
  function chpl_direct_range_iter[75893](arg low[75891]:_any[170](?), arg high[75895]:_any[170](?), arg stride[75897]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462125] "RVV" "temp"
    (75902 call compilerError "Bounds of 'low..high' must be integers of compatible types.")
    (462127 return ret[462125])
  }
  function chpl_direct_counted_range_iter[433241](arg low[433248] :
  (433245 call int(64)[13] 64), arg count[433254] :
  (433252 call int(64)[13] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462131] "RVV" "temp"
    {
      unknown _indexOfInterest[433258] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433260] "expr temp" "temp"
      unknown call_tmp[573277] "expr temp" "maybe param" "maybe type" "temp"
      (573280 'move' call_tmp[573277](433267 call chpl_direct_counted_range_iter_helper low[433248] count[433254]))
      (433262 'move' _iterator[433260](433265 call _getIterator call_tmp[573277]))
      Defer
      {
        {
          (433272 call _freeIterator _iterator[433260])
        }
      }
      { scopeless type
        (433276 'move' _indexOfInterest[433258](433279 call iteratorIndex _iterator[433260]))
      }
      ForLoop
      {
        unknown i[433284] "index var" "insert auto destroy"
        (433286 'move' i[433284] _indexOfInterest[433258])
        unknown yret[462135] "YVV" "temp"
        (462138 'move' yret[462135](462137 'deref' i[433284]))
        (462140 yield yret[462135])
        label _continueLabel[433291]
        _indexOfInterest[433258]
        _iterator[433260]
      }
      label _breakLabel[433293]
    }
    (462133 return ret[462131])
  }
  function chpl_direct_counted_range_iter[433185](arg low[433192] :
  (433189 call int(64)[13] 32), arg count[433198] :
  (433196 call int(64)[13] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462144] "RVV" "temp"
    {
      unknown _indexOfInterest[433202] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433204] "expr temp" "temp"
      unknown call_tmp[573282] "expr temp" "maybe param" "maybe type" "temp"
      (573285 'move' call_tmp[573282](433211 call chpl_direct_counted_range_iter_helper low[433192] count[433198]))
      (433206 'move' _iterator[433204](433209 call _getIterator call_tmp[573282]))
      Defer
      {
        {
          (433216 call _freeIterator _iterator[433204])
        }
      }
      { scopeless type
        (433220 'move' _indexOfInterest[433202](433223 call iteratorIndex _iterator[433204]))
      }
      ForLoop
      {
        unknown i[433228] "index var" "insert auto destroy"
        (433230 'move' i[433228] _indexOfInterest[433202])
        unknown yret[462148] "YVV" "temp"
        (462151 'move' yret[462148](462150 'deref' i[433228]))
        (462153 yield yret[462148])
        label _continueLabel[433235]
        _indexOfInterest[433202]
        _iterator[433204]
      }
      label _breakLabel[433237]
    }
    (462146 return ret[462144])
  }
  function chpl_direct_counted_range_iter[433129](arg low[433136] :
  (433133 call int(64)[13] 16), arg count[433142] :
  (433140 call int(64)[13] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462157] "RVV" "temp"
    {
      unknown _indexOfInterest[433146] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433148] "expr temp" "temp"
      unknown call_tmp[573287] "expr temp" "maybe param" "maybe type" "temp"
      (573290 'move' call_tmp[573287](433155 call chpl_direct_counted_range_iter_helper low[433136] count[433142]))
      (433150 'move' _iterator[433148](433153 call _getIterator call_tmp[573287]))
      Defer
      {
        {
          (433160 call _freeIterator _iterator[433148])
        }
      }
      { scopeless type
        (433164 'move' _indexOfInterest[433146](433167 call iteratorIndex _iterator[433148]))
      }
      ForLoop
      {
        unknown i[433172] "index var" "insert auto destroy"
        (433174 'move' i[433172] _indexOfInterest[433146])
        unknown yret[462161] "YVV" "temp"
        (462164 'move' yret[462161](462163 'deref' i[433172]))
        (462166 yield yret[462161])
        label _continueLabel[433179]
        _indexOfInterest[433146]
        _iterator[433148]
      }
      label _breakLabel[433181]
    }
    (462159 return ret[462157])
  }
  function chpl_direct_counted_range_iter[433073](arg low[433080] :
  (433077 call int(64)[13] 8), arg count[433086] :
  (433084 call int(64)[13] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462170] "RVV" "temp"
    {
      unknown _indexOfInterest[433090] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433092] "expr temp" "temp"
      unknown call_tmp[573292] "expr temp" "maybe param" "maybe type" "temp"
      (573295 'move' call_tmp[573292](433099 call chpl_direct_counted_range_iter_helper low[433080] count[433086]))
      (433094 'move' _iterator[433092](433097 call _getIterator call_tmp[573292]))
      Defer
      {
        {
          (433104 call _freeIterator _iterator[433092])
        }
      }
      { scopeless type
        (433108 'move' _indexOfInterest[433090](433111 call iteratorIndex _iterator[433092]))
      }
      ForLoop
      {
        unknown i[433116] "index var" "insert auto destroy"
        (433118 'move' i[433116] _indexOfInterest[433090])
        unknown yret[462174] "YVV" "temp"
        (462177 'move' yret[462174](462176 'deref' i[433116]))
        (462179 yield yret[462174])
        label _continueLabel[433123]
        _indexOfInterest[433090]
        _iterator[433092]
      }
      label _breakLabel[433125]
    }
    (462172 return ret[462170])
  }
  function chpl_direct_counted_range_iter[433465](arg low[433472] :
  (433469 call int(64)[13] 64), arg count[433478] :
  (433476 call uint(64)[107] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462183] "RVV" "temp"
    {
      unknown _indexOfInterest[433482] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433484] "expr temp" "temp"
      unknown call_tmp[573297] "expr temp" "maybe param" "maybe type" "temp"
      (573300 'move' call_tmp[573297](433491 call chpl_direct_counted_range_iter_helper low[433472] count[433478]))
      (433486 'move' _iterator[433484](433489 call _getIterator call_tmp[573297]))
      Defer
      {
        {
          (433496 call _freeIterator _iterator[433484])
        }
      }
      { scopeless type
        (433500 'move' _indexOfInterest[433482](433503 call iteratorIndex _iterator[433484]))
      }
      ForLoop
      {
        unknown i[433508] "index var" "insert auto destroy"
        (433510 'move' i[433508] _indexOfInterest[433482])
        unknown yret[462187] "YVV" "temp"
        (462190 'move' yret[462187](462189 'deref' i[433508]))
        (462192 yield yret[462187])
        label _continueLabel[433515]
        _indexOfInterest[433482]
        _iterator[433484]
      }
      label _breakLabel[433517]
    }
    (462185 return ret[462183])
  }
  function chpl_direct_counted_range_iter[433409](arg low[433416] :
  (433413 call int(64)[13] 32), arg count[433422] :
  (433420 call uint(64)[107] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462196] "RVV" "temp"
    {
      unknown _indexOfInterest[433426] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433428] "expr temp" "temp"
      unknown call_tmp[573302] "expr temp" "maybe param" "maybe type" "temp"
      (573305 'move' call_tmp[573302](433435 call chpl_direct_counted_range_iter_helper low[433416] count[433422]))
      (433430 'move' _iterator[433428](433433 call _getIterator call_tmp[573302]))
      Defer
      {
        {
          (433440 call _freeIterator _iterator[433428])
        }
      }
      { scopeless type
        (433444 'move' _indexOfInterest[433426](433447 call iteratorIndex _iterator[433428]))
      }
      ForLoop
      {
        unknown i[433452] "index var" "insert auto destroy"
        (433454 'move' i[433452] _indexOfInterest[433426])
        unknown yret[462200] "YVV" "temp"
        (462203 'move' yret[462200](462202 'deref' i[433452]))
        (462205 yield yret[462200])
        label _continueLabel[433459]
        _indexOfInterest[433426]
        _iterator[433428]
      }
      label _breakLabel[433461]
    }
    (462198 return ret[462196])
  }
  function chpl_direct_counted_range_iter[433353](arg low[433360] :
  (433357 call int(64)[13] 16), arg count[433366] :
  (433364 call uint(64)[107] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462209] "RVV" "temp"
    {
      unknown _indexOfInterest[433370] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433372] "expr temp" "temp"
      unknown call_tmp[573307] "expr temp" "maybe param" "maybe type" "temp"
      (573310 'move' call_tmp[573307](433379 call chpl_direct_counted_range_iter_helper low[433360] count[433366]))
      (433374 'move' _iterator[433372](433377 call _getIterator call_tmp[573307]))
      Defer
      {
        {
          (433384 call _freeIterator _iterator[433372])
        }
      }
      { scopeless type
        (433388 'move' _indexOfInterest[433370](433391 call iteratorIndex _iterator[433372]))
      }
      ForLoop
      {
        unknown i[433396] "index var" "insert auto destroy"
        (433398 'move' i[433396] _indexOfInterest[433370])
        unknown yret[462213] "YVV" "temp"
        (462216 'move' yret[462213](462215 'deref' i[433396]))
        (462218 yield yret[462213])
        label _continueLabel[433403]
        _indexOfInterest[433370]
        _iterator[433372]
      }
      label _breakLabel[433405]
    }
    (462211 return ret[462209])
  }
  function chpl_direct_counted_range_iter[433297](arg low[433304] :
  (433301 call int(64)[13] 8), arg count[433310] :
  (433308 call uint(64)[107] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462222] "RVV" "temp"
    {
      unknown _indexOfInterest[433314] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433316] "expr temp" "temp"
      unknown call_tmp[573312] "expr temp" "maybe param" "maybe type" "temp"
      (573315 'move' call_tmp[573312](433323 call chpl_direct_counted_range_iter_helper low[433304] count[433310]))
      (433318 'move' _iterator[433316](433321 call _getIterator call_tmp[573312]))
      Defer
      {
        {
          (433328 call _freeIterator _iterator[433316])
        }
      }
      { scopeless type
        (433332 'move' _indexOfInterest[433314](433335 call iteratorIndex _iterator[433316]))
      }
      ForLoop
      {
        unknown i[433340] "index var" "insert auto destroy"
        (433342 'move' i[433340] _indexOfInterest[433314])
        unknown yret[462226] "YVV" "temp"
        (462229 'move' yret[462226](462228 'deref' i[433340]))
        (462231 yield yret[462226])
        label _continueLabel[433347]
        _indexOfInterest[433314]
        _iterator[433316]
      }
      label _breakLabel[433349]
    }
    (462224 return ret[462222])
  }
  function chpl_direct_counted_range_iter[433689](arg low[433696] :
  (433693 call uint(64)[107] 64), arg count[433702] :
  (433700 call int(64)[13] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462235] "RVV" "temp"
    {
      unknown _indexOfInterest[433706] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433708] "expr temp" "temp"
      unknown call_tmp[573317] "expr temp" "maybe param" "maybe type" "temp"
      (573320 'move' call_tmp[573317](433715 call chpl_direct_counted_range_iter_helper low[433696] count[433702]))
      (433710 'move' _iterator[433708](433713 call _getIterator call_tmp[573317]))
      Defer
      {
        {
          (433720 call _freeIterator _iterator[433708])
        }
      }
      { scopeless type
        (433724 'move' _indexOfInterest[433706](433727 call iteratorIndex _iterator[433708]))
      }
      ForLoop
      {
        unknown i[433732] "index var" "insert auto destroy"
        (433734 'move' i[433732] _indexOfInterest[433706])
        unknown yret[462239] "YVV" "temp"
        (462242 'move' yret[462239](462241 'deref' i[433732]))
        (462244 yield yret[462239])
        label _continueLabel[433739]
        _indexOfInterest[433706]
        _iterator[433708]
      }
      label _breakLabel[433741]
    }
    (462237 return ret[462235])
  }
  function chpl_direct_counted_range_iter[433633](arg low[433640] :
  (433637 call uint(64)[107] 32), arg count[433646] :
  (433644 call int(64)[13] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462248] "RVV" "temp"
    {
      unknown _indexOfInterest[433650] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433652] "expr temp" "temp"
      unknown call_tmp[573322] "expr temp" "maybe param" "maybe type" "temp"
      (573325 'move' call_tmp[573322](433659 call chpl_direct_counted_range_iter_helper low[433640] count[433646]))
      (433654 'move' _iterator[433652](433657 call _getIterator call_tmp[573322]))
      Defer
      {
        {
          (433664 call _freeIterator _iterator[433652])
        }
      }
      { scopeless type
        (433668 'move' _indexOfInterest[433650](433671 call iteratorIndex _iterator[433652]))
      }
      ForLoop
      {
        unknown i[433676] "index var" "insert auto destroy"
        (433678 'move' i[433676] _indexOfInterest[433650])
        unknown yret[462252] "YVV" "temp"
        (462255 'move' yret[462252](462254 'deref' i[433676]))
        (462257 yield yret[462252])
        label _continueLabel[433683]
        _indexOfInterest[433650]
        _iterator[433652]
      }
      label _breakLabel[433685]
    }
    (462250 return ret[462248])
  }
  function chpl_direct_counted_range_iter[433577](arg low[433584] :
  (433581 call uint(64)[107] 16), arg count[433590] :
  (433588 call int(64)[13] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462261] "RVV" "temp"
    {
      unknown _indexOfInterest[433594] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433596] "expr temp" "temp"
      unknown call_tmp[573327] "expr temp" "maybe param" "maybe type" "temp"
      (573330 'move' call_tmp[573327](433603 call chpl_direct_counted_range_iter_helper low[433584] count[433590]))
      (433598 'move' _iterator[433596](433601 call _getIterator call_tmp[573327]))
      Defer
      {
        {
          (433608 call _freeIterator _iterator[433596])
        }
      }
      { scopeless type
        (433612 'move' _indexOfInterest[433594](433615 call iteratorIndex _iterator[433596]))
      }
      ForLoop
      {
        unknown i[433620] "index var" "insert auto destroy"
        (433622 'move' i[433620] _indexOfInterest[433594])
        unknown yret[462265] "YVV" "temp"
        (462268 'move' yret[462265](462267 'deref' i[433620]))
        (462270 yield yret[462265])
        label _continueLabel[433627]
        _indexOfInterest[433594]
        _iterator[433596]
      }
      label _breakLabel[433629]
    }
    (462263 return ret[462261])
  }
  function chpl_direct_counted_range_iter[433521](arg low[433528] :
  (433525 call uint(64)[107] 8), arg count[433534] :
  (433532 call int(64)[13] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462274] "RVV" "temp"
    {
      unknown _indexOfInterest[433538] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433540] "expr temp" "temp"
      unknown call_tmp[573332] "expr temp" "maybe param" "maybe type" "temp"
      (573335 'move' call_tmp[573332](433547 call chpl_direct_counted_range_iter_helper low[433528] count[433534]))
      (433542 'move' _iterator[433540](433545 call _getIterator call_tmp[573332]))
      Defer
      {
        {
          (433552 call _freeIterator _iterator[433540])
        }
      }
      { scopeless type
        (433556 'move' _indexOfInterest[433538](433559 call iteratorIndex _iterator[433540]))
      }
      ForLoop
      {
        unknown i[433564] "index var" "insert auto destroy"
        (433566 'move' i[433564] _indexOfInterest[433538])
        unknown yret[462278] "YVV" "temp"
        (462281 'move' yret[462278](462280 'deref' i[433564]))
        (462283 yield yret[462278])
        label _continueLabel[433571]
        _indexOfInterest[433538]
        _iterator[433540]
      }
      label _breakLabel[433573]
    }
    (462276 return ret[462274])
  }
  function chpl_direct_counted_range_iter[433913](arg low[433920] :
  (433917 call uint(64)[107] 64), arg count[433926] :
  (433924 call uint(64)[107] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462287] "RVV" "temp"
    {
      unknown _indexOfInterest[433930] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433932] "expr temp" "temp"
      unknown call_tmp[573337] "expr temp" "maybe param" "maybe type" "temp"
      (573340 'move' call_tmp[573337](433939 call chpl_direct_counted_range_iter_helper low[433920] count[433926]))
      (433934 'move' _iterator[433932](433937 call _getIterator call_tmp[573337]))
      Defer
      {
        {
          (433944 call _freeIterator _iterator[433932])
        }
      }
      { scopeless type
        (433948 'move' _indexOfInterest[433930](433951 call iteratorIndex _iterator[433932]))
      }
      ForLoop
      {
        unknown i[433956] "index var" "insert auto destroy"
        (433958 'move' i[433956] _indexOfInterest[433930])
        unknown yret[462291] "YVV" "temp"
        (462294 'move' yret[462291](462293 'deref' i[433956]))
        (462296 yield yret[462291])
        label _continueLabel[433963]
        _indexOfInterest[433930]
        _iterator[433932]
      }
      label _breakLabel[433965]
    }
    (462289 return ret[462287])
  }
  function chpl_direct_counted_range_iter[433857](arg low[433864] :
  (433861 call uint(64)[107] 32), arg count[433870] :
  (433868 call uint(64)[107] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462300] "RVV" "temp"
    {
      unknown _indexOfInterest[433874] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433876] "expr temp" "temp"
      unknown call_tmp[573342] "expr temp" "maybe param" "maybe type" "temp"
      (573345 'move' call_tmp[573342](433883 call chpl_direct_counted_range_iter_helper low[433864] count[433870]))
      (433878 'move' _iterator[433876](433881 call _getIterator call_tmp[573342]))
      Defer
      {
        {
          (433888 call _freeIterator _iterator[433876])
        }
      }
      { scopeless type
        (433892 'move' _indexOfInterest[433874](433895 call iteratorIndex _iterator[433876]))
      }
      ForLoop
      {
        unknown i[433900] "index var" "insert auto destroy"
        (433902 'move' i[433900] _indexOfInterest[433874])
        unknown yret[462304] "YVV" "temp"
        (462307 'move' yret[462304](462306 'deref' i[433900]))
        (462309 yield yret[462304])
        label _continueLabel[433907]
        _indexOfInterest[433874]
        _iterator[433876]
      }
      label _breakLabel[433909]
    }
    (462302 return ret[462300])
  }
  function chpl_direct_counted_range_iter[433801](arg low[433808] :
  (433805 call uint(64)[107] 16), arg count[433814] :
  (433812 call uint(64)[107] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462313] "RVV" "temp"
    {
      unknown _indexOfInterest[433818] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433820] "expr temp" "temp"
      unknown call_tmp[573347] "expr temp" "maybe param" "maybe type" "temp"
      (573350 'move' call_tmp[573347](433827 call chpl_direct_counted_range_iter_helper low[433808] count[433814]))
      (433822 'move' _iterator[433820](433825 call _getIterator call_tmp[573347]))
      Defer
      {
        {
          (433832 call _freeIterator _iterator[433820])
        }
      }
      { scopeless type
        (433836 'move' _indexOfInterest[433818](433839 call iteratorIndex _iterator[433820]))
      }
      ForLoop
      {
        unknown i[433844] "index var" "insert auto destroy"
        (433846 'move' i[433844] _indexOfInterest[433818])
        unknown yret[462317] "YVV" "temp"
        (462320 'move' yret[462317](462319 'deref' i[433844]))
        (462322 yield yret[462317])
        label _continueLabel[433851]
        _indexOfInterest[433818]
        _iterator[433820]
      }
      label _breakLabel[433853]
    }
    (462315 return ret[462313])
  }
  function chpl_direct_counted_range_iter[433745](arg low[433752] :
  (433749 call uint(64)[107] 8), arg count[433758] :
  (433756 call uint(64)[107] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462326] "RVV" "temp"
    {
      unknown _indexOfInterest[433762] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433764] "expr temp" "temp"
      unknown call_tmp[573352] "expr temp" "maybe param" "maybe type" "temp"
      (573355 'move' call_tmp[573352](433771 call chpl_direct_counted_range_iter_helper low[433752] count[433758]))
      (433766 'move' _iterator[433764](433769 call _getIterator call_tmp[573352]))
      Defer
      {
        {
          (433776 call _freeIterator _iterator[433764])
        }
      }
      { scopeless type
        (433780 'move' _indexOfInterest[433762](433783 call iteratorIndex _iterator[433764]))
      }
      ForLoop
      {
        unknown i[433788] "index var" "insert auto destroy"
        (433790 'move' i[433788] _indexOfInterest[433762])
        unknown yret[462330] "YVV" "temp"
        (462333 'move' yret[462330](462332 'deref' i[433788]))
        (462335 yield yret[462330])
        label _continueLabel[433795]
        _indexOfInterest[433762]
        _iterator[433764]
      }
      label _breakLabel[433797]
    }
    (462328 return ret[462326])
  }
  function chpl_direct_counted_range_iter[434146](arg low[434150]:enumerated[179](?), arg count[434157] :
  (434154 call int(64)[13] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462339] "RVV" "temp"
    unknown call_tmp[573357] "maybe param" "maybe type" "temp"
    (573360 'move' call_tmp[573357](434162 call chpl_build_low_bounded_range low[434150]))
    const r[434160] "const" "insert auto destroy"
    (489856 'init var' r[434160] call_tmp[573357])
    {
      unknown _indexOfInterest[434166] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434168] "expr temp" "temp"
      unknown call_tmp[573362] "expr temp" "maybe param" "maybe type" "temp"
      (573365 'move' call_tmp[573362](434175 call # r[434160] count[434157]))
      (434170 'move' _iterator[434168](434173 call _getIterator call_tmp[573362]))
      Defer
      {
        {
          (434180 call _freeIterator _iterator[434168])
        }
      }
      { scopeless type
        (434184 'move' _indexOfInterest[434166](434187 call iteratorIndex _iterator[434168]))
      }
      ForLoop
      {
        unknown i[434192] "index var" "insert auto destroy"
        (434194 'move' i[434192] _indexOfInterest[434166])
        unknown yret[462343] "YVV" "temp"
        (462346 'move' yret[462343](462345 'deref' i[434192]))
        (462348 yield yret[462343])
        label _continueLabel[434199]
        _indexOfInterest[434166]
        _iterator[434168]
      }
      label _breakLabel[434201]
    }
    (462341 return ret[462339])
  }
  function chpl_direct_counted_range_iter[434087](arg low[434091]:enumerated[179](?), arg count[434098] :
  (434095 call int(64)[13] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462352] "RVV" "temp"
    unknown call_tmp[573367] "maybe param" "maybe type" "temp"
    (573370 'move' call_tmp[573367](434103 call chpl_build_low_bounded_range low[434091]))
    const r[434101] "const" "insert auto destroy"
    (489858 'init var' r[434101] call_tmp[573367])
    {
      unknown _indexOfInterest[434107] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434109] "expr temp" "temp"
      unknown call_tmp[573372] "expr temp" "maybe param" "maybe type" "temp"
      (573375 'move' call_tmp[573372](434116 call # r[434101] count[434098]))
      (434111 'move' _iterator[434109](434114 call _getIterator call_tmp[573372]))
      Defer
      {
        {
          (434121 call _freeIterator _iterator[434109])
        }
      }
      { scopeless type
        (434125 'move' _indexOfInterest[434107](434128 call iteratorIndex _iterator[434109]))
      }
      ForLoop
      {
        unknown i[434133] "index var" "insert auto destroy"
        (434135 'move' i[434133] _indexOfInterest[434107])
        unknown yret[462356] "YVV" "temp"
        (462359 'move' yret[462356](462358 'deref' i[434133]))
        (462361 yield yret[462356])
        label _continueLabel[434140]
        _indexOfInterest[434107]
        _iterator[434109]
      }
      label _breakLabel[434142]
    }
    (462354 return ret[462352])
  }
  function chpl_direct_counted_range_iter[434028](arg low[434032]:enumerated[179](?), arg count[434039] :
  (434036 call int(64)[13] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462365] "RVV" "temp"
    unknown call_tmp[573377] "maybe param" "maybe type" "temp"
    (573380 'move' call_tmp[573377](434044 call chpl_build_low_bounded_range low[434032]))
    const r[434042] "const" "insert auto destroy"
    (489860 'init var' r[434042] call_tmp[573377])
    {
      unknown _indexOfInterest[434048] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434050] "expr temp" "temp"
      unknown call_tmp[573382] "expr temp" "maybe param" "maybe type" "temp"
      (573385 'move' call_tmp[573382](434057 call # r[434042] count[434039]))
      (434052 'move' _iterator[434050](434055 call _getIterator call_tmp[573382]))
      Defer
      {
        {
          (434062 call _freeIterator _iterator[434050])
        }
      }
      { scopeless type
        (434066 'move' _indexOfInterest[434048](434069 call iteratorIndex _iterator[434050]))
      }
      ForLoop
      {
        unknown i[434074] "index var" "insert auto destroy"
        (434076 'move' i[434074] _indexOfInterest[434048])
        unknown yret[462369] "YVV" "temp"
        (462372 'move' yret[462369](462371 'deref' i[434074]))
        (462374 yield yret[462369])
        label _continueLabel[434081]
        _indexOfInterest[434048]
        _iterator[434050]
      }
      label _breakLabel[434083]
    }
    (462367 return ret[462365])
  }
  function chpl_direct_counted_range_iter[433969](arg low[433973]:enumerated[179](?), arg count[433980] :
  (433977 call int(64)[13] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462378] "RVV" "temp"
    unknown call_tmp[573387] "maybe param" "maybe type" "temp"
    (573390 'move' call_tmp[573387](433985 call chpl_build_low_bounded_range low[433973]))
    const r[433983] "const" "insert auto destroy"
    (489862 'init var' r[433983] call_tmp[573387])
    {
      unknown _indexOfInterest[433989] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[433991] "expr temp" "temp"
      unknown call_tmp[573392] "expr temp" "maybe param" "maybe type" "temp"
      (573395 'move' call_tmp[573392](433998 call # r[433983] count[433980]))
      (433993 'move' _iterator[433991](433996 call _getIterator call_tmp[573392]))
      Defer
      {
        {
          (434003 call _freeIterator _iterator[433991])
        }
      }
      { scopeless type
        (434007 'move' _indexOfInterest[433989](434010 call iteratorIndex _iterator[433991]))
      }
      ForLoop
      {
        unknown i[434015] "index var" "insert auto destroy"
        (434017 'move' i[434015] _indexOfInterest[433989])
        unknown yret[462382] "YVV" "temp"
        (462385 'move' yret[462382](462384 'deref' i[434015]))
        (462387 yield yret[462382])
        label _continueLabel[434022]
        _indexOfInterest[433989]
        _iterator[433991]
      }
      label _breakLabel[434024]
    }
    (462380 return ret[462378])
  }
  function chpl_direct_counted_range_iter[434382](arg low[434386]:enumerated[179](?), arg count[434393] :
  (434390 call uint(64)[107] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462391] "RVV" "temp"
    unknown call_tmp[573397] "maybe param" "maybe type" "temp"
    (573400 'move' call_tmp[573397](434398 call chpl_build_low_bounded_range low[434386]))
    const r[434396] "const" "insert auto destroy"
    (489864 'init var' r[434396] call_tmp[573397])
    {
      unknown _indexOfInterest[434402] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434404] "expr temp" "temp"
      unknown call_tmp[573402] "expr temp" "maybe param" "maybe type" "temp"
      (573405 'move' call_tmp[573402](434411 call # r[434396] count[434393]))
      (434406 'move' _iterator[434404](434409 call _getIterator call_tmp[573402]))
      Defer
      {
        {
          (434416 call _freeIterator _iterator[434404])
        }
      }
      { scopeless type
        (434420 'move' _indexOfInterest[434402](434423 call iteratorIndex _iterator[434404]))
      }
      ForLoop
      {
        unknown i[434428] "index var" "insert auto destroy"
        (434430 'move' i[434428] _indexOfInterest[434402])
        unknown yret[462395] "YVV" "temp"
        (462398 'move' yret[462395](462397 'deref' i[434428]))
        (462400 yield yret[462395])
        label _continueLabel[434435]
        _indexOfInterest[434402]
        _iterator[434404]
      }
      label _breakLabel[434437]
    }
    (462393 return ret[462391])
  }
  function chpl_direct_counted_range_iter[434323](arg low[434327]:enumerated[179](?), arg count[434334] :
  (434331 call uint(64)[107] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462404] "RVV" "temp"
    unknown call_tmp[573407] "maybe param" "maybe type" "temp"
    (573410 'move' call_tmp[573407](434339 call chpl_build_low_bounded_range low[434327]))
    const r[434337] "const" "insert auto destroy"
    (489866 'init var' r[434337] call_tmp[573407])
    {
      unknown _indexOfInterest[434343] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434345] "expr temp" "temp"
      unknown call_tmp[573412] "expr temp" "maybe param" "maybe type" "temp"
      (573415 'move' call_tmp[573412](434352 call # r[434337] count[434334]))
      (434347 'move' _iterator[434345](434350 call _getIterator call_tmp[573412]))
      Defer
      {
        {
          (434357 call _freeIterator _iterator[434345])
        }
      }
      { scopeless type
        (434361 'move' _indexOfInterest[434343](434364 call iteratorIndex _iterator[434345]))
      }
      ForLoop
      {
        unknown i[434369] "index var" "insert auto destroy"
        (434371 'move' i[434369] _indexOfInterest[434343])
        unknown yret[462408] "YVV" "temp"
        (462411 'move' yret[462408](462410 'deref' i[434369]))
        (462413 yield yret[462408])
        label _continueLabel[434376]
        _indexOfInterest[434343]
        _iterator[434345]
      }
      label _breakLabel[434378]
    }
    (462406 return ret[462404])
  }
  function chpl_direct_counted_range_iter[434264](arg low[434268]:enumerated[179](?), arg count[434275] :
  (434272 call uint(64)[107] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462417] "RVV" "temp"
    unknown call_tmp[573417] "maybe param" "maybe type" "temp"
    (573420 'move' call_tmp[573417](434280 call chpl_build_low_bounded_range low[434268]))
    const r[434278] "const" "insert auto destroy"
    (489868 'init var' r[434278] call_tmp[573417])
    {
      unknown _indexOfInterest[434284] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434286] "expr temp" "temp"
      unknown call_tmp[573422] "expr temp" "maybe param" "maybe type" "temp"
      (573425 'move' call_tmp[573422](434293 call # r[434278] count[434275]))
      (434288 'move' _iterator[434286](434291 call _getIterator call_tmp[573422]))
      Defer
      {
        {
          (434298 call _freeIterator _iterator[434286])
        }
      }
      { scopeless type
        (434302 'move' _indexOfInterest[434284](434305 call iteratorIndex _iterator[434286]))
      }
      ForLoop
      {
        unknown i[434310] "index var" "insert auto destroy"
        (434312 'move' i[434310] _indexOfInterest[434284])
        unknown yret[462421] "YVV" "temp"
        (462424 'move' yret[462421](462423 'deref' i[434310]))
        (462426 yield yret[462421])
        label _continueLabel[434317]
        _indexOfInterest[434284]
        _iterator[434286]
      }
      label _breakLabel[434319]
    }
    (462419 return ret[462417])
  }
  function chpl_direct_counted_range_iter[434205](arg low[434209]:enumerated[179](?), arg count[434216] :
  (434213 call uint(64)[107] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462430] "RVV" "temp"
    unknown call_tmp[573427] "maybe param" "maybe type" "temp"
    (573430 'move' call_tmp[573427](434221 call chpl_build_low_bounded_range low[434209]))
    const r[434219] "const" "insert auto destroy"
    (489870 'init var' r[434219] call_tmp[573427])
    {
      unknown _indexOfInterest[434225] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434227] "expr temp" "temp"
      unknown call_tmp[573432] "expr temp" "maybe param" "maybe type" "temp"
      (573435 'move' call_tmp[573432](434234 call # r[434219] count[434216]))
      (434229 'move' _iterator[434227](434232 call _getIterator call_tmp[573432]))
      Defer
      {
        {
          (434239 call _freeIterator _iterator[434227])
        }
      }
      { scopeless type
        (434243 'move' _indexOfInterest[434225](434246 call iteratorIndex _iterator[434227]))
      }
      ForLoop
      {
        unknown i[434251] "index var" "insert auto destroy"
        (434253 'move' i[434251] _indexOfInterest[434225])
        unknown yret[462434] "YVV" "temp"
        (462437 'move' yret[462434](462436 'deref' i[434251]))
        (462439 yield yret[462434])
        label _continueLabel[434258]
        _indexOfInterest[434225]
        _iterator[434227]
      }
      label _breakLabel[434260]
    }
    (462432 return ret[462430])
  }
  function chpl_direct_counted_range_iter[434618](arg low[434622]:bool[10], arg count[434629] :
  (434626 call int(64)[13] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462443] "RVV" "temp"
    unknown call_tmp[573437] "maybe param" "maybe type" "temp"
    (573440 'move' call_tmp[573437](434634 call chpl_build_low_bounded_range low[434622]))
    const r[434632] "const" "insert auto destroy"
    (489872 'init var' r[434632] call_tmp[573437])
    {
      unknown _indexOfInterest[434638] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434640] "expr temp" "temp"
      unknown call_tmp[573442] "expr temp" "maybe param" "maybe type" "temp"
      (573445 'move' call_tmp[573442](434647 call # r[434632] count[434629]))
      (434642 'move' _iterator[434640](434645 call _getIterator call_tmp[573442]))
      Defer
      {
        {
          (434652 call _freeIterator _iterator[434640])
        }
      }
      { scopeless type
        (434656 'move' _indexOfInterest[434638](434659 call iteratorIndex _iterator[434640]))
      }
      ForLoop
      {
        unknown i[434664] "index var" "insert auto destroy"
        (434666 'move' i[434664] _indexOfInterest[434638])
        unknown yret[462447] "YVV" "temp"
        (462450 'move' yret[462447](462449 'deref' i[434664]))
        (462452 yield yret[462447])
        label _continueLabel[434671]
        _indexOfInterest[434638]
        _iterator[434640]
      }
      label _breakLabel[434673]
    }
    (462445 return ret[462443])
  }
  function chpl_direct_counted_range_iter[434559](arg low[434563]:bool[10], arg count[434570] :
  (434567 call int(64)[13] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462456] "RVV" "temp"
    unknown call_tmp[573447] "maybe param" "maybe type" "temp"
    (573450 'move' call_tmp[573447](434575 call chpl_build_low_bounded_range low[434563]))
    const r[434573] "const" "insert auto destroy"
    (489874 'init var' r[434573] call_tmp[573447])
    {
      unknown _indexOfInterest[434579] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434581] "expr temp" "temp"
      unknown call_tmp[573452] "expr temp" "maybe param" "maybe type" "temp"
      (573455 'move' call_tmp[573452](434588 call # r[434573] count[434570]))
      (434583 'move' _iterator[434581](434586 call _getIterator call_tmp[573452]))
      Defer
      {
        {
          (434593 call _freeIterator _iterator[434581])
        }
      }
      { scopeless type
        (434597 'move' _indexOfInterest[434579](434600 call iteratorIndex _iterator[434581]))
      }
      ForLoop
      {
        unknown i[434605] "index var" "insert auto destroy"
        (434607 'move' i[434605] _indexOfInterest[434579])
        unknown yret[462460] "YVV" "temp"
        (462463 'move' yret[462460](462462 'deref' i[434605]))
        (462465 yield yret[462460])
        label _continueLabel[434612]
        _indexOfInterest[434579]
        _iterator[434581]
      }
      label _breakLabel[434614]
    }
    (462458 return ret[462456])
  }
  function chpl_direct_counted_range_iter[434500](arg low[434504]:bool[10], arg count[434511] :
  (434508 call int(64)[13] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462469] "RVV" "temp"
    unknown call_tmp[573457] "maybe param" "maybe type" "temp"
    (573460 'move' call_tmp[573457](434516 call chpl_build_low_bounded_range low[434504]))
    const r[434514] "const" "insert auto destroy"
    (489876 'init var' r[434514] call_tmp[573457])
    {
      unknown _indexOfInterest[434520] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434522] "expr temp" "temp"
      unknown call_tmp[573462] "expr temp" "maybe param" "maybe type" "temp"
      (573465 'move' call_tmp[573462](434529 call # r[434514] count[434511]))
      (434524 'move' _iterator[434522](434527 call _getIterator call_tmp[573462]))
      Defer
      {
        {
          (434534 call _freeIterator _iterator[434522])
        }
      }
      { scopeless type
        (434538 'move' _indexOfInterest[434520](434541 call iteratorIndex _iterator[434522]))
      }
      ForLoop
      {
        unknown i[434546] "index var" "insert auto destroy"
        (434548 'move' i[434546] _indexOfInterest[434520])
        unknown yret[462473] "YVV" "temp"
        (462476 'move' yret[462473](462475 'deref' i[434546]))
        (462478 yield yret[462473])
        label _continueLabel[434553]
        _indexOfInterest[434520]
        _iterator[434522]
      }
      label _breakLabel[434555]
    }
    (462471 return ret[462469])
  }
  function chpl_direct_counted_range_iter[434441](arg low[434445]:bool[10], arg count[434452] :
  (434449 call int(64)[13] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462482] "RVV" "temp"
    unknown call_tmp[573467] "maybe param" "maybe type" "temp"
    (573470 'move' call_tmp[573467](434457 call chpl_build_low_bounded_range low[434445]))
    const r[434455] "const" "insert auto destroy"
    (489878 'init var' r[434455] call_tmp[573467])
    {
      unknown _indexOfInterest[434461] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434463] "expr temp" "temp"
      unknown call_tmp[573472] "expr temp" "maybe param" "maybe type" "temp"
      (573475 'move' call_tmp[573472](434470 call # r[434455] count[434452]))
      (434465 'move' _iterator[434463](434468 call _getIterator call_tmp[573472]))
      Defer
      {
        {
          (434475 call _freeIterator _iterator[434463])
        }
      }
      { scopeless type
        (434479 'move' _indexOfInterest[434461](434482 call iteratorIndex _iterator[434463]))
      }
      ForLoop
      {
        unknown i[434487] "index var" "insert auto destroy"
        (434489 'move' i[434487] _indexOfInterest[434461])
        unknown yret[462486] "YVV" "temp"
        (462489 'move' yret[462486](462488 'deref' i[434487]))
        (462491 yield yret[462486])
        label _continueLabel[434494]
        _indexOfInterest[434461]
        _iterator[434463]
      }
      label _breakLabel[434496]
    }
    (462484 return ret[462482])
  }
  function chpl_direct_counted_range_iter[434854](arg low[434858]:bool[10], arg count[434865] :
  (434862 call uint(64)[107] 64)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462495] "RVV" "temp"
    unknown call_tmp[573477] "maybe param" "maybe type" "temp"
    (573480 'move' call_tmp[573477](434870 call chpl_build_low_bounded_range low[434858]))
    const r[434868] "const" "insert auto destroy"
    (489880 'init var' r[434868] call_tmp[573477])
    {
      unknown _indexOfInterest[434874] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434876] "expr temp" "temp"
      unknown call_tmp[573482] "expr temp" "maybe param" "maybe type" "temp"
      (573485 'move' call_tmp[573482](434883 call # r[434868] count[434865]))
      (434878 'move' _iterator[434876](434881 call _getIterator call_tmp[573482]))
      Defer
      {
        {
          (434888 call _freeIterator _iterator[434876])
        }
      }
      { scopeless type
        (434892 'move' _indexOfInterest[434874](434895 call iteratorIndex _iterator[434876]))
      }
      ForLoop
      {
        unknown i[434900] "index var" "insert auto destroy"
        (434902 'move' i[434900] _indexOfInterest[434874])
        unknown yret[462499] "YVV" "temp"
        (462502 'move' yret[462499](462501 'deref' i[434900]))
        (462504 yield yret[462499])
        label _continueLabel[434907]
        _indexOfInterest[434874]
        _iterator[434876]
      }
      label _breakLabel[434909]
    }
    (462497 return ret[462495])
  }
  function chpl_direct_counted_range_iter[434795](arg low[434799]:bool[10], arg count[434806] :
  (434803 call uint(64)[107] 32)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462508] "RVV" "temp"
    unknown call_tmp[573487] "maybe param" "maybe type" "temp"
    (573490 'move' call_tmp[573487](434811 call chpl_build_low_bounded_range low[434799]))
    const r[434809] "const" "insert auto destroy"
    (489882 'init var' r[434809] call_tmp[573487])
    {
      unknown _indexOfInterest[434815] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434817] "expr temp" "temp"
      unknown call_tmp[573492] "expr temp" "maybe param" "maybe type" "temp"
      (573495 'move' call_tmp[573492](434824 call # r[434809] count[434806]))
      (434819 'move' _iterator[434817](434822 call _getIterator call_tmp[573492]))
      Defer
      {
        {
          (434829 call _freeIterator _iterator[434817])
        }
      }
      { scopeless type
        (434833 'move' _indexOfInterest[434815](434836 call iteratorIndex _iterator[434817]))
      }
      ForLoop
      {
        unknown i[434841] "index var" "insert auto destroy"
        (434843 'move' i[434841] _indexOfInterest[434815])
        unknown yret[462512] "YVV" "temp"
        (462515 'move' yret[462512](462514 'deref' i[434841]))
        (462517 yield yret[462512])
        label _continueLabel[434848]
        _indexOfInterest[434815]
        _iterator[434817]
      }
      label _breakLabel[434850]
    }
    (462510 return ret[462508])
  }
  function chpl_direct_counted_range_iter[434736](arg low[434740]:bool[10], arg count[434747] :
  (434744 call uint(64)[107] 16)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462521] "RVV" "temp"
    unknown call_tmp[573497] "maybe param" "maybe type" "temp"
    (573500 'move' call_tmp[573497](434752 call chpl_build_low_bounded_range low[434740]))
    const r[434750] "const" "insert auto destroy"
    (489884 'init var' r[434750] call_tmp[573497])
    {
      unknown _indexOfInterest[434756] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434758] "expr temp" "temp"
      unknown call_tmp[573502] "expr temp" "maybe param" "maybe type" "temp"
      (573505 'move' call_tmp[573502](434765 call # r[434750] count[434747]))
      (434760 'move' _iterator[434758](434763 call _getIterator call_tmp[573502]))
      Defer
      {
        {
          (434770 call _freeIterator _iterator[434758])
        }
      }
      { scopeless type
        (434774 'move' _indexOfInterest[434756](434777 call iteratorIndex _iterator[434758]))
      }
      ForLoop
      {
        unknown i[434782] "index var" "insert auto destroy"
        (434784 'move' i[434782] _indexOfInterest[434756])
        unknown yret[462525] "YVV" "temp"
        (462528 'move' yret[462525](462527 'deref' i[434782]))
        (462530 yield yret[462525])
        label _continueLabel[434789]
        _indexOfInterest[434756]
        _iterator[434758]
      }
      label _breakLabel[434791]
    }
    (462523 return ret[462521])
  }
  function chpl_direct_counted_range_iter[434677](arg low[434681]:bool[10], arg count[434688] :
  (434685 call uint(64)[107] 8)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462534] "RVV" "temp"
    unknown call_tmp[573507] "maybe param" "maybe type" "temp"
    (573510 'move' call_tmp[573507](434693 call chpl_build_low_bounded_range low[434681]))
    const r[434691] "const" "insert auto destroy"
    (489886 'init var' r[434691] call_tmp[573507])
    {
      unknown _indexOfInterest[434697] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[434699] "expr temp" "temp"
      unknown call_tmp[573512] "expr temp" "maybe param" "maybe type" "temp"
      (573515 'move' call_tmp[573512](434706 call # r[434691] count[434688]))
      (434701 'move' _iterator[434699](434704 call _getIterator call_tmp[573512]))
      Defer
      {
        {
          (434711 call _freeIterator _iterator[434699])
        }
      }
      { scopeless type
        (434715 'move' _indexOfInterest[434697](434718 call iteratorIndex _iterator[434699]))
      }
      ForLoop
      {
        unknown i[434723] "index var" "insert auto destroy"
        (434725 'move' i[434723] _indexOfInterest[434697])
        unknown yret[462538] "YVV" "temp"
        (462541 'move' yret[462538](462540 'deref' i[434723]))
        (462543 yield yret[462538])
        label _continueLabel[434730]
        _indexOfInterest[434697]
        _iterator[434699]
      }
      label _breakLabel[434732]
    }
    (462536 return ret[462534])
  }
  function chpl_direct_counted_range_iter[76445](arg low[76442]:integral[188](?), arg count[76447]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462547] "RVV" "temp"
    unknown call_tmp[573517] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573520 'move' call_tmp[573517](76453 'typeof' low[76442]))
    unknown call_tmp[573522] "expr temp" "maybe param" "maybe type" "temp"
    (573525 'move' call_tmp[573522](76455 call _cast string[24] call_tmp[573517]))
    unknown call_tmp[573527] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (573530 'move' call_tmp[573527](76459 'typeof' count[76447]))
    unknown call_tmp[573532] "expr temp" "maybe param" "maybe type" "temp"
    (573535 'move' call_tmp[573532](76461 call _cast string[24] call_tmp[573527]))
    (76463 call compilerError "can't apply '#' to a range with idxType " call_tmp[573522] " using a count of type " call_tmp[573532])
    (462549 return ret[462547])
  }
  function chpl_direct_counted_range_iter[76472](arg low[76470]:_any[170](?), arg count[76474]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462553] "RVV" "temp"
    (76479 call compilerError "Bound of 'low..' must be an integer")
    (462555 return ret[462553])
  }
  function chpl_direct_counted_range_iter_helper[76488](arg low[76486]:_any[170](?), arg count[76490]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462559] "RVV" "temp"
    unknown tmp[396120] "maybe param" "temp"
    unknown tmp[396141] "maybe param" "temp"
    (396152 'move' tmp[396141] 1)
    unknown call_tmp[573537] "expr temp" "maybe param" "maybe type" "temp"
    (573540 'move' call_tmp[573537](396154 call _cond_invalid tmp[396141]))
    if call_tmp[573537]
    {
      (396157 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507138] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507139] "maybe param" "temp"
    unknown call_tmp[573542] "expr temp" "maybe param" "maybe type" "temp"
    (573545 'move' call_tmp[573542](396142 call isTrue tmp[396141]))
    (507144 'move' tmp[507139](507142 call _cond_test call_tmp[573542]))
    if tmp[507139]
    {
      unknown tmp[507146] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[573547] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (573550 'move' call_tmp[573547](76495 'typeof' count[76490]))
      unknown call_tmp[573552] "expr temp" "maybe param" "maybe type" "temp"
      (573555 'move' call_tmp[573552](76497 call isIntType call_tmp[573547]))
      (507148 'move' tmp[507146](396145 call isTrue call_tmp[573552]))
      (507153 'move' tmp[507138](507150 '_paramFoldLogical' tmp[507139] tmp[507146]))
    }
    {
      (507158 'move' tmp[507138](507155 '_paramFoldLogical' tmp[507139] 0))
    }
    (396131 'move' tmp[396120] tmp[507138])
    unknown call_tmp[573557] "expr temp" "maybe param" "maybe type" "temp"
    (573560 'move' call_tmp[573557](396133 call _cond_invalid tmp[396120]))
    if call_tmp[573557]
    {
      (396136 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507165] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507166] "maybe param" "temp"
    unknown call_tmp[573562] "expr temp" "maybe param" "maybe type" "temp"
    (573565 'move' call_tmp[573562](396121 call isTrue tmp[396120]))
    (507171 'move' tmp[507166](507169 call _cond_test call_tmp[573562]))
    if tmp[507166]
    {
      unknown tmp[507173] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[573567] "expr temp" "maybe param" "maybe type" "temp"
      (573570 'move' call_tmp[573567](76502 call < count[76490] 0))
      (507175 'move' tmp[507173](396124 call isTrue call_tmp[573567]))
      (507180 'move' tmp[507165](507177 '_paramFoldLogical' tmp[507166] tmp[507173]))
    }
    {
      (507185 'move' tmp[507165](507182 '_paramFoldLogical' tmp[507166] 0))
    }
    unknown call_tmp[573572] "expr temp" "maybe param" "maybe type" "temp"
    (573575 'move' call_tmp[573572](76514 call _cond_test tmp[507165]))
    if call_tmp[573572]
    {
      (76512 call boundsCheckHalt module=[244] HaltWrappers[197622] "With a negative count, the range must have a last index.")
    }
    const tmp[76562] "const" "no auto destroy" "no copy" "temp"
    unknown tmp[507192] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507193] "maybe param" "temp"
    unknown call_tmp[573577] "expr temp" "maybe param" "maybe type" "temp"
    (573580 'move' call_tmp[573577](76527 call == count[76490] 0))
    (507198 'move' tmp[507193](507196 call _cond_test call_tmp[573577]))
    if tmp[507193]
    {
      unknown tmp[507200] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[573582] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (573585 'move' call_tmp[573582](76538 'typeof' low[76486]))
      unknown call_tmp[573587] "expr temp" "maybe param" "maybe type" "temp"
      (573590 'move' call_tmp[573587](76532 call _cast uint(64)[107] low[76486]))
      unknown call_tmp[573592] "expr temp" "maybe param" "maybe type" "temp"
      (573595 'move' call_tmp[573592](76535 call - call_tmp[573587] 1))
      unknown call_tmp[573597] "expr temp" "maybe param" "maybe type" "temp"
      (573600 'move' call_tmp[573597](76539 call _cast call_tmp[573582] call_tmp[573592]))
      (507202 'move' tmp[507200](76542 call _build_tuple low[76486] call_tmp[573597]))
      (507207 'move' tmp[507192](507204 '_paramFoldLogical' tmp[507193] tmp[507200]))
    }
    {
      unknown tmp[507209] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[573602] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (573605 'move' call_tmp[573602](76548 'typeof' low[76486]))
      unknown call_tmp[573607] "expr temp" "maybe param" "maybe type" "temp"
      (573610 'move' call_tmp[573607](76549 call _cast call_tmp[573602] count[76490]))
      unknown call_tmp[573612] "expr temp" "maybe param" "maybe type" "temp"
      (573615 'move' call_tmp[573612](76552 call - call_tmp[573607] 1))
      unknown call_tmp[573617] "expr temp" "maybe param" "maybe type" "temp"
      (573620 'move' call_tmp[573617](76554 call + low[76486] call_tmp[573612]))
      (507211 'move' tmp[507209](76557 call _build_tuple low[76486] call_tmp[573617]))
      (507216 'move' tmp[507192](507213 '_paramFoldLogical' tmp[507193] tmp[507209]))
    }
    (489888 'init var' tmp[76562] tmp[507192])
    (76569 call _check_tuple_var_decl tmp[76562] 2)
    unknown call_tmp[573622] "maybe param" "maybe type" "temp"
    (573625 'move' call_tmp[573622](76563 call tmp[76562] 1))
    const start[76520] "const" "insert auto destroy"
    (489890 'init var' start[76520] call_tmp[573622])
    unknown call_tmp[573627] "maybe param" "maybe type" "temp"
    (573630 'move' call_tmp[573627](76566 call tmp[76562] 2))
    const end[76522] "const" "insert auto destroy"
    (489892 'init var' end[76522] call_tmp[573627])
    {
      unknown _indexOfInterest[76584] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[76585] "expr temp" "temp"
      unknown call_tmp[573632] "expr temp" "maybe param" "maybe type" "temp"
      (573635 'move' call_tmp[573632](76580 call chpl_direct_param_stride_range_iter start[76520] end[76522] 1))
      (76594 'move' _iterator[76585](76592 call _getIterator call_tmp[573632]))
      Defer
      {
        {
          (76611 call _freeIterator _iterator[76585])
        }
      }
      { scopeless type
        (76600 'move' _indexOfInterest[76584](76597 call iteratorIndex _iterator[76585]))
      }
      ForLoop
      {
        unknown i[76604] "index var" "insert auto destroy"
        (76606 'move' i[76604] _indexOfInterest[76584])
        unknown yret[462563] "YVV" "temp"
        (462566 'move' yret[462563](462565 'deref' i[76604]))
        (462568 yield yret[462563])
        label _continueLabel[76589]
        _indexOfInterest[76584]
        _iterator[76585]
      }
      label _breakLabel[76590]
    }
    (462561 return ret[462559])
  }
  function chpl_direct_pos_stride_range_iter[76627](arg low[76624]:_any[170](?), arg high[76629]:_any[170](?), arg stride[76631]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462572] "RVV" "temp"
    unknown call_tmp[573637] "expr temp" "maybe param" "maybe type" "temp"
    (573640 'move' call_tmp[573637](76773 call _cond_test useOptimizedRangeIterators[66075]))
    if call_tmp[573637]
    {
      unknown call_tmp[573642] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (573645 'move' call_tmp[573642](434913 'typeof' low[76624]))
      (76638 call chpl_range_check_stride stride[76631] call_tmp[573642])
      unknown call_tmp[573647] "expr temp" "maybe param" "maybe type" "temp"
      (573650 'move' call_tmp[573647](76650 call _cond_test 1))
      if call_tmp[573647]
      {
        unknown call_tmp[573652] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (573655 'move' call_tmp[573652](434915 'typeof' low[76624]))
        (76648 call chpl_checkIfRangeIterWillOverflow call_tmp[573652] low[76624] high[76629] stride[76631])
      }
      unknown i[76656] "insert auto destroy"
      unknown call_tmp[573657] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (573660 'move' call_tmp[573657](434917 'typeof' low[76624]))
      (489894 'default init var' i[76656] call_tmp[573657])
      CForLoop
      {
        {
          unknown yret[462576] "YVV" "temp"
          (462579 'move' yret[462576](462578 'deref' i[76656]))
          (462581 yield yret[462576])
        }
        label _continueLabel[76716]
        {
          (76701 '=' i[76656] low[76624])
        }
        {
          (76704 '<=' i[76656] high[76629])
        }
        {
          unknown call_tmp[573662] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (573665 'move' call_tmp[573662](434919 'typeof' low[76624]))
          unknown call_tmp[573667] "expr temp" "maybe param" "maybe type" "temp"
          (573670 'move' call_tmp[573667](76710 call _cast call_tmp[573662] stride[76631]))
          (76707 '+=' i[76656] call_tmp[573667])
        }
      }
      label _breakLabel[76717]
    }
    {
      {
        unknown _indexOfInterest[76738] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76739] "expr temp" "temp"
        unknown call_tmp[573672] "expr temp" "maybe param" "maybe type" "temp"
        (573675 'move' call_tmp[573672](76723 call chpl_build_bounded_range low[76624] high[76629]))
        unknown call_tmp[573677] "expr temp" "maybe param" "maybe type" "temp"
        (573680 'move' call_tmp[573677](76726 call chpl_by call_tmp[573672] stride[76631]))
        unknown call_tmp[573684] "expr temp" "maybe param" "maybe type" "temp"
        (573687 'move' call_tmp[573684](76734 call(76730 call (partial) generalIterator _mt[232] call_tmp[573677])))
        (76748 'move' _iterator[76739](76746 call _getIterator call_tmp[573684]))
        Defer
        {
          {
            (76765 call _freeIterator _iterator[76739])
          }
        }
        { scopeless type
          (76754 'move' _indexOfInterest[76738](76751 call iteratorIndex _iterator[76739]))
        }
        ForLoop
        {
          unknown i[76758] "index var" "insert auto destroy"
          (76760 'move' i[76758] _indexOfInterest[76738])
          unknown yret[462583] "YVV" "temp"
          (462586 'move' yret[462583](462585 'deref' i[76758]))
          (462588 yield yret[462583])
          label _continueLabel[76743]
          _indexOfInterest[76738]
          _iterator[76739]
        }
        label _breakLabel[76744]
      }
    }
    (462574 return ret[462572])
  }
  function chpl_direct_param_stride_range_iter[76787](arg low[76784]:_any[170](?), arg high[76789]:_any[170](?), param arg stride[76791]:_any[170](?)) : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[462592] "RVV" "temp"
    unknown call_tmp[573689] "expr temp" "maybe param" "maybe type" "temp"
    (573692 'move' call_tmp[573689](76997 call _cond_test useOptimizedRangeIterators[66075]))
    if call_tmp[573689]
    {
      unknown call_tmp[573694] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (573697 'move' call_tmp[573694](434921 'typeof' low[76784]))
      (76798 call chpl_range_check_stride stride[76791] call_tmp[573694])
      unknown i[76802] "insert auto destroy"
      unknown call_tmp[573699] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (573702 'move' call_tmp[573699](434923 'typeof' low[76784]))
      (489896 'default init var' i[76802] call_tmp[573699])
      unknown call_tmp[573704] "expr temp" "maybe param" "maybe type" "temp"
      (573707 'move' call_tmp[573704](76807 call > stride[76791] 0))
      unknown call_tmp[573709] "expr temp" "maybe param" "maybe type" "temp"
      (573712 'move' call_tmp[573709](76941 call _cond_test call_tmp[573704]))
      if call_tmp[573709]
      {
        unknown call_tmp[573714] "expr temp" "maybe param" "maybe type" "temp"
        (573717 'move' call_tmp[573714](76818 call _cond_test 1))
        if call_tmp[573714]
        {
          unknown call_tmp[573719] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (573722 'move' call_tmp[573719](434925 'typeof' low[76784]))
          (76816 call chpl_checkIfRangeIterWillOverflow call_tmp[573719] low[76784] high[76789] stride[76791])
        }
        CForLoop
        {
          {
            unknown yret[462596] "YVV" "temp"
            (462599 'move' yret[462596](462598 'deref' i[76802]))
            (462601 yield yret[462596])
          }
          label _continueLabel[76866]
          {
            (76851 '=' i[76802] low[76784])
          }
          {
            (76854 '<=' i[76802] high[76789])
          }
          {
            unknown call_tmp[573724] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (573727 'move' call_tmp[573724](434927 'typeof' low[76784]))
            unknown call_tmp[573729] "expr temp" "maybe param" "maybe type" "temp"
            (573732 'move' call_tmp[573729](76860 call _cast call_tmp[573724] stride[76791]))
            (76857 '+=' i[76802] call_tmp[573729])
          }
        }
        label _breakLabel[76867]
      }
      {
        unknown call_tmp[573734] "expr temp" "maybe param" "maybe type" "temp"
        (573737 'move' call_tmp[573734](76872 call < stride[76791] 0))
        unknown call_tmp[573739] "expr temp" "maybe param" "maybe type" "temp"
        (573742 'move' call_tmp[573739](76937 call _cond_test call_tmp[573734]))
        if call_tmp[573739]
        {
          unknown call_tmp[573744] "expr temp" "maybe param" "maybe type" "temp"
          (573747 'move' call_tmp[573744](76885 call _cond_test 1))
          if call_tmp[573744]
          {
            unknown call_tmp[573749] "expr temp" "maybe param" "maybe type" "temp" "type variable"
            (573752 'move' call_tmp[573749](434929 'typeof' low[76784]))
            (76883 call chpl_checkIfRangeIterWillOverflow call_tmp[573749] low[76784] high[76789] stride[76791] high[76789] low[76784])
          }
          CForLoop
          {
            {
              unknown yret[462603] "YVV" "temp"
              (462606 'move' yret[462603](462605 'deref' i[76802]))
              (462608 yield yret[462603])
            }
            label _continueLabel[76933]
            {
              (76918 '=' i[76802] high[76789])
            }
            {
              (76921 '>=' i[76802] low[76784])
            }
            {
              unknown call_tmp[573754] "expr temp" "maybe param" "maybe type" "temp" "type variable"
              (573757 'move' call_tmp[573754](434931 'typeof' low[76784]))
              unknown call_tmp[573759] "expr temp" "maybe param" "maybe type" "temp"
              (573762 'move' call_tmp[573759](76927 call _cast call_tmp[573754] stride[76791]))
              (76924 '+=' i[76802] call_tmp[573759])
            }
          }
          label _breakLabel[76934]
        }
      }
    }
    {
      {
        unknown _indexOfInterest[76962] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[76963] "expr temp" "temp"
        unknown call_tmp[573764] "expr temp" "maybe param" "maybe type" "temp"
        (573767 'move' call_tmp[573764](76949 call chpl_build_bounded_range low[76784] high[76789]))
        unknown call_tmp[573769] "expr temp" "maybe param" "maybe type" "temp"
        (573772 'move' call_tmp[573769](76952 call chpl_by call_tmp[573764] stride[76791]))
        unknown call_tmp[573776] "expr temp" "maybe param" "maybe type" "temp"
        (573779 'move' call_tmp[573776](76958 call(76954 call (partial) generalIterator _mt[232] call_tmp[573769])))
        (76972 'move' _iterator[76963](76970 call _getIterator call_tmp[573776]))
        Defer
        {
          {
            (76989 call _freeIterator _iterator[76963])
          }
        }
        { scopeless type
          (76978 'move' _indexOfInterest[76962](76975 call iteratorIndex _iterator[76963]))
        }
        ForLoop
        {
          unknown i[76982] "index var" "insert auto destroy"
          (76984 'move' i[76982] _indexOfInterest[76962])
          unknown yret[462610] "YVV" "temp"
          (462613 'move' yret[462610](462612 'deref' i[76982]))
          (462615 yield yret[462610])
          label _continueLabel[76967]
          _indexOfInterest[76962]
          _iterator[76963]
        }
        label _breakLabel[76968]
      }
    }
    (462594 return ret[462592])
  }
  function range[66183](?).these[77007](arg _mt[77012]:_MT[227], arg this[77009]:range[66183](?) :
  range[66183](?)) : _unknown[43] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[462619] "RVV" "temp"
    unknown call_tmp[573783] "expr temp" "maybe param" "maybe type" "temp"
    (573786 'move' call_tmp[573783](343121 call boundedType _mt[232] this[77009]))
    unknown call_tmp[573788] "expr temp" "maybe param" "maybe type" "temp"
    (573791 'move' call_tmp[573788](77026 call == call_tmp[573783] boundedNone[66085]))
    unknown call_tmp[573793] "expr temp" "maybe param" "maybe type" "temp"
    (573796 'move' call_tmp[573793](77048 call _cond_test call_tmp[573788]))
    if call_tmp[573793]
    {
      (77046 call compilerError "iteration over a range with no bounds")
    }
    unknown call_tmp[573798] "expr temp" "maybe param" "maybe type" "temp"
    (573801 'move' call_tmp[573798](77126 call _cond_test 1))
    if call_tmp[573798]
    {
      unknown call_tmp[573805] "expr temp" "maybe param" "maybe type" "temp"
      (573808 'move' call_tmp[573805](77060 call(77056 call (partial) hasFirst _mt[232] this[77009])))
      unknown call_tmp[573810] "expr temp" "maybe param" "maybe type" "temp"
      (573813 'move' call_tmp[573810](77061 call ! call_tmp[573805]))
      unknown call_tmp[573815] "expr temp" "maybe param" "maybe type" "temp"
      (573818 'move' call_tmp[573815](77086 call _cond_test call_tmp[573810]))
      if call_tmp[573815]
      {
        (77084 call boundsCheckHalt module=[244] HaltWrappers[197622] "iteration over range that has no first index")
      }
      unknown call_tmp[573822] "expr temp" "maybe param" "maybe type" "temp"
      (573825 'move' call_tmp[573822](77097 call(77093 call (partial) isAmbiguous _mt[232] this[77009])))
      unknown call_tmp[573827] "expr temp" "maybe param" "maybe type" "temp"
      (573830 'move' call_tmp[573827](77121 call _cond_test call_tmp[573822]))
      if call_tmp[573827]
      {
        (77119 call boundsCheckHalt module=[244] HaltWrappers[197622] "these -- Attempt to iterate over a range with ambiguous alignment.")
      }
    }
    unknown i[77131] "insert auto destroy"
    unknown call_tmp[573834] "expr temp" "maybe param" "maybe type" "temp"
    (573837 'move' call_tmp[573834](343131 call intIdxType _mt[232] this[77009]))
    (489898 'default init var' i[77131] call_tmp[573834])
    unknown call_tmp[573841] "expr temp" "maybe param" "maybe type" "temp"
    (573844 'move' call_tmp[573841](77136 call first _mt[232] this[77009]))
    unknown call_tmp[573846] "maybe param" "maybe type" "temp"
    (573849 'move' call_tmp[573846](77140 call chpl__idxToInt call_tmp[573841]))
    const start[77141] "const" "insert auto destroy"
    (489900 'init var' start[77141] call_tmp[573846])
    CForLoop
    {
      {
        unknown yret[462623] "YVV" "temp"
        unknown call_tmp[573853] "expr temp" "maybe param" "maybe type" "temp"
        (573856 'move' call_tmp[573853](77164 call(343136 call (partial) chpl_intToIdx _mt[232] this[77009]) i[77131]))
        (462626 'move' yret[462623](462625 'deref' call_tmp[573853]))
        (462628 yield yret[462623])
      }
      label _continueLabel[77183]
      {
        (77170 '=' i[77131] start[77141])
      }
      {
        (691681 call _statementLevelSymbol 1)
      }
      {
        unknown call_tmp[573860] "expr temp" "maybe param" "maybe type" "temp"
        (573863 'move' call_tmp[573860](343144 call intIdxType _mt[232] this[77009]))
        unknown call_tmp[573867] "expr temp" "maybe param" "maybe type" "temp"
        (573870 'move' call_tmp[573867](343148 call stride _mt[232] this[77009]))
        unknown call_tmp[573872] "expr temp" "maybe param" "maybe type" "temp"
        (573875 'move' call_tmp[573872](77177 call _cast call_tmp[573860] call_tmp[573867]))
        (77174 '+=' i[77131] call_tmp[573872])
      }
    }
    label _breakLabel[77184]
    (462621 return ret[462619])
  }
  where {
    unknown call_tmp[573879] "expr temp" "maybe param" "maybe type" "temp"
    (573882 'move' call_tmp[573879](343115 call boundedType _mt[232] this[77009]))
    (77019 call != call_tmp[573879] bounded[66079])
  }
  function range[66183](?).these[77193](arg _mt[77198]:_MT[227], arg this[77195]:range[66183](?) :
  range[66183](?)) : _unknown[43] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[462632] "RVV" "temp"
    unknown call_tmp[573884] "expr temp" "maybe param" "maybe type" "temp"
    (573887 'move' call_tmp[573884](77377 call _cond_test useOptimizedRangeIterators[66075]))
    if call_tmp[573884]
    {
      unknown call_tmp[573889] "expr temp" "maybe param" "maybe type" "temp"
      (573892 'move' call_tmp[573889](77239 call _cond_test 1))
      if call_tmp[573889]
      {
        (77217 call(343167 call (partial) checkIfIterWillOverflow _mt[232] this[77195]))
        unknown call_tmp[573898] "expr temp" "maybe param" "maybe type" "temp"
        (573901 'move' call_tmp[573898](77225 call(77221 call (partial) isAmbiguous _mt[232] this[77195])))
        unknown call_tmp[573903] "expr temp" "maybe param" "maybe type" "temp"
        (573906 'move' call_tmp[573903](77234 call _cond_test call_tmp[573898]))
        if call_tmp[573903]
        {
          (77232 call boundsCheckHalt module=[244] HaltWrappers[197622] "these -- Attempt to iterate over a range with ambiguous alignment.")
        }
      }
      unknown i[77245] "insert auto destroy"
      unknown call_tmp[573910] "expr temp" "maybe param" "maybe type" "temp"
      (573913 'move' call_tmp[573910](343173 call intIdxType _mt[232] this[77195]))
      (489902 'default init var' i[77245] call_tmp[573910])
      unknown call_tmp[573917] "maybe param" "maybe type" "temp"
      (573920 'move' call_tmp[573917](77249 call firstAsInt _mt[232] this[77195]))
      const start[77252] "const" "insert auto destroy"
      (489904 'init var' start[77252] call_tmp[573917])
      const end[77280] "const" "insert auto destroy"
      unknown tmp[507223] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[507224] "maybe param" "temp"
      unknown call_tmp[573924] "expr temp" "maybe param" "maybe type" "temp"
      (573927 'move' call_tmp[573924](77257 call low _mt[232] this[77195]))
      unknown call_tmp[573931] "expr temp" "maybe param" "maybe type" "temp"
      (573934 'move' call_tmp[573931](77261 call high _mt[232] this[77195]))
      unknown call_tmp[573936] "expr temp" "maybe param" "maybe type" "temp"
      (573939 'move' call_tmp[573936](77264 call > call_tmp[573924] call_tmp[573931]))
      (507229 'move' tmp[507224](507227 call _cond_test call_tmp[573936]))
      if tmp[507224]
      {
        (507234 'move' tmp[507223](507231 '_paramFoldLogical' tmp[507224] start[77252]))
      }
      {
        unknown tmp[507236] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[573943] "expr temp" "maybe param" "maybe type" "temp"
        (573946 'move' call_tmp[573943](77268 call lastAsInt _mt[232] this[77195]))
        unknown call_tmp[573950] "expr temp" "maybe param" "maybe type" "temp"
        (573953 'move' call_tmp[573950](343190 call intIdxType _mt[232] this[77195]))
        unknown call_tmp[573957] "expr temp" "maybe param" "maybe type" "temp"
        (573960 'move' call_tmp[573957](343186 call stride _mt[232] this[77195]))
        unknown call_tmp[573962] "expr temp" "maybe param" "maybe type" "temp"
        (573965 'move' call_tmp[573962](77273 call _cast call_tmp[573950] call_tmp[573957]))
        (507238 'move' tmp[507236](77275 call + call_tmp[573943] call_tmp[573962]))
        (507243 'move' tmp[507223](507240 '_paramFoldLogical' tmp[507224] tmp[507236]))
      }
      unknown call_tmp[573969] "maybe param" "maybe type" "temp"
      (573972 'move' call_tmp[573969](343178 call intIdxType _mt[232] this[77195]))
      (489906 'init var' end[77280] tmp[507223] call_tmp[573969])
      CForLoop
      {
        {
          unknown yret[462636] "YVV" "temp"
          unknown call_tmp[573976] "expr temp" "maybe param" "maybe type" "temp"
          (573979 'move' call_tmp[573976](77307 call(343194 call (partial) chpl_intToIdx _mt[232] this[77195]) i[77245]))
          (462639 'move' yret[462636](462638 'deref' call_tmp[573976]))
          (462641 yield yret[462636])
        }
        label _continueLabel[77328]
        {
          (77313 '=' i[77245] start[77252])
        }
        {
          (77316 '!=' i[77245] end[77280])
        }
        {
          unknown call_tmp[573983] "expr temp" "maybe param" "maybe type" "temp"
          (573986 'move' call_tmp[573983](343204 call intIdxType _mt[232] this[77195]))
          unknown call_tmp[573990] "expr temp" "maybe param" "maybe type" "temp"
          (573993 'move' call_tmp[573990](343208 call stride _mt[232] this[77195]))
          unknown call_tmp[573995] "expr temp" "maybe param" "maybe type" "temp"
          (573998 'move' call_tmp[573995](77322 call _cast call_tmp[573983] call_tmp[573990]))
          (77319 '+=' i[77245] call_tmp[573995])
        }
      }
      label _breakLabel[77329]
    }
    {
      {
        unknown _indexOfInterest[77342] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[77343] "expr temp" "temp"
        unknown call_tmp[574002] "expr temp" "maybe param" "maybe type" "temp"
        (574005 'move' call_tmp[574002](77338 call(77334 call (partial) generalIterator _mt[232] this[77195])))
        (77352 'move' _iterator[77343](77350 call _getIterator call_tmp[574002]))
        Defer
        {
          {
            (77369 call _freeIterator _iterator[77343])
          }
        }
        { scopeless type
          (77358 'move' _indexOfInterest[77342](77355 call iteratorIndex _iterator[77343]))
        }
        ForLoop
        {
          unknown i[77362] "index var" "insert auto destroy"
          (77364 'move' i[77362] _indexOfInterest[77342])
          unknown yret[462643] "YVV" "temp"
          (462646 'move' yret[462643](462645 'deref' i[77362]))
          (462648 yield yret[462643])
          label _continueLabel[77347]
          _indexOfInterest[77342]
          _iterator[77343]
        }
        label _breakLabel[77348]
      }
    }
    (462634 return ret[462632])
  }
  where {
    unknown tmp[396162] "maybe param" "temp"
    unknown call_tmp[574009] "expr temp" "maybe param" "maybe type" "temp"
    (574012 'move' call_tmp[574009](343153 call boundedType _mt[232] this[77195]))
    (396173 'move' tmp[396162](77205 call == call_tmp[574009] bounded[66079]))
    unknown call_tmp[574014] "expr temp" "maybe param" "maybe type" "temp"
    (574017 'move' call_tmp[574014](396175 call _cond_invalid tmp[396162]))
    if call_tmp[574014]
    {
      (396178 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507250] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507251] "maybe param" "temp"
    unknown call_tmp[574019] "expr temp" "maybe param" "maybe type" "temp"
    (574022 'move' call_tmp[574019](396163 call isTrue tmp[396162]))
    (507256 'move' tmp[507251](507254 call _cond_test call_tmp[574019]))
    if tmp[507251]
    {
      unknown tmp[507258] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[574026] "expr temp" "maybe param" "maybe type" "temp"
      (574029 'move' call_tmp[574026](343159 call stridable _mt[232] this[77195]))
      unknown call_tmp[574031] "expr temp" "maybe param" "maybe type" "temp"
      (574034 'move' call_tmp[574031](77209 call == call_tmp[574026] 1))
      (507260 'move' tmp[507258](396166 call isTrue call_tmp[574031]))
      (507265 'move' tmp[507250](507262 '_paramFoldLogical' tmp[507251] tmp[507258]))
    }
    {
      (507270 'move' tmp[507250](507267 '_paramFoldLogical' tmp[507251] 0))
    }
    (691837 call _statementLevelSymbol tmp[507250])
  }
  function range[66183](?).these[77388](arg _mt[77393]:_MT[227], arg this[77390]:range[66183](?) :
  range[66183](?)) : _unknown[43] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[462652] "RVV" "temp"
    unknown call_tmp[574036] "expr temp" "maybe param" "maybe type" "temp"
    (574039 'move' call_tmp[574036](77532 call _cond_test useOptimizedRangeIterators[66075]))
    if call_tmp[574036]
    {
      unknown call_tmp[574041] "expr temp" "maybe param" "maybe type" "temp"
      (574044 'move' call_tmp[574041](77414 call _cond_test 1))
      if call_tmp[574041]
      {
        (77412 call(343227 call (partial) checkIfIterWillOverflow _mt[232] this[77390]))
      }
      unknown i[77421] "insert auto destroy"
      unknown call_tmp[574050] "expr temp" "maybe param" "maybe type" "temp"
      (574053 'move' call_tmp[574050](343231 call intIdxType _mt[232] this[77390]))
      (489908 'default init var' i[77421] call_tmp[574050])
      unknown call_tmp[574057] "maybe param" "maybe type" "temp"
      (574060 'move' call_tmp[574057](77425 call _low _mt[232] this[77390]))
      const start[77428] "const" "insert auto destroy"
      (489910 'init var' start[77428] call_tmp[574057])
      unknown call_tmp[574064] "maybe param" "maybe type" "temp"
      (574067 'move' call_tmp[574064](77432 call _high _mt[232] this[77390]))
      const end[77435] "const" "insert auto destroy"
      (489912 'init var' end[77435] call_tmp[574064])
      CForLoop
      {
        {
          unknown yret[462656] "YVV" "temp"
          unknown call_tmp[574071] "expr temp" "maybe param" "maybe type" "temp"
          (574074 'move' call_tmp[574071](77462 call(343237 call (partial) chpl_intToIdx _mt[232] this[77390]) i[77421]))
          (462659 'move' yret[462656](462658 'deref' call_tmp[574071]))
          (462661 yield yret[462656])
        }
        label _continueLabel[77483]
        {
          (77468 '=' i[77421] start[77428])
        }
        {
          (77471 '<=' i[77421] end[77435])
        }
        {
          unknown call_tmp[574078] "expr temp" "maybe param" "maybe type" "temp"
          (574081 'move' call_tmp[574078](343247 call intIdxType _mt[232] this[77390]))
          unknown call_tmp[574085] "expr temp" "maybe param" "maybe type" "temp"
          (574088 'move' call_tmp[574085](343251 call stride _mt[232] this[77390]))
          unknown call_tmp[574090] "expr temp" "maybe param" "maybe type" "temp"
          (574093 'move' call_tmp[574090](77477 call _cast call_tmp[574078] call_tmp[574085]))
          (77474 '+=' i[77421] call_tmp[574090])
        }
      }
      label _breakLabel[77484]
    }
    {
      {
        unknown _indexOfInterest[77497] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[77498] "expr temp" "temp"
        unknown call_tmp[574097] "expr temp" "maybe param" "maybe type" "temp"
        (574100 'move' call_tmp[574097](77493 call(77489 call (partial) generalIterator _mt[232] this[77390])))
        (77507 'move' _iterator[77498](77505 call _getIterator call_tmp[574097]))
        Defer
        {
          {
            (77524 call _freeIterator _iterator[77498])
          }
        }
        { scopeless type
          (77513 'move' _indexOfInterest[77497](77510 call iteratorIndex _iterator[77498]))
        }
        ForLoop
        {
          unknown i[77517] "index var" "insert auto destroy"
          (77519 'move' i[77517] _indexOfInterest[77497])
          unknown yret[462663] "YVV" "temp"
          (462666 'move' yret[462663](462665 'deref' i[77517]))
          (462668 yield yret[462663])
          label _continueLabel[77502]
          _indexOfInterest[77497]
          _iterator[77498]
        }
        label _breakLabel[77503]
      }
    }
    (462654 return ret[462652])
  }
  where {
    unknown tmp[396183] "maybe param" "temp"
    unknown call_tmp[574104] "expr temp" "maybe param" "maybe type" "temp"
    (574107 'move' call_tmp[574104](343215 call boundedType _mt[232] this[77390]))
    (396194 'move' tmp[396183](77400 call == call_tmp[574104] bounded[66079]))
    unknown call_tmp[574109] "expr temp" "maybe param" "maybe type" "temp"
    (574112 'move' call_tmp[574109](396196 call _cond_invalid tmp[396183]))
    if call_tmp[574109]
    {
      (396199 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507277] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507278] "maybe param" "temp"
    unknown call_tmp[574114] "expr temp" "maybe param" "maybe type" "temp"
    (574117 'move' call_tmp[574114](396184 call isTrue tmp[396183]))
    (507283 'move' tmp[507278](507281 call _cond_test call_tmp[574114]))
    if tmp[507278]
    {
      unknown tmp[507285] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[574121] "expr temp" "maybe param" "maybe type" "temp"
      (574124 'move' call_tmp[574121](343221 call stridable _mt[232] this[77390]))
      unknown call_tmp[574126] "expr temp" "maybe param" "maybe type" "temp"
      (574129 'move' call_tmp[574126](77404 call == call_tmp[574121] 0))
      (507287 'move' tmp[507285](396187 call isTrue call_tmp[574126]))
      (507292 'move' tmp[507277](507289 '_paramFoldLogical' tmp[507278] tmp[507285]))
    }
    {
      (507297 'move' tmp[507277](507294 '_paramFoldLogical' tmp[507278] 0))
    }
    (691839 call _statementLevelSymbol tmp[507277])
  }
  function range[66183](?).generalIterator[77543](arg _mt[77548]:_MT[227], arg this[77545]:range[66183](?) :
  range[66183](?)) : _unknown[43] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[462672] "RVV" "temp"
    unknown tmp[396204] "maybe param" "temp"
    (396215 'move' tmp[396204] 1)
    unknown call_tmp[574131] "expr temp" "maybe param" "maybe type" "temp"
    (574134 'move' call_tmp[574131](396217 call _cond_invalid tmp[396204]))
    if call_tmp[574131]
    {
      (396220 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507304] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507305] "maybe param" "temp"
    unknown call_tmp[574136] "expr temp" "maybe param" "maybe type" "temp"
    (574139 'move' call_tmp[574136](396205 call isTrue tmp[396204]))
    (507310 'move' tmp[507305](507308 call _cond_test call_tmp[574136]))
    if tmp[507305]
    {
      unknown tmp[507312] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[574143] "expr temp" "maybe param" "maybe type" "temp"
      (574146 'move' call_tmp[574143](77556 call(77552 call (partial) isAmbiguous _mt[232] this[77545])))
      (507314 'move' tmp[507312](396208 call isTrue call_tmp[574143]))
      (507319 'move' tmp[507304](507316 '_paramFoldLogical' tmp[507305] tmp[507312]))
    }
    {
      (507324 'move' tmp[507304](507321 '_paramFoldLogical' tmp[507305] 0))
    }
    unknown call_tmp[574148] "expr temp" "maybe param" "maybe type" "temp"
    (574151 'move' call_tmp[574148](77567 call _cond_test tmp[507304]))
    if call_tmp[574148]
    {
      (77565 call boundsCheckHalt module=[244] HaltWrappers[197622] "these -- Attempt to iterate over a range with ambiguous alignment.")
    }
    unknown i[77574] "insert auto destroy"
    unknown call_tmp[574155] "expr temp" "maybe param" "maybe type" "temp"
    (574158 'move' call_tmp[574155](343260 call intIdxType _mt[232] this[77545]))
    (489914 'default init var' i[77574] call_tmp[574155])
    unknown call_tmp[574162] "maybe param" "maybe type" "temp"
    (574165 'move' call_tmp[574162](77578 call first _mt[232] this[77545]))
    const start[77581] "const" "insert auto destroy"
    (489916 'init var' start[77581] call_tmp[574162])
    const end[77604] "const" "insert auto destroy"
    unknown tmp[507331] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507332] "maybe param" "temp"
    unknown call_tmp[574169] "expr temp" "maybe param" "maybe type" "temp"
    (574172 'move' call_tmp[574169](77585 call low _mt[232] this[77545]))
    unknown call_tmp[574176] "expr temp" "maybe param" "maybe type" "temp"
    (574179 'move' call_tmp[574176](77589 call high _mt[232] this[77545]))
    unknown call_tmp[574181] "expr temp" "maybe param" "maybe type" "temp"
    (574184 'move' call_tmp[574181](77592 call > call_tmp[574169] call_tmp[574176]))
    (507337 'move' tmp[507332](507335 call _cond_test call_tmp[574181]))
    if tmp[507332]
    {
      (507342 'move' tmp[507331](507339 '_paramFoldLogical' tmp[507332] start[77581]))
    }
    {
      unknown tmp[507344] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (507346 'move' tmp[507344](77598 call last _mt[232] this[77545]))
      (507351 'move' tmp[507331](507348 '_paramFoldLogical' tmp[507332] tmp[507344]))
    }
    (489918 'init var' end[77604] tmp[507331])
    CForLoop
    {
      {
        unknown yret[462676] "YVV" "temp"
        (462679 'move' yret[462676](462678 'deref' i[77574]))
        (462681 yield yret[462676])
        unknown call_tmp[574188] "expr temp" "maybe param" "maybe type" "temp"
        (574191 'move' call_tmp[574188](77634 call == i[77574] end[77604]))
        unknown call_tmp[574193] "expr temp" "maybe param" "maybe type" "temp"
        (574196 'move' call_tmp[574193](77639 call _cond_test call_tmp[574188]))
        if call_tmp[574193]
        {
          break _breakLabel[77662] _breakLabel[77662]
        }
      }
      label _continueLabel[77661]
      {
        (77646 '=' i[77574] start[77581])
      }
      {
        unknown call_tmp[574200] "expr temp" "maybe param" "maybe type" "temp"
        (574203 'move' call_tmp[574200](343274 call high _mt[232] this[77545]))
        unknown call_tmp[574207] "expr temp" "maybe param" "maybe type" "temp"
        (574210 'move' call_tmp[574207](343278 call low _mt[232] this[77545]))
        (77649 '>=' call_tmp[574200] call_tmp[574207])
      }
      {
        unknown call_tmp[574214] "expr temp" "maybe param" "maybe type" "temp"
        (574217 'move' call_tmp[574214](343283 call intIdxType _mt[232] this[77545]))
        unknown call_tmp[574221] "expr temp" "maybe param" "maybe type" "temp"
        (574224 'move' call_tmp[574221](343287 call stride _mt[232] this[77545]))
        unknown call_tmp[574226] "expr temp" "maybe param" "maybe type" "temp"
        (574229 'move' call_tmp[574226](77655 call _cast call_tmp[574214] call_tmp[574221]))
        (77652 '+=' i[77574] call_tmp[574226])
      }
    }
    label _breakLabel[77662]
    (462674 return ret[462672])
  }
  function range[66183](?).these[77674](arg _mt[77679]:_MT[227], arg this[77676]:range[66183](?) :
  range[66183](?), param arg tag[77671]:iterKind[697]) : _unknown[43] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[462685] "RVV" "temp"
    unknown call_tmp[574231] "expr temp" "maybe param" "maybe type" "temp"
    (574234 'move' call_tmp[574231](77696 call isBoundedRange this[77676]))
    unknown call_tmp[574236] "expr temp" "maybe param" "maybe type" "temp"
    (574239 'move' call_tmp[574236](77697 call ! call_tmp[574231]))
    unknown call_tmp[574241] "expr temp" "maybe param" "maybe type" "temp"
    (574244 'move' call_tmp[574241](77720 call _cond_test call_tmp[574236]))
    if call_tmp[574241]
    {
      (77717 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[396246] "maybe param" "temp"
    (396257 'move' tmp[396246] 1)
    unknown call_tmp[574246] "expr temp" "maybe param" "maybe type" "temp"
    (574249 'move' call_tmp[574246](396259 call _cond_invalid tmp[396246]))
    if call_tmp[574246]
    {
      (396262 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507358] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507359] "maybe param" "temp"
    unknown call_tmp[574251] "expr temp" "maybe param" "maybe type" "temp"
    (574254 'move' call_tmp[574251](396247 call isTrue tmp[396246]))
    (507364 'move' tmp[507359](507362 call _cond_test call_tmp[574251]))
    if tmp[507359]
    {
      unknown tmp[507366] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[574258] "expr temp" "maybe param" "maybe type" "temp"
      (574261 'move' call_tmp[574258](77731 call(77727 call (partial) isAmbiguous _mt[232] this[77676])))
      (507368 'move' tmp[507366](396250 call isTrue call_tmp[574258]))
      (507373 'move' tmp[507358](507370 '_paramFoldLogical' tmp[507359] tmp[507366]))
    }
    {
      (507378 'move' tmp[507358](507375 '_paramFoldLogical' tmp[507359] 0))
    }
    unknown call_tmp[574263] "expr temp" "maybe param" "maybe type" "temp"
    (574266 'move' call_tmp[574263](77743 call _cond_test tmp[507358]))
    if call_tmp[574263]
    {
      (77740 call boundsCheckHalt module=[244] HaltWrappers[197622] "these -- Attempt to iterate over a range with ambiguous alignment.")
    }
    unknown call_tmp[574268] "expr temp" "maybe param" "maybe type" "temp"
    (574271 'move' call_tmp[574268](77769 call _cond_test debugChapelRange[66071]))
    if call_tmp[574268]
    {
      (77766 call chpl_debug_writeln "*** In range standalone iterator:")
    }
    unknown call_tmp[574275] "maybe param" "maybe type" "temp"
    (574278 'move' call_tmp[574275](77774 call length _mt[232] this[77676]))
    const len[77777] "const" "insert auto destroy"
    (489920 'init var' len[77777] call_tmp[574275])
    const numChunks[77806] "const" "insert auto destroy"
    unknown tmp[507385] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507386] "maybe param" "temp"
    unknown call_tmp[574280] "expr temp" "maybe param" "maybe type" "temp"
    (574283 'move' call_tmp[574280](77797 'task_get_serial'))
    (507391 'move' tmp[507386](507389 call _cond_test call_tmp[574280]))
    if tmp[507386]
    {
      (507396 'move' tmp[507385](507393 '_paramFoldLogical' tmp[507386] 1))
    }
    {
      unknown tmp[507398] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (507400 'move' tmp[507398](77802 call _computeNumChunks len[77777]))
      (507405 'move' tmp[507385](507402 '_paramFoldLogical' tmp[507386] tmp[507398]))
    }
    (489922 'init var' numChunks[77806] tmp[507385])
    unknown call_tmp[574285] "expr temp" "maybe param" "maybe type" "temp"
    (574288 'move' call_tmp[574285](77849 call _cond_test debugChapelRange[66071]))
    if call_tmp[574285]
    {
      (77846 call chpl_debug_writeln "*** RI: length=" len[77777] " numChunks=" numChunks[77806])
    }
    unknown call_tmp[574290] "expr temp" "maybe param" "maybe type" "temp"
    (574293 'move' call_tmp[574290](77855 call <= numChunks[77806] 1))
    unknown call_tmp[574295] "expr temp" "maybe param" "maybe type" "temp"
    (574298 'move' call_tmp[574295](78491 call _cond_test call_tmp[574290]))
    if call_tmp[574295]
    {
      {
        unknown _indexOfInterest[77863] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[77864] "expr temp" "temp"
        (77873 'move' _iterator[77864](77871 call _getIterator this[77676]))
        Defer
        {
          {
            (77889 call _freeIterator _iterator[77864])
          }
        }
        { scopeless type
          (77878 'move' _indexOfInterest[77863](77875 call iteratorIndex _iterator[77864]))
        }
        ForLoop
        {
          unknown i[77882] "index var" "insert auto destroy"
          (77884 'move' i[77882] _indexOfInterest[77863])
          {
            unknown yret[462689] "YVV" "temp"
            (462692 'move' yret[462689](462691 'deref' i[77882]))
            (462694 yield yret[462689])
          }
          label _continueLabel[77868]
          _indexOfInterest[77863]
          _iterator[77864]
        }
        label _breakLabel[77869]
      }
    }
    {
      {
        unknown tmpIter[78134] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[574300] "expr temp" "maybe param" "maybe type" "temp"
        (574303 'move' call_tmp[574300](77899 call chpl_build_low_bounded_range 0))
        (78137 'move' tmpIter[78134](77902 call # call_tmp[574300] numChunks[77806]))
        unknown isRngDomArr[78471] "maybe param" "temp"
        unknown tmp[396267] "maybe param" "temp"
        (396278 'move' tmp[396267](78473 call isBoundedRange tmpIter[78134]))
        unknown call_tmp[574305] "expr temp" "maybe param" "maybe type" "temp"
        (574308 'move' call_tmp[574305](396280 call _cond_invalid tmp[396267]))
        if call_tmp[574305]
        {
          (396283 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[507439] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[507440] "maybe param" "temp"
        unknown call_tmp[574310] "expr temp" "maybe param" "maybe type" "temp"
        (574313 'move' call_tmp[574310](396268 call isTrue tmp[396267]))
        (507445 'move' tmp[507440](507443 call _cond_test call_tmp[574310]))
        if tmp[507440]
        {
          (507450 'move' tmp[507439](507447 '_paramFoldLogical' tmp[507440] 1))
        }
        {
          unknown tmp[396288] "maybe param" "temp"
          (396299 'move' tmp[396288](78476 call isDomain tmpIter[78134]))
          unknown call_tmp[574315] "expr temp" "maybe param" "maybe type" "temp"
          (574318 'move' call_tmp[574315](396301 call _cond_invalid tmp[396288]))
          if call_tmp[574315]
          {
            (396304 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[507412] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[507413] "maybe param" "temp"
          unknown call_tmp[574320] "expr temp" "maybe param" "maybe type" "temp"
          (574323 'move' call_tmp[574320](396289 call isTrue tmp[396288]))
          (507418 'move' tmp[507413](507416 call _cond_test call_tmp[574320]))
          if tmp[507413]
          {
            (507423 'move' tmp[507412](507420 '_paramFoldLogical' tmp[507413] 1))
          }
          {
            unknown tmp[507425] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[574325] "expr temp" "maybe param" "maybe type" "temp"
            (574328 'move' call_tmp[574325](78479 call isArray tmpIter[78134]))
            (507427 'move' tmp[507425](396293 call isTrue call_tmp[574325]))
            (507432 'move' tmp[507412](507429 '_paramFoldLogical' tmp[507413] tmp[507425]))
          }
          unknown tmp[507452] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (507454 'move' tmp[507452](396272 call isTrue tmp[507412]))
          (507459 'move' tmp[507439](507456 '_paramFoldLogical' tmp[507440] tmp[507452]))
        }
        (78486 'move' isRngDomArr[78471] tmp[507439])
        if isRngDomArr[78471]
        {
          const _coforallCount[78338] "const" "end count" "temp"
          (78407 'move' _coforallCount[78338](78404 call _endCountAlloc 1))
          unknown numTasks[78339] "temp"
          (78391 'move' numTasks[78339](78387 call size _mt[232] tmpIter[78134]))
          (78382 call _upEndCount _coforallCount[78338] 1 numTasks[78339])
          (78379 call chpl_resetTaskSpawn numTasks[78339])
          unknown _indexOfInterest[78346] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[78347] "expr temp" "temp"
          (78356 'move' _iterator[78347](78354 call _getIterator tmpIter[78134]))
          Defer
          {
            {
              (78372 call _freeIterator _iterator[78347])
            }
          }
          { scopeless type
            (78361 'move' _indexOfInterest[78346](78358 call iteratorIndex _iterator[78347]))
          }
          ForLoop
          {
            unknown chunk[78365] "coforall index var" "index var" "insert auto destroy"
            (78367 'move' chunk[78365] _indexOfInterest[78346])
            (766793 call coforall_fn[766791] len[77777] numChunks[77806])
            function coforall_fn[766791](arg len[766798], arg numChunks[766801]) : void[4] "cobegin or coforall"
            {
              {
                unknown call_tmp[574334] "expr temp" "maybe param" "maybe type" "temp"
                (574337 'move' call_tmp[574334](343370 call stridable _mt[232] this[77676]))
                unknown call_tmp[574339] "expr temp" "maybe param" "maybe type" "temp"
                (574342 'move' call_tmp[574339](78141 call _cond_test call_tmp[574334]))
                if call_tmp[574339]
                {
                  unknown call_tmp[574344] "expr temp" "maybe param" "maybe type" "temp"
                  (574347 'move' call_tmp[574344](78152 call - len[766798] 1))
                  unknown call_tmp[574349] "maybe param" "maybe type" "temp"
                  (574352 'move' call_tmp[574349](78147 call _computeBlock len[766798] numChunks[766801] chunk[78365] call_tmp[574344]))
                  const tmp[78145] "const" "insert auto destroy" "no copy" "temp"
                  (489924 'init var' tmp[78145] call_tmp[574349])
                  (78157 call _check_tuple_var_decl tmp[78145] 2)
                  unknown call_tmp[574354] "maybe param" "maybe type" "temp"
                  (574357 'move' call_tmp[574354](78162 call tmp[78145] 1))
                  const lo[78160] "const" "insert auto destroy"
                  (489926 'init var' lo[78160] call_tmp[574354])
                  unknown call_tmp[574359] "maybe param" "maybe type" "temp"
                  (574362 'move' call_tmp[574359](78167 call tmp[78145] 2))
                  const hi[78165] "const" "insert auto destroy"
                  (489928 'init var' hi[78165] call_tmp[574359])
                  unknown call_tmp[574364] "expr temp" "maybe param" "maybe type" "temp"
                  (574367 'move' call_tmp[574364](78175 call - lo[78160] 1))
                  unknown call_tmp[574369] "maybe param" "maybe type" "temp"
                  (574372 'move' call_tmp[574369](78172 call - hi[78165] call_tmp[574364]))
                  const mylen[78170] "const" "insert auto destroy"
                  (489930 'init var' mylen[78170] call_tmp[574369])
                  unknown call_tmp[574376] "maybe param" "maybe type" "temp"
                  (574379 'move' call_tmp[574376](78181 call(343380 call (partial) orderToIndex _mt[232] this[77676]) lo[78160]))
                  unknown low[78179] "insert auto destroy"
                  (489932 'init var' low[78179] call_tmp[574376])
                  unknown call_tmp[574385] "expr temp" "maybe param" "maybe type" "temp"
                  (574388 'move' call_tmp[574385](343389 call strType _mt[232] this[77676]))
                  unknown call_tmp[574390] "expr temp" "maybe param" "maybe type" "temp"
                  (574393 'move' call_tmp[574390](78193 call chpl__idxToInt low[78179]))
                  unknown call_tmp[574395] "expr temp" "maybe param" "maybe type" "temp"
                  (574398 'move' call_tmp[574395](78190 call _cast call_tmp[574385] call_tmp[574390]))
                  unknown call_tmp[574402] "expr temp" "maybe param" "maybe type" "temp"
                  (574405 'move' call_tmp[574402](343394 call stride _mt[232] this[77676]))
                  unknown call_tmp[574409] "expr temp" "maybe param" "maybe type" "temp"
                  (574412 'move' call_tmp[574409](343398 call strType _mt[232] this[77676]))
                  unknown call_tmp[574414] "expr temp" "maybe param" "maybe type" "temp"
                  (574417 'move' call_tmp[574414](78202 call - mylen[78170] 1))
                  unknown call_tmp[574419] "expr temp" "maybe param" "maybe type" "temp"
                  (574422 'move' call_tmp[574419](78199 call _cast call_tmp[574409] call_tmp[574414]))
                  unknown call_tmp[574424] "expr temp" "maybe param" "maybe type" "temp"
                  (574427 'move' call_tmp[574424](78196 call * call_tmp[574402] call_tmp[574419]))
                  unknown call_tmp[574429] "expr temp" "maybe param" "maybe type" "temp"
                  (574432 'move' call_tmp[574429](78188 call + call_tmp[574395] call_tmp[574424]))
                  unknown call_tmp[574434] "maybe param" "maybe type" "temp"
                  (574437 'move' call_tmp[574434](78186 call(343385 call (partial) chpl_intToIdx _mt[232] this[77676]) call_tmp[574429]))
                  unknown high[78184] "insert auto destroy"
                  (489934 'init var' high[78184] call_tmp[574434])
                  unknown call_tmp[574441] "expr temp" "maybe param" "maybe type" "temp"
                  (574444 'move' call_tmp[574441](343403 call stride _mt[232] this[77676]))
                  unknown call_tmp[574446] "expr temp" "maybe param" "maybe type" "temp"
                  (574449 'move' call_tmp[574446](78209 call < call_tmp[574441] 0))
                  unknown call_tmp[574451] "expr temp" "maybe param" "maybe type" "temp"
                  (574454 'move' call_tmp[574451](78207 call _cond_test call_tmp[574446]))
                  if call_tmp[574451]
                  {
                    (78215 call <=> low[78179] high[78184])
                  }
                  {
                    unknown _indexOfInterest[78220] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[78222] "expr temp" "temp"
                    unknown call_tmp[574458] "expr temp" "maybe param" "maybe type" "temp"
                    (574461 'move' call_tmp[574458](343411 call stride _mt[232] this[77676]))
                    unknown call_tmp[574463] "expr temp" "maybe param" "maybe type" "temp"
                    (574466 'move' call_tmp[574463](78229 call chpl_direct_range_iter low[78179] high[78184] call_tmp[574458]))
                    (78224 'move' _iterator[78222](78227 call _getIterator call_tmp[574463]))
                    Defer
                    {
                      {
                        (78235 call _freeIterator _iterator[78222])
                      }
                    }
                    { scopeless type
                      (78239 'move' _indexOfInterest[78220](78242 call iteratorIndex _iterator[78222]))
                    }
                    ForLoop
                    {
                      unknown i[78247] "index var" "insert auto destroy"
                      (78249 'move' i[78247] _indexOfInterest[78220])
                      {
                        unknown yret[462696] "YVV" "temp"
                        (462699 'move' yret[462696](462698 'deref' i[78247]))
                        (462701 yield yret[462696])
                      }
                      label _continueLabel[78255]
                      _indexOfInterest[78220]
                      _iterator[78222]
                    }
                    label _breakLabel[78257]
                  }
                }
                {
                  unknown call_tmp[574470] "expr temp" "maybe param" "maybe type" "temp"
                  (574473 'move' call_tmp[574470](78268 call _high _mt[232] this[77676]))
                  unknown call_tmp[574477] "expr temp" "maybe param" "maybe type" "temp"
                  (574480 'move' call_tmp[574477](78272 call _low _mt[232] this[77676]))
                  unknown call_tmp[574484] "expr temp" "maybe param" "maybe type" "temp"
                  (574487 'move' call_tmp[574484](78276 call _low _mt[232] this[77676]))
                  unknown call_tmp[574489] "maybe param" "maybe type" "temp"
                  (574492 'move' call_tmp[574489](78263 call _computeBlock len[766798] numChunks[766801] chunk[78365] call_tmp[574470] call_tmp[574477] call_tmp[574484]))
                  const tmp[78261] "const" "insert auto destroy" "no copy" "temp"
                  (489936 'init var' tmp[78261] call_tmp[574489])
                  (78281 call _check_tuple_var_decl tmp[78261] 2)
                  unknown call_tmp[574494] "maybe param" "maybe type" "temp"
                  (574497 'move' call_tmp[574494](78286 call tmp[78261] 1))
                  const lo[78284] "const" "insert auto destroy"
                  (489938 'init var' lo[78284] call_tmp[574494])
                  unknown call_tmp[574499] "maybe param" "maybe type" "temp"
                  (574502 'move' call_tmp[574499](78291 call tmp[78261] 2))
                  const hi[78289] "const" "insert auto destroy"
                  (489940 'init var' hi[78289] call_tmp[574499])
                  {
                    unknown _indexOfInterest[78295] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[78297] "expr temp" "temp"
                    unknown call_tmp[574504] "expr temp" "maybe param" "maybe type" "temp"
                    (574507 'move' call_tmp[574504](78304 call chpl_direct_range_iter lo[78284] hi[78289] 1))
                    (78299 'move' _iterator[78297](78302 call _getIterator call_tmp[574504]))
                    Defer
                    {
                      {
                        (78310 call _freeIterator _iterator[78297])
                      }
                    }
                    { scopeless type
                      (78314 'move' _indexOfInterest[78295](78317 call iteratorIndex _iterator[78297]))
                    }
                    ForLoop
                    {
                      unknown i[78322] "index var" "insert auto destroy"
                      (78324 'move' i[78322] _indexOfInterest[78295])
                      {
                        unknown yret[462703] "YVV" "temp"
                        unknown call_tmp[574511] "expr temp" "maybe param" "maybe type" "temp"
                        (574514 'move' call_tmp[574511](78330 call(343424 call (partial) chpl_intToIdx _mt[232] this[77676]) i[78322]))
                        (462706 'move' yret[462703](462705 'deref' call_tmp[574511]))
                        (462708 yield yret[462703])
                      }
                      label _continueLabel[78332]
                      _indexOfInterest[78295]
                      _iterator[78297]
                    }
                    label _breakLabel[78334]
                  }
                }
              }
              (78341 call _downEndCount _coforallCount[78338] nil[38])
              (766796 return _void[47])
            }
            {
            }
            label _continueLabel[78351]
            _indexOfInterest[78346]
            _iterator[78347]
          }
          label _breakLabel[78352]
          Defer
          {
            {
              (78394 call _endCountFree _coforallCount[78338])
            }
          }
          (78399 call _waitEndCount _coforallCount[78338] 1 numTasks[78339])
        }
        {
          const _coforallCount[78411] "const" "end count" "temp"
          (78468 'move' _coforallCount[78411](78465 call _endCountAlloc 1))
          unknown _indexOfInterest[78419] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[78420] "expr temp" "temp"
          (78429 'move' _iterator[78420](78427 call _getIterator tmpIter[78134]))
          Defer
          {
            {
              (78445 call _freeIterator _iterator[78420])
            }
          }
          { scopeless type
            (78434 'move' _indexOfInterest[78419](78431 call iteratorIndex _iterator[78420]))
          }
          ForLoop
          {
            unknown chunk[78438] "coforall index var" "index var" "insert auto destroy"
            (78440 'move' chunk[78438] _indexOfInterest[78419])
            (78452 call _upEndCount _coforallCount[78411] 1)
            (766806 call coforall_fn[766804] len[77777] numChunks[77806])
            function coforall_fn[766804](arg len[766811], arg numChunks[766814]) : void[4] "cobegin or coforall"
            {
              {
                unknown call_tmp[574518] "expr temp" "maybe param" "maybe type" "temp"
                (574521 'move' call_tmp[574518](343310 call stridable _mt[232] this[77676]))
                unknown call_tmp[574523] "expr temp" "maybe param" "maybe type" "temp"
                (574526 'move' call_tmp[574523](78129 call _cond_test call_tmp[574518]))
                if call_tmp[574523]
                {
                  unknown call_tmp[574528] "expr temp" "maybe param" "maybe type" "temp"
                  (574531 'move' call_tmp[574528](77917 call - len[766811] 1))
                  unknown call_tmp[574533] "maybe param" "maybe type" "temp"
                  (574536 'move' call_tmp[574533](77919 call _computeBlock len[766811] numChunks[766814] chunk[78438] call_tmp[574528]))
                  const tmp[77920] "const" "insert auto destroy" "no copy" "temp"
                  (489942 'init var' tmp[77920] call_tmp[574533])
                  (77927 call _check_tuple_var_decl tmp[77920] 2)
                  unknown call_tmp[574538] "maybe param" "maybe type" "temp"
                  (574541 'move' call_tmp[574538](77921 call tmp[77920] 1))
                  const lo[77905] "const" "insert auto destroy"
                  (489944 'init var' lo[77905] call_tmp[574538])
                  unknown call_tmp[574543] "maybe param" "maybe type" "temp"
                  (574546 'move' call_tmp[574543](77924 call tmp[77920] 2))
                  const hi[77907] "const" "insert auto destroy"
                  (489946 'init var' hi[77907] call_tmp[574543])
                  unknown call_tmp[574548] "expr temp" "maybe param" "maybe type" "temp"
                  (574551 'move' call_tmp[574548](77936 call - lo[77905] 1))
                  unknown call_tmp[574553] "maybe param" "maybe type" "temp"
                  (574556 'move' call_tmp[574553](77938 call - hi[77907] call_tmp[574548]))
                  const mylen[77940] "const" "insert auto destroy"
                  (489948 'init var' mylen[77940] call_tmp[574553])
                  unknown call_tmp[574560] "maybe param" "maybe type" "temp"
                  (574563 'move' call_tmp[574560](77946 call(343320 call (partial) orderToIndex _mt[232] this[77676]) lo[77905]))
                  unknown low[77947] "insert auto destroy"
                  (489950 'init var' low[77947] call_tmp[574560])
                  unknown call_tmp[574569] "expr temp" "maybe param" "maybe type" "temp"
                  (574572 'move' call_tmp[574569](343330 call strType _mt[232] this[77676]))
                  unknown call_tmp[574574] "expr temp" "maybe param" "maybe type" "temp"
                  (574577 'move' call_tmp[574574](77954 call chpl__idxToInt low[77947]))
                  unknown call_tmp[574579] "expr temp" "maybe param" "maybe type" "temp"
                  (574582 'move' call_tmp[574579](77956 call _cast call_tmp[574569] call_tmp[574574]))
                  unknown call_tmp[574586] "expr temp" "maybe param" "maybe type" "temp"
                  (574589 'move' call_tmp[574586](343334 call stride _mt[232] this[77676]))
                  unknown call_tmp[574593] "expr temp" "maybe param" "maybe type" "temp"
                  (574596 'move' call_tmp[574593](343339 call strType _mt[232] this[77676]))
                  unknown call_tmp[574598] "expr temp" "maybe param" "maybe type" "temp"
                  (574601 'move' call_tmp[574598](77961 call - mylen[77940] 1))
                  unknown call_tmp[574603] "expr temp" "maybe param" "maybe type" "temp"
                  (574606 'move' call_tmp[574603](77964 call _cast call_tmp[574593] call_tmp[574598]))
                  unknown call_tmp[574608] "expr temp" "maybe param" "maybe type" "temp"
                  (574611 'move' call_tmp[574608](77966 call * call_tmp[574586] call_tmp[574603]))
                  unknown call_tmp[574613] "expr temp" "maybe param" "maybe type" "temp"
                  (574616 'move' call_tmp[574613](77968 call + call_tmp[574579] call_tmp[574608]))
                  unknown call_tmp[574618] "maybe param" "maybe type" "temp"
                  (574621 'move' call_tmp[574618](77971 call(343325 call (partial) chpl_intToIdx _mt[232] this[77676]) call_tmp[574613]))
                  unknown high[77972] "insert auto destroy"
                  (489952 'init var' high[77972] call_tmp[574618])
                  unknown call_tmp[574625] "expr temp" "maybe param" "maybe type" "temp"
                  (574628 'move' call_tmp[574625](343343 call stride _mt[232] this[77676]))
                  unknown call_tmp[574630] "expr temp" "maybe param" "maybe type" "temp"
                  (574633 'move' call_tmp[574630](77977 call < call_tmp[574625] 0))
                  unknown call_tmp[574635] "expr temp" "maybe param" "maybe type" "temp"
                  (574638 'move' call_tmp[574635](77984 call _cond_test call_tmp[574630]))
                  if call_tmp[574635]
                  {
                    (77981 call <=> low[77947] high[77972])
                  }
                  {
                    unknown _indexOfInterest[78001] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[78002] "expr temp" "temp"
                    unknown call_tmp[574642] "expr temp" "maybe param" "maybe type" "temp"
                    (574645 'move' call_tmp[574642](343350 call stride _mt[232] this[77676]))
                    unknown call_tmp[574647] "expr temp" "maybe param" "maybe type" "temp"
                    (574650 'move' call_tmp[574647](78020 call chpl_direct_range_iter low[77947] high[77972] call_tmp[574642]))
                    (78011 'move' _iterator[78002](78009 call _getIterator call_tmp[574647]))
                    Defer
                    {
                      {
                        (78036 call _freeIterator _iterator[78002])
                      }
                    }
                    { scopeless type
                      (78025 'move' _indexOfInterest[78001](78022 call iteratorIndex _iterator[78002]))
                    }
                    ForLoop
                    {
                      unknown i[78029] "index var" "insert auto destroy"
                      (78031 'move' i[78029] _indexOfInterest[78001])
                      {
                        unknown yret[462710] "YVV" "temp"
                        (462713 'move' yret[462710](462712 'deref' i[78029]))
                        (462715 yield yret[462710])
                      }
                      label _continueLabel[78006]
                      _indexOfInterest[78001]
                      _iterator[78002]
                    }
                    label _breakLabel[78007]
                  }
                }
                {
                  unknown call_tmp[574654] "expr temp" "maybe param" "maybe type" "temp"
                  (574657 'move' call_tmp[574654](78054 call _high _mt[232] this[77676]))
                  unknown call_tmp[574661] "expr temp" "maybe param" "maybe type" "temp"
                  (574664 'move' call_tmp[574661](78058 call _low _mt[232] this[77676]))
                  unknown call_tmp[574668] "expr temp" "maybe param" "maybe type" "temp"
                  (574671 'move' call_tmp[574668](78062 call _low _mt[232] this[77676]))
                  unknown call_tmp[574673] "maybe param" "maybe type" "temp"
                  (574676 'move' call_tmp[574673](78065 call _computeBlock len[766811] numChunks[766814] chunk[78438] call_tmp[574654] call_tmp[574661] call_tmp[574668]))
                  const tmp[78066] "const" "insert auto destroy" "no copy" "temp"
                  (489954 'init var' tmp[78066] call_tmp[574673])
                  (78073 call _check_tuple_var_decl tmp[78066] 2)
                  unknown call_tmp[574678] "maybe param" "maybe type" "temp"
                  (574681 'move' call_tmp[574678](78067 call tmp[78066] 1))
                  const lo[78043] "const" "insert auto destroy"
                  (489956 'init var' lo[78043] call_tmp[574678])
                  unknown call_tmp[574683] "maybe param" "maybe type" "temp"
                  (574686 'move' call_tmp[574683](78070 call tmp[78066] 2))
                  const hi[78045] "const" "insert auto destroy"
                  (489958 'init var' hi[78045] call_tmp[574683])
                  {
                    unknown _indexOfInterest[78091] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[78092] "expr temp" "temp"
                    unknown call_tmp[574688] "expr temp" "maybe param" "maybe type" "temp"
                    (574691 'move' call_tmp[574688](78106 call chpl_direct_range_iter lo[78043] hi[78045] 1))
                    (78101 'move' _iterator[78092](78099 call _getIterator call_tmp[574688]))
                    Defer
                    {
                      {
                        (78122 call _freeIterator _iterator[78092])
                      }
                    }
                    { scopeless type
                      (78111 'move' _indexOfInterest[78091](78108 call iteratorIndex _iterator[78092]))
                    }
                    ForLoop
                    {
                      unknown i[78115] "index var" "insert auto destroy"
                      (78117 'move' i[78115] _indexOfInterest[78091])
                      {
                        unknown yret[462717] "YVV" "temp"
                        unknown call_tmp[574695] "expr temp" "maybe param" "maybe type" "temp"
                        (574698 'move' call_tmp[574695](78087 call(343362 call (partial) chpl_intToIdx _mt[232] this[77676]) i[78115]))
                        (462720 'move' yret[462717](462719 'deref' call_tmp[574695]))
                        (462722 yield yret[462717])
                      }
                      label _continueLabel[78096]
                      _indexOfInterest[78091]
                      _iterator[78092]
                    }
                    label _breakLabel[78097]
                  }
                }
              }
              (78414 call _downEndCount _coforallCount[78411] nil[38])
              (766809 return _void[47])
            }
            {
            }
            label _continueLabel[78424]
            _indexOfInterest[78419]
            _iterator[78420]
          }
          label _breakLabel[78425]
          Defer
          {
            {
              (78456 call _endCountFree _coforallCount[78411])
            }
          }
          (78461 call _waitEndCount _coforallCount[78411] 1)
        }
      }
    }
    (462687 return ret[462685])
  }
  where {
    unknown tmp[396225] "maybe param" "temp"
    (396236 'move' tmp[396225](77686 call == tag[77671] standalone[695]))
    unknown call_tmp[574700] "expr temp" "maybe param" "maybe type" "temp"
    (574703 'move' call_tmp[574700](396238 call _cond_invalid tmp[396225]))
    if call_tmp[574700]
    {
      (396241 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507466] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507467] "maybe param" "temp"
    unknown call_tmp[574705] "expr temp" "maybe param" "maybe type" "temp"
    (574708 'move' call_tmp[574705](396226 call isTrue tmp[396225]))
    (507472 'move' tmp[507467](507470 call _cond_test call_tmp[574705]))
    if tmp[507467]
    {
      unknown tmp[507474] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[574710] "expr temp" "maybe param" "maybe type" "temp"
      (574713 'move' call_tmp[574710](77689 call ! localeModelHasSublocales[180486]))
      (507476 'move' tmp[507474](396229 call isTrue call_tmp[574710]))
      (507481 'move' tmp[507466](507478 '_paramFoldLogical' tmp[507467] tmp[507474]))
    }
    {
      (507486 'move' tmp[507466](507483 '_paramFoldLogical' tmp[507467] 0))
    }
    (691841 call _statementLevelSymbol tmp[507466])
  }
  function range[66183](?).these[78505](arg _mt[78510]:_MT[227], arg this[78507]:range[66183](?) :
  range[66183](?), param arg tag[78502]:iterKind[697]) : _unknown[43] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[462726] "RVV" "temp"
    unknown call_tmp[574715] "expr temp" "maybe param" "maybe type" "temp"
    (574718 'move' call_tmp[574715](78522 call isBoundedRange this[78507]))
    unknown call_tmp[574720] "expr temp" "maybe param" "maybe type" "temp"
    (574723 'move' call_tmp[574720](78523 call ! call_tmp[574715]))
    unknown call_tmp[574725] "expr temp" "maybe param" "maybe type" "temp"
    (574728 'move' call_tmp[574725](78530 call _cond_test call_tmp[574720]))
    if call_tmp[574725]
    {
      (78528 call compilerError "parallel iteration is not supported over unbounded ranges")
    }
    unknown tmp[396309] "maybe param" "temp"
    (396320 'move' tmp[396309] 1)
    unknown call_tmp[574730] "expr temp" "maybe param" "maybe type" "temp"
    (574733 'move' call_tmp[574730](396322 call _cond_invalid tmp[396309]))
    if call_tmp[574730]
    {
      (396325 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507493] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507494] "maybe param" "temp"
    unknown call_tmp[574735] "expr temp" "maybe param" "maybe type" "temp"
    (574738 'move' call_tmp[574735](396310 call isTrue tmp[396309]))
    (507499 'move' tmp[507494](507497 call _cond_test call_tmp[574735]))
    if tmp[507494]
    {
      unknown tmp[507501] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[574742] "expr temp" "maybe param" "maybe type" "temp"
      (574745 'move' call_tmp[574742](78542 call(78538 call (partial) isAmbiguous _mt[232] this[78507])))
      (507503 'move' tmp[507501](396313 call isTrue call_tmp[574742]))
      (507508 'move' tmp[507493](507505 '_paramFoldLogical' tmp[507494] tmp[507501]))
    }
    {
      (507513 'move' tmp[507493](507510 '_paramFoldLogical' tmp[507494] 0))
    }
    unknown call_tmp[574747] "expr temp" "maybe param" "maybe type" "temp"
    (574750 'move' call_tmp[574747](78553 call _cond_test tmp[507493]))
    if call_tmp[574747]
    {
      (78551 call boundsCheckHalt module=[244] HaltWrappers[197622] "these -- Attempt to iterate over a range with ambiguous alignment.")
    }
    unknown call_tmp[574752] "expr temp" "maybe param" "maybe type" "temp"
    (574755 'move' call_tmp[574752](78579 call _cond_test debugChapelRange[66071]))
    if call_tmp[574752]
    {
      (78577 call chpl_debug_writeln "*** In range leader:")
    }
    unknown call_tmp[574757] "expr temp" "maybe param" "maybe type" "temp"
    (574760 'move' call_tmp[574757](343436 call here[92085]))
    unknown call_tmp[574764] "maybe param" "maybe type" "temp"
    (574767 'move' call_tmp[574764](78591 call(78587 call (partial) getChildCount _mt[232] call_tmp[574757])))
    const numSublocs[78592] "const" "insert auto destroy"
    (489960 'init var' numSublocs[78592] call_tmp[574764])
    unknown tmp[396498] "maybe param" "temp"
    (396509 'move' tmp[396498] localeModelHasSublocales[180486])
    unknown call_tmp[574769] "expr temp" "maybe param" "maybe type" "temp"
    (574772 'move' call_tmp[574769](396511 call _cond_invalid tmp[396498]))
    if call_tmp[574769]
    {
      (396514 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507520] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507521] "maybe param" "temp"
    unknown call_tmp[574774] "expr temp" "maybe param" "maybe type" "temp"
    (574777 'move' call_tmp[574774](396499 call isTrue tmp[396498]))
    (507526 'move' tmp[507521](507524 call _cond_test call_tmp[574774]))
    if tmp[507521]
    {
      unknown tmp[507528] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[574779] "expr temp" "maybe param" "maybe type" "temp"
      (574782 'move' call_tmp[574779](78598 call != numSublocs[78592] 0))
      (507530 'move' tmp[507528](396502 call isTrue call_tmp[574779]))
      (507535 'move' tmp[507520](507532 '_paramFoldLogical' tmp[507521] tmp[507528]))
    }
    {
      (507540 'move' tmp[507520](507537 '_paramFoldLogical' tmp[507521] 0))
    }
    unknown call_tmp[574784] "expr temp" "maybe param" "maybe type" "temp"
    (574787 'move' call_tmp[574784](80271 call _cond_test tmp[507520]))
    if call_tmp[574784]
    {
      unknown call_tmp[574791] "maybe param" "maybe type" "temp"
      (574794 'move' call_tmp[574791](78603 call length _mt[232] this[78507]))
      const len[78606] "const" "insert auto destroy"
      (489962 'init var' len[78606] call_tmp[574791])
      const tasksPerLocale[78611] "const" "insert auto destroy"
      (489964 'init var' tasksPerLocale[78611] dataParTasksPerLocale[92471])
      const ignoreRunning[78615] "const" "insert auto destroy"
      (489966 'init var' ignoreRunning[78615] dataParIgnoreRunningTasks[92476])
      const minIndicesPerTask[78619] "const" "insert auto destroy"
      (489968 'init var' minIndicesPerTask[78619] dataParMinGranularity[92481])
      unknown dptpl[78634] "insert auto destroy"
      unknown tmp[507547] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[507548] "maybe param" "temp"
      unknown call_tmp[574796] "expr temp" "maybe param" "maybe type" "temp"
      (574799 'move' call_tmp[574796](78624 call == tasksPerLocale[78611] 0))
      (507553 'move' tmp[507548](507551 call _cond_test call_tmp[574796]))
      if tmp[507548]
      {
        unknown tmp[507555] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[574801] "expr temp" "maybe param" "maybe type" "temp"
        (574804 'move' call_tmp[574801](343445 call here[92085]))
        (507557 'move' tmp[507555](78627 call maxTaskPar _mt[232] call_tmp[574801]))
        (507562 'move' tmp[507547](507559 '_paramFoldLogical' tmp[507548] tmp[507555]))
      }
      {
        (507567 'move' tmp[507547](507564 '_paramFoldLogical' tmp[507548] tasksPerLocale[78611]))
      }
      (489970 'init var' dptpl[78634] tmp[507547])
      unknown call_tmp[574808] "expr temp" "maybe param" "maybe type" "temp"
      (574811 'move' call_tmp[574808](78638 call ! ignoreRunning[78615]))
      unknown call_tmp[574813] "expr temp" "maybe param" "maybe type" "temp"
      (574816 'move' call_tmp[574813](78674 call _cond_test call_tmp[574808]))
      if call_tmp[574813]
      {
        unknown call_tmp[574818] "expr temp" "maybe param" "maybe type" "temp"
        (574821 'move' call_tmp[574818](343449 call here[92085]))
        unknown call_tmp[574825] "expr temp" "maybe param" "maybe type" "temp"
        (574828 'move' call_tmp[574825](78647 call(78643 call (partial) runningTasks _mt[232] call_tmp[574818])))
        unknown call_tmp[574830] "maybe param" "maybe type" "temp"
        (574833 'move' call_tmp[574830](78649 call - call_tmp[574825] 1))
        const otherTasks[78651] "const" "insert auto destroy"
        (489972 'init var' otherTasks[78651] call_tmp[574830])
        unknown tmp[507574] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[507575] "maybe param" "temp"
        unknown call_tmp[574835] "expr temp" "maybe param" "maybe type" "temp"
        (574838 'move' call_tmp[574835](78658 call < otherTasks[78651] dptpl[78634]))
        (507580 'move' tmp[507575](507578 call _cond_test call_tmp[574835]))
        if tmp[507575]
        {
          unknown tmp[507582] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[574840] "expr temp" "maybe param" "maybe type" "temp"
          (574843 'move' call_tmp[574840](78662 call - dptpl[78634] otherTasks[78651]))
          (507584 'move' tmp[507582](78665 call _cast int(64)[13] call_tmp[574840]))
          (507589 'move' tmp[507574](507586 '_paramFoldLogical' tmp[507575] tmp[507582]))
        }
        {
          (507594 'move' tmp[507574](507591 '_paramFoldLogical' tmp[507575] 1))
        }
        (78671 call = dptpl[78634] tmp[507574])
      }
      unknown call_tmp[574845] "maybe param" "maybe type" "temp"
      (574848 'move' call_tmp[574845](78682 call min numSublocs[78592] dptpl[78634]))
      const numSublocTasks[78683] "const" "insert auto destroy"
      (489974 'init var' numSublocTasks[78683] call_tmp[574845])
      const numChunks[78701] "const" "insert auto destroy"
      unknown tmp[507601] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[507602] "maybe param" "temp"
      unknown call_tmp[574850] "expr temp" "maybe param" "maybe type" "temp"
      (574853 'move' call_tmp[574850](78688 'task_get_serial'))
      (507607 'move' tmp[507602](507605 call _cond_test call_tmp[574850]))
      if tmp[507602]
      {
        (507612 'move' tmp[507601](507609 '_paramFoldLogical' tmp[507602] 1))
      }
      {
        unknown tmp[507614] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (507616 'move' tmp[507614](78697 call _computeNumChunks numSublocTasks[78683](ignoreRunning = 1) minIndicesPerTask[78619] len[78606]))
        (507621 'move' tmp[507601](507618 '_paramFoldLogical' tmp[507602] tmp[507614]))
      }
      (489976 'init var' numChunks[78701] tmp[507601])
      unknown call_tmp[574855] "expr temp" "maybe param" "maybe type" "temp"
      (574858 'move' call_tmp[574855](78814 call _cond_test debugDataParNuma[92593]))
      if call_tmp[574855]
      {
        (78811 call chpl_debug_writeln "### numSublocs = " numSublocs[78592] "\n" "### numTasksPerSubloc = " numSublocTasks[78683] "\n" "### ignoreRunning = " ignoreRunning[78615] "\n" "### minIndicesPerTask = " minIndicesPerTask[78619] "\n" "### numChunks = " numChunks[78701])
      }
      unknown call_tmp[574860] "expr temp" "maybe param" "maybe type" "temp"
      (574863 'move' call_tmp[574860](78820 call == numChunks[78701] 1))
      unknown call_tmp[574865] "expr temp" "maybe param" "maybe type" "temp"
      (574868 'move' call_tmp[574865](79891 call _cond_test call_tmp[574860]))
      if call_tmp[574865]
      {
        unknown yret[462730] "YVV" "temp"
        unknown call_tmp[574870] "expr temp" "maybe param" "maybe type" "temp"
        (574873 'move' call_tmp[574870](78825 call - len[78606] 1))
        unknown call_tmp[574875] "expr temp" "maybe param" "maybe type" "temp"
        (574878 'move' call_tmp[574875](78827 call chpl_build_bounded_range 0 call_tmp[574870]))
        unknown call_tmp[574880] "expr temp" "maybe param" "maybe type" "temp"
        (574883 'move' call_tmp[574880](78829 call _build_tuple call_tmp[574875]))
        (462733 'move' yret[462730](462732 'deref' call_tmp[574880]))
        (462735 yield yret[462730])
      }
      {
        {
          unknown tmpIter[79359] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[574885] "expr temp" "maybe param" "maybe type" "temp"
          (574888 'move' call_tmp[574885](78836 call chpl_build_low_bounded_range 0))
          (79362 'move' tmpIter[79359](78839 call # call_tmp[574885] numChunks[78701]))
          unknown isRngDomArr[79871] "maybe param" "temp"
          unknown tmp[396414] "maybe param" "temp"
          (396425 'move' tmp[396414](79873 call isBoundedRange tmpIter[79359]))
          unknown call_tmp[574890] "expr temp" "maybe param" "maybe type" "temp"
          (574893 'move' call_tmp[574890](396427 call _cond_invalid tmp[396414]))
          if call_tmp[574890]
          {
            (396430 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[507655] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[507656] "maybe param" "temp"
          unknown call_tmp[574895] "expr temp" "maybe param" "maybe type" "temp"
          (574898 'move' call_tmp[574895](396415 call isTrue tmp[396414]))
          (507661 'move' tmp[507656](507659 call _cond_test call_tmp[574895]))
          if tmp[507656]
          {
            (507666 'move' tmp[507655](507663 '_paramFoldLogical' tmp[507656] 1))
          }
          {
            unknown tmp[396435] "maybe param" "temp"
            (396446 'move' tmp[396435](79876 call isDomain tmpIter[79359]))
            unknown call_tmp[574900] "expr temp" "maybe param" "maybe type" "temp"
            (574903 'move' call_tmp[574900](396448 call _cond_invalid tmp[396435]))
            if call_tmp[574900]
            {
              (396451 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[507628] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[507629] "maybe param" "temp"
            unknown call_tmp[574905] "expr temp" "maybe param" "maybe type" "temp"
            (574908 'move' call_tmp[574905](396436 call isTrue tmp[396435]))
            (507634 'move' tmp[507629](507632 call _cond_test call_tmp[574905]))
            if tmp[507629]
            {
              (507639 'move' tmp[507628](507636 '_paramFoldLogical' tmp[507629] 1))
            }
            {
              unknown tmp[507641] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[574910] "expr temp" "maybe param" "maybe type" "temp"
              (574913 'move' call_tmp[574910](79879 call isArray tmpIter[79359]))
              (507643 'move' tmp[507641](396440 call isTrue call_tmp[574910]))
              (507648 'move' tmp[507628](507645 '_paramFoldLogical' tmp[507629] tmp[507641]))
            }
            unknown tmp[507668] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (507670 'move' tmp[507668](396419 call isTrue tmp[507628]))
            (507675 'move' tmp[507655](507672 '_paramFoldLogical' tmp[507656] tmp[507668]))
          }
          (79886 'move' isRngDomArr[79871] tmp[507655])
          if isRngDomArr[79871]
          {
            const _coforallCount[79738] "const" "end count" "temp"
            (79807 'move' _coforallCount[79738](79804 call _endCountAlloc 1))
            unknown numTasks[79739] "temp"
            (79791 'move' numTasks[79739](79787 call size _mt[232] tmpIter[79359]))
            (79782 call _upEndCount _coforallCount[79738] 1 numTasks[79739])
            (79779 call chpl_resetTaskSpawn numTasks[79739])
            unknown _indexOfInterest[79746] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[79747] "expr temp" "temp"
            (79756 'move' _iterator[79747](79754 call _getIterator tmpIter[79359]))
            Defer
            {
              {
                (79772 call _freeIterator _iterator[79747])
              }
            }
            { scopeless type
              (79761 'move' _indexOfInterest[79746](79758 call iteratorIndex _iterator[79747]))
            }
            ForLoop
            {
              unknown chunk[79765] "coforall index var" "index var" "insert auto destroy"
              (79767 'move' chunk[79765] _indexOfInterest[79746])
              (766919 call coforall_fn[766917] len[78606] numChunks[78701] dptpl[78634] minIndicesPerTask[78619])
              function coforall_fn[766917](arg len[766924], arg numChunks[766927], arg dptpl[766930], arg minIndicesPerTask[766933]) : void[4] "cobegin or coforall"
              {
                {
                  const tmp[79366] "const" "temp"
                  unknown call_tmp[574917] "expr temp" "maybe param" "maybe type" "temp"
                  (574920 'move' call_tmp[574917](343522 call here[92085]))
                  unknown call_tmp[574924] "expr temp" "maybe param" "maybe type" "temp"
                  (574927 'move' call_tmp[574924](79376 call(79373 call (partial) getChild _mt[232] call_tmp[574917]) chunk[79765]))
                  unknown call_tmp[574929] "expr temp" "maybe param" "maybe type" "temp"
                  (574932 'move' call_tmp[574929](79371 '_wide_get_locale' call_tmp[574924]))
                  (79368 'move' tmp[79366](79370 'deref' call_tmp[574929]))
                  {
                    unknown call_tmp[574934] "expr temp" "maybe param" "maybe type" "temp"
                    (574937 'move' call_tmp[574934](79380 call _cond_test debugDataParNuma[92593]))
                    if call_tmp[574934]
                    {
                      unknown call_tmp[574939] "expr temp" "maybe param" "maybe type" "temp"
                      (574942 'move' call_tmp[574939](79389 call chpl_getSubloc))
                      unknown call_tmp[574944] "expr temp" "maybe param" "maybe type" "temp"
                      (574947 'move' call_tmp[574944](79386 call != chunk[79765] call_tmp[574939]))
                      unknown call_tmp[574949] "expr temp" "maybe param" "maybe type" "temp"
                      (574952 'move' call_tmp[574949](79384 call _cond_test call_tmp[574944]))
                      if call_tmp[574949]
                      {
                        unknown call_tmp[574954] "expr temp" "maybe param" "maybe type" "temp"
                        (574957 'move' call_tmp[574954](79398 call chpl_getSubloc))
                        (79393 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[79765] ", on " call_tmp[574954] ") ***")
                      }
                    }
                    unknown call_tmp[574959] "expr temp" "maybe param" "maybe type" "temp"
                    (574962 'move' call_tmp[574959](79410 call - len[766924] 1))
                    unknown call_tmp[574964] "maybe param" "maybe type" "temp"
                    (574967 'move' call_tmp[574964](79405 call _computeBlock len[766924] numChunks[766927] chunk[79765] call_tmp[574959]))
                    const tmp[79403] "const" "insert auto destroy" "no copy" "temp"
                    (489978 'init var' tmp[79403] call_tmp[574964])
                    (79415 call _check_tuple_var_decl tmp[79403] 2)
                    unknown call_tmp[574969] "maybe param" "maybe type" "temp"
                    (574972 'move' call_tmp[574969](79420 call tmp[79403] 1))
                    const lo[79418] "const" "insert auto destroy"
                    (489980 'init var' lo[79418] call_tmp[574969])
                    unknown call_tmp[574974] "maybe param" "maybe type" "temp"
                    (574977 'move' call_tmp[574974](79425 call tmp[79403] 2))
                    const hi[79423] "const" "insert auto destroy"
                    (489982 'init var' hi[79423] call_tmp[574974])
                    unknown call_tmp[574979] "maybe param" "maybe type" "temp"
                    (574982 'move' call_tmp[574979](79430 call chpl_build_bounded_range lo[79418] hi[79423]))
                    const locRange[79428] "const" "insert auto destroy"
                    (489984 'init var' locRange[79428] call_tmp[574979])
                    unknown call_tmp[574986] "maybe param" "maybe type" "temp"
                    (574989 'move' call_tmp[574986](79436 call length _mt[232] locRange[79428]))
                    const locLen[79434] "const" "insert auto destroy"
                    (489986 'init var' locLen[79434] call_tmp[574986])
                    const numSublocTasks[79440] "const" "insert auto destroy"
                    unknown tmp[507682] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[507683] "maybe param" "temp"
                    unknown call_tmp[574991] "expr temp" "maybe param" "maybe type" "temp"
                    (574994 'move' call_tmp[574991](79445 call % dptpl[766930] numChunks[766927]))
                    unknown call_tmp[574996] "expr temp" "maybe param" "maybe type" "temp"
                    (574999 'move' call_tmp[574996](79442 call < chunk[79765] call_tmp[574991]))
                    (507688 'move' tmp[507683](507686 call _cond_test call_tmp[574996]))
                    if tmp[507683]
                    {
                      unknown tmp[507690] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      unknown call_tmp[575001] "expr temp" "maybe param" "maybe type" "temp"
                      (575004 'move' call_tmp[575001](79452 call / dptpl[766930] numChunks[766927]))
                      (507692 'move' tmp[507690](79450 call + call_tmp[575001] 1))
                      (507697 'move' tmp[507682](507694 '_paramFoldLogical' tmp[507683] tmp[507690]))
                    }
                    {
                      unknown tmp[507699] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (507701 'move' tmp[507699](79458 call / dptpl[766930] numChunks[766927]))
                      (507706 'move' tmp[507682](507703 '_paramFoldLogical' tmp[507683] tmp[507699]))
                    }
                    (489988 'init var' numSublocTasks[79440] tmp[507682])
                    unknown call_tmp[575006] "maybe param" "maybe type" "temp"
                    (575009 'move' call_tmp[575006](79465 call _computeNumChunks numSublocTasks[79440](ignoreRunning = 1) minIndicesPerTask[766933] locLen[79434]))
                    const numTasks[79463] "const" "insert auto destroy"
                    (489990 'init var' numTasks[79463] call_tmp[575006])
                    {
                      unknown tmpIter[79473] "expr temp" "maybe ref" "no copy" "temp"
                      unknown call_tmp[575011] "expr temp" "maybe param" "maybe type" "temp"
                      (575014 'move' call_tmp[575011](79480 call chpl_build_low_bounded_range 0))
                      (79475 'move' tmpIter[79473](79478 call # call_tmp[575011] numTasks[79463]))
                      unknown isRngDomArr[79483] "maybe param" "temp"
                      unknown tmp[396372] "maybe param" "temp"
                      (396383 'move' tmp[396372](79490 call isBoundedRange tmpIter[79473]))
                      unknown call_tmp[575016] "expr temp" "maybe param" "maybe type" "temp"
                      (575019 'move' call_tmp[575016](396385 call _cond_invalid tmp[396372]))
                      if call_tmp[575016]
                      {
                        (396388 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[507740] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[507741] "maybe param" "temp"
                      unknown call_tmp[575021] "expr temp" "maybe param" "maybe type" "temp"
                      (575024 'move' call_tmp[575021](396373 call isTrue tmp[396372]))
                      (507746 'move' tmp[507741](507744 call _cond_test call_tmp[575021]))
                      if tmp[507741]
                      {
                        (507751 'move' tmp[507740](507748 '_paramFoldLogical' tmp[507741] 1))
                      }
                      {
                        unknown tmp[396393] "maybe param" "temp"
                        (396404 'move' tmp[396393](79495 call isDomain tmpIter[79473]))
                        unknown call_tmp[575026] "expr temp" "maybe param" "maybe type" "temp"
                        (575029 'move' call_tmp[575026](396406 call _cond_invalid tmp[396393]))
                        if call_tmp[575026]
                        {
                          (396409 call compilerError "cannot promote short-circuiting || operator")
                        }
                        unknown tmp[507713] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                        unknown tmp[507714] "maybe param" "temp"
                        unknown call_tmp[575031] "expr temp" "maybe param" "maybe type" "temp"
                        (575034 'move' call_tmp[575031](396394 call isTrue tmp[396393]))
                        (507719 'move' tmp[507714](507717 call _cond_test call_tmp[575031]))
                        if tmp[507714]
                        {
                          (507724 'move' tmp[507713](507721 '_paramFoldLogical' tmp[507714] 1))
                        }
                        {
                          unknown tmp[507726] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                          unknown call_tmp[575036] "expr temp" "maybe param" "maybe type" "temp"
                          (575039 'move' call_tmp[575036](79498 call isArray tmpIter[79473]))
                          (507728 'move' tmp[507726](396398 call isTrue call_tmp[575036]))
                          (507733 'move' tmp[507713](507730 '_paramFoldLogical' tmp[507714] tmp[507726]))
                        }
                        unknown tmp[507753] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        (507755 'move' tmp[507753](396377 call isTrue tmp[507713]))
                        (507760 'move' tmp[507740](507757 '_paramFoldLogical' tmp[507741] tmp[507753]))
                      }
                      (79485 'move' isRngDomArr[79483] tmp[507740])
                      if isRngDomArr[79483]
                      {
                        const _coforallCount[79502] "const" "end count" "temp"
                        (79504 'move' _coforallCount[79502](79507 call _endCountAlloc 1))
                        unknown numTasks[79509] "temp"
                        (79511 'move' numTasks[79509](79514 call size _mt[232] tmpIter[79473]))
                        (79518 call _upEndCount _coforallCount[79502] 1 numTasks[79509])
                        (79523 call chpl_resetTaskSpawn numTasks[79509])
                        unknown _indexOfInterest[79525] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[79527] "expr temp" "temp"
                        (79529 'move' _iterator[79527](79532 call _getIterator tmpIter[79473]))
                        Defer
                        {
                          {
                            (79536 call _freeIterator _iterator[79527])
                          }
                        }
                        { scopeless type
                          (79540 'move' _indexOfInterest[79525](79543 call iteratorIndex _iterator[79527]))
                        }
                        ForLoop
                        {
                          unknown core[79548] "coforall index var" "index var" "insert auto destroy"
                          (79550 'move' core[79548] _indexOfInterest[79525])
                          (766869 call coforall_fn[766867] chunk[79765] hi[79423] locRange[79428] lo[79418] locLen[79434] numTasks[79463])
                          function coforall_fn[766867](arg chunk[766874], arg hi[766877], arg locRange[766880], arg lo[766883], arg locLen[766886], arg numTasks[766889]) : void[4] "cobegin or coforall"
                          {
                            {
                              unknown call_tmp[575043] "maybe param" "maybe type" "temp"
                              (575046 'move' call_tmp[575043](79559 call _computeBlock locLen[766886] numTasks[766889] core[79548] hi[766877] lo[766883] lo[766883]))
                              const tmp[79557] "const" "insert auto destroy" "no copy" "temp"
                              (489992 'init var' tmp[79557] call_tmp[575043])
                              (79568 call _check_tuple_var_decl tmp[79557] 2)
                              unknown call_tmp[575048] "maybe param" "maybe type" "temp"
                              (575051 'move' call_tmp[575048](79573 call tmp[79557] 1))
                              const low[79571] "const" "insert auto destroy"
                              (489994 'init var' low[79571] call_tmp[575048])
                              unknown call_tmp[575053] "maybe param" "maybe type" "temp"
                              (575056 'move' call_tmp[575053](79578 call tmp[79557] 2))
                              const high[79576] "const" "insert auto destroy"
                              (489996 'init var' high[79576] call_tmp[575053])
                              unknown call_tmp[575058] "expr temp" "maybe param" "maybe type" "temp"
                              (575061 'move' call_tmp[575058](79582 call _cond_test debugDataParNuma[92593]))
                              if call_tmp[575058]
                              {
                                unknown call_tmp[575063] "expr temp" "maybe param" "maybe type" "temp"
                                (575066 'move' call_tmp[575063](79596 call chpl_build_bounded_range low[79571] high[79576]))
                                (79586 call chpl_debug_writeln "### chunk = " chunk[766874] "  core = " core[79548] "  " "locRange = " locRange[766880] "  coreRange = " call_tmp[575063])
                              }
                              unknown yret[462737] "YVV" "temp"
                              unknown call_tmp[575068] "expr temp" "maybe param" "maybe type" "temp"
                              (575071 'move' call_tmp[575068](79604 call chpl_build_bounded_range low[79571] high[79576]))
                              unknown call_tmp[575073] "expr temp" "maybe param" "maybe type" "temp"
                              (575076 'move' call_tmp[575073](79602 call _build_tuple call_tmp[575068]))
                              (462740 'move' yret[462737](462739 'deref' call_tmp[575073]))
                              (462742 yield yret[462737])
                            }
                            (79608 call _downEndCount _coforallCount[79502] nil[38])
                            (766872 return _void[47])
                          }
                          {
                          }
                          label _continueLabel[79611]
                          _indexOfInterest[79525]
                          _iterator[79527]
                        }
                        label _breakLabel[79613]
                        Defer
                        {
                          {
                            (79617 call _endCountFree _coforallCount[79502])
                          }
                        }
                        (79621 call _waitEndCount _coforallCount[79502] 1 numTasks[79509])
                      }
                      {
                        const _coforallCount[79626] "const" "end count" "temp"
                        (79628 'move' _coforallCount[79626](79631 call _endCountAlloc 1))
                        unknown _indexOfInterest[79633] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[79635] "expr temp" "temp"
                        (79637 'move' _iterator[79635](79640 call _getIterator tmpIter[79473]))
                        Defer
                        {
                          {
                            (79644 call _freeIterator _iterator[79635])
                          }
                        }
                        { scopeless type
                          (79648 'move' _indexOfInterest[79633](79651 call iteratorIndex _iterator[79635]))
                        }
                        ForLoop
                        {
                          unknown core[79656] "coforall index var" "index var" "insert auto destroy"
                          (79658 'move' core[79656] _indexOfInterest[79633])
                          (79662 call _upEndCount _coforallCount[79626] 1)
                          (766894 call coforall_fn[766892] chunk[79765] hi[79423] locRange[79428] lo[79418] locLen[79434] numTasks[79463])
                          function coforall_fn[766892](arg chunk[766899], arg hi[766902], arg locRange[766905], arg lo[766908], arg locLen[766911], arg numTasks[766914]) : void[4] "cobegin or coforall"
                          {
                            {
                              unknown call_tmp[575078] "maybe param" "maybe type" "temp"
                              (575081 'move' call_tmp[575078](79671 call _computeBlock locLen[766911] numTasks[766914] core[79656] hi[766902] lo[766908] lo[766908]))
                              const tmp[79669] "const" "insert auto destroy" "no copy" "temp"
                              (489998 'init var' tmp[79669] call_tmp[575078])
                              (79680 call _check_tuple_var_decl tmp[79669] 2)
                              unknown call_tmp[575083] "maybe param" "maybe type" "temp"
                              (575086 'move' call_tmp[575083](79685 call tmp[79669] 1))
                              const low[79683] "const" "insert auto destroy"
                              (490000 'init var' low[79683] call_tmp[575083])
                              unknown call_tmp[575088] "maybe param" "maybe type" "temp"
                              (575091 'move' call_tmp[575088](79690 call tmp[79669] 2))
                              const high[79688] "const" "insert auto destroy"
                              (490002 'init var' high[79688] call_tmp[575088])
                              unknown call_tmp[575093] "expr temp" "maybe param" "maybe type" "temp"
                              (575096 'move' call_tmp[575093](79694 call _cond_test debugDataParNuma[92593]))
                              if call_tmp[575093]
                              {
                                unknown call_tmp[575098] "expr temp" "maybe param" "maybe type" "temp"
                                (575101 'move' call_tmp[575098](79708 call chpl_build_bounded_range low[79683] high[79688]))
                                (79698 call chpl_debug_writeln "### chunk = " chunk[766899] "  core = " core[79656] "  " "locRange = " locRange[766905] "  coreRange = " call_tmp[575098])
                              }
                              unknown yret[462744] "YVV" "temp"
                              unknown call_tmp[575103] "expr temp" "maybe param" "maybe type" "temp"
                              (575106 'move' call_tmp[575103](79716 call chpl_build_bounded_range low[79683] high[79688]))
                              unknown call_tmp[575108] "expr temp" "maybe param" "maybe type" "temp"
                              (575111 'move' call_tmp[575108](79714 call _build_tuple call_tmp[575103]))
                              (462747 'move' yret[462744](462746 'deref' call_tmp[575108]))
                              (462749 yield yret[462744])
                            }
                            (79720 call _downEndCount _coforallCount[79626] nil[38])
                            (766897 return _void[47])
                          }
                          {
                          }
                          label _continueLabel[79723]
                          _indexOfInterest[79633]
                          _iterator[79635]
                        }
                        label _breakLabel[79725]
                        Defer
                        {
                          {
                            (79729 call _endCountFree _coforallCount[79626])
                          }
                        }
                        (79733 call _waitEndCount _coforallCount[79626] 1)
                      }
                    }
                  }
                }
                (79741 call _downEndCount _coforallCount[79738] nil[38])
                (766922 return _void[47])
              }
              {
              }
              label _continueLabel[79751]
              _indexOfInterest[79746]
              _iterator[79747]
            }
            label _breakLabel[79752]
            Defer
            {
              {
                (79794 call _endCountFree _coforallCount[79738])
              }
            }
            (79799 call _waitEndCount _coforallCount[79738] 1 numTasks[79739])
          }
          {
            const _coforallCount[79811] "const" "end count" "temp"
            (79868 'move' _coforallCount[79811](79865 call _endCountAlloc 1))
            unknown _indexOfInterest[79819] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[79820] "expr temp" "temp"
            (79829 'move' _iterator[79820](79827 call _getIterator tmpIter[79359]))
            Defer
            {
              {
                (79845 call _freeIterator _iterator[79820])
              }
            }
            { scopeless type
              (79834 'move' _indexOfInterest[79819](79831 call iteratorIndex _iterator[79820]))
            }
            ForLoop
            {
              unknown chunk[79838] "coforall index var" "index var" "insert auto destroy"
              (79840 'move' chunk[79838] _indexOfInterest[79819])
              (79852 call _upEndCount _coforallCount[79811] 1)
              (766938 call coforall_fn[766936] len[78606] numChunks[78701] dptpl[78634] minIndicesPerTask[78619])
              function coforall_fn[766936](arg len[766943], arg numChunks[766946], arg dptpl[766949], arg minIndicesPerTask[766952]) : void[4] "cobegin or coforall"
              {
                {
                  const tmp[79352] "const" "temp"
                  unknown call_tmp[575113] "expr temp" "maybe param" "maybe type" "temp"
                  (575116 'move' call_tmp[575113](343470 call here[92085]))
                  unknown call_tmp[575120] "expr temp" "maybe param" "maybe type" "temp"
                  (575123 'move' call_tmp[575120](78849 call(78844 call (partial) getChild _mt[232] call_tmp[575113]) chunk[79838]))
                  unknown call_tmp[575125] "expr temp" "maybe param" "maybe type" "temp"
                  (575128 'move' call_tmp[575125](79349 '_wide_get_locale' call_tmp[575120]))
                  (79353 'move' tmp[79352](79350 'deref' call_tmp[575125]))
                  {
                    unknown call_tmp[575130] "expr temp" "maybe param" "maybe type" "temp"
                    (575133 'move' call_tmp[575130](78919 call _cond_test debugDataParNuma[92593]))
                    if call_tmp[575130]
                    {
                      unknown call_tmp[575135] "expr temp" "maybe param" "maybe type" "temp"
                      (575138 'move' call_tmp[575135](78854 call chpl_getSubloc))
                      unknown call_tmp[575140] "expr temp" "maybe param" "maybe type" "temp"
                      (575143 'move' call_tmp[575140](78855 call != chunk[79838] call_tmp[575135]))
                      unknown call_tmp[575145] "expr temp" "maybe param" "maybe type" "temp"
                      (575148 'move' call_tmp[575145](78913 call _cond_test call_tmp[575140]))
                      if call_tmp[575145]
                      {
                        unknown call_tmp[575150] "expr temp" "maybe param" "maybe type" "temp"
                        (575153 'move' call_tmp[575150](78894 call chpl_getSubloc))
                        (78911 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[79838] ", on " call_tmp[575150] ") ***")
                      }
                    }
                    unknown call_tmp[575155] "expr temp" "maybe param" "maybe type" "temp"
                    (575158 'move' call_tmp[575155](78936 call - len[766943] 1))
                    unknown call_tmp[575160] "maybe param" "maybe type" "temp"
                    (575163 'move' call_tmp[575160](78938 call _computeBlock len[766943] numChunks[766946] chunk[79838] call_tmp[575155]))
                    const tmp[78939] "const" "insert auto destroy" "no copy" "temp"
                    (490004 'init var' tmp[78939] call_tmp[575160])
                    (78946 call _check_tuple_var_decl tmp[78939] 2)
                    unknown call_tmp[575165] "maybe param" "maybe type" "temp"
                    (575168 'move' call_tmp[575165](78940 call tmp[78939] 1))
                    const lo[78924] "const" "insert auto destroy"
                    (490006 'init var' lo[78924] call_tmp[575165])
                    unknown call_tmp[575170] "maybe param" "maybe type" "temp"
                    (575173 'move' call_tmp[575170](78943 call tmp[78939] 2))
                    const hi[78926] "const" "insert auto destroy"
                    (490008 'init var' hi[78926] call_tmp[575170])
                    unknown call_tmp[575175] "maybe param" "maybe type" "temp"
                    (575178 'move' call_tmp[575175](78953 call chpl_build_bounded_range lo[78924] hi[78926]))
                    const locRange[78955] "const" "insert auto destroy"
                    (490010 'init var' locRange[78955] call_tmp[575175])
                    unknown call_tmp[575182] "maybe param" "maybe type" "temp"
                    (575185 'move' call_tmp[575182](78959 call length _mt[232] locRange[78955]))
                    const locLen[78962] "const" "insert auto destroy"
                    (490012 'init var' locLen[78962] call_tmp[575182])
                    const numSublocTasks[78986] "const" "insert auto destroy"
                    unknown tmp[507767] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                    unknown tmp[507768] "maybe param" "temp"
                    unknown call_tmp[575187] "expr temp" "maybe param" "maybe type" "temp"
                    (575190 'move' call_tmp[575187](78968 call % dptpl[766949] numChunks[766946]))
                    unknown call_tmp[575192] "expr temp" "maybe param" "maybe type" "temp"
                    (575195 'move' call_tmp[575192](78970 call < chunk[79838] call_tmp[575187]))
                    (507773 'move' tmp[507768](507771 call _cond_test call_tmp[575192]))
                    if tmp[507768]
                    {
                      unknown tmp[507775] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      unknown call_tmp[575197] "expr temp" "maybe param" "maybe type" "temp"
                      (575200 'move' call_tmp[575197](78974 call / dptpl[766949] numChunks[766946]))
                      (507777 'move' tmp[507775](78977 call + call_tmp[575197] 1))
                      (507782 'move' tmp[507767](507779 '_paramFoldLogical' tmp[507768] tmp[507775]))
                    }
                    {
                      unknown tmp[507784] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                      (507786 'move' tmp[507784](78981 call / dptpl[766949] numChunks[766946]))
                      (507791 'move' tmp[507767](507788 '_paramFoldLogical' tmp[507768] tmp[507784]))
                    }
                    (490014 'init var' numSublocTasks[78986] tmp[507767])
                    unknown call_tmp[575202] "maybe param" "maybe type" "temp"
                    (575205 'move' call_tmp[575202](78996 call _computeNumChunks numSublocTasks[78986](ignoreRunning = 1) minIndicesPerTask[766952] locLen[78962]))
                    const numTasks[78997] "const" "insert auto destroy"
                    (490016 'init var' numTasks[78997] call_tmp[575202])
                    {
                      unknown tmpIter[79139] "expr temp" "maybe ref" "no copy" "temp"
                      unknown call_tmp[575207] "expr temp" "maybe param" "maybe type" "temp"
                      (575210 'move' call_tmp[575207](79002 call chpl_build_low_bounded_range 0))
                      (79142 'move' tmpIter[79139](79005 call # call_tmp[575207] numTasks[78997]))
                      unknown isRngDomArr[79330] "maybe param" "temp"
                      unknown tmp[396330] "maybe param" "temp"
                      (396341 'move' tmp[396330](79332 call isBoundedRange tmpIter[79139]))
                      unknown call_tmp[575212] "expr temp" "maybe param" "maybe type" "temp"
                      (575215 'move' call_tmp[575212](396343 call _cond_invalid tmp[396330]))
                      if call_tmp[575212]
                      {
                        (396346 call compilerError "cannot promote short-circuiting || operator")
                      }
                      unknown tmp[507825] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                      unknown tmp[507826] "maybe param" "temp"
                      unknown call_tmp[575217] "expr temp" "maybe param" "maybe type" "temp"
                      (575220 'move' call_tmp[575217](396331 call isTrue tmp[396330]))
                      (507831 'move' tmp[507826](507829 call _cond_test call_tmp[575217]))
                      if tmp[507826]
                      {
                        (507836 'move' tmp[507825](507833 '_paramFoldLogical' tmp[507826] 1))
                      }
                      {
                        unknown tmp[396351] "maybe param" "temp"
                        (396362 'move' tmp[396351](79335 call isDomain tmpIter[79139]))
                        unknown call_tmp[575222] "expr temp" "maybe param" "maybe type" "temp"
                        (575225 'move' call_tmp[575222](396364 call _cond_invalid tmp[396351]))
                        if call_tmp[575222]
                        {
                          (396367 call compilerError "cannot promote short-circuiting || operator")
                        }
                        unknown tmp[507798] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                        unknown tmp[507799] "maybe param" "temp"
                        unknown call_tmp[575227] "expr temp" "maybe param" "maybe type" "temp"
                        (575230 'move' call_tmp[575227](396352 call isTrue tmp[396351]))
                        (507804 'move' tmp[507799](507802 call _cond_test call_tmp[575227]))
                        if tmp[507799]
                        {
                          (507809 'move' tmp[507798](507806 '_paramFoldLogical' tmp[507799] 1))
                        }
                        {
                          unknown tmp[507811] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                          unknown call_tmp[575232] "expr temp" "maybe param" "maybe type" "temp"
                          (575235 'move' call_tmp[575232](79338 call isArray tmpIter[79139]))
                          (507813 'move' tmp[507811](396356 call isTrue call_tmp[575232]))
                          (507818 'move' tmp[507798](507815 '_paramFoldLogical' tmp[507799] tmp[507811]))
                        }
                        unknown tmp[507838] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                        (507840 'move' tmp[507838](396335 call isTrue tmp[507798]))
                        (507845 'move' tmp[507825](507842 '_paramFoldLogical' tmp[507826] tmp[507838]))
                      }
                      (79345 'move' isRngDomArr[79330] tmp[507825])
                      if isRngDomArr[79330]
                      {
                        const _coforallCount[79197] "const" "end count" "temp"
                        (79266 'move' _coforallCount[79197](79263 call _endCountAlloc 1))
                        unknown numTasks[79198] "temp"
                        (79250 'move' numTasks[79198](79246 call size _mt[232] tmpIter[79139]))
                        (79241 call _upEndCount _coforallCount[79197] 1 numTasks[79198])
                        (79238 call chpl_resetTaskSpawn numTasks[79198])
                        unknown _indexOfInterest[79205] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[79206] "expr temp" "temp"
                        (79215 'move' _iterator[79206](79213 call _getIterator tmpIter[79139]))
                        Defer
                        {
                          {
                            (79231 call _freeIterator _iterator[79206])
                          }
                        }
                        { scopeless type
                          (79220 'move' _indexOfInterest[79205](79217 call iteratorIndex _iterator[79206]))
                        }
                        ForLoop
                        {
                          unknown core[79224] "coforall index var" "index var" "insert auto destroy"
                          (79226 'move' core[79224] _indexOfInterest[79205])
                          (766819 call coforall_fn[766817] hi[78926] locLen[78962] numTasks[78997] chunk[79838] locRange[78955] lo[78924])
                          function coforall_fn[766817](arg hi[766824], arg locLen[766827], arg numTasks[766830], arg chunk[766833], arg locRange[766836], arg lo[766839]) : void[4] "cobegin or coforall"
                          {
                            {
                              unknown call_tmp[575239] "maybe param" "maybe type" "temp"
                              (575242 'move' call_tmp[575239](79148 call _computeBlock locLen[766827] numTasks[766830] core[79224] hi[766824] lo[766839] lo[766839]))
                              const tmp[79146] "const" "insert auto destroy" "no copy" "temp"
                              (490018 'init var' tmp[79146] call_tmp[575239])
                              (79157 call _check_tuple_var_decl tmp[79146] 2)
                              unknown call_tmp[575244] "maybe param" "maybe type" "temp"
                              (575247 'move' call_tmp[575244](79162 call tmp[79146] 1))
                              const low[79160] "const" "insert auto destroy"
                              (490020 'init var' low[79160] call_tmp[575244])
                              unknown call_tmp[575249] "maybe param" "maybe type" "temp"
                              (575252 'move' call_tmp[575249](79167 call tmp[79146] 2))
                              const high[79165] "const" "insert auto destroy"
                              (490022 'init var' high[79165] call_tmp[575249])
                              unknown call_tmp[575254] "expr temp" "maybe param" "maybe type" "temp"
                              (575257 'move' call_tmp[575254](79171 call _cond_test debugDataParNuma[92593]))
                              if call_tmp[575254]
                              {
                                unknown call_tmp[575259] "expr temp" "maybe param" "maybe type" "temp"
                                (575262 'move' call_tmp[575259](79185 call chpl_build_bounded_range low[79160] high[79165]))
                                (79175 call chpl_debug_writeln "### chunk = " chunk[766833] "  core = " core[79224] "  " "locRange = " locRange[766836] "  coreRange = " call_tmp[575259])
                              }
                              unknown yret[462751] "YVV" "temp"
                              unknown call_tmp[575264] "expr temp" "maybe param" "maybe type" "temp"
                              (575267 'move' call_tmp[575264](79193 call chpl_build_bounded_range low[79160] high[79165]))
                              unknown call_tmp[575269] "expr temp" "maybe param" "maybe type" "temp"
                              (575272 'move' call_tmp[575269](79191 call _build_tuple call_tmp[575264]))
                              (462754 'move' yret[462751](462753 'deref' call_tmp[575269]))
                              (462756 yield yret[462751])
                            }
                            (79200 call _downEndCount _coforallCount[79197] nil[38])
                            (766822 return _void[47])
                          }
                          {
                          }
                          label _continueLabel[79210]
                          _indexOfInterest[79205]
                          _iterator[79206]
                        }
                        label _breakLabel[79211]
                        Defer
                        {
                          {
                            (79253 call _endCountFree _coforallCount[79197])
                          }
                        }
                        (79258 call _waitEndCount _coforallCount[79197] 1 numTasks[79198])
                      }
                      {
                        const _coforallCount[79270] "const" "end count" "temp"
                        (79327 'move' _coforallCount[79270](79324 call _endCountAlloc 1))
                        unknown _indexOfInterest[79278] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[79279] "expr temp" "temp"
                        (79288 'move' _iterator[79279](79286 call _getIterator tmpIter[79139]))
                        Defer
                        {
                          {
                            (79304 call _freeIterator _iterator[79279])
                          }
                        }
                        { scopeless type
                          (79293 'move' _indexOfInterest[79278](79290 call iteratorIndex _iterator[79279]))
                        }
                        ForLoop
                        {
                          unknown core[79297] "coforall index var" "index var" "insert auto destroy"
                          (79299 'move' core[79297] _indexOfInterest[79278])
                          (79311 call _upEndCount _coforallCount[79270] 1)
                          (766844 call coforall_fn[766842] hi[78926] locLen[78962] numTasks[78997] chunk[79838] locRange[78955] lo[78924])
                          function coforall_fn[766842](arg hi[766849], arg locLen[766852], arg numTasks[766855], arg chunk[766858], arg locRange[766861], arg lo[766864]) : void[4] "cobegin or coforall"
                          {
                            {
                              unknown call_tmp[575274] "maybe param" "maybe type" "temp"
                              (575277 'move' call_tmp[575274](79020 call _computeBlock locLen[766852] numTasks[766855] core[79297] hi[766849] lo[766864] lo[766864]))
                              const tmp[79021] "const" "insert auto destroy" "no copy" "temp"
                              (490024 'init var' tmp[79021] call_tmp[575274])
                              (79028 call _check_tuple_var_decl tmp[79021] 2)
                              unknown call_tmp[575279] "maybe param" "maybe type" "temp"
                              (575282 'move' call_tmp[575279](79022 call tmp[79021] 1))
                              const low[79007] "const" "insert auto destroy"
                              (490026 'init var' low[79007] call_tmp[575279])
                              unknown call_tmp[575284] "maybe param" "maybe type" "temp"
                              (575287 'move' call_tmp[575284](79025 call tmp[79021] 2))
                              const high[79009] "const" "insert auto destroy"
                              (490028 'init var' high[79009] call_tmp[575284])
                              unknown call_tmp[575289] "expr temp" "maybe param" "maybe type" "temp"
                              (575292 'move' call_tmp[575289](79127 call _cond_test debugDataParNuma[92593]))
                              if call_tmp[575289]
                              {
                                unknown call_tmp[575294] "expr temp" "maybe param" "maybe type" "temp"
                                (575297 'move' call_tmp[575294](79122 call chpl_build_bounded_range low[79007] high[79009]))
                                (79124 call chpl_debug_writeln "### chunk = " chunk[766858] "  core = " core[79297] "  " "locRange = " locRange[766861] "  coreRange = " call_tmp[575294])
                              }
                              unknown yret[462758] "YVV" "temp"
                              unknown call_tmp[575299] "expr temp" "maybe param" "maybe type" "temp"
                              (575302 'move' call_tmp[575299](79133 call chpl_build_bounded_range low[79007] high[79009]))
                              unknown call_tmp[575304] "expr temp" "maybe param" "maybe type" "temp"
                              (575307 'move' call_tmp[575304](79135 call _build_tuple call_tmp[575299]))
                              (462761 'move' yret[462758](462760 'deref' call_tmp[575304]))
                              (462763 yield yret[462758])
                            }
                            (79273 call _downEndCount _coforallCount[79270] nil[38])
                            (766847 return _void[47])
                          }
                          {
                          }
                          label _continueLabel[79283]
                          _indexOfInterest[79278]
                          _iterator[79279]
                        }
                        label _breakLabel[79284]
                        Defer
                        {
                          {
                            (79315 call _endCountFree _coforallCount[79270])
                          }
                        }
                        (79320 call _waitEndCount _coforallCount[79270] 1)
                      }
                    }
                  }
                }
                (79814 call _downEndCount _coforallCount[79811] nil[38])
                (766941 return _void[47])
              }
              {
              }
              label _continueLabel[79824]
              _indexOfInterest[79819]
              _iterator[79820]
            }
            label _breakLabel[79825]
            Defer
            {
              {
                (79856 call _endCountFree _coforallCount[79811])
              }
            }
            (79861 call _waitEndCount _coforallCount[79811] 1)
          }
        }
      }
    }
    {
      unknown call_tmp[575311] "maybe param" "maybe type" "temp"
      (575314 'move' call_tmp[575311](79896 call length _mt[232] this[78507]))
      unknown v[79899] "insert auto destroy"
      (490030 'init var' v[79899] call_tmp[575311])
      const numChunks[79914] "const" "insert auto destroy"
      unknown tmp[507852] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[507853] "maybe param" "temp"
      unknown call_tmp[575316] "expr temp" "maybe param" "maybe type" "temp"
      (575319 'move' call_tmp[575316](79905 'task_get_serial'))
      (507858 'move' tmp[507853](507856 call _cond_test call_tmp[575316]))
      if tmp[507853]
      {
        (507863 'move' tmp[507852](507860 '_paramFoldLogical' tmp[507853] 1))
      }
      {
        unknown tmp[507865] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (507867 'move' tmp[507865](79910 call _computeNumChunks v[79899]))
        (507872 'move' tmp[507852](507869 '_paramFoldLogical' tmp[507853] tmp[507865]))
      }
      (490032 'init var' numChunks[79914] tmp[507852])
      unknown call_tmp[575321] "expr temp" "maybe param" "maybe type" "temp"
      (575324 'move' call_tmp[575321](79964 call _cond_test debugChapelRange[66071]))
      if call_tmp[575321]
      {
        (79924 call chpl_debug_writeln "*** RI: length=" v[79899] " numChunks=" numChunks[79914])
        (79962 call chpl_debug_writeln "*** RI: Using " numChunks[79914] " chunk(s)")
      }
      unknown call_tmp[575326] "expr temp" "maybe param" "maybe type" "temp"
      (575329 'move' call_tmp[575326](79970 call == numChunks[79914] 1))
      unknown call_tmp[575331] "expr temp" "maybe param" "maybe type" "temp"
      (575334 'move' call_tmp[575331](80266 call _cond_test call_tmp[575326]))
      if call_tmp[575331]
      {
        unknown yret[462765] "YVV" "temp"
        unknown call_tmp[575336] "expr temp" "maybe param" "maybe type" "temp"
        (575339 'move' call_tmp[575336](79975 call - v[79899] 1))
        unknown call_tmp[575341] "expr temp" "maybe param" "maybe type" "temp"
        (575344 'move' call_tmp[575341](79977 call chpl_build_bounded_range 0 call_tmp[575336]))
        unknown call_tmp[575346] "expr temp" "maybe param" "maybe type" "temp"
        (575349 'move' call_tmp[575346](79979 call _build_tuple call_tmp[575341]))
        (462768 'move' yret[462765](462767 'deref' call_tmp[575346]))
        (462770 yield yret[462765])
      }
      {
        {
          unknown tmpIter[80058] "expr temp" "maybe ref" "no copy" "temp"
          unknown call_tmp[575351] "expr temp" "maybe param" "maybe type" "temp"
          (575354 'move' call_tmp[575351](79985 call chpl_build_low_bounded_range 0))
          (80061 'move' tmpIter[80058](79988 call # call_tmp[575351] numChunks[79914]))
          unknown isRngDomArr[80246] "maybe param" "temp"
          unknown tmp[396456] "maybe param" "temp"
          (396467 'move' tmp[396456](80248 call isBoundedRange tmpIter[80058]))
          unknown call_tmp[575356] "expr temp" "maybe param" "maybe type" "temp"
          (575359 'move' call_tmp[575356](396469 call _cond_invalid tmp[396456]))
          if call_tmp[575356]
          {
            (396472 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[507906] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[507907] "maybe param" "temp"
          unknown call_tmp[575361] "expr temp" "maybe param" "maybe type" "temp"
          (575364 'move' call_tmp[575361](396457 call isTrue tmp[396456]))
          (507912 'move' tmp[507907](507910 call _cond_test call_tmp[575361]))
          if tmp[507907]
          {
            (507917 'move' tmp[507906](507914 '_paramFoldLogical' tmp[507907] 1))
          }
          {
            unknown tmp[396477] "maybe param" "temp"
            (396488 'move' tmp[396477](80251 call isDomain tmpIter[80058]))
            unknown call_tmp[575366] "expr temp" "maybe param" "maybe type" "temp"
            (575369 'move' call_tmp[575366](396490 call _cond_invalid tmp[396477]))
            if call_tmp[575366]
            {
              (396493 call compilerError "cannot promote short-circuiting || operator")
            }
            unknown tmp[507879] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[507880] "maybe param" "temp"
            unknown call_tmp[575371] "expr temp" "maybe param" "maybe type" "temp"
            (575374 'move' call_tmp[575371](396478 call isTrue tmp[396477]))
            (507885 'move' tmp[507880](507883 call _cond_test call_tmp[575371]))
            if tmp[507880]
            {
              (507890 'move' tmp[507879](507887 '_paramFoldLogical' tmp[507880] 1))
            }
            {
              unknown tmp[507892] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[575376] "expr temp" "maybe param" "maybe type" "temp"
              (575379 'move' call_tmp[575376](80254 call isArray tmpIter[80058]))
              (507894 'move' tmp[507892](396482 call isTrue call_tmp[575376]))
              (507899 'move' tmp[507879](507896 '_paramFoldLogical' tmp[507880] tmp[507892]))
            }
            unknown tmp[507919] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (507921 'move' tmp[507919](396461 call isTrue tmp[507879]))
            (507926 'move' tmp[507906](507923 '_paramFoldLogical' tmp[507907] tmp[507919]))
          }
          (80261 'move' isRngDomArr[80246] tmp[507906])
          if isRngDomArr[80246]
          {
            const _coforallCount[80113] "const" "end count" "temp"
            (80182 'move' _coforallCount[80113](80179 call _endCountAlloc 1))
            unknown numTasks[80114] "temp"
            (80166 'move' numTasks[80114](80162 call size _mt[232] tmpIter[80058]))
            (80157 call _upEndCount _coforallCount[80113] 1 numTasks[80114])
            (80154 call chpl_resetTaskSpawn numTasks[80114])
            unknown _indexOfInterest[80121] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[80122] "expr temp" "temp"
            (80131 'move' _iterator[80122](80129 call _getIterator tmpIter[80058]))
            Defer
            {
              {
                (80147 call _freeIterator _iterator[80122])
              }
            }
            { scopeless type
              (80136 'move' _indexOfInterest[80121](80133 call iteratorIndex _iterator[80122]))
            }
            ForLoop
            {
              unknown chunk[80140] "coforall index var" "index var" "insert auto destroy"
              (80142 'move' chunk[80140] _indexOfInterest[80121])
              (766957 call coforall_fn[766955] v[79899] numChunks[79914])
              function coforall_fn[766955](arg v[766962], arg numChunks[766965]) : void[4] "cobegin or coforall"
              {
                {
                  unknown call_tmp[575383] "expr temp" "maybe param" "maybe type" "temp"
                  (575386 'move' call_tmp[575383](80072 call - v[766962] 1))
                  unknown call_tmp[575388] "maybe param" "maybe type" "temp"
                  (575391 'move' call_tmp[575388](80067 call _computeBlock v[766962] numChunks[766965] chunk[80140] call_tmp[575383]))
                  const tmp[80065] "const" "insert auto destroy" "no copy" "temp"
                  (490034 'init var' tmp[80065] call_tmp[575388])
                  (80077 call _check_tuple_var_decl tmp[80065] 2)
                  unknown call_tmp[575393] "maybe param" "maybe type" "temp"
                  (575396 'move' call_tmp[575393](80082 call tmp[80065] 1))
                  const lo[80080] "const" "insert auto destroy"
                  (490036 'init var' lo[80080] call_tmp[575393])
                  unknown call_tmp[575398] "maybe param" "maybe type" "temp"
                  (575401 'move' call_tmp[575398](80087 call tmp[80065] 2))
                  const hi[80085] "const" "insert auto destroy"
                  (490038 'init var' hi[80085] call_tmp[575398])
                  unknown call_tmp[575403] "expr temp" "maybe param" "maybe type" "temp"
                  (575406 'move' call_tmp[575403](80091 call _cond_test debugChapelRange[66071]))
                  if call_tmp[575403]
                  {
                    unknown call_tmp[575408] "expr temp" "maybe param" "maybe type" "temp"
                    (575411 'move' call_tmp[575408](80101 call chpl_build_bounded_range lo[80080] hi[80085]))
                    unknown call_tmp[575413] "expr temp" "maybe param" "maybe type" "temp"
                    (575416 'move' call_tmp[575413](80099 call _build_tuple call_tmp[575408]))
                    (80096 call chpl_debug_writeln "*** RI: tuple = " call_tmp[575413])
                  }
                  unknown yret[462772] "YVV" "temp"
                  unknown call_tmp[575418] "expr temp" "maybe param" "maybe type" "temp"
                  (575421 'move' call_tmp[575418](80109 call chpl_build_bounded_range lo[80080] hi[80085]))
                  unknown call_tmp[575423] "expr temp" "maybe param" "maybe type" "temp"
                  (575426 'move' call_tmp[575423](80107 call _build_tuple call_tmp[575418]))
                  (462775 'move' yret[462772](462774 'deref' call_tmp[575423]))
                  (462777 yield yret[462772])
                }
                (80116 call _downEndCount _coforallCount[80113] nil[38])
                (766960 return _void[47])
              }
              {
              }
              label _continueLabel[80126]
              _indexOfInterest[80121]
              _iterator[80122]
            }
            label _breakLabel[80127]
            Defer
            {
              {
                (80169 call _endCountFree _coforallCount[80113])
              }
            }
            (80174 call _waitEndCount _coforallCount[80113] 1 numTasks[80114])
          }
          {
            const _coforallCount[80186] "const" "end count" "temp"
            (80243 'move' _coforallCount[80186](80240 call _endCountAlloc 1))
            unknown _indexOfInterest[80194] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[80195] "expr temp" "temp"
            (80204 'move' _iterator[80195](80202 call _getIterator tmpIter[80058]))
            Defer
            {
              {
                (80220 call _freeIterator _iterator[80195])
              }
            }
            { scopeless type
              (80209 'move' _indexOfInterest[80194](80206 call iteratorIndex _iterator[80195]))
            }
            ForLoop
            {
              unknown chunk[80213] "coforall index var" "index var" "insert auto destroy"
              (80215 'move' chunk[80213] _indexOfInterest[80194])
              (80227 call _upEndCount _coforallCount[80186] 1)
              (766970 call coforall_fn[766968] v[79899] numChunks[79914])
              function coforall_fn[766968](arg v[766975], arg numChunks[766978]) : void[4] "cobegin or coforall"
              {
                {
                  unknown call_tmp[575428] "expr temp" "maybe param" "maybe type" "temp"
                  (575431 'move' call_tmp[575428](80002 call - v[766975] 1))
                  unknown call_tmp[575433] "maybe param" "maybe type" "temp"
                  (575436 'move' call_tmp[575433](80004 call _computeBlock v[766975] numChunks[766978] chunk[80213] call_tmp[575428]))
                  const tmp[80005] "const" "insert auto destroy" "no copy" "temp"
                  (490040 'init var' tmp[80005] call_tmp[575433])
                  (80012 call _check_tuple_var_decl tmp[80005] 2)
                  unknown call_tmp[575438] "maybe param" "maybe type" "temp"
                  (575441 'move' call_tmp[575438](80006 call tmp[80005] 1))
                  const lo[79990] "const" "insert auto destroy"
                  (490042 'init var' lo[79990] call_tmp[575438])
                  unknown call_tmp[575443] "maybe param" "maybe type" "temp"
                  (575446 'move' call_tmp[575443](80009 call tmp[80005] 2))
                  const hi[79992] "const" "insert auto destroy"
                  (490044 'init var' hi[79992] call_tmp[575443])
                  unknown call_tmp[575448] "expr temp" "maybe param" "maybe type" "temp"
                  (575451 'move' call_tmp[575448](80045 call _cond_test debugChapelRange[66071]))
                  if call_tmp[575448]
                  {
                    unknown call_tmp[575453] "expr temp" "maybe param" "maybe type" "temp"
                    (575456 'move' call_tmp[575453](80039 call chpl_build_bounded_range lo[79990] hi[79992]))
                    unknown call_tmp[575458] "expr temp" "maybe param" "maybe type" "temp"
                    (575461 'move' call_tmp[575458](80041 call _build_tuple call_tmp[575453]))
                    (80043 call chpl_debug_writeln "*** RI: tuple = " call_tmp[575458])
                  }
                  unknown yret[462779] "YVV" "temp"
                  unknown call_tmp[575463] "expr temp" "maybe param" "maybe type" "temp"
                  (575466 'move' call_tmp[575463](80052 call chpl_build_bounded_range lo[79990] hi[79992]))
                  unknown call_tmp[575468] "expr temp" "maybe param" "maybe type" "temp"
                  (575471 'move' call_tmp[575468](80054 call _build_tuple call_tmp[575463]))
                  (462782 'move' yret[462779](462781 'deref' call_tmp[575468]))
                  (462784 yield yret[462779])
                }
                (80189 call _downEndCount _coforallCount[80186] nil[38])
                (766973 return _void[47])
              }
              {
              }
              label _continueLabel[80199]
              _indexOfInterest[80194]
              _iterator[80195]
            }
            label _breakLabel[80200]
            Defer
            {
              {
                (80231 call _endCountFree _coforallCount[80186])
              }
            }
            (80236 call _waitEndCount _coforallCount[80186] 1)
          }
        }
      }
    }
    (462728 return ret[462726])
  }
  where {
    (78517 call == tag[78502] leader[691])
  }
  function range[66183](?).these[80285](arg _mt[80292]:_MT[227], arg this[80289]:range[66183](?) :
  range[66183](?), param arg tag[80282]:iterKind[697], arg followThis[80287]:_any[170](?)) : _unknown[43] "iterator fn" "method" "no doc" "no return value for void"
  {
    unknown ret[462788] "RVV" "temp"
    unknown tmp[396519] "maybe param" "temp"
    (396530 'move' tmp[396519] 1)
    unknown call_tmp[575473] "expr temp" "maybe param" "maybe type" "temp"
    (575476 'move' call_tmp[575473](396532 call _cond_invalid tmp[396519]))
    if call_tmp[575473]
    {
      (396535 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507933] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507934] "maybe param" "temp"
    unknown call_tmp[575478] "expr temp" "maybe param" "maybe type" "temp"
    (575481 'move' call_tmp[575478](396520 call isTrue tmp[396519]))
    (507939 'move' tmp[507934](507937 call _cond_test call_tmp[575478]))
    if tmp[507934]
    {
      unknown tmp[507941] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[575485] "expr temp" "maybe param" "maybe type" "temp"
      (575488 'move' call_tmp[575485](80307 call(80303 call (partial) isAmbiguous _mt[232] this[80289])))
      (507943 'move' tmp[507941](396523 call isTrue call_tmp[575485]))
      (507948 'move' tmp[507933](507945 '_paramFoldLogical' tmp[507934] tmp[507941]))
    }
    {
      (507953 'move' tmp[507933](507950 '_paramFoldLogical' tmp[507934] 0))
    }
    unknown call_tmp[575490] "expr temp" "maybe param" "maybe type" "temp"
    (575493 'move' call_tmp[575490](80318 call _cond_test tmp[507933]))
    if call_tmp[575490]
    {
      (80316 call boundsCheckHalt module=[244] HaltWrappers[197622] "these -- Attempt to iterate over a range with ambiguous alignment.")
    }
    unknown call_tmp[575497] "expr temp" "maybe param" "maybe type" "temp"
    (575500 'move' call_tmp[575497](343609 call boundedType _mt[232] this[80289]))
    unknown call_tmp[575502] "expr temp" "maybe param" "maybe type" "temp"
    (575505 'move' call_tmp[575502](80329 call == call_tmp[575497] boundedNone[66085]))
    unknown call_tmp[575507] "expr temp" "maybe param" "maybe type" "temp"
    (575510 'move' call_tmp[575507](80336 call _cond_test call_tmp[575502]))
    if call_tmp[575507]
    {
      (80334 call compilerError "iteration over a range with no bounds")
    }
    unknown tmp[396540] "maybe param" "temp"
    unknown call_tmp[575514] "expr temp" "maybe param" "maybe type" "temp"
    (575517 'move' call_tmp[575514](343615 call stridable _mt[232] this[80289]))
    (396551 'move' tmp[396540](80342 call ! call_tmp[575514]))
    unknown call_tmp[575519] "expr temp" "maybe param" "maybe type" "temp"
    (575522 'move' call_tmp[575519](396553 call _cond_invalid tmp[396540]))
    if call_tmp[575519]
    {
      (396556 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507960] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507961] "maybe param" "temp"
    unknown call_tmp[575524] "expr temp" "maybe param" "maybe type" "temp"
    (575527 'move' call_tmp[575524](396541 call isTrue tmp[396540]))
    (507966 'move' tmp[507961](507964 call _cond_test call_tmp[575524]))
    if tmp[507961]
    {
      unknown tmp[507968] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[575531] "expr temp" "maybe param" "maybe type" "temp"
      (575534 'move' call_tmp[575531](343620 call boundedType _mt[232] this[80289]))
      unknown call_tmp[575536] "expr temp" "maybe param" "maybe type" "temp"
      (575539 'move' call_tmp[575536](80349 call == call_tmp[575531] boundedHigh[66083]))
      (507970 'move' tmp[507968](396544 call isTrue call_tmp[575536]))
      (507975 'move' tmp[507960](507972 '_paramFoldLogical' tmp[507961] tmp[507968]))
    }
    {
      (507980 'move' tmp[507960](507977 '_paramFoldLogical' tmp[507961] 0))
    }
    unknown call_tmp[575541] "expr temp" "maybe param" "maybe type" "temp"
    (575544 'move' call_tmp[575541](80373 call _cond_test tmp[507960]))
    if call_tmp[575541]
    {
      (80371 call compilerError "iteration over a range with no first index")
    }
    unknown call_tmp[575548] "expr temp" "maybe param" "maybe type" "temp"
    (575551 'move' call_tmp[575548](80379 call size _mt[232] followThis[80287]))
    unknown call_tmp[575553] "expr temp" "maybe param" "maybe type" "temp"
    (575556 'move' call_tmp[575553](80383 call != call_tmp[575548] 1))
    unknown call_tmp[575558] "expr temp" "maybe param" "maybe type" "temp"
    (575561 'move' call_tmp[575558](80405 call _cond_test call_tmp[575553]))
    if call_tmp[575558]
    {
      (80403 call compilerError "iteration over a range with multi-dimensional iterator")
    }
    unknown call_tmp[575563] "expr temp" "maybe param" "maybe type" "temp"
    (575566 'move' call_tmp[575563](80432 call _cond_test debugChapelRange[66071]))
    if call_tmp[575563]
    {
      (80430 call chpl_debug_writeln "In range follower code: Following " followThis[80287])
    }
    unknown call_tmp[575568] "maybe param" "maybe type" "temp"
    (575571 'move' call_tmp[575568](80440 call followThis[80287] 1))
    unknown myFollowThis[80441] "insert auto destroy"
    (490046 'init var' myFollowThis[80441] call_tmp[575568])
    unknown call_tmp[575573] "expr temp" "maybe param" "maybe type" "temp"
    (575576 'move' call_tmp[575573](80466 call _cond_test debugChapelRange[66071]))
    if call_tmp[575573]
    {
      (80464 call chpl_debug_writeln "Range = " myFollowThis[80441])
    }
    unknown tmp[396561] "maybe param" "temp"
    (396572 'move' tmp[396561] 1)
    unknown call_tmp[575578] "expr temp" "maybe param" "maybe type" "temp"
    (575581 'move' call_tmp[575578](396574 call _cond_invalid tmp[396561]))
    if call_tmp[575578]
    {
      (396577 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[507987] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[507988] "maybe param" "temp"
    unknown call_tmp[575583] "expr temp" "maybe param" "maybe type" "temp"
    (575586 'move' call_tmp[575583](396562 call isTrue tmp[396561]))
    (507993 'move' tmp[507988](507991 call _cond_test call_tmp[575583]))
    if tmp[507988]
    {
      unknown tmp[507995] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[575590] "expr temp" "maybe param" "maybe type" "temp"
      (575593 'move' call_tmp[575590](80477 call(80473 call (partial) hasFirst _mt[232] this[80289])))
      unknown call_tmp[575595] "expr temp" "maybe param" "maybe type" "temp"
      (575598 'move' call_tmp[575595](80478 call ! call_tmp[575590]))
      (507997 'move' tmp[507995](396565 call isTrue call_tmp[575595]))
      (508002 'move' tmp[507987](507999 '_paramFoldLogical' tmp[507988] tmp[507995]))
    }
    {
      (508007 'move' tmp[507987](508004 '_paramFoldLogical' tmp[507988] 0))
    }
    unknown call_tmp[575600] "expr temp" "maybe param" "maybe type" "temp"
    (575603 'move' call_tmp[575600](80539 call _cond_test tmp[507987]))
    if call_tmp[575600]
    {
      unknown call_tmp[575607] "expr temp" "maybe param" "maybe type" "temp"
      (575610 'move' call_tmp[575607](80487 call(80483 call (partial) isEmpty _mt[232] this[80289])))
      unknown call_tmp[575612] "expr temp" "maybe param" "maybe type" "temp"
      (575615 'move' call_tmp[575612](80534 call _cond_test call_tmp[575607]))
      if call_tmp[575612]
      {
        unknown call_tmp[575619] "expr temp" "maybe param" "maybe type" "temp"
        (575622 'move' call_tmp[575619](80493 call(80489 call (partial) isEmpty _mt[232] myFollowThis[80441])))
        unknown call_tmp[575624] "expr temp" "maybe param" "maybe type" "temp"
        (575627 'move' call_tmp[575624](80494 call ! call_tmp[575619]))
        unknown call_tmp[575629] "expr temp" "maybe param" "maybe type" "temp"
        (575632 'move' call_tmp[575629](80519 call _cond_test call_tmp[575624]))
        if call_tmp[575629]
        {
          (80517 call boundsCheckHalt module=[244] HaltWrappers[197622] "zippered iteration with a range has non-equal lengths")
        }
      }
      {
        (80531 call boundsCheckHalt module=[244] HaltWrappers[197622] "iteration over a range with no first index")
      }
    }
    unknown tmp[396603] "maybe param" "temp"
    (396614 'move' tmp[396603] 1)
    unknown call_tmp[575634] "expr temp" "maybe param" "maybe type" "temp"
    (575637 'move' call_tmp[575634](396616 call _cond_invalid tmp[396603]))
    if call_tmp[575634]
    {
      (396619 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508014] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508015] "maybe param" "temp"
    unknown call_tmp[575639] "expr temp" "maybe param" "maybe type" "temp"
    (575642 'move' call_tmp[575639](396604 call isTrue tmp[396603]))
    (508020 'move' tmp[508015](508018 call _cond_test call_tmp[575639]))
    if tmp[508015]
    {
      unknown tmp[508022] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[575646] "expr temp" "maybe param" "maybe type" "temp"
      (575649 'move' call_tmp[575646](80549 call(80545 call (partial) hasFirst _mt[232] myFollowThis[80441])))
      unknown call_tmp[575651] "expr temp" "maybe param" "maybe type" "temp"
      (575654 'move' call_tmp[575651](80550 call ! call_tmp[575646]))
      (508024 'move' tmp[508022](396607 call isTrue call_tmp[575651]))
      (508029 'move' tmp[508014](508026 '_paramFoldLogical' tmp[508015] tmp[508022]))
    }
    {
      (508034 'move' tmp[508014](508031 '_paramFoldLogical' tmp[508015] 0))
    }
    unknown call_tmp[575656] "expr temp" "maybe param" "maybe type" "temp"
    (575659 'move' call_tmp[575656](80601 call _cond_test tmp[508014]))
    if call_tmp[575656]
    {
      unknown tmp[396582] "maybe param" "temp"
      unknown call_tmp[575663] "expr temp" "maybe param" "maybe type" "temp"
      (575666 'move' call_tmp[575663](80559 call(80555 call (partial) isAmbiguous _mt[232] myFollowThis[80441])))
      (396593 'move' tmp[396582](80560 call ! call_tmp[575663]))
      unknown call_tmp[575668] "expr temp" "maybe param" "maybe type" "temp"
      (575671 'move' call_tmp[575668](396595 call _cond_invalid tmp[396582]))
      if call_tmp[575668]
      {
        (396598 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[508041] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508042] "maybe param" "temp"
      unknown call_tmp[575673] "expr temp" "maybe param" "maybe type" "temp"
      (575676 'move' call_tmp[575673](396583 call isTrue tmp[396582]))
      (508047 'move' tmp[508042](508045 call _cond_test call_tmp[575673]))
      if tmp[508042]
      {
        unknown tmp[508049] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[575680] "expr temp" "maybe param" "maybe type" "temp"
        (575683 'move' call_tmp[575680](80567 call(80563 call (partial) isEmpty _mt[232] myFollowThis[80441])))
        (508051 'move' tmp[508049](396586 call isTrue call_tmp[575680]))
        (508056 'move' tmp[508041](508053 '_paramFoldLogical' tmp[508042] tmp[508049]))
      }
      {
        (508061 'move' tmp[508041](508058 '_paramFoldLogical' tmp[508042] 0))
      }
      unknown call_tmp[575685] "expr temp" "maybe param" "maybe type" "temp"
      (575688 'move' call_tmp[575685](80570 call ! tmp[508041]))
      unknown call_tmp[575690] "expr temp" "maybe param" "maybe type" "temp"
      (575693 'move' call_tmp[575690](80595 call _cond_test call_tmp[575685]))
      if call_tmp[575690]
      {
        (80593 call boundsCheckHalt module=[244] HaltWrappers[197622] "zippered iteration over a range with no first index")
      }
    }
    unknown tmp[396687] "maybe param" "temp"
    unknown tmp[396708] "maybe param" "temp"
    (396719 'move' tmp[396708](80608 call isBoundedRange myFollowThis[80441]))
    unknown call_tmp[575695] "expr temp" "maybe param" "maybe type" "temp"
    (575698 'move' call_tmp[575695](396721 call _cond_invalid tmp[396708]))
    if call_tmp[575695]
    {
      (396724 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508068] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508069] "maybe param" "temp"
    unknown call_tmp[575700] "expr temp" "maybe param" "maybe type" "temp"
    (575703 'move' call_tmp[575700](396709 call isTrue tmp[396708]))
    (508074 'move' tmp[508069](508072 call _cond_test call_tmp[575700]))
    if tmp[508069]
    {
      unknown tmp[508076] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[575707] "expr temp" "maybe param" "maybe type" "temp"
      (575710 'move' call_tmp[575707](80610 call stridable _mt[232] myFollowThis[80441]))
      unknown call_tmp[575712] "expr temp" "maybe param" "maybe type" "temp"
      (575715 'move' call_tmp[575712](80613 call ! call_tmp[575707]))
      (508078 'move' tmp[508076](396712 call isTrue call_tmp[575712]))
      (508083 'move' tmp[508068](508080 '_paramFoldLogical' tmp[508069] tmp[508076]))
    }
    {
      (508088 'move' tmp[508068](508085 '_paramFoldLogical' tmp[508069] 0))
    }
    (396698 'move' tmp[396687] tmp[508068])
    unknown call_tmp[575717] "expr temp" "maybe param" "maybe type" "temp"
    (575720 'move' call_tmp[575717](396700 call _cond_invalid tmp[396687]))
    if call_tmp[575717]
    {
      (396703 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[508095] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508096] "maybe param" "temp"
    unknown call_tmp[575722] "expr temp" "maybe param" "maybe type" "temp"
    (575725 'move' call_tmp[575722](396688 call isTrue tmp[396687]))
    (508101 'move' tmp[508096](508099 call _cond_test call_tmp[575722]))
    if tmp[508096]
    {
      (508106 'move' tmp[508095](508103 '_paramFoldLogical' tmp[508096] 1))
    }
    {
      unknown tmp[508108] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[575729] "expr temp" "maybe param" "maybe type" "temp"
      (575732 'move' call_tmp[575729](80622 call(80618 call (partial) hasLast _mt[232] myFollowThis[80441])))
      (508110 'move' tmp[508108](396692 call isTrue call_tmp[575729]))
      (508115 'move' tmp[508095](508112 '_paramFoldLogical' tmp[508096] tmp[508108]))
    }
    unknown call_tmp[575734] "expr temp" "maybe param" "maybe type" "temp"
    (575737 'move' call_tmp[575734](81257 call _cond_test tmp[508095]))
    if call_tmp[575734]
    {
      unknown call_tmp[575741] "maybe param" "maybe type" "temp"
      (575744 'move' call_tmp[575741](80626 call length _mt[232] myFollowThis[80441]))
      const flwlen[80629] "const" "insert auto destroy"
      (490048 'init var' flwlen[80629] call_tmp[575741])
      unknown tmp[396624] "maybe param" "temp"
      (396635 'move' tmp[396624] 1)
      unknown call_tmp[575746] "expr temp" "maybe param" "maybe type" "temp"
      (575749 'move' call_tmp[575746](396637 call _cond_invalid tmp[396624]))
      if call_tmp[575746]
      {
        (396640 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[508122] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508123] "maybe param" "temp"
      unknown call_tmp[575751] "expr temp" "maybe param" "maybe type" "temp"
      (575754 'move' call_tmp[575751](396625 call isTrue tmp[396624]))
      (508128 'move' tmp[508123](508126 call _cond_test call_tmp[575751]))
      if tmp[508123]
      {
        unknown tmp[508130] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[575758] "expr temp" "maybe param" "maybe type" "temp"
        (575761 'move' call_tmp[575758](80639 call(80635 call (partial) hasLast _mt[232] this[80289])))
        (508132 'move' tmp[508130](396628 call isTrue call_tmp[575758]))
        (508137 'move' tmp[508122](508134 '_paramFoldLogical' tmp[508123] tmp[508130]))
      }
      {
        (508142 'move' tmp[508122](508139 '_paramFoldLogical' tmp[508123] 0))
      }
      unknown call_tmp[575763] "expr temp" "maybe param" "maybe type" "temp"
      (575766 'move' call_tmp[575763](80709 call _cond_test tmp[508122]))
      if call_tmp[575763]
      {
        unknown call_tmp[575768] "expr temp" "maybe param" "maybe type" "temp"
        (575771 'move' call_tmp[575768](80645 call isBoundedRange this[80289]))
        unknown call_tmp[575773] "expr temp" "maybe param" "maybe type" "temp"
        (575776 'move' call_tmp[575773](80703 call _cond_test call_tmp[575768]))
        if call_tmp[575773]
        {
          unknown call_tmp[575780] "expr temp" "maybe param" "maybe type" "temp"
          (575783 'move' call_tmp[575780](80647 call length _mt[232] this[80289]))
          unknown call_tmp[575785] "expr temp" "maybe param" "maybe type" "temp"
          (575788 'move' call_tmp[575785](80651 call < call_tmp[575780] flwlen[80629]))
          unknown call_tmp[575790] "expr temp" "maybe param" "maybe type" "temp"
          (575793 'move' call_tmp[575790](80676 call _cond_test call_tmp[575785]))
          if call_tmp[575790]
          {
            (80674 call boundsCheckHalt module=[244] HaltWrappers[197622] "zippered iteration over a range with too few indices")
          }
        }
        {
          (80701 call assert 0 "hasFirst && hasLast do not imply isBoundedRange")
        }
      }
      unknown tmp[396645] "maybe param" "temp"
      (396656 'move' tmp[396645](80714 call stridable _mt[232] this[80289]))
      unknown call_tmp[575797] "expr temp" "maybe param" "maybe type" "temp"
      (575800 'move' call_tmp[575797](396658 call _cond_invalid tmp[396645]))
      if call_tmp[575797]
      {
        (396661 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[508149] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508150] "maybe param" "temp"
      unknown call_tmp[575802] "expr temp" "maybe param" "maybe type" "temp"
      (575805 'move' call_tmp[575802](396646 call isTrue tmp[396645]))
      (508155 'move' tmp[508150](508153 call _cond_test call_tmp[575802]))
      if tmp[508150]
      {
        (508160 'move' tmp[508149](508157 '_paramFoldLogical' tmp[508150] 1))
      }
      {
        unknown tmp[508162] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[575809] "expr temp" "maybe param" "maybe type" "temp"
        (575812 'move' call_tmp[575809](80718 call stridable _mt[232] myFollowThis[80441]))
        (508164 'move' tmp[508162](396650 call isTrue call_tmp[575809]))
        (508169 'move' tmp[508149](508166 '_paramFoldLogical' tmp[508150] tmp[508162]))
      }
      unknown call_tmp[575814] "expr temp" "maybe param" "maybe type" "temp"
      (575817 'move' call_tmp[575814](81051 call _cond_test tmp[508149]))
      if call_tmp[575814]
      {
        unknown call_tmp[575821] "expr temp" "maybe param" "maybe type" "temp"
        (575824 'move' call_tmp[575821](80726 call(343654 call (partial) chpl_intToIdx _mt[232] this[80289]) 1))
        unknown call_tmp[575828] "expr temp" "maybe param" "maybe type" "temp"
        (575831 'move' call_tmp[575828](80730 call(343658 call (partial) chpl_intToIdx _mt[232] this[80289]) 0))
        unknown call_tmp[575833] "expr temp" "maybe param" "maybe type" "temp"
        (575836 'move' call_tmp[575833](80731 call chpl_build_bounded_range call_tmp[575821] call_tmp[575828]))
        unknown call_tmp[575840] "expr temp" "maybe param" "maybe type" "temp"
        (575843 'move' call_tmp[575840](343662 call intIdxType _mt[232] this[80289]))
        unknown call_tmp[575845] "expr temp" "maybe param" "maybe type" "temp"
        (575848 'move' call_tmp[575845](80737 call chpl__rangeStrideType call_tmp[575840]))
        unknown call_tmp[575850] "expr temp" "maybe param" "maybe type" "temp"
        (575853 'move' call_tmp[575850](80738 call _cast call_tmp[575845] 1))
        unknown call_tmp[575855] "maybe param" "maybe type" "temp"
        (575858 'move' call_tmp[575855](80740 call chpl_by call_tmp[575833] call_tmp[575850]))
        unknown r[80742] "insert auto destroy"
        (490050 'init var' r[80742] call_tmp[575855])
        unknown call_tmp[575860] "expr temp" "maybe param" "maybe type" "temp"
        (575863 'move' call_tmp[575860](80748 call != flwlen[80629] 0))
        unknown call_tmp[575865] "expr temp" "maybe param" "maybe type" "temp"
        (575868 'move' call_tmp[575865](80847 call _cond_test call_tmp[575860]))
        if call_tmp[575865]
        {
          unknown call_tmp[575872] "expr temp" "maybe param" "maybe type" "temp"
          (575875 'move' call_tmp[575872](80751 call stride _mt[232] this[80289]))
          unknown call_tmp[575879] "expr temp" "maybe param" "maybe type" "temp"
          (575882 'move' call_tmp[575879](80755 call stride _mt[232] myFollowThis[80441]))
          unknown call_tmp[575884] "maybe param" "maybe type" "temp"
          (575887 'move' call_tmp[575884](80758 call * call_tmp[575872] call_tmp[575879]))
          const stride[80760] "const" "insert auto destroy"
          (490052 'init var' stride[80760] call_tmp[575884])
          unknown call_tmp[575893] "expr temp" "maybe param" "maybe type" "temp"
          (575896 'move' call_tmp[575893](80769 call first _mt[232] myFollowThis[80441]))
          unknown call_tmp[575898] "maybe param" "maybe type" "temp"
          (575901 'move' call_tmp[575898](80773 call(80765 call (partial) orderToIndex _mt[232] this[80289]) call_tmp[575893]))
          unknown low[80774] "insert auto destroy"
          (490054 'init var' low[80774] call_tmp[575898])
          unknown call_tmp[575907] "expr temp" "maybe param" "maybe type" "temp"
          (575910 'move' call_tmp[575907](343676 call strType _mt[232] this[80289]))
          unknown call_tmp[575912] "expr temp" "maybe param" "maybe type" "temp"
          (575915 'move' call_tmp[575912](80781 call chpl__idxToInt low[80774]))
          unknown call_tmp[575917] "expr temp" "maybe param" "maybe type" "temp"
          (575920 'move' call_tmp[575917](80783 call _cast call_tmp[575907] call_tmp[575912]))
          unknown call_tmp[575924] "expr temp" "maybe param" "maybe type" "temp"
          (575927 'move' call_tmp[575924](343682 call strType _mt[232] this[80289]))
          unknown call_tmp[575929] "expr temp" "maybe param" "maybe type" "temp"
          (575932 'move' call_tmp[575929](80788 call - flwlen[80629] 1))
          unknown call_tmp[575934] "expr temp" "maybe param" "maybe type" "temp"
          (575937 'move' call_tmp[575934](80791 call _cast call_tmp[575924] call_tmp[575929]))
          unknown call_tmp[575939] "expr temp" "maybe param" "maybe type" "temp"
          (575942 'move' call_tmp[575939](80793 call * stride[80760] call_tmp[575934]))
          unknown call_tmp[575944] "expr temp" "maybe param" "maybe type" "temp"
          (575947 'move' call_tmp[575944](80795 call + call_tmp[575917] call_tmp[575939]))
          unknown call_tmp[575949] "maybe param" "maybe type" "temp"
          (575952 'move' call_tmp[575949](80798 call(343671 call (partial) chpl_intToIdx _mt[232] this[80289]) call_tmp[575944]))
          unknown high[80799] "insert auto destroy"
          (490056 'init var' high[80799] call_tmp[575949])
          unknown call_tmp[575958] "expr temp" "maybe param" "maybe type" "temp"
          (575961 'move' call_tmp[575958](80809 call last _mt[232] myFollowThis[80441]))
          unknown call_tmp[575963] "expr temp" "maybe param" "maybe type" "temp"
          (575966 'move' call_tmp[575963](80813 call(80805 call (partial) orderToIndex _mt[232] this[80289]) call_tmp[575958]))
          unknown call_tmp[575968] "expr temp" "maybe param" "maybe type" "temp"
          (575971 'move' call_tmp[575968](80814 call == high[80799] call_tmp[575963]))
          (80817 call assert call_tmp[575968])
          unknown call_tmp[575973] "expr temp" "maybe param" "maybe type" "temp"
          (575976 'move' call_tmp[575973](80821 call < stride[80760] 0))
          unknown call_tmp[575978] "expr temp" "maybe param" "maybe type" "temp"
          (575981 'move' call_tmp[575978](80828 call _cond_test call_tmp[575973]))
          if call_tmp[575978]
          {
            (80825 call <=> low[80774] high[80799])
          }
          unknown call_tmp[575983] "expr temp" "maybe param" "maybe type" "temp"
          (575986 'move' call_tmp[575983](80836 call chpl_build_bounded_range low[80774] high[80799]))
          unknown call_tmp[575990] "expr temp" "maybe param" "maybe type" "temp"
          (575993 'move' call_tmp[575990](343696 call strType _mt[232] this[80289]))
          unknown call_tmp[575995] "expr temp" "maybe param" "maybe type" "temp"
          (575998 'move' call_tmp[575995](80840 call _cast call_tmp[575990] stride[80760]))
          unknown call_tmp[576000] "expr temp" "maybe param" "maybe type" "temp"
          (576003 'move' call_tmp[576000](80842 call chpl_by call_tmp[575983] call_tmp[575995]))
          (80844 call = r[80742] call_tmp[576000])
        }
        unknown call_tmp[576005] "expr temp" "maybe param" "maybe type" "temp"
        (576008 'move' call_tmp[576005](80873 call _cond_test debugChapelRange[66071]))
        if call_tmp[576005]
        {
          (80871 call chpl_debug_writeln "Expanded range = " r[80742])
        }
        {
          unknown _indexOfInterest[80883] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[80884] "expr temp" "temp"
          (80893 'move' _iterator[80884](80891 call _getIterator r[80742]))
          Defer
          {
            {
              (80909 call _freeIterator _iterator[80884])
            }
          }
          { scopeless type
            (80898 'move' _indexOfInterest[80883](80895 call iteratorIndex _iterator[80884]))
          }
          ForLoop
          {
            unknown i[80902] "index var" "insert auto destroy"
            (80904 'move' i[80902] _indexOfInterest[80883])
            unknown yret[462792] "YVV" "temp"
            (462795 'move' yret[462792](462794 'deref' i[80902]))
            (462797 yield yret[462792])
            label _continueLabel[80888]
            _indexOfInterest[80883]
            _iterator[80884]
          }
          label _breakLabel[80889]
        }
      }
      {
        unknown call_tmp[576012] "expr temp" "maybe param" "maybe type" "temp"
        (576015 'move' call_tmp[576012](343705 call idxType _mt[232] this[80289]))
        unknown call_tmp[576017] "expr temp" "maybe param" "maybe type" "temp"
        (576020 'move' call_tmp[576017](80920 call chpl__intToIdx call_tmp[576012] 1))
        unknown call_tmp[576024] "expr temp" "maybe param" "maybe type" "temp"
        (576027 'move' call_tmp[576024](343710 call idxType _mt[232] this[80289]))
        unknown call_tmp[576029] "expr temp" "maybe param" "maybe type" "temp"
        (576032 'move' call_tmp[576029](80925 call chpl__intToIdx call_tmp[576024] 0))
        unknown call_tmp[576034] "maybe param" "maybe type" "temp"
        (576037 'move' call_tmp[576034](80926 call chpl_build_bounded_range call_tmp[576017] call_tmp[576029]))
        unknown r[80928] "insert auto destroy"
        (490058 'init var' r[80928] call_tmp[576034])
        unknown call_tmp[576039] "expr temp" "maybe param" "maybe type" "temp"
        (576042 'move' call_tmp[576039](80934 call != flwlen[80629] 0))
        unknown call_tmp[576044] "expr temp" "maybe param" "maybe type" "temp"
        (576047 'move' call_tmp[576044](80997 call _cond_test call_tmp[576039]))
        if call_tmp[576044]
        {
          unknown call_tmp[576053] "expr temp" "maybe param" "maybe type" "temp"
          (576056 'move' call_tmp[576053](80941 call first _mt[232] myFollowThis[80441]))
          unknown call_tmp[576058] "maybe param" "maybe type" "temp"
          (576061 'move' call_tmp[576058](80945 call(80937 call (partial) orderToIndex _mt[232] this[80289]) call_tmp[576053]))
          const low[80946] "const" "insert auto destroy"
          (490060 'init var' low[80946] call_tmp[576058])
          unknown call_tmp[576067] "expr temp" "maybe param" "maybe type" "temp"
          (576070 'move' call_tmp[576067](343722 call strType _mt[232] this[80289]))
          unknown call_tmp[576072] "expr temp" "maybe param" "maybe type" "temp"
          (576075 'move' call_tmp[576072](80954 call chpl__idxToInt low[80946]))
          unknown call_tmp[576077] "expr temp" "maybe param" "maybe type" "temp"
          (576080 'move' call_tmp[576077](80956 call _cast call_tmp[576067] call_tmp[576072]))
          unknown call_tmp[576084] "expr temp" "maybe param" "maybe type" "temp"
          (576087 'move' call_tmp[576084](343727 call strType _mt[232] this[80289]))
          unknown call_tmp[576089] "expr temp" "maybe param" "maybe type" "temp"
          (576092 'move' call_tmp[576089](80960 call - flwlen[80629] 1))
          unknown call_tmp[576094] "expr temp" "maybe param" "maybe type" "temp"
          (576097 'move' call_tmp[576094](80963 call _cast call_tmp[576084] call_tmp[576089]))
          unknown call_tmp[576099] "expr temp" "maybe param" "maybe type" "temp"
          (576102 'move' call_tmp[576099](80965 call + call_tmp[576077] call_tmp[576094]))
          unknown call_tmp[576104] "maybe param" "maybe type" "temp"
          (576107 'move' call_tmp[576104](80968 call(343717 call (partial) chpl_intToIdx _mt[232] this[80289]) call_tmp[576099]))
          const high[80969] "const" "insert auto destroy"
          (490062 'init var' high[80969] call_tmp[576104])
          unknown call_tmp[576113] "expr temp" "maybe param" "maybe type" "temp"
          (576116 'move' call_tmp[576113](80979 call last _mt[232] myFollowThis[80441]))
          unknown call_tmp[576118] "expr temp" "maybe param" "maybe type" "temp"
          (576121 'move' call_tmp[576118](80983 call(80975 call (partial) orderToIndex _mt[232] this[80289]) call_tmp[576113]))
          unknown call_tmp[576123] "expr temp" "maybe param" "maybe type" "temp"
          (576126 'move' call_tmp[576123](80984 call == high[80969] call_tmp[576118]))
          (80987 call assert call_tmp[576123])
          unknown call_tmp[576128] "expr temp" "maybe param" "maybe type" "temp"
          (576131 'move' call_tmp[576128](80992 call chpl_build_bounded_range low[80946] high[80969]))
          (80994 call = r[80928] call_tmp[576128])
        }
        unknown call_tmp[576133] "expr temp" "maybe param" "maybe type" "temp"
        (576136 'move' call_tmp[576133](81008 call _cond_test debugChapelRange[66071]))
        if call_tmp[576133]
        {
          (81006 call chpl_debug_writeln "Expanded range = " r[80928])
        }
        {
          unknown _indexOfInterest[81018] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[81019] "expr temp" "temp"
          (81028 'move' _iterator[81019](81026 call _getIterator r[80928]))
          Defer
          {
            {
              (81044 call _freeIterator _iterator[81019])
            }
          }
          { scopeless type
            (81033 'move' _indexOfInterest[81018](81030 call iteratorIndex _iterator[81019]))
          }
          ForLoop
          {
            unknown i[81037] "index var" "insert auto destroy"
            (81039 'move' i[81037] _indexOfInterest[81018])
            unknown yret[462799] "YVV" "temp"
            (462802 'move' yret[462799](462801 'deref' i[81037]))
            (462804 yield yret[462799])
            label _continueLabel[81023]
            _indexOfInterest[81018]
            _iterator[81019]
          }
          label _breakLabel[81024]
        }
      }
    }
    {
      unknown tmp[396666] "maybe param" "temp"
      (396677 'move' tmp[396666] 1)
      unknown call_tmp[576138] "expr temp" "maybe param" "maybe type" "temp"
      (576141 'move' call_tmp[576138](396679 call _cond_invalid tmp[396666]))
      if call_tmp[576138]
      {
        (396682 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[508176] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508177] "maybe param" "temp"
      unknown call_tmp[576143] "expr temp" "maybe param" "maybe type" "temp"
      (576146 'move' call_tmp[576143](396667 call isTrue tmp[396666]))
      (508182 'move' tmp[508177](508180 call _cond_test call_tmp[576143]))
      if tmp[508177]
      {
        unknown tmp[508184] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[576150] "expr temp" "maybe param" "maybe type" "temp"
        (576153 'move' call_tmp[576150](81061 call(81057 call (partial) hasLast _mt[232] this[80289])))
        (508186 'move' tmp[508184](396670 call isTrue call_tmp[576150]))
        (508191 'move' tmp[508176](508188 '_paramFoldLogical' tmp[508177] tmp[508184]))
      }
      {
        (508196 'move' tmp[508176](508193 '_paramFoldLogical' tmp[508177] 0))
      }
      unknown call_tmp[576155] "expr temp" "maybe param" "maybe type" "temp"
      (576158 'move' call_tmp[576155](81091 call _cond_test tmp[508176]))
      if call_tmp[576155]
      {
        (81089 call zipLengthHalt module=[244] HaltWrappers[197622] "zippered iteration where a bounded range follows an unbounded iterator")
      }
      unknown call_tmp[576164] "expr temp" "maybe param" "maybe type" "temp"
      (576167 'move' call_tmp[576164](81102 call first _mt[232] myFollowThis[80441]))
      unknown call_tmp[576169] "maybe param" "maybe type" "temp"
      (576172 'move' call_tmp[576169](81106 call(81098 call (partial) orderToIndex _mt[232] this[80289]) call_tmp[576164]))
      const first[81107] "const" "insert auto destroy"
      (490064 'init var' first[81107] call_tmp[576169])
      unknown call_tmp[576176] "expr temp" "maybe param" "maybe type" "temp"
      (576179 'move' call_tmp[576176](81111 call stride _mt[232] this[80289]))
      unknown call_tmp[576183] "expr temp" "maybe param" "maybe type" "temp"
      (576186 'move' call_tmp[576183](81115 call stride _mt[232] myFollowThis[80441]))
      unknown call_tmp[576188] "maybe param" "maybe type" "temp"
      (576191 'move' call_tmp[576188](81118 call * call_tmp[576176] call_tmp[576183]))
      const stride[81120] "const" "insert auto destroy"
      (490066 'init var' stride[81120] call_tmp[576188])
      unknown call_tmp[576193] "expr temp" "maybe param" "maybe type" "temp"
      (576196 'move' call_tmp[576193](81125 call > stride[81120] 0))
      unknown call_tmp[576198] "expr temp" "maybe param" "maybe type" "temp"
      (576201 'move' call_tmp[576198](81253 call _cond_test call_tmp[576193]))
      if call_tmp[576198]
      {
        unknown call_tmp[576203] "expr temp" "maybe param" "maybe type" "temp"
        (576206 'move' call_tmp[576203](81128 call chpl_build_low_bounded_range first[81107]))
        unknown call_tmp[576210] "expr temp" "maybe param" "maybe type" "temp"
        (576213 'move' call_tmp[576210](343751 call strType _mt[232] this[80289]))
        unknown call_tmp[576215] "expr temp" "maybe param" "maybe type" "temp"
        (576218 'move' call_tmp[576215](81132 call _cast call_tmp[576210] stride[81120]))
        unknown call_tmp[576220] "maybe param" "maybe type" "temp"
        (576223 'move' call_tmp[576220](81134 call chpl_by call_tmp[576203] call_tmp[576215]))
        const r[81136] "const" "insert auto destroy"
        (490068 'init var' r[81136] call_tmp[576220])
        unknown call_tmp[576225] "expr temp" "maybe param" "maybe type" "temp"
        (576228 'move' call_tmp[576225](81147 call _cond_test debugChapelRange[66071]))
        if call_tmp[576225]
        {
          (81145 call chpl_debug_writeln "Expanded range = " r[81136])
        }
        {
          unknown _indexOfInterest[81157] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[81158] "expr temp" "temp"
          (81167 'move' _iterator[81158](81165 call _getIterator r[81136]))
          Defer
          {
            {
              (81183 call _freeIterator _iterator[81158])
            }
          }
          { scopeless type
            (81172 'move' _indexOfInterest[81157](81169 call iteratorIndex _iterator[81158]))
          }
          ForLoop
          {
            unknown i[81176] "index var" "insert auto destroy"
            (81178 'move' i[81176] _indexOfInterest[81157])
            unknown yret[462806] "YVV" "temp"
            (462809 'move' yret[462806](462808 'deref' i[81176]))
            (462811 yield yret[462806])
            label _continueLabel[81162]
            _indexOfInterest[81157]
            _iterator[81158]
          }
          label _breakLabel[81163]
        }
      }
      {
        unknown call_tmp[576230] "expr temp" "maybe param" "maybe type" "temp"
        (576233 'move' call_tmp[576230](81191 call chpl_build_high_bounded_range first[81107]))
        unknown call_tmp[576237] "expr temp" "maybe param" "maybe type" "temp"
        (576240 'move' call_tmp[576237](343761 call strType _mt[232] this[80289]))
        unknown call_tmp[576242] "expr temp" "maybe param" "maybe type" "temp"
        (576245 'move' call_tmp[576242](81195 call _cast call_tmp[576237] stride[81120]))
        unknown call_tmp[576247] "maybe param" "maybe type" "temp"
        (576250 'move' call_tmp[576247](81197 call chpl_by call_tmp[576230] call_tmp[576242]))
        const r[81199] "const" "insert auto destroy"
        (490070 'init var' r[81199] call_tmp[576247])
        unknown call_tmp[576252] "expr temp" "maybe param" "maybe type" "temp"
        (576255 'move' call_tmp[576252](81210 call _cond_test debugChapelRange[66071]))
        if call_tmp[576252]
        {
          (81208 call chpl_debug_writeln "Expanded range = " r[81199])
        }
        {
          unknown _indexOfInterest[81220] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[81221] "expr temp" "temp"
          (81230 'move' _iterator[81221](81228 call _getIterator r[81199]))
          Defer
          {
            {
              (81246 call _freeIterator _iterator[81221])
            }
          }
          { scopeless type
            (81235 'move' _indexOfInterest[81220](81232 call iteratorIndex _iterator[81221]))
          }
          ForLoop
          {
            unknown i[81239] "index var" "insert auto destroy"
            (81241 'move' i[81239] _indexOfInterest[81220])
            unknown yret[462813] "YVV" "temp"
            (462816 'move' yret[462813](462815 'deref' i[81239]))
            (462818 yield yret[462813])
            label _continueLabel[81225]
            _indexOfInterest[81220]
            _iterator[81221]
          }
          label _breakLabel[81226]
        }
      }
    }
    (462790 return ret[462788])
  }
  where {
    (80299 call == tag[80282] follower[693])
  }
  function _cast[81268](arg t[81266]:_any[170](?), arg x[81274]:range[66183](?)) : _unknown[43]
  {
    unknown ret[462822] "RVV" "temp"
    unknown ret[81282] "insert auto destroy"
    (490072 'default init var' ret[81282] string[24])
    unknown call_tmp[576259] "expr temp" "maybe param" "maybe type" "temp"
    (576262 'move' call_tmp[576259](81291 call(81287 call (partial) hasLowBound _mt[232] x[81274])))
    unknown call_tmp[576264] "expr temp" "maybe param" "maybe type" "temp"
    (576267 'move' call_tmp[576264](81303 call _cond_test call_tmp[576259]))
    if call_tmp[576264]
    {
      unknown call_tmp[576271] "expr temp" "maybe param" "maybe type" "temp"
      (576274 'move' call_tmp[576271](81294 call low _mt[232] x[81274]))
      unknown call_tmp[576276] "expr temp" "maybe param" "maybe type" "temp"
      (576279 'move' call_tmp[576276](81298 call _cast string[24] call_tmp[576271]))
      (81300 call += ret[81282] call_tmp[576276])
    }
    (81325 call += ret[81282] "..")
    unknown call_tmp[576283] "expr temp" "maybe param" "maybe type" "temp"
    (576286 'move' call_tmp[576283](81333 call(81329 call (partial) hasHighBound _mt[232] x[81274])))
    unknown call_tmp[576288] "expr temp" "maybe param" "maybe type" "temp"
    (576291 'move' call_tmp[576288](81345 call _cond_test call_tmp[576283]))
    if call_tmp[576288]
    {
      unknown call_tmp[576295] "expr temp" "maybe param" "maybe type" "temp"
      (576298 'move' call_tmp[576295](81336 call high _mt[232] x[81274]))
      unknown call_tmp[576300] "expr temp" "maybe param" "maybe type" "temp"
      (576303 'move' call_tmp[576300](81340 call _cast string[24] call_tmp[576295]))
      (81342 call += ret[81282] call_tmp[576300])
    }
    unknown call_tmp[576307] "expr temp" "maybe param" "maybe type" "temp"
    (576310 'move' call_tmp[576307](81351 call stride _mt[232] x[81274]))
    unknown call_tmp[576312] "expr temp" "maybe param" "maybe type" "temp"
    (576315 'move' call_tmp[576312](81355 call != call_tmp[576307] 1))
    unknown call_tmp[576317] "expr temp" "maybe param" "maybe type" "temp"
    (576320 'move' call_tmp[576317](81386 call _cond_test call_tmp[576312]))
    if call_tmp[576317]
    {
      unknown call_tmp[576324] "expr temp" "maybe param" "maybe type" "temp"
      (576327 'move' call_tmp[576324](81375 call stride _mt[232] x[81274]))
      unknown call_tmp[576329] "expr temp" "maybe param" "maybe type" "temp"
      (576332 'move' call_tmp[576329](81379 call _cast string[24] call_tmp[576324]))
      unknown call_tmp[576334] "expr temp" "maybe param" "maybe type" "temp"
      (576337 'move' call_tmp[576334](81381 call + " by " call_tmp[576329]))
      (81383 call += ret[81282] call_tmp[576334])
    }
    unknown alignCheckRange[81392] "insert auto destroy"
    (490074 'init var' alignCheckRange[81392] x[81274])
    (81402 call(81398 call (partial) normalizeAlignment _mt[232] alignCheckRange[81392]))
    unknown call_tmp[576343] "expr temp" "maybe param" "maybe type" "temp"
    (576346 'move' call_tmp[576343](81411 call(81407 call (partial) isNaturallyAligned _mt[232] alignCheckRange[81392])))
    unknown call_tmp[576348] "expr temp" "maybe param" "maybe type" "temp"
    (576351 'move' call_tmp[576348](81412 call ! call_tmp[576343]))
    unknown call_tmp[576353] "expr temp" "maybe param" "maybe type" "temp"
    (576356 'move' call_tmp[576353](81453 call _cond_test call_tmp[576348]))
    if call_tmp[576353]
    {
      unknown call_tmp[576360] "expr temp" "maybe param" "maybe type" "temp"
      (576363 'move' call_tmp[576360](81434 call alignment _mt[232] x[81274]))
      unknown call_tmp[576365] "expr temp" "maybe param" "maybe type" "temp"
      (576368 'move' call_tmp[576365](81438 call chpl__idxToInt call_tmp[576360]))
      unknown call_tmp[576372] "expr temp" "maybe param" "maybe type" "temp"
      (576375 'move' call_tmp[576372](81441 call stride _mt[232] x[81274]))
      unknown call_tmp[576377] "expr temp" "maybe param" "maybe type" "temp"
      (576380 'move' call_tmp[576377](81444 call chpl__mod call_tmp[576365] call_tmp[576372]))
      unknown call_tmp[576382] "expr temp" "maybe param" "maybe type" "temp"
      (576385 'move' call_tmp[576382](81446 call _cast string[24] call_tmp[576377]))
      unknown call_tmp[576387] "expr temp" "maybe param" "maybe type" "temp"
      (576390 'move' call_tmp[576387](81448 call + " align " call_tmp[576382]))
      (81450 call += ret[81282] call_tmp[576387])
    }
    (462827 'move' ret[462822](462826 'deref' ret[81282]))
    (462824 return ret[462822])
  }
  where {
    (81279 call == t[81266] string[24])
  }
  function range[66183](?).normalizeAlignment[81467](arg _mt[81472]:_MT[227], ref arg this[81469]:range[66183](?) :
  range[66183](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    unknown tmp[396729] "maybe param" "temp"
    (396740 'move' tmp[396729](343789 call stridable _mt[232] this[81469]))
    unknown call_tmp[576394] "expr temp" "maybe param" "maybe type" "temp"
    (576397 'move' call_tmp[576394](396742 call _cond_invalid tmp[396729]))
    if call_tmp[576394]
    {
      (396745 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508203] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508204] "maybe param" "temp"
    unknown call_tmp[576399] "expr temp" "maybe param" "maybe type" "temp"
    (576402 'move' call_tmp[576399](396730 call isTrue tmp[396729]))
    (508209 'move' tmp[508204](508207 call _cond_test call_tmp[576399]))
    if tmp[508204]
    {
      unknown tmp[508211] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[576406] "expr temp" "maybe param" "maybe type" "temp"
      (576409 'move' call_tmp[576406](343793 call aligned _mt[232] this[81469]))
      unknown call_tmp[576411] "expr temp" "maybe param" "maybe type" "temp"
      (576414 'move' call_tmp[576411](81476 call ! call_tmp[576406]))
      (508213 'move' tmp[508211](396733 call isTrue call_tmp[576411]))
      (508218 'move' tmp[508203](508215 '_paramFoldLogical' tmp[508204] tmp[508211]))
    }
    {
      (508223 'move' tmp[508203](508220 '_paramFoldLogical' tmp[508204] 0))
    }
    unknown call_tmp[576416] "expr temp" "maybe param" "maybe type" "temp"
    (576419 'move' call_tmp[576416](81530 call _cond_test tmp[508203]))
    if call_tmp[576416]
    {
      unknown tmp[508315] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508316] "maybe param" "temp"
      unknown call_tmp[576421] "expr temp" "maybe param" "maybe type" "temp"
      (576424 'move' call_tmp[576421](81484 call isBoundedRange this[81469]))
      (508321 'move' tmp[508316](508319 call _cond_test call_tmp[576421]))
      if tmp[508316]
      {
        unknown tmp[508230] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[508231] "maybe param" "temp"
        unknown call_tmp[576428] "expr temp" "maybe param" "maybe type" "temp"
        (576431 'move' call_tmp[576428](343803 call stride _mt[232] this[81469]))
        unknown call_tmp[576433] "expr temp" "maybe param" "maybe type" "temp"
        (576436 'move' call_tmp[576433](81487 call > call_tmp[576428] 0))
        (508236 'move' tmp[508231](508234 call _cond_test call_tmp[576433]))
        if tmp[508231]
        {
          unknown tmp[508238] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (508240 'move' tmp[508238](343808 call _low _mt[232] this[81469]))
          (508245 'move' tmp[508230](508242 '_paramFoldLogical' tmp[508231] tmp[508238]))
        }
        {
          unknown tmp[508247] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (508249 'move' tmp[508247](343813 call _high _mt[232] this[81469]))
          (508254 'move' tmp[508230](508251 '_paramFoldLogical' tmp[508231] tmp[508247]))
        }
        (508326 'move' tmp[508315](508323 '_paramFoldLogical' tmp[508316] tmp[508230]))
      }
      {
        unknown tmp[508288] "expr temp" "if-expr result" "maybe type" "temp"
        unknown tmp[508289] "maybe param" "temp"
        unknown call_tmp[576444] "expr temp" "maybe param" "maybe type" "temp"
        (576447 'move' call_tmp[576444](81495 call boundedType _mt[232] this[81469]))
        unknown call_tmp[576449] "expr temp" "maybe param" "maybe type" "temp"
        (576452 'move' call_tmp[576449](81502 call == call_tmp[576444] boundedLow[66081]))
        (508294 'move' tmp[508289](508292 call _cond_test call_tmp[576449]))
        if tmp[508289]
        {
          unknown tmp[508296] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (508298 'move' tmp[508296](343820 call _low _mt[232] this[81469]))
          (508303 'move' tmp[508288](508300 '_paramFoldLogical' tmp[508289] tmp[508296]))
        }
        {
          unknown tmp[508261] "expr temp" "if-expr result" "maybe type" "temp"
          unknown tmp[508262] "maybe param" "temp"
          unknown call_tmp[576458] "expr temp" "maybe param" "maybe type" "temp"
          (576461 'move' call_tmp[576458](81506 call boundedType _mt[232] this[81469]))
          unknown call_tmp[576463] "expr temp" "maybe param" "maybe type" "temp"
          (576466 'move' call_tmp[576463](81513 call == call_tmp[576458] boundedHigh[66083]))
          (508267 'move' tmp[508262](508265 call _cond_test call_tmp[576463]))
          if tmp[508262]
          {
            unknown tmp[508269] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            (508271 'move' tmp[508269](343827 call _high _mt[232] this[81469]))
            (508276 'move' tmp[508261](508273 '_paramFoldLogical' tmp[508262] tmp[508269]))
          }
          {
            (508281 'move' tmp[508261](508278 '_paramFoldLogical' tmp[508262] 0))
          }
          (508308 'move' tmp[508288](508305 '_paramFoldLogical' tmp[508289] tmp[508261]))
        }
        (508331 'move' tmp[508315](508328 '_paramFoldLogical' tmp[508316] tmp[508288]))
      }
      unknown call_tmp[576472] "expr temp" "maybe param" "maybe type" "temp"
      (576475 'move' call_tmp[576472](343798 call _alignment _mt[232] this[81469]))
      (81526 call = call_tmp[576472] tmp[508315])
    }
    (462829 return _void[47])
  }
  function range[66183](?).chpl__unTranslate[81544](arg _mt[81549]:_MT[227], arg this[81546]:range[66183](?) :
  range[66183](?), arg i[81541] :
  (343831 call intIdxType _mt[232] this[81546])) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[462833] "RVV" "temp"
    unknown call_tmp[576479] "expr temp" "maybe param" "maybe type" "temp"
    (576482 'move' call_tmp[576479](81553 call - this[81546] i[81541]))
    (462838 'move' ret[462833](462837 'deref' call_tmp[576479]))
    (462835 return ret[462833])
  }
  function range[66183](?).chpl__unTranslate[81565](arg _mt[81570]:_MT[227], arg this[81567]:range[66183](?) :
  range[66183](?), arg i[81563]:_any[170](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[462842] "RVV" "temp"
    unknown call_tmp[576484] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (576487 'move' call_tmp[576484](81574 'typeof' i[81563]))
    unknown call_tmp[576489] "expr temp" "maybe param" "maybe type" "temp"
    (576492 'move' call_tmp[576489](81576 call isIntType call_tmp[576484]))
    unknown call_tmp[576494] "expr temp" "maybe param" "maybe type" "temp"
    (576497 'move' call_tmp[576494](81592 call _cond_test call_tmp[576489]))
    if call_tmp[576494]
    {
      unknown call_tmp[576499] "expr temp" "maybe param" "maybe type" "temp"
      (576502 'move' call_tmp[576499](81579 call - this[81567] i[81563]))
      (462847 'move' ret[462842](462846 'deref' call_tmp[576499]))
      gotoReturn _end_chpl__unTranslate[462840] _end_chpl__unTranslate[462840]
    }
    {
      unknown call_tmp[576504] "expr temp" "maybe param" "maybe type" "temp"
      (576507 'move' call_tmp[576504](81587 call abs i[81563]))
      unknown call_tmp[576509] "expr temp" "maybe param" "maybe type" "temp"
      (576512 'move' call_tmp[576509](81588 call + this[81567] call_tmp[576504]))
      (462852 'move' ret[462842](462851 'deref' call_tmp[576509]))
      gotoReturn _end_chpl__unTranslate[462840] _end_chpl__unTranslate[462840]
    }
    label _end_chpl__unTranslate[462840]
    (462844 return ret[462842])
  }
  function chpl__hasAlignment[81610](arg r[81607]:range[66183](?)) : _unknown[43]
  {
    unknown ret[462858] "RVV" "temp"
    unknown tmp[396750] "maybe param" "temp"
    (396761 'move' tmp[396750](81617 call(81613 call (partial) hasLowBound _mt[232] r[81607])))
    unknown call_tmp[576516] "expr temp" "maybe param" "maybe type" "temp"
    (576519 'move' call_tmp[576516](396763 call _cond_invalid tmp[396750]))
    if call_tmp[576516]
    {
      (396766 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508338] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508339] "maybe param" "temp"
    unknown call_tmp[576521] "expr temp" "maybe param" "maybe type" "temp"
    (576524 'move' call_tmp[576521](396751 call isTrue tmp[396750]))
    (508344 'move' tmp[508339](508342 call _cond_test call_tmp[576521]))
    if tmp[508339]
    {
      unknown tmp[508346] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[576528] "expr temp" "maybe param" "maybe type" "temp"
      (576531 'move' call_tmp[576528](81619 call stride _mt[232] r[81607]))
      unknown call_tmp[576533] "expr temp" "maybe param" "maybe type" "temp"
      (576536 'move' call_tmp[576533](81623 call >= call_tmp[576528] 2))
      (508348 'move' tmp[508346](396754 call isTrue call_tmp[576533]))
      (508353 'move' tmp[508338](508350 '_paramFoldLogical' tmp[508339] tmp[508346]))
    }
    {
      (508358 'move' tmp[508338](508355 '_paramFoldLogical' tmp[508339] 0))
    }
    unknown call_tmp[576538] "expr temp" "maybe param" "maybe type" "temp"
    (576541 'move' call_tmp[576538](81630 call _cond_test tmp[508338]))
    if call_tmp[576538]
    {
      (462863 'move' ret[462858](462862 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[462856] _end_chpl__hasAlignment[462856]
    }
    unknown tmp[396771] "maybe param" "temp"
    (396782 'move' tmp[396771](81641 call(81637 call (partial) hasHighBound _mt[232] r[81607])))
    unknown call_tmp[576545] "expr temp" "maybe param" "maybe type" "temp"
    (576548 'move' call_tmp[576545](396784 call _cond_invalid tmp[396771]))
    if call_tmp[576545]
    {
      (396787 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508365] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508366] "maybe param" "temp"
    unknown call_tmp[576550] "expr temp" "maybe param" "maybe type" "temp"
    (576553 'move' call_tmp[576550](396772 call isTrue tmp[396771]))
    (508371 'move' tmp[508366](508369 call _cond_test call_tmp[576550]))
    if tmp[508366]
    {
      unknown tmp[508373] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[576557] "expr temp" "maybe param" "maybe type" "temp"
      (576560 'move' call_tmp[576557](81643 call stride _mt[232] r[81607]))
      unknown call_tmp[576562] "expr temp" "maybe param" "maybe type" "temp"
      (576565 'move' call_tmp[576562](81647 call - 2))
      unknown call_tmp[576567] "expr temp" "maybe param" "maybe type" "temp"
      (576570 'move' call_tmp[576567](81649 call <= call_tmp[576557] call_tmp[576562]))
      (508375 'move' tmp[508373](396775 call isTrue call_tmp[576567]))
      (508380 'move' tmp[508365](508377 '_paramFoldLogical' tmp[508366] tmp[508373]))
    }
    {
      (508385 'move' tmp[508365](508382 '_paramFoldLogical' tmp[508366] 0))
    }
    unknown call_tmp[576572] "expr temp" "maybe param" "maybe type" "temp"
    (576575 'move' call_tmp[576572](81656 call _cond_test tmp[508365]))
    if call_tmp[576572]
    {
      (462868 'move' ret[462858](462867 'deref' 1))
      gotoReturn _end_chpl__hasAlignment[462856] _end_chpl__hasAlignment[462856]
    }
    (462873 'move' ret[462858](462872 'deref' 0))
    label _end_chpl__hasAlignment[462856]
    (462860 return ret[462858])
  }
  function chpl__mod[81672](arg dividend[81669]:integral[188](?), arg modulus[81675]:integral[188](?)) : _unknown[43]
  {
    unknown ret[462877] "RVV" "temp"
    unknown call_tmp[576577] "expr temp" "maybe param" "maybe type" "temp"
    (576580 'move' call_tmp[576577](81681 call abs modulus[81675]))
    unknown call_tmp[576584] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (576587 'move' call_tmp[576584](81686 'typeof' dividend[81669]))
    unknown call_tmp[576589] "maybe param" "maybe type" "temp"
    (576592 'move' call_tmp[576589](81688 call(81682 call (partial) safeCast _mt[232] call_tmp[576577]) call_tmp[576584]))
    const m[81689] "const" "insert auto destroy"
    (490076 'init var' m[81689] call_tmp[576589])
    unknown call_tmp[576594] "maybe param" "maybe type" "temp"
    (576597 'move' call_tmp[576594](81695 call % dividend[81669] m[81689]))
    unknown tmp[81697] "insert auto destroy"
    (490078 'init var' tmp[81697] call_tmp[576594])
    unknown call_tmp[576599] "expr temp" "maybe param" "maybe type" "temp"
    (576602 'move' call_tmp[576599](81703 call isInt dividend[81669]))
    unknown call_tmp[576604] "expr temp" "maybe param" "maybe type" "temp"
    (576607 'move' call_tmp[576604](81718 call _cond_test call_tmp[576599]))
    if call_tmp[576604]
    {
      unknown call_tmp[576609] "expr temp" "maybe param" "maybe type" "temp"
      (576612 'move' call_tmp[576609](81706 call < tmp[81697] 0))
      unknown call_tmp[576614] "expr temp" "maybe param" "maybe type" "temp"
      (576617 'move' call_tmp[576614](81713 call _cond_test call_tmp[576609]))
      if call_tmp[576614]
      {
        (81710 call += tmp[81697] m[81689])
      }
    }
    (462882 'move' ret[462877](462881 'deref' tmp[81697]))
    (462879 return ret[462877])
  }
  function chpl__diffMod[81734](arg minuend[81731]:integral[188](?), arg subtrahend[81737]:integral[188](?), arg modulus[81741]:integral[188](?)) : _unknown[43]
  {
    unknown ret[462886] "RVV" "temp"
    unknown call_tmp[576619] "expr temp" "maybe param" "maybe type" "temp"
    (576622 'move' call_tmp[576619](81755 call abs modulus[81741]))
    unknown call_tmp[576626] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (576629 'move' call_tmp[576626](81760 'typeof' minuend[81731]))
    unknown call_tmp[576631] "maybe param" "maybe type" "temp"
    (576634 'move' call_tmp[576631](81762 call(81756 call (partial) safeCast _mt[232] call_tmp[576619]) call_tmp[576626]))
    const m[81763] "const" "insert auto destroy"
    (490080 'init var' m[81763] call_tmp[576631])
    unknown call_tmp[576636] "maybe param" "maybe type" "temp"
    (576639 'move' call_tmp[576636](81771 call chpl__mod minuend[81731] m[81763]))
    unknown minMod[81772] "insert auto destroy"
    (490082 'init var' minMod[81772] call_tmp[576636])
    unknown call_tmp[576641] "maybe param" "maybe type" "temp"
    (576644 'move' call_tmp[576641](81779 call chpl__mod subtrahend[81737] m[81763]))
    unknown subMod[81780] "insert auto destroy"
    (490084 'init var' subMod[81780] call_tmp[576641])
    unknown tmp[508392] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508393] "maybe param" "temp"
    unknown call_tmp[576646] "expr temp" "maybe param" "maybe type" "temp"
    (576649 'move' call_tmp[576646](81785 call < minMod[81772] subMod[81780]))
    (508398 'move' tmp[508393](508396 call _cond_test call_tmp[576646]))
    if tmp[508393]
    {
      unknown tmp[508400] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[576651] "expr temp" "maybe param" "maybe type" "temp"
      (576654 'move' call_tmp[576651](81790 call - subMod[81780] minMod[81772]))
      (508402 'move' tmp[508400](81792 call - m[81763] call_tmp[576651]))
      (508407 'move' tmp[508392](508404 '_paramFoldLogical' tmp[508393] tmp[508400]))
    }
    {
      unknown tmp[508409] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (508411 'move' tmp[508409](81796 call - minMod[81772] subMod[81780]))
      (508416 'move' tmp[508392](508413 '_paramFoldLogical' tmp[508393] tmp[508409]))
    }
    unknown call_tmp[576656] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (576659 'move' call_tmp[576656](462890 'typeof' minuend[81731]))
    (462893 'move' ret[462886](462892 'coerce' tmp[508392] call_tmp[576656]))
    (462888 return ret[462886])
  }
  where {
    unknown call_tmp[576661] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (576664 'move' call_tmp[576661](81747 'typeof' minuend[81731]))
    unknown call_tmp[576666] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (576669 'move' call_tmp[576666](81749 'typeof' subtrahend[81737]))
    (81750 call == call_tmp[576661] call_tmp[576666])
  }
  { scopeless type
    (81745 'typeof' minuend[81731])
  }
  function chpl__diffMod[81813](arg minuend[81810]:integral[188](?), arg subtrahend[81816]:integral[188](?), arg modulus[81820]:integral[188](?)) : _unknown[43] "no return value for void"
  {
    (81841 call compilerError "chpl__diffMod -- Operand types must match.")
    (462895 return _void[47])
  }
  function chpl__add[81853](arg a[81850]:_any[170](?), arg b[81856] :
  (434951 'typeof' a[81850]), arg resultType[81859]:_any[170](?)) : _unknown[43]
  {
    unknown ret[462899] "RVV" "temp"
    unknown call_tmp[576671] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (576674 'move' call_tmp[576671](434953 'typeof' a[81850]))
    unknown call_tmp[576676] "expr temp" "maybe param" "maybe type" "temp"
    (576679 'move' call_tmp[576676](81864 call isIntegralType call_tmp[576671]))
    unknown call_tmp[576681] "expr temp" "maybe param" "maybe type" "temp"
    (576684 'move' call_tmp[576681](81865 call ! call_tmp[576676]))
    unknown call_tmp[576686] "expr temp" "maybe param" "maybe type" "temp"
    (576689 'move' call_tmp[576686](81887 call _cond_test call_tmp[576681]))
    if call_tmp[576686]
    {
      (81885 call compilerError "Values must be of integral type.")
    }
    unknown tmp[396792] "maybe param" "temp"
    unknown tmp[396813] "maybe param" "temp"
    (396824 'move' tmp[396813](81895 call > a[81850] 0))
    unknown call_tmp[576691] "expr temp" "maybe param" "maybe type" "temp"
    (576694 'move' call_tmp[576691](396826 call _cond_invalid tmp[396813]))
    if call_tmp[576691]
    {
      (396829 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508423] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508424] "maybe param" "temp"
    unknown call_tmp[576696] "expr temp" "maybe param" "maybe type" "temp"
    (576699 'move' call_tmp[576696](396814 call isTrue tmp[396813]))
    (508429 'move' tmp[508424](508427 call _cond_test call_tmp[576696]))
    if tmp[508424]
    {
      unknown tmp[508431] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[576701] "expr temp" "maybe param" "maybe type" "temp"
      (576704 'move' call_tmp[576701](81899 call > b[81856] 0))
      (508433 'move' tmp[508431](396817 call isTrue call_tmp[576701]))
      (508438 'move' tmp[508423](508435 '_paramFoldLogical' tmp[508424] tmp[508431]))
    }
    {
      (508443 'move' tmp[508423](508440 '_paramFoldLogical' tmp[508424] 0))
    }
    (396803 'move' tmp[396792] tmp[508423])
    unknown call_tmp[576706] "expr temp" "maybe param" "maybe type" "temp"
    (576709 'move' call_tmp[576706](396805 call _cond_invalid tmp[396792]))
    if call_tmp[576706]
    {
      (396808 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508450] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508451] "maybe param" "temp"
    unknown call_tmp[576711] "expr temp" "maybe param" "maybe type" "temp"
    (576714 'move' call_tmp[576711](396793 call isTrue tmp[396792]))
    (508456 'move' tmp[508451](508454 call _cond_test call_tmp[576711]))
    if tmp[508451]
    {
      unknown tmp[508458] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[576716] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (576719 'move' call_tmp[576716](434955 'typeof' a[81850]))
      unknown call_tmp[576721] "expr temp" "maybe param" "maybe type" "temp"
      (576724 'move' call_tmp[576721](81907 call max call_tmp[576716]))
      unknown call_tmp[576726] "expr temp" "maybe param" "maybe type" "temp"
      (576729 'move' call_tmp[576726](81909 call - call_tmp[576721] a[81850]))
      unknown call_tmp[576731] "expr temp" "maybe param" "maybe type" "temp"
      (576734 'move' call_tmp[576731](81911 call > b[81856] call_tmp[576726]))
      (508460 'move' tmp[508458](396796 call isTrue call_tmp[576731]))
      (508465 'move' tmp[508450](508462 '_paramFoldLogical' tmp[508451] tmp[508458]))
    }
    {
      (508470 'move' tmp[508450](508467 '_paramFoldLogical' tmp[508451] 0))
    }
    unknown call_tmp[576736] "expr temp" "maybe param" "maybe type" "temp"
    (576739 'move' call_tmp[576736](81921 call _cond_test tmp[508450]))
    if call_tmp[576736]
    {
      unknown call_tmp[576741] "expr temp" "maybe param" "maybe type" "temp"
      (576744 'move' call_tmp[576741](81918 call max resultType[81859]))
      (462904 'move' ret[462899](462903 'deref' call_tmp[576741]))
      gotoReturn _end_chpl__add[462897] _end_chpl__add[462897]
    }
    unknown tmp[396834] "maybe param" "temp"
    unknown tmp[396855] "maybe param" "temp"
    (396866 'move' tmp[396855](81928 call < a[81850] 0))
    unknown call_tmp[576746] "expr temp" "maybe param" "maybe type" "temp"
    (576749 'move' call_tmp[576746](396868 call _cond_invalid tmp[396855]))
    if call_tmp[576746]
    {
      (396871 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508477] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508478] "maybe param" "temp"
    unknown call_tmp[576751] "expr temp" "maybe param" "maybe type" "temp"
    (576754 'move' call_tmp[576751](396856 call isTrue tmp[396855]))
    (508483 'move' tmp[508478](508481 call _cond_test call_tmp[576751]))
    if tmp[508478]
    {
      unknown tmp[508485] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[576756] "expr temp" "maybe param" "maybe type" "temp"
      (576759 'move' call_tmp[576756](81932 call < b[81856] 0))
      (508487 'move' tmp[508485](396859 call isTrue call_tmp[576756]))
      (508492 'move' tmp[508477](508489 '_paramFoldLogical' tmp[508478] tmp[508485]))
    }
    {
      (508497 'move' tmp[508477](508494 '_paramFoldLogical' tmp[508478] 0))
    }
    (396845 'move' tmp[396834] tmp[508477])
    unknown call_tmp[576761] "expr temp" "maybe param" "maybe type" "temp"
    (576764 'move' call_tmp[576761](396847 call _cond_invalid tmp[396834]))
    if call_tmp[576761]
    {
      (396850 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[508504] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[508505] "maybe param" "temp"
    unknown call_tmp[576766] "expr temp" "maybe param" "maybe type" "temp"
    (576769 'move' call_tmp[576766](396835 call isTrue tmp[396834]))
    (508510 'move' tmp[508505](508508 call _cond_test call_tmp[576766]))
    if tmp[508505]
    {
      unknown tmp[508512] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[576771] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (576774 'move' call_tmp[576771](434957 'typeof' a[81850]))
      unknown call_tmp[576776] "expr temp" "maybe param" "maybe type" "temp"
      (576779 'move' call_tmp[576776](81940 call min call_tmp[576771]))
      unknown call_tmp[576781] "expr temp" "maybe param" "maybe type" "temp"
      (576784 'move' call_tmp[576781](81942 call - call_tmp[576776] a[81850]))
      unknown call_tmp[576786] "expr temp" "maybe param" "maybe type" "temp"
      (576789 'move' call_tmp[576786](81944 call < b[81856] call_tmp[576781]))
      (508514 'move' tmp[508512](396838 call isTrue call_tmp[576786]))
      (508519 'move' tmp[508504](508516 '_paramFoldLogical' tmp[508505] tmp[508512]))
    }
    {
      (508524 'move' tmp[508504](508521 '_paramFoldLogical' tmp[508505] 0))
    }
    unknown call_tmp[576791] "expr temp" "maybe param" "maybe type" "temp"
    (576794 'move' call_tmp[576791](81954 call _cond_test tmp[508504]))
    if call_tmp[576791]
    {
      unknown call_tmp[576796] "expr temp" "maybe param" "maybe type" "temp"
      (576799 'move' call_tmp[576796](81951 call min resultType[81859]))
      (462909 'move' ret[462899](462908 'deref' call_tmp[576796]))
      gotoReturn _end_chpl__add[462897] _end_chpl__add[462897]
    }
    unknown call_tmp[576801] "expr temp" "maybe param" "maybe type" "temp"
    (576804 'move' call_tmp[576801](81962 call isUintType resultType[81859]))
    unknown call_tmp[576806] "expr temp" "maybe param" "maybe type" "temp"
    (576809 'move' call_tmp[576806](82039 call _cond_test call_tmp[576801]))
    if call_tmp[576806]
    {
      unknown tmp[396876] "maybe param" "temp"
      unknown tmp[396897] "maybe param" "temp"
      unknown tmp[396918] "maybe param" "temp"
      (396929 'move' tmp[396918](81965 call < a[81850] 0))
      unknown call_tmp[576811] "expr temp" "maybe param" "maybe type" "temp"
      (576814 'move' call_tmp[576811](396931 call _cond_invalid tmp[396918]))
      if call_tmp[576811]
      {
        (396934 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[508531] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508532] "maybe param" "temp"
      unknown call_tmp[576816] "expr temp" "maybe param" "maybe type" "temp"
      (576819 'move' call_tmp[576816](396919 call isTrue tmp[396918]))
      (508537 'move' tmp[508532](508535 call _cond_test call_tmp[576816]))
      if tmp[508532]
      {
        unknown tmp[508539] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[576821] "expr temp" "maybe param" "maybe type" "temp"
        (576824 'move' call_tmp[576821](81969 call > b[81856] 0))
        (508541 'move' tmp[508539](396922 call isTrue call_tmp[576821]))
        (508546 'move' tmp[508531](508543 '_paramFoldLogical' tmp[508532] tmp[508539]))
      }
      {
        (508551 'move' tmp[508531](508548 '_paramFoldLogical' tmp[508532] 0))
      }
      (396908 'move' tmp[396897] tmp[508531])
      unknown call_tmp[576826] "expr temp" "maybe param" "maybe type" "temp"
      (576829 'move' call_tmp[576826](396910 call _cond_invalid tmp[396897]))
      if call_tmp[576826]
      {
        (396913 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[508585] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508586] "maybe param" "temp"
      unknown call_tmp[576831] "expr temp" "maybe param" "maybe type" "temp"
      (576834 'move' call_tmp[576831](396898 call isTrue tmp[396897]))
      (508591 'move' tmp[508586](508589 call _cond_test call_tmp[576831]))
      if tmp[508586]
      {
        unknown tmp[396939] "maybe param" "temp"
        unknown call_tmp[576836] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (576839 'move' call_tmp[576836](434959 'typeof' a[81850]))
        unknown call_tmp[576841] "expr temp" "maybe param" "maybe type" "temp"
        (576844 'move' call_tmp[576841](81977 call min call_tmp[576836]))
        (396950 'move' tmp[396939](81978 call == a[81850] call_tmp[576841]))
        unknown call_tmp[576846] "expr temp" "maybe param" "maybe type" "temp"
        (576849 'move' call_tmp[576846](396952 call _cond_invalid tmp[396939]))
        if call_tmp[576846]
        {
          (396955 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[508558] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[508559] "maybe param" "temp"
        unknown call_tmp[576851] "expr temp" "maybe param" "maybe type" "temp"
        (576854 'move' call_tmp[576851](396940 call isTrue tmp[396939]))
        (508564 'move' tmp[508559](508562 call _cond_test call_tmp[576851]))
        if tmp[508559]
        {
          (508569 'move' tmp[508558](508566 '_paramFoldLogical' tmp[508559] 1))
        }
        {
          unknown tmp[508571] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[576856] "expr temp" "maybe param" "maybe type" "temp"
          (576859 'move' call_tmp[576856](81983 call abs a[81850]))
          unknown call_tmp[576861] "expr temp" "maybe param" "maybe type" "temp"
          (576864 'move' call_tmp[576861](81987 call abs b[81856]))
          unknown call_tmp[576866] "expr temp" "maybe param" "maybe type" "temp"
          (576869 'move' call_tmp[576866](81988 call > call_tmp[576856] call_tmp[576861]))
          (508573 'move' tmp[508571](396944 call isTrue call_tmp[576866]))
          (508578 'move' tmp[508558](508575 '_paramFoldLogical' tmp[508559] tmp[508571]))
        }
        unknown tmp[508593] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (508595 'move' tmp[508593](396901 call isTrue tmp[508558]))
        (508600 'move' tmp[508585](508597 '_paramFoldLogical' tmp[508586] tmp[508593]))
      }
      {
        (508605 'move' tmp[508585](508602 '_paramFoldLogical' tmp[508586] 0))
      }
      (396887 'move' tmp[396876] tmp[508585])
      unknown call_tmp[576871] "expr temp" "maybe param" "maybe type" "temp"
      (576874 'move' call_tmp[576871](396889 call _cond_invalid tmp[396876]))
      if call_tmp[576871]
      {
        (396892 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[508693] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508694] "maybe param" "temp"
      unknown call_tmp[576876] "expr temp" "maybe param" "maybe type" "temp"
      (576879 'move' call_tmp[576876](396877 call isTrue tmp[396876]))
      (508699 'move' tmp[508694](508697 call _cond_test call_tmp[576876]))
      if tmp[508694]
      {
        (508704 'move' tmp[508693](508701 '_paramFoldLogical' tmp[508694] 1))
      }
      {
        unknown tmp[396960] "maybe param" "temp"
        unknown tmp[396981] "maybe param" "temp"
        (396992 'move' tmp[396981](81996 call > a[81850] 0))
        unknown call_tmp[576881] "expr temp" "maybe param" "maybe type" "temp"
        (576884 'move' call_tmp[576881](396994 call _cond_invalid tmp[396981]))
        if call_tmp[576881]
        {
          (396997 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[508612] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[508613] "maybe param" "temp"
        unknown call_tmp[576886] "expr temp" "maybe param" "maybe type" "temp"
        (576889 'move' call_tmp[576886](396982 call isTrue tmp[396981]))
        (508618 'move' tmp[508613](508616 call _cond_test call_tmp[576886]))
        if tmp[508613]
        {
          unknown tmp[508620] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[576891] "expr temp" "maybe param" "maybe type" "temp"
          (576894 'move' call_tmp[576891](82000 call < b[81856] 0))
          (508622 'move' tmp[508620](396985 call isTrue call_tmp[576891]))
          (508627 'move' tmp[508612](508624 '_paramFoldLogical' tmp[508613] tmp[508620]))
        }
        {
          (508632 'move' tmp[508612](508629 '_paramFoldLogical' tmp[508613] 0))
        }
        (396971 'move' tmp[396960] tmp[508612])
        unknown call_tmp[576896] "expr temp" "maybe param" "maybe type" "temp"
        (576899 'move' call_tmp[576896](396973 call _cond_invalid tmp[396960]))
        if call_tmp[576896]
        {
          (396976 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[508666] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[508667] "maybe param" "temp"
        unknown call_tmp[576901] "expr temp" "maybe param" "maybe type" "temp"
        (576904 'move' call_tmp[576901](396961 call isTrue tmp[396960]))
        (508672 'move' tmp[508667](508670 call _cond_test call_tmp[576901]))
        if tmp[508667]
        {
          unknown tmp[397002] "maybe param" "temp"
          unknown call_tmp[576906] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (576909 'move' call_tmp[576906](434961 'typeof' a[81850]))
          unknown call_tmp[576911] "expr temp" "maybe param" "maybe type" "temp"
          (576914 'move' call_tmp[576911](82008 call min call_tmp[576906]))
          (397013 'move' tmp[397002](82009 call == b[81856] call_tmp[576911]))
          unknown call_tmp[576916] "expr temp" "maybe param" "maybe type" "temp"
          (576919 'move' call_tmp[576916](397015 call _cond_invalid tmp[397002]))
          if call_tmp[576916]
          {
            (397018 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[508639] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[508640] "maybe param" "temp"
          unknown call_tmp[576921] "expr temp" "maybe param" "maybe type" "temp"
          (576924 'move' call_tmp[576921](397003 call isTrue tmp[397002]))
          (508645 'move' tmp[508640](508643 call _cond_test call_tmp[576921]))
          if tmp[508640]
          {
            (508650 'move' tmp[508639](508647 '_paramFoldLogical' tmp[508640] 1))
          }
          {
            unknown tmp[508652] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[576926] "expr temp" "maybe param" "maybe type" "temp"
            (576929 'move' call_tmp[576926](82014 call abs b[81856]))
            unknown call_tmp[576931] "expr temp" "maybe param" "maybe type" "temp"
            (576934 'move' call_tmp[576931](82018 call abs a[81850]))
            unknown call_tmp[576936] "expr temp" "maybe param" "maybe type" "temp"
            (576939 'move' call_tmp[576936](82019 call > call_tmp[576926] call_tmp[576931]))
            (508654 'move' tmp[508652](397007 call isTrue call_tmp[576936]))
            (508659 'move' tmp[508639](508656 '_paramFoldLogical' tmp[508640] tmp[508652]))
          }
          unknown tmp[508674] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (508676 'move' tmp[508674](396964 call isTrue tmp[508639]))
          (508681 'move' tmp[508666](508678 '_paramFoldLogical' tmp[508667] tmp[508674]))
        }
        {
          (508686 'move' tmp[508666](508683 '_paramFoldLogical' tmp[508667] 0))
        }
        unknown tmp[508706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (508708 'move' tmp[508706](396881 call isTrue tmp[508666]))
        (508713 'move' tmp[508693](508710 '_paramFoldLogical' tmp[508694] tmp[508706]))
      }
      unknown call_tmp[576941] "expr temp" "maybe param" "maybe type" "temp"
      (576944 'move' call_tmp[576941](82033 call _cond_test tmp[508693]))
      if call_tmp[576941]
      {
        unknown call_tmp[576946] "expr temp" "maybe param" "maybe type" "temp"
        (576949 'move' call_tmp[576946](82029 call _cast resultType[81859] 0))
        (462914 'move' ret[462899](462913 'deref' call_tmp[576946]))
        gotoReturn _end_chpl__add[462897] _end_chpl__add[462897]
      }
    }
    unknown call_tmp[576951] "expr temp" "maybe param" "maybe type" "temp"
    (576954 'move' call_tmp[576951](82045 call + a[81850] b[81856]))
    unknown call_tmp[576956] "expr temp" "maybe param" "maybe type" "temp"
    (576959 'move' call_tmp[576956](82048 call _cast resultType[81859] call_tmp[576951]))
    (462919 'move' ret[462899](462918 'deref' call_tmp[576956]))
    label _end_chpl__add[462897]
    (462901 return ret[462899])
  }
  function chpl__addRangeStrides[82058](arg start[82056]:_any[170](?), arg stride[82060]:_any[170](?), arg count[82062]:_any[170](?)) : _unknown[43]
  {
    unknown ret[462950] "RVV" "temp"
    function convert[82070](arg a[82068]:_any[170](?), arg b[82072]:_any[170](?)) param : _unknown[43]
    {
      unknown ret[462923] "RVV" "param" "temp"
      unknown tmp[397023] "maybe param" "temp"
      unknown tmp[397044] "maybe param" "temp"
      unknown call_tmp[576961] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (576964 'move' call_tmp[576961](82075 'typeof' a[82068]))
      unknown call_tmp[576966] "expr temp" "maybe param" "maybe type" "temp"
      (576969 'move' call_tmp[576966](82079 call int(64)[13] 64))
      (397055 'move' tmp[397044](82080 call == call_tmp[576961] call_tmp[576966]))
      unknown call_tmp[576971] "expr temp" "maybe param" "maybe type" "temp"
      (576974 'move' call_tmp[576971](397057 call _cond_invalid tmp[397044]))
      if call_tmp[576971]
      {
        (397060 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[508720] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508721] "maybe param" "temp"
      unknown call_tmp[576976] "expr temp" "maybe param" "maybe type" "temp"
      (576979 'move' call_tmp[576976](397045 call isTrue tmp[397044]))
      (508726 'move' tmp[508721](508724 call _cond_test call_tmp[576976]))
      if tmp[508721]
      {
        unknown tmp[508728] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[576981] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (576984 'move' call_tmp[576981](82083 'typeof' b[82072]))
        unknown call_tmp[576986] "expr temp" "maybe param" "maybe type" "temp"
        (576989 'move' call_tmp[576986](82087 call uint(64)[107] 64))
        unknown call_tmp[576991] "expr temp" "maybe param" "maybe type" "temp"
        (576994 'move' call_tmp[576991](82088 call == call_tmp[576981] call_tmp[576986]))
        (508730 'move' tmp[508728](397048 call isTrue call_tmp[576991]))
        (508735 'move' tmp[508720](508732 '_paramFoldLogical' tmp[508721] tmp[508728]))
      }
      {
        (508740 'move' tmp[508720](508737 '_paramFoldLogical' tmp[508721] 0))
      }
      (397034 'move' tmp[397023] tmp[508720])
      unknown call_tmp[576996] "expr temp" "maybe param" "maybe type" "temp"
      (576999 'move' call_tmp[576996](397036 call _cond_invalid tmp[397023]))
      if call_tmp[576996]
      {
        (397039 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[508774] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508775] "maybe param" "temp"
      unknown call_tmp[577001] "expr temp" "maybe param" "maybe type" "temp"
      (577004 'move' call_tmp[577001](397024 call isTrue tmp[397023]))
      (508780 'move' tmp[508775](508778 call _cond_test call_tmp[577001]))
      if tmp[508775]
      {
        (508785 'move' tmp[508774](508782 '_paramFoldLogical' tmp[508775] 1))
      }
      {
        unknown tmp[397065] "maybe param" "temp"
        unknown call_tmp[577006] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (577009 'move' call_tmp[577006](82093 'typeof' a[82068]))
        unknown call_tmp[577011] "expr temp" "maybe param" "maybe type" "temp"
        (577014 'move' call_tmp[577011](82097 call uint(64)[107] 64))
        (397076 'move' tmp[397065](82098 call == call_tmp[577006] call_tmp[577011]))
        unknown call_tmp[577016] "expr temp" "maybe param" "maybe type" "temp"
        (577019 'move' call_tmp[577016](397078 call _cond_invalid tmp[397065]))
        if call_tmp[577016]
        {
          (397081 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[508747] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[508748] "maybe param" "temp"
        unknown call_tmp[577021] "expr temp" "maybe param" "maybe type" "temp"
        (577024 'move' call_tmp[577021](397066 call isTrue tmp[397065]))
        (508753 'move' tmp[508748](508751 call _cond_test call_tmp[577021]))
        if tmp[508748]
        {
          unknown tmp[508755] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[577026] "expr temp" "maybe param" "maybe type" "temp" "type variable"
          (577029 'move' call_tmp[577026](82101 'typeof' b[82072]))
          unknown call_tmp[577031] "expr temp" "maybe param" "maybe type" "temp"
          (577034 'move' call_tmp[577031](82105 call int(64)[13] 64))
          unknown call_tmp[577036] "expr temp" "maybe param" "maybe type" "temp"
          (577039 'move' call_tmp[577036](82106 call == call_tmp[577026] call_tmp[577031]))
          (508757 'move' tmp[508755](397069 call isTrue call_tmp[577036]))
          (508762 'move' tmp[508747](508759 '_paramFoldLogical' tmp[508748] tmp[508755]))
        }
        {
          (508767 'move' tmp[508747](508764 '_paramFoldLogical' tmp[508748] 0))
        }
        unknown tmp[508787] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (508789 'move' tmp[508787](397028 call isTrue tmp[508747]))
        (508794 'move' tmp[508774](508791 '_paramFoldLogical' tmp[508775] tmp[508787]))
      }
      (462928 'move' ret[462923](462927 'deref' tmp[508774]))
      (462925 return ret[462923])
    }
    function mul[82122](arg a[82120]:_any[170](?), arg b[82124]:_any[170](?)) : _unknown[43]
    {
      unknown ret[462932] "RVV" "temp"
      unknown tmp[508801] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508802] "maybe param" "temp"
      unknown call_tmp[577041] "expr temp" "maybe param" "maybe type" "temp"
      (577044 'move' call_tmp[577041](82130 call convert a[82120] b[82124]))
      (508807 'move' tmp[508802](508805 call _cond_test call_tmp[577041]))
      if tmp[508802]
      {
        unknown tmp[508809] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[577046] "expr temp" "maybe param" "maybe type" "temp"
        (577049 'move' call_tmp[577046](82135 call int(64)[13] 64))
        unknown call_tmp[577051] "expr temp" "maybe param" "maybe type" "temp"
        (577054 'move' call_tmp[577051](82136 call _cast call_tmp[577046] a[82120]))
        unknown call_tmp[577056] "expr temp" "maybe param" "maybe type" "temp"
        (577059 'move' call_tmp[577056](82142 call int(64)[13] 64))
        unknown call_tmp[577061] "expr temp" "maybe param" "maybe type" "temp"
        (577064 'move' call_tmp[577061](82143 call _cast call_tmp[577056] b[82124]))
        (508811 'move' tmp[508809](82145 call * call_tmp[577051] call_tmp[577061]))
        (508816 'move' tmp[508801](508813 '_paramFoldLogical' tmp[508802] tmp[508809]))
      }
      {
        unknown tmp[508818] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (508820 'move' tmp[508818](82149 call * a[82120] b[82124]))
        (508825 'move' tmp[508801](508822 '_paramFoldLogical' tmp[508802] tmp[508818]))
      }
      (462937 'move' ret[462932](462936 'deref' tmp[508801]))
      (462934 return ret[462932])
    }
    function add[82163](arg a[82161]:_any[170](?), arg b[82165]:_any[170](?)) : _unknown[43]
    {
      unknown ret[462941] "RVV" "temp"
      unknown tmp[508832] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508833] "maybe param" "temp"
      unknown call_tmp[577066] "expr temp" "maybe param" "maybe type" "temp"
      (577069 'move' call_tmp[577066](82171 call convert a[82161] b[82165]))
      (508838 'move' tmp[508833](508836 call _cond_test call_tmp[577066]))
      if tmp[508833]
      {
        unknown tmp[508840] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[577071] "expr temp" "maybe param" "maybe type" "temp"
        (577074 'move' call_tmp[577071](82176 call int(64)[13] 64))
        unknown call_tmp[577076] "expr temp" "maybe param" "maybe type" "temp"
        (577079 'move' call_tmp[577076](82177 call _cast call_tmp[577071] a[82161]))
        unknown call_tmp[577081] "expr temp" "maybe param" "maybe type" "temp"
        (577084 'move' call_tmp[577081](82183 call int(64)[13] 64))
        unknown call_tmp[577086] "expr temp" "maybe param" "maybe type" "temp"
        (577089 'move' call_tmp[577086](82184 call _cast call_tmp[577081] b[82165]))
        (508842 'move' tmp[508840](82186 call + call_tmp[577076] call_tmp[577086]))
        (508847 'move' tmp[508832](508844 '_paramFoldLogical' tmp[508833] tmp[508840]))
      }
      {
        unknown tmp[508849] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (508851 'move' tmp[508849](82190 call + a[82161] b[82165]))
        (508856 'move' tmp[508832](508853 '_paramFoldLogical' tmp[508833] tmp[508849]))
      }
      (462946 'move' ret[462941](462945 'deref' tmp[508832]))
      (462943 return ret[462941])
    }
    unknown call_tmp[577091] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (577094 'move' call_tmp[577091](82210 'typeof' start[82056]))
    unknown call_tmp[577096] "expr temp" "maybe param" "maybe type" "temp"
    (577099 'move' call_tmp[577096](82207 call mul stride[82060] count[82062]))
    unknown call_tmp[577101] "expr temp" "maybe param" "maybe type" "temp"
    (577104 'move' call_tmp[577101](82208 call add start[82056] call_tmp[577096]))
    unknown call_tmp[577106] "expr temp" "maybe param" "maybe type" "temp"
    (577109 'move' call_tmp[577106](82211 call _cast call_tmp[577091] call_tmp[577101]))
    unknown call_tmp[577111] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (577114 'move' call_tmp[577111](462954 'typeof' start[82056]))
    (462957 'move' ret[462950](462956 'coerce' call_tmp[577106] call_tmp[577111]))
    (462952 return ret[462950])
  }
  { scopeless type
    (82065 'typeof' start[82056])
  }
  function chpl__extendedEuclidHelper[82222](arg u[82220]:_any[170](?), arg v[82224]:_any[170](?)) : _unknown[43]
  {
    unknown ret[462961] "RVV" "temp"
    unknown call_tmp[577116] "maybe param" "maybe type" "temp" "type variable"
    (577119 'move' call_tmp[577116](82227 'typeof' u[82220]))
    unknown zero[82229] "insert auto destroy"
    (490086 'init var' zero[82229] 0 call_tmp[577116])
    unknown call_tmp[577121] "maybe param" "maybe type" "temp" "type variable"
    (577124 'move' call_tmp[577121](82234 'typeof' u[82220]))
    unknown one[82236] "insert auto destroy"
    (490088 'init var' one[82236] 1 call_tmp[577121])
    unknown call_tmp[577126] "maybe param" "maybe type" "temp"
    (577129 'move' call_tmp[577126](82243 call _build_tuple one[82236] zero[82229] u[82220]))
    unknown U[82245] "insert auto destroy"
    (490090 'init var' U[82245] call_tmp[577126])
    unknown call_tmp[577131] "maybe param" "maybe type" "temp"
    (577134 'move' call_tmp[577131](82252 call _build_tuple zero[82229] one[82236] v[82224]))
    unknown V[82254] "insert auto destroy"
    (490092 'init var' V[82254] call_tmp[577131])
    {
      unknown tmp[82303] "temp"
      unknown call_tmp[577136] "expr temp" "maybe param" "maybe type" "temp"
      (577139 'move' call_tmp[577136](82328 call V[82254] 3))
      unknown call_tmp[577141] "expr temp" "maybe param" "maybe type" "temp"
      (577144 'move' call_tmp[577141](82326 call != call_tmp[577136] 0))
      (82331 'move' tmp[82303](82324 call _cond_test call_tmp[577141]))
      WhileDo
      {
        {
          unknown oldU[82265] "insert auto destroy"
          (490094 'init var' oldU[82265] U[82245])
          unknown call_tmp[577146] "expr temp" "maybe param" "maybe type" "temp"
          (577149 'move' call_tmp[577146](82272 call U[82245] 3))
          unknown call_tmp[577151] "expr temp" "maybe param" "maybe type" "temp"
          (577154 'move' call_tmp[577151](82276 call V[82254] 3))
          unknown call_tmp[577156] "maybe param" "maybe type" "temp"
          (577159 'move' call_tmp[577156](82277 call / call_tmp[577146] call_tmp[577151]))
          unknown q[82279] "insert auto destroy"
          (490096 'init var' q[82279] call_tmp[577156])
          (82284 call = U[82245] V[82254])
          unknown call_tmp[577161] "expr temp" "maybe param" "maybe type" "temp"
          (577164 'move' call_tmp[577161](82294 call _build_tuple q[82279] q[82279] q[82279]))
          unknown call_tmp[577166] "expr temp" "maybe param" "maybe type" "temp"
          (577169 'move' call_tmp[577166](82296 call * V[82254] call_tmp[577161]))
          unknown call_tmp[577171] "expr temp" "maybe param" "maybe type" "temp"
          (577174 'move' call_tmp[577171](82298 call - oldU[82265] call_tmp[577166]))
          (82300 call = V[82254] call_tmp[577171])
        }
        label _continueLabel[82306]
        unknown call_tmp[577176] "expr temp" "maybe param" "maybe type" "temp"
        (577179 'move' call_tmp[577176](82316 call V[82254] 3))
        unknown call_tmp[577181] "expr temp" "maybe param" "maybe type" "temp"
        (577184 'move' call_tmp[577181](82314 call != call_tmp[577176] 0))
        (82319 'move' tmp[82303](82312 call _cond_test call_tmp[577181]))
        tmp[82303]
      }
      label _breakLabel[82307]
    }
    unknown call_tmp[577186] "expr temp" "maybe param" "maybe type" "temp"
    (577189 'move' call_tmp[577186](82337 call U[82245] 3))
    unknown call_tmp[577191] "expr temp" "maybe param" "maybe type" "temp"
    (577194 'move' call_tmp[577191](82341 call U[82245] 1))
    unknown call_tmp[577196] "expr temp" "maybe param" "maybe type" "temp"
    (577199 'move' call_tmp[577196](82343 call _build_tuple call_tmp[577186] call_tmp[577191]))
    (462966 'move' ret[462961](462965 'deref' call_tmp[577196]))
    (462963 return ret[462961])
  }
  function chpl__extendedEuclid[82358](arg u[82355] :
  (82354 call int(64)[13] 32), arg v[82364] :
  (82363 call int(64)[13] 32)) : _unknown[43] "inline"
  {
    unknown ret[462970] "RVV" "temp"
    unknown call_tmp[577201] "expr temp" "maybe param" "maybe type" "temp"
    (577204 'move' call_tmp[577201](82371 call chpl__extendedEuclidHelper u[82355] v[82364]))
    (462975 'move' ret[462970](462974 'deref' call_tmp[577201]))
    (462972 return ret[462970])
  }
  function chpl__extendedEuclid[82386](arg u[82383] :
  (82382 call int(64)[13] 64), arg v[82392] :
  (82391 call int(64)[13] 64)) : _unknown[43] "inline"
  {
    unknown ret[462979] "RVV" "temp"
    unknown call_tmp[577206] "expr temp" "maybe param" "maybe type" "temp"
    (577209 'move' call_tmp[577206](82399 call chpl__extendedEuclidHelper u[82383] v[82392]))
    (462984 'move' ret[462979](462983 'deref' call_tmp[577206]))
    (462981 return ret[462979])
  }
  function chpl__rangeIdxTypeError[82409](arg idxType[82407]:_any[170](?)) : _unknown[43] "private" "no return value for void"
  {
    unknown call_tmp[577211] "expr temp" "maybe param" "maybe type" "temp"
    (577214 'move' call_tmp[577211](82431 call _cast string[24] idxType[82407]))
    (82449 call compilerError "ranges don't support '" call_tmp[577211] "' as their idxType")
    (462986 return _void[47])
  }
  function chpl__rangeStrideType[82458](arg idxType[82456]:_any[170](?)) type : _unknown[43] "private"
  {
    unknown ret[462990] "RVV" "temp" "type variable"
    unknown call_tmp[577216] "expr temp" "maybe param" "maybe type" "temp"
    (577219 'move' call_tmp[577216](82463 call isIntegralType idxType[82456]))
    unknown call_tmp[577221] "expr temp" "maybe param" "maybe type" "temp"
    (577224 'move' call_tmp[577221](82495 call _cond_test call_tmp[577216]))
    if call_tmp[577221]
    {
      unknown call_tmp[577226] "expr temp" "maybe param" "maybe type" "temp"
      (577229 'move' call_tmp[577226](82467 call chpl__signedType idxType[82456]))
      (462995 'move' ret[462990](462994 'deref' call_tmp[577226]))
      gotoReturn _end_chpl__rangeStrideType[462988] _end_chpl__rangeStrideType[462988]
    }
    {
      unknown tmp[397086] "maybe param" "temp"
      (397097 'move' tmp[397086](82474 call isEnumType idxType[82456]))
      unknown call_tmp[577231] "expr temp" "maybe param" "maybe type" "temp"
      (577234 'move' call_tmp[577231](397099 call _cond_invalid tmp[397086]))
      if call_tmp[577231]
      {
        (397102 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[508863] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508864] "maybe param" "temp"
      unknown call_tmp[577236] "expr temp" "maybe param" "maybe type" "temp"
      (577239 'move' call_tmp[577236](397087 call isTrue tmp[397086]))
      (508869 'move' tmp[508864](508867 call _cond_test call_tmp[577236]))
      if tmp[508864]
      {
        (508874 'move' tmp[508863](508871 '_paramFoldLogical' tmp[508864] 1))
      }
      {
        unknown tmp[508876] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[577241] "expr temp" "maybe param" "maybe type" "temp"
        (577244 'move' call_tmp[577241](82478 call isBoolType idxType[82456]))
        (508878 'move' tmp[508876](397091 call isTrue call_tmp[577241]))
        (508883 'move' tmp[508863](508880 '_paramFoldLogical' tmp[508864] tmp[508876]))
      }
      unknown call_tmp[577246] "expr temp" "maybe param" "maybe type" "temp"
      (577249 'move' call_tmp[577246](82491 call _cond_test tmp[508863]))
      if call_tmp[577246]
      {
        (463000 'move' ret[462990](462999 'deref' int(64)[13]))
        gotoReturn _end_chpl__rangeStrideType[462988] _end_chpl__rangeStrideType[462988]
      }
      {
        (82488 call chpl__rangeIdxTypeError idxType[82456])
      }
    }
    label _end_chpl__rangeStrideType[462988]
    (462992 return ret[462990])
  }
  function chpl__rangeUnsignedType[82507](arg idxType[82505]:_any[170](?)) type : _unknown[43] "private"
  {
    unknown ret[463006] "RVV" "temp" "type variable"
    unknown call_tmp[577251] "expr temp" "maybe param" "maybe type" "temp"
    (577254 'move' call_tmp[577251](82512 call isIntegralType idxType[82505]))
    unknown call_tmp[577256] "expr temp" "maybe param" "maybe type" "temp"
    (577259 'move' call_tmp[577256](82544 call _cond_test call_tmp[577251]))
    if call_tmp[577256]
    {
      unknown call_tmp[577261] "expr temp" "maybe param" "maybe type" "temp"
      (577264 'move' call_tmp[577261](82516 call chpl__unsignedType idxType[82505]))
      (463011 'move' ret[463006](463010 'deref' call_tmp[577261]))
      gotoReturn _end_chpl__rangeUnsignedType[463004] _end_chpl__rangeUnsignedType[463004]
    }
    {
      unknown tmp[397107] "maybe param" "temp"
      (397118 'move' tmp[397107](82523 call isEnumType idxType[82505]))
      unknown call_tmp[577266] "expr temp" "maybe param" "maybe type" "temp"
      (577269 'move' call_tmp[577266](397120 call _cond_invalid tmp[397107]))
      if call_tmp[577266]
      {
        (397123 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[508890] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[508891] "maybe param" "temp"
      unknown call_tmp[577271] "expr temp" "maybe param" "maybe type" "temp"
      (577274 'move' call_tmp[577271](397108 call isTrue tmp[397107]))
      (508896 'move' tmp[508891](508894 call _cond_test call_tmp[577271]))
      if tmp[508891]
      {
        (508901 'move' tmp[508890](508898 '_paramFoldLogical' tmp[508891] 1))
      }
      {
        unknown tmp[508903] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[577276] "expr temp" "maybe param" "maybe type" "temp"
        (577279 'move' call_tmp[577276](82527 call isBoolType idxType[82505]))
        (508905 'move' tmp[508903](397112 call isTrue call_tmp[577276]))
        (508910 'move' tmp[508890](508907 '_paramFoldLogical' tmp[508891] tmp[508903]))
      }
      unknown call_tmp[577281] "expr temp" "maybe param" "maybe type" "temp"
      (577284 'move' call_tmp[577281](82540 call _cond_test tmp[508890]))
      if call_tmp[577281]
      {
        (463016 'move' ret[463006](463015 'deref' uint(64)[107]))
        gotoReturn _end_chpl__rangeUnsignedType[463004] _end_chpl__rangeUnsignedType[463004]
      }
      {
        (82537 call chpl__rangeIdxTypeError idxType[82505])
      }
    }
    label _end_chpl__rangeUnsignedType[463004]
    (463008 return ret[463006])
  }
  function chpl__idxTypeToIntIdxType[82556](arg idxType[82554]:_any[170](?)) type : _unknown[43] "no doc"
  {
    unknown ret[463022] "RVV" "temp" "type variable"
    unknown call_tmp[577286] "expr temp" "maybe param" "maybe type" "temp"
    (577289 'move' call_tmp[577286](82561 call isBoolType idxType[82554]))
    unknown call_tmp[577291] "expr temp" "maybe param" "maybe type" "temp"
    (577294 'move' call_tmp[577291](82616 call _cond_test call_tmp[577286]))
    if call_tmp[577291]
    {
      (463027 'move' ret[463022](463026 'deref' int(64)[13]))
      gotoReturn _end_chpl__idxTypeToIntIdxType[463020] _end_chpl__idxTypeToIntIdxType[463020]
    }
    {
      unknown call_tmp[577296] "expr temp" "maybe param" "maybe type" "temp"
      (577299 'move' call_tmp[577296](82569 call isEnumType idxType[82554]))
      unknown call_tmp[577301] "expr temp" "maybe param" "maybe type" "temp"
      (577304 'move' call_tmp[577301](82612 call _cond_test call_tmp[577296]))
      if call_tmp[577301]
      {
        unknown call_tmp[577308] "expr temp" "maybe param" "maybe type" "temp"
        (577311 'move' call_tmp[577308](82571 call size _mt[232] idxType[82554]))
        unknown call_tmp[577313] "expr temp" "maybe param" "maybe type" "temp"
        (577316 'move' call_tmp[577313](82575 call < call_tmp[577308] 2))
        unknown call_tmp[577318] "expr temp" "maybe param" "maybe type" "temp"
        (577321 'move' call_tmp[577318](82599 call _cond_test call_tmp[577313]))
        if call_tmp[577318]
        {
          (82597 call compilerError "ranges are not currently supported for enums with fewer than two values")
        }
        (463032 'move' ret[463022](463031 'deref' int(64)[13]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[463020] _end_chpl__idxTypeToIntIdxType[463020]
      }
      {
        (463037 'move' ret[463022](463036 'deref' idxType[82554]))
        gotoReturn _end_chpl__idxTypeToIntIdxType[463020] _end_chpl__idxTypeToIntIdxType[463020]
      }
    }
    label _end_chpl__idxTypeToIntIdxType[463020]
    (463024 return ret[463022])
  }
  function range[66183](?).chpl_intToIdx[82629](arg _mt[82634]:_MT[227], arg this[82631]:range[66183](?) :
  range[66183](?), arg i[82627]:_any[170](?)) : _unknown[43] "inline" "method" "no doc"
  {
    unknown ret[463043] "RVV" "temp"
    unknown call_tmp[577325] "expr temp" "maybe param" "maybe type" "temp"
    (577328 'move' call_tmp[577325](82638 call idxType _mt[232] this[82631]))
    unknown call_tmp[577330] "expr temp" "maybe param" "maybe type" "temp"
    (577333 'move' call_tmp[577330](82643 call chpl__intToIdx call_tmp[577325] i[82627]))
    (463048 'move' ret[463043](463047 'deref' call_tmp[577330]))
    (463045 return ret[463043])
  }
  function chpl__intToIdx[82655](arg idxType[82652]:integral[188](?), arg i[82658]:integral[188](?)) : _unknown[43] "inline"
  {
    unknown ret[463052] "RVV" "temp"
    unknown call_tmp[577335] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (577338 'move' call_tmp[577335](82662 'typeof' i[82658]))
    unknown call_tmp[577340] "expr temp" "maybe param" "maybe type" "temp"
    (577343 'move' call_tmp[577340](82664 call == call_tmp[577335] idxType[82652]))
    unknown call_tmp[577345] "expr temp" "maybe param" "maybe type" "temp"
    (577348 'move' call_tmp[577345](82675 call _cond_test call_tmp[577340]))
    if call_tmp[577345]
    {
      (463057 'move' ret[463052](463056 'deref' i[82658]))
      gotoReturn _end_chpl__intToIdx[463050] _end_chpl__intToIdx[463050]
    }
    {
      unknown call_tmp[577350] "expr temp" "maybe param" "maybe type" "temp"
      (577353 'move' call_tmp[577350](82671 call _cast idxType[82652] i[82658]))
      (463062 'move' ret[463052](463061 'deref' call_tmp[577350]))
      gotoReturn _end_chpl__intToIdx[463050] _end_chpl__intToIdx[463050]
    }
    label _end_chpl__intToIdx[463050]
    (463054 return ret[463052])
  }
  function chpl__intToIdx[82690](arg idxType[82687]:integral[188](?), param arg i[82693]:integral[188](?)) : _unknown[43] "inline"
  {
    unknown ret[463068] "RVV" "temp"
    unknown call_tmp[577355] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (577358 'move' call_tmp[577355](82697 'typeof' i[82693]))
    unknown call_tmp[577360] "expr temp" "maybe param" "maybe type" "temp"
    (577363 'move' call_tmp[577360](82699 call == call_tmp[577355] idxType[82687]))
    unknown call_tmp[577365] "expr temp" "maybe param" "maybe type" "temp"
    (577368 'move' call_tmp[577365](82710 call _cond_test call_tmp[577360]))
    if call_tmp[577365]
    {
      (463073 'move' ret[463068](463072 'deref' i[82693]))
      gotoReturn _end_chpl__intToIdx[463066] _end_chpl__intToIdx[463066]
    }
    {
      unknown call_tmp[577370] "expr temp" "maybe param" "maybe type" "temp"
      (577373 'move' call_tmp[577370](82706 call _cast idxType[82687] i[82693]))
      (463078 'move' ret[463068](463077 'deref' call_tmp[577370]))
      gotoReturn _end_chpl__intToIdx[463066] _end_chpl__intToIdx[463066]
    }
    label _end_chpl__intToIdx[463066]
    (463070 return ret[463068])
  }
  function chpl__intToIdx[82725](arg idxType[82722]:enumerated[179](?), arg i[82728]:integral[188](?)) : _unknown[43] "inline"
  {
    unknown ret[463084] "RVV" "temp"
    unknown call_tmp[577375] "expr temp" "maybe param" "maybe type" "temp"
    (577378 'move' call_tmp[577375](82735 call chpl__orderToEnum i[82728] idxType[82722]))
    (463089 'move' ret[463084](463088 'deref' call_tmp[577375]))
    (463086 return ret[463084])
  }
  function chpl__intToIdx[82745](arg idxType[82743]:_any[170](?), arg i[82748]:integral[188](?)) : _unknown[43] "inline"
  {
    unknown ret[463093] "RVV" "temp"
    unknown call_tmp[577380] "expr temp" "maybe param" "maybe type" "temp"
    (577383 'move' call_tmp[577380](82757 call _cast bool[10] i[82748]))
    (463098 'move' ret[463093](463097 'deref' call_tmp[577380]))
    (463095 return ret[463093])
  }
  where {
    (82754 call isBoolType idxType[82743])
  }
  function chpl__intToIdx[82769](arg idxType[82767]:_any[170](?), param arg i[82772]:integral[188](?)) param : _unknown[43] "inline"
  {
    unknown ret[463102] "RVV" "param" "temp"
    unknown call_tmp[577385] "expr temp" "maybe param" "maybe type" "temp"
    (577388 'move' call_tmp[577385](82781 call _cast bool[10] i[82772]))
    (463107 'move' ret[463102](463106 'deref' call_tmp[577385]))
    (463104 return ret[463102])
  }
  where {
    (82778 call isBoolType idxType[82767])
  }
  function chpl__intToIdx[82793](arg idxType[82791]:_any[170](?), arg i[82796]:nothing[7]) : _unknown[43] "inline"
  {
    unknown ret[463111] "RVV" "temp"
    (463116 'move' ret[463111](463115 'deref' none[49]))
    (463113 return ret[463111])
  }
  function chpl__idxToInt[82811](arg i[82808]:integral[188](?)) : _unknown[43] "inline"
  {
    unknown ret[463120] "RVV" "temp"
    (463125 'move' ret[463120](463124 'deref' i[82808]))
    (463122 return ret[463120])
  }
  function chpl__idxToInt[82825](param arg i[82822]:integral[188](?)) param : _unknown[43] "inline"
  {
    unknown ret[463129] "RVV" "param" "temp"
    (463134 'move' ret[463129](463133 'deref' i[82822]))
    (463131 return ret[463129])
  }
  function chpl__idxToInt[82839](arg i[82836]:enumerated[179](?)) : _unknown[43] "inline"
  {
    unknown ret[463138] "RVV" "temp"
    unknown call_tmp[577390] "expr temp" "maybe param" "maybe type" "temp"
    (577393 'move' call_tmp[577390](82844 call chpl__enumToOrder i[82836]))
    (463143 'move' ret[463138](463142 'deref' call_tmp[577390]))
    (463140 return ret[463138])
  }
  function chpl__idxToInt[82856](arg i[82853]:bool[10]) : _unknown[43] "inline"
  {
    unknown ret[463147] "RVV" "temp"
    unknown call_tmp[577395] "expr temp" "maybe param" "maybe type" "temp"
    (577398 'move' call_tmp[577395](82860 call _cast int(64)[13] i[82853]))
    (463152 'move' ret[463147](463151 'deref' call_tmp[577395]))
    (463149 return ret[463147])
  }
  function chpl__idxToInt[82873](param arg i[82870]:bool[10]) param : _unknown[43] "inline"
  {
    unknown ret[463156] "RVV" "param" "temp"
    unknown call_tmp[577400] "expr temp" "maybe param" "maybe type" "temp"
    (577403 'move' call_tmp[577400](82877 call _cast int(64)[13] i[82870]))
    (463161 'move' ret[463156](463160 'deref' call_tmp[577400]))
    (463158 return ret[463156])
  }
  (329335 'used modules list'(66061 'use' ChapelBase[302])(66063 'use' SysBasic[209963])(66064 'use' HaltWrappers[197622])(66068 'use' Math[202696]))
}