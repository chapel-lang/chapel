AST dump for Random after pass scopeResolve.
Module use list: ChapelStandard RandomSupport NPBRandom PCGRandom HaltWrappers Search Sort 

{ type RNG[287710] def PCG[287705]:RNG[287710] 1 def NPB[287708]:RNG[287710] 2 unknown defaultRNG[287719] "param" PCG[287705] function isSupportedNumericType[287726](arg t[287724]:_any[170](?)) param : _unknown[43] "private"
  {(287738 return(287736 call ||(287731 call isNumericType t[287724])(287735 call isBoolType t[287724])))
  } function fillRandom[287751](arg arr[287748] :(287745 call chpl__buildArrayRuntimeType nil[38]), arg seed[287763] :(287756 call int(64)[13] 64) =(287760 call . SeedGenerator[290045] c"oddCurrentTime"), param arg algorithm[287768] = defaultRNG[287719]) : _unknown[43] "no return value for void"
  { unknown randNums[287791](287790 call makeRandomStream seed[287763](eltType =(287782 call . arr[287748] c"eltType"))(parSafe = 0)(algorithm = algorithm[287768]))(287803 call(287798 call . randNums[287791] c"fillRandom") arr[287748])
  }
  {(287777 call isSupportedNumericType(287773 call . arr[287748] c"eltType"))
  } function fillRandom[287816](arg arr[287813] :(287810 call chpl__buildArrayRuntimeType nil[38]), arg seed[287826] :(287821 call int(64)[13] 64) =(287823 call . SeedGenerator[290045] c"oddCurrentTime"), param arg algorithm[287831] = defaultRNG[287719]) : _unknown[43] "no doc" "no return value for void"
  {(287852 call compilerError "Random.fillRandom is only defined for numeric arrays")
  } function shuffle[287865](arg arr[287862] :(287859 call chpl__buildArrayRuntimeType nil[38]), arg seed[287875] :(287870 call int(64)[13] 64) =(287872 call . SeedGenerator[290045] c"oddCurrentTime"), param arg algorithm[287883] = PCG[287705]) : _unknown[43] "no return value for void"
  { unknown randNums[287902](287901 call makeRandomStream seed[287875](eltType =(287893 call .(287890 call . arr[287862] c"_dom") c"idxType"))(parSafe = 0)(algorithm = algorithm[287883]))(287912 call(287907 call . randNums[287902] c"shuffle") arr[287862])
  } function permutation[287924](arg arr[287921] :(287918 call chpl__buildArrayRuntimeType nil[38]), arg seed[287934] :(287929 call int(64)[13] 64) =(287931 call . SeedGenerator[290045] c"oddCurrentTime"), param arg algorithm[287942] = PCG[287705]) : _unknown[43] "no return value for void"
  { unknown randNums[287958](287957 call makeRandomStream seed[287934](eltType =(287949 call . arr[287921] c"eltType"))(parSafe = 0)(algorithm = algorithm[287942]))(287970 call(287965 call . randNums[287958] c"permutation") arr[287921])
  } function makeRandomStream[287978](arg eltType[287976]:_any[170](?), arg seed[287988] :(287983 call int(64)[13] 64) =(287985 call . SeedGenerator[290045] c"oddCurrentTime"), param arg parSafe[287994] : bool[10] = 1, param arg algorithm[287999] = defaultRNG[287719]) : _unknown[43]
  {
    if(288072 call _cond_test(288007 call == algorithm[287999] PCG[287705]))
    {(288021 return(288020 'new'(288018 call _owned[39039](?)(288017 call anymanaged RandomStream[379947](?)(seed = seed[287988])(parSafe = parSafe[287994])(eltType = eltType[287976])))))
    }
    {
      if(288066 call _cond_test(288030 call == algorithm[287999] NPB[287708]))
      {(288044 return(288043 'new'(288041 call _owned[39039](?)(288040 call anymanaged NPBRandomStream[379957](?)(seed = seed[287988])(parSafe = parSafe[287994])(eltType = eltType[287976])))))
      }
      {(288064 call compilerError "Unknown random number generator")
      }
    }
  } function _choice[288085](arg stream[288083]:_any[170](?), arg arr[288090] :(288087 call chpl__buildArrayRuntimeType nil[38]), arg size[288095] : unknown sizeType[288093], arg replace[288098]:_any[170](?), arg prob[288102] : unknown probType[288100]) : _unknown[43] throws "no doc"
  {
    if(288133 call _cond_test(288110 call !=(288106 call . arr[288090] c"rank") 1))
    {(288130 call compilerError "choice() array must be 1 dimensional")
    }
    if(288170 call _cond_test(288143 call <(288139 call . arr[288090] c"size") 1))
    {(288167 'throw'(288166 'new'(288164 call _owned[39039](?)(288163 call anymanaged IllegalArgumentError[359994](?) "choice() array.size must be greater than 0"))))
    }
    if(288326 call _cond_test(288178 call !(288177 call isNothingType probType[288100])))
    {
      if(288206 call _cond_test(288184 call !(288183 call isArrayType probType[288100])))
      {(288204 call compilerError "choice() prob must be an array")
      }
      if(288250 call _cond_test(288228 call !(288226 call ||(288218 call isIntegralType(288214 call . prob[288102] c"eltType"))(288225 call isRealType(288221 call . prob[288102] c"eltType")))))
      {(288248 call compilerError "choice() prob.eltType must be real or integral")
      }
      if(288283 call _cond_test(288260 call !=(288256 call . prob[288102] c"rank") 1))
      {(288280 call compilerError "choice() prob array must be 1 dimensional")
      }
      if(288322 call _cond_test(288295 call !=(288288 call . prob[288102] c"_dom")(288292 call . arr[288090] c"_dom")))
      {(288319 'throw'(288318 'new'(288316 call _owned[39039](?)(288315 call anymanaged IllegalArgumentError[359994](?) "choice() array arguments must have same domain"))))
      }
    }
    if(288411 call _cond_test(288334 call !(288333 call isNothingType sizeType[288093])))
    {
      if(288405 call _cond_test(288339 call isIntegralType sizeType[288093]))
      {
        if(288368 call _cond_test(288342 call <= size[288095] 0))
        {(288366 'throw'(288365 'new'(288363 call _owned[39039](?)(288362 call anymanaged IllegalArgumentError[359994](?) "choice() size must be greater than 0"))))
        }
      }
      {
        if(288401 call _cond_test(288378 call !(288377 call isDomainType sizeType[288093])))
        {(288398 call compilerError "choice() size must be integral or domain")
        }
      }
    }
    if(288440 call _cond_test(288418 call isNothingType probType[288100]))
    {(288426 return(288425 call _choiceUniform stream[288083] arr[288090] size[288095] replace[288098]))
    }
    {(288437 return(288436 call _choiceProbabilities stream[288083] arr[288090] size[288095] replace[288098] prob[288102]))
    }
  } function _choiceUniform[288450](arg stream[288448]:_any[170](?), arg arr[288455] :(288452 call chpl__buildArrayRuntimeType nil[38]), arg size[288460] : unknown sizeType[288458], arg replace[288463]:_any[170](?)) : _unknown[43] throws "no doc"
  { unknown A[288480] "ref var"(288479 call(288468 call . arr[288455] c"reindex")(288476 call chpl_build_bounded_range 1(288473 call . arr[288455] c"size")))
    if(288762 call _cond_test(288487 call isNothingType sizeType[288458]))
    { unknown randIdx[288501](288500 call(288489 call . stream[288448] c"getNext")(resultType = int(64)[13]) 1(288497 call . A[288480] c"size"))(288509 return(288508 call A[288480] randIdx[288501]))
    }
    { unknown m[288512] 1
      if(288528 call _cond_test(288519 call isDomainType sizeType[288458]))
      {(288525 call = m[288512](288522 call . size[288460] c"size"))
      } unknown numElements[288571](288568 IfExpr (288536 call isDomainType sizeType[288458]) then
      { scopeless m[288512]
      } else
      { scopeless(288565 IfExpr (288541 call isIntegralType sizeType[288458]) then
        { scopeless(288544 call _cast int(64)[13] size[288460])
        } else
        { scopeless(288564 call compilerError "choice() size type must be integral or tuple of ranges")
        } )
      } ) unknown samples[288587](288585 call chpl__buildArrayRuntimeType(288583 call chpl__ensureDomainExpr(288576 call chpl_build_bounded_range 1 numElements[288571]))(288580 call . A[288480] c"eltType"))
      if(288729 call _cond_test replace[288463])
      {
        { unknown _indexOfInterest[288618] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[288619] "expr temp" "temp"(288628 'move' _iterator[288619](288626 call _getIterator samples[288587]))
          Defer
          {
            {(288644 call _freeIterator _iterator[288619])
            }
          }
          { scopeless type(288633 'move' _indexOfInterest[288618](288630 call iteratorIndex _iterator[288619]))
          }
          ForLoop
          { unknown sample[288637] "index var" "insert auto destroy"(288639 'move' sample[288637] _indexOfInterest[288618])
            { unknown randIdx[288606](288605 call(288594 call . stream[288448] c"getNext")(resultType = int(64)[13]) 1(288602 call . A[288480] c"size"))(288615 call = sample[288637](288614 call A[288480] randIdx[288606]))
            } label _continueLabel[288623] _indexOfInterest[288618] _iterator[288619]
          } label _breakLabel[288624]
        }
      }
      { unknown indices[288666](288663 call . A[288480] c"_dom")(288660 call chpl__buildArrayRuntimeType(288658 call chpl__ensureDomainExpr(288653 call . A[288480] c"_dom")) int(64)[13])(288673 call shuffle indices[288666])
        { unknown _indexOfInterest[288695] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[288696] "expr temp" "temp"(288705 'move' _iterator[288696](288703 call _getIterator(288677 call . samples[288587] c"_dom")))
          Defer
          {
            {(288722 call _freeIterator _iterator[288696])
            }
          }
          { scopeless type(288711 'move' _indexOfInterest[288695](288708 call iteratorIndex _iterator[288696]))
          }
          ForLoop
          { unknown i[288715] "index var" "insert auto destroy"(288717 'move' i[288715] _indexOfInterest[288695])
            {(288691 call =(288683 call samples[288587] i[288715])(288690 call A[288480](288688 call indices[288666] i[288715])))
            } label _continueLabel[288700] _indexOfInterest[288695] _iterator[288696]
          } label _breakLabel[288701]
        }
      }
      if(288757 call _cond_test(288736 call isIntegralType sizeType[288458]))
      {(288738 return samples[288587])
      }
      {
        if(288753 call _cond_test(288744 call isDomainType sizeType[288458]))
        {(288750 return(288749 call reshape samples[288587] size[288460]))
        }
      }
    }
  } function _choiceProbabilities[288772](arg stream[288770]:_any[170](?), arg arr[288777] :(288774 call chpl__buildArrayRuntimeType nil[38]), arg size[288782] : unknown sizeType[288780], arg replace[288785]:_any[170](?), arg prob[288789] : unknown probType[288787]) : _unknown[43] throws "no doc"
  {
    if(288835 call _cond_test(288809 call !=(288802 call . arr[288777] c"_dom")(288806 call . prob[288789] c"_dom")))
    {(288833 'throw'(288832 'new'(288830 call _owned[39039](?)(288829 call anymanaged IllegalArgumentError[359994](?) "choice() arrays must have equal domains"))))
    }
    if(288871 call _cond_test(288845 call ==(288841 call . prob[288789] c"size") 0))
    {(288869 'throw'(288868 'new'(288866 call _owned[39039](?)(288865 call anymanaged IllegalArgumentError[359994](?) "choice() arrays cannot be empty"))))
    } unknown A[288889] "ref var"(288888 call(288877 call . arr[288777] c"reindex")(288885 call chpl_build_bounded_range 1(288882 call . arr[288777] c"size"))) unknown P[288905] "ref var"(288904 call(288893 call . prob[288789] c"reindex")(288901 call chpl_build_bounded_range 1(288898 call . arr[288777] c"size"))) function chpl__scan5[288910](arg chpl_toScan[288912]:_any[170](?)) : _unknown[43] "compiler nested function" "fn returns iterator"
    { unknown chpl_eltType[288914] "maybe type" "temp"
      { scopeless type(288918 'move' chpl_eltType[288914](288920 'typeof'(288922 call chpl__initCopy(288924 call iteratorIndex(288926 call _getIterator chpl_toScan[288912])))))
      } const tmp[288915] "const" "temp"(288935 'move' tmp[288915](288934 'new'(288933 call anymanaged SumReduceScanOp[344093](?)(eltType = chpl_eltType[288914])(_chpl_manager = unmanaged[209](?)))))(288937 return(288939 call chpl__scanIterator tmp[288915] chpl_toScan[288912]))
    } unknown cumulativeArr[288947](288945 call _cast real(64)[16](288943 call chpl__scan5 P[288905]))
    if(288985 call _cond_test(288959 call !(288958 call isSorted module=[244] Sort[251417] cumulativeArr[288947])))
    {(288983 'throw'(288982 'new'(288980 call _owned[39039](?)(288979 call anymanaged IllegalArgumentError[359994](?) "choice() prob array cannot contain negative values"))))
    }
    if(289027 call _cond_test(289001 call <=(288999 call cumulativeArr[288947](288995 call .(288992 call . P[288905] c"_dom") c"last")) 0))
    {(289025 'throw'(289024 'new'(289022 call _owned[39039](?)(289021 call anymanaged IllegalArgumentError[359994](?) "choice() prob array requires a value greater than 0"))))
    } unknown total[289042](289041 call cumulativeArr[288947](289037 call .(289034 call . P[288905] c"_dom") c"last"))(289047 call /= cumulativeArr[288947] total[289042])
    if(289558 call _cond_test(289053 call isNothingType sizeType[288780]))
    { unknown randNum[289062](289061 call(289055 call . stream[288770] c"getNext")(resultType = real(64)[16])) unknown tmp[289081] "no copy" "temp"(289080 call binarySearch module=[244] Search[275550] cumulativeArr[288947] randNum[289062])(289088 call _check_tuple_var_decl tmp[289081] 2) unknown found[289066](289082 call tmp[289081] 1) unknown idx[289068](289085 call tmp[289081] 2)(289097 return(289096 call A[288889] idx[289068]))
    }
    { unknown m[289100] 1
      if(289116 call _cond_test(289107 call isDomainType sizeType[288780]))
      {(289113 call = m[289100](289110 call . size[288782] c"size"))
      } unknown numElements[289144](289141 IfExpr (289124 call isDomainType sizeType[288780]) then
      { scopeless m[289100]
      } else
      { scopeless(289138 IfExpr (289129 call isIntegralType sizeType[288780]) then
        { scopeless(289132 call _cast int(64)[13] size[288782])
        } else
        { scopeless(289137 call compilerError "choice() size type must be integral or tuple of ranges")
        } )
      } ) unknown samples[289160](289158 call chpl__buildArrayRuntimeType(289156 call chpl__ensureDomainExpr(289149 call chpl_build_bounded_range 1 numElements[289144]))(289153 call . arr[288777] c"eltType"))
      if(289525 call _cond_test replace[288785])
      {
        { unknown _indexOfInterest[289211] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[289212] "expr temp" "temp"(289221 'move' _iterator[289212](289219 call _getIterator samples[289160]))
          Defer
          {
            {(289237 call _freeIterator _iterator[289212])
            }
          }
          { scopeless type(289226 'move' _indexOfInterest[289211](289223 call iteratorIndex _iterator[289212]))
          }
          ForLoop
          { unknown sample[289230] "index var" "insert auto destroy"(289232 'move' sample[289230] _indexOfInterest[289211])
            { unknown randNum[289174](289173 call(289167 call . stream[288770] c"getNext")(resultType = real(64)[16])) unknown tmp[289191] "no copy" "temp"(289190 call binarySearch module=[244] Search[275550] cumulativeArr[288947] randNum[289174])(289198 call _check_tuple_var_decl tmp[289191] 2) unknown found[289178](289192 call tmp[289191] 1) unknown idx[289180](289195 call tmp[289191] 2)(289208 call = sample[289230](289207 call A[288889] idx[289180]))
            } label _continueLabel[289216] _indexOfInterest[289211] _iterator[289212]
          } label _breakLabel[289217]
        }
      }
      { unknown indicesChosen[289250](289248 call chpl__buildDomainRuntimeType defaultDist[93214] int(64)[13]) unknown i[289255] 1
        { unknown tmp[289486] "temp"(289522 'move' tmp[289486](289511 call _cond_test(289513 call <(289515 call . indicesChosen[289250] c"size")(289519 call . samples[289160] c"size"))))
          WhileDo
          {
            {
              if(289338 call _cond_test(289273 call >(289269 call . indicesChosen[289250] c"size") 0))
              { function chpl__scan6[289278](arg chpl_toScan[289280]:_any[170](?)) : _unknown[43] "compiler nested function" "fn returns iterator"
                { unknown chpl_eltType[289282] "maybe type" "temp"
                  { scopeless type(289286 'move' chpl_eltType[289282](289288 'typeof'(289290 call chpl__initCopy(289292 call iteratorIndex(289294 call _getIterator chpl_toScan[289280])))))
                  } const tmp[289283] "const" "temp"(289303 'move' tmp[289283](289302 'new'(289301 call anymanaged SumReduceScanOp[344093](?)(eltType = chpl_eltType[289282])(_chpl_manager = unmanaged[209](?)))))(289305 return(289307 call chpl__scanIterator tmp[289283] chpl_toScan[289280]))
                }(289315 call = cumulativeArr[288947](289313 call _cast real(64)[16](289311 call chpl__scan6 P[288905])))(289330 call = total[289042](289329 call cumulativeArr[288947](289325 call .(289322 call . P[288905] c"_dom") c"last")))(289335 call /= cumulativeArr[288947] total[289042])
              } unknown remainingSamples[289353](289351 call -(289344 call . samples[289160] c"size")(289348 call . indicesChosen[289250] c"size"))
              { unknown _indexOfInterest[289452] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[289453] "expr temp" "temp"(289462 'move' _iterator[289453](289460 call _getIterator(289382 call(289360 call . stream[288770] c"iterate")(289377 call chpl__buildDomainExpr(289374 call chpl_build_bounded_range 1(289372 call -(289365 call . samples[289160] c"size")(289369 call . indicesChosen[289250] c"size"))))(resultType = real(64)[16]))))
                Defer
                {
                  {(289479 call _freeIterator _iterator[289453])
                  }
                }
                { scopeless type(289468 'move' _indexOfInterest[289452](289465 call iteratorIndex _iterator[289453]))
                }
                ForLoop
                { unknown randNum[289472] "index var" "insert auto destroy"(289474 'move' randNum[289472] _indexOfInterest[289452])
                  { unknown tmp[289396] "no copy" "temp"(289395 call binarySearch module=[244] Search[275550] cumulativeArr[288947] randNum[289472])(289403 call _check_tuple_var_decl tmp[289396] 2) unknown found[289383](289397 call tmp[289396] 1) unknown indexChosen[289385](289400 call tmp[289396] 2)
                    if(289440 call _cond_test(289416 call !(289415 call(289410 call . indicesChosen[289250] c"contains") indexChosen[289385])))
                    {(289420 call += indicesChosen[289250] indexChosen[289385])(289432 call +=(289427 call samples[289160] i[289255])(289431 call A[288889] indexChosen[289385]))(289437 call += i[289255] 1)
                    }(289449 call =(289447 call P[288905] indexChosen[289385]) 0)
                  } label _continueLabel[289457] _indexOfInterest[289452] _iterator[289453]
                } label _breakLabel[289458]
              }
            } label _continueLabel[289489](289506 'move' tmp[289486](289495 call _cond_test(289497 call <(289499 call . indicesChosen[289250] c"size")(289503 call . samples[289160] c"size")))) tmp[289486]
          } label _breakLabel[289490]
        }
      }
      if(289553 call _cond_test(289532 call isIntegralType sizeType[288780]))
      {(289534 return samples[289160])
      }
      {
        if(289549 call _cond_test(289540 call isDomainType sizeType[288780]))
        {(289546 return(289545 call reshape samples[289160] size[288782]))
        }
      }
    }(329948 'used modules list'(288794 'use' Search[275550] 'only' )(288799 'use' Sort[251417] 'only' ))
  } function RandomStreamInterface[289915](?).getNext[289586](arg _mt[289919]:_MT[227], arg this[289917]:RandomStreamInterface[289915](?)) : _unknown[43] "method" "primary method"
  {(289607 call compilerError "RandomStreamInterface.getNext called") unknown x[289611](380127 call . this[289917] c"eltType")(289615 return x[289611])
  }
  { scopeless type(380122 call . this[289917] c"eltType")
  } function RandomStreamInterface[289915](?).skipToNth[289626](arg _mt[289923]:_MT[227], arg this[289921]:RandomStreamInterface[289915](?), arg n[289623] : integral[188](?)) : _unknown[43] throws "method" "primary method" "no return value for void"
  {(289646 call compilerError "RandomStreamInterface.skipToNth called")
  } function RandomStreamInterface[289915](?).getNth[289657](arg _mt[289927]:_MT[227], arg this[289925]:RandomStreamInterface[289915](?), arg n[289654] : integral[188](?)) : _unknown[43] throws "method" "primary method" "no return value for void"
  {(289678 call compilerError "RandomStreamInterface.getNth called")
  }
  { scopeless type(380135 call . this[289925] c"eltType")
  } function RandomStreamInterface[289915](?).fillRandom[289693](arg _mt[289931]:_MT[227], arg this[289929]:RandomStreamInterface[289915](?), arg arr[289690] :(289687 call chpl__buildArrayRuntimeType nil[38](380140 call . this[289929] c"eltType"))) : _unknown[43] "method" "primary method" "no return value for void"
  {(289713 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[289915](?).fillRandom[289726](arg _mt[289935]:_MT[227], arg this[289933]:RandomStreamInterface[289915](?), arg arr[289723] :(289720 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {(289731 call compilerError "RandomStreamInterface.fillRandom called")
  } function RandomStreamInterface[289915](?).choice[289744](arg _mt[289939]:_MT[227], arg this[289937]:RandomStreamInterface[289915](?), arg arr[289741] :(289738 call chpl__buildArrayRuntimeType nil[38]), arg size[289749] : unknown sizeType[289746] = none[49], arg replace[289754] = 1, arg prob[289760] : unknown probType[289757] = none[49]) : _unknown[43] throws "method" "primary method" "no return value for void"
  {(289782 call compilerError "RandomStreamInterface.choice called")
  } function RandomStreamInterface[289915](?).iterate[289793](arg _mt[289943]:_MT[227], arg this[289941]:RandomStreamInterface[289915](?), arg D[289790] : _domain[123390](?), arg resultType[289796]:_any[170](?) =(380146 call . this[289941] c"eltType")) : _unknown[43] "method" "primary method" "no return value for void"
  {(289817 call compilerError "RandomStreamInterface.iterate called")
  } function RandomStreamInterface[289915](?).writeThis[289826](arg _mt[289947]:_MT[227], arg this[289945]:RandomStreamInterface[289915](?), arg f[289824]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {(289845 call <~> f[289824] "RandomStreamInterface(eltType=")(289854 call <~> f[289824](289852 call _cast string[24](380153 call . this[289945] c"eltType")))(289874 call <~> f[289824] ", parSafe=")(289879 call <~> f[289824](380160 call . this[289945] c"parSafe"))(289899 call <~> f[289824] ", seed=")(289904 call <~> f[289824](380167 call . this[289945] c"seed"))(289909 call <~> f[289824] ")")
  } type RandomStreamInterface[289915](?) val super[331129]:object[253] "super class" unknown eltType[289569] "type variable"(289568 call real(64)[16] 64) unknown parSafe[289574] "param" 1 bool[10] const seed[289581] "const"(289580 call int(64)[13] 64)(329844 'used modules list'(328376 'use' ChapelStandard[19734])(287688 'use' RandomSupport[289950])(287693 'use' NPBRandom[296577])(287697 'use' PCGRandom[290059])(287701 'use' HaltWrappers[197622] 'only' ))
}