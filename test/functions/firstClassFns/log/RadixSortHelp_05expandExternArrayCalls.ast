AST dump for RadixSortHelp after pass expandExternArrayCalls.
Module use list: 

{
  (328350 'use' ChapelStandard)
  unknown RADIX_BITS[259066] "param" 8
  unknown classifyUnrollFactor[259071] "param" 7
  function binForRecordKeyPart[259078](arg a[259076]:_any[170](?), arg criterion[259080]:_any[170](?), arg startbit[259083] :
  int[13]) : _unknown[43] "inline"
  {
    const testRet[259095] "const"(259094 'typeof'(259093 call(259087 call . criterion c"keyPart") a 1))
    const testPart[259103] "const"(259102 call testRet 2)
    unknown bitsPerPart[259111] "param"(259110 call numBits(259108 'typeof' testPart))
    unknown bitsPerPartModRadixBits[259118] "param"(259116 call % bitsPerPart RADIX_BITS)
    if(259145 call _cond_test(259123 call != bitsPerPartModRadixBits 0))
    {
      { scopeless
        (259143 call compilerError "part size must be a multiple of radix bits")
      }
    }
    const whichpart[259154] "const"(259152 call / startbit bitsPerPart)
    const bitsinpart[259161] "const"(259159 call % startbit bitsPerPart)
    { scopeless
      const tmp[259180] "const" "no copy" "temp"(259179 call(259170 call . criterion c"keyPart") a(259177 call + 1 whichpart))
      (259187 call _check_tuple_var_decl tmp[259180] 2)
      const section[259164] "const"(259181 call tmp[259180] 1)
      const part[259166] "const"(259184 call tmp[259180] 2)
    }
    unknown ubits[259199](259197 call _cast(259196 call uint[107] bitsPerPart) part)
    if(259227 call _cond_test(259205 call isInt part))
    {
      const one[259209] "const" 1(259207 'typeof' ubits)
      (259224 call = ubits(259222 call ^ ubits(259220 call << one(259218 call - bitsPerPart 1))))
    }
    unknown mask[259239] "param"(259237 call -(259234 call << 1 RADIX_BITS) 1) uint[107]
    const ubin[259255] "const"(259253 call &(259250 call >> ubits(259248 call -(259245 call - bitsPerPart bitsinpart) RADIX_BITS)) mask)
    if(259305 call _cond_test(259260 call == section 0))
    {
      { scopeless
        (259273 return(259271 call _build_tuple(259267 call +(259264 call _cast int[13] ubin) 1) ubits))
      }
    }
    {
      { scopeless
        if(259299 call _cond_test(259277 call < section 0))
        {
          { scopeless
            (259284 return(259282 call _build_tuple 0 ubits))
          }
        }
        {
          { scopeless
            (259297 return(259295 call _build_tuple(259291 call +(259288 call << 1 RADIX_BITS) 1) ubits))
          }
        }
      }
    }
  }
  function binForRecord[259317](arg a[259315]:_any[170](?), arg criterion[259319]:_any[170](?), arg startbit[259322] :
  int[13]) : _unknown[43] "inline"
  {
    if(259413 call _cond_test(259331 call canResolveMethod criterion "keyPart" a 1))
    {
      (259338 return(259337 call binForRecordKeyPart a criterion startbit))
    }
    {
      { scopeless
        if(259409 call _cond_test(259346 call canResolveMethod criterion "key" a))
        {
          (259359 return(259358 call binForRecordKeyPart(259354 call(259349 call . criterion c"key") a) defaultComparator startbit))
        }
        {
          (259406 call compilerError "Bad comparator for radix sort "(259383 call _cast string[24](259381 'typeof' criterion)) " with eltType "(259404 call _cast string[24](259402 'typeof' a)))
        }
      }
    }
  }
  function fixedWidth[259425](arg eltTy[259423]:_any[170](?)) param : _unknown[43]
  {
    if(259455 call _cond_test(259447 call ||(259441 call ||(259435 call ||(259430 call isUintType eltTy)(259434 call isIntType eltTy))(259440 call isRealType eltTy))(259446 call isImagType eltTy)))
    {
      { scopeless
        (259453 return(259452 call numBits eltTy))
      }
    }
    if(259486 call _cond_test(259464 call isHomogeneousTuple eltTy))
    {
      unknown tmp[259466] eltTy
      (259484 return(259482 call *(259471 call . tmp c"size")(259481 call numBits(259479 'typeof'(259478 call tmp 1)))))
    }
    (259493 return(259491 call - 1))
  }
  function msbRadixSortParamLastStartBit[259505](arg Data[259502] :
  (259499 call chpl__buildArrayRuntimeType nil[38]), arg comparator[259507]:_any[170](?)) param : _unknown[43]
  {
    const element[259519] "const" "ref var"(259518 call Data(259514 call .(259511 call . Data c"_dom") c"low"))
    if(259592 call _cond_test(259536 call &&(259526 call ==(259524 'typeof' comparator) DefaultComparator)(259534 call >(259532 call fixedWidth(259530 'typeof' element)) 0)))
    {
      (259546 return(259544 call -(259542 call fixedWidth(259540 'typeof' element)) RADIX_BITS))
    }
    {
      { scopeless
        if(259588 call _cond_test(259554 call canResolveMethod comparator "key" element))
        {
          unknown keyType[259563] "type variable"(259562 'typeof'(259561 call(259556 call . comparator c"key") element))
          if(259583 call _cond_test(259572 call >(259570 call fixedWidth keyType) 0))
          {
            { scopeless
              (259581 return(259579 call -(259577 call fixedWidth keyType) RADIX_BITS))
            }
          }
        }
      }
    }
    (259600 return(259598 call - 1))
  }
  function radixSortClz[259608](arg val[259606]:_any[170](?)) : _unknown[43]
  {
    unknown nBits[259615] "param"(259614 call numBits(259612 'typeof' val))
    if(259627 call _cond_test(259621 call == val 0))
    {
      (259624 return nBits)
    }
    unknown cur[259632] val
    unknown one[259640](259638 call _cast(259637 'typeof' val) 1)
    unknown hi[259650](259648 call << one(259646 call - nBits 1))
    unknown n[259654] 0
    {
      unknown tmp[259675] "temp"
      (259705 'move' tmp[259675](259697 call _cond_test(259699 call ==(259701 call & cur hi) 0)))
      WhileDo
      {
        {
          (259666 call += n 1)
          (259672 call <<= cur 1)
        }
        label _continueLabel[259678]
        (259692 'move' tmp[259675](259684 call _cond_test(259686 call ==(259688 call & cur hi) 0)))
        tmp[259675]
      }
      label _breakLabel[259679]
    }
    (259709 return n)
  }
  function findDataStartBit[259719](arg startbit[259716] :
  int[13], arg min_ubits[259721]:_any[170](?), arg max_ubits[259723]:_any[170](?)) : _unknown[43]
  {
    unknown xor[259730](259728 call ^ min_ubits max_ubits)
    unknown bitsPerPart[259739] "param"(259738 call numBits(259736 'typeof' min_ubits))
    const bitsinpart[259746] "const"(259744 call % startbit bitsPerPart)
    (259751 call <<= xor bitsinpart)
    (259756 call >>= xor bitsinpart)
    unknown new_start[259763](259762 call radixSortClz xor)
    unknown new_digit[259770](259768 call / new_start RADIX_BITS)
    unknown new_start_bit_rounded[259777](259775 call * new_digit RADIX_BITS)
    (259784 return(259782 call _cast int[13] new_start_bit_rounded))
  }
  { scopeless type
    int[13]
  }
  function checkSorted[259795](arg start_n[259792] :
  int[13], arg end_n[259798] :
  int[13], arg A[259804] :
  (259801 call chpl__buildArrayRuntimeType nil[38]), arg criterion[259807]:_any[170](?), arg startbit[259810] =
  0) : _unknown[43] "always propagate line file info" "insert line file info"
  {
    {
      unknown _indexOfInterest[259972] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[259973] "expr temp" "temp"
      (259982 'move' _iterator[259973](259980 call _getIterator(259990 call chpl_direct_range_iter(259986 call + start_n 1) end_n 1)))
      Defer
      {
        {
          (260006 call _freeIterator _iterator[259973])
        }
      }
      { scopeless type
        (259995 'move' _indexOfInterest[259972](259992 call iteratorIndex _iterator[259973]))
      }
      ForLoop
      {
        unknown i[259999] "index var" "insert auto destroy"
        (260001 'move' i[259999] _indexOfInterest[259972])
        {
          unknown cmp[259836](259835 call chpl_compare(259828 call A(259825 call - i 1))(259833 call A i) criterion)
          if(259968 call _cond_test(259842 call > cmp 0))
          {
            (259940 call writeln "Error: not sorted properly at i=" i " A[i-1]="(259885 call A(259882 call - i 1)) " A[i]="(259905 call A i) " in start=" start_n " end=" end_n)
            (259946 call writeln A)
            (259966 call halt "failed checkSorted")
          }
        }
        label _continueLabel[259977]
        _indexOfInterest[259972]
        _iterator[259973]
      }
      label _breakLabel[259978]
    }
  }
  type RadixBucketizer[260302] function RadixBucketizer[260302].getNumBuckets[260019](arg _mt[260306]:_MT[227], arg this[260304]:RadixBucketizer[260302]) : _unknown[43] "method" "primary method"
  {
    (260028 return(260026 call +(260023 call << 1 RADIX_BITS) 2))
  } function RadixBucketizer[260302].getBinsToRecursivelySort[260035](arg _mt[260310]:_MT[227], arg this[260308]:RadixBucketizer[260302]) : _unknown[43] "method" "primary method"
  {
    (260044 return(260042 call chpl_build_bounded_range 1(260040 call << 1 RADIX_BITS)))
  } function RadixBucketizer[260302].getNextStartBit[260055](arg _mt[260314]:_MT[227], arg this[260312]:RadixBucketizer[260302], arg start_bit[260052] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    (260061 return(260059 call + start_bit 8))
  } function RadixBucketizer[260302].bucketForRecord[260070](arg _mt[260318]:_MT[227], arg this[260316]:RadixBucketizer[260302], arg a[260068]:_any[170](?), arg criterion[260072]:_any[170](?), arg startbit[260074]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      const tmp[260087] "const" "no copy" "temp"(260086 call binForRecord a criterion startbit)
      (260091 call _check_tuple_var_decl tmp[260087] 2)
      const bin[260076] "const"(260088 call tmp[260087] 1)
    }
    (260098 return bin)
  } function RadixBucketizer[260302].classify[260106](arg _mt[260322]:_MT[227], arg this[260320]:RadixBucketizer[260302], arg A[260104]:_any[170](?), arg start_n[260108]:_any[170](?), arg end_n[260110]:_any[170](?), arg criterion[260112]:_any[170](?), arg startbit[260114]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method"
  {
    unknown cur[260117] start_n
    {
      unknown tmp[260208] "temp"
      (260244 'move' tmp[260208](260233 call _cond_test(260235 call <= cur(260238 call - end_n(260241 call - classifyUnrollFactor 1)))))
      WhileDo
      {
        {
          {
            unknown _indexOfInterest[260161] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[260162] "expr temp" "temp"
            (260171 'move' _iterator[260162](260169 call _getIterator(260179 call chpl_direct_range_iter 0(260176 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (260195 call _freeIterator _iterator[260162])
              }
            }
            { scopeless type
              (260184 'move' _indexOfInterest[260161](260181 call iteratorIndex _iterator[260162]))
            }
            ForLoop
            {
              unknown j[260188] "index var" "insert auto destroy"
              (260190 'move' j[260188] _indexOfInterest[260161])
              {
                (260158 yield(260156 call _build_tuple(260141 call + cur j)(260154 call bucketForRecord(260150 call A(260147 call + cur j)) criterion startbit)))
              }
              label _continueLabel[260166]
              _indexOfInterest[260161]
              _iterator[260162]
            }
            label _breakLabel[260167]
          }
          (260205 call += cur classifyUnrollFactor)
        }
        label _continueLabel[260211]
        (260228 'move' tmp[260208](260217 call _cond_test(260219 call <= cur(260222 call - end_n(260225 call - classifyUnrollFactor 1)))))
        tmp[260208]
      }
      label _breakLabel[260212]
    }
    {
      unknown tmp[260272] "temp"
      (260296 'move' tmp[260272](260291 call _cond_test(260293 call <= cur end_n)))
      WhileDo
      {
        {
          (260264 yield(260262 call _build_tuple cur(260260 call bucketForRecord(260256 call A cur) criterion startbit)))
          (260269 call += cur 1)
        }
        label _continueLabel[260275]
        (260286 'move' tmp[260272](260281 call _cond_test(260283 call <= cur end_n)))
        tmp[260272]
      }
      label _breakLabel[260276]
    }
  }
}