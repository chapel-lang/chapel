AST dump for String after pass expandExternArrayCalls.
Module use list: 

{
  (26875 'use' ChapelStandard)
  (26880 'use' CString)
  (26884 'use' SysCTypes)
  (26888 'use' StringCasts)
  (26892 'use' ByteBufferHelpers)
  (26896 'use' BytesStringCommon)
  (26900 'use' SysBasic)
  function qio_decode_char_buf[26911](ref arg chr[26908] :
  (26907 call int[13] 32), ref arg nbytes[26914] :
  c_int, arg buf[26918] :
  c_string, arg buflen[26922] :
  ssize_t) : _unknown[43] "extern" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    syserr
  }
  function qio_encode_char_buf[26935](arg dst[26932] :
  c_void_ptr, arg chr[26941] :
  (26940 call int[13] 32)) : _unknown[43] "extern" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    syserr
  }
  function qio_nbytes_char[26957](arg chr[26954] :
  (26953 call int[13] 32)) : _unknown[43] "extern" "local args" "no fn body" "private" "fn synchronization free"
  {
  }
  { scopeless type
    c_int
  }
  const CHPL_SHORT_STRING_SIZE[26964] "const" "extern" "no doc" c_int
  type chpl__inPlaceBuffer[26969]
  {
  }
  function chpl__getInPlaceBufferData[26980](const  ref arg data[26977] :
  chpl__inPlaceBuffer) : _unknown[43] "extern" "local args" "no fn body" "no doc" "fn synchronization free"
  {
  }
  { scopeless type
    bufferType
  }
  function chpl__getInPlaceBufferDataForWrite[26992](ref arg data[26989] :
  chpl__inPlaceBuffer) : _unknown[43] "extern" "local args" "no fn body" "no doc" "fn synchronization free"
  {
  }
  { scopeless type
    bufferType
  }
  unknown debugStrings[26999] "config" "param" "private" 0
  function isInitialByte[27011](arg b[27008] :
  (27007 call uint[107] 8)) : _unknown[43] "inline" "no doc" "private"
  {
    (27023 return(27021 call !=(27018 call & b 192) 128))
  }
  { scopeless type
    bool[10]
  }
  type __serializeHelper[27052] unknown len[27031] int[13] unknown buff[27035] bufferType unknown size[27039] int[13] unknown locale_id[27044](27043 'typeof' chpl_nodeID) unknown shortData[27048] chpl__inPlaceBuffer
  type byteIndex[27114] unknown _bindex[27057] "no doc" int[13] function byteIndex[27114].init[27062](arg _mt[27118]:_MT[227], arg this[27116]:byteIndex[27114]) : _unknown[43] "method" "primary method" "no doc"
  {
  } function byteIndex[27114].init[27073](arg _mt[27122]:_MT[227], arg this[27120]:byteIndex[27114], arg i[27070] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    (27077 call = _bindex i)
  } function byteIndex[27114].init=[27089](arg _mt[27126]:_MT[227], arg this[27124]:byteIndex[27114], arg i[27086] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    (27093 call = _bindex i)
  } function byteIndex[27114].writeThis[27103](arg _mt[27130]:_MT[227], arg this[27128]:byteIndex[27114], arg f[27101]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (27107 call <~> f _bindex)
  }
  type codepointIndex[27192] unknown _cpindex[27135] "no doc" int[13] function codepointIndex[27192].init[27140](arg _mt[27196]:_MT[227], arg this[27194]:codepointIndex[27192]) : _unknown[43] "method" "primary method" "no doc"
  {
  } function codepointIndex[27192].init[27151](arg _mt[27200]:_MT[227], arg this[27198]:codepointIndex[27192], arg i[27148] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    (27155 call = _cpindex i)
  } function codepointIndex[27192].init=[27167](arg _mt[27204]:_MT[227], arg this[27202]:codepointIndex[27192], arg i[27164] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    (27171 call = _cpindex i)
  } function codepointIndex[27192].writeThis[27181](arg _mt[27208]:_MT[227], arg this[27206]:codepointIndex[27192], arg f[27179]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (27185 call <~> f _cpindex)
  }
  function chpl_build_bounded_range[27218](arg low[27215] :
  unknown t[27213], arg high[27221] :
  t) : _unknown[43] "no doc"
  {
    { scopeless
      (27243 return(27242 'new'(27241 call range t(_low = low)(_high = high))))
    }
  }
  where {
    (27232 call ||(27226 call == t byteIndex)(27230 call == t codepointIndex))
  }
  function chpl_build_low_bounded_range[27256](arg low[27253] :
  unknown t[27251]) : _unknown[43] "no doc"
  {
    { scopeless
      (27281 return(27280 'new'(27279 call range t(27274 call . BoundedRangeType c"boundedLow")(_low = low))))
    }
  }
  where {
    (27266 call ||(27260 call == t byteIndex)(27264 call == t codepointIndex))
  }
  function chpl_build_high_bounded_range[27294](arg high[27291] :
  unknown t[27289]) : _unknown[43] "no doc"
  {
    { scopeless
      (27319 return(27318 'new'(27317 call range t(27312 call . BoundedRangeType c"boundedHigh")(_high = high))))
    }
  }
  where {
    (27304 call ||(27298 call == t byteIndex)(27302 call == t codepointIndex))
  }
  function chpl__rangeStrideType[27331](arg idxType[27328] :
  byteIndex) type : _unknown[43] "no doc"
  {
    { scopeless
      (27334 return int[13])
    }
  }
  function chpl__rangeStrideType[27345](arg idxType[27342] :
  codepointIndex) type : _unknown[43] "no doc"
  {
    { scopeless
      (27348 return int[13])
    }
  }
  function chpl__rangeUnsignedType[27359](arg idxType[27356] :
  byteIndex) type : _unknown[43] "no doc"
  {
    { scopeless
      (27362 return uint[107])
    }
  }
  function chpl__rangeUnsignedType[27373](arg idxType[27370] :
  codepointIndex) type : _unknown[43] "no doc"
  {
    { scopeless
      (27376 return uint[107])
    }
  }
  function chpl__idxToInt[27388](arg i[27385] :
  unknown t[27383]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27404 return(27402 call _cast int[13] i))
    }
  }
  where {
    (27398 call ||(27392 call == t byteIndex)(27396 call == t codepointIndex))
  }
  function chpl__intToIdx[27416](arg idxType[27413] :
  byteIndex, arg i[27419] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27426 return(27424 call _cast byteIndex i))
    }
  }
  function chpl__intToIdx[27437](arg idxType[27434] :
  codepointIndex, arg i[27440] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27447 return(27445 call _cast codepointIndex i))
    }
  }
  function chpl__idxTypeToIntIdxType[27458](arg idxType[27455] :
  byteIndex) type : _unknown[43] "no doc"
  {
    { scopeless
      (27461 return int[13])
    }
  }
  function chpl__idxTypeToIntIdxType[27472](arg idxType[27469] :
  codepointIndex) type : _unknown[43] "no doc"
  {
    { scopeless
      (27475 return int[13])
    }
  }
  function >[27487](arg x[27484] :
  unknown t[27482], arg y[27490] :
  t) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27513 return(27511 call >(27505 call _cast int[13] x)(27509 call _cast int[13] y)))
    }
  }
  where {
    (27501 call ||(27495 call == t byteIndex)(27499 call == t codepointIndex))
  }
  function >[27526](arg x[27523] :
  unknown t[27521], arg y[27529] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27549 return(27547 call >(27544 call _cast int[13] x) y))
    }
  }
  where {
    (27540 call ||(27534 call == t byteIndex)(27538 call == t codepointIndex))
  }
  function >[27561](arg x[27558] :
  int[13], arg y[27565] :
  unknown t[27563]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27585 return(27583 call > x(27581 call _cast int[13] y)))
    }
  }
  where {
    (27576 call ||(27570 call == t byteIndex)(27574 call == t codepointIndex))
  }
  function +[27598](arg x[27595] :
  unknown t[27593], arg y[27601] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27624 return(27622 call _cast t(27619 call +(27616 call _cast int[13] x) y)))
    }
  }
  where {
    (27612 call ||(27606 call == t byteIndex)(27610 call == t codepointIndex))
  }
  function +[27636](arg x[27633] :
  int[13], arg y[27640] :
  unknown t[27638]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27663 return(27661 call _cast t(27658 call + x(27656 call _cast int[13] y))))
    }
  }
  where {
    (27651 call ||(27645 call == t byteIndex)(27649 call == t codepointIndex))
  }
  function +[27675](arg x[27672] :
  bufferType, arg y[27678] :
  byteIndex) : _unknown[43] "inline" "no doc"
  {
    (27688 return(27686 call + x(27684 call _cast int[13] y)))
  }
  function -[27700](arg x[27697] :
  unknown t[27695], arg y[27703] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27726 return(27724 call _cast t(27721 call -(27718 call _cast int[13] x) y)))
    }
  }
  where {
    (27714 call ||(27708 call == t byteIndex)(27712 call == t codepointIndex))
  }
  function -[27739](arg x[27736] :
  unknown t[27734], arg y[27742] :
  t) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27765 return(27763 call -(27757 call _cast int[13] x)(27761 call _cast int[13] y)))
    }
  }
  where {
    (27753 call ||(27747 call == t byteIndex)(27751 call == t codepointIndex))
  }
  function <[27778](arg x[27775] :
  unknown t[27773], arg y[27781] :
  t) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27804 return(27802 call <(27796 call _cast int[13] x)(27800 call _cast int[13] y)))
    }
  }
  where {
    (27792 call ||(27786 call == t byteIndex)(27790 call == t codepointIndex))
  }
  function <[27817](arg x[27814] :
  unknown t[27812], arg y[27820] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27840 return(27838 call <(27835 call _cast int[13] x) y))
    }
  }
  where {
    (27831 call ||(27825 call == t byteIndex)(27829 call == t codepointIndex))
  }
  function <[27852](arg x[27849] :
  int[13], arg y[27856] :
  unknown t[27854]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27876 return(27874 call < x(27872 call _cast int[13] y)))
    }
  }
  where {
    (27867 call ||(27861 call == t byteIndex)(27865 call == t codepointIndex))
  }
  function >=[27889](arg x[27886] :
  unknown t[27884], arg y[27892] :
  t) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27915 return(27913 call >=(27907 call _cast int[13] x)(27911 call _cast int[13] y)))
    }
  }
  where {
    (27903 call ||(27897 call == t byteIndex)(27901 call == t codepointIndex))
  }
  function >=[27928](arg x[27925] :
  unknown t[27923], arg y[27931] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27951 return(27949 call >=(27946 call _cast int[13] x) y))
    }
  }
  where {
    (27942 call ||(27936 call == t byteIndex)(27940 call == t codepointIndex))
  }
  function >=[27963](arg x[27960] :
  int[13], arg y[27967] :
  unknown t[27965]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (27987 return(27985 call >= x(27983 call _cast int[13] y)))
    }
  }
  where {
    (27978 call ||(27972 call == t byteIndex)(27976 call == t codepointIndex))
  }
  function <=[28000](arg x[27997] :
  unknown t[27995], arg y[28003] :
  t) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28026 return(28024 call <=(28018 call _cast int[13] x)(28022 call _cast int[13] y)))
    }
  }
  where {
    (28014 call ||(28008 call == t byteIndex)(28012 call == t codepointIndex))
  }
  function <=[28039](arg x[28036] :
  unknown t[28034], arg y[28042] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28062 return(28060 call <=(28057 call _cast int[13] x) y))
    }
  }
  where {
    (28053 call ||(28047 call == t byteIndex)(28051 call == t codepointIndex))
  }
  function <=[28074](arg x[28071] :
  int[13], arg y[28078] :
  unknown t[28076]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28098 return(28096 call <= x(28094 call _cast int[13] y)))
    }
  }
  where {
    (28089 call ||(28083 call == t byteIndex)(28087 call == t codepointIndex))
  }
  function ==[28111](arg x[28108] :
  unknown t[28106], arg y[28114] :
  t) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28137 return(28135 call ==(28129 call _cast int[13] x)(28133 call _cast int[13] y)))
    }
  }
  where {
    (28125 call ||(28119 call == t byteIndex)(28123 call == t codepointIndex))
  }
  function ==[28150](arg x[28147] :
  unknown t[28145], arg y[28153] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28173 return(28171 call ==(28168 call _cast int[13] x) y))
    }
  }
  where {
    (28164 call ||(28158 call == t byteIndex)(28162 call == t codepointIndex))
  }
  function ==[28185](arg x[28182] :
  int[13], arg y[28189] :
  unknown t[28187]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28209 return(28207 call == x(28205 call _cast int[13] y)))
    }
  }
  where {
    (28200 call ||(28194 call == t byteIndex)(28198 call == t codepointIndex))
  }
  function !=[28222](arg x[28219] :
  unknown t[28217], arg y[28225] :
  t) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28248 return(28246 call !=(28240 call _cast int[13] x)(28244 call _cast int[13] y)))
    }
  }
  where {
    (28236 call ||(28230 call == t byteIndex)(28234 call == t codepointIndex))
  }
  function !=[28261](arg x[28258] :
  unknown t[28256], arg y[28264] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28284 return(28282 call !=(28279 call _cast int[13] x) y))
    }
  }
  where {
    (28275 call ||(28269 call == t byteIndex)(28273 call == t codepointIndex))
  }
  function !=[28296](arg x[28293] :
  int[13], arg y[28300] :
  unknown t[28298]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28320 return(28318 call != x(28316 call _cast int[13] y)))
    }
  }
  where {
    (28311 call ||(28305 call == t byteIndex)(28309 call == t codepointIndex))
  }
  function ![28333](arg x[28330] :
  unknown t[28328]) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28351 return(28349 call !(28347 call _cast int[13] x)))
    }
  }
  where {
    (28343 call ||(28337 call == t byteIndex)(28341 call == t codepointIndex))
  }
  function _cond_test[28363](arg x[28360] :
  byteIndex) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28369 return(28367 call != x 0))
    }
  }
  function _cond_test[28380](arg x[28377] :
  codepointIndex) : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (28386 return(28384 call != x 0))
    }
  }
  function deprWarning[28393]() : _unknown[43] "private"
  {
    if(28435 call _cond_test showStringBytesInitDeprWarnings)
    {
      (28432 call compilerWarning(28429 call + "string.init is deprecated - " "please use createStringWith* instead"))
    }
  }
  function createStringWithBorrowedBuffer[28448](arg s[28445] :
  string[24]) : _unknown[43] "inline"
  {
    unknown ret[28451] string[24]
    (28459 call initWithBorrowedBuffer ret s)
    (28462 return ret)
  }
  function createStringWithBorrowedBuffer[28472](arg s[28469] :
  c_string, arg length[28478] =
  (28475 call . s c"length")) : _unknown[43]
  {
    (28501 return(28500 call createStringWithBorrowedBuffer(28490 call _cast(28489 call c_ptr(28487 call uint[107] 8)) s)(length = length)(size =(28497 call + length 1))))
  }
  function createStringWithBorrowedBuffer[28512](arg s[28509] :
  bufferType, arg length[28515] :
  int[13], arg size[28519] :
  int[13]) : _unknown[43] "inline"
  {
    unknown ret[28523] string[24]
    (28533 call initWithBorrowedBuffer ret s length size)
    (28536 return ret)
  }
  function createStringWithOwnedBuffer[28546](arg s[28543] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    (28568 call compilerError "A Chapel string cannot be passed to createStringWithOwnedBuffer")
  }
  function createStringWithOwnedBuffer[28579](arg s[28576] :
  c_string, arg length[28585] =
  (28582 call . s c"length")) : _unknown[43] "inline"
  {
    (28602 return(28601 call createStringWithOwnedBuffer(28591 call _cast bufferType s)(length = length)(size =(28598 call + length 1))))
  }
  function createStringWithOwnedBuffer[28613](arg s[28610] :
  bufferType, arg length[28616] :
  int[13], arg size[28620] :
  int[13]) : _unknown[43] "inline"
  {
    unknown ret[28624] string[24]
    (28634 call initWithOwnedBuffer ret s length size)
    (28637 return ret)
  }
  function createStringWithNewBuffer[28647](arg s[28644] :
  string[24]) : _unknown[43] "inline"
  {
    unknown ret[28650] string[24]
    (28658 call initWithNewBuffer ret s)
    (28661 return ret)
  }
  function createStringWithNewBuffer[28671](arg s[28668] :
  c_string, arg length[28677] =
  (28674 call . s c"length")) : _unknown[43] "inline"
  {
    (28694 return(28693 call createStringWithNewBuffer(28683 call _cast bufferType s)(length = length)(size =(28690 call + length 1))))
  }
  function createStringWithNewBuffer[28705](arg s[28702] :
  bufferType, arg length[28708] :
  int[13], arg size[28712] :
  int[13]) : _unknown[43] "inline"
  {
    unknown ret[28716] string[24]
    (28726 call initWithNewBuffer ret s length size)
    (28729 return ret)
  }
  type string[24] unknown len[28736] "no doc" 0 int[13] unknown _size[28741] "no doc" 0 int[13] unknown buff[28746] "no doc" nil[38] bufferType unknown isowned[28751] "no doc" 1 bool[10] unknown locale_id[28755] "no doc" chpl_nodeID function string[24].init[28760](arg _mt[35663]:_MT[227], arg this[35661]:string[24]) : _unknown[43] "method" "primary method" "no doc"
  {
  } function string[24].init[28771](arg _mt[35667]:_MT[227], arg this[35665]:string[24], arg s[28768] :
  string[24], arg isowned[28775] :
  bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    (28781 call deprWarning)
    const sRemote[28797] "const"(28795 call &&(28786 call == _local 0)(28793 call !=(28789 call . s c"locale_id") chpl_nodeID))
    const sLen[28804] "const"(28801 call . s c"len")
    (28812 call =(28808 call . this c"isowned") isowned)
    (28820 call(28816 call . this c"complete"))
    if(28969 call _cond_test(28824 call != sLen 0))
    {
      (28831 call =(28827 call . this c"len") sLen)
      if(28965 call _cond_test(28839 call &&(28836 call ! _local) sRemote))
      {
        (28846 call =(28842 call . this c"isowned") 1)
        (28866 call =(28851 call . this c"buff")(28865 call bufferCopyRemote(28856 call . s c"locale_id")(28861 call . s c"buff") sLen))
        (28877 call =(28870 call . this c"_size")(28875 call + sLen 1))
      }
      {
        if(28960 call _cond_test(28881 call . this c"isowned"))
        {
          { scopeless
            const tmp[28897] "const" "no copy" "temp"(28896 call bufferCopyLocal(28891 call . s c"buff") sLen)
            (28904 call _check_tuple_var_decl tmp[28897] 2)
            const buf[28884] "const"(28898 call tmp[28897] 1)
            const allocSize[28886] "const"(28901 call tmp[28897] 2)
          }
          (28915 call =(28911 call . this c"buff") buf)
          (28926 call =(28924 call(28919 call . this c"buff") sLen) 0)
          (28934 call =(28930 call . this c"_size") allocSize)
        }
        {
          (28945 call =(28938 call . this c"buff")(28942 call . s c"buff"))
          (28957 call =(28950 call . this c"_size")(28954 call . s c"_size"))
        }
      }
    }
  } function string[24].init=[28981](arg _mt[35671]:_MT[227], arg this[35669]:string[24], arg s[28978] :
  string[24]) : _unknown[43] "method" "primary method"
  {
    (28988 call(28984 call . this c"complete"))
    (28995 call initWithNewBuffer this s)
  } function string[24].init[29005](arg _mt[35675]:_MT[227], arg this[35673]:string[24], arg cs[29002] :
  c_string, arg length[29012] :
  int[13] =
  (29009 call . cs c"length"), arg isowned[29018] :
  bool[10] =
  1, arg needToCopy[29024] :
  bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    (29030 call deprWarning)
    (29038 call =(29034 call . this c"isowned") isowned)
    (29046 call(29042 call . this c"complete"))
    const cs_len[29049] "const" length
    (29069 call(29055 call . this c"reinitString")(29060 call _cast bufferType cs) cs_len(29066 call + cs_len 1) needToCopy)
  } function string[24].init=[29079](arg _mt[35679]:_MT[227], arg this[35677]:string[24], arg cs[29076] :
  c_string) : _unknown[43] "method" "primary method"
  {
    (29086 call(29082 call . this c"complete"))
    (29109 call initWithNewBuffer this(29094 call _cast bufferType cs)(length =(29097 call . cs c"length"))(size =(29106 call +(29102 call . cs c"length") 1)))
  } function string[24].init[29119](arg _mt[35683]:_MT[227], arg this[35681]:string[24], arg buff[29116] :
  bufferType, arg length[29122] :
  int[13], arg size[29126] :
  int[13], arg isowned[29131] :
  bool[10] =
  1, arg needToCopy[29137] :
  bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    (29143 call deprWarning)
    (29151 call =(29147 call . this c"isowned") isowned)
    (29159 call(29155 call . this c"complete"))
    (29170 call(29162 call . this c"reinitString") buff length size needToCopy)
  } function string[24].deinit[29176](arg _mt[35687]:_MT[227], ref arg this[35685]:string[24]) : _unknown[43] "destructor" "method" "primary method" "no doc"
  {
    if(29216 call _cond_test(29186 call && isowned(29184 call !=(29180 call . this c"buff") nil[38])))
    {
      {
        const tmp[29210] "const" "temp"
        (29211 'move' tmp[29210](29208 'deref'(29198 'chpl_on_locale_num'(29197 call chpl_buildLocaleID(29192 call . this c"locale_id") c_sublocid_any))))
        {
          (29205 call chpl_here_free(29201 call . this c"buff"))
        }
      }
    }
  } function string[24].chpl__serialize[29225](arg _mt[35691]:_MT[227], arg this[35689]:string[24]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown data[29228] chpl__inPlaceBuffer
    if(29248 call _cond_test(29234 call <= len CHPL_SHORT_STRING_SIZE))
    {
      (29245 call chpl_string_comm_get(29240 call chpl__getInPlaceBufferDataForWrite data) locale_id buff len)
    }
    (29261 return(29260 'new'(29259 call __serializeHelper len buff _size locale_id data)))
  } function string[24].chpl__deserialize[29269](arg _mt[35695]:_MT[227], arg this[35693]:string[24], arg data[29267]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(29364 call _cond_test(29276 call !=(29272 call . data c"locale_id") chpl_nodeID))
    {
      if(29341 call _cond_test(29283 call <=(29279 call . data c"len") CHPL_SHORT_STRING_SIZE))
      {
        (29305 return(29304 call createStringWithNewBuffer(29294 call chpl__getInPlaceBufferData(29290 call . data c"shortData"))(29297 call . data c"len")(29301 call . data c"size")))
      }
      {
        unknown localBuff[29323](29322 call bufferCopyRemote(29310 call . data c"locale_id")(29315 call . data c"buff")(29319 call . data c"len"))
        (29339 return(29338 call createStringWithOwnedBuffer localBuff(29331 call . data c"len")(29335 call . data c"size")))
      }
    }
    {
      (29361 return(29360 call createStringWithBorrowedBuffer(29348 call . data c"buff")(29353 call . data c"len")(29357 call . data c"size")))
    }
  } function string[24].reinitString[29377](arg _mt[35699]:_MT[227], ref arg this[35697]:string[24], arg buf[29374] :
  bufferType, arg s_len[29380] :
  int[13], arg size[29384] :
  int[13], arg needToCopy[29389] :
  bool[10] =
  1) : _unknown[43] "method" "primary method" "no doc"
  {
    if(29407 call _cond_test(29403 call &&(29398 call(29394 call . this c"isEmpty"))(29401 call == buf nil[38])))
    {
      { scopeless
        (29405 return)
      }
    }
    if(29646 call _cond_test(29415 call != s_len 0))
    {
      if(29582 call _cond_test needToCopy)
      {
        if(29512 call _cond_test(29434 call ||(29422 call !(29419 call . this c"isowned"))(29432 call >(29426 call + s_len 1)(29429 call . this c"_size"))))
        {
          if(29458 call _cond_test(29448 call &&(29437 call . this c"isowned")(29446 call !(29445 call(29441 call . this c"isEmpty")))))
          {
            { scopeless
              (29456 call bufferFree(29452 call . this c"buff"))
            }
          }
          { scopeless
            const tmp[29476] "const" "no copy" "temp"(29475 call bufferAlloc(29472 call + s_len 1))
            (29483 call _check_tuple_var_decl tmp[29476] 2)
            const buf[29464] "const"(29477 call tmp[29476] 1)
            const allocSize[29466] "const"(29480 call tmp[29476] 2)
          }
          (29493 call =(29489 call . this c"buff") buf)
          (29501 call =(29497 call . this c"_size") allocSize)
          (29509 call =(29505 call . this c"isowned") 1)
        }
        (29525 call bufferMemmoveLocal(29519 call . this c"buff") buf s_len)
        (29535 call =(29533 call(29528 call . this c"buff") s_len) 0)
      }
      {
        if(29560 call _cond_test(29550 call &&(29539 call . this c"isowned")(29548 call !(29547 call(29543 call . this c"isEmpty")))))
        {
          { scopeless
            (29558 call bufferFree(29554 call . this c"buff"))
          }
        }
        (29571 call =(29567 call . this c"buff") buf)
        (29579 call =(29575 call . this c"_size") size)
      }
    }
    {
      if(29609 call _cond_test(29599 call &&(29588 call . this c"isowned")(29597 call !(29596 call(29592 call . this c"isEmpty")))))
      {
        { scopeless
          (29607 call bufferFree(29603 call . this c"buff"))
        }
      }
      (29620 call =(29616 call . this c"_size") 0)
      if(29642 call _cond_test needToCopy)
      {
        (29629 call =(29625 call . this c"buff") nil[38])
      }
      {
        (29638 call =(29634 call . this c"buff") buf)
      }
    }
    (29655 call =(29651 call . this c"len") s_len)
  } function string[24].length[29662](arg _mt[35703]:_MT[227], arg this[35701]:string[24]) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    { scopeless
      (29665 return numCodepoints)
    }
  } function string[24].size[29672](arg _mt[35707]:_MT[227], arg this[35705]:string[24]) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    { scopeless
      (29675 return numCodepoints)
    }
  } function string[24].numBytes[29682](arg _mt[35711]:_MT[227], arg this[35709]:string[24]) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    { scopeless
      (29685 return len)
    }
  } function string[24].numCodepoints[29692](arg _mt[35715]:_MT[227], arg this[35713]:string[24]) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown localThis[29701](29700 call(29696 call . this c"localize")) string[24]
    unknown n[29706] 0
    unknown i[29710] 0
    {
      unknown tmp[29814] "temp"
      (29844 'move' tmp[29814](29836 call _cond_test(29838 call < i(29841 call . localThis c"len"))))
      WhileDo
      {
        {
          (29722 call += i 1)
          {
            unknown tmp[29752] "temp"
            (29806 'move' tmp[29752](29786 call _cond_test(29788 call &&(29790 call < i(29793 call . localThis c"len"))(29797 call !(29799 call isInitialByte(29804 call(29801 call . localThis c"buff") i))))))
            WhileDo
            {
              { scopeless
                (29749 call += i 1)
              }
              label _continueLabel[29755]
              (29781 'move' tmp[29752](29761 call _cond_test(29763 call &&(29765 call < i(29768 call . localThis c"len"))(29772 call !(29774 call isInitialByte(29779 call(29776 call . localThis c"buff") i))))))
              tmp[29752]
            }
            label _breakLabel[29756]
          }
          (29811 call += n 1)
        }
        label _continueLabel[29817]
        (29831 'move' tmp[29814](29823 call _cond_test(29825 call < i(29828 call . localThis c"len"))))
        tmp[29814]
      }
      label _breakLabel[29818]
    }
    (29848 return n)
  } function string[24].localize[29854](arg _mt[35719]:_MT[227], arg this[35717]:string[24]) : _unknown[43] "inline" "method" "primary method"
  {
    if(29883 call _cond_test(29865 call || _local(29863 call ==(29859 call . this c"locale_id") chpl_nodeID)))
    {
      (29871 return(29870 call createStringWithBorrowedBuffer this))
    }
    {
      const x[29876] "const" this string[24]
      (29881 return x)
    }
  }
  { scopeless type
    string[24]
  } function string[24].c_str[29893](arg _mt[35723]:_MT[227], arg this[35721]:string[24]) : _unknown[43] "inline" "method" "primary method"
  {
    (29900 return(29899 call getCStr this))
  }
  { scopeless type
    c_string
  } function string[24].c_str[29908](arg _mt[35727]:_MT[227], param arg this[35725]:string[24]) param : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    function _cast[29917](arg t[29914] :
    c_string, arg x[29920] :
    string[24]) : _unknown[43] "inline"
    {
      (29928 return(29927 'cast' t x))
    }
    (29938 return(29936 call _cast c_string this))
  }
  { scopeless type
    c_string
  } function string[24].these[29945](arg _mt[35731]:_MT[227], arg this[35729]:string[24]) : _unknown[43] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[29963] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[29964] "expr temp" "temp"
      (29973 'move' _iterator[29964](29971 call _getIterator(29956 call(29952 call . this c"codepoints"))))
      Defer
      {
        {
          (29990 call _freeIterator _iterator[29964])
        }
      }
      { scopeless type
        (29979 'move' _indexOfInterest[29963](29976 call iteratorIndex _iterator[29964]))
      }
      ForLoop
      {
        unknown cp[29983] "index var" "insert auto destroy"
        (29985 'move' cp[29983] _indexOfInterest[29963])
        { scopeless
          (29961 yield(29960 call codepointToString cp))
        }
        label _continueLabel[29968]
        _indexOfInterest[29963]
        _iterator[29964]
      }
      label _breakLabel[29969]
    }
  }
  { scopeless type
    string[24]
  } function string[24].chpl_bytes[30003](arg _mt[35735]:_MT[227], arg this[35733]:string[24]) : _unknown[43] "iterator fn" "method" "primary method"
  {
    unknown localThis[30013](30012 call(30008 call . this c"localize")) string[24]
    {
      unknown _indexOfInterest[30037] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[30038] "expr temp" "temp"
      (30047 'move' _iterator[30038](30045 call _getIterator(30057 call chpl_direct_counted_range_iter 0(30053 call . localThis c"len"))))
      Defer
      {
        {
          (30073 call _freeIterator _iterator[30038])
        }
      }
      { scopeless type
        (30062 'move' _indexOfInterest[30037](30059 call iteratorIndex _iterator[30038]))
      }
      ForLoop
      {
        unknown i[30066] "index var" "insert auto destroy"
        (30068 'move' i[30066] _indexOfInterest[30037])
        {
          (30034 yield(30033 call(30028 call . localThis c"buff") i))
        }
        label _continueLabel[30042]
        _indexOfInterest[30037]
        _iterator[30038]
      }
      label _breakLabel[30043]
    }
  }
  { scopeless type
    byteType
  } function string[24].codepoints[30085](arg _mt[35739]:_MT[227], arg this[35737]:string[24]) : _unknown[43] "iterator fn" "method" "primary method"
  {
    unknown localThis[30098](30097 call(30093 call . this c"localize")) string[24]
    unknown i[30103] 0
    {
      unknown tmp[30167] "temp"
      (30197 'move' tmp[30167](30189 call _cond_test(30191 call < i(30194 call . localThis c"len"))))
      WhileDo
      {
        {
          unknown cp[30117](30116 call int[13] 32)
          unknown nbytes[30122] c_int
          unknown multibytes[30135](30133 call _cast c_string(30130 call +(30126 call . localThis c"buff") i))
          unknown maxbytes[30148](30146 call _cast ssize_t(30143 call -(30139 call . localThis c"len") i))
          (30157 call qio_decode_char_buf cp nbytes multibytes maxbytes)
          (30160 yield cp)
          (30164 call += i nbytes)
        }
        label _continueLabel[30170]
        (30184 'move' tmp[30167](30176 call _cond_test(30178 call < i(30181 call . localThis c"len"))))
        tmp[30167]
      }
      label _breakLabel[30171]
    }
  }
  { scopeless type
    (30090 call int[13] 32)
  } function string[24]._cpIndexLen[30212](arg _mt[35743]:_MT[227], arg this[35741]:string[24], arg start[30209] =
  (30207 call _cast byteIndex 1)) : _unknown[43] "iterator fn" "method" "primary method" "no doc"
  {
    unknown localThis[30221](30220 call(30216 call . this c"localize")) string[24]
    unknown i[30232](30230 call -(30227 call _cast int[13] start) 1)
    if(30322 call _cond_test(30237 call > i 0))
    {
      unknown tmp[30265] "temp"
      (30319 'move' tmp[30265](30299 call _cond_test(30301 call &&(30303 call < i(30306 call . localThis c"len"))(30310 call !(30312 call isInitialByte(30317 call(30314 call . localThis c"buff") i))))))
      WhileDo
      {
        { scopeless
          (30262 call += i 1)
        }
        label _continueLabel[30268]
        (30294 'move' tmp[30265](30274 call _cond_test(30276 call &&(30278 call < i(30281 call . localThis c"len"))(30285 call !(30287 call isInitialByte(30292 call(30289 call . localThis c"buff") i))))))
        tmp[30265]
      }
      label _breakLabel[30269]
    }
    {
      unknown tmp[30407] "temp"
      (30437 'move' tmp[30407](30429 call _cond_test(30431 call < i(30434 call . localThis c"len"))))
      WhileDo
      {
        {
          unknown cp[30337](30336 call int[13] 32)
          unknown nbytes[30342] c_int
          unknown multibytes[30355](30353 call _cast c_string(30350 call +(30346 call . localThis c"buff") i))
          unknown maxbytes[30368](30366 call _cast ssize_t(30363 call -(30359 call . localThis c"len") i))
          (30377 call qio_decode_char_buf cp nbytes multibytes maxbytes)
          (30400 yield(30398 call _build_tuple(30384 call _cast(30383 call int[13] 32) cp)(30391 call _cast byteIndex(30388 call + i 1))(30396 call _cast int[13] nbytes)))
          (30404 call += i nbytes)
        }
        label _continueLabel[30410]
        (30424 'move' tmp[30407](30416 call _cond_test(30418 call < i(30421 call . localThis c"len"))))
        tmp[30407]
      }
      label _breakLabel[30411]
    }
  } function string[24]._indexLen[30451](arg _mt[35747]:_MT[227], arg this[35745]:string[24], arg start[30448] =
  (30446 call _cast byteIndex 1)) : _unknown[43] "iterator fn" "method" "primary method" "no doc"
  {
    unknown localThis[30460](30459 call(30455 call . this c"localize")) string[24]
    unknown i[30471](30469 call -(30466 call _cast int[13] start) 1)
    if(30561 call _cond_test(30476 call > i 0))
    {
      unknown tmp[30504] "temp"
      (30558 'move' tmp[30504](30538 call _cond_test(30540 call &&(30542 call < i(30545 call . localThis c"len"))(30549 call !(30551 call isInitialByte(30556 call(30553 call . localThis c"buff") i))))))
      WhileDo
      {
        { scopeless
          (30501 call += i 1)
        }
        label _continueLabel[30507]
        (30533 'move' tmp[30504](30513 call _cond_test(30515 call &&(30517 call < i(30520 call . localThis c"len"))(30524 call !(30526 call isInitialByte(30531 call(30528 call . localThis c"buff") i))))))
        tmp[30504]
      }
      label _breakLabel[30508]
    }
    {
      unknown tmp[30684] "temp"
      (30714 'move' tmp[30684](30706 call _cond_test(30708 call < i(30711 call . localThis c"len"))))
      WhileDo
      {
        {
          unknown j[30576](30574 call + i 1)
          {
            unknown tmp[30606] "temp"
            (30660 'move' tmp[30606](30640 call _cond_test(30642 call &&(30644 call < j(30647 call . localThis c"len"))(30651 call !(30653 call isInitialByte(30658 call(30655 call . localThis c"buff") j))))))
            WhileDo
            {
              { scopeless
                (30603 call += j 1)
              }
              label _continueLabel[30609]
              (30635 'move' tmp[30606](30615 call _cond_test(30617 call &&(30619 call < j(30622 call . localThis c"len"))(30626 call !(30628 call isInitialByte(30633 call(30630 call . localThis c"buff") j))))))
              tmp[30606]
            }
            label _breakLabel[30610]
          }
          (30677 yield(30675 call _build_tuple(30668 call _cast byteIndex(30665 call + i 1))(30672 call - j i)))
          (30681 call = i j)
        }
        label _continueLabel[30687]
        (30701 'move' tmp[30684](30693 call _cond_test(30695 call < i(30698 call . localThis c"len"))))
        tmp[30684]
      }
      label _breakLabel[30688]
    }
  } function string[24].toByte[30721](arg _mt[35751]:_MT[227], arg this[35749]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(30754 call _cond_test(30732 call !=(30728 call . this c"len") 1))
    {
      { scopeless
        (30752 call halt "string.toByte() only accepts single-byte strings")
      }
    }
    (30775 return(30774 call bufferGetByte(buf =(30762 call . this c"buff"))(off = 0)(loc =(30770 call . this c"locale_id"))))
  }
  { scopeless type
    (30726 call uint[107] 8)
  } function string[24].byte[30786](arg _mt[35755]:_MT[227], arg this[35753]:string[24], arg i[30783] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    if(30814 call _cond_test(30806 call && boundsChecking(30804 call ||(30795 call <= i 0)(30802 call > i(30799 call . this c"len")))))
    {
      { scopeless
        (30812 call halt "index out of bounds of bytes: " i)
      }
    }
    (30838 return(30837 call bufferGetByte(buf =(30822 call . this c"buff"))(off =(30829 call - i 1))(loc =(30833 call . this c"locale_id"))))
  }
  { scopeless type
    (30791 call uint[107] 8)
  } function string[24].toCodepoint[30845](arg _mt[35759]:_MT[227], arg this[35757]:string[24]) : _unknown[43] "method" "primary method"
  {
    unknown localThis[30858](30857 call(30853 call . this c"localize")) string[24]
    if(30890 call _cond_test(30867 call(30863 call . localThis c"isEmpty")))
    {
      { scopeless
        (30888 call halt "string.toCodepoint() only accepts single-codepoint strings")
      }
    }
    unknown cp[30899](30898 call int[13] 32)
    unknown nbytes[30903] c_int
    unknown multibytes[30913](30911 call _cast c_string(30907 call . localThis c"buff"))
    unknown maxbytes[30923](30921 call _cast ssize_t(30917 call . localThis c"len"))
    (30932 call qio_decode_char_buf cp nbytes multibytes maxbytes)
    if(30949 call _cond_test(30942 call !=(30935 call . localThis c"len")(30940 call _cast int[13] nbytes)))
    {
      { scopeless
        (30947 call halt "string.toCodepoint() only accepts single-codepoint strings")
      }
    }
    (30955 return cp)
  }
  { scopeless type
    (30850 call int[13] 32)
  } function string[24].codepoint[30966](arg _mt[35763]:_MT[227], arg this[35761]:string[24], arg i[30963] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    const idx[30976] "const"(30974 call _cast int[13] i)
    if(31008 call _cond_test(30985 call && boundsChecking(30983 call <= idx 0)))
    {
      { scopeless
        (31006 call halt "index out of bounds of string: " idx)
      }
    }
    unknown j[31014] 1
    {
      unknown _indexOfInterest[31042] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[31043] "expr temp" "temp"
      (31052 'move' _iterator[31043](31050 call _getIterator(31023 call(31019 call . this c"codepoints"))))
      Defer
      {
        {
          (31069 call _freeIterator _iterator[31043])
        }
      }
      { scopeless type
        (31058 'move' _indexOfInterest[31042](31055 call iteratorIndex _iterator[31043]))
      }
      ForLoop
      {
        unknown cp[31062] "index var" "insert auto destroy"
        (31064 'move' cp[31062] _indexOfInterest[31042])
        {
          if(31031 call _cond_test(31026 call == j idx))
          {
            { scopeless
              (31029 return cp)
            }
          }
          (31039 call += j 1)
        }
        label _continueLabel[31047]
        _indexOfInterest[31042]
        _iterator[31043]
      }
      label _breakLabel[31048]
    }
    if(31083 call _cond_test boundsChecking)
    {
      { scopeless
        (31081 call halt "index out of bounds of string: " idx)
      }
    }
    (31095 return(31093 call _cast(31092 call int[13] 32) 0))
  }
  { scopeless type
    (30971 call int[13] 32)
  } function string[24].this[31106](arg _mt[35767]:_MT[227], arg this[35765]:string[24], arg i[31103] :
  byteIndex) : _unknown[43] "method" "primary method"
  {
    unknown idx[31113](31111 call _cast int[13] i)
    if(31139 call _cond_test(31131 call && boundsChecking(31129 call ||(31120 call <= idx 0)(31127 call > idx(31124 call . this c"len")))))
    {
      { scopeless
        (31137 call halt "index out of bounds of string: " idx)
      }
    }
    unknown ret[31145] string[24]
    unknown maxbytes[31161](31159 call _cast ssize_t(31156 call -(31149 call . this c"len")(31154 call - idx 1)))
    if(31179 call _cond_test(31172 call ||(31166 call < maxbytes 0)(31170 call > maxbytes 4)))
    {
      { scopeless
        (31176 call = maxbytes 4)
      }
    }
    { scopeless
      unknown tmp[31209] "no copy" "temp"(31208 call bufferCopy(buf =(31191 call . this c"buff"))(off =(31198 call - idx 1))(len = maxbytes)(loc =(31204 call . this c"locale_id")))
      (31216 call _check_tuple_var_decl tmp[31209] 2)
      unknown newBuff[31184](31210 call tmp[31209] 1)
      unknown allocSize[31186](31213 call tmp[31209] 2)
    }
    (31226 call =(31222 call . ret c"_size") allocSize)
    (31234 call =(31230 call . ret c"buff") newBuff)
    (31242 call =(31238 call . ret c"isowned") 1)
    unknown multibytes[31249](31246 call . ret c"buff")
    unknown cp[31256](31255 call int[13] 32)
    unknown nbytes[31260] c_int
    (31272 call qio_decode_char_buf cp nbytes(31269 call _cast c_string multibytes) maxbytes)
    (31282 call =(31280 call(31275 call . ret c"buff") nbytes) 0)
    (31290 call =(31286 call . ret c"len") nbytes)
    (31294 return ret)
  }
  { scopeless type
    string[24]
  } function string[24].this[31305](arg _mt[35771]:_MT[227], arg this[35769]:string[24], arg i[31302] :
  codepointIndex) : _unknown[43] "method" "primary method"
  {
    if(31332 call _cond_test(31313 call(31309 call . this c"isEmpty")))
    {
      { scopeless
        (31330 return "")
      }
    }
    const idx[31342] "const"(31340 call _cast int[13] i)
    (31357 return(31356 call codepointToString(31354 call(31349 call . this c"codepoint") idx)))
  }
  { scopeless type
    string[24]
  } function string[24].this[31368](arg _mt[35775]:_MT[227], arg this[35773]:string[24], arg i[31365] :
  int[13]) : _unknown[43] "inline" "method" "primary method"
  {
    (31378 return(31377 call this(31374 call _cast codepointIndex i)))
  }
  { scopeless type
    string[24]
  } function string[24]._getView[31393](arg _mt[35779]:_MT[227], arg this[35777]:string[24], arg r[31390] :
  (31389 call range ?[249])) : _unknown[43] "method" "primary method" "no doc"
  {
    if(31534 call _cond_test boundsChecking)
    {
      if(31464 call _cond_test(31426 call &&(31408 call(31404 call . r c"hasLowBound"))(31424 call ||(31415 call !(31414 call(31410 call . r c"hasHighBound")))(31422 call >(31418 call . r c"size") 0))))
      {
        if(31458 call _cond_test(31436 call <=(31433 call _cast int[13](31429 call . r c"low")) 0))
        {
          { scopeless
            (31456 call halt "range out of bounds of string")
          }
        }
      }
      if(31530 call _cond_test(31492 call &&(31474 call(31470 call . r c"hasHighBound"))(31490 call ||(31481 call !(31480 call(31476 call . r c"hasLowBound")))(31488 call >(31484 call . r c"size") 0))))
      {
        if(31524 call _cond_test(31517 call ||(31502 call <(31499 call _cast int[13](31495 call . r c"high")) 0)(31515 call >(31509 call _cast int[13](31505 call . r c"high"))(31512 call . this c"len"))))
        {
          { scopeless
            (31522 call halt "range out of bounds of string")
          }
        }
      }
    }
    const r1[31561] "const"(31560 call r(31557 call chpl_build_bounded_range(31545 call _cast(31542 call . r c"idxType") 1)(31555 call _cast(31552 call . r c"idxType")(31548 call . this c"len"))))
    if(31620 call _cond_test(31565 call . r1 c"stridable"))
    {
      const ret[31590] "const"(31588 call chpl_by(31582 call chpl_build_bounded_range(31573 call _cast int[13](31569 call . r1 c"low"))(31580 call _cast int[13](31576 call . r1 c"high")))(31585 call . r1 c"stride"))
      (31595 return ret)
    }
    {
      const ret[31613] "const"(31611 call chpl_build_bounded_range(31602 call _cast int[13](31598 call . r1 c"low"))(31609 call _cast int[13](31605 call . r1 c"high")))
      (31618 return ret)
    }
  }
  where {
    (31400 call ==(31396 call . r c"idxType") byteIndex)
  } function string[24]._getView[31636](arg _mt[35783]:_MT[227], arg this[35781]:string[24], arg r[31633] :
  (31632 call range ?[249])) : _unknown[43] "method" "primary method" "no doc"
  {
    if(31672 call _cond_test(31646 call . r c"stridable"))
    {
      (31669 call compilerError "string slicing doesn't support stridable codepoint ranges")
    }
    if(31729 call _cond_test boundsChecking)
    {
      if(31724 call _cond_test(31701 call &&(31683 call(31679 call . r c"hasLowBound"))(31699 call ||(31690 call !(31689 call(31685 call . r c"hasHighBound")))(31697 call >(31693 call . r c"size") 0))))
      {
        if(31718 call _cond_test(31711 call <=(31708 call _cast int[13](31704 call . r c"low")) 0))
        {
          { scopeless
            (31716 call halt "range out of bounds of string")
          }
        }
      }
    }
    const cp_low[31762] "const"(31759 IfExpr (31749 call &&(31738 call(31734 call . r c"hasLowBound"))(31747 call >(31744 call _cast int[13](31740 call . r c"low")) 0)) then
    { scopeless
      (31756 call _cast int[13](31752 call . r c"low"))
    } else
    { scopeless
      1
    } )
    const cp_high[31788] "const"(31785 IfExpr (31770 call(31766 call . r c"hasHighBound")) then
    { scopeless
      (31776 call _cast int[13](31772 call . r c"high"))
    } else
    { scopeless
      (31783 call +(31779 call . this c"len") 1)
    } )
    unknown cp_count[31792] 1
    unknown byte_low[31802](31800 call +(31796 call . this c"len") 1)
    unknown byte_high[31809](31806 call . this c"len")
    if(31943 call _cond_test(31814 call > cp_high 0))
    {
      {
        unknown _indexOfInterest[31894] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[31895] "expr temp" "temp"
        (31904 'move' _iterator[31895](31902 call _getIterator(31828 call(31824 call . this c"_indexLen"))))
        Defer
        {
          {
            (31935 call _freeIterator _iterator[31895])
          }
        }
        { scopeless type
          (31910 'move' _indexOfInterest[31894](31907 call iteratorIndex _iterator[31895]))
        }
        ForLoop
        {
          (31915 call _check_tuple_var_decl _indexOfInterest[31894] 2)
          unknown i[31921] "index var" "insert auto destroy"
          (31923 'move' i[31921](31919 call _indexOfInterest[31894] 1))
          unknown nbytes[31928] "index var" "insert auto destroy"
          (31930 'move' nbytes[31928](31926 call _indexOfInterest[31894] 2))
          {
            if(31858 call _cond_test(31831 call == cp_count cp_low))
            {
              (31838 call = byte_low(31836 call _cast int[13] i))
              if(31853 call _cond_test(31848 call !(31847 call(31843 call . r c"hasHighBound"))))
              {
                { scopeless
                  break nil[38]
                }
              }
            }
            if(31885 call _cond_test(31865 call == cp_count cp_high))
            {
              (31878 call = byte_high(31876 call -(31873 call +(31870 call _cast int[13] i) nbytes) 1))
              break nil[38]
            }
            (31891 call += cp_count 1)
          }
          label _continueLabel[31899]
          _indexOfInterest[31894]
          _iterator[31895]
        }
        label _breakLabel[31900]
      }
    }
    if(32011 call _cond_test boundsChecking)
    {
      if(32006 call _cond_test(31971 call &&(31953 call(31949 call . r c"hasHighBound"))(31969 call ||(31960 call !(31959 call(31955 call . r c"hasLowBound")))(31967 call >(31963 call . r c"size") 0))))
      {
        if(32000 call _cond_test(31993 call ||(31981 call <(31978 call _cast int[13](31974 call . r c"high")) 0)(31991 call >(31988 call _cast int[13](31984 call . r c"high")) cp_count)))
        {
          { scopeless
            (31998 call halt "range out of bounds of string")
          }
        }
      }
    }
    const r1[32019] "const"(32017 call chpl_build_bounded_range byte_low byte_high)
    const ret[32034] "const"(32033 call r1(32030 call #(32024 call chpl_build_low_bounded_range 1)(32027 call . this c"len")))
    (32038 return ret)
  }
  where {
    (31643 call !=(31639 call . r c"idxType") byteIndex)
  } function string[24].this[32052](arg _mt[35787]:_MT[227], arg this[35785]:string[24], arg r[32049] :
  (32048 call range ?[249])) : _unknown[43] "inline" "method" "primary method"
  {
    (32060 return(32059 call getSlice this r))
  }
  { scopeless type
    string[24]
  } function string[24].substring[32072](arg _mt[35791]:_MT[227], arg this[35789]:string[24], arg i[32069] :
  int[13]) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (32092 call compilerError "substring removed: use string[index]")
  } function string[24].substring[32103](arg _mt[35795]:_MT[227], arg this[35793]:string[24], arg r[32100] :
  range) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (32123 call compilerError "substring removed: use string[range]")
  } function string[24].isEmpty[32130](arg _mt[35799]:_MT[227], arg this[35797]:string[24]) : _unknown[43] "inline" "method" "primary method"
  {
    (32140 return(32138 call ==(32134 call . this c"len") 0))
  }
  { scopeless type
    bool[10]
  } function string[24].writeThis[32150](arg _mt[35803]:_MT[227], arg this[35801]:string[24], arg f[32148]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (32155 call compilerError "not implemented: writeThis")
  } function string[24].readThis[32164](arg _mt[35807]:_MT[227], arg this[35805]:string[24], arg f[32162]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (32169 call compilerError "not implemented: readThis")
  } function string[24].startsWith[32182](arg _mt[35811]:_MT[227], arg this[35809]:string[24], arg needles[32178] ... :
  string[24]) : _unknown[43] "inline" "method" "primary method"
  {
    (32192 return(32191 call startsEndsWith this needles(fromLeft = 1)))
  }
  { scopeless type
    bool[10]
  } function string[24].endsWith[32206](arg _mt[35815]:_MT[227], arg this[35813]:string[24], arg needles[32202] ... :
  string[24]) : _unknown[43] "inline" "method" "primary method"
  {
    (32216 return(32215 call startsEndsWith this needles(fromLeft = 0)))
  }
  { scopeless type
    bool[10]
  } function string[24]._search_helper[32228](arg _mt[35819]:_MT[227], arg this[35817]:string[24], arg needle[32225] :
  string[24], arg region[32234] :
  (32233 call range ?[249]), param arg count[32238] :
  bool[10], param arg fromLeft[32243] :
  bool[10] =
  1) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    unknown ret[32249] 0 int[13]
    {
      const tmp[32782] "const" "temp"
      (32783 'move' tmp[32782](32780 'deref'(32263 'chpl_on_locale_num'(32262 call chpl_buildLocaleID(32257 call . this c"locale_id") c_sublocid_any))))
      {
        unknown localRet[32268](32266 call - 1) int[13]
        const nLen[32276] "const"(32273 call . needle c"len")
        const view[32286] "const"(32285 call(32280 call . this c"_getView") region)
        const thisLen[32293] "const"(32290 call . view c"size")
        if(32521 call _cond_test count)
        {
          if(32478 call _cond_test(32299 call == nLen 0))
          {
            if(32473 call _cond_test(32333 call ||(32315 call &&(32306 call(32302 call . region c"hasLowBound"))(32313 call ==(32311 'typeof'(32308 call . region c"low")) byteIndex))(32331 call &&(32322 call(32318 call . region c"hasHighBound"))(32329 call ==(32327 'typeof'(32324 call . region c"high")) byteIndex))))
            {
              (32340 call = localRet(32338 call + thisLen 1))
            }
            {
              unknown nCodepoints[32345] 0
              unknown nextIdx[32350] 0
              {
                unknown _indexOfInterest[32432] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[32433] "expr temp" "temp"
                (32442 'move' _iterator[32433](32440 call _getIterator view))
                Defer
                {
                  {
                    (32458 call _freeIterator _iterator[32433])
                  }
                }
                { scopeless type
                  (32447 'move' _indexOfInterest[32432](32444 call iteratorIndex _iterator[32433]))
                }
                ForLoop
                {
                  unknown i[32451] "index var" "insert auto destroy"
                  (32453 'move' i[32451] _indexOfInterest[32432])
                  {
                    if(32427 call _cond_test(32357 call > i nextIdx))
                    {
                      (32361 call += nCodepoints 1)
                      unknown cp[32369](32368 call int[13] 32)
                      unknown nbytes[32373] c_int
                      unknown multibytes[32389](32387 call _cast c_string(32384 call -(32381 call +(32377 call . this c"buff") i) 1))
                      unknown maxbytes[32405](32403 call _cast ssize_t(32400 call -(32393 call . this c"len")(32398 call - i 1)))
                      (32414 call qio_decode_char_buf cp nbytes multibytes maxbytes)
                      (32424 call = nextIdx(32422 call +(32419 call - i 1) nbytes))
                    }
                  }
                  label _continueLabel[32437]
                  _indexOfInterest[32432]
                  _iterator[32433]
                }
                label _breakLabel[32438]
              }
              (32470 call = localRet(32468 call + nCodepoints 1))
            }
          }
        }
        {
          if(32516 call _cond_test(32485 call == nLen 0))
          {
            if(32511 call _cond_test fromLeft)
            {
              (32490 call = localRet 0)
            }
            {
              (32507 call = localRet(32504 IfExpr (32497 call == thisLen 0) then
              { scopeless
                0
              } else
              { scopeless
                (32502 call + thisLen 1)
              } ))
            }
          }
        }
        if(32535 call _cond_test(32527 call > nLen thisLen))
        {
          (32531 call = localRet 0)
        }
        if(32771 call _cond_test(32543 call == localRet(32541 call - 1)))
        {
          (32547 call = localRet 0)
          const localNeedle[32558] "const"(32557 call(32553 call . needle c"localize")) string[24]
          const numPossible[32568] "const"(32566 call +(32563 call - thisLen nLen) 1)
          const searchSpace[32592] "const"(32589 IfExpr  fromLeft then
          { scopeless
            (32576 call #(32573 call chpl_build_low_bounded_range 0) numPossible)
          } else
          { scopeless
            (32587 call chpl_by(32582 call #(32579 call chpl_build_low_bounded_range 0) numPossible)(32585 call - 1))
          } )
          {
            unknown _indexOfInterest[32738] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[32739] "expr temp" "temp"
            (32748 'move' _iterator[32739](32746 call _getIterator searchSpace))
            Defer
            {
              {
                (32764 call _freeIterator _iterator[32739])
              }
            }
            { scopeless type
              (32753 'move' _indexOfInterest[32738](32750 call iteratorIndex _iterator[32739]))
            }
            ForLoop
            {
              unknown i[32757] "index var" "insert auto destroy"
              (32759 'move' i[32757] _indexOfInterest[32738])
              {
                {
                  unknown _indexOfInterest[32680] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[32681] "expr temp" "temp"
                  (32690 'move' _iterator[32681](32688 call _getIterator(32697 call chpl_direct_counted_range_iter 0 nLen)))
                  Defer
                  {
                    {
                      (32713 call _freeIterator _iterator[32681])
                    }
                  }
                  { scopeless type
                    (32702 'move' _indexOfInterest[32680](32699 call iteratorIndex _iterator[32681]))
                  }
                  ForLoop
                  {
                    unknown j[32706] "index var" "insert auto destroy"
                    (32708 'move' j[32706] _indexOfInterest[32680])
                    {
                      const idx[32614] "const"(32613 call(32605 call . view c"orderToIndex")(32610 call + i j))
                      if(32640 call _cond_test(32635 call !=(32627 call(32619 call . this c"buff")(32624 call - idx 1))(32634 call(32629 call . localNeedle c"buff") j)))
                      {
                        { scopeless
                          break nil[38]
                        }
                      }
                      if(32676 call _cond_test(32650 call == j(32648 call - nLen 1)))
                      {
                        if(32671 call _cond_test count)
                        {
                          (32655 call += localRet 1)
                        }
                        {
                          (32667 call = localRet(32666 call(32661 call . view c"orderToIndex") i))
                        }
                      }
                    }
                    label _continueLabel[32685]
                    _indexOfInterest[32680]
                    _iterator[32681]
                  }
                  label _breakLabel[32686]
                }
                if(32733 call _cond_test(32728 call &&(32722 call ! count)(32726 call != localRet 0)))
                {
                  { scopeless
                    break nil[38]
                  }
                }
              }
              label _continueLabel[32743]
              _indexOfInterest[32738]
              _iterator[32739]
            }
            label _breakLabel[32744]
          }
        }
        (32777 call = ret localRet)
      }
    }
    (32788 return ret)
  } function string[24].find[32798](arg _mt[35823]:_MT[227], arg this[35821]:string[24], arg needle[32795] :
  string[24], arg region[32810] :
  (32803 call range ?[249]) =
  (32808 call chpl_build_low_bounded_range(32806 call _cast byteIndex 1))) : _unknown[43] "inline" "method" "primary method"
  {
    (32825 return(32823 call _cast byteIndex(32821 call _search_helper needle region(count = 0))))
  }
  { scopeless type
    byteIndex
  } function string[24].rfind[32837](arg _mt[35827]:_MT[227], arg this[35825]:string[24], arg needle[32834] :
  string[24], arg region[32849] :
  (32842 call range ?[249]) =
  (32847 call chpl_build_low_bounded_range(32845 call _cast byteIndex 1))) : _unknown[43] "inline" "method" "primary method"
  {
    (32866 return(32864 call _cast byteIndex(32862 call _search_helper needle region(count = 0)(fromLeft = 0))))
  }
  { scopeless type
    byteIndex
  } function string[24].count[32878](arg _mt[35831]:_MT[227], arg this[35829]:string[24], arg needle[32875] :
  string[24], arg region[32887] :
  (32883 call range ?[249]) =
  (32885 call chpl_build_low_bounded_range 1)) : _unknown[43] "inline" "method" "primary method"
  {
    (32899 return(32898 call _search_helper needle region(count = 1)))
  }
  { scopeless type
    int[13]
  } function string[24].replace[32911](arg _mt[35835]:_MT[227], arg this[35833]:string[24], arg needle[32908] :
  string[24], arg replacement[32914] :
  string[24], arg count[32921] :
  int[13] =
  (32919 call - 1)) : _unknown[43] "inline" "method" "primary method"
  {
    (32933 return(32932 call doReplace this needle replacement count))
  }
  { scopeless type
    string[24]
  } function string[24].split[32945](arg _mt[35839]:_MT[227], arg this[35837]:string[24], arg sep[32942] :
  string[24], arg maxsplit[32951] :
  int[13] =
  (32949 call - 1), arg ignoreEmpty[32957] :
  bool[10] =
  0) : _unknown[43] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[32972] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[32973] "expr temp" "temp"
      (32982 'move' _iterator[32973](32980 call _getIterator(32968 call doSplit this sep maxsplit ignoreEmpty)))
      Defer
      {
        {
          (32999 call _freeIterator _iterator[32973])
        }
      }
      { scopeless type
        (32988 'move' _indexOfInterest[32972](32985 call iteratorIndex _iterator[32973]))
      }
      ForLoop
      {
        unknown s[32992] "index var" "insert auto destroy"
        (32994 'move' s[32992] _indexOfInterest[32972])
        { scopeless
          (32970 yield s)
        }
        label _continueLabel[32977]
        _indexOfInterest[32972]
        _iterator[32973]
      }
      label _breakLabel[32978]
    }
  } function string[24].split[33019](arg _mt[35843]:_MT[227], arg this[35841]:string[24], arg maxsplit[33015] :
  int[13] =
  (33013 call - 1)) : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(33397 call _cond_test(33027 call !(33026 call(33022 call . this c"isEmpty"))))
    {
      const localThis[33036] "const"(33035 call(33031 call . this c"localize")) string[24]
      unknown done[33042] 0 bool[10]
      unknown yieldChunk[33047] 0 bool[10]
      unknown chunk[33051] string[24]
      const noSplits[33059] "const"(33057 call == maxsplit 0) bool[10]
      const limitSplits[33067] "const"(33065 call > maxsplit 0) bool[10]
      unknown splitCount[33072] 0 int[13]
      const iEnd[33083] "const"(33081 call -(33077 call . localThis c"len") 1) byteIndex
      unknown inChunk[33088] 0 bool[10]
      unknown chunkStart[33092] byteIndex
      {
        unknown _indexOfInterest[33342] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[33343] "expr temp" "temp"
        (33352 'move' _iterator[33343](33350 call _getIterator(33108 call(33104 call . localThis c"_cpIndexLen"))))
        Defer
        {
          {
            (33390 call _freeIterator _iterator[33343])
          }
        }
        { scopeless type
          (33358 'move' _indexOfInterest[33342](33355 call iteratorIndex _iterator[33343]))
        }
        ForLoop
        {
          (33363 call _check_tuple_var_decl _indexOfInterest[33342] 3)
          unknown c[33369] "index var" "insert auto destroy"
          (33371 'move' c[33369](33367 call _indexOfInterest[33342] 1))
          unknown i[33376] "index var" "insert auto destroy"
          (33378 'move' i[33376](33374 call _indexOfInterest[33342] 2))
          unknown nbytes[33383] "index var" "insert auto destroy"
          (33385 'move' nbytes[33383](33381 call _indexOfInterest[33342] 3))
          {
            if(33314 call _cond_test noSplits)
            {
              (33112 call = done 1)
              if(33135 call _cond_test(33122 call !(33121 call(33117 call . localThis c"isSpace"))))
              {
                (33126 call = chunk localThis)
                (33132 call = yieldChunk 1)
              }
            }
            {
              unknown cSpace[33143](33142 call codepoint_isWhitespace c)
              if(33309 call _cond_test(33151 call !(33149 call || inChunk cSpace)))
              {
                (33155 call = chunkStart i)
                (33161 call = inChunk 1)
                if(33195 call _cond_test(33172 call >(33169 call +(33166 call - i 1) nbytes) iEnd))
                {
                  (33181 call = chunk(33180 call localThis(33177 call chpl_build_low_bounded_range chunkStart)))
                  (33187 call = yieldChunk 1)
                  (33192 call = done 1)
                }
              }
              {
                { scopeless
                  if(33305 call _cond_test inChunk)
                  {
                    if(33299 call _cond_test cSpace)
                    {
                      (33203 call += splitCount 1)
                      if(33260 call _cond_test(33212 call && limitSplits(33210 call > splitCount maxsplit)))
                      {
                        (33221 call = chunk(33220 call localThis(33217 call chpl_build_low_bounded_range chunkStart)))
                        (33227 call = yieldChunk 1)
                        (33232 call = done 1)
                      }
                      {
                        (33246 call = chunk(33245 call localThis(33242 call chpl_build_bounded_range chunkStart(33240 call - i 1))))
                        (33252 call = yieldChunk 1)
                        (33257 call = inChunk 0)
                      }
                    }
                    {
                      { scopeless
                        if(33295 call _cond_test(33272 call >(33269 call +(33266 call - i 1) nbytes) iEnd))
                        {
                          (33281 call = chunk(33280 call localThis(33277 call chpl_build_low_bounded_range chunkStart)))
                          (33287 call = yieldChunk 1)
                          (33292 call = done 1)
                        }
                      }
                    }
                  }
                }
              }
            }
            if(33329 call _cond_test yieldChunk)
            {
              (33321 yield chunk)
              (33326 call = yieldChunk 0)
            }
            if(33337 call _cond_test done)
            {
              { scopeless
                break nil[38]
              }
            }
          }
          label _continueLabel[33347]
          _indexOfInterest[33342]
          _iterator[33343]
        }
        label _breakLabel[33348]
      }
    }
  } function string[24].join[33412](arg _mt[35847]:_MT[227], arg this[35845]:string[24], const  ref arg S[33408] ... :
  string[24]) : _unknown[43] "inline" "method" "primary method"
  {
    (33419 return(33418 call _join S))
  }
  { scopeless type
    string[24]
  } function string[24].join[33429](arg _mt[35851]:_MT[227], arg this[35849]:string[24], const  ref arg S[33427]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    if(33458 call _cond_test(33451 call ||(33440 call !(33439 call isHomogeneousTuple S))(33449 call !(33448 call isString(33446 call S 1)))))
    {
      { scopeless
        (33456 call compilerError "join() on tuples only handles homogeneous tuples of strings")
      }
    }
    (33468 return(33467 call _join S))
  }
  where {
    (33435 call isTuple S)
  }
  { scopeless type
    string[24]
  } function string[24].join[33483](arg _mt[35855]:_MT[227], arg this[35853]:string[24], const  ref arg S[33480] :
  (33477 call chpl__buildArrayRuntimeType nil[38] string[24])) : _unknown[43] "inline" "method" "primary method"
  {
    (33490 return(33489 call _join S))
  }
  { scopeless type
    string[24]
  } function string[24].join[33502](arg _mt[35859]:_MT[227], arg this[35857]:string[24], arg ir[33499] :
  _iteratorRecord) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (33510 return(33509 call doJoinIterator this ir))
  }
  { scopeless type
    string[24]
  } function string[24]._join[33520](arg _mt[35863]:_MT[227], arg this[35861]:string[24], const  ref arg S[33518]:_any[170](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (33538 return(33537 call doJoin this S))
  }
  where {
    (33531 call ||(33526 call isTuple S)(33530 call isArray S))
  }
  { scopeless type
    string[24]
  } function string[24].strip[33553](arg _mt[35867]:_MT[227], arg this[35865]:string[24], arg chars[33549] :
  string[24] =
  " \t\r\n", arg leading[33556] =
  1, arg trailing[33560] =
  1) : _unknown[43] "method" "primary method"
  {
    if(33588 call _cond_test(33569 call(33565 call . this c"isEmpty")))
    {
      { scopeless
        (33586 return "")
      }
    }
    if(33603 call _cond_test(33599 call(33595 call . chars c"isEmpty")))
    {
      { scopeless
        (33601 return this)
      }
    }
    const localThis[33615] "const"(33614 call(33610 call . this c"localize")) string[24]
    const localChars[33625] "const"(33624 call(33620 call . chars c"localize")) string[24]
    unknown start[33630] 1 byteIndex
    unknown end[33638](33635 call . localThis c"len") byteIndex
    if(33776 call _cond_test leading)
    {
      {
        unknown _indexOfInterest[33720] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[33721] "expr temp" "temp"
        (33730 'move' _iterator[33721](33728 call _getIterator(33653 call(33649 call . localThis c"_cpIndexLen"))))
        Defer
        {
          {
            (33768 call _freeIterator _iterator[33721])
          }
        }
        { scopeless type
          (33736 'move' _indexOfInterest[33720](33733 call iteratorIndex _iterator[33721]))
        }
        ForLoop
        {
          (33741 call _check_tuple_var_decl _indexOfInterest[33720] 3)
          unknown thisChar[33747] "index var" "insert auto destroy"
          (33749 'move' thisChar[33747](33745 call _indexOfInterest[33720] 1))
          unknown i[33754] "index var" "insert auto destroy"
          (33756 'move' i[33754](33752 call _indexOfInterest[33720] 2))
          unknown nbytes[33761] "index var" "insert auto destroy"
          (33763 'move' nbytes[33761](33759 call _indexOfInterest[33720] 3))
          {
            {
              unknown _indexOfInterest[33682] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[33683] "expr temp" "temp"
              (33692 'move' _iterator[33683](33690 call _getIterator(33660 call(33656 call . localChars c"codepoints"))))
              Defer
              {
                {
                  (33709 call _freeIterator _iterator[33683])
                }
              }
              { scopeless type
                (33698 'move' _indexOfInterest[33682](33695 call iteratorIndex _iterator[33683]))
              }
              ForLoop
              {
                unknown removeChar[33702] "index var" "insert auto destroy"
                (33704 'move' removeChar[33702] _indexOfInterest[33682])
                {
                  if(33677 call _cond_test(33663 call == thisChar removeChar))
                  {
                    (33670 call = start(33668 call + i nbytes))
                    continue outer
                  }
                }
                label _continueLabel[33687]
                _indexOfInterest[33682]
                _iterator[33683]
              }
              label _breakLabel[33688]
            }
            break nil[38]
          }
          label _continueLabel[33725]
          _indexOfInterest[33720]
          _iterator[33721]
        }
        label _breakLabel[33726]
      }
    }
    if(33921 call _cond_test trailing)
    {
      (33783 call = end 0)
      {
        unknown _indexOfInterest[33866] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[33867] "expr temp" "temp"
        (33876 'move' _iterator[33867](33874 call _getIterator(33799 call(33794 call . localThis c"_cpIndexLen") start)))
        Defer
        {
          {
            (33914 call _freeIterator _iterator[33867])
          }
        }
        { scopeless type
          (33882 'move' _indexOfInterest[33866](33879 call iteratorIndex _iterator[33867]))
        }
        ForLoop
        {
          (33887 call _check_tuple_var_decl _indexOfInterest[33866] 3)
          unknown thisChar[33893] "index var" "insert auto destroy"
          (33895 'move' thisChar[33893](33891 call _indexOfInterest[33866] 1))
          unknown i[33900] "index var" "insert auto destroy"
          (33902 'move' i[33900](33898 call _indexOfInterest[33866] 2))
          unknown nbytes[33907] "index var" "insert auto destroy"
          (33909 'move' nbytes[33907](33905 call _indexOfInterest[33866] 3))
          {
            {
              unknown _indexOfInterest[33820] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[33821] "expr temp" "temp"
              (33830 'move' _iterator[33821](33828 call _getIterator(33806 call(33802 call . localChars c"codepoints"))))
              Defer
              {
                {
                  (33847 call _freeIterator _iterator[33821])
                }
              }
              { scopeless type
                (33836 'move' _indexOfInterest[33820](33833 call iteratorIndex _iterator[33821]))
              }
              ForLoop
              {
                unknown removeChar[33840] "index var" "insert auto destroy"
                (33842 'move' removeChar[33840] _indexOfInterest[33820])
                {
                  if(33815 call _cond_test(33809 call == thisChar removeChar))
                  {
                    continue outer
                  }
                }
                label _continueLabel[33825]
                _indexOfInterest[33820]
                _iterator[33821]
              }
              label _breakLabel[33826]
            }
            (33863 call = end(33861 call -(33858 call + i nbytes) 1))
          }
          label _continueLabel[33871]
          _indexOfInterest[33866]
          _iterator[33867]
        }
        label _breakLabel[33872]
      }
    }
    (33932 return(33931 call localThis(33928 call chpl_build_bounded_range start end)))
  }
  { scopeless type
    string[24]
  } function string[24].partition[33943](arg _mt[35871]:_MT[227], const arg this[35869]:string[24], arg sep[33940] :
  string[24]) : _unknown[43] "inline" "method" "primary method"
  {
    (33954 return(33953 call doPartition this sep))
  }
  { scopeless type
    (33947 call * 3 string[24])
  } function string[24].isUpper[33962](arg _mt[35875]:_MT[227], arg this[35873]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(33974 call _cond_test(33970 call(33966 call . this c"isEmpty")))
    {
      { scopeless
        (33972 return 0)
      }
    }
    unknown result[33981] bool[10]
    {
      const tmp[34086] "const" "temp"
      (34087 'move' tmp[34086](34084 'deref'(33994 'chpl_on_locale_num'(33993 call chpl_buildLocaleID(33988 call . this c"locale_id") c_sublocid_any))))
      {
        unknown locale_result[33996] 0
        {
          unknown _indexOfInterest[34045] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[34046] "expr temp" "temp"
          (34055 'move' _iterator[34046](34053 call _getIterator(34006 call(34002 call . this c"codepoints"))))
          Defer
          {
            {
              (34072 call _freeIterator _iterator[34046])
            }
          }
          { scopeless type
            (34061 'move' _indexOfInterest[34045](34058 call iteratorIndex _iterator[34046]))
          }
          ForLoop
          {
            unknown cp[34065] "index var" "insert auto destroy"
            (34067 'move' cp[34065] _indexOfInterest[34045])
            {
              if(34039 call _cond_test(34010 call codepoint_isLower cp))
              {
                (34013 call = locale_result 0)
                break nil[38]
              }
              {
                { scopeless
                  if(34035 call _cond_test(34027 call &&(34021 call ! locale_result)(34026 call codepoint_isUpper cp)))
                  {
                    (34031 call = locale_result 1)
                  }
                }
              }
            }
            label _continueLabel[34050]
            _indexOfInterest[34045]
            _iterator[34046]
          }
          label _breakLabel[34051]
        }
        (34081 call = result locale_result)
      }
    }
    (34092 return result)
  }
  { scopeless type
    bool[10]
  } function string[24].isLower[34099](arg _mt[35879]:_MT[227], arg this[35877]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(34111 call _cond_test(34107 call(34103 call . this c"isEmpty")))
    {
      { scopeless
        (34109 return 0)
      }
    }
    unknown result[34118] bool[10]
    {
      const tmp[34223] "const" "temp"
      (34224 'move' tmp[34223](34221 'deref'(34131 'chpl_on_locale_num'(34130 call chpl_buildLocaleID(34125 call . this c"locale_id") c_sublocid_any))))
      {
        unknown locale_result[34133] 0
        {
          unknown _indexOfInterest[34182] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[34183] "expr temp" "temp"
          (34192 'move' _iterator[34183](34190 call _getIterator(34143 call(34139 call . this c"codepoints"))))
          Defer
          {
            {
              (34209 call _freeIterator _iterator[34183])
            }
          }
          { scopeless type
            (34198 'move' _indexOfInterest[34182](34195 call iteratorIndex _iterator[34183]))
          }
          ForLoop
          {
            unknown cp[34202] "index var" "insert auto destroy"
            (34204 'move' cp[34202] _indexOfInterest[34182])
            {
              if(34176 call _cond_test(34147 call codepoint_isUpper cp))
              {
                (34150 call = locale_result 0)
                break nil[38]
              }
              {
                { scopeless
                  if(34172 call _cond_test(34164 call &&(34158 call ! locale_result)(34163 call codepoint_isLower cp)))
                  {
                    (34168 call = locale_result 1)
                  }
                }
              }
            }
            label _continueLabel[34187]
            _indexOfInterest[34182]
            _iterator[34183]
          }
          label _breakLabel[34188]
        }
        (34218 call = result locale_result)
      }
    }
    (34229 return result)
  }
  { scopeless type
    bool[10]
  } function string[24].isSpace[34236](arg _mt[35883]:_MT[227], arg this[35881]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(34248 call _cond_test(34244 call(34240 call . this c"isEmpty")))
    {
      { scopeless
        (34246 return 0)
      }
    }
    unknown result[34256] 1 bool[10]
    {
      const tmp[34334] "const" "temp"
      (34335 'move' tmp[34334](34332 'deref'(34269 'chpl_on_locale_num'(34268 call chpl_buildLocaleID(34263 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[34297] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[34298] "expr temp" "temp"
          (34307 'move' _iterator[34298](34305 call _getIterator(34276 call(34272 call . this c"codepoints"))))
          Defer
          {
            {
              (34324 call _freeIterator _iterator[34298])
            }
          }
          { scopeless type
            (34313 'move' _indexOfInterest[34297](34310 call iteratorIndex _iterator[34298]))
          }
          ForLoop
          {
            unknown cp[34317] "index var" "insert auto destroy"
            (34319 'move' cp[34317] _indexOfInterest[34297])
            {
              if(34292 call _cond_test(34281 call !(34280 call codepoint_isWhitespace cp)))
              {
                (34285 call = result 0)
                break nil[38]
              }
            }
            label _continueLabel[34302]
            _indexOfInterest[34297]
            _iterator[34298]
          }
          label _breakLabel[34303]
        }
      }
    }
    (34340 return result)
  }
  { scopeless type
    bool[10]
  } function string[24].isAlpha[34347](arg _mt[35887]:_MT[227], arg this[35885]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(34359 call _cond_test(34355 call(34351 call . this c"isEmpty")))
    {
      { scopeless
        (34357 return 0)
      }
    }
    unknown result[34367] 1 bool[10]
    {
      const tmp[34445] "const" "temp"
      (34446 'move' tmp[34445](34443 'deref'(34380 'chpl_on_locale_num'(34379 call chpl_buildLocaleID(34374 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[34408] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[34409] "expr temp" "temp"
          (34418 'move' _iterator[34409](34416 call _getIterator(34387 call(34383 call . this c"codepoints"))))
          Defer
          {
            {
              (34435 call _freeIterator _iterator[34409])
            }
          }
          { scopeless type
            (34424 'move' _indexOfInterest[34408](34421 call iteratorIndex _iterator[34409]))
          }
          ForLoop
          {
            unknown cp[34428] "index var" "insert auto destroy"
            (34430 'move' cp[34428] _indexOfInterest[34408])
            {
              if(34403 call _cond_test(34392 call !(34391 call codepoint_isAlpha cp)))
              {
                (34396 call = result 0)
                break nil[38]
              }
            }
            label _continueLabel[34413]
            _indexOfInterest[34408]
            _iterator[34409]
          }
          label _breakLabel[34414]
        }
      }
    }
    (34451 return result)
  }
  { scopeless type
    bool[10]
  } function string[24].isDigit[34458](arg _mt[35891]:_MT[227], arg this[35889]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(34470 call _cond_test(34466 call(34462 call . this c"isEmpty")))
    {
      { scopeless
        (34468 return 0)
      }
    }
    unknown result[34478] 1 bool[10]
    {
      const tmp[34556] "const" "temp"
      (34557 'move' tmp[34556](34554 'deref'(34491 'chpl_on_locale_num'(34490 call chpl_buildLocaleID(34485 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[34519] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[34520] "expr temp" "temp"
          (34529 'move' _iterator[34520](34527 call _getIterator(34498 call(34494 call . this c"codepoints"))))
          Defer
          {
            {
              (34546 call _freeIterator _iterator[34520])
            }
          }
          { scopeless type
            (34535 'move' _indexOfInterest[34519](34532 call iteratorIndex _iterator[34520]))
          }
          ForLoop
          {
            unknown cp[34539] "index var" "insert auto destroy"
            (34541 'move' cp[34539] _indexOfInterest[34519])
            {
              if(34514 call _cond_test(34503 call !(34502 call codepoint_isDigit cp)))
              {
                (34507 call = result 0)
                break nil[38]
              }
            }
            label _continueLabel[34524]
            _indexOfInterest[34519]
            _iterator[34520]
          }
          label _breakLabel[34525]
        }
      }
    }
    (34562 return result)
  }
  { scopeless type
    bool[10]
  } function string[24].isAlnum[34569](arg _mt[35895]:_MT[227], arg this[35893]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(34581 call _cond_test(34577 call(34573 call . this c"isEmpty")))
    {
      { scopeless
        (34579 return 0)
      }
    }
    unknown result[34589] 1 bool[10]
    {
      const tmp[34673] "const" "temp"
      (34674 'move' tmp[34673](34671 'deref'(34602 'chpl_on_locale_num'(34601 call chpl_buildLocaleID(34596 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[34636] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[34637] "expr temp" "temp"
          (34646 'move' _iterator[34637](34644 call _getIterator(34609 call(34605 call . this c"codepoints"))))
          Defer
          {
            {
              (34663 call _freeIterator _iterator[34637])
            }
          }
          { scopeless type
            (34652 'move' _indexOfInterest[34636](34649 call iteratorIndex _iterator[34637]))
          }
          ForLoop
          {
            unknown cp[34656] "index var" "insert auto destroy"
            (34658 'move' cp[34656] _indexOfInterest[34636])
            {
              if(34631 call _cond_test(34620 call !(34618 call ||(34613 call codepoint_isAlpha cp)(34617 call codepoint_isDigit cp))))
              {
                (34624 call = result 0)
                break nil[38]
              }
            }
            label _continueLabel[34641]
            _indexOfInterest[34636]
            _iterator[34637]
          }
          label _breakLabel[34642]
        }
      }
    }
    (34679 return result)
  }
  { scopeless type
    bool[10]
  } function string[24].isPrintable[34686](arg _mt[35899]:_MT[227], arg this[35897]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(34698 call _cond_test(34694 call(34690 call . this c"isEmpty")))
    {
      { scopeless
        (34696 return 0)
      }
    }
    unknown result[34706] 1 bool[10]
    {
      const tmp[34784] "const" "temp"
      (34785 'move' tmp[34784](34782 'deref'(34719 'chpl_on_locale_num'(34718 call chpl_buildLocaleID(34713 call . this c"locale_id") c_sublocid_any))))
      {
        {
          unknown _indexOfInterest[34747] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[34748] "expr temp" "temp"
          (34757 'move' _iterator[34748](34755 call _getIterator(34726 call(34722 call . this c"codepoints"))))
          Defer
          {
            {
              (34774 call _freeIterator _iterator[34748])
            }
          }
          { scopeless type
            (34763 'move' _indexOfInterest[34747](34760 call iteratorIndex _iterator[34748]))
          }
          ForLoop
          {
            unknown cp[34767] "index var" "insert auto destroy"
            (34769 'move' cp[34767] _indexOfInterest[34747])
            {
              if(34742 call _cond_test(34731 call !(34730 call codepoint_isPrintable cp)))
              {
                (34735 call = result 0)
                break nil[38]
              }
            }
            label _continueLabel[34752]
            _indexOfInterest[34747]
            _iterator[34748]
          }
          label _breakLabel[34753]
        }
      }
    }
    (34790 return result)
  }
  { scopeless type
    bool[10]
  } function string[24].isTitle[34797](arg _mt[35903]:_MT[227], arg this[35901]:string[24]) : _unknown[43] "method" "primary method"
  {
    if(34809 call _cond_test(34805 call(34801 call . this c"isEmpty")))
    {
      { scopeless
        (34807 return 0)
      }
    }
    unknown result[34817] 1 bool[10]
    {
      const tmp[34969] "const" "temp"
      (34970 'move' tmp[34969](34967 'deref'(34830 'chpl_on_locale_num'(34829 call chpl_buildLocaleID(34824 call . this c"locale_id") c_sublocid_any))))
      {
        { scopeless
          unknown UN[34832] "param" 0
          unknown UPPER[34836] "param" 1
          unknown LOWER[34840] "param" 2
        }
        unknown last[34845] UN
        {
          unknown _indexOfInterest[34933] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[34934] "expr temp" "temp"
          (34943 'move' _iterator[34934](34941 call _getIterator(34854 call(34850 call . this c"codepoints"))))
          Defer
          {
            {
              (34960 call _freeIterator _iterator[34934])
            }
          }
          { scopeless type
            (34949 'move' _indexOfInterest[34933](34946 call iteratorIndex _iterator[34934]))
          }
          ForLoop
          {
            unknown cp[34953] "index var" "insert auto destroy"
            (34955 'move' cp[34953] _indexOfInterest[34933])
            {
              if(34927 call _cond_test(34858 call codepoint_isLower cp))
              {
                if(34884 call _cond_test(34867 call ||(34861 call == last UPPER)(34865 call == last LOWER)))
                {
                  (34871 call = last LOWER)
                }
                {
                  (34877 call = result 0)
                  break nil[38]
                }
              }
              {
                { scopeless
                  if(34923 call _cond_test(34892 call codepoint_isUpper cp))
                  {
                    if(34912 call _cond_test(34895 call == last UN))
                    {
                      (34899 call = last UPPER)
                    }
                    {
                      (34905 call = result 0)
                      break nil[38]
                    }
                  }
                  {
                    (34919 call = last UN)
                  }
                }
              }
            }
            label _continueLabel[34938]
            _indexOfInterest[34933]
            _iterator[34934]
          }
          label _breakLabel[34939]
        }
      }
    }
    (34975 return result)
  }
  { scopeless type
    bool[10]
  } function string[24].toLower[34982](arg _mt[35907]:_MT[227], arg this[35905]:string[24]) : _unknown[43] "method" "primary method"
  {
    unknown result[34987] this string[24]
    if(35000 call _cond_test(34996 call(34992 call . result c"isEmpty")))
    {
      { scopeless
        (34998 return result)
      }
    }
    unknown i[35006] 0
    {
      unknown tmp[35104] "temp"
      (35134 'move' tmp[35104](35126 call _cond_test(35128 call < i(35131 call . result c"len"))))
      WhileDo
      {
        {
          unknown cp[35020](35019 call int[13] 32)
          unknown nbytes[35025] c_int
          unknown multibytes[35038](35036 call _cast c_string(35033 call +(35029 call . result c"buff") i))
          unknown maxbytes[35051](35049 call _cast ssize_t(35046 call -(35042 call . result c"len") i))
          (35060 call qio_decode_char_buf cp nbytes multibytes maxbytes)
          unknown lowCodepoint[35066](35065 call codepoint_toLower cp)
          if(35095 call _cond_test(35080 call &&(35071 call != lowCodepoint cp)(35078 call ==(35076 call qio_nbytes_char lowCodepoint) nbytes)))
          {
            (35092 call qio_encode_char_buf(35088 call +(35084 call . result c"buff") i) lowCodepoint)
          }
          (35101 call += i nbytes)
        }
        label _continueLabel[35107]
        (35121 'move' tmp[35104](35113 call _cond_test(35115 call < i(35118 call . result c"len"))))
        tmp[35104]
      }
      label _breakLabel[35108]
    }
    (35138 return result)
  }
  { scopeless type
    string[24]
  } function string[24].toUpper[35145](arg _mt[35911]:_MT[227], arg this[35909]:string[24]) : _unknown[43] "method" "primary method"
  {
    unknown result[35150] this string[24]
    if(35163 call _cond_test(35159 call(35155 call . result c"isEmpty")))
    {
      { scopeless
        (35161 return result)
      }
    }
    unknown i[35169] 0
    {
      unknown tmp[35267] "temp"
      (35297 'move' tmp[35267](35289 call _cond_test(35291 call < i(35294 call . result c"len"))))
      WhileDo
      {
        {
          unknown cp[35183](35182 call int[13] 32)
          unknown nbytes[35188] c_int
          unknown multibytes[35201](35199 call _cast c_string(35196 call +(35192 call . result c"buff") i))
          unknown maxbytes[35214](35212 call _cast ssize_t(35209 call -(35205 call . result c"len") i))
          (35223 call qio_decode_char_buf cp nbytes multibytes maxbytes)
          unknown upCodepoint[35229](35228 call codepoint_toUpper cp)
          if(35258 call _cond_test(35243 call &&(35234 call != upCodepoint cp)(35241 call ==(35239 call qio_nbytes_char upCodepoint) nbytes)))
          {
            (35255 call qio_encode_char_buf(35251 call +(35247 call . result c"buff") i) upCodepoint)
          }
          (35264 call += i nbytes)
        }
        label _continueLabel[35270]
        (35284 'move' tmp[35267](35276 call _cond_test(35278 call < i(35281 call . result c"len"))))
        tmp[35267]
      }
      label _breakLabel[35271]
    }
    (35301 return result)
  }
  { scopeless type
    string[24]
  } function string[24].toTitle[35308](arg _mt[35915]:_MT[227], arg this[35913]:string[24]) : _unknown[43] "method" "primary method"
  {
    unknown result[35313] this string[24]
    if(35326 call _cond_test(35322 call(35318 call . result c"isEmpty")))
    {
      { scopeless
        (35324 return result)
      }
    }
    { scopeless
      unknown UN[35332] "param" 0
      unknown LETTER[35336] "param" 1
    }
    unknown last[35340] UN
    unknown i[35344] 0
    {
      unknown tmp[35509] "temp"
      (35539 'move' tmp[35509](35531 call _cond_test(35533 call < i(35536 call . result c"len"))))
      WhileDo
      {
        {
          unknown cp[35358](35357 call int[13] 32)
          unknown nbytes[35363] c_int
          unknown multibytes[35376](35374 call _cast c_string(35371 call +(35367 call . result c"buff") i))
          unknown maxbytes[35389](35387 call _cast ssize_t(35384 call -(35380 call . result c"len") i))
          (35398 call qio_decode_char_buf cp nbytes multibytes maxbytes)
          if(35500 call _cond_test(35403 call codepoint_isAlpha cp))
          {
            if(35489 call _cond_test(35406 call == last UN))
            {
              (35410 call = last LETTER)
              unknown upCodepoint[35418](35417 call codepoint_toUpper cp)
              if(35447 call _cond_test(35432 call &&(35423 call != upCodepoint cp)(35430 call ==(35428 call qio_nbytes_char upCodepoint) nbytes)))
              {
                (35444 call qio_encode_char_buf(35440 call +(35436 call . result c"buff") i) upCodepoint)
              }
            }
            {
              unknown lowCodepoint[35455](35454 call codepoint_toLower cp)
              if(35485 call _cond_test(35470 call &&(35461 call != lowCodepoint cp)(35468 call ==(35466 call qio_nbytes_char lowCodepoint) nbytes)))
              {
                (35482 call qio_encode_char_buf(35478 call +(35474 call . result c"buff") i) lowCodepoint)
              }
            }
          }
          {
            (35496 call = last UN)
          }
          (35506 call += i nbytes)
        }
        label _continueLabel[35512]
        (35526 'move' tmp[35509](35518 call _cond_test(35520 call < i(35523 call . result c"len"))))
        tmp[35509]
      }
      label _breakLabel[35513]
    }
    (35543 return result)
  }
  { scopeless type
    string[24]
  } function string[24].capitalize[35550](arg _mt[35919]:_MT[227], arg this[35917]:string[24]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown result[35562](35561 call(35557 call . this c"toLower")) string[24]
    if(35575 call _cond_test(35571 call(35567 call . result c"isEmpty")))
    {
      { scopeless
        (35573 return result)
      }
    }
    unknown cp[35584](35583 call int[13] 32)
    unknown nbytes[35588] c_int
    unknown multibytes[35598](35596 call _cast c_string(35592 call . result c"buff"))
    unknown maxbytes[35608](35606 call _cast ssize_t(35602 call . result c"len"))
    (35617 call qio_decode_char_buf cp nbytes multibytes maxbytes)
    unknown upCodepoint[35623](35622 call codepoint_toUpper cp)
    if(35649 call _cond_test(35637 call &&(35628 call != upCodepoint cp)(35635 call ==(35633 call qio_nbytes_char upCodepoint) nbytes)))
    {
      (35646 call qio_encode_char_buf(35641 call . result c"buff") upCodepoint)
    }
    (35654 return result)
  }
  { scopeless type
    string[24]
  }
  function =[35928](ref arg lhs[35925] :
  byteIndex, arg rhs[35931] :
  int[13]) : _unknown[43] "assignop"
  {
    (35944 call =(35937 call . lhs c"_bindex")(35942 call _cast int[13] rhs))
  }
  function =[35956](ref arg lhs[35953] :
  codepointIndex, arg rhs[35959] :
  int[13]) : _unknown[43] "assignop"
  {
    (35972 call =(35965 call . lhs c"_cpindex")(35970 call _cast int[13] rhs))
  }
  function =[35984](ref arg lhs[35981] :
  string[24], arg rhs[35987] :
  string[24]) : _unknown[43] "assignop"
  {
    (35994 call doAssign lhs rhs)
  }
  function =[36005](ref arg lhs[36002] :
  string[24], arg rhs_c[36008] :
  c_string) : _unknown[43] "assignop"
  {
    (36015 call doAssign lhs rhs_c)
  }
  function +[36026](arg s0[36023] :
  string[24], arg s1[36029] :
  string[24]) : _unknown[43]
  {
    (36037 return(36036 call doConcat s0 s1))
  }
  function *[36048](arg s[36045] :
  string[24], arg n[36051] :
  integral) : _unknown[43]
  {
    (36059 return(36058 call doMultiply s n))
  }
  function stringValDeprecated[36066]() : _unknown[43] "private"
  {
    (36088 call compilerWarning "'+' between strings and non-strings is deprecated; consider explicitly casting the non-string argument to a string")
  }
  function concatHelp[36099](arg s[36096] :
  string[24], arg x[36103] :
  unknown t[36101]) : _unknown[43] "inline" "private"
  {
    (36112 call stringValDeprecated)
    unknown cs[36119](36117 call _cast string[24] x)
    const ret[36126] "const"(36124 call + s cs)
    (36130 return ret)
  }
  where {
    (36108 call != t string[24])
  }
  function concatHelp[36142](arg x[36139] :
  unknown t[36137], arg s[36145] :
  string[24]) : _unknown[43] "inline" "private"
  {
    (36154 call stringValDeprecated)
    unknown cs[36161](36159 call _cast string[24] x)
    const ret[36168] "const"(36166 call + cs s)
    (36172 return ret)
  }
  where {
    (36150 call != t string[24])
  }
  function +[36183](arg s[36180] :
  string[24], arg x[36186] :
  numeric) : _unknown[43] "inline"
  {
    { scopeless
      (36194 return(36193 call concatHelp s x))
    }
  }
  function +[36205](arg x[36202] :
  numeric, arg s[36208] :
  string[24]) : _unknown[43] "inline"
  {
    { scopeless
      (36216 return(36215 call concatHelp x s))
    }
  }
  function +[36227](arg s[36224] :
  string[24], arg x[36230] :
  enumerated) : _unknown[43] "inline"
  {
    { scopeless
      (36238 return(36237 call concatHelp s x))
    }
  }
  function +[36249](arg x[36246] :
  enumerated, arg s[36252] :
  string[24]) : _unknown[43] "inline"
  {
    { scopeless
      (36260 return(36259 call concatHelp x s))
    }
  }
  function +[36271](arg s[36268] :
  string[24], arg x[36274] :
  bool[10]) : _unknown[43] "inline"
  {
    { scopeless
      (36282 return(36281 call concatHelp s x))
    }
  }
  function +[36293](arg x[36290] :
  bool[10], arg s[36296] :
  string[24]) : _unknown[43] "inline"
  {
    { scopeless
      (36304 return(36303 call concatHelp x s))
    }
  }
  function ==[36315](param arg s0[36312] :
  string[24], param arg s1[36318] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36329 return(36327 call ==(36325 'string_compare' s0 s1) 0))
  }
  function !=[36340](param arg s0[36337] :
  string[24], param arg s1[36343] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36354 return(36352 call !=(36350 'string_compare' s0 s1) 0))
  }
  function <=[36365](param arg a[36362] :
  string[24], param arg b[36368] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36379 return(36377 call <=(36375 'string_compare' a b) 0))
  }
  function >=[36390](param arg a[36387] :
  string[24], param arg b[36393] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36404 return(36402 call >=(36400 'string_compare' a b) 0))
  }
  function <[36415](param arg a[36412] :
  string[24], param arg b[36418] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36429 return(36427 call <(36425 'string_compare' a b) 0))
  }
  function >[36440](param arg a[36437] :
  string[24], param arg b[36443] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36454 return(36452 call >(36450 'string_compare' a b) 0))
  }
  function +[36465](param arg a[36462] :
  string[24], param arg b[36468] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (36491 return(36490 'string_concat' a b))
    }
  }
  function +[36502](param arg s[36499] :
  string[24], param arg x[36505] :
  integral) param : _unknown[43] "inline" "no doc"
  {
    (36510 call stringValDeprecated)
    (36521 return(36520 'string_concat' s(36518 call _cast string[24] x)))
  }
  function +[36531](param arg x[36528] :
  integral, param arg s[36534] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36539 call stringValDeprecated)
    (36550 return(36549 'string_concat'(36546 call _cast string[24] x) s))
  }
  function +[36560](param arg s[36557] :
  string[24], param arg x[36563] :
  enumerated) param : _unknown[43] "inline" "no doc"
  {
    (36568 call stringValDeprecated)
    (36579 return(36578 'string_concat' s(36576 call _cast string[24] x)))
  }
  function +[36589](param arg x[36586] :
  enumerated, param arg s[36592] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36597 call stringValDeprecated)
    (36608 return(36607 'string_concat'(36604 call _cast string[24] x) s))
  }
  function +[36618](param arg s[36615] :
  string[24], param arg x[36621] :
  bool[10]) param : _unknown[43] "inline" "no doc"
  {
    (36626 call stringValDeprecated)
    (36637 return(36636 'string_concat' s(36634 call _cast string[24] x)))
  }
  function +[36647](param arg x[36644] :
  bool[10], param arg s[36650] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36655 call stringValDeprecated)
    (36666 return(36665 'string_concat'(36662 call _cast string[24] x) s))
  }
  function ascii[36676](param arg a[36673] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    (36698 call compilerWarning "ascii is deprecated - please use string.toByte or string.byte")
    (36705 return(36704 'ascii' a))
  }
  function _unknown[43].toByte[36712](arg _mt[36717]:_MT[227], param arg this[36714] :
  string[24]) param : _unknown[43] "inline" "method" "no doc"
  {
    if(36735 call _cond_test(36728 call !=(36724 call . this c"numBytes") 1))
    {
      { scopeless
        (36733 call compilerError "string.toByte() only accepts single-byte strings")
      }
    }
    (36745 return(36744 'ascii' this))
  }
  { scopeless type
    (36722 call uint[107] 8)
  }
  function _unknown[43].byte[36757](arg _mt[36762]:_MT[227], param arg this[36759] :
  string[24], param arg i[36754] :
  int[13]) param : _unknown[43] "inline" "method" "no doc"
  {
    if(36792 call _cond_test(36779 call ||(36770 call < i 1)(36777 call > i(36774 call . this c"numBytes"))))
    {
      { scopeless
        (36790 call compilerError(36787 call + "index out of bounds of string: "(36785 call _cast string[24] i)))
      }
    }
    (36803 return(36802 'ascii' this i))
  }
  { scopeless type
    (36767 call uint[107] 8)
  }
  function _unknown[43].numBytes[36811](arg _mt[36816]:_MT[227], param arg this[36813] :
  string[24]) param : _unknown[43] "inline" "method" "no doc" "no parens"
  {
    { scopeless
      (36822 return(36821 'string_length_bytes' this))
    }
  }
  function _unknown[43].numCodepoints[36830](arg _mt[36835]:_MT[227], param arg this[36832] :
  string[24]) param : _unknown[43] "inline" "method" "no doc" "no parens"
  {
    { scopeless
      (36856 return(36855 'string_length_codepoints' this))
    }
  }
  function _unknown[43].length[36864](arg _mt[36869]:_MT[227], param arg this[36866] :
  string[24]) param : _unknown[43] "inline" "method" "no doc" "no parens"
  {
    { scopeless
      (36877 return(36874 call . this c"numCodepoints"))
    }
  }
  function _string_contains[36888](param arg a[36885] :
  string[24], param arg b[36891] :
  string[24]) param : _unknown[43] "inline" "no doc"
  {
    { scopeless
      (36899 return(36898 'string_contains' a b))
    }
  }
  function +=[36910](ref arg lhs[36907] :
  string[24], const  ref arg rhs[36913] :
  string[24]) : _unknown[43] "assignop"
  {
    (36921 call doAppend lhs rhs)
  }
  { scopeless type
    void[4]
  }
  function ==[36933](arg a[36930] :
  string[24], arg b[36936] :
  string[24]) : _unknown[43] "no doc"
  {
    (36945 return(36944 call doEq a b))
  }
  { scopeless type
    bool[10]
  }
  function !=[36957](arg a[36954] :
  string[24], arg b[36960] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    (36971 return(36969 call !(36968 call doEq a b)))
  }
  { scopeless type
    bool[10]
  }
  function <[36983](arg a[36980] :
  string[24], arg b[36986] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    (37020 return(37018 call <(37016 call _strcmp(36992 call . a c"buff")(36997 call . a c"len")(37001 call . a c"locale_id")(37005 call . b c"buff")(37009 call . b c"len")(37013 call . b c"locale_id")) 0))
  }
  { scopeless type
    bool[10]
  }
  function >[37032](arg a[37029] :
  string[24], arg b[37035] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    (37069 return(37067 call >(37065 call _strcmp(37041 call . a c"buff")(37046 call . a c"len")(37050 call . a c"locale_id")(37054 call . b c"buff")(37058 call . b c"len")(37062 call . b c"locale_id")) 0))
  }
  { scopeless type
    bool[10]
  }
  function <=[37081](arg a[37078] :
  string[24], arg b[37084] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    (37118 return(37116 call <=(37114 call _strcmp(37090 call . a c"buff")(37095 call . a c"len")(37099 call . a c"locale_id")(37103 call . b c"buff")(37107 call . b c"len")(37111 call . b c"locale_id")) 0))
  }
  { scopeless type
    bool[10]
  }
  function >=[37130](arg a[37127] :
  string[24], arg b[37133] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    (37167 return(37165 call >=(37163 call _strcmp(37139 call . a c"buff")(37144 call . a c"len")(37148 call . a c"locale_id")(37152 call . b c"buff")(37156 call . b c"len")(37160 call . b c"locale_id")) 0))
  }
  { scopeless type
    bool[10]
  }
  (37190 'require' "wctype.h")
  unknown wint_t[37196] "extern" "no doc" "type variable"(37195 call int[13] 32)
  function codepoint_isUpper[37208](arg c[37205] :
  (37204 call int[13] 32)) : _unknown[43] "inline" "private"
  {
    function iswupper[37217](arg wc[37214] :
    wint_t) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (37234 return(37232 call !=(37230 call iswupper(37227 call _cast wint_t c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isLower[37248](arg c[37245] :
  (37244 call int[13] 32)) : _unknown[43] "inline" "private"
  {
    function iswlower[37257](arg wc[37254] :
    wint_t) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (37274 return(37272 call !=(37270 call iswlower(37267 call _cast wint_t c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isAlpha[37288](arg c[37285] :
  (37284 call int[13] 32)) : _unknown[43] "inline" "private"
  {
    function iswalpha[37297](arg wc[37294] :
    wint_t) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (37314 return(37312 call !=(37310 call iswalpha(37307 call _cast wint_t c)) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isDigit[37328](arg c[37325] :
  (37324 call int[13] 32)) : _unknown[43] "inline" "private"
  {
    function iswdigit[37337](arg wc[37334] :
    wint_t) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (37351 return(37349 call !=(37347 call iswdigit c) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isWhitespace[37365](arg c[37362] :
  (37361 call int[13] 32)) : _unknown[43] "inline" "private"
  {
    function iswspace[37374](arg wc[37371] :
    wint_t) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (37388 return(37386 call !=(37384 call iswspace c) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_isPrintable[37402](arg c[37399] :
  (37398 call int[13] 32)) : _unknown[43] "inline" "private"
  {
    function iswprint[37411](arg wc[37408] :
    wint_t) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      c_int
    }
    (37425 return(37423 call !=(37421 call iswprint c) 0))
  }
  { scopeless type
    bool[10]
  }
  function codepoint_toLower[37439](arg c[37436] :
  (37435 call int[13] 32)) : _unknown[43] "inline" "private"
  {
    function towlower[37451](arg wc[37448] :
    wint_t) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      wint_t
    }
    (37471 return(37469 call _cast(37468 call int[13] 32)(37464 call towlower(37461 call _cast wint_t c))))
  }
  { scopeless type
    (37444 call int[13] 32)
  }
  function codepoint_toUpper[37485](arg c[37482] :
  (37481 call int[13] 32)) : _unknown[43] "inline" "private"
  {
    function towupper[37497](arg wc[37494] :
    wint_t) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
    {
    }
    { scopeless type
      wint_t
    }
    (37517 return(37515 call _cast(37514 call int[13] 32)(37510 call towupper(37507 call _cast wint_t c))))
  }
  { scopeless type
    (37490 call int[13] 32)
  }
  function ascii[37528](arg a[37525] :
  string[24]) : _unknown[43] "inline"
  {
    (37537 call compilerWarning "ascii is deprecated - please use string.toByte or string.byte")
    if(37549 call _cond_test(37545 call(37541 call . a c"isEmpty")))
    {
      { scopeless
        (37547 return 0)
      }
    }
    if(37587 call _cond_test(37562 call || _local(37560 call ==(37556 call . a c"locale_id") chpl_nodeID)))
    {
      (37571 return(37570 call(37565 call . a c"buff") 0))
    }
    {
      (37584 return(37583 call(37578 call .(37577 call a 1) c"buff") 0))
    }
  }
  { scopeless type
    (37533 call uint[107] 8)
  }
  function asciiToString[37603](arg i[37600] :
  (37599 call uint[107] 8)) : _unknown[43] "inline"
  {
    (37625 call compilerWarning "asciiToString is deprecated - please use codepointToString instead")
    unknown buffer[37632](37631 call bufferAllocExact 2)
    (37640 call =(37638 call buffer 0) i)
    (37648 call =(37646 call buffer 1) 0)
    unknown s[37657](37656 call createStringWithOwnedBuffer buffer 1 2)
    (37661 return s)
  }
  function codepointToString[37674](arg i[37671] :
  (37670 call int[13] 32)) : _unknown[43] "inline"
  {
    const mblength[37683] "const"(37681 call _cast int[13](37679 call qio_nbytes_char i))
    { scopeless
      unknown tmp[37699] "no copy" "temp"(37698 call bufferAlloc(37695 call + mblength 1))
      (37706 call _check_tuple_var_decl tmp[37699] 2)
      unknown buffer[37687](37700 call tmp[37699] 1)
      unknown mbsize[37689](37703 call tmp[37699] 2)
    }
    (37715 call qio_encode_char_buf buffer i)
    (37722 call =(37720 call buffer mblength) 0)
    unknown s[37731](37730 call createStringWithOwnedBuffer buffer mblength mbsize)
    (37735 return s)
  }
  function _cast[37743](arg t[37741]:_any[170](?), arg cs[37746] :
  c_string) : _unknown[43] "inline" "no doc"
  {
    (37758 return(37757 'cast' t cs))
  }
  where {
    (37751 call == t bufferType)
  }
  function _cast[37768](arg t[37766]:_any[170](?), arg cs[37771] :
  c_string) : _unknown[43] "no doc"
  {
    unknown ret[37779] string[24]
    (37791 call =(37784 call . ret c"len")(37788 call . cs c"length"))
    (37805 call =(37795 call . ret c"_size")(37803 call +(37799 call . ret c"len") 1))
    (37847 call =(37809 call . ret c"buff")(37844 IfExpr (37817 call >(37813 call . ret c"len") 0) then
    { scopeless
      (37841 call _cast bufferType(37839 'string_copy' cs))
    } else
    { scopeless
      nil[38]
    } ))
    (37855 call =(37851 call . ret c"isowned") 1)
    (37859 return ret)
  }
  where {
    (37776 call == t string[24])
  }
  function _cast[37870](arg t[37867] :
  int[13], arg cpi[37873] :
  byteIndex) : _unknown[43] "inline" "no doc"
  {
    (37880 return(37877 call . cpi c"_bindex"))
  }
  function _cast[37891](arg t[37888] :
  byteIndex, arg i[37894] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    unknown cpi[37898] byteIndex
    (37907 call =(37903 call . cpi c"_bindex") i)
    (37911 return cpi)
  }
  function _cast[37921](arg t[37918] :
  int[13], arg cpi[37924] :
  codepointIndex) : _unknown[43] "inline" "no doc"
  {
    (37931 return(37928 call . cpi c"_cpindex"))
  }
  function _cast[37942](arg t[37939] :
  codepointIndex, arg i[37945] :
  int[13]) : _unknown[43] "inline" "no doc"
  {
    unknown cpi[37949] codepointIndex
    (37958 call =(37954 call . cpi c"_cpindex") i)
    (37962 return cpi)
  }
  function chpl__defaultHash[37972](arg x[37969] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    unknown hash[37979](37978 call int[13] 64)
    {
      const tmp[38086] "const" "temp"
      (38087 'move' tmp[38086](38084 'deref'(37993 'chpl_on_locale_num'(37992 call chpl_buildLocaleID(37987 call . x c"locale_id") c_sublocid_any))))
      {
        unknown locHash[38001] 5381(37997 call int[13] 64)
        {
          unknown _indexOfInterest[38036] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[38037] "expr temp" "temp"
          (38046 'move' _iterator[38037](38044 call _getIterator(38056 call chpl_direct_counted_range_iter 0(38052 call . x c"numBytes"))))
          Defer
          {
            {
              (38072 call _freeIterator _iterator[38037])
            }
          }
          { scopeless type
            (38061 'move' _indexOfInterest[38036](38058 call iteratorIndex _iterator[38037]))
          }
          ForLoop
          {
            unknown c[38065] "index var" "insert auto destroy"
            (38067 'move' c[38065] _indexOfInterest[38036])
            {
              (38032 call = locHash(38030 call ^(38021 call +(38018 call << locHash 5) locHash)(38029 call(38024 call . x c"buff") c)))
            }
            label _continueLabel[38041]
            _indexOfInterest[38036]
            _iterator[38037]
          }
          label _breakLabel[38042]
        }
        (38081 call = hash locHash)
      }
    }
    (38095 return(38093 call _cast uint[107] hash))
  }
  { scopeless type
    uint[107]
  }
}