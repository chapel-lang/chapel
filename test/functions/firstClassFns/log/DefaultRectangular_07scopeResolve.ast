AST dump for DefaultRectangular after pass scopeResolve.
Module use list: DSIUtil ChapelArray ChapelDistribution ChapelRange SysBasic SysError ChapelDebugPrint ChapelLocks OwnedObject IO DefaultSparse DefaultAssociative DefaultOpaque ExternalArray RangeChunk 

{
  const dataParTasksPerLocale[92471] "config" "const" 0
  const dataParIgnoreRunningTasks[92476] "config" "const" 0
  const dataParMinGranularity[92481] "config" "const" 1 int(64)[13]
  if(92508 call _cond_test(92486 call < dataParTasksPerLocale[92471] 0))
  {
    (92506 call halt "dataParTasksPerLocale must be >= 0")
  }
  if(92537 call _cond_test(92515 call <= dataParMinGranularity[92481] 0))
  {
    (92535 call halt "dataParMinGranularity must be > 0")
  }
  unknown debugDefaultDist[92581] "config" "param" 0
  unknown debugDefaultDistBulkTransfer[92585] "config" "param" 0
  unknown debugDataPar[92589] "config" "param" 0
  unknown debugDataParNuma[92593] "config" "param" 0
  unknown defaultDoRADOpt[92597] "config" "param" 1
  unknown defaultDisableLazyRADOpt[92601] "config" "param" 0
  unknown earlyShiftData[92605] "config" "param" 1
  unknown usePollyArrayIndex[92609] "config" "param" 0
  type ArrayStorageOrder[92617] def RMO[92613]:ArrayStorageOrder[92617] def CMO[92615]:ArrayStorageOrder[92617]
  unknown defaultStorageOrder[92626] "config" "param" RMO[92613]
  unknown storageOrder[92630] "param" defaultStorageOrder[92626]
  function polly_array_index[92641](arg arguments[92637] ... :
  int(64)[13]) : _unknown[43] "lineno ok" "llvm readnone"
  {
    unknown rank[92654] "param"(92652 call /(92649 call -(92645 call . arguments[92637] c"size") 1) 2)
    unknown blkStart[92659] "param" 2
    unknown blkEnd[92669] "param"(92667 call -(92664 call + 2 rank[92654]) 1)
    unknown indStart[92676] "param"(92674 call + blkEnd[92669] 1)
    unknown indEnd[92686] "param"(92684 call -(92681 call + indStart[92676] rank[92654]) 1)
    unknown offset[92693](92692 call arguments[92637] 1)
    unknown blk[92700](92698 call * rank[92654] int(64)[13])
    unknown ind[92707](92705 call * rank[92654] int(64)[13])
    (92715 call =(92713 call blk[92700] rank[92654]) 1)
    {
      unknown i[92753] 0
      unknown tmp[92754] "maybe param" "temp"
      (92765 'move' tmp[92754](92763 call chpl_compute_low_param_loop_bound 1(92721 call - rank[92654] 1)))
      unknown tmp[92755] "maybe param" "temp"
      (92775 'move' tmp[92755](92773 call chpl_compute_high_param_loop_bound 1(92770 call - rank[92654] 1)))
      unknown tmp[92756] "maybe param" "temp"
      (92778 'move' tmp[92756](92726 call - 1))
      ParamForLoop
      { i[92753] tmp[92754] tmp[92755] tmp[92756]
        (92750 call =(92733 call blk[92700] i[92753])(92748 call *(92740 call blk[92700](92737 call + i[92753] 1))(92747 call arguments[92637](92744 call + blkStart[92659] i[92753]))))
      }
      label _unused_continueLabel[92758]
      label _breakLabel[92757]
    }
    {
      unknown j[92811] 0
      unknown tmp[92812] "maybe param" "temp"
      (92824 'move' tmp[92812](92822 call chpl_compute_low_param_loop_bound 1 rank[92654]))
      unknown tmp[92813] "maybe param" "temp"
      (92831 'move' tmp[92813](92829 call chpl_compute_high_param_loop_bound 1 rank[92654]))
      unknown tmp[92814] "maybe param" "temp"
      (92834 'move' tmp[92814] 1)
      ParamForLoop
      { j[92811] tmp[92812] tmp[92813] tmp[92814]
        {
          (92807 call =(92796 call ind[92707] j[92811])(92806 call arguments[92637](92803 call -(92800 call + indStart[92676] j[92811]) 1)))
        }
      }
      label _unused_continueLabel[92816]
      label _breakLabel[92815]
    }
    unknown ret[92847] offset[92693] int(64)[13]
    {
      unknown i[92869] 0
      unknown tmp[92870] "maybe param" "temp"
      (92882 'move' tmp[92870](92880 call chpl_compute_low_param_loop_bound 1 rank[92654]))
      unknown tmp[92871] "maybe param" "temp"
      (92889 'move' tmp[92871](92887 call chpl_compute_high_param_loop_bound 1 rank[92654]))
      unknown tmp[92872] "maybe param" "temp"
      (92892 'move' tmp[92872] 1)
      ParamForLoop
      { i[92869] tmp[92870] tmp[92871] tmp[92872]
        {
          (92865 call += ret[92847](92863 call *(92858 call ind[92707] i[92869])(92862 call blk[92700] i[92869])))
        }
      }
      label _unused_continueLabel[92874]
      label _breakLabel[92873]
    }
    (92904 return ret[92847])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultDist[93150].dsiNewRectangularDom[92918](arg _mt[93154]:_MT[227], arg this[93152]:DefaultDist[93150], param arg rank[92915] :
  int(64)[13], arg idxType[92920]:_any[170](?), param arg stridable[92923] :
  bool[10], arg inds[92926]:_any[170](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    const dom[92940] "const"(92939 'new'(92938 'to unmanaged class from unknown'(92937 call anymanaged DefaultRectangularDom[339767](?) rank[92915] idxType[92920] stridable[92923](92936 call _to_unmanaged this[93152]))))
    (92952 call(92947 call . dom[92940] c"dsiSetIndices") inds[92926])
    (92955 return dom[92940])
  }
  function DefaultDist[93150].dsiNewAssociativeDom[92963](arg _mt[93158]:_MT[227], arg this[93156]:DefaultDist[93150], arg idxType[92961]:_any[170](?), param arg parSafe[92966] :
  bool[10]) : _unknown[43] "method" "primary method" "method overrides"
  {
    (92980 return(92979 'new'(92978 'to unmanaged class from unknown'(92977 call anymanaged DefaultAssociativeDom[345836](?) idxType[92961] parSafe[92966](92976 call _to_unmanaged this[93156])))))
  }
  function DefaultDist[93150].dsiNewOpaqueDom[92989](arg _mt[93162]:_MT[227], arg this[93160]:DefaultDist[93150], arg idxType[92987]:_any[170](?), param arg parSafe[92992] :
  bool[10]) : _unknown[43] "method" "primary method" "method overrides"
  {
    (93005 return(93004 'new'(93003 'to unmanaged class from unknown'(93002 call anymanaged DefaultOpaqueDom[345843](?)(92999 call _to_unmanaged this[93160]) parSafe[92992]))))
  }
  function DefaultDist[93150].dsiNewSparseDom[93016](arg _mt[93166]:_MT[227], arg this[93164]:DefaultDist[93150], param arg rank[93013] :
  int(64)[13], arg idxType[93018]:_any[170](?), arg dom[93021] :
  _domain[123390](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    (93036 return(93035 'new'(93034 'to unmanaged class from unknown'(93033 call anymanaged DefaultSparseDom[345850](?) rank[93013] idxType[93018](93031 call _to_unmanaged this[93164]) dom[93021]))))
  }
  function DefaultDist[93150].dsiIndexToLocale[93045](arg _mt[93170]:_MT[227], arg this[93168]:DefaultDist[93150], arg ind[93043]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (93051 return(93049 call chpl_localeID_to_locale(93048 '_wide_get_locale' this[93168])))
  }
  function DefaultDist[93150].dsiClone[93058](arg _mt[93174]:_MT[227], arg this[93172]:DefaultDist[93150]) : _unknown[43] "method" "primary method"
  {
    (93064 return(93063 call _to_unmanaged this[93172]))
  }
  function DefaultDist[93150].dsiAssign[93077](arg _mt[93178]:_MT[227], arg this[93176]:DefaultDist[93150], arg other[93074] :
  (93073 'to unmanaged class from unknown'(93072 'typeof' this[93176]))) : _unknown[43] "method" "primary method" "no return value for void"
  {
  }
  function DefaultDist[93150].dsiEqualDMaps[93089](arg _mt[93182]:_MT[227], arg this[93180]:DefaultDist[93150], arg d[93086] :
  unmanaged DefaultDist[389849]) param : _unknown[43] "method" "primary method"
  {
    (93092 return 1)
  }
  function DefaultDist[93150].dsiEqualDMaps[93101](arg _mt[93186]:_MT[227], arg this[93184]:DefaultDist[93150], arg d[93099]:_any[170](?)) param : _unknown[43] "method" "primary method"
  {
    (93104 return 0)
  }
  function DefaultDist[93150].trackDomains[93111](arg _mt[93190]:_MT[227], arg this[93188]:DefaultDist[93150]) param : _unknown[43] "method" "primary method"
  {
    (93114 return 0)
  }
  function DefaultDist[93150].dsiTrackDomains[93121](arg _mt[93194]:_MT[227], arg this[93192]:DefaultDist[93150]) : _unknown[43] "method" "primary method" "method overrides"
  {
    (93124 return 0)
  }
  function DefaultDist[93150].singleton[93131](arg _mt[93198]:_MT[227], arg this[93196]:DefaultDist[93150]) param : _unknown[43] "method" "primary method"
  {
    (93134 return 1)
  }
  function DefaultDist[93150].dsiIsLayout[93141](arg _mt[93202]:_MT[227], arg this[93200]:DefaultDist[93150]) param : _unknown[43] "method" "primary method"
  {
    (93144 return 1)
  }
  type DefaultDist[93150] val super[331009]:BaseDist[142349] "super class"
  type unmanaged DefaultDist[389849]
  type anymanaged DefaultDist[345861](?)
  unknown defaultDist[93214] "locale private"(93213 'new'(93212 call dmap[115943](93210 'new'(93209 'to unmanaged class from unknown'(93208 call anymanaged DefaultDist[345861](?))))))
  function chpl_defaultDistInitPrivate[93219]() : _unknown[43] "no return value for void"
  {
    if(93257 call _cond_test(93226 call ==(93222 call . defaultDist[93214] c"_value") nil[38]))
    {
      const nd[93237] "const"(93236 'new'(93235 call dmap[115943](93233 'new'(93232 'to unmanaged class from unknown'(93231 call anymanaged DefaultDist[345861](?))))))
      (93255 'move' defaultDist[93214](93254 call chpl__autoCopy(93252 call(93248 call . nd[93237] c"clone"))))
    }
  }
  function DefaultRectangularDom[99677](?).linksDistribution[93289](arg _mt[99681]:_MT[227], arg this[99679]:DefaultRectangularDom[99677](?)) param : _unknown[43] "method" "primary method"
  {
    (93292 return 0)
  }
  function DefaultRectangularDom[99677](?).dsiLinksDistribution[93299](arg _mt[99685]:_MT[227], arg this[99683]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    (93302 return 0)
  }
  function anymanaged anynil DefaultRectangularDom[389605](?).isDefaultRectangular[93309](arg _mt[99689]:_MT[227], arg this[99687]:anymanaged anynil DefaultRectangularDom[389605](?)) param : _unknown[43] "method" "primary method"
  {
    (93312 return 1)
  }
  function DefaultRectangularDom[99677](?).isDefaultRectangular[93319](arg _mt[99693]:_MT[227], arg this[99691]:DefaultRectangularDom[99677](?)) param : _unknown[43] "method" "primary method"
  {
    (93322 return 1)
  }
  function DefaultRectangularDom[99677](?).init[93331](arg _mt[99697]:_MT[227], arg this[99695]:DefaultRectangularDom[99677](?), param arg rank[93329]:_any[170](?), arg idxType[93333]:_any[170](?), param arg stridable[93335]:_any[170](?), arg dist[93337]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (93347 call(93340 call .(345879 call . this[99695] c"super") c"init") rank[93329] idxType[93333] stridable[93335])
    (93357 call =(93353 call . this[99695] c"dist") dist[93337])
  }
  function DefaultRectangularDom[99677](?).intIdxType[93364](arg _mt[99701]:_MT[227], arg this[99699]:DefaultRectangularDom[99677](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (93370 return(93369 call chpl__idxTypeToIntIdxType(345889 call . this[99699] c"idxType")))
  }
  function DefaultRectangularDom[99677](?).dsiMyDist[93377](arg _mt[99705]:_MT[227], arg this[99703]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    (93380 return(345894 call . this[99703] c"dist"))
  }
  function DefaultRectangularDom[99677](?).chpl__serialize[93407](arg _mt[99709]:_MT[227], arg this[99707]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method"
  {
    (93420 return(93419 'new'(93418 call _serialized_domain[93402](?)(345902 call . this[99707] c"rank")(345907 call . this[99707] c"idxType")(345912 call . this[99707] c"stridable")(93416 call(345916 call . this[99707] c"dsiDims")) 1)))
  }
  function anymanaged anynil DefaultRectangularDom[389605](?).chpl__deserialize[93429](arg _mt[99713]:_MT[227], arg this[99711]:anymanaged anynil DefaultRectangularDom[389605](?), arg data[93427]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (93457 return(93456 call(93434 call . defaultDist[93214] c"newRectangularDom")(93438 call . data[93427] c"rank")(93443 call . data[93427] c"idxType")(93447 call . data[93427] c"stridable")(93453 call . data[93427] c"dims")))
  }
  function DefaultRectangularDom[99677](?).dsiDisplayRepresentation[93464](arg _mt[99717]:_MT[227], arg this[99715]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    (93485 call writeln "ranges = "(345926 call . this[99715] c"ranges"))
  }
  function DefaultRectangularDom[99677](?).dsiGetIndices[93492](arg _mt[99721]:_MT[227], arg this[99719]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method"
  {
    (93495 return(345931 call . this[99719] c"ranges"))
  }
  function DefaultRectangularDom[99677](?).dsiSetIndices[93504](arg _mt[99725]:_MT[227], arg this[99723]:DefaultRectangularDom[99677](?), arg x[93502]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (93508 call =(345936 call . this[99723] c"ranges") x[93502])
  }
  function DefaultRectangularDom[99677](?).dsiAssignDomain[93520](arg _mt[99729]:_MT[227], arg this[99727]:DefaultRectangularDom[99677](?), arg rhs[93517] :
  _domain[123390](?), arg lhsPrivate[93523] :
  bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (93530 call chpl_assignDomainWithGetSetIndices this[99727] rhs[93517])
  }
  function DefaultRectangularDom[99677](?).these_help[93541](arg _mt[99733]:_MT[227], arg this[99731]:DefaultRectangularDom[99677](?), param arg d[93538] :
  int(64)[13]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(93777 call _cond_test(93545 call == d[93538](345946 call . this[99731] c"rank")))
    {
      {
        unknown _indexOfInterest[93555] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[93556] "expr temp" "temp"
        (93565 'move' _iterator[93556](93563 call _getIterator(93551 call(345951 call . this[99731] c"ranges") d[93538])))
        Defer
        {
          {
            (93582 call _freeIterator _iterator[93556])
          }
        }
        { scopeless type
          (93571 'move' _indexOfInterest[93555](93568 call iteratorIndex _iterator[93556]))
        }
        ForLoop
        {
          unknown i[93575] "index var" "insert auto destroy"
          (93577 'move' i[93575] _indexOfInterest[93555])
          (93553 yield i[93575])
          label _continueLabel[93560]
          _indexOfInterest[93555]
          _iterator[93556]
        }
        label _breakLabel[93561]
      }
    }
    {
      if(93773 call _cond_test(93595 call == d[93538](93593 call -(345959 call . this[99731] c"rank") 1)))
      {
        {
          unknown _indexOfInterest[93648] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[93649] "expr temp" "temp"
          (93658 'move' _iterator[93649](93656 call _getIterator(93601 call(345964 call . this[99731] c"ranges") d[93538])))
          Defer
          {
            {
              (93675 call _freeIterator _iterator[93649])
            }
          }
          { scopeless type
            (93664 'move' _indexOfInterest[93648](93661 call iteratorIndex _iterator[93649]))
          }
          ForLoop
          {
            unknown i[93668] "index var" "insert auto destroy"
            (93670 'move' i[93668] _indexOfInterest[93648])
            {
              unknown _indexOfInterest[93614] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[93615] "expr temp" "temp"
              (93624 'move' _iterator[93615](93622 call _getIterator(93606 call(345971 call . this[99731] c"these_help")(345976 call . this[99731] c"rank"))))
              Defer
              {
                {
                  (93641 call _freeIterator _iterator[93615])
                }
              }
              { scopeless type
                (93630 'move' _indexOfInterest[93614](93627 call iteratorIndex _iterator[93615]))
              }
              ForLoop
              {
                unknown j[93634] "index var" "insert auto destroy"
                (93636 'move' j[93634] _indexOfInterest[93614])
                (93612 yield(93610 call _build_tuple i[93668] j[93634]))
                label _continueLabel[93619]
                _indexOfInterest[93614]
                _iterator[93615]
              }
              label _breakLabel[93620]
            }
            label _continueLabel[93653]
            _indexOfInterest[93648]
            _iterator[93649]
          }
          label _breakLabel[93654]
        }
      }
      {
        {
          unknown _indexOfInterest[93738] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[93739] "expr temp" "temp"
          (93748 'move' _iterator[93739](93746 call _getIterator(93687 call(345983 call . this[99731] c"ranges") d[93538])))
          Defer
          {
            {
              (93765 call _freeIterator _iterator[93739])
            }
          }
          { scopeless type
            (93754 'move' _indexOfInterest[93738](93751 call iteratorIndex _iterator[93739]))
          }
          ForLoop
          {
            unknown i[93758] "index var" "insert auto destroy"
            (93760 'move' i[93758] _indexOfInterest[93738])
            {
              unknown _indexOfInterest[93704] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[93705] "expr temp" "temp"
              (93714 'move' _iterator[93705](93712 call _getIterator(93695 call(345988 call . this[99731] c"these_help")(93692 call + d[93538] 1))))
              Defer
              {
                {
                  (93731 call _freeIterator _iterator[93705])
                }
              }
              { scopeless type
                (93720 'move' _indexOfInterest[93704](93717 call iteratorIndex _iterator[93705]))
              }
              ForLoop
              {
                unknown j[93724] "index var" "insert auto destroy"
                (93726 'move' j[93724] _indexOfInterest[93704])
                (93702 yield(93700 call _build_tuple i[93758](93698 'expand_tuple' j[93724])))
                label _continueLabel[93709]
                _indexOfInterest[93704]
                _iterator[93705]
              }
              label _breakLabel[93710]
            }
            label _continueLabel[93743]
            _indexOfInterest[93738]
            _iterator[93739]
          }
          label _breakLabel[93744]
        }
      }
    }
  }
  function DefaultRectangularDom[99677](?).these_help[93791](arg _mt[99737]:_MT[227], arg this[99735]:DefaultRectangularDom[99677](?), param arg d[93788] :
  int(64)[13], arg block[93793]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94040 call _cond_test(93800 call == d[93788](93797 call . block[93793] c"size")))
    {
      {
        unknown _indexOfInterest[93810] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[93811] "expr temp" "temp"
        (93820 'move' _iterator[93811](93818 call _getIterator(93806 call block[93793] d[93788])))
        Defer
        {
          {
            (93837 call _freeIterator _iterator[93811])
          }
        }
        { scopeless type
          (93826 'move' _indexOfInterest[93810](93823 call iteratorIndex _iterator[93811]))
        }
        ForLoop
        {
          unknown i[93830] "index var" "insert auto destroy"
          (93832 'move' i[93830] _indexOfInterest[93810])
          (93808 yield i[93830])
          label _continueLabel[93815]
          _indexOfInterest[93810]
          _iterator[93811]
        }
        label _breakLabel[93816]
      }
    }
    {
      if(94036 call _cond_test(93853 call == d[93788](93851 call -(93847 call . block[93793] c"size") 1)))
      {
        {
          unknown _indexOfInterest[93910] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[93911] "expr temp" "temp"
          (93920 'move' _iterator[93911](93918 call _getIterator(93859 call block[93793] d[93788])))
          Defer
          {
            {
              (93937 call _freeIterator _iterator[93911])
            }
          }
          { scopeless type
            (93926 'move' _indexOfInterest[93910](93923 call iteratorIndex _iterator[93911]))
          }
          ForLoop
          {
            unknown i[93930] "index var" "insert auto destroy"
            (93932 'move' i[93930] _indexOfInterest[93910])
            {
              unknown _indexOfInterest[93876] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[93877] "expr temp" "temp"
              (93886 'move' _iterator[93877](93884 call _getIterator(93868 call(346004 call . this[99735] c"these_help")(93863 call . block[93793] c"size") block[93793])))
              Defer
              {
                {
                  (93903 call _freeIterator _iterator[93877])
                }
              }
              { scopeless type
                (93892 'move' _indexOfInterest[93876](93889 call iteratorIndex _iterator[93877]))
              }
              ForLoop
              {
                unknown j[93896] "index var" "insert auto destroy"
                (93898 'move' j[93896] _indexOfInterest[93876])
                (93874 yield(93872 call _build_tuple i[93930] j[93896]))
                label _continueLabel[93881]
                _indexOfInterest[93876]
                _iterator[93877]
              }
              label _breakLabel[93882]
            }
            label _continueLabel[93915]
            _indexOfInterest[93910]
            _iterator[93911]
          }
          label _breakLabel[93916]
        }
      }
      {
        {
          unknown _indexOfInterest[94001] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[94002] "expr temp" "temp"
          (94011 'move' _iterator[94002](94009 call _getIterator(93949 call block[93793] d[93788])))
          Defer
          {
            {
              (94028 call _freeIterator _iterator[94002])
            }
          }
          { scopeless type
            (94017 'move' _indexOfInterest[94001](94014 call iteratorIndex _iterator[94002]))
          }
          ForLoop
          {
            unknown i[94021] "index var" "insert auto destroy"
            (94023 'move' i[94021] _indexOfInterest[94001])
            {
              unknown _indexOfInterest[93967] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[93968] "expr temp" "temp"
              (93977 'move' _iterator[93968](93975 call _getIterator(93958 call(346014 call . this[99735] c"these_help")(93954 call + d[93788] 1) block[93793])))
              Defer
              {
                {
                  (93994 call _freeIterator _iterator[93968])
                }
              }
              { scopeless type
                (93983 'move' _indexOfInterest[93967](93980 call iteratorIndex _iterator[93968]))
              }
              ForLoop
              {
                unknown j[93987] "index var" "insert auto destroy"
                (93989 'move' j[93987] _indexOfInterest[93967])
                (93965 yield(93963 call _build_tuple i[94021](93961 'expand_tuple' j[93987])))
                label _continueLabel[93972]
                _indexOfInterest[93967]
                _iterator[93968]
              }
              label _breakLabel[93973]
            }
            label _continueLabel[94006]
            _indexOfInterest[94001]
            _iterator[94002]
          }
          label _breakLabel[94007]
        }
      }
    }
  }
  function DefaultRectangularDom[99677](?).these[94054](arg _mt[99741]:_MT[227], arg this[99739]:DefaultRectangularDom[99677](?), arg tasksPerLocale[94051] =
  dataParTasksPerLocale[92471], arg ignoreRunning[94057] =
  dataParIgnoreRunningTasks[92476], arg minIndicesPerTask[94061] =
  dataParMinGranularity[92481], arg offset[94073] =
  (94072 call createTuple(346026 call . this[99739] c"rank")(346030 call . this[99739] c"intIdxType")(94070 call _cast(346034 call . this[99739] c"intIdxType") 0))) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94166 call _cond_test(94078 call ==(346039 call . this[99739] c"rank") 1))
    {
      {
        unknown _indexOfInterest[94088] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94089] "expr temp" "temp"
        (94098 'move' _iterator[94089](94096 call _getIterator(94084 call(346044 call . this[99739] c"ranges") 1)))
        Defer
        {
          {
            (94115 call _freeIterator _iterator[94089])
          }
        }
        { scopeless type
          (94104 'move' _indexOfInterest[94088](94101 call iteratorIndex _iterator[94089]))
        }
        ForLoop
        {
          unknown i[94108] "index var" "insert auto destroy"
          (94110 'move' i[94108] _indexOfInterest[94088])
          (94086 yield i[94108])
          label _continueLabel[94093]
          _indexOfInterest[94088]
          _iterator[94089]
        }
        label _breakLabel[94094]
      }
    }
    {
      {
        unknown _indexOfInterest[94131] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94132] "expr temp" "temp"
        (94141 'move' _iterator[94132](94139 call _getIterator(94127 call(346049 call . this[99739] c"these_help") 1)))
        Defer
        {
          {
            (94158 call _freeIterator _iterator[94132])
          }
        }
        { scopeless type
          (94147 'move' _indexOfInterest[94131](94144 call iteratorIndex _iterator[94132]))
        }
        ForLoop
        {
          unknown i[94151] "index var" "insert auto destroy"
          (94153 'move' i[94151] _indexOfInterest[94131])
          (94129 yield i[94151])
          label _continueLabel[94136]
          _indexOfInterest[94131]
          _iterator[94132]
        }
        label _breakLabel[94137]
      }
    }
  }
  function DefaultRectangularDom[99677](?).these[94179](arg _mt[99745]:_MT[227], arg this[99743]:DefaultRectangularDom[99677](?), param arg tag[94176] :
  iterKind[697], arg tasksPerLocale[94182] =
  dataParTasksPerLocale[92471], arg ignoreRunning[94186] =
  dataParIgnoreRunningTasks[92476], arg minIndicesPerTask[94190] =
  dataParMinGranularity[92481], arg offset[94202] =
  (94201 call createTuple(346059 call . this[99743] c"rank")(346063 call . this[99743] c"intIdxType")(94199 call _cast(346067 call . this[99743] c"intIdxType") 0))) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(94234 call _cond_test chpl__testParFlag[181291])
    {
      (94232 call chpl__testPar "default rectangular domain standalone invoked on "(346075 call . this[99743] c"ranges"))
    }
    if(94261 call _cond_test debugDefaultDist[92581])
    {
      (94259 call chpl_debug_writeln "*** In domain standalone code:")
    }
    const numTasks[94278] "const"(94275 IfExpr (94268 call == tasksPerLocale[94182] 0) then
    { scopeless
      (94271 call .(346080 call here[92085]) c"maxTaskPar")
    } else
    { scopeless
      tasksPerLocale[94182]
    } )
    if(94338 call _cond_test debugDefaultDist[92581])
    {
      (94335 call chpl_debug_writeln "    numTasks=" numTasks[94278] " (" ignoreRunning[94186] "), minIndicesPerTask=" minIndicesPerTask[94190])
    }
    const tmp[94367] "const" "no auto destroy" "no copy" "temp"(94364 IfExpr (94349 'task_get_serial') then
    { scopeless
      (94355 call _build_tuple 1(94352 call - 1))
    } else
    { scopeless
      (94363 call _computeChunkStuff numTasks[94278] ignoreRunning[94186] minIndicesPerTask[94190](346092 call . this[99743] c"ranges"))
    } )
    (94374 call _check_tuple_var_decl tmp[94367] 2)
    const numChunks[94342] "const"(94368 call tmp[94367] 1)
    const parDim[94344] "const"(94371 call tmp[94367] 2)
    if(94459 call _cond_test debugDefaultDist[92581])
    {
      (94456 call chpl_debug_writeln "    numChunks=" numChunks[94342] " parDim=" parDim[94344] " ranges(" parDim[94344] ").length="(94453 call .(94452 call(346101 call . this[99743] c"ranges") parDim[94344]) c"length"))
    }
    if(94545 call _cond_test debugDataPar[92589])
    {
      (94542 call chpl_debug_writeln "### numTasksPerLoc = " numTasks[94278] "\n" "### ignoreRunning = " ignoreRunning[94186] "\n" "### minIndicesPerTask = " minIndicesPerTask[94190] "\n" "### numChunks = " numChunks[94342] " (parDim = " parDim[94344] ")\n" "### nranges = "(346113 call . this[99743] c"ranges"))
    }
    if(95214 call _cond_test(94551 call <= numChunks[94342] 1))
    {
      {
        unknown _indexOfInterest[94562] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94563] "expr temp" "temp"
        (94572 'move' _iterator[94563](94570 call _getIterator(94557 call(346118 call . this[99743] c"these_help") 1)))
        Defer
        {
          {
            (94589 call _freeIterator _iterator[94563])
          }
        }
        { scopeless type
          (94578 'move' _indexOfInterest[94562](94575 call iteratorIndex _iterator[94563]))
        }
        ForLoop
        {
          unknown i[94582] "index var" "insert auto destroy"
          (94584 'move' i[94582] _indexOfInterest[94562])
          {
            (94559 yield i[94582])
          }
          label _continueLabel[94567]
          _indexOfInterest[94562]
          _iterator[94563]
        }
        label _breakLabel[94568]
      }
    }
    {
      if(94620 call _cond_test debugDefaultDist[92581])
      {
        (94617 call chpl_debug_writeln "*** DI: ranges = "(346125 call . this[99743] c"ranges"))
      }
      {
        unknown tmpIter[94872] "expr temp" "maybe ref" "no copy" "temp"
        (94875 'move' tmpIter[94872](94630 call #(94627 call chpl_build_low_bounded_range 0) numChunks[94342]))
        unknown isRngDomArr[95195] "maybe param" "temp"
        (95210 'move' isRngDomArr[95195](95208 call ||(95197 call isBoundedRange tmpIter[94872])(95206 call ||(95200 call isDomain tmpIter[94872])(95203 call isArray tmpIter[94872]))))
        if isRngDomArr[95195]
        {
          const _coforallCount[95062] "const" "end count" "temp"
          (95131 'move' _coforallCount[95062](95128 call _endCountAlloc 1))
          unknown numTasks[95063] "temp"
          (95115 'move' numTasks[95063](95111 call . tmpIter[94872] c"size"))
          (95106 call _upEndCount _coforallCount[95062] 1 numTasks[95063])
          (95103 call chpl_resetTaskSpawn numTasks[95063])
          unknown _indexOfInterest[95070] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[95071] "expr temp" "temp"
          (95080 'move' _iterator[95071](95078 call _getIterator tmpIter[94872]))
          Defer
          {
            {
              (95096 call _freeIterator _iterator[95071])
            }
          }
          { scopeless type
            (95085 'move' _indexOfInterest[95070](95082 call iteratorIndex _iterator[95071]))
          }
          ForLoop
          {
            unknown chunk[95089] "coforall index var" "index var" "insert auto destroy"
            (95091 'move' chunk[95089] _indexOfInterest[95070])
            {
              {
                unknown block[94878](346204 call . this[99743] c"ranges")
                const len[94881] "const"(94920 IfExpr (94883 call !(94885 call .(94887 call(346209 call . this[99743] c"ranges") parDim[94344]) c"stridable")) then
                { scopeless
                  (94892 call .(94894 call(346215 call . this[99743] c"ranges") parDim[94344]) c"length")
                } else
                { scopeless
                  (94899 call *(94901 call _cast uint(64)[107](94904 call .(94906 call(346221 call . this[99743] c"ranges") parDim[94344]) c"length"))(94910 call _cast uint(64)[107](94913 call abs(94915 call .(94917 call(346227 call . this[99743] c"ranges") parDim[94344]) c"stride"))))
                } )
                const tmp[94923] "const" "no copy" "temp"(94925 call _computeBlock len[94881] numChunks[94342] chunk[95089](94930 call .(94932 call(346236 call . this[99743] c"ranges") parDim[94344]) c"_high")(94936 call .(94938 call(346242 call . this[99743] c"ranges") parDim[94344]) c"_low")(94942 call .(94944 call(346248 call . this[99743] c"ranges") parDim[94344]) c"_low"))
                (94949 call _check_tuple_var_decl tmp[94923] 2)
                const lo[94952] "const"(94954 call tmp[94923] 1)
                const hi[94957] "const"(94959 call tmp[94923] 2)
                if(94963 call _cond_test(94965 call .(94967 call block[94878] parDim[94344]) c"stridable"))
                {
                  (94973 call =(94975 call block[94878] parDim[94344])(94978 call chpl_align(94980 call chpl_by(94982 call chpl_build_bounded_range lo[94952] hi[94957])(94986 call .(94988 call block[94878] parDim[94344]) c"stride"))(94992 call chpl__idxToInt(94994 call .(94996 call block[94878] parDim[94344]) c"alignment"))))
                }
                {
                  (95002 call =(95004 call block[94878] parDim[94344])(95007 call chpl_build_bounded_range lo[94952] hi[94957]))
                }
                if(95012 call _cond_test debugDefaultDist[92581])
                {
                  (95016 call chpl_debug_writeln "*** DI[" chunk[95089] "]: block = " block[94878])
                }
                {
                  unknown _indexOfInterest[95023] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95025] "expr temp" "temp"
                  (95027 'move' _iterator[95025](95030 call _getIterator(95032 call(346270 call . this[99743] c"these_help") 1 block[94878])))
                  Defer
                  {
                    {
                      (95037 call _freeIterator _iterator[95025])
                    }
                  }
                  { scopeless type
                    (95041 'move' _indexOfInterest[95023](95044 call iteratorIndex _iterator[95025]))
                  }
                  ForLoop
                  {
                    unknown i[95049] "index var" "insert auto destroy"
                    (95051 'move' i[95049] _indexOfInterest[95023])
                    {
                      (95055 yield i[95049])
                    }
                    label _continueLabel[95057]
                    _indexOfInterest[95023]
                    _iterator[95025]
                  }
                  label _breakLabel[95059]
                }
              }
              (95065 call _downEndCount _coforallCount[95062] nil[38])
              (95064 'coforall loop')
            }
            label _continueLabel[95075]
            _indexOfInterest[95070]
            _iterator[95071]
          }
          label _breakLabel[95076]
          Defer
          {
            {
              (95118 call _endCountFree _coforallCount[95062])
            }
          }
          (95123 call _waitEndCount _coforallCount[95062] 1 numTasks[95063])
        }
        {
          const _coforallCount[95135] "const" "end count" "temp"
          (95192 'move' _coforallCount[95135](95189 call _endCountAlloc 1))
          unknown _indexOfInterest[95143] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[95144] "expr temp" "temp"
          (95153 'move' _iterator[95144](95151 call _getIterator tmpIter[94872]))
          Defer
          {
            {
              (95169 call _freeIterator _iterator[95144])
            }
          }
          { scopeless type
            (95158 'move' _indexOfInterest[95143](95155 call iteratorIndex _iterator[95144]))
          }
          ForLoop
          {
            unknown chunk[95162] "coforall index var" "index var" "insert auto destroy"
            (95164 'move' chunk[95162] _indexOfInterest[95143])
            (95176 call _upEndCount _coforallCount[95135] 1)
            {
              {
                unknown block[94633](346131 call . this[99743] c"ranges")
                const len[94681] "const"(94678 IfExpr (94644 call !(94641 call .(94640 call(346136 call . this[99743] c"ranges") parDim[94344]) c"stridable")) then
                { scopeless
                  (94650 call .(94649 call(346142 call . this[99743] c"ranges") parDim[94344]) c"length")
                } else
                { scopeless
                  (94676 call *(94661 call _cast uint(64)[107](94657 call .(94656 call(346148 call . this[99743] c"ranges") parDim[94344]) c"length"))(94674 call _cast uint(64)[107](94672 call abs(94668 call .(94667 call(346154 call . this[99743] c"ranges") parDim[94344]) c"stride"))))
                } )
                const tmp[94716] "const" "no copy" "temp"(94715 call _computeBlock len[94681] numChunks[94342] chunk[95162](94698 call .(94697 call(346163 call . this[99743] c"ranges") parDim[94344]) c"_high")(94705 call .(94704 call(346169 call . this[99743] c"ranges") parDim[94344]) c"_low")(94712 call .(94711 call(346175 call . this[99743] c"ranges") parDim[94344]) c"_low"))
                (94723 call _check_tuple_var_decl tmp[94716] 2)
                const lo[94684] "const"(94717 call tmp[94716] 1)
                const hi[94686] "const"(94720 call tmp[94716] 2)
                if(94778 call _cond_test(94732 call .(94731 call block[94633] parDim[94344]) c"stridable"))
                {
                  (94764 call =(94738 call block[94633] parDim[94344])(94762 call chpl_align(94750 call chpl_by(94741 call chpl_build_bounded_range lo[94684] hi[94686])(94747 call .(94746 call block[94633] parDim[94344]) c"stride"))(94761 call chpl__idxToInt(94757 call .(94756 call block[94633] parDim[94344]) c"alignment"))))
                }
                {
                  (94775 call =(94770 call block[94633] parDim[94344])(94773 call chpl_build_bounded_range lo[94684] hi[94686]))
                }
                if(94824 call _cond_test debugDefaultDist[92581])
                {
                  (94821 call chpl_debug_writeln "*** DI[" chunk[95162] "]: block = " block[94633])
                }
                {
                  unknown _indexOfInterest[94838] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[94839] "expr temp" "temp"
                  (94848 'move' _iterator[94839](94846 call _getIterator(94833 call(346197 call . this[99743] c"these_help") 1 block[94633])))
                  Defer
                  {
                    {
                      (94865 call _freeIterator _iterator[94839])
                    }
                  }
                  { scopeless type
                    (94854 'move' _indexOfInterest[94838](94851 call iteratorIndex _iterator[94839]))
                  }
                  ForLoop
                  {
                    unknown i[94858] "index var" "insert auto destroy"
                    (94860 'move' i[94858] _indexOfInterest[94838])
                    {
                      (94835 yield i[94858])
                    }
                    label _continueLabel[94843]
                    _indexOfInterest[94838]
                    _iterator[94839]
                  }
                  label _breakLabel[94844]
                }
              }
              (95138 call _downEndCount _coforallCount[95135] nil[38])
              (95137 'coforall loop')
            }
            label _continueLabel[95148]
            _indexOfInterest[95143]
            _iterator[95144]
          }
          label _breakLabel[95149]
          Defer
          {
            {
              (95180 call _endCountFree _coforallCount[95135])
            }
          }
          (95185 call _waitEndCount _coforallCount[95135] 1)
        }
      }
    }
  }
  where {
    (94210 call == tag[94176] standalone[695])
  }
  function DefaultRectangularDom[99677](?).these[95227](arg _mt[99749]:_MT[227], arg this[99747]:DefaultRectangularDom[99677](?), param arg tag[95224] :
  iterKind[697], arg tasksPerLocale[95230] =
  dataParTasksPerLocale[92471], arg ignoreRunning[95234] =
  dataParIgnoreRunningTasks[92476], arg minIndicesPerTask[95238] =
  dataParMinGranularity[92481], arg offset[95250] =
  (95249 call createTuple(346281 call . this[99747] c"rank")(346285 call . this[99747] c"intIdxType")(95247 call _cast(346289 call . this[99747] c"intIdxType") 0))) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    const numSublocs[95266] "const"(95265 call(95261 call .(346294 call here[92085]) c"getChildCount"))
    if(97813 call _cond_test(95275 call && localeModelHasSublocales[180486](95273 call != numSublocs[95266] 0)))
    {
      unknown dptpl[95289](95286 IfExpr (95279 call == tasksPerLocale[95230] 0) then
      { scopeless
        (95282 call .(346299 call here[92085]) c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale[95230]
      } )
      if(95328 call _cond_test(95294 call ! ignoreRunning[95234]))
      {
        const otherTasks[95305] "const"(95303 call -(95301 call(95297 call .(346303 call here[92085]) c"runningTasks")) 1)
        (95325 call = dptpl[95289](95322 IfExpr (95312 call < otherTasks[95305] dptpl[95289]) then
        { scopeless
          (95319 call _cast int(64)[13](95316 call - dptpl[95289] otherTasks[95305]))
        } else
        { scopeless
          1
        } ))
      }
      const numSublocTasks[95337] "const"(95336 call min numSublocs[95266] dptpl[95289])
      const tmp[95366] "const" "no auto destroy" "no copy" "temp"(95363 IfExpr (95347 'task_get_serial') then
      { scopeless
        (95353 call _build_tuple 1(95350 call - 1))
      } else
      { scopeless
        (95362 call _computeChunkStuff numSublocTasks[95337](ignoreRunning = 1) minIndicesPerTask[95238](346316 call . this[99747] c"ranges"))
      } )
      (95373 call _check_tuple_var_decl tmp[95366] 2)
      const numChunks[95340] "const"(95367 call tmp[95366] 1)
      const parDim[95342] "const"(95370 call tmp[95366] 2)
      if(95403 call _cond_test debugDataParNuma[92593])
      {
        (95400 call chpl_debug_writeln "### numSublocs = " numSublocs[95266] "\n" "### numTasksPerSubloc = " numSublocTasks[95337] "\n" "### ignoreRunning = " ignoreRunning[95234] "\n" "### minIndicesPerTask = " minIndicesPerTask[95238] "\n" "### numChunks = " numChunks[95340] " (parDim = " parDim[95342] ")\n" "### nranges = "(346328 call . this[99747] c"ranges"))
      }
      if(97107 call _cond_test(95409 call == numChunks[95340] 1))
      {
        if(95509 call _cond_test(95413 call ==(346334 call . this[99747] c"rank") 1))
        {
          (95432 yield(95430 call _build_tuple(95428 call #(95419 call chpl_build_low_bounded_range(95418 call offset[95250] 1))(95425 call .(95424 call(346340 call . this[99747] c"ranges") 1) c"length"))))
        }
        {
          unknown block[95442](95440 call *(346345 call . this[99747] c"rank")(95439 call range[66183](?)(346350 call . this[99747] c"intIdxType")))
          {
            unknown i[95472] 0
            unknown tmp[95473] "maybe param" "temp"
            (95485 'move' tmp[95473](95483 call chpl_compute_low_param_loop_bound 1(346355 call . this[99747] c"rank")))
            unknown tmp[95474] "maybe param" "temp"
            (95492 'move' tmp[95474](95490 call chpl_compute_high_param_loop_bound 1(346370 call . this[99747] c"rank")))
            unknown tmp[95475] "maybe param" "temp"
            (95495 'move' tmp[95475] 1)
            ParamForLoop
            { i[95472] tmp[95473] tmp[95474] tmp[95475]
              (95469 call =(95453 call block[95442] i[95472])(95467 call #(95458 call chpl_build_low_bounded_range(95457 call offset[95250] i[95472]))(95464 call .(95463 call(346364 call . this[99747] c"ranges") i[95472]) c"length")))
            }
            label _unused_continueLabel[95477]
            label _breakLabel[95476]
          }
          (95507 yield block[95442])
        }
      }
      {
        {
          unknown tmpIter[96283] "expr temp" "maybe ref" "no copy" "temp"
          (96286 'move' tmpIter[96283](95519 call #(95516 call chpl_build_low_bounded_range 0) numChunks[95340]))
          unknown isRngDomArr[97087] "maybe param" "temp"
          (97102 'move' isRngDomArr[97087](97100 call ||(97089 call isBoundedRange tmpIter[96283])(97098 call ||(97092 call isDomain tmpIter[96283])(97095 call isArray tmpIter[96283]))))
          if isRngDomArr[97087]
          {
            const _coforallCount[96954] "const" "end count" "temp"
            (97023 'move' _coforallCount[96954](97020 call _endCountAlloc 1))
            unknown numTasks[96955] "temp"
            (97007 'move' numTasks[96955](97003 call . tmpIter[96283] c"size"))
            (96998 call _upEndCount _coforallCount[96954] 1 numTasks[96955])
            (96995 call chpl_resetTaskSpawn numTasks[96955])
            unknown _indexOfInterest[96962] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[96963] "expr temp" "temp"
            (96972 'move' _iterator[96963](96970 call _getIterator tmpIter[96283]))
            Defer
            {
              {
                (96988 call _freeIterator _iterator[96963])
              }
            }
            { scopeless type
              (96977 'move' _indexOfInterest[96962](96974 call iteratorIndex _iterator[96963]))
            }
            ForLoop
            {
              unknown chunk[96981] "coforall index var" "index var" "insert auto destroy"
              (96983 'move' chunk[96981] _indexOfInterest[96962])
              {
                {
                  const tmp[96290] "const" "temp"
                  (96292 'move' tmp[96290](96294 'deref'(96295 '_wide_get_locale'(96300 call(96297 call .(346563 call here[92085]) c"getChild") chunk[96981]))))
                  {
                    if(96304 call _cond_test debugDataParNuma[92593])
                    {
                      if(96308 call _cond_test(96310 call != chunk[96981](96313 call chpl_getSubloc)))
                      {
                        (96317 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[96981] ", on "(96322 call chpl_getSubloc) ") ***")
                      }
                    }
                    const numSublocTasks[96326] "const"(96347 IfExpr (96328 call < chunk[96981](96331 call % dptpl[95289] numChunks[95340])) then
                    { scopeless
                      (96336 call +(96338 call / dptpl[95289] numChunks[95340]) 1)
                    } else
                    { scopeless
                      (96344 call / dptpl[95289] numChunks[95340])
                    } )
                    unknown locBlock[96349](96351 call *(346578 call . this[99747] c"rank")(96354 call range[66183](?)(346583 call . this[99747] c"intIdxType")))
                    {
                      unknown i[96358] 0
                      unknown tmp[96361] "maybe param" "temp"
                      (96363 'move' tmp[96361](96366 call chpl_compute_low_param_loop_bound 1(346588 call . this[99747] c"rank")))
                      unknown tmp[96369] "maybe param" "temp"
                      (96371 'move' tmp[96369](96374 call chpl_compute_high_param_loop_bound 1(346593 call . this[99747] c"rank")))
                      unknown tmp[96377] "maybe param" "temp"
                      (96379 'move' tmp[96377] 1)
                      ParamForLoop
                      { i[96358] tmp[96361] tmp[96369] tmp[96377]
                        (96390 call =(96392 call locBlock[96349] i[96358])(96395 call #(96397 call chpl_build_low_bounded_range(96399 call offset[95250] i[96358]))(96402 call .(96404 call(346602 call . this[99747] c"ranges") i[96358]) c"length")))
                      }
                      label _unused_continueLabel[96407]
                      label _breakLabel[96409]
                    }
                    unknown followMe[96411] locBlock[96349](96414 call *(346609 call . this[99747] c"rank")(96417 call range[66183](?)(346614 call . this[99747] c"intIdxType")))
                    const tmp[96421] "const" "no copy" "temp"(96423 call _computeBlock(96425 call .(96427 call locBlock[96349] parDim[95342]) c"length") numChunks[95340] chunk[96981](96433 call .(96435 call locBlock[96349] parDim[95342]) c"_high")(96439 call .(96441 call locBlock[96349] parDim[95342]) c"_low")(96445 call .(96447 call locBlock[96349] parDim[95342]) c"_low"))
                    (96452 call _check_tuple_var_decl tmp[96421] 2)
                    const lo[96455] "const"(96457 call tmp[96421] 1)
                    const hi[96460] "const"(96462 call tmp[96421] 2)
                    (96466 call =(96468 call followMe[96411] parDim[95342])(96471 call chpl_build_bounded_range lo[96455] hi[96460]))
                    const tmp[96475] "const" "no copy" "temp"(96477 call _computeChunkStuff numSublocTasks[96326](ignoreRunning = 1) minIndicesPerTask[95238] followMe[96411])
                    (96485 call _check_tuple_var_decl tmp[96475] 2)
                    const numChunks2[96488] "const"(96490 call tmp[96475] 1)
                    const parDim2[96493] "const"(96495 call tmp[96475] 2)
                    {
                      unknown tmpIter[96499] "expr temp" "maybe ref" "no copy" "temp"
                      (96501 'move' tmpIter[96499](96504 call #(96506 call chpl_build_low_bounded_range 0) numChunks2[96488]))
                      unknown isRngDomArr[96509] "maybe param" "temp"
                      (96511 'move' isRngDomArr[96509](96514 call ||(96516 call isBoundedRange tmpIter[96499])(96519 call ||(96521 call isDomain tmpIter[96499])(96524 call isArray tmpIter[96499]))))
                      if isRngDomArr[96509]
                      {
                        const _coforallCount[96528] "const" "end count" "temp"
                        (96530 'move' _coforallCount[96528](96533 call _endCountAlloc 1))
                        unknown numTasks[96535] "temp"
                        (96537 'move' numTasks[96535](96540 call . tmpIter[96499] c"size"))
                        (96544 call _upEndCount _coforallCount[96528] 1 numTasks[96535])
                        (96549 call chpl_resetTaskSpawn numTasks[96535])
                        unknown _indexOfInterest[96551] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[96553] "expr temp" "temp"
                        (96555 'move' _iterator[96553](96558 call _getIterator tmpIter[96499]))
                        Defer
                        {
                          {
                            (96562 call _freeIterator _iterator[96553])
                          }
                        }
                        { scopeless type
                          (96566 'move' _indexOfInterest[96551](96569 call iteratorIndex _iterator[96553]))
                        }
                        ForLoop
                        {
                          unknown chunk2[96574] "coforall index var" "index var" "insert auto destroy"
                          (96576 'move' chunk2[96574] _indexOfInterest[96551])
                          {
                            {
                              unknown locBlock2[96582](96584 call *(346637 call . this[99747] c"rank")(96587 call range[66183](?)(346642 call . this[99747] c"intIdxType")))
                              {
                                unknown i[96591] 0
                                unknown tmp[96594] "maybe param" "temp"
                                (96596 'move' tmp[96594](96599 call chpl_compute_low_param_loop_bound 1(346647 call . this[99747] c"rank")))
                                unknown tmp[96602] "maybe param" "temp"
                                (96604 'move' tmp[96602](96607 call chpl_compute_high_param_loop_bound 1(346652 call . this[99747] c"rank")))
                                unknown tmp[96610] "maybe param" "temp"
                                (96612 'move' tmp[96610] 1)
                                ParamForLoop
                                { i[96591] tmp[96594] tmp[96602] tmp[96610]
                                  (96623 call =(96625 call locBlock2[96582] i[96591])(96628 call chpl_build_bounded_range(96630 call .(96632 call followMe[96411] i[96591]) c"low")(96636 call .(96638 call followMe[96411] i[96591]) c"high")))
                                }
                                label _unused_continueLabel[96641]
                                label _breakLabel[96643]
                              }
                              unknown followMe2[96645] locBlock2[96582](96648 call *(346664 call . this[99747] c"rank")(96651 call range[66183](?)(346669 call . this[99747] c"intIdxType")))
                              const low[96655] "const"(96657 call .(96659 call locBlock2[96582] parDim2[96493]) c"_low")
                              const high[96663] "const"(96665 call .(96667 call locBlock2[96582] parDim2[96493]) c"_high")
                              const tmp[96672] "const" "no copy" "temp"(96674 call _computeBlock(96676 call .(96678 call locBlock2[96582] parDim2[96493]) c"length") numChunks2[96488] chunk2[96574] high[96663] low[96655] low[96655])
                              (96688 call _check_tuple_var_decl tmp[96672] 2)
                              const lo[96691] "const"(96693 call tmp[96672] 1)
                              const hi[96696] "const"(96698 call tmp[96672] 2)
                              (96702 call =(96704 call followMe2[96645] parDim2[96493])(96707 call chpl_build_bounded_range lo[96691] hi[96696]))
                              if(96711 call _cond_test debugDataParNuma[92593])
                              {
                                (96715 call chpl_debug_writeln "### chunk = " chunk[96981] "  chunk2 = " chunk2[96574] "  " "followMe = " followMe[96411] "  followMe2 = " followMe2[96645])
                              }
                              (96726 yield followMe2[96645])
                            }
                            (96729 call _downEndCount _coforallCount[96528] nil[38])
                            (96580 'coforall loop')
                          }
                          label _continueLabel[96732]
                          _indexOfInterest[96551]
                          _iterator[96553]
                        }
                        label _breakLabel[96734]
                        Defer
                        {
                          {
                            (96738 call _endCountFree _coforallCount[96528])
                          }
                        }
                        (96742 call _waitEndCount _coforallCount[96528] 1 numTasks[96535])
                      }
                      {
                        const _coforallCount[96747] "const" "end count" "temp"
                        (96749 'move' _coforallCount[96747](96752 call _endCountAlloc 1))
                        unknown _indexOfInterest[96754] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[96756] "expr temp" "temp"
                        (96758 'move' _iterator[96756](96761 call _getIterator tmpIter[96499]))
                        Defer
                        {
                          {
                            (96765 call _freeIterator _iterator[96756])
                          }
                        }
                        { scopeless type
                          (96769 'move' _indexOfInterest[96754](96772 call iteratorIndex _iterator[96756]))
                        }
                        ForLoop
                        {
                          unknown chunk2[96777] "coforall index var" "index var" "insert auto destroy"
                          (96779 'move' chunk2[96777] _indexOfInterest[96754])
                          (96783 call _upEndCount _coforallCount[96747] 1)
                          {
                            {
                              unknown locBlock2[96789](96791 call *(346695 call . this[99747] c"rank")(96794 call range[66183](?)(346700 call . this[99747] c"intIdxType")))
                              {
                                unknown i[96798] 0
                                unknown tmp[96801] "maybe param" "temp"
                                (96803 'move' tmp[96801](96806 call chpl_compute_low_param_loop_bound 1(346705 call . this[99747] c"rank")))
                                unknown tmp[96809] "maybe param" "temp"
                                (96811 'move' tmp[96809](96814 call chpl_compute_high_param_loop_bound 1(346710 call . this[99747] c"rank")))
                                unknown tmp[96817] "maybe param" "temp"
                                (96819 'move' tmp[96817] 1)
                                ParamForLoop
                                { i[96798] tmp[96801] tmp[96809] tmp[96817]
                                  (96830 call =(96832 call locBlock2[96789] i[96798])(96835 call chpl_build_bounded_range(96837 call .(96839 call followMe[96411] i[96798]) c"low")(96843 call .(96845 call followMe[96411] i[96798]) c"high")))
                                }
                                label _unused_continueLabel[96848]
                                label _breakLabel[96850]
                              }
                              unknown followMe2[96852] locBlock2[96789](96855 call *(346722 call . this[99747] c"rank")(96858 call range[66183](?)(346727 call . this[99747] c"intIdxType")))
                              const low[96862] "const"(96864 call .(96866 call locBlock2[96789] parDim2[96493]) c"_low")
                              const high[96870] "const"(96872 call .(96874 call locBlock2[96789] parDim2[96493]) c"_high")
                              const tmp[96879] "const" "no copy" "temp"(96881 call _computeBlock(96883 call .(96885 call locBlock2[96789] parDim2[96493]) c"length") numChunks2[96488] chunk2[96777] high[96870] low[96862] low[96862])
                              (96895 call _check_tuple_var_decl tmp[96879] 2)
                              const lo[96898] "const"(96900 call tmp[96879] 1)
                              const hi[96903] "const"(96905 call tmp[96879] 2)
                              (96909 call =(96911 call followMe2[96852] parDim2[96493])(96914 call chpl_build_bounded_range lo[96898] hi[96903]))
                              if(96918 call _cond_test debugDataParNuma[92593])
                              {
                                (96922 call chpl_debug_writeln "### chunk = " chunk[96981] "  chunk2 = " chunk2[96777] "  " "followMe = " followMe[96411] "  followMe2 = " followMe2[96852])
                              }
                              (96933 yield followMe2[96852])
                            }
                            (96936 call _downEndCount _coforallCount[96747] nil[38])
                            (96787 'coforall loop')
                          }
                          label _continueLabel[96939]
                          _indexOfInterest[96754]
                          _iterator[96756]
                        }
                        label _breakLabel[96941]
                        Defer
                        {
                          {
                            (96945 call _endCountFree _coforallCount[96747])
                          }
                        }
                        (96949 call _waitEndCount _coforallCount[96747] 1)
                      }
                    }
                  }
                }
                (96957 call _downEndCount _coforallCount[96954] nil[38])
                (96956 'coforall loop')
              }
              label _continueLabel[96967]
              _indexOfInterest[96962]
              _iterator[96963]
            }
            label _breakLabel[96968]
            Defer
            {
              {
                (97010 call _endCountFree _coforallCount[96954])
              }
            }
            (97015 call _waitEndCount _coforallCount[96954] 1 numTasks[96955])
          }
          {
            const _coforallCount[97027] "const" "end count" "temp"
            (97084 'move' _coforallCount[97027](97081 call _endCountAlloc 1))
            unknown _indexOfInterest[97035] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97036] "expr temp" "temp"
            (97045 'move' _iterator[97036](97043 call _getIterator tmpIter[96283]))
            Defer
            {
              {
                (97061 call _freeIterator _iterator[97036])
              }
            }
            { scopeless type
              (97050 'move' _indexOfInterest[97035](97047 call iteratorIndex _iterator[97036]))
            }
            ForLoop
            {
              unknown chunk[97054] "coforall index var" "index var" "insert auto destroy"
              (97056 'move' chunk[97054] _indexOfInterest[97035])
              (97068 call _upEndCount _coforallCount[97027] 1)
              {
                {
                  const tmp[96276] "const" "temp"
                  (96277 'move' tmp[96276](96274 'deref'(96273 '_wide_get_locale'(95527 call(95522 call .(346375 call here[92085]) c"getChild") chunk[97054]))))
                  {
                    if(95552 call _cond_test debugDataParNuma[92593])
                    {
                      if(95546 call _cond_test(95533 call != chunk[97054](95532 call chpl_getSubloc)))
                      {
                        (95544 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk[97054] ", on "(95542 call chpl_getSubloc) ") ***")
                      }
                    }
                    const numSublocTasks[95578] "const"(95575 IfExpr (95562 call < chunk[97054](95560 call % dptpl[95289] numChunks[95340])) then
                    { scopeless
                      (95569 call +(95566 call / dptpl[95289] numChunks[95340]) 1)
                    } else
                    { scopeless
                      (95573 call / dptpl[95289] numChunks[95340])
                    } )
                    unknown locBlock[95588](95586 call *(346390 call . this[99747] c"rank")(95585 call range[66183](?)(346395 call . this[99747] c"intIdxType")))
                    {
                      unknown i[95617] 0
                      unknown tmp[95618] "maybe param" "temp"
                      (95630 'move' tmp[95618](95628 call chpl_compute_low_param_loop_bound 1(346400 call . this[99747] c"rank")))
                      unknown tmp[95619] "maybe param" "temp"
                      (95637 'move' tmp[95619](95635 call chpl_compute_high_param_loop_bound 1(346415 call . this[99747] c"rank")))
                      unknown tmp[95620] "maybe param" "temp"
                      (95640 'move' tmp[95620] 1)
                      ParamForLoop
                      { i[95617] tmp[95618] tmp[95619] tmp[95620]
                        (95614 call =(95598 call locBlock[95588] i[95617])(95612 call #(95603 call chpl_build_low_bounded_range(95602 call offset[95250] i[95617]))(95609 call .(95608 call(346409 call . this[99747] c"ranges") i[95617]) c"length")))
                      }
                      label _unused_continueLabel[95622]
                      label _breakLabel[95621]
                    }
                    unknown followMe[95659] locBlock[95588](95656 call *(346420 call . this[99747] c"rank")(95655 call range[66183](?)(346425 call . this[99747] c"intIdxType")))
                    const tmp[95700] "const" "no copy" "temp"(95699 call _computeBlock(95672 call .(95671 call locBlock[95588] parDim[95342]) c"length") numChunks[95340] chunk[97054](95682 call .(95681 call locBlock[95588] parDim[95342]) c"_high")(95689 call .(95688 call locBlock[95588] parDim[95342]) c"_low")(95696 call .(95695 call locBlock[95588] parDim[95342]) c"_low"))
                    (95707 call _check_tuple_var_decl tmp[95700] 2)
                    const lo[95662] "const"(95701 call tmp[95700] 1)
                    const hi[95664] "const"(95704 call tmp[95700] 2)
                    (95720 call =(95715 call followMe[95659] parDim[95342])(95718 call chpl_build_bounded_range lo[95662] hi[95664]))
                    const tmp[95736] "const" "no copy" "temp"(95735 call _computeChunkStuff numSublocTasks[95578](ignoreRunning = 1) minIndicesPerTask[95238] followMe[95659])
                    (95743 call _check_tuple_var_decl tmp[95736] 2)
                    const numChunks2[95723] "const"(95737 call tmp[95736] 1)
                    const parDim2[95725] "const"(95740 call tmp[95736] 2)
                    {
                      unknown tmpIter[95968] "expr temp" "maybe ref" "no copy" "temp"
                      (95971 'move' tmpIter[95968](95753 call #(95750 call chpl_build_low_bounded_range 0) numChunks2[95723]))
                      unknown isRngDomArr[96254] "maybe param" "temp"
                      (96269 'move' isRngDomArr[96254](96267 call ||(96256 call isBoundedRange tmpIter[95968])(96265 call ||(96259 call isDomain tmpIter[95968])(96262 call isArray tmpIter[95968]))))
                      if isRngDomArr[96254]
                      {
                        const _coforallCount[96121] "const" "end count" "temp"
                        (96190 'move' _coforallCount[96121](96187 call _endCountAlloc 1))
                        unknown numTasks[96122] "temp"
                        (96174 'move' numTasks[96122](96170 call . tmpIter[95968] c"size"))
                        (96165 call _upEndCount _coforallCount[96121] 1 numTasks[96122])
                        (96162 call chpl_resetTaskSpawn numTasks[96122])
                        unknown _indexOfInterest[96129] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[96130] "expr temp" "temp"
                        (96139 'move' _iterator[96130](96137 call _getIterator tmpIter[95968]))
                        Defer
                        {
                          {
                            (96155 call _freeIterator _iterator[96130])
                          }
                        }
                        { scopeless type
                          (96144 'move' _indexOfInterest[96129](96141 call iteratorIndex _iterator[96130]))
                        }
                        ForLoop
                        {
                          unknown chunk2[96148] "coforall index var" "index var" "insert auto destroy"
                          (96150 'move' chunk2[96148] _indexOfInterest[96129])
                          {
                            {
                              unknown locBlock2[95974](95976 call *(346507 call . this[99747] c"rank")(95979 call range[66183](?)(346512 call . this[99747] c"intIdxType")))
                              {
                                unknown i[95983] 0
                                unknown tmp[95986] "maybe param" "temp"
                                (95988 'move' tmp[95986](95991 call chpl_compute_low_param_loop_bound 1(346517 call . this[99747] c"rank")))
                                unknown tmp[95994] "maybe param" "temp"
                                (95996 'move' tmp[95994](95999 call chpl_compute_high_param_loop_bound 1(346522 call . this[99747] c"rank")))
                                unknown tmp[96002] "maybe param" "temp"
                                (96004 'move' tmp[96002] 1)
                                ParamForLoop
                                { i[95983] tmp[95986] tmp[95994] tmp[96002]
                                  (96015 call =(96017 call locBlock2[95974] i[95983])(96020 call chpl_build_bounded_range(96022 call .(96024 call followMe[95659] i[95983]) c"low")(96028 call .(96030 call followMe[95659] i[95983]) c"high")))
                                }
                                label _unused_continueLabel[96033]
                                label _breakLabel[96035]
                              }
                              unknown followMe2[96037] locBlock2[95974](96040 call *(346534 call . this[99747] c"rank")(96043 call range[66183](?)(346539 call . this[99747] c"intIdxType")))
                              const low[96047] "const"(96049 call .(96051 call locBlock2[95974] parDim2[95725]) c"_low")
                              const high[96055] "const"(96057 call .(96059 call locBlock2[95974] parDim2[95725]) c"_high")
                              const tmp[96064] "const" "no copy" "temp"(96066 call _computeBlock(96068 call .(96070 call locBlock2[95974] parDim2[95725]) c"length") numChunks2[95723] chunk2[96148] high[96055] low[96047] low[96047])
                              (96080 call _check_tuple_var_decl tmp[96064] 2)
                              const lo[96083] "const"(96085 call tmp[96064] 1)
                              const hi[96088] "const"(96090 call tmp[96064] 2)
                              (96094 call =(96096 call followMe2[96037] parDim2[95725])(96099 call chpl_build_bounded_range lo[96083] hi[96088]))
                              if(96103 call _cond_test debugDataParNuma[92593])
                              {
                                (96107 call chpl_debug_writeln "### chunk = " chunk[97054] "  chunk2 = " chunk2[96148] "  " "followMe = " followMe[95659] "  followMe2 = " followMe2[96037])
                              }
                              (96118 yield followMe2[96037])
                            }
                            (96124 call _downEndCount _coforallCount[96121] nil[38])
                            (96123 'coforall loop')
                          }
                          label _continueLabel[96134]
                          _indexOfInterest[96129]
                          _iterator[96130]
                        }
                        label _breakLabel[96135]
                        Defer
                        {
                          {
                            (96177 call _endCountFree _coforallCount[96121])
                          }
                        }
                        (96182 call _waitEndCount _coforallCount[96121] 1 numTasks[96122])
                      }
                      {
                        const _coforallCount[96194] "const" "end count" "temp"
                        (96251 'move' _coforallCount[96194](96248 call _endCountAlloc 1))
                        unknown _indexOfInterest[96202] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                        unknown _iterator[96203] "expr temp" "temp"
                        (96212 'move' _iterator[96203](96210 call _getIterator tmpIter[95968]))
                        Defer
                        {
                          {
                            (96228 call _freeIterator _iterator[96203])
                          }
                        }
                        { scopeless type
                          (96217 'move' _indexOfInterest[96202](96214 call iteratorIndex _iterator[96203]))
                        }
                        ForLoop
                        {
                          unknown chunk2[96221] "coforall index var" "index var" "insert auto destroy"
                          (96223 'move' chunk2[96221] _indexOfInterest[96202])
                          (96235 call _upEndCount _coforallCount[96194] 1)
                          {
                            {
                              unknown locBlock2[95762](95760 call *(346449 call . this[99747] c"rank")(95759 call range[66183](?)(346454 call . this[99747] c"intIdxType")))
                              {
                                unknown i[95793] 0
                                unknown tmp[95794] "maybe param" "temp"
                                (95806 'move' tmp[95794](95804 call chpl_compute_low_param_loop_bound 1(346459 call . this[99747] c"rank")))
                                unknown tmp[95795] "maybe param" "temp"
                                (95813 'move' tmp[95795](95811 call chpl_compute_high_param_loop_bound 1(346470 call . this[99747] c"rank")))
                                unknown tmp[95796] "maybe param" "temp"
                                (95816 'move' tmp[95796] 1)
                                ParamForLoop
                                { i[95793] tmp[95794] tmp[95795] tmp[95796]
                                  (95790 call =(95773 call locBlock2[95762] i[95793])(95788 call chpl_build_bounded_range(95778 call .(95777 call followMe[95659] i[95793]) c"low")(95785 call .(95784 call followMe[95659] i[95793]) c"high")))
                                }
                                label _unused_continueLabel[95798]
                                label _breakLabel[95797]
                              }
                              unknown followMe2[95835] locBlock2[95762](95832 call *(346475 call . this[99747] c"rank")(95831 call range[66183](?)(346480 call . this[99747] c"intIdxType")))
                              const low[95845] "const"(95842 call .(95841 call locBlock2[95762] parDim2[95725]) c"_low")
                              const high[95855] "const"(95852 call .(95851 call locBlock2[95762] parDim2[95725]) c"_high")
                              const tmp[95878] "const" "no copy" "temp"(95877 call _computeBlock(95868 call .(95867 call locBlock2[95762] parDim2[95725]) c"length") numChunks2[95723] chunk2[96221] high[95855] low[95845] low[95845])
                              (95885 call _check_tuple_var_decl tmp[95878] 2)
                              const lo[95858] "const"(95879 call tmp[95878] 1)
                              const hi[95860] "const"(95882 call tmp[95878] 2)
                              (95898 call =(95893 call followMe2[95835] parDim2[95725])(95896 call chpl_build_bounded_range lo[95858] hi[95860]))
                              if(95961 call _cond_test debugDataParNuma[92593])
                              {
                                (95958 call chpl_debug_writeln "### chunk = " chunk[97054] "  chunk2 = " chunk2[96221] "  " "followMe = " followMe[95659] "  followMe2 = " followMe2[95835])
                              }
                              (95966 yield followMe2[95835])
                            }
                            (96197 call _downEndCount _coforallCount[96194] nil[38])
                            (96196 'coforall loop')
                          }
                          label _continueLabel[96207]
                          _indexOfInterest[96202]
                          _iterator[96203]
                        }
                        label _breakLabel[96208]
                        Defer
                        {
                          {
                            (96239 call _endCountFree _coforallCount[96194])
                          }
                        }
                        (96244 call _waitEndCount _coforallCount[96194] 1)
                      }
                    }
                  }
                }
                (97030 call _downEndCount _coforallCount[97027] nil[38])
                (97029 'coforall loop')
              }
              label _continueLabel[97040]
              _indexOfInterest[97035]
              _iterator[97036]
            }
            label _breakLabel[97041]
            Defer
            {
              {
                (97072 call _endCountFree _coforallCount[97027])
              }
            }
            (97077 call _waitEndCount _coforallCount[97027] 1)
          }
        }
      }
    }
    {
      if(97132 call _cond_test debugDefaultDist[92581])
      {
        (97130 call chpl_debug_writeln "*** In domain/array leader code:")
      }
      const numTasks[97150] "const"(97147 IfExpr (97140 call == tasksPerLocale[95230] 0) then
      { scopeless
        (97143 call .(346753 call here[92085]) c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale[95230]
      } )
      if(97164 call _cond_test debugDefaultDist[92581])
      {
        (97162 call chpl_debug_writeln "    numTasks=" numTasks[97150] " (" ignoreRunning[95234] "), minIndicesPerTask=" minIndicesPerTask[95238])
      }
      const tmp[97194] "const" "no auto destroy" "no copy" "temp"(97191 IfExpr (97176 'task_get_serial') then
      { scopeless
        (97182 call _build_tuple 1(97179 call - 1))
      } else
      { scopeless
        (97190 call _computeChunkStuff numTasks[97150] ignoreRunning[95234] minIndicesPerTask[95238](346765 call . this[99747] c"ranges"))
      } )
      (97201 call _check_tuple_var_decl tmp[97194] 2)
      const numChunks[97169] "const"(97195 call tmp[97194] 1)
      const parDim[97171] "const"(97198 call tmp[97194] 2)
      if(97225 call _cond_test debugDefaultDist[92581])
      {
        (97223 call chpl_debug_writeln "    numChunks=" numChunks[97169] " parDim=" parDim[97171] " ranges(" parDim[97171] ").length="(97220 call .(97219 call(346774 call . this[99747] c"ranges") parDim[97171]) c"length"))
      }
      if(97252 call _cond_test debugDataPar[92589])
      {
        (97249 call chpl_debug_writeln "### numTasksPerLoc = " numTasks[97150] "\n" "### ignoreRunning = " ignoreRunning[95234] "\n" "### minIndicesPerTask = " minIndicesPerTask[95238] "\n" "### numChunks = " numChunks[97169] " (parDim = " parDim[97171] ")\n" "### nranges = "(346786 call . this[99747] c"ranges"))
      }
      if(97809 call _cond_test(97258 call == numChunks[97169] 1))
      {
        if(97358 call _cond_test(97262 call ==(346792 call . this[99747] c"rank") 1))
        {
          (97281 yield(97279 call _build_tuple(97277 call #(97268 call chpl_build_low_bounded_range(97267 call offset[95250] 1))(97274 call .(97273 call(346798 call . this[99747] c"ranges") 1) c"length"))))
        }
        {
          unknown block[97291](97289 call *(346803 call . this[99747] c"rank")(97288 call range[66183](?)(346808 call . this[99747] c"intIdxType")))
          {
            unknown i[97321] 0
            unknown tmp[97322] "maybe param" "temp"
            (97334 'move' tmp[97322](97332 call chpl_compute_low_param_loop_bound 1(346813 call . this[99747] c"rank")))
            unknown tmp[97323] "maybe param" "temp"
            (97341 'move' tmp[97323](97339 call chpl_compute_high_param_loop_bound 1(346828 call . this[99747] c"rank")))
            unknown tmp[97324] "maybe param" "temp"
            (97344 'move' tmp[97324] 1)
            ParamForLoop
            { i[97321] tmp[97322] tmp[97323] tmp[97324]
              (97318 call =(97302 call block[97291] i[97321])(97316 call #(97307 call chpl_build_low_bounded_range(97306 call offset[95250] i[97321]))(97313 call .(97312 call(346822 call . this[99747] c"ranges") i[97321]) c"length")))
            }
            label _unused_continueLabel[97326]
            label _breakLabel[97325]
          }
          (97356 yield block[97291])
        }
      }
      {
        unknown locBlock[97370](97368 call *(346834 call . this[99747] c"rank")(97367 call range[66183](?)(346839 call . this[99747] c"intIdxType")))
        {
          unknown i[97400] 0
          unknown tmp[97401] "maybe param" "temp"
          (97413 'move' tmp[97401](97411 call chpl_compute_low_param_loop_bound 1(346844 call . this[99747] c"rank")))
          unknown tmp[97402] "maybe param" "temp"
          (97420 'move' tmp[97402](97418 call chpl_compute_high_param_loop_bound 1(346859 call . this[99747] c"rank")))
          unknown tmp[97403] "maybe param" "temp"
          (97423 'move' tmp[97403] 1)
          ParamForLoop
          { i[97400] tmp[97401] tmp[97402] tmp[97403]
            (97397 call =(97381 call locBlock[97370] i[97400])(97395 call #(97386 call chpl_build_low_bounded_range(97385 call offset[95250] i[97400]))(97392 call .(97391 call(346853 call . this[99747] c"ranges") i[97400]) c"length")))
          }
          label _unused_continueLabel[97405]
          label _breakLabel[97404]
        }
        if(97456 call _cond_test debugDefaultDist[92581])
        {
          (97454 call chpl_debug_writeln "*** DI: locBlock = " locBlock[97370])
        }
        {
          unknown tmpIter[97573] "expr temp" "maybe ref" "no copy" "temp"
          (97576 'move' tmpIter[97573](97466 call #(97463 call chpl_build_low_bounded_range 0) numChunks[97169]))
          unknown isRngDomArr[97790] "maybe param" "temp"
          (97805 'move' isRngDomArr[97790](97803 call ||(97792 call isBoundedRange tmpIter[97573])(97801 call ||(97795 call isDomain tmpIter[97573])(97798 call isArray tmpIter[97573]))))
          if isRngDomArr[97790]
          {
            const _coforallCount[97657] "const" "end count" "temp"
            (97726 'move' _coforallCount[97657](97723 call _endCountAlloc 1))
            unknown numTasks[97658] "temp"
            (97710 'move' numTasks[97658](97706 call . tmpIter[97573] c"size"))
            (97701 call _upEndCount _coforallCount[97657] 1 numTasks[97658])
            (97698 call chpl_resetTaskSpawn numTasks[97658])
            unknown _indexOfInterest[97665] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97666] "expr temp" "temp"
            (97675 'move' _iterator[97666](97673 call _getIterator tmpIter[97573]))
            Defer
            {
              {
                (97691 call _freeIterator _iterator[97666])
              }
            }
            { scopeless type
              (97680 'move' _indexOfInterest[97665](97677 call iteratorIndex _iterator[97666]))
            }
            ForLoop
            {
              unknown chunk[97684] "coforall index var" "index var" "insert auto destroy"
              (97686 'move' chunk[97684] _indexOfInterest[97665])
              {
                {
                  unknown followMe[97579] locBlock[97370](97582 call *(346897 call . this[99747] c"rank")(97585 call range[66183](?)(346902 call . this[99747] c"intIdxType")))
                  const tmp[97589] "const" "no copy" "temp"(97591 call _computeBlock(97593 call .(97595 call locBlock[97370] parDim[97171]) c"length") numChunks[97169] chunk[97684](97601 call .(97603 call locBlock[97370] parDim[97171]) c"_high")(97607 call .(97609 call locBlock[97370] parDim[97171]) c"_low")(97613 call .(97615 call locBlock[97370] parDim[97171]) c"_low"))
                  (97620 call _check_tuple_var_decl tmp[97589] 2)
                  const lo[97623] "const"(97625 call tmp[97589] 1)
                  const hi[97628] "const"(97630 call tmp[97589] 2)
                  (97634 call =(97636 call followMe[97579] parDim[97171])(97639 call chpl_build_bounded_range lo[97623] hi[97628]))
                  if(97643 call _cond_test debugDefaultDist[92581])
                  {
                    (97648 call chpl_debug_writeln "*** DI[" chunk[97684] "]: followMe = " followMe[97579])
                  }
                  (97654 yield followMe[97579])
                }
                (97660 call _downEndCount _coforallCount[97657] nil[38])
                (97659 'coforall loop')
              }
              label _continueLabel[97670]
              _indexOfInterest[97665]
              _iterator[97666]
            }
            label _breakLabel[97671]
            Defer
            {
              {
                (97713 call _endCountFree _coforallCount[97657])
              }
            }
            (97718 call _waitEndCount _coforallCount[97657] 1 numTasks[97658])
          }
          {
            const _coforallCount[97730] "const" "end count" "temp"
            (97787 'move' _coforallCount[97730](97784 call _endCountAlloc 1))
            unknown _indexOfInterest[97738] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97739] "expr temp" "temp"
            (97748 'move' _iterator[97739](97746 call _getIterator tmpIter[97573]))
            Defer
            {
              {
                (97764 call _freeIterator _iterator[97739])
              }
            }
            { scopeless type
              (97753 'move' _indexOfInterest[97738](97750 call iteratorIndex _iterator[97739]))
            }
            ForLoop
            {
              unknown chunk[97757] "coforall index var" "index var" "insert auto destroy"
              (97759 'move' chunk[97757] _indexOfInterest[97738])
              (97771 call _upEndCount _coforallCount[97730] 1)
              {
                {
                  unknown followMe[97476] locBlock[97370](97473 call *(346867 call . this[99747] c"rank")(97472 call range[66183](?)(346872 call . this[99747] c"intIdxType")))
                  const tmp[97518] "const" "no copy" "temp"(97517 call _computeBlock(97490 call .(97489 call locBlock[97370] parDim[97171]) c"length") numChunks[97169] chunk[97757](97500 call .(97499 call locBlock[97370] parDim[97171]) c"_high")(97507 call .(97506 call locBlock[97370] parDim[97171]) c"_low")(97514 call .(97513 call locBlock[97370] parDim[97171]) c"_low"))
                  (97525 call _check_tuple_var_decl tmp[97518] 2)
                  const lo[97480] "const"(97519 call tmp[97518] 1)
                  const hi[97482] "const"(97522 call tmp[97518] 2)
                  (97538 call =(97533 call followMe[97476] parDim[97171])(97536 call chpl_build_bounded_range lo[97480] hi[97482]))
                  if(97565 call _cond_test debugDefaultDist[92581])
                  {
                    (97563 call chpl_debug_writeln "*** DI[" chunk[97757] "]: followMe = " followMe[97476])
                  }
                  (97571 yield followMe[97476])
                }
                (97733 call _downEndCount _coforallCount[97730] nil[38])
                (97732 'coforall loop')
              }
              label _continueLabel[97743]
              _indexOfInterest[97738]
              _iterator[97739]
            }
            label _breakLabel[97744]
            Defer
            {
              {
                (97775 call _endCountFree _coforallCount[97730])
              }
            }
            (97780 call _waitEndCount _coforallCount[97730] 1)
          }
        }
      }
    }
  }
  where {
    (95258 call == tag[95224] leader[691])
  }
  function DefaultRectangularDom[99677](?).these[97826](arg _mt[99753]:_MT[227], arg this[99751]:DefaultRectangularDom[99677](?), param arg tag[97823] :
  iterKind[697], arg followThis[97828]:_any[170](?), arg tasksPerLocale[97831] =
  dataParTasksPerLocale[92471], arg ignoreRunning[97835] =
  dataParIgnoreRunningTasks[92476], arg minIndicesPerTask[97839] =
  dataParMinGranularity[92481], arg offset[97851] =
  (97850 call createTuple(346929 call . this[99751] c"rank")(346933 call . this[99751] c"intIdxType")(97848 call _cast(346937 call . this[99751] c"intIdxType") 0))) : _unknown[43] "iterator fn" "method" "primary method"
  {
    function anyStridable[97865](arg rangeTuple[97863]:_any[170](?), param arg i[97869] :
    int(64)[13] =
    1) param : _unknown[43]
    {
      (97907 return(97904 IfExpr (97878 call == i[97869](97875 call . rangeTuple[97863] c"size")) then
      { scopeless
        (97884 call .(97883 call rangeTuple[97863] i[97869]) c"stridable")
      } else
      { scopeless
        (97902 call ||(97891 call .(97890 call rangeTuple[97863] i[97869]) c"stridable")(97901 call anyStridable rangeTuple[97863](97899 call + i[97869] 1)))
      } ))
    }
    if(97935 call _cond_test chpl__testParFlag[181291])
    {
      (97933 call chpl__testPar "default rectangular domain follower invoked on " followThis[97828])
    }
    if(97962 call _cond_test debugDefaultDist[92581])
    {
      (97960 call chpl_debug_writeln "In domain follower code: Following " followThis[97828])
    }
    unknown stridable[97977] "param"(97975 call ||(97968 call . this[99751] c"stridable")(97974 call anyStridable followThis[97828]))
    unknown block[97990](97988 call *(346958 call . this[99751] c"rank")(97987 call range[66183](?)(idxType =(346963 call . this[99751] c"intIdxType"))(stridable = stridable[97977])))
    if(98319 call _cond_test stridable[97977])
    {
      unknown strType[97998] "type variable"(97997 call chpl__signedType(346969 call . this[99751] c"intIdxType"))
      {
        unknown i[98199] 0
        unknown tmp[98200] "maybe param" "temp"
        (98212 'move' tmp[98200](98210 call chpl_compute_low_param_loop_bound 1(346974 call . this[99751] c"rank")))
        unknown tmp[98201] "maybe param" "temp"
        (98219 'move' tmp[98201](98217 call chpl_compute_high_param_loop_bound 1(347053 call . this[99751] c"rank")))
        unknown tmp[98202] "maybe param" "temp"
        (98222 'move' tmp[98202] 1)
        ParamForLoop
        { i[98199] tmp[98200] tmp[98201] tmp[98202]
          {
            const rStride[98013] "const"(98010 call .(98009 call(346979 call . this[99751] c"ranges") i[98199]) c"stride")
            const rSignedStride[98021] "const"(98019 call _cast strType[97998] rStride[98013])
            const fSignedStride[98034] "const"(98032 call _cast strType[97998](98028 call .(98027 call followThis[97828] i[98199]) c"stride"))
            if(98195 call _cond_test(98039 call > rStride[98013] 0))
            {
              const riStride[98045] "const"(98043 call _cast(346991 call . this[99751] c"intIdxType") rStride[98013])
              const low[98068] "const"(98066 call +(98053 call .(98052 call(346996 call . this[99751] c"ranges") i[98199]) c"alignedLowAsInt")(98064 call *(98060 call .(98059 call followThis[97828] i[98199]) c"low") riStride[98045]))
              const high[98090] "const"(98088 call +(98075 call .(98074 call(347005 call . this[99751] c"ranges") i[98199]) c"alignedLowAsInt")(98086 call *(98082 call .(98081 call followThis[97828] i[98199]) c"high") riStride[98045]))
              const stride[98100] "const"(98098 call _cast strType[97998](98095 call * rSignedStride[98021] fSignedStride[98034]))
              (98114 call =(98106 call block[97990] i[98199])(98112 call chpl_by(98109 call chpl_build_bounded_range low[98068] high[98090]) stride[98100]))
            }
            {
              const irStride[98123] "const"(98121 call _cast(347022 call . this[99751] c"intIdxType")(98118 call - rStride[98013]))
              const low[98146] "const"(98144 call -(98131 call .(98130 call(347027 call . this[99751] c"ranges") i[98199]) c"alignedHighAsInt")(98142 call *(98138 call .(98137 call followThis[97828] i[98199]) c"high") irStride[98123]))
              const high[98168] "const"(98166 call -(98153 call .(98152 call(347036 call . this[99751] c"ranges") i[98199]) c"alignedHighAsInt")(98164 call *(98160 call .(98159 call followThis[97828] i[98199]) c"low") irStride[98123]))
              const stride[98178] "const"(98176 call _cast strType[97998](98173 call * rSignedStride[98021] fSignedStride[98034]))
              (98192 call =(98184 call block[97990] i[98199])(98190 call chpl_by(98187 call chpl_build_bounded_range low[98146] high[98168]) stride[98178]))
            }
          }
        }
        label _unused_continueLabel[98204]
        label _breakLabel[98203]
      }
    }
    {
      {
        unknown i[98284] 0
        unknown tmp[98285] "maybe param" "temp"
        (98297 'move' tmp[98285](98295 call chpl_compute_low_param_loop_bound 1(347058 call . this[99751] c"rank")))
        unknown tmp[98286] "maybe param" "temp"
        (98304 'move' tmp[98286](98302 call chpl_compute_high_param_loop_bound 1(347089 call . this[99751] c"rank")))
        unknown tmp[98287] "maybe param" "temp"
        (98307 'move' tmp[98287] 1)
        ParamForLoop
        { i[98284] tmp[98285] tmp[98286] tmp[98287]
          (98281 call =(98240 call block[97990] i[98284])(98279 call chpl_build_bounded_range(98258 call +(98245 call .(98244 call(347065 call . this[99751] c"ranges") i[98284]) c"_low")(98256 call _cast(347072 call . this[99751] c"intIdxType")(98252 call .(98251 call followThis[97828] i[98284]) c"low")))(98277 call +(98264 call .(98263 call(347077 call . this[99751] c"ranges") i[98284]) c"_low")(98275 call _cast(347084 call . this[99751] c"intIdxType")(98271 call .(98270 call followThis[97828] i[98284]) c"high")))))
        }
        label _unused_continueLabel[98289]
        label _breakLabel[98288]
      }
    }
    if(98420 call _cond_test(98325 call ==(347094 call . this[99751] c"rank") 1))
    {
      {
        unknown _indexOfInterest[98339] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[98340] "expr temp" "temp"
        (98348 'move' _iterator[98340](98331 call _getIteratorZip block[97990]))
        Defer
        {
          {
            (98364 call _freeIterator _iterator[98340])
          }
        }
        { scopeless type
          (98353 'move' _indexOfInterest[98339](98350 call iteratorIndex _iterator[98340]))
        }
        ForLoop
        {
          unknown i[98357] "index var" "insert auto destroy"
          (98359 'move' i[98357] _indexOfInterest[98339])
          {
            (98336 yield(98335 call(347099 call . this[99751] c"chpl_intToIdx") i[98357]))
          }
          label _continueLabel[98344]
          _indexOfInterest[98339]
          _iterator[98340]
        }
        label _breakLabel[98345]
      }
    }
    {
      {
        unknown _indexOfInterest[98385] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[98386] "expr temp" "temp"
        (98395 'move' _iterator[98386](98393 call _getIterator(98377 call(347104 call . this[99751] c"these_help") 1 block[97990])))
        Defer
        {
          {
            (98412 call _freeIterator _iterator[98386])
          }
        }
        { scopeless type
          (98401 'move' _indexOfInterest[98385](98398 call iteratorIndex _iterator[98386]))
        }
        ForLoop
        {
          unknown i[98405] "index var" "insert auto destroy"
          (98407 'move' i[98405] _indexOfInterest[98385])
          {
            (98382 yield(98381 call(347109 call . this[99751] c"chpl_intToIdx") i[98405]))
          }
          label _continueLabel[98390]
          _indexOfInterest[98385]
          _iterator[98386]
        }
        label _breakLabel[98391]
      }
    }
  }
  where {
    (97859 call == tag[97823] follower[693])
  }
  function DefaultRectangularDom[99677](?).dsiMember[98436](arg _mt[99757]:_MT[227], arg this[99755]:DefaultRectangularDom[99677](?), arg ind[98433] :
  (98431 call *(347115 call . this[99755] c"rank")(347120 call . this[99755] c"idxType"))) : _unknown[43] "method" "primary method"
  {
    {
      unknown i[98465] 0
      unknown tmp[98466] "maybe param" "temp"
      (98478 'move' tmp[98466](98476 call chpl_compute_low_param_loop_bound 1(347125 call . this[99755] c"rank")))
      unknown tmp[98467] "maybe param" "temp"
      (98485 'move' tmp[98467](98483 call chpl_compute_high_param_loop_bound 1(347138 call . this[99755] c"rank")))
      unknown tmp[98468] "maybe param" "temp"
      (98488 'move' tmp[98468] 1)
      ParamForLoop
      { i[98465] tmp[98466] tmp[98467] tmp[98468]
        if(98460 call _cond_test(98455 call !(98454 call(98446 call .(98445 call(347130 call . this[99755] c"ranges") i[98465]) c"contains")(98452 call ind[98433] i[98465]))))
        {
          (98458 return 0)
        }
      }
      label _unused_continueLabel[98470]
      label _breakLabel[98469]
    }
    (98501 return 1)
  }
  function DefaultRectangularDom[99677](?).dsiIndexOrder[98514](arg _mt[99761]:_MT[227], arg this[99759]:DefaultRectangularDom[99677](?), arg ind[98511] :
  (98509 call *(347143 call . this[99759] c"rank")(347148 call . this[99759] c"idxType"))) : _unknown[43] "method" "primary method"
  {
    unknown totOrder[98517](347152 call . this[99759] c"intIdxType")
    unknown blk[98523] 1(347156 call . this[99759] c"intIdxType")
    {
      unknown d[98590] 0
      unknown tmp[98591] "maybe param" "temp"
      (98602 'move' tmp[98591](98600 call chpl_compute_low_param_loop_bound 1(347161 call . this[99759] c"rank")))
      unknown tmp[98592] "maybe param" "temp"
      (98609 'move' tmp[98592](98607 call chpl_compute_high_param_loop_bound 1(347190 call . this[99759] c"rank")))
      unknown tmp[98593] "maybe param" "temp"
      (98612 'move' tmp[98593](98531 call - 1))
      ParamForLoop
      { d[98590] tmp[98591] tmp[98592] tmp[98593]
        {
          const orderD[98550] "const"(98549 call(98541 call .(98538 call(347166 call . this[99759] c"ranges") d[98590]) c"indexOrder")(98547 call ind[98511] d[98590]))
          if(98566 call _cond_test(98561 call == orderD[98550](98559 call _cast(347174 call . this[99759] c"intIdxType")(98556 call - 1))))
          {
            (98564 return orderD[98550])
          }
          (98576 call += totOrder[98517](98574 call * orderD[98550] blk[98523]))
          (98587 call *= blk[98523](98584 call .(98583 call(347184 call . this[99759] c"ranges") d[98590]) c"length"))
        }
      }
      label _unused_continueLabel[98595]
      label _breakLabel[98594]
    }
    (98624 return totOrder[98517])
  }
  function DefaultRectangularDom[99677](?).dsiDims[98630](arg _mt[99765]:_MT[227], arg this[99763]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method"
  {
    (98633 return(347196 call . this[99763] c"ranges"))
  }
  function DefaultRectangularDom[99677](?).dsiDim[98644](arg _mt[99769]:_MT[227], arg this[99767]:DefaultRectangularDom[99677](?), arg d[98641] :
  int(64)[13]) : _unknown[43] "method" "primary method"
  {
    (98650 return(98649 call(347201 call . this[99767] c"ranges") d[98641]))
  }
  function DefaultRectangularDom[99677](?).dsiDim[98661](arg _mt[99773]:_MT[227], arg this[99771]:DefaultRectangularDom[99677](?), param arg d[98658] :
  int(64)[13]) : _unknown[43] "method" "primary method"
  {
    (98667 return(98666 call(347207 call . this[99771] c"ranges") d[98658]))
  }
  function DefaultRectangularDom[99677](?).dsiNumIndices[98674](arg _mt[99777]:_MT[227], arg this[99775]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown sum[98680](98678 call _cast(347212 call . this[99775] c"intIdxType") 1)
    {
      unknown i[98699] 0
      unknown tmp[98700] "maybe param" "temp"
      (98712 'move' tmp[98700](98710 call chpl_compute_low_param_loop_bound 1(347217 call . this[99775] c"rank")))
      unknown tmp[98701] "maybe param" "temp"
      (98719 'move' tmp[98701](98717 call chpl_compute_high_param_loop_bound 1(347229 call . this[99775] c"rank")))
      unknown tmp[98702] "maybe param" "temp"
      (98722 'move' tmp[98702] 1)
      ParamForLoop
      { i[98699] tmp[98700] tmp[98701] tmp[98702]
        (98696 call *= sum[98680](98693 call .(98692 call(347223 call . this[99775] c"ranges") i[98699]) c"length"))
      }
      label _unused_continueLabel[98704]
      label _breakLabel[98703]
    }
    (98734 return sum[98680])
  }
  function DefaultRectangularDom[99677](?).dsiLow[98740](arg _mt[99781]:_MT[227], arg this[99779]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    if(98819 call _cond_test(98744 call ==(347235 call . this[99779] c"rank") 1))
    {
      (98753 return(98750 call .(98749 call(347240 call . this[99779] c"ranges") 1) c"low"))
    }
    {
      unknown result[98760](98758 call *(347245 call . this[99779] c"rank")(347250 call . this[99779] c"idxType"))
      {
        unknown i[98782] 0
        unknown tmp[98783] "maybe param" "temp"
        (98795 'move' tmp[98783](98793 call chpl_compute_low_param_loop_bound 1(347255 call . this[99779] c"rank")))
        unknown tmp[98784] "maybe param" "temp"
        (98802 'move' tmp[98784](98800 call chpl_compute_high_param_loop_bound 1(347268 call . this[99779] c"rank")))
        unknown tmp[98785] "maybe param" "temp"
        (98805 'move' tmp[98785] 1)
        ParamForLoop
        { i[98782] tmp[98783] tmp[98784] tmp[98785]
          (98779 call =(98771 call result[98760] i[98782])(98776 call .(98775 call(347262 call . this[99779] c"ranges") i[98782]) c"low"))
        }
        label _unused_continueLabel[98787]
        label _breakLabel[98786]
      }
      (98817 return result[98760])
    }
  }
  function DefaultRectangularDom[99677](?).dsiHigh[98828](arg _mt[99785]:_MT[227], arg this[99783]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    if(98907 call _cond_test(98832 call ==(347274 call . this[99783] c"rank") 1))
    {
      (98841 return(98838 call .(98837 call(347279 call . this[99783] c"ranges") 1) c"high"))
    }
    {
      unknown result[98848](98846 call *(347284 call . this[99783] c"rank")(347289 call . this[99783] c"idxType"))
      {
        unknown i[98870] 0
        unknown tmp[98871] "maybe param" "temp"
        (98883 'move' tmp[98871](98881 call chpl_compute_low_param_loop_bound 1(347294 call . this[99783] c"rank")))
        unknown tmp[98872] "maybe param" "temp"
        (98890 'move' tmp[98872](98888 call chpl_compute_high_param_loop_bound 1(347307 call . this[99783] c"rank")))
        unknown tmp[98873] "maybe param" "temp"
        (98893 'move' tmp[98873] 1)
        ParamForLoop
        { i[98870] tmp[98871] tmp[98872] tmp[98873]
          (98867 call =(98859 call result[98848] i[98870])(98864 call .(98863 call(347301 call . this[99783] c"ranges") i[98870]) c"high"))
        }
        label _unused_continueLabel[98875]
        label _breakLabel[98874]
      }
      (98905 return result[98848])
    }
  }
  function DefaultRectangularDom[99677](?).dsiAlignedLow[98916](arg _mt[99789]:_MT[227], arg this[99787]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    if(98995 call _cond_test(98920 call ==(347313 call . this[99787] c"rank") 1))
    {
      (98929 return(98926 call .(98925 call(347318 call . this[99787] c"ranges") 1) c"alignedLow"))
    }
    {
      unknown result[98936](98934 call *(347323 call . this[99787] c"rank")(347328 call . this[99787] c"idxType"))
      {
        unknown i[98958] 0
        unknown tmp[98959] "maybe param" "temp"
        (98971 'move' tmp[98959](98969 call chpl_compute_low_param_loop_bound 1(347333 call . this[99787] c"rank")))
        unknown tmp[98960] "maybe param" "temp"
        (98978 'move' tmp[98960](98976 call chpl_compute_high_param_loop_bound 1(347346 call . this[99787] c"rank")))
        unknown tmp[98961] "maybe param" "temp"
        (98981 'move' tmp[98961] 1)
        ParamForLoop
        { i[98958] tmp[98959] tmp[98960] tmp[98961]
          (98955 call =(98947 call result[98936] i[98958])(98952 call .(98951 call(347340 call . this[99787] c"ranges") i[98958]) c"alignedLow"))
        }
        label _unused_continueLabel[98963]
        label _breakLabel[98962]
      }
      (98993 return result[98936])
    }
  }
  function DefaultRectangularDom[99677](?).dsiAlignedHigh[99004](arg _mt[99793]:_MT[227], arg this[99791]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99083 call _cond_test(99008 call ==(347352 call . this[99791] c"rank") 1))
    {
      (99017 return(99014 call .(99013 call(347357 call . this[99791] c"ranges") 1) c"alignedHigh"))
    }
    {
      unknown result[99024](99022 call *(347362 call . this[99791] c"rank")(347367 call . this[99791] c"idxType"))
      {
        unknown i[99046] 0
        unknown tmp[99047] "maybe param" "temp"
        (99059 'move' tmp[99047](99057 call chpl_compute_low_param_loop_bound 1(347372 call . this[99791] c"rank")))
        unknown tmp[99048] "maybe param" "temp"
        (99066 'move' tmp[99048](99064 call chpl_compute_high_param_loop_bound 1(347385 call . this[99791] c"rank")))
        unknown tmp[99049] "maybe param" "temp"
        (99069 'move' tmp[99049] 1)
        ParamForLoop
        { i[99046] tmp[99047] tmp[99048] tmp[99049]
          (99043 call =(99035 call result[99024] i[99046])(99040 call .(99039 call(347379 call . this[99791] c"ranges") i[99046]) c"alignedHigh"))
        }
        label _unused_continueLabel[99051]
        label _breakLabel[99050]
      }
      (99081 return result[99024])
    }
  }
  function DefaultRectangularDom[99677](?).dsiStride[99092](arg _mt[99797]:_MT[227], arg this[99795]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99174 call _cond_test(99096 call ==(347391 call . this[99795] c"rank") 1))
    {
      (99105 return(99102 call .(99101 call(347396 call . this[99795] c"ranges") 1) c"stride"))
    }
    {
      unknown result[99115](99113 call *(347401 call . this[99795] c"rank")(99112 call chpl__signedType(347405 call . this[99795] c"intIdxType")))
      {
        unknown i[99137] 0
        unknown tmp[99138] "maybe param" "temp"
        (99150 'move' tmp[99138](99148 call chpl_compute_low_param_loop_bound 1(347410 call . this[99795] c"rank")))
        unknown tmp[99139] "maybe param" "temp"
        (99157 'move' tmp[99139](99155 call chpl_compute_high_param_loop_bound 1(347423 call . this[99795] c"rank")))
        unknown tmp[99140] "maybe param" "temp"
        (99160 'move' tmp[99140] 1)
        ParamForLoop
        { i[99137] tmp[99138] tmp[99139] tmp[99140]
          (99134 call =(99126 call result[99115] i[99137])(99131 call .(99130 call(347417 call . this[99795] c"ranges") i[99137]) c"stride"))
        }
        label _unused_continueLabel[99142]
        label _breakLabel[99141]
      }
      (99172 return result[99115])
    }
  }
  function DefaultRectangularDom[99677](?).dsiAlignment[99183](arg _mt[99801]:_MT[227], arg this[99799]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99262 call _cond_test(99187 call ==(347429 call . this[99799] c"rank") 1))
    {
      (99196 return(99193 call .(99192 call(347434 call . this[99799] c"ranges") 1) c"alignment"))
    }
    {
      unknown result[99203](99201 call *(347439 call . this[99799] c"rank")(347444 call . this[99799] c"idxType"))
      {
        unknown i[99225] 0
        unknown tmp[99226] "maybe param" "temp"
        (99238 'move' tmp[99226](99236 call chpl_compute_low_param_loop_bound 1(347449 call . this[99799] c"rank")))
        unknown tmp[99227] "maybe param" "temp"
        (99245 'move' tmp[99227](99243 call chpl_compute_high_param_loop_bound 1(347462 call . this[99799] c"rank")))
        unknown tmp[99228] "maybe param" "temp"
        (99248 'move' tmp[99228] 1)
        ParamForLoop
        { i[99225] tmp[99226] tmp[99227] tmp[99228]
          (99222 call =(99214 call result[99203] i[99225])(99219 call .(99218 call(347456 call . this[99799] c"ranges") i[99225]) c"alignment"))
        }
        label _unused_continueLabel[99230]
        label _breakLabel[99229]
      }
      (99260 return result[99203])
    }
  }
  function DefaultRectangularDom[99677](?).dsiFirst[99271](arg _mt[99805]:_MT[227], arg this[99803]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99350 call _cond_test(99275 call ==(347468 call . this[99803] c"rank") 1))
    {
      (99284 return(99281 call .(99280 call(347473 call . this[99803] c"ranges") 1) c"first"))
    }
    {
      unknown result[99291](99289 call *(347478 call . this[99803] c"rank")(347483 call . this[99803] c"idxType"))
      {
        unknown i[99313] 0
        unknown tmp[99314] "maybe param" "temp"
        (99326 'move' tmp[99314](99324 call chpl_compute_low_param_loop_bound 1(347488 call . this[99803] c"rank")))
        unknown tmp[99315] "maybe param" "temp"
        (99333 'move' tmp[99315](99331 call chpl_compute_high_param_loop_bound 1(347501 call . this[99803] c"rank")))
        unknown tmp[99316] "maybe param" "temp"
        (99336 'move' tmp[99316] 1)
        ParamForLoop
        { i[99313] tmp[99314] tmp[99315] tmp[99316]
          (99310 call =(99302 call result[99291] i[99313])(99307 call .(99306 call(347495 call . this[99803] c"ranges") i[99313]) c"first"))
        }
        label _unused_continueLabel[99318]
        label _breakLabel[99317]
      }
      (99348 return result[99291])
    }
  }
  function DefaultRectangularDom[99677](?).dsiLast[99359](arg _mt[99809]:_MT[227], arg this[99807]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99438 call _cond_test(99363 call ==(347507 call . this[99807] c"rank") 1))
    {
      (99372 return(99369 call .(99368 call(347512 call . this[99807] c"ranges") 1) c"last"))
    }
    {
      unknown result[99379](99377 call *(347517 call . this[99807] c"rank")(347522 call . this[99807] c"idxType"))
      {
        unknown i[99401] 0
        unknown tmp[99402] "maybe param" "temp"
        (99414 'move' tmp[99402](99412 call chpl_compute_low_param_loop_bound 1(347527 call . this[99807] c"rank")))
        unknown tmp[99403] "maybe param" "temp"
        (99421 'move' tmp[99403](99419 call chpl_compute_high_param_loop_bound 1(347540 call . this[99807] c"rank")))
        unknown tmp[99404] "maybe param" "temp"
        (99424 'move' tmp[99404] 1)
        ParamForLoop
        { i[99401] tmp[99402] tmp[99403] tmp[99404]
          (99398 call =(99390 call result[99379] i[99401])(99395 call .(99394 call(347534 call . this[99807] c"ranges") i[99401]) c"last"))
        }
        label _unused_continueLabel[99406]
        label _breakLabel[99405]
      }
      (99436 return result[99379])
    }
  }
  function DefaultRectangularDom[99677](?).dsiBuildArray[99449](arg _mt[99813]:_MT[227], arg this[99811]:DefaultRectangularDom[99677](?), arg eltType[99447]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (99469 return(99468 'new'(99467 'to unmanaged class from unknown'(99466 call anymanaged DefaultRectangularArr[347545](?)(eltType = eltType[99447])(rank =(347551 call . this[99811] c"rank"))(idxType =(347556 call . this[99811] c"idxType"))(stridable =(347561 call . this[99811] c"stridable"))(dom =(99464 call _to_unmanaged this[99811]))))))
  }
  function DefaultRectangularDom[99677](?).dsiBuildArrayWith[99478](arg _mt[99817]:_MT[227], arg this[99815]:DefaultRectangularDom[99677](?), arg eltType[99476]:_any[170](?), arg data[99484] :
  (99483 call _ddata[11791](?) eltType[99476]), arg allocSize[99488] :
  int(64)[13]) : _unknown[43] "method" "primary method"
  {
    unknown allocRange[99507](99505 call #(99502 call chpl_build_low_bounded_range(99499 call .(99498 call(347575 call . this[99815] c"ranges") 1) c"low")) allocSize[99488])(99494 call range[66183](?)(347570 call . this[99815] c"idxType"))
    (99533 return(99532 'new'(99531 'to unmanaged class from unknown'(99530 call anymanaged DefaultRectangularArr[347545](?)(eltType = eltType[99476])(rank =(347583 call . this[99815] c"rank"))(idxType =(347588 call . this[99815] c"idxType"))(stridable =(347593 call . this[99815] c"stridable"))(dom =(99524 call _to_unmanaged this[99815]))(data = data[99484])(dataAllocRange = allocRange[99507])))))
  }
  function DefaultRectangularDom[99677](?).dsiLocalSlice[99541](arg _mt[99821]:_MT[227], arg this[99819]:DefaultRectangularDom[99677](?), arg ranges[99539]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (99563 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularDom[99677](?).dsiTargetLocales[99570](arg _mt[99825]:_MT[227], arg this[99823]:DefaultRectangularDom[99677](?)) : _unknown[43] "method" "primary method"
  {
    (99579 return(99577 call chpl__buildArrayExpr(99574 call chpl_localeID_to_locale(99573 '_wide_get_locale' this[99823]))))
  }
  function DefaultRectangularDom[99677](?).dsiHasSingleLocalSubdomain[99586](arg _mt[99829]:_MT[227], arg this[99827]:DefaultRectangularDom[99677](?)) param : _unknown[43] "method" "primary method"
  {
    (99589 return 1)
  }
  function DefaultRectangularDom[99677](?).dsiLocalSubdomain[99600](arg _mt[99833]:_MT[227], arg this[99831]:DefaultRectangularDom[99677](?), arg loc[99597] :
  locale[26]) : _unknown[43] "method" "primary method"
  {
    if(99633 call _cond_test(99607 call ==(99604 call chpl_localeID_to_locale(99603 '_wide_get_locale' this[99831])) loc[99597]))
    {
      (99616 return(99615 call _getDomain(99613 call _to_unmanaged this[99831])))
    }
    {
      unknown a[99626](99624 call chpl__buildDomainRuntimeType defaultDist[93214](347605 call . this[99831] c"rank")(347610 call . this[99831] c"idxType")(347615 call . this[99831] c"stridable"))
      (99631 return a[99626])
    }
  }
  function DefaultRectangularDom[99677](?).dsiLocalSubdomains[99646](arg _mt[99837]:_MT[227], arg this[99835]:DefaultRectangularDom[99677](?), arg loc[99643] :
  locale[26]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    (99652 yield(99651 call(347621 call . this[99835] c"dsiLocalSubdomain") loc[99643]))
  }
  function DefaultRectangularDom[99677](?).chpl_intToIdx[99661](arg _mt[99841]:_MT[227], arg this[99839]:DefaultRectangularDom[99677](?), arg i[99659]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    (99671 return(99670 call chpl__intToIdx(99665 call . this[99839] c"idxType") i[99659]))
  }
  type DefaultRectangularDom[99677](?) val super[331015]:BaseRectangularDom[143416](?) "super class" unknown dist[93269] unmanaged DefaultDist[389849] unknown ranges[93284](93282 call * rank[143339](93281 call range[66183](?) idxType[143342] bounded[66079] stridable[143346])) type _serialized_domain[93402](?) unknown rank[93386] "param" unknown idxType[93389] "type variable" unknown stridable[93392] "param" unknown dims[93395] unknown isDefaultRectangular[93398] "param"
  type unmanaged DefaultRectangularDom[389799](?)
  type anymanaged anynil DefaultRectangularDom[389605](?)
  type anymanaged DefaultRectangularDom[339767](?)
  function chpl__intToIdx[99848](arg idxType[99846]:_any[170](?), arg i[99851] :
  integral[188](?), arg j[99855]:_any[170](?) ...) : _unknown[43] "inline"
  {
    const first[99863] "const"(99862 call chpl__intToIdx idxType[99846] i[99851])
    const rest[99873] "const"(99872 call chpl__intToIdx idxType[99846](99871 'expand_tuple' j[99855]))
    (99882 return(99880 call _build_tuple first[99863](99878 'expand_tuple' rest[99873])))
  }
  function chpl__intToIdx[99890](arg idxType[99888]:_any[170](?), arg i[99893] :
  integral[188](?), arg j[99897] :
  integral[188](?)) : _unknown[43] "inline"
  {
    (99913 return(99911 call _build_tuple(99904 call chpl__intToIdx idxType[99888] i[99893])(99909 call chpl__intToIdx idxType[99888] j[99897])))
  }
  function chpl__intToIdx[99922](arg idxType[99920]:_any[170](?), arg i[99925] :
  _tuple[58502](?)) : _unknown[43] "inline"
  {
    (99934 return(99933 call chpl__intToIdx idxType[99920](99932 'expand_tuple' i[99925])))
  }
  function _remoteAccessData[100096](?).theData[100019](arg _mt[100100]:_MT[227], arg this[100098]:_remoteAccessData[100096](?)) ref : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    if(100030 call _cond_test(347657 call . this[100098] c"stridable"))
    {
      (100023 return(347662 call . this[100098] c"data"))
    }
    {
      (100027 return(347667 call . this[100098] c"shiftedData"))
    }
  }
  function _remoteAccessData[100096](?).getDataElem[100041](arg _mt[100104]:_MT[227], arg this[100102]:_remoteAccessData[100096](?), arg i[100039]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    if(100058 call _cond_test(347672 call . this[100102] c"stridable"))
    {
      (100048 return(100047 call(347678 call . this[100102] c"dataElem") i[100039]))
    }
    {
      (100055 return(100054 call(347685 call . this[100102] c"shiftedDataElem") i[100039]))
    }
  }
  function _remoteAccessData[100096](?).dataElem[100069](arg _mt[100108]:_MT[227], arg this[100106]:_remoteAccessData[100096](?), arg i[100067]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    (100075 return(100074 call(347691 call . this[100106] c"data") i[100067]))
  }
  function _remoteAccessData[100096](?).shiftedDataElem[100084](arg _mt[100112]:_MT[227], arg this[100110]:_remoteAccessData[100096](?), arg i[100082]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    (100090 return(100089 call(347697 call . this[100110] c"shiftedData") i[100082]))
  }
  type _remoteAccessData[100096](?) unknown eltType[99940] "type variable" unknown rank[99944] "param" int(64)[13] unknown idxType[99947] "type variable" unknown stridable[99951] "param" bool[10] unknown blkChanged[99956] "param" 0 bool[10] unknown off[99963](99961 call * rank[99944] idxType[99947]) unknown blk[99973](99971 call * rank[99944](99970 call chpl__idxTypeToIntIdxType idxType[99947])) unknown str[99986](99984 call * rank[99944](99983 call chpl__signedType(99981 call chpl__idxTypeToIntIdxType idxType[99947]))) unknown origin[99993](99992 call chpl__idxTypeToIntIdxType idxType[99947]) unknown factoredOffs[100000](99999 call chpl__idxTypeToIntIdxType idxType[99947]) unknown data[100007](100006 call _ddata[11791](?) eltType[99940]) unknown shiftedData[100014](100013 call _ddata[11791](?) eltType[99940])
  function _remoteAccessData[100096](?).getDataIndex[100122](arg _mt[100127]:_MT[227], arg this[100124]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?), arg ind[100119] :
  (347703 call . this[100124] c"idxType")) : _unknown[43] "inline" "method"
  {
    (100141 return(100140 call(100132 call . this[100124] c"getDataIndex")(100138 call chpl__tuplify ind[100119])))
  }
  function _remoteAccessData[100096](?).getDataIndex[100156](arg _mt[100161]:_MT[227], arg this[100158]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?), arg ind[100153] :
  (100151 call *(347710 call . this[100158] c"rank")(347715 call . this[100158] c"idxType"))) : _unknown[43] "inline" "method"
  {
    if(100543 call _cond_test(347720 call . this[100158] c"stridable"))
    {
      unknown sum[100165](347725 call . this[100158] c"origin")
      {
        unknown i[100214] 0
        unknown tmp[100215] "maybe param" "temp"
        (100227 'move' tmp[100215](100225 call chpl_compute_low_param_loop_bound 1(347730 call . this[100158] c"rank")))
        unknown tmp[100216] "maybe param" "temp"
        (100234 'move' tmp[100216](100232 call chpl_compute_high_param_loop_bound 1(347761 call . this[100158] c"rank")))
        unknown tmp[100217] "maybe param" "temp"
        (100237 'move' tmp[100217] 1)
        ParamForLoop
        { i[100214] tmp[100215] tmp[100216] tmp[100217]
          (100211 call += sum[100165](100209 call /(100194 call *(100188 call -(100180 call chpl__idxToInt(100178 call ind[100153] i[100214]))(100187 call chpl__idxToInt(100185 call(347738 call . this[100158] c"off") i[100214])))(100193 call(347744 call . this[100158] c"blk") i[100214]))(100207 call _cast(100206 call chpl__idxTypeToIntIdxType(347756 call . this[100158] c"idxType"))(100202 call abs(100200 call(347750 call . this[100158] c"str") i[100214])))))
        }
        label _unused_continueLabel[100219]
        label _breakLabel[100218]
      }
      (100249 return sum[100165])
    }
    {
      if(100538 call _cond_test(100256 call &&(100253 call ==(347767 call . this[100158] c"rank") 1) earlyShiftData[92605]))
      {
        if(100285 call _cond_test(347773 call . this[100158] c"blkChanged"))
        {
          (100272 return(100270 call *(100265 call chpl__idxToInt(100263 call ind[100153] 1))(100269 call(347779 call . this[100158] c"blk") 1)))
        }
        {
          (100282 return(100281 call chpl__idxToInt(100279 call ind[100153] 1)))
        }
      }
      {
        unknown sum[100302](100299 IfExpr  earlyShiftData[92605] then
        { scopeless
          (100296 call _cast(100295 call chpl__idxTypeToIntIdxType(347786 call . this[100158] c"idxType")) 0)
        } else
        { scopeless
          (347791 call . this[100158] c"origin")
        } )
        if(100518 call _cond_test(347796 call . this[100158] c"blkChanged"))
        {
          {
            unknown i[100329] 0
            unknown tmp[100330] "maybe param" "temp"
            (100342 'move' tmp[100330](100340 call chpl_compute_low_param_loop_bound 1(347801 call . this[100158] c"rank")))
            unknown tmp[100331] "maybe param" "temp"
            (100349 'move' tmp[100331](100347 call chpl_compute_high_param_loop_bound 1(347815 call . this[100158] c"rank")))
            unknown tmp[100332] "maybe param" "temp"
            (100352 'move' tmp[100332] 1)
            ParamForLoop
            { i[100329] tmp[100330] tmp[100331] tmp[100332]
              {
                (100325 call += sum[100302](100323 call *(100318 call chpl__idxToInt(100316 call ind[100153] i[100329]))(100322 call(347809 call . this[100158] c"blk") i[100329])))
              }
            }
            label _unused_continueLabel[100334]
            label _breakLabel[100333]
          }
        }
        {
          if(100513 call _cond_test(100369 call == storageOrder[92630] RMO[92613]))
          {
            {
              unknown i[100396] 0
              unknown tmp[100397] "maybe param" "temp"
              (100409 'move' tmp[100397](100407 call chpl_compute_low_param_loop_bound 1(100374 call -(347822 call . this[100158] c"rank") 1)))
              unknown tmp[100398] "maybe param" "temp"
              (100419 'move' tmp[100398](100417 call chpl_compute_high_param_loop_bound 1(100414 call -(347836 call . this[100158] c"rank") 1)))
              unknown tmp[100399] "maybe param" "temp"
              (100422 'move' tmp[100399] 1)
              ParamForLoop
              { i[100396] tmp[100397] tmp[100398] tmp[100399]
                {
                  (100392 call += sum[100302](100390 call *(100385 call chpl__idxToInt(100383 call ind[100153] i[100396]))(100389 call(347830 call . this[100158] c"blk") i[100396])))
                }
              }
              label _unused_continueLabel[100401]
              label _breakLabel[100400]
            }
            (100442 call += sum[100302](100441 call chpl__idxToInt(100439 call ind[100153](347843 call . this[100158] c"rank"))))
          }
          {
            {
              unknown i[100467] 0
              unknown tmp[100468] "maybe param" "temp"
              (100480 'move' tmp[100468](100478 call chpl_compute_low_param_loop_bound 2(347848 call . this[100158] c"rank")))
              unknown tmp[100469] "maybe param" "temp"
              (100487 'move' tmp[100469](100485 call chpl_compute_high_param_loop_bound 2(347862 call . this[100158] c"rank")))
              unknown tmp[100470] "maybe param" "temp"
              (100490 'move' tmp[100470] 1)
              ParamForLoop
              { i[100467] tmp[100468] tmp[100469] tmp[100470]
                {
                  (100463 call += sum[100302](100461 call *(100456 call chpl__idxToInt(100454 call ind[100153] i[100467]))(100460 call(347856 call . this[100158] c"blk") i[100467])))
                }
              }
              label _unused_continueLabel[100472]
              label _breakLabel[100471]
            }
            (100510 call += sum[100302](100509 call chpl__idxToInt(100507 call ind[100153] 1)))
          }
        }
        if(100530 call _cond_test(100523 call ! earlyShiftData[92605]))
        {
          (100527 call -= sum[100302](347871 call . this[100158] c"factoredOffs"))
        }
        (100536 return sum[100302])
      }
    }
  }
  function _remoteAccessData[100096](?).computeFactoredOffs[100553](arg _mt[100558]:_MT[227], arg this[100555]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?)) : _unknown[43] "method" "no return value for void"
  {
    (100562 call =(347877 call . this[100555] c"factoredOffs") 0)
    {
      unknown i[100591] 0
      unknown tmp[100592] "maybe param" "temp"
      (100604 'move' tmp[100592](100602 call chpl_compute_low_param_loop_bound 1(347882 call . this[100555] c"rank")))
      unknown tmp[100593] "maybe param" "temp"
      (100611 'move' tmp[100593](100609 call chpl_compute_high_param_loop_bound 1(347909 call . this[100555] c"rank")))
      unknown tmp[100594] "maybe param" "temp"
      (100614 'move' tmp[100594] 1)
      ParamForLoop
      { i[100591] tmp[100592] tmp[100593] tmp[100594]
        {
          (100587 call =(347887 call . this[100555] c"factoredOffs")(100585 call +(347892 call . this[100555] c"factoredOffs")(100583 call *(100575 call(347897 call . this[100555] c"blk") i[100591])(100582 call chpl__idxToInt(100580 call(347903 call . this[100555] c"off") i[100591])))))
        }
      }
      label _unused_continueLabel[100596]
      label _breakLabel[100595]
    }
  }
  function _remoteAccessData[100096](?).initShiftedData[100630](arg _mt[100635]:_MT[227], arg this[100632]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?)) : _unknown[43] "method" "no return value for void"
  {
    if(100688 call _cond_test(100641 call && earlyShiftData[92605](100639 call !(347915 call . this[100632] c"stridable"))))
    {
      unknown idxSignedType[100650] "type variable"(100649 call chpl__signedType(100647 call chpl__idxTypeToIntIdxType(347920 call . this[100632] c"idxType")))
      const shiftDist[100675] "const"(100672 IfExpr (100657 call isIntType(347925 call . this[100632] c"idxType")) then
      { scopeless
        (100660 call -(347930 call . this[100632] c"origin")(347935 call . this[100632] c"factoredOffs"))
      } else
      { scopeless
        (100670 call -(100664 call _cast idxSignedType[100650](347940 call . this[100632] c"origin"))(100668 call _cast idxSignedType[100650](347946 call . this[100632] c"factoredOffs")))
      } )
      (100685 call =(347952 call . this[100632] c"shiftedData")(100684 call _ddata_shift(347957 call . this[100632] c"eltType")(347962 call . this[100632] c"data") shiftDist[100675]))
    }
  }
  function _remoteAccessData[100096](?).strideAlignUp[100700](arg _mt[100707]:_MT[227], arg this[100704]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?), arg lo[100698]:_any[170](?), arg r[100702]:_any[170](?)) : _unknown[43] "method"
  {
    (100761 return(100759 call +(100710 call . r[100702] c"low")(100757 call *(100745 call /(100733 call -(100730 call +(100718 call - lo[100698](100715 call . r[100702] c"low"))(100728 call _cast(347972 call . this[100704] c"idxType")(100726 call abs(100722 call . r[100702] c"stride")))) 1)(100743 call _cast(347978 call . this[100704] c"idxType")(100741 call abs(100737 call . r[100702] c"stride"))))(100755 call _cast(347984 call . this[100704] c"idxType")(100753 call abs(100749 call . r[100702] c"stride"))))))
  }
  function _remoteAccessData[100096](?).strideAlignDown[100771](arg _mt[100778]:_MT[227], arg this[100775]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?), arg hi[100769]:_any[170](?), arg r[100773]:_any[170](?)) : _unknown[43] "method"
  {
    (100802 return(100800 call - hi[100769](100798 call %(100786 call - hi[100769](100783 call . r[100773] c"low"))(100796 call _cast(347993 call . this[100775] c"idxType")(100794 call abs(100790 call . r[100773] c"stride"))))))
  }
  function _remoteAccessData[100096](?).initDataFrom[100814](arg _mt[100819]:_MT[227], arg this[100816]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?), arg other[100811] :
  _remoteAccessData[100096](?)) : _unknown[43] "method" "no return value for void"
  {
    (100831 call =(100824 call . this[100816] c"data")(100828 call . other[100811] c"data"))
  }
  function _remoteAccessData[100096](?).toSlice[100842](arg _mt[100847]:_MT[227], arg this[100844]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?), arg newDom[100840]:_any[170](?)) : _unknown[43] "method"
  {
    (100861 call compilerAssert(100858 call ==(100851 call . this[100844] c"rank")(100855 call . newDom[100840] c"rank")))
    unknown rad[100892](100891 call _remoteAccessData[100096](?)(348004 call . this[100844] c"eltType")(100868 call . newDom[100840] c"rank")(100872 call . newDom[100840] c"idxType")(100876 call . newDom[100840] c"stridable")(100889 call ||(100880 call . newDom[100840] c"stridable")(100886 call . this[100844] c"blkChanged")))
    (100903 call(100898 call . rad[100892] c"initDataFrom") this[100844])
    (100926 call =(100908 call . rad[100892] c"shiftedData")(100923 IfExpr (100912 call . newDom[100840] c"stridable") then
    { scopeless
      (100916 call . this[100844] c"data")
    } else
    { scopeless
      (100920 call . this[100844] c"shiftedData")
    } ))
    (100945 call =(100932 call . rad[100892] c"origin")(100943 call _cast(100940 call . newDom[100840] c"idxType")(100936 call . this[100844] c"origin")))
    (100963 call =(100951 call . rad[100892] c"off")(100962 call chpl__tuplify(100958 call . newDom[100840] c"dsiLow")))
    (100981 call =(100969 call . rad[100892] c"str")(100980 call chpl__tuplify(100976 call . newDom[100840] c"dsiStride")))
    {
      unknown i[101128] 0
      unknown tmp[101129] "maybe param" "temp"
      (101141 'move' tmp[101129](101139 call chpl_compute_low_param_loop_bound 1(348027 call . this[100844] c"rank")))
      unknown tmp[101130] "maybe param" "temp"
      (101148 'move' tmp[101130](101146 call chpl_compute_high_param_loop_bound 1(348057 call . this[100844] c"rank")))
      unknown tmp[101131] "maybe param" "temp"
      (101151 'move' tmp[101131] 1)
      ParamForLoop
      { i[101128] tmp[101129] tmp[101130] tmp[101131]
        {
          const shift[101044] "const"(101042 call /(101024 call *(100996 call(100991 call . this[100844] c"blk") i[101128])(101022 call -(101011 call chpl__idxToInt(101007 call .(101006 call(101001 call . newDom[100840] c"dsiDim") i[101128]) c"low"))(101021 call chpl__idxToInt(101019 call(101014 call . this[100844] c"off") i[101128]))))(101040 call _cast(101037 call . rad[100892] c"idxType")(101035 call abs(101033 call(101028 call . this[100844] c"str") i[101128]))))
          if(101076 call _cond_test(101056 call >(101054 call(101049 call . this[100844] c"str") i[101128]) 0))
          {
            (101063 call +=(101059 call . rad[100892] c"origin") shift[101044])
          }
          {
            (101072 call -=(101068 call . rad[100892] c"origin") shift[101044])
          }
          const mult[101105] "const"(101103 call _cast(101100 call . rad[100892] c"idxType")(101097 call /(101087 call .(101086 call(101081 call . newDom[100840] c"dsiDim") i[101128]) c"stride")(101096 call(101091 call . this[100844] c"str") i[101128])))
          (101125 call =(101114 call(101109 call . rad[100892] c"blk") i[101128])(101123 call *(101121 call(101116 call . this[100844] c"blk") i[101128]) mult[101105]))
        }
      }
      label _unused_continueLabel[101133]
      label _breakLabel[101132]
    }
    (101169 call(101165 call . rad[100892] c"computeFactoredOffs"))
    (101178 call(101174 call . rad[100892] c"initShiftedData"))
    (101181 return rad[100892])
  }
  function _remoteAccessData[100096](?).toReindex[101190](arg _mt[101195]:_MT[227], arg this[101192]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?), arg newDom[101188]:_any[170](?)) : _unknown[43] "method"
  {
    (101209 call compilerAssert(101206 call ==(101199 call . this[101192] c"rank")(101203 call . newDom[101188] c"rank")))
    unknown rad[101229](101228 call _remoteAccessData[100096](?)(348068 call . this[101192] c"eltType")(101216 call . newDom[101188] c"rank")(101220 call . newDom[101188] c"idxType")(101224 call . newDom[101188] c"stridable")(348076 call . this[101192] c"blkChanged"))
    (101238 call(101233 call . rad[101229] c"initDataFrom") this[101192])
    (101259 call =(101241 call . rad[101229] c"shiftedData")(101256 IfExpr (101245 call . newDom[101188] c"stridable") then
    { scopeless
      (101249 call . this[101192] c"data")
    } else
    { scopeless
      (101253 call . this[101192] c"shiftedData")
    } ))
    (101276 call =(101263 call . rad[101229] c"origin")(101274 call _cast(101271 call . newDom[101188] c"intIdxType")(101267 call . this[101192] c"origin")))
    (101287 call =(101280 call . rad[101229] c"blk")(101284 call . this[101192] c"blk"))
    (101301 call =(101291 call . rad[101229] c"off")(101300 call chpl__tuplify(101296 call . newDom[101188] c"dsiLow")))
    (101315 call =(101305 call . rad[101229] c"str")(101314 call chpl__tuplify(101310 call . newDom[101188] c"dsiStride")))
    (101331 call =(101321 call . rad[101229] c"factoredOffs")(101329 call _cast(101326 call . newDom[101188] c"intIdxType") 0))
    (101339 call(101335 call . rad[101229] c"computeFactoredOffs"))
    (101346 call(101342 call . rad[101229] c"initShiftedData"))
    (101349 return rad[101229])
  }
  function _remoteAccessData[100096](?).toRankChange[101358](arg _mt[101367]:_MT[227], arg this[101364]:_remoteAccessData[100096](?) :
  _remoteAccessData[100096](?), arg newDom[101356]:_any[170](?), arg cd[101360]:_any[170](?), arg idx[101362]:_any[170](?)) : _unknown[43] "method"
  {
    (101393 call compilerAssert(101390 call &&(101378 call ==(101371 call . this[101364] c"rank")(101375 call . idx[101362] c"size"))(101388 call !=(101381 call . this[101364] c"rank")(101385 call . newDom[101356] c"rank"))))
    unknown intIdxType[101400] "type variable"(101397 call . newDom[101356] c"intIdxType")
    unknown idxSignedType[101407] "type variable"(101406 call chpl__signedType intIdxType[101400])
    unknown rad[101427](101426 call _remoteAccessData[100096](?)(348108 call . this[101364] c"eltType")(101414 call . newDom[101356] c"rank")(101418 call . newDom[101356] c"idxType")(101422 call . newDom[101356] c"stridable") 1)
    const collapsedDims[101434] "const"(101433 call chpl__tuplify cd[101360])
    (101443 call(101438 call . rad[101427] c"initDataFrom") this[101364])
    (101464 call =(101446 call . rad[101427] c"shiftedData")(101461 IfExpr (101450 call . newDom[101356] c"stridable") then
    { scopeless
      (101454 call . this[101364] c"data")
    } else
    { scopeless
      (101458 call . this[101364] c"shiftedData")
    } ))
    (101481 call =(101468 call . rad[101427] c"origin")(101479 call _cast(101476 call . newDom[101356] c"intIdxType")(101472 call . this[101364] c"origin")))
    unknown curDim[101485] 1
    {
      unknown j[101684] 0
      unknown tmp[101685] "maybe param" "temp"
      (101697 'move' tmp[101685](101695 call chpl_compute_low_param_loop_bound 1(101490 call . idx[101362] c"size")))
      unknown tmp[101686] "maybe param" "temp"
      (101707 'move' tmp[101686](101705 call chpl_compute_high_param_loop_bound 1(101702 call . idx[101362] c"size")))
      unknown tmp[101687] "maybe param" "temp"
      (101710 'move' tmp[101687] 1)
      ParamForLoop
      { j[101684] tmp[101685] tmp[101686] tmp[101687]
        {
          if(101679 call _cond_test(101499 call !(101498 call collapsedDims[101434] j[101684])))
          {
            (101518 call =(101507 call(101502 call . rad[101427] c"off") curDim[101485])(101515 call .(101514 call(101509 call . newDom[101356] c"dsiDim") curDim[101485]) c"low"))
            const off[101547] "const"(101545 call _cast idxSignedType[101407](101542 call -(101531 call chpl__idxToInt(101529 call(101524 call . rad[101427] c"off") curDim[101485]))(101541 call chpl__idxToInt(101539 call(101534 call . this[101364] c"off") j[101684]))))
            (101579 call +=(101551 call . rad[101427] c"origin")(101577 call _cast intIdxType[101400](101574 call /(101565 call *(101562 call _cast idxSignedType[101407](101560 call(101555 call . this[101364] c"blk") j[101684])) off[101547])(101573 call(101568 call . this[101364] c"str") j[101684]))))
            (101596 call =(101588 call(101583 call . rad[101427] c"blk") curDim[101485])(101595 call(101590 call . this[101364] c"blk") j[101684]))
            (101613 call =(101605 call(101600 call . rad[101427] c"str") curDim[101485])(101612 call(101607 call . this[101364] c"str") j[101684]))
            (101618 call += curDim[101485] 1)
          }
          {
            const off[101643] "const"(101641 call _cast idxSignedType[101407](101638 call -(101627 call chpl__idxToInt(101625 call idx[101362] j[101684]))(101637 call chpl__idxToInt(101635 call(101630 call . this[101364] c"off") j[101684]))))
            (101676 call +=(101648 call . rad[101427] c"origin")(101674 call _cast intIdxType[101400](101671 call /(101662 call *(101659 call _cast idxSignedType[101407](101657 call(101652 call . this[101364] c"blk") j[101684])) off[101643])(101670 call(101665 call . this[101364] c"str") j[101684]))))
          }
        }
      }
      label _unused_continueLabel[101689]
      label _breakLabel[101688]
    }
    (101726 call(101722 call . rad[101427] c"computeFactoredOffs"))
    (101733 call(101729 call . rad[101427] c"initShiftedData"))
    (101736 return rad[101427])
  }
  function LocRADCache[101892](?).init[101793](arg _mt[101896]:_MT[227], arg this[101894]:LocRADCache[101892](?), arg eltType[101791]:_any[170](?), param arg rank[101796] :
  int(64)[13], arg idxType[101799]:_any[170](?), param arg stridable[101802] :
  bool[10], arg newTargetLocDom[101810] :
  (101808 call chpl__buildDomainRuntimeType defaultDist[93214] rank[101796])) : _unknown[43] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (101818 call =(101814 call . this[101894] c"eltType") eltType[101791])
    (101827 call =(101823 call . this[101894] c"rank") rank[101796])
    (101835 call =(101831 call . this[101894] c"idxType") idxType[101799])
    (101843 call =(101839 call . this[101894] c"stridable") stridable[101802])
    (101848 call =(348192 call . this[101894] c"targetLocDom") newTargetLocDom[101810])
  }
  function LocRADCache[101892](?).lockRAD[101857](arg _mt[101900]:_MT[227], arg this[101898]:LocRADCache[101892](?), arg rlocIdx[101855]:_any[170](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    (101867 call(101863 call .(101862 call(348200 call . this[101898] c"RADLocks") rlocIdx[101855]) c"lock"))
  }
  function LocRADCache[101892](?).unlockRAD[101876](arg _mt[101904]:_MT[227], arg this[101902]:LocRADCache[101892](?), arg rlocIdx[101874]:_any[170](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    (101886 call(101882 call .(101881 call(348206 call . this[101902] c"RADLocks") rlocIdx[101874]) c"unlock"))
  }
  type LocRADCache[101892](?) val super[331017]:object[253] "super class" unknown eltType[101741] "type variable" unknown rank[101745] "param" int(64)[13] unknown idxType[101748] "type variable" unknown stridable[101752] "param" bool[10] unknown targetLocDom[101760](101758 call chpl__buildDomainRuntimeType defaultDist[93214] rank[101745]) unknown RAD[101776](101774 call chpl__buildArrayRuntimeType(101772 call chpl__ensureDomainExpr targetLocDom[101760])(101771 call _remoteAccessData[100096](?) eltType[101741] rank[101745] idxType[101748] stridable[101752])) unknown RADLocks[101786](101784 call chpl__buildArrayRuntimeType(101782 call chpl__ensureDomainExpr targetLocDom[101760]) chpl_LocalSpinlock[180469])
  type anymanaged LocRADCache[382034](?)
  function DefaultRectangularArr[105188](?).intIdxType[102017](arg _mt[105192]:_MT[227], arg this[105190]:DefaultRectangularArr[105188](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (102023 return(102022 call chpl__idxTypeToIntIdxType(348233 call . this[105190] c"idxType")))
  }
  function DefaultRectangularArr[105188](?).dsiDisplayRepresentation[102030](arg _mt[105196]:_MT[227], arg this[105194]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    (102051 call writeln "off="(348238 call . this[105194] c"off"))
    (102073 call writeln "blk="(348243 call . this[105194] c"blk"))
    (102094 call writeln "str="(348248 call . this[105194] c"str"))
    (102115 call writeln "factoredOffs="(348253 call . this[105194] c"factoredOffs"))
    (102136 call writeln "noinit_data="(348260 call . this[105194] c"noinit_data"))
  }
  function DefaultRectangularArr[105188](?).dsiGetBaseDom[102142](arg _mt[105200]:_MT[227], arg this[105198]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    (102145 return(348265 call . this[105198] c"dom"))
  }
  function DefaultRectangularArr[105188](?).dsiDestroyDataHelper[102154](arg _mt[105204]:_MT[227], arg this[105202]:DefaultRectangularArr[105188](?), arg dd[102152]:_any[170](?), arg ddiNumIndices[102156]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (102165 call compilerAssert(102163 call chpl_isDdata(102161 'typeof' dd[102152])))
    {
      unknown _indexOfInterest[102185] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102186] "expr temp" "temp"
      (102195 'move' _iterator[102186](102193 call _getIterator(102203 call chpl_direct_range_iter 0(102200 call - ddiNumIndices[102156] 1) 1)))
      Defer
      {
        {
          (102219 call _freeIterator _iterator[102186])
        }
      }
      { scopeless type
        (102208 'move' _indexOfInterest[102185](102205 call iteratorIndex _iterator[102186]))
      }
      ForLoop
      {
        unknown i[102212] "index var" "insert auto destroy"
        (102214 'move' i[102212] _indexOfInterest[102185])
        {
          (102182 call chpl__autoDestroy(102180 call dd[102152] i[102212]))
        }
        label _continueLabel[102190]
        _indexOfInterest[102185]
        _iterator[102186]
      }
      label _breakLabel[102191]
    }
  }
  function DefaultRectangularArr[105188](?).dsiDestroyArr[102230](arg _mt[105208]:_MT[227], arg this[105206]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    if(102365 call _cond_test(348274 call . this[105206] c"externArr"))
    {
      if(102246 call _cond_test(102234 call !(348279 call . this[105206] c"_borrowed")))
      {
        (102243 call chpl_call_free_func(348286 call . this[105206] c"externFreeFunc")(102242 call c_ptrTo(348291 call . this[105206] c"data")))
      }
    }
    {
      unknown numElts[102253] 0(348295 call . this[105206] c"intIdxType")
      if(102355 call _cond_test(102273 call ||(102264 call >(102260 call .(348300 call . this[105206] c"dom") c"dsiNumIndices") 0)(102271 call >(102267 call .(348305 call . this[105206] c"dataAllocRange") c"length") 0)))
      {
        unknown needsDestroy[102300] "param"(102299 'needs auto destroy'(102298 'deref'(102297 call(348310 call . this[105206] c"data") 0)))
        if(102321 call _cond_test(102311 call &&(102306 call ==(348315 call . this[105206] c"rank") 1)(102309 call !(348320 call . this[105206] c"stridable"))))
        {
          (102318 call = numElts[102253](102315 call .(348326 call . this[105206] c"dataAllocRange") c"length"))
        }
        if(102338 call _cond_test(102328 call == numElts[102253] 0))
        {
          (102335 call = numElts[102253](102332 call .(348333 call . this[105206] c"dom") c"dsiNumIndices"))
        }
        if(102351 call _cond_test needsDestroy[102300])
        {
          (102348 call(348340 call . this[105206] c"dsiDestroyDataHelper")(348345 call . this[105206] c"data") numElts[102253])
        }
      }
      (102363 call _ddata_free(348351 call . this[105206] c"data") numElts[102253])
    }
  }
  function DefaultRectangularArr[105188](?).theData[102374](arg _mt[105212]:_MT[227], arg this[105210]:DefaultRectangularArr[105188](?)) ref : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    if(102388 call _cond_test(102380 call && earlyShiftData[92605](102378 call !(348358 call . this[105210] c"stridable"))))
    {
      (102383 return(348363 call . this[105210] c"shiftedData"))
    }
    {
      (102386 return(348368 call . this[105210] c"data"))
    }
  }
  function DefaultRectangularArr[105188](?).these[102405](arg _mt[105216]:_MT[227], arg this[105214]:DefaultRectangularArr[105188](?), arg tasksPerLocale[102401] :
  int(64)[13] =
  dataParTasksPerLocale[92471], arg ignoreRunning[102409] :
  bool[10] =
  dataParIgnoreRunningTasks[92476], arg minIndicesPerTask[102415] :
  int(64)[13] =
  dataParMinGranularity[92481]) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(102441 call _cond_test debugDefaultDist[92581])
    {
      (102438 call chpl_debug_writeln "*** In defRectArr simple-dd serial iterator")
    }
    {
      unknown _indexOfInterest[102455] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102456] "expr temp" "temp"
      (102465 'move' _iterator[102456](102463 call _getIterator(102451 call chpl__serialViewIter this[105214](348378 call . this[105214] c"dom"))))
      Defer
      {
        {
          (102482 call _freeIterator _iterator[102456])
        }
      }
      { scopeless type
        (102471 'move' _indexOfInterest[102455](102468 call iteratorIndex _iterator[102456]))
      }
      ForLoop
      {
        unknown elem[102475] "index var" "insert auto destroy"
        (102477 'move' elem[102475] _indexOfInterest[102455])
        (102453 yield elem[102475])
        label _continueLabel[102460]
        _indexOfInterest[102455]
        _iterator[102456]
      }
      label _breakLabel[102461]
    }
  }
  function DefaultRectangularArr[105188](?).these[102497](arg _mt[105220]:_MT[227], arg this[105218]:DefaultRectangularArr[105188](?), param arg tag[102494] :
  iterKind[697], arg tasksPerLocale[102500] =
  dataParTasksPerLocale[92471], arg ignoreRunning[102504] =
  dataParIgnoreRunningTasks[92476], arg minIndicesPerTask[102508] =
  dataParMinGranularity[92481]) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(102540 call _cond_test debugDefaultDist[92581])
    {
      (102537 call chpl_debug_writeln "*** In defRectArr simple-dd standalone iterator")
    }
    {
      unknown _indexOfInterest[102563] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102564] "expr temp" "temp"
      (102573 'move' _iterator[102564](102571 call _getIterator(102555 call(102547 call .(348391 call . this[105218] c"dom") c"these") tag[102494] tasksPerLocale[102500] ignoreRunning[102504] minIndicesPerTask[102508])))
      Defer
      {
        {
          (102590 call _freeIterator _iterator[102564])
        }
      }
      { scopeless type
        (102579 'move' _indexOfInterest[102563](102576 call iteratorIndex _iterator[102564]))
      }
      ForLoop
      {
        unknown i[102583] "index var" "insert auto destroy"
        (102585 'move' i[102583] _indexOfInterest[102563])
        {
          (102560 yield(102559 call(348399 call . this[105218] c"dsiAccess") i[102583]))
        }
        label _continueLabel[102568]
        _indexOfInterest[102563]
        _iterator[102564]
      }
      label _breakLabel[102569]
    }
  }
  where {
    (102516 call == tag[102494] standalone[695])
  }
  function DefaultRectangularArr[105188](?).these[102606](arg _mt[105224]:_MT[227], arg this[105222]:DefaultRectangularArr[105188](?), param arg tag[102603] :
  iterKind[697], arg tasksPerLocale[102609] =
  dataParTasksPerLocale[92471], arg ignoreRunning[102613] =
  dataParIgnoreRunningTasks[92476], arg minIndicesPerTask[102617] =
  dataParMinGranularity[92481]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(102649 call _cond_test debugDefaultDist[92581])
    {
      (102646 call chpl_debug_writeln "*** In defRectArr simple-dd leader iterator")
    }
    {
      unknown _indexOfInterest[102668] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102669] "expr temp" "temp"
      (102678 'move' _iterator[102669](102676 call _getIterator(102664 call(102656 call .(348412 call . this[105222] c"dom") c"these") tag[102603] tasksPerLocale[102609] ignoreRunning[102613] minIndicesPerTask[102617])))
      Defer
      {
        {
          (102695 call _freeIterator _iterator[102669])
        }
      }
      { scopeless type
        (102684 'move' _indexOfInterest[102668](102681 call iteratorIndex _iterator[102669]))
      }
      ForLoop
      {
        unknown followThis[102688] "index var" "insert auto destroy"
        (102690 'move' followThis[102688] _indexOfInterest[102668])
        (102666 yield followThis[102688])
        label _continueLabel[102673]
        _indexOfInterest[102668]
        _iterator[102669]
      }
      label _breakLabel[102674]
    }
  }
  where {
    (102625 call == tag[102603] leader[691])
  }
  function DefaultRectangularArr[105188](?).these[102711](arg _mt[105228]:_MT[227], arg this[105226]:DefaultRectangularArr[105188](?), param arg tag[102708] :
  iterKind[697], arg followThis[102713]:_any[170](?), arg tasksPerLocale[102716] =
  dataParTasksPerLocale[92471], arg ignoreRunning[102720] =
  dataParIgnoreRunningTasks[92476], arg minIndicesPerTask[102724] =
  dataParMinGranularity[92481]) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(102757 call _cond_test debugDefaultDist[92581])
    {
      (102754 call chpl_debug_writeln "*** In defRectArr simple-dd follower iterator: " followThis[102713])
    }
    {
      unknown _indexOfInterest[102784] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102785] "expr temp" "temp"
      (102794 'move' _iterator[102785](102792 call _getIterator(102777 call(102764 call .(348430 call . this[105226] c"dom") c"these")(tag = follower[693]) followThis[102713] tasksPerLocale[102716] ignoreRunning[102720] minIndicesPerTask[102724])))
      Defer
      {
        {
          (102811 call _freeIterator _iterator[102785])
        }
      }
      { scopeless type
        (102800 'move' _indexOfInterest[102784](102797 call iteratorIndex _iterator[102785]))
      }
      ForLoop
      {
        unknown i[102804] "index var" "insert auto destroy"
        (102806 'move' i[102804] _indexOfInterest[102784])
        (102782 yield(102781 call(348439 call . this[105226] c"dsiAccess") i[102804]))
        label _continueLabel[102789]
        _indexOfInterest[102784]
        _iterator[102785]
      }
      label _breakLabel[102790]
    }
  }
  where {
    (102732 call == tag[102708] follower[693])
  }
  function DefaultRectangularArr[105188](?).computeFactoredOffs[102823](arg _mt[105232]:_MT[227], arg this[105230]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (102830 call =(348445 call . this[105230] c"factoredOffs")(102828 call _cast(348449 call . this[105230] c"intIdxType") 0))
    {
      unknown i[102859] 0
      unknown tmp[102860] "maybe param" "temp"
      (102872 'move' tmp[102860](102870 call chpl_compute_low_param_loop_bound 1(348454 call . this[105230] c"rank")))
      unknown tmp[102861] "maybe param" "temp"
      (102879 'move' tmp[102861](102877 call chpl_compute_high_param_loop_bound 1(348481 call . this[105230] c"rank")))
      unknown tmp[102862] "maybe param" "temp"
      (102882 'move' tmp[102862] 1)
      ParamForLoop
      { i[102859] tmp[102860] tmp[102861] tmp[102862]
        {
          (102855 call =(348459 call . this[105230] c"factoredOffs")(102853 call +(348464 call . this[105230] c"factoredOffs")(102851 call *(102843 call(348469 call . this[105230] c"blk") i[102859])(102850 call chpl__idxToInt(102848 call(348475 call . this[105230] c"off") i[102859])))))
        }
      }
      label _unused_continueLabel[102864]
      label _breakLabel[102863]
    }
  }
  function DefaultRectangularArr[105188](?).initShiftedData[102897](arg _mt[105236]:_MT[227], arg this[105234]:DefaultRectangularArr[105188](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    if(102955 call _cond_test(102903 call && earlyShiftData[92605](102901 call !(348487 call . this[105234] c"stridable"))))
    {
      if(102950 call _cond_test(102910 call >(102906 call .(348492 call . this[105234] c"dom") c"dsiNumIndices") 0))
      {
        const shiftDist[102936] "const"(102933 IfExpr (102915 call isIntType(348497 call . this[105234] c"idxType")) then
        { scopeless
          (102921 call -(102918 call _cast(348502 call . this[105234] c"idxType") 0)(348507 call . this[105234] c"factoredOffs"))
        } else
        { scopeless
          (102931 call -(102925 call _cast(348514 call . this[105234] c"idxSignedType") 0)(102929 call _cast(348524 call . this[105234] c"idxSignedType")(348519 call . this[105234] c"factoredOffs")))
        } )
        (102947 call =(348529 call . this[105234] c"shiftedData")(102946 call _ddata_shift(348534 call . this[105234] c"eltType")(348539 call . this[105234] c"data") shiftDist[102936]))
      }
    }
  }
  function DefaultRectangularArr[105188](?).postinit[102964](arg _mt[105240]:_MT[227], arg this[105238]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(102972 call _cond_test(102968 call ==(348545 call . this[105238] c"noinit_data") 1))
    {
      (102970 return _void[47])
    }
    {
      unknown dim[103017] 0
      unknown tmp[103018] "maybe param" "temp"
      (103030 'move' tmp[103018](103028 call chpl_compute_low_param_loop_bound 1(348550 call . this[105238] c"rank")))
      unknown tmp[103019] "maybe param" "temp"
      (103037 'move' tmp[103019](103035 call chpl_compute_high_param_loop_bound 1(348579 call . this[105238] c"rank")))
      unknown tmp[103020] "maybe param" "temp"
      (103040 'move' tmp[103020] 1)
      ParamForLoop
      { dim[103017] tmp[103018] tmp[103019] tmp[103020]
        {
          (102996 call =(102985 call(348555 call . this[105238] c"off") dim[103017])(102993 call .(102992 call(102987 call .(348561 call . this[105238] c"dom") c"dsiDim") dim[103017]) c"alignedLow"))
          (103014 call =(103003 call(348567 call . this[105238] c"str") dim[103017])(103011 call .(103010 call(103005 call .(348573 call . this[105238] c"dom") c"dsiDim") dim[103017]) c"stride"))
        }
      }
      label _unused_continueLabel[103022]
      label _breakLabel[103021]
    }
    if(103261 call _cond_test(103056 call == storageOrder[92630] RMO[92613]))
    {
      (103066 call =(103061 call(348586 call . this[105238] c"blk")(348591 call . this[105238] c"rank"))(103064 call _cast(348595 call . this[105238] c"intIdxType") 1))
      {
        unknown dim[103111] 0
        unknown tmp[103112] "maybe param" "temp"
        (103123 'move' tmp[103112](103121 call chpl_compute_low_param_loop_bound 1(103073 call -(348600 call . this[105238] c"rank") 1)))
        unknown tmp[103113] "maybe param" "temp"
        (103133 'move' tmp[103113](103131 call chpl_compute_high_param_loop_bound 1(103128 call -(348623 call . this[105238] c"rank") 1)))
        unknown tmp[103114] "maybe param" "temp"
        (103136 'move' tmp[103114](103078 call - 1))
        ParamForLoop
        { dim[103111] tmp[103112] tmp[103113] tmp[103114]
          (103108 call =(103085 call(348605 call . this[105238] c"blk") dim[103111])(103106 call *(103092 call(348611 call . this[105238] c"blk")(103089 call + dim[103111] 1))(103103 call .(103102 call(103094 call .(348617 call . this[105238] c"dom") c"dsiDim")(103099 call + dim[103111] 1)) c"length")))
        }
        label _unused_continueLabel[103116]
        label _breakLabel[103115]
      }
    }
    {
      if(103257 call _cond_test(103154 call == storageOrder[92630] CMO[92615]))
      {
        (103164 call =(103159 call(348630 call . this[105238] c"blk") 1)(103162 call _cast(348634 call . this[105238] c"intIdxType") 1))
        {
          unknown dim[103202] 0
          unknown tmp[103203] "maybe param" "temp"
          (103215 'move' tmp[103203](103213 call chpl_compute_low_param_loop_bound 2(348639 call . this[105238] c"rank")))
          unknown tmp[103204] "maybe param" "temp"
          (103222 'move' tmp[103204](103220 call chpl_compute_high_param_loop_bound 2(348662 call . this[105238] c"rank")))
          unknown tmp[103205] "maybe param" "temp"
          (103225 'move' tmp[103205] 1)
          ParamForLoop
          { dim[103202] tmp[103203] tmp[103204] tmp[103205]
            {
              (103198 call =(103175 call(348644 call . this[105238] c"blk") dim[103202])(103196 call *(103182 call(348650 call . this[105238] c"blk")(103179 call - dim[103202] 1))(103193 call .(103192 call(103184 call .(348656 call . this[105238] c"dom") c"dsiDim")(103189 call - dim[103202] 1)) c"length")))
            }
          }
          label _unused_continueLabel[103207]
          label _breakLabel[103206]
        }
      }
      {
        (103254 call halt "unknown array storage order")
      }
    }
    (103268 call(348666 call . this[105238] c"computeFactoredOffs"))
    const size[103312] "const"(103309 IfExpr (103275 call == storageOrder[92630] RMO[92613]) then
    { scopeless
      (103291 call *(103280 call(348673 call . this[105238] c"blk") 1)(103288 call .(103287 call(103282 call .(348678 call . this[105238] c"dom") c"dsiDim") 1) c"length"))
    } else
    { scopeless
      (103307 call *(103296 call(348683 call . this[105238] c"blk")(348688 call . this[105238] c"rank"))(103304 call .(103303 call(103298 call .(348693 call . this[105238] c"dom") c"dsiDim")(348698 call . this[105238] c"rank")) c"length"))
    } )
    if(103373 call _cond_test usePollyArrayIndex[92609])
    {
      {
        unknown dim[103338] 0
        unknown tmp[103339] "maybe param" "temp"
        (103351 'move' tmp[103339](103349 call chpl_compute_low_param_loop_bound 1(348704 call . this[105238] c"rank")))
        unknown tmp[103340] "maybe param" "temp"
        (103358 'move' tmp[103340](103356 call chpl_compute_high_param_loop_bound 1(348723 call . this[105238] c"rank")))
        unknown tmp[103341] "maybe param" "temp"
        (103361 'move' tmp[103341] 1)
        ParamForLoop
        { dim[103338] tmp[103339] tmp[103340] tmp[103341]
          {
            (103334 call =(103323 call(348711 call . this[105238] c"sizesPerDim") dim[103338])(103331 call .(103330 call(103325 call .(348717 call . this[105238] c"dom") c"dsiDim") dim[103338]) c"length"))
          }
        }
        label _unused_continueLabel[103343]
        label _breakLabel[103342]
      }
    }
    if(103424 call _cond_test(103379 call ==(348728 call . this[105238] c"data") nil[38]))
    {
      if(103419 call _cond_test(103382 call ! localeModelHasSublocales[180486]))
      {
        (103390 call =(348734 call . this[105238] c"data")(103389 call _ddata_allocate(348739 call . this[105238] c"eltType") size[103312]))
      }
      {
        (103415 call =(348745 call . this[105238] c"data")(103414 call _ddata_allocate(348750 call . this[105238] c"eltType") size[103312](subloc =(103410 IfExpr (103406 call >(103404 call(103400 call .(348754 call here[92085]) c"getChildCount")) 1) then
        { scopeless
          c_sublocid_all[90224]
        } else
        { scopeless
          c_sublocid_none[90216]
        } ))))
      }
    }
    (103430 call(348759 call . this[105238] c"initShiftedData"))
    if(103452 call _cond_test(103439 call &&(103434 call ==(348764 call . this[105238] c"rank") 1)(103437 call !(348769 call . this[105238] c"stridable"))))
    {
      (103449 call =(348774 call . this[105238] c"dataAllocRange")(103448 call(103443 call .(348779 call . this[105238] c"dom") c"dsiDim") 1))
    }
  }
  function DefaultRectangularArr[105188](?).getDataIndex[103467](arg _mt[105244]:_MT[227], arg this[105242]:DefaultRectangularArr[105188](?), arg ind[103463] ... :
  (348784 call . this[105242] c"idxType"), param arg getShifted[103470] =
  1) : _unknown[43] "inline" "method" "primary method"
  {
    (103483 return(103482 call(348793 call . this[105242] c"getDataIndex") ind[103463](getShifted = getShifted[103470])))
  }
  where {
    (103475 call ==(348789 call . this[105242] c"rank") 1)
  }
  function DefaultRectangularArr[105188](?).getDataIndex[103498](arg _mt[105248]:_MT[227], arg this[105246]:DefaultRectangularArr[105188](?), arg ind[103495] :
  (103493 call *(348800 call . this[105246] c"rank")(348805 call . this[105246] c"idxType")), param arg getShifted[103501] =
  1) : _unknown[43] "inline" "method" "primary method"
  {
    if(103898 call _cond_test(348810 call . this[105246] c"stridable"))
    {
      unknown sum[103509](103507 call _cast(348814 call . this[105246] c"intIdxType") 0)
      {
        unknown i[103555] 0
        unknown tmp[103556] "maybe param" "temp"
        (103568 'move' tmp[103556](103566 call chpl_compute_low_param_loop_bound 1(348819 call . this[105246] c"rank")))
        unknown tmp[103557] "maybe param" "temp"
        (103575 'move' tmp[103557](103573 call chpl_compute_high_param_loop_bound 1(348849 call . this[105246] c"rank")))
        unknown tmp[103558] "maybe param" "temp"
        (103578 'move' tmp[103558] 1)
        ParamForLoop
        { i[103555] tmp[103556] tmp[103557] tmp[103558]
          (103552 call += sum[103509](103550 call /(103538 call *(103532 call -(103524 call chpl__idxToInt(103522 call ind[103495] i[103555]))(103531 call chpl__idxToInt(103529 call(348827 call . this[105246] c"off") i[103555])))(103537 call(348833 call . this[105246] c"blk") i[103555]))(103548 call _cast(348844 call . this[105246] c"intIdxType")(103546 call abs(103544 call(348839 call . this[105246] c"str") i[103555])))))
        }
        label _unused_continueLabel[103560]
        label _breakLabel[103559]
      }
      (103590 return sum[103509])
    }
    {
      unknown wantShiftedIndex[103596] "param"(103594 call && getShifted[103501] earlyShiftData[92605])
      if(103894 call _cond_test(103605 call &&(103602 call ==(348857 call . this[105246] c"rank") 1) wantShiftedIndex[103596]))
      {
        (103614 return(103613 call chpl__idxToInt(103611 call ind[103495] 1)))
      }
      {
        unknown sum[103621](103619 call _cast(348863 call . this[105246] c"intIdxType") 0)
        unknown useInd[103626] ind[103495]
        unknown useOffset[103631] 0 int(64)[13]
        unknown useSizesPerDim[103635](348869 call . this[105246] c"sizesPerDim")
        if(103890 call _cond_test usePollyArrayIndex[92609])
        {
          if(103705 call _cond_test(103640 call ! wantShiftedIndex[103596]))
          {
            {
              unknown i[103670] 0
              unknown tmp[103671] "maybe param" "temp"
              (103683 'move' tmp[103671](103681 call chpl_compute_low_param_loop_bound 1(348876 call . this[105246] c"rank")))
              unknown tmp[103672] "maybe param" "temp"
              (103690 'move' tmp[103672](103688 call chpl_compute_high_param_loop_bound 1(348891 call . this[105246] c"rank")))
              unknown tmp[103673] "maybe param" "temp"
              (103693 'move' tmp[103673] 1)
              ParamForLoop
              { i[103670] tmp[103671] tmp[103672] tmp[103673]
                {
                  (103666 call =(103649 call useInd[103626] i[103670])(103664 call -(103656 call chpl__idxToInt(103654 call useInd[103626] i[103670]))(103663 call chpl__idxToInt(103661 call(348885 call . this[105246] c"off") i[103670]))))
                }
              }
              label _unused_continueLabel[103675]
              label _breakLabel[103674]
            }
          }
          (103718 return(103717 call polly_array_index useOffset[103631](103714 'expand_tuple' useSizesPerDim[103635])(103716 'expand_tuple' useInd[103626])))
        }
        {
          if(103869 call _cond_test(103725 call == storageOrder[92630] RMO[92613]))
          {
            {
              unknown i[103752] 0
              unknown tmp[103753] "maybe param" "temp"
              (103765 'move' tmp[103753](103763 call chpl_compute_low_param_loop_bound 1(103730 call -(348901 call . this[105246] c"rank") 1)))
              unknown tmp[103754] "maybe param" "temp"
              (103775 'move' tmp[103754](103773 call chpl_compute_high_param_loop_bound 1(103770 call -(348915 call . this[105246] c"rank") 1)))
              unknown tmp[103755] "maybe param" "temp"
              (103778 'move' tmp[103755] 1)
              ParamForLoop
              { i[103752] tmp[103753] tmp[103754] tmp[103755]
                {
                  (103748 call += sum[103621](103746 call *(103741 call chpl__idxToInt(103739 call ind[103495] i[103752]))(103745 call(348909 call . this[105246] c"blk") i[103752])))
                }
              }
              label _unused_continueLabel[103757]
              label _breakLabel[103756]
            }
            (103798 call += sum[103621](103797 call chpl__idxToInt(103795 call ind[103495](348922 call . this[105246] c"rank"))))
          }
          {
            {
              unknown i[103823] 0
              unknown tmp[103824] "maybe param" "temp"
              (103836 'move' tmp[103824](103834 call chpl_compute_low_param_loop_bound 2(348927 call . this[105246] c"rank")))
              unknown tmp[103825] "maybe param" "temp"
              (103843 'move' tmp[103825](103841 call chpl_compute_high_param_loop_bound 2(348941 call . this[105246] c"rank")))
              unknown tmp[103826] "maybe param" "temp"
              (103846 'move' tmp[103826] 1)
              ParamForLoop
              { i[103823] tmp[103824] tmp[103825] tmp[103826]
                {
                  (103819 call += sum[103621](103817 call *(103812 call chpl__idxToInt(103810 call ind[103495] i[103823]))(103816 call(348935 call . this[105246] c"blk") i[103823])))
                }
              }
              label _unused_continueLabel[103828]
              label _breakLabel[103827]
            }
            (103866 call += sum[103621](103865 call chpl__idxToInt(103863 call ind[103495] 1)))
          }
          if(103882 call _cond_test(103875 call ! wantShiftedIndex[103596]))
          {
            (103879 call -= sum[103621](348950 call . this[105246] c"factoredOffs"))
          }
          (103888 return sum[103621])
        }
      }
    }
  }
  function DefaultRectangularArr[105188](?).dsiAccess[103913](arg _mt[105252]:_MT[227], arg this[105250]:DefaultRectangularArr[105188](?), arg ind[103909] ... :
  (348956 call . this[105250] c"idxType")) ref : _unknown[43] "inline" "method" "primary method"
  {
    (103923 return(103922 call(348965 call . this[105250] c"dsiAccess") ind[103909]))
  }
  where {
    (103917 call ==(348961 call . this[105250] c"rank") 1)
  }
  function DefaultRectangularArr[105188](?).dsiAccess[103937](arg _mt[105256]:_MT[227], arg this[105254]:DefaultRectangularArr[105188](?), arg ind[103933] ... :
  (348971 call . this[105254] c"idxType")) : _unknown[43] "inline" "method" "primary method"
  {
    (103953 return(103952 call(348985 call . this[105254] c"dsiAccess") ind[103933]))
  }
  where {
    (103947 call &&(103941 call ==(348976 call . this[105254] c"rank") 1)(103946 call shouldReturnRvalueByValue(348981 call . this[105254] c"eltType")))
  }
  function DefaultRectangularArr[105188](?).dsiAccess[103967](arg _mt[105260]:_MT[227], arg this[105258]:DefaultRectangularArr[105188](?), arg ind[103963] ... :
  (348991 call . this[105258] c"idxType")) const ref : _unknown[43] "inline" "method" "primary method"
  {
    (103983 return(103982 call(349005 call . this[105258] c"dsiAccess") ind[103963]))
  }
  where {
    (103977 call &&(103971 call ==(348996 call . this[105258] c"rank") 1)(103976 call shouldReturnRvalueByConstRef(349001 call . this[105258] c"eltType")))
  }
  function DefaultRectangularArr[105188](?).dsiAccess[103998](arg _mt[105264]:_MT[227], arg this[105262]:DefaultRectangularArr[105188](?), arg ind[103995] :
  (103993 call *(349011 call . this[105262] c"rank")(349016 call . this[105262] c"idxType"))) ref : _unknown[43] "inline" "method" "primary method"
  {
    if(104043 call _cond_test 1)
    {
      if(104039 call _cond_test(104010 call !(104009 call(104004 call .(349022 call . this[105262] c"dom") c"dsiMember") ind[103995])))
      {
        (104036 call halt(104033 call + "array index out of bounds: "(104032 call _stringify_tuple ind[103995])))
      }
    }
    unknown dataInd[104053](104052 call(349028 call . this[105262] c"getDataIndex") ind[103995])
    (104060 return(104059 call(349033 call . this[105262] c"theData") dataInd[104053]))
  }
  function DefaultRectangularArr[105188](?).dsiAccess[104073](arg _mt[105268]:_MT[227], arg this[105266]:DefaultRectangularArr[105188](?), arg ind[104070] :
  (104068 call *(349039 call . this[105266] c"rank")(349044 call . this[105266] c"idxType"))) : _unknown[43] "inline" "method" "primary method"
  {
    if(104105 call _cond_test 1)
    {
      if(104101 call _cond_test(104087 call !(104086 call(104081 call .(349055 call . this[105266] c"dom") c"dsiMember") ind[104070])))
      {
        (104098 call halt(104095 call + "array index out of bounds: "(104094 call _stringify_tuple ind[104070])))
      }
    }
    unknown dataInd[104115](104114 call(349061 call . this[105266] c"getDataIndex") ind[104070])
    (104122 return(104121 call(349066 call . this[105266] c"theData") dataInd[104115]))
  }
  where {
    (104078 call shouldReturnRvalueByValue(349049 call . this[105266] c"eltType"))
  }
  function DefaultRectangularArr[105188](?).dsiAccess[104136](arg _mt[105272]:_MT[227], arg this[105270]:DefaultRectangularArr[105188](?), arg ind[104133] :
  (104131 call *(349072 call . this[105270] c"rank")(349077 call . this[105270] c"idxType"))) const ref : _unknown[43] "inline" "method" "primary method"
  {
    if(104168 call _cond_test 1)
    {
      if(104164 call _cond_test(104150 call !(104149 call(104144 call .(349088 call . this[105270] c"dom") c"dsiMember") ind[104133])))
      {
        (104161 call halt(104158 call + "array index out of bounds: "(104157 call _stringify_tuple ind[104133])))
      }
    }
    unknown dataInd[104178](104177 call(349094 call . this[105270] c"getDataIndex") ind[104133])
    (104185 return(104184 call(349099 call . this[105270] c"theData") dataInd[104178]))
  }
  where {
    (104141 call shouldReturnRvalueByConstRef(349082 call . this[105270] c"eltType"))
  }
  function DefaultRectangularArr[105188](?).dsiLocalAccess[104194](arg _mt[105276]:_MT[227], arg this[105274]:DefaultRectangularArr[105188](?), arg i[104192]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    (104200 return(104199 call(349104 call . this[105274] c"dsiAccess") i[104192]))
  }
  function DefaultRectangularArr[105188](?).dsiLocalAccess[104209](arg _mt[105280]:_MT[227], arg this[105278]:DefaultRectangularArr[105188](?), arg i[104207]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    (104219 return(104218 call(349114 call . this[105278] c"dsiAccess") i[104207]))
  }
  where {
    (104214 call shouldReturnRvalueByValue(349110 call . this[105278] c"eltType"))
  }
  function DefaultRectangularArr[105188](?).dsiLocalAccess[104229](arg _mt[105284]:_MT[227], arg this[105282]:DefaultRectangularArr[105188](?), arg i[104227]:_any[170](?)) const ref : _unknown[43] "inline" "method" "primary method"
  {
    (104239 return(104238 call(349124 call . this[105282] c"dsiAccess") i[104227]))
  }
  where {
    (104234 call shouldReturnRvalueByConstRef(349120 call . this[105282] c"eltType"))
  }
  function DefaultRectangularArr[105188](?).adjustBlkOffStrForNewDomain[104252](arg _mt[105288]:_MT[227], arg this[105286]:DefaultRectangularArr[105188](?), arg d[104249] :
  unmanaged DefaultRectangularDom[389799](?), arg alias[104256] :
  unmanaged DefaultRectangularArr[389855](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown i[104437] 0
      unknown tmp[104438] "maybe param" "temp"
      (104450 'move' tmp[104438](104448 call chpl_compute_low_param_loop_bound 1(349132 call . this[105286] c"rank")))
      unknown tmp[104439] "maybe param" "temp"
      (104457 'move' tmp[104439](104455 call chpl_compute_high_param_loop_bound 1(349221 call . this[105286] c"rank")))
      unknown tmp[104440] "maybe param" "temp"
      (104460 'move' tmp[104440] 1)
      ParamForLoop
      { i[104437] tmp[104438] tmp[104439] tmp[104440]
        {
          unknown s[104264](349137 call . this[105286] c"idxType")
          if(104376 call _cond_test(104270 call ==(349142 call . this[105286] c"idxSignedType")(349147 call . this[105286] c"idxType")))
          {
            (104295 call = s[104264](104293 call _cast(104290 call . d[104249] c"idxType")(104287 call /(104280 call .(104279 call(104274 call .(349153 call . this[105286] c"dom") c"dsiDim") i[104437]) c"stride")(104286 call(349159 call . this[105286] c"str") i[104437]))))
          }
          {
            (104347 call assert(104344 call ||(104320 call &&(104311 call <(104307 call .(104306 call(104301 call .(349166 call . this[105286] c"dom") c"dsiDim") i[104437]) c"stride") 0)(104318 call <(104316 call(349172 call . this[105286] c"str") i[104437]) 0))(104342 call &&(104333 call >(104329 call .(104328 call(104323 call .(349178 call . this[105286] c"dom") c"dsiDim") i[104437]) c"stride") 0)(104340 call >(104338 call(349184 call . this[105286] c"str") i[104437]) 0))))
            (104373 call = s[104264](104371 call _cast(104368 call . d[104249] c"idxType")(104365 call /(104358 call .(104357 call(104352 call .(349191 call . this[105286] c"dom") c"dsiDim") i[104437]) c"stride")(104364 call(349197 call . this[105286] c"str") i[104437]))))
          }
          (104397 call =(104386 call(104381 call . alias[104256] c"off") i[104437])(104394 call .(104393 call(104388 call . d[104249] c"dsiDim") i[104437]) c"low"))
          (104414 call =(104406 call(104401 call . alias[104256] c"blk") i[104437])(104412 call *(104410 call(349210 call . this[105286] c"blk") i[104437]) s[104264]))
          (104434 call =(104423 call(104418 call . alias[104256] c"str") i[104437])(104431 call .(104430 call(104425 call . d[104249] c"dsiDim") i[104437]) c"stride"))
        }
      }
      label _unused_continueLabel[104442]
      label _breakLabel[104441]
    }
  }
  function DefaultRectangularArr[105188](?).adjustBlkOffStrForNewDomain[104481](arg _mt[105292]:_MT[227], arg this[105290]:DefaultRectangularArr[105188](?), arg d[104478] :
  unmanaged DefaultRectangularDom[389799](?), arg alias[104485] :
  unmanaged DefaultRectangularArr[389855](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown i[104563] 0
      unknown tmp[104564] "maybe param" "temp"
      (104576 'move' tmp[104564](104574 call chpl_compute_low_param_loop_bound 1(349234 call . this[105290] c"rank")))
      unknown tmp[104565] "maybe param" "temp"
      (104583 'move' tmp[104565](104581 call chpl_compute_high_param_loop_bound 1(349255 call . this[105290] c"rank")))
      unknown tmp[104566] "maybe param" "temp"
      (104586 'move' tmp[104566] 1)
      ParamForLoop
      { i[104563] tmp[104564] tmp[104565] tmp[104566]
        {
          (104525 call =(104514 call(104509 call . alias[104485] c"off") i[104563])(104522 call .(104521 call(104516 call . d[104478] c"dsiDim") i[104563]) c"low"))
          (104540 call =(104535 call(104530 call . alias[104485] c"blk") i[104563])(104539 call(349245 call . this[105290] c"blk") i[104563]))
          (104560 call =(104549 call(104544 call . alias[104485] c"str") i[104563])(104557 call .(104556 call(104551 call . d[104478] c"dsiDim") i[104563]) c"stride"))
        }
      }
      label _unused_continueLabel[104568]
      label _breakLabel[104567]
    }
  }
  where {
    (104502 call &&(104493 call ==(104489 call .(349228 call . this[105290] c"dom") c"stridable") 0)(104500 call ==(104496 call . this[105290] c"stridable") 0))
  }
  function DefaultRectangularArr[105188](?).dsiReallocate[104615](arg _mt[105296]:_MT[227], arg this[105294]:DefaultRectangularArr[105188](?), arg allocBound[104612] :
  (104611 call range[66183](?)(349261 call . this[105294] c"idxType") bounded[66079](349267 call . this[105294] c"stridable")), arg arrayBound[104626] :
  (104625 call range[66183](?)(349273 call . this[105294] c"idxType") bounded[66079](349279 call . this[105294] c"stridable"))) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      const tmp[104801] "const" "temp"
      (104802 'move' tmp[104801](104799 'deref'(104798 '_wide_get_locale' this[105294])))
      {
        const allocD[104638] "const"(104636 call chpl__buildDomainExpr allocBound[104612])
        unknown copy[104666](104665 'new'(104664 'to unmanaged class from unknown'(104663 call anymanaged DefaultRectangularArr[347545](?)(eltType =(349292 call . this[105294] c"eltType"))(rank =(349297 call . this[105294] c"rank"))(idxType =(349302 call . this[105294] c"idxType"))(stridable =(104654 call .(104651 call . allocD[104638] c"_value") c"stridable"))(dom =(104659 call . allocD[104638] c"_value")))))
        Forall {
          induction variables:
            
            unknown i[104699] "index var" "insert auto destroy"
          iterated expressions:
            (104681 call arrayBound[104626](104679 call(104674 call .(349310 call . this[105294] c"dom") c"ranges") 1))
          shadow variables:
          forall body
          {
            (104695 call =(104690 call(104685 call . copy[104666] c"dsiAccess") i[104699])(104694 call(349316 call . this[105294] c"dsiAccess") i[104699]))
          }
        }
        (104707 call =(349322 call . this[105294] c"off")(104704 call . copy[104666] c"off"))
        (104715 call =(349328 call . this[105294] c"blk")(104712 call . copy[104666] c"blk"))
        (104723 call =(349334 call . this[105294] c"str")(104720 call . copy[104666] c"str"))
        (104731 call =(349340 call . this[105294] c"factoredOffs")(104728 call . copy[104666] c"factoredOffs"))
        (104736 call(349345 call . this[105294] c"dsiDestroyArr"))
        (104743 call =(349350 call . this[105294] c"data")(104740 call . copy[104666] c"data"))
        if(104779 call _cond_test(104756 call && earlyShiftData[92605](104754 call !(104751 call .(104748 call . allocD[104638] c"_value") c"stridable"))))
        {
          if(104774 call _cond_test(104763 call >(104759 call . allocD[104638] c"numIndices") 0))
          {
            (104770 call =(349359 call . this[105294] c"shiftedData")(104767 call . copy[104666] c"shiftedData"))
          }
        }
        (104790 call =(349365 call . this[105294] c"dataAllocRange")(104787 call . copy[104666] c"dataAllocRange"))
        (104795 call chpl__delete copy[104666])
      }
    }
  }
  where {
    (104631 call ==(349284 call . this[105294] c"rank") 1)
  }
  function DefaultRectangularArr[105188](?).dsiReallocate[104827](arg _mt[105300]:_MT[227], arg this[105298]:DefaultRectangularArr[105188](?), arg bounds[104824] :
  (104822 call *(349372 call . this[105298] c"rank")(104821 call range[66183](?)(349378 call . this[105298] c"idxType") bounded[66079](349384 call . this[105298] c"stridable")))) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      const tmp[104990] "const" "temp"
      (104991 'move' tmp[104990](104988 'deref'(104987 '_wide_get_locale' this[105298])))
      {
        const allocD[104835] "const"(104833 call chpl__buildDomainExpr(104831 'expand_tuple' bounds[104824]))
        unknown copy[104863](104862 'new'(104861 'to unmanaged class from unknown'(104860 call anymanaged DefaultRectangularArr[347545](?)(eltType =(349392 call . this[105298] c"eltType"))(rank =(349397 call . this[105298] c"rank"))(idxType =(349402 call . this[105298] c"idxType"))(stridable =(104851 call .(104848 call . allocD[104835] c"_value") c"stridable"))(dom =(104856 call . allocD[104835] c"_value")))))
        Forall {
          induction variables:
            
            unknown i[104890] "index var" "insert auto destroy"
          iterated expressions:
            (104874 call allocD[104835](104872 'expand_tuple'(104869 call .(349410 call . this[105298] c"dom") c"ranges")))
          shadow variables:
          forall body
          {
            (104886 call =(104881 call(104876 call . copy[104863] c"dsiAccess") i[104890])(104885 call(349416 call . this[105298] c"dsiAccess") i[104890]))
          }
        }
        (104898 call =(349422 call . this[105298] c"off")(104895 call . copy[104863] c"off"))
        (104906 call =(349428 call . this[105298] c"blk")(104903 call . copy[104863] c"blk"))
        (104914 call =(349434 call . this[105298] c"str")(104911 call . copy[104863] c"str"))
        (104922 call =(349440 call . this[105298] c"factoredOffs")(104919 call . copy[104863] c"factoredOffs"))
        (104927 call(349445 call . this[105298] c"dsiDestroyArr"))
        (104934 call =(349450 call . this[105298] c"data")(104931 call . copy[104863] c"data"))
        if(104970 call _cond_test(104947 call && earlyShiftData[92605](104945 call !(104942 call .(104939 call . allocD[104835] c"_value") c"stridable"))))
        {
          if(104965 call _cond_test(104954 call >(104950 call . allocD[104835] c"numIndices") 0))
          {
            (104961 call =(349459 call . this[105298] c"shiftedData")(104958 call . copy[104863] c"shiftedData"))
          }
        }
        (104979 call =(349465 call . this[105298] c"dataAllocRange")(104976 call . copy[104863] c"dataAllocRange"))
        (104984 call chpl__delete copy[104863])
      }
    }
  }
  function DefaultRectangularArr[105188](?).dsiPostReallocate[105000](arg _mt[105304]:_MT[227], arg this[105302]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
  }
  function DefaultRectangularArr[105188](?).dsiLocalSlice[105009](arg _mt[105308]:_MT[227], arg this[105306]:DefaultRectangularArr[105188](?), arg ranges[105007]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (105014 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  }
  function DefaultRectangularArr[105188](?).dsiGetRAD[105021](arg _mt[105312]:_MT[227], arg this[105310]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method"
  {
    unknown rad[105030](105029 call _remoteAccessData[100096](?)(349473 call . this[105310] c"eltType")(349478 call . this[105310] c"rank")(349483 call . this[105310] c"idxType")(349488 call . this[105310] c"stridable"))
    (105039 call =(105035 call . rad[105030] c"off")(349494 call . this[105310] c"off"))
    (105047 call =(105043 call . rad[105030] c"blk")(349500 call . this[105310] c"blk"))
    (105055 call =(105051 call . rad[105030] c"str")(349506 call . this[105310] c"str"))
    (105063 call =(105059 call . rad[105030] c"origin") 0)
    (105071 call =(105067 call . rad[105030] c"factoredOffs")(349513 call . this[105310] c"factoredOffs"))
    (105079 call =(105075 call . rad[105030] c"data")(349519 call . this[105310] c"data"))
    (105087 call =(105083 call . rad[105030] c"shiftedData")(349525 call . this[105310] c"shiftedData"))
    (105091 return rad[105030])
  }
  function DefaultRectangularArr[105188](?).dsiTargetLocales[105097](arg _mt[105316]:_MT[227], arg this[105314]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method"
  {
    (105109 return(105107 call chpl__buildArrayExpr(105104 call chpl_localeID_to_locale(105103 '_wide_get_locale'(105100 call . this[105314] c"data")))))
  }
  function DefaultRectangularArr[105188](?).dsiHasSingleLocalSubdomain[105116](arg _mt[105320]:_MT[227], arg this[105318]:DefaultRectangularArr[105188](?)) param : _unknown[43] "method" "primary method"
  {
    (105119 return 1)
  }
  function DefaultRectangularArr[105188](?).dsiLocalSubdomain[105130](arg _mt[105324]:_MT[227], arg this[105322]:DefaultRectangularArr[105188](?), arg loc[105127] :
  locale[26]) : _unknown[43] "method" "primary method"
  {
    if(105163 call _cond_test(105140 call ==(105137 call chpl_localeID_to_locale(105136 '_wide_get_locale'(105133 call . this[105322] c"data"))) loc[105127]))
    {
      (105146 return(105145 call _getDomain(349534 call . this[105322] c"dom")))
    }
    {
      unknown a[105156](105154 call chpl__buildDomainRuntimeType defaultDist[93214](349539 call . this[105322] c"rank")(349544 call . this[105322] c"idxType")(349549 call . this[105322] c"stridable"))
      (105161 return a[105156])
    }
  }
  function DefaultRectangularArr[105188](?).dsiLocalSubdomains[105176](arg _mt[105328]:_MT[227], arg this[105326]:DefaultRectangularArr[105188](?), arg loc[105173] :
  locale[26]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    (105182 yield(105181 call(349555 call . this[105326] c"dsiLocalSubdomain") loc[105173]))
  }
  type DefaultRectangularArr[105188](?) val super[331025]:BaseRectangularArr[146229](?) "super class" unknown idxSignedType[101917] "type variable"(101916 call chpl__signedType(101914 call chpl__idxTypeToIntIdxType idxType[146084])) unknown dom[101930](101929 'to unmanaged class from unknown'(101928 call anymanaged DefaultRectangularDom[339767](?)(rank = rank[146081])(idxType = idxType[146084])(stridable = stridable[146088]))) unknown off[101937](101935 call * rank[146081] idxType[146084]) unknown blk[101947](101945 call * rank[146081](101944 call chpl__idxTypeToIntIdxType idxType[146084])) unknown sizesPerDim[101957](101955 call * rank[146081](101954 call chpl__idxTypeToIntIdxType idxType[146084])) unknown str[101964](101962 call * rank[146081] idxSignedType[101917]) unknown factoredOffs[101971](101970 call chpl__idxTypeToIntIdxType idxType[146084]) unknown data[101979] "alias scope from this" "local field" nil[38](101977 call _ddata[11791](?) eltType[146196]) unknown shiftedData[101986] "alias scope from this" "local field"(101985 call _ddata[11791](?) eltType[146196]) unknown noinit_data[101991] 0 bool[10] unknown externArr[101996] 0 bool[10] unknown _borrowed[102001] 1 bool[10] unknown externFreeFunc[102005] c_void_ptr[141] unknown dataAllocRange[102012](102011 call range[66183](?) idxType[146084])
  type unmanaged DefaultRectangularArr[389855](?)
  type anymanaged anynil DefaultRectangularArr[389608](?)
  type anymanaged DefaultRectangularArr[347545](?)
  function chpl__serialViewIter[105335](arg arr[105333]:_any[170](?), arg viewDom[105337]:_any[170](?)) ref : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown useCache[105357] "param"(105355 call &&(105346 call chpl__isArrayView arr[105333])(105354 call(105350 call . arr[105333] c"shouldUseIndexCache")))
    unknown info[105389](105386 IfExpr  useCache[105357] then
    { scopeless
      (105365 call . arr[105333] c"indexCache")
    } else
    { scopeless(105383 IfExpr (105375 call(105371 call . arr[105333] c"isSliceArrayView")) then
      { scopeless
        (105379 call . arr[105333] c"arr")
      } else
      { scopeless
        arr[105333]
      } )
    } )
    if(105808 call _cond_test(105397 call ==(105393 call . arr[105333] c"rank") 1))
    {
      if(105696 call _cond_test(105403 call !(105400 call . viewDom[105337] c"stridable")))
      {
        const first[105415] "const"(105414 call(105406 call . info[105389] c"getDataIndex")(105410 call . viewDom[105337] c"dsiLow"))
        const second[105441] "const"(105440 call(105420 call . info[105389] c"getDataIndex")(105438 call(105424 call . viewDom[105337] c"chpl_intToIdx")(105435 call +(105433 call chpl__idxToInt(105429 call . viewDom[105337] c"dsiLow")) 1)))
        const step[105448] "const"(105446 call - second[105441] first[105415])
        const last[105464] "const"(105462 call + first[105415](105460 call *(105457 call -(105453 call . viewDom[105337] c"dsiNumIndices") 1) step[105448]))
        {
          unknown _indexOfInterest[105484] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[105485] "expr temp" "temp"
          (105494 'move' _iterator[105485](105492 call _getIterator(105473 call chpl_direct_pos_stride_range_iter first[105415] last[105464] step[105448])))
          Defer
          {
            {
              (105511 call _freeIterator _iterator[105485])
            }
          }
          { scopeless type
            (105500 'move' _indexOfInterest[105484](105497 call iteratorIndex _iterator[105485]))
          }
          ForLoop
          {
            unknown i[105504] "index var" "insert auto destroy"
            (105506 'move' i[105504] _indexOfInterest[105484])
            {
              (105481 yield(105480 call(105475 call . info[105389] c"theData") i[105504]))
            }
            label _continueLabel[105489]
            _indexOfInterest[105484]
            _iterator[105485]
          }
          label _breakLabel[105490]
        }
      }
      {
        const viewDomDim[105525] "const"(105524 call(105519 call . viewDom[105337] c"dsiDim") 1)
        const stride[105538] "const"(105536 call _cast(105533 call . viewDom[105337] c"intIdxType")(105529 call . viewDomDim[105525] c"stride"))
        const start[105545] "const"(105542 call . viewDomDim[105525] c"first")
        const second[105567] "const"(105566 call(105549 call . info[105389] c"getDataIndex")(105564 call(105553 call . viewDom[105337] c"chpl_intToIdx")(105561 call +(105557 call . viewDomDim[105525] c"firstAsInt") stride[105538])))
        unknown first[105578](105577 call(105572 call . info[105389] c"getDataIndex") start[105545])
        const step[105594] "const"(105592 call _cast(105591 call chpl__signedType(105587 call . viewDom[105337] c"intIdxType"))(105583 call - second[105567] first[105578]))
        unknown last[105616](105614 call + first[105578](105612 call *(105603 call -(105599 call . viewDomDim[105525] c"length") 1)(105610 call _cast(105607 call . viewDom[105337] c"intIdxType") step[105594])))
        if(105628 call _cond_test(105621 call < step[105594] 0))
        {
          (105625 call <=> last[105616] first[105578])
        }
        unknown data[105637](105634 call . info[105389] c"theData")
        {
          unknown _indexOfInterest[105654] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[105655] "expr temp" "temp"
          (105664 'move' _iterator[105655](105662 call _getIterator(105673 call chpl_direct_range_iter first[105578] last[105616] step[105594])))
          Defer
          {
            {
              (105689 call _freeIterator _iterator[105655])
            }
          }
          { scopeless type
            (105678 'move' _indexOfInterest[105654](105675 call iteratorIndex _iterator[105655]))
          }
          ForLoop
          {
            unknown i[105682] "index var" "insert auto destroy"
            (105684 'move' i[105682] _indexOfInterest[105654])
            (105652 yield(105651 call data[105637] i[105682]))
            label _continueLabel[105659]
            _indexOfInterest[105654]
            _iterator[105655]
          }
          label _breakLabel[105660]
        }
      }
    }
    {
      if(105804 call _cond_test useCache[105357])
      {
        {
          unknown _indexOfInterest[105726] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[105727] "expr temp" "temp"
          (105736 'move' _iterator[105727](105734 call _getIterator viewDom[105337]))
          Defer
          {
            {
              (105752 call _freeIterator _iterator[105727])
            }
          }
          { scopeless type
            (105741 'move' _indexOfInterest[105726](105738 call iteratorIndex _iterator[105727]))
          }
          ForLoop
          {
            unknown i[105745] "index var" "insert auto destroy"
            (105747 'move' i[105745] _indexOfInterest[105726])
            {
              const dataIdx[105711] "const"(105710 call(105705 call . info[105389] c"getDataIndex") i[105745])
              (105724 yield(105723 call(105718 call . info[105389] c"getDataElem") dataIdx[105711]))
            }
            label _continueLabel[105731]
            _indexOfInterest[105726]
            _iterator[105727]
          }
          label _breakLabel[105732]
        }
      }
      {
        {
          unknown _indexOfInterest[105769] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[105770] "expr temp" "temp"
          (105779 'move' _iterator[105770](105777 call _getIterator(105765 call chpl__serialViewIterHelper arr[105333] viewDom[105337])))
          Defer
          {
            {
              (105796 call _freeIterator _iterator[105770])
            }
          }
          { scopeless type
            (105785 'move' _indexOfInterest[105769](105782 call iteratorIndex _iterator[105770]))
          }
          ForLoop
          {
            unknown elem[105789] "index var" "insert auto destroy"
            (105791 'move' elem[105789] _indexOfInterest[105769])
            (105767 yield elem[105789])
            label _continueLabel[105774]
            _indexOfInterest[105769]
            _iterator[105770]
          }
          label _breakLabel[105775]
        }
      }
    }
  }
  where {
    (105342 call chpl__isDROrDRView arr[105333])
  }
  function chpl__serialViewIter[105820](arg arr[105818]:_any[170](?), arg viewDom[105822]:_any[170](?)) ref : _unknown[43] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[105833] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[105834] "expr temp" "temp"
      (105843 'move' _iterator[105834](105841 call _getIterator(105829 call chpl__serialViewIterHelper arr[105818] viewDom[105822])))
      Defer
      {
        {
          (105860 call _freeIterator _iterator[105834])
        }
      }
      { scopeless type
        (105849 'move' _indexOfInterest[105833](105846 call iteratorIndex _iterator[105834]))
      }
      ForLoop
      {
        unknown elem[105853] "index var" "insert auto destroy"
        (105855 'move' elem[105853] _indexOfInterest[105833])
        (105831 yield elem[105853])
        label _continueLabel[105838]
        _indexOfInterest[105833]
        _iterator[105834]
      }
      label _breakLabel[105839]
    }
  }
  function chpl__serialViewIterHelper[105874](arg arr[105872]:_any[170](?), arg viewDom[105876]:_any[170](?)) ref : _unknown[43] "iterator fn" "no return value for void"
  {
    {
      unknown _indexOfInterest[105961] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[105962] "expr temp" "temp"
      (105971 'move' _iterator[105962](105969 call _getIterator viewDom[105876]))
      Defer
      {
        {
          (105987 call _freeIterator _iterator[105962])
        }
      }
      { scopeless type
        (105976 'move' _indexOfInterest[105961](105973 call iteratorIndex _iterator[105962]))
      }
      ForLoop
      {
        unknown i[105980] "index var" "insert auto destroy"
        (105982 'move' i[105980] _indexOfInterest[105961])
        {
          const dataIdx[105933] "const"(105930 IfExpr (105887 call(105883 call . arr[105872] c"isReindexArrayView")) then
          { scopeless
            (105901 call chpl_reindexConvertIdx i[105980](105892 call . arr[105872] c"dom")(105898 call . arr[105872] c"downdom"))
          } else
          { scopeless(105927 IfExpr (105909 call(105905 call . arr[105872] c"isRankChangeArrayView")) then
            { scopeless
              (105925 call chpl_rankChangeConvertIdx i[105980](105916 call . arr[105872] c"collapsedDim")(105922 call . arr[105872] c"idx"))
            } else
            { scopeless
              i[105980]
            } )
          } )
          const info[105949] "const"(105946 IfExpr (105940 call chpl__isArrayView arr[105872]) then
          { scopeless
            (105942 call . arr[105872] c"arr")
          } else
          { scopeless
            arr[105872]
          } )
          (105959 yield(105958 call(105953 call . info[105949] c"dsiAccess") dataIdx[105933]))
        }
        label _continueLabel[105966]
        _indexOfInterest[105961]
        _iterator[105962]
      }
      label _breakLabel[105967]
    }
  }
  function DefaultRectangularDom[99677](?).dsiSerialReadWrite[106002](arg _mt[106007]:_MT[227], arg this[106004]:DefaultRectangularDom[99677](?) :
  DefaultRectangularDom[99677](?), arg f[106000]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    (106036 call <~>(106030 call <~> f[106000](106029 'new'(106028 call ioLiteral[226016] "{")))(106035 call(349641 call . this[106004] c"ranges") 1))
    {
      unknown _indexOfInterest[106075] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[106076] "expr temp" "temp"
      (106085 'move' _iterator[106076](106083 call _getIterator(106090 call chpl_direct_range_iter 2(349654 call . this[106004] c"rank") 1)))
      Defer
      {
        {
          (106106 call _freeIterator _iterator[106076])
        }
      }
      { scopeless type
        (106095 'move' _indexOfInterest[106075](106092 call iteratorIndex _iterator[106076]))
      }
      ForLoop
      {
        unknown i[106099] "index var" "insert auto destroy"
        (106101 'move' i[106099] _indexOfInterest[106075])
        (106072 call <~>(106066 call <~> f[106000](106065 'new'(106064 call ioLiteral[226016] ", ")))(106071 call(349648 call . this[106004] c"ranges") i[106099]))
        label _continueLabel[106080]
        _indexOfInterest[106075]
        _iterator[106076]
      }
      label _breakLabel[106081]
    }
    (106134 call <~> f[106000](106133 'new'(106132 call ioLiteral[226016] "}")))
  }
  function DefaultRectangularDom[99677](?).dsiSerialWrite[106144](arg _mt[106149]:_MT[227], arg this[106146]:DefaultRectangularDom[99677](?) :
  DefaultRectangularDom[99677](?), arg f[106142]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    (106159 call(106154 call . this[106146] c"dsiSerialReadWrite") f[106142])
  }
  function DefaultRectangularDom[99677](?).dsiSerialRead[106169](arg _mt[106174]:_MT[227], arg this[106171]:DefaultRectangularDom[99677](?) :
  DefaultRectangularDom[99677](?), arg f[106167]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    (106182 call(106177 call . this[106171] c"dsiSerialReadWrite") f[106167])
  }
  function DefaultRectangularArr[105188](?).dsiSerialReadWrite[106192](arg _mt[106197]:_MT[227], arg this[106194]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg f[106190]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    (106203 call chpl_serialReadWriteRectangular f[106190] this[106194])
  }
  function chpl_serialReadWriteRectangular[106212](arg f[106210]:_any[170](?), arg arr[106214]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (106224 call chpl_serialReadWriteRectangular f[106210] arr[106214](106221 call . arr[106214] c"dom"))
  }
  function chpl_serialReadWriteRectangular[106233](arg f[106231]:_any[170](?), arg arr[106235]:_any[170](?), arg dom[106237]:_any[170](?)) : _unknown[43] "last resort" "no return value for void"
  {
    (106244 call chpl_serialReadWriteRectangularHelper f[106231] arr[106235] dom[106237])
  }
  function chpl_serialReadWriteRectangularHelper[106253](arg f[106251]:_any[170](?), arg arr[106255]:_any[170](?), arg dom[106257]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown rank[106263] "param"(106260 call . arr[106255] c"rank")
    unknown idxType[106271] "type variable"(106268 call . arr[106255] c"idxType")
    unknown idxSignedType[106281] "type variable"(106280 call chpl__signedType(106278 call chpl__idxTypeToIntIdxType idxType[106271]))
    const isNative[106296] "const"(106294 call _cast bool[10](106292 call(106287 call . f[106251] c"styleElement") QIO_STYLE_ELEMENT_IS_NATIVE_BYTE_ORDER[19382]))
    function writeSpaces[106305](arg dim[106302] :
    int(64)[13]) : _unknown[43] "no return value for void"
    {
      {
        unknown _indexOfInterest[106322] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[106323] "expr temp" "temp"
        (106332 'move' _iterator[106323](106330 call _getIterator(106337 call chpl_direct_range_iter 1 dim[106302] 1)))
        Defer
        {
          {
            (106353 call _freeIterator _iterator[106323])
          }
        }
        { scopeless type
          (106342 'move' _indexOfInterest[106322](106339 call iteratorIndex _iterator[106323]))
        }
        ForLoop
        {
          unknown i[106346] "index var" "insert auto destroy"
          (106348 'move' i[106346] _indexOfInterest[106322])
          {
            (106318 call <~> f[106251](106317 'new'(106316 call ioLiteral[226016] " ")))
          }
          label _continueLabel[106327]
          _indexOfInterest[106322]
          _iterator[106323]
        }
        label _breakLabel[106328]
      }
    }
    function recursiveArrayWriter[106372](in arg idx[106369] :
    (106367 call * rank[106263] idxType[106271]), arg dim[106375] =
    1, in arg last[106379] =
    0) : _unknown[43] "no return value for void"
    {
      unknown binary[106390](106389 call(106385 call . f[106251] c"binary"))
      unknown arrayStyle[106401](106400 call(106395 call . f[106251] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19366])
      unknown isspace[106413](106411 call &&(106406 call == arrayStyle[106401] QIO_ARRAY_FORMAT_SPACE[19390])(106409 call ! binary[106390]))
      unknown isjson[106425](106423 call &&(106418 call == arrayStyle[106401] QIO_ARRAY_FORMAT_JSON[19398])(106421 call ! binary[106390]))
      unknown ischpl[106437](106435 call &&(106430 call == arrayStyle[106401] QIO_ARRAY_FORMAT_CHPL[19394])(106433 call ! binary[106390]))
      unknown strType[106441] "type variable" idxSignedType[106281]
      unknown makeStridePositive[106470](106467 IfExpr (106455 call >(106451 call .(106450 call(106445 call . dom[106257] c"dsiDim") dim[106375]) c"stride") 0) then
      { scopeless
        (106459 call _cast strType[106441] 1)
      } else
      { scopeless
        (106465 call _cast strType[106441](106462 call - 1))
      } )
      if(106541 call _cond_test(106475 call || isjson[106425] ischpl[106437]))
      {
        if(106535 call _cond_test(106479 call != dim[106375] rank[106263]))
        {
          (106502 call <~> f[106251](106501 'new'(106500 call ioLiteral[226016] "[\n")))
          (106509 call writeSpaces dim[106375])
        }
        {
          (106532 call <~> f[106251](106531 'new'(106530 call ioLiteral[226016] "[")))
        }
      }
      if(106855 call _cond_test(106547 call == dim[106375] rank[106263]))
      {
        unknown first[106550] 1
        if(106579 call _cond_test(106561 call && debugDefaultDist[92581](106558 call . f[106251] c"writing")))
        {
          (106577 call(106566 call . f[106251] c"writeln")(106575 call(106570 call . dom[106257] c"dsiDim") dim[106375]))
        }
        {
          unknown _indexOfInterest[106661] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[106662] "expr temp" "temp"
          (106671 'move' _iterator[106662](106669 call _getIterator(106593 call chpl_by(106591 call(106586 call . dom[106257] c"dsiDim") dim[106375]) makeStridePositive[106470])))
          Defer
          {
            {
              (106694 call _freeIterator _iterator[106662])
            }
          }
          { scopeless type
            (106683 'move' _indexOfInterest[106661](106680 call iteratorIndex _iterator[106662]))
          }
          ForLoop
          {
            unknown j[106687] "index var" "insert auto destroy"
            (106689 'move' j[106687] _indexOfInterest[106661])
            {
              if(106635 call _cond_test first[106550])
              {
                (106598 call = first[106550] 0)
              }
              {
                if(106629 call _cond_test isspace[106413])
                {
                  (106608 call <~> f[106251](106607 'new'(106606 call ioLiteral[226016] " ")))
                }
                {
                  if(106624 call _cond_test(106613 call || isjson[106425] ischpl[106437]))
                  {
                    (106621 call <~> f[106251](106620 'new'(106619 call ioLiteral[226016] ", ")))
                  }
                }
              }
              (106647 call =(106645 call idx[106369] dim[106375]) j[106687])
              (106658 call <~> f[106251](106657 call(106652 call . arr[106255] c"dsiAccess") idx[106369]))
            }
            label _continueLabel[106666]
            _indexOfInterest[106661]
            _iterator[106662]
          }
          label _breakLabel[106667]
        }
      }
      {
        {
          unknown _indexOfInterest[106814] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[106815] "expr temp" "temp"
          (106824 'move' _iterator[106815](106822 call _getIterator(106710 call chpl_by(106708 call(106703 call . dom[106257] c"dsiDim") dim[106375]) makeStridePositive[106470])))
          Defer
          {
            {
              (106847 call _freeIterator _iterator[106815])
            }
          }
          { scopeless type
            (106836 'move' _indexOfInterest[106814](106833 call iteratorIndex _iterator[106815]))
          }
          ForLoop
          {
            unknown j[106840] "index var" "insert auto destroy"
            (106842 'move' j[106840] _indexOfInterest[106814])
            {
              unknown lastIdx[106722](106719 call .(106718 call(106713 call . dom[106257] c"dsiDim") dim[106375]) c"last")
              (106731 call =(106729 call idx[106369] dim[106375]) j[106840])
              (106765 call recursiveArrayWriter idx[106369](dim =(106739 call + dim[106375] 1))(last =(106762 call &&(106747 call || last[106379](106745 call == dim[106375] 1))(106760 call == j[106840](106757 call .(106756 call(106751 call . dom[106257] c"dsiDim") dim[106375]) c"alignedHigh")))))
              if(106810 call _cond_test(106769 call || isjson[106425] ischpl[106437]))
              {
                if(106805 call _cond_test(106773 call != j[106840] lastIdx[106722]))
                {
                  (106796 call <~> f[106251](106795 'new'(106794 call ioLiteral[226016] ",\n")))
                  (106803 call writeSpaces dim[106375])
                }
              }
            }
            label _continueLabel[106819]
            _indexOfInterest[106814]
            _iterator[106815]
          }
          label _breakLabel[106820]
        }
      }
      if(106953 call _cond_test isspace[106413])
      {
        if(106879 call _cond_test(106867 call &&(106861 call ! last[106379])(106865 call != dim[106375] 1)))
        {
          (106875 call <~> f[106251](106874 'new'(106873 call ioLiteral[226016] "\n")))
        }
      }
      {
        if(106949 call _cond_test(106886 call || isjson[106425] ischpl[106437]))
        {
          if(106943 call _cond_test(106890 call != dim[106375] rank[106263]))
          {
            (106898 call <~> f[106251](106897 'new'(106896 call ioLiteral[226016] "\n")))
            (106908 call writeSpaces(106905 call - dim[106375] 1))
            (106931 call <~> f[106251](106930 'new'(106929 call ioLiteral[226016] "]")))
          }
          {
            (106940 call <~> f[106251](106939 'new'(106938 call ioLiteral[226016] "]")))
          }
        }
      }
    }
    if(107754 call _cond_test(107012 call &&(106998 call &&(106983 call &&(106977 call &&(106967 call && 0(106965 call !(106962 call . f[106251] c"writing")))(106975 call !(106974 call(106970 call . f[106251] c"binary"))))(106981 call == rank[106263] 1))(106996 call ==(106992 call .(106991 call(106986 call . dom[106257] c"dsiDim") 1) c"stride") 1))(107010 call ==(107006 call .(107003 call . dom[106257] c"_arrs") c"length") 1)))
    {
      unknown binary[107020](107019 call(107015 call . f[106251] c"binary"))
      unknown arrayStyle[107031](107030 call(107025 call . f[106251] c"styleElement") QIO_STYLE_ELEMENT_ARRAY[19366])
      unknown isspace[107043](107041 call &&(107036 call == arrayStyle[107031] QIO_ARRAY_FORMAT_SPACE[19390])(107039 call ! binary[107020]))
      unknown isjson[107055](107053 call &&(107048 call == arrayStyle[107031] QIO_ARRAY_FORMAT_JSON[19398])(107051 call ! binary[107020]))
      unknown ischpl[107067](107065 call &&(107060 call == arrayStyle[107031] QIO_ARRAY_FORMAT_CHPL[19394])(107063 call ! binary[107020]))
      if(107084 call _cond_test(107072 call || isjson[107055] ischpl[107067]))
      {
        (107080 call <~> f[106251](107079 'new'(107078 call ioLiteral[226016] "[")))
      }
      unknown first[107089] 1
      unknown offset[107102](107099 call .(107098 call(107093 call . dom[106257] c"dsiDim") 1) c"low")
      unknown i[107106] 0
      unknown read_end[107110] 0
      {
        unknown tmp[107377] "temp"
        (107407 'move' tmp[107377](107399 call _cond_test(107401 call !(107406 call(107403 call . f[106251] c"error")))))
        WhileDo
        {
          {
            if(107254 call _cond_test first[107089])
            {
              (107124 call = first[107089] 0)
              if(107158 call _cond_test(107130 call || isjson[107055] ischpl[107067]))
              {
                (107138 call <~> f[106251](107137 'new'(107136 call ioLiteral[226016] "]")))
              }
              {
                if(107154 call _cond_test isspace[107043])
                {
                  (107150 call <~> f[106251](107149 'new'(107148 call ioNewline[225966](skipWhitespaceOnly = 1))))
                }
              }
              if(107191 call _cond_test(107170 call ==(107168 call(107164 call . f[106251] c"error"))(349802 call EFORMAT[210730])))
              {
                (107179 call(107175 call . f[106251] c"clearError"))
              }
              {
                (107184 call = read_end[107110] 1)
                break _breakLabel[107381] _breakLabel[107381]
              }
            }
            {
              if(107223 call _cond_test isspace[107043])
              {
                (107202 call <~> f[106251](107201 'new'(107200 call ioLiteral[226016] " ")))
              }
              {
                if(107218 call _cond_test(107207 call || isjson[107055] ischpl[107067]))
                {
                  (107215 call <~> f[106251](107214 'new'(107213 call ioLiteral[226016] ",")))
                }
              }
              if(107250 call _cond_test(107237 call ==(107235 call(107231 call . f[106251] c"error"))(349814 call EFORMAT[210730])))
              {
                (107244 call(107240 call . f[106251] c"clearError"))
                break _breakLabel[107381] _breakLabel[107381]
              }
            }
            if(107354 call _cond_test(107270 call >= i[107106](107267 call .(107266 call(107261 call . dom[106257] c"dsiDim") 1) c"size")))
            {
              unknown sz[107282](107279 call .(107278 call(107273 call . dom[106257] c"dsiDim") 1) c"size")
              if(107295 call _cond_test(107288 call < sz[107282] 4))
              {
                (107292 call = sz[107282] 4)
              }
              (107305 call = sz[107282](107303 call * 2 sz[107282]))
              const newDom[107317] "const"(107315 call chpl__buildDomainExpr(107312 call #(107309 call chpl_build_low_bounded_range offset[107102]) sz[107282]))
              (107328 call(107323 call . arr[106255] c"dsiReallocate") newDom[107317])
              (107343 call(107331 call . dom[106257] c"dsiSetIndices")(107341 call(107337 call . newDom[107317] c"getIndices")))
              (107352 call(107348 call . arr[106255] c"dsiPostReallocate"))
            }
            (107369 call <~> f[106251](107368 call(107360 call . arr[106255] c"dsiAccess")(107365 call + offset[107102] i[107106])))
            (107374 call += i[107106] 1)
          }
          label _continueLabel[107380]
          (107394 'move' tmp[107377](107386 call _cond_test(107388 call !(107393 call(107390 call . f[106251] c"error")))))
          tmp[107377]
        }
        label _breakLabel[107381]
      }
      if(107432 call _cond_test(107411 call ! read_end[107110]))
      {
        if(107427 call _cond_test(107415 call || isjson[107055] ischpl[107067]))
        {
          (107423 call <~> f[106251](107422 'new'(107421 call ioLiteral[226016] "]")))
        }
      }
      {
        const newDom[107445] "const"(107443 call chpl__buildDomainExpr(107440 call #(107437 call chpl_build_low_bounded_range offset[107102]) i[107106]))
        (107455 call(107450 call . arr[106255] c"dsiReallocate") newDom[107445])
        (107468 call(107458 call . dom[106257] c"dsiSetIndices")(107466 call(107462 call . newDom[107445] c"getIndices")))
        (107475 call(107471 call . arr[106255] c"dsiPostReallocate"))
      }
    }
    {
      if(107750 call _cond_test(107522 call &&(107511 call &&(107508 call &&(107500 call &&(107491 call &&(107484 call(107480 call . arr[106255] c"isDefaultRectangular"))(107489 call !(107488 call chpl__isArrayView arr[106255])))(107499 call _isSimpleIoType(107495 call . arr[106255] c"eltType")))(107507 call(107503 call . f[106251] c"binary"))) isNative[106296])(107521 call(107516 call . arr[106255] c"isDataContiguous") dom[106257])))
      {
        const elemSize[107531] "const"(107530 call c_sizeof(107526 call . arr[106255] c"eltType"))
        if(107608 call _cond_test 1)
        {
          unknown rw[107545](107542 IfExpr (107537 call . f[106251] c"writing") then
          { scopeless
            "write"
          } else
          { scopeless
            "read"
          } )
          (107606 call assert(107570 call <=(107561 call *(107555 call _cast uint(64)[107](107551 call . dom[106257] c"dsiNumIndices"))(107559 call _cast uint(64)[107] elemSize[107531]))(107568 call _cast uint(64)[107](107566 call max ssize_t[209667]))) "length of array to " rw[107545] " is greater than ssize_t can hold")
        }
        const len[107616] "const"(107613 call . dom[106257] c"dsiNumIndices")
        const src[107623] "const"(107620 call . arr[106255] c"theData")
        const idx[107636] "const"(107635 call(107627 call . arr[106255] c"getDataIndex")(107631 call . dom[106257] c"dsiLow"))
        const size[107649] "const"(107647 call *(107641 call _cast ssize_t[209667] len[107616])(107645 call _cast ssize_t[209667] elemSize[107531]))
        Try
        {
          {
            if(107696 call _cond_test(107653 call . f[106251] c"writing"))
            {
              (107673 call(107659 call . f[106251] c"writeBytes")(107670 call _ddata_shift(107664 call . arr[106255] c"eltType") src[107623] idx[107636]) size[107649])
            }
            {
              (107693 call(107679 call . f[106251] c"readBytes")(107690 call _ddata_shift(107684 call . arr[106255] c"eltType") src[107623] idx[107636]) size[107649])
            }
          }
        }
        Catch e : anymanaged SystemError
        {
          unknown tmp[328504] "temp"(328507 'dynamic_cast' unmanaged SystemError[390112](328506 'current error'))
          if(328516 '!=' tmp[328504] nil[38])
          {
            unknown e[328522](328526 'new'(328523 call _owned[39039](?) tmp[328504]))
            {
              (107718 call(107708 call . f[106251] c"setError")(107714 call . e[328522] c"err"))
            }
          }
          {
          }
        }
        Catch
        {
          unknown tmp[328529] "temp"(328531 'current error')
          unknown chpl_anon_error[328534](328538 'new'(328535 call _owned[39039](?) tmp[328529]))
          {
            (107731 call(107723 call . f[106251] c"setError")(107728 call _cast syserr[210032] EINVAL[210884]))
          }
        }
      }
      {
        const zeroTup[107741] "const"(107739 call * rank[106263] idxType[106271])
        (107748 call recursiveArrayWriter zeroTup[107741])
      }
    }
  }
  function DefaultRectangularArr[105188](?).dsiSerialWrite[107766](arg _mt[107771]:_MT[227], arg this[107768]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg f[107764]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    (107776 call(349896 call . this[107768] c"dsiSerialReadWrite") f[107764])
  }
  function DefaultRectangularArr[105188](?).dsiSerialRead[107786](arg _mt[107791]:_MT[227], arg this[107788]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg f[107784]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    (107796 call(349901 call . this[107788] c"dsiSerialReadWrite") f[107784])
  }
  function DefaultRectangularArr[105188](?).isDataContiguous[107806](arg _mt[107811]:_MT[227], arg this[107808]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg dom[107804]:_any[170](?)) : _unknown[43] "method"
  {
    if(107852 call _cond_test debugDefaultDistBulkTransfer[92585])
    {
      (107850 call chpl_debug_writeln "isDataContiguous(): off="(349908 call . this[107808] c"off") " blk="(349913 call . this[107808] c"blk"))
    }
    if(107868 call _cond_test(107863 call !=(107861 call(349918 call . this[107808] c"blk")(349923 call . this[107808] c"rank")) 1))
    {
      (107866 return 0)
    }
    {
      unknown dim[107921] 0
      unknown tmp[107922] "maybe param" "temp"
      (107933 'move' tmp[107922](107931 call chpl_compute_low_param_loop_bound 1(107876 call -(349928 call . this[107808] c"rank") 1)))
      unknown tmp[107923] "maybe param" "temp"
      (107943 'move' tmp[107923](107941 call chpl_compute_high_param_loop_bound 1(107938 call -(349947 call . this[107808] c"rank") 1)))
      unknown tmp[107924] "maybe param" "temp"
      (107946 'move' tmp[107924](107881 call - 1))
      ParamForLoop
      { dim[107921] tmp[107922] tmp[107923] tmp[107924]
        if(107916 call _cond_test(107911 call !=(107888 call(349933 call . this[107808] c"blk") dim[107921])(107909 call *(107895 call(349939 call . this[107808] c"blk")(107892 call + dim[107921] 1))(107906 call .(107905 call(107897 call . dom[107804] c"dsiDim")(107902 call + dim[107921] 1)) c"length"))))
        {
          (107914 return 0)
        }
      }
      label _unused_continueLabel[107926]
      label _breakLabel[107925]
    }
    if(107978 call _cond_test debugDefaultDistBulkTransfer[92585])
    {
      (107976 call chpl_debug_writeln "\tYES!")
    }
    (107984 return 1)
  }
  function _canDoSimpleTransfer[107992](arg A[107990]:_any[170](?), arg aView[107994]:_any[170](?), arg B[107996]:_any[170](?), arg bView[107998]:_any[170](?)) : _unknown[43] "private"
  {
    if(108056 call _cond_test(108024 call ||(108010 call !(108009 call(108001 call . A[107990] c"isDataContiguous")(108005 call . aView[107994] c"_value")))(108022 call !(108021 call(108013 call . B[107996] c"isDataContiguous")(108017 call . bView[107998] c"_value")))))
    {
      if(108047 call _cond_test debugDefaultDistBulkTransfer[92585])
      {
        (108045 call chpl_debug_writeln "isDataContiguous return False")
      }
      (108054 return 0)
    }
    (108062 return 1)
  }
  function _canDoComplexTransfer[108070](arg A[108068]:_any[170](?), arg aView[108072]:_any[170](?), arg B[108074]:_any[170](?), arg bView[108076]:_any[170](?)) : _unknown[43] "private"
  {
    (108079 return useBulkTransferStride[111837])
  }
  function DefaultRectangularArr[105188](?).doiCanBulkTransferRankChange[108087](arg _mt[108092]:_MT[227], arg this[108089]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?)) param : _unknown[43] "method"
  {
    (108095 return 1)
  }
  function DefaultRectangularArr[105188](?).doiBulkTransferToKnown[108105](arg _mt[108116]:_MT[227], arg this[108113]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg srcDom[108103]:_any[170](?), arg destClass[108108] :
  anymanaged DefaultRectangularArr[347545](?), arg destDom[108111]:_any[170](?)) : _unknown[43] "method"
  {
    (108126 return(108125 call transferHelper destClass[108108] destDom[108111] this[108113] srcDom[108103]))
  }
  { scopeless type
    bool[10]
  }
  function DefaultRectangularArr[105188](?).doiBulkTransferFromKnown[108137](arg _mt[108148]:_MT[227], arg this[108145]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg destDom[108135]:_any[170](?), arg srcClass[108140] :
  anymanaged DefaultRectangularArr[347545](?), arg srcDom[108143]:_any[170](?)) : _unknown[43] "method"
  {
    (108158 return(108157 call transferHelper this[108145] destDom[108135] srcClass[108140] srcDom[108143]))
  }
  { scopeless type
    bool[10]
  }
  function transferHelper[108168](arg A[108166]:_any[170](?), arg aView[108170]:_any[170](?), arg B[108172]:_any[170](?), arg bView[108174]:_any[170](?)) : _unknown[43] "private"
  {
    if(108299 call _cond_test(108212 call &&(108203 call &&(108185 call ==(108178 call . A[108166] c"rank")(108182 call . B[108172] c"rank"))(108201 call &&(108192 call ==(108188 call . aView[108170] c"stridable") 0)(108199 call ==(108195 call . bView[108174] c"stridable") 0)))(108211 call _canDoSimpleTransfer A[108166] aView[108170] B[108172] bView[108174])))
    {
      if(108235 call _cond_test debugDefaultDistBulkTransfer[92585])
      {
        (108233 call chpl_debug_writeln "Performing simple DefaultRectangular transfer")
      }
      (108247 call _simpleTransfer A[108166] aView[108170] B[108172] bView[108174])
    }
    {
      if(108295 call _cond_test(108255 call _canDoComplexTransfer A[108166] aView[108170] B[108172] bView[108174]))
      {
        if(108277 call _cond_test debugDefaultDistBulkTransfer[92585])
        {
          (108275 call chpl_debug_writeln "Performing complex DefaultRectangular transfer")
        }
        (108289 call complexTransfer A[108166] aView[108170] B[108172] bView[108174])
      }
      {
        (108292 return 0)
      }
    }
    (108306 return 1)
  }
  { scopeless type
    bool[10]
  }
  function _simpleTransfer[108315](arg A[108313]:_any[170](?), arg aView[108317]:_any[170](?), arg B[108319]:_any[170](?), arg bView[108321]:_any[170](?)) : _unknown[43] "private" "no return value for void"
  {
    unknown rank[108327] "param"(108324 call . A[108313] c"rank")
    unknown idxType[108335] "type variable"(108332 call . A[108313] c"idxType")
    unknown eltType[108342] "type variable"(108339 call . A[108313] c"eltType")
    const Adims[108351] "const"(108350 call(108346 call . aView[108317] c"dims"))
    unknown Alo[108361](108359 call * rank[108327](108356 call . aView[108317] c"idxType"))
    {
      unknown i[108382] 0
      unknown tmp[108383] "maybe param" "temp"
      (108395 'move' tmp[108383](108393 call chpl_compute_low_param_loop_bound 1 rank[108327]))
      unknown tmp[108384] "maybe param" "temp"
      (108402 'move' tmp[108384](108400 call chpl_compute_high_param_loop_bound 1 rank[108327]))
      unknown tmp[108385] "maybe param" "temp"
      (108405 'move' tmp[108385] 1)
      ParamForLoop
      { i[108382] tmp[108383] tmp[108384] tmp[108385]
        (108379 call =(108371 call Alo[108361] i[108382])(108376 call .(108375 call Adims[108351] i[108382]) c"first"))
      }
      label _unused_continueLabel[108387]
      label _breakLabel[108386]
    }
    const Bdims[108422] "const"(108421 call(108417 call . bView[108321] c"dims"))
    unknown Blo[108432](108430 call * rank[108327](108427 call . B[108319] c"idxType"))
    {
      unknown i[108453] 0
      unknown tmp[108454] "maybe param" "temp"
      (108466 'move' tmp[108454](108464 call chpl_compute_low_param_loop_bound 1 rank[108327]))
      unknown tmp[108455] "maybe param" "temp"
      (108473 'move' tmp[108455](108471 call chpl_compute_high_param_loop_bound 1 rank[108327]))
      unknown tmp[108456] "maybe param" "temp"
      (108476 'move' tmp[108456] 1)
      ParamForLoop
      { i[108453] tmp[108454] tmp[108455] tmp[108456]
        (108450 call =(108442 call Blo[108432] i[108453])(108447 call .(108446 call Bdims[108422] i[108453]) c"first"))
      }
      label _unused_continueLabel[108458]
      label _breakLabel[108457]
    }
    const len[108497] "const"(108496 call(108491 call .(108488 call . aView[108317] c"numIndices") c"safeCast") size_t[209674])
    if(108506 call _cond_test(108502 call == len[108497] 0))
    {
      (108504 return _void[47])
    }
    if(108621 call _cond_test debugBulkTransfer[111829])
    {
      function sizeof[108516](arg x[108514]:_any[170](?)) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
      {
      }
      { scopeless type
        int(64)[13]
      }
      const elemSize[108530] "const"(108529 call sizeof(108525 call . B[108319] c"eltType"))
      (108619 call chpl_debug_writeln "In DefaultRectangular._simpleTransfer():" " Alo=" Alo[108361] ", Blo=" Blo[108432] ", len=" len[108497] ", elemSize=" elemSize[108530])
    }
    const Aidx[108632] "const"(108631 call(108626 call . A[108313] c"getDataIndex") Alo[108361])
    const Adata[108644] "const"(108643 call _ddata_shift eltType[108342](108639 call . A[108313] c"theData") Aidx[108632])
    const Bidx[108654] "const"(108653 call(108648 call . B[108319] c"getDataIndex") Blo[108432])
    const Bdata[108666] "const"(108665 call _ddata_shift eltType[108342](108661 call . B[108319] c"theData") Bidx[108654])
    (108676 call _simpleTransferHelper A[108313] B[108319] Adata[108644] Bdata[108666] len[108497])
  }
  function _simpleTransferHelper[108684](arg A[108682]:_any[170](?), arg B[108686]:_any[170](?), arg Adata[108688]:_any[170](?), arg Bdata[108690]:_any[170](?), arg len[108692]:_any[170](?)) : _unknown[43] "private" "no return value for void"
  {
    if(108700 call _cond_test(108696 call == Adata[108688] Bdata[108690]))
    {
      (108698 return _void[47])
    }
    if(108932 call _cond_test(108717 call ==(108710 '_wide_get_node' Adata[108688])(108714 call .(350037 call here[92085]) c"id")))
    {
      if(108745 call _cond_test debugDefaultDistBulkTransfer[92585])
      {
        (108743 call chpl_debug_writeln "\tlocal get() from "(108742 '_wide_get_node' B[108686]))
      }
      (108767 'chpl_comm_array_get'(108756 call Adata[108688] 0)(108761 '_wide_get_node' Bdata[108690])(108765 call Bdata[108690] 0) len[108692])
    }
    {
      if(108927 call _cond_test(108778 call ==(108773 '_wide_get_node' Bdata[108690])(108775 call .(350046 call here[92085]) c"id")))
      {
        if(108806 call _cond_test debugDefaultDistBulkTransfer[92585])
        {
          (108804 call chpl_debug_writeln "\tlocal put() to "(108803 '_wide_get_node' A[108682]))
        }
        (108843 'chpl_comm_array_put'(108832 call Bdata[108690] 0)(108837 '_wide_get_node' Adata[108688])(108841 call Adata[108688] 0) len[108692])
      }
      {
        {
          const tmp[108922] "const" "temp"
          (108923 'move' tmp[108922](108920 'deref'(108919 '_wide_get_locale'(108847 call chpl_localeID_to_locale(108846 '_wide_get_locale' Adata[108688])))))
          {
            if(108895 call _cond_test debugDefaultDistBulkTransfer[92585])
            {
              (108893 call chpl_debug_writeln "\tremote get() on "(108869 call .(350056 call here[92085]) c"id") " from "(108892 '_wide_get_node' B[108686]))
            }
            (108917 'chpl_comm_array_get'(108906 call Adata[108688] 0)(108911 '_wide_get_node' Bdata[108690])(108915 call Bdata[108690] 0) len[108692])
          }
        }
      }
    }
  }
  function complexTransfer[108943](arg A[108941]:_any[170](?), arg aView[108945]:_any[170](?), arg B[108947]:_any[170](?), arg bView[108949]:_any[170](?)) : _unknown[43] "private" "no return value for void"
  {
    if(109047 call _cond_test(108979 call &&(108963 call !=(108958 '_wide_get_node'(108952 call . A[108941] c"data"))(108960 call .(350064 call here[92085]) c"id"))(108977 call !=(108972 '_wide_get_node'(108966 call . B[108947] c"data"))(108974 call .(350067 call here[92085]) c"id"))))
    {
      if(109013 call _cond_test debugDefaultDistBulkTransfer[92585])
      {
        (109010 call chpl_debug_writeln "BulkTransferStride: Both arrays on different locale, moving to locale of destination: LOCALE"(109009 '_wide_get_node'(109003 call . A[108941] c"data")))
      }
      {
        const tmp[109033] "const" "temp"
        (109034 'move' tmp[109033](109031 'deref'(109030 '_wide_get_locale'(109019 call . A[108941] c"data"))))
        (109028 call complexTransferCore A[108941] aView[108945] B[108947] bView[108949])
      }
    }
    {
      (109044 call complexTransferCore A[108941] aView[108945] B[108947] bView[108949])
    }
  }
  function complexTransferCore[109058](arg LHS[109056]:_any[170](?), arg LViewDom[109060]:_any[170](?), arg RHS[109062]:_any[170](?), arg RViewDom[109064]:_any[170](?)) : _unknown[43] "private"
  {
    unknown minRank[109077] "param"(109076 call min(109068 call . LHS[109056] c"rank")(109073 call . RHS[109062] c"rank"))
    unknown idxType[109085] "type variable"(109082 call . LHS[109056] c"idxType")
    unknown intIdxType[109092] "type variable"(109089 call . LHS[109056] c"intIdxType")
    if(109176 call _cond_test debugDefaultDistBulkTransfer[92585])
    {
      (109132 call writeln "Transferring views :" LViewDom[109060] " <-- " RViewDom[109064])
      (109174 call writeln "Original domains   :"(109163 call(109159 call .(109154 call . LHS[109056] c"dom") c"dsiDims")) " <-- "(109173 call(109169 call .(109166 call . RHS[109062] c"dom") c"dsiDims")))
    }
    const LeftDims[109186] "const"(109185 call(109181 call . LViewDom[109060] c"dims"))
    const RightDims[109195] "const"(109194 call(109190 call . RViewDom[109064] c"dims"))
    const tmp[109210] "const" "no copy" "temp"(109209 call bulkCommComputeActiveDims LeftDims[109186] RightDims[109195])
    (109220 call _check_tuple_var_decl tmp[109210] 3)
    const LeftActives[109198] "const"(109211 call tmp[109210] 1)
    const RightActives[109200] "const"(109214 call tmp[109210] 2)
    const inferredRank[109202] "const"(109217 call tmp[109210] 3)
    unknown DimSizes[109242](109240 call chpl__buildArrayRuntimeType(109238 call chpl__ensureDomainExpr(109227 call chpl_build_bounded_range 1 inferredRank[109202]))(109237 'typeof'(109234 call .(109233 call LeftDims[109186] 1) c"size")))
    {
      unknown _indexOfInterest[109272] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[109273] "expr temp" "temp"
      (109282 'move' _iterator[109273](109280 call _getIterator(109287 call chpl_direct_range_iter 1 inferredRank[109202] 1)))
      Defer
      {
        {
          (109303 call _freeIterator _iterator[109273])
        }
      }
      { scopeless type
        (109292 'move' _indexOfInterest[109272](109289 call iteratorIndex _iterator[109273]))
      }
      ForLoop
      {
        unknown i[109296] "index var" "insert auto destroy"
        (109298 'move' i[109296] _indexOfInterest[109272])
        {
          const dimIdx[109254] "const"(109253 call LeftActives[109198] i[109296])
          (109269 call =(109261 call DimSizes[109242] i[109296])(109266 call .(109265 call LeftDims[109186] dimIdx[109254]) c"size"))
        }
        label _continueLabel[109277]
        _indexOfInterest[109272]
        _iterator[109273]
      }
      label _breakLabel[109278]
    }
    if(109333 call _cond_test debugDefaultDistBulkTransfer[92585])
    {
      (109330 call writeln "inferredRank = " inferredRank[109202])
    }
    (109359 call assert(109340 call <= inferredRank[109202] minRank[109077]) "complex DR transfer: computed rank greater than minimum rank!")
    unknown LBlk[109361](109366 call * minRank[109077] intIdxType[109092])
    unknown RBlk[109368](109372 'typeof' LBlk[109361])
    {
      {
        unknown _indexOfInterest[109480] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[109481] "expr temp" "temp"
        (109490 'move' _iterator[109481](109488 call _getIterator(109501 call chpl_direct_range_iter 1 inferredRank[109202](109497 call - 1))))
        Defer
        {
          {
            (109517 call _freeIterator _iterator[109481])
          }
        }
        { scopeless type
          (109506 'move' _indexOfInterest[109480](109503 call iteratorIndex _iterator[109481]))
        }
        ForLoop
        {
          unknown idx[109510] "index var" "insert auto destroy"
          (109512 'move' idx[109510] _indexOfInterest[109480])
          {
            const li[109387] "const"(109386 call LeftActives[109198] idx[109510])
            (109429 call =(109394 call LBlk[109361] idx[109510])(109427 call *(109401 call(109396 call . LHS[109056] c"blk") li[109387])(109425 call _cast intIdxType[109092](109422 call /(109406 call .(109405 call LeftDims[109186] li[109387]) c"stride")(109419 call .(109418 call(109413 call .(109410 call . LHS[109056] c"dom") c"dsiDim") li[109387]) c"stride")))))
            const ri[109436] "const"(109435 call RightActives[109200] idx[109510])
            (109477 call =(109442 call RBlk[109368] idx[109510])(109475 call *(109449 call(109444 call . RHS[109062] c"blk") ri[109436])(109473 call _cast intIdxType[109092](109470 call /(109454 call .(109453 call RightDims[109195] ri[109436]) c"stride")(109467 call .(109466 call(109461 call .(109458 call . RHS[109062] c"dom") c"dsiDim") ri[109436]) c"stride")))))
          }
          label _continueLabel[109485]
          _indexOfInterest[109480]
          _iterator[109481]
        }
        label _breakLabel[109486]
      }
    }
    if(109569 call _cond_test debugDefaultDistBulkTransfer[92585])
    {
      (109545 call writeln "LBlk = " LBlk[109361])
      (109567 call writeln "RBlk = " RBlk[109368])
    }
    unknown stridelevels[109574] 0
    unknown countDom[109587](109585 call chpl__buildDomainExpr(109582 call chpl_build_bounded_range 1(109580 call + inferredRank[109202] 1)))
    unknown count[109597](109595 call chpl__buildArrayRuntimeType(109593 call chpl__ensureDomainExpr countDom[109587]) size_t[209674])
    {
      unknown _indexOfInterest[109607] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[109608] "expr temp" "temp"
      (109617 'move' _iterator[109608](109615 call _getIterator count[109597]))
      Defer
      {
        {
          (109633 call _freeIterator _iterator[109608])
        }
      }
      { scopeless type
        (109622 'move' _indexOfInterest[109607](109619 call iteratorIndex _iterator[109608]))
      }
      ForLoop
      {
        unknown c[109626] "index var" "insert auto destroy"
        (109628 'move' c[109626] _indexOfInterest[109607])
        (109604 call = c[109626] 1)
        label _continueLabel[109612]
        _indexOfInterest[109607]
        _iterator[109608]
      }
      label _breakLabel[109613]
    }
    unknown strideDom[109647](109645 call chpl__buildDomainExpr(109642 call chpl_build_bounded_range 1 inferredRank[109202]))
    unknown dstStride[109650](109658 call chpl__buildArrayRuntimeType(109656 call chpl__ensureDomainExpr strideDom[109647]) size_t[209674])
    unknown srcStride[109660](109664 'typeof' dstStride[109650])
    if(109729 call _cond_test(109679 call ||(109670 call >(109668 call LBlk[109361] inferredRank[109202]) 1)(109677 call >(109675 call RBlk[109368] inferredRank[109202]) 1)))
    {
      (109683 call += stridelevels[109574] 1)
      (109692 call =(109690 call count[109597] stridelevels[109574]) 1)
      (109709 call =(109698 call dstStride[109650] stridelevels[109574])(109708 call(109703 call .(109702 call LBlk[109361] inferredRank[109202]) c"safeCast") size_t[209674]))
      (109726 call =(109715 call srcStride[109660] stridelevels[109574])(109725 call(109720 call .(109719 call RBlk[109368] inferredRank[109202]) c"safeCast") size_t[209674]))
    }
    {
      unknown _indexOfInterest[109838] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[109839] "expr temp" "temp"
      (109848 'move' _iterator[109839](109846 call _getIterator(109859 call chpl_direct_range_iter 2 inferredRank[109202](109855 call - 1))))
      Defer
      {
        {
          (109875 call _freeIterator _iterator[109839])
        }
      }
      { scopeless type
        (109864 'move' _indexOfInterest[109838](109861 call iteratorIndex _iterator[109839]))
      }
      ForLoop
      {
        unknown i[109868] "index var" "insert auto destroy"
        (109870 'move' i[109868] _indexOfInterest[109838])
        {
          (109760 call *=(109749 call count[109597](109746 call + stridelevels[109574] 1))(109759 call(109754 call .(109753 call DimSizes[109242] i[109868]) c"safeCast") size_t[209674]))
          const bothReuse[109782] "const"(109780 call &&(109771 call canReuseStride LBlk[109361] i[109868] stridelevels[109574] count[109597] dstStride[109650])(109779 call canReuseStride RBlk[109368] i[109868] stridelevels[109574] count[109597] srcStride[109660]))
          if(109834 call _cond_test(109786 call ! bothReuse[109782]))
          {
            (109790 call += stridelevels[109574] 1)
            (109811 call =(109797 call dstStride[109650] stridelevels[109574])(109810 call(109805 call .(109804 call LBlk[109361](109801 call - i[109868] 1)) c"safeCast") size_t[209674]))
            (109831 call =(109817 call srcStride[109660] stridelevels[109574])(109830 call(109825 call .(109824 call RBlk[109368](109821 call - i[109868] 1)) c"safeCast") size_t[209674]))
          }
        }
        label _continueLabel[109843]
        _indexOfInterest[109838]
        _iterator[109839]
      }
      label _breakLabel[109844]
    }
    (109899 call *=(109888 call count[109597](109885 call + stridelevels[109574] 1))(109898 call(109893 call .(109892 call DimSizes[109242] 1) c"safeCast") size_t[209674]))
    (109924 call assert(109905 call <= stridelevels[109574] inferredRank[109202]) "BulkTransferStride: stride levels greater than rank.")
    if(109984 call _cond_test(109928 call == stridelevels[109574] 0))
    {
      (109982 call assert(109939 call ==(109934 call count[109597] 1)(109936 call . LViewDom[109060] c"numIndices")) "BulkTransferStride: bulk-count incorrect for stride level of 0: "(109961 call count[109597] 1) " != "(109979 call . LViewDom[109060] c"numIndices"))
    }
    (110000 call = countDom[109587](109998 call chpl__buildDomainExpr(109995 call chpl_build_bounded_range 1(109993 call + stridelevels[109574] 1))))
    (110011 call = strideDom[109647](110009 call chpl__buildDomainExpr(110006 call chpl_build_bounded_range 1 stridelevels[109574])))
    function getFirstIdx[110018](arg dims[110016]:_any[170](?)) : _unknown[43]
    {
      unknown ret[110033](110031 call *(110021 call . dims[110016] c"size")(110028 call .(110027 call dims[110016] 1) c"idxType"))
      {
        unknown i[110078] 0
        unknown tmp[110079] "maybe param" "temp"
        (110091 'move' tmp[110079](110089 call chpl_compute_low_param_loop_bound 1(110039 call . dims[110016] c"size")))
        unknown tmp[110080] "maybe param" "temp"
        (110101 'move' tmp[110080](110099 call chpl_compute_high_param_loop_bound 1(110096 call . dims[110016] c"size")))
        unknown tmp[110081] "maybe param" "temp"
        (110104 'move' tmp[110081] 1)
        ParamForLoop
        { i[110078] tmp[110079] tmp[110080] tmp[110081]
          (110075 call =(110047 call ret[110033] i[110078])(110072 IfExpr (110056 call <(110052 call .(110051 call dims[110016] i[110078]) c"stride") 0) then
          { scopeless
            (110062 call .(110061 call dims[110016] i[110078]) c"last")
          } else
          { scopeless
            (110069 call .(110068 call dims[110016] i[110078]) c"first")
          } ))
        }
        label _unused_continueLabel[110083]
        label _breakLabel[110082]
      }
      (110116 return ret[110033])
    }
    const LFirst[110124] "const"(110123 call getFirstIdx LeftDims[109186])
    const RFirst[110131] "const"(110130 call getFirstIdx RightDims[109195])
    (110150 call complexTransferComm LHS[109056] RHS[109062](110143 call _cast(110142 call int(64)[13] 32) stridelevels[109574]) dstStride[109650] srcStride[109660] count[109597] LFirst[110124] RFirst[110131])
  }
  function complexTransferComm[110158](arg A[110156]:_any[170](?), arg B[110160]:_any[170](?), arg stridelevels[110166] :
  (110165 call int(64)[13] 32), arg dstStride[110169]:_any[170](?), arg srcStride[110171]:_any[170](?), arg count[110173]:_any[170](?), arg AFirst[110175]:_any[170](?), arg BFirst[110177]:_any[170](?)) : _unknown[43] "private" "no return value for void"
  {
    if(110308 call _cond_test debugDefaultDistBulkTransfer[92585])
    {
      (110305 call chpl_debug_writeln "BulkTransferStride with values:\n" "\tLocale        = "(110220 call stringify(110216 call .(350228 call here[92085]) c"id")) "\n" "\tStride levels = "(110241 call stringify stridelevels[110166]) "\n" "\tdstStride     = "(110262 call stringify dstStride[110169]) "\n" "\tsrcStride     = "(110283 call stringify srcStride[110171]) "\n" "\tcount         = "(110304 call stringify count[110173]))
    }
    const AO[110322] "const"(110321 call(110314 call . A[110156] c"getDataIndex") AFirst[110175](getShifted = 0))
    const BO[110334] "const"(110333 call(110326 call . B[110160] c"getDataIndex") BFirst[110177](getShifted = 0))
    const dest[110341] "const"(110338 call . A[110156] c"data")
    const src[110348] "const"(110345 call . B[110160] c"data")
    const dststr[110358] "const"(110355 call .(110352 call . dstStride[110169] c"_value") c"data")
    const srcstr[110368] "const"(110365 call .(110362 call . srcStride[110171] c"_value") c"data")
    const cnt[110378] "const"(110375 call .(110372 call . count[110173] c"_value") c"data")
    if(110620 call _cond_test(110390 call ==(110385 '_wide_get_node' dest[110341])(110387 call .(350244 call here[92085]) c"id")))
    {
      const srclocale[110403] "const"(110401 call _cast(110400 call int(64)[13] 32)(110396 '_wide_get_node' src[110348]))
      if(110430 call _cond_test debugBulkTransfer[111829])
      {
        (110427 call chpl_debug_writeln "BulkTransferStride: On LHS - GET from " srclocale[110403])
      }
      (110473 'chpl_comm_get_strd'(110454 call dest[110341] AO[110322])(110458 call dststr[110358] 0) srclocale[110403](110463 call src[110348] BO[110334])(110467 call srcstr[110368] 0)(110471 call cnt[110378] 0) stridelevels[110166])
    }
    {
      const destlocale[110486] "const"(110484 call _cast(110483 call int(64)[13] 32)(110479 '_wide_get_node' dest[110341]))
      if(110548 call _cond_test debugDefaultDistBulkTransfer[92585])
      {
        (110545 call assert(110501 call ==(110496 '_wide_get_node' src[110348])(110498 call .(350261 call here[92085]) c"id")) "BulkTransferStride: Expected to be on "(110524 '_wide_get_node' src[110348]) ", actually on "(110542 call .(350264 call here[92085]) c"id"))
      }
      if(110575 call _cond_test debugBulkTransfer[111829])
      {
        (110572 call chpl_debug_writeln "BulkTransferStride: On RHS - PUT to " destlocale[110486])
      }
      (110618 'chpl_comm_put_strd'(110599 call dest[110341] AO[110322])(110603 call dststr[110358] 0) destlocale[110486](110608 call src[110348] BO[110334])(110612 call srcstr[110368] 0)(110616 call cnt[110378] 0) stridelevels[110166])
    }
  }
  function DefaultRectangularArr[105188](?).isDefaultRectangular[110629](arg _mt[110634]:_MT[227], arg this[110631]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?)) param : _unknown[43] "method"
  {
    (110637 return 1)
  }
  function anymanaged anynil DefaultRectangularArr[389608](?).isDefaultRectangular[110645](arg _mt[110650]:_MT[227], arg this[110647]:anymanaged anynil DefaultRectangularArr[389608](?)) param : _unknown[43] "method"
  {
    (110653 return 1)
  }
  unknown debugDRScan[110659] "config" "param" 0
  function DefaultRectangularArr[105188](?).doiScan[110667](arg _mt[110674]:_MT[227], arg this[110671]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg op[110665]:_any[170](?), arg dom[110669]:_any[170](?)) : _unknown[43] "method"
  {
    unknown resType[110698] "type variable"(110697 'typeof'(110696 call(110692 call . op[110665] c"generate")))
    unknown res[110708](110706 call chpl__buildArrayRuntimeType(110704 call chpl__ensureDomainExpr dom[110669]) resType[110698])
    unknown tmp[110731] "no copy" "temp"(110730 call(110723 call . this[110671] c"chpl__preScan") op[110665] res[110708] dom[110669])
    (110741 call _check_tuple_var_decl tmp[110731] 4)
    unknown numTasks[110711](110732 call tmp[110731] 1)
    unknown rngs[110713](110735 call tmp[110731] 2)
    unknown state[110715](110738 call tmp[110731] 3)
    (110758 call(110749 call . this[110671] c"chpl__postScan") op[110665] res[110708] numTasks[110711] rngs[110713] state[110715])
    (110762 call chpl__delete op[110665])
    (110766 return res[110708])
    (329378 'used modules list'(110688 'use' RangeChunk[250319]))
  }
  where {
    (110684 call &&(110678 call ==(350279 call . this[110671] c"rank") 1)(110683 call chpl__scanStateResTypesMatch op[110665]))
  }
  function DefaultRectangularArr[105188](?).chpl__preScan[110776](arg _mt[110791]:_MT[227], arg this[110788]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg op[110774]:_any[170](?), arg res[110783] :
  (110780 call chpl__buildArrayRuntimeType nil[38] unknown resType[110778]), arg dom[110786]:_any[170](?)) : _unknown[43] "method"
  {
    const rng[110807] "const"(110806 call(110801 call . dom[110786] c"dim") 1)
    const numTasks[110824] "const"(110821 IfExpr (110812 'task_get_serial') then
    { scopeless
      1
    } else
    { scopeless
      (110820 call _computeNumChunks(110816 call . rng[110807] c"size"))
    } )
    const rngs[110837] "const"(110836 call chunks module=[244] RangeChunk[250319] rng[110807] numTasks[110824])
    if(110900 call _cond_test debugDRScan[110659])
    {
      (110876 call writeln "Using " numTasks[110824] " tasks")
      (110898 call writeln "Whose chunks are: " rngs[110837])
    }
    unknown state[110914](110912 call chpl__buildArrayRuntimeType(110910 call chpl__ensureDomainExpr(110906 call chpl_build_bounded_range 1 numTasks[110824])) resType[110778])
    if(111101 call _cond_test(110919 call == numTasks[110824] 1))
    {
      (110924 call preScanChunk 1)
    }
    {
      {
        unknown tmpIter[110938] "expr temp" "maybe ref" "no copy" "temp"
        (110941 'move' tmpIter[110938](110930 call chpl_build_bounded_range 1 numTasks[110824]))
        unknown isRngDomArr[111081] "maybe param" "temp"
        (111096 'move' isRngDomArr[111081](111094 call ||(111083 call isBoundedRange tmpIter[110938])(111092 call ||(111086 call isDomain tmpIter[110938])(111089 call isArray tmpIter[110938]))))
        if isRngDomArr[111081]
        {
          const _coforallCount[110948] "const" "end count" "temp"
          (111017 'move' _coforallCount[110948](111014 call _endCountAlloc 1))
          unknown numTasks[110949] "temp"
          (111001 'move' numTasks[110949](110997 call . tmpIter[110938] c"size"))
          (110992 call _upEndCount _coforallCount[110948] 1 numTasks[110949])
          (110989 call chpl_resetTaskSpawn numTasks[110949])
          unknown _indexOfInterest[110956] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[110957] "expr temp" "temp"
          (110966 'move' _iterator[110957](110964 call _getIterator tmpIter[110938]))
          Defer
          {
            {
              (110982 call _freeIterator _iterator[110957])
            }
          }
          { scopeless type
            (110971 'move' _indexOfInterest[110956](110968 call iteratorIndex _iterator[110957]))
          }
          ForLoop
          {
            unknown tid[110975] "coforall index var" "index var" "insert auto destroy"
            (110977 'move' tid[110975] _indexOfInterest[110956])
            {
              {
                (110945 call preScanChunk tid[110975])
              }
              (110951 call _downEndCount _coforallCount[110948] nil[38])
              (110950 'coforall loop')
            }
            label _continueLabel[110961]
            _indexOfInterest[110956]
            _iterator[110957]
          }
          label _breakLabel[110962]
          Defer
          {
            {
              (111004 call _endCountFree _coforallCount[110948])
            }
          }
          (111009 call _waitEndCount _coforallCount[110948] 1 numTasks[110949])
        }
        {
          const _coforallCount[111021] "const" "end count" "temp"
          (111078 'move' _coforallCount[111021](111075 call _endCountAlloc 1))
          unknown _indexOfInterest[111029] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[111030] "expr temp" "temp"
          (111039 'move' _iterator[111030](111037 call _getIterator tmpIter[110938]))
          Defer
          {
            {
              (111055 call _freeIterator _iterator[111030])
            }
          }
          { scopeless type
            (111044 'move' _indexOfInterest[111029](111041 call iteratorIndex _iterator[111030]))
          }
          ForLoop
          {
            unknown tid[111048] "coforall index var" "index var" "insert auto destroy"
            (111050 'move' tid[111048] _indexOfInterest[111029])
            (111062 call _upEndCount _coforallCount[111021] 1)
            {
              {
                (110935 call preScanChunk tid[111048])
              }
              (111024 call _downEndCount _coforallCount[111021] nil[38])
              (111023 'coforall loop')
            }
            label _continueLabel[111034]
            _indexOfInterest[111029]
            _iterator[111030]
          }
          label _breakLabel[111035]
          Defer
          {
            {
              (111066 call _endCountFree _coforallCount[111021])
            }
          }
          (111071 call _waitEndCount _coforallCount[111021] 1)
        }
      }
    }
    function preScanChunk[111109](arg tid[111107]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      const current[111112] "const" resType[110778]
      const myop[111122] "const"(111121 call(111117 call . op[110774] c"clone"))
      {
        unknown _indexOfInterest[111159] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[111160] "expr temp" "temp"
        (111169 'move' _iterator[111160](111167 call _getIterator(111129 call rngs[110837] tid[111107])))
        Defer
        {
          {
            (111186 call _freeIterator _iterator[111160])
          }
        }
        { scopeless type
          (111175 'move' _indexOfInterest[111159](111172 call iteratorIndex _iterator[111160]))
        }
        ForLoop
        {
          unknown i[111179] "index var" "insert auto destroy"
          (111181 'move' i[111179] _indexOfInterest[111159])
          {
            unknown elem[111134] "ref var"(111133 call(350317 call . this[110788] c"dsiAccess") i[111179])
            (111144 call(111139 call . myop[111122] c"accumulate") elem[111134])
            (111156 call =(111149 call res[110783] i[111179])(111155 call(111151 call . myop[111122] c"generate")))
          }
          label _continueLabel[111164]
          _indexOfInterest[111159]
          _iterator[111160]
        }
        label _breakLabel[111165]
      }
      (111207 call =(111196 call state[110914] tid[111107])(111206 call res[110783](111202 call .(111201 call rngs[110837] tid[111107]) c"high")))
      (111212 call chpl__delete myop[111122])
    }
    if(111261 call _cond_test debugDRScan[110659])
    {
      (111237 call writeln "res = " res[110783])
      (111259 call writeln "state = " state[110914])
    }
    const metaop[111271] "const"(111270 call(111266 call . op[110774] c"clone"))
    unknown next[111279](111276 call . metaop[111271] c"identity") resType[110778]
    {
      unknown _indexOfInterest[111310] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111311] "expr temp" "temp"
      (111320 'move' _iterator[111311](111318 call _getIterator(111325 call chpl_direct_range_iter 1 numTasks[110824] 1)))
      Defer
      {
        {
          (111341 call _freeIterator _iterator[111311])
        }
      }
      { scopeless type
        (111330 'move' _indexOfInterest[111310](111327 call iteratorIndex _iterator[111311]))
      }
      ForLoop
      {
        unknown i[111334] "index var" "insert auto destroy"
        (111336 'move' i[111334] _indexOfInterest[111310])
        {
          (111292 call <=>(111290 call state[110914] i[111334]) next[111279])
          (111308 call(111299 call . metaop[111271] c"accumulateOntoState") next[111279](111307 call state[110914] i[111334]))
        }
        label _continueLabel[111315]
        _indexOfInterest[111310]
        _iterator[111311]
      }
      label _breakLabel[111316]
    }
    (111350 call chpl__delete metaop[111271])
    if(111360 call _cond_test debugDRScan[110659])
    {
      (111358 call writeln "state = " state[110914])
    }
    (111372 return(111370 call _build_tuple numTasks[110824] rngs[110837] state[110914] next[111279]))
    (329380 'used modules list'(110795 'use' RangeChunk[250319] 'only' ))
  }
  function DefaultRectangularArr[105188](?).chpl__postScan[111381](arg _mt[111394]:_MT[227], arg this[111391]:DefaultRectangularArr[105188](?) :
  DefaultRectangularArr[105188](?), arg op[111379]:_any[170](?), arg res[111383]:_any[170](?), arg numTasks[111385]:_any[170](?), arg rngs[111387]:_any[170](?), arg state[111389]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    if(111580 call _cond_test(111398 call == numTasks[111385] 1))
    {
      (111403 call postScanChunk 1)
    }
    {
      {
        unknown tmpIter[111417] "expr temp" "maybe ref" "no copy" "temp"
        (111420 'move' tmpIter[111417](111409 call chpl_build_bounded_range 1 numTasks[111385]))
        unknown isRngDomArr[111560] "maybe param" "temp"
        (111575 'move' isRngDomArr[111560](111573 call ||(111562 call isBoundedRange tmpIter[111417])(111571 call ||(111565 call isDomain tmpIter[111417])(111568 call isArray tmpIter[111417]))))
        if isRngDomArr[111560]
        {
          const _coforallCount[111427] "const" "end count" "temp"
          (111496 'move' _coforallCount[111427](111493 call _endCountAlloc 1))
          unknown numTasks[111428] "temp"
          (111480 'move' numTasks[111428](111476 call . tmpIter[111417] c"size"))
          (111471 call _upEndCount _coforallCount[111427] 1 numTasks[111428])
          (111468 call chpl_resetTaskSpawn numTasks[111428])
          unknown _indexOfInterest[111435] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[111436] "expr temp" "temp"
          (111445 'move' _iterator[111436](111443 call _getIterator tmpIter[111417]))
          Defer
          {
            {
              (111461 call _freeIterator _iterator[111436])
            }
          }
          { scopeless type
            (111450 'move' _indexOfInterest[111435](111447 call iteratorIndex _iterator[111436]))
          }
          ForLoop
          {
            unknown tid[111454] "coforall index var" "index var" "insert auto destroy"
            (111456 'move' tid[111454] _indexOfInterest[111435])
            {
              {
                (111424 call postScanChunk tid[111454])
              }
              (111430 call _downEndCount _coforallCount[111427] nil[38])
              (111429 'coforall loop')
            }
            label _continueLabel[111440]
            _indexOfInterest[111435]
            _iterator[111436]
          }
          label _breakLabel[111441]
          Defer
          {
            {
              (111483 call _endCountFree _coforallCount[111427])
            }
          }
          (111488 call _waitEndCount _coforallCount[111427] 1 numTasks[111428])
        }
        {
          const _coforallCount[111500] "const" "end count" "temp"
          (111557 'move' _coforallCount[111500](111554 call _endCountAlloc 1))
          unknown _indexOfInterest[111508] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[111509] "expr temp" "temp"
          (111518 'move' _iterator[111509](111516 call _getIterator tmpIter[111417]))
          Defer
          {
            {
              (111534 call _freeIterator _iterator[111509])
            }
          }
          { scopeless type
            (111523 'move' _indexOfInterest[111508](111520 call iteratorIndex _iterator[111509]))
          }
          ForLoop
          {
            unknown tid[111527] "coforall index var" "index var" "insert auto destroy"
            (111529 'move' tid[111527] _indexOfInterest[111508])
            (111541 call _upEndCount _coforallCount[111500] 1)
            {
              {
                (111414 call postScanChunk tid[111527])
              }
              (111503 call _downEndCount _coforallCount[111500] nil[38])
              (111502 'coforall loop')
            }
            label _continueLabel[111513]
            _indexOfInterest[111508]
            _iterator[111509]
          }
          label _breakLabel[111514]
          Defer
          {
            {
              (111545 call _endCountFree _coforallCount[111500])
            }
          }
          (111550 call _waitEndCount _coforallCount[111500] 1)
        }
      }
    }
    function postScanChunk[111589](arg tid[111587]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      const myadjust[111595] "const"(111594 call state[111389] tid[111587])
      {
        unknown _indexOfInterest[111617] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[111618] "expr temp" "temp"
        (111627 'move' _iterator[111618](111625 call _getIterator(111603 call rngs[111387] tid[111587])))
        Defer
        {
          {
            (111644 call _freeIterator _iterator[111618])
          }
        }
        { scopeless type
          (111633 'move' _indexOfInterest[111617](111630 call iteratorIndex _iterator[111618]))
        }
        ForLoop
        {
          unknown i[111637] "index var" "insert auto destroy"
          (111639 'move' i[111637] _indexOfInterest[111617])
          {
            (111614 call(111605 call . op[111379] c"accumulateOntoState")(111611 call res[111383] i[111637]) myadjust[111595])
          }
          label _continueLabel[111622]
          _indexOfInterest[111617]
          _iterator[111618]
        }
        label _breakLabel[111623]
      }
    }
    if(111660 call _cond_test debugDRScan[110659])
    {
      (111658 call writeln "res = " res[111383])
    }
  }
  function canReuseStride[111671](arg blk[111669]:_any[170](?), arg curDim[111674] :
  int(64)[13], arg levels[111677]:_any[170](?), arg count[111679]:_any[170](?), arg stride[111681]:_any[170](?)) : _unknown[43] "private"
  {
    const lastCount[111690] "const"(111689 call count[111679](111686 call + levels[111677] 1))
    const curStride[111706] "const"(111703 IfExpr (111696 call < levels[111677] 1) then
    { scopeless
      1
    } else
    { scopeless
      (111702 call stride[111681] levels[111677])
    } )
    const lastIndex[111716] "const"(111714 call *(111711 call - lastCount[111690] 1) curStride[111706])
    const nextIndex[111723] "const"(111721 call + lastIndex[111716] curStride[111706])
    (111736 return(111734 call ==(111732 call blk[111669](111729 call - curDim[111674] 1)) nextIndex[111723]))
  }
  (329363 'used modules list'(92545 'use' DSIUtil[216461])(92547 'use' ChapelArray[111781])(92553 'use' ChapelDistribution[141791])(92555 'use' ChapelRange[66056])(92556 'use' SysBasic[209963])(92557 'use' SysError[216464])(92563 'use' ChapelDebugPrint[181115])(92565 'use' ChapelLocks[180347])(92566 'use' OwnedObject[38104])(92567 'use' IO[218633])(92572 'use' DefaultSparse[159030])(92574 'use' DefaultAssociative[151157])(92575 'use' DefaultOpaque[163704])(92578 'use' ExternalArray[181514]))
}