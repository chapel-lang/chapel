AST dump for LinkedLists after pass createTaskFunctions.
Module use list: ChapelStandard SysBasic HaltWrappers 

{
  function chpl__init_LinkedLists[390384]() : void[4] "insert line file info" "module init"
  {
    (487119 return _void[47])
  }
  function listNode[273902](?).super[759600](arg _mt[759602]:_MT[227], arg this[759604]:listNode[273902](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759613] "RVV" "temp"
    unknown call_tmp[759620] "expr temp" "maybe param" "maybe type" "temp"
    (759623 'move' call_tmp[759620](759608 '.v' this[759604] c"super"))
    (759618 'move' ret[759613](759617 'deref' call_tmp[759620]))
    (759615 return ret[759613])
  }
  function listNode[273902](?).eltType[759625](arg _mt[759627]:_MT[227], arg this[759629]:listNode[273902](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759646] "RVV" "temp" "type variable"
    unknown call_tmp[759660] "expr temp" "maybe param" "maybe type" "temp"
    (759663 'move' call_tmp[759660](759634 'is bound' this[759629] c"eltType"))
    if call_tmp[759660]
    {
      unknown call_tmp[759665] "expr temp" "maybe param" "maybe type" "temp"
      (759668 'move' call_tmp[759665](759633 '.v' this[759629] c"eltType"))
      (759651 'move' ret[759646](759650 'deref' call_tmp[759665]))
      gotoReturn _end_eltType[759644] _end_eltType[759644]
    }
    {
      (759656 'move' ret[759646](759655 'deref' _uninstantiated[247]))
      gotoReturn _end_eltType[759644] _end_eltType[759644]
    }
    label _end_eltType[759644]
    (759648 return ret[759646])
  }
  function anymanaged anynil listNode[759675](?).eltType[759670](arg _mt[759672]:_MT[227], arg this[759677]:anymanaged anynil listNode[759675](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759694] "RVV" "temp" "type variable"
    unknown call_tmp[759708] "expr temp" "maybe param" "maybe type" "temp"
    (759711 'move' call_tmp[759708](759682 'is bound' this[759677] c"eltType"))
    if call_tmp[759708]
    {
      unknown call_tmp[759713] "expr temp" "maybe param" "maybe type" "temp"
      (759716 'move' call_tmp[759713](759681 '.v' this[759677] c"eltType"))
      (759699 'move' ret[759694](759698 'deref' call_tmp[759713]))
      gotoReturn _end_eltType[759692] _end_eltType[759692]
    }
    {
      (759704 'move' ret[759694](759703 'deref' _uninstantiated[247]))
      gotoReturn _end_eltType[759692] _end_eltType[759692]
    }
    label _end_eltType[759692]
    (759696 return ret[759694])
  }
  function listNode[273902](?).data[759718](arg _mt[759720]:_MT[227], arg this[759722]:listNode[273902](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759731] "RVV" "temp"
    unknown call_tmp[759738] "expr temp" "maybe param" "maybe type" "temp"
    (759741 'move' call_tmp[759738](759726 '.' this[759722] c"data"))
    (759736 'move' ret[759731](759735 'addr of' call_tmp[759738]))
    (759733 return ret[759731])
  }
  function listNode[273902](?).next[759743](arg _mt[759745]:_MT[227], arg this[759747]:listNode[273902](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759756] "RVV" "temp"
    unknown call_tmp[759763] "expr temp" "maybe param" "maybe type" "temp"
    (759766 'move' call_tmp[759763](759751 '.' this[759747] c"next"))
    (759761 'move' ret[759756](759760 'addr of' call_tmp[759763]))
    (759758 return ret[759756])
  }
  function listNode[273902](?).init[759768](arg _mt[759770]:_MT[227], arg this[759771]:listNode[273902](?), arg eltType[759782]:_any[170](?), in arg data[759791] :
  eltType[759782] =
  _typeDefaultT[239], in arg next[759804] :
  unknown call_tmp[759865] "expr temp" "maybe param" "maybe type" "temp" =
  _typeDefaultT[239]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[759823] "temporary of super field" "temp"
    (759825 'move' super_tmp[759823](759822 '.v' this[759771] c"super"))
    (759781 call(759779 call (partial) init _mt[232] super_tmp[759823]))
    unknown tmp[759828] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[759855] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[759877] "expr temp" "maybe param" "maybe type" "temp"
      (759880 'move' call_tmp[759877](759830 '.v' this[759771] c"super"))
      (759859 'move' call_type_tmp[759855](759833 'typeof' call_tmp[759877]))
    }
    (759834 'move' tmp[759828] call_type_tmp[759855])
    unknown call_tmp[759882] "maybe param" "maybe type" "temp"
    (759885 'move' call_tmp[759882](759839 'cast' tmp[759828] this[759771]))
    unknown chpl__thisAsParent[759836] "insert auto destroy" "temp"
    (759863 'init var' chpl__thisAsParent[759836] call_tmp[759882] tmp[759828])
    (759842 'setcid' chpl__thisAsParent[759836])
    (759844 'init field' this[759771] c"eltType" eltType[759782])
    (759847 'init field' this[759771] c"data" data[759791])
    (759850 'init field' this[759771] c"next" next[759804])
    (759853 'setcid' this[759771])
    (759861 return _void[47])
  }
  function listNode[273902](?).deinit[759887](arg _mt[759889]:_MT[227], arg this[759891]:listNode[273902](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (759893 return _void[47])
  }
  function listNode[273902](?).writeThis[759896](arg _mt[759900]:_MT[227], arg this[759898]:listNode[273902](?), arg f[759899]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (759905 call writeThisDefaultImpl f[759899] this[759898])
    (759909 return _void[47])
  }
  function listNode[273902](?).readThis[759911](arg _mt[759915]:_MT[227], arg this[759913]:listNode[273902](?), arg f[759914]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (759919 call readThisDefaultImpl f[759914] this[759913])
    (759924 return _void[47])
  }
  type listNode[273902](?) val super[331123]:object[253] "super class" unknown eltType[273885] "type variable" unknown data[273889] eltType[273885] unknown next[273898](273897 'to unmanaged class from unknown'(273896 'to nilable class from type'(273895 call anymanaged listNode[376663](?) eltType[273885])))
  type anymanaged anynil listNode[759675](?)
  type anymanaged listNode[376663](?)
  function =[273915](ref arg l1[273912]:LinkedList[275404](?), const  ref arg l2[273922]:LinkedList[275404](?)) : _unknown[43] "assignop" "no doc" "no return value for void"
  {
    (273930 call(273926 call (partial) destroy _mt[232] l1[273912]))
    {
      unknown _indexOfInterest[273943] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[273944] "expr temp" "temp"
      (273953 'move' _iterator[273944](273951 call _getIterator l2[273922]))
      Defer
      {
        {
          (273969 call _freeIterator _iterator[273944])
        }
      }
      { scopeless type
        (273958 'move' _indexOfInterest[273943](273955 call iteratorIndex _iterator[273944]))
      }
      ForLoop
      {
        unknown i[273962] "index var" "insert auto destroy"
        (273964 'move' i[273962] _indexOfInterest[273943])
        (273941 call(273936 call (partial) append _mt[232] l1[273912]) i[273962])
        label _continueLabel[273948]
        _indexOfInterest[273943]
        _iterator[273944]
      }
      label _breakLabel[273949]
    }
    (487047 return _void[47])
  }
  function LinkedList[275404](?).init[274008](arg _mt[275408]:_MT[227], ref arg this[275406]:LinkedList[275404](?), arg eltType[274006]:_any[170](?), arg first[274017] :
  unknown call_tmp[683597] "expr temp" "maybe param" "maybe type" "temp" =
  nil[38], arg last[274028] :
  unknown call_tmp[683607] "expr temp" "maybe param" "maybe type" "temp" =
  nil[38]) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[441438] "temp" "type variable"
    (441440 'move' tmp[441438] eltType[274006])
    (441442 'init field' this[275406] c"eltType" tmp[441438])
    unknown call_tmp[683617] "expr temp" "maybe param" "maybe type" "temp"
    (683620 'move' call_tmp[683617](441459 '.v' this[275406] c"eltType"))
    unknown call_tmp[683622] "expr temp" "maybe param" "maybe type" "temp"
    (683625 'move' call_tmp[683622](441451 call anymanaged listNode[376663](?) call_tmp[683617]))
    unknown call_tmp[683627] "expr temp" "maybe param" "maybe type" "temp"
    (683630 'move' call_tmp[683627](441449 'to nilable class from type' call_tmp[683622]))
    unknown call_tmp[683632] "maybe param" "maybe type" "temp"
    (683635 'move' call_tmp[683632](441448 'to unmanaged class from unknown' call_tmp[683627]))
    unknown tmp[441446] "temp"
    (441453 'init var' tmp[441446] first[274017] call_tmp[683632])
    (441455 'init field' this[275406] c"first" tmp[441446])
    unknown call_tmp[683637] "expr temp" "maybe param" "maybe type" "temp"
    (683640 'move' call_tmp[683637](441475 '.v' this[275406] c"eltType"))
    unknown call_tmp[683642] "expr temp" "maybe param" "maybe type" "temp"
    (683645 'move' call_tmp[683642](441467 call anymanaged listNode[376663](?) call_tmp[683637]))
    unknown call_tmp[683647] "expr temp" "maybe param" "maybe type" "temp"
    (683650 'move' call_tmp[683647](441465 'to nilable class from type' call_tmp[683642]))
    unknown call_tmp[683652] "maybe param" "maybe type" "temp"
    (683655 'move' call_tmp[683652](441464 'to unmanaged class from unknown' call_tmp[683647]))
    unknown tmp[441462] "temp"
    (441469 'init var' tmp[441462] last[274028] call_tmp[683652])
    (441471 'init field' this[275406] c"last" tmp[441462])
    val tmp[441479]:int(64)[13] "temp"
    (441482 'default init var' tmp[441479] int(64)[13])
    (441484 '.=' this[275406] c"length" tmp[441479])
    (487049 return _void[47])
  }
  function LinkedList[275404](?).init=[274066](arg _mt[275412]:_MT[227], ref arg this[275410]:LinkedList[275404](?), arg l[274063]:LinkedList[275404](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[441488] "temp" "type variable"
    (441490 'move' tmp[441488](274073 call eltType _mt[232] l[274063]))
    (441492 'init field' this[275410] c"eltType" tmp[441488])
    unknown tmp[441496] "temp"
    unknown call_tmp[683659] "expr temp" "maybe param" "maybe type" "temp"
    (683662 'move' call_tmp[683659](441509 '.v' this[275410] c"eltType"))
    unknown call_tmp[683664] "expr temp" "maybe param" "maybe type" "temp"
    (683667 'move' call_tmp[683664](441501 call anymanaged listNode[376663](?) call_tmp[683659]))
    unknown call_tmp[683669] "expr temp" "maybe param" "maybe type" "temp"
    (683672 'move' call_tmp[683669](441499 'to nilable class from type' call_tmp[683664]))
    unknown call_tmp[683674] "expr temp" "maybe param" "maybe type" "temp"
    (683677 'move' call_tmp[683674](441498 'to unmanaged class from unknown' call_tmp[683669]))
    (441503 'default init var' tmp[441496] call_tmp[683674])
    (441505 '.=' this[275410] c"first" tmp[441496])
    unknown tmp[441512] "temp"
    unknown call_tmp[683679] "expr temp" "maybe param" "maybe type" "temp"
    (683682 'move' call_tmp[683679](441525 '.v' this[275410] c"eltType"))
    unknown call_tmp[683684] "expr temp" "maybe param" "maybe type" "temp"
    (683687 'move' call_tmp[683684](441517 call anymanaged listNode[376663](?) call_tmp[683679]))
    unknown call_tmp[683689] "expr temp" "maybe param" "maybe type" "temp"
    (683692 'move' call_tmp[683689](441515 'to nilable class from type' call_tmp[683684]))
    unknown call_tmp[683694] "expr temp" "maybe param" "maybe type" "temp"
    (683697 'move' call_tmp[683694](441514 'to unmanaged class from unknown' call_tmp[683689]))
    (441519 'default init var' tmp[441512] call_tmp[683694])
    (441521 '.=' this[275410] c"last" tmp[441512])
    val tmp[441528]:int(64)[13] "temp"
    (441531 'default init var' tmp[441528] int(64)[13])
    (441533 '.=' this[275410] c"length" tmp[441528])
    {
      unknown _indexOfInterest[274097] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274098] "expr temp" "temp"
      (274107 'move' _iterator[274098](274105 call _getIterator l[274063]))
      Defer
      {
        {
          (274123 call _freeIterator _iterator[274098])
        }
      }
      { scopeless type
        (274112 'move' _indexOfInterest[274097](274109 call iteratorIndex _iterator[274098]))
      }
      ForLoop
      {
        unknown i[274116] "index var" "insert auto destroy"
        (274118 'move' i[274116] _indexOfInterest[274097])
        (274095 call(274090 call (partial) append _mt[232] this[275410]) i[274116])
        label _continueLabel[274102]
        _indexOfInterest[274097]
        _iterator[274098]
      }
      label _breakLabel[274103]
    }
    (487051 return _void[47])
  }
  function LinkedList[275404](?).size[274134](arg _mt[275416]:_MT[227], arg this[275414]:LinkedList[275404](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[487055] "RVV" "temp"
    unknown call_tmp[683703] "expr temp" "maybe param" "maybe type" "temp"
    (683706 'move' call_tmp[683703](376696 call length _mt[232] this[275414]))
    (487060 'move' ret[487055](487059 'deref' call_tmp[683703]))
    (487057 return ret[487055])
  }
  function LinkedList[275404](?).these[274144](arg _mt[275420]:_MT[227], arg this[275418]:LinkedList[275404](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[487064] "RVV" "temp"
    unknown call_tmp[683710] "maybe param" "maybe type" "temp"
    (683713 'move' call_tmp[683710](376701 call first _mt[232] this[275418]))
    unknown tmp[274147] "insert auto destroy"
    (496355 'init var' tmp[274147] call_tmp[683710])
    {
      unknown tmp[274176] "temp"
      unknown call_tmp[683715] "expr temp" "maybe param" "maybe type" "temp"
      (683718 'move' call_tmp[683715](274197 call != tmp[274147] nil[38]))
      (274200 'move' tmp[274176](274195 call _cond_test call_tmp[683715]))
      WhileDo
      {
        {
          unknown yret[487068] "YVV" "temp"
          unknown call_tmp[683720] "expr temp" "maybe param" "maybe type" "temp"
          (683723 'move' call_tmp[683720](274156 call postfix! tmp[274147]))
          unknown call_tmp[683727] "expr temp" "maybe param" "maybe type" "temp"
          (683730 'move' call_tmp[683727](274158 call data _mt[232] call_tmp[683720]))
          (487071 'move' yret[487068](487070 'deref' call_tmp[683727]))
          (487073 yield yret[487068])
          unknown call_tmp[683732] "expr temp" "maybe param" "maybe type" "temp"
          (683735 'move' call_tmp[683732](274166 call postfix! tmp[274147]))
          unknown call_tmp[683739] "expr temp" "maybe param" "maybe type" "temp"
          (683742 'move' call_tmp[683739](274170 call next _mt[232] call_tmp[683732]))
          (274173 call = tmp[274147] call_tmp[683739])
        }
        label _continueLabel[274179]
        unknown call_tmp[683744] "expr temp" "maybe param" "maybe type" "temp"
        (683747 'move' call_tmp[683744](274187 call != tmp[274147] nil[38]))
        (274190 'move' tmp[274176](274185 call _cond_test call_tmp[683744]))
        tmp[274176]
      }
      label _breakLabel[274180]
    }
    (487066 return ret[487064])
  }
  function LinkedList[275404](?).append[274211](arg _mt[275424]:_MT[227], ref arg this[275422]:LinkedList[275404](?), arg e[274208] :
  (376711 call eltType _mt[232] this[275422])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[683753] "expr temp" "maybe param" "maybe type" "temp"
    (683756 'move' call_tmp[683753](376716 call last _mt[232] this[275422]))
    unknown call_tmp[683758] "expr temp" "maybe param" "maybe type" "temp"
    (683761 'move' call_tmp[683758](274258 call _cond_test call_tmp[683753]))
    if call_tmp[683758]
    {
      unknown call_tmp[683765] "expr temp" "maybe param" "maybe type" "temp"
      (683768 'move' call_tmp[683765](376721 call last _mt[232] this[275422]))
      unknown call_tmp[683770] "expr temp" "maybe param" "maybe type" "temp"
      (683773 'move' call_tmp[683770](274215 call postfix! call_tmp[683765]))
      unknown call_tmp[683777] "expr temp" "maybe param" "maybe type" "temp"
      (683780 'move' call_tmp[683777](274217 call next _mt[232] call_tmp[683770]))
      unknown call_tmp[683784] "expr temp" "maybe param" "maybe type" "temp"
      (683787 'move' call_tmp[683784](376727 call eltType _mt[232] this[275422]))
      unknown call_tmp[683789] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (683792 'move' call_tmp[683789](691641 'new' anymanaged listNode[376663](?) call_tmp[683784] e[274208](_chpl_manager = unmanaged[209](?))))
      (274227 call = call_tmp[683777] call_tmp[683789])
      unknown call_tmp[683796] "expr temp" "maybe param" "maybe type" "temp"
      (683799 'move' call_tmp[683796](376733 call last _mt[232] this[275422]))
      unknown call_tmp[683803] "expr temp" "maybe param" "maybe type" "temp"
      (683806 'move' call_tmp[683803](376738 call last _mt[232] this[275422]))
      unknown call_tmp[683808] "expr temp" "maybe param" "maybe type" "temp"
      (683811 'move' call_tmp[683808](274233 call postfix! call_tmp[683803]))
      unknown call_tmp[683815] "expr temp" "maybe param" "maybe type" "temp"
      (683818 'move' call_tmp[683815](274235 call next _mt[232] call_tmp[683808]))
      (274238 call = call_tmp[683796] call_tmp[683815])
    }
    {
      unknown call_tmp[683822] "expr temp" "maybe param" "maybe type" "temp"
      (683825 'move' call_tmp[683822](376743 call first _mt[232] this[275422]))
      unknown call_tmp[683829] "expr temp" "maybe param" "maybe type" "temp"
      (683832 'move' call_tmp[683829](376749 call eltType _mt[232] this[275422]))
      unknown call_tmp[683834] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (683837 'move' call_tmp[683834](691642 'new' anymanaged listNode[376663](?) call_tmp[683829] e[274208](_chpl_manager = unmanaged[209](?))))
      (274249 call = call_tmp[683822] call_tmp[683834])
      unknown call_tmp[683841] "expr temp" "maybe param" "maybe type" "temp"
      (683844 'move' call_tmp[683841](376755 call last _mt[232] this[275422]))
      unknown call_tmp[683848] "expr temp" "maybe param" "maybe type" "temp"
      (683851 'move' call_tmp[683848](376760 call first _mt[232] this[275422]))
      (274255 call = call_tmp[683841] call_tmp[683848])
    }
    unknown call_tmp[683855] "expr temp" "maybe param" "maybe type" "temp"
    (683858 'move' call_tmp[683855](376765 call length _mt[232] this[275422]))
    (274265 call += call_tmp[683855] 1)
    (487075 return _void[47])
  }
  function LinkedList[275404](?).push_back[274276](arg _mt[275428]:_MT[227], arg this[275426]:LinkedList[275404](?), arg e[274273] :
  (376770 call eltType _mt[232] this[275426])) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    (274281 call(376774 call (partial) append _mt[232] this[275426]) e[274273])
    (487077 return _void[47])
  }
  function LinkedList[275404](?).append[274292](arg _mt[275432]:_MT[227], arg this[275430]:LinkedList[275404](?), arg e[274289] :
  (376780 call eltType _mt[232] this[275430]), arg es[274297] ... :
  (376785 call eltType _mt[232] this[275430])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (274304 call(376789 call (partial) append _mt[232] this[275430]) e[274289])
    {
      unknown i[274319] "insert auto destroy"
      (496357 'init var' i[274319] 0)
      unknown tmp[274320] "maybe param" "temp"
      (274332 'move' tmp[274320](274330 call chpl_compute_low_param_loop_bound 1 k[274295]))
      unknown tmp[274321] "maybe param" "temp"
      (274339 'move' tmp[274321](274337 call chpl_compute_high_param_loop_bound 1 k[274295]))
      unknown tmp[274322] "maybe param" "temp"
      (274342 'move' tmp[274322] 1)
      ParamForLoop
      { i[274319] tmp[274320] tmp[274321] tmp[274322]
        unknown call_tmp[683872] "expr temp" "maybe param" "maybe type" "temp"
        (683875 'move' call_tmp[683872](274315 call es[274297] i[274319]))
        (274317 call(376795 call (partial) append _mt[232] this[275430]) call_tmp[683872])
      }
      label _unused_continueLabel[274324]
      label _breakLabel[274323]
    }
    (487079 return _void[47])
  }
  function LinkedList[275404](?).prepend[274361](arg _mt[275436]:_MT[227], arg this[275434]:LinkedList[275404](?), arg e[274358] :
  (376803 call eltType _mt[232] this[275434])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[683881] "expr temp" "maybe param" "maybe type" "temp"
    (683884 'move' call_tmp[683881](376808 call first _mt[232] this[275434]))
    unknown call_tmp[683888] "expr temp" "maybe param" "maybe type" "temp"
    (683891 'move' call_tmp[683888](376814 call eltType _mt[232] this[275434]))
    unknown call_tmp[683895] "expr temp" "maybe param" "maybe type" "temp"
    (683898 'move' call_tmp[683895](376820 call first _mt[232] this[275434]))
    unknown call_tmp[683900] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (683903 'move' call_tmp[683900](691643 'new' anymanaged listNode[376663](?) call_tmp[683888] e[274358] call_tmp[683895](_chpl_manager = unmanaged[209](?))))
    (274372 call = call_tmp[683881] call_tmp[683900])
    unknown call_tmp[683907] "expr temp" "maybe param" "maybe type" "temp"
    (683910 'move' call_tmp[683907](376825 call last _mt[232] this[275434]))
    unknown call_tmp[683912] "expr temp" "maybe param" "maybe type" "temp"
    (683915 'move' call_tmp[683912](274378 call == call_tmp[683907] nil[38]))
    unknown call_tmp[683917] "expr temp" "maybe param" "maybe type" "temp"
    (683920 'move' call_tmp[683917](274385 call _cond_test call_tmp[683912]))
    if call_tmp[683917]
    {
      unknown call_tmp[683924] "expr temp" "maybe param" "maybe type" "temp"
      (683927 'move' call_tmp[683924](376830 call last _mt[232] this[275434]))
      unknown call_tmp[683931] "expr temp" "maybe param" "maybe type" "temp"
      (683934 'move' call_tmp[683931](376835 call first _mt[232] this[275434]))
      (274382 call = call_tmp[683924] call_tmp[683931])
    }
    unknown call_tmp[683938] "expr temp" "maybe param" "maybe type" "temp"
    (683941 'move' call_tmp[683938](376840 call length _mt[232] this[275434]))
    (274392 call += call_tmp[683938] 1)
    (487081 return _void[47])
  }
  function LinkedList[275404](?).push_front[274403](arg _mt[275440]:_MT[227], arg this[275438]:LinkedList[275404](?), arg e[274400] :
  (376845 call eltType _mt[232] this[275438])) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    (274408 call(376851 call (partial) prepend _mt[232] this[275438]) e[274400])
    (487083 return _void[47])
  }
  function LinkedList[275404](?).concat[274422](arg _mt[275444]:_MT[227], arg this[275442]:LinkedList[275404](?), arg l[274419] :
  unknown call_tmp[683949] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[274431] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274432] "expr temp" "temp"
      (274441 'move' _iterator[274432](274439 call _getIterator l[274419]))
      Defer
      {
        {
          (274457 call _freeIterator _iterator[274432])
        }
      }
      { scopeless type
        (274446 'move' _indexOfInterest[274431](274443 call iteratorIndex _iterator[274432]))
      }
      ForLoop
      {
        unknown e[274450] "index var" "insert auto destroy"
        (274452 'move' e[274450] _indexOfInterest[274431])
        (274429 call(376863 call (partial) append _mt[232] this[275442]) e[274450])
        label _continueLabel[274436]
        _indexOfInterest[274431]
        _iterator[274432]
      }
      label _breakLabel[274437]
    }
    (487085 return _void[47])
  }
  function LinkedList[275404](?).remove[274473](arg _mt[275448]:_MT[227], ref arg this[275446]:LinkedList[275404](?), arg x[274470] :
  (376869 call eltType _mt[232] this[275446])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[683960] "maybe param" "maybe type" "temp"
    (683963 'move' call_tmp[683960](376874 call first _mt[232] this[275446]))
    unknown tmp[274476] "insert auto destroy"
    (496359 'init var' tmp[274476] call_tmp[683960])
    { scopeless type
      unknown call_type_tmp[444492] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[683967] "expr temp" "maybe param" "maybe type" "temp"
      (683970 'move' call_tmp[683967](376879 call first _mt[232] this[275446]))
      (444496 'move' call_type_tmp[444492](274480 'typeof' call_tmp[683967]))
    }
    unknown prev[274482] "insert auto destroy"
    (496361 'init var' prev[274482] nil[38] call_type_tmp[444492])
    {
      unknown tmp[274517] "temp"
      unknown tmp[409140] "maybe param" "temp"
      (409151 'move' tmp[409140](274551 call != tmp[274476] nil[38]))
      unknown call_tmp[683972] "expr temp" "maybe param" "maybe type" "temp"
      (683975 'move' call_tmp[683972](409153 call _cond_invalid tmp[409140]))
      if call_tmp[683972]
      {
        (409156 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[527651] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[527652] "maybe param" "temp"
      unknown call_tmp[683977] "expr temp" "maybe param" "maybe type" "temp"
      (683980 'move' call_tmp[683977](409141 call isTrue tmp[409140]))
      (527657 'move' tmp[527652](527655 call _cond_test call_tmp[683977]))
      if tmp[527652]
      {
        unknown tmp[527659] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[683982] "expr temp" "maybe param" "maybe type" "temp"
        (683985 'move' call_tmp[683982](274559 call postfix! tmp[274476]))
        unknown call_tmp[683989] "expr temp" "maybe param" "maybe type" "temp"
        (683992 'move' call_tmp[683989](274557 call data _mt[232] call_tmp[683982]))
        unknown call_tmp[683994] "expr temp" "maybe param" "maybe type" "temp"
        (683997 'move' call_tmp[683994](274555 call != call_tmp[683989] x[274470]))
        (527661 'move' tmp[527659](409144 call isTrue call_tmp[683994]))
        (527666 'move' tmp[527651](527663 '_paramFoldLogical' tmp[527652] tmp[527659]))
      }
      {
        (527671 'move' tmp[527651](527668 '_paramFoldLogical' tmp[527652] 0))
      }
      (274563 'move' tmp[274517](274547 call _cond_test tmp[527651]))
      WhileDo
      {
        {
          (274503 call = prev[274482] tmp[274476])
          unknown call_tmp[683999] "expr temp" "maybe param" "maybe type" "temp"
          (684002 'move' call_tmp[683999](274509 call postfix! tmp[274476]))
          unknown call_tmp[684006] "expr temp" "maybe param" "maybe type" "temp"
          (684009 'move' call_tmp[684006](274511 call next _mt[232] call_tmp[683999]))
          (274514 call = tmp[274476] call_tmp[684006])
        }
        label _continueLabel[274520]
        unknown tmp[409119] "maybe param" "temp"
        (409130 'move' tmp[409119](274530 call != tmp[274476] nil[38]))
        unknown call_tmp[684011] "expr temp" "maybe param" "maybe type" "temp"
        (684014 'move' call_tmp[684011](409132 call _cond_invalid tmp[409119]))
        if call_tmp[684011]
        {
          (409135 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[527678] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[527679] "maybe param" "temp"
        unknown call_tmp[684016] "expr temp" "maybe param" "maybe type" "temp"
        (684019 'move' call_tmp[684016](409120 call isTrue tmp[409119]))
        (527684 'move' tmp[527679](527682 call _cond_test call_tmp[684016]))
        if tmp[527679]
        {
          unknown tmp[527686] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[684021] "expr temp" "maybe param" "maybe type" "temp"
          (684024 'move' call_tmp[684021](274538 call postfix! tmp[274476]))
          unknown call_tmp[684028] "expr temp" "maybe param" "maybe type" "temp"
          (684031 'move' call_tmp[684028](274536 call data _mt[232] call_tmp[684021]))
          unknown call_tmp[684033] "expr temp" "maybe param" "maybe type" "temp"
          (684036 'move' call_tmp[684033](274534 call != call_tmp[684028] x[274470]))
          (527688 'move' tmp[527686](409123 call isTrue call_tmp[684033]))
          (527693 'move' tmp[527678](527690 '_paramFoldLogical' tmp[527679] tmp[527686]))
        }
        {
          (527698 'move' tmp[527678](527695 '_paramFoldLogical' tmp[527679] 0))
        }
        (274542 'move' tmp[274517](274526 call _cond_test tmp[527678]))
        tmp[274517]
      }
      label _breakLabel[274521]
    }
    unknown call_tmp[684038] "expr temp" "maybe param" "maybe type" "temp"
    (684041 'move' call_tmp[684038](274568 call != tmp[274476] nil[38]))
    unknown call_tmp[684043] "expr temp" "maybe param" "maybe type" "temp"
    (684046 'move' call_tmp[684043](274638 call _cond_test call_tmp[684038]))
    if call_tmp[684043]
    {
      unknown call_tmp[684048] "expr temp" "maybe param" "maybe type" "temp"
      (684051 'move' call_tmp[684048](274572 call != prev[274482] nil[38]))
      unknown call_tmp[684053] "expr temp" "maybe param" "maybe type" "temp"
      (684056 'move' call_tmp[684053](274589 call _cond_test call_tmp[684048]))
      if call_tmp[684053]
      {
        unknown call_tmp[684058] "expr temp" "maybe param" "maybe type" "temp"
        (684061 'move' call_tmp[684058](274575 call postfix! prev[274482]))
        unknown call_tmp[684065] "expr temp" "maybe param" "maybe type" "temp"
        (684068 'move' call_tmp[684065](274577 call next _mt[232] call_tmp[684058]))
        unknown call_tmp[684070] "expr temp" "maybe param" "maybe type" "temp"
        (684073 'move' call_tmp[684070](274581 call postfix! tmp[274476]))
        unknown call_tmp[684077] "expr temp" "maybe param" "maybe type" "temp"
        (684080 'move' call_tmp[684077](274583 call next _mt[232] call_tmp[684070]))
        (274586 call = call_tmp[684065] call_tmp[684077])
      }
      unknown call_tmp[684084] "expr temp" "maybe param" "maybe type" "temp"
      (684087 'move' call_tmp[684084](376898 call first _mt[232] this[275446]))
      unknown call_tmp[684089] "expr temp" "maybe param" "maybe type" "temp"
      (684092 'move' call_tmp[684089](274597 call == call_tmp[684084] tmp[274476]))
      unknown call_tmp[684094] "expr temp" "maybe param" "maybe type" "temp"
      (684097 'move' call_tmp[684094](274609 call _cond_test call_tmp[684089]))
      if call_tmp[684094]
      {
        unknown call_tmp[684101] "expr temp" "maybe param" "maybe type" "temp"
        (684104 'move' call_tmp[684101](376904 call first _mt[232] this[275446]))
        unknown call_tmp[684106] "expr temp" "maybe param" "maybe type" "temp"
        (684109 'move' call_tmp[684106](274601 call postfix! tmp[274476]))
        unknown call_tmp[684113] "expr temp" "maybe param" "maybe type" "temp"
        (684116 'move' call_tmp[684113](274603 call next _mt[232] call_tmp[684106]))
        (274606 call = call_tmp[684101] call_tmp[684113])
      }
      unknown call_tmp[684120] "expr temp" "maybe param" "maybe type" "temp"
      (684123 'move' call_tmp[684120](376910 call last _mt[232] this[275446]))
      unknown call_tmp[684125] "expr temp" "maybe param" "maybe type" "temp"
      (684128 'move' call_tmp[684125](274616 call == call_tmp[684120] tmp[274476]))
      unknown call_tmp[684130] "expr temp" "maybe param" "maybe type" "temp"
      (684133 'move' call_tmp[684130](274623 call _cond_test call_tmp[684125]))
      if call_tmp[684130]
      {
        unknown call_tmp[684137] "expr temp" "maybe param" "maybe type" "temp"
        (684140 'move' call_tmp[684137](376916 call last _mt[232] this[275446]))
        (274620 call = call_tmp[684137] prev[274482])
      }
      (274630 call chpl__delete tmp[274476])
      unknown call_tmp[684144] "expr temp" "maybe param" "maybe type" "temp"
      (684147 'move' call_tmp[684144](376923 call length _mt[232] this[275446]))
      (274635 call -= call_tmp[684144] 1)
    }
    (487087 return _void[47])
  }
  function LinkedList[275404](?).pop_front[274646](arg _mt[275452]:_MT[227], arg this[275450]:LinkedList[275404](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[487091] "RVV" "temp"
    unknown tmp[409161] "maybe param" "temp"
    (409172 'move' tmp[409161] 1)
    unknown call_tmp[684149] "expr temp" "maybe param" "maybe type" "temp"
    (684152 'move' call_tmp[684149](409174 call _cond_invalid tmp[409161]))
    if call_tmp[684149]
    {
      (409177 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[527705] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527706] "maybe param" "temp"
    unknown call_tmp[684154] "expr temp" "maybe param" "maybe type" "temp"
    (684157 'move' call_tmp[684154](409162 call isTrue tmp[409161]))
    (527711 'move' tmp[527706](527709 call _cond_test call_tmp[684154]))
    if tmp[527706]
    {
      unknown tmp[527713] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[684161] "expr temp" "maybe param" "maybe type" "temp"
      (684164 'move' call_tmp[684161](376934 call length _mt[232] this[275450]))
      unknown call_tmp[684166] "expr temp" "maybe param" "maybe type" "temp"
      (684169 'move' call_tmp[684166](274657 call < call_tmp[684161] 1))
      (527715 'move' tmp[527713](409165 call isTrue call_tmp[684166]))
      (527720 'move' tmp[527705](527717 '_paramFoldLogical' tmp[527706] tmp[527713]))
    }
    {
      (527725 'move' tmp[527705](527722 '_paramFoldLogical' tmp[527706] 0))
    }
    unknown call_tmp[684171] "expr temp" "maybe param" "maybe type" "temp"
    (684174 'move' call_tmp[684171](274685 call _cond_test tmp[527705]))
    if call_tmp[684171]
    {
      (274682 call boundsCheckHalt module=[244] HaltWrappers[197622] "pop_front on empty list")
    }
    unknown call_tmp[684178] "expr temp" "maybe param" "maybe type" "temp"
    (684181 'move' call_tmp[684178](376940 call first _mt[232] this[275450]))
    unknown call_tmp[684183] "maybe param" "maybe type" "temp"
    (684186 'move' call_tmp[684183](274690 call postfix! call_tmp[684178]))
    unknown oldfirst[274692] "insert auto destroy"
    (496363 'init var' oldfirst[274692] call_tmp[684183])
    unknown call_tmp[684190] "expr temp" "maybe param" "maybe type" "temp"
    (684193 'move' call_tmp[684190](376945 call first _mt[232] this[275450]))
    unknown call_tmp[684195] "expr temp" "maybe param" "maybe type" "temp"
    (684198 'move' call_tmp[684195](274696 call postfix! call_tmp[684190]))
    unknown call_tmp[684202] "maybe param" "maybe type" "temp"
    (684205 'move' call_tmp[684202](274698 call next _mt[232] call_tmp[684195]))
    unknown newfirst[274701] "insert auto destroy"
    (496365 'init var' newfirst[274701] call_tmp[684202])
    unknown call_tmp[684209] "maybe param" "maybe type" "temp"
    (684212 'move' call_tmp[684209](274705 call data _mt[232] oldfirst[274692]))
    unknown ret[274708] "insert auto destroy"
    (496367 'init var' ret[274708] call_tmp[684209])
    unknown call_tmp[684216] "expr temp" "maybe param" "maybe type" "temp"
    (684219 'move' call_tmp[684216](376951 call first _mt[232] this[275450]))
    (274713 call = call_tmp[684216] newfirst[274701])
    unknown call_tmp[684223] "expr temp" "maybe param" "maybe type" "temp"
    (684226 'move' call_tmp[684223](376957 call last _mt[232] this[275450]))
    unknown call_tmp[684228] "expr temp" "maybe param" "maybe type" "temp"
    (684231 'move' call_tmp[684228](274718 call == call_tmp[684223] oldfirst[274692]))
    unknown call_tmp[684233] "expr temp" "maybe param" "maybe type" "temp"
    (684236 'move' call_tmp[684233](274725 call _cond_test call_tmp[684228]))
    if call_tmp[684233]
    {
      unknown call_tmp[684240] "expr temp" "maybe param" "maybe type" "temp"
      (684243 'move' call_tmp[684240](376963 call last _mt[232] this[275450]))
      (274722 call = call_tmp[684240] newfirst[274701])
    }
    unknown call_tmp[684247] "expr temp" "maybe param" "maybe type" "temp"
    (684250 'move' call_tmp[684247](376969 call length _mt[232] this[275450]))
    (274732 call -= call_tmp[684247] 1)
    (274737 call chpl__delete oldfirst[274692])
    unknown call_tmp[684254] "expr temp" "maybe param" "maybe type" "temp"
    (684257 'move' call_tmp[684254](487096 call eltType _mt[232] this[275450]))
    (487100 'move' ret[487091](487099 'coerce' ret[274708] call_tmp[684254]))
    (487093 return ret[487091])
    (329792 'used modules list'(274651 'use' HaltWrappers[197622] 'only' ))
  }
  { scopeless type
    (376928 call eltType _mt[232] this[275450])
  }
  function LinkedList[275404](?).destroy[274748](arg _mt[275456]:_MT[227], arg this[275454]:LinkedList[275404](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[684263] "maybe param" "maybe type" "temp"
    (684266 'move' call_tmp[684263](376976 call first _mt[232] this[275454]))
    unknown current[274751] "insert auto destroy"
    (496369 'init var' current[274751] call_tmp[684263])
    {
      unknown tmp[274779] "temp"
      unknown call_tmp[684268] "expr temp" "maybe param" "maybe type" "temp"
      (684271 'move' call_tmp[684268](274800 call != current[274751] nil[38]))
      (274803 'move' tmp[274779](274798 call _cond_test call_tmp[684268]))
      WhileDo
      {
        {
          unknown call_tmp[684273] "expr temp" "maybe param" "maybe type" "temp"
          (684276 'move' call_tmp[684273](274760 call postfix! current[274751]))
          unknown call_tmp[684280] "maybe param" "maybe type" "temp"
          (684283 'move' call_tmp[684280](274762 call next _mt[232] call_tmp[684273]))
          unknown next[274765] "insert auto destroy"
          (496371 'init var' next[274765] call_tmp[684280])
          (274771 call chpl__delete current[274751])
          (274776 call = current[274751] next[274765])
        }
        label _continueLabel[274782]
        unknown call_tmp[684285] "expr temp" "maybe param" "maybe type" "temp"
        (684288 'move' call_tmp[684285](274790 call != current[274751] nil[38]))
        (274793 'move' tmp[274779](274788 call _cond_test call_tmp[684285]))
        tmp[274779]
      }
      label _breakLabel[274783]
    }
    unknown call_tmp[684292] "expr temp" "maybe param" "maybe type" "temp"
    (684295 'move' call_tmp[684292](376987 call first _mt[232] this[275454]))
    (274808 call = call_tmp[684292] nil[38])
    unknown call_tmp[684299] "expr temp" "maybe param" "maybe type" "temp"
    (684302 'move' call_tmp[684299](376992 call last _mt[232] this[275454]))
    (274813 call = call_tmp[684299] nil[38])
    unknown call_tmp[684306] "expr temp" "maybe param" "maybe type" "temp"
    (684309 'move' call_tmp[684306](376997 call length _mt[232] this[275454]))
    (274818 call = call_tmp[684306] 0)
    (487102 return _void[47])
  }
  function LinkedList[275404](?).deinit[274825](arg _mt[275460]:_MT[227], arg this[275458]:LinkedList[275404](?)) : _unknown[43] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (274829 call(377001 call (partial) destroy _mt[232] this[275458]))
    (487104 return _void[47])
  }
  function LinkedList[275404](?).writeThis[274838](arg _mt[275464]:_MT[227], arg this[275462]:LinkedList[275404](?), arg f[274836]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[684315] "maybe param" "maybe type" "temp"
    (684318 'move' call_tmp[684315](274845 call(274841 call (partial) binary _mt[232] f[274836])))
    unknown binary[274846] "insert auto destroy"
    (496373 'init var' binary[274846] call_tmp[684315])
    unknown call_tmp[684322] "maybe param" "maybe type" "temp"
    (684325 'move' call_tmp[684322](274856 call(274851 call (partial) styleElement _mt[232] f[274836]) QIO_STYLE_ELEMENT_ARRAY[19366]))
    unknown arrayStyle[274857] "insert auto destroy"
    (496375 'init var' arrayStyle[274857] call_tmp[684322])
    unknown tmp[409182] "maybe param" "temp"
    (409193 'move' tmp[409182](274862 call == arrayStyle[274857] QIO_ARRAY_FORMAT_SPACE[19390]))
    unknown call_tmp[684327] "expr temp" "maybe param" "maybe type" "temp"
    (684330 'move' call_tmp[684327](409195 call _cond_invalid tmp[409182]))
    if call_tmp[684327]
    {
      (409198 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isspace[274869] "insert auto destroy"
    unknown tmp[527732] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527733] "maybe param" "temp"
    unknown call_tmp[684332] "expr temp" "maybe param" "maybe type" "temp"
    (684335 'move' call_tmp[684332](409183 call isTrue tmp[409182]))
    (527738 'move' tmp[527733](527736 call _cond_test call_tmp[684332]))
    if tmp[527733]
    {
      unknown tmp[527740] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[684337] "expr temp" "maybe param" "maybe type" "temp"
      (684340 'move' call_tmp[684337](274865 call ! binary[274846]))
      (527742 'move' tmp[527740](409186 call isTrue call_tmp[684337]))
      (527747 'move' tmp[527732](527744 '_paramFoldLogical' tmp[527733] tmp[527740]))
    }
    {
      (527752 'move' tmp[527732](527749 '_paramFoldLogical' tmp[527733] 0))
    }
    (496377 'init var' isspace[274869] tmp[527732])
    unknown tmp[409203] "maybe param" "temp"
    (409214 'move' tmp[409203](274874 call == arrayStyle[274857] QIO_ARRAY_FORMAT_JSON[19398]))
    unknown call_tmp[684342] "expr temp" "maybe param" "maybe type" "temp"
    (684345 'move' call_tmp[684342](409216 call _cond_invalid tmp[409203]))
    if call_tmp[684342]
    {
      (409219 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isjson[274881] "insert auto destroy"
    unknown tmp[527759] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527760] "maybe param" "temp"
    unknown call_tmp[684347] "expr temp" "maybe param" "maybe type" "temp"
    (684350 'move' call_tmp[684347](409204 call isTrue tmp[409203]))
    (527765 'move' tmp[527760](527763 call _cond_test call_tmp[684347]))
    if tmp[527760]
    {
      unknown tmp[527767] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[684352] "expr temp" "maybe param" "maybe type" "temp"
      (684355 'move' call_tmp[684352](274877 call ! binary[274846]))
      (527769 'move' tmp[527767](409207 call isTrue call_tmp[684352]))
      (527774 'move' tmp[527759](527771 '_paramFoldLogical' tmp[527760] tmp[527767]))
    }
    {
      (527779 'move' tmp[527759](527776 '_paramFoldLogical' tmp[527760] 0))
    }
    (496379 'init var' isjson[274881] tmp[527759])
    unknown tmp[409224] "maybe param" "temp"
    (409235 'move' tmp[409224](274886 call == arrayStyle[274857] QIO_ARRAY_FORMAT_CHPL[19394]))
    unknown call_tmp[684357] "expr temp" "maybe param" "maybe type" "temp"
    (684360 'move' call_tmp[684357](409237 call _cond_invalid tmp[409224]))
    if call_tmp[684357]
    {
      (409240 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[274893] "insert auto destroy"
    unknown tmp[527786] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527787] "maybe param" "temp"
    unknown call_tmp[684362] "expr temp" "maybe param" "maybe type" "temp"
    (684365 'move' call_tmp[684362](409225 call isTrue tmp[409224]))
    (527792 'move' tmp[527787](527790 call _cond_test call_tmp[684362]))
    if tmp[527787]
    {
      unknown tmp[527794] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[684367] "expr temp" "maybe param" "maybe type" "temp"
      (684370 'move' call_tmp[684367](274889 call ! binary[274846]))
      (527796 'move' tmp[527794](409228 call isTrue call_tmp[684367]))
      (527801 'move' tmp[527786](527798 '_paramFoldLogical' tmp[527787] tmp[527794]))
    }
    {
      (527806 'move' tmp[527786](527803 '_paramFoldLogical' tmp[527787] 0))
    }
    (496381 'init var' ischpl[274893] tmp[527786])
    unknown call_tmp[684372] "expr temp" "maybe param" "maybe type" "temp"
    (684375 'move' call_tmp[684372](274903 call _cond_test binary[274846]))
    if call_tmp[684372]
    {
      unknown call_tmp[684379] "expr temp" "maybe param" "maybe type" "temp"
      (684382 'move' call_tmp[684379](377020 call length _mt[232] this[275462]))
      (274899 call <~> f[274836] call_tmp[684379])
    }
    unknown tmp[409245] "maybe param" "temp"
    (409256 'move' tmp[409245] isjson[274881])
    unknown call_tmp[684384] "expr temp" "maybe param" "maybe type" "temp"
    (684387 'move' call_tmp[684384](409258 call _cond_invalid tmp[409245]))
    if call_tmp[684384]
    {
      (409261 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[527813] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527814] "maybe param" "temp"
    unknown call_tmp[684389] "expr temp" "maybe param" "maybe type" "temp"
    (684392 'move' call_tmp[684389](409246 call isTrue tmp[409245]))
    (527819 'move' tmp[527814](527817 call _cond_test call_tmp[684389]))
    if tmp[527814]
    {
      (527824 'move' tmp[527813](527821 '_paramFoldLogical' tmp[527814] 1))
    }
    {
      unknown tmp[527826] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (527828 'move' tmp[527826](409250 call isTrue ischpl[274893]))
      (527833 'move' tmp[527813](527830 '_paramFoldLogical' tmp[527814] tmp[527826]))
    }
    unknown call_tmp[684394] "expr temp" "maybe param" "maybe type" "temp"
    (684397 'move' call_tmp[684394](274921 call _cond_test tmp[527813]))
    if call_tmp[684394]
    {
      unknown call_tmp[684399] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (684402 'move' call_tmp[684399](691644 'new' ioLiteral[226016] "["))
      (274917 call <~> f[274836] call_tmp[684399])
    }
    unknown first[274926] "insert auto destroy"
    (496383 'init var' first[274926] 1)
    {
      unknown _indexOfInterest[274983] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[274984] "expr temp" "temp"
      (274993 'move' _iterator[274984](274991 call _getIterator this[275462]))
      Defer
      {
        {
          (275009 call _freeIterator _iterator[274984])
        }
      }
      { scopeless type
        (274998 'move' _indexOfInterest[274983](274995 call iteratorIndex _iterator[274984]))
      }
      ForLoop
      {
        unknown e[275002] "index var" "insert auto destroy"
        (275004 'move' e[275002] _indexOfInterest[274983])
        {
          unknown call_tmp[684404] "expr temp" "maybe param" "maybe type" "temp"
          (684407 'move' call_tmp[684404](274972 call _cond_test first[274926]))
          if call_tmp[684404]
          {
            (274934 call = first[274926] 0)
          }
          {
            unknown call_tmp[684409] "expr temp" "maybe param" "maybe type" "temp"
            (684412 'move' call_tmp[684409](274965 call _cond_test isspace[274869]))
            if call_tmp[684409]
            {
              unknown call_tmp[684414] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
              (684417 'move' call_tmp[684414](691645 'new' ioLiteral[226016] " "))
              (274944 call <~> f[274836] call_tmp[684414])
            }
            {
              unknown tmp[409266] "maybe param" "temp"
              (409277 'move' tmp[409266] isjson[274881])
              unknown call_tmp[684419] "expr temp" "maybe param" "maybe type" "temp"
              (684422 'move' call_tmp[684419](409279 call _cond_invalid tmp[409266]))
              if call_tmp[684419]
              {
                (409282 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[527840] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[527841] "maybe param" "temp"
              unknown call_tmp[684424] "expr temp" "maybe param" "maybe type" "temp"
              (684427 'move' call_tmp[684424](409267 call isTrue tmp[409266]))
              (527846 'move' tmp[527841](527844 call _cond_test call_tmp[684424]))
              if tmp[527841]
              {
                (527851 'move' tmp[527840](527848 '_paramFoldLogical' tmp[527841] 1))
              }
              {
                unknown tmp[527853] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (527855 'move' tmp[527853](409271 call isTrue ischpl[274893]))
                (527860 'move' tmp[527840](527857 '_paramFoldLogical' tmp[527841] tmp[527853]))
              }
              unknown call_tmp[684429] "expr temp" "maybe param" "maybe type" "temp"
              (684432 'move' call_tmp[684429](274960 call _cond_test tmp[527840]))
              if call_tmp[684429]
              {
                unknown call_tmp[684434] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (684437 'move' call_tmp[684434](691646 'new' ioLiteral[226016] ", "))
                (274957 call <~> f[274836] call_tmp[684434])
              }
            }
          }
          (274980 call <~> f[274836] e[275002])
        }
        label _continueLabel[274988]
        _indexOfInterest[274983]
        _iterator[274984]
      }
      label _breakLabel[274989]
    }
    unknown tmp[409287] "maybe param" "temp"
    (409298 'move' tmp[409287] isjson[274881])
    unknown call_tmp[684439] "expr temp" "maybe param" "maybe type" "temp"
    (684442 'move' call_tmp[684439](409300 call _cond_invalid tmp[409287]))
    if call_tmp[684439]
    {
      (409303 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[527867] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527868] "maybe param" "temp"
    unknown call_tmp[684444] "expr temp" "maybe param" "maybe type" "temp"
    (684447 'move' call_tmp[684444](409288 call isTrue tmp[409287]))
    (527873 'move' tmp[527868](527871 call _cond_test call_tmp[684444]))
    if tmp[527868]
    {
      (527878 'move' tmp[527867](527875 '_paramFoldLogical' tmp[527868] 1))
    }
    {
      unknown tmp[527880] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (527882 'move' tmp[527880](409292 call isTrue ischpl[274893]))
      (527887 'move' tmp[527867](527884 '_paramFoldLogical' tmp[527868] tmp[527880]))
    }
    unknown call_tmp[684449] "expr temp" "maybe param" "maybe type" "temp"
    (684452 'move' call_tmp[684449](275030 call _cond_test tmp[527867]))
    if call_tmp[684449]
    {
      unknown call_tmp[684454] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (684457 'move' call_tmp[684454](691647 'new' ioLiteral[226016] "]"))
      (275026 call <~> f[274836] call_tmp[684454])
    }
    (487106 return _void[47])
  }
  function LinkedList[275404](?).readThis[275040](arg _mt[275468]:_MT[227], arg this[275466]:LinkedList[275404](?), arg f[275038]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[684461] "maybe param" "maybe type" "temp"
    (684464 'move' call_tmp[684461](275047 call(275043 call (partial) binary _mt[232] f[275038])))
    unknown binary[275048] "insert auto destroy"
    (496385 'init var' binary[275048] call_tmp[684461])
    unknown call_tmp[684468] "maybe param" "maybe type" "temp"
    (684471 'move' call_tmp[684468](275058 call(275053 call (partial) styleElement _mt[232] f[275038]) QIO_STYLE_ELEMENT_ARRAY[19366]))
    unknown arrayStyle[275059] "insert auto destroy"
    (496387 'init var' arrayStyle[275059] call_tmp[684468])
    unknown tmp[409308] "maybe param" "temp"
    (409319 'move' tmp[409308](275064 call == arrayStyle[275059] QIO_ARRAY_FORMAT_SPACE[19390]))
    unknown call_tmp[684473] "expr temp" "maybe param" "maybe type" "temp"
    (684476 'move' call_tmp[684473](409321 call _cond_invalid tmp[409308]))
    if call_tmp[684473]
    {
      (409324 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isspace[275071] "insert auto destroy"
    unknown tmp[527894] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527895] "maybe param" "temp"
    unknown call_tmp[684478] "expr temp" "maybe param" "maybe type" "temp"
    (684481 'move' call_tmp[684478](409309 call isTrue tmp[409308]))
    (527900 'move' tmp[527895](527898 call _cond_test call_tmp[684478]))
    if tmp[527895]
    {
      unknown tmp[527902] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[684483] "expr temp" "maybe param" "maybe type" "temp"
      (684486 'move' call_tmp[684483](275067 call ! binary[275048]))
      (527904 'move' tmp[527902](409312 call isTrue call_tmp[684483]))
      (527909 'move' tmp[527894](527906 '_paramFoldLogical' tmp[527895] tmp[527902]))
    }
    {
      (527914 'move' tmp[527894](527911 '_paramFoldLogical' tmp[527895] 0))
    }
    (496389 'init var' isspace[275071] tmp[527894])
    unknown tmp[409329] "maybe param" "temp"
    (409340 'move' tmp[409329](275076 call == arrayStyle[275059] QIO_ARRAY_FORMAT_JSON[19398]))
    unknown call_tmp[684488] "expr temp" "maybe param" "maybe type" "temp"
    (684491 'move' call_tmp[684488](409342 call _cond_invalid tmp[409329]))
    if call_tmp[684488]
    {
      (409345 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isjson[275083] "insert auto destroy"
    unknown tmp[527921] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527922] "maybe param" "temp"
    unknown call_tmp[684493] "expr temp" "maybe param" "maybe type" "temp"
    (684496 'move' call_tmp[684493](409330 call isTrue tmp[409329]))
    (527927 'move' tmp[527922](527925 call _cond_test call_tmp[684493]))
    if tmp[527922]
    {
      unknown tmp[527929] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[684498] "expr temp" "maybe param" "maybe type" "temp"
      (684501 'move' call_tmp[684498](275079 call ! binary[275048]))
      (527931 'move' tmp[527929](409333 call isTrue call_tmp[684498]))
      (527936 'move' tmp[527921](527933 '_paramFoldLogical' tmp[527922] tmp[527929]))
    }
    {
      (527941 'move' tmp[527921](527938 '_paramFoldLogical' tmp[527922] 0))
    }
    (496391 'init var' isjson[275083] tmp[527921])
    unknown tmp[409350] "maybe param" "temp"
    (409361 'move' tmp[409350](275088 call == arrayStyle[275059] QIO_ARRAY_FORMAT_CHPL[19394]))
    unknown call_tmp[684503] "expr temp" "maybe param" "maybe type" "temp"
    (684506 'move' call_tmp[684503](409363 call _cond_invalid tmp[409350]))
    if call_tmp[684503]
    {
      (409366 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[275095] "insert auto destroy"
    unknown tmp[527948] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527949] "maybe param" "temp"
    unknown call_tmp[684508] "expr temp" "maybe param" "maybe type" "temp"
    (684511 'move' call_tmp[684508](409351 call isTrue tmp[409350]))
    (527954 'move' tmp[527949](527952 call _cond_test call_tmp[684508]))
    if tmp[527949]
    {
      unknown tmp[527956] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[684513] "expr temp" "maybe param" "maybe type" "temp"
      (684516 'move' call_tmp[684513](275091 call ! binary[275048]))
      (527958 'move' tmp[527956](409354 call isTrue call_tmp[684513]))
      (527963 'move' tmp[527948](527960 '_paramFoldLogical' tmp[527949] tmp[527956]))
    }
    {
      (527968 'move' tmp[527948](527965 '_paramFoldLogical' tmp[527949] 0))
    }
    (496393 'init var' ischpl[275095] tmp[527948])
    unknown num[275099] "insert auto destroy"
    (496395 'init var' num[275099] 0)
    unknown call_tmp[684518] "expr temp" "maybe param" "maybe type" "temp"
    (684521 'move' call_tmp[684518](275109 call _cond_test binary[275048]))
    if call_tmp[684518]
    {
      (275105 call <~> f[275038] num[275099])
    }
    unknown tmp[409371] "maybe param" "temp"
    (409382 'move' tmp[409371] isjson[275083])
    unknown call_tmp[684523] "expr temp" "maybe param" "maybe type" "temp"
    (684526 'move' call_tmp[684523](409384 call _cond_invalid tmp[409371]))
    if call_tmp[684523]
    {
      (409387 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[527975] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[527976] "maybe param" "temp"
    unknown call_tmp[684528] "expr temp" "maybe param" "maybe type" "temp"
    (684531 'move' call_tmp[684528](409372 call isTrue tmp[409371]))
    (527981 'move' tmp[527976](527979 call _cond_test call_tmp[684528]))
    if tmp[527976]
    {
      (527986 'move' tmp[527975](527983 '_paramFoldLogical' tmp[527976] 1))
    }
    {
      unknown tmp[527988] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (527990 'move' tmp[527988](409376 call isTrue ischpl[275095]))
      (527995 'move' tmp[527975](527992 '_paramFoldLogical' tmp[527976] tmp[527988]))
    }
    unknown call_tmp[684533] "expr temp" "maybe param" "maybe type" "temp"
    (684536 'move' call_tmp[684533](275127 call _cond_test tmp[527975]))
    if call_tmp[684533]
    {
      unknown call_tmp[684538] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (684541 'move' call_tmp[684538](691648 'new' ioLiteral[226016] "["))
      (275123 call <~> f[275038] call_tmp[684538])
    }
    unknown call_tmp[684545] "expr temp" "maybe param" "maybe type" "temp"
    (684548 'move' call_tmp[684545](275136 call(275132 call (partial) error _mt[232] f[275038])))
    unknown call_tmp[684550] "expr temp" "maybe param" "maybe type" "temp"
    (684553 'move' call_tmp[684550](275137 call ! call_tmp[684545]))
    unknown call_tmp[684555] "expr temp" "maybe param" "maybe type" "temp"
    (684558 'move' call_tmp[684555](275144 call _cond_test call_tmp[684550]))
    if call_tmp[684555]
    {
      (275141 call(377064 call (partial) destroy _mt[232] this[275466]))
    }
    unknown first[275149] "insert auto destroy"
    (496397 'init var' first[275149] 1)
    unknown i[275153] "insert auto destroy"
    (496399 'init var' i[275153] 0)
    unknown read_end[275157] "insert auto destroy"
    (496401 'init var' read_end[275157] 0)
    {
      unknown tmp[275342] "temp"
      unknown call_tmp[684564] "expr temp" "maybe param" "maybe type" "temp"
      (684567 'move' call_tmp[684564](275371 call(275368 call (partial) error _mt[232] f[275038])))
      unknown call_tmp[684569] "expr temp" "maybe param" "maybe type" "temp"
      (684572 'move' call_tmp[684569](275366 call ! call_tmp[684564]))
      (275372 'move' tmp[275342](275364 call _cond_test call_tmp[684569]))
      WhileDo
      {
        {
          unknown call_tmp[684574] "expr temp" "maybe param" "maybe type" "temp"
          (684577 'move' call_tmp[684574](275318 call _cond_test binary[275048]))
          if call_tmp[684574]
          {
            unknown call_tmp[684579] "expr temp" "maybe param" "maybe type" "temp"
            (684582 'move' call_tmp[684579](275171 call >= i[275153] num[275099]))
            unknown call_tmp[684584] "expr temp" "maybe param" "maybe type" "temp"
            (684587 'move' call_tmp[684584](275176 call _cond_test call_tmp[684579]))
            if call_tmp[684584]
            {
              break _breakLabel[275346] _breakLabel[275346]
            }
          }
          {
            unknown call_tmp[684589] "expr temp" "maybe param" "maybe type" "temp"
            (684592 'move' call_tmp[684589](275313 call _cond_test first[275149]))
            if call_tmp[684589]
            {
              (275185 call = first[275149] 0)
              unknown tmp[409392] "maybe param" "temp"
              (409403 'move' tmp[409392] isjson[275083])
              unknown call_tmp[684594] "expr temp" "maybe param" "maybe type" "temp"
              (684597 'move' call_tmp[684594](409405 call _cond_invalid tmp[409392]))
              if call_tmp[684594]
              {
                (409408 call compilerError "cannot promote short-circuiting || operator")
              }
              unknown tmp[528002] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
              unknown tmp[528003] "maybe param" "temp"
              unknown call_tmp[684599] "expr temp" "maybe param" "maybe type" "temp"
              (684602 'move' call_tmp[684599](409393 call isTrue tmp[409392]))
              (528008 'move' tmp[528003](528006 call _cond_test call_tmp[684599]))
              if tmp[528003]
              {
                (528013 'move' tmp[528002](528010 '_paramFoldLogical' tmp[528003] 1))
              }
              {
                unknown tmp[528015] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                (528017 'move' tmp[528015](409397 call isTrue ischpl[275095]))
                (528022 'move' tmp[528002](528019 '_paramFoldLogical' tmp[528003] tmp[528015]))
              }
              unknown call_tmp[684604] "expr temp" "maybe param" "maybe type" "temp"
              (684607 'move' call_tmp[684604](275219 call _cond_test tmp[528002]))
              if call_tmp[684604]
              {
                unknown call_tmp[684609] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (684612 'move' call_tmp[684609](691649 'new' ioLiteral[226016] "]"))
                (275199 call <~> f[275038] call_tmp[684609])
              }
              {
                unknown call_tmp[684614] "expr temp" "maybe param" "maybe type" "temp"
                (684617 'move' call_tmp[684614](275215 call _cond_test isspace[275071]))
                if call_tmp[684614]
                {
                  unknown call_tmp[684619] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                  (684622 'move' call_tmp[684619](691650 'new' ioNewline[225966](skipWhitespaceOnly = 1)))
                  (275211 call <~> f[275038] call_tmp[684619])
                }
              }
              unknown call_tmp[684626] "expr temp" "maybe param" "maybe type" "temp"
              (684629 'move' call_tmp[684626](275229 call(275225 call (partial) error _mt[232] f[275038])))
              unknown call_tmp[684631] "expr temp" "maybe param" "maybe type" "temp"
              (684634 'move' call_tmp[684631](377080 call EFORMAT[210730]))
              unknown call_tmp[684636] "expr temp" "maybe param" "maybe type" "temp"
              (684639 'move' call_tmp[684636](275231 call == call_tmp[684626] call_tmp[684631]))
              unknown call_tmp[684641] "expr temp" "maybe param" "maybe type" "temp"
              (684644 'move' call_tmp[684641](275250 call _cond_test call_tmp[684636]))
              if call_tmp[684641]
              {
                (275238 call(275234 call (partial) clearError _mt[232] f[275038]))
              }
              {
                (275243 call = read_end[275157] 1)
                break _breakLabel[275346] _breakLabel[275346]
              }
            }
            {
              unknown call_tmp[684648] "expr temp" "maybe param" "maybe type" "temp"
              (684651 'move' call_tmp[684648](275282 call _cond_test isspace[275071]))
              if call_tmp[684648]
              {
                unknown call_tmp[684653] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (684656 'move' call_tmp[684653](691651 'new' ioLiteral[226016] " "))
                (275261 call <~> f[275038] call_tmp[684653])
              }
              {
                unknown tmp[409413] "maybe param" "temp"
                (409424 'move' tmp[409413] isjson[275083])
                unknown call_tmp[684658] "expr temp" "maybe param" "maybe type" "temp"
                (684661 'move' call_tmp[684658](409426 call _cond_invalid tmp[409413]))
                if call_tmp[684658]
                {
                  (409429 call compilerError "cannot promote short-circuiting || operator")
                }
                unknown tmp[528029] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                unknown tmp[528030] "maybe param" "temp"
                unknown call_tmp[684663] "expr temp" "maybe param" "maybe type" "temp"
                (684666 'move' call_tmp[684663](409414 call isTrue tmp[409413]))
                (528035 'move' tmp[528030](528033 call _cond_test call_tmp[684663]))
                if tmp[528030]
                {
                  (528040 'move' tmp[528029](528037 '_paramFoldLogical' tmp[528030] 1))
                }
                {
                  unknown tmp[528042] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                  (528044 'move' tmp[528042](409418 call isTrue ischpl[275095]))
                  (528049 'move' tmp[528029](528046 '_paramFoldLogical' tmp[528030] tmp[528042]))
                }
                unknown call_tmp[684668] "expr temp" "maybe param" "maybe type" "temp"
                (684671 'move' call_tmp[684668](275277 call _cond_test tmp[528029]))
                if call_tmp[684668]
                {
                  unknown call_tmp[684673] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                  (684676 'move' call_tmp[684673](691652 'new' ioLiteral[226016] ","))
                  (275274 call <~> f[275038] call_tmp[684673])
                }
              }
              unknown call_tmp[684680] "expr temp" "maybe param" "maybe type" "temp"
              (684683 'move' call_tmp[684680](275294 call(275290 call (partial) error _mt[232] f[275038])))
              unknown call_tmp[684685] "expr temp" "maybe param" "maybe type" "temp"
              (684688 'move' call_tmp[684685](377092 call EFORMAT[210730]))
              unknown call_tmp[684690] "expr temp" "maybe param" "maybe type" "temp"
              (684693 'move' call_tmp[684690](275296 call == call_tmp[684680] call_tmp[684685]))
              unknown call_tmp[684695] "expr temp" "maybe param" "maybe type" "temp"
              (684698 'move' call_tmp[684695](275309 call _cond_test call_tmp[684690]))
              if call_tmp[684695]
              {
                (275303 call(275299 call (partial) clearError _mt[232] f[275038]))
                break _breakLabel[275346] _breakLabel[275346]
              }
            }
          }
          unknown elt[275324] "insert auto destroy"
          unknown call_tmp[684704] "expr temp" "maybe param" "maybe type" "temp"
          (684707 'move' call_tmp[684704](377097 call eltType _mt[232] this[275466]))
          (496403 'default init var' elt[275324] call_tmp[684704])
          (275329 call <~> f[275038] elt[275324])
          (275335 call(377103 call (partial) append _mt[232] this[275466]) elt[275324])
          (275339 call += i[275153] 1)
        }
        label _continueLabel[275345]
        unknown call_tmp[684713] "expr temp" "maybe param" "maybe type" "temp"
        (684716 'move' call_tmp[684713](275358 call(275355 call (partial) error _mt[232] f[275038])))
        unknown call_tmp[684718] "expr temp" "maybe param" "maybe type" "temp"
        (684721 'move' call_tmp[684718](275353 call ! call_tmp[684713]))
        (275359 'move' tmp[275342](275351 call _cond_test call_tmp[684718]))
        tmp[275342]
      }
      label _breakLabel[275346]
    }
    unknown call_tmp[684723] "expr temp" "maybe param" "maybe type" "temp"
    (684726 'move' call_tmp[684723](275376 call ! read_end[275157]))
    unknown call_tmp[684728] "expr temp" "maybe param" "maybe type" "temp"
    (684731 'move' call_tmp[684728](275397 call _cond_test call_tmp[684723]))
    if call_tmp[684728]
    {
      unknown tmp[409434] "maybe param" "temp"
      (409445 'move' tmp[409434] isjson[275083])
      unknown call_tmp[684733] "expr temp" "maybe param" "maybe type" "temp"
      (684736 'move' call_tmp[684733](409447 call _cond_invalid tmp[409434]))
      if call_tmp[684733]
      {
        (409450 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[528056] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[528057] "maybe param" "temp"
      unknown call_tmp[684738] "expr temp" "maybe param" "maybe type" "temp"
      (684741 'move' call_tmp[684738](409435 call isTrue tmp[409434]))
      (528062 'move' tmp[528057](528060 call _cond_test call_tmp[684738]))
      if tmp[528057]
      {
        (528067 'move' tmp[528056](528064 '_paramFoldLogical' tmp[528057] 1))
      }
      {
        unknown tmp[528069] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (528071 'move' tmp[528069](409439 call isTrue ischpl[275095]))
        (528076 'move' tmp[528056](528073 '_paramFoldLogical' tmp[528057] tmp[528069]))
      }
      unknown call_tmp[684743] "expr temp" "maybe param" "maybe type" "temp"
      (684746 'move' call_tmp[684743](275392 call _cond_test tmp[528056]))
      if call_tmp[684743]
      {
        unknown call_tmp[684748] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (684751 'move' call_tmp[684748](691653 'new' ioLiteral[226016] "]"))
        (275388 call <~> f[275038] call_tmp[684748])
      }
    }
    (487108 return _void[47])
  }
  function LinkedList[275404](?).eltType[759926](arg _mt[759928]:_MT[227], arg this[759930]:LinkedList[275404](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[759947] "RVV" "temp" "type variable"
    unknown call_tmp[759961] "expr temp" "maybe param" "maybe type" "temp"
    (759964 'move' call_tmp[759961](759935 'is bound' this[759930] c"eltType"))
    if call_tmp[759961]
    {
      unknown call_tmp[759966] "expr temp" "maybe param" "maybe type" "temp"
      (759969 'move' call_tmp[759966](759934 '.v' this[759930] c"eltType"))
      (759952 'move' ret[759947](759951 'deref' call_tmp[759966]))
      gotoReturn _end_eltType[759945] _end_eltType[759945]
    }
    {
      (759957 'move' ret[759947](759956 'deref' _uninstantiated[247]))
      gotoReturn _end_eltType[759945] _end_eltType[759945]
    }
    label _end_eltType[759945]
    (759949 return ret[759947])
  }
  function LinkedList[275404](?).eltType[759971](arg _mt[759973]:_MT[227], arg this[759975]:LinkedList[275404](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[759992] "RVV" "temp" "type variable"
    unknown call_tmp[760006] "expr temp" "maybe param" "maybe type" "temp"
    (760009 'move' call_tmp[760006](759980 'is bound' this[759975] c"eltType"))
    if call_tmp[760006]
    {
      unknown call_tmp[760011] "expr temp" "maybe param" "maybe type" "temp"
      (760014 'move' call_tmp[760011](759979 '.v' this[759975] c"eltType"))
      (759997 'move' ret[759992](759996 'deref' call_tmp[760011]))
      gotoReturn _end_eltType[759990] _end_eltType[759990]
    }
    {
      (760002 'move' ret[759992](760001 'deref' _uninstantiated[247]))
      gotoReturn _end_eltType[759990] _end_eltType[759990]
    }
    label _end_eltType[759990]
    (759994 return ret[759992])
  }
  function LinkedList[275404](?).first[760016](arg _mt[760018]:_MT[227], ref arg this[760020]:LinkedList[275404](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[760029] "RVV" "temp"
    unknown call_tmp[760036] "expr temp" "maybe param" "maybe type" "temp"
    (760039 'move' call_tmp[760036](760024 '.' this[760020] c"first"))
    (760034 'move' ret[760029](760033 'addr of' call_tmp[760036]))
    (760031 return ret[760029])
  }
  function LinkedList[275404](?).last[760041](arg _mt[760043]:_MT[227], ref arg this[760045]:LinkedList[275404](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[760054] "RVV" "temp"
    unknown call_tmp[760061] "expr temp" "maybe param" "maybe type" "temp"
    (760064 'move' call_tmp[760061](760049 '.' this[760045] c"last"))
    (760059 'move' ret[760054](760058 'addr of' call_tmp[760061]))
    (760056 return ret[760054])
  }
  function LinkedList[275404](?).length[760066](arg _mt[760068]:_MT[227], ref arg this[760070]:LinkedList[275404](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[760079] "RVV" "temp"
    unknown call_tmp[760086] "expr temp" "maybe param" "maybe type" "temp"
    (760089 'move' call_tmp[760086](760074 '.' this[760070] c"length"))
    (760084 'move' ret[760079](760083 'addr of' call_tmp[760086]))
    (760081 return ret[760079])
  }
  function LinkedList[275404](?).init=[760091](arg _mt[760094]:_MT[227], ref arg this[760095]:LinkedList[275404](?), arg other[760098] :
  (760097 'typeof' this[760095])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method"
  {
    unknown tmp[760143] "temp" "type variable"
    (760145 'move' tmp[760143](760107 call eltType _mt[232] other[760098]))
    (760147 'init field' this[760095] c"eltType" tmp[760143])
    unknown call_tmp[760198] "maybe param" "maybe type" "temp"
    (760201 'move' call_tmp[760198](760117 call first _mt[232] other[760098]))
    unknown call_tmp[760203] "expr temp" "maybe param" "maybe type" "temp"
    (760206 'move' call_tmp[760203](760164 '.v' this[760095] c"eltType"))
    unknown call_tmp[760208] "expr temp" "maybe param" "maybe type" "temp"
    (760211 'move' call_tmp[760208](760156 call anymanaged listNode[376663](?) call_tmp[760203]))
    unknown call_tmp[760213] "expr temp" "maybe param" "maybe type" "temp"
    (760216 'move' call_tmp[760213](760154 'to nilable class from type' call_tmp[760208]))
    unknown call_tmp[760218] "maybe param" "maybe type" "temp"
    (760221 'move' call_tmp[760218](760153 'to unmanaged class from unknown' call_tmp[760213]))
    unknown tmp[760151] "temp"
    (760158 'init var' tmp[760151] call_tmp[760198] call_tmp[760218])
    (760160 'init field' this[760095] c"first" tmp[760151])
    unknown call_tmp[760225] "maybe param" "maybe type" "temp"
    (760228 'move' call_tmp[760225](760127 call last _mt[232] other[760098]))
    unknown call_tmp[760230] "expr temp" "maybe param" "maybe type" "temp"
    (760233 'move' call_tmp[760230](760180 '.v' this[760095] c"eltType"))
    unknown call_tmp[760235] "expr temp" "maybe param" "maybe type" "temp"
    (760238 'move' call_tmp[760235](760172 call anymanaged listNode[376663](?) call_tmp[760230]))
    unknown call_tmp[760240] "expr temp" "maybe param" "maybe type" "temp"
    (760243 'move' call_tmp[760240](760170 'to nilable class from type' call_tmp[760235]))
    unknown call_tmp[760245] "maybe param" "maybe type" "temp"
    (760248 'move' call_tmp[760245](760169 'to unmanaged class from unknown' call_tmp[760240]))
    unknown tmp[760167] "temp"
    (760174 'init var' tmp[760167] call_tmp[760225] call_tmp[760245])
    (760176 'init field' this[760095] c"last" tmp[760167])
    unknown call_tmp[760252] "maybe param" "maybe type" "temp"
    (760255 'move' call_tmp[760252](760137 call length _mt[232] other[760098]))
    unknown tmp[760183] "temp"
    (760186 'init var' tmp[760183] call_tmp[760252] int(64)[13])
    (760188 'init field' this[760095] c"length" tmp[760183])
    (760192 return _void[47])
  }
  function ==[760257](arg _arg1[760259]:LinkedList[275404](?), arg _arg2[760260]:LinkedList[275404](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760331]:bool[10] "RVV" "temp"
    unknown call_tmp[760358] "expr temp" "maybe param" "maybe type" "temp"
    (760361 'move' call_tmp[760358](760270 call eltType _mt[232] _arg1[760259]))
    unknown call_tmp[760363] "expr temp" "maybe param" "maybe type" "temp"
    (760366 'move' call_tmp[760363](760274 call eltType _mt[232] _arg2[760260]))
    unknown call_tmp[760368] "expr temp" "maybe param" "maybe type" "temp"
    (760371 'move' call_tmp[760368](760278 call != call_tmp[760358] call_tmp[760363]))
    if call_tmp[760368]
    {
      (760336 'move' ret[760331](760335 'deref' 0))
      gotoReturn _end_==[760329] _end_==[760329]
    }
    unknown call_tmp[760373] "expr temp" "maybe param" "maybe type" "temp"
    (760376 'move' call_tmp[760373](760284 call first _mt[232] _arg1[760259]))
    unknown call_tmp[760378] "expr temp" "maybe param" "maybe type" "temp"
    (760381 'move' call_tmp[760378](760288 call first _mt[232] _arg2[760260]))
    unknown call_tmp[760383] "expr temp" "maybe param" "maybe type" "temp"
    (760386 'move' call_tmp[760383](760292 call != call_tmp[760373] call_tmp[760378]))
    if call_tmp[760383]
    {
      (760341 'move' ret[760331](760340 'deref' 0))
      gotoReturn _end_==[760329] _end_==[760329]
    }
    unknown call_tmp[760388] "expr temp" "maybe param" "maybe type" "temp"
    (760391 'move' call_tmp[760388](760298 call last _mt[232] _arg1[760259]))
    unknown call_tmp[760393] "expr temp" "maybe param" "maybe type" "temp"
    (760396 'move' call_tmp[760393](760302 call last _mt[232] _arg2[760260]))
    unknown call_tmp[760398] "expr temp" "maybe param" "maybe type" "temp"
    (760401 'move' call_tmp[760398](760306 call != call_tmp[760388] call_tmp[760393]))
    if call_tmp[760398]
    {
      (760346 'move' ret[760331](760345 'deref' 0))
      gotoReturn _end_==[760329] _end_==[760329]
    }
    unknown call_tmp[760403] "expr temp" "maybe param" "maybe type" "temp"
    (760406 'move' call_tmp[760403](760312 call length _mt[232] _arg1[760259]))
    unknown call_tmp[760408] "expr temp" "maybe param" "maybe type" "temp"
    (760411 'move' call_tmp[760408](760316 call length _mt[232] _arg2[760260]))
    unknown call_tmp[760413] "expr temp" "maybe param" "maybe type" "temp"
    (760416 'move' call_tmp[760413](760320 call != call_tmp[760403] call_tmp[760408]))
    if call_tmp[760413]
    {
      (760351 'move' ret[760331](760350 'deref' 0))
      gotoReturn _end_==[760329] _end_==[760329]
    }
    (760356 'move' ret[760331](760355 'deref' 1))
    label _end_==[760329]
    (760333 return ret[760331])
  }
  where {
    unknown call_tmp[760418] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760421 'move' call_tmp[760418](760263 'typeof' _arg1[760259]))
    unknown call_tmp[760423] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760426 'move' call_tmp[760423](760265 'typeof' _arg2[760260]))
    (760267 call == call_tmp[760418] call_tmp[760423])
  }
  function !=[760428](arg _arg1[760430]:LinkedList[275404](?), arg _arg2[760431]:LinkedList[275404](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[760502]:bool[10] "RVV" "temp"
    unknown call_tmp[760529] "expr temp" "maybe param" "maybe type" "temp"
    (760532 'move' call_tmp[760529](760441 call eltType _mt[232] _arg1[760430]))
    unknown call_tmp[760534] "expr temp" "maybe param" "maybe type" "temp"
    (760537 'move' call_tmp[760534](760445 call eltType _mt[232] _arg2[760431]))
    unknown call_tmp[760539] "expr temp" "maybe param" "maybe type" "temp"
    (760542 'move' call_tmp[760539](760449 call != call_tmp[760529] call_tmp[760534]))
    if call_tmp[760539]
    {
      (760507 'move' ret[760502](760506 'deref' 1))
      gotoReturn _end_!=[760500] _end_!=[760500]
    }
    unknown call_tmp[760544] "expr temp" "maybe param" "maybe type" "temp"
    (760547 'move' call_tmp[760544](760455 call first _mt[232] _arg1[760430]))
    unknown call_tmp[760549] "expr temp" "maybe param" "maybe type" "temp"
    (760552 'move' call_tmp[760549](760459 call first _mt[232] _arg2[760431]))
    unknown call_tmp[760554] "expr temp" "maybe param" "maybe type" "temp"
    (760557 'move' call_tmp[760554](760463 call != call_tmp[760544] call_tmp[760549]))
    if call_tmp[760554]
    {
      (760512 'move' ret[760502](760511 'deref' 1))
      gotoReturn _end_!=[760500] _end_!=[760500]
    }
    unknown call_tmp[760559] "expr temp" "maybe param" "maybe type" "temp"
    (760562 'move' call_tmp[760559](760469 call last _mt[232] _arg1[760430]))
    unknown call_tmp[760564] "expr temp" "maybe param" "maybe type" "temp"
    (760567 'move' call_tmp[760564](760473 call last _mt[232] _arg2[760431]))
    unknown call_tmp[760569] "expr temp" "maybe param" "maybe type" "temp"
    (760572 'move' call_tmp[760569](760477 call != call_tmp[760559] call_tmp[760564]))
    if call_tmp[760569]
    {
      (760517 'move' ret[760502](760516 'deref' 1))
      gotoReturn _end_!=[760500] _end_!=[760500]
    }
    unknown call_tmp[760574] "expr temp" "maybe param" "maybe type" "temp"
    (760577 'move' call_tmp[760574](760483 call length _mt[232] _arg1[760430]))
    unknown call_tmp[760579] "expr temp" "maybe param" "maybe type" "temp"
    (760582 'move' call_tmp[760579](760487 call length _mt[232] _arg2[760431]))
    unknown call_tmp[760584] "expr temp" "maybe param" "maybe type" "temp"
    (760587 'move' call_tmp[760584](760491 call != call_tmp[760574] call_tmp[760579]))
    if call_tmp[760584]
    {
      (760522 'move' ret[760502](760521 'deref' 1))
      gotoReturn _end_!=[760500] _end_!=[760500]
    }
    (760527 'move' ret[760502](760526 'deref' 0))
    label _end_!=[760500]
    (760504 return ret[760502])
  }
  where {
    unknown call_tmp[760589] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760592 'move' call_tmp[760589](760434 'typeof' _arg1[760430]))
    unknown call_tmp[760594] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (760597 'move' call_tmp[760594](760436 'typeof' _arg2[760431]))
    (760438 call == call_tmp[760589] call_tmp[760594])
  }
  function chpl__defaultHash[760599](arg r[760601]:LinkedList[275404](?)) : _unknown[43] "compiler generated" "last resort"
  {
    unknown ret[760640] "RVV" "temp"
    unknown call_tmp[760647] "expr temp" "maybe param" "maybe type" "temp"
    (760650 'move' call_tmp[760647](760627 call length _mt[232] r[760601]))
    unknown call_tmp[760652] "expr temp" "maybe param" "maybe type" "temp"
    (760655 'move' call_tmp[760652](760631 call chpl__defaultHash call_tmp[760647]))
    unknown call_tmp[760657] "expr temp" "maybe param" "maybe type" "temp"
    (760660 'move' call_tmp[760657](760618 call last _mt[232] r[760601]))
    unknown call_tmp[760662] "expr temp" "maybe param" "maybe type" "temp"
    (760665 'move' call_tmp[760662](760622 call chpl__defaultHash call_tmp[760657]))
    unknown call_tmp[760667] "expr temp" "maybe param" "maybe type" "temp"
    (760670 'move' call_tmp[760667](760609 call first _mt[232] r[760601]))
    unknown call_tmp[760672] "expr temp" "maybe param" "maybe type" "temp"
    (760675 'move' call_tmp[760672](760613 call chpl__defaultHash call_tmp[760667]))
    unknown call_tmp[760677] "expr temp" "maybe param" "maybe type" "temp"
    (760680 'move' call_tmp[760677](760603 call eltType _mt[232] r[760601]))
    unknown call_tmp[760682] "expr temp" "maybe param" "maybe type" "temp"
    (760685 'move' call_tmp[760682](760607 call chpl__defaultHash call_tmp[760677]))
    unknown call_tmp[760687] "expr temp" "maybe param" "maybe type" "temp"
    (760690 'move' call_tmp[760687](760615 call chpl__defaultHashCombine call_tmp[760672] call_tmp[760682] 2))
    unknown call_tmp[760692] "expr temp" "maybe param" "maybe type" "temp"
    (760695 'move' call_tmp[760692](760624 call chpl__defaultHashCombine call_tmp[760662] call_tmp[760687] 3))
    unknown call_tmp[760697] "expr temp" "maybe param" "maybe type" "temp"
    (760700 'move' call_tmp[760697](760633 call chpl__defaultHashCombine call_tmp[760652] call_tmp[760692] 4))
    (760645 'move' ret[760640](760644 'deref' call_tmp[760697]))
    (760642 return ret[760640])
  }
  type LinkedList[275404](?) unknown eltType[273979] "type variable" unknown first[273988] "no doc" "owned"(273987 'to unmanaged class from unknown'(273986 'to nilable class from type'(273985 call anymanaged listNode[376663](?) eltType[273979]))) unknown last[273997] "no doc" "owned"(273996 'to unmanaged class from unknown'(273995 'to nilable class from type'(273994 call anymanaged listNode[376663](?) eltType[273979]))) val length[274001]:int(64)[13] int(64)[13]
  function makeList[275478](arg x[275475]:_any[170](?) ...) : _unknown[43]
  {
    unknown ret[487112] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[444498] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[684753] "expr temp" "maybe param" "maybe type" "temp"
      (684756 'move' call_tmp[684753](275484 call x[275475] 1))
      (444502 'move' call_type_tmp[444498](275485 'typeof' call_tmp[684753]))
    }
    unknown s[275488] "insert auto destroy"
    unknown call_tmp[684758] "expr temp" "maybe param" "maybe type" "temp"
    (684761 'move' call_tmp[684758](275487 call LinkedList[275404](?) call_type_tmp[444498]))
    (496405 'default init var' s[275488] call_tmp[684758])
    {
      unknown i[275507] "insert auto destroy"
      (496407 'init var' i[275507] 0)
      unknown tmp[275508] "maybe param" "temp"
      (275520 'move' tmp[275508](275518 call chpl_compute_low_param_loop_bound 1 k[275473]))
      unknown tmp[275509] "maybe param" "temp"
      (275527 'move' tmp[275509](275525 call chpl_compute_high_param_loop_bound 1 k[275473]))
      unknown tmp[275510] "maybe param" "temp"
      (275530 'move' tmp[275510] 1)
      ParamForLoop
      { i[275507] tmp[275508] tmp[275509] tmp[275510]
        unknown call_tmp[684765] "expr temp" "maybe param" "maybe type" "temp"
        (684768 'move' call_tmp[684765](275503 call x[275475] i[275507]))
        (275505 call(275497 call (partial) append _mt[232] s[275488]) call_tmp[684765])
      }
      label _unused_continueLabel[275512]
      label _breakLabel[275511]
    }
    (487117 'move' ret[487112](487116 'deref' s[275488]))
    (487114 return ret[487112])
  }
  (329777 'used modules list'(328366 'use' ChapelStandard[19734])(273881 'use' SysBasic[209963]))
}