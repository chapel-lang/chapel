AST dump for OwnedObject after pass createTaskFunctions.
Module use list: ChapelStandard HaltWrappers 

{
  function chpl__init_OwnedObject[390150]() : void[4] "insert line file info" "module init"
  {
    (456096 return _void[47])
  }
  function _owned[39039](?).chpl_forwarding_expr1[38124](arg _mt[39043]:_MT[227], arg this[39041]:_owned[39039](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    unknown ret[455884] "RVV" "temp"
    (455888 'move' ret[455884](38123 call(335768 call (partial) borrow _mt[232] this[39041])))
    (455886 return ret[455884])
  }
  function _owned[39039](?).init[38134](arg _mt[39047]:_MT[227], ref arg this[39045]:_owned[39039](?), arg chpl_t[38132]:_any[170](?)) : void[4] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[550892] "expr temp" "maybe param" "maybe type" "temp"
    (550895 'move' call_tmp[550892](38139 call isClass chpl_t[38132]))
    unknown call_tmp[550897] "expr temp" "maybe param" "maybe type" "temp"
    (550900 'move' call_tmp[550897](38140 call ! call_tmp[550892]))
    unknown call_tmp[550902] "expr temp" "maybe param" "maybe type" "temp"
    (550905 'move' call_tmp[550902](38162 call _cond_test call_tmp[550897]))
    if call_tmp[550902]
    {
      (38160 call compilerError "owned only works with classes")
    }
    unknown tmp[429262] "temp" "type variable"
    (429264 'move' tmp[429262](38177 call _to_borrowed chpl_t[38132]))
    (429266 'init field' this[39045] c"chpl_t" tmp[429262])
    unknown call_tmp[550907] "expr temp" "maybe param" "maybe type" "temp"
    (550910 'move' call_tmp[550907](429280 '.v' this[39045] c"chpl_t"))
    unknown call_tmp[550912] "maybe param" "maybe type" "temp"
    (550915 'move' call_tmp[550912](429272 'to nilable class' call_tmp[550907]))
    unknown tmp[429270] "temp"
    (429274 'init var' tmp[429270] nil[38] call_tmp[550912])
    (429276 'init field' this[39045] c"chpl_p" tmp[429270])
    (455890 return _void[47])
  }
  function _owned[39039](?).init[38199](arg _mt[39051]:_MT[227], ref arg this[39049]:_owned[39039](?), arg p[38196]:borrowed[200](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    (38219 call compilerError "cannot initialize owned from a borrow")
    unknown call_tmp[550919] "expr temp" "maybe param" "maybe type" "temp"
    (550922 'move' call_tmp[550919](38231 call _to_unmanaged p[38196]))
    (38233 call(38225 call (partial) init _mt[232] this[39049]) call_tmp[550919])
    (455892 return _void[47])
  }
  function _owned[39039](?).init[38243](arg _mt[39055]:_MT[227], ref arg this[39053]:_owned[39039](?), arg p[38240]:unmanaged[209](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[429283] "temp" "type variable"
    unknown call_tmp[550924] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (550927 'move' call_tmp[550924](38251 'typeof' p[38240]))
    (429285 'move' tmp[429283](38253 call _to_borrowed call_tmp[550924]))
    (429287 'init field' this[39053] c"chpl_t" tmp[429283])
    unknown call_tmp[550929] "maybe param" "maybe type" "temp"
    (550932 'move' call_tmp[550929](38265 call _to_borrowed p[38240]))
    unknown call_tmp[550934] "expr temp" "maybe param" "maybe type" "temp"
    (550937 'move' call_tmp[550934](429301 '.v' this[39053] c"chpl_t"))
    unknown call_tmp[550939] "maybe param" "maybe type" "temp"
    (550942 'move' call_tmp[550939](429293 'to nilable class' call_tmp[550934]))
    unknown tmp[429291] "temp"
    (429295 'init var' tmp[429291] call_tmp[550929] call_tmp[550939])
    (429297 'init field' this[39053] c"chpl_p" tmp[429291])
    (455894 return _void[47])
  }
  function _owned[39039](?).init[38278](arg _mt[39059]:_MT[227], ref arg this[39057]:_owned[39039](?), arg p[38275]:_any[170](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (38309 call compilerError "owned only works with classes")
    unknown tmp[429310] "temp" "type variable"
    (429312 'move' tmp[429310](429304 'typeof' p[38275]))
    (429314 'init field' this[39057] c"chpl_t" tmp[429310])
    unknown call_tmp[550944] "expr temp" "maybe param" "maybe type" "temp"
    (550947 'move' call_tmp[550944](429328 '.v' this[39057] c"chpl_t"))
    unknown call_tmp[550949] "maybe param" "maybe type" "temp"
    (550952 'move' call_tmp[550949](429320 'to nilable class' call_tmp[550944]))
    unknown tmp[429318] "temp"
    (429322 'init var' tmp[429318] p[38275] call_tmp[550949])
    (429324 'init field' this[39057] c"chpl_p" tmp[429318])
    (455896 return _void[47])
  }
  where {
    unknown tmp[393432] "maybe param" "temp"
    unknown tmp[393453] "maybe param" "temp"
    unknown call_tmp[550954] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (550957 'move' call_tmp[550954](429306 'typeof' p[38275]))
    unknown call_tmp[550959] "expr temp" "maybe param" "maybe type" "temp"
    (550962 'move' call_tmp[550959](38283 call isClass call_tmp[550954]))
    (393464 'move' tmp[393453](38285 call == call_tmp[550959] 0))
    unknown call_tmp[550964] "expr temp" "maybe param" "maybe type" "temp"
    (550967 'move' call_tmp[550964](393466 call _cond_invalid tmp[393453]))
    if call_tmp[550964]
    {
      (393469 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[502592] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502593] "maybe param" "temp"
    unknown call_tmp[550969] "expr temp" "maybe param" "maybe type" "temp"
    (550972 'move' call_tmp[550969](393454 call isTrue tmp[393453]))
    (502598 'move' tmp[502593](502596 call _cond_test call_tmp[550969]))
    if tmp[502593]
    {
      unknown tmp[502600] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[550974] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (550977 'move' call_tmp[550974](429308 'typeof' p[38275]))
      unknown call_tmp[550979] "expr temp" "maybe param" "maybe type" "temp"
      (550982 'move' call_tmp[550979](328421 'is_subtype' _owned[39039](?) call_tmp[550974]))
      unknown call_tmp[550984] "expr temp" "maybe param" "maybe type" "temp"
      (550987 'move' call_tmp[550984](38293 call == call_tmp[550979] 0))
      (502602 'move' tmp[502600](393457 call isTrue call_tmp[550984]))
      (502607 'move' tmp[502592](502604 '_paramFoldLogical' tmp[502593] tmp[502600]))
    }
    {
      (502612 'move' tmp[502592](502609 '_paramFoldLogical' tmp[502593] 0))
    }
    (393443 'move' tmp[393432] tmp[502592])
    unknown call_tmp[550989] "expr temp" "maybe param" "maybe type" "temp"
    (550992 'move' call_tmp[550989](393445 call _cond_invalid tmp[393432]))
    if call_tmp[550989]
    {
      (393448 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[502619] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502620] "maybe param" "temp"
    unknown call_tmp[550994] "expr temp" "maybe param" "maybe type" "temp"
    (550997 'move' call_tmp[550994](393433 call isTrue tmp[393432]))
    (502625 'move' tmp[502620](502623 call _cond_test call_tmp[550994]))
    if tmp[502620]
    {
      unknown tmp[502627] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[550999] "expr temp" "maybe param" "maybe type" "temp"
      (551002 'move' call_tmp[550999](38300 call isIterator p[38275]))
      unknown call_tmp[551004] "expr temp" "maybe param" "maybe type" "temp"
      (551007 'move' call_tmp[551004](38302 call == call_tmp[550999] 0))
      (502629 'move' tmp[502627](393436 call isTrue call_tmp[551004]))
      (502634 'move' tmp[502619](502631 '_paramFoldLogical' tmp[502620] tmp[502627]))
    }
    {
      (502639 'move' tmp[502619](502636 '_paramFoldLogical' tmp[502620] 0))
    }
    (691759 call _statementLevelSymbol tmp[502619])
  }
  function _owned[39039](?).init=[38337](arg _mt[39063]:_MT[227], ref arg this[39061]:_owned[39039](?), ref arg src[38334]:_owned[39039](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown tmp[393474] "maybe param" "temp"
    unknown tmp[393495] "maybe param" "temp"
    unknown call_tmp[551009] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (551012 'move' call_tmp[551009](38341 'typeof' this[39061]))
    (393506 'move' tmp[393495](38343 call isNonNilableClass call_tmp[551009]))
    unknown call_tmp[551014] "expr temp" "maybe param" "maybe type" "temp"
    (551017 'move' call_tmp[551014](393508 call _cond_invalid tmp[393495]))
    if call_tmp[551014]
    {
      (393511 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[502646] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502647] "maybe param" "temp"
    unknown call_tmp[551019] "expr temp" "maybe param" "maybe type" "temp"
    (551022 'move' call_tmp[551019](393496 call isTrue tmp[393495]))
    (502652 'move' tmp[502647](502650 call _cond_test call_tmp[551019]))
    if tmp[502647]
    {
      unknown tmp[502654] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[551024] "expr temp" "maybe param" "maybe type" "temp"
      (551027 'move' call_tmp[551024](38347 call isNilableClass src[38334]))
      (502656 'move' tmp[502654](393499 call isTrue call_tmp[551024]))
      (502661 'move' tmp[502646](502658 '_paramFoldLogical' tmp[502647] tmp[502654]))
    }
    {
      (502666 'move' tmp[502646](502663 '_paramFoldLogical' tmp[502647] 0))
    }
    (393485 'move' tmp[393474] tmp[502646])
    unknown call_tmp[551029] "expr temp" "maybe param" "maybe type" "temp"
    (551032 'move' call_tmp[551029](393487 call _cond_invalid tmp[393474]))
    if call_tmp[551029]
    {
      (393490 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[502673] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502674] "maybe param" "temp"
    unknown call_tmp[551034] "expr temp" "maybe param" "maybe type" "temp"
    (551037 'move' call_tmp[551034](393475 call isTrue tmp[393474]))
    (502679 'move' tmp[502674](502677 call _cond_test call_tmp[551034]))
    if tmp[502674]
    {
      unknown tmp[502681] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[551039] "expr temp" "maybe param" "maybe type" "temp"
      (551042 'move' call_tmp[551039](38351 call ! 0))
      (502683 'move' tmp[502681](393478 call isTrue call_tmp[551039]))
      (502688 'move' tmp[502673](502685 '_paramFoldLogical' tmp[502674] tmp[502681]))
    }
    {
      (502693 'move' tmp[502673](502690 '_paramFoldLogical' tmp[502674] 0))
    }
    unknown call_tmp[551044] "expr temp" "maybe param" "maybe type" "temp"
    (551047 'move' call_tmp[551044](38377 call _cond_test tmp[502673]))
    if call_tmp[551044]
    {
      (38375 call compilerError "cannot create a non-nilable owned variable from a nilable class instance")
    }
    unknown call_tmp[551049] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (551052 'move' call_tmp[551049](38390 'typeof' this[39061]))
    unknown call_tmp[551056] "expr temp" "maybe param" "maybe type" "temp"
    (551059 'move' call_tmp[551056](38391 call chpl_t _mt[232] call_tmp[551049]))
    unknown call_tmp[551063] "expr temp" "maybe param" "maybe type" "temp"
    (551066 'move' call_tmp[551063](38385 call chpl_t _mt[232] src[38334]))
    unknown call_tmp[551068] "expr temp" "maybe param" "maybe type" "temp"
    (551071 'move' call_tmp[551068](328422 'is_coercible' call_tmp[551056] call_tmp[551063]))
    unknown call_tmp[551073] "expr temp" "maybe param" "maybe type" "temp"
    (551076 'move' call_tmp[551073](38396 call == call_tmp[551068] 0))
    unknown call_tmp[551078] "expr temp" "maybe param" "maybe type" "temp"
    (551081 'move' call_tmp[551078](38460 call _cond_test call_tmp[551073]))
    if call_tmp[551078]
    {
      unknown call_tmp[551083] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (551086 'move' call_tmp[551083](38417 'typeof' src[38334]))
      unknown call_tmp[551088] "expr temp" "maybe param" "maybe type" "temp"
      (551091 'move' call_tmp[551088](38419 call _cast string[24] call_tmp[551083]))
      unknown call_tmp[551093] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (551096 'move' call_tmp[551093](38438 'typeof' this[39061]))
      unknown call_tmp[551098] "expr temp" "maybe param" "maybe type" "temp"
      (551101 'move' call_tmp[551098](38440 call _cast string[24] call_tmp[551093]))
      (38458 call compilerError "cannot coerce '" call_tmp[551088] "' to '" call_tmp[551098] "' in initialization")
    }
    unknown tmp[429331] "temp" "type variable"
    unknown call_tmp[551103] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (551106 'move' call_tmp[551103](38470 'typeof' this[39061]))
    (429333 'move' tmp[429331](38471 call chpl_t _mt[232] call_tmp[551103]))
    (429335 'init field' this[39061] c"chpl_t" tmp[429331])
    unknown call_tmp[551112] "maybe param" "maybe type" "temp"
    (551115 'move' call_tmp[551112](38486 call(38482 call (partial) release _mt[232] src[38334])))
    unknown call_tmp[551117] "expr temp" "maybe param" "maybe type" "temp"
    (551120 'move' call_tmp[551117](429349 '.v' this[39061] c"chpl_t"))
    unknown call_tmp[551122] "maybe param" "maybe type" "temp"
    (551125 'move' call_tmp[551122](429341 'to nilable class' call_tmp[551117]))
    unknown tmp[429339] "temp"
    (429343 'init var' tmp[429339] call_tmp[551112] call_tmp[551122])
    (429345 'init field' this[39061] c"chpl_p" tmp[429339])
    (455898 return _void[47])
  }
  function _owned[39039](?).init=[38505](arg _mt[39067]:_MT[227], ref arg this[39065]:_owned[39039](?), arg src[38502]:_shared[41357](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (38525 call compilerError "cannot create an owned variable from a shared class instance")
    unknown tmp[429352] "temp" "type variable"
    (429354 'move' tmp[429352] int(64)[13])
    (429356 'init field' this[39065] c"chpl_t" tmp[429352])
    unknown tmp[429361] "temp"
    unknown call_tmp[551127] "expr temp" "maybe param" "maybe type" "temp"
    (551130 'move' call_tmp[551127](429371 '.v' this[39065] c"chpl_t"))
    unknown call_tmp[551132] "expr temp" "maybe param" "maybe type" "temp"
    (551135 'move' call_tmp[551132](429363 'to nilable class' call_tmp[551127]))
    (429365 'default init var' tmp[429361] call_tmp[551132])
    (429367 '.=' this[39065] c"chpl_p" tmp[429361])
    (455900 return _void[47])
  }
  function _owned[39039](?).init=[38544](arg _mt[39071]:_MT[227], ref arg this[39069]:_owned[39039](?), arg src[38541]:borrowed[200](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (38566 call compilerError "cannot create an owned variable from a borrowed class instance")
    unknown tmp[429374] "temp" "type variable"
    (429376 'move' tmp[429374] int(64)[13])
    (429378 'init field' this[39069] c"chpl_t" tmp[429374])
    unknown tmp[429383] "temp"
    unknown call_tmp[551137] "expr temp" "maybe param" "maybe type" "temp"
    (551140 'move' call_tmp[551137](429393 '.v' this[39069] c"chpl_t"))
    unknown call_tmp[551142] "expr temp" "maybe param" "maybe type" "temp"
    (551145 'move' call_tmp[551142](429385 'to nilable class' call_tmp[551137]))
    (429387 'default init var' tmp[429383] call_tmp[551142])
    (429389 '.=' this[39069] c"chpl_p" tmp[429383])
    (455902 return _void[47])
  }
  function _owned[39039](?).init=[38585](arg _mt[39075]:_MT[227], ref arg this[39073]:_owned[39039](?), arg src[38582]:unmanaged[209](?)) : void[4] "method" "primary method" "no return value for void"
  {
    (38605 call compilerError "cannot create an owned variable from an unmanaged class instance")
    unknown tmp[429396] "temp" "type variable"
    (429398 'move' tmp[429396] int(64)[13])
    (429400 'init field' this[39073] c"chpl_t" tmp[429396])
    unknown tmp[429405] "temp"
    unknown call_tmp[551147] "expr temp" "maybe param" "maybe type" "temp"
    (551150 'move' call_tmp[551147](429415 '.v' this[39073] c"chpl_t"))
    unknown call_tmp[551152] "expr temp" "maybe param" "maybe type" "temp"
    (551155 'move' call_tmp[551152](429407 'to nilable class' call_tmp[551147]))
    (429409 'default init var' tmp[429405] call_tmp[551152])
    (429411 '.=' this[39073] c"chpl_p" tmp[429405])
    (455904 return _void[47])
  }
  function _owned[39039](?).init=[38624](arg _mt[39079]:_MT[227], ref arg this[39077]:_owned[39039](?), arg src[38621]:_nilType[36]) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[551159] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (551162 'move' call_tmp[551159](38631 'typeof' this[39077]))
    unknown call_tmp[551166] "expr temp" "maybe param" "maybe type" "temp"
    (551169 'move' call_tmp[551166](38632 call chpl_t _mt[232] call_tmp[551159]))
    (38636 call(38627 call (partial) init _mt[232] this[39077]) call_tmp[551166])
    unknown tmp[393516] "maybe param" "temp"
    unknown call_tmp[551173] "expr temp" "maybe param" "maybe type" "temp"
    (551176 'move' call_tmp[551173](335811 call chpl_t _mt[232] this[39077]))
    (393527 'move' tmp[393516](38642 call isNonNilableClass call_tmp[551173]))
    unknown call_tmp[551178] "expr temp" "maybe param" "maybe type" "temp"
    (551181 'move' call_tmp[551178](393529 call _cond_invalid tmp[393516]))
    if call_tmp[551178]
    {
      (393532 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[502700] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502701] "maybe param" "temp"
    unknown call_tmp[551183] "expr temp" "maybe param" "maybe type" "temp"
    (551186 'move' call_tmp[551183](393517 call isTrue tmp[393516]))
    (502706 'move' tmp[502701](502704 call _cond_test call_tmp[551183]))
    if tmp[502701]
    {
      unknown tmp[502708] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[551188] "expr temp" "maybe param" "maybe type" "temp"
      (551191 'move' call_tmp[551188](38644 call ! 0))
      (502710 'move' tmp[502708](393520 call isTrue call_tmp[551188]))
      (502715 'move' tmp[502700](502712 '_paramFoldLogical' tmp[502701] tmp[502708]))
    }
    {
      (502720 'move' tmp[502700](502717 '_paramFoldLogical' tmp[502701] 0))
    }
    unknown call_tmp[551193] "expr temp" "maybe param" "maybe type" "temp"
    (551196 'move' call_tmp[551193](38669 call _cond_test tmp[502700]))
    if call_tmp[551193]
    {
      (38666 call compilerError "Assigning non-nilable owned to nil")
    }
    (455906 return _void[47])
  }
  function _owned[39039](?).init[38681](arg _mt[39083]:_MT[227], ref arg this[39081]:_owned[39039](?), ref arg src[38678]:_owned[39039](?)) : void[4] "method" "primary method" "no doc" "no return value for void"
  {
    unknown tmp[429418] "temp" "type variable"
    (429420 'move' tmp[429418](38688 call chpl_t _mt[232] src[38678]))
    (429422 'init field' this[39081] c"chpl_t" tmp[429418])
    unknown call_tmp[551202] "maybe param" "maybe type" "temp"
    (551205 'move' call_tmp[551202](38704 call(38700 call (partial) release _mt[232] src[38678])))
    unknown call_tmp[551207] "expr temp" "maybe param" "maybe type" "temp"
    (551210 'move' call_tmp[551207](429436 '.v' this[39081] c"chpl_t"))
    unknown call_tmp[551212] "maybe param" "maybe type" "temp"
    (551215 'move' call_tmp[551212](429428 'to nilable class' call_tmp[551207]))
    unknown tmp[429426] "temp"
    (429430 'init var' tmp[429426] call_tmp[551202] call_tmp[551212])
    (429432 'init field' this[39081] c"chpl_p" tmp[429426])
    (455908 return _void[47])
  }
  function _owned[39039](?).deinit[38712](arg _mt[39087]:_MT[227], arg this[39085]:_owned[39039](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[551219] "expr temp" "maybe param" "maybe type" "temp"
    (551222 'move' call_tmp[551219](335822 call chpl_p _mt[232] this[39085]))
    unknown call_tmp[551224] "expr temp" "maybe param" "maybe type" "temp"
    (551227 'move' call_tmp[551224](38717 call isClass call_tmp[551219]))
    unknown call_tmp[551229] "expr temp" "maybe param" "maybe type" "temp"
    (551232 'move' call_tmp[551229](38736 call _cond_test call_tmp[551224]))
    if call_tmp[551229]
    {
      unknown call_tmp[551236] "expr temp" "maybe param" "maybe type" "temp"
      (551239 'move' call_tmp[551236](335827 call chpl_p _mt[232] this[39085]))
      unknown call_tmp[551241] "expr temp" "maybe param" "maybe type" "temp"
      (551244 'move' call_tmp[551241](38720 call != call_tmp[551236] nil[38]))
      unknown call_tmp[551246] "expr temp" "maybe param" "maybe type" "temp"
      (551249 'move' call_tmp[551246](38730 call _cond_test call_tmp[551241]))
      if call_tmp[551246]
      {
        unknown call_tmp[551253] "expr temp" "maybe param" "maybe type" "temp"
        (551256 'move' call_tmp[551253](335832 call chpl_p _mt[232] this[39085]))
        unknown call_tmp[551258] "expr temp" "maybe param" "maybe type" "temp"
        (551261 'move' call_tmp[551258](38725 call _to_unmanaged call_tmp[551253]))
        (38727 call chpl__delete call_tmp[551258])
      }
    }
    (455910 return _void[47])
  }
  function _owned[39039](?).clear[38745](arg _mt[39091]:_MT[227], ref arg this[39089]:_owned[39039](?)) : _unknown[43] "leaves this nil" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[551265] "expr temp" "maybe param" "maybe type" "temp"
    (551268 'move' call_tmp[551265](335837 call chpl_p _mt[232] this[39089]))
    unknown call_tmp[551270] "expr temp" "maybe param" "maybe type" "temp"
    (551273 'move' call_tmp[551270](38749 call != call_tmp[551265] nil[38]))
    unknown call_tmp[551275] "expr temp" "maybe param" "maybe type" "temp"
    (551278 'move' call_tmp[551275](38765 call _cond_test call_tmp[551270]))
    if call_tmp[551275]
    {
      unknown call_tmp[551282] "expr temp" "maybe param" "maybe type" "temp"
      (551285 'move' call_tmp[551282](335842 call chpl_p _mt[232] this[39089]))
      unknown call_tmp[551287] "expr temp" "maybe param" "maybe type" "temp"
      (551290 'move' call_tmp[551287](38754 call _to_unmanaged call_tmp[551282]))
      (38756 call chpl__delete call_tmp[551287])
      unknown call_tmp[551294] "expr temp" "maybe param" "maybe type" "temp"
      (551297 'move' call_tmp[551294](335847 call chpl_p _mt[232] this[39089]))
      (38762 call = call_tmp[551294] nil[38])
    }
    (455912 return _void[47])
  }
  function _owned[39039](?).retain[38778](arg _mt[39095]:_MT[227], ref arg this[39093]:_owned[39039](?), arg newPtr[38775]:unmanaged[209](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[551301] "expr temp" "maybe param" "maybe type" "temp"
    (551304 'move' call_tmp[551301](335853 call chpl_t _mt[232] this[39093]))
    unknown call_tmp[551306] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (551309 'move' call_tmp[551306](38782 'typeof' newPtr[38775]))
    unknown call_tmp[551311] "expr temp" "maybe param" "maybe type" "temp"
    (551314 'move' call_tmp[551311](328423 'is_coercible' call_tmp[551301] call_tmp[551306]))
    unknown call_tmp[551316] "expr temp" "maybe param" "maybe type" "temp"
    (551319 'move' call_tmp[551316](38786 call ! call_tmp[551311]))
    unknown call_tmp[551321] "expr temp" "maybe param" "maybe type" "temp"
    (551324 'move' call_tmp[551321](38878 call _cond_test call_tmp[551316]))
    if call_tmp[551321]
    {
      unknown call_tmp[551326] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (551329 'move' call_tmp[551326](38806 'typeof' newPtr[38775]))
      unknown call_tmp[551331] "expr temp" "maybe param" "maybe type" "temp"
      (551334 'move' call_tmp[551331](38808 call _cast string[24] call_tmp[551326]))
      unknown call_tmp[551336] "expr temp" "maybe param" "maybe type" "temp"
      (551339 'move' call_tmp[551336](38810 call + "cannot retain '" call_tmp[551331]))
      unknown call_tmp[551341] "expr temp" "maybe param" "maybe type" "temp"
      (551344 'move' call_tmp[551341](38828 call + call_tmp[551336] "' "))
      unknown call_tmp[551346] "expr temp" "maybe param" "maybe type" "temp"
      (551349 'move' call_tmp[551346](38846 call + call_tmp[551341] "(expected '"))
      unknown call_tmp[551353] "expr temp" "maybe param" "maybe type" "temp"
      (551356 'move' call_tmp[551353](335859 call chpl_t _mt[232] this[39093]))
      unknown call_tmp[551358] "expr temp" "maybe param" "maybe type" "temp"
      (551361 'move' call_tmp[551358](38851 call _to_unmanaged call_tmp[551353]))
      unknown call_tmp[551363] "expr temp" "maybe param" "maybe type" "temp"
      (551366 'move' call_tmp[551363](38853 call _cast string[24] call_tmp[551358]))
      unknown call_tmp[551368] "expr temp" "maybe param" "maybe type" "temp"
      (551371 'move' call_tmp[551368](38855 call + call_tmp[551346] call_tmp[551363]))
      unknown call_tmp[551373] "expr temp" "maybe param" "maybe type" "temp"
      (551376 'move' call_tmp[551373](38873 call + call_tmp[551368] "')"))
      (38876 call compilerError call_tmp[551373])
    }
    unknown call_tmp[551380] "maybe param" "maybe type" "temp"
    (551383 'move' call_tmp[551380](335864 call chpl_p _mt[232] this[39093]))
    unknown oldPtr[38885] "insert auto destroy"
    (489042 'init var' oldPtr[38885] call_tmp[551380])
    unknown call_tmp[551387] "expr temp" "maybe param" "maybe type" "temp"
    (551390 'move' call_tmp[551387](335869 call chpl_p _mt[232] this[39093]))
    (38890 call = call_tmp[551387] newPtr[38775])
    unknown call_tmp[551392] "expr temp" "maybe param" "maybe type" "temp"
    (551395 'move' call_tmp[551392](38902 call _cond_test oldPtr[38885]))
    if call_tmp[551392]
    {
      unknown call_tmp[551397] "expr temp" "maybe param" "maybe type" "temp"
      (551400 'move' call_tmp[551397](38897 call _to_unmanaged oldPtr[38885]))
      (38899 call chpl__delete call_tmp[551397])
    }
    (455914 return _void[47])
  }
  function _owned[39039](?).release[38911](arg _mt[39099]:_MT[227], ref arg this[39097]:_owned[39039](?)) : _unknown[43] "leaves this nil" "nil from this" "method" "primary method"
  {
    unknown ret[455918] "RVV" "temp"
    unknown call_tmp[551404] "maybe param" "maybe type" "temp"
    (551407 'move' call_tmp[551404](335877 call chpl_p _mt[232] this[39097]))
    unknown oldPtr[38914] "insert auto destroy"
    (489044 'init var' oldPtr[38914] call_tmp[551404])
    unknown call_tmp[551411] "expr temp" "maybe param" "maybe type" "temp"
    (551414 'move' call_tmp[551411](335882 call chpl_p _mt[232] this[39097]))
    (38920 call = call_tmp[551411] nil[38])
    unknown call_tmp[551418] "expr temp" "maybe param" "maybe type" "temp"
    (551421 'move' call_tmp[551418](335887 call chpl_t _mt[232] this[39097]))
    unknown call_tmp[551423] "expr temp" "maybe param" "maybe type" "temp"
    (551426 'move' call_tmp[551423](38926 call _to_nilable call_tmp[551418]))
    unknown call_tmp[551430] "expr temp" "maybe param" "maybe type" "temp"
    (551433 'move' call_tmp[551430](335892 call chpl_t _mt[232] this[39097]))
    unknown call_tmp[551435] "expr temp" "maybe param" "maybe type" "temp"
    (551438 'move' call_tmp[551435](38928 call == call_tmp[551423] call_tmp[551430]))
    unknown call_tmp[551440] "expr temp" "maybe param" "maybe type" "temp"
    (551443 'move' call_tmp[551440](38961 call _cond_test call_tmp[551435]))
    if call_tmp[551440]
    {
      unknown call_tmp[551445] "expr temp" "maybe param" "maybe type" "temp"
      (551448 'move' call_tmp[551445](38933 call _to_unmanaged oldPtr[38914]))
      (455923 'move' ret[455918](455922 'deref' call_tmp[551445]))
      gotoReturn _end_release[455916] _end_release[455916]
    }
    {
      unknown call_tmp[551450] "expr temp" "maybe param" "maybe type" "temp"
      (551453 'move' call_tmp[551450](38957 call _cond_test 0))
      if call_tmp[551450]
      {
        unknown call_tmp[551455] "expr temp" "maybe param" "maybe type" "temp"
        (551458 'move' call_tmp[551455](38942 call _to_nonnil oldPtr[38914]))
        unknown call_tmp[551460] "expr temp" "maybe param" "maybe type" "temp"
        (551463 'move' call_tmp[551460](38944 call _to_unmanaged call_tmp[551455]))
        (455928 'move' ret[455918](455927 'deref' call_tmp[551460]))
        gotoReturn _end_release[455916] _end_release[455916]
      }
      {
        unknown call_tmp[551465] "expr temp" "maybe param" "maybe type" "temp"
        (551468 'move' call_tmp[551465](38950 call postfix! oldPtr[38914]))
        unknown call_tmp[551470] "expr temp" "maybe param" "maybe type" "temp"
        (551473 'move' call_tmp[551470](38953 call _to_unmanaged call_tmp[551465]))
        (455933 'move' ret[455918](455932 'deref' call_tmp[551470]))
        gotoReturn _end_release[455916] _end_release[455916]
      }
    }
    label _end_release[455916]
    (455920 return ret[455918])
  }
  function _owned[39039](?).borrow[38970](arg _mt[39103]:_MT[227], arg this[39101]:_owned[39039](?)) : _unknown[43] "nil from this" "method" "primary method"
  {
    unknown ret[455939] "RVV" "temp"
    unknown call_tmp[551477] "expr temp" "maybe param" "maybe type" "temp"
    (551480 'move' call_tmp[551477](335901 call chpl_t _mt[232] this[39101]))
    unknown call_tmp[551482] "expr temp" "maybe param" "maybe type" "temp"
    (551485 'move' call_tmp[551482](38975 call _to_nilable call_tmp[551477]))
    unknown call_tmp[551489] "expr temp" "maybe param" "maybe type" "temp"
    (551492 'move' call_tmp[551489](335906 call chpl_t _mt[232] this[39101]))
    unknown call_tmp[551494] "expr temp" "maybe param" "maybe type" "temp"
    (551497 'move' call_tmp[551494](38977 call == call_tmp[551482] call_tmp[551489]))
    unknown call_tmp[551499] "expr temp" "maybe param" "maybe type" "temp"
    (551502 'move' call_tmp[551499](39001 call _cond_test call_tmp[551494]))
    if call_tmp[551499]
    {
      unknown call_tmp[551506] "expr temp" "maybe param" "maybe type" "temp"
      (551509 'move' call_tmp[551506](335911 call chpl_p _mt[232] this[39101]))
      (455944 'move' ret[455939](455943 'deref' call_tmp[551506]))
      gotoReturn _end_borrow[455937] _end_borrow[455937]
    }
    {
      unknown call_tmp[551511] "expr temp" "maybe param" "maybe type" "temp"
      (551514 'move' call_tmp[551511](38997 call _cond_test 0))
      if call_tmp[551511]
      {
        unknown call_tmp[551518] "expr temp" "maybe param" "maybe type" "temp"
        (551521 'move' call_tmp[551518](335917 call chpl_p _mt[232] this[39101]))
        unknown call_tmp[551523] "expr temp" "maybe param" "maybe type" "temp"
        (551526 'move' call_tmp[551523](38987 call _to_nonnil call_tmp[551518]))
        (455949 'move' ret[455939](455948 'deref' call_tmp[551523]))
        gotoReturn _end_borrow[455937] _end_borrow[455937]
      }
      {
        unknown call_tmp[551530] "expr temp" "maybe param" "maybe type" "temp"
        (551533 'move' call_tmp[551530](335922 call chpl_p _mt[232] this[39101]))
        unknown call_tmp[551535] "expr temp" "maybe param" "maybe type" "temp"
        (551538 'move' call_tmp[551535](38992 call postfix! call_tmp[551530]))
        (455954 'move' ret[455939](455953 'deref' call_tmp[551535]))
        gotoReturn _end_borrow[455937] _end_borrow[455937]
      }
    }
    label _end_borrow[455937]
    (455941 return ret[455939])
  }
  function _owned[39039](?).borrow[39011](arg _mt[39107]:_MT[227], arg this[39105]:_owned[39039](?)) type : _unknown[43] "method" "primary method"
  {
    unknown ret[455960] "RVV" "temp" "type variable"
    unknown call_tmp[551542] "expr temp" "maybe param" "maybe type" "temp"
    (551545 'move' call_tmp[551542](335927 call chpl_t _mt[232] this[39105]))
    unknown call_tmp[551547] "expr temp" "maybe param" "maybe type" "temp"
    (551550 'move' call_tmp[551547](39016 call _to_nilable call_tmp[551542]))
    unknown call_tmp[551554] "expr temp" "maybe param" "maybe type" "temp"
    (551557 'move' call_tmp[551554](335932 call chpl_t _mt[232] this[39105]))
    unknown call_tmp[551559] "expr temp" "maybe param" "maybe type" "temp"
    (551562 'move' call_tmp[551559](39018 call == call_tmp[551547] call_tmp[551554]))
    unknown call_tmp[551564] "expr temp" "maybe param" "maybe type" "temp"
    (551567 'move' call_tmp[551564](39031 call _cond_test call_tmp[551559]))
    if call_tmp[551564]
    {
      unknown call_tmp[551571] "expr temp" "maybe param" "maybe type" "temp"
      (551574 'move' call_tmp[551571](335937 call chpl_t _mt[232] this[39105]))
      (455965 'move' ret[455960](455964 'deref' call_tmp[551571]))
      gotoReturn _end_borrow[455958] _end_borrow[455958]
    }
    {
      unknown call_tmp[551578] "expr temp" "maybe param" "maybe type" "temp"
      (551581 'move' call_tmp[551578](335942 call chpl_t _mt[232] this[39105]))
      unknown call_tmp[551583] "expr temp" "maybe param" "maybe type" "temp"
      (551586 'move' call_tmp[551583](39027 call _to_nonnil call_tmp[551578]))
      (455970 'move' ret[455960](455969 'deref' call_tmp[551583]))
      gotoReturn _end_borrow[455958] _end_borrow[455958]
    }
    label _end_borrow[455958]
    (455962 return ret[455960])
  }
  function _owned[39039](?).chpl_t[698678](arg _mt[698680]:_MT[227], arg this[698682]:_owned[39039](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[698699] "RVV" "temp" "type variable"
    unknown call_tmp[698713] "expr temp" "maybe param" "maybe type" "temp"
    (698716 'move' call_tmp[698713](698687 'is bound' this[698682] c"chpl_t"))
    if call_tmp[698713]
    {
      unknown call_tmp[698718] "expr temp" "maybe param" "maybe type" "temp"
      (698721 'move' call_tmp[698718](698686 '.v' this[698682] c"chpl_t"))
      (698704 'move' ret[698699](698703 'deref' call_tmp[698718]))
      gotoReturn _end_chpl_t[698697] _end_chpl_t[698697]
    }
    {
      (698709 'move' ret[698699](698708 'deref' _uninstantiated[247]))
      gotoReturn _end_chpl_t[698697] _end_chpl_t[698697]
    }
    label _end_chpl_t[698697]
    (698701 return ret[698699])
  }
  function _owned[39039](?).chpl_t[698723](arg _mt[698725]:_MT[227], arg this[698727]:_owned[39039](?)) type : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[698744] "RVV" "temp" "type variable"
    unknown call_tmp[698758] "expr temp" "maybe param" "maybe type" "temp"
    (698761 'move' call_tmp[698758](698732 'is bound' this[698727] c"chpl_t"))
    if call_tmp[698758]
    {
      unknown call_tmp[698763] "expr temp" "maybe param" "maybe type" "temp"
      (698766 'move' call_tmp[698763](698731 '.v' this[698727] c"chpl_t"))
      (698749 'move' ret[698744](698748 'deref' call_tmp[698763]))
      gotoReturn _end_chpl_t[698742] _end_chpl_t[698742]
    }
    {
      (698754 'move' ret[698744](698753 'deref' _uninstantiated[247]))
      gotoReturn _end_chpl_t[698742] _end_chpl_t[698742]
    }
    label _end_chpl_t[698742]
    (698746 return ret[698744])
  }
  function _owned[39039](?).chpl_p[698768](arg _mt[698770]:_MT[227], ref arg this[698772]:_owned[39039](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[698781] "RVV" "temp"
    unknown call_tmp[698788] "expr temp" "maybe param" "maybe type" "temp"
    (698791 'move' call_tmp[698788](698776 '.' this[698772] c"chpl_p"))
    (698786 'move' ret[698781](698785 'addr of' call_tmp[698788]))
    (698783 return ret[698781])
  }
  function _owned[39039](?).init=[698793](arg _mt[698796]:_MT[227], ref arg this[698797]:_owned[39039](?), arg other[698800] :
  (698799 'typeof' this[698797])) : void[4] "compiler generated" "copy initializer" "last resort" "method" "primary method"
  {
    unknown tmp[698825] "temp" "type variable"
    (698827 'move' tmp[698825](698809 call chpl_t _mt[232] other[698800]))
    (698829 'init field' this[698797] c"chpl_t" tmp[698825])
    unknown call_tmp[698852] "maybe param" "maybe type" "temp"
    (698855 'move' call_tmp[698852](698819 call chpl_p _mt[232] other[698800]))
    unknown call_tmp[698857] "expr temp" "maybe param" "maybe type" "temp"
    (698860 'move' call_tmp[698857](698843 '.v' this[698797] c"chpl_t"))
    unknown call_tmp[698862] "maybe param" "maybe type" "temp"
    (698865 'move' call_tmp[698862](698835 'to nilable class' call_tmp[698857]))
    unknown tmp[698833] "temp"
    (698837 'init var' tmp[698833] call_tmp[698852] call_tmp[698862])
    (698839 'init field' this[698797] c"chpl_p" tmp[698833])
    (698846 return _void[47])
  }
  function _owned[39039](?).writeThis[698867](arg _mt[698871]:_MT[227], arg this[698869]:_owned[39039](?), arg f[698870]:_any[170](?)) : void[4] "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (698882 call(698878 call (partial) readWriteThis _mt[232] this[698869]) f[698870])
    (698884 return _void[47])
  }
  function _owned[39039](?).readThis[698888](arg _mt[698892]:_MT[227], arg this[698890]:_owned[39039](?), arg f[698891]:_any[170](?)) : void[4] "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (698900 call(698896 call (partial) readWriteThis _mt[232] this[698890]) f[698891])
    (698903 return _void[47])
  }
  function ==[698907](arg _arg1[698909]:_owned[39039](?), arg _arg2[698910]:_owned[39039](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[698953]:bool[10] "RVV" "temp"
    unknown call_tmp[698970] "expr temp" "maybe param" "maybe type" "temp"
    (698973 'move' call_tmp[698970](698920 call chpl_t _mt[232] _arg1[698909]))
    unknown call_tmp[698975] "expr temp" "maybe param" "maybe type" "temp"
    (698978 'move' call_tmp[698975](698924 call chpl_t _mt[232] _arg2[698910]))
    unknown call_tmp[698980] "expr temp" "maybe param" "maybe type" "temp"
    (698983 'move' call_tmp[698980](698928 call != call_tmp[698970] call_tmp[698975]))
    if call_tmp[698980]
    {
      (698958 'move' ret[698953](698957 'deref' 0))
      gotoReturn _end_==[698951] _end_==[698951]
    }
    unknown call_tmp[698985] "expr temp" "maybe param" "maybe type" "temp"
    (698988 'move' call_tmp[698985](698934 call chpl_p _mt[232] _arg1[698909]))
    unknown call_tmp[698990] "expr temp" "maybe param" "maybe type" "temp"
    (698993 'move' call_tmp[698990](698938 call chpl_p _mt[232] _arg2[698910]))
    unknown call_tmp[698995] "expr temp" "maybe param" "maybe type" "temp"
    (698998 'move' call_tmp[698995](698942 call != call_tmp[698985] call_tmp[698990]))
    if call_tmp[698995]
    {
      (698963 'move' ret[698953](698962 'deref' 0))
      gotoReturn _end_==[698951] _end_==[698951]
    }
    (698968 'move' ret[698953](698967 'deref' 1))
    label _end_==[698951]
    (698955 return ret[698953])
  }
  where {
    unknown call_tmp[699000] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (699003 'move' call_tmp[699000](698913 'typeof' _arg1[698909]))
    unknown call_tmp[699005] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (699008 'move' call_tmp[699005](698915 'typeof' _arg2[698910]))
    (698917 call == call_tmp[699000] call_tmp[699005])
  }
  function !=[699010](arg _arg1[699012]:_owned[39039](?), arg _arg2[699013]:_owned[39039](?)) : bool[10] "compiler generated" "last resort"
  {
    val ret[699056]:bool[10] "RVV" "temp"
    unknown call_tmp[699073] "expr temp" "maybe param" "maybe type" "temp"
    (699076 'move' call_tmp[699073](699023 call chpl_t _mt[232] _arg1[699012]))
    unknown call_tmp[699078] "expr temp" "maybe param" "maybe type" "temp"
    (699081 'move' call_tmp[699078](699027 call chpl_t _mt[232] _arg2[699013]))
    unknown call_tmp[699083] "expr temp" "maybe param" "maybe type" "temp"
    (699086 'move' call_tmp[699083](699031 call != call_tmp[699073] call_tmp[699078]))
    if call_tmp[699083]
    {
      (699061 'move' ret[699056](699060 'deref' 1))
      gotoReturn _end_!=[699054] _end_!=[699054]
    }
    unknown call_tmp[699088] "expr temp" "maybe param" "maybe type" "temp"
    (699091 'move' call_tmp[699088](699037 call chpl_p _mt[232] _arg1[699012]))
    unknown call_tmp[699093] "expr temp" "maybe param" "maybe type" "temp"
    (699096 'move' call_tmp[699093](699041 call chpl_p _mt[232] _arg2[699013]))
    unknown call_tmp[699098] "expr temp" "maybe param" "maybe type" "temp"
    (699101 'move' call_tmp[699098](699045 call != call_tmp[699088] call_tmp[699093]))
    if call_tmp[699098]
    {
      (699066 'move' ret[699056](699065 'deref' 1))
      gotoReturn _end_!=[699054] _end_!=[699054]
    }
    (699071 'move' ret[699056](699070 'deref' 0))
    label _end_!=[699054]
    (699058 return ret[699056])
  }
  where {
    unknown call_tmp[699103] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (699106 'move' call_tmp[699103](699016 'typeof' _arg1[699012]))
    unknown call_tmp[699108] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (699111 'move' call_tmp[699108](699018 'typeof' _arg2[699013]))
    (699020 call == call_tmp[699103] call_tmp[699108])
  }
  function chpl__defaultHash[699113](arg r[699115]:_owned[39039](?)) : _unknown[43] "compiler generated" "last resort"
  {
    unknown ret[699136] "RVV" "temp"
    unknown call_tmp[699143] "expr temp" "maybe param" "maybe type" "temp"
    (699146 'move' call_tmp[699143](699123 call chpl_p _mt[232] r[699115]))
    unknown call_tmp[699148] "expr temp" "maybe param" "maybe type" "temp"
    (699151 'move' call_tmp[699148](699127 call chpl__defaultHash call_tmp[699143]))
    unknown call_tmp[699153] "expr temp" "maybe param" "maybe type" "temp"
    (699156 'move' call_tmp[699153](699117 call chpl_t _mt[232] r[699115]))
    unknown call_tmp[699158] "expr temp" "maybe param" "maybe type" "temp"
    (699161 'move' call_tmp[699158](699121 call chpl__defaultHash call_tmp[699153]))
    unknown call_tmp[699163] "expr temp" "maybe param" "maybe type" "temp"
    (699166 'move' call_tmp[699163](699129 call chpl__defaultHashCombine call_tmp[699148] call_tmp[699158] 2))
    (699141 'move' ret[699136](699140 'deref' call_tmp[699163]))
    (699138 return ret[699136])
  }
  type _owned[39039](?) unknown chpl_t[38111] "no doc" "type variable" unknown chpl_p[38118] "no doc" "owned"(38117 'to nilable class' chpl_t[38111]) forwarding ( )
  type managed _owned[389732](?)
  type managed _owned?[389728](?)
  function =[39116](ref arg lhs[39113]:_owned[39039](?), ref arg rhs[39119]:_owned[39039](?)) : _unknown[43] "assignop" "no return value for void"
  {
    unknown tmp[393579] "maybe param" "temp"
    unknown call_tmp[551590] "expr temp" "maybe param" "maybe type" "temp"
    (551593 'move' call_tmp[551590](39143 call chpl_p _mt[232] lhs[39113]))
    (393590 'move' tmp[393579](39147 call == call_tmp[551590] nil[38]))
    unknown call_tmp[551595] "expr temp" "maybe param" "maybe type" "temp"
    (551598 'move' call_tmp[551595](393592 call _cond_invalid tmp[393579]))
    if call_tmp[551595]
    {
      (393595 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[502727] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502728] "maybe param" "temp"
    unknown call_tmp[551600] "expr temp" "maybe param" "maybe type" "temp"
    (551603 'move' call_tmp[551600](393580 call isTrue tmp[393579]))
    (502733 'move' tmp[502728](502731 call _cond_test call_tmp[551600]))
    if tmp[502728]
    {
      unknown tmp[502735] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[551607] "expr temp" "maybe param" "maybe type" "temp"
      (551610 'move' call_tmp[551607](39150 call chpl_p _mt[232] rhs[39119]))
      unknown call_tmp[551612] "expr temp" "maybe param" "maybe type" "temp"
      (551615 'move' call_tmp[551612](39154 call == call_tmp[551607] nil[38]))
      (502737 'move' tmp[502735](393583 call isTrue call_tmp[551612]))
      (502742 'move' tmp[502727](502739 '_paramFoldLogical' tmp[502728] tmp[502735]))
    }
    {
      (502747 'move' tmp[502727](502744 '_paramFoldLogical' tmp[502728] 0))
    }
    unknown call_tmp[551617] "expr temp" "maybe param" "maybe type" "temp"
    (551620 'move' call_tmp[551617](39160 call _cond_test tmp[502727]))
    if call_tmp[551617]
    {
      gotoReturn _end_=[455974] _end_=[455974]
    }
    unknown call_tmp[551622] "expr temp" "maybe param" "maybe type" "temp"
    (551625 'move' call_tmp[551622](39238 call _cond_test 1))
    if call_tmp[551622]
    {
      unknown call_tmp[551629] "expr temp" "maybe param" "maybe type" "temp"
      (551632 'move' call_tmp[551629](39168 call chpl_t _mt[232] lhs[39113]))
      unknown call_tmp[551634] "expr temp" "maybe param" "maybe type" "temp"
      (551637 'move' call_tmp[551634](39172 call _to_nonnil call_tmp[551629]))
      unknown call_tmp[551641] "expr temp" "maybe param" "maybe type" "temp"
      (551644 'move' call_tmp[551641](39174 call chpl_t _mt[232] lhs[39113]))
      unknown call_tmp[551646] "expr temp" "maybe param" "maybe type" "temp"
      (551649 'move' call_tmp[551646](39177 call == call_tmp[551634] call_tmp[551641]))
      unknown call_tmp[551651] "expr temp" "maybe param" "maybe type" "temp"
      (551654 'move' call_tmp[551651](39233 call _cond_test call_tmp[551646]))
      if call_tmp[551651]
      {
        unknown call_tmp[551658] "expr temp" "maybe param" "maybe type" "temp"
        (551661 'move' call_tmp[551658](39181 call chpl_t _mt[232] rhs[39119]))
        unknown call_tmp[551663] "expr temp" "maybe param" "maybe type" "temp"
        (551666 'move' call_tmp[551663](39185 call _to_nilable call_tmp[551658]))
        unknown call_tmp[551670] "expr temp" "maybe param" "maybe type" "temp"
        (551673 'move' call_tmp[551670](39187 call chpl_t _mt[232] rhs[39119]))
        unknown call_tmp[551675] "expr temp" "maybe param" "maybe type" "temp"
        (551678 'move' call_tmp[551675](39190 call == call_tmp[551663] call_tmp[551670]))
        unknown call_tmp[551680] "expr temp" "maybe param" "maybe type" "temp"
        (551683 'move' call_tmp[551680](39228 call _cond_test call_tmp[551675]))
        if call_tmp[551680]
        {
          unknown call_tmp[551687] "expr temp" "maybe param" "maybe type" "temp"
          (551690 'move' call_tmp[551687](39193 call chpl_p _mt[232] rhs[39119]))
          unknown call_tmp[551692] "expr temp" "maybe param" "maybe type" "temp"
          (551695 'move' call_tmp[551692](39197 call == call_tmp[551687] nil[38]))
          unknown call_tmp[551697] "expr temp" "maybe param" "maybe type" "temp"
          (551700 'move' call_tmp[551697](39223 call _cond_test call_tmp[551692]))
          if call_tmp[551697]
          {
            (39220 call nilCheckHalt module=[244] HaltWrappers[197622] "argument to owned = is nil")
          }
        }
      }
    }
    unknown call_tmp[551706] "expr temp" "maybe param" "maybe type" "temp"
    (551709 'move' call_tmp[551706](39253 call(39249 call (partial) release _mt[232] rhs[39119])))
    unknown call_tmp[551711] "expr temp" "maybe param" "maybe type" "temp"
    (551714 'move' call_tmp[551711](39254 call postfix! call_tmp[551706]))
    (39257 call(39245 call (partial) retain _mt[232] lhs[39113]) call_tmp[551711])
    label _end_=[455974]
    (455976 return _void[47])
    (329313 'used modules list'(39139 'use' HaltWrappers[197622] 'only' ))
  }
  where {
    unknown tmp[393537] "maybe param" "temp"
    (393548 'move' tmp[393537] 0)
    unknown call_tmp[551716] "expr temp" "maybe param" "maybe type" "temp"
    (551719 'move' call_tmp[551716](393550 call _cond_invalid tmp[393537]))
    if call_tmp[551716]
    {
      (393553 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[502781] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502782] "maybe param" "temp"
    unknown call_tmp[551721] "expr temp" "maybe param" "maybe type" "temp"
    (551724 'move' call_tmp[551721](393538 call isTrue tmp[393537]))
    (502787 'move' tmp[502782](502785 call _cond_test call_tmp[551721]))
    if tmp[502782]
    {
      (502792 'move' tmp[502781](502789 '_paramFoldLogical' tmp[502782] 1))
    }
    {
      unknown tmp[393558] "maybe param" "temp"
      (393569 'move' tmp[393558](39126 call isNonNilableClass lhs[39113]))
      unknown call_tmp[551726] "expr temp" "maybe param" "maybe type" "temp"
      (551729 'move' call_tmp[551726](393571 call _cond_invalid tmp[393558]))
      if call_tmp[551726]
      {
        (393574 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[502754] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[502755] "maybe param" "temp"
      unknown call_tmp[551731] "expr temp" "maybe param" "maybe type" "temp"
      (551734 'move' call_tmp[551731](393559 call isTrue tmp[393558]))
      (502760 'move' tmp[502755](502758 call _cond_test call_tmp[551731]))
      if tmp[502755]
      {
        unknown tmp[502762] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[551736] "expr temp" "maybe param" "maybe type" "temp"
        (551739 'move' call_tmp[551736](39130 call isNilableClass rhs[39119]))
        (502764 'move' tmp[502762](393562 call isTrue call_tmp[551736]))
        (502769 'move' tmp[502754](502766 '_paramFoldLogical' tmp[502755] tmp[502762]))
      }
      {
        (502774 'move' tmp[502754](502771 '_paramFoldLogical' tmp[502755] 0))
      }
      unknown tmp[502794] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[551741] "expr temp" "maybe param" "maybe type" "temp"
      (551744 'move' call_tmp[551741](39133 call ! tmp[502754]))
      (502796 'move' tmp[502794](393542 call isTrue call_tmp[551741]))
      (502801 'move' tmp[502781](502798 '_paramFoldLogical' tmp[502782] tmp[502794]))
    }
    (691761 call _statementLevelSymbol tmp[502781])
  }
  function =[39268](ref arg lhs[39265]:_owned[39039](?), arg rhs[39271]:_nilType[36]) : _unknown[43] "assignop" "no doc" "no return value for void"
  {
    (39290 call(39286 call (partial) clear _mt[232] lhs[39265]))
    (455980 return _void[47])
  }
  where {
    unknown tmp[393600] "maybe param" "temp"
    (393611 'move' tmp[393600] 0)
    unknown call_tmp[551748] "expr temp" "maybe param" "maybe type" "temp"
    (551751 'move' call_tmp[551748](393613 call _cond_invalid tmp[393600]))
    if call_tmp[551748]
    {
      (393616 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[502808] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502809] "maybe param" "temp"
    unknown call_tmp[551753] "expr temp" "maybe param" "maybe type" "temp"
    (551756 'move' call_tmp[551753](393601 call isTrue tmp[393600]))
    (502814 'move' tmp[502809](502812 call _cond_test call_tmp[551753]))
    if tmp[502809]
    {
      (502819 'move' tmp[502808](502816 '_paramFoldLogical' tmp[502809] 1))
    }
    {
      unknown tmp[502821] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[551758] "expr temp" "maybe param" "maybe type" "temp"
      (551761 'move' call_tmp[551758](39278 call isNonNilableClass lhs[39265]))
      unknown call_tmp[551763] "expr temp" "maybe param" "maybe type" "temp"
      (551766 'move' call_tmp[551763](39279 call ! call_tmp[551758]))
      (502823 'move' tmp[502821](393605 call isTrue call_tmp[551763]))
      (502828 'move' tmp[502808](502825 '_paramFoldLogical' tmp[502809] tmp[502821]))
    }
    (691763 call _statementLevelSymbol tmp[502808])
  }
  function <=>[39306](ref arg lhs[39303]:_owned[39039](?), ref arg rhs[39312] :
  unknown call_tmp[551768] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "no return value for void"
  {
    unknown call_tmp[551775] "expr temp" "maybe param" "maybe type" "temp"
    (551778 'move' call_tmp[551775](39316 call chpl_p _mt[232] lhs[39303]))
    unknown call_tmp[551782] "expr temp" "maybe param" "maybe type" "temp"
    (551785 'move' call_tmp[551782](39320 call chpl_p _mt[232] rhs[39312]))
    (39323 call <=> call_tmp[551775] call_tmp[551782])
    (455982 return _void[47])
  }
  function chpl__initCopy[39335](ref arg src[39332]:_owned[39039](?)) : _unknown[43] "init copy fn" "no doc"
  {
    unknown ret[455986] "RVV" "temp"
    unknown call_tmp[551787] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (551790 'move' call_tmp[551787](691301 'new' _owned[39039](?) src[39332]))
    unknown ret[39342]
    (489046 'init var' ret[39342] call_tmp[551787])
    (455991 'move' ret[455986](455990 'deref' ret[39342]))
    (455988 return ret[455986])
  }
  function chpl__autoCopy[39357](ref arg src[39354]:_owned[39039](?)) : _unknown[43] "auto copy fn" "no doc"
  {
    unknown ret[455995] "RVV" "temp"
    unknown call_tmp[551792] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (551795 'move' call_tmp[551792](691302 'new' _owned[39039](?) src[39354]))
    unknown ret[39364] "insert auto destroy"
    (489048 'init var' ret[39364] call_tmp[551792])
    (456000 'move' ret[455995](455999 'deref' ret[39364]))
    (455997 return ret[455995])
  }
  function chpl__autoDestroy[39379](ref arg x[39376]:_owned[39039](?)) : _unknown[43] "auto destroy fn" "no doc" "no return value for void"
  {
    unknown call_tmp[551797] "expr temp" "maybe param" "maybe type" "temp"
    (551800 'move' call_tmp[551797](39401 'deref' x[39376]))
    (39402 'call destructor' call_tmp[551797])
    (456002 return _void[47])
  }
  function _owned[39039](?).readWriteThis[39412](arg _mt[39417]:_MT[227], arg this[39414]:_owned[39039](?) :
  _owned[39039](?), arg f[39410]:_any[170](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    unknown call_tmp[551804] "expr temp" "maybe param" "maybe type" "temp"
    (551807 'move' call_tmp[551804](39421 call chpl_p _mt[232] this[39414]))
    (39424 call <~> f[39410] call_tmp[551804])
    (456004 return _void[47])
  }
  function _cast[39439](arg t[39436]:managed _owned?[389728](?), in arg x[39444]:managed _owned[389732](?)) : _unknown[43] "inline" "no doc"
  {
    unknown ret[456008] "RVV" "temp"
    unknown call_tmp[551811] "expr temp" "maybe param" "maybe type" "temp"
    (551814 'move' call_tmp[551811](39468 call chpl_t _mt[232] t[39436]))
    unknown call_tmp[551816] "expr temp" "maybe param" "maybe type" "temp"
    (551819 'move' call_tmp[551816](39472 call _to_unmanaged call_tmp[551811]))
    unknown call_tmp[551821] "expr temp" "maybe param" "maybe type" "temp"
    (551824 'move' call_tmp[551821](39474 call _to_nilable call_tmp[551816]))
    unknown call_tmp[551828] "expr temp" "maybe param" "maybe type" "temp"
    (551831 'move' call_tmp[551828](39462 call chpl_p _mt[232] x[39444]))
    unknown call_tmp[551833] "maybe param" "maybe type" "temp"
    (551836 'move' call_tmp[551833](39475 call _cast call_tmp[551821] call_tmp[551828]))
    unknown castPtr[39477] "insert auto destroy"
    (489050 'init var' castPtr[39477] call_tmp[551833])
    unknown call_tmp[551840] "expr temp" "maybe param" "maybe type" "temp"
    (551843 'move' call_tmp[551840](39482 call chpl_p _mt[232] x[39444]))
    (39486 call = call_tmp[551840] nil[38])
    unknown call_tmp[551845] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (551848 'move' call_tmp[551845](691303 'new' _owned[39039](?) castPtr[39477]))
    (456013 'move' ret[456008](456012 'deref' call_tmp[551845]))
    (456010 return ret[456008])
  }
  where {
    unknown call_tmp[551852] "expr temp" "maybe param" "maybe type" "temp"
    (551855 'move' call_tmp[551852](39455 call chpl_t _mt[232] t[39436]))
    unknown call_tmp[551857] "expr temp" "maybe param" "maybe type" "temp"
    (551860 'move' call_tmp[551857](39459 call _to_nonnil call_tmp[551852]))
    unknown call_tmp[551864] "expr temp" "maybe param" "maybe type" "temp"
    (551867 'move' call_tmp[551864](39449 call chpl_t _mt[232] x[39444]))
    (328425 'is_subtype' call_tmp[551857] call_tmp[551864])
  }
  function _cast[39508](arg t[39505]:managed _owned?[389728](?), in arg x[39514]:managed _owned?[389728](?)) : _unknown[43] "inline" "no doc"
  {
    unknown ret[456017] "RVV" "temp"
    unknown call_tmp[551871] "expr temp" "maybe param" "maybe type" "temp"
    (551874 'move' call_tmp[551871](39535 call chpl_t _mt[232] t[39505]))
    unknown call_tmp[551876] "expr temp" "maybe param" "maybe type" "temp"
    (551879 'move' call_tmp[551876](39539 call _to_unmanaged call_tmp[551871]))
    unknown call_tmp[551881] "expr temp" "maybe param" "maybe type" "temp"
    (551884 'move' call_tmp[551881](39541 call _to_nilable call_tmp[551876]))
    unknown call_tmp[551888] "expr temp" "maybe param" "maybe type" "temp"
    (551891 'move' call_tmp[551888](39529 call chpl_p _mt[232] x[39514]))
    unknown call_tmp[551893] "maybe param" "maybe type" "temp"
    (551896 'move' call_tmp[551893](39542 call _cast call_tmp[551881] call_tmp[551888]))
    unknown castPtr[39544] "insert auto destroy"
    (489052 'init var' castPtr[39544] call_tmp[551893])
    unknown call_tmp[551900] "expr temp" "maybe param" "maybe type" "temp"
    (551903 'move' call_tmp[551900](39549 call chpl_p _mt[232] x[39514]))
    (39553 call = call_tmp[551900] nil[38])
    unknown call_tmp[551905] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (551908 'move' call_tmp[551905](691304 'new' _owned[39039](?) castPtr[39544]))
    (456022 'move' ret[456017](456021 'deref' call_tmp[551905]))
    (456019 return ret[456017])
  }
  where {
    unknown call_tmp[551912] "expr temp" "maybe param" "maybe type" "temp"
    (551915 'move' call_tmp[551912](39524 call chpl_t _mt[232] t[39505]))
    unknown call_tmp[551919] "expr temp" "maybe param" "maybe type" "temp"
    (551922 'move' call_tmp[551919](39519 call chpl_t _mt[232] x[39514]))
    (328426 'is_subtype' call_tmp[551912] call_tmp[551919])
  }
  function _cast[39574](arg t[39571]:managed _owned[389732](?), in arg x[39579]:managed _owned[389732](?)) : _unknown[43] "inline" "no doc"
  {
    unknown ret[456026] "RVV" "temp"
    unknown call_tmp[551926] "expr temp" "maybe param" "maybe type" "temp"
    (551929 'move' call_tmp[551926](39600 call chpl_t _mt[232] t[39571]))
    unknown call_tmp[551931] "expr temp" "maybe param" "maybe type" "temp"
    (551934 'move' call_tmp[551931](39604 call _to_unmanaged call_tmp[551926]))
    unknown call_tmp[551936] "expr temp" "maybe param" "maybe type" "temp"
    (551939 'move' call_tmp[551936](39606 call _to_nilable call_tmp[551931]))
    unknown call_tmp[551943] "expr temp" "maybe param" "maybe type" "temp"
    (551946 'move' call_tmp[551943](39594 call chpl_p _mt[232] x[39579]))
    unknown call_tmp[551948] "maybe param" "maybe type" "temp"
    (551951 'move' call_tmp[551948](39607 call _cast call_tmp[551936] call_tmp[551943]))
    unknown castPtr[39609] "insert auto destroy"
    (489054 'init var' castPtr[39609] call_tmp[551948])
    unknown call_tmp[551955] "expr temp" "maybe param" "maybe type" "temp"
    (551958 'move' call_tmp[551955](39614 call chpl_p _mt[232] x[39579]))
    (39618 call = call_tmp[551955] nil[38])
    unknown call_tmp[551960] "expr temp" "maybe param" "maybe type" "temp"
    (551963 'move' call_tmp[551960](39623 call postfix! castPtr[39609]))
    unknown call_tmp[551965] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (551968 'move' call_tmp[551965](691305 'new' _owned[39039](?) call_tmp[551960]))
    (456031 'move' ret[456026](456030 'deref' call_tmp[551965]))
    (456028 return ret[456026])
  }
  where {
    unknown call_tmp[551972] "expr temp" "maybe param" "maybe type" "temp"
    (551975 'move' call_tmp[551972](39589 call chpl_t _mt[232] t[39571]))
    unknown call_tmp[551979] "expr temp" "maybe param" "maybe type" "temp"
    (551982 'move' call_tmp[551979](39584 call chpl_t _mt[232] x[39579]))
    (328427 'is_subtype' call_tmp[551972] call_tmp[551979])
  }
  function _cast[39641](arg t[39638]:managed _owned[389732](?), in arg x[39647]:managed _owned?[389728](?)) : _unknown[43] throws "inline" "no doc"
  {
    unknown ret[456035] "RVV" "temp"
    unknown call_tmp[551986] "expr temp" "maybe param" "maybe type" "temp"
    (551989 'move' call_tmp[551986](39671 call chpl_t _mt[232] t[39638]))
    unknown call_tmp[551991] "expr temp" "maybe param" "maybe type" "temp"
    (551994 'move' call_tmp[551991](39675 call _to_unmanaged call_tmp[551986]))
    unknown call_tmp[551996] "expr temp" "maybe param" "maybe type" "temp"
    (551999 'move' call_tmp[551996](39677 call _to_nilable call_tmp[551991]))
    unknown call_tmp[552003] "expr temp" "maybe param" "maybe type" "temp"
    (552006 'move' call_tmp[552003](39665 call chpl_p _mt[232] x[39647]))
    unknown call_tmp[552008] "maybe param" "maybe type" "temp"
    (552011 'move' call_tmp[552008](39678 call _cast call_tmp[551996] call_tmp[552003]))
    unknown castPtr[39680] "insert auto destroy"
    (489056 'init var' castPtr[39680] call_tmp[552008])
    unknown call_tmp[552013] "expr temp" "maybe param" "maybe type" "temp"
    (552016 'move' call_tmp[552013](39686 call == castPtr[39680] nil[38]))
    unknown call_tmp[552018] "expr temp" "maybe param" "maybe type" "temp"
    (552021 'move' call_tmp[552018](39697 call _cond_test call_tmp[552013]))
    if call_tmp[552018]
    {
      unknown call_tmp[552023] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (552026 'move' call_tmp[552023](691306 'new' anymanaged NilClassError[333101](?)(_chpl_manager = _owned[39039](?))))
      unknown call_tmp[552028] "expr temp" "maybe param" "maybe type" "temp"
      (552031 'move' call_tmp[552028](442647 call chpl_fix_thrown_error call_tmp[552023]))
      (39694 'throw' call_tmp[552028])
    }
    unknown call_tmp[552035] "expr temp" "maybe param" "maybe type" "temp"
    (552038 'move' call_tmp[552035](39702 call chpl_p _mt[232] x[39647]))
    (39706 call = call_tmp[552035] nil[38])
    unknown call_tmp[552040] "expr temp" "maybe param" "maybe type" "temp"
    (552043 'move' call_tmp[552040](39711 call postfix! castPtr[39680]))
    unknown call_tmp[552045] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (552048 'move' call_tmp[552045](691307 'new' _owned[39039](?) call_tmp[552040]))
    (456040 'move' ret[456035](456039 'deref' call_tmp[552045]))
    (456037 return ret[456035])
  }
  where {
    unknown call_tmp[552052] "expr temp" "maybe param" "maybe type" "temp"
    (552055 'move' call_tmp[552052](39660 call chpl_t _mt[232] t[39638]))
    unknown call_tmp[552059] "expr temp" "maybe param" "maybe type" "temp"
    (552062 'move' call_tmp[552059](39653 call chpl_t _mt[232] x[39647]))
    unknown call_tmp[552064] "expr temp" "maybe param" "maybe type" "temp"
    (552067 'move' call_tmp[552064](39657 call _to_nonnil call_tmp[552059]))
    (328428 'is_subtype' call_tmp[552052] call_tmp[552064])
  }
  function _cast[39729](arg t[39726]:managed _owned[389732](?), ref arg x[39735]:managed _owned?[389728](?)) : _unknown[43] throws "inline"
  {
    unknown ret[456044] "RVV" "temp"
    unknown call_tmp[552071] "expr temp" "maybe param" "maybe type" "temp"
    (552074 'move' call_tmp[552071](39753 call chpl_p _mt[232] x[39735]))
    unknown call_tmp[552076] "expr temp" "maybe param" "maybe type" "temp"
    (552079 'move' call_tmp[552076](39757 call == call_tmp[552071] nil[38]))
    unknown call_tmp[552081] "expr temp" "maybe param" "maybe type" "temp"
    (552084 'move' call_tmp[552081](39768 call _cond_test call_tmp[552076]))
    if call_tmp[552081]
    {
      unknown call_tmp[552086] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (552089 'move' call_tmp[552086](691308 'new' anymanaged NilClassError[333101](?)(_chpl_manager = _owned[39039](?))))
      unknown call_tmp[552091] "expr temp" "maybe param" "maybe type" "temp"
      (552094 'move' call_tmp[552091](442649 call chpl_fix_thrown_error call_tmp[552086]))
      (39765 'throw' call_tmp[552091])
    }
    unknown call_tmp[552098] "expr temp" "maybe param" "maybe type" "temp"
    (552101 'move' call_tmp[552098](39780 call chpl_t _mt[232] t[39726]))
    unknown call_tmp[552103] "expr temp" "maybe param" "maybe type" "temp"
    (552106 'move' call_tmp[552103](39784 call _to_unmanaged call_tmp[552098]))
    unknown call_tmp[552108] "expr temp" "maybe param" "maybe type" "temp"
    (552111 'move' call_tmp[552108](39786 call _to_nonnil call_tmp[552103]))
    unknown call_tmp[552115] "expr temp" "maybe param" "maybe type" "temp"
    (552118 'move' call_tmp[552115](39774 call chpl_p _mt[232] x[39735]))
    unknown call_tmp[552120] "maybe param" "maybe type" "temp"
    (552123 'move' call_tmp[552120](39787 call _cast call_tmp[552108] call_tmp[552115]))
    unknown castPtr[39790] "insert auto destroy"
    (489058 'init var' castPtr[39790] call_tmp[552120])
    unknown call_tmp[552127] "expr temp" "maybe param" "maybe type" "temp"
    (552130 'move' call_tmp[552127](39794 call chpl_p _mt[232] x[39735]))
    (39798 call = call_tmp[552127] nil[38])
    unknown call_tmp[552132] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (552135 'move' call_tmp[552132](691309 'new' _owned[39039](?) castPtr[39790]))
    (456049 'move' ret[456044](456048 'deref' call_tmp[552132]))
    (456046 return ret[456044])
  }
  where {
    unknown call_tmp[552139] "expr temp" "maybe param" "maybe type" "temp"
    (552142 'move' call_tmp[552139](39746 call chpl_t _mt[232] x[39735]))
    unknown call_tmp[552144] "expr temp" "maybe param" "maybe type" "temp"
    (552147 'move' call_tmp[552144](39750 call _to_nonnil call_tmp[552139]))
    unknown call_tmp[552151] "expr temp" "maybe param" "maybe type" "temp"
    (552154 'move' call_tmp[552151](39740 call chpl_t _mt[232] t[39726]))
    (328429 'is_proper_subtype' call_tmp[552144] call_tmp[552151])
  }
  function _cast[39819](arg t[39816]:managed _owned[389732](?), ref arg x[39824]:managed _owned[389732](?)) : _unknown[43] throws "inline"
  {
    unknown ret[456053] "RVV" "temp"
    unknown call_tmp[552158] "expr temp" "maybe param" "maybe type" "temp"
    (552161 'move' call_tmp[552158](39845 call chpl_t _mt[232] t[39816]))
    unknown call_tmp[552163] "expr temp" "maybe param" "maybe type" "temp"
    (552166 'move' call_tmp[552163](39849 call _to_unmanaged call_tmp[552158]))
    unknown call_tmp[552168] "expr temp" "maybe param" "maybe type" "temp"
    (552171 'move' call_tmp[552168](39851 call _to_nonnil call_tmp[552163]))
    unknown call_tmp[552175] "expr temp" "maybe param" "maybe type" "temp"
    (552178 'move' call_tmp[552175](39839 call chpl_p _mt[232] x[39824]))
    unknown call_tmp[552180] "maybe param" "maybe type" "temp"
    (552183 'move' call_tmp[552180](39852 call _cast call_tmp[552168] call_tmp[552175]))
    unknown castPtr[39855] "insert auto destroy"
    (489060 'init var' castPtr[39855] call_tmp[552180])
    unknown call_tmp[552187] "expr temp" "maybe param" "maybe type" "temp"
    (552190 'move' call_tmp[552187](39860 call chpl_p _mt[232] x[39824]))
    (39864 call = call_tmp[552187] nil[38])
    unknown call_tmp[552192] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (552195 'move' call_tmp[552192](691310 'new' _owned[39039](?) castPtr[39855]))
    (456058 'move' ret[456053](456057 'deref' call_tmp[552192]))
    (456055 return ret[456053])
  }
  where {
    unknown call_tmp[552199] "expr temp" "maybe param" "maybe type" "temp"
    (552202 'move' call_tmp[552199](39834 call chpl_t _mt[232] x[39824]))
    unknown call_tmp[552206] "expr temp" "maybe param" "maybe type" "temp"
    (552209 'move' call_tmp[552206](39829 call chpl_t _mt[232] t[39816]))
    (328430 'is_proper_subtype' call_tmp[552199] call_tmp[552206])
  }
  function _cast[39886](arg t[39883]:managed _owned?[389728](?), ref arg x[39892]:managed _owned?[389728](?)) : _unknown[43] "inline"
  {
    unknown ret[456062] "RVV" "temp"
    unknown call_tmp[552213] "expr temp" "maybe param" "maybe type" "temp"
    (552216 'move' call_tmp[552213](39913 call chpl_t _mt[232] t[39883]))
    unknown call_tmp[552218] "expr temp" "maybe param" "maybe type" "temp"
    (552221 'move' call_tmp[552218](39917 call _to_unmanaged call_tmp[552213]))
    unknown call_tmp[552223] "expr temp" "maybe param" "maybe type" "temp"
    (552226 'move' call_tmp[552223](39919 call _to_nilable call_tmp[552218]))
    unknown call_tmp[552230] "expr temp" "maybe param" "maybe type" "temp"
    (552233 'move' call_tmp[552230](39907 call chpl_p _mt[232] x[39892]))
    unknown call_tmp[552235] "maybe param" "maybe type" "temp"
    (552238 'move' call_tmp[552235](39920 call _cast call_tmp[552223] call_tmp[552230]))
    unknown castPtr[39922] "insert auto destroy"
    (489062 'init var' castPtr[39922] call_tmp[552235])
    unknown call_tmp[552240] "expr temp" "maybe param" "maybe type" "temp"
    (552243 'move' call_tmp[552240](39928 call != castPtr[39922] nil[38]))
    unknown call_tmp[552245] "expr temp" "maybe param" "maybe type" "temp"
    (552248 'move' call_tmp[552245](39939 call _cond_test call_tmp[552240]))
    if call_tmp[552245]
    {
      unknown call_tmp[552252] "expr temp" "maybe param" "maybe type" "temp"
      (552255 'move' call_tmp[552252](39931 call chpl_p _mt[232] x[39892]))
      (39935 call = call_tmp[552252] nil[38])
    }
    unknown call_tmp[552257] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (552260 'move' call_tmp[552257](691311 'new' _owned[39039](?) castPtr[39922]))
    (456067 'move' ret[456062](456066 'deref' call_tmp[552257]))
    (456064 return ret[456062])
  }
  where {
    unknown call_tmp[552264] "expr temp" "maybe param" "maybe type" "temp"
    (552267 'move' call_tmp[552264](39902 call chpl_t _mt[232] x[39892]))
    unknown call_tmp[552271] "expr temp" "maybe param" "maybe type" "temp"
    (552274 'move' call_tmp[552271](39897 call chpl_t _mt[232] t[39883]))
    (328431 'is_proper_subtype' call_tmp[552264] call_tmp[552271])
  }
  function _cast[39962](arg t[39959]:managed _owned?[389728](?), ref arg x[39967]:managed _owned[389732](?)) : _unknown[43] "inline"
  {
    unknown ret[456071] "RVV" "temp"
    unknown call_tmp[552278] "expr temp" "maybe param" "maybe type" "temp"
    (552281 'move' call_tmp[552278](39991 call chpl_t _mt[232] t[39959]))
    unknown call_tmp[552283] "expr temp" "maybe param" "maybe type" "temp"
    (552286 'move' call_tmp[552283](39995 call _to_unmanaged call_tmp[552278]))
    unknown call_tmp[552288] "expr temp" "maybe param" "maybe type" "temp"
    (552291 'move' call_tmp[552288](39997 call _to_nilable call_tmp[552283]))
    unknown call_tmp[552295] "expr temp" "maybe param" "maybe type" "temp"
    (552298 'move' call_tmp[552295](39985 call chpl_p _mt[232] x[39967]))
    unknown call_tmp[552300] "maybe param" "maybe type" "temp"
    (552303 'move' call_tmp[552300](39998 call _cast call_tmp[552288] call_tmp[552295]))
    unknown castPtr[40000] "insert auto destroy"
    (489064 'init var' castPtr[40000] call_tmp[552300])
    unknown call_tmp[552305] "expr temp" "maybe param" "maybe type" "temp"
    (552308 'move' call_tmp[552305](40006 call != castPtr[40000] nil[38]))
    unknown call_tmp[552310] "expr temp" "maybe param" "maybe type" "temp"
    (552313 'move' call_tmp[552310](40017 call _cond_test call_tmp[552305]))
    if call_tmp[552310]
    {
      unknown call_tmp[552317] "expr temp" "maybe param" "maybe type" "temp"
      (552320 'move' call_tmp[552317](40009 call chpl_p _mt[232] x[39967]))
      (40013 call = call_tmp[552317] nil[38])
    }
    unknown call_tmp[552322] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (552325 'move' call_tmp[552322](691312 'new' _owned[39039](?) castPtr[40000]))
    (456076 'move' ret[456071](456075 'deref' call_tmp[552322]))
    (456073 return ret[456071])
  }
  where {
    unknown call_tmp[552329] "expr temp" "maybe param" "maybe type" "temp"
    (552332 'move' call_tmp[552329](39980 call chpl_t _mt[232] x[39967]))
    unknown call_tmp[552336] "expr temp" "maybe param" "maybe type" "temp"
    (552339 'move' call_tmp[552336](39973 call chpl_t _mt[232] t[39959]))
    unknown call_tmp[552341] "expr temp" "maybe param" "maybe type" "temp"
    (552344 'move' call_tmp[552341](39977 call _to_nonnil call_tmp[552336]))
    (328432 'is_proper_subtype' call_tmp[552329] call_tmp[552341])
  }
  function _cast[40037](arg t[40034]:_owned[39039](?), arg x[40040]:_nilType[36]) : _unknown[43] "inline" "no doc"
  {
    unknown ret[456080] "RVV" "temp"
    unknown tmp[393621] "maybe param" "temp"
    unknown call_tmp[552348] "expr temp" "maybe param" "maybe type" "temp"
    (552351 'move' call_tmp[552348](40045 call chpl_t _mt[232] t[40034]))
    unknown call_tmp[552353] "expr temp" "maybe param" "maybe type" "temp"
    (552356 'move' call_tmp[552353](40049 call _to_nilable call_tmp[552348]))
    unknown call_tmp[552360] "expr temp" "maybe param" "maybe type" "temp"
    (552363 'move' call_tmp[552360](40051 call chpl_t _mt[232] t[40034]))
    (393632 'move' tmp[393621](40054 call != call_tmp[552353] call_tmp[552360]))
    unknown call_tmp[552365] "expr temp" "maybe param" "maybe type" "temp"
    (552368 'move' call_tmp[552365](393634 call _cond_invalid tmp[393621]))
    if call_tmp[552365]
    {
      (393637 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[502835] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[502836] "maybe param" "temp"
    unknown call_tmp[552370] "expr temp" "maybe param" "maybe type" "temp"
    (552373 'move' call_tmp[552370](393622 call isTrue tmp[393621]))
    (502841 'move' tmp[502836](502839 call _cond_test call_tmp[552370]))
    if tmp[502836]
    {
      unknown tmp[502843] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[552375] "expr temp" "maybe param" "maybe type" "temp"
      (552378 'move' call_tmp[552375](40057 call ! 0))
      (502845 'move' tmp[502843](393625 call isTrue call_tmp[552375]))
      (502850 'move' tmp[502835](502847 '_paramFoldLogical' tmp[502836] tmp[502843]))
    }
    {
      (502855 'move' tmp[502835](502852 '_paramFoldLogical' tmp[502836] 0))
    }
    unknown call_tmp[552380] "expr temp" "maybe param" "maybe type" "temp"
    (552383 'move' call_tmp[552380](40081 call _cond_test tmp[502835]))
    if call_tmp[552380]
    {
      (40079 call compilerError "Illegal cast from nil to non-nilable owned type")
    }
    unknown tmp[40088] "insert auto destroy"
    (489066 'default init var' tmp[40088] t[40034])
    (456085 'move' ret[456080](456084 'deref' tmp[40088]))
    (456082 return ret[456080])
  }
  function postfix![40102](const  ref arg x[40099]:_owned[39039](?)) : _unknown[43] "always propagate line file info" "inline" "no doc"
  {
    unknown ret[456089] "RVV" "temp"
    unknown call_tmp[552385] "expr temp" "maybe param" "maybe type" "temp"
    (552388 'move' call_tmp[552385](40149 call _cond_test 1))
    if call_tmp[552385]
    {
      unknown call_tmp[552392] "expr temp" "maybe param" "maybe type" "temp"
      (552395 'move' call_tmp[552392](40112 call chpl_t _mt[232] x[40099]))
      unknown call_tmp[552397] "expr temp" "maybe param" "maybe type" "temp"
      (552400 'move' call_tmp[552397](40116 call _to_nilable call_tmp[552392]))
      unknown call_tmp[552404] "expr temp" "maybe param" "maybe type" "temp"
      (552407 'move' call_tmp[552404](40118 call chpl_t _mt[232] x[40099]))
      unknown call_tmp[552409] "expr temp" "maybe param" "maybe type" "temp"
      (552412 'move' call_tmp[552409](40121 call == call_tmp[552397] call_tmp[552404]))
      unknown call_tmp[552414] "expr temp" "maybe param" "maybe type" "temp"
      (552417 'move' call_tmp[552414](40144 call _cond_test call_tmp[552409]))
      if call_tmp[552414]
      {
        unknown call_tmp[552421] "expr temp" "maybe param" "maybe type" "temp"
        (552424 'move' call_tmp[552421](40124 call chpl_p _mt[232] x[40099]))
        unknown call_tmp[552426] "expr temp" "maybe param" "maybe type" "temp"
        (552429 'move' call_tmp[552426](40128 call == call_tmp[552421] nil[38]))
        unknown call_tmp[552431] "expr temp" "maybe param" "maybe type" "temp"
        (552434 'move' call_tmp[552431](40139 call _cond_test call_tmp[552426]))
        if call_tmp[552431]
        {
          (40136 call nilCheckHalt module=[244] HaltWrappers[197622] "argument to ! is nil")
        }
      }
    }
    unknown call_tmp[552438] "expr temp" "maybe param" "maybe type" "temp"
    (552441 'move' call_tmp[552438](40155 call chpl_p _mt[232] x[40099]))
    unknown call_tmp[552443] "expr temp" "maybe param" "maybe type" "temp"
    (552446 'move' call_tmp[552443](40159 call _to_nonnil call_tmp[552438]))
    (456094 'move' ret[456089](456093 'deref' call_tmp[552443]))
    (456091 return ret[456089])
    (329315 'used modules list'(40106 'use' HaltWrappers[197622] 'only' ))
  }
  (329311 'used modules list'(38107 'use' ChapelStandard[19734]))
}