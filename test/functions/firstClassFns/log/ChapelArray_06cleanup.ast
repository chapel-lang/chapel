AST dump for ChapelArray after pass cleanup.
Module use list: 

{
  (111784 'use' ChapelBase)
  (111789 'use' ChapelTuple)
  (111793 'use' ChapelLocale)
  (111797 'use' ArrayViewSlice)
  (111801 'use' ArrayViewRankChange)
  (111805 'use' ArrayViewReindex)
  (111809 'use' Reflection 'only' )
  unknown showArrayAsVecWarnings[111812] "config" "no doc" "param" 1
  unknown numPrivateObjects[111819] "no doc"(111818 call chpl__processorAtomicType int[13])
  unknown nullPid[111825] "no doc" "param"(111823 call - 1)
  unknown debugBulkTransfer[111829] "config" "no doc" "param" 0
  unknown useBulkTransfer[111833] "config" "no doc" "param" 1
  unknown useBulkTransferStride[111837] "config" "no doc" "param" 1
  unknown PODValAccess[111841] "config" "no doc" "param" 1
  unknown useBulkTransferDist[111845] "config" "no doc" "param" 0
  unknown arrayAsVecGrowthFactor[111851] "config" "no doc" "param" 1.5
  unknown debugArrayAsVec[111855] "config" "no doc" "param" 0
  function _isPrivatized[111862](arg value[111860]:_any[170](?)) param : _unknown[43]
  {
    (111894 return(111892 call &&(111865 call ! _local)(111890 call ||(111878 call && _privatization(111877 call(111873 call .(111869 call postfix! value) c"dsiSupportsPrivatization")))(111889 call(111885 call .(111881 call postfix! value) c"dsiRequiresPrivatization")))))
  }
  function _newPrivatizedClass[111903](arg value[111901]:_any[170](?)) : _unknown[43]
  {
    const n[111915] "const"(111914 call(111909 call . numPrivateObjects c"fetchAdd") 1)
    const hereID[111923] "const"(111920 call . here c"id")
    const privatizeData[111934] "const"(111933 call(111929 call . value c"dsiGetPrivatizeData"))
    {
      const tmp[111953] "const" "temp"
      (111954 'move' tmp[111953](111951 'deref'(111950 '_wide_get_locale'(111940 call Locales 0))))
      (111948 call _newPrivatizedClassHelp value value n hereID privatizeData)
    }
    function _newPrivatizedClassHelp[111962](arg parentValue[111960]:_any[170](?), arg originalValue[111964]:_any[170](?), arg n[111966]:_any[170](?), arg hereID[111968]:_any[170](?), arg privatizeData[111970]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown newValue[111973] originalValue
      if(112044 call _cond_test(111982 call != hereID(111979 call . here c"id")))
      {
        (111994 call = newValue(111993 call(111988 call . parentValue c"dsiPrivatize") privatizeData))
        (112017 'chpl_newPrivatizedClass' newValue n)
        (112026 call =(112022 call . newValue c"pid") n)
      }
      {
        (112033 'chpl_newPrivatizedClass' newValue n)
        (112041 call =(112037 call . newValue c"pid") n)
      }
      {
        const _cobeginCount[112113] "const" "end count" "temp"
        (112134 'move' _cobeginCount[112113](112131 call _endCountAlloc 1))
        (112126 call _upEndCount _cobeginCount[112113] 1 2)
        {
          if(112075 call _cond_test(112051 call . chpl_localeTree c"left"))
          {
            {
              const tmp[112070] "const" "temp"
              (112071 'move' tmp[112070](112068 'deref'(112067 '_wide_get_locale'(112055 call . chpl_localeTree c"left"))))
              (112065 call _newPrivatizedClassHelp newValue originalValue n hereID privatizeData)
            }
          }
          (112116 call _downEndCount _cobeginCount[112113] nil[38])
          (112115 'cobegin block')
        }
        {
          if(112108 call _cond_test(112084 call . chpl_localeTree c"right"))
          {
            {
              const tmp[112103] "const" "temp"
              (112104 'move' tmp[112103](112101 'deref'(112100 '_wide_get_locale'(112088 call . chpl_localeTree c"right"))))
              (112098 call _newPrivatizedClassHelp newValue originalValue n hereID privatizeData)
            }
          }
          (112122 call _downEndCount _cobeginCount[112113] nil[38])
          (112121 'cobegin block')
        }
        Defer
        {
          {
            (112137 call _endCountFree _cobeginCount[112113])
          }
        }
        (112142 call _waitEndCount _cobeginCount[112113] 1 2)
      }
    }
    (112150 return n)
  }
  { scopeless type
    int[13]
  }
  function _freePrivatizedClass[112161](arg pid[112158] :
  int[13], arg original[112164] :
  object) : _unknown[43] "no return value for void"
  {
    if(112174 call _cond_test(112170 call == pid nullPid))
    {
      (112172 return _void[47])
    }
    {
      const tmp[112194] "const" "temp"
      (112195 'move' tmp[112194](112192 'deref'(112191 '_wide_get_locale'(112183 call Locales 0))))
      {
        (112188 call _freePrivatizedClassHelp pid original)
      }
    }
    function _freePrivatizedClassHelp[112203](arg pid[112201]:_any[170](?), arg original[112205]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown prv[112213](112212 call chpl_getPrivatizedCopy(112209 'to unmanaged class from unknown' object) pid)
      if(112226 call _cond_test(112219 call != prv original))
      {
        (112223 call chpl__delete prv)
      }
      function chpl_clearPrivatizedClass[112237](arg pid[112234] :
      int[13]) : void[4] "extern" "local args" "no fn body" "no return value for void"
      {
      }
      (112244 call chpl_clearPrivatizedClass pid)
      {
        const _cobeginCount[112301] "const" "end count" "temp"
        (112322 'move' _cobeginCount[112301](112319 call _endCountAlloc 1))
        (112314 call _upEndCount _cobeginCount[112301] 1 2)
        {
          if(112268 call _cond_test(112247 call . chpl_localeTree c"left"))
          {
            {
              const tmp[112263] "const" "temp"
              (112264 'move' tmp[112263](112261 'deref'(112260 '_wide_get_locale'(112251 call . chpl_localeTree c"left"))))
              (112258 call _freePrivatizedClassHelp pid original)
            }
          }
          (112304 call _downEndCount _cobeginCount[112301] nil[38])
          (112303 'cobegin block')
        }
        {
          if(112296 call _cond_test(112275 call . chpl_localeTree c"right"))
          {
            {
              const tmp[112291] "const" "temp"
              (112292 'move' tmp[112291](112289 'deref'(112288 '_wide_get_locale'(112279 call . chpl_localeTree c"right"))))
              (112286 call _freePrivatizedClassHelp pid original)
            }
          }
          (112310 call _downEndCount _cobeginCount[112301] nil[38])
          (112309 'cobegin block')
        }
        Defer
        {
          {
            (112325 call _endCountFree _cobeginCount[112301])
          }
        }
        (112330 call _waitEndCount _cobeginCount[112301] 1 2)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _reprivatize[112344](arg value[112342]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    const pid[112350] "const"(112347 call . value c"pid")
    const hereID[112358] "const"(112355 call . here c"id")
    const reprivatizeData[112369] "const"(112368 call(112364 call . value c"dsiGetReprivatizeData"))
    {
      const tmp[112388] "const" "temp"
      (112389 'move' tmp[112388](112386 'deref'(112385 '_wide_get_locale'(112375 call Locales 0))))
      (112383 call _reprivatizeHelp value value pid hereID reprivatizeData)
    }
    function _reprivatizeHelp[112397](arg parentValue[112395]:_any[170](?), arg originalValue[112399]:_any[170](?), arg pid[112401]:_any[170](?), arg hereID[112403]:_any[170](?), arg reprivatizeData[112405]:_any[170](?)) : _unknown[43] "no return value for void"
    {
      unknown newValue[112408] originalValue
      if(112441 call _cond_test(112417 call != hereID(112414 call . here c"id")))
      {
        (112426 call = newValue(112425 call chpl_getPrivatizedCopy(112422 'typeof' newValue) pid))
        (112439 call(112433 call . newValue c"dsiReprivatize") parentValue reprivatizeData)
      }
      {
        const _cobeginCount[112506] "const" "end count" "temp"
        (112527 'move' _cobeginCount[112506](112524 call _endCountAlloc 1))
        (112519 call _upEndCount _cobeginCount[112506] 1 2)
        {
          if(112470 call _cond_test(112446 call . chpl_localeTree c"left"))
          {
            {
              const tmp[112465] "const" "temp"
              (112466 'move' tmp[112465](112463 'deref'(112462 '_wide_get_locale'(112450 call . chpl_localeTree c"left"))))
              (112460 call _reprivatizeHelp newValue originalValue pid hereID reprivatizeData)
            }
          }
          (112509 call _downEndCount _cobeginCount[112506] nil[38])
          (112508 'cobegin block')
        }
        {
          if(112501 call _cond_test(112477 call . chpl_localeTree c"right"))
          {
            {
              const tmp[112496] "const" "temp"
              (112497 'move' tmp[112496](112494 'deref'(112493 '_wide_get_locale'(112481 call . chpl_localeTree c"right"))))
              (112491 call _reprivatizeHelp newValue originalValue pid hereID reprivatizeData)
            }
          }
          (112515 call _downEndCount _cobeginCount[112506] nil[38])
          (112514 'cobegin block')
        }
        Defer
        {
          {
            (112530 call _endCountFree _cobeginCount[112506])
          }
        }
        (112535 call _waitEndCount _cobeginCount[112506] 1 2)
      }
    }
  }
  function _makeIndexTuple[112548](param arg rank[112546]:_any[170](?), arg t[112551] :
  _tuple, param arg expand[112556] :
  bool[10] =
  0) : _unknown[43]
  {
    (112568 return t)
  }
  where {
    (112565 call == rank(112562 call . t c"size"))
  }
  function _makeIndexTuple[112578](param arg rank[112576]:_any[170](?), arg t[112581] :
  _tuple, param arg expand[112586] :
  bool[10] =
  0) : _unknown[43] "no return value for void"
  {
    (112615 call compilerError "index rank must match domain rank")
  }
  where {
    (112595 call != rank(112592 call . t c"size"))
  }
  function _makeIndexTuple[112625](param arg rank[112623]:_any[170](?), arg val[112628] :
  integral, param arg expand[112633] :
  bool[10] =
  0) : _unknown[43]
  {
    if(112720 call _cond_test(112642 call || expand(112640 call == rank 1)))
    {
      unknown t[112649](112647 call * rank(112646 'typeof' val))
      {
        unknown i[112665] 0
        unknown tmp[112666] "maybe param" "temp"
        (112678 'move' tmp[112666](112676 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[112667] "maybe param" "temp"
        (112685 'move' tmp[112667](112683 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[112668] "maybe param" "temp"
        (112688 'move' tmp[112668] 1)
        ParamForLoop
        { i[112665] tmp[112666] tmp[112667] tmp[112668]
          (112662 call =(112660 call t i) val)
        }
        label _unused_continueLabel[112670]
        label _breakLabel[112669]
      }
      (112700 return t)
    }
    {
      (112709 call compilerWarning(112706 call _cast string[24](112704 'typeof' val)))
      (112715 call compilerError "index rank must match domain rank")
      (112718 return val)
    }
  }
  function _newArray[112731](arg value[112729]:_any[170](?)) : _unknown[43] "no copy return"
  {
    if(112756 call _cond_test(112736 call _isPrivatized value))
    {
      (112746 return(112745 'new'(112744 call _array(112741 call _newPrivatizedClass value) value)))
    }
    {
      (112754 return(112753 'new'(112752 call _array nullPid value)))
    }
  }
  function _getDomain[112769](arg value[112767]:_any[170](?)) : _unknown[43]
  {
    if(112800 call _cond_test(112778 call !=(112775 call _to_unmanaged(112773 'typeof' value))(112777 'typeof' value)))
    {
      (112798 call compilerError "Domain on borrow created")
    }
    if(112833 call _cond_test(112809 call _isPrivatized value))
    {
      (112821 return(112820 'new'(112819 call _domain(112812 call . value c"pid") value(_unowned = 1))))
    }
    {
      (112831 return(112830 'new'(112829 call _domain nullPid value(_unowned = 1))))
    }
  }
  function _getDistribution[112845](arg value[112843]:_any[170](?)) : _unknown[43]
  {
    if(112874 call _cond_test(112850 call _isPrivatized value))
    {
      (112862 return(112861 'new'(112860 call _distribution(112853 call . value c"pid") value(_unowned = 1))))
    }
    {
      (112872 return(112871 'new'(112870 call _distribution nullPid value(_unowned = 1))))
    }
  }
  function chpl__buildDomainRuntimeType[112889](arg d[112886] :
  _distribution, param arg rank[112892] :
  int[13], arg idxType[112896]:_any[170](?) =
  int[13], param arg stridable[112901] :
  bool[10] =
  0) type : _unknown[43] "runtime type init fn"
  {
    (112913 return(112912 'new'(112911 call _domain d rank idxType stridable)))
  }
  function chpl__buildDomainRuntimeType[112924](arg d[112921] :
  _distribution, arg idxType[112926]:_any[170](?), param arg parSafe[112930] :
  bool[10] =
  1) type : _unknown[43] "runtime type init fn"
  {
    (112941 return(112940 'new'(112939 call _domain d idxType parSafe)))
  }
  function chpl__buildDomainRuntimeType[112952](arg d[112949] :
  _distribution, arg idxType[112955] :
  _OpaqueIndex, param arg parSafe[112960] :
  bool[10] =
  1) type : _unknown[43] "runtime type init fn"
  {
    (112971 return(112970 'new'(112969 call _domain d idxType parSafe)))
  }
  function chpl__buildDomainRuntimeType[112982](arg d[112979] :
  _distribution, arg idxType[112985] :
  opaque) type : _unknown[43]
  {
    (113008 call compilerWarning "Opaque domains are deprecated - please switch to another domain type")
    (113016 return(113015 call chpl__buildDomainRuntimeType d _OpaqueIndex))
  }
  function chpl__buildSparseDomainRuntimeType[113026](arg d[113023] :
  _distribution, arg dom[113029] :
  _domain) type : _unknown[43] "runtime type init fn"
  {
    (113038 return(113037 'new'(113036 call _domain d dom)))
  }
  function chpl__convertValueToRuntimeType[113049](arg dom[113046] :
  _domain) type : _unknown[43]
  {
    (113088 return(113087 call chpl__buildDomainRuntimeType(113062 call . dom c"dist")(113070 call .(113067 call . dom c"_value") c"rank")(113077 call .(113074 call . dom c"_value") c"idxType")(113084 call .(113081 call . dom c"_value") c"stridable")))
  }
  where {
    (328543 'is_subtype' BaseRectangularDom(113056 'typeof'(113053 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[113100](arg dom[113097] :
  _domain) type : _unknown[43]
  {
    (113134 return(113133 call chpl__buildDomainRuntimeType(113113 call . dom c"dist")(113121 call .(113118 call . dom c"_value") c"idxType")(113130 call .(113125 call . dom c"_value") c"parSafe")))
  }
  where {
    (328544 'is_subtype' BaseAssociativeDom(113107 'typeof'(113104 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[113146](arg dom[113143] :
  _domain) type : _unknown[43]
  {
    (113171 return(113170 call chpl__buildDomainRuntimeType(113159 call . dom c"dist")(113167 call .(113164 call . dom c"_value") c"idxType")))
  }
  where {
    (328545 'is_subtype' BaseOpaqueDom(113153 'typeof'(113150 call . dom c"_value")))
  }
  function chpl__convertValueToRuntimeType[113183](arg dom[113180] :
  _domain) type : _unknown[43]
  {
    (113213 return(113212 call chpl__buildSparseDomainRuntimeType(113199 call . dom c"dist")(113209 call .(113204 call . dom c"_value") c"parentDom")))
  }
  where {
    (328546 'is_subtype' BaseSparseDom(113193 call _to_borrowed(113191 'typeof'(113188 call . dom c"_value"))))
  }
  function chpl__convertValueToRuntimeType[113225](arg dom[113222] :
  _domain) type : _unknown[43]
  {
    (113248 call compilerError "the global domain class of each domain map implementation must be a subclass of BaseRectangularDom, BaseAssociativeDom, BaseOp 0)
    (113252 return 0)
  }
  function chpl__buildArrayRuntimeType[113262](arg dom[113259] :
  _domain, arg eltType[113264]:_any[170](?)) type : _unknown[43] "runtime type init fn"
  {
    (113275 return(113274 call(113269 call . dom c"buildArray") eltType))
  }
  function _getLiteralType[113284](arg t[113282]:_any[170](?)) type : _unknown[43]
  {
    if(113296 call _cond_test(113288 call != t c_string))
    {
      (113291 return t)
    }
    {
      (113294 return string[24])
    }
  }
  unknown CHPL_WARN_DOMAIN_LITERAL[113306] "config" "no doc" "param" "unset"
  function chpl__buildArrayExpr[113316](arg elems[113313]:_any[170](?) ...) : _unknown[43]
  {
    if(113384 call _cond_test(113329 call &&(113320 call == CHPL_WARN_DOMAIN_LITERAL "true")(113328 call isRange(113326 call elems 1))))
    {
      (113381 call compilerWarning "Encountered an array literal with range element(s)." " Did you mean a domain literal here\?" " If so, use {...} instead of [...].")
    }
    unknown elemType[113397] "type variable"(113396 call _getLiteralType(113394 'typeof'(113393 call elems 1)))
    unknown A[113410](113408 call chpl__buildArrayRuntimeType(113406 call chpl__ensureDomainExpr(113402 call chpl_build_bounded_range 1 k)) elemType)
    {
      unknown i[113523] 0
      unknown tmp[113524] "maybe param" "temp"
      (113536 'move' tmp[113524](113534 call chpl_compute_low_param_loop_bound 1 k))
      unknown tmp[113525] "maybe param" "temp"
      (113543 'move' tmp[113525](113541 call chpl_compute_high_param_loop_bound 1 k))
      unknown tmp[113526] "maybe param" "temp"
      (113546 'move' tmp[113526] 1)
      ParamForLoop
      { i[113523] tmp[113524] tmp[113525] tmp[113526]
        {
          unknown currType[113425] "type variable"(113424 call _getLiteralType(113422 'typeof'(113421 call elems i)))
          if(113508 call _cond_test(113431 call != currType elemType))
          {
            (113505 call compilerError(113502 call +(113496 call +(113478 call +(113472 call +(113454 call + "Array literal element "(113452 call _cast string[24] i)) " expected to be of type ")(113476 call _cast string[24] elemType)) " but is of type ")(113500 call _cast string[24] currType)))
          }
          (113520 call =(113515 call A i)(113519 call elems i))
        }
      }
      label _unused_continueLabel[113528]
      label _breakLabel[113527]
    }
    (113558 return A)
  }
  function chpl__buildAssociativeArrayExpr[113569](arg elems[113566]:_any[170](?) ...) : _unknown[43]
  {
    unknown keyType[113579] "type variable"(113578 call _getLiteralType(113576 'typeof'(113575 call elems 1)))
    unknown valType[113591] "type variable"(113590 call _getLiteralType(113588 'typeof'(113587 call elems 2)))
    unknown D[113599](113597 call chpl__buildDomainRuntimeType defaultDist keyType)
    (113613 call(113605 call . D c"requestCapacity")(113610 call / k 2))
    unknown A[113622](113620 call chpl__buildArrayRuntimeType(113618 call chpl__ensureDomainExpr D) valType)
    {
      unknown i[113797] 0
      unknown tmp[113798] "maybe param" "temp"
      (113809 'move' tmp[113798](113807 call chpl_compute_low_param_loop_bound 1 k))
      unknown tmp[113799] "maybe param" "temp"
      (113816 'move' tmp[113799](113814 call chpl_compute_high_param_loop_bound 1 k))
      unknown tmp[113800] "maybe param" "temp"
      (113819 'move' tmp[113800] 2)
      ParamForLoop
      { i[113797] tmp[113798] tmp[113799] tmp[113800]
        {
          unknown elemKey[113636](113635 call elems i)
          unknown elemVal[113647](113646 call elems(113643 call + i 1))
          unknown elemKeyType[113655] "type variable"(113654 call _getLiteralType(113652 'typeof' elemKey))
          unknown elemValType[113663] "type variable"(113662 call _getLiteralType(113660 'typeof' elemVal))
          if(113721 call _cond_test(113668 call != elemKeyType keyType))
          {
            (113718 call compilerError(113715 call +(113709 call +(113706 call +(113700 call +(113697 call + "Associative array key element "(113695 call _cast string[24](113692 call /(113689 call + i 2) 2))) " expected to be of type ")(113704 call _cast string[24] keyType)) " but is of type ")(113713 call _cast string[24] elemKeyType)))
          }
          if(113780 call _cond_test(113727 call != elemValType valType))
          {
            (113777 call compilerError(113774 call +(113768 call +(113765 call +(113759 call +(113756 call + "Associative array value element "(113754 call _cast string[24](113751 call /(113748 call + i 1) 2))) " expected to be of type ")(113763 call _cast string[24] valType)) " but is of type ")(113772 call _cast string[24] elemValType)))
          }
          (113786 call += D elemKey)
          (113794 call =(113792 call A elemKey) elemVal)
        }
      }
      label _unused_continueLabel[113802]
      label _breakLabel[113801]
    }
    (113831 return A)
  }
  function chpl__convertValueToRuntimeType[113843](arg arr[113840] :
  (113837 call chpl__buildArrayRuntimeType nil[38])) type : _unknown[43]
  {
    (113856 return(113855 call chpl__buildArrayRuntimeType(113847 call . arr c"_dom")(113852 call . arr c"eltType")))
  }
  function chpl_incRefCountsForDomainsInArrayEltTypes[113868](arg arr[113865] :
  (113864 'to unmanaged class from unknown' BaseArr), arg eltType[113870]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    if(113916 call _cond_test(113875 call isArrayType eltType))
    {
      (113883 call =(113879 call . arr c"_decEltRefCounts") 1)
      unknown ev[113888] eltType
      (113905 call(113900 call .(113895 call .(113892 call . ev c"_dom") c"_value") c"add_containing_arr") arr)
      (113914 call chpl_incRefCountsForDomainsInArrayEltTypes arr(113911 call . ev c"eltType"))
    }
  }
  function chpl_decRefCountsForDomainsInArrayEltTypes[113930](arg arr[113927] :
  (113926 'to unmanaged class from unknown' BaseArr), arg eltType[113932]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    if(114032 call _cond_test(113937 call isArrayType eltType))
    {
      if(113965 call _cond_test(113943 call ==(113939 call . arr c"_decEltRefCounts") 0))
      {
        (113963 call halt "Decrementing array's elements' ref counts without having incremented first!")
      }
      unknown ev[113972] eltType
      const refcount[113990] "const"(113989 call(113984 call .(113979 call .(113976 call . ev c"_dom") c"_value") c"remove_containing_arr") arr)
      if(114018 call _cond_test(113995 call == refcount 0))
      {
        (114016 call _delete_dom(114002 call .(113999 call . ev c"_dom") c"_value")(114015 call _isPrivatized(114011 call .(114008 call . ev c"_dom") c"_value")))
      }
      (114030 call chpl_decRefCountsForDomainsInArrayEltTypes arr(114027 call . ev c"eltType"))
    }
  }
  function chpl__buildSubDomainType[114045](arg dom[114042] :
  _domain) type : _unknown[43]
  {
    (114051 return(114050 call chpl__convertValueToRuntimeType dom))
  }
  function chpl__isTupleOfRanges[114060](arg tup[114058]:_any[170](?)) param : _unknown[43]
  {
    {
      unknown i[114088] 0
      unknown tmp[114089] "maybe param" "temp"
      (114101 'move' tmp[114089](114099 call chpl_compute_low_param_loop_bound 1(114064 call . tup c"size")))
      unknown tmp[114090] "maybe param" "temp"
      (114111 'move' tmp[114090](114109 call chpl_compute_high_param_loop_bound 1(114106 call . tup c"size")))
      unknown tmp[114091] "maybe param" "temp"
      (114114 'move' tmp[114091] 1)
      ParamForLoop
      { i[114088] tmp[114089] tmp[114090] tmp[114091]
        {
          if(114082 call _cond_test(114077 call !(114076 call isRangeType(114074 'typeof'(114073 call tup i)))))
          {
            (114080 return 0)
          }
        }
      }
      label _unused_continueLabel[114093]
      label _breakLabel[114092]
    }
    (114127 return 1)
  }
  function chpl__buildDomainExpr[114137](arg ranges[114134]:_any[170](?) ...) : _unknown[43]
  {
    unknown rank[114147] "param"(114144 call . ranges c"size")
    {
      unknown i[114196] 0
      unknown tmp[114197] "maybe param" "temp"
      (114209 'move' tmp[114197](114207 call chpl_compute_low_param_loop_bound 2 rank))
      unknown tmp[114198] "maybe param" "temp"
      (114216 'move' tmp[114198](114214 call chpl_compute_high_param_loop_bound 2 rank))
      unknown tmp[114199] "maybe param" "temp"
      (114219 'move' tmp[114199] 1)
      ParamForLoop
      { i[114196] tmp[114197] tmp[114198] tmp[114199]
        if(114191 call _cond_test(114169 call !=(114159 call .(114158 call ranges 1) c"idxType")(114166 call .(114165 call ranges i) c"idxType")))
        {
          (114189 call compilerError "idxType varies among domain's dimensions")
        }
      }
      label _unused_continueLabel[114201]
      label _breakLabel[114200]
    }
    {
      unknown i[114268] 0
      unknown tmp[114269] "maybe param" "temp"
      (114281 'move' tmp[114269](114279 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[114270] "maybe param" "temp"
      (114288 'move' tmp[114270](114286 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[114271] "maybe param" "temp"
      (114291 'move' tmp[114271] 1)
      ParamForLoop
      { i[114268] tmp[114269] tmp[114270] tmp[114271]
        if(114263 call _cond_test(114241 call !(114240 call isBoundedRange(114238 call ranges i))))
        {
          (114261 call compilerError "one of domain's dimensions is not a bounded range")
        }
      }
      label _unused_continueLabel[114273]
      label _breakLabel[114272]
    }
    unknown d[114318](114316 call chpl__buildDomainRuntimeType defaultDist rank(114308 call .(114307 call ranges 1) c"idxType")(114314 call chpl__anyStridable ranges))
    (114329 call(114324 call . d c"setIndices") ranges)
    (114332 return d)
  }
  where {
    (114142 call chpl__isTupleOfRanges ranges)
  }
  function chpl__buildDomainExpr[114343](arg keys[114340]:_any[170](?) ...) : _unknown[43]
  {
    unknown count[114349] "param"(114346 call . keys c"size")
    unknown keyType[114361] "type variable"(114360 call _getLiteralType(114358 'typeof'(114357 call keys 1)))
    {
      unknown i[114435] 0
      unknown tmp[114436] "maybe param" "temp"
      (114448 'move' tmp[114436](114446 call chpl_compute_low_param_loop_bound 2 count))
      unknown tmp[114437] "maybe param" "temp"
      (114455 'move' tmp[114437](114453 call chpl_compute_high_param_loop_bound 2 count))
      unknown tmp[114438] "maybe param" "temp"
      (114458 'move' tmp[114438] 1)
      ParamForLoop
      { i[114435] tmp[114436] tmp[114437] tmp[114438]
        if(114431 call _cond_test(114377 call != keyType(114376 call _getLiteralType(114374 'typeof'(114373 call keys i)))))
        {
          (114428 call compilerError(114425 call +(114412 call +(114409 call +(114403 call +(114400 call + "Associative domain element "(114398 call _cast string[24] i)) " expected to be of type ")(114407 call _cast string[24] keyType)) " but is of type ")(114423 call _cast string[24](114421 call _getLiteralType(114419 'typeof'(114418 call keys i))))))
        }
      }
      label _unused_continueLabel[114440]
      label _breakLabel[114439]
    }
    unknown D[114474](114472 call chpl__buildDomainRuntimeType defaultDist keyType)
    (114483 call(114478 call . D c"requestCapacity") count)
    {
      unknown i[114497] 0
      unknown tmp[114498] "maybe param" "temp"
      (114510 'move' tmp[114498](114508 call chpl_compute_low_param_loop_bound 1 count))
      unknown tmp[114499] "maybe param" "temp"
      (114517 'move' tmp[114499](114515 call chpl_compute_high_param_loop_bound 1 count))
      unknown tmp[114500] "maybe param" "temp"
      (114520 'move' tmp[114500] 1)
      ParamForLoop
      { i[114497] tmp[114498] tmp[114499] tmp[114500]
        (114494 call += D(114493 call keys i))
      }
      label _unused_continueLabel[114502]
      label _breakLabel[114501]
    }
    (114532 return D)
  }
  function chpl__ensureDomainExpr[114542](const  ref arg x[114539] :
  _domain) const ref : _unknown[43]
  {
    (114545 return x)
  }
  function chpl__ensureDomainExpr[114556](arg x[114553]:_any[170](?) ...) : _unknown[43] "compiler generated" "last resort"
  {
    (114563 return(114562 call chpl__buildDomainExpr(114560 'expand_tuple' x)))
  }
  function chpl__ensureDomainExpr[114572](arg t[114570]:_any[170](?)) : _unknown[43] "compiler generated" "last resort" "no return value for void"
  {
    (114614 call compilerError "Domain expression was a type ('"(114594 call _cast string[24] t) "') rather than a domain value or range list as expected")
  }
  function chpl__distributed[114625](arg d[114622] :
  _distribution, arg dom[114628] :
  _domain) : _unknown[43]
  {
    if(114690 call _cond_test(114634 call isRectangularDom dom))
    {
      unknown distDom[114661] dom(114658 call chpl__distributed d(114655 call chpl__buildDomainRuntimeType defaultDist(114636 call . dom c"rank")(114644 call .(114641 call . dom c"_value") c"idxType")(114651 call .(114648 call . dom c"_value") c"stridable")))
      (114666 return distDom)
    }
    {
      unknown distDom[114683] dom(114680 call chpl__distributed d(114677 call chpl__buildDomainRuntimeType defaultDist(114672 call .(114669 call . dom c"_value") c"idxType")))
      (114688 return distDom)
    }
  }
  function chpl__distributed[114703](arg d[114700] :
  _distribution, arg ranges[114706]:_any[170](?) ...) : _unknown[43]
  {
    (114722 return(114721 call chpl__distributed d(114720 call chpl__buildDomainExpr(114718 'expand_tuple' ranges))))
  }
  where {
    (114712 call chpl__isTupleOfRanges ranges)
  }
  function chpl__isArrayView[114732](arg arr[114730]:_any[170](?)) param : _unknown[43]
  {
    const value[114746] "const"(114743 IfExpr (114737 call isArray arr) then
    { scopeless
      (114739 call . arr c"_value")
    } else
    { scopeless
      arr
    } )
    unknown isSlice[114756] "param"(114755 call(114751 call . value c"isSliceArrayView"))
    unknown isRankChange[114765] "param"(114764 call(114760 call . value c"isRankChangeArrayView"))
    unknown isReindex[114774] "param"(114773 call(114769 call . value c"isReindexArrayView"))
    (114784 return(114782 call ||(114779 call || isSlice isRankChange) isReindex))
  }
  function chpl__getActualArray[114792](arg arr[114790]:_any[170](?)) : _unknown[43]
  {
    unknown value[114806](114803 IfExpr (114797 call isArray arr) then
    { scopeless
      (114799 call . arr c"_value")
    } else
    { scopeless
      arr
    } )
    unknown ret[114826](114823 IfExpr (114813 call chpl__isArrayView value) then
    { scopeless
      (114821 call(114817 call . value c"_getActualArray"))
    } else
    { scopeless
      value
    } )
    (114830 return ret)
  }
  function chpl__isDROrDRView[114838](arg arg[114836]:_any[170](?)) param : _unknown[43]
  {
    if(114987 call _cond_test(114850 call ||(114843 call isDomain arg)(328547 'is_subtype' BaseDom(114846 'typeof' arg))))
    {
      const value[114864] "const"(114861 IfExpr (114855 call isDomain arg) then
      { scopeless
        (114857 call . arg c"_value")
      } else
      { scopeless
        arg
      } )
      unknown isDR[114874] "param"(114873 call(114869 call . value c"isDefaultRectangular"))
      unknown isDRView[114892] "param"(114890 call &&(114880 call chpl__isDomainView value)(114889 call(114885 call .(114884 call chpl__getActualDomain value) c"isDefaultRectangular")))
      (114899 return(114897 call || isDR isDRView))
    }
    {
      if(114983 call _cond_test(114911 call ||(114904 call isArray arg)(328548 'is_subtype' BaseArr(114907 'typeof' arg))))
      {
        const value[114925] "const"(114922 IfExpr (114916 call isArray arg) then
        { scopeless
          (114918 call . arg c"_value")
        } else
        { scopeless
          arg
        } )
        unknown isDR[114935] "param"(114934 call(114930 call . value c"isDefaultRectangular"))
        unknown isDRView[114953] "param"(114951 call &&(114941 call chpl__isArrayView value)(114950 call(114946 call .(114945 call chpl__getActualArray value) c"isDefaultRectangular")))
        (114960 return(114958 call || isDR isDRView))
      }
      {
        (114980 call compilerError "Invalid argument for chpl__isDROrDRView")
      }
    }
  }
  function chpl__isDomainView[114999](arg dom[114997]:_any[170](?)) param : _unknown[43]
  {
    const value[115013] "const"(115010 IfExpr (115004 call isDomain dom) then
    { scopeless
      (115006 call . dom c"_value")
    } else
    { scopeless
      dom
    } )
    unknown isSlice[115025] "param"(115024 call(115020 call . value c"isSliceDomainView"))
    unknown isRankChange[115036] "param"(115035 call(115031 call . value c"isRankChangeDomainView"))
    unknown isReindex[115047] "param"(115046 call(115042 call . value c"isReindexDomainView"))
    (115057 return(115055 call ||(115052 call || isSlice isRankChange) isReindex))
  }
  function chpl__getActualDomain[115065](arg dom[115063]:_any[170](?)) : _unknown[43]
  {
    unknown value[115079](115076 IfExpr (115070 call isDomain dom) then
    { scopeless
      (115072 call . dom c"_value")
    } else
    { scopeless
      dom
    } )
    unknown ret[115099](115096 IfExpr (115086 call chpl__isDomainView value) then
    { scopeless
      (115094 call(115090 call . value c"_getActualDomain"))
    } else
    { scopeless
      value
    } )
    (115103 return ret)
  }
  function chpl__isRectangularDomType[115111](arg domainType[115109]:_any[170](?)) param : _unknown[43]
  {
    unknown dom[115114] domainType
    (115128 return(115126 call &&(115121 call isDomainType domainType)(115125 call isRectangularDom dom)))
  }
  function chpl__isSparseDomType[115136](arg domainType[115134]:_any[170](?)) param : _unknown[43]
  {
    unknown dom[115139] domainType
    (115147 return(115146 call isSparseDom dom))
  }
  function chpl__distributed[115157](arg d[115154] :
  _distribution, arg domainType[115159]:_any[170](?)) type : _unknown[43]
  {
    if(115191 call _cond_test(115165 call !(115164 call isDomainType domainType)))
    {
      (115189 call compilerError "cannot apply 'dmapped' to the non-domain type "(115187 call _cast string[24] domainType))
    }
    if(115324 call _cond_test(115200 call chpl__isRectangularDomType domainType))
    {
      unknown dom[115202] domainType
      (115231 return(115230 call chpl__buildDomainRuntimeType d(115213 call .(115210 call . dom c"_value") c"rank")(115220 call .(115217 call . dom c"_value") c"idxType")(115227 call .(115224 call . dom c"_value") c"stridable")))
    }
    {
      if(115320 call _cond_test(115236 call chpl__isSparseDomType domainType))
      {
        function getParentDomType[115239]() type : _unknown[43]
        {
          unknown dom[115242] domainType
          (115257 return(115256 'static typeof'(115255 'typeof'(115252 call .(115249 call . dom c"_value") c"parentDom"))))
        }
        unknown parentDom[115285] "no auto destroy" "no copy"(115284 'get runtime type field'(115281 call getParentDomType) domainType "dom")
        (115293 return(115292 call chpl__buildSparseDomainRuntimeType d parentDom))
      }
      {
        unknown dom[115296] domainType
        (115318 return(115317 call chpl__buildDomainRuntimeType d(115307 call .(115304 call . dom c"_value") c"idxType")(115314 call .(115311 call . dom c"_value") c"parSafe")))
      }
    }
  }
  function chpl__buildIndexType[115337](param arg rank[115334] :
  int[13], arg idxType[115339]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown x[115346] idxType
    (115352 return(115351 'typeof' x))
  }
  where {
    (115343 call == rank 1)
  }
  function chpl__buildIndexType[115363](param arg rank[115360] :
  int[13], arg idxType[115365]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown x[115375](115373 call * rank idxType)
    (115381 return(115380 'typeof' x))
  }
  where {
    (115369 call > rank 1)
  }
  function chpl__buildIndexType[115392](param arg rank[115389] :
  int[13]) type : _unknown[43]
  {
    (115399 return(115398 call chpl__buildIndexType rank int[13]))
  }
  function chpl__buildIndexType[115410](arg d[115407] :
  _domain) type : _unknown[43]
  {
    (115426 return(115425 call chpl__buildIndexType(115414 call . d c"rank")(115422 call .(115419 call . d c"_value") c"idxType")))
  }
  function chpl__buildIndexType[115437](arg idxType[115434] :
  opaque) type : _unknown[43]
  {
    (115440 return _OpaqueIndex)
  }
  function isRectangularDom[115451](arg d[115448] :
  _domain) param : _unknown[43]
  {
    (115465 return(328549 'is_subtype' BaseRectangularDom(115461 call _to_borrowed(115459 'typeof'(115456 call . d c"_value")))))
  }
  function isRectangularArr[115478](arg a[115475] :
  (115472 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (115487 return(115486 call isRectangularDom(115482 call . a c"_dom")))
  }
  function isIrregularDom[115498](arg d[115495] :
  _domain) param : _unknown[43]
  {
    (115516 return(115514 call ||(115508 call ||(115503 call isSparseDom d)(115507 call isAssociativeDom d))(115513 call isOpaqueDom d)))
  }
  function isIrregularArr[115529](arg a[115526] :
  (115523 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (115538 return(115537 call isIrregularDom(115533 call . a c"_dom")))
  }
  function isAssociativeDom[115549](arg d[115546] :
  _domain) param : _unknown[43]
  {
    function isAssociativeDomClass[115557](arg dc[115554] :
    BaseAssociativeDom) param : _unknown[43]
    {
      (115560 return 1)
    }
    function isAssociativeDomClass[115570](arg dc[115568]:_any[170](?)) param : _unknown[43]
    {
      (115573 return 0)
    }
    (115588 return(115587 call isAssociativeDomClass(115585 call _to_borrowed(115581 call . d c"_value"))))
  }
  function isAssociativeArr[115600](arg a[115597] :
  (115594 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (115609 return(115608 call isAssociativeDom(115604 call . a c"_dom")))
  }
  function isOpaqueDom[115620](arg d[115617] :
  _domain) param : _unknown[43]
  {
    function isOpaqueDomClass[115628](arg dc[115625] :
    BaseOpaqueDom) param : _unknown[43]
    {
      (115631 return 1)
    }
    function isOpaqueDomClass[115641](arg dc[115639]:_any[170](?)) param : _unknown[43]
    {
      (115644 return 0)
    }
    (115659 return(115658 call isOpaqueDomClass(115656 call _to_borrowed(115652 call . d c"_value"))))
  }
  function isSparseDom[115669](arg d[115666] :
  _domain) param : _unknown[43]
  {
    function isSparseDomClass[115677](arg dc[115674] :
    BaseSparseDom) param : _unknown[43]
    {
      (115680 return 1)
    }
    function isSparseDomClass[115690](arg dc[115688]:_any[170](?)) param : _unknown[43]
    {
      (115693 return 0)
    }
    (115705 return(115704 call isSparseDomClass(115700 call . d c"_value")))
  }
  function isSparseArr[115717](arg a[115714] :
  (115711 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (115726 return(115725 call isSparseDom(115721 call . a c"_dom")))
  }
  function chpl__checkDomainsMatch[115739](arg a[115736] :
  (115733 call chpl__buildArrayRuntimeType nil[38]), arg b[115741]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (115745 'use' HaltWrappers 'only' )
    if(115785 call _cond_test boundsChecking)
    {
      if(115780 call _cond_test(115754 call !=(115750 call . a c"_dom") b))
      {
        (115777 call(115757 call . HaltWrappers c"boundsCheckHalt") "domain mismatch on return")
      }
    }
  }
  function chpl__checkDomainsMatch[115797](arg a[115794] :
  _iteratorRecord, arg b[115799]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (115803 'use' HaltWrappers 'only' )
    if(115832 call _cond_test boundsChecking)
    {
      unknown tmp[115808] a
      if(115828 call _cond_test(115817 call !=(115813 call . tmp c"_dom") b))
      {
        (115825 call(115820 call . HaltWrappers c"boundsCheckHalt") "domain mismatch on return")
      }
    }
  }
  function chpl__checkEltTypeMatch[115846](arg a[115843] :
  (115840 call chpl__buildArrayRuntimeType nil[38]), arg b[115848]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    if(115890 call _cond_test(115855 call !=(115851 call . a c"eltType") b))
    {
      (115887 call compilerError "array element type mismatch in return from "(115880 call _cast string[24](115876 call . a c"eltType")) " to "(115885 call _cast string[24] b))
    }
  }
  function chpl__checkEltTypeMatch[115903](arg a[115900] :
  _iteratorRecord, arg b[115905]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    unknown eltType[115912] "type variable"(115911 call iteratorToArrayElementType(115909 'typeof' a))
    if(115935 call _cond_test(115918 call != eltType b))
    {
      (115932 call compilerError "array element type mismatch in return from "(115925 call _cast string[24] eltType) " to "(115930 call _cast string[24] b))
    }
  }
  type dmap[115943]
  function chpl__buildDistType[115950](arg t[115948]:_any[170](?)) type : _unknown[43] "unsafe"
  {
    unknown x[115964](115963 call _to_unmanaged t)
    unknown y[115973](115972 'new'(115971 call _distribution x))
    (115978 return(115977 'typeof' y))
  }
  where {
    (328550 'is_subtype' BaseDist(115956 call _to_borrowed t))
  }
  function chpl__buildDistType[115987](arg t[115985]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (116007 call compilerError "illegal domain map type specifier - must be a subclass of BaseDist")
  }
  function chpl__buildDistValue[116018](arg x[116015] :
  unmanaged[209](?)) : _unknown[43]
  {
    (116036 return(116035 'new'(116034 call _distribution x)))
  }
  where {
    (328551 'is_subtype' BaseDist(116027 'typeof'(116026 call(116022 call . x c"borrow"))))
  }
  function chpl__buildDistValue[116048](in arg x[116045] :
  _owned) : _unknown[43]
  {
    (116071 return(116070 'new'(116069 call _distribution(116067 call(116063 call . x c"release")))))
  }
  where {
    (328552 'is_subtype' BaseDist(116057 'typeof'(116056 call(116052 call . x c"borrow"))))
  }
  function chpl__buildDistValue[116081](arg x[116079]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    (116101 call compilerError "illegal domain map value specifier - must be a subclass of BaseDist")
  }
  function _distribution[116702](?).init[116124](arg _mt[116706]:_MT[227], arg this[116704]:_distribution[116702](?), arg _pid[116121] :
  int[13], arg _instance[116126]:_any[170](?), arg _unowned[116129] :
  bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116139 call =(116135 call . this c"_pid") _pid)
    (116148 call =(116144 call . this c"_instance") _instance)
    (116158 call =(116154 call . this c"_unowned") _unowned)
  }
  function _distribution[116702](?).init[116167](arg _mt[116710]:_MT[227], arg this[116708]:_distribution[116702](?), arg value[116165]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116185 call =(116170 call . this c"_pid")(116182 IfExpr (116176 call _isPrivatized value) then
    { scopeless
      (116180 call _newPrivatizedClass value)
    } else
    { scopeless
      nullPid
    } ))
    (116197 call =(116190 call . this c"_instance")(116196 call _to_unmanaged value))
  }
  function _distribution[116702](?).init=[116208](arg _mt[116714]:_MT[227], arg this[116712]:_distribution[116702](?), const  ref arg other[116205] :
  _distribution) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown value[116221](116220 call(116216 call .(116211 call . other c"_value") c"dsiClone"))
    (116231 call(116226 call . this c"init") value)
  }
  function _distribution[116702](?)._value[116237](arg _mt[116718]:_MT[227], arg this[116716]:_distribution[116702](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    if(116256 call _cond_test(116242 call _isPrivatized _instance))
    {
      (116249 return(116248 call chpl_getPrivatizedCopy(116245 'typeof' _instance) _pid))
    }
    {
      (116253 return _instance)
    }
  }
  function _distribution[116702](?).chpl_forwarding_expr3__value[116265](arg _mt[116722]:_MT[227], arg this[116720]:_distribution[116702](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (116267 return _value)
  }
  function _distribution[116702](?)._do_destroy[116273](arg _mt[116726]:_MT[227], arg this[116724]:_distribution[116702](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    if(116330 call _cond_test(116288 call &&(116276 call ! _unowned)(116286 call !(116285 call(116281 call . _instance c"singleton")))))
    {
      {
        const tmp[116324] "const" "temp"
        (116325 'move' tmp[116324](116322 'deref'(116321 '_wide_get_locale' _instance)))
        {
          unknown distToFree[116297](116296 call(116292 call . _instance c"remove"))
          if(116317 call _cond_test(116303 call != distToFree nil[38]))
          {
            (116314 call _delete_dist(116307 call postfix! distToFree)(116313 call _isPrivatized _instance))
          }
        }
      }
    }
  }
  function _distribution[116702](?).deinit[116339](arg _mt[116730]:_MT[227], arg this[116728]:_distribution[116702](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (116343 call _do_destroy)
  }
  function _distribution[116702](?).clone[116350](arg _mt[116734]:_MT[227], arg this[116732]:_distribution[116702](?)) : _unknown[43] "method" "primary method"
  {
    (116362 return(116361 'new'(116360 call _distribution(116358 call(116354 call . _value c"dsiClone")))))
  }
  function _distribution[116702](?).newRectangularDom[116373](arg _mt[116738]:_MT[227], arg this[116736]:_distribution[116702](?), param arg rank[116370] :
  int[13], arg idxType[116375]:_any[170](?), param arg stridable[116378] :
  bool[10], arg ranges[116393] :
  (116391 call * rank(116390 call range idxType(116386 call . BoundedRangeType c"bounded") stridable))) : _unknown[43] "method" "primary method"
  {
    unknown x[116408](116407 call(116399 call . _value c"dsiNewRectangularDom") rank idxType stridable ranges)
    if(116431 call _cond_test(116419 call(116415 call . x c"linksDistribution")))
    {
      (116428 call(116423 call . _value c"add_dom") x)
    }
    (116436 return x)
  }
  function _distribution[116702](?).newRectangularDom[116446](arg _mt[116742]:_MT[227], arg this[116740]:_distribution[116702](?), param arg rank[116443] :
  int[13], arg idxType[116448]:_any[170](?), param arg stridable[116451] :
  bool[10]) : _unknown[43] "method" "primary method"
  {
    unknown ranges[116466](116464 call * rank(116463 call range idxType(116459 call . BoundedRangeType c"bounded") stridable))
    (116477 return(116476 call newRectangularDom rank idxType stridable ranges))
  }
  function _distribution[116702](?).newAssociativeDom[116485](arg _mt[116746]:_MT[227], arg this[116744]:_distribution[116702](?), arg idxType[116483]:_any[170](?), param arg parSafe[116489] :
  bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    unknown x[116503](116502 call(116496 call . _value c"dsiNewAssociativeDom") idxType parSafe)
    if(116522 call _cond_test(116512 call(116508 call . x c"linksDistribution")))
    {
      (116519 call(116514 call . _value c"add_dom") x)
    }
    (116527 return x)
  }
  function _distribution[116702](?).newOpaqueDom[116535](arg _mt[116750]:_MT[227], arg this[116748]:_distribution[116702](?), arg idxType[116533]:_any[170](?), param arg parSafe[116539] :
  bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    unknown x[116553](116552 call(116546 call . _value c"dsiNewOpaqueDom") idxType parSafe)
    if(116572 call _cond_test(116562 call(116558 call . x c"linksDistribution")))
    {
      (116569 call(116564 call . _value c"add_dom") x)
    }
    (116577 return x)
  }
  function _distribution[116702](?).newSparseDom[116587](arg _mt[116754]:_MT[227], arg this[116752]:_distribution[116702](?), param arg rank[116584] :
  int[13], arg idxType[116589]:_any[170](?), arg dom[116592] :
  _domain) : _unknown[43] "method" "primary method"
  {
    unknown x[116606](116605 call(116598 call . _value c"dsiNewSparseDom") rank idxType dom)
    if(116625 call _cond_test(116615 call(116611 call . x c"linksDistribution")))
    {
      (116622 call(116617 call . _value c"add_dom") x)
    }
    (116630 return x)
  }
  function _distribution[116702](?).idxToLocale[116638](arg _mt[116758]:_MT[227], arg this[116756]:_distribution[116702](?), arg ind[116636]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (116649 return(116648 call(116643 call . _value c"dsiIndexToLocale") ind))
  }
  function _distribution[116702](?).readWriteThis[116658](arg _mt[116762]:_MT[227], arg this[116760]:_distribution[116702](?), arg f[116656]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116662 call <~> f _value)
  }
  function _distribution[116702](?).displayRepresentation[116670](arg _mt[116766]:_MT[227], arg this[116764]:_distribution[116702](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116679 call(116675 call . _value c"dsiDisplayRepresentation"))
  }
  function _distribution[116702](?).targetLocales[116686](arg _mt[116770]:_MT[227], arg this[116768]:_distribution[116702](?)) : _unknown[43] "method" "primary method"
  {
    (116696 return(116695 call(116691 call . _value c"dsiTargetLocales")))
  }
  type _distribution[116702](?) unknown _pid[116108] int[13] unknown _instance[116111] "owned" unknown _unowned[116115] bool[10] forwarding ( )
  function ==[116782](arg d1[116779] :
  (116778 call _distribution ?[249]), arg d2[116788] :
  (116787 call _distribution ?[249])) : _unknown[43] "inline"
  {
    if(116804 call _cond_test(116799 call ==(116792 call . d1 c"_value")(116796 call . d2 c"_value")))
    {
      (116802 return 1)
    }
    (116825 return(116824 call(116816 call .(116811 call . d1 c"_value") c"dsiEqualDMaps")(116820 call . d2 c"_value")))
  }
  function !=[116838](arg d1[116835] :
  (116834 call _distribution ?[249]), arg d2[116844] :
  (116843 call _distribution ?[249])) : _unknown[43] "inline"
  {
    if(116860 call _cond_test(116855 call ==(116848 call . d1 c"_value")(116852 call . d2 c"_value")))
    {
      (116858 return 0)
    }
    (116881 return(116879 call !(116878 call(116870 call .(116867 call . d1 c"_value") c"dsiEqualDMaps")(116874 call . d2 c"_value"))))
  }
  function chpl_defaultComparator[116887]() : _unknown[43]
  {
    (116891 'use' Sort)
    (116895 return defaultComparator)
  }
  function _domain[123390](?).chpl__promotionType[116913](arg _mt[123394]:_MT[227], arg this[123392]:_domain[123390](?)) type : _unknown[43] "method" "primary method"
  {
    (116923 return(116921 call chpl__buildIndexType rank(116918 call . _value c"idxType")))
  }
  function _domain[123390](?).init[116934](arg _mt[123398]:_MT[227], arg this[123396]:_domain[123390](?), arg _pid[116931] :
  int[13], arg _instance[116936]:_any[170](?), arg _unowned[116939] :
  bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (116947 call =(116943 call . this c"_pid") _pid)
    (116956 call =(116952 call . this c"_instance") _instance)
    (116964 call =(116960 call . this c"_unowned") _unowned)
  }
  function _domain[123390](?).init[116973](arg _mt[123402]:_MT[227], arg this[123400]:_domain[123390](?), arg value[116971]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(116989 call _cond_test(116982 call !=(116979 call _to_unmanaged(116977 'typeof' value))(116981 'typeof' value)))
    {
      (116987 call compilerError "Domain on borrow created")
    }
    (117011 call =(116996 call . this c"_pid")(117008 IfExpr (117002 call _isPrivatized value) then
    { scopeless
      (117006 call _newPrivatizedClass value)
    } else
    { scopeless
      nullPid
    } ))
    (117019 call =(117015 call . this c"_instance") value)
  }
  function _domain[123390](?).init[117030](arg _mt[123406]:_MT[227], arg this[123404]:_domain[123390](?), arg d[117027] :
  _distribution, param arg rank[117033] :
  int[13], arg idxType[117037]:_any[170](?) =
  int[13], param arg stridable[117042] :
  bool[10] =
  0) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117060 call(117047 call . this c"init")(117058 call(117051 call . d c"newRectangularDom") rank idxType stridable))
  }
  function _domain[123390](?).init[117071](arg _mt[123410]:_MT[227], arg this[123408]:_domain[123390](?), arg d[117068] :
  _distribution, param arg rank[117074] :
  int[13], arg idxType[117078]:_any[170](?) =
  int[13], param arg stridable[117083] :
  bool[10] =
  0, arg ranges[117099] :
  (117097 call * rank(117096 call range idxType(117092 call . BoundedRangeType c"bounded") stridable))) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117117 call(117103 call . this c"init")(117115 call(117107 call . d c"newRectangularDom") rank idxType stridable ranges))
  }
  function _domain[123390](?).init[117128](arg _mt[123414]:_MT[227], arg this[123412]:_domain[123390](?), arg d[117125] :
  _distribution, arg idxType[117130]:_any[170](?), param arg parSafe[117134] :
  bool[10] =
  1) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117153 call(117139 call . this c"init")(117151 call(117145 call . d c"newAssociativeDom") idxType parSafe))
  }
  function _domain[123390](?).init[117164](arg _mt[123418]:_MT[227], arg this[123416]:_domain[123390](?), arg d[117161] :
  _distribution, arg idxType[117167] :
  _OpaqueIndex, param arg parSafe[117172] :
  bool[10] =
  1) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117191 call(117177 call . this c"init")(117189 call(117183 call . d c"newOpaqueDom") idxType parSafe))
  }
  function _domain[123390](?).init[117202](arg _mt[123422]:_MT[227], arg this[123420]:_domain[123390](?), arg d[117199] :
  _distribution, arg dom[117205] :
  _domain) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117233 call(117209 call . this c"init")(117231 call(117215 call . d c"newSparseDom")(117219 call . dom c"rank")(117227 call .(117224 call . dom c"_value") c"idxType") dom))
  }
  function _domain[123390](?).init=[117244](arg _mt[123426]:_MT[227], arg this[123424]:_domain[123390](?), const  ref arg other[117241] :
  _domain) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (117277 call(117251 call . this c"init")(117255 call . other c"dist")(117260 call . other c"rank")(117264 call . other c"idxType")(117268 call . other c"stridable")(117276 call(117272 call . other c"dims")))
  }
  where {
    (117249 call isRectangularDom other)
  }
  function _domain[123390](?).init=[117289](arg _mt[123430]:_MT[227], arg this[123428]:_domain[123390](?), const  ref arg other[117286] :
  _domain) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(117421 call _cond_test(117294 call isAssociativeDom other))
    {
      (117312 call(117296 call . this c"init")(117300 call . other c"dist")(117305 call . other c"idxType")(117309 call . other c"parSafe"))
    }
    {
      if(117416 call _cond_test(117318 call isOpaqueDom other))
      {
        (117333 call(117320 call . this c"init")(117324 call . other c"dist") _OpaqueIndex(117330 call . other c"parSafe"))
      }
      {
        if(117412 call _cond_test(117339 call isSparseDom other))
        {
          (117353 call(117341 call . this c"init")(117345 call . other c"dist")(117350 call . other c"parentDom"))
        }
        {
          (117401 call compilerError "Cannot initialize '"(117377 call _cast string[24](117375 'typeof' this)) "' from '"(117398 call _cast string[24](117396 'typeof' other)) "'")
          (117410 call(117405 call . this c"init") nil[38])
        }
      }
    }
    (117437 call(117430 call . _instance c"dsiAssignDomain") other(lhsPrivate = 1))
  }
  function _domain[123390](?)._value[117443](arg _mt[123434]:_MT[227], arg this[123432]:_domain[123390](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    if(117462 call _cond_test(117448 call _isPrivatized _instance))
    {
      (117455 return(117454 call chpl_getPrivatizedCopy(117451 'typeof' _instance) _pid))
    }
    {
      (117459 return _instance)
    }
  }
  function _domain[123390](?).chpl_forwarding_expr4__value[117472](arg _mt[123438]:_MT[227], arg this[123436]:_domain[123390](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (117474 return _value)
  }
  function _domain[123390](?).chpl__serialize[117480](arg _mt[123442]:_MT[227], arg this[123440]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (117502 return(117501 call(117497 call .(117492 call . this c"_value") c"chpl__serialize")))
  }
  where {
    (117490 call(117486 call .(117483 call . this c"_value") c"isDefaultRectangular"))
  }
  function _domain[123390](?).chpl__deserialize[117512](arg _mt[123446]:_MT[227], arg this[123444]:_domain[123390](?), arg data[117510]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown valueType[117519] "type variable"(117518 'static field type' this "_instance")
    (117539 return(117538 'new'(117537 call _domain(117535 call(117530 call .(117527 call _to_borrowed valueType) c"chpl__deserialize") data))))
  }
  function _domain[123390](?)._do_destroy[117545](arg _mt[123450]:_MT[227], arg this[123448]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(117657 call _cond_test(117548 call ! _unowned))
    {
      {
        const tmp[117651] "const" "temp"
        (117652 'move' tmp[117651](117649 'deref'(117648 '_wide_get_locale' _instance)))
        {
          const inst[117552] "const" _instance
          unknown tmp[117567] "no copy" "temp"(117566 call(117562 call . inst c"remove"))
          (117574 call _check_tuple_var_decl tmp[117567] 2)
          unknown domToFree[117556](117568 call tmp[117567] 1)
          unknown distToRemove[117558](117571 call tmp[117567] 2)
          unknown distToFree[117583] nil[38](117581 'to unmanaged class from unknown'(117580 'to nilable class from type' BaseDist))
          if(117603 call _cond_test(117588 call != distToRemove nil[38]))
          {
            (117599 call = distToFree(117598 call(117594 call .(117592 call postfix! distToRemove) c"remove")))
          }
          if(117620 call _cond_test(117609 call != domToFree nil[38]))
          {
            (117618 call _delete_dom inst(117617 call _isPrivatized inst))
          }
          if(117643 call _cond_test(117627 call != distToFree nil[38]))
          {
            (117641 call _delete_dist(117631 call postfix! distToFree)(117640 call _isPrivatized(117636 call . inst c"dist")))
          }
        }
      }
    }
  }
  function _domain[123390](?).deinit[117666](arg _mt[123454]:_MT[227], arg this[123452]:_domain[123390](?)) : _unknown[43] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (117670 call _do_destroy)
  }
  function _domain[123390](?).dist[117677](arg _mt[123458]:_MT[227], arg this[123456]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens" "return not owned"
  {
    (117686 return(117685 call _getDistribution(117681 call . _value c"dist")))
  }
  function _domain[123390](?).rank[117693](arg _mt[123462]:_MT[227], arg this[123460]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    if(117714 call _cond_test(117703 call ||(117698 call isRectangularDom this)(117702 call isSparseDom this)))
    {
      (117709 return(117706 call . _value c"rank"))
    }
    {
      (117712 return 1)
    }
  }
  function _domain[123390](?).idxType[117725](arg _mt[123466]:_MT[227], arg this[123464]:_domain[123390](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    if(117751 call _cond_test(117730 call isOpaqueDom this))
    {
      (117749 call compilerError "opaque domains do not currently support .idxType")
    }
    (117761 return(117758 call . _value c"idxType"))
  }
  function _domain[123390](?).intIdxType[117767](arg _mt[123470]:_MT[227], arg this[123468]:_domain[123390](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (117776 return(117775 call chpl__idxTypeToIntIdxType(117771 call . _value c"idxType")))
  }
  function _domain[123390](?).stridable[117783](arg _mt[123474]:_MT[227], arg this[123472]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    (117793 return(117790 call . _value c"stridable"))
  }
  where {
    (117788 call isRectangularDom this)
  }
  function _domain[123390](?).stridable[117801](arg _mt[123478]:_MT[227], arg this[123476]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    (117814 return(117811 call .(117808 call . _value c"parentDom") c"stridable"))
  }
  where {
    (117806 call isSparseDom this)
  }
  function _domain[123390](?).stridable[117822](arg _mt[123482]:_MT[227], arg this[123480]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (117846 call compilerError "opaque domains do not support .stridable")
  }
  where {
    (117827 call isOpaqueDom this)
  }
  function _domain[123390](?).stridable[117854](arg _mt[123486]:_MT[227], arg this[123484]:_domain[123390](?)) param : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (117878 call compilerError "associative domains do not support .stridable")
  }
  where {
    (117859 call isAssociativeDom this)
  }
  function _domain[123390](?).these[117886](arg _mt[123490]:_MT[227], arg this[123488]:_domain[123390](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[117899] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[117900] "expr temp" "temp"
      (117909 'move' _iterator[117900](117907 call _getIterator(117894 call(117890 call . _value c"these"))))
      Defer
      {
        {
          (117926 call _freeIterator _iterator[117900])
        }
      }
      { scopeless type
        (117915 'move' _indexOfInterest[117899](117912 call iteratorIndex _iterator[117900]))
      }
      ForLoop
      {
        unknown i[117919] "index var" "insert auto destroy"
        (117921 'move' i[117919] _indexOfInterest[117899])
        {
          (117896 yield i)
        }
        label _continueLabel[117904]
        _indexOfInterest[117899]
        _iterator[117900]
      }
      label _breakLabel[117905]
    }
  }
  function _domain[123390](?).these[117942](arg _mt[123494]:_MT[227], arg this[123492]:_domain[123390](?), param arg tag[117939] :
  iterKind) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[117999] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118000] "expr temp" "temp"
      (118009 'move' _iterator[118000](118007 call _getIterator(117995 call(117990 call . _value c"these") tag)))
      Defer
      {
        {
          (118026 call _freeIterator _iterator[118000])
        }
      }
      { scopeless type
        (118015 'move' _indexOfInterest[117999](118012 call iteratorIndex _iterator[118000]))
      }
      ForLoop
      {
        unknown i[118019] "index var" "insert auto destroy"
        (118021 'move' i[118019] _indexOfInterest[117999])
        (117997 yield i)
        label _continueLabel[118004]
        _indexOfInterest[117999]
        _iterator[118000]
      }
      label _breakLabel[118005]
    }
  }
  where {
    (117986 call &&(117949 call == tag(117946 call . iterKind c"standalone"))(117985 'method call resolves' _value "these"(tag = tag)))
  }
  function _domain[123390](?).these[118043](arg _mt[123498]:_MT[227], arg this[123496]:_domain[123390](?), param arg tag[118040] :
  iterKind) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[118063] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118064] "expr temp" "temp"
      (118073 'move' _iterator[118064](118071 call _getIterator(118059 call(118054 call . _value c"these") tag)))
      Defer
      {
        {
          (118090 call _freeIterator _iterator[118064])
        }
      }
      { scopeless type
        (118079 'move' _indexOfInterest[118063](118076 call iteratorIndex _iterator[118064]))
      }
      ForLoop
      {
        unknown followThis[118083] "index var" "insert auto destroy"
        (118085 'move' followThis[118083] _indexOfInterest[118063])
        (118061 yield followThis)
        label _continueLabel[118068]
        _indexOfInterest[118063]
        _iterator[118064]
      }
      label _breakLabel[118069]
    }
  }
  where {
    (118050 call == tag(118047 call . iterKind c"leader"))
  }
  function _domain[123390](?).these[118107](arg _mt[123502]:_MT[227], arg this[123500]:_domain[123390](?), param arg tag[118104] :
  iterKind, arg followThis[118109]:_any[170](?), param arg fast[118113] :
  bool[10] =
  0) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    if(118231 call _cond_test(118133 'method call resolves' _value "these"(tag = tag) followThis(fast = fast)))
    {
      {
        unknown _indexOfInterest[118149] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[118150] "expr temp" "temp"
        (118159 'move' _iterator[118150](118157 call _getIterator(118145 call(118136 call . _value c"these")(tag = tag) followThis(fast = fast))))
        Defer
        {
          {
            (118176 call _freeIterator _iterator[118150])
          }
        }
        { scopeless type
          (118165 'move' _indexOfInterest[118149](118162 call iteratorIndex _iterator[118150]))
        }
        ForLoop
        {
          unknown i[118169] "index var" "insert auto destroy"
          (118171 'move' i[118169] _indexOfInterest[118149])
          (118147 yield i)
          label _continueLabel[118154]
          _indexOfInterest[118149]
          _iterator[118150]
        }
        label _breakLabel[118155]
      }
    }
    {
      {
        unknown _indexOfInterest[118196] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[118197] "expr temp" "temp"
        (118206 'move' _iterator[118197](118204 call _getIterator(118192 call(118186 call . _value c"these") tag followThis)))
        Defer
        {
          {
            (118223 call _freeIterator _iterator[118197])
          }
        }
        { scopeless type
          (118212 'move' _indexOfInterest[118196](118209 call iteratorIndex _iterator[118197]))
        }
        ForLoop
        {
          unknown i[118216] "index var" "insert auto destroy"
          (118218 'move' i[118216] _indexOfInterest[118196])
          (118194 yield i)
          label _continueLabel[118201]
          _indexOfInterest[118196]
          _iterator[118197]
        }
        label _breakLabel[118202]
      }
    }
  }
  where {
    (118122 call == tag(118119 call . iterKind c"follower"))
  }
  function _domain[123390](?).this[118245](arg _mt[123506]:_MT[227], arg this[123504]:_domain[123390](?), arg d[118242] :
  _domain) : _unknown[43] "method" "primary method" "no doc"
  {
    if(118286 call _cond_test(118252 call ==(118248 call . d c"rank") rank))
    {
      (118264 return(118263 call this(118261 'expand_tuple'(118260 call(118256 call . d c"getIndices")))))
    }
    {
      (118284 call compilerError "slicing a domain with a domain of a different rank")
    }
  }
  function _domain[123390](?).this[118301](arg _mt[123510]:_MT[227], arg this[123508]:_domain[123390](?), arg ranges[118298]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown stridable[118317] "param"(118315 call ||(118308 call . _value c"stridable")(118314 call chpl__anyStridable ranges))
    unknown r[118336](118334 call * rank(118333 call range(118324 call . _value c"idxType")(118329 call . BoundedRangeType c"bounded") stridable))
    {
      unknown i[118364] 0
      unknown tmp[118365] "maybe param" "temp"
      (118377 'move' tmp[118365](118375 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[118366] "maybe param" "temp"
      (118384 'move' tmp[118366](118382 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[118367] "maybe param" "temp"
      (118387 'move' tmp[118367] 1)
      ParamForLoop
      { i[118364] tmp[118365] tmp[118366] tmp[118367]
        {
          (118360 call =(118346 call r i)(118359 call(118353 call(118348 call . _value c"dsiDim") i)(118357 call ranges i)))
        }
      }
      label _unused_continueLabel[118369]
      label _breakLabel[118368]
    }
    (118410 return(118409 'new'(118408 call _domain dist rank(118403 call . _value c"idxType") stridable r)))
  }
  where {
    (118306 call chpl__isTupleOfRanges ranges)
  }
  function _domain[123390](?).this[118421](arg _mt[123514]:_MT[227], arg this[123512]:_domain[123390](?), arg args[118418]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown collapsedDim[118435](118433 call * rank bool[10])
    unknown idx[118443](118441 call * rank idxType)
    unknown uprank[118451] "param"(118450 call chpl__countRanges(118448 'expand_tuple' args))
    unknown upstridable[118464] "param"(118462 call ||(118455 call . this c"stridable")(118461 call chpl__anyRankChangeStridable args))
    unknown upranges[118480](118478 call * uprank(118477 call range(idxType =(118470 call . _value c"idxType"))(stridable = upstridable)))
    unknown updim[118484] 1
    {
      unknown i[118574] 0
      unknown tmp[118575] "maybe param" "temp"
      (118587 'move' tmp[118575](118585 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[118576] "maybe param" "temp"
      (118594 'move' tmp[118576](118592 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[118577] "maybe param" "temp"
      (118597 'move' tmp[118577] 1)
      ParamForLoop
      { i[118574] tmp[118575] tmp[118576] tmp[118577]
        {
          if(118569 call _cond_test(118497 call isRange(118495 call args i)))
          {
            (118503 call =(118501 call collapsedDim i) 0)
            (118518 call =(118510 call idx i)(118515 call .(118514 call dim i) c"alignedLow"))
            (118541 call =(118524 call upranges updim)(118540 call(118534 call(118529 call .(118526 call . this c"_value") c"dsiDim") i)(118538 call args i)))
            (118546 call += updim 1)
          }
          {
            (118554 call =(118552 call collapsedDim i) 1)
            (118566 call =(118561 call idx i)(118565 call args i))
          }
        }
      }
      label _unused_continueLabel[118579]
      label _breakLabel[118578]
    }
    const emptyrange[118613] "const"(118612 'typeof'(118611 call upranges 1))
    if(118669 call _cond_test(118620 call !(118619 call contains idx)))
    {
      {
        unknown d[118634] 0
        unknown tmp[118635] "maybe param" "temp"
        (118647 'move' tmp[118635](118645 call chpl_compute_low_param_loop_bound 1 uprank))
        unknown tmp[118636] "maybe param" "temp"
        (118654 'move' tmp[118636](118652 call chpl_compute_high_param_loop_bound 1 uprank))
        unknown tmp[118637] "maybe param" "temp"
        (118657 'move' tmp[118637] 1)
        ParamForLoop
        { d[118634] tmp[118635] tmp[118636] tmp[118637]
          (118631 call =(118629 call upranges d) emptyrange)
        }
        label _unused_continueLabel[118639]
        label _breakLabel[118638]
      }
    }
    const rcdist[118692] "const"(118691 'new'(118690 'to unmanaged class from unknown'(118689 call ArrayViewRankChangeDist(downDistPid =(118675 call . dist c"_pid"))(downDistInst =(118681 call . dist c"_instance"))(collapsedDim = collapsedDim)(idx = idx))))
    const rcdistRec[118700] "const"(118699 'new'(118698 call _distribution rcdist))
    (118724 return(118723 'new'(118722 call _domain rcdistRec uprank(118711 call .(118710 call upranges 1) c"idxType")(118718 call .(118717 call upranges 1) c"stridable") upranges)))
  }
  where {
    (118430 call _validRankChangeArgs args(118427 call . _value c"idxType"))
  }
  function _domain[123390](?).this[118737](arg _mt[123518]:_MT[227], arg this[123516]:_domain[123390](?), arg i[118733] ... :
  integral) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (118757 call compilerError "domain slice requires a range in at least one dimension")
  }
  function _domain[123390](?).this[118769](arg _mt[123522]:_MT[227], arg this[123520]:_domain[123390](?), arg args[118766]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(118816 call _cond_test(118773 call == numArgs rank))
    {
      (118793 call compilerError "invalid argument types for domain slicing")
    }
    {
      (118814 call compilerError "a domain slice requires either a single domain argument or exactly one argument per domain dimension")
    }
  }
  function _domain[123390](?).dims[118826](arg _mt[123526]:_MT[227], arg this[123524]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    (118834 return(118833 call(118829 call . _value c"dsiDims")))
  }
  function _domain[123390](?).dim[118845](arg _mt[123530]:_MT[227], arg this[123528]:_domain[123390](?), arg d[118842] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    (118854 return(118853 call(118848 call . _value c"dsiDim") d))
  }
  function _domain[123390](?).dim[118865](arg _mt[123534]:_MT[227], arg this[123532]:_domain[123390](?), param arg d[118862] :
  int[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    (118874 return(118873 call(118868 call . _value c"dsiDim") d))
  }
  function _domain[123390](?).dimIter[118883](arg _mt[123538]:_MT[227], arg this[123536]:_domain[123390](?), param arg d[118881]:_any[170](?), arg ind[118885]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[118901] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118902] "expr temp" "temp"
      (118911 'move' _iterator[118902](118909 call _getIterator(118897 call(118891 call . _value c"dimIter") d ind)))
      Defer
      {
        {
          (118928 call _freeIterator _iterator[118902])
        }
      }
      { scopeless type
        (118917 'move' _indexOfInterest[118901](118914 call iteratorIndex _iterator[118902]))
      }
      ForLoop
      {
        unknown i[118921] "index var" "insert auto destroy"
        (118923 'move' i[118921] _indexOfInterest[118901])
        (118899 yield i)
        label _continueLabel[118906]
        _indexOfInterest[118901]
        _iterator[118902]
      }
      label _breakLabel[118907]
    }
  }
  function _domain[123390](?).shape[118940](arg _mt[123542]:_MT[227], arg this[123540]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown s[118962](118960 call * rank(118957 call .(118956 call dim 1) c"intIdxType"))
    {
      unknown _indexOfInterest[118994] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[118995] "expr temp" "temp"
      (119025 'move' _iterator[118995](118982 call _build_tuple(119010 call _getIterator(119018 call chpl_direct_range_iter 1(119015 call . s c"size") 1))(119022 call _getIterator(119021 call dims))))
      Defer
      {
        {
          (119055 call _freeIterator _iterator[118995])
        }
      }
      { scopeless type
        (119030 'move' _indexOfInterest[118994](119027 call iteratorIndex _iterator[118995]))
      }
      ForLoop
      {
        (119035 call _check_tuple_var_decl _indexOfInterest[118994] 2)
        unknown i[119041] "index var" "insert auto destroy"
        (119043 'move' i[119041](119039 call _indexOfInterest[118994] 1))
        unknown r[119048] "index var" "insert auto destroy"
        (119050 'move' r[119048](119046 call _indexOfInterest[118994] 2))
        (118991 call =(118986 call s i)(118988 call . r c"size"))
        label _continueLabel[118999]
        _indexOfInterest[118994]
        _iterator[118995]
      }
      label _breakLabel[119000]
    }
    (119063 return s)
  }
  where {
    (118950 call ||(118945 call isRectangularDom this)(118949 call isSparseDom this))
  }
  function _domain[123390](?).shape[119070](arg _mt[123546]:_MT[227], arg this[123544]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    unknown s[119086](119084 call _build_tuple(119083 'typeof' size))
    (119095 call =(119093 call s 1) size)
    (119099 return s)
  }
  where {
    (119080 call ||(119075 call isAssociativeDom this)(119079 call isOpaqueDom this))
  }
  function _domain[123390](?).shape[119106](arg _mt[123550]:_MT[227], arg this[123548]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens" "no return value for void"
  {
    (119126 call compilerError ".shape not supported on this domain")
  }
  function _domain[123390](?).buildArray[119135](arg _mt[123554]:_MT[227], arg this[123552]:_domain[123390](?), arg eltType[119133]:_any[170](?)) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    if(119162 call _cond_test(119139 call == eltType void[4]))
    {
      (119159 call compilerError "array element type cannot be void")
    }
    if(119256 call _cond_test(119170 call isGenericType eltType))
    {
      (119195 call compilerWarning(119192 call + "creating an array with element type "(119190 call _cast string[24] eltType)))
      if(119232 call _cond_test(119209 call &&(119201 call isClassType eltType)(119207 call !(119206 call isGenericType(119204 'to borrowed class from unknown' eltType)))))
      {
        (119229 call compilerWarning "which now means class type with generic management")
      }
      (119254 call compilerError "array element type cannot currently be generic")
    }
    unknown x[119269](119268 call(119263 call . _value c"dsiBuildArray") eltType)
    function help[119274]() : _unknown[43] "dont disable remote value forwarding" "no return value for void"
    {
      (119284 call(119279 call . _value c"add_arr") x)
    }
    (119291 call help)
    (119300 call chpl_incRefCountsForDomainsInArrayEltTypes x(119297 call . x c"eltType"))
    (119306 return(119305 call _newArray x))
  }
  function _domain[123390](?).buildArrayWith[119314](arg _mt[123558]:_MT[227], arg this[123556]:_domain[123390](?), arg eltType[119312]:_any[170](?), arg data[119320] :
  (119319 call _ddata eltType), arg allocSize[119324] :
  int[13]) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    if(119337 call _cond_test(119329 call == eltType void[4]))
    {
      (119334 call compilerError "array element type cannot be void")
    }
    unknown x[119353](119352 call(119345 call . _value c"dsiBuildArrayWith") eltType data allocSize)
    function help[119358]() : _unknown[43] "dont disable remote value forwarding" "no return value for void"
    {
      (119366 call(119361 call . _value c"add_arr") x)
    }
    (119373 call help)
    (119382 call chpl_incRefCountsForDomainsInArrayEltTypes x(119379 call . x c"eltType"))
    (119388 return(119387 call _newArray x))
  }
  function _domain[123390](?).clear[119394](arg _mt[123562]:_MT[227], arg this[123560]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown emptyDom[119402](119401 'typeof' this)
    (119408 call = this emptyDom)
  }
  where {
    (119399 call isRectangularDom this)
  }
  function _domain[123390](?).clear[119416](arg _mt[123566]:_MT[227], arg this[123564]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (119425 call(119421 call . _value c"dsiClear"))
  }
  function _domain[123390](?).create[119432](arg _mt[123570]:_MT[227], arg this[123568]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(119461 call _cond_test(119439 call !=(119435 call . _value c"idxType") _OpaqueIndex))
    {
      (119459 call compilerError "domain.create() only applies to opaque domains")
    }
    (119475 return(119474 call(119470 call . _value c"dsiCreate")))
  }
  function _domain[123390](?).add[119483](arg _mt[123574]:_MT[227], arg this[123572]:_domain[123390](?), arg i[119481]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (119494 return(119493 call(119488 call . _value c"dsiAdd") i))
  }
  function _domain[123390](?).bulkAdd[119511](arg _mt[123578]:_MT[227], arg this[123576]:_domain[123390](?), arg inds[119508] :
  (119505 call chpl__buildArrayRuntimeType nil[38](119502 call . _value c"idxType")), arg dataSorted[119514] =
  0, arg isUnique[119518] =
  0, arg preserveInds[119522] =
  1, arg addOn[119530] =
  (119528 call _cast(119527 'to nilable class from type' locale[26]) nil[38])) : _unknown[43] "method" "primary method" "no doc"
  {
    if(119556 call _cond_test(119551 call ==(119547 call . inds c"size") 0))
    {
      (119554 return 0)
    }
    (119575 return(119574 call(119565 call . _value c"dsiBulkAdd") inds dataSorted isUnique preserveInds addOn))
  }
  where {
    (119544 call &&(119536 call isSparseDom this)(119542 call ==(119538 call . _value c"rank") 1))
  }
  function _domain[123390](?).makeIndexBuffer[119586](arg _mt[123582]:_MT[227], arg this[123580]:_domain[123390](?), arg size[119583] :
  int[13]) : _unknown[43] "inline" "method" "primary method"
  {
    (119597 return(119596 call(119591 call . _value c"dsiMakeIndexBuffer") size))
  }
  function _domain[123390](?).bulkAdd[119620](arg _mt[123586]:_MT[227], arg this[123584]:_domain[123390](?), arg inds[119617] :
  (119614 call chpl__buildArrayRuntimeType nil[38](119612 call *(119605 call . _value c"rank")(119609 call . _value c"idxType"))), arg dataSorted[119623] =
  0, arg isUnique[119627] =
  0, arg preserveInds[119631] =
  1, arg addOn[119639] =
  (119637 call _cast(119636 'to nilable class from type' locale[26]) nil[38])) : _unknown[43] "method" "primary method"
  {
    if(119665 call _cond_test(119660 call ==(119656 call . inds c"size") 0))
    {
      (119663 return 0)
    }
    (119682 return(119681 call(119672 call . _value c"dsiBulkAdd") inds dataSorted isUnique preserveInds addOn))
  }
  where {
    (119653 call &&(119645 call isSparseDom this)(119651 call >(119647 call . _value c"rank") 1))
  }
  function _domain[123390](?).remove[119691](arg _mt[123590]:_MT[227], arg this[123588]:_domain[123390](?), arg i[119689]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (119702 return(119701 call(119696 call . _value c"dsiRemove") i))
  }
  function _domain[123390](?).requestCapacity[119711](arg _mt[123594]:_MT[227], arg this[123592]:_domain[123390](?), arg i[119709]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(119738 call _cond_test(119715 call < i 0))
    {
      (119735 call halt "domain.requestCapacity can only be invoked on sizes >= 0")
    }
    if(119769 call _cond_test(119747 call !(119746 call isAssociativeDom this)))
    {
      (119767 call compilerError "domain.requestCapacity only applies to associative domains")
    }
    (119782 call(119777 call . _value c"dsiRequestCapacity") i)
  }
  function _domain[123390](?).size[119788](arg _mt[123598]:_MT[227], arg this[123596]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119791 return numIndices)
  }
  function _domain[123390](?).numIndices[119798](arg _mt[123602]:_MT[227], arg this[123600]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119804 return(119801 call . _value c"dsiNumIndices"))
  }
  function _domain[123390](?).low[119811](arg _mt[123606]:_MT[227], arg this[123604]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119817 return(119814 call . _value c"dsiLow"))
  }
  function _domain[123390](?).high[119824](arg _mt[123610]:_MT[227], arg this[123608]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119832 return(119829 call . _value c"dsiHigh"))
  }
  function _domain[123390](?).stride[119839](arg _mt[123614]:_MT[227], arg this[123612]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119845 return(119842 call . _value c"dsiStride"))
  }
  function _domain[123390](?).alignment[119852](arg _mt[123618]:_MT[227], arg this[123616]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119860 return(119857 call . _value c"dsiAlignment"))
  }
  function _domain[123390](?).first[119867](arg _mt[123622]:_MT[227], arg this[123620]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119875 return(119872 call . _value c"dsiFirst"))
  }
  function _domain[123390](?).last[119882](arg _mt[123626]:_MT[227], arg this[123624]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119890 return(119887 call . _value c"dsiLast"))
  }
  function _domain[123390](?).alignedLow[119897](arg _mt[123630]:_MT[227], arg this[123628]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119905 return(119902 call . _value c"dsiAlignedLow"))
  }
  function _domain[123390](?).alignedHigh[119912](arg _mt[123634]:_MT[227], arg this[123632]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (119920 return(119917 call . _value c"dsiAlignedHigh"))
  }
  function _domain[123390](?).contains[119937](arg _mt[123638]:_MT[227], arg this[123636]:_domain[123390](?), arg i[119934] :
  (119932 call * rank(119929 call . _value c"idxType"))) : _unknown[43] "method" "primary method" "no doc"
  {
    if(119974 call _cond_test(119947 call ||(119942 call isRectangularDom this)(119946 call isSparseDom this)))
    {
      (119960 return(119959 call(119950 call . _value c"dsiMember")(119957 call _makeIndexTuple rank i)))
    }
    {
      (119972 return(119971 call(119963 call . _value c"dsiMember")(119969 call i 1)))
    }
  }
  function _domain[123390](?).contains[119994](arg _mt[123642]:_MT[227], arg this[123640]:_domain[123390](?), arg i[119990] ... :
  (119986 call . _value c"idxType")) : _unknown[43] "inline" "method" "primary method"
  {
    (120000 return(119999 call contains i))
  }
  function _domain[123390](?).member[120017](arg _mt[123646]:_MT[227], arg this[123644]:_domain[123390](?), arg i[120014] :
  (120012 call * rank(120009 call . _value c"idxType"))) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (120055 call compilerWarning(120052 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (120065 return(120064 call(120059 call . this c"contains") i))
  }
  function _domain[123390](?).member[120080](arg _mt[123650]:_MT[227], arg this[123648]:_domain[123390](?), arg i[120076] ... :
  (120072 call . _value c"idxType")) : _unknown[43] "inline" "method" "primary method"
  {
    (120088 call compilerWarning(120085 call + "domain.member is deprecated - " "please use domain.contains instead"))
    (120098 return(120097 call(120092 call . this c"contains") i))
  }
  function _domain[123390](?).isSubset[120108](arg _mt[123654]:_MT[227], arg this[123652]:_domain[123390](?), arg super[120105] :
  _domain) : _unknown[43] "method" "primary method"
  {
    if(120203 call _cond_test(120120 call !(120118 call ||(120113 call isAssociativeDom this)(120117 call isRectangularDom this))))
    {
      if(120196 call _cond_test(120125 call isOpaqueDom this))
      {
        (120144 call compilerError "isSubset not supported on opaque domains")
      }
      {
        if(120190 call _cond_test(120149 call isSparseDom this))
        {
          (120168 call compilerError "isSubset not supported on sparse domains")
        }
        {
          (120188 call compilerError "isSubset not supported on this domain type")
        }
      }
    }
    if(120317 call _cond_test(120212 call !=(120209 'typeof' super)(120211 'typeof' this)))
    {
      if(120312 call _cond_test(120217 call isRectangularDom this))
      {
        if(120285 call _cond_test(120226 call !=(120219 call . super c"rank")(120223 call . this c"rank")))
        {
          (120246 call compilerError "rank mismatch in domain.isSubset()")
        }
        {
          if(120280 call _cond_test(120258 call !=(120252 'typeof'(120249 call . super c"low"))(120257 'typeof'(120254 call . this c"low"))))
          {
            (120278 call compilerError "isSubset called with different index types")
          }
        }
      }
      {
        (120310 call compilerError "isSubset called with different associative domain types")
      }
    }
    if(120441 call _cond_test(120325 call isRectangularDom this))
    {
      unknown contains[120327] 1
      {
        unknown _indexOfInterest[120393] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120394] "expr temp" "temp"
        (120403 'move' _iterator[120394](120401 call _getIterator(120415 call chpl_direct_range_iter 1(120408 call .(120413 call(120410 call . this c"dims")) c"size") 1)))
        Defer
        {
          {
            (120431 call _freeIterator _iterator[120394])
          }
        }
        { scopeless type
          (120420 'move' _indexOfInterest[120393](120417 call iteratorIndex _iterator[120394]))
        }
        ForLoop
        {
          unknown i[120424] "index var" "insert auto destroy"
          (120426 'move' i[120424] _indexOfInterest[120393])
          {
            {
              unknown tmp[120369] "temp"
              (120372 'move' tmp[120369](120371 'addr of' contains))
              (120377 call = tmp[120369](120374 call && tmp[120369](120367 call(120354 call .(120353 call(120350 call(120346 call . super c"dims")) i) c"contains")(120365 call(120362 call(120358 call . this c"dims")) i))))
            }
            if(120388 call _cond_test(120383 call == contains 0))
            {
              break nil[38]
            }
          }
          label _continueLabel[120398]
          _indexOfInterest[120393]
          _iterator[120394]
        }
        label _breakLabel[120399]
      }
      (120439 return contains)
    }
    (120461 return(120459 'reduce' LogicalAndReduceScanOp(120455 forall  i  in  this do
    {
      (120454 call(120449 call . super c"contains") i)
    } ) 0))
  }
  function _domain[123390](?).isSuper[120471](arg _mt[123658]:_MT[227], arg this[123656]:_domain[123390](?), arg sub[120468] :
  _domain) : _unknown[43] "method" "primary method"
  {
    if(120568 call _cond_test(120483 call !(120481 call ||(120476 call isAssociativeDom this)(120480 call isRectangularDom this))))
    {
      if(120561 call _cond_test(120488 call isOpaqueDom this))
      {
        (120507 call compilerError "isSuper not supported on opaque domains")
      }
      {
        if(120555 call _cond_test(120512 call isSparseDom this))
        {
          (120531 call compilerError "isSuper not supported on sparse domains")
        }
        {
          (120553 call compilerError "isSuper not supported on the domain type "(120552 'typeof' this))
        }
      }
    }
    if(120682 call _cond_test(120577 call !=(120574 'typeof' sub)(120576 'typeof' this)))
    {
      if(120677 call _cond_test(120582 call isRectangularDom this))
      {
        if(120650 call _cond_test(120591 call !=(120584 call . sub c"rank")(120588 call . this c"rank")))
        {
          (120611 call compilerError "rank mismatch in domain.isSuper()")
        }
        {
          if(120645 call _cond_test(120623 call !=(120617 'typeof'(120614 call . sub c"low"))(120622 'typeof'(120619 call . this c"low"))))
          {
            (120643 call compilerError "isSuper called with different index types")
          }
        }
      }
      {
        (120675 call compilerError "isSuper called with different associative domain types")
      }
    }
    if(120806 call _cond_test(120690 call isRectangularDom this))
    {
      unknown contains[120692] 1
      {
        unknown _indexOfInterest[120758] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[120759] "expr temp" "temp"
        (120768 'move' _iterator[120759](120766 call _getIterator(120780 call chpl_direct_range_iter 1(120773 call .(120778 call(120775 call . this c"dims")) c"size") 1)))
        Defer
        {
          {
            (120796 call _freeIterator _iterator[120759])
          }
        }
        { scopeless type
          (120785 'move' _indexOfInterest[120758](120782 call iteratorIndex _iterator[120759]))
        }
        ForLoop
        {
          unknown i[120789] "index var" "insert auto destroy"
          (120791 'move' i[120789] _indexOfInterest[120758])
          {
            {
              unknown tmp[120734] "temp"
              (120737 'move' tmp[120734](120736 'addr of' contains))
              (120742 call = tmp[120734](120739 call && tmp[120734](120732 call(120719 call .(120718 call(120715 call(120711 call . this c"dims")) i) c"contains")(120730 call(120727 call(120723 call . sub c"dims")) i))))
            }
            if(120753 call _cond_test(120748 call == contains 0))
            {
              break nil[38]
            }
          }
          label _continueLabel[120763]
          _indexOfInterest[120758]
          _iterator[120759]
        }
        label _breakLabel[120764]
      }
      (120804 return contains)
    }
    (120826 return(120824 'reduce' LogicalAndReduceScanOp(120820 forall  i  in  sub do
    {
      (120819 call(120814 call . this c"contains") i)
    } ) 0))
  }
  function _domain[123390](?).indexOrder[120834](arg _mt[123662]:_MT[227], arg this[123660]:_domain[123390](?), arg i[120832]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (120849 return(120848 call(120839 call . _value c"dsiIndexOrder")(120846 call _makeIndexTuple rank i)))
  }
  function _domain[123390](?).position[120858](arg _mt[123666]:_MT[227], arg this[123664]:_domain[123390](?), arg i[120856]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ind[120865](120864 call _makeIndexTuple rank i)
    unknown pos[120872](120870 call * rank intIdxType)
    {
      unknown _indexOfInterest[120904] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[120905] "expr temp" "temp"
      (120914 'move' _iterator[120905](120912 call _getIterator(120919 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (120935 call _freeIterator _iterator[120905])
        }
      }
      { scopeless type
        (120924 'move' _indexOfInterest[120904](120921 call iteratorIndex _iterator[120905]))
      }
      ForLoop
      {
        unknown d[120928] "index var" "insert auto destroy"
        (120930 'move' d[120928] _indexOfInterest[120904])
        (120901 call =(120884 call pos d)(120900 call(120892 call .(120891 call(120886 call . _value c"dsiDim") d) c"indexOrder")(120898 call ind d)))
        label _continueLabel[120909]
        _indexOfInterest[120904]
        _iterator[120905]
      }
      label _breakLabel[120910]
    }
    (120943 return pos)
  }
  function _domain[123390](?).expand[120956](arg _mt[123670]:_MT[227], arg this[123668]:_domain[123390](?), arg off[120953] :
  (120951 call * rank intIdxType)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(121068 call _cond_test(120967 call isAssociativeDom this))
    {
      (120986 call compilerError "expand not supported on associative domains")
    }
    {
      if(121062 call _cond_test(120991 call isOpaqueDom this))
      {
        (121010 call compilerError "expand not supported on opaque domains")
      }
      {
        if(121056 call _cond_test(121015 call isSparseDom this))
        {
          (121034 call compilerError "expand not supported on sparse domains")
        }
        {
          (121054 call compilerError "expand not supported on this domain type")
        }
      }
    }
  }
  where {
    (120962 call !(120961 call isRectangularDom this))
  }
  function _domain[123390](?).expand[121086](arg _mt[123674]:_MT[227], arg this[123672]:_domain[123390](?), arg off[121082] ... :
  intIdxType) : _unknown[43] "method" "primary method" "no doc"
  {
    (121092 return(121091 call expand off))
  }
  function _domain[123390](?).expand[121106](arg _mt[123678]:_MT[227], arg this[123676]:_domain[123390](?), arg off[121103] :
  (121101 call * rank intIdxType)) : _unknown[43] "method" "primary method"
  {
    unknown ranges[121111](121110 call dims)
    {
      unknown _indexOfInterest[121201] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121202] "expr temp" "temp"
      (121211 'move' _iterator[121202](121209 call _getIterator(121216 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (121232 call _freeIterator _iterator[121202])
        }
      }
      { scopeless type
        (121221 'move' _indexOfInterest[121201](121218 call iteratorIndex _iterator[121202]))
      }
      ForLoop
      {
        unknown i[121225] "index var" "insert auto destroy"
        (121227 'move' i[121225] _indexOfInterest[121201])
        {
          (121139 call =(121123 call ranges i)(121138 call(121130 call .(121127 call ranges i) c"expand")(121136 call off i)))
          if(121197 call _cond_test(121157 call >(121147 call .(121146 call ranges i) c"low")(121154 call .(121153 call ranges i) c"high")))
          {
            (121194 call halt "***Error: Degenerate dimension created in dimension " i "***")
          }
        }
        label _continueLabel[121206]
        _indexOfInterest[121201]
        _iterator[121202]
      }
      label _breakLabel[121207]
    }
    (121251 return(121250 'new'(121249 call _domain dist rank(121244 call . _value c"idxType") stridable ranges)))
  }
  function _domain[123390](?).expand[121261](arg _mt[123682]:_MT[227], arg this[123680]:_domain[123390](?), arg off[121258] :
  intIdxType) : _unknown[43] "method" "primary method"
  {
    unknown ranges[121270](121269 call dims)
    {
      unknown _indexOfInterest[121296] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121297] "expr temp" "temp"
      (121306 'move' _iterator[121297](121304 call _getIterator(121311 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (121327 call _freeIterator _iterator[121297])
        }
      }
      { scopeless type
        (121316 'move' _indexOfInterest[121296](121313 call iteratorIndex _iterator[121297]))
      }
      ForLoop
      {
        unknown i[121320] "index var" "insert auto destroy"
        (121322 'move' i[121320] _indexOfInterest[121296])
        (121293 call =(121282 call ranges i)(121292 call(121287 call .(121286 call dim i) c"expand") off))
        label _continueLabel[121301]
        _indexOfInterest[121296]
        _iterator[121297]
      }
      label _breakLabel[121302]
    }
    (121346 return(121345 'new'(121344 call _domain dist rank(121339 call . _value c"idxType") stridable ranges)))
  }
  where {
    (121265 call > rank 1)
  }
  function _domain[123390](?).exterior[121360](arg _mt[123686]:_MT[227], arg this[123684]:_domain[123390](?), arg off[121357] :
  (121355 call * rank intIdxType)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(121472 call _cond_test(121371 call isAssociativeDom this))
    {
      (121390 call compilerError "exterior not supported on associative domains")
    }
    {
      if(121466 call _cond_test(121395 call isOpaqueDom this))
      {
        (121414 call compilerError "exterior not supported on opaque domains")
      }
      {
        if(121460 call _cond_test(121419 call isSparseDom this))
        {
          (121438 call compilerError "exterior not supported on sparse domains")
        }
        {
          (121458 call compilerError "exterior not supported on this domain type")
        }
      }
    }
  }
  where {
    (121366 call !(121365 call isRectangularDom this))
  }
  function _domain[123390](?).exterior[121490](arg _mt[123690]:_MT[227], arg this[123688]:_domain[123390](?), arg off[121486] ... :
  intIdxType) : _unknown[43] "method" "primary method" "no doc"
  {
    (121496 return(121495 call exterior off))
  }
  function _domain[123390](?).exterior[121510](arg _mt[123694]:_MT[227], arg this[123692]:_domain[123390](?), arg off[121507] :
  (121505 call * rank intIdxType)) : _unknown[43] "method" "primary method"
  {
    unknown ranges[121515](121514 call dims)
    {
      unknown _indexOfInterest[121546] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121547] "expr temp" "temp"
      (121556 'move' _iterator[121547](121554 call _getIterator(121561 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (121577 call _freeIterator _iterator[121547])
        }
      }
      { scopeless type
        (121566 'move' _indexOfInterest[121546](121563 call iteratorIndex _iterator[121547]))
      }
      ForLoop
      {
        unknown i[121570] "index var" "insert auto destroy"
        (121572 'move' i[121570] _indexOfInterest[121546])
        (121543 call =(121527 call ranges i)(121542 call(121534 call .(121531 call dim i) c"exterior")(121540 call off i)))
        label _continueLabel[121551]
        _indexOfInterest[121546]
        _iterator[121547]
      }
      label _breakLabel[121552]
    }
    (121596 return(121595 'new'(121594 call _domain dist rank(121589 call . _value c"idxType") stridable ranges)))
  }
  function _domain[123390](?).exterior[121606](arg _mt[123698]:_MT[227], arg this[123696]:_domain[123390](?), arg off[121603] :
  intIdxType) : _unknown[43] "method" "primary method"
  {
    unknown offTup[121616](121614 call * rank intIdxType)
    {
      unknown _indexOfInterest[121633] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121634] "expr temp" "temp"
      (121643 'move' _iterator[121634](121641 call _getIterator(121648 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (121664 call _freeIterator _iterator[121634])
        }
      }
      { scopeless type
        (121653 'move' _indexOfInterest[121633](121650 call iteratorIndex _iterator[121634]))
      }
      ForLoop
      {
        unknown i[121657] "index var" "insert auto destroy"
        (121659 'move' i[121657] _indexOfInterest[121633])
        (121630 call =(121628 call offTup i) off)
        label _continueLabel[121638]
        _indexOfInterest[121633]
        _iterator[121634]
      }
      label _breakLabel[121639]
    }
    (121675 return(121674 call exterior offTup))
  }
  where {
    (121610 call != rank 1)
  }
  function _domain[123390](?).interior[121689](arg _mt[123702]:_MT[227], arg this[123700]:_domain[123390](?), arg off[121686] :
  (121684 call * rank intIdxType)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(121801 call _cond_test(121700 call isAssociativeDom this))
    {
      (121719 call compilerError "interior not supported on associative domains")
    }
    {
      if(121795 call _cond_test(121724 call isOpaqueDom this))
      {
        (121743 call compilerError "interior not supported on opaque domains")
      }
      {
        if(121789 call _cond_test(121748 call isSparseDom this))
        {
          (121767 call compilerError "interior not supported on sparse domains")
        }
        {
          (121787 call compilerError "interior not supported on this domain type")
        }
      }
    }
  }
  where {
    (121695 call !(121694 call isRectangularDom this))
  }
  function _domain[123390](?).interior[121819](arg _mt[123706]:_MT[227], arg this[123704]:_domain[123390](?), arg off[121815] ... :
  intIdxType) : _unknown[43] "method" "primary method" "no doc"
  {
    (121825 return(121824 call interior off))
  }
  function _domain[123390](?).interior[121839](arg _mt[123710]:_MT[227], arg this[123708]:_domain[123390](?), arg off[121836] :
  (121834 call * rank intIdxType)) : _unknown[43] "method" "primary method"
  {
    unknown ranges[121844](121843 call dims)
    {
      unknown _indexOfInterest[121976] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[121977] "expr temp" "temp"
      (121986 'move' _iterator[121977](121984 call _getIterator(121991 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (122007 call _freeIterator _iterator[121977])
        }
      }
      { scopeless type
        (121996 'move' _indexOfInterest[121976](121993 call iteratorIndex _iterator[121977]))
      }
      ForLoop
      {
        unknown i[122000] "index var" "insert auto destroy"
        (122002 'move' i[122000] _indexOfInterest[121976])
        {
          if(121946 call _cond_test(121921 call ||(121885 call &&(121858 call >(121856 call off i) 0)(121883 call <(121874 call -(121868 call +(121864 call .(121863 call dim i) c"_high") 1)(121873 call off i))(121880 call .(121879 call dim i) c"_low")))(121919 call &&(121892 call <(121890 call off i) 0)(121917 call >(121908 call -(121902 call -(121898 call .(121897 call dim i) c"_low") 1)(121907 call off i))(121914 call .(121913 call dim i) c"_high")))))
          {
            (121943 call halt "***Error: Argument to 'interior' function out of range in dimension " i "***")
          }
          (121973 call =(121954 call ranges i)(121972 call(121964 call .(121961 call(121956 call . _value c"dsiDim") i) c"interior")(121970 call off i)))
        }
        label _continueLabel[121981]
        _indexOfInterest[121976]
        _iterator[121977]
      }
      label _breakLabel[121982]
    }
    (122026 return(122025 'new'(122024 call _domain dist rank(122019 call . _value c"idxType") stridable ranges)))
  }
  function _domain[123390](?).interior[122036](arg _mt[123714]:_MT[227], arg this[123712]:_domain[123390](?), arg off[122033] :
  intIdxType) : _unknown[43] "method" "primary method"
  {
    unknown offTup[122046](122044 call * rank intIdxType)
    {
      unknown _indexOfInterest[122063] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122064] "expr temp" "temp"
      (122073 'move' _iterator[122064](122071 call _getIterator(122078 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (122094 call _freeIterator _iterator[122064])
        }
      }
      { scopeless type
        (122083 'move' _indexOfInterest[122063](122080 call iteratorIndex _iterator[122064]))
      }
      ForLoop
      {
        unknown i[122087] "index var" "insert auto destroy"
        (122089 'move' i[122087] _indexOfInterest[122063])
        (122060 call =(122058 call offTup i) off)
        label _continueLabel[122068]
        _indexOfInterest[122063]
        _iterator[122064]
      }
      label _breakLabel[122069]
    }
    (122105 return(122104 call interior offTup))
  }
  where {
    (122040 call != rank 1)
  }
  function _domain[123390](?).translate[122114](arg _mt[123718]:_MT[227], arg this[123716]:_domain[123390](?), arg off[122112]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(122226 call _cond_test(122125 call isAssociativeDom this))
    {
      (122144 call compilerError "translate not supported on associative domains")
    }
    {
      if(122220 call _cond_test(122149 call isOpaqueDom this))
      {
        (122168 call compilerError "translate not supported on opaque domains")
      }
      {
        if(122214 call _cond_test(122173 call isSparseDom this))
        {
          (122192 call compilerError "translate not supported on sparse domains")
        }
        {
          (122212 call compilerError "translate not supported on this domain type")
        }
      }
    }
  }
  where {
    (122120 call !(122119 call isRectangularDom this))
  }
  function _domain[123390](?).translate[122242](arg _mt[123722]:_MT[227], arg this[123720]:_domain[123390](?), arg off[122239]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    (122248 return(122247 call translate off))
  }
  function _domain[123390](?).translate[122257](arg _mt[123726]:_MT[227], arg this[123724]:_domain[123390](?), arg off[122255]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    if(122290 call _cond_test(122268 call !=(122264 call . off c"size") rank))
    {
      (122288 call compilerError "the domain and offset arguments of translate() must be of the same rank")
    }
    unknown ranges[122299](122298 call dims)
    {
      unknown _indexOfInterest[122330] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122331] "expr temp" "temp"
      (122340 'move' _iterator[122331](122338 call _getIterator(122345 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (122361 call _freeIterator _iterator[122331])
        }
      }
      { scopeless type
        (122350 'move' _indexOfInterest[122330](122347 call iteratorIndex _iterator[122331]))
      }
      ForLoop
      {
        unknown i[122354] "index var" "insert auto destroy"
        (122356 'move' i[122354] _indexOfInterest[122330])
        (122327 call =(122310 call ranges i)(122326 call(122318 call .(122317 call(122312 call . _value c"dsiDim") i) c"translate")(122324 call off i)))
        label _continueLabel[122335]
        _indexOfInterest[122330]
        _iterator[122331]
      }
      label _breakLabel[122336]
    }
    (122380 return(122379 'new'(122378 call _domain dist rank(122373 call . _value c"idxType") stridable ranges)))
  }
  where {
    (122262 call isTuple off)
  }
  function _domain[123390](?).translate[122389](arg _mt[123730]:_MT[227], arg this[123728]:_domain[123390](?), arg off[122387]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown offTup[122408](122406 call * rank(122405 'typeof' off))
    {
      unknown _indexOfInterest[122425] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122426] "expr temp" "temp"
      (122435 'move' _iterator[122426](122433 call _getIterator(122440 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (122456 call _freeIterator _iterator[122426])
        }
      }
      { scopeless type
        (122445 'move' _indexOfInterest[122425](122442 call iteratorIndex _iterator[122426]))
      }
      ForLoop
      {
        unknown i[122449] "index var" "insert auto destroy"
        (122451 'move' i[122449] _indexOfInterest[122425])
        (122422 call =(122420 call offTup i) off)
        label _continueLabel[122430]
        _indexOfInterest[122425]
        _iterator[122426]
      }
      label _breakLabel[122431]
    }
    (122467 return(122466 call translate offTup))
  }
  where {
    (122401 call &&(122393 call != rank 1)(122399 call !(122398 call isTuple off)))
  }
  function _domain[123390](?).isEmpty[122474](arg _mt[123734]:_MT[227], arg this[123732]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    (122484 return(122482 call ==(122478 call . this c"size") 0))
  }
  { scopeless type
    bool[10]
  }
  function _domain[123390](?).chpl__unTranslate[122498](arg _mt[123738]:_MT[227], arg this[123736]:_domain[123390](?), arg off[122494] ... :
  integral) : _unknown[43] "method" "primary method"
  {
    (122504 return(122503 call chpl__unTranslate off))
  }
  function _domain[123390](?).chpl__unTranslate[122518](arg _mt[123742]:_MT[227], arg this[123740]:_domain[123390](?), arg off[122515] :
  (122513 call * rank intIdxType)) : _unknown[43] "method" "primary method"
  {
    unknown ranges[122523](122522 call dims)
    {
      unknown _indexOfInterest[122554] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122555] "expr temp" "temp"
      (122564 'move' _iterator[122555](122562 call _getIterator(122569 call chpl_direct_range_iter 1 rank 1)))
      Defer
      {
        {
          (122585 call _freeIterator _iterator[122555])
        }
      }
      { scopeless type
        (122574 'move' _indexOfInterest[122554](122571 call iteratorIndex _iterator[122555]))
      }
      ForLoop
      {
        unknown i[122578] "index var" "insert auto destroy"
        (122580 'move' i[122578] _indexOfInterest[122554])
        (122551 call =(122535 call ranges i)(122550 call(122542 call .(122539 call dim i) c"chpl__unTranslate")(122548 call off i)))
        label _continueLabel[122559]
        _indexOfInterest[122554]
        _iterator[122555]
      }
      label _breakLabel[122560]
    }
    (122604 return(122603 'new'(122602 call _domain dist rank(122597 call . _value c"idxType") stridable ranges)))
  }
  function _domain[123390](?).setIndices[122612](arg _mt[123746]:_MT[227], arg this[123744]:_domain[123390](?), arg x[122610]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (122620 call(122615 call . _value c"dsiSetIndices") x)
    if(122633 call _cond_test(122626 call _isPrivatized _instance))
    {
      (122630 call _reprivatize _value)
    }
  }
  function _domain[123390](?).getIndices[122641](arg _mt[123750]:_MT[227], arg this[123748]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (122651 return(122650 call(122646 call . _value c"dsiGetIndices")))
  }
  function _domain[123390](?).writeThis[122660](arg _mt[123754]:_MT[227], arg this[123752]:_domain[123390](?), arg f[122658]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (122670 call(122665 call . _value c"dsiSerialWrite") f)
  }
  function _domain[123390](?).readThis[122679](arg _mt[123758]:_MT[227], arg this[123756]:_domain[123390](?), arg f[122677]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (122689 call(122684 call . _value c"dsiSerialRead") f)
  }
  function _domain[123390](?).localSlice[122700](arg _mt[123762]:_MT[227], arg this[123760]:_domain[123390](?), arg r[122697]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc"
  {
    if(122766 call _cond_test(122719 call !=(122716 call chpl_localeID_to_locale(122715 '_wide_get_locale' _value)) here))
    {
      (122764 call halt "Attempting to take a local slice of a domain on locale "(122743 '_wide_get_node' _value) " from locale "(122761 call . here c"id"))
    }
    (122777 return(122776 call this(122774 'expand_tuple' r)))
  }
  where {
    (122712 call &&(122705 call chpl__isTupleOfRanges r)(122711 call(122707 call . _value c"isDefaultRectangular")))
  }
  function _domain[123390](?).localSlice[122788](arg _mt[123766]:_MT[227], arg this[123764]:_domain[123390](?), arg r[122785]:_any[170](?) ...) : _unknown[43] "method" "primary method"
  {
    (122817 return(122816 call(122807 call . _value c"dsiLocalSlice")(122813 call chpl__anyStridable r) r))
  }
  where {
    (122802 call &&(122793 call chpl__isTupleOfRanges r)(122800 call !(122799 call(122795 call . _value c"isDefaultRectangular"))))
  }
  function _domain[123390](?).localSlice[122829](arg _mt[123770]:_MT[227], arg this[123768]:_domain[123390](?), arg d[122826] :
  _domain) : _unknown[43] "method" "primary method"
  {
    (122841 return(122840 call localSlice(122838 'expand_tuple'(122837 call(122833 call . d c"getIndices")))))
  }
  function _domain[123390](?).sorted[122857](arg _mt[123774]:_MT[227], arg this[123772]:_domain[123390](?), arg comparator[122853] :
  unknown t[122848] =
  (122852 call chpl_defaultComparator)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[122873] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[122874] "expr temp" "temp"
      (122883 'move' _iterator[122874](122881 call _getIterator(122868 call(122863 call . _value c"dsiSorted") comparator)))
      Defer
      {
        {
          (122900 call _freeIterator _iterator[122874])
        }
      }
      { scopeless type
        (122889 'move' _indexOfInterest[122873](122886 call iteratorIndex _iterator[122874]))
      }
      ForLoop
      {
        unknown i[122893] "index var" "insert auto destroy"
        (122895 'move' i[122893] _indexOfInterest[122873])
        {
          (122870 yield i)
        }
        label _continueLabel[122878]
        _indexOfInterest[122873]
        _iterator[122874]
      }
      label _breakLabel[122879]
    }
  }
  function _domain[123390](?).displayRepresentation[122912](arg _mt[123778]:_MT[227], arg this[123776]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (122919 call(122915 call . _value c"dsiDisplayRepresentation"))
  }
  function _domain[123390](?).defaultSparseDist[122926](arg _mt[123782]:_MT[227], arg this[123780]:_domain[123390](?)) : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    (122935 return(122934 call _getDistribution(122930 call . _value c"dist")))
  }
  function _domain[123390](?).safeCast[122946](arg _mt[123786]:_MT[227], arg this[123784]:_domain[123390](?), arg t[122943] :
  _domain) : _unknown[43] "method" "primary method"
  {
    const tmpD[122959] "const" t
    if(122993 call _cond_test(122971 call !=(122964 call . tmpD c"rank")(122968 call . this c"rank")))
    {
      (122991 call compilerError "rank mismatch in cast")
    }
    if(123028 call _cond_test(123006 call !=(122999 call . tmpD c"idxType")(123003 call . this c"idxType")))
    {
      (123026 call compilerError "idxType mismatch in cast")
    }
    if(123213 call _cond_test(123041 call ==(123034 call . tmpD c"stridable")(123038 call . this c"stridable")))
    {
      (123044 return this)
    }
    {
      if(123209 call _cond_test(123056 call &&(123050 call !(123047 call . tmpD c"stridable"))(123053 call . this c"stridable")))
      {
        const inds[123064] "const"(123063 call(123059 call . this c"getIndices"))
        unknown unstridableInds[123080](123078 call * rank(123077 call range(123071 call . tmpD c"idxType")(stridable = 0)))
        {
          unknown dim[123152] 0
          unknown tmp[123153] "maybe param" "temp"
          (123165 'move' tmp[123153](123163 call chpl_compute_low_param_loop_bound 1(123085 call . inds c"size")))
          unknown tmp[123154] "maybe param" "temp"
          (123175 'move' tmp[123154](123173 call chpl_compute_high_param_loop_bound 1(123170 call . inds c"size")))
          unknown tmp[123155] "maybe param" "temp"
          (123178 'move' tmp[123155] 1)
          ParamForLoop
          { dim[123152] tmp[123153] tmp[123154] tmp[123155]
            {
              if(123121 call _cond_test(123098 call !=(123094 call .(123093 call inds dim) c"stride") 1))
              {
                (123119 call halt "non-stridable domain assigned non-unit stride in dimension " dim)
              }
              (123149 call =(123130 call unstridableInds dim)(123148 call(123135 call .(123134 call inds dim) c"safeCast")(123146 call range(123140 call . tmpD c"idxType")(stridable = 0))))
            }
          }
          label _unused_continueLabel[123157]
          label _breakLabel[123156]
        }
        (123195 call(123190 call . tmpD c"setIndices") unstridableInds)
        (123198 return tmpD)
      }
      {
        (123202 call = tmpD this)
        (123207 return tmpD)
      }
    }
  }
  where {
    (122956 call &&(122951 call chpl__isRectangularDomType t)(122955 call isRectangularDom this))
  }
  function _domain[123390](?).targetLocales[123224](arg _mt[123790]:_MT[227], arg this[123788]:_domain[123390](?)) : _unknown[43] "method" "primary method"
  {
    (123232 return(123231 call(123227 call . _value c"dsiTargetLocales")))
  }
  function _domain[123390](?).hasSingleLocalSubdomain[123239](arg _mt[123794]:_MT[227], arg this[123792]:_domain[123390](?)) param : _unknown[43] "method" "primary method"
  {
    (123249 return(123248 call(123244 call . _value c"dsiHasSingleLocalSubdomain")))
  }
  function _domain[123390](?).localSubdomain[123262](arg _mt[123798]:_MT[227], arg this[123796]:_domain[123390](?), arg loc[123258] :
  locale[26] =
  here) : _unknown[43] "method" "primary method"
  {
    if(123292 call _cond_test(123270 call !(123269 call(123265 call . _value c"dsiHasSingleLocalSubdomain"))))
    {
      (123290 call compilerError "Domain's local domain is not a single domain")
    }
    (123307 return(123306 call(123301 call . _value c"dsiLocalSubdomain") loc))
  }
  function _domain[123390](?).localSubdomains[123319](arg _mt[123802]:_MT[227], arg this[123800]:_domain[123390](?), arg loc[123315] :
  locale[26] =
  here) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(123382 call _cond_test(123326 call(123322 call . _value c"dsiHasSingleLocalSubdomain")))
    {
      (123331 yield(123330 call localSubdomain loc))
    }
    {
      {
        unknown _indexOfInterest[123347] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[123348] "expr temp" "temp"
        (123357 'move' _iterator[123348](123355 call _getIterator(123343 call(123338 call . _value c"dsiLocalSubdomains") loc)))
        Defer
        {
          {
            (123374 call _freeIterator _iterator[123348])
          }
        }
        { scopeless type
          (123363 'move' _indexOfInterest[123347](123360 call iteratorIndex _iterator[123348]))
        }
        ForLoop
        {
          unknown d[123367] "index var" "insert auto destroy"
          (123369 'move' d[123367] _indexOfInterest[123347])
          (123345 yield d)
          label _continueLabel[123352]
          _indexOfInterest[123347]
          _iterator[123348]
        }
        label _breakLabel[123353]
      }
    }
  }
  type _domain[123390](?) unknown _pid[116901] int[13] unknown _instance[116904] "owned" unknown _unowned[116908] bool[10] forwarding ( )
  function _cast[123811](arg t[123808] :
  _domain, arg d[123814] :
  _domain) : _unknown[43] "no doc"
  {
    const tmpD[123828] "const" t
    if(123847 call _cond_test(123840 call !=(123833 call . tmpD c"rank")(123837 call . d c"rank")))
    {
      (123845 call compilerError "rank mismatch in cast")
    }
    if(123867 call _cond_test(123860 call !=(123853 call . tmpD c"idxType")(123857 call . d c"idxType")))
    {
      (123865 call compilerError "idxType mismatch in cast")
    }
    if(124016 call _cond_test(123880 call ==(123873 call . tmpD c"stridable")(123877 call . d c"stridable")))
    {
      (123883 return d)
    }
    {
      if(124012 call _cond_test(123895 call &&(123889 call !(123886 call . tmpD c"stridable"))(123892 call . d c"stridable")))
      {
        unknown inds[123903](123902 call(123898 call . d c"getIndices"))
        unknown unstridableInds[123922](123920 call *(123908 call . d c"rank")(123919 call range(123913 call . tmpD c"idxType")(stridable = 0)))
        {
          unknown i[123955] 0
          unknown tmp[123956] "maybe param" "temp"
          (123968 'move' tmp[123956](123966 call chpl_compute_low_param_loop_bound 1(123927 call . tmpD c"rank")))
          unknown tmp[123957] "maybe param" "temp"
          (123978 'move' tmp[123957](123976 call chpl_compute_high_param_loop_bound 1(123973 call . tmpD c"rank")))
          unknown tmp[123958] "maybe param" "temp"
          (123981 'move' tmp[123958] 1)
          ParamForLoop
          { i[123955] tmp[123956] tmp[123957] tmp[123958]
            {
              (123951 call =(123935 call unstridableInds i)(123949 call _cast(123948 call range(123942 call . tmpD c"idxType")(stridable = 0))(123939 call inds i)))
            }
          }
          label _unused_continueLabel[123960]
          label _breakLabel[123959]
        }
        (123998 call(123993 call . tmpD c"setIndices") unstridableInds)
        (124001 return tmpD)
      }
      {
        (124005 call = tmpD d)
        (124010 return tmpD)
      }
    }
  }
  where {
    (123825 call &&(123820 call chpl__isRectangularDomType t)(123824 call isRectangularDom d))
  }
  function chpl_countDomHelp[124029](arg dom[124027]:_any[170](?), arg counts[124031]:_any[170](?)) : _unknown[43]
  {
    unknown ranges[124039](124038 call(124034 call . dom c"dims"))
    {
      unknown i[124067] 0
      unknown tmp[124068] "maybe param" "temp"
      (124080 'move' tmp[124068](124078 call chpl_compute_low_param_loop_bound 1(124045 call . dom c"rank")))
      unknown tmp[124069] "maybe param" "temp"
      (124090 'move' tmp[124069](124088 call chpl_compute_high_param_loop_bound 1(124085 call . dom c"rank")))
      unknown tmp[124070] "maybe param" "temp"
      (124093 'move' tmp[124070] 1)
      ParamForLoop
      { i[124067] tmp[124068] tmp[124069] tmp[124070]
        (124064 call =(124053 call ranges i)(124062 call #(124057 call ranges i)(124061 call counts i)))
      }
      label _unused_continueLabel[124072]
      label _breakLabel[124071]
    }
    (124109 return(124108 call dom(124106 'expand_tuple' ranges)))
  }
  function #[124119](arg dom[124116] :
  _domain, arg counts[124122] :
  integral) : _unknown[43]
  {
    (124145 return(124144 call chpl_countDomHelp dom(124142 call _build_tuple counts)))
  }
  where {
    (124136 call &&(124128 call isRectangularDom dom)(124134 call ==(124130 call . dom c"rank") 1))
  }
  function #[124157](arg dom[124154] :
  _domain, arg counts[124159]:_any[170](?)) : _unknown[43]
  {
    if(124201 call _cond_test(124179 call !=(124172 call . counts c"size")(124176 call . dom c"rank")))
    {
      (124199 call compilerError "the domain and tuple arguments of # must have the same rank")
    }
    (124212 return(124211 call chpl_countDomHelp dom counts))
  }
  where {
    (124169 call &&(124164 call isRectangularDom dom)(124168 call isTuple counts))
  }
  function #[124225](arg arr[124222] :
  (124219 call chpl__buildArrayRuntimeType nil[38]), arg counts[124228] :
  integral) : _unknown[43] "fn returns aliasing array"
  {
    (124254 return(124253 call arr(124250 call #(124246 call . arr c"_dom") counts)))
  }
  where {
    (124242 call &&(124234 call isRectangularArr arr)(124240 call ==(124236 call . arr c"rank") 1))
  }
  function #[124268](arg arr[124265] :
  (124262 call chpl__buildArrayRuntimeType nil[38]), arg counts[124270]:_any[170](?)) : _unknown[43] "fn returns aliasing array"
  {
    if(124312 call _cond_test(124290 call !=(124283 call . counts c"size")(124287 call . arr c"rank")))
    {
      (124310 call compilerError "the domain and array arguments of # must have the same rank")
    }
    (124328 return(124327 call arr(124324 call #(124320 call . arr c"_dom") counts)))
  }
  where {
    (124280 call &&(124275 call isRectangularArr arr)(124279 call isTuple counts))
  }
  function +[124339](arg d[124336] :
  _domain, arg i[124345] :
  (124343 call chpl__buildIndexType d)) : _unknown[43] "no return value for void"
  {
    if(124392 call _cond_test(124351 call isRectangularDom d))
    {
      (124370 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124390 call compilerError "Cannot add indices to this domain type")
    }
  }
  function +[124405](arg i[124403]:_any[170](?), arg d[124408] :
  _domain) : _unknown[43] "no return value for void"
  {
    if(124434 call _cond_test(124423 call isRectangularDom d))
    {
      (124427 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124432 call compilerError "Cannot add indices to this domain type")
    }
  }
  where {
    (328553 'is_subtype'(124417 call chpl__buildIndexType d)(124413 'typeof' i))
  }
  function +[124450](arg d[124447] :
  _domain, arg i[124456] :
  (124454 call chpl__buildIndexType d)) : _unknown[43]
  {
    (124469 call(124464 call . d c"add") i)
    (124473 return d)
  }
  where {
    (124462 call isIrregularDom d)
  }
  function +[124482](arg i[124480]:_any[170](?), arg d[124485] :
  _domain) : _unknown[43]
  {
    (124509 call(124504 call . d c"add") i)
    (124513 return d)
  }
  where {
    (124501 call &&(328554 'is_subtype'(124494 call chpl__buildIndexType d)(124490 'typeof' i))(124500 call isIrregularDom d))
  }
  function +[124524](arg d1[124521] :
  _domain, arg d2[124527] :
  _domain) : _unknown[43]
  {
    unknown d3[124550](124549 'typeof' d1)
    {
      unknown _indexOfInterest[124564] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124565] "expr temp" "temp"
      (124574 'move' _iterator[124565](124572 call _getIterator d1))
      Defer
      {
        {
          (124590 call _freeIterator _iterator[124565])
        }
      }
      { scopeless type
        (124579 'move' _indexOfInterest[124564](124576 call iteratorIndex _iterator[124565]))
      }
      ForLoop
      {
        unknown e[124583] "index var" "insert auto destroy"
        (124585 'move' e[124583] _indexOfInterest[124564])
        (124562 call(124557 call . d3 c"add") e)
        label _continueLabel[124569]
        _indexOfInterest[124564]
        _iterator[124565]
      }
      label _breakLabel[124570]
    }
    {
      unknown _indexOfInterest[124607] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124608] "expr temp" "temp"
      (124617 'move' _iterator[124608](124615 call _getIterator d2))
      Defer
      {
        {
          (124633 call _freeIterator _iterator[124608])
        }
      }
      { scopeless type
        (124622 'move' _indexOfInterest[124607](124619 call iteratorIndex _iterator[124608]))
      }
      ForLoop
      {
        unknown e[124626] "index var" "insert auto destroy"
        (124628 'move' e[124626] _indexOfInterest[124607])
        (124605 call(124600 call . d3 c"add") e)
        label _continueLabel[124612]
        _indexOfInterest[124607]
        _iterator[124608]
      }
      label _breakLabel[124613]
    }
    (124641 return d3)
  }
  where {
    (124546 call &&(124534 call ==(124531 'typeof' d1)(124533 'typeof' d2))(124544 call &&(124539 call isIrregularDom d1)(124543 call isIrregularDom d2)))
  }
  function +[124652](arg d1[124649] :
  _domain, arg d2[124655] :
  _domain) : _unknown[43] "no return value for void"
  {
    if(124678 call _cond_test(124666 call ||(124661 call isRectangularDom d1)(124665 call isRectangularDom d2)))
    {
      (124671 call compilerError "Cannot add indices to a rectangular domain")
    }
    {
      (124676 call compilerError "Cannot add indices to this domain type")
    }
  }
  function -[124693](arg d[124690] :
  _domain, arg i[124699] :
  (124697 call chpl__buildIndexType d)) : _unknown[43] "no return value for void"
  {
    if(124746 call _cond_test(124705 call isRectangularDom d))
    {
      (124724 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (124744 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function -[124761](arg d[124758] :
  _domain, arg i[124767] :
  (124765 call chpl__buildIndexType d)) : _unknown[43]
  {
    (124780 call(124775 call . d c"remove") i)
    (124784 return d)
  }
  where {
    (124773 call isIrregularDom d)
  }
  function -[124795](arg d1[124792] :
  _domain, arg d2[124798] :
  _domain) : _unknown[43]
  {
    unknown d3[124821](124820 'typeof' d1)
    {
      unknown _indexOfInterest[124835] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124836] "expr temp" "temp"
      (124845 'move' _iterator[124836](124843 call _getIterator d1))
      Defer
      {
        {
          (124861 call _freeIterator _iterator[124836])
        }
      }
      { scopeless type
        (124850 'move' _indexOfInterest[124835](124847 call iteratorIndex _iterator[124836]))
      }
      ForLoop
      {
        unknown e[124854] "index var" "insert auto destroy"
        (124856 'move' e[124854] _indexOfInterest[124835])
        (124833 call(124828 call . d3 c"add") e)
        label _continueLabel[124840]
        _indexOfInterest[124835]
        _iterator[124836]
      }
      label _breakLabel[124841]
    }
    {
      unknown _indexOfInterest[124878] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[124879] "expr temp" "temp"
      (124888 'move' _iterator[124879](124886 call _getIterator d2))
      Defer
      {
        {
          (124904 call _freeIterator _iterator[124879])
        }
      }
      { scopeless type
        (124893 'move' _indexOfInterest[124878](124890 call iteratorIndex _iterator[124879]))
      }
      ForLoop
      {
        unknown e[124897] "index var" "insert auto destroy"
        (124899 'move' e[124897] _indexOfInterest[124878])
        (124876 call(124871 call . d3 c"remove") e)
        label _continueLabel[124883]
        _indexOfInterest[124878]
        _iterator[124879]
      }
      label _breakLabel[124884]
    }
    (124912 return d3)
  }
  where {
    (124817 call &&(124805 call ==(124802 'typeof' d1)(124804 'typeof' d2))(124815 call ||(124810 call isSparseDom d1)(124814 call isOpaqueDom d1)))
  }
  function -[124923](arg d1[124920] :
  _domain, arg d2[124926] :
  _domain) : _unknown[43] "no return value for void"
  {
    if(124949 call _cond_test(124937 call ||(124932 call isRectangularDom d1)(124936 call isRectangularDom d2)))
    {
      (124942 call compilerError "Cannot remove indices from a rectangular domain")
    }
    {
      (124947 call compilerError "Cannot remove indices from this domain type")
    }
  }
  function ==[124964](arg d1[124961] :
  _domain, arg d2[124967] :
  _domain) : _unknown[43] "inline"
  {
    if(125096 call _cond_test(124994 call !=(124984 call .(124981 call . d1 c"_value") c"rank")(124991 call .(124988 call . d2 c"_value") c"rank")))
    {
      (124997 return 0)
    }
    {
      if(125092 call _cond_test(125008 call ==(125001 call . d1 c"_value")(125005 call . d2 c"_value")))
      {
        (125011 return 1)
      }
      {
        {
          unknown i[125048] 0
          unknown tmp[125049] "maybe param" "temp"
          (125061 'move' tmp[125049](125059 call chpl_compute_low_param_loop_bound 1(125019 call .(125016 call . d1 c"_value") c"rank")))
          unknown tmp[125050] "maybe param" "temp"
          (125074 'move' tmp[125050](125072 call chpl_compute_high_param_loop_bound 1(125066 call .(125068 call . d1 c"_value") c"rank")))
          unknown tmp[125051] "maybe param" "temp"
          (125077 'move' tmp[125051] 1)
          ParamForLoop
          { i[125048] tmp[125049] tmp[125050] tmp[125051]
            if(125043 call _cond_test(125038 call !=(125030 call(125025 call . d1 c"dim") i)(125037 call(125032 call . d2 c"dim") i)))
            {
              (125041 return 0)
            }
          }
          label _unused_continueLabel[125053]
          label _breakLabel[125052]
        }
        (125090 return 1)
      }
    }
  }
  where {
    (124978 call &&(124973 call isRectangularDom d1)(124977 call isRectangularDom d2))
  }
  function !=[125111](arg d1[125108] :
  _domain, arg d2[125114] :
  _domain) : _unknown[43] "inline"
  {
    if(125243 call _cond_test(125141 call !=(125131 call .(125128 call . d1 c"_value") c"rank")(125138 call .(125135 call . d2 c"_value") c"rank")))
    {
      (125144 return 1)
    }
    {
      if(125239 call _cond_test(125155 call ==(125148 call . d1 c"_value")(125152 call . d2 c"_value")))
      {
        (125158 return 0)
      }
      {
        {
          unknown i[125195] 0
          unknown tmp[125196] "maybe param" "temp"
          (125208 'move' tmp[125196](125206 call chpl_compute_low_param_loop_bound 1(125166 call .(125163 call . d1 c"_value") c"rank")))
          unknown tmp[125197] "maybe param" "temp"
          (125221 'move' tmp[125197](125219 call chpl_compute_high_param_loop_bound 1(125213 call .(125215 call . d1 c"_value") c"rank")))
          unknown tmp[125198] "maybe param" "temp"
          (125224 'move' tmp[125198] 1)
          ParamForLoop
          { i[125195] tmp[125196] tmp[125197] tmp[125198]
            if(125190 call _cond_test(125185 call !=(125177 call(125172 call . d1 c"dim") i)(125184 call(125179 call . d2 c"dim") i)))
            {
              (125188 return 1)
            }
          }
          label _unused_continueLabel[125200]
          label _breakLabel[125199]
        }
        (125237 return 0)
      }
    }
  }
  where {
    (125125 call &&(125120 call isRectangularDom d1)(125124 call isRectangularDom d2))
  }
  function ==[125258](arg d1[125255] :
  _domain, arg d2[125261] :
  _domain) : _unknown[43] "inline"
  {
    if(125287 call _cond_test(125282 call ==(125275 call . d1 c"_value")(125279 call . d2 c"_value")))
    {
      (125285 return 1)
    }
    if(125306 call _cond_test(125301 call !=(125294 call . d1 c"numIndices")(125298 call . d2 c"numIndices")))
    {
      (125304 return 0)
    }
    {
      unknown _indexOfInterest[125330] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125331] "expr temp" "temp"
      (125340 'move' _iterator[125331](125338 call _getIterator d1))
      Defer
      {
        {
          (125356 call _freeIterator _iterator[125331])
        }
      }
      { scopeless type
        (125345 'move' _indexOfInterest[125330](125342 call iteratorIndex _iterator[125331]))
      }
      ForLoop
      {
        unknown idx[125349] "index var" "insert auto destroy"
        (125351 'move' idx[125349] _indexOfInterest[125330])
        if(125325 call _cond_test(125320 call !(125319 call(125314 call . d2 c"contains") idx)))
        {
          (125323 return 0)
        }
        label _continueLabel[125335]
        _indexOfInterest[125330]
        _iterator[125331]
      }
      label _breakLabel[125336]
    }
    (125364 return 1)
  }
  where {
    (125272 call &&(125267 call isAssociativeDom d1)(125271 call isAssociativeDom d2))
  }
  function !=[125375](arg d1[125372] :
  _domain, arg d2[125378] :
  _domain) : _unknown[43] "inline"
  {
    if(125404 call _cond_test(125399 call ==(125392 call . d1 c"_value")(125396 call . d2 c"_value")))
    {
      (125402 return 0)
    }
    if(125423 call _cond_test(125418 call !=(125411 call . d1 c"numIndices")(125415 call . d2 c"numIndices")))
    {
      (125421 return 1)
    }
    {
      unknown _indexOfInterest[125447] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125448] "expr temp" "temp"
      (125457 'move' _iterator[125448](125455 call _getIterator d1))
      Defer
      {
        {
          (125473 call _freeIterator _iterator[125448])
        }
      }
      { scopeless type
        (125462 'move' _indexOfInterest[125447](125459 call iteratorIndex _iterator[125448]))
      }
      ForLoop
      {
        unknown idx[125466] "index var" "insert auto destroy"
        (125468 'move' idx[125466] _indexOfInterest[125447])
        if(125442 call _cond_test(125437 call !(125436 call(125431 call . d2 c"contains") idx)))
        {
          (125440 return 1)
        }
        label _continueLabel[125452]
        _indexOfInterest[125447]
        _iterator[125448]
      }
      label _breakLabel[125453]
    }
    (125481 return 0)
  }
  where {
    (125389 call &&(125384 call isAssociativeDom d1)(125388 call isAssociativeDom d2))
  }
  function ==[125492](arg d1[125489] :
  _domain, arg d2[125495] :
  _domain) : _unknown[43] "inline"
  {
    if(125521 call _cond_test(125516 call ==(125509 call . d1 c"_value")(125513 call . d2 c"_value")))
    {
      (125519 return 1)
    }
    if(125540 call _cond_test(125535 call !=(125528 call . d1 c"numIndices")(125532 call . d2 c"numIndices")))
    {
      (125538 return 0)
    }
    if(125564 call _cond_test(125559 call !=(125549 call .(125546 call . d1 c"_value") c"parentDom")(125556 call .(125553 call . d2 c"_value") c"parentDom")))
    {
      (125562 return 0)
    }
    {
      unknown _indexOfInterest[125588] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125589] "expr temp" "temp"
      (125598 'move' _iterator[125589](125596 call _getIterator d1))
      Defer
      {
        {
          (125614 call _freeIterator _iterator[125589])
        }
      }
      { scopeless type
        (125603 'move' _indexOfInterest[125588](125600 call iteratorIndex _iterator[125589]))
      }
      ForLoop
      {
        unknown idx[125607] "index var" "insert auto destroy"
        (125609 'move' idx[125607] _indexOfInterest[125588])
        if(125583 call _cond_test(125578 call !(125577 call(125572 call . d2 c"contains") idx)))
        {
          (125581 return 0)
        }
        label _continueLabel[125593]
        _indexOfInterest[125588]
        _iterator[125589]
      }
      label _breakLabel[125594]
    }
    (125622 return 1)
  }
  where {
    (125506 call &&(125501 call isSparseDom d1)(125505 call isSparseDom d2))
  }
  function !=[125633](arg d1[125630] :
  _domain, arg d2[125636] :
  _domain) : _unknown[43] "inline"
  {
    if(125662 call _cond_test(125657 call ==(125650 call . d1 c"_value")(125654 call . d2 c"_value")))
    {
      (125660 return 0)
    }
    if(125681 call _cond_test(125676 call !=(125669 call . d1 c"numIndices")(125673 call . d2 c"numIndices")))
    {
      (125679 return 1)
    }
    if(125705 call _cond_test(125700 call !=(125690 call .(125687 call . d1 c"_value") c"parentDom")(125697 call .(125694 call . d2 c"_value") c"parentDom")))
    {
      (125703 return 1)
    }
    {
      unknown _indexOfInterest[125729] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[125730] "expr temp" "temp"
      (125739 'move' _iterator[125730](125737 call _getIterator d1))
      Defer
      {
        {
          (125755 call _freeIterator _iterator[125730])
        }
      }
      { scopeless type
        (125744 'move' _indexOfInterest[125729](125741 call iteratorIndex _iterator[125730]))
      }
      ForLoop
      {
        unknown idx[125748] "index var" "insert auto destroy"
        (125750 'move' idx[125748] _indexOfInterest[125729])
        if(125724 call _cond_test(125719 call !(125718 call(125713 call . d2 c"contains") idx)))
        {
          (125722 return 1)
        }
        label _continueLabel[125734]
        _indexOfInterest[125729]
        _iterator[125730]
      }
      label _breakLabel[125735]
    }
    (125763 return 0)
  }
  where {
    (125647 call &&(125642 call isSparseDom d1)(125646 call isSparseDom d2))
  }
  function ==[125774](arg d1[125771] :
  _domain, arg d2[125777] :
  _domain) param : _unknown[43] "inline"
  {
    (125781 return 0)
  }
  function !=[125792](arg d1[125789] :
  _domain, arg d2[125795] :
  _domain) param : _unknown[43] "inline"
  {
    (125799 return 1)
  }
  function shouldReturnRvalueByConstRef[125808](arg t[125806]:_any[170](?)) param : _unknown[43] "no doc"
  {
    (125811 return 1)
  }
  function shouldReturnRvalueByValue[125820](arg t[125818]:_any[170](?)) param : _unknown[43] "no doc"
  {
    if(125828 call _cond_test(125823 call ! PODValAccess))
    {
      (125826 return 0)
    }
    if(125841 call _cond_test(125837 call isPODType t))
    {
      (125839 return 1)
    }
    (125847 return 0)
  }
  function _array[133150](?).chpl__serialize[125865](arg _mt[133154]:_MT[227], arg this[133152]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    (125881 return(125880 call(125876 call . _instance c"chpl__serialize")))
  }
  where {
    (125874 call(125870 call . _instance c"chpl__rvfMe"))
  }
  function _array[133150](?).chpl__deserialize[125891](arg _mt[133158]:_MT[227], arg this[133156]:_array[133150](?), arg data[125889]:_any[170](?)) : _unknown[43] "method" "primary method" "no copy return" "no doc"
  {
    unknown arrinst[125907](125906 call(125901 call .(125900 call _to_borrowed(125898 'static field type' this "_instance")) c"chpl__deserialize") data)
    (125919 return(125918 'new'(125917 call _array nullPid arrinst(_unowned = 1))))
  }
  function _array[133150](?).chpl__promotionType[125925](arg _mt[133162]:_MT[227], arg this[133160]:_array[133150](?)) type : _unknown[43] "method" "primary method"
  {
    (125931 return(125928 call . _value c"eltType"))
  }
  function _array[133150](?)._value[125938](arg _mt[133166]:_MT[227], arg this[133164]:_array[133150](?)) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no parens"
  {
    if(125957 call _cond_test(125943 call _isPrivatized _instance))
    {
      (125950 return(125949 call chpl_getPrivatizedCopy(125946 'typeof' _instance) _pid))
    }
    {
      (125954 return _instance)
    }
  }
  function _array[133150](?).chpl_forwarding_expr5__value[125971](arg _mt[133170]:_MT[227], arg this[133168]:_array[133150](?)) : _unknown[43] "compiler generated" "inline" "maybe ref" "method" "primary method" "reference to const when const this"
  {
    (125973 return _value)
  }
  function _array[133150](?).deinit[125979](arg _mt[133174]:_MT[227], arg this[133172]:_array[133150](?)) : _unknown[43] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    (125985 call _do_destroy_arr _unowned _instance)
  }
  function _array[133150](?).eltType[125992](arg _mt[133178]:_MT[227], arg this[133176]:_array[133150](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (125998 return(125995 call . _value c"eltType"))
  }
  function _array[133150](?).idxType[126005](arg _mt[133182]:_MT[227], arg this[133180]:_array[133150](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (126011 return(126008 call . _value c"idxType"))
  }
  function _array[133150](?)._dom[126018](arg _mt[133186]:_MT[227], arg this[133184]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens" "return not owned"
  {
    (126027 return(126026 call _getDomain(126022 call . _value c"dom")))
  }
  function _array[133150](?).rank[126034](arg _mt[133190]:_MT[227], arg this[133188]:_array[133150](?)) param : _unknown[43] "method" "primary method" "no parens"
  {
    (126043 return(126040 call .(126037 call . this c"_dom") c"rank"))
  }
  function _array[133150](?).this[126063](arg _mt[133194]:_MT[227], ref arg this[133192]:_array[133150](?), arg i[126060] :
  (126058 call * rank(126055 call .(126052 call . _value c"dom") c"idxType"))) ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    if(126096 call _cond_test(126073 call ||(126068 call isRectangularArr this)(126072 call isSparseArr this)))
    {
      (126082 return(126081 call(126076 call . _value c"dsiAccess") i))
    }
    {
      (126094 return(126093 call(126085 call . _value c"dsiAccess")(126091 call i 1)))
    }
  }
  function _array[133150](?).this[126120](arg _mt[133198]:_MT[227], const arg this[133196]:_array[133150](?), arg i[126117] :
  (126115 call * rank(126112 call .(126109 call . _value c"dom") c"idxType"))) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    if(126160 call _cond_test(126137 call ||(126132 call isRectangularArr this)(126136 call isSparseArr this)))
    {
      (126146 return(126145 call(126140 call . _value c"dsiAccess") i))
    }
    {
      (126158 return(126157 call(126149 call . _value c"dsiAccess")(126155 call i 1)))
    }
  }
  where {
    (126128 call shouldReturnRvalueByValue(126124 call . _value c"eltType"))
  }
  function _array[133150](?).this[126185](arg _mt[133202]:_MT[227], const arg this[133200]:_array[133150](?), arg i[126182] :
  (126180 call * rank(126177 call .(126174 call . _value c"dom") c"idxType"))) const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    if(126225 call _cond_test(126202 call ||(126197 call isRectangularArr this)(126201 call isSparseArr this)))
    {
      (126211 return(126210 call(126205 call . _value c"dsiAccess") i))
    }
    {
      (126223 return(126222 call(126214 call . _value c"dsiAccess")(126220 call i 1)))
    }
  }
  where {
    (126193 call shouldReturnRvalueByConstRef(126189 call . _value c"eltType"))
  }
  function _array[133150](?).this[126249](arg _mt[133206]:_MT[227], ref arg this[133204]:_array[133150](?), arg i[126245] ... :
  (126241 call .(126238 call . _value c"dom") c"idxType")) ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this" "removable array access"
  {
    (126255 return(126254 call this i))
  }
  function _array[133150](?).this[126274](arg _mt[133210]:_MT[227], const arg this[133208]:_array[133150](?), arg i[126270] ... :
  (126266 call .(126263 call . _value c"dom") c"idxType")) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (126287 return(126286 call this i))
  }
  where {
    (126282 call shouldReturnRvalueByValue(126278 call . _value c"eltType"))
  }
  function _array[133150](?).this[126307](arg _mt[133214]:_MT[227], const arg this[133212]:_array[133150](?), arg i[126303] ... :
  (126299 call .(126296 call . _value c"dom") c"idxType")) const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (126320 return(126319 call this i))
  }
  where {
    (126315 call shouldReturnRvalueByConstRef(126311 call . _value c"eltType"))
  }
  function _array[133150](?).localAccess[126341](arg _mt[133218]:_MT[227], ref arg this[133216]:_array[133150](?), arg i[126338] :
  (126336 call * rank(126333 call .(126330 call . _value c"dom") c"idxType"))) ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    if(126376 call _cond_test(126351 call ||(126346 call isRectangularArr this)(126350 call isSparseArr this)))
    {
      (126362 return(126361 call(126356 call . _value c"dsiLocalAccess") i))
    }
    {
      (126374 return(126373 call(126365 call . _value c"dsiLocalAccess")(126371 call i 1)))
    }
  }
  function _array[133150](?).localAccess[126400](arg _mt[133222]:_MT[227], const arg this[133220]:_array[133150](?), arg i[126397] :
  (126395 call * rank(126392 call .(126389 call . _value c"dom") c"idxType"))) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    if(126440 call _cond_test(126417 call ||(126412 call isRectangularArr this)(126416 call isSparseArr this)))
    {
      (126426 return(126425 call(126420 call . _value c"dsiLocalAccess") i))
    }
    {
      (126438 return(126437 call(126429 call . _value c"dsiLocalAccess")(126435 call i 1)))
    }
  }
  where {
    (126408 call shouldReturnRvalueByValue(126404 call . _value c"eltType"))
  }
  function _array[133150](?).localAccess[126465](arg _mt[133226]:_MT[227], const arg this[133224]:_array[133150](?), arg i[126462] :
  (126460 call * rank(126457 call .(126454 call . _value c"dom") c"idxType"))) const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    if(126505 call _cond_test(126482 call ||(126477 call isRectangularArr this)(126481 call isSparseArr this)))
    {
      (126491 return(126490 call(126485 call . _value c"dsiLocalAccess") i))
    }
    {
      (126503 return(126502 call(126494 call . _value c"dsiLocalAccess")(126500 call i 1)))
    }
  }
  where {
    (126473 call shouldReturnRvalueByConstRef(126469 call . _value c"eltType"))
  }
  function _array[133150](?).localAccess[126529](arg _mt[133230]:_MT[227], arg this[133228]:_array[133150](?), arg i[126525] ... :
  (126521 call .(126518 call . _value c"dom") c"idxType")) ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc" "reference to const when const this"
  {
    (126535 return(126534 call localAccess i))
  }
  function _array[133150](?).localAccess[126554](arg _mt[133234]:_MT[227], arg this[133232]:_array[133150](?), arg i[126550] ... :
  (126546 call .(126543 call . _value c"dom") c"idxType")) : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (126567 return(126566 call localAccess i))
  }
  where {
    (126562 call shouldReturnRvalueByValue(126558 call . _value c"eltType"))
  }
  function _array[133150](?).localAccess[126587](arg _mt[133238]:_MT[227], arg this[133236]:_array[133150](?), arg i[126583] ... :
  (126579 call .(126576 call . _value c"dom") c"idxType")) const ref : _unknown[43] "alias scope from this" "inline" "method" "primary method" "no doc"
  {
    (126600 return(126599 call localAccess i))
  }
  where {
    (126595 call shouldReturnRvalueByConstRef(126591 call . _value c"eltType"))
  }
  function _array[133150](?).this[126612](arg _mt[133242]:_MT[227], arg this[133240]:_array[133150](?), arg d[126609] :
  _domain) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(126641 call _cond_test(126619 call !=(126615 call . d c"rank") rank))
    {
      (126639 call compilerError "slicing an array with a domain of a different rank")
    }
    if(126653 call _cond_test boundsChecking)
    {
      (126651 call checkSlice d)
    }
    const tmp[126702] "const" "no auto destroy" "no copy" "temp"(126699 IfExpr (126668 call(126664 call . _value c"isSliceArrayView")) then
    { scopeless
      (126686 call _build_tuple(126673 call .(126670 call . this c"_value") c"arr")(126682 call .(126677 call . this c"_value") c"_ArrPid"))
    } else
    { scopeless
      (126697 call _build_tuple(126689 call . this c"_value")(126693 call . this c"_pid"))
    } )
    (126709 call _check_tuple_var_decl tmp[126702] 2)
    const arr[126658] "const"(126703 call tmp[126702] 1)
    const arrpid[126660] "const"(126706 call tmp[126702] 2)
    unknown a[126738](126737 'new'(126736 'to unmanaged class from unknown'(126735 call ArrayViewSliceArr(eltType =(126716 call . this c"eltType"))(_DomPid =(126722 call . d c"_pid"))(dom =(126727 call . d c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr))))
    (126754 call(126745 call .(126742 call . d c"_value") c"add_arr") a(locking = 1)(addToList = 0))
    (126760 return(126759 call _newArray a))
  }
  function _array[133150](?).checkSlice[126770](arg _mt[133246]:_MT[227], arg this[133244]:_array[133150](?), arg d[126767] :
  _domain) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[126857] 0
      unknown tmp[126858] "maybe param" "temp"
      (126870 'move' tmp[126858](126868 call chpl_compute_low_param_loop_bound 1(126777 call .(126774 call . _value c"dom") c"rank")))
      unknown tmp[126859] "maybe param" "temp"
      (126883 'move' tmp[126859](126881 call chpl_compute_high_param_loop_bound 1(126875 call .(126877 call . _value c"dom") c"rank")))
      unknown tmp[126860] "maybe param" "temp"
      (126886 'move' tmp[126860] 1)
      ParamForLoop
      { i[126857] tmp[126858] tmp[126859] tmp[126860]
        if(126852 call _cond_test(126806 call !(126805 call(126794 call .(126791 call(126786 call .(126783 call . _value c"dom") c"dsiDim") i) c"boundsCheck")(126803 call(126798 call . d c"dsiDim") i))))
        {
          (126850 call halt "array slice out of bounds in dimension " i ": "(126849 call(126844 call . d c"dsiDim") i))
        }
      }
      label _unused_continueLabel[126862]
      label _breakLabel[126861]
    }
  }
  function _array[133150](?).checkSlice[126906](arg _mt[133250]:_MT[227], arg this[133248]:_array[133150](?), arg ranges[126903]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[126959] 0
      unknown tmp[126960] "maybe param" "temp"
      (126972 'move' tmp[126960](126970 call chpl_compute_low_param_loop_bound 1(126917 call .(126914 call . _value c"dom") c"rank")))
      unknown tmp[126961] "maybe param" "temp"
      (126985 'move' tmp[126961](126983 call chpl_compute_high_param_loop_bound 1(126977 call .(126979 call . _value c"dom") c"rank")))
      unknown tmp[126962] "maybe param" "temp"
      (126988 'move' tmp[126962] 1)
      ParamForLoop
      { i[126959] tmp[126960] tmp[126961] tmp[126962]
        if(126954 call _cond_test(126941 call !(126940 call(126932 call .(126931 call(126926 call .(126923 call . _value c"dom") c"dsiDim") i) c"boundsCheck")(126938 call ranges i))))
        {
          (126952 call halt "array slice out of bounds in dimension " i ": "(126951 call ranges i))
        }
      }
      label _unused_continueLabel[126964]
      label _breakLabel[126963]
    }
  }
  where {
    (126911 call chpl__isTupleOfRanges ranges)
  }
  function _array[133150](?).this[127009](arg _mt[133254]:_MT[227], arg this[133252]:_array[133150](?), arg ranges[127006]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127022 call _cond_test boundsChecking)
    {
      (127020 call checkSlice(127018 'expand_tuple' ranges))
    }
    unknown d[127033] "no auto destroy"(127032 call _dom(127030 'expand_tuple' ranges))
    (127046 call =(127042 call .(127037 call . d c"_value") c"_free_when_no_arrs") 1)
    const tmp[127091] "const" "no auto destroy" "no copy" "temp"(127088 IfExpr (127059 call(127055 call . _value c"isSliceArrayView")) then
    { scopeless
      (127075 call _build_tuple(127064 call .(127061 call . this c"_value") c"arr")(127071 call .(127068 call . this c"_value") c"_ArrPid"))
    } else
    { scopeless
      (127086 call _build_tuple(127078 call . this c"_value")(127082 call . this c"_pid"))
    } )
    (127098 call _check_tuple_var_decl tmp[127091] 2)
    const arr[127049] "const"(127092 call tmp[127091] 1)
    const arrpid[127051] "const"(127095 call tmp[127091] 2)
    unknown a[127127](127126 'new'(127125 'to unmanaged class from unknown'(127124 call ArrayViewSliceArr(eltType =(127105 call . this c"eltType"))(_DomPid =(127111 call . d c"_pid"))(dom =(127116 call . d c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr))))
    (127143 call(127134 call .(127131 call . d c"_value") c"add_arr") a(locking = 0)(addToList = 0))
    (127149 return(127148 call _newArray a))
  }
  where {
    (127014 call chpl__isTupleOfRanges ranges)
  }
  function _array[133150](?).this[127160](arg _mt[133258]:_MT[227], arg this[133256]:_array[133150](?), arg args[127157]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127179 call _cond_test boundsChecking)
    {
      (127177 call checkRankChange args)
    }
    const rcdom[127193] "const"(127192 call(127186 call . this c"_dom")(127190 'expand_tuple' args))
    const tmp[127212] "const" "no copy" "temp"(127210 call _build_tuple(127202 call . this c"_value")(127206 call . this c"_pid"))
    (127219 call _check_tuple_var_decl tmp[127212] 2)
    const arr[127196] "const"(127213 call tmp[127212] 1)
    const arrpid[127198] "const"(127216 call tmp[127212] 2)
    unknown a[127264](127263 'new'(127262 'to unmanaged class from unknown'(127261 call ArrayViewRankChangeArr(eltType =(127226 call . this c"eltType"))(_DomPid =(127232 call . rcdom c"_pid"))(dom =(127237 call . rcdom c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr)(collapsedDim =(127249 call .(127246 call . rcdom c"_value") c"collapsedDim"))(idx =(127257 call .(127254 call . rcdom c"_value") c"idx")))))
    (127278 call(127271 call .(127268 call . rcdom c"_value") c"add_arr") a(locking = 0))
    (127284 return(127283 call _newArray a))
  }
  where {
    (127172 call _validRankChangeArgs args(127169 call .(127166 call . _value c"dom") c"idxType"))
  }
  function _array[133150](?).checkRankChange[127293](arg _mt[133262]:_MT[227], arg this[133260]:_array[133150](?), arg args[127291]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown i[127339] 0
      unknown tmp[127340] "maybe param" "temp"
      (127352 'move' tmp[127340](127350 call chpl_compute_low_param_loop_bound 1(127297 call . args c"size")))
      unknown tmp[127341] "maybe param" "temp"
      (127362 'move' tmp[127341](127360 call chpl_compute_high_param_loop_bound 1(127357 call . args c"size")))
      unknown tmp[127342] "maybe param" "temp"
      (127365 'move' tmp[127342] 1)
      ParamForLoop
      { i[127339] tmp[127340] tmp[127341] tmp[127342]
        if(127334 call _cond_test(127321 call !(127320 call(127312 call .(127311 call(127306 call .(127303 call . _value c"dom") c"dsiDim") i) c"boundsCheck")(127318 call args i))))
        {
          (127332 call halt "array slice out of bounds in dimension " i ": "(127331 call args i))
        }
      }
      label _unused_continueLabel[127344]
      label _breakLabel[127343]
    }
  }
  function _array[133150](?).localSlice[127385](arg _mt[133266]:_MT[227], arg this[133264]:_array[133150](?), arg r[127382]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127406 call _cond_test boundsChecking)
    {
      (127404 call checkSlice(127402 'expand_tuple' r))
    }
    unknown dom[127417](127416 call _dom(127414 'expand_tuple' r))
    (127424 return(127423 call chpl__localSliceDefaultArithArrHelp dom))
  }
  where {
    (127397 call &&(328555 'is_subtype' DefaultRectangularArr(127389 'typeof' _value))(127396 call chpl__isTupleOfRanges r))
  }
  function _array[133150](?).localSlice[127435](arg _mt[133270]:_MT[227], arg this[133268]:_array[133150](?), arg d[127432] :
  _domain) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127455 call _cond_test boundsChecking)
    {
      (127453 call checkSlice(127451 'expand_tuple'(127450 call(127446 call . d c"getIndices"))))
    }
    (127465 return(127464 call chpl__localSliceDefaultArithArrHelp d))
  }
  where {
    (328556 'is_subtype' DefaultRectangularArr(127439 'typeof' _value))
  }
  function _array[133150](?).chpl__localSliceDefaultArithArrHelp[127476](arg _mt[133274]:_MT[227], arg this[133272]:_array[133150](?), arg d[127473] :
  _domain) : _unknown[43] "method" "primary method" "no copy return"
  {
    if(127515 call _cond_test(127483 call !=(127480 call chpl_localeID_to_locale(127479 '_wide_get_locale' _value)) here))
    {
      (127513 call halt "Attempting to take a local slice of an array on locale "(127507 '_wide_get_node' _value) " from locale "(127510 call . here c"id"))
    }
    (127525 return(127524 call this d))
  }
  function _array[133150](?).localSlice[127535](arg _mt[133278]:_MT[227], arg this[133276]:_array[133150](?), arg r[127532]:_any[170](?) ...) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    if(127558 call _cond_test boundsChecking)
    {
      (127556 call checkSlice(127554 'expand_tuple' r))
    }
    (127571 return(127570 call(127565 call . _value c"dsiLocalSlice") r))
  }
  where {
    (127549 call &&(127540 call chpl__isTupleOfRanges r)(127547 call !(328557 'is_subtype' DefaultRectangularArr(127543 'typeof' _value))))
  }
  function _array[133150](?).localSlice[127582](arg _mt[133282]:_MT[227], arg this[133280]:_array[133150](?), arg d[127579] :
  _domain) : _unknown[43] "method" "primary method" "no doc" "reference to const when const this" "fn returns aliasing array"
  {
    (127594 return(127593 call localSlice(127591 'expand_tuple'(127590 call(127586 call . d c"getIndices")))))
  }
  function _array[133150](?).these[127601](arg _mt[133286]:_MT[227], arg this[133284]:_array[133150](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[127614] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127615] "expr temp" "temp"
      (127624 'move' _iterator[127615](127622 call _getIterator(127609 call(127605 call . _value c"these"))))
      Defer
      {
        {
          (127641 call _freeIterator _iterator[127615])
        }
      }
      { scopeless type
        (127630 'move' _indexOfInterest[127614](127627 call iteratorIndex _iterator[127615]))
      }
      ForLoop
      {
        unknown i[127634] "index var" "insert auto destroy"
        (127636 'move' i[127634] _indexOfInterest[127614])
        {
          (127611 yield i)
        }
        label _continueLabel[127619]
        _indexOfInterest[127614]
        _iterator[127615]
      }
      label _breakLabel[127620]
    }
  }
  function _array[133150](?).these[127657](arg _mt[133290]:_MT[227], arg this[133288]:_array[133150](?), param arg tag[127654] :
  iterKind) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    {
      unknown _indexOfInterest[127686] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127687] "expr temp" "temp"
      (127696 'move' _iterator[127687](127694 call _getIterator(127682 call(127677 call . _value c"these") tag)))
      Defer
      {
        {
          (127713 call _freeIterator _iterator[127687])
        }
      }
      { scopeless type
        (127702 'move' _indexOfInterest[127686](127699 call iteratorIndex _iterator[127687]))
      }
      ForLoop
      {
        unknown i[127706] "index var" "insert auto destroy"
        (127708 'move' i[127706] _indexOfInterest[127686])
        (127684 yield i)
        label _continueLabel[127691]
        _indexOfInterest[127686]
        _iterator[127687]
      }
      label _breakLabel[127692]
    }
  }
  where {
    (127673 call &&(127664 call == tag(127661 call . iterKind c"standalone"))(127672 'method call resolves' _value "these"(tag = tag)))
  }
  function _array[133150](?).these[127730](arg _mt[133294]:_MT[227], arg this[133292]:_array[133150](?), param arg tag[127727] :
  iterKind) : _unknown[43] "iterator fn" "method" "primary method" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[127750] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[127751] "expr temp" "temp"
      (127760 'move' _iterator[127751](127758 call _getIterator(127746 call(127741 call . _value c"these") tag)))
      Defer
      {
        {
          (127777 call _freeIterator _iterator[127751])
        }
      }
      { scopeless type
        (127766 'move' _indexOfInterest[127750](127763 call iteratorIndex _iterator[127751]))
      }
      ForLoop
      {
        unknown followThis[127770] "index var" "insert auto destroy"
        (127772 'move' followThis[127770] _indexOfInterest[127750])
        (127748 yield followThis)
        label _continueLabel[127755]
        _indexOfInterest[127750]
        _iterator[127751]
      }
      label _breakLabel[127756]
    }
  }
  where {
    (127737 call == tag(127734 call . iterKind c"leader"))
  }
  function _array[133150](?).these[127794](arg _mt[133298]:_MT[227], arg this[133296]:_array[133150](?), param arg tag[127791] :
  iterKind, arg followThis[127796]:_any[170](?), param arg fast[127800] :
  bool[10] =
  0) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc" "reference to const when const this" "no return value for void"
  {
    if(127918 call _cond_test(127820 'method call resolves' _value "these"(tag = tag) followThis(fast = fast)))
    {
      {
        unknown _indexOfInterest[127836] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[127837] "expr temp" "temp"
        (127846 'move' _iterator[127837](127844 call _getIterator(127832 call(127823 call . _value c"these")(tag = tag) followThis(fast = fast))))
        Defer
        {
          {
            (127863 call _freeIterator _iterator[127837])
          }
        }
        { scopeless type
          (127852 'move' _indexOfInterest[127836](127849 call iteratorIndex _iterator[127837]))
        }
        ForLoop
        {
          unknown i[127856] "index var" "insert auto destroy"
          (127858 'move' i[127856] _indexOfInterest[127836])
          (127834 yield i)
          label _continueLabel[127841]
          _indexOfInterest[127836]
          _iterator[127837]
        }
        label _breakLabel[127842]
      }
    }
    {
      {
        unknown _indexOfInterest[127883] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[127884] "expr temp" "temp"
        (127893 'move' _iterator[127884](127891 call _getIterator(127879 call(127873 call . _value c"these") tag followThis)))
        Defer
        {
          {
            (127910 call _freeIterator _iterator[127884])
          }
        }
        { scopeless type
          (127899 'move' _indexOfInterest[127883](127896 call iteratorIndex _iterator[127884]))
        }
        ForLoop
        {
          unknown i[127903] "index var" "insert auto destroy"
          (127905 'move' i[127903] _indexOfInterest[127883])
          (127881 yield i)
          label _continueLabel[127888]
          _indexOfInterest[127883]
          _iterator[127884]
        }
        label _breakLabel[127889]
      }
    }
  }
  where {
    (127809 call == tag(127806 call . iterKind c"follower"))
  }
  function _array[133150](?).numElements[127928](arg _mt[133302]:_MT[227], arg this[133300]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (127937 return(127934 call .(127931 call . _value c"dom") c"dsiNumIndices"))
  }
  function _array[133150](?).size[127944](arg _mt[133306]:_MT[227], arg this[133304]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (127947 return numElements)
  }
  function _array[133150](?).chpl_checkArrArgDoms[127958](arg _mt[133310]:_MT[227], arg this[133308]:_array[133150](?), arg formalDom[127955] :
  _domain, param arg runtimeChecks[127961] :
  bool[10]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    if(128038 call _cond_test(127975 call !=(127965 call . formalDom c"rank")(127972 call .(127969 call . this c"_dom") c"rank")))
    {
      (128036 call compilerError(128031 call +(128019 call +(128001 call + "Rank mismatch passing array argument: expected "(127999 call _cast string[24](127995 call . formalDom c"rank"))) " but got ")(128029 call _cast string[24](128025 call .(128022 call . this c"_dom") c"rank")))(errorDepth = 2))
    }
    if(128178 call _cond_test(128054 call !=(128051 'typeof'(128048 call .(128045 call . formalDom c"dist") c"_value"))(128053 'to unmanaged class from unknown' DefaultDist)))
    {
      if(128087 call _cond_test(128063 call !=(128057 'typeof' formalDom)(128062 'typeof'(128059 call . this c"_dom"))))
      {
        (128085 call compilerError "Domain type mismatch in passing array argument"(errorDepth = 2))
      }
      if(128173 call _cond_test(128107 call && runtimeChecks(128105 call !=(128095 call . formalDom c"dist")(128102 call .(128099 call . this c"_dom") c"dist"))))
      {
        (128171 call halt "Domain map mismatch passing array argument:\n" "  Formal domain map is: "(128144 call . formalDom c"dist") "\n" "  Actual domain map is: "(128168 call .(128165 call . this c"_dom") c"dist"))
      }
    }
    if(128250 call _cond_test(128190 call && runtimeChecks(128188 call != formalDom(128185 call . this c"_dom"))))
    {
      (128248 call halt "Domain mismatch passing array argument:\n" "  Formal domain is: " formalDom "\n" "  Actual domain is: "(128245 call . this c"_dom"))
    }
  }
  function _array[133150](?).reindex[128263](arg _mt[133314]:_MT[227], arg this[133312]:_array[133150](?), arg newDomain[128260] :
  _domain) : _unknown[43] "inline" "method" "primary method" "fn returns aliasing array"
  {
    (128288 return(128287 call reindex(128285 'expand_tuple'(128284 call(128280 call . newDomain c"dims")))))
  }
  where {
    (128276 call &&(128271 call isRectangularDom(128267 call . this c"_dom"))(128275 call isRectangularDom newDomain))
  }
  function _array[133150](?).reindex[128300](arg _mt[133318]:_MT[227], arg this[133316]:_array[133150](?), arg newDims[128297]:_any[170](?) ...) : _unknown[43] "method" "primary method" "fn returns aliasing array"
  {
    {
      unknown i[128350] 0
      unknown tmp[128351] "maybe param" "temp"
      (128363 'move' tmp[128351](128361 call chpl_compute_low_param_loop_bound 1(128311 call . newDims c"size")))
      unknown tmp[128352] "maybe param" "temp"
      (128373 'move' tmp[128352](128371 call chpl_compute_high_param_loop_bound 1(128368 call . newDims c"size")))
      unknown tmp[128353] "maybe param" "temp"
      (128376 'move' tmp[128353] 1)
      ParamForLoop
      { i[128350] tmp[128351] tmp[128352] tmp[128353]
        if(128345 call _cond_test(128323 call !(128322 call isRange(128320 call newDims i))))
        {
          (128343 call compilerError "cannot reindex() a rectangular array to a tuple containing non-ranges")
        }
      }
      label _unused_continueLabel[128355]
      label _breakLabel[128354]
    }
    if(128454 call _cond_test(128396 call !=(128389 call . this c"rank")(128393 call . newDims c"size")))
    {
      (128452 call compilerError(128449 call +(128440 call +(128422 call + "rank mismatch: cannot reindex() from "(128420 call _cast string[24](128416 call . this c"rank"))) " dimension(s) to ")(128447 call _cast string[24](128443 call . newDims c"size"))))
    }
    {
      unknown i[128527] 0
      unknown tmp[128528] "maybe param" "temp"
      (128540 'move' tmp[128528](128538 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[128529] "maybe param" "temp"
      (128547 'move' tmp[128529](128545 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[128530] "maybe param" "temp"
      (128550 'move' tmp[128530] 1)
      ParamForLoop
      { i[128527] tmp[128528] tmp[128529] tmp[128530]
        if(128522 call _cond_test(128483 call !=(128467 call .(128466 call newDims i) c"length")(128480 call .(128479 call(128474 call .(128471 call . _value c"dom") c"dsiDim") i) c"length")))
        {
          (128520 call halt "extent in dimension " i " does not match actual")
        }
      }
      label _unused_continueLabel[128532]
      label _breakLabel[128531]
    }
    const thisDomClass[128568] "const"(128565 call .(128562 call . this c"_value") c"dom")
    const tmp[128584] "const" "no copy" "temp"(128582 call _build_tuple thisDomClass(128578 call . thisDomClass c"pid"))
    (128591 call _check_tuple_var_decl tmp[128584] 2)
    const dom[128571] "const"(128585 call tmp[128584] 1)
    const dompid[128573] "const"(128588 call tmp[128584] 2)
    const updom[128601] "const" "no auto destroy"(128599 call chpl__buildDomainExpr(128597 'expand_tuple' newDims))
    const redist[128640] "const"(128639 'new'(128638 'to unmanaged class from unknown'(128637 call ArrayViewReindexDist(downDistPid =(128612 call .(128609 call .(128606 call . this c"_dom") c"dist") c"_pid"))(downDistInst =(128624 call .(128621 call .(128618 call . this c"_dom") c"dist") c"_instance"))(updom =(128629 call . updom c"_value"))(downdomPid = dompid)(downdomInst = dom))))
    const redistRec[128648] "const"(128647 'new'(128646 call _distribution redist))
    const newDom[128671] "const" "no auto destroy"(128670 'new'(128669 call _domain redistRec rank(128656 call . updom c"idxType")(128660 call . updom c"stridable")(128668 call(128664 call . updom c"dims"))))
    (128682 call =(128678 call .(128675 call . newDom c"_value") c"_free_when_no_arrs") 1)
    const tmp[128701] "const" "no copy" "temp"(128699 call _build_tuple(128691 call . this c"_value")(128695 call . this c"_pid"))
    (128708 call _check_tuple_var_decl tmp[128701] 2)
    const arr[128685] "const"(128702 call tmp[128701] 1)
    const arrpid[128687] "const"(128705 call tmp[128701] 2)
    unknown x[128737](128736 'new'(128735 'to unmanaged class from unknown'(128734 call ArrayViewReindexArr(eltType =(128715 call . this c"eltType"))(_DomPid =(128721 call . newDom c"_pid"))(dom =(128726 call . newDom c"_instance"))(_ArrPid = arrpid)(_ArrInstance = arr))))
    (128751 call(128744 call .(128741 call . newDom c"_value") c"add_arr") x(locking = 0))
    (128757 return(128756 call _newArray x))
  }
  where {
    (128308 call isRectangularDom(128304 call . this c"_dom"))
  }
  function _array[133150](?).reindex[128768](arg _mt[133322]:_MT[227], arg this[133320]:_array[133150](?), arg d[128765] :
  _domain) : _unknown[43] "method" "primary method" "no doc" "fn returns aliasing array" "no return value for void"
  {
    (128788 call compilerError "Reindexing non-rectangular arrays is not permitted.")
  }
  function _array[133150](?).writeThis[128797](arg _mt[133326]:_MT[227], arg this[133324]:_array[133150](?), arg f[128795]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (128805 call(128800 call . _value c"dsiSerialWrite") f)
  }
  function _array[133150](?).readThis[128814](arg _mt[133330]:_MT[227], arg this[133328]:_array[133150](?), arg f[128812]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (128822 call(128817 call . _value c"dsiSerialRead") f)
  }
  function _array[133150](?).IRV[128829](arg _mt[133334]:_MT[227], arg this[133332]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens" "no return value for void"
  {
    (128855 call compilerError "only sparse arrays have an IRV")
  }
  where {
    (128835 call !(128834 call isSparseArr this))
  }
  function _array[133150](?).IRV[128863](arg _mt[133338]:_MT[227], arg this[133336]:_array[133150](?)) ref : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    (128875 return(128872 call . _value c"IRV"))
  }
  where {
    (128868 call isSparseArr this)
  }
  function _array[133150](?).sorted[128892](arg _mt[133342]:_MT[227], arg this[133340]:_array[133150](?), arg comparator[128888] :
  unknown t[128883] =
  (128887 call chpl_defaultComparator)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(129051 call _cond_test(128912 call canResolveMethod _value "dsiSorted" comparator))
    {
      {
        unknown _indexOfInterest[128925] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[128926] "expr temp" "temp"
        (128935 'move' _iterator[128926](128933 call _getIterator(128920 call(128915 call . _value c"dsiSorted") comparator)))
        Defer
        {
          {
            (128952 call _freeIterator _iterator[128926])
          }
        }
        { scopeless type
          (128941 'move' _indexOfInterest[128925](128938 call iteratorIndex _iterator[128926]))
        }
        ForLoop
        {
          unknown i[128945] "index var" "insert auto destroy"
          (128947 'move' i[128945] _indexOfInterest[128925])
          {
            (128922 yield i)
          }
          label _continueLabel[128930]
          _indexOfInterest[128925]
          _iterator[128926]
        }
        label _breakLabel[128931]
      }
    }
    {
      if(129047 call _cond_test(128964 call canResolveMethod _value "dsiSorted"))
      {
        (128990 call compilerError(128987 call +(128969 call _cast string[24](128967 'typeof' _value)) " does not support dsiSorted(comparator)"))
      }
      {
        (128995 'use' Sort)
        unknown copy[128999] this
        (129007 call sort copy(comparator = comparator))
        {
          unknown _indexOfInterest[129014] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[129015] "expr temp" "temp"
          (129024 'move' _iterator[129015](129022 call _getIterator copy))
          Defer
          {
            {
              (129040 call _freeIterator _iterator[129015])
            }
          }
          { scopeless type
            (129029 'move' _indexOfInterest[129014](129026 call iteratorIndex _iterator[129015]))
          }
          ForLoop
          {
            unknown ind[129033] "index var" "insert auto destroy"
            (129035 'move' ind[129033] _indexOfInterest[129014])
            (129012 yield ind)
            label _continueLabel[129019]
            _indexOfInterest[129014]
            _iterator[129015]
          }
          label _breakLabel[129020]
        }
      }
    }
  }
  function _array[133150](?).displayRepresentation[129061](arg _mt[133346]:_MT[227], arg this[133344]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (129068 call(129064 call . _value c"dsiDisplayRepresentation"))
  }
  function _array[133150](?).targetLocales[129075](arg _mt[133350]:_MT[227], arg this[133348]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    (129083 return(129082 call(129078 call . _value c"dsiTargetLocales")))
  }
  function _array[133150](?).hasSingleLocalSubdomain[129090](arg _mt[133354]:_MT[227], arg this[133352]:_array[133150](?)) param : _unknown[43] "method" "primary method"
  {
    (129098 return(129097 call(129093 call . _value c"dsiHasSingleLocalSubdomain")))
  }
  function _array[133150](?).localSubdomain[129111](arg _mt[133358]:_MT[227], arg this[133356]:_array[133150](?), arg loc[129107] :
  locale[26] =
  here) : _unknown[43] "method" "primary method"
  {
    if(129126 call _cond_test(129119 call !(129118 call(129114 call . _value c"dsiHasSingleLocalSubdomain"))))
    {
      (129124 call compilerError "Domain's local domain is not a single domain")
    }
    (129139 return(129138 call(129133 call . _value c"dsiLocalSubdomain") loc))
  }
  function _array[133150](?).localSubdomains[129151](arg _mt[133362]:_MT[227], arg this[133360]:_array[133150](?), arg loc[129147] :
  locale[26] =
  here) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(129212 call _cond_test(129158 call(129154 call . _value c"dsiHasSingleLocalSubdomain")))
    {
      (129163 yield(129162 call localSubdomain loc))
    }
    {
      {
        unknown _indexOfInterest[129177] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[129178] "expr temp" "temp"
        (129187 'move' _iterator[129178](129185 call _getIterator(129173 call(129168 call . _value c"dsiLocalSubdomains") loc)))
        Defer
        {
          {
            (129204 call _freeIterator _iterator[129178])
          }
        }
        { scopeless type
          (129193 'move' _indexOfInterest[129177](129190 call iteratorIndex _iterator[129178]))
        }
        ForLoop
        {
          unknown d[129197] "index var" "insert auto destroy"
          (129199 'move' d[129197] _indexOfInterest[129177])
          (129175 yield d)
          label _continueLabel[129182]
          _indexOfInterest[129177]
          _iterator[129178]
        }
        label _breakLabel[129183]
      }
    }
  }
  function _array[133150](?).chpl__isDense1DArray[129221](arg _mt[133366]:_MT[227], arg this[133364]:_array[133150](?)) param : _unknown[43] "method" "primary method"
  {
    (129247 return(129245 call &&(129234 call &&(129226 call isRectangularArr this)(129232 call ==(129228 call . this c"rank") 1))(129243 call !(129240 call .(129237 call . this c"_value") c"stridable"))))
  }
  function _array[133150](?).chpl__assertSingleArrayDomain[129258](arg _mt[133370]:_MT[227], arg this[133368]:_array[133150](?), arg fnName[129255] :
  string[24]) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    if(129317 call _cond_test(129274 call !=(129270 call .(129267 call .(129264 call .(129261 call . this c"_dom") c"_value") c"_arrs") c"length") 1))
    {
      (129315 call halt(129312 call +(129294 call + "cannot call " fnName) " on an array defined over a domain with multiple arrays"))
    }
  }
  function _array[133150](?).isEmpty[129327](arg _mt[133374]:_MT[227], arg this[133372]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    (129339 return(129337 call ==(129333 call . this c"numElements") 0))
  }
  { scopeless type
    bool[10]
  }
  function _array[133150](?).head[129347](arg _mt[133378]:_MT[227], arg this[133376]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (129366 return(129365 call this(129361 call .(129358 call . this c"_dom") c"alignedLow")))
  }
  { scopeless type
    (129353 call .(129350 call . this c"_value") c"eltType")
  }
  function _array[133150](?).tail[129374](arg _mt[133382]:_MT[227], arg this[133380]:_array[133150](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (129393 return(129392 call this(129388 call .(129385 call . this c"_dom") c"alignedHigh")))
  }
  { scopeless type
    (129380 call .(129377 call . this c"_value") c"eltType")
  }
  function _array[133150](?).resizeAllocRange[129405](arg _mt[133386]:_MT[227], arg this[133384]:_array[133150](?), arg r2[129402] :
  range, arg factor[129408] =
  arrayAsVecGrowthFactor, param arg direction[129412] =
  1, param arg grow[129416] =
  1) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    const r[129426] "const" "ref var"(129423 call .(129420 call . this c"_value") c"dataAllocRange")
    const lo[129434] "const"(129431 call . r c"low")
    const hi[129441] "const"(129438 call . r c"high")
    const size[129448] "const"(129445 call . r c"size")
    if(129649 call _cond_test(129453 call > grow 0))
    {
      const newSize[129473] "const"(129472 call max(129458 call + size 1)(129466 call _cast int[13](129463 call * size factor))(129469 call . r2 c"size"))
      if(129501 call _cond_test(129479 call > direction 0))
      {
        (129487 return(129485 call #(129482 call chpl_build_low_bounded_range lo) newSize))
      }
      {
        (129498 return(129496 call #(129491 call chpl_build_high_bounded_range hi)(129494 call - newSize)))
      }
    }
    {
      const newSize[129519] "const"(129518 call min(129508 call - size 1)(129516 call _cast int[13](129513 call / size factor)))
      if(129645 call _cond_test(129525 call > direction 0))
      {
        unknown newRange[129533](129531 call #(129528 call chpl_build_low_bounded_range lo) newSize)
        if(129578 call _cond_test(129545 call <(129538 call . newRange c"high")(129542 call . r2 c"high")))
        {
          const spaceNeeded[129557] "const"(129555 call -(129548 call . r2 c"high")(129552 call . newRange c"high"))
          (129575 call = newRange(129573 call chpl_build_bounded_range(129567 call +(129563 call . newRange c"low") spaceNeeded)(129570 call . r2 c"high")))
        }
        (129583 return newRange)
      }
      {
        unknown newRange[129593](129591 call #(129586 call chpl_build_high_bounded_range hi)(129589 call - newSize))
        if(129638 call _cond_test(129605 call >(129598 call . newRange c"low")(129602 call . r2 c"low")))
        {
          const spaceNeeded[129617] "const"(129615 call -(129608 call . newRange c"low")(129612 call . r2 c"low"))
          (129635 call = newRange(129633 call chpl_build_bounded_range(129623 call . r2 c"low")(129631 call -(129627 call . newRange c"high") spaceNeeded)))
        }
        (129643 return newRange)
      }
    }
  }
  function _array[133150](?).reallocateArray[129661](arg _mt[133390]:_MT[227], arg this[133388]:_array[133150](?), arg newRange[129658] :
  range, param arg direction[129664] =
  1, arg debugMsg[129683] =
  "reallocateArray") : _unknown[43] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    {
      const tmp[129870] "const" "temp"
      (129871 'move' tmp[129870](129868 'deref'(129867 '_wide_get_locale'(129687 call . this c"_value"))))
      {
        const check[129705] "const"(129702 IfExpr (129692 call > direction 0) then
        { scopeless
          (129695 call . newRange c"high")
        } else
        { scopeless
          (129699 call . newRange c"low")
        } )
        if(129840 call _cond_test(129722 call !(129721 call(129716 call .(129713 call .(129710 call . this c"_value") c"dataAllocRange") c"contains") check)))
        {
          if(129770 call _cond_test(129741 call <(129731 call .(129728 call .(129725 call . this c"_value") c"dataAllocRange") c"length")(129738 call .(129735 call . this c"_dom") c"numIndices")))
          {
            (129766 call =(129747 call .(129744 call . this c"_value") c"dataAllocRange")(129764 call chpl_build_bounded_range(129754 call .(129751 call . this c"_dom") c"low")(129761 call .(129758 call . this c"_dom") c"high")))
          }
          const oldRange[129782] "const"(129779 call .(129776 call . this c"_value") c"dataAllocRange")
          const nextAllocRange[129791] "const"(129790 call resizeAllocRange newRange(direction = direction))
          if(129822 call _cond_test debugArrayAsVec)
          {
            (129820 call writeln debugMsg ": " oldRange " => " nextAllocRange " (" newRange ")")
          }
          (129838 call(129831 call .(129828 call . this c"_value") c"dsiReallocate")(129835 call _build_tuple nextAllocRange))
        }
        (129855 call(129848 call .(129845 call . this c"_dom") c"setIndices")(129852 call _build_tuple newRange))
        (129865 call(129861 call .(129858 call . this c"_value") c"dsiPostReallocate"))
      }
    }
  }
  function _array[133150](?).back[129880](arg _mt[133394]:_MT[227], arg this[133392]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    if(129917 call _cond_test(129895 call ||(129886 call !(129885 call isRectangularArr this))(129893 call !=(129889 call . this c"rank") 1)))
    {
      (129915 call compilerError "back() is only supported on 1D rectangular arrays")
    }
    if(129949 call _cond_test(129927 call && boundsChecking(129926 call isEmpty)))
    {
      (129947 call halt "back called on an empty array")
    }
    (129964 return(129963 call this(129959 call .(129956 call . this c"_dom") c"high")))
  }
  function _array[133150](?).push_back[129977](arg _mt[133398]:_MT[227], arg this[133396]:_array[133150](?), in arg val[129974] :
  (129971 call . this c"eltType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(130006 call _cond_test showArrayAsVecWarnings)
    {
      (130004 call compilerWarning "push_back is deprecated - please use list.append")
    }
    if(130037 call _cond_test(130015 call !(130014 call chpl__isDense1DArray)))
    {
      (130035 call compilerError "push_back() is only supported on dense 1D arrays")
    }
    (130060 call chpl__assertSingleArrayDomain "push_back")
    const newRange[130081] "const"(130079 call chpl_build_bounded_range(130066 call .(130063 call . this c"_dom") c"low")(130077 call +(130073 call .(130070 call . this c"_dom") c"high") 1))
    (130104 call reallocateArray newRange(debugMsg = "push_back reallocate"))
    (130117 call =(130115 call this(130111 call .(130108 call . this c"_dom") c"high")) val)
  }
  {
    (129983 call <(129980 'lifetime_of' this)(129982 'lifetime_of' val))
  }
  function _array[133150](?).push_back[130129](arg _mt[133402]:_MT[227], arg this[133400]:_array[133150](?), arg vals[130126] :
  _array) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(130158 call _cond_test showArrayAsVecWarnings)
    {
      (130156 call compilerWarning "push_back is deprecated - please use list.extend")
    }
    if(130174 call _cond_test(130167 call !(130166 call chpl__isDense1DArray)))
    {
      (130172 call compilerError "push_back() is only supported on dense 1D arrays")
    }
    (130182 call chpl__assertSingleArrayDomain "push_back")
    const thisRange[130202] "const"(130200 call #(130194 call chpl_build_low_bounded_range(130192 call +(130188 call .(130185 call . this c"_dom") c"high") 1))(130197 call . vals c"size"))
    const valsRange[130215] "const"(130214 call(130209 call .(130206 call . vals c"_dom") c"dim") 1)
    const newRange[130240] "const"(130238 call chpl_build_bounded_range(130222 call .(130219 call . this c"_dom") c"low")(130236 call +(130229 call .(130226 call . this c"_dom") c"high")(130233 call . vals c"size")))
    (130248 call reallocateArray newRange(debugMsg = "push_back reallocate"))
    (130258 call =(130253 call this thisRange)(130257 call vals valsRange))
  }
  {
    (130135 call <(130132 'lifetime_of' this)(130134 'lifetime_of' vals))
  }
  function _array[133150](?).pop_back[130266](arg _mt[133406]:_MT[227], arg this[133404]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    if(130289 call _cond_test showArrayAsVecWarnings)
    {
      (130287 call compilerWarning "pop_back is deprecated - please use list.pop")
    }
    if(130320 call _cond_test(130298 call !(130297 call chpl__isDense1DArray)))
    {
      (130318 call compilerError "pop_back() is only supported on dense 1D arrays")
    }
    (130343 call chpl__assertSingleArrayDomain "pop_back")
    if(130371 call _cond_test(130349 call && boundsChecking(130348 call isEmpty)))
    {
      (130369 call halt "pop_back called on empty array")
    }
    const lo[130383] "const"(130380 call .(130377 call . this c"_dom") c"low")
    const hi[130396] "const"(130394 call -(130390 call .(130387 call . this c"_dom") c"high") 1)
    const newRange[130403] "const"(130401 call chpl_build_bounded_range lo hi)
    const ret[130416] "const"(130415 call this(130411 call .(130408 call . this c"_dom") c"high"))
    {
      const tmp[130595] "const" "temp"
      (130596 'move' tmp[130595](130593 'deref'(130592 '_wide_get_locale'(130420 call . this c"_value"))))
      {
        if(130469 call _cond_test(130440 call <(130430 call .(130427 call .(130424 call . this c"_value") c"dataAllocRange") c"length")(130437 call .(130434 call . this c"_dom") c"numIndices")))
        {
          (130465 call =(130446 call .(130443 call . this c"_value") c"dataAllocRange")(130463 call chpl_build_bounded_range(130453 call .(130450 call . this c"_dom") c"low")(130460 call .(130457 call . this c"_dom") c"high")))
        }
        if(130565 call _cond_test(130497 call <(130475 call . newRange c"length")(130495 call _cast int[13](130492 call /(130485 call .(130482 call .(130479 call . this c"_value") c"dataAllocRange") c"length")(130490 call * arrayAsVecGrowthFactor arrayAsVecGrowthFactor)))))
        {
          const oldRng[130506] "const"(130503 call .(130500 call . this c"_value") c"dataAllocRange")
          const nextAllocRange[130518] "const"(130517 call resizeAllocRange newRange(grow =(130514 call - 1)))
          if(130548 call _cond_test debugArrayAsVec)
          {
            (130546 call writeln "pop_back reallocate: " oldRng " => " nextAllocRange " (" newRange ")")
          }
          (130563 call(130557 call .(130554 call . this c"_value") c"dsiReallocate") nextAllocRange newRange)
        }
        (130580 call(130573 call .(130570 call . this c"_dom") c"setIndices")(130577 call _build_tuple newRange))
        (130590 call(130586 call .(130583 call . this c"_value") c"dsiPostReallocate"))
      }
    }
    (130601 return ret)
  }
  function _array[133150](?).front[130607](arg _mt[133410]:_MT[227], arg this[133408]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    if(130644 call _cond_test(130622 call ||(130613 call !(130612 call isRectangularArr this))(130620 call !=(130616 call . this c"rank") 1)))
    {
      (130642 call compilerError "front() is only supported on 1D rectangular arrays")
    }
    if(130676 call _cond_test(130654 call && boundsChecking(130653 call isEmpty)))
    {
      (130674 call halt "front called on an empty array")
    }
    (130691 return(130690 call this(130686 call .(130683 call . this c"_dom") c"low")))
  }
  function _array[133150](?).push_front[130704](arg _mt[133414]:_MT[227], arg this[133412]:_array[133150](?), in arg val[130701] :
  (130698 call . this c"eltType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(130733 call _cond_test showArrayAsVecWarnings)
    {
      (130731 call compilerWarning "push_front is deprecated - please use list.insert")
    }
    if(130764 call _cond_test(130742 call !(130741 call chpl__isDense1DArray)))
    {
      (130762 call compilerError "push_front() is only supported on dense 1D arrays")
    }
    (130787 call chpl__assertSingleArrayDomain "push_front")
    const lo[130799] "const"(130797 call -(130793 call .(130790 call . this c"_dom") c"low") 1)
    const hi[130809] "const"(130806 call .(130803 call . this c"_dom") c"high")
    const newRange[130816] "const"(130814 call chpl_build_bounded_range lo hi)
    (130843 call reallocateArray newRange(direction =(130823 call - 1))(debugMsg = "push_front reallocate"))
    (130850 call =(130848 call this lo) val)
  }
  {
    (130710 call <(130707 'lifetime_of' this)(130709 'lifetime_of' val))
  }
  function _array[133150](?).push_front[130862](arg _mt[133418]:_MT[227], arg this[133416]:_array[133150](?), arg vals[130859] :
  _array) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(130876 call _cond_test showArrayAsVecWarnings)
    {
      (130874 call compilerWarning "push_front is deprecated - please use list.insert")
    }
    if(130892 call _cond_test(130885 call !(130884 call chpl__isDense1DArray)))
    {
      (130890 call compilerError "push_front() is only supported on dense 1D arrays")
    }
    (130900 call chpl__assertSingleArrayDomain "push_front")
    const thisRange[130923] "const"(130921 call #(130915 call chpl_build_low_bounded_range(130913 call -(130906 call .(130903 call . this c"_dom") c"low")(130910 call . vals c"size")))(130918 call . vals c"size"))
    const valsRange[130936] "const"(130935 call(130930 call .(130927 call . vals c"_dom") c"dim") 1)
    const newRange[130961] "const"(130959 call chpl_build_bounded_range(130950 call -(130943 call .(130940 call . this c"_dom") c"low")(130947 call . vals c"size"))(130956 call .(130953 call . this c"_dom") c"high"))
    (130973 call reallocateArray newRange(direction =(130968 call - 1))(debugMsg = "push_front reallocate"))
    (130983 call =(130978 call this thisRange)(130982 call vals valsRange))
  }
  {
    (130868 call <(130865 'lifetime_of' this)(130867 'lifetime_of' vals))
  }
  function _array[133150](?).pop_front[130991](arg _mt[133422]:_MT[227], arg this[133420]:_array[133150](?)) : _unknown[43] "method" "primary method"
  {
    if(131014 call _cond_test showArrayAsVecWarnings)
    {
      (131012 call compilerWarning "pop_front is deprecated - please use list.pop")
    }
    if(131045 call _cond_test(131023 call !(131022 call chpl__isDense1DArray)))
    {
      (131043 call compilerError "pop_front() is only supported on dense 1D arrays")
    }
    (131068 call chpl__assertSingleArrayDomain "pop_front")
    if(131096 call _cond_test(131074 call && boundsChecking(131073 call isEmpty)))
    {
      (131094 call halt "pop_front called on empty array")
    }
    const lo[131111] "const"(131109 call +(131105 call .(131102 call . this c"_dom") c"low") 1)
    const hi[131121] "const"(131118 call .(131115 call . this c"_dom") c"high")
    const newRange[131128] "const"(131126 call chpl_build_bounded_range lo hi)
    const ret[131141] "const"(131140 call this(131136 call .(131133 call . this c"_dom") c"low"))
    {
      const tmp[131324] "const" "temp"
      (131325 'move' tmp[131324](131322 'deref'(131321 '_wide_get_locale'(131145 call . this c"_value"))))
      {
        if(131194 call _cond_test(131165 call <(131155 call .(131152 call .(131149 call . this c"_value") c"dataAllocRange") c"length")(131162 call .(131159 call . this c"_dom") c"numIndices")))
        {
          (131190 call =(131171 call .(131168 call . this c"_value") c"dataAllocRange")(131188 call chpl_build_bounded_range(131178 call .(131175 call . this c"_dom") c"low")(131185 call .(131182 call . this c"_dom") c"high")))
        }
        if(131294 call _cond_test(131222 call <(131200 call . newRange c"length")(131220 call _cast int[13](131217 call /(131210 call .(131207 call .(131204 call . this c"_value") c"dataAllocRange") c"length")(131215 call * arrayAsVecGrowthFactor arrayAsVecGrowthFactor)))))
        {
          const oldRng[131231] "const"(131228 call .(131225 call . this c"_value") c"dataAllocRange")
          const nextAllocRange[131247] "const"(131246 call resizeAllocRange newRange(direction =(131239 call - 1))(grow =(131243 call - 1)))
          if(131277 call _cond_test debugArrayAsVec)
          {
            (131275 call writeln "pop_front reallocate: " oldRng " => " nextAllocRange " (" newRange ")")
          }
          (131292 call(131286 call .(131283 call . this c"_value") c"dsiReallocate") nextAllocRange newRange)
        }
        (131309 call(131302 call .(131299 call . this c"_dom") c"setIndices")(131306 call _build_tuple newRange))
        (131319 call(131315 call .(131312 call . this c"_value") c"dsiPostReallocate"))
      }
    }
    (131330 return ret)
  }
  function _array[133150](?).insert[131343](arg _mt[133426]:_MT[227], arg this[133424]:_array[133150](?), arg pos[131340] :
  (131337 call . this c"idxType"), in arg val[131349] :
  (131346 call . this c"eltType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(131373 call _cond_test showArrayAsVecWarnings)
    {
      (131371 call compilerWarning "insert is deprecated - please use list.insert")
    }
    if(131404 call _cond_test(131382 call !(131381 call chpl__isDense1DArray)))
    {
      (131402 call compilerError "insert() is only supported on dense 1D arrays")
    }
    (131427 call chpl__assertSingleArrayDomain "insert")
    const prevHigh[131436] "const"(131433 call .(131430 call . this c"_dom") c"high")
    const newRange[131458] "const"(131456 call chpl_build_bounded_range(131443 call .(131440 call . this c"_dom") c"low")(131454 call +(131450 call .(131447 call . this c"_dom") c"high") 1))
    if(131510 call _cond_test(131471 call && boundsChecking(131469 call !(131468 call(131463 call . newRange c"contains") pos))))
    {
      (131508 call halt "insert at position " pos " out of bounds")
    }
    (131535 call reallocateArray newRange(debugMsg = "insert reallocate"))
    {
      unknown _indexOfInterest[131561] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131562] "expr temp" "temp"
      (131571 'move' _iterator[131562](131569 call _getIterator(131582 call chpl_direct_range_iter pos prevHigh(131578 call - 1))))
      Defer
      {
        {
          (131598 call _freeIterator _iterator[131562])
        }
      }
      { scopeless type
        (131587 'move' _indexOfInterest[131561](131584 call iteratorIndex _iterator[131562]))
      }
      ForLoop
      {
        unknown i[131591] "index var" "insert auto destroy"
        (131593 'move' i[131591] _indexOfInterest[131561])
        (131558 call =(131553 call this(131550 call + i 1))(131557 call this i))
        label _continueLabel[131566]
        _indexOfInterest[131561]
        _iterator[131562]
      }
      label _breakLabel[131567]
    }
    (131610 call =(131608 call this pos) val)
  }
  function _array[133150](?).insert[131624](arg _mt[133430]:_MT[227], arg this[133428]:_array[133150](?), arg pos[131621] :
  (131618 call . this c"idxType"), arg vals[131629] :
  (131626 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(131638 call _cond_test showArrayAsVecWarnings)
    {
      (131636 call compilerWarning "insert is deprecated - please use list.insert")
    }
    if(131654 call _cond_test(131647 call !(131646 call chpl__isDense1DArray)))
    {
      (131652 call compilerError "insert() is only supported on dense 1D arrays")
    }
    (131662 call chpl__assertSingleArrayDomain "insert")
    const shift[131668] "const"(131665 call . vals c"size")
    const shiftRange[131681] "const"(131679 call chpl_build_bounded_range pos(131676 call .(131673 call . this c"_dom") c"high"))
    const newRange[131706] "const"(131704 call chpl_build_bounded_range(131688 call .(131685 call . this c"_dom") c"low")(131702 call +(131695 call .(131692 call . this c"_dom") c"high")(131699 call . vals c"size")))
    const validInsertRange[131728] "const"(131726 call chpl_build_bounded_range(131713 call .(131710 call . this c"_dom") c"low")(131724 call +(131720 call .(131717 call . this c"_dom") c"high") 1))
    if(131750 call _cond_test(131741 call && boundsChecking(131739 call !(131738 call(131733 call . validInsertRange c"contains") pos))))
    {
      (131748 call halt "insert at position " pos " out of bounds")
    }
    (131760 call reallocateArray newRange(debugMsg = "insert reallocate"))
    {
      unknown _indexOfInterest[131783] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[131784] "expr temp" "temp"
      (131793 'move' _iterator[131784](131791 call _getIterator(131767 call chpl_by shiftRange(131765 call - 1))))
      Defer
      {
        {
          (131813 call _freeIterator _iterator[131784])
        }
      }
      { scopeless type
        (131802 'move' _indexOfInterest[131783](131799 call iteratorIndex _iterator[131784]))
      }
      ForLoop
      {
        unknown i[131806] "index var" "insert auto destroy"
        (131808 'move' i[131806] _indexOfInterest[131783])
        (131780 call =(131775 call this(131772 call + i shift))(131779 call this i))
        label _continueLabel[131788]
        _indexOfInterest[131783]
        _iterator[131784]
      }
      label _breakLabel[131789]
    }
    (131830 call =(131828 call this(131825 call #(131822 call chpl_build_low_bounded_range pos) shift)) vals)
  }
  function _array[133150](?).remove[131844](arg _mt[133434]:_MT[227], arg this[133432]:_array[133150](?), arg pos[131841] :
  (131838 call . this c"idxType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(131867 call _cond_test showArrayAsVecWarnings)
    {
      (131865 call compilerWarning "remove is deprecated - please use list.pop")
    }
    if(131898 call _cond_test(131876 call !(131875 call chpl__isDense1DArray)))
    {
      (131896 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (131919 call chpl__assertSingleArrayDomain "remove")
    if(131958 call _cond_test(131934 call && boundsChecking(131932 call !(131931 call(131926 call .(131923 call . this c"_dom") c"contains") pos))))
    {
      (131956 call halt "remove at position " pos " out of bounds")
    }
    const lo[131970] "const"(131967 call .(131964 call . this c"_dom") c"low")
    const hi[131983] "const"(131981 call -(131977 call .(131974 call . this c"_dom") c"high") 1)
    const newRange[131990] "const"(131988 call chpl_build_bounded_range lo hi)
    {
      unknown _indexOfInterest[132013] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132014] "expr temp" "temp"
      (132023 'move' _iterator[132014](132021 call _getIterator(132028 call chpl_direct_range_iter pos hi 1)))
      Defer
      {
        {
          (132044 call _freeIterator _iterator[132014])
        }
      }
      { scopeless type
        (132033 'move' _indexOfInterest[132013](132030 call iteratorIndex _iterator[132014]))
      }
      ForLoop
      {
        unknown i[132037] "index var" "insert auto destroy"
        (132039 'move' i[132037] _indexOfInterest[132013])
        {
          (132009 call =(132001 call this i)(132008 call this(132005 call + i 1)))
        }
        label _continueLabel[132018]
        _indexOfInterest[132013]
        _iterator[132014]
      }
      label _breakLabel[132019]
    }
    {
      const tmp[132185] "const" "temp"
      (132186 'move' tmp[132185](132183 'deref'(132182 '_wide_get_locale'(132052 call . this c"_value"))))
      {
        if(132101 call _cond_test(132072 call <(132062 call .(132059 call .(132056 call . this c"_value") c"dataAllocRange") c"length")(132069 call .(132066 call . this c"_dom") c"numIndices")))
        {
          (132097 call =(132078 call .(132075 call . this c"_value") c"dataAllocRange")(132095 call chpl_build_bounded_range(132085 call .(132082 call . this c"_dom") c"low")(132092 call .(132089 call . this c"_dom") c"high")))
        }
        if(132155 call _cond_test(132129 call <(132107 call . newRange c"length")(132127 call _cast int[13](132124 call /(132117 call .(132114 call .(132111 call . this c"_value") c"dataAllocRange") c"length")(132122 call * arrayAsVecGrowthFactor arrayAsVecGrowthFactor)))))
        {
          const nextAllocRange[132139] "const"(132138 call resizeAllocRange newRange(grow =(132135 call - 1)))
          (132153 call(132147 call .(132144 call . this c"_value") c"dsiReallocate") nextAllocRange newRange)
        }
        (132170 call(132163 call .(132160 call . this c"_dom") c"setIndices")(132167 call _build_tuple newRange))
        (132180 call(132176 call .(132173 call . this c"_value") c"dsiPostReallocate"))
      }
    }
  }
  function _array[133150](?).remove[132201](arg _mt[133438]:_MT[227], arg this[133436]:_array[133150](?), arg pos[132198] :
  (132195 call . this c"idxType"), arg count[132207] :
  (132204 call . this c"idxType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(132216 call _cond_test showArrayAsVecWarnings)
    {
      (132214 call compilerWarning "remove is deprecated - please use list.pop")
    }
    if(132232 call _cond_test(132225 call !(132224 call chpl__isDense1DArray)))
    {
      (132230 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (132255 call chpl__assertSingleArrayDomain "remove count")
    const lo[132264] "const"(132261 call .(132258 call . this c"_dom") c"low")
    const hi[132277] "const"(132275 call -(132271 call .(132268 call . this c"_dom") c"high") count)
    if(132312 call _cond_test(132297 call && boundsChecking(132295 call >(132286 call -(132283 call + pos count) 1)(132292 call .(132289 call . this c"_dom") c"high"))))
    {
      (132310 call halt "remove at position "(132307 call -(132304 call + pos count) 1) " out of bounds")
    }
    if(132331 call _cond_test(132322 call && boundsChecking(132320 call < pos lo)))
    {
      (132329 call halt "remove at position " pos " out of bounds")
    }
    const newRange[132340] "const"(132338 call chpl_build_bounded_range lo hi)
    {
      unknown _indexOfInterest[132363] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132364] "expr temp" "temp"
      (132373 'move' _iterator[132364](132371 call _getIterator(132378 call chpl_direct_range_iter pos hi 1)))
      Defer
      {
        {
          (132394 call _freeIterator _iterator[132364])
        }
      }
      { scopeless type
        (132383 'move' _indexOfInterest[132363](132380 call iteratorIndex _iterator[132364]))
      }
      ForLoop
      {
        unknown i[132387] "index var" "insert auto destroy"
        (132389 'move' i[132387] _indexOfInterest[132363])
        {
          (132359 call =(132351 call this i)(132358 call this(132355 call + i count)))
        }
        label _continueLabel[132368]
        _indexOfInterest[132363]
        _iterator[132364]
      }
      label _breakLabel[132369]
    }
    {
      const tmp[132535] "const" "temp"
      (132536 'move' tmp[132535](132533 'deref'(132532 '_wide_get_locale'(132402 call . this c"_value"))))
      {
        if(132451 call _cond_test(132422 call <(132412 call .(132409 call .(132406 call . this c"_value") c"dataAllocRange") c"length")(132419 call .(132416 call . this c"_dom") c"numIndices")))
        {
          (132447 call =(132428 call .(132425 call . this c"_value") c"dataAllocRange")(132445 call chpl_build_bounded_range(132435 call .(132432 call . this c"_dom") c"low")(132442 call .(132439 call . this c"_dom") c"high")))
        }
        if(132505 call _cond_test(132479 call <(132457 call . newRange c"length")(132477 call _cast int[13](132474 call /(132467 call .(132464 call .(132461 call . this c"_value") c"dataAllocRange") c"length")(132472 call * arrayAsVecGrowthFactor arrayAsVecGrowthFactor)))))
        {
          const nextAllocRange[132489] "const"(132488 call resizeAllocRange newRange(grow =(132485 call - 1)))
          (132503 call(132497 call .(132494 call . this c"_value") c"dsiReallocate") nextAllocRange newRange)
        }
        (132520 call(132513 call .(132510 call . this c"_dom") c"setIndices")(132517 call _build_tuple newRange))
        (132530 call(132526 call .(132523 call . this c"_value") c"dsiPostReallocate"))
      }
    }
  }
  function _array[133150](?).remove[132556](arg _mt[133442]:_MT[227], arg this[133440]:_array[133150](?), arg pos[132553] :
  (132552 call range(132546 call . this c"idxType")(stridable = 0))) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(132579 call _cond_test showArrayAsVecWarnings)
    {
      (132577 call compilerWarning "remove has been deprecated - please use list.pop")
    }
    if(132595 call _cond_test(132588 call !(132587 call chpl__isDense1DArray)))
    {
      (132593 call compilerError "remove() is only supported on dense 1D arrays")
    }
    (132618 call chpl__assertSingleArrayDomain "remove range")
    (132630 call remove(132622 call . pos c"low")(132627 call . pos c"size"))
  }
  function _array[133150](?).reverse[132636](arg _mt[133446]:_MT[227], arg this[133444]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(132663 call _cond_test(132641 call !(132640 call chpl__isDense1DArray)))
    {
      (132661 call compilerError "reverse() is only supported on dense 1D arrays")
    }
    const lo[132676] "const"(132673 call .(132670 call . this c"_dom") c"low")
    const mid[132689] "const"(132687 call /(132683 call .(132680 call . this c"_dom") c"size") 2)
    const hi[132699] "const"(132696 call .(132693 call . this c"_dom") c"high")
    {
      unknown _indexOfInterest[132727] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[132728] "expr temp" "temp"
      (132737 'move' _iterator[132728](132735 call _getIterator(132744 call chpl_direct_counted_range_iter 0 mid)))
      Defer
      {
        {
          (132760 call _freeIterator _iterator[132728])
        }
      }
      { scopeless type
        (132749 'move' _indexOfInterest[132727](132746 call iteratorIndex _iterator[132728]))
      }
      ForLoop
      {
        unknown i[132753] "index var" "insert auto destroy"
        (132755 'move' i[132753] _indexOfInterest[132727])
        {
          (132723 call <=>(132715 call this(132712 call + lo i))(132722 call this(132719 call - hi i)))
        }
        label _continueLabel[132732]
        _indexOfInterest[132727]
        _iterator[132728]
      }
      label _breakLabel[132733]
    }
  }
  function _array[133150](?).clear[132771](arg _mt[133450]:_MT[227], arg this[133448]:_array[133150](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(132794 call _cond_test showArrayAsVecWarnings)
    {
      (132792 call compilerWarning "clear is deprecated - please use list.clear")
    }
    if(132825 call _cond_test(132803 call !(132802 call chpl__isDense1DArray)))
    {
      (132823 call compilerError "clear() is only supported on dense 1D arrays")
    }
    (132846 call chpl__assertSingleArrayDomain "clear")
    const lo[132855] "const"(132852 call .(132849 call . this c"_dom") c"low")
    const hi[132868] "const"(132866 call -(132862 call .(132859 call . this c"_dom") c"low") 1)
    (132893 call assert(132874 call < hi lo) "overflow occurred subtracting 1 from low bound in clear")
    const newRange[132899] "const"(132897 call chpl_build_bounded_range lo hi)
    {
      const tmp[132946] "const" "temp"
      (132947 'move' tmp[132946](132944 'deref'(132943 '_wide_get_locale'(132903 call . this c"_value"))))
      {
        (132917 call(132910 call .(132907 call . this c"_value") c"dsiReallocate")(132914 call _build_tuple newRange))
        (132931 call(132924 call .(132921 call . this c"_dom") c"setIndices")(132928 call _build_tuple newRange))
        (132941 call(132937 call .(132934 call . this c"_value") c"dsiPostReallocate"))
      }
    }
  }
  function _array[133150](?).find[132962](arg _mt[133454]:_MT[227], arg this[133452]:_array[133150](?), arg val[132959] :
  (132956 call . this c"eltType")) : _unknown[43] "method" "primary method"
  {
    {
      unknown _indexOfInterest[133000] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[133001] "expr temp" "temp"
      (133010 'move' _iterator[133001](133008 call _getIterator(132977 call . this c"_dom")))
      Defer
      {
        {
          (133027 call _freeIterator _iterator[133001])
        }
      }
      { scopeless type
        (133016 'move' _indexOfInterest[133000](133013 call iteratorIndex _iterator[133001]))
      }
      ForLoop
      {
        unknown i[133020] "index var" "insert auto destroy"
        (133022 'move' i[133020] _indexOfInterest[133000])
        {
          if(132994 call _cond_test(132985 call ==(132983 call this i) val))
          {
            (132992 return(132990 call _build_tuple 1 i))
          }
        }
        label _continueLabel[133005]
        _indexOfInterest[133000]
        _iterator[133001]
      }
      label _breakLabel[133006]
    }
    unknown arbInd[133042](133040 call chpl__buildIndexType(133036 call . this c"_dom"))
    (133050 return(133048 call _build_tuple 0 arbInd))
  }
  { scopeless type
    (132973 call _build_tuple bool[10](132970 call chpl__buildIndexType(132966 call . this c"_dom")))
  }
  function _array[133150](?).count[133064](arg _mt[133458]:_MT[227], arg this[133456]:_array[133150](?), arg val[133061] :
  (133058 call . this c"eltType")) : _unknown[43] "method" "primary method"
  {
    (133074 return(133072 'reduce' SumReduceScanOp(133070 call == this val) 0))
  }
  { scopeless type
    int[13]
  }
  function _array[133150](?).shape[133082](arg _mt[133462]:_MT[227], arg this[133460]:_array[133150](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (133093 return(133090 call .(133085 call . this c"_dom") c"shape"))
  }
  function _array[133150](?)._scan[133102](arg _mt[133466]:_MT[227], arg this[133464]:_array[133150](?), arg op[133100]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (133143 return(133142 call(133133 call . _value c"doiScan") op(133139 call . this c"_dom")))
  }
  where {
    (133131 call(133105 call . Reflection c"canResolveMethod") _value "doiScan" op(133128 call . this c"_dom"))
  }
  type _array[133150](?) unknown _pid[125853] int[13] unknown _instance[125856] "alias scope from this" "owned" unknown _unowned[125860] bool[10] forwarding ( )
  function _do_destroy_arr[133475](arg _unowned[133472] :
  bool[10], arg _instance[133477]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    if(133665 call _cond_test(133480 call ! _unowned))
    {
      {
        const tmp[133659] "const" "temp"
        (133660 'move' tmp[133659](133657 'deref'(133656 '_wide_get_locale' _instance)))
        {
          unknown arrIsInList[133491] "param"(133489 call !(133488 call(133484 call . _instance c"isSliceArrayView")))
          unknown tmp[133507] "no copy" "temp"(133506 call(133501 call . _instance c"remove") arrIsInList)
          (133514 call _check_tuple_var_decl tmp[133507] 2)
          unknown arrToFree[133495](133508 call tmp[133507] 1)
          unknown domToRemove[133497](133511 call tmp[133507] 2)
          unknown domToFree[133523] nil[38](133521 'to unmanaged class from unknown'(133520 'to nilable class from type' BaseDom))
          unknown distToRemove[133530] nil[38](133528 'to unmanaged class from unknown'(133527 'to nilable class from type' BaseDist))
          unknown distToFree[133537] nil[38](133535 'to unmanaged class from unknown'(133534 'to nilable class from type' BaseDist))
          unknown domIsPrivatized[133544] "param"(133543 call _isPrivatized domToRemove)
          const instanceDom[133548] "const" domToRemove
          if(133572 call _cond_test(133553 call != domToRemove nil[38]))
          {
            unknown tmp[328558] "expr temp" "maybe param" "maybe type" "temp"
            unknown tmp[328583] "maybe param" "temp"
            (328586 'move' tmp[328583](328584 'addr of' domToFree))
            unknown tmp[328594] "maybe param" "temp"
            (328597 'move' tmp[328594](328595 'addr of' distToRemove))
            (328559 'move' tmp[328558](133567 call(133563 call .(133561 call postfix! domToRemove) c"remove")))
            { scopeless
              if(328575 call _cond_test(328568 call != 2(328565 call . tmp[328558] c"size")))
              {
                (328571 call compilerError "tuple size must match the number of grouped variables" 0)
              }
            }
            (328588 call = tmp[328583](328581 call tmp[328558] 1))
            (328599 call = tmp[328594](328592 call tmp[328558] 2))
          }
          unknown distIsPrivatized[133580] "param"(133579 call _isPrivatized distToRemove)
          if(133600 call _cond_test(133585 call != distToRemove nil[38]))
          {
            (133596 call = distToFree(133595 call(133591 call .(133589 call postfix! distToRemove) c"remove")))
          }
          if(133617 call _cond_test(133606 call != arrToFree nil[38]))
          {
            (133615 call _delete_arr _instance(133614 call _isPrivatized _instance))
          }
          if(133634 call _cond_test(133624 call != domToFree nil[38]))
          {
            (133632 call _delete_dom(133628 call postfix! instanceDom) domIsPrivatized)
          }
          if(133651 call _cond_test(133641 call != distToFree nil[38]))
          {
            (133649 call _delete_dist(133645 call postfix! distToFree) distIsPrivatized)
          }
        }
      }
    }
  }
  function _unknown[43].equals[133679](arg _mt[133684]:_MT[227], arg this[133681] :
  _array, arg that[133676] :
  _array) : _unknown[43] "method"
  {
    if(133700 call _cond_test(133695 call ==(133688 call . this c"_value")(133692 call . that c"_value")))
    {
      (133698 return 1)
    }
    if(133719 call _cond_test(133714 call !=(133707 call . this c"rank")(133711 call . that c"rank")))
    {
      (133717 return 0)
    }
    if(133737 call _cond_test(133732 call !=(133725 call . this c"numElements")(133729 call . that c"numElements")))
    {
      (133735 return 0)
    }
    if(133844 call _cond_test(133756 call &&(133748 call isRectangularDom(133744 call . this c"_dom"))(133755 call isRectangularDom(133751 call . that c"_dom"))))
    {
      {
        unknown _indexOfInterest[133802] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[133803] "expr temp" "temp"
        (133812 'move' _iterator[133803](133810 call _getIterator(133820 call chpl_direct_range_iter 1(133817 call . this c"rank") 1)))
        Defer
        {
          {
            (133836 call _freeIterator _iterator[133803])
          }
        }
        { scopeless type
          (133825 'move' _indexOfInterest[133802](133822 call iteratorIndex _iterator[133803]))
        }
        ForLoop
        {
          unknown d[133829] "index var" "insert auto destroy"
          (133831 'move' d[133829] _indexOfInterest[133802])
          if(133797 call _cond_test(133792 call !=(133776 call .(133775 call(133770 call .(133767 call . this c"_dom") c"dim") d) c"size")(133789 call .(133788 call(133783 call .(133780 call . that c"_dom") c"dim") d) c"size")))
          {
            (133795 return 0)
          }
          label _continueLabel[133807]
          _indexOfInterest[133802]
          _iterator[133803]
        }
        label _breakLabel[133808]
      }
    }
    if(133918 call _cond_test(133854 call isArrayType(133850 call . this c"eltType")))
    {
      unknown ret[133856] 1
      Forall {
        induction variables:
          
          unknown thisArr[133900] "index var" "insert auto destroy"
          
          unknown thatArr[133902] "index var" "insert auto destroy"
        iterated expressions:
          this
          that
        shadow variables:
          ret[133871] 'reduce' intent
            init block
            {
            }
            deinit block
            {
            }
        forall body
        {
          unknown tmp[133888] "temp"
          (133891 'move' tmp[133888](133890 'addr of' ret))
          (133896 call = tmp[133888](133893 call && tmp[133888](133886 call(133881 call . thisArr c"equals") thatArr)))
        }
      }
      (133906 return ret)
    }
    {
      (133915 return(133913 'reduce' LogicalAndReduceScanOp(133911 call == this that) 0))
    }
  }
  { scopeless type
    bool[10]
  }
  function _cast[133931](arg t[133928] :
  _array, param arg arg[133933]:_any[170](?)) : _unknown[43] "no doc"
  {
    unknown result[133936] t
    (133944 call chpl__transferArray result arg)
    (133947 return result)
  }
  function _cast[133957](arg t[133954] :
  string[24], arg x[133962] :
  (133959 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "no doc"
  {
    (133969 return(133968 call stringify x))
  }
  function isDmapType[133978](arg t[133976]:_any[170](?)) param : _unknown[43]
  {
    function isDmapHelp[133986](arg t[133983] :
    _distribution) param : _unknown[43]
    {
      (133989 return 1)
    }
    function isDmapHelp[133999](arg t[133997]:_any[170](?)) param : _unknown[43]
    {
      (134002 return 0)
    }
    (134011 return(134010 call isDmapHelp t))
  }
  function isDmapValue[134021](arg e[134018] :
  _distribution) param : _unknown[43] "no doc"
  {
    (134024 return 1)
  }
  function isDmapValue[134033](arg e[134031]:_any[170](?)) param : _unknown[43]
  {
    (134036 return 0)
  }
  function isDomainType[134045](arg t[134043]:_any[170](?)) param : _unknown[43]
  {
    (134052 return(328602 'is_subtype' _domain t))
  }
  function isDomainValue[134063](arg e[134060] :
  _domain) param : _unknown[43] "no doc"
  {
    (134066 return 1)
  }
  function isDomainValue[134075](arg e[134073]:_any[170](?)) param : _unknown[43]
  {
    (134078 return 0)
  }
  function isArrayType[134087](arg t[134085]:_any[170](?)) param : _unknown[43]
  {
    (134094 return(328603 'is_subtype' _array t))
  }
  function isArrayValue[134107](arg e[134104] :
  (134101 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43] "no doc"
  {
    (134110 return 1)
  }
  function isArrayValue[134119](arg e[134117]:_any[170](?)) param : _unknown[43]
  {
    (134122 return 0)
  }
  function +[134133](arg a[134130] :
  _array, arg b[134136] :
  _array) : _unknown[43]
  {
    (134175 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134182 return(134180 call | a b))
  }
  where {
    (134155 call &&(134149 call ==(134143 'typeof'(134140 call . a c"_value"))(134148 'typeof'(134145 call . b c"_value")))(134154 call isAssociativeArr a))
  }
  function +=[134193](ref arg a[134190] :
  _array, arg b[134196] :
  _array) : _unknown[43] "assignop" "no return value for void"
  {
    (134220 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134231 call(134226 call . a c"chpl__assertSingleArrayDomain") "+=")
    (134235 call |= a b)
  }
  where {
    (134215 call &&(134209 call ==(134203 'typeof'(134200 call . a c"_value"))(134208 'typeof'(134205 call . b c"_value")))(134214 call isAssociativeArr a))
  }
  function |[134247](arg a[134244] :
  _array, arg b[134250] :
  _array) : _unknown[43]
  {
    (134274 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown newDom[134287](134285 call |(134278 call . a c"_dom")(134282 call . b c"_dom"))
    unknown ret[134300](134298 call chpl__buildArrayRuntimeType(134296 call chpl__ensureDomainExpr newDom)(134293 call . a c"eltType"))
    {
      unknown tmp[134368] "temp"(134369 'task_get_serial')
      if(134365 call _cond_test(134310 call !(134307 call .(134304 call . newDom c"_value") c"parSafe")))
      {
        (134371 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[134333] "index var" "insert auto destroy"
            
            unknown v[134335] "index var" "insert auto destroy"
          iterated expressions:
            (134318 call . a c"_dom")
            a
          shadow variables:
          forall body
          {
            (134329 call =(134327 call ret k) v)
          }
        }
        Forall {
          induction variables:
            
            unknown k[134360] "index var" "insert auto destroy"
            
            unknown v[134362] "index var" "insert auto destroy"
          iterated expressions:
            (134345 call . b c"_dom")
            b
          shadow variables:
          forall body
          {
            (134356 call =(134354 call ret k) v)
          }
        }
      }
      (134375 'task_set_serial' tmp[134368])
    }
    (134378 return ret)
  }
  where {
    (134269 call &&(134263 call ==(134257 'typeof'(134254 call . a c"_value"))(134262 'typeof'(134259 call . b c"_value")))(134268 call isAssociativeArr a))
  }
  function |=[134389](ref arg a[134386] :
  _array, arg b[134392] :
  _array) : _unknown[43] "assignop" "no return value for void"
  {
    (134416 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134425 call(134420 call . a c"chpl__assertSingleArrayDomain") "|=")
    {
      unknown tmp[134489] "temp"(134490 'task_get_serial')
      if(134486 call _cond_test(134437 call !(134434 call .(134431 call .(134428 call . a c"_dom") c"_value") c"parSafe")))
      {
        (134492 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown i[134456] "index var" "insert auto destroy"
          iterated expressions:
            (134441 call . b c"_dom")
          shadow variables:
          forall body
          {
            (134453 call(134448 call .(134445 call . a c"_dom") c"add") i)
          }
        }
        Forall {
          induction variables:
            
            unknown k[134481] "index var" "insert auto destroy"
            
            unknown v[134483] "index var" "insert auto destroy"
          iterated expressions:
            (134466 call . b c"_dom")
            b
          shadow variables:
          forall body
          {
            (134477 call =(134475 call a k) v)
          }
        }
      }
      (134496 'task_set_serial' tmp[134489])
    }
  }
  where {
    (134411 call &&(134405 call ==(134399 'typeof'(134396 call . a c"_value"))(134404 'typeof'(134401 call . b c"_value")))(134410 call isAssociativeArr a))
  }
  function &[134507](arg a[134504] :
  _array, arg b[134510] :
  _array) : _unknown[43]
  {
    (134534 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown newDom[134547](134545 call &(134538 call . a c"_dom")(134542 call . b c"_dom"))
    unknown ret[134560](134558 call chpl__buildArrayRuntimeType(134556 call chpl__ensureDomainExpr newDom)(134553 call . a c"eltType"))
    {
      unknown tmp[134592] "temp"(134593 'task_get_serial')
      if(134589 call _cond_test(134570 call !(134567 call .(134564 call . newDom c"_value") c"parSafe")))
      {
        (134595 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[134586] "index var" "insert auto destroy"
        iterated expressions:
          newDom
        shadow variables:
        forall body
        {
          (134582 call =(134577 call ret k)(134581 call a k))
        }
      }
      (134599 'task_set_serial' tmp[134592])
    }
    (134602 return ret)
  }
  where {
    (134529 call &&(134523 call ==(134517 'typeof'(134514 call . a c"_value"))(134522 'typeof'(134519 call . b c"_value")))(134528 call isAssociativeArr a))
  }
  function &=[134613](ref arg a[134610] :
  _array, arg b[134616] :
  _array) : _unknown[43] "assignop" "no return value for void"
  {
    (134640 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134649 call(134644 call . a c"chpl__assertSingleArrayDomain") "&=")
    {
      unknown tmp[134705] "temp"(134706 'task_get_serial')
      if(134702 call _cond_test(134661 call !(134658 call .(134655 call .(134652 call . a c"_dom") c"_value") c"parSafe")))
      {
        (134708 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[134698] "index var" "insert auto destroy"
          iterated expressions:
            (134665 call . a c"_dom")
          shadow variables:
          forall body
          {
            if(134691 call _cond_test(134678 call !(134677 call(134672 call .(134669 call . b c"_dom") c"contains") k)))
            {
              (134689 call(134684 call .(134681 call . a c"_dom") c"remove") k)
            }
          }
        }
      }
      (134712 'task_set_serial' tmp[134705])
    }
  }
  where {
    (134635 call &&(134629 call ==(134623 'typeof'(134620 call . a c"_value"))(134628 'typeof'(134625 call . b c"_value")))(134634 call isAssociativeArr a))
  }
  function -[134723](arg a[134720] :
  _array, arg b[134726] :
  _array) : _unknown[43]
  {
    (134750 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown newDom[134763](134761 call -(134754 call . a c"_dom")(134758 call . b c"_dom"))
    unknown ret[134776](134774 call chpl__buildArrayRuntimeType(134772 call chpl__ensureDomainExpr newDom)(134769 call . a c"eltType"))
    {
      unknown tmp[134808] "temp"(134809 'task_get_serial')
      if(134805 call _cond_test(134786 call !(134783 call .(134780 call . newDom c"_value") c"parSafe")))
      {
        (134811 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[134802] "index var" "insert auto destroy"
        iterated expressions:
          newDom
        shadow variables:
        forall body
        {
          (134798 call =(134793 call ret k)(134797 call a k))
        }
      }
      (134815 'task_set_serial' tmp[134808])
    }
    (134818 return ret)
  }
  where {
    (134745 call &&(134739 call ==(134733 'typeof'(134730 call . a c"_value"))(134738 'typeof'(134735 call . b c"_value")))(134744 call isAssociativeArr a))
  }
  function -=[134829](ref arg a[134826] :
  _array, arg b[134832] :
  _array) : _unknown[43] "assignop" "no return value for void"
  {
    (134856 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (134865 call(134860 call . a c"chpl__assertSingleArrayDomain") "-=")
    {
      unknown tmp[134917] "temp"(134918 'task_get_serial')
      if(134914 call _cond_test(134877 call !(134874 call .(134871 call .(134868 call . a c"_dom") c"_value") c"parSafe")))
      {
        (134920 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[134911] "index var" "insert auto destroy"
        iterated expressions:
          (134881 call . a c"_dom")
        shadow variables:
        forall body
        {
          if(134905 call _cond_test(134893 call(134888 call .(134885 call . b c"_dom") c"contains") k))
          {
            (134903 call(134898 call .(134895 call . a c"_dom") c"remove") k)
          }
        }
      }
      (134924 'task_set_serial' tmp[134917])
    }
  }
  where {
    (134851 call &&(134845 call ==(134839 'typeof'(134836 call . a c"_value"))(134844 'typeof'(134841 call . b c"_value")))(134850 call isAssociativeArr a))
  }
  function ^[134935](arg a[134932] :
  _array, arg b[134938] :
  _array) : _unknown[43]
  {
    (134962 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    unknown newDom[134975](134973 call ^(134966 call . a c"_dom")(134970 call . b c"_dom"))
    unknown ret[134988](134986 call chpl__buildArrayRuntimeType(134984 call chpl__ensureDomainExpr newDom)(134981 call . a c"eltType"))
    {
      unknown tmp[135078] "temp"(135079 'task_get_serial')
      if(135075 call _cond_test(134998 call !(134995 call .(134992 call . newDom c"_value") c"parSafe")))
      {
        (135081 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[135034] "index var" "insert auto destroy"
          iterated expressions:
            (135002 call . a c"_dom")
          shadow variables:
          forall body
          {
            if(135028 call _cond_test(135015 call !(135014 call(135009 call .(135006 call . b c"_dom") c"contains") k)))
            {
              (135025 call =(135020 call ret k)(135024 call a k))
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135072] "index var" "insert auto destroy"
          iterated expressions:
            (135040 call . b c"_dom")
          shadow variables:
          forall body
          {
            if(135066 call _cond_test(135053 call !(135052 call(135047 call .(135044 call . a c"_dom") c"contains") k)))
            {
              (135063 call =(135058 call ret k)(135062 call b k))
            }
          }
        }
      }
      (135085 'task_set_serial' tmp[135078])
    }
    (135088 return ret)
  }
  where {
    (134957 call &&(134951 call ==(134945 'typeof'(134942 call . a c"_value"))(134950 'typeof'(134947 call . b c"_value")))(134956 call isAssociativeArr a))
  }
  function ^=[135099](ref arg a[135096] :
  _array, arg b[135102] :
  _array) : _unknown[43] "assignop" "no return value for void"
  {
    (135126 call compilerWarning "Array-as-set operators are deprecated. Use Maps.map instead.")
    (135135 call(135130 call . a c"chpl__assertSingleArrayDomain") "^=")
    {
      unknown tmp[135237] "temp"(135238 'task_get_serial')
      if(135234 call _cond_test(135147 call !(135144 call .(135141 call .(135138 call . a c"_dom") c"_value") c"parSafe")))
      {
        (135240 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[135194] "index var" "insert auto destroy"
          iterated expressions:
            (135151 call . b c"_dom")
          shadow variables:
          forall body
          {
            if(135186 call _cond_test(135163 call(135158 call .(135155 call . a c"_dom") c"contains") k))
            {
              (135173 call(135168 call .(135165 call . a c"_dom") c"remove") k)
            }
            {
              (135184 call(135179 call .(135176 call . a c"_dom") c"add") k)
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135231] "index var" "insert auto destroy"
          iterated expressions:
            (135200 call . b c"_dom")
          shadow variables:
          forall body
          {
            if(135224 call _cond_test(135212 call(135207 call .(135204 call . a c"_dom") c"contains") k))
            {
              (135221 call =(135216 call a k)(135220 call b k))
            }
          }
        }
      }
      (135244 'task_set_serial' tmp[135237])
    }
  }
  where {
    (135121 call &&(135115 call ==(135109 'typeof'(135106 call . a c"_value"))(135114 'typeof'(135111 call . b c"_value")))(135120 call isAssociativeArr a))
  }
  function -[135255](arg a[135252] :
  _domain, arg b[135258] :
  _domain) : _unknown[43]
  {
    unknown newDom[135275](135274 'typeof' a)
    {
      unknown tmp[135319] "temp"(135320 'task_get_serial')
      if(135316 call _cond_test(135286 call !(135283 call .(135280 call . newDom c"_value") c"parSafe")))
      {
        (135322 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown e[135313] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        forall body
        {
          if(135307 call _cond_test(135297 call !(135296 call(135291 call . b c"contains") e)))
          {
            (135305 call(135300 call . newDom c"add") e)
          }
        }
      }
      (135326 'task_set_serial' tmp[135319])
    }
    (135329 return newDom)
  }
  where {
    (135271 call &&(135265 call ==(135262 'typeof' a)(135264 'typeof' b))(135270 call isAssociativeDom a))
  }
  function -=[135340](ref arg a[135337] :
  _domain, arg b[135343] :
  _domain) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135380] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135381] "expr temp" "temp"
      (135390 'move' _iterator[135381](135388 call _getIterator b))
      Defer
      {
        {
          (135406 call _freeIterator _iterator[135381])
        }
      }
      { scopeless type
        (135395 'move' _indexOfInterest[135380](135392 call iteratorIndex _iterator[135381]))
      }
      ForLoop
      {
        unknown e[135399] "index var" "insert auto destroy"
        (135401 'move' e[135399] _indexOfInterest[135380])
        if(135375 call _cond_test(135366 call(135361 call . a c"contains") e))
        {
          (135373 call(135368 call . a c"remove") e)
        }
        label _continueLabel[135385]
        _indexOfInterest[135380]
        _iterator[135381]
      }
      label _breakLabel[135386]
    }
  }
  where {
    (135356 call &&(135350 call ==(135347 'typeof' a)(135349 'typeof' b))(135355 call isAssociativeDom a))
  }
  function |[135423](arg a[135420] :
  _domain, arg b[135426] :
  _domain) : _unknown[43]
  {
    (135445 return(135443 call + a b))
  }
  where {
    (135439 call &&(135433 call ==(135430 'typeof' a)(135432 'typeof' b))(135438 call isAssociativeDom a))
  }
  function |=[135457](ref arg a[135454] :
  _domain, arg b[135460] :
  _domain) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135485] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135486] "expr temp" "temp"
      (135495 'move' _iterator[135486](135493 call _getIterator b))
      Defer
      {
        {
          (135511 call _freeIterator _iterator[135486])
        }
      }
      { scopeless type
        (135500 'move' _indexOfInterest[135485](135497 call iteratorIndex _iterator[135486]))
      }
      ForLoop
      {
        unknown e[135504] "index var" "insert auto destroy"
        (135506 'move' e[135504] _indexOfInterest[135485])
        (135483 call(135478 call . a c"add") e)
        label _continueLabel[135490]
        _indexOfInterest[135485]
        _iterator[135486]
      }
      label _breakLabel[135491]
    }
  }
  where {
    (135473 call &&(135467 call ==(135464 'typeof' a)(135466 'typeof' b))(135472 call isAssociativeDom a))
  }
  function +=[135528](ref arg a[135525] :
  _domain, arg b[135531] :
  _domain) : _unknown[43] "assignop" "no return value for void"
  {
    (135548 call |= a b)
  }
  where {
    (135544 call &&(135538 call ==(135535 'typeof' a)(135537 'typeof' b))(135543 call isAssociativeDom a))
  }
  function &[135561](arg a[135558] :
  _domain, arg b[135564] :
  _domain) : _unknown[43]
  {
    unknown newDom[135581](135580 'typeof' a)
    {
      unknown tmp[135626] "temp"(135627 'task_get_serial')
      if(135623 call _cond_test(135592 call !(135589 call .(135586 call . newDom c"_value") c"parSafe")))
      {
        (135629 'task_set_serial' 1)
      }
      Forall {
        induction variables:
          
          unknown k[135620] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
          newDom[135597] 'ref' intent
            init block
            {
            }
            deinit block
            {
            }
        forall body
        {
          if(135614 call _cond_test(135608 call(135603 call . b c"contains") k))
          {
            (135611 call += newDom k)
          }
        }
      }
      (135633 'task_set_serial' tmp[135626])
    }
    (135636 return newDom)
  }
  where {
    (135577 call &&(135571 call ==(135568 'typeof' a)(135570 'typeof' b))(135576 call isAssociativeDom a))
  }
  function &=[135647](ref arg a[135644] :
  _domain, arg b[135650] :
  _domain) : _unknown[43] "assignop" "no return value for void"
  {
    unknown removeSet[135673](135671 call chpl__buildDomainRuntimeType defaultDist(135666 call . a c"idxType"))
    {
      unknown _indexOfInterest[135698] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135699] "expr temp" "temp"
      (135708 'move' _iterator[135699](135706 call _getIterator a))
      Defer
      {
        {
          (135724 call _freeIterator _iterator[135699])
        }
      }
      { scopeless type
        (135713 'move' _indexOfInterest[135698](135710 call iteratorIndex _iterator[135699]))
      }
      ForLoop
      {
        unknown e[135717] "index var" "insert auto destroy"
        (135719 'move' e[135717] _indexOfInterest[135698])
        if(135693 call _cond_test(135686 call !(135685 call(135680 call . b c"contains") e)))
        {
          (135690 call += removeSet e)
        }
        label _continueLabel[135703]
        _indexOfInterest[135698]
        _iterator[135699]
      }
      label _breakLabel[135704]
    }
    {
      unknown _indexOfInterest[135741] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135742] "expr temp" "temp"
      (135751 'move' _iterator[135742](135749 call _getIterator removeSet))
      Defer
      {
        {
          (135767 call _freeIterator _iterator[135742])
        }
      }
      { scopeless type
        (135756 'move' _indexOfInterest[135741](135753 call iteratorIndex _iterator[135742]))
      }
      ForLoop
      {
        unknown e[135760] "index var" "insert auto destroy"
        (135762 'move' e[135760] _indexOfInterest[135741])
        (135739 call(135734 call . a c"remove") e)
        label _continueLabel[135746]
        _indexOfInterest[135741]
        _iterator[135742]
      }
      label _breakLabel[135747]
    }
  }
  where {
    (135663 call &&(135657 call ==(135654 'typeof' a)(135656 'typeof' b))(135662 call isAssociativeDom a))
  }
  function ^[135783](arg a[135780] :
  _domain, arg b[135786] :
  _domain) : _unknown[43]
  {
    unknown newDom[135803](135802 'typeof' a)
    {
      unknown tmp[135876] "temp"(135877 'task_get_serial')
      if(135873 call _cond_test(135814 call !(135811 call .(135808 call . newDom c"_value") c"parSafe")))
      {
        (135879 'task_set_serial' 1)
      }
      {
        Forall {
          induction variables:
            
            unknown k[135841] "index var" "insert auto destroy"
          iterated expressions:
            a
          shadow variables:
          forall body
          {
            if(135835 call _cond_test(135825 call !(135824 call(135819 call . b c"contains") k)))
            {
              (135833 call(135828 call . newDom c"add") k)
            }
          }
        }
        Forall {
          induction variables:
            
            unknown k[135870] "index var" "insert auto destroy"
          iterated expressions:
            b
          shadow variables:
          forall body
          {
            if(135864 call _cond_test(135854 call !(135853 call(135848 call . a c"contains") k)))
            {
              (135862 call(135857 call . newDom c"add") k)
            }
          }
        }
      }
      (135883 'task_set_serial' tmp[135876])
    }
    (135886 return newDom)
  }
  where {
    (135799 call &&(135793 call ==(135790 'typeof' a)(135792 'typeof' b))(135798 call isAssociativeDom a))
  }
  function ^=[135897](ref arg a[135894] :
  _domain, arg b[135900] :
  _domain) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[135946] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[135947] "expr temp" "temp"
      (135956 'move' _iterator[135947](135954 call _getIterator a))
      Defer
      {
        {
          (135972 call _freeIterator _iterator[135947])
        }
      }
      { scopeless type
        (135961 'move' _indexOfInterest[135946](135958 call iteratorIndex _iterator[135947]))
      }
      ForLoop
      {
        unknown e[135965] "index var" "insert auto destroy"
        (135967 'move' e[135965] _indexOfInterest[135946])
        if(135940 call _cond_test(135923 call(135918 call . b c"contains") e))
        {
          (135930 call(135925 call . a c"remove") e)
        }
        {
          (135938 call(135933 call . a c"add") e)
        }
        label _continueLabel[135951]
        _indexOfInterest[135946]
        _iterator[135947]
      }
      label _breakLabel[135952]
    }
  }
  where {
    (135913 call &&(135907 call ==(135904 'typeof' a)(135906 'typeof' b))(135912 call isAssociativeDom a))
  }
  function +=[135989](ref arg sd[135986] :
  _domain, arg inds[135998] :
  (135995 call chpl__buildArrayRuntimeType nil[38](135993 call chpl__buildIndexType sd))) : _unknown[43] "assignop" "no return value for void"
  {
    if(136014 call _cond_test(136010 call ==(136006 call . inds c"size") 0))
    {
      (136012 return _void[47])
    }
    (136029 call(136024 call .(136021 call . sd c"_value") c"dsiBulkAdd") inds)
  }
  where {
    (136004 call isSparseDom sd)
  }
  function +=[136040](ref arg sd[136037] :
  _domain, arg d[136043] :
  _domain) : _unknown[43] "assignop" "no return value for void"
  {
    if(136083 call _cond_test(136079 call ==(136075 call . d c"size") 0))
    {
      (136081 return _void[47])
    }
    const indCount[136093] "const"(136090 call . d c"numIndices")
    unknown arr[136114](136112 call chpl__buildArrayRuntimeType(136110 call chpl__ensureDomainExpr(136103 call chpl__buildDomainExpr(136100 call #(136097 call chpl_build_low_bounded_range 0) indCount)))(136108 call chpl__buildIndexType sd))
    {
      unknown _indexOfInterest[136136] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136137] "expr temp" "temp"
      (136154 'move' _iterator[136137](136127 call _build_tuple(136146 call _getIterator d)(136151 call _getIterator(136149 call chpl_build_low_bounded_range 0))))
      Defer
      {
        {
          (136184 call _freeIterator _iterator[136137])
        }
      }
      { scopeless type
        (136159 'move' _indexOfInterest[136136](136156 call iteratorIndex _iterator[136137]))
      }
      ForLoop
      {
        (136164 call _check_tuple_var_decl _indexOfInterest[136136] 2)
        unknown i[136170] "index var" "insert auto destroy"
        (136172 'move' i[136170](136168 call _indexOfInterest[136136] 1))
        unknown j[136177] "index var" "insert auto destroy"
        (136179 'move' j[136177](136175 call _indexOfInterest[136136] 2))
        (136133 call =(136131 call arr j) i)
        label _continueLabel[136141]
        _indexOfInterest[136136]
        _iterator[136137]
      }
      label _breakLabel[136142]
    }
    unknown rowSorted[136192] 0
    (136207 call(136199 call .(136196 call . sd c"_value") c"dsiBulkAdd") arr rowSorted 1 0)
  }
  where {
    (136072 call &&(136060 call &&(136049 call isSparseDom sd)(136058 call ==(136051 call . d c"rank")(136055 call . sd c"rank")))(136070 call ==(136063 call . sd c"idxType")(136067 call . d c"idxType")))
  }
  function -=[136218](ref arg sd[136215] :
  _domain, arg inds[136227] :
  (136224 call chpl__buildArrayRuntimeType nil[38](136222 call chpl__buildIndexType sd))) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[136241] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136242] "expr temp" "temp"
      (136251 'move' _iterator[136242](136249 call _getIterator inds))
      Defer
      {
        {
          (136267 call _freeIterator _iterator[136242])
        }
      }
      { scopeless type
        (136256 'move' _indexOfInterest[136241](136253 call iteratorIndex _iterator[136242]))
      }
      ForLoop
      {
        unknown ind[136260] "index var" "insert auto destroy"
        (136262 'move' ind[136260] _indexOfInterest[136241])
        (136238 call -= sd ind)
        label _continueLabel[136246]
        _indexOfInterest[136241]
        _iterator[136242]
      }
      label _breakLabel[136247]
    }
  }
  where {
    (136233 call isSparseDom sd)
  }
  function -=[136284](ref arg sd[136281] :
  _domain, arg d[136287] :
  _domain) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[136325] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[136326] "expr temp" "temp"
      (136335 'move' _iterator[136326](136333 call _getIterator d))
      Defer
      {
        {
          (136351 call _freeIterator _iterator[136326])
        }
      }
      { scopeless type
        (136340 'move' _indexOfInterest[136325](136337 call iteratorIndex _iterator[136326]))
      }
      ForLoop
      {
        unknown ind[136344] "index var" "insert auto destroy"
        (136346 'move' ind[136344] _indexOfInterest[136325])
        (136322 call -= sd ind)
        label _continueLabel[136330]
        _indexOfInterest[136325]
        _iterator[136326]
      }
      label _breakLabel[136331]
    }
  }
  where {
    (136316 call &&(136304 call &&(136293 call isSparseDom sd)(136302 call ==(136295 call . d c"rank")(136299 call . sd c"rank")))(136314 call ==(136307 call . sd c"idxType")(136311 call . d c"idxType")))
  }
  function isCollapsedDimension[136378](arg r[136375] :
  (136374 call range unknown e[136365] unknown b[136368] unknown s[136370] unknown a[136372])) param : _unknown[43] "no doc"
  {
    (136381 return 0)
  }
  function isCollapsedDimension[136390](arg r[136388]:_any[170](?)) param : _unknown[43] "no doc"
  {
    (136393 return 1)
  }
  function chpl__anyStridable[136402](arg ranges[136400]:_any[170](?)) param : _unknown[43]
  {
    {
      unknown i[136426] 0
      unknown tmp[136427] "maybe param" "temp"
      (136439 'move' tmp[136427](136437 call chpl_compute_low_param_loop_bound 1(136406 call . ranges c"size")))
      unknown tmp[136428] "maybe param" "temp"
      (136449 'move' tmp[136428](136447 call chpl_compute_high_param_loop_bound 1(136444 call . ranges c"size")))
      unknown tmp[136429] "maybe param" "temp"
      (136452 'move' tmp[136429] 1)
      ParamForLoop
      { i[136426] tmp[136427] tmp[136428] tmp[136429]
        if(136421 call _cond_test(136415 call .(136414 call ranges i) c"stridable"))
        {
          (136419 return 1)
        }
      }
      label _unused_continueLabel[136431]
      label _breakLabel[136430]
    }
    (136465 return 0)
  }
  function chpl__anyRankChangeStridable[136473](arg args[136471]:_any[170](?)) param : _unknown[43]
  {
    {
      unknown i[136509] 0
      unknown tmp[136510] "maybe param" "temp"
      (136522 'move' tmp[136510](136520 call chpl_compute_low_param_loop_bound 1(136477 call . args c"size")))
      unknown tmp[136511] "maybe param" "temp"
      (136532 'move' tmp[136511](136530 call chpl_compute_high_param_loop_bound 1(136527 call . args c"size")))
      unknown tmp[136512] "maybe param" "temp"
      (136535 'move' tmp[136512] 1)
      ParamForLoop
      { i[136509] tmp[136510] tmp[136511] tmp[136512]
        if(136504 call _cond_test(136488 call isRangeValue(136486 call args i)))
        {
          if(136499 call _cond_test(136493 call .(136492 call args i) c"stridable"))
          {
            (136497 return 1)
          }
        }
      }
      label _unused_continueLabel[136514]
      label _breakLabel[136513]
    }
    (136548 return 0)
  }
  function chpl__countRanges[136556](arg arg[136554]:_any[170](?)) param : _unknown[43]
  {
    (136565 return(136563 call _cast int[13](136561 call isRangeValue arg)))
  }
  function chpl__countRanges[136574](arg arg[136572]:_any[170](?), arg args[136577]:_any[170](?) ...) param : _unknown[43]
  {
    (136591 return(136589 call +(136583 call chpl__countRanges arg)(136588 call chpl__countRanges(136586 'expand_tuple' args))))
  }
  function _validRankChangeArgs[136600](arg args[136598]:_any[170](?), arg idxType[136602]:_any[170](?)) param : _unknown[43]
  {
    function _validRankChangeArg[136608](arg idxType[136606]:_any[170](?), arg r[136614] :
    (136613 call range ?[249])) param : _unknown[43]
    {
      (136618 return 1)
    }
    function _validRankChangeArg[136628](arg idxType[136626]:_any[170](?), arg i[136631] :
    idxType) param : _unknown[43]
    {
      (136635 return 1)
    }
    function _validRankChangeArg[136644](arg idxType[136642]:_any[170](?), arg x[136646]:_any[170](?)) param : _unknown[43]
    {
      (136649 return 0)
    }
    function allValid[136656]() param : _unknown[43]
    {
      {
        unknown dim[136684] 0
        unknown tmp[136685] "maybe param" "temp"
        (136697 'move' tmp[136685](136695 call chpl_compute_low_param_loop_bound 1(136660 call . args c"size")))
        unknown tmp[136686] "maybe param" "temp"
        (136707 'move' tmp[136686](136705 call chpl_compute_high_param_loop_bound 1(136702 call . args c"size")))
        unknown tmp[136687] "maybe param" "temp"
        (136710 'move' tmp[136687] 1)
        ParamForLoop
        { dim[136684] tmp[136685] tmp[136686] tmp[136687]
          {
            if(136678 call _cond_test(136673 call !(136672 call _validRankChangeArg idxType(136671 call args dim))))
            {
              (136676 return 0)
            }
          }
        }
        label _unused_continueLabel[136689]
        label _breakLabel[136688]
      }
      (136723 return 1)
    }
    function oneRange[136729]() param : _unknown[43]
    {
      {
        unknown dim[136754] 0
        unknown tmp[136755] "maybe param" "temp"
        (136767 'move' tmp[136755](136765 call chpl_compute_low_param_loop_bound 1(136733 call . args c"size")))
        unknown tmp[136756] "maybe param" "temp"
        (136777 'move' tmp[136756](136775 call chpl_compute_high_param_loop_bound 1(136772 call . args c"size")))
        unknown tmp[136757] "maybe param" "temp"
        (136780 'move' tmp[136757] 1)
        ParamForLoop
        { dim[136754] tmp[136755] tmp[136756] tmp[136757]
          {
            if(136748 call _cond_test(136744 call isRange(136742 call args dim)))
            {
              (136746 return 1)
            }
          }
        }
        label _unused_continueLabel[136759]
        label _breakLabel[136758]
      }
      (136793 return 0)
    }
    function oneNonRange[136799]() param : _unknown[43]
    {
      {
        unknown dim[136826] 0
        unknown tmp[136827] "maybe param" "temp"
        (136839 'move' tmp[136827](136837 call chpl_compute_low_param_loop_bound 1(136803 call . args c"size")))
        unknown tmp[136828] "maybe param" "temp"
        (136849 'move' tmp[136828](136847 call chpl_compute_high_param_loop_bound 1(136844 call . args c"size")))
        unknown tmp[136829] "maybe param" "temp"
        (136852 'move' tmp[136829] 1)
        ParamForLoop
        { dim[136826] tmp[136827] tmp[136828] tmp[136829]
          {
            if(136820 call _cond_test(136815 call !(136814 call isRange(136812 call args dim))))
            {
              (136818 return 1)
            }
          }
        }
        label _unused_continueLabel[136831]
        label _breakLabel[136830]
      }
      (136865 return 0)
    }
    (136882 return(136880 call &&(136875 call &&(136871 call allValid)(136874 call oneRange))(136879 call oneNonRange)))
  }
  function =[136892](ref arg a[136889] :
  _distribution, arg b[136895] :
  _distribution) : _unknown[43] "assignop" "no return value for void"
  {
    if(137050 call _cond_test(136903 call ==(136899 call . a c"_value") nil[38]))
    {
      (136917 'move' a(136916 call chpl__autoCopy(136914 call(136910 call . b c"clone"))))
    }
    {
      if(137046 call _cond_test(136933 call ==(136929 call .(136926 call .(136921 call . a c"_value") c"_doms") c"length") 0))
      {
        if(136967 call _cond_test(136945 call !=(136939 'typeof'(136936 call . a c"_value"))(136944 'typeof'(136941 call . b c"_value"))))
        {
          (136965 call compilerError "type mismatch in distribution assignment")
        }
        if(137000 call _cond_test(136981 call ==(136974 call . a c"_value")(136978 call . b c"_value")))
        {
        }
        {
          (136998 call(136990 call .(136985 call . a c"_value") c"dsiAssign")(136994 call . b c"_value"))
        }
        if(137020 call _cond_test(137011 call _isPrivatized(137007 call . a c"_instance")))
        {
          (137018 call _reprivatize(137014 call . a c"_value"))
        }
      }
      {
        (137043 call halt "assignment to distributions with declared domains is not yet supported")
      }
    }
  }
  function =[137064](ref arg a[137061] :
  _domain, arg b[137067] :
  _domain) : _unknown[43] "assignop" "no return value for void"
  {
    if(137100 call _cond_test(137078 call !=(137071 call . a c"rank")(137075 call . b c"rank")))
    {
      (137098 call compilerError "rank mismatch in domain assignment")
    }
    if(137155 call _cond_test(137118 call &&(137110 call !(137109 call isOpaqueDom a))(137116 call !(137115 call isOpaqueDom b))))
    {
      if(137150 call _cond_test(137128 call !=(137121 call . a c"idxType")(137125 call . b c"idxType")))
      {
        (137148 call compilerError "index type mismatch in domain assignment")
      }
    }
    if(137209 call _cond_test(137168 call &&(137163 call isRectangularDom a)(137167 call isRectangularDom b)))
    {
      if(137204 call _cond_test(137180 call &&(137174 call !(137171 call . a c"stridable"))(137177 call . b c"stridable")))
      {
        (137202 call compilerError "cannot assign from a stridable domain to an unstridable domain without an explicit cast")
      }
    }
    (137225 call(137218 call .(137215 call . a c"_instance") c"dsiAssignDomain") b(lhsPrivate = 0))
    if(137243 call _cond_test(137233 call _isPrivatized(137229 call . a c"_instance")))
    {
      (137240 call _reprivatize(137236 call . a c"_instance"))
    }
  }
  function =[137255](ref arg a[137252] :
  _domain, arg b[137258] :
  _tuple) : _unknown[43] "assignop" "no return value for void"
  {
    (137266 call(137262 call . a c"clear"))
    {
      unknown _indexOfInterest[137289] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137290] "expr temp" "temp"
      (137299 'move' _iterator[137290](137297 call _getIterator(137307 call chpl_direct_range_iter 1(137304 call . b c"size") 1)))
      Defer
      {
        {
          (137323 call _freeIterator _iterator[137290])
        }
      }
      { scopeless type
        (137312 'move' _indexOfInterest[137289](137309 call iteratorIndex _iterator[137290]))
      }
      ForLoop
      {
        unknown ind[137316] "index var" "insert auto destroy"
        (137318 'move' ind[137316] _indexOfInterest[137289])
        {
          (137286 call(137278 call . a c"add")(137284 call b ind))
        }
        label _continueLabel[137294]
        _indexOfInterest[137289]
        _iterator[137290]
      }
      label _breakLabel[137295]
    }
  }
  function =[137338](ref arg d[137335] :
  _domain, arg r[137344] :
  (137343 call range ?[249])) : _unknown[43] "assignop" "no return value for void"
  {
    (137352 call = d(137350 call chpl__buildDomainExpr r))
  }
  function chpl__isLegalRectTupDomAssign[137362](arg d[137360]:_any[170](?), arg t[137364]:_any[170](?)) param : _unknown[43]
  {
    function isRangeTuple[137370](arg a[137368]:_any[170](?)) param : _unknown[43]
    {
      function peelArgs[137376](arg first[137374]:_any[170](?), arg rest[137379]:_any[170](?) ...) param : _unknown[43]
      {
        (137416 return(137413 IfExpr (137387 call >(137383 call . rest c"size") 1) then
        { scopeless
          (137398 call &&(137392 call isRange first)(137397 call peelArgs(137395 'expand_tuple' rest)))
        } else
        { scopeless
          (137411 call &&(137403 call isRange first)(137410 call isRange(137408 call rest 1)))
        } ))
      }
      function peelArgs[137426](arg first[137424]:_any[170](?)) param : _unknown[43]
      {
        (137432 return(137431 call isRange first))
      }
      (137452 return(137449 IfExpr (137441 call !(137440 call isTuple a)) then
      { scopeless
        0
      } else
      { scopeless
        (137448 call peelArgs(137446 'expand_tuple' a))
      } ))
    }
    function strideSafe[137461](arg d[137459]:_any[170](?), arg rt[137463]:_any[170](?), param arg dim[137467] :
    int[13] =
    1) param : _unknown[43]
    {
      (137534 return(137531 IfExpr (137476 call == dim(137473 call . d c"rank")) then
      { scopeless
        (137497 call ||(137485 call .(137484 call(137479 call . d c"dim") dim) c"stridable")(137495 call !(137492 call .(137491 call rt dim) c"stridable")))
      } else
      { scopeless
        (137529 call &&(137518 call ||(137506 call .(137505 call(137500 call . d c"dim") dim) c"stridable")(137516 call !(137513 call .(137512 call rt dim) c"stridable")))(137528 call strideSafe d rt(137526 call + dim 1)))
      } ))
    }
    (137562 return(137560 call &&(137553 call &&(137542 call isRangeTuple t)(137551 call ==(137544 call . d c"rank")(137548 call . t c"size")))(137559 call strideSafe d t)))
  }
  function =[137572](ref arg d[137569] :
  _domain, arg rt[137575] :
  _tuple) : _unknown[43] "assignop" "no return value for void"
  {
    (137589 call = d(137587 call chpl__buildDomainExpr(137585 'expand_tuple' rt)))
  }
  where {
    (137582 call chpl__isLegalRectTupDomAssign d rt)
  }
  function =[137602](ref arg a[137599] :
  _domain, arg b[137604]:_any[170](?)) : _unknown[43] "assignop" "no return value for void"
  {
    if(137630 call _cond_test(137609 call isRectangularDom a))
    {
      (137628 call compilerError "Illegal assignment to a rectangular domain")
    }
    (137641 call(137637 call . a c"clear"))
    {
      unknown _indexOfInterest[137654] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[137655] "expr temp" "temp"
      (137664 'move' _iterator[137655](137662 call _getIterator b))
      Defer
      {
        {
          (137680 call _freeIterator _iterator[137655])
        }
      }
      { scopeless type
        (137669 'move' _indexOfInterest[137654](137666 call iteratorIndex _iterator[137655]))
      }
      ForLoop
      {
        unknown ind[137673] "index var" "insert auto destroy"
        (137675 'move' ind[137673] _indexOfInterest[137654])
        {
          (137651 call(137646 call . a c"add") ind)
        }
        label _continueLabel[137659]
        _indexOfInterest[137654]
        _iterator[137655]
      }
      label _breakLabel[137660]
    }
  }
  function chpl__serializeAssignment[137697](arg a[137694] :
  (137691 call chpl__buildArrayRuntimeType nil[38]), arg b[137699]:_any[170](?)) param : _unknown[43]
  {
    if(137717 call _cond_test(137712 call &&(137706 call !=(137702 call . a c"rank") 1)(137711 call isRange b)))
    {
      (137715 return 1)
    }
    if(137778 call _cond_test(137773 call ||(137743 call &&(137735 call &&(137727 call !(137726 call isRectangularArr a))(137733 call !(137732 call isAssociativeArr a)))(137741 call !(137740 call isSparseArr a)))(137771 call &&(137763 call &&(137755 call &&(137748 call isArray b)(137753 call !(137752 call isRectangularArr b)))(137761 call !(137760 call isAssociativeArr b)))(137769 call !(137768 call isSparseArr b)))))
    {
      (137776 return 1)
    }
    (137784 return 0)
  }
  function chpl__compatibleForBulkTransfer[137796](arg a[137793] :
  (137790 call chpl__buildArrayRuntimeType nil[38]), arg b[137801] :
  (137798 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    if(137810 call _cond_test(137805 call ! useBulkTransfer))
    {
      (137808 return 0)
    }
    if(137829 call _cond_test(137824 call !=(137817 call . a c"eltType")(137821 call . b c"eltType")))
    {
      (137827 return 0)
    }
    if(137846 call _cond_test(137841 call !(137840 call chpl__supportedDataTypeForBulkTransfer(137836 call . a c"eltType"))))
    {
      (137844 return 0)
    }
    (137852 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137860](arg t[137858]:_any[170](?)) param : _unknown[43]
  {
    if(137889 call _cond_test(137872 call ||(328606 'is_subtype' borrowed[200](?) t)(328607 'is_subtype' unmanaged[209](?) t)))
    {
      (137875 return 0)
    }
    {
      unknown x[137879] t
      (137887 return(137886 call chpl__supportedDataTypeForBulkTransfer x))
    }
  }
  function chpl__supportedDataTypeForBulkTransfer[137902](arg x[137899] :
  string[24]) param : _unknown[43]
  {
    (137905 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137916](arg x[137913] :
  _syncvar) param : _unknown[43]
  {
    (137919 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137930](arg x[137927] :
  _singlevar) param : _unknown[43]
  {
    (137933 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137944](arg x[137941] :
  _domain) param : _unknown[43]
  {
    (137947 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137960](arg x[137957] :
  (137954 call chpl__buildArrayRuntimeType nil[38])) param : _unknown[43]
  {
    (137963 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[137974](arg x[137971] :
  _distribution) param : _unknown[43]
  {
    (137977 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[137988](arg x[137985] :
  chpl_anycomplex) param : _unknown[43]
  {
    (137991 return 1)
  }
  function chpl__supportedDataTypeForBulkTransfer[138003](arg x[138000] :
  unknown t[137998]) param : _unknown[43]
  {
    (138019 return(138018 call isPODType t))
  }
  where {
    (138013 call ||(138008 call isRecordType t)(138012 call isTupleType t))
  }
  function chpl__supportedDataTypeForBulkTransfer[138032](arg x[138029] :
  unknown t[138027]) param : _unknown[43]
  {
    (138039 return 0)
  }
  where {
    (138037 call isUnionType t)
  }
  function chpl__supportedDataTypeForBulkTransfer[138052](arg x[138049] :
  (138048 'to borrowed class from unknown' object)) param : _unknown[43]
  {
    (138055 return 0)
  }
  function chpl__supportedDataTypeForBulkTransfer[138064](arg x[138062]:_any[170](?)) param : _unknown[43]
  {
    (138067 return 1)
  }
  function checkArrayShapesUponAssignment[138080](arg a[138077] :
  (138074 call chpl__buildArrayRuntimeType nil[38]), arg b[138085] :
  (138082 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "no doc" "no return value for void"
  {
    if(138262 call _cond_test(138096 call &&(138091 call isRectangularArr a)(138095 call isRectangularArr b)))
    {
      const aDims[138110] "const"(138109 call(138105 call .(138102 call .(138099 call . a c"_value") c"dom") c"dsiDims"))
      const bDims[138125] "const"(138124 call(138120 call .(138117 call .(138114 call . b c"_value") c"dom") c"dsiDims"))
      (138141 call compilerAssert(138138 call ==(138131 call . aDims c"size")(138135 call . bDims c"size")))
      {
        unknown i[138224] 0
        unknown tmp[138225] "maybe param" "temp"
        (138237 'move' tmp[138225](138235 call chpl_compute_low_param_loop_bound 1(138145 call . aDims c"size")))
        unknown tmp[138226] "maybe param" "temp"
        (138247 'move' tmp[138226](138245 call chpl_compute_high_param_loop_bound 1(138242 call . aDims c"size")))
        unknown tmp[138227] "maybe param" "temp"
        (138250 'move' tmp[138227] 1)
        ParamForLoop
        { i[138224] tmp[138225] tmp[138226] tmp[138227]
          {
            if(138218 call _cond_test(138164 call !=(138154 call .(138153 call aDims i) c"length")(138161 call .(138160 call bDims i) c"length")))
            {
              (138216 call halt "assigning between arrays of different shapes in dimension " i ": "(138190 call .(138189 call aDims i) c"length") " vs. "(138213 call .(138212 call bDims i) c"length"))
            }
          }
        }
        label _unused_continueLabel[138229]
        label _breakLabel[138228]
      }
    }
    {
    }
  }
  function =[138277](ref arg a[138274] :
  (138271 call chpl__buildArrayRuntimeType nil[38]), arg b[138282] :
  (138279 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    if(138315 call _cond_test(138293 call !=(138286 call . a c"rank")(138290 call . b c"rank")))
    {
      (138313 call compilerError "rank mismatch in array assignment")
    }
    if(138330 call _cond_test(138326 call ==(138322 call . b c"_value") nil[38]))
    {
      (138328 return _void[47])
    }
    if(138348 call _cond_test(138343 call ==(138336 call . a c"_value")(138340 call . b c"_value")))
    {
      (138345 return _void[47])
    }
    if(138370 call _cond_test(138366 call &&(138357 call ==(138353 call . a c"size") 0)(138364 call ==(138360 call . b c"size") 0)))
    {
      (138368 return _void[47])
    }
    if(138382 call _cond_test boundsChecking)
    {
      (138380 call checkArrayShapesUponAssignment a b)
    }
    (138391 call chpl__uncheckedArrayTransfer a b)
  }
  function chpl__uncheckedArrayTransfer[138403](ref arg a[138400] :
  (138397 call chpl__buildArrayRuntimeType nil[38]), arg b[138408] :
  (138405 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "no return value for void"
  {
    if(138452 call _cond_test(138423 call &&(138416 call !(138415 call chpl__serializeAssignment a b))(138422 call chpl__compatibleForBulkTransfer a b)))
    {
      if(138440 call _cond_test(138431 call ==(138429 call chpl__bulkTransferArray a b) 0))
      {
        (138437 call chpl__transferArray a b)
      }
    }
    {
      (138449 call chpl__transferArray a b)
    }
  }
  function chpl__bulkTransferArray[138469](ref arg a[138466] :
  (138464 call chpl__buildArrayRuntimeType unknown AD[138461]), arg b[138476] :
  (138474 call chpl__buildArrayRuntimeType unknown BD[138471])) : _unknown[43] "inline"
  {
    (138486 return(138485 call chpl__bulkTransferArray a AD b BD))
  }
  function chpl__bulkTransferArray[138499](ref arg a[138496] :
  (138493 call chpl__buildArrayRuntimeType nil[38]), arg AD[138502] :
  _domain, const  ref arg b[138508] :
  (138505 call chpl__buildArrayRuntimeType nil[38]), arg BD[138512] :
  _domain) : _unknown[43] "inline"
  {
    (138528 return(138527 call chpl__bulkTransferArray(138517 call . a c"_value") AD(138523 call . b c"_value") BD))
  }
  function chpl__bulkTransferArray[138537](arg destClass[138535]:_any[170](?), arg destDom[138540] :
  _domain, arg srcClass[138543]:_any[170](?), arg srcDom[138546] :
  _domain) : _unknown[43] "inline"
  {
    unknown success[138550] 0
    function bulkTransferDebug[138560](arg msg[138557] :
    string[24]) : _unknown[43] "inline" "no return value for void"
    {
      if(138584 call _cond_test debugBulkTransfer)
      {
        (138582 call chpl_debug_writeln "proc =(a:[],b:[]): " msg)
      }
    }
    (138610 call bulkTransferDebug "in chpl__bulkTransferArray")
    if(138854 call _cond_test(138634 call canResolveMethod destClass "doiBulkTransferFromKnown" destDom srcClass srcDom))
    {
      (138653 call bulkTransferDebug "attempting doiBulkTransferFromKnown")
      (138666 call = success(138665 call(138658 call . destClass c"doiBulkTransferFromKnown") destDom srcClass srcDom))
    }
    {
      if(138849 call _cond_test(138691 call canResolveMethod srcClass "doiBulkTransferToKnown" srcDom destClass destDom))
      {
        (138710 call bulkTransferDebug "attempting doiBulkTransferToKnown")
        (138723 call = success(138722 call(138715 call . srcClass c"doiBulkTransferToKnown") srcDom destClass destDom))
      }
      {
        if(138844 call _cond_test(138748 call canResolveMethod destClass "doiBulkTransferFromAny" destDom srcClass srcDom))
        {
          (138767 call bulkTransferDebug "attempting doiBulkTransferFromAny")
          (138780 call = success(138779 call(138772 call . destClass c"doiBulkTransferFromAny") destDom srcClass srcDom))
        }
        {
          if(138840 call _cond_test(138805 call canResolveMethod srcClass "doiBulkTransferToAny" srcDom destClass destDom))
          {
            (138824 call bulkTransferDebug "attempting doiBulkTransferToAny")
            (138837 call = success(138836 call(138829 call . srcClass c"doiBulkTransferToAny") srcDom destClass destDom))
          }
        }
      }
    }
    if(138900 call _cond_test success)
    {
      (138878 call bulkTransferDebug "successfully completed bulk transfer")
    }
    {
      (138898 call bulkTransferDebug "bulk transfer did not happen")
    }
    (138907 return success)
  }
  function chpl__transferArray[138919](ref arg a[138916] :
  (138913 call chpl__buildArrayRuntimeType nil[38]), const  ref arg b[138921]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    if(139058 call _cond_test(138945 call ||(138929 call ==(138924 call . a c"eltType")(138928 'typeof' b))(138943 call &&(138937 call _isPrimitiveType(138933 call . a c"eltType"))(138942 call _isPrimitiveType(138940 'typeof' b)))))
    {
      Forall {
        induction variables:
          
          unknown aa[138955] "index var" "insert auto destroy"
        iterated expressions:
          a
        shadow variables:
        forall body
        {
          (138951 call = aa b)
        }
      }
    }
    {
      if(139054 call _cond_test(138963 call chpl__serializeAssignment a b))
      {
        {
          unknown _indexOfInterest[138978] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[138979] "expr temp" "temp"
          (138993 'move' _iterator[138979](138972 call _build_tuple(138988 call _getIterator a)(138991 call _getIterator b)))
          Defer
          {
            {
              (139023 call _freeIterator _iterator[138979])
            }
          }
          { scopeless type
            (138998 'move' _indexOfInterest[138978](138995 call iteratorIndex _iterator[138979]))
          }
          ForLoop
          {
            (139003 call _check_tuple_var_decl _indexOfInterest[138978] 2)
            unknown aa[139009] "index var" "insert auto destroy"
            (139011 'move' aa[139009](139007 call _indexOfInterest[138978] 1))
            unknown bb[139016] "index var" "insert auto destroy"
            (139018 'move' bb[139016](139014 call _indexOfInterest[138978] 2))
            (138975 call = aa bb)
            label _continueLabel[138983]
            _indexOfInterest[138978]
            _iterator[138979]
          }
          label _breakLabel[138984]
        }
      }
      {
        Forall {
          induction variables:
            
            unknown aa[139048] "index var" "insert auto destroy"
            
            unknown bb[139050] "index var" "insert auto destroy"
          iterated expressions:
            a
            b
          shadow variables:
          forall body
          {
            (139043 call = aa bb)
          }
        }
      }
    }
  }
  function chpl__transferArray[139074](arg a[139071] :
  (139068 call chpl__buildArrayRuntimeType nil[38]), param arg b[139076]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown aa[139086] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139082 call = aa b)
      }
    }
  }
  function =[139100](ref arg a[139097] :
  (139094 call chpl__buildArrayRuntimeType nil[38]), arg b[139103] :
  _domain) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    if(139121 call _cond_test(139114 call !=(139107 call . a c"rank")(139111 call . b c"rank")))
    {
      (139119 call compilerError "rank mismatch in array assignment")
    }
    (139131 call chpl__transferArray a b)
  }
  function =[139143](arg a[139140] :
  (139137 call chpl__buildArrayRuntimeType nil[38]), arg b[139149] :
  (139148 call range ?[249])) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    if(139185 call _cond_test(139157 call ==(139153 call . a c"rank") 1))
    {
      (139163 call chpl__transferArray a b)
    }
    {
      (139183 call compilerError "cannot from ranges to multidimensional arrays")
    }
  }
  function =[139202](ref arg a[139199] :
  (139196 call chpl__buildArrayRuntimeType nil[38]), arg b[139204]:_any[170](?)) : _unknown[43] "assignop" "inline" "no return value for void"
  {
    (139210 call chpl__transferArray a b)
  }
  function =[139223](ref arg a[139220] :
  (139217 call chpl__buildArrayRuntimeType nil[38]), arg b[139226] :
  _tuple) : _unknown[43] "assignop" "no return value for void"
  {
    function chpl__tupleInit[139237](ref arg j[139235]:_any[170](?), param arg rank[139240] :
    int[13], arg b[139244] :
    _tuple) : _unknown[43] "no return value for void"
    {
      unknown idxType[139273] "type variable"(139257 call .(139254 call . a c"_dom") c"idxType")
      unknown strType[139270] "type variable"(139269 call chpl__signedType(139265 call .(139262 call . a c"_dom") c"intIdxType"))
      const stride[139299] "const"(139296 call .(139295 call(139281 call .(139278 call . a c"_dom") c"dim")(139292 call +(139289 call -(139285 call . a c"rank") rank) 1)) c"stride")
      const start[139324] "const"(139321 call .(139320 call(139306 call .(139303 call . a c"_dom") c"dim")(139317 call +(139314 call -(139310 call . a c"rank") rank) 1)) c"firstAsInt")
      if(139513 call _cond_test(139329 call == rank 1))
      {
        {
          unknown i[139383] 0
          unknown tmp[139384] "maybe param" "temp"
          (139396 'move' tmp[139384](139394 call chpl_compute_low_param_loop_bound 1(139333 call . b c"size")))
          unknown tmp[139385] "maybe param" "temp"
          (139406 'move' tmp[139385](139404 call chpl_compute_high_param_loop_bound 1(139401 call . b c"size")))
          unknown tmp[139386] "maybe param" "temp"
          (139409 'move' tmp[139386] 1)
          ParamForLoop
          { i[139383] tmp[139384] tmp[139385] tmp[139386]
            {
              (139368 call =(139350 call j(139347 call +(139344 call -(139340 call . a c"rank") rank) 1))(139367 call chpl__intToIdx idxType(139365 call +(139356 call _cast strType start)(139363 call *(139360 call - i 1) stride))))
              (139380 call =(139375 call a j)(139379 call b i))
            }
          }
          label _unused_continueLabel[139388]
          label _breakLabel[139387]
        }
      }
      {
        {
          unknown i[139475] 0
          unknown tmp[139476] "maybe param" "temp"
          (139488 'move' tmp[139476](139486 call chpl_compute_low_param_loop_bound 1(139423 call . b c"size")))
          unknown tmp[139477] "maybe param" "temp"
          (139498 'move' tmp[139477](139496 call chpl_compute_high_param_loop_bound 1(139493 call . b c"size")))
          unknown tmp[139478] "maybe param" "temp"
          (139501 'move' tmp[139478] 1)
          ParamForLoop
          { i[139475] tmp[139476] tmp[139477] tmp[139478]
            {
              (139458 call =(139440 call j(139437 call +(139434 call -(139430 call . a c"rank") rank) 1))(139457 call chpl__intToIdx idxType(139455 call +(139446 call _cast strType start)(139453 call *(139450 call - i 1) stride))))
              (139473 call chpl__tupleInit j(139467 call - rank 1)(139472 call b i))
            }
          }
          label _unused_continueLabel[139480]
          label _breakLabel[139479]
        }
      }
    }
    {
      (139251 call <(139248 'lifetime_of' a)(139250 'lifetime_of' b))
    }
    unknown j[139534](139532 call *(139522 call . a c"rank")(139529 call .(139526 call . a c"_dom") c"idxType"))
    (139545 call chpl__tupleInit j(139541 call . a c"rank") b)
  }
  where {
    (139232 call isRectangularArr a)
  }
  function _desync[139556](arg t[139553] :
  _syncvar) type : _unknown[43]
  {
    unknown x[139559] t
    (139567 return(139564 call . x c"valType"))
  }
  function _desync[139577](arg t[139574] :
  _singlevar) type : _unknown[43]
  {
    unknown x[139580] t
    (139588 return(139585 call . x c"valType"))
  }
  function _desync[139596](arg t[139594]:_any[170](?)) type : _unknown[43]
  {
    (139599 return t)
  }
  function =[139612](ref arg a[139609] :
  (139606 call chpl__buildArrayRuntimeType nil[38]), arg b[139621] :
  (139620 call _desync(139616 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139632] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139628 call = e b)
      }
    }
  }
  function +=[139646](arg a[139643] :
  (139640 call chpl__buildArrayRuntimeType nil[38]), arg b[139655] :
  (139654 call _desync(139650 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139666] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139662 call += e b)
      }
    }
  }
  function -=[139680](arg a[139677] :
  (139674 call chpl__buildArrayRuntimeType nil[38]), arg b[139689] :
  (139688 call _desync(139684 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139700] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139696 call -= e b)
      }
    }
  }
  function *=[139714](arg a[139711] :
  (139708 call chpl__buildArrayRuntimeType nil[38]), arg b[139723] :
  (139722 call _desync(139718 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139734] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139730 call *= e b)
      }
    }
  }
  function /=[139748](arg a[139745] :
  (139742 call chpl__buildArrayRuntimeType nil[38]), arg b[139757] :
  (139756 call _desync(139752 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139768] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139764 call /= e b)
      }
    }
  }
  function %=[139782](arg a[139779] :
  (139776 call chpl__buildArrayRuntimeType nil[38]), arg b[139791] :
  (139790 call _desync(139786 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139802] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139798 call %= e b)
      }
    }
  }
  function **=[139816](arg a[139813] :
  (139810 call chpl__buildArrayRuntimeType nil[38]), arg b[139825] :
  (139824 call _desync(139820 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139836] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139832 call **= e b)
      }
    }
  }
  function &=[139850](arg a[139847] :
  (139844 call chpl__buildArrayRuntimeType nil[38]), arg b[139859] :
  (139858 call _desync(139854 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139870] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139866 call &= e b)
      }
    }
  }
  function |=[139884](arg a[139881] :
  (139878 call chpl__buildArrayRuntimeType nil[38]), arg b[139893] :
  (139892 call _desync(139888 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139904] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139900 call |= e b)
      }
    }
  }
  function ^=[139918](arg a[139915] :
  (139912 call chpl__buildArrayRuntimeType nil[38]), arg b[139927] :
  (139926 call _desync(139922 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139938] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139934 call ^= e b)
      }
    }
  }
  function >>=[139952](arg a[139949] :
  (139946 call chpl__buildArrayRuntimeType nil[38]), arg b[139961] :
  (139960 call _desync(139956 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[139972] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (139968 call >>= e b)
      }
    }
  }
  function <<=[139986](arg a[139983] :
  (139980 call chpl__buildArrayRuntimeType nil[38]), arg b[139995] :
  (139994 call _desync(139990 call . a c"eltType"))) : _unknown[43] "assignop" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown e[140006] "index var" "insert auto destroy"
      iterated expressions:
        a
      shadow variables:
      forall body
      {
        (140002 call <<= e b)
      }
    }
  }
  function chpl_by[140018](arg a[140015] :
  _domain, arg b[140020]:_any[170](?)) : _unknown[43]
  {
    unknown r[140043](140041 call *(140023 call . a c"rank")(140040 call range(140031 call .(140028 call . a c"_value") c"idxType")(140036 call . BoundedRangeType c"bounded") 1))
    unknown t[140057](140056 call _makeIndexTuple(140049 call . a c"rank") b(expand = 1))
    {
      unknown i[140087] 0
      unknown tmp[140088] "maybe param" "temp"
      (140100 'move' tmp[140088](140098 call chpl_compute_low_param_loop_bound 1(140062 call . a c"rank")))
      unknown tmp[140089] "maybe param" "temp"
      (140110 'move' tmp[140089](140108 call chpl_compute_high_param_loop_bound 1(140105 call . a c"rank")))
      unknown tmp[140090] "maybe param" "temp"
      (140113 'move' tmp[140090] 1)
      ParamForLoop
      { i[140087] tmp[140088] tmp[140089] tmp[140090]
        (140084 call =(140070 call r i)(140082 call chpl_by(140077 call(140072 call . a c"dim") i)(140081 call t i)))
      }
      label _unused_continueLabel[140092]
      label _breakLabel[140091]
    }
    (140145 return(140144 'new'(140143 call _domain(140126 call . a c"dist")(140131 call . a c"rank")(140138 call .(140135 call . a c"_value") c"idxType") 1 r)))
  }
  function chpl_align[140155](arg a[140152] :
  _domain, arg b[140157]:_any[170](?)) : _unknown[43]
  {
    unknown r[140183](140181 call *(140160 call . a c"rank")(140180 call range(140168 call .(140165 call . a c"_value") c"idxType")(140173 call . BoundedRangeType c"bounded")(140177 call . a c"stridable")))
    unknown t[140197](140196 call _makeIndexTuple(140189 call . a c"rank") b(expand = 1))
    {
      unknown i[140227] 0
      unknown tmp[140228] "maybe param" "temp"
      (140240 'move' tmp[140228](140238 call chpl_compute_low_param_loop_bound 1(140202 call . a c"rank")))
      unknown tmp[140229] "maybe param" "temp"
      (140250 'move' tmp[140229](140248 call chpl_compute_high_param_loop_bound 1(140245 call . a c"rank")))
      unknown tmp[140230] "maybe param" "temp"
      (140253 'move' tmp[140230] 1)
      ParamForLoop
      { i[140227] tmp[140228] tmp[140229] tmp[140230]
        (140224 call =(140210 call r i)(140222 call chpl_align(140217 call(140212 call . a c"dim") i)(140221 call t i)))
      }
      label _unused_continueLabel[140232]
      label _breakLabel[140231]
    }
    (140288 return(140287 'new'(140286 call _domain(140266 call . a c"dist")(140271 call . a c"rank")(140278 call .(140275 call . a c"_value") c"idxType")(140282 call . a c"stridable") r)))
  }
  type _OpaqueIndex[140304] unknown node[140295] 0 int[13] unknown i[140300] 0 uint[107]
  unknown _OpaqueIndexNext[140310] "locale private" "no doc"(140308 call chpl__atomicType uint[107])
  function <=>[140321](arg x[140318] :
  (140315 call chpl__buildArrayRuntimeType nil[38]), arg y[140326] :
  (140323 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "no return value for void"
  {
    Forall {
      induction variables:
        
        unknown a[140344] "index var" "insert auto destroy"
        
        unknown b[140346] "index var" "insert auto destroy"
      iterated expressions:
        x
        y
      shadow variables:
      forall body
      {
        (140340 call <=> a b)
      }
    }
  }
  function reshape[140360](arg A[140357] :
  (140354 call chpl__buildArrayRuntimeType nil[38]), arg D[140363] :
  _domain) : _unknown[43]
  {
    if(140397 call _cond_test(140370 call !(140369 call isRectangularDom D)))
    {
      (140395 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(140393 call _cast string[24](140391 'typeof' D)))
    }
    if(140473 call _cond_test(140411 call !=(140404 call . A c"size")(140408 call . D c"size")))
    {
      (140471 call halt "reshape(A,D) is invoked when A has "(140432 call . A c"size") " elements, but D has "(140452 call . D c"size") " indices")
    }
    unknown B[140488](140486 call chpl__buildArrayRuntimeType(140484 call chpl__ensureDomainExpr D)(140481 call . A c"eltType"))
    {
      unknown _indexOfInterest[140508] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[140509] "expr temp" "temp"
      (140523 'move' _iterator[140509](140499 call _build_tuple(140518 call _getIterator D)(140521 call _getIterator A)))
      Defer
      {
        {
          (140553 call _freeIterator _iterator[140509])
        }
      }
      { scopeless type
        (140528 'move' _indexOfInterest[140508](140525 call iteratorIndex _iterator[140509]))
      }
      ForLoop
      {
        (140533 call _check_tuple_var_decl _indexOfInterest[140508] 2)
        unknown i[140539] "index var" "insert auto destroy"
        (140541 'move' i[140539](140537 call _indexOfInterest[140508] 1))
        unknown a[140546] "index var" "insert auto destroy"
        (140548 'move' a[140546](140544 call _indexOfInterest[140508] 2))
        (140505 call =(140503 call B i) a)
        label _continueLabel[140513]
        _indexOfInterest[140508]
        _iterator[140509]
      }
      label _breakLabel[140514]
    }
    (140561 return B)
  }
  function reshape[140571](arg A[140568] :
  _iteratorRecord, arg D[140574] :
  _domain) : _unknown[43] "no doc"
  {
    if(140593 call _cond_test(140581 call !(140580 call isRectangularDom D)))
    {
      (140591 call compilerError "reshape(A,D) is meaningful only when D is a rectangular domain; got D: "(140589 call _cast string[24](140587 'typeof' D)))
    }
    unknown B[140616](140610 for (140602 call _build_tuple i a)  in  zip(140607 call _build_tuple D A) do
    {
      a
    } )
    (140620 return B)
  }
  function linearize[140628](arg Xs[140626]:_any[170](?)) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[140635] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[140636] "expr temp" "temp"
      (140645 'move' _iterator[140636](140643 call _getIterator Xs))
      Defer
      {
        {
          (140661 call _freeIterator _iterator[140636])
        }
      }
      { scopeless type
        (140650 'move' _indexOfInterest[140635](140647 call iteratorIndex _iterator[140636]))
      }
      ForLoop
      {
        unknown x[140654] "index var" "insert auto destroy"
        (140656 'move' x[140654] _indexOfInterest[140635])
        (140633 yield x)
        label _continueLabel[140640]
        _indexOfInterest[140635]
        _iterator[140636]
      }
      label _breakLabel[140641]
    }
  }
  function chpl__unalias[140677](arg x[140674] :
  _domain) : _unknown[43] "inline" "unalias fn"
  {
    if(140699 call _cond_test(140692 call !=(140686 call _to_unmanaged(140684 'typeof'(140681 call . x c"_instance")))(140691 'typeof'(140688 call . x c"_instance"))))
    {
      (140697 call compilerError "Domain on borrow created")
    }
    if(140725 call _cond_test(140706 call . x c"_unowned"))
    {
      unknown ret[140710] "no auto destroy" x
      (140715 return ret)
    }
    {
      unknown ret[140718] "no copy" x
      (140723 return ret)
    }
  }
  function chpl__initCopy[140739](const  ref arg a[140736] :
  (140733 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "init copy fn"
  {
    unknown b[140754](140752 call chpl__buildArrayRuntimeType(140750 call chpl__ensureDomainExpr(140742 call . a c"_dom"))(140747 call . a c"eltType"))
    (140762 call chpl__uncheckedArrayTransfer b a)
    (140765 return b)
  }
  function chpl__autoCopy[140777](const  ref arg x[140774] :
  (140771 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "auto copy fn"
  {
    unknown b[140783] "no copy"(140782 call chpl__initCopy x)
    (140788 return b)
  }
  function chpl__unref[140800](arg x[140797] :
  (140794 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "no copy return" "unref fn"
  {
    unknown ret[140810] "no auto destroy" x
    (140815 return ret)
  }
  where {
    (140808 call chpl__isArrayView(140804 call . x c"_value"))
  }
  function chpl__unref[140826](arg ir[140823] :
  _iteratorRecord) : _unknown[43] "no copy return" "unref fn"
  {
    unknown toArray[140832] "no auto destroy" "no copy"(140831 call chpl__initCopy ir)
    (140837 return toArray)
  }
  function chpl__unref[140849](arg x[140846] :
  (140843 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "no copy return"
  {
    unknown ret[140852] "no copy" x
    (140857 return ret)
  }
  function chpl__unalias[140869](arg x[140866] :
  (140863 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline" "unalias fn"
  {
    unknown isview[140902] "param"(140900 call ||(140889 call ||(140879 call(140875 call .(140872 call . x c"_value") c"isSliceArrayView"))(140888 call(140884 call .(140881 call . x c"_value") c"isRankChangeArrayView")))(140899 call(140895 call .(140892 call . x c"_value") c"isReindexArrayView")))
    const isalias[140910] "const"(140907 call . x c"_unowned")
    if(140938 call _cond_test(140915 call || isview isalias))
    {
      unknown ret[140918] "no auto destroy" x
      (140925 call chpl__autoDestroy x)
      (140928 return ret)
    }
    {
      unknown ret[140931] "no copy" x
      (140936 return ret)
    }
  }
  function chpl__initCopy[140950](arg ir[140947] :
  _iteratorRecord) : _unknown[43] "init copy fn"
  {
    unknown shape[140964](140963 'new'(140962 call _domain(140958 call . ir c"_shape_")))
    (140973 call =(140969 call . shape c"_unowned") 1)
    (140981 return(140980 call chpl__initCopy_shapeHelp shape ir))
  }
  where {
    (140955 call chpl_iteratorHasDomainShape ir)
  }
  function chpl__initCopy[140992](arg ir[140989] :
  _iteratorRecord) : _unknown[43] "init copy fn"
  {
    unknown shape[141013] "insert auto destroy"(141011 call chpl__buildDomainExpr(141007 call . ir c"_shape_"))
    (141022 return(141021 call chpl__initCopy_shapeHelp shape ir))
  }
  where {
    (141004 call &&(140997 call chpl_iteratorHasRangeShape ir)(141002 call !(141001 call chpl_iteratorFromForExpr ir)))
  }
  function chpl__initCopy_shapeHelp[141033](arg shape[141030] :
  _domain, arg ir[141036] :
  _iteratorRecord) : _unknown[43]
  {
    unknown result[141050](141048 call chpl__buildArrayRuntimeType(141046 call chpl__ensureDomainExpr shape)(141045 call iteratorToArrayElementType(141043 'typeof' ir)))
    if(141083 call _cond_test(141060 call isArray(141056 call . result c"eltType")))
    {
      (141081 call compilerError "creating an array of arrays using a for- or forall-expression is not supported, except when using a for-expression over a rang)
    }
    if(141180 call _cond_test(141091 call chpl_iteratorFromForExpr ir))
    {
      {
        unknown _indexOfInterest[141106] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[141107] "expr temp" "temp"
        (141121 'move' _iterator[141107](141100 call _build_tuple(141116 call _getIterator result)(141119 call _getIterator ir)))
        Defer
        {
          {
            (141151 call _freeIterator _iterator[141107])
          }
        }
        { scopeless type
          (141126 'move' _indexOfInterest[141106](141123 call iteratorIndex _iterator[141107]))
        }
        ForLoop
        {
          (141131 call _check_tuple_var_decl _indexOfInterest[141106] 2)
          unknown r[141137] "index var" "insert auto destroy"
          (141139 'move' r[141137](141135 call _indexOfInterest[141106] 1))
          unknown src[141144] "index var" "insert auto destroy"
          (141146 'move' src[141144](141142 call _indexOfInterest[141106] 2))
          (141103 call = r src)
          label _continueLabel[141111]
          _indexOfInterest[141106]
          _iterator[141107]
        }
        label _breakLabel[141112]
      }
    }
    {
      Forall {
        induction variables:
          
          unknown r[141174] "index var" "insert auto destroy"
          
          unknown src[141176] "index var" "insert auto destroy"
        iterated expressions:
          result
          ir
        shadow variables:
        forall body
        {
          (141170 call = r src)
        }
      }
    }
    (141185 return result)
  }
  function chpl__initCopy[141195](arg ir[141192] :
  _iteratorRecord) : _unknown[43] "init copy fn"
  {
    unknown shapeful[141201] "param"(141200 call chpl_iteratorHasRangeShape ir)
    unknown r[141217](141214 IfExpr  shapeful then
    { scopeless
      (141207 call . ir c"_shape_")
    } else
    { scopeless
      (141212 call chpl_build_bounded_range 1 0)
    } )
    unknown i[141221] 0
    unknown size[141231](141229 call _cast size_t(141225 call . r c"size"))
    unknown elemType[141239] "type variable"(141238 call iteratorToArrayElementType(141236 'typeof' ir))
    unknown data[141247] nil[38](141245 call _ddata elemType)
    unknown callPostAlloc[141251] bool[10]
    unknown subloc[141255] c_sublocid_none
    function allocateData[141262](param arg initialAlloc[141260]:_any[170](?), arg allocSize[141264]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
    {
      if(141348 call _cond_test initialAlloc)
      {
        function chpl_mem_array_alloc[141273](arg nmemb[141270] :
        size_t, arg eltSize[141276] :
        size_t, arg subloc[141280] :
        chpl_sublocID_t, ref arg callPostAlloc[141284] :
        bool[10]) : _unknown[43] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
        {
        }
        { scopeless type
          c_void_ptr
        }
        (141310 call = data(141308 call _cast(141307 'typeof' data)(141305 call chpl_mem_array_alloc(141296 call _cast size_t allocSize)(141302 call _ddata_sizeof_element data) subloc callPostAlloc)))
      }
      {
        function chpl_mem_array_postAlloc[141319](arg data[141316] :
        c_void_ptr, arg nmemb[141322] :
        size_t, arg eltSize[141326] :
        size_t) : void[4] "extern" "insert line file info" "local args" "no fn body" "no return value for void"
        {
        }
        (141346 call chpl_mem_array_postAlloc(141335 call _cast c_void_ptr data)(141340 call _cast size_t allocSize)(141345 call _ddata_sizeof_element data))
      }
    }
    if(141365 call _cond_test(141357 call > size 0))
    {
      (141363 call allocateData 1 size)
    }
    {
      unknown _indexOfInterest[141506] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[141507] "expr temp" "temp"
      (141516 'move' _iterator[141507](141514 call _getIterator ir))
      Defer
      {
        {
          (141532 call _freeIterator _iterator[141507])
        }
      }
      { scopeless type
        (141521 'move' _indexOfInterest[141506](141518 call iteratorIndex _iterator[141507]))
      }
      ForLoop
      {
        unknown elt[141525] "index var" "insert auto destroy"
        (141527 'move' elt[141525] _indexOfInterest[141506])
        {
          unknown eltCopy[141376] "no auto destroy" "no copy"(141375 call chpl__initCopy elt)
          if(141488 call _cond_test(141382 call >= i size))
          {
            unknown oldSize[141385] size
            unknown oldData[141390] data
            if(141410 call _cond_test(141395 call == size 0))
            {
              (141399 call = size 4)
            }
            {
              (141407 call = size(141405 call * 2 size))
            }
            (141420 call allocateData 1 size)
            {
              unknown _indexOfInterest[141442] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[141443] "expr temp" "temp"
              (141452 'move' _iterator[141443](141450 call _getIterator(141459 call chpl_direct_counted_range_iter 0 oldSize)))
              Defer
              {
                {
                  (141475 call _freeIterator _iterator[141443])
                }
              }
              { scopeless type
                (141464 'move' _indexOfInterest[141442](141461 call iteratorIndex _iterator[141443]))
              }
              ForLoop
              {
                unknown i[141468] "index var" "insert auto destroy"
                (141470 'move' i[141468] _indexOfInterest[141442])
                {
                  (141439 '='(141434 call data i)(141438 call oldData i))
                }
                label _continueLabel[141447]
                _indexOfInterest[141442]
                _iterator[141443]
              }
              label _breakLabel[141448]
            }
            (141486 call _ddata_free oldData oldSize)
          }
          (141499 '='(141497 call data i) eltCopy)
          (141503 call += i 1)
        }
        label _continueLabel[141511]
        _indexOfInterest[141506]
        _iterator[141507]
      }
      label _breakLabel[141512]
    }
    if(141557 call _cond_test(141547 call && shapeful(141545 call < i(141542 call . r c"size"))))
    {
      (141554 call = r(141552 call # r i))
    }
    if(141575 call _cond_test(141563 call ! shapeful))
    {
      (141572 call = r(141570 call #(141567 call chpl_build_low_bounded_range 1) i))
    }
    unknown D[141584] "insert auto destroy"(141582 call chpl__buildDomainExpr r)
    if(141709 call _cond_test(141589 call != data nil[38]))
    {
      if(141598 call _cond_test callPostAlloc)
      {
        (141596 call allocateData 0 size)
      }
      unknown A[141622](141621 call(141607 call . D c"buildArrayWith")(141614 'typeof'(141613 call data 0)) data(141619 call _cast int[13] size))
      (141636 call chpl_decRefCountsForDomainsInArrayEltTypes(141627 call . A c"_value")(141635 'typeof'(141634 call data 0)))
      (141646 call =(141642 call .(141639 call . A c"_value") c"_decEltRefCounts") 0)
      (141667 'auto destroy runtime type' elemType)
      (141670 return A)
    }
    {
      (141676 call allocateData 1 1)
      if(141686 call _cond_test callPostAlloc)
      {
        (141684 call allocateData 0 1)
      }
      unknown A[141703](141702 call(141692 call . D c"buildArrayWith") elemType data(141700 call _cast int[13] size))
      (141707 return A)
    }
  }
  function chpl_checkCopyInit[141721](arg lhs[141718] :
  _domain, arg rhs[141724] :
  _domain) param : _unknown[43] "no return value for void"
  {
    if(141779 call _cond_test(141755 call &&(141740 call(141736 call .(141731 call .(141728 call . lhs c"dist") c"_value") c"dsiIsLayout"))(141753 call !(141752 call(141748 call .(141745 call .(141742 call . rhs c"dist") c"_value") c"dsiIsLayout")))))
    {
      (141777 call compilerWarning "initializing a non-distributed domain from a distributed domain. If you didn't mean to do that, add a dmapped clause to the ty)
    }
  }
}