AST dump for DefaultSparse after pass createTaskFunctions.
Module use list: ChapelStandard RangeChunk Search Sort 

{
  function chpl__init_DefaultSparse[390225]() : void[4] "insert line file info" "module init"
  {
    (492344 'init var' debugDefaultSparse[159041] 0)
    (472155 return _void[47])
  }
  unknown debugDefaultSparse[159041] "config" "param"
  function DefaultSparseDom[161702](?).linksDistribution[159072](arg _mt[161706]:_MT[227], arg this[161704]:DefaultSparseDom[161702](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[471645] "RVV" "param" "temp"
    (471650 'move' ret[471645](471649 'deref' 0))
    (471647 return ret[471645])
  }
  function DefaultSparseDom[161702](?).dsiLinksDistribution[159082](arg _mt[161710]:_MT[227], arg this[161708]:DefaultSparseDom[161702](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[471654] "RVV" "temp"
    (471659 'move' ret[471654](471658 'deref' 0))
    (471656 return ret[471654])
  }
  function DefaultSparseDom[161702](?).init[159094](arg _mt[161714]:_MT[227], arg this[161712]:DefaultSparseDom[161702](?), param arg rank[159092]:_any[170](?), arg idxType[159096]:_any[170](?), arg dist[159100]:unmanaged DefaultDist[389849], arg parentDom[159104]:_domain[123390](?)) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[436902] "temporary of super field" "temp"
    (436904 'move' super_tmp[436902](436901 '.v' this[161712] c"super"))
    (159115 call(159108 call (partial) init _mt[232] super_tmp[436902]) rank[159092] idxType[159096] parentDom[159104])
    unknown tmp[436907] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443733] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[624394] "expr temp" "maybe param" "maybe type" "temp"
      (624397 'move' call_tmp[624394](436909 '.v' this[161712] c"super"))
      (443737 'move' call_type_tmp[443733](436912 'typeof' call_tmp[624394]))
    }
    (436913 'move' tmp[436907] call_type_tmp[443733])
    unknown call_tmp[624399] "maybe param" "maybe type" "temp"
    (624402 'move' call_tmp[624399](436918 'cast' tmp[436907] this[161712]))
    unknown chpl__thisAsParent[436915] "insert auto destroy" "temp"
    (492346 'init var' chpl__thisAsParent[436915] call_tmp[624399] tmp[436907])
    (436921 'setcid' chpl__thisAsParent[436915])
    unknown tmp[436923] "temp"
    (436926 'init var' tmp[436923] dist[159100] unmanaged DefaultDist[389849])
    (436928 'init field' this[161712] c"dist" tmp[436923])
    unknown tmp[436934] "temp"
    (436936 'init var' tmp[436934] 0)
    (436938 '.=' this[161712] c"_nnz" tmp[436934])
    unknown tmp[436942] "temp"
    unknown call_tmp[624404] "expr temp" "maybe param" "maybe type" "temp"
    (624407 'move' call_tmp[624404](436959 '.' this[161712] c"nnzDom"))
    unknown call_tmp[624409] "expr temp" "maybe param" "maybe type" "temp"
    (624412 'move' call_tmp[624409](436947 call chpl__ensureDomainExpr call_tmp[624404]))
    unknown call_tmp[624414] "expr temp" "maybe param" "maybe type" "temp"
    (624417 'move' call_tmp[624414](436962 '.v' this[161712] c"rank"))
    unknown call_tmp[624419] "expr temp" "maybe param" "maybe type" "temp"
    (624422 'move' call_tmp[624419](436965 '.v' this[161712] c"idxType"))
    unknown call_tmp[624424] "expr temp" "maybe param" "maybe type" "temp"
    (624427 'move' call_tmp[624424](436950 call chpl__buildIndexType call_tmp[624414] call_tmp[624419]))
    unknown call_tmp[624429] "expr temp" "maybe param" "maybe type" "temp"
    (624432 'move' call_tmp[624429](436945 call chpl__buildArrayRuntimeType call_tmp[624409] call_tmp[624424]))
    (436953 'default init var' tmp[436942] call_tmp[624429])
    (436955 '.=' this[161712] c"indices" tmp[436942])
    (436968 'setcid' this[161712])
    (471661 return _void[47])
  }
  function DefaultSparseDom[161702](?).getNNZ[159130](arg _mt[161718]:_MT[227], arg this[161716]:DefaultSparseDom[161702](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[471665] "RVV" "temp"
    unknown call_tmp[624436] "expr temp" "maybe param" "maybe type" "temp"
    (624439 'move' call_tmp[624436](358154 call _nnz _mt[232] this[161716]))
    (471671 'move' ret[471665](471670 'coerce' call_tmp[624436] int(64)[13]))
    (471667 return ret[471665])
  }
  { scopeless type
    int(64)[13]
  }
  function DefaultSparseDom[161702](?).dsiBuildArray[159144](arg _mt[161722]:_MT[227], arg this[161720]:DefaultSparseDom[161702](?), arg eltType[159142]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[471675] "RVV" "temp"
    unknown call_tmp[624443] "expr temp" "maybe param" "maybe type" "temp"
    (624446 'move' call_tmp[624443](358164 call rank _mt[232] this[161720]))
    unknown call_tmp[624450] "expr temp" "maybe param" "maybe type" "temp"
    (624453 'move' call_tmp[624450](358169 call idxType _mt[232] this[161720]))
    unknown call_tmp[624455] "expr temp" "maybe param" "maybe type" "temp"
    (624458 'move' call_tmp[624455](159157 call _to_unmanaged this[161720]))
    unknown call_tmp[624460] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (624463 'move' call_tmp[624460](691514 'new' anymanaged DefaultSparseArr[358158](?)(eltType = eltType[159142])(rank = call_tmp[624443])(idxType = call_tmp[624450])(dom = call_tmp[624455])(_chpl_manager = unmanaged[209](?))))
    (471680 'move' ret[471675](471679 'deref' call_tmp[624460]))
    (471677 return ret[471675])
  }
  function DefaultSparseDom[161702](?).dsiIndsIterSafeForRemoving[159169](arg _mt[161726]:_MT[227], arg this[161724]:DefaultSparseDom[161702](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471684] "RVV" "temp"
    {
      unknown _indexOfInterest[159188] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159189] "expr temp" "temp"
      unknown call_tmp[624467] "expr temp" "maybe param" "maybe type" "temp"
      (624470 'move' call_tmp[624467](358181 call _nnz _mt[232] this[161724]))
      unknown call_tmp[624472] "expr temp" "maybe param" "maybe type" "temp"
      (624475 'move' call_tmp[624472](159205 call - 1))
      unknown call_tmp[624477] "expr temp" "maybe param" "maybe type" "temp"
      (624480 'move' call_tmp[624477](159209 call chpl_direct_range_iter 1 call_tmp[624467] call_tmp[624472]))
      (159198 'move' _iterator[159189](159196 call _getIterator call_tmp[624477]))
      Defer
      {
        {
          (159225 call _freeIterator _iterator[159189])
        }
      }
      { scopeless type
        (159214 'move' _indexOfInterest[159188](159211 call iteratorIndex _iterator[159189]))
      }
      ForLoop
      {
        unknown i[159218] "index var" "insert auto destroy"
        (159220 'move' i[159218] _indexOfInterest[159188])
        {
          unknown yret[471688] "YVV" "temp"
          unknown call_tmp[624484] "expr temp" "maybe param" "maybe type" "temp"
          (624487 'move' call_tmp[624484](159184 call(358175 call (partial) indices _mt[232] this[161724]) i[159218]))
          (471691 'move' yret[471688](471690 'deref' call_tmp[624484]))
          (471693 yield yret[471688])
        }
        label _continueLabel[159193]
        _indexOfInterest[159188]
        _iterator[159189]
      }
      label _breakLabel[159194]
    }
    (471686 return ret[471684])
  }
  function DefaultSparseDom[161702](?).these[159237](arg _mt[161730]:_MT[227], arg this[161728]:DefaultSparseDom[161702](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471697] "RVV" "temp"
    {
      unknown _indexOfInterest[159251] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[159252] "expr temp" "temp"
      unknown call_tmp[624491] "expr temp" "maybe param" "maybe type" "temp"
      (624494 'move' call_tmp[624491](358192 call _nnz _mt[232] this[161728]))
      unknown call_tmp[624496] "expr temp" "maybe param" "maybe type" "temp"
      (624499 'move' call_tmp[624496](159266 call chpl_direct_range_iter 1 call_tmp[624491] 1))
      (159261 'move' _iterator[159252](159259 call _getIterator call_tmp[624496]))
      Defer
      {
        {
          (159282 call _freeIterator _iterator[159252])
        }
      }
      { scopeless type
        (159271 'move' _indexOfInterest[159251](159268 call iteratorIndex _iterator[159252]))
      }
      ForLoop
      {
        unknown i[159275] "index var" "insert auto destroy"
        (159277 'move' i[159275] _indexOfInterest[159251])
        {
          unknown yret[471701] "YVV" "temp"
          unknown call_tmp[624503] "expr temp" "maybe param" "maybe type" "temp"
          (624506 'move' call_tmp[624503](159247 call(358186 call (partial) indices _mt[232] this[161728]) i[159275]))
          (471704 'move' yret[471701](471703 'deref' call_tmp[624503]))
          (471706 yield yret[471701])
        }
        label _continueLabel[159256]
        _indexOfInterest[159251]
        _iterator[159252]
      }
      label _breakLabel[159257]
    }
    (471699 return ret[471697])
  }
  function DefaultSparseDom[161702](?).these[159298](arg _mt[161734]:_MT[227], arg this[161732]:DefaultSparseDom[161702](?), param arg tag[159295]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471710] "RVV" "temp"
    unknown call_tmp[624510] "maybe param" "maybe type" "temp"
    (624513 'move' call_tmp[624510](358200 call _nnz _mt[232] this[161732]))
    const numElems[159308] "const" "insert auto destroy"
    (492348 'init var' numElems[159308] call_tmp[624510])
    unknown call_tmp[624515] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624518 'move' call_tmp[624515](159317 'typeof' numElems[159308]))
    unknown call_tmp[624520] "expr temp" "maybe param" "maybe type" "temp"
    (624523 'move' call_tmp[624520](159315 call _computeNumChunks numElems[159308]))
    unknown call_tmp[624525] "maybe param" "maybe type" "temp"
    (624528 'move' call_tmp[624525](159318 call _cast call_tmp[624515] call_tmp[624520]))
    const numChunks[159320] "const" "insert auto destroy"
    (492350 'init var' numChunks[159320] call_tmp[624525])
    unknown call_tmp[624530] "expr temp" "maybe param" "maybe type" "temp"
    (624533 'move' call_tmp[624530](159379 call _cond_test debugDefaultSparse[159041]))
    if call_tmp[624530]
    {
      (159376 call writeln "DefaultSparseDom standalone: " numChunks[159320] " chunks, " numElems[159308] " elems")
    }
    unknown call_tmp[624535] "expr temp" "maybe param" "maybe type" "temp"
    (624538 'move' call_tmp[624535](159385 call <= numChunks[159320] 1))
    unknown call_tmp[624540] "expr temp" "maybe param" "maybe type" "temp"
    (624543 'move' call_tmp[624540](159686 call _cond_test call_tmp[624535]))
    if call_tmp[624540]
    {
      {
        unknown _indexOfInterest[159399] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[159400] "expr temp" "temp"
        unknown call_tmp[624545] "expr temp" "maybe param" "maybe type" "temp"
        (624548 'move' call_tmp[624545](159414 call chpl_direct_range_iter 1 numElems[159308] 1))
        (159409 'move' _iterator[159400](159407 call _getIterator call_tmp[624545]))
        Defer
        {
          {
            (159430 call _freeIterator _iterator[159400])
          }
        }
        { scopeless type
          (159419 'move' _indexOfInterest[159399](159416 call iteratorIndex _iterator[159400]))
        }
        ForLoop
        {
          unknown i[159423] "index var" "insert auto destroy"
          (159425 'move' i[159423] _indexOfInterest[159399])
          {
            unknown yret[471714] "YVV" "temp"
            unknown call_tmp[624552] "expr temp" "maybe param" "maybe type" "temp"
            (624555 'move' call_tmp[624552](159395 call(358211 call (partial) indices _mt[232] this[161732]) i[159423]))
            (471717 'move' yret[471714](471716 'deref' call_tmp[624552]))
            (471719 yield yret[471714])
          }
          label _continueLabel[159404]
          _indexOfInterest[159399]
          _iterator[159400]
        }
        label _breakLabel[159405]
      }
    }
    {
      {
        unknown tmpIter[159489] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[624557] "expr temp" "maybe param" "maybe type" "temp"
        (624560 'move' call_tmp[624557](159442 call chpl_build_bounded_range 1 numElems[159308]))
        (159492 'move' tmpIter[159489](159446 call chunks call_tmp[624557] numChunks[159320]))
        unknown isRngDomArr[159666] "maybe param" "temp"
        unknown tmp[403575] "maybe param" "temp"
        (403586 'move' tmp[403575](159668 call isBoundedRange tmpIter[159489]))
        unknown call_tmp[624562] "expr temp" "maybe param" "maybe type" "temp"
        (624565 'move' call_tmp[624562](403588 call _cond_invalid tmp[403575]))
        if call_tmp[624562]
        {
          (403591 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[518832] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[518833] "maybe param" "temp"
        unknown call_tmp[624567] "expr temp" "maybe param" "maybe type" "temp"
        (624570 'move' call_tmp[624567](403576 call isTrue tmp[403575]))
        (518838 'move' tmp[518833](518836 call _cond_test call_tmp[624567]))
        if tmp[518833]
        {
          (518843 'move' tmp[518832](518840 '_paramFoldLogical' tmp[518833] 1))
        }
        {
          unknown tmp[403596] "maybe param" "temp"
          (403607 'move' tmp[403596](159671 call isDomain tmpIter[159489]))
          unknown call_tmp[624572] "expr temp" "maybe param" "maybe type" "temp"
          (624575 'move' call_tmp[624572](403609 call _cond_invalid tmp[403596]))
          if call_tmp[624572]
          {
            (403612 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[518805] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[518806] "maybe param" "temp"
          unknown call_tmp[624577] "expr temp" "maybe param" "maybe type" "temp"
          (624580 'move' call_tmp[624577](403597 call isTrue tmp[403596]))
          (518811 'move' tmp[518806](518809 call _cond_test call_tmp[624577]))
          if tmp[518806]
          {
            (518816 'move' tmp[518805](518813 '_paramFoldLogical' tmp[518806] 1))
          }
          {
            unknown tmp[518818] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[624582] "expr temp" "maybe param" "maybe type" "temp"
            (624585 'move' call_tmp[624582](159674 call isArray tmpIter[159489]))
            (518820 'move' tmp[518818](403601 call isTrue call_tmp[624582]))
            (518825 'move' tmp[518805](518822 '_paramFoldLogical' tmp[518806] tmp[518818]))
          }
          unknown tmp[518845] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (518847 'move' tmp[518845](403580 call isTrue tmp[518805]))
          (518852 'move' tmp[518832](518849 '_paramFoldLogical' tmp[518833] tmp[518845]))
        }
        (159681 'move' isRngDomArr[159666] tmp[518832])
        if isRngDomArr[159666]
        {
          const _coforallCount[159533] "const" "end count" "temp"
          (159602 'move' _coforallCount[159533](159599 call _endCountAlloc 1))
          unknown numTasks[159534] "temp"
          (159586 'move' numTasks[159534](159582 call size _mt[232] tmpIter[159489]))
          (159577 call _upEndCount _coforallCount[159533] 1 numTasks[159534])
          (159574 call chpl_resetTaskSpawn numTasks[159534])
          unknown _indexOfInterest[159541] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[159542] "expr temp" "temp"
          (159551 'move' _iterator[159542](159549 call _getIterator tmpIter[159489]))
          Defer
          {
            {
              (159567 call _freeIterator _iterator[159542])
            }
          }
          { scopeless type
            (159556 'move' _indexOfInterest[159541](159553 call iteratorIndex _iterator[159542]))
          }
          ForLoop
          {
            unknown chunk[159560] "coforall index var" "index var" "insert auto destroy"
            (159562 'move' chunk[159560] _indexOfInterest[159541])
            (767407 call coforall_fn[767405])
            function coforall_fn[767405]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[159495] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[159497] "expr temp" "temp"
                (159499 'move' _iterator[159497](159502 call _getIterator chunk[159560]))
                Defer
                {
                  {
                    (159506 call _freeIterator _iterator[159497])
                  }
                }
                { scopeless type
                  (159510 'move' _indexOfInterest[159495](159513 call iteratorIndex _iterator[159497]))
                }
                ForLoop
                {
                  unknown i[159518] "index var" "insert auto destroy"
                  (159520 'move' i[159518] _indexOfInterest[159495])
                  unknown yret[471721] "YVV" "temp"
                  unknown call_tmp[624591] "expr temp" "maybe param" "maybe type" "temp"
                  (624594 'move' call_tmp[624591](159526 call(358228 call (partial) indices _mt[232] this[161732]) i[159518]))
                  (471724 'move' yret[471721](471723 'deref' call_tmp[624591]))
                  (471726 yield yret[471721])
                  label _continueLabel[159528]
                  _indexOfInterest[159495]
                  _iterator[159497]
                }
                label _breakLabel[159530]
              }
              (159536 call _downEndCount _coforallCount[159533] nil[38])
              (767410 return _void[47])
            }
            {
            }
            label _continueLabel[159546]
            _indexOfInterest[159541]
            _iterator[159542]
          }
          label _breakLabel[159547]
          Defer
          {
            {
              (159589 call _endCountFree _coforallCount[159533])
            }
          }
          (159594 call _waitEndCount _coforallCount[159533] 1 numTasks[159534])
        }
        {
          const _coforallCount[159606] "const" "end count" "temp"
          (159663 'move' _coforallCount[159606](159660 call _endCountAlloc 1))
          unknown _indexOfInterest[159614] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[159615] "expr temp" "temp"
          (159624 'move' _iterator[159615](159622 call _getIterator tmpIter[159489]))
          Defer
          {
            {
              (159640 call _freeIterator _iterator[159615])
            }
          }
          { scopeless type
            (159629 'move' _indexOfInterest[159614](159626 call iteratorIndex _iterator[159615]))
          }
          ForLoop
          {
            unknown chunk[159633] "coforall index var" "index var" "insert auto destroy"
            (159635 'move' chunk[159633] _indexOfInterest[159614])
            (159647 call _upEndCount _coforallCount[159606] 1)
            (767414 call coforall_fn[767412])
            function coforall_fn[767412]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[159455] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[159456] "expr temp" "temp"
                (159465 'move' _iterator[159456](159463 call _getIterator chunk[159633]))
                Defer
                {
                  {
                    (159481 call _freeIterator _iterator[159456])
                  }
                }
                { scopeless type
                  (159470 'move' _indexOfInterest[159455](159467 call iteratorIndex _iterator[159456]))
                }
                ForLoop
                {
                  unknown i[159474] "index var" "insert auto destroy"
                  (159476 'move' i[159474] _indexOfInterest[159455])
                  unknown yret[471728] "YVV" "temp"
                  unknown call_tmp[624598] "expr temp" "maybe param" "maybe type" "temp"
                  (624601 'move' call_tmp[624598](159452 call(358221 call (partial) indices _mt[232] this[161732]) i[159474]))
                  (471731 'move' yret[471728](471730 'deref' call_tmp[624598]))
                  (471733 yield yret[471728])
                  label _continueLabel[159460]
                  _indexOfInterest[159455]
                  _iterator[159456]
                }
                label _breakLabel[159461]
              }
              (159609 call _downEndCount _coforallCount[159606] nil[38])
              (767417 return _void[47])
            }
            {
            }
            label _continueLabel[159619]
            _indexOfInterest[159614]
            _iterator[159615]
          }
          label _breakLabel[159620]
          Defer
          {
            {
              (159651 call _endCountFree _coforallCount[159606])
            }
          }
          (159656 call _waitEndCount _coforallCount[159606] 1)
        }
      }
    }
    (471712 return ret[471710])
  }
  where {
    (159305 call == tag[159295] standalone[695])
  }
  function DefaultSparseDom[161702](?).these[159699](arg _mt[161738]:_MT[227], arg this[161736]:DefaultSparseDom[161702](?), param arg tag[159696]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471737] "RVV" "temp"
    unknown call_tmp[624605] "maybe param" "maybe type" "temp"
    (624608 'move' call_tmp[624605](358237 call _nnz _mt[232] this[161736]))
    const numElems[159709] "const" "insert auto destroy"
    (492352 'init var' numElems[159709] call_tmp[624605])
    unknown call_tmp[624610] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (624613 'move' call_tmp[624610](159718 'typeof' numElems[159709]))
    unknown call_tmp[624615] "expr temp" "maybe param" "maybe type" "temp"
    (624618 'move' call_tmp[624615](159716 call _computeNumChunks numElems[159709]))
    unknown call_tmp[624620] "maybe param" "maybe type" "temp"
    (624623 'move' call_tmp[624620](159719 call _cast call_tmp[624610] call_tmp[624615]))
    const numChunks[159721] "const" "insert auto destroy"
    (492354 'init var' numChunks[159721] call_tmp[624620])
    unknown call_tmp[624625] "expr temp" "maybe param" "maybe type" "temp"
    (624628 'move' call_tmp[624625](159749 call _cond_test debugDefaultSparse[159041]))
    if call_tmp[624625]
    {
      (159747 call writeln "DefaultSparseDom leader: " numChunks[159721] " chunks, " numElems[159709] " elems")
    }
    unknown call_tmp[624630] "expr temp" "maybe param" "maybe type" "temp"
    (624633 'move' call_tmp[624630](159756 call <= numChunks[159721] 1))
    unknown call_tmp[624635] "expr temp" "maybe param" "maybe type" "temp"
    (624638 'move' call_tmp[624635](159960 call _cond_test call_tmp[624630]))
    if call_tmp[624635]
    {
      unknown yret[471741] "YVV" "temp"
      unknown call_tmp[624640] "expr temp" "maybe param" "maybe type" "temp"
      (624643 'move' call_tmp[624640](159762 call _build_tuple this[161736] 1 numElems[159709]))
      (471744 'move' yret[471741](471743 'deref' call_tmp[624640]))
      (471746 yield yret[471741])
    }
    {
      unknown tmpIter[159789] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[624645] "expr temp" "maybe param" "maybe type" "temp"
      (624648 'move' call_tmp[624645](159770 call chpl_build_bounded_range 1 numElems[159709]))
      (159792 'move' tmpIter[159789](159774 call chunks call_tmp[624645] numChunks[159721]))
      unknown isRngDomArr[159941] "maybe param" "temp"
      unknown tmp[403617] "maybe param" "temp"
      (403628 'move' tmp[403617](159943 call isBoundedRange tmpIter[159789]))
      unknown call_tmp[624650] "expr temp" "maybe param" "maybe type" "temp"
      (624653 'move' call_tmp[624650](403630 call _cond_invalid tmp[403617]))
      if call_tmp[624650]
      {
        (403633 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[518886] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[518887] "maybe param" "temp"
      unknown call_tmp[624655] "expr temp" "maybe param" "maybe type" "temp"
      (624658 'move' call_tmp[624655](403618 call isTrue tmp[403617]))
      (518892 'move' tmp[518887](518890 call _cond_test call_tmp[624655]))
      if tmp[518887]
      {
        (518897 'move' tmp[518886](518894 '_paramFoldLogical' tmp[518887] 1))
      }
      {
        unknown tmp[403638] "maybe param" "temp"
        (403649 'move' tmp[403638](159946 call isDomain tmpIter[159789]))
        unknown call_tmp[624660] "expr temp" "maybe param" "maybe type" "temp"
        (624663 'move' call_tmp[624660](403651 call _cond_invalid tmp[403638]))
        if call_tmp[624660]
        {
          (403654 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[518859] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[518860] "maybe param" "temp"
        unknown call_tmp[624665] "expr temp" "maybe param" "maybe type" "temp"
        (624668 'move' call_tmp[624665](403639 call isTrue tmp[403638]))
        (518865 'move' tmp[518860](518863 call _cond_test call_tmp[624665]))
        if tmp[518860]
        {
          (518870 'move' tmp[518859](518867 '_paramFoldLogical' tmp[518860] 1))
        }
        {
          unknown tmp[518872] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[624670] "expr temp" "maybe param" "maybe type" "temp"
          (624673 'move' call_tmp[624670](159949 call isArray tmpIter[159789]))
          (518874 'move' tmp[518872](403643 call isTrue call_tmp[624670]))
          (518879 'move' tmp[518859](518876 '_paramFoldLogical' tmp[518860] tmp[518872]))
        }
        unknown tmp[518899] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (518901 'move' tmp[518899](403622 call isTrue tmp[518859]))
        (518906 'move' tmp[518886](518903 '_paramFoldLogical' tmp[518887] tmp[518899]))
      }
      (159956 'move' isRngDomArr[159941] tmp[518886])
      if isRngDomArr[159941]
      {
        const _coforallCount[159808] "const" "end count" "temp"
        (159877 'move' _coforallCount[159808](159874 call _endCountAlloc 1))
        unknown numTasks[159809] "temp"
        (159861 'move' numTasks[159809](159857 call size _mt[232] tmpIter[159789]))
        (159852 call _upEndCount _coforallCount[159808] 1 numTasks[159809])
        (159849 call chpl_resetTaskSpawn numTasks[159809])
        unknown _indexOfInterest[159816] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[159817] "expr temp" "temp"
        (159826 'move' _iterator[159817](159824 call _getIterator tmpIter[159789]))
        Defer
        {
          {
            (159842 call _freeIterator _iterator[159817])
          }
        }
        { scopeless type
          (159831 'move' _indexOfInterest[159816](159828 call iteratorIndex _iterator[159817]))
        }
        ForLoop
        {
          unknown chunk[159835] "coforall index var" "index var" "insert auto destroy"
          (159837 'move' chunk[159835] _indexOfInterest[159816])
          (767421 call coforall_fn[767419])
          function coforall_fn[767419]() : void[4] "cobegin or coforall"
          {
            unknown yret[471748] "YVV" "temp"
            unknown call_tmp[624679] "expr temp" "maybe param" "maybe type" "temp"
            (624682 'move' call_tmp[624679](159800 call first _mt[232] chunk[159835]))
            unknown call_tmp[624686] "expr temp" "maybe param" "maybe type" "temp"
            (624689 'move' call_tmp[624686](159804 call last _mt[232] chunk[159835]))
            unknown call_tmp[624691] "expr temp" "maybe param" "maybe type" "temp"
            (624694 'move' call_tmp[624691](159797 call _build_tuple this[161736] call_tmp[624679] call_tmp[624686]))
            (471751 'move' yret[471748](471750 'deref' call_tmp[624691]))
            (471753 yield yret[471748])
            (159811 call _downEndCount _coforallCount[159808] nil[38])
            (767424 return _void[47])
          }
          {
          }
          label _continueLabel[159821]
          _indexOfInterest[159816]
          _iterator[159817]
        }
        label _breakLabel[159822]
        Defer
        {
          {
            (159864 call _endCountFree _coforallCount[159808])
          }
        }
        (159869 call _waitEndCount _coforallCount[159808] 1 numTasks[159809])
      }
      {
        const _coforallCount[159881] "const" "end count" "temp"
        (159938 'move' _coforallCount[159881](159935 call _endCountAlloc 1))
        unknown _indexOfInterest[159889] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[159890] "expr temp" "temp"
        (159899 'move' _iterator[159890](159897 call _getIterator tmpIter[159789]))
        Defer
        {
          {
            (159915 call _freeIterator _iterator[159890])
          }
        }
        { scopeless type
          (159904 'move' _indexOfInterest[159889](159901 call iteratorIndex _iterator[159890]))
        }
        ForLoop
        {
          unknown chunk[159908] "coforall index var" "index var" "insert auto destroy"
          (159910 'move' chunk[159908] _indexOfInterest[159889])
          (159922 call _upEndCount _coforallCount[159881] 1)
          (767428 call coforall_fn[767426])
          function coforall_fn[767426]() : void[4] "cobegin or coforall"
          {
            unknown yret[471755] "YVV" "temp"
            unknown call_tmp[624698] "expr temp" "maybe param" "maybe type" "temp"
            (624701 'move' call_tmp[624698](159777 call first _mt[232] chunk[159908]))
            unknown call_tmp[624705] "expr temp" "maybe param" "maybe type" "temp"
            (624708 'move' call_tmp[624705](159782 call last _mt[232] chunk[159908]))
            unknown call_tmp[624710] "expr temp" "maybe param" "maybe type" "temp"
            (624713 'move' call_tmp[624710](159785 call _build_tuple this[161736] call_tmp[624698] call_tmp[624705]))
            (471758 'move' yret[471755](471757 'deref' call_tmp[624710]))
            (471760 yield yret[471755])
            (159884 call _downEndCount _coforallCount[159881] nil[38])
            (767431 return _void[47])
          }
          {
          }
          label _continueLabel[159894]
          _indexOfInterest[159889]
          _iterator[159890]
        }
        label _breakLabel[159895]
        Defer
        {
          {
            (159926 call _endCountFree _coforallCount[159881])
          }
        }
        (159931 call _waitEndCount _coforallCount[159881] 1)
      }
    }
    (471739 return ret[471737])
  }
  where {
    (159706 call == tag[159696] leader[691])
  }
  function DefaultSparseDom[161702](?).these[159974](arg _mt[161742]:_MT[227], arg this[161740]:DefaultSparseDom[161702](?), param arg tag[159971]:iterKind[697], arg followThis[159982]:_tuple[58502](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471764] "RVV" "temp"
    unknown tmp[160000] "no auto destroy" "no copy" "temp"
    (492356 'init var' tmp[160000] followThis[159982])
    (160010 call _check_tuple_var_decl tmp[160000] 3)
    unknown call_tmp[624715] "maybe param" "maybe type" "temp"
    (624718 'move' call_tmp[624715](160001 call tmp[160000] 1))
    unknown followThisDom[159992] "insert auto destroy"
    (492358 'init var' followThisDom[159992] call_tmp[624715])
    unknown call_tmp[624720] "maybe param" "maybe type" "temp"
    (624723 'move' call_tmp[624720](160004 call tmp[160000] 2))
    unknown startIx[159994] "insert auto destroy"
    (492360 'init var' startIx[159994] call_tmp[624720])
    unknown call_tmp[624725] "maybe param" "maybe type" "temp"
    (624728 'move' call_tmp[624725](160007 call tmp[160000] 3))
    unknown endIx[159996] "insert auto destroy"
    (492362 'init var' endIx[159996] call_tmp[624725])
    unknown call_tmp[624730] "expr temp" "maybe param" "maybe type" "temp"
    (624733 'move' call_tmp[624730](160018 call != followThisDom[159992] this[161740]))
    unknown call_tmp[624735] "expr temp" "maybe param" "maybe type" "temp"
    (624738 'move' call_tmp[624735](160042 call _cond_test call_tmp[624730]))
    if call_tmp[624735]
    {
      (160040 call halt "Sparse domains can't be zippered with anything other than themselves and their arrays")
    }
    unknown call_tmp[624740] "expr temp" "maybe param" "maybe type" "temp"
    (624743 'move' call_tmp[624740](160071 call _cond_test debugDefaultSparse[159041]))
    if call_tmp[624740]
    {
      (160069 call writeln "DefaultSparseDom follower: " startIx[159994] ".." endIx[159996])
    }
    {
      unknown _indexOfInterest[160087] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160088] "expr temp" "temp"
      unknown call_tmp[624745] "expr temp" "maybe param" "maybe type" "temp"
      (624748 'move' call_tmp[624745](160102 call chpl_direct_range_iter startIx[159994] endIx[159996] 1))
      (160097 'move' _iterator[160088](160095 call _getIterator call_tmp[624745]))
      Defer
      {
        {
          (160118 call _freeIterator _iterator[160088])
        }
      }
      { scopeless type
        (160107 'move' _indexOfInterest[160087](160104 call iteratorIndex _iterator[160088]))
      }
      ForLoop
      {
        unknown i[160111] "index var" "insert auto destroy"
        (160113 'move' i[160111] _indexOfInterest[160087])
        unknown yret[471768] "YVV" "temp"
        unknown call_tmp[624752] "expr temp" "maybe param" "maybe type" "temp"
        (624755 'move' call_tmp[624752](160084 call(358267 call (partial) indices _mt[232] this[161740]) i[160111]))
        (471771 'move' yret[471768](471770 'deref' call_tmp[624752]))
        (471773 yield yret[471768])
        label _continueLabel[160092]
        _indexOfInterest[160087]
        _iterator[160088]
      }
      label _breakLabel[160093]
    }
    (471766 return ret[471764])
  }
  where {
    unknown call_tmp[624757] "expr temp" "maybe param" "maybe type" "temp"
    (624760 'move' call_tmp[624757](159990 call == tag[159971] follower[693]))
    unknown call_tmp[624762] "expr temp" "maybe param" "maybe type" "temp"
    (624765 'move' call_tmp[624762](436973 'query' followThis[159982] c"size"))
    unknown call_tmp[624767] "expr temp" "maybe param" "maybe type" "temp"
    (624770 'move' call_tmp[624767](436974 call == 3 call_tmp[624762]))
    (436976 call & call_tmp[624757] call_tmp[624767])
  }
  function DefaultSparseDom[161702](?).these[160134](arg _mt[161746]:_MT[227], arg this[161744]:DefaultSparseDom[161702](?), param arg tag[160131]:iterKind[697], arg followThis[160136]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471777] "RVV" "temp"
    (160163 call compilerError "Sparse iterators can't yet be zippered with others")
    unknown dummy[160170] "insert auto destroy"
    unknown call_tmp[624774] "expr temp" "maybe param" "maybe type" "temp"
    (624777 'move' call_tmp[624774](358278 call rank _mt[232] this[161744]))
    unknown call_tmp[624781] "expr temp" "maybe param" "maybe type" "temp"
    (624784 'move' call_tmp[624781](358283 call idxType _mt[232] this[161744]))
    unknown call_tmp[624786] "expr temp" "maybe param" "maybe type" "temp"
    (624789 'move' call_tmp[624786](160168 call * call_tmp[624774] call_tmp[624781]))
    (492364 'default init var' dummy[160170] call_tmp[624786])
    unknown yret[471781] "YVV" "temp"
    (471784 'move' yret[471781](471783 'deref' dummy[160170]))
    (471786 yield yret[471781])
    (471779 return ret[471777])
  }
  where {
    (160143 call == tag[160131] follower[693])
  }
  function DefaultSparseDom[161702](?).find[160183](arg _mt[161750]:_MT[227], arg this[161748]:DefaultSparseDom[161702](?), arg ind[160181]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[471790] "RVV" "temp"
    unknown tmp[403659] "maybe param" "temp"
    unknown tmp[403680] "maybe param" "temp"
    unknown call_tmp[624793] "expr temp" "maybe param" "maybe type" "temp"
    (624796 'move' call_tmp[624793](358289 call rank _mt[232] this[161748]))
    (403691 'move' tmp[403680](160192 call == call_tmp[624793] 1))
    unknown call_tmp[624798] "expr temp" "maybe param" "maybe type" "temp"
    (624801 'move' call_tmp[624798](403693 call _cond_invalid tmp[403680]))
    if call_tmp[624798]
    {
      (403696 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[518913] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518914] "maybe param" "temp"
    unknown call_tmp[624803] "expr temp" "maybe param" "maybe type" "temp"
    (624806 'move' call_tmp[624803](403681 call isTrue tmp[403680]))
    (518919 'move' tmp[518914](518917 call _cond_test call_tmp[624803]))
    if tmp[518914]
    {
      unknown tmp[518921] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624808] "expr temp" "maybe param" "maybe type" "temp"
      (624811 'move' call_tmp[624808](160197 call isTuple ind[160181]))
      (518923 'move' tmp[518921](403684 call isTrue call_tmp[624808]))
      (518928 'move' tmp[518913](518925 '_paramFoldLogical' tmp[518914] tmp[518921]))
    }
    {
      (518933 'move' tmp[518913](518930 '_paramFoldLogical' tmp[518914] 0))
    }
    (403670 'move' tmp[403659] tmp[518913])
    unknown call_tmp[624813] "expr temp" "maybe param" "maybe type" "temp"
    (624816 'move' call_tmp[624813](403672 call _cond_invalid tmp[403659]))
    if call_tmp[624813]
    {
      (403675 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[518940] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518941] "maybe param" "temp"
    unknown call_tmp[624818] "expr temp" "maybe param" "maybe type" "temp"
    (624821 'move' call_tmp[624818](403660 call isTrue tmp[403659]))
    (518946 'move' tmp[518941](518944 call _cond_test call_tmp[624818]))
    if tmp[518941]
    {
      unknown tmp[518948] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624825] "expr temp" "maybe param" "maybe type" "temp"
      (624828 'move' call_tmp[624825](160201 call size _mt[232] ind[160181]))
      unknown call_tmp[624830] "expr temp" "maybe param" "maybe type" "temp"
      (624833 'move' call_tmp[624830](160205 call == call_tmp[624825] 1))
      (518950 'move' tmp[518948](403663 call isTrue call_tmp[624830]))
      (518955 'move' tmp[518940](518952 '_paramFoldLogical' tmp[518941] tmp[518948]))
    }
    {
      (518960 'move' tmp[518940](518957 '_paramFoldLogical' tmp[518941] 0))
    }
    unknown call_tmp[624835] "expr temp" "maybe param" "maybe type" "temp"
    (624838 'move' call_tmp[624835](160234 call _cond_test tmp[518940]))
    if call_tmp[624835]
    {
      unknown call_tmp[624842] "expr temp" "maybe param" "maybe type" "temp"
      (624845 'move' call_tmp[624842](358296 call indices _mt[232] this[161748]))
      unknown call_tmp[624847] "expr temp" "maybe param" "maybe type" "temp"
      (624850 'move' call_tmp[624847](160215 call ind[160181] 1))
      unknown call_tmp[624854] "expr temp" "maybe param" "maybe type" "temp"
      (624857 'move' call_tmp[624854](358302 call _nnz _mt[232] this[161748]))
      unknown call_tmp[624859] "expr temp" "maybe param" "maybe type" "temp"
      (624862 'move' call_tmp[624859](160220 call binarySearch call_tmp[624842] call_tmp[624847](lo = 1)(hi = call_tmp[624854])))
      (471795 'move' ret[471790](471794 'deref' call_tmp[624859]))
      gotoReturn _end_find[471788] _end_find[471788]
    }
    {
      unknown call_tmp[624866] "expr temp" "maybe param" "maybe type" "temp"
      (624869 'move' call_tmp[624866](358307 call indices _mt[232] this[161748]))
      unknown call_tmp[624873] "expr temp" "maybe param" "maybe type" "temp"
      (624876 'move' call_tmp[624873](358313 call _nnz _mt[232] this[161748]))
      unknown call_tmp[624878] "expr temp" "maybe param" "maybe type" "temp"
      (624881 'move' call_tmp[624878](160231 call binarySearch call_tmp[624866] ind[160181](lo = 1)(hi = call_tmp[624873])))
      (471800 'move' ret[471790](471799 'deref' call_tmp[624878]))
      gotoReturn _end_find[471788] _end_find[471788]
    }
    label _end_find[471788]
    (471792 return ret[471790])
    (329432 'used modules list'(160187 'use' Search[275550]))
  }
  function DefaultSparseDom[161702](?).dsiMember[160246](arg _mt[161754]:_MT[227], arg this[161752]:DefaultSparseDom[161702](?), arg ind[160244]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[471806] "RVV" "temp"
    unknown call_tmp[624885] "maybe param" "maybe type" "temp"
    (624888 'move' call_tmp[624885](160256 call(358317 call (partial) find _mt[232] this[161752]) ind[160244]))
    const tmp[160257] "const" "insert auto destroy" "no copy" "temp"
    (492366 'init var' tmp[160257] call_tmp[624885])
    (160264 call _check_tuple_var_decl tmp[160257] 2)
    unknown call_tmp[624890] "maybe param" "maybe type" "temp"
    (624893 'move' call_tmp[624890](160258 call tmp[160257] 1))
    const found[160248] "const" "insert auto destroy"
    (492368 'init var' found[160248] call_tmp[624890])
    unknown call_tmp[624895] "maybe param" "maybe type" "temp"
    (624898 'move' call_tmp[624895](160261 call tmp[160257] 2))
    const loc[160250] "const" "insert auto destroy"
    (492370 'init var' loc[160250] call_tmp[624895])
    (471811 'move' ret[471806](471810 'deref' found[160248]))
    (471808 return ret[471806])
  }
  function DefaultSparseDom[161702](?).dsiFirst[160277](arg _mt[161758]:_MT[227], arg this[161756]:DefaultSparseDom[161702](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[471815] "RVV" "temp"
    unknown call_tmp[624904] "expr temp" "maybe param" "maybe type" "temp"
    (624907 'move' call_tmp[624904](358329 call indices _mt[232] this[161756]))
    unknown call_tmp[624911] "expr temp" "maybe param" "maybe type" "temp"
    (624914 'move' call_tmp[624911](160281 call _dom _mt[232] call_tmp[624904]))
    unknown call_tmp[624918] "expr temp" "maybe param" "maybe type" "temp"
    (624921 'move' call_tmp[624918](160284 call first _mt[232] call_tmp[624911]))
    unknown call_tmp[624923] "expr temp" "maybe param" "maybe type" "temp"
    (624926 'move' call_tmp[624923](160288 call(358324 call (partial) indices _mt[232] this[161756]) call_tmp[624918]))
    (471820 'move' ret[471815](471819 'deref' call_tmp[624923]))
    (471817 return ret[471815])
  }
  function DefaultSparseDom[161702](?).dsiLast[160296](arg _mt[161762]:_MT[227], arg this[161760]:DefaultSparseDom[161702](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[471824] "RVV" "temp"
    unknown call_tmp[624932] "expr temp" "maybe param" "maybe type" "temp"
    (624935 'move' call_tmp[624932](358339 call _nnz _mt[232] this[161760]))
    unknown call_tmp[624937] "expr temp" "maybe param" "maybe type" "temp"
    (624940 'move' call_tmp[624937](160301 call(358334 call (partial) indices _mt[232] this[161760]) call_tmp[624932]))
    (471829 'move' ret[471824](471828 'deref' call_tmp[624937]))
    (471826 return ret[471824])
  }
  function DefaultSparseDom[161702](?).add_help[160311](arg _mt[161766]:_MT[227], arg this[161764]:DefaultSparseDom[161702](?), arg ind[160309]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[471833] "RVV" "temp"
    unknown call_tmp[624944] "maybe param" "maybe type" "temp"
    (624947 'move' call_tmp[624944](160321 call(358343 call (partial) find _mt[232] this[161764]) ind[160309]))
    const tmp[160322] "const" "insert auto destroy" "no copy" "temp"
    (492372 'init var' tmp[160322] call_tmp[624944])
    (160329 call _check_tuple_var_decl tmp[160322] 2)
    unknown call_tmp[624949] "maybe param" "maybe type" "temp"
    (624952 'move' call_tmp[624949](160323 call tmp[160322] 1))
    const found[160313] "const" "insert auto destroy"
    (492374 'init var' found[160313] call_tmp[624949])
    unknown call_tmp[624954] "maybe param" "maybe type" "temp"
    (624957 'move' call_tmp[624954](160326 call tmp[160322] 2))
    const insertPt[160315] "const" "insert auto destroy"
    (492376 'init var' insertPt[160315] call_tmp[624954])
    unknown call_tmp[624959] "expr temp" "maybe param" "maybe type" "temp"
    (624962 'move' call_tmp[624959](160339 call _cond_test found[160313]))
    if call_tmp[624959]
    {
      (471838 'move' ret[471833](471837 'deref' 0))
      gotoReturn _end_add_help[471831] _end_add_help[471831]
    }
    unknown call_tmp[624964] "expr temp" "maybe param" "maybe type" "temp"
    (624967 'move' call_tmp[624964](160353 call _cond_test 1))
    if call_tmp[624964]
    {
      (160351 call(160346 call (partial) boundsCheck _mt[232] this[161764]) ind[160309])
    }
    unknown call_tmp[624973] "expr temp" "maybe param" "maybe type" "temp"
    (624976 'move' call_tmp[624973](358353 call _nnz _mt[232] this[161764]))
    (160360 call += call_tmp[624973] 1)
    unknown call_tmp[624980] "expr temp" "maybe param" "maybe type" "temp"
    (624983 'move' call_tmp[624980](358358 call nnzDom _mt[232] this[161764]))
    unknown call_tmp[624987] "maybe param" "maybe type" "temp"
    (624990 'move' call_tmp[624987](160364 call size _mt[232] call_tmp[624980]))
    const oldNNZDomSize[160367] "const" "insert auto destroy"
    (492378 'init var' oldNNZDomSize[160367] call_tmp[624987])
    unknown call_tmp[624996] "expr temp" "maybe param" "maybe type" "temp"
    (624999 'move' call_tmp[624996](358369 call _nnz _mt[232] this[161764]))
    (160373 call(358364 call (partial) _grow _mt[232] this[161764]) call_tmp[624996])
    {
      unknown _indexOfInterest[160403] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160404] "expr temp" "temp"
      unknown call_tmp[625003] "expr temp" "maybe param" "maybe type" "temp"
      (625006 'move' call_tmp[625003](358387 call _nnz _mt[232] this[161764]))
      unknown call_tmp[625008] "expr temp" "maybe param" "maybe type" "temp"
      (625011 'move' call_tmp[625008](160427 call - call_tmp[625003] 1))
      unknown call_tmp[625013] "expr temp" "maybe param" "maybe type" "temp"
      (625016 'move' call_tmp[625013](160423 call - 1))
      unknown call_tmp[625018] "expr temp" "maybe param" "maybe type" "temp"
      (625021 'move' call_tmp[625018](160430 call chpl_direct_range_iter insertPt[160315] call_tmp[625008] call_tmp[625013]))
      (160413 'move' _iterator[160404](160411 call _getIterator call_tmp[625018]))
      Defer
      {
        {
          (160446 call _freeIterator _iterator[160404])
        }
      }
      { scopeless type
        (160435 'move' _indexOfInterest[160403](160432 call iteratorIndex _iterator[160404]))
      }
      ForLoop
      {
        unknown i[160439] "index var" "insert auto destroy"
        (160441 'move' i[160439] _indexOfInterest[160403])
        {
          unknown call_tmp[625025] "expr temp" "maybe param" "maybe type" "temp"
          (625028 'move' call_tmp[625025](160391 call + i[160439] 1))
          unknown call_tmp[625030] "expr temp" "maybe param" "maybe type" "temp"
          (625033 'move' call_tmp[625030](160394 call(358374 call (partial) indices _mt[232] this[161764]) call_tmp[625025]))
          unknown call_tmp[625037] "expr temp" "maybe param" "maybe type" "temp"
          (625040 'move' call_tmp[625037](160398 call(358380 call (partial) indices _mt[232] this[161764]) i[160439]))
          (160399 call = call_tmp[625030] call_tmp[625037])
        }
        label _continueLabel[160408]
        _indexOfInterest[160403]
        _iterator[160404]
      }
      label _breakLabel[160409]
    }
    unknown call_tmp[625044] "expr temp" "maybe param" "maybe type" "temp"
    (625047 'move' call_tmp[625044](160456 call(358392 call (partial) indices _mt[232] this[161764]) insertPt[160315]))
    (160458 call = call_tmp[625044] ind[160309])
    {
      unknown _indexOfInterest[160490] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160491] "expr temp" "temp"
      unknown call_tmp[625051] "expr temp" "maybe param" "maybe type" "temp"
      (625054 'move' call_tmp[625051](358399 call _arrs _mt[232] this[161764]))
      (160500 'move' _iterator[160491](160498 call _getIterator call_tmp[625051]))
      Defer
      {
        {
          (160516 call _freeIterator _iterator[160491])
        }
      }
      { scopeless type
        (160505 'move' _indexOfInterest[160490](160502 call iteratorIndex _iterator[160491]))
      }
      ForLoop
      {
        unknown a[160509] "index var" "insert auto destroy"
        (160511 'move' a[160509] _indexOfInterest[160490])
        {
          unknown call_tmp[625060] "expr temp" "maybe param" "maybe type" "temp"
          (625063 'move' call_tmp[625060](358406 call _nnz _mt[232] this[161764]))
          unknown call_tmp[625065] "expr temp" "maybe param" "maybe type" "temp"
          (625068 'move' call_tmp[625065](160472 call - call_tmp[625060] 1))
          unknown call_tmp[625070] "expr temp" "maybe param" "maybe type" "temp"
          (625073 'move' call_tmp[625070](160474 call chpl_build_bounded_range insertPt[160315] call_tmp[625065]))
          unknown call_tmp[625075] "expr temp" "maybe param" "maybe type" "temp"
          (625078 'move' call_tmp[625075](160479 call + oldNNZDomSize[160367] 1))
          unknown call_tmp[625082] "expr temp" "maybe param" "maybe type" "temp"
          (625085 'move' call_tmp[625082](358412 call nnzDom _mt[232] this[161764]))
          unknown call_tmp[625089] "expr temp" "maybe param" "maybe type" "temp"
          (625092 'move' call_tmp[625089](160482 call size _mt[232] call_tmp[625082]))
          unknown call_tmp[625094] "expr temp" "maybe param" "maybe type" "temp"
          (625097 'move' call_tmp[625094](160485 call chpl_build_bounded_range call_tmp[625075] call_tmp[625089]))
          (160487 call(160466 call (partial) sparseShiftArray _mt[232] a[160509]) call_tmp[625070] call_tmp[625094])
        }
        label _continueLabel[160495]
        _indexOfInterest[160490]
        _iterator[160491]
      }
      label _breakLabel[160496]
    }
    (471843 'move' ret[471833](471842 'deref' 1))
    label _end_add_help[471831]
    (471835 return ret[471833])
  }
  function DefaultSparseDom[161702](?).rem_help[160532](arg _mt[161770]:_MT[227], arg this[161768]:DefaultSparseDom[161702](?), arg ind[160530]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[471847] "RVV" "temp"
    unknown call_tmp[625101] "maybe param" "maybe type" "temp"
    (625104 'move' call_tmp[625101](160542 call(358416 call (partial) find _mt[232] this[161768]) ind[160530]))
    const tmp[160543] "const" "insert auto destroy" "no copy" "temp"
    (492380 'init var' tmp[160543] call_tmp[625101])
    (160550 call _check_tuple_var_decl tmp[160543] 2)
    unknown call_tmp[625106] "maybe param" "maybe type" "temp"
    (625109 'move' call_tmp[625106](160544 call tmp[160543] 1))
    const found[160534] "const" "insert auto destroy"
    (492382 'init var' found[160534] call_tmp[625106])
    unknown call_tmp[625111] "maybe param" "maybe type" "temp"
    (625114 'move' call_tmp[625111](160547 call tmp[160543] 2))
    const insertPt[160536] "const" "insert auto destroy"
    (492384 'init var' insertPt[160536] call_tmp[625111])
    unknown call_tmp[625116] "expr temp" "maybe param" "maybe type" "temp"
    (625119 'move' call_tmp[625116](160557 call ! found[160534]))
    unknown call_tmp[625121] "expr temp" "maybe param" "maybe type" "temp"
    (625124 'move' call_tmp[625121](160580 call _cond_test call_tmp[625116]))
    if call_tmp[625121]
    {
      (160578 call halt "index not in domain: " ind[160530])
    }
    unknown call_tmp[625128] "expr temp" "maybe param" "maybe type" "temp"
    (625131 'move' call_tmp[625128](358424 call _nnz _mt[232] this[161768]))
    (160587 call -= call_tmp[625128] 1)
    {
      unknown _indexOfInterest[160610] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160611] "expr temp" "temp"
      unknown call_tmp[625135] "expr temp" "maybe param" "maybe type" "temp"
      (625138 'move' call_tmp[625135](358442 call _nnz _mt[232] this[161768]))
      unknown call_tmp[625140] "expr temp" "maybe param" "maybe type" "temp"
      (625143 'move' call_tmp[625140](160625 call chpl_direct_range_iter insertPt[160536] call_tmp[625135] 1))
      (160620 'move' _iterator[160611](160618 call _getIterator call_tmp[625140]))
      Defer
      {
        {
          (160641 call _freeIterator _iterator[160611])
        }
      }
      { scopeless type
        (160630 'move' _indexOfInterest[160610](160627 call iteratorIndex _iterator[160611]))
      }
      ForLoop
      {
        unknown i[160634] "index var" "insert auto destroy"
        (160636 'move' i[160634] _indexOfInterest[160610])
        {
          unknown call_tmp[625147] "expr temp" "maybe param" "maybe type" "temp"
          (625150 'move' call_tmp[625147](160598 call(358429 call (partial) indices _mt[232] this[161768]) i[160634]))
          unknown call_tmp[625154] "expr temp" "maybe param" "maybe type" "temp"
          (625157 'move' call_tmp[625154](160602 call + i[160634] 1))
          unknown call_tmp[625159] "expr temp" "maybe param" "maybe type" "temp"
          (625162 'move' call_tmp[625159](160605 call(358435 call (partial) indices _mt[232] this[161768]) call_tmp[625154]))
          (160606 call = call_tmp[625147] call_tmp[625159])
        }
        label _continueLabel[160615]
        _indexOfInterest[160610]
        _iterator[160611]
      }
      label _breakLabel[160616]
    }
    {
      unknown _indexOfInterest[160667] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[160668] "expr temp" "temp"
      unknown call_tmp[625166] "expr temp" "maybe param" "maybe type" "temp"
      (625169 'move' call_tmp[625166](358447 call _arrs _mt[232] this[161768]))
      (160677 'move' _iterator[160668](160675 call _getIterator call_tmp[625166]))
      Defer
      {
        {
          (160693 call _freeIterator _iterator[160668])
        }
      }
      { scopeless type
        (160682 'move' _indexOfInterest[160667](160679 call iteratorIndex _iterator[160668]))
      }
      ForLoop
      {
        unknown a[160686] "index var" "insert auto destroy"
        (160688 'move' a[160686] _indexOfInterest[160667])
        {
          unknown call_tmp[625175] "expr temp" "maybe param" "maybe type" "temp"
          (625178 'move' call_tmp[625175](358454 call _nnz _mt[232] this[161768]))
          unknown call_tmp[625180] "expr temp" "maybe param" "maybe type" "temp"
          (625183 'move' call_tmp[625180](160659 call - call_tmp[625175] 1))
          unknown call_tmp[625185] "expr temp" "maybe param" "maybe type" "temp"
          (625188 'move' call_tmp[625185](160661 call chpl_build_bounded_range insertPt[160536] call_tmp[625180]))
          (160664 call(160653 call (partial) sparseShiftArrayBack _mt[232] a[160686]) call_tmp[625185])
        }
        label _continueLabel[160672]
        _indexOfInterest[160667]
        _iterator[160668]
      }
      label _breakLabel[160673]
    }
    (471852 'move' ret[471847](471851 'deref' 1))
    (471849 return ret[471847])
  }
  function DefaultSparseDom[161702](?).dsiAdd[160711](arg _mt[161774]:_MT[227], arg this[161772]:DefaultSparseDom[161702](?), arg ind[160708] :
  (358459 call idxType _mt[232] this[161772])) : _unknown[43] "method" "primary method"
  {
    unknown ret[471856] "RVV" "temp"
    unknown call_tmp[625194] "expr temp" "maybe param" "maybe type" "temp"
    (625197 'move' call_tmp[625194](160720 call(358470 call (partial) add_help _mt[232] this[161772]) ind[160708]))
    (471861 'move' ret[471856](471860 'deref' call_tmp[625194]))
    (471858 return ret[471856])
  }
  where {
    unknown call_tmp[625201] "expr temp" "maybe param" "maybe type" "temp"
    (625204 'move' call_tmp[625201](358464 call rank _mt[232] this[161772]))
    (160715 call == call_tmp[625201] 1)
  }
  function DefaultSparseDom[161702](?).dsiRemove[160733](arg _mt[161778]:_MT[227], arg this[161776]:DefaultSparseDom[161702](?), arg ind[160730] :
  (358476 call idxType _mt[232] this[161776])) : _unknown[43] "method" "primary method"
  {
    unknown ret[471865] "RVV" "temp"
    unknown call_tmp[625210] "expr temp" "maybe param" "maybe type" "temp"
    (625213 'move' call_tmp[625210](160742 call(358487 call (partial) rem_help _mt[232] this[161776]) ind[160730]))
    (471870 'move' ret[471865](471869 'deref' call_tmp[625210]))
    (471867 return ret[471865])
  }
  where {
    unknown call_tmp[625217] "expr temp" "maybe param" "maybe type" "temp"
    (625220 'move' call_tmp[625217](358481 call rank _mt[232] this[161776]))
    (160737 call == call_tmp[625217] 1)
  }
  function DefaultSparseDom[161702](?).dsiAdd[160758](arg _mt[161782]:_MT[227], arg this[161780]:DefaultSparseDom[161702](?), arg ind[160755] :
  unknown call_tmp[625224] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method"
  {
    unknown ret[471874] "RVV" "temp"
    unknown call_tmp[625238] "expr temp" "maybe param" "maybe type" "temp"
    (625241 'move' call_tmp[625238](358503 call rank _mt[232] this[161780]))
    unknown call_tmp[625243] "expr temp" "maybe param" "maybe type" "temp"
    (625246 'move' call_tmp[625243](160762 call == call_tmp[625238] 1))
    unknown call_tmp[625248] "expr temp" "maybe param" "maybe type" "temp"
    (625251 'move' call_tmp[625248](160781 call _cond_test call_tmp[625243]))
    if call_tmp[625248]
    {
      unknown call_tmp[625255] "expr temp" "maybe param" "maybe type" "temp"
      (625258 'move' call_tmp[625255](160768 call ind[160755] 1))
      unknown call_tmp[625260] "expr temp" "maybe param" "maybe type" "temp"
      (625263 'move' call_tmp[625260](160770 call(358507 call (partial) add_help _mt[232] this[161780]) call_tmp[625255]))
      (471879 'move' ret[471874](471878 'deref' call_tmp[625260]))
      gotoReturn _end_dsiAdd[471872] _end_dsiAdd[471872]
    }
    {
      unknown call_tmp[625267] "expr temp" "maybe param" "maybe type" "temp"
      (625270 'move' call_tmp[625267](160777 call(358512 call (partial) add_help _mt[232] this[161780]) ind[160755]))
      (471884 'move' ret[471874](471883 'deref' call_tmp[625267]))
      gotoReturn _end_dsiAdd[471872] _end_dsiAdd[471872]
    }
    label _end_dsiAdd[471872]
    (471876 return ret[471874])
  }
  function DefaultSparseDom[161702](?).dsiRemove[160797](arg _mt[161786]:_MT[227], arg this[161784]:DefaultSparseDom[161702](?), arg ind[160794] :
  unknown call_tmp[625274] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method"
  {
    unknown ret[471890] "RVV" "temp"
    unknown call_tmp[625288] "expr temp" "maybe param" "maybe type" "temp"
    (625291 'move' call_tmp[625288](358528 call rank _mt[232] this[161784]))
    unknown call_tmp[625293] "expr temp" "maybe param" "maybe type" "temp"
    (625296 'move' call_tmp[625293](160801 call == call_tmp[625288] 1))
    unknown call_tmp[625298] "expr temp" "maybe param" "maybe type" "temp"
    (625301 'move' call_tmp[625298](160820 call _cond_test call_tmp[625293]))
    if call_tmp[625298]
    {
      unknown call_tmp[625305] "expr temp" "maybe param" "maybe type" "temp"
      (625308 'move' call_tmp[625305](160807 call ind[160794] 1))
      unknown call_tmp[625310] "expr temp" "maybe param" "maybe type" "temp"
      (625313 'move' call_tmp[625310](160809 call(358532 call (partial) rem_help _mt[232] this[161784]) call_tmp[625305]))
      (471895 'move' ret[471890](471894 'deref' call_tmp[625310]))
      gotoReturn _end_dsiRemove[471888] _end_dsiRemove[471888]
    }
    {
      unknown call_tmp[625317] "expr temp" "maybe param" "maybe type" "temp"
      (625320 'move' call_tmp[625317](160816 call(358537 call (partial) rem_help _mt[232] this[161784]) ind[160794]))
      (471900 'move' ret[471890](471899 'deref' call_tmp[625317]))
      gotoReturn _end_dsiRemove[471888] _end_dsiRemove[471888]
    }
    label _end_dsiRemove[471888]
    (471892 return ret[471890])
  }
  function DefaultSparseDom[161702](?).bulkAdd_help[160842](arg _mt[161790]:_MT[227], arg this[161788]:DefaultSparseDom[161702](?), arg inds[160839]:_array[133150](?), arg dataSorted[160845] :
  0 =
  0, arg isUnique[160849] :
  0 =
  0, arg addOn[160857] :
  (692421 call _cast borrowed locale?[389810] nil[38]) =
  (160855 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "compiler added where" "method" "primary method" "method overrides"
  {
    unknown ret[471906] "RVV" "temp"
    unknown call_tmp[625322] "expr temp" "maybe param" "maybe type" "temp"
    (625325 'move' call_tmp[625322](160867 call != addOn[160857] nil[38]))
    unknown call_tmp[625327] "expr temp" "maybe param" "maybe type" "temp"
    (625330 'move' call_tmp[625327](160904 call _cond_test call_tmp[625322]))
    if call_tmp[625327]
    {
      unknown call_tmp[625332] "expr temp" "maybe param" "maybe type" "temp"
      (625335 'move' call_tmp[625332](160871 '_wide_get_locale' this[161788]))
      unknown call_tmp[625337] "expr temp" "maybe param" "maybe type" "temp"
      (625340 'move' call_tmp[625337](160872 call chpl_localeID_to_locale call_tmp[625332]))
      unknown call_tmp[625342] "expr temp" "maybe param" "maybe type" "temp"
      (625345 'move' call_tmp[625342](160874 call != addOn[160857] call_tmp[625337]))
      unknown call_tmp[625347] "expr temp" "maybe param" "maybe type" "temp"
      (625350 'move' call_tmp[625347](160899 call _cond_test call_tmp[625342]))
      if call_tmp[625347]
      {
        (160896 call halt "Bulk index addition is only possible on the locale where the\n              sparse domain is created")
      }
    }
    (160919 call(358557 call (partial) bulkAdd_prepareInds _mt[232] this[161788]) inds[160839] dataSorted[160845] isUnique[160849] defaultComparator[251428])
    unknown call_tmp[625356] "expr temp" "maybe param" "maybe type" "temp"
    (625359 'move' call_tmp[625356](358566 call _nnz _mt[232] this[161788]))
    unknown call_tmp[625361] "expr temp" "maybe param" "maybe type" "temp"
    (625364 'move' call_tmp[625361](160923 call == call_tmp[625356] 0))
    unknown call_tmp[625366] "expr temp" "maybe param" "maybe type" "temp"
    (625369 'move' call_tmp[625366](161081 call _cond_test call_tmp[625361]))
    if call_tmp[625366]
    {
      const dupCount[160934] "const" "insert auto destroy"
      unknown tmp[518967] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[518968] "maybe param" "temp"
      (518973 'move' tmp[518968](518971 call _cond_test isUnique[160849]))
      if tmp[518968]
      {
        (518978 'move' tmp[518967](518975 '_paramFoldLogical' tmp[518968] 0))
      }
      {
        unknown tmp[518980] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (518982 'move' tmp[518980](160930 call(358573 call (partial) _countDuplicates _mt[232] this[161788]) inds[160839]))
        (518987 'move' tmp[518967](518984 '_paramFoldLogical' tmp[518968] tmp[518980]))
      }
      (492386 'init var' dupCount[160934] tmp[518967])
      unknown call_tmp[625375] "expr temp" "maybe param" "maybe type" "temp"
      (625378 'move' call_tmp[625375](358579 call _nnz _mt[232] this[161788]))
      unknown call_tmp[625382] "expr temp" "maybe param" "maybe type" "temp"
      (625385 'move' call_tmp[625382](160940 call size _mt[232] inds[160839]))
      unknown call_tmp[625387] "expr temp" "maybe param" "maybe type" "temp"
      (625390 'move' call_tmp[625387](160944 call - call_tmp[625382] dupCount[160934]))
      (160946 call += call_tmp[625375] call_tmp[625387])
      (160951 call(358587 call (partial) _bulkGrow _mt[232] this[161788]))
      unknown call_tmp[625396] "expr temp" "maybe param" "maybe type" "temp"
      (625399 'move' call_tmp[625396](358592 call indices _mt[232] this[161788]))
      unknown call_tmp[625403] "expr temp" "maybe param" "maybe type" "temp"
      (625406 'move' call_tmp[625403](160954 call _dom _mt[232] call_tmp[625396]))
      unknown call_tmp[625410] "maybe param" "maybe type" "temp"
      (625413 'move' call_tmp[625410](160957 call low _mt[232] call_tmp[625403]))
      unknown indIdx[160960] "insert auto destroy"
      (492388 'init var' indIdx[160960] call_tmp[625410])
      unknown call_tmp[625417] "expr temp" "maybe param" "maybe type" "temp"
      (625420 'move' call_tmp[625417](358597 call parentDom _mt[232] this[161788]))
      unknown call_tmp[625424] "expr temp" "maybe param" "maybe type" "temp"
      (625427 'move' call_tmp[625424](160964 call low _mt[232] call_tmp[625417]))
      unknown call_tmp[625429] "maybe param" "maybe type" "temp"
      (625432 'move' call_tmp[625429](160968 call - call_tmp[625424] 1))
      unknown prevIdx[160970] "insert auto destroy"
      (492390 'init var' prevIdx[160970] call_tmp[625429])
      unknown call_tmp[625434] "expr temp" "maybe param" "maybe type" "temp"
      (625437 'move' call_tmp[625434](161077 call _cond_test isUnique[160849]))
      if call_tmp[625434]
      {
        unknown call_tmp[625443] "expr temp" "maybe param" "maybe type" "temp"
        (625446 'move' call_tmp[625443](358608 call indices _mt[232] this[161788]))
        unknown call_tmp[625450] "expr temp" "maybe param" "maybe type" "temp"
        (625453 'move' call_tmp[625450](160976 call _dom _mt[232] call_tmp[625443]))
        unknown call_tmp[625457] "expr temp" "maybe param" "maybe type" "temp"
        (625460 'move' call_tmp[625457](160979 call low _mt[232] call_tmp[625450]))
        unknown call_tmp[625462] "expr temp" "maybe param" "maybe type" "temp"
        (625465 'move' call_tmp[625462](160982 call chpl_build_low_bounded_range call_tmp[625457]))
        unknown call_tmp[625469] "expr temp" "maybe param" "maybe type" "temp"
        (625472 'move' call_tmp[625469](160985 call size _mt[232] inds[160839]))
        unknown call_tmp[625474] "expr temp" "maybe param" "maybe type" "temp"
        (625477 'move' call_tmp[625474](160988 call # call_tmp[625462] call_tmp[625469]))
        unknown call_tmp[625479] "expr temp" "maybe param" "maybe type" "temp"
        (625482 'move' call_tmp[625479](160991 call(358603 call (partial) indices _mt[232] this[161788]) call_tmp[625474]))
        (160993 call = call_tmp[625479] inds[160839])
        unknown call_tmp[625486] "expr temp" "maybe param" "maybe type" "temp"
        (625489 'move' call_tmp[625486](160998 call size _mt[232] inds[160839]))
        (471911 'move' ret[471906](471910 'deref' call_tmp[625486]))
        gotoReturn _end_bulkAdd_help[471904] _end_bulkAdd_help[471904]
      }
      {
        {
          unknown _indexOfInterest[161037] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[161038] "expr temp" "temp"
          (161047 'move' _iterator[161038](161045 call _getIterator inds[160839]))
          Defer
          {
            {
              (161063 call _freeIterator _iterator[161038])
            }
          }
          { scopeless type
            (161052 'move' _indexOfInterest[161037](161049 call iteratorIndex _iterator[161038]))
          }
          ForLoop
          {
            unknown i[161056] "index var" "insert auto destroy"
            (161058 'move' i[161056] _indexOfInterest[161037])
            {
              unknown call_tmp[625491] "expr temp" "maybe param" "maybe type" "temp"
              (625494 'move' call_tmp[625491](161007 call == i[161056] prevIdx[160970]))
              unknown call_tmp[625496] "expr temp" "maybe param" "maybe type" "temp"
              (625499 'move' call_tmp[625496](161017 call _cond_test call_tmp[625491]))
              if call_tmp[625496]
              {
                continue _continueLabel[161042] _continueLabel[161042]
              }
              {
                (161014 call = prevIdx[160970] i[161056])
              }
              unknown call_tmp[625503] "expr temp" "maybe param" "maybe type" "temp"
              (625506 'move' call_tmp[625503](161027 call(358621 call (partial) indices _mt[232] this[161788]) indIdx[160960]))
              (161029 call = call_tmp[625503] i[161056])
              (161034 call += indIdx[160960] 1)
            }
            label _continueLabel[161042]
            _indexOfInterest[161037]
            _iterator[161038]
          }
          label _breakLabel[161043]
        }
        unknown call_tmp[625508] "expr temp" "maybe param" "maybe type" "temp"
        (625511 'move' call_tmp[625508](161073 call - indIdx[160960] 1))
        (471916 'move' ret[471906](471915 'deref' call_tmp[625508]))
        gotoReturn _end_bulkAdd_help[471904] _end_bulkAdd_help[471904]
      }
    }
    unknown call_tmp[625515] "maybe param" "maybe type" "temp"
    (625518 'move' call_tmp[625515](161095 call(358631 call (partial) __getActualInsertPts _mt[232] this[161788]) this[161788] inds[160839] isUnique[160849]))
    const tmp[161096] "const" "insert auto destroy" "no copy" "temp"
    (492392 'init var' tmp[161096] call_tmp[625515])
    (161103 call _check_tuple_var_decl tmp[161096] 2)
    unknown call_tmp[625520] "maybe param" "maybe type" "temp"
    (625523 'move' call_tmp[625520](161097 call tmp[161096] 1))
    const actualInsertPts[161085] "const" "insert auto destroy"
    (492394 'init var' actualInsertPts[161085] call_tmp[625520])
    unknown call_tmp[625525] "maybe param" "maybe type" "temp"
    (625528 'move' call_tmp[625525](161100 call tmp[161096] 2))
    const actualAddCnt[161087] "const" "insert auto destroy"
    (492396 'init var' actualAddCnt[161087] call_tmp[625525])
    unknown call_tmp[625532] "maybe param" "maybe type" "temp"
    (625535 'move' call_tmp[625532](358639 call _nnz _mt[232] this[161788]))
    const oldnnz[161109] "const" "insert auto destroy"
    (492398 'init var' oldnnz[161109] call_tmp[625532])
    unknown call_tmp[625539] "expr temp" "maybe param" "maybe type" "temp"
    (625542 'move' call_tmp[625539](358644 call _nnz _mt[232] this[161788]))
    (161114 call += call_tmp[625539] actualAddCnt[161087])
    (161119 call(358649 call (partial) _bulkGrow _mt[232] this[161788]))
    unknown call_tmp[625548] "expr temp" "maybe param" "maybe type" "temp"
    (625551 'move' call_tmp[625548](437002 call _dom _mt[232] inds[160839]))
    unknown call_tmp[625555] "maybe param" "maybe type" "temp"
    (625558 'move' call_tmp[625555](161122 call high _mt[232] call_tmp[625548]))
    unknown newIndIdx[161125] "insert auto destroy"
    (492400 'init var' newIndIdx[161125] call_tmp[625555])
    unknown oldIndIdx[161129] "insert auto destroy"
    (492402 'init var' oldIndIdx[161129] oldnnz[161109])
    unknown call_tmp[625560] "maybe param" "maybe type" "temp"
    (625563 'move' call_tmp[625560](161135 call actualInsertPts[161085] newIndIdx[161125]))
    unknown newLoc[161136] "insert auto destroy"
    (492404 'init var' newLoc[161136] call_tmp[625560])
    {
      unknown tmp[161177] "temp"
      unknown call_tmp[625565] "expr temp" "maybe param" "maybe type" "temp"
      (625568 'move' call_tmp[625565](161203 call - 1))
      unknown call_tmp[625570] "expr temp" "maybe param" "maybe type" "temp"
      (625573 'move' call_tmp[625570](161200 call == newLoc[161136] call_tmp[625565]))
      (161205 'move' tmp[161177](161198 call _cond_test call_tmp[625570]))
      WhileDo
      {
        {
          (161147 call -= newIndIdx[161125] 1)
          unknown call_tmp[625577] "expr temp" "maybe param" "maybe type" "temp"
          (625580 'move' call_tmp[625577](437006 call _dom _mt[232] inds[160839]))
          unknown call_tmp[625584] "expr temp" "maybe param" "maybe type" "temp"
          (625587 'move' call_tmp[625584](161153 call low _mt[232] call_tmp[625577]))
          unknown call_tmp[625589] "expr temp" "maybe param" "maybe type" "temp"
          (625592 'move' call_tmp[625589](161157 call - call_tmp[625584] 1))
          unknown call_tmp[625594] "expr temp" "maybe param" "maybe type" "temp"
          (625597 'move' call_tmp[625594](161159 call == newIndIdx[161125] call_tmp[625589]))
          unknown call_tmp[625599] "expr temp" "maybe param" "maybe type" "temp"
          (625602 'move' call_tmp[625599](161164 call _cond_test call_tmp[625594]))
          if call_tmp[625599]
          {
            break _breakLabel[161181] _breakLabel[161181]
          }
          unknown call_tmp[625604] "expr temp" "maybe param" "maybe type" "temp"
          (625607 'move' call_tmp[625604](161173 call actualInsertPts[161085] newIndIdx[161125]))
          (161174 call = newLoc[161136] call_tmp[625604])
        }
        label _continueLabel[161180]
        unknown call_tmp[625609] "expr temp" "maybe param" "maybe type" "temp"
        (625612 'move' call_tmp[625609](161191 call - 1))
        unknown call_tmp[625614] "expr temp" "maybe param" "maybe type" "temp"
        (625617 'move' call_tmp[625614](161188 call == newLoc[161136] call_tmp[625609]))
        (161193 'move' tmp[161177](161186 call _cond_test call_tmp[625614]))
        tmp[161177]
      }
      label _breakLabel[161181]
    }
    unknown arrShiftMap[161221] "insert auto destroy"
    unknown call_tmp[625619] "expr temp" "maybe param" "maybe type" "temp"
    (625622 'move' call_tmp[625619](161210 call chpl_build_bounded_range 1 oldnnz[161109]))
    unknown call_tmp[625624] "expr temp" "maybe param" "maybe type" "temp"
    (625627 'move' call_tmp[625624](161213 call chpl__buildDomainExpr call_tmp[625619]))
    unknown call_tmp[625629] "expr temp" "maybe param" "maybe type" "temp"
    (625632 'move' call_tmp[625629](161217 call chpl__ensureDomainExpr call_tmp[625624]))
    unknown call_tmp[625634] "expr temp" "maybe param" "maybe type" "temp"
    (625637 'move' call_tmp[625634](161219 call chpl__buildArrayRuntimeType call_tmp[625629] int(64)[13]))
    (492406 'default init var' arrShiftMap[161221] call_tmp[625634])
    {
      unknown _indexOfInterest[161427] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161428] "expr temp" "temp"
      unknown call_tmp[625641] "expr temp" "maybe param" "maybe type" "temp"
      (625644 'move' call_tmp[625641](358713 call _nnz _mt[232] this[161788]))
      unknown call_tmp[625646] "expr temp" "maybe param" "maybe type" "temp"
      (625649 'move' call_tmp[625646](161444 call - 1))
      unknown call_tmp[625651] "expr temp" "maybe param" "maybe type" "temp"
      (625654 'move' call_tmp[625651](161448 call chpl_direct_range_iter 1 call_tmp[625641] call_tmp[625646]))
      (161437 'move' _iterator[161428](161435 call _getIterator call_tmp[625651]))
      Defer
      {
        {
          (161464 call _freeIterator _iterator[161428])
        }
      }
      { scopeless type
        (161453 'move' _indexOfInterest[161427](161450 call iteratorIndex _iterator[161428]))
      }
      ForLoop
      {
        unknown i[161457] "index var" "insert auto destroy"
        (161459 'move' i[161457] _indexOfInterest[161427])
        {
          unknown tmp[403722] "maybe param" "temp"
          (403733 'move' tmp[403722](161236 call >= oldIndIdx[161129] 1))
          unknown call_tmp[625656] "expr temp" "maybe param" "maybe type" "temp"
          (625659 'move' call_tmp[625656](403735 call _cond_invalid tmp[403722]))
          if call_tmp[625656]
          {
            (403738 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[518994] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[518995] "maybe param" "temp"
          unknown call_tmp[625661] "expr temp" "maybe param" "maybe type" "temp"
          (625664 'move' call_tmp[625661](403723 call isTrue tmp[403722]))
          (519000 'move' tmp[518995](518998 call _cond_test call_tmp[625661]))
          if tmp[518995]
          {
            unknown tmp[519002] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[625666] "expr temp" "maybe param" "maybe type" "temp"
            (625669 'move' call_tmp[625666](161240 call > i[161457] newLoc[161136]))
            (519004 'move' tmp[519002](403726 call isTrue call_tmp[625666]))
            (519009 'move' tmp[518994](519006 '_paramFoldLogical' tmp[518995] tmp[519002]))
          }
          {
            (519014 'move' tmp[518994](519011 '_paramFoldLogical' tmp[518995] 0))
          }
          unknown call_tmp[625671] "expr temp" "maybe param" "maybe type" "temp"
          (625674 'move' call_tmp[625671](161421 call _cond_test tmp[518994]))
          if call_tmp[625671]
          {
            unknown call_tmp[625678] "expr temp" "maybe param" "maybe type" "temp"
            (625681 'move' call_tmp[625678](161247 call(358670 call (partial) indices _mt[232] this[161788]) i[161457]))
            unknown call_tmp[625685] "expr temp" "maybe param" "maybe type" "temp"
            (625688 'move' call_tmp[625685](161251 call(358676 call (partial) indices _mt[232] this[161788]) oldIndIdx[161129]))
            (161252 call = call_tmp[625678] call_tmp[625685])
            unknown call_tmp[625690] "expr temp" "maybe param" "maybe type" "temp"
            (625693 'move' call_tmp[625690](161259 call arrShiftMap[161221] oldIndIdx[161129]))
            (161261 call = call_tmp[625690] i[161457])
            (161266 call -= oldIndIdx[161129] 1)
          }
          {
            unknown tmp[403701] "maybe param" "temp"
            unknown call_tmp[625697] "expr temp" "maybe param" "maybe type" "temp"
            (625700 'move' call_tmp[625697](437010 call _dom _mt[232] inds[160839]))
            unknown call_tmp[625704] "expr temp" "maybe param" "maybe type" "temp"
            (625707 'move' call_tmp[625704](161271 call low _mt[232] call_tmp[625697]))
            (403712 'move' tmp[403701](161274 call >= newIndIdx[161125] call_tmp[625704]))
            unknown call_tmp[625709] "expr temp" "maybe param" "maybe type" "temp"
            (625712 'move' call_tmp[625709](403714 call _cond_invalid tmp[403701]))
            if call_tmp[625709]
            {
              (403717 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[519021] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[519022] "maybe param" "temp"
            unknown call_tmp[625714] "expr temp" "maybe param" "maybe type" "temp"
            (625717 'move' call_tmp[625714](403702 call isTrue tmp[403701]))
            (519027 'move' tmp[519022](519025 call _cond_test call_tmp[625714]))
            if tmp[519022]
            {
              unknown tmp[519029] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              unknown call_tmp[625719] "expr temp" "maybe param" "maybe type" "temp"
              (625722 'move' call_tmp[625719](161278 call == i[161457] newLoc[161136]))
              (519031 'move' tmp[519029](403705 call isTrue call_tmp[625719]))
              (519036 'move' tmp[519021](519033 '_paramFoldLogical' tmp[519022] tmp[519029]))
            }
            {
              (519041 'move' tmp[519021](519038 '_paramFoldLogical' tmp[519022] 0))
            }
            unknown call_tmp[625724] "expr temp" "maybe param" "maybe type" "temp"
            (625727 'move' call_tmp[625724](161416 call _cond_test tmp[519021]))
            if call_tmp[625724]
            {
              unknown call_tmp[625731] "expr temp" "maybe param" "maybe type" "temp"
              (625734 'move' call_tmp[625731](161285 call(358690 call (partial) indices _mt[232] this[161788]) i[161457]))
              unknown call_tmp[625736] "expr temp" "maybe param" "maybe type" "temp"
              (625739 'move' call_tmp[625736](161289 call inds[160839] newIndIdx[161125]))
              (161290 call = call_tmp[625731] call_tmp[625736])
              (161296 call -= newIndIdx[161125] 1)
              unknown call_tmp[625743] "expr temp" "maybe param" "maybe type" "temp"
              (625746 'move' call_tmp[625743](437014 call _dom _mt[232] inds[160839]))
              unknown call_tmp[625750] "expr temp" "maybe param" "maybe type" "temp"
              (625753 'move' call_tmp[625750](161301 call low _mt[232] call_tmp[625743]))
              unknown call_tmp[625755] "expr temp" "maybe param" "maybe type" "temp"
              (625758 'move' call_tmp[625755](161304 call >= newIndIdx[161125] call_tmp[625750]))
              unknown call_tmp[625760] "expr temp" "maybe param" "maybe type" "temp"
              (625763 'move' call_tmp[625760](161321 call _cond_test call_tmp[625755]))
              if call_tmp[625760]
              {
                unknown call_tmp[625765] "expr temp" "maybe param" "maybe type" "temp"
                (625768 'move' call_tmp[625765](161310 call actualInsertPts[161085] newIndIdx[161125]))
                (161311 call = newLoc[161136] call_tmp[625765])
              }
              {
                unknown call_tmp[625770] "expr temp" "maybe param" "maybe type" "temp"
                (625773 'move' call_tmp[625770](161316 call - 2))
                (161318 call = newLoc[161136] call_tmp[625770])
              }
              {
                unknown tmp[161365] "temp"
                unknown call_tmp[625775] "expr temp" "maybe param" "maybe type" "temp"
                (625778 'move' call_tmp[625775](161391 call - 1))
                unknown call_tmp[625780] "expr temp" "maybe param" "maybe type" "temp"
                (625783 'move' call_tmp[625780](161388 call == newLoc[161136] call_tmp[625775]))
                (161393 'move' tmp[161365](161386 call _cond_test call_tmp[625780]))
                WhileDo
                {
                  {
                    (161335 call -= newIndIdx[161125] 1)
                    unknown call_tmp[625787] "expr temp" "maybe param" "maybe type" "temp"
                    (625790 'move' call_tmp[625787](437018 call _dom _mt[232] inds[160839]))
                    unknown call_tmp[625794] "expr temp" "maybe param" "maybe type" "temp"
                    (625797 'move' call_tmp[625794](161341 call low _mt[232] call_tmp[625787]))
                    unknown call_tmp[625799] "expr temp" "maybe param" "maybe type" "temp"
                    (625802 'move' call_tmp[625799](161345 call - call_tmp[625794] 1))
                    unknown call_tmp[625804] "expr temp" "maybe param" "maybe type" "temp"
                    (625807 'move' call_tmp[625804](161347 call == newIndIdx[161125] call_tmp[625799]))
                    unknown call_tmp[625809] "expr temp" "maybe param" "maybe type" "temp"
                    (625812 'move' call_tmp[625809](161352 call _cond_test call_tmp[625804]))
                    if call_tmp[625809]
                    {
                      break _breakLabel[161369] _breakLabel[161369]
                    }
                    unknown call_tmp[625814] "expr temp" "maybe param" "maybe type" "temp"
                    (625817 'move' call_tmp[625814](161361 call actualInsertPts[161085] newIndIdx[161125]))
                    (161362 call = newLoc[161136] call_tmp[625814])
                  }
                  label _continueLabel[161368]
                  unknown call_tmp[625819] "expr temp" "maybe param" "maybe type" "temp"
                  (625822 'move' call_tmp[625819](161379 call - 1))
                  unknown call_tmp[625824] "expr temp" "maybe param" "maybe type" "temp"
                  (625827 'move' call_tmp[625824](161376 call == newLoc[161136] call_tmp[625819]))
                  (161381 'move' tmp[161365](161374 call _cond_test call_tmp[625824]))
                  tmp[161365]
                }
                label _breakLabel[161369]
              }
            }
            {
              (161414 call halt "Something went wrong")
            }
          }
        }
        label _continueLabel[161432]
        _indexOfInterest[161427]
        _iterator[161428]
      }
      label _breakLabel[161433]
    }
    {
      unknown _indexOfInterest[161484] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[161485] "expr temp" "temp"
      unknown call_tmp[625831] "expr temp" "maybe param" "maybe type" "temp"
      (625834 'move' call_tmp[625831](358718 call _arrs _mt[232] this[161788]))
      (161494 'move' _iterator[161485](161492 call _getIterator call_tmp[625831]))
      Defer
      {
        {
          (161510 call _freeIterator _iterator[161485])
        }
      }
      { scopeless type
        (161499 'move' _indexOfInterest[161484](161496 call iteratorIndex _iterator[161485]))
      }
      ForLoop
      {
        unknown a[161503] "index var" "insert auto destroy"
        (161505 'move' a[161503] _indexOfInterest[161484])
        (161482 call(161476 call (partial) sparseBulkShiftArray _mt[232] a[161503]) arrShiftMap[161221] oldnnz[161109])
        label _continueLabel[161489]
        _indexOfInterest[161484]
        _iterator[161485]
      }
      label _breakLabel[161490]
    }
    (471921 'move' ret[471906](471920 'deref' actualAddCnt[161087]))
    label _end_bulkAdd_help[471904]
    (471908 return ret[471906])
    (329434 'used modules list'(160862 'use' Sort[251417] 'only' ))
  }
  where {
    unknown call_tmp[625840] "expr temp" "maybe param" "maybe type" "temp"
    (625843 'move' call_tmp[625840](358543 call rank _mt[232] this[161788]))
    unknown call_tmp[625847] "expr temp" "maybe param" "maybe type" "temp"
    (625850 'move' call_tmp[625847](358548 call idxType _mt[232] this[161788]))
    unknown call_tmp[625852] "expr temp" "maybe param" "maybe type" "temp"
    (625855 'move' call_tmp[625852](160835 call chpl__buildIndexType call_tmp[625840] call_tmp[625847]))
    unknown call_tmp[625859] "expr temp" "maybe param" "maybe type" "temp"
    (625862 'move' call_tmp[625859](437026 call eltType _mt[232] inds[160839]))
    unknown call_tmp[625864] "expr temp" "maybe param" "maybe type" "temp"
    (625867 'move' call_tmp[625864](437030 call == call_tmp[625852] call_tmp[625859]))
    (437024 call & 1 call_tmp[625864])
  }
  function DefaultSparseDom[161702](?).dsiMyDist[161524](arg _mt[161794]:_MT[227], arg this[161792]:DefaultSparseDom[161702](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[471925] "RVV" "temp"
    unknown call_tmp[625871] "expr temp" "maybe param" "maybe type" "temp"
    (625874 'move' call_tmp[625871](358728 call dist _mt[232] this[161792]))
    (471931 'move' ret[471925](471930 'coerce' call_tmp[625871] unmanaged BaseDist[389902]))
    (471927 return ret[471925])
  }
  { scopeless type
    unmanaged BaseDist[389902]
  }
  function DefaultSparseDom[161702](?).dsiClear[161537](arg _mt[161798]:_MT[227], arg this[161796]:DefaultSparseDom[161702](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[625878] "expr temp" "maybe param" "maybe type" "temp"
    (625881 'move' call_tmp[625878](358733 call _nnz _mt[232] this[161796]))
    (161541 call = call_tmp[625878] 0)
    (471933 return _void[47])
  }
  function DefaultSparseDom[161702](?).dimIter[161551](arg _mt[161802]:_MT[227], arg this[161800]:DefaultSparseDom[161702](?), param arg d[161549]:_any[170](?), arg ind[161553]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471937] "RVV" "temp"
    unknown call_tmp[625885] "expr temp" "maybe param" "maybe type" "temp"
    (625888 'move' call_tmp[625885](358739 call rank _mt[232] this[161800]))
    unknown call_tmp[625890] "expr temp" "maybe param" "maybe type" "temp"
    (625893 'move' call_tmp[625890](161558 call - call_tmp[625885] 1))
    unknown call_tmp[625895] "expr temp" "maybe param" "maybe type" "temp"
    (625898 'move' call_tmp[625895](161560 call != d[161549] call_tmp[625890]))
    unknown call_tmp[625900] "expr temp" "maybe param" "maybe type" "temp"
    (625903 'move' call_tmp[625900](161585 call _cond_test call_tmp[625895]))
    if call_tmp[625900]
    {
      (161582 call compilerError "dimIter() not supported on sparse domains for dimensions other than the last")
    }
    (161608 call halt "dimIter() not yet implemented for sparse domains")
    unknown yret[471941] "YVV" "temp"
    unknown call_tmp[625907] "expr temp" "maybe param" "maybe type" "temp"
    (625910 'move' call_tmp[625907](161613 call(358744 call (partial) indices _mt[232] this[161800]) 1))
    (471944 'move' yret[471941](471943 'deref' call_tmp[625907]))
    (471946 yield yret[471941])
    (471939 return ret[471937])
  }
  function DefaultSparseDom[161702](?).dsiAssignDomain[161624](arg _mt[161806]:_MT[227], arg this[161804]:DefaultSparseDom[161702](?), arg rhs[161621]:_domain[123390](?), arg lhsPrivate[161627]:bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (161634 call chpl_assignDomainWithIndsIterSafeForRemoving this[161804] rhs[161621])
    (471948 return _void[47])
  }
  function DefaultSparseDom[161702](?).dsiHasSingleLocalSubdomain[161641](arg _mt[161810]:_MT[227], arg this[161808]:DefaultSparseDom[161702](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[471952] "RVV" "param" "temp"
    (471957 'move' ret[471952](471956 'deref' 1))
    (471954 return ret[471952])
  }
  function DefaultSparseDom[161702](?).dsiLocalSubdomain[161655](arg _mt[161814]:_MT[227], arg this[161812]:DefaultSparseDom[161702](?), arg loc[161652]:locale[26]) : _unknown[43] "method" "primary method"
  {
    unknown ret[471961] "RVV" "temp"
    unknown call_tmp[625912] "expr temp" "maybe param" "maybe type" "temp"
    (625915 'move' call_tmp[625912](161658 '_wide_get_locale' this[161812]))
    unknown call_tmp[625917] "expr temp" "maybe param" "maybe type" "temp"
    (625920 'move' call_tmp[625917](161659 call chpl_localeID_to_locale call_tmp[625912]))
    unknown call_tmp[625922] "expr temp" "maybe param" "maybe type" "temp"
    (625925 'move' call_tmp[625922](161662 call == call_tmp[625917] loc[161652]))
    unknown call_tmp[625927] "expr temp" "maybe param" "maybe type" "temp"
    (625930 'move' call_tmp[625927](161694 call _cond_test call_tmp[625922]))
    if call_tmp[625927]
    {
      unknown call_tmp[625932] "expr temp" "maybe param" "maybe type" "temp"
      (625935 'move' call_tmp[625932](161668 call _to_unmanaged this[161812]))
      unknown call_tmp[625937] "expr temp" "maybe param" "maybe type" "temp"
      (625940 'move' call_tmp[625937](161670 call _getDomain call_tmp[625932]))
      (471966 'move' ret[471961](471965 'deref' call_tmp[625937]))
      gotoReturn _end_dsiLocalSubdomain[471959] _end_dsiLocalSubdomain[471959]
    }
    {
      unknown call_tmp[625944] "expr temp" "maybe param" "maybe type" "temp"
      (625947 'move' call_tmp[625944](358756 call rank _mt[232] this[161812]))
      unknown call_tmp[625951] "expr temp" "maybe param" "maybe type" "temp"
      (625954 'move' call_tmp[625951](358761 call idxType _mt[232] this[161812]))
      unknown call_tmp[625958] "expr temp" "maybe param" "maybe type" "temp"
      (625961 'move' call_tmp[625958](358766 call dist _mt[232] this[161812]))
      unknown call_tmp[625965] "expr temp" "maybe param" "maybe type" "temp"
      (625968 'move' call_tmp[625965](358771 call parentDom _mt[232] this[161812]))
      unknown call_tmp[625970] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (625973 'move' call_tmp[625970](691515 'new' anymanaged DefaultSparseDom[345850](?) call_tmp[625944] call_tmp[625951] call_tmp[625958] call_tmp[625965](_chpl_manager = unmanaged[209](?))))
      const copy[161683] "const" "insert auto destroy"
      (492408 'init var' copy[161683] call_tmp[625970])
      unknown call_tmp[625975] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (625978 'move' call_tmp[625975](691516 'new' _domain[123390](?) copy[161683]))
      (471971 'move' ret[471961](471970 'deref' call_tmp[625975]))
      gotoReturn _end_dsiLocalSubdomain[471959] _end_dsiLocalSubdomain[471959]
    }
    label _end_dsiLocalSubdomain[471959]
    (471963 return ret[471961])
  }
  function DefaultSparseDom[161702](?).super[726052](arg _mt[726054]:_MT[227], arg this[726056]:DefaultSparseDom[161702](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[726065] "RVV" "temp"
    unknown call_tmp[726072] "expr temp" "maybe param" "maybe type" "temp"
    (726075 'move' call_tmp[726072](726060 '.v' this[726056] c"super"))
    (726070 'move' ret[726065](726069 'deref' call_tmp[726072]))
    (726067 return ret[726065])
  }
  function DefaultSparseDom[161702](?).dist[726077](arg _mt[726079]:_MT[227], arg this[726081]:DefaultSparseDom[161702](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[726090] "RVV" "temp"
    unknown call_tmp[726097] "expr temp" "maybe param" "maybe type" "temp"
    (726100 'move' call_tmp[726097](726085 '.' this[726081] c"dist"))
    (726095 'move' ret[726090](726094 'addr of' call_tmp[726097]))
    (726092 return ret[726090])
  }
  function DefaultSparseDom[161702](?)._nnz[726102](arg _mt[726104]:_MT[227], arg this[726106]:DefaultSparseDom[161702](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[726115] "RVV" "temp"
    unknown call_tmp[726122] "expr temp" "maybe param" "maybe type" "temp"
    (726125 'move' call_tmp[726122](726110 '.' this[726106] c"_nnz"))
    (726120 'move' ret[726115](726119 'addr of' call_tmp[726122]))
    (726117 return ret[726115])
  }
  function DefaultSparseDom[161702](?).indices[726127](arg _mt[726129]:_MT[227], arg this[726131]:DefaultSparseDom[161702](?)) ref : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[726140] "RVV" "temp"
    unknown call_tmp[726147] "expr temp" "maybe param" "maybe type" "temp"
    (726150 'move' call_tmp[726147](726135 '.' this[726131] c"indices"))
    (726145 'move' ret[726140](726144 'addr of' call_tmp[726147]))
    (726142 return ret[726140])
  }
  function DefaultSparseDom[161702](?).deinit[726152](arg _mt[726154]:_MT[227], arg this[726156]:DefaultSparseDom[161702](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (726158 return _void[47])
  }
  function DefaultSparseDom[161702](?).writeThis[726161](arg _mt[726165]:_MT[227], arg this[726163]:DefaultSparseDom[161702](?), arg f[726164]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (726170 call writeThisDefaultImpl f[726164] this[726163])
    (726174 return _void[47])
  }
  function DefaultSparseDom[161702](?).readThis[726176](arg _mt[726180]:_MT[227], arg this[726178]:DefaultSparseDom[161702](?), arg f[726179]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (726184 call readThisDefaultImpl f[726179] this[726178])
    (726189 return _void[47])
  }
  type DefaultSparseDom[161702](?) val super[331045]:BaseSparseDomImpl[144471](?) "delay instantiation" "super class" val dist[159049]:unmanaged DefaultDist[389849] unmanaged DefaultDist[389849] val _nnz[159053]:int(64)[13] 0 unknown indices[159067] "local field"(159065 call chpl__buildArrayRuntimeType(159063 call chpl__ensureDomainExpr nnzDom[143445])(159061 call chpl__buildIndexType rank[144716] idxType[144719]))
  type anymanaged DefaultSparseDom[345850](?)
  function DefaultSparseArr[163114](?).dsiAccess[161826](arg _mt[163118]:_MT[227], arg this[163116]:DefaultSparseArr[163114](?), arg ind[161823] :
  (358778 call idxType _mt[232] this[163116])) ref : _unknown[43] "method" "primary method"
  {
    unknown ret[471977] "RVV" "temp"
    unknown call_tmp[625982] "expr temp" "maybe param" "maybe type" "temp"
    (625985 'move' call_tmp[625982](161931 call _cond_test 1))
    if call_tmp[625982]
    {
      unknown call_tmp[625989] "expr temp" "maybe param" "maybe type" "temp"
      (625992 'move' call_tmp[625989](358789 call dom _mt[232] this[163116]))
      unknown call_tmp[625996] "expr temp" "maybe param" "maybe type" "temp"
      (625999 'move' call_tmp[625996](161834 call parentDom _mt[232] call_tmp[625989]))
      unknown call_tmp[626003] "expr temp" "maybe param" "maybe type" "temp"
      (626006 'move' call_tmp[626003](161842 call(161837 call (partial) contains _mt[232] call_tmp[625996]) ind[161823]))
      unknown call_tmp[626008] "expr temp" "maybe param" "maybe type" "temp"
      (626011 'move' call_tmp[626008](161843 call ! call_tmp[626003]))
      unknown call_tmp[626013] "expr temp" "maybe param" "maybe type" "temp"
      (626016 'move' call_tmp[626013](161927 call _cond_test call_tmp[626008]))
      if call_tmp[626013]
      {
        unknown call_tmp[626018] "expr temp" "maybe param" "maybe type" "temp"
        (626021 'move' call_tmp[626018](161916 call _cond_test debugDefaultSparse[159041]))
        if call_tmp[626018]
        {
          unknown call_tmp[626023] "expr temp" "maybe param" "maybe type" "temp"
          (626026 'move' call_tmp[626023](358794 call here[92085]))
          unknown call_tmp[626030] "expr temp" "maybe param" "maybe type" "temp"
          (626033 'move' call_tmp[626030](161865 call id _mt[232] call_tmp[626023]))
          (161868 call writeln "On locale " call_tmp[626030])
          (161890 call writeln "In dsiAccess, got index " ind[161823])
          unknown call_tmp[626037] "expr temp" "maybe param" "maybe type" "temp"
          (626040 'move' call_tmp[626037](358799 call dom _mt[232] this[163116]))
          unknown call_tmp[626044] "expr temp" "maybe param" "maybe type" "temp"
          (626047 'move' call_tmp[626044](161911 call parentDom _mt[232] call_tmp[626037]))
          (161914 call writeln "dom.parentDom = " call_tmp[626044])
        }
        (161925 call halt "array index out of bounds: " ind[161823])
      }
    }
    unknown call_tmp[626051] "expr temp" "maybe param" "maybe type" "temp"
    (626054 'move' call_tmp[626051](358805 call dom _mt[232] this[163116]))
    unknown call_tmp[626058] "maybe param" "maybe type" "temp"
    (626061 'move' call_tmp[626058](161948 call(161943 call (partial) find _mt[232] call_tmp[626051]) ind[161823]))
    const tmp[161949] "const" "insert auto destroy" "no copy" "temp"
    (492410 'init var' tmp[161949] call_tmp[626058])
    (161956 call _check_tuple_var_decl tmp[161949] 2)
    unknown call_tmp[626063] "maybe param" "maybe type" "temp"
    (626066 'move' call_tmp[626063](161950 call tmp[161949] 1))
    const found[161937] "const" "insert auto destroy"
    (492412 'init var' found[161937] call_tmp[626063])
    unknown call_tmp[626068] "maybe param" "maybe type" "temp"
    (626071 'move' call_tmp[626068](161953 call tmp[161949] 2))
    const loc[161939] "const" "insert auto destroy"
    (492414 'init var' loc[161939] call_tmp[626068])
    unknown call_tmp[626073] "expr temp" "maybe param" "maybe type" "temp"
    (626076 'move' call_tmp[626073](161989 call _cond_test found[161937]))
    if call_tmp[626073]
    {
      unknown call_tmp[626080] "expr temp" "maybe param" "maybe type" "temp"
      (626083 'move' call_tmp[626080](161965 call(358812 call (partial) data _mt[232] this[163116]) loc[161939]))
      (471982 'move' ret[471977](471981 'addr of' call_tmp[626080]))
      gotoReturn _end_dsiAccess[471975] _end_dsiAccess[471975]
    }
    {
      (161987 call halt "attempting to assign a 'zero' value in a sparse array: " ind[161823])
    }
    label _end_dsiAccess[471975]
    (471979 return ret[471977])
  }
  where {
    unknown call_tmp[626087] "expr temp" "maybe param" "maybe type" "temp"
    (626090 'move' call_tmp[626087](358783 call rank _mt[232] this[163116]))
    (161830 call == call_tmp[626087] 1)
  }
  function DefaultSparseArr[163114](?).dsiAccess[162004](arg _mt[163122]:_MT[227], arg this[163120]:DefaultSparseArr[163114](?), arg ind[162001] :
  (358819 call idxType _mt[232] this[163120])) const ref : _unknown[43] "method" "primary method"
  {
    unknown ret[471988] "RVV" "temp"
    unknown call_tmp[626094] "expr temp" "maybe param" "maybe type" "temp"
    (626097 'move' call_tmp[626094](162034 call _cond_test 1))
    if call_tmp[626094]
    {
      unknown call_tmp[626101] "expr temp" "maybe param" "maybe type" "temp"
      (626104 'move' call_tmp[626101](358830 call dom _mt[232] this[163120]))
      unknown call_tmp[626108] "expr temp" "maybe param" "maybe type" "temp"
      (626111 'move' call_tmp[626108](162012 call parentDom _mt[232] call_tmp[626101]))
      unknown call_tmp[626115] "expr temp" "maybe param" "maybe type" "temp"
      (626118 'move' call_tmp[626115](162020 call(162015 call (partial) contains _mt[232] call_tmp[626108]) ind[162001]))
      unknown call_tmp[626120] "expr temp" "maybe param" "maybe type" "temp"
      (626123 'move' call_tmp[626120](162021 call ! call_tmp[626115]))
      unknown call_tmp[626125] "expr temp" "maybe param" "maybe type" "temp"
      (626128 'move' call_tmp[626125](162029 call _cond_test call_tmp[626120]))
      if call_tmp[626125]
      {
        (162027 call halt "array index out of bounds: " ind[162001])
      }
    }
    unknown call_tmp[626132] "expr temp" "maybe param" "maybe type" "temp"
    (626135 'move' call_tmp[626132](358837 call dom _mt[232] this[163120]))
    unknown call_tmp[626139] "maybe param" "maybe type" "temp"
    (626142 'move' call_tmp[626139](162051 call(162046 call (partial) find _mt[232] call_tmp[626132]) ind[162001]))
    const tmp[162052] "const" "insert auto destroy" "no copy" "temp"
    (492416 'init var' tmp[162052] call_tmp[626139])
    (162059 call _check_tuple_var_decl tmp[162052] 2)
    unknown call_tmp[626144] "maybe param" "maybe type" "temp"
    (626147 'move' call_tmp[626144](162053 call tmp[162052] 1))
    const found[162040] "const" "insert auto destroy"
    (492418 'init var' found[162040] call_tmp[626144])
    unknown call_tmp[626149] "maybe param" "maybe type" "temp"
    (626152 'move' call_tmp[626149](162056 call tmp[162052] 2))
    const loc[162042] "const" "insert auto destroy"
    (492420 'init var' loc[162042] call_tmp[626149])
    unknown call_tmp[626154] "expr temp" "maybe param" "maybe type" "temp"
    (626157 'move' call_tmp[626154](162074 call _cond_test found[162040]))
    if call_tmp[626154]
    {
      unknown call_tmp[626161] "expr temp" "maybe param" "maybe type" "temp"
      (626164 'move' call_tmp[626161](162068 call(358844 call (partial) data _mt[232] this[163120]) loc[162042]))
      (471993 'move' ret[471988](471992 'addr of' call_tmp[626161]))
      gotoReturn _end_dsiAccess[471986] _end_dsiAccess[471986]
    }
    {
      unknown call_tmp[626168] "expr temp" "maybe param" "maybe type" "temp"
      (626171 'move' call_tmp[626168](358850 call irv _mt[232] this[163120]))
      (471998 'move' ret[471988](471997 'addr of' call_tmp[626168]))
      gotoReturn _end_dsiAccess[471986] _end_dsiAccess[471986]
    }
    label _end_dsiAccess[471986]
    (471990 return ret[471988])
  }
  where {
    unknown call_tmp[626175] "expr temp" "maybe param" "maybe type" "temp"
    (626178 'move' call_tmp[626175](358824 call rank _mt[232] this[163120]))
    (162008 call == call_tmp[626175] 1)
  }
  function DefaultSparseArr[163114](?).dsiAccess[162092](arg _mt[163126]:_MT[227], arg this[163124]:DefaultSparseArr[163114](?), arg ind[162089] :
  unknown call_tmp[626182] "expr temp" "maybe param" "maybe type" "temp") ref : _unknown[43] "method" "primary method"
  {
    unknown ret[472004] "RVV" "temp"
    unknown call_tmp[626194] "expr temp" "maybe param" "maybe type" "temp"
    (626197 'move' call_tmp[626194](162118 call _cond_test 1))
    if call_tmp[626194]
    {
      unknown call_tmp[626201] "expr temp" "maybe param" "maybe type" "temp"
      (626204 'move' call_tmp[626201](358866 call dom _mt[232] this[163124]))
      unknown call_tmp[626208] "expr temp" "maybe param" "maybe type" "temp"
      (626211 'move' call_tmp[626208](162096 call parentDom _mt[232] call_tmp[626201]))
      unknown call_tmp[626215] "expr temp" "maybe param" "maybe type" "temp"
      (626218 'move' call_tmp[626215](162104 call(162099 call (partial) contains _mt[232] call_tmp[626208]) ind[162089]))
      unknown call_tmp[626220] "expr temp" "maybe param" "maybe type" "temp"
      (626223 'move' call_tmp[626220](162105 call ! call_tmp[626215]))
      unknown call_tmp[626225] "expr temp" "maybe param" "maybe type" "temp"
      (626228 'move' call_tmp[626225](162113 call _cond_test call_tmp[626220]))
      if call_tmp[626225]
      {
        (162111 call halt "array index out of bounds: " ind[162089])
      }
    }
    unknown call_tmp[626232] "expr temp" "maybe param" "maybe type" "temp"
    (626235 'move' call_tmp[626232](358873 call dom _mt[232] this[163124]))
    unknown call_tmp[626239] "maybe param" "maybe type" "temp"
    (626242 'move' call_tmp[626239](162135 call(162130 call (partial) find _mt[232] call_tmp[626232]) ind[162089]))
    const tmp[162136] "const" "insert auto destroy" "no copy" "temp"
    (492422 'init var' tmp[162136] call_tmp[626239])
    (162143 call _check_tuple_var_decl tmp[162136] 2)
    unknown call_tmp[626244] "maybe param" "maybe type" "temp"
    (626247 'move' call_tmp[626244](162137 call tmp[162136] 1))
    const found[162124] "const" "insert auto destroy"
    (492424 'init var' found[162124] call_tmp[626244])
    unknown call_tmp[626249] "maybe param" "maybe type" "temp"
    (626252 'move' call_tmp[626249](162140 call tmp[162136] 2))
    const loc[162126] "const" "insert auto destroy"
    (492426 'init var' loc[162126] call_tmp[626249])
    unknown call_tmp[626254] "expr temp" "maybe param" "maybe type" "temp"
    (626257 'move' call_tmp[626254](162161 call _cond_test found[162124]))
    if call_tmp[626254]
    {
      unknown call_tmp[626261] "expr temp" "maybe param" "maybe type" "temp"
      (626264 'move' call_tmp[626261](162152 call(358880 call (partial) data _mt[232] this[163124]) loc[162126]))
      (472009 'move' ret[472004](472008 'addr of' call_tmp[626261]))
      gotoReturn _end_dsiAccess[472002] _end_dsiAccess[472002]
    }
    {
      (162159 call halt "attempting to assign a 'zero' value in a sparse array: " ind[162089])
    }
    label _end_dsiAccess[472002]
    (472006 return ret[472004])
  }
  function DefaultSparseArr[163114](?).dsiAccess[162178](arg _mt[163130]:_MT[227], arg this[163128]:DefaultSparseArr[163114](?), arg ind[162175] :
  unknown call_tmp[626268] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "method" "primary method"
  {
    unknown ret[472015] "RVV" "temp"
    unknown call_tmp[626280] "expr temp" "maybe param" "maybe type" "temp"
    (626283 'move' call_tmp[626280](162208 call _cond_test 1))
    if call_tmp[626280]
    {
      unknown call_tmp[626287] "expr temp" "maybe param" "maybe type" "temp"
      (626290 'move' call_tmp[626287](358903 call dom _mt[232] this[163128]))
      unknown call_tmp[626294] "expr temp" "maybe param" "maybe type" "temp"
      (626297 'move' call_tmp[626294](162186 call parentDom _mt[232] call_tmp[626287]))
      unknown call_tmp[626301] "expr temp" "maybe param" "maybe type" "temp"
      (626304 'move' call_tmp[626301](162194 call(162189 call (partial) contains _mt[232] call_tmp[626294]) ind[162175]))
      unknown call_tmp[626306] "expr temp" "maybe param" "maybe type" "temp"
      (626309 'move' call_tmp[626306](162195 call ! call_tmp[626301]))
      unknown call_tmp[626311] "expr temp" "maybe param" "maybe type" "temp"
      (626314 'move' call_tmp[626311](162203 call _cond_test call_tmp[626306]))
      if call_tmp[626311]
      {
        (162201 call halt "array index out of bounds: " ind[162175])
      }
    }
    unknown call_tmp[626318] "expr temp" "maybe param" "maybe type" "temp"
    (626321 'move' call_tmp[626318](358910 call dom _mt[232] this[163128]))
    unknown call_tmp[626325] "maybe param" "maybe type" "temp"
    (626328 'move' call_tmp[626325](162225 call(162220 call (partial) find _mt[232] call_tmp[626318]) ind[162175]))
    const tmp[162226] "const" "insert auto destroy" "no copy" "temp"
    (492428 'init var' tmp[162226] call_tmp[626325])
    (162233 call _check_tuple_var_decl tmp[162226] 2)
    unknown call_tmp[626330] "maybe param" "maybe type" "temp"
    (626333 'move' call_tmp[626330](162227 call tmp[162226] 1))
    const found[162214] "const" "insert auto destroy"
    (492430 'init var' found[162214] call_tmp[626330])
    unknown call_tmp[626335] "maybe param" "maybe type" "temp"
    (626338 'move' call_tmp[626335](162230 call tmp[162226] 2))
    const loc[162216] "const" "insert auto destroy"
    (492432 'init var' loc[162216] call_tmp[626335])
    unknown call_tmp[626340] "expr temp" "maybe param" "maybe type" "temp"
    (626343 'move' call_tmp[626340](162248 call _cond_test found[162214]))
    if call_tmp[626340]
    {
      unknown call_tmp[626347] "expr temp" "maybe param" "maybe type" "temp"
      (626350 'move' call_tmp[626347](162242 call(358917 call (partial) data _mt[232] this[163128]) loc[162216]))
      (472020 'move' ret[472015](472019 'deref' call_tmp[626347]))
      gotoReturn _end_dsiAccess[472013] _end_dsiAccess[472013]
    }
    {
      unknown call_tmp[626354] "expr temp" "maybe param" "maybe type" "temp"
      (626357 'move' call_tmp[626354](358923 call irv _mt[232] this[163128]))
      (472025 'move' ret[472015](472024 'deref' call_tmp[626354]))
      gotoReturn _end_dsiAccess[472013] _end_dsiAccess[472013]
    }
    label _end_dsiAccess[472013]
    (472017 return ret[472015])
  }
  where {
    unknown call_tmp[626361] "expr temp" "maybe param" "maybe type" "temp"
    (626364 'move' call_tmp[626361](358897 call eltType _mt[232] this[163128]))
    (162183 call shouldReturnRvalueByValue call_tmp[626361])
  }
  function DefaultSparseArr[163114](?).dsiAccess[162266](arg _mt[163134]:_MT[227], arg this[163132]:DefaultSparseArr[163114](?), arg ind[162263] :
  unknown call_tmp[626368] "expr temp" "maybe param" "maybe type" "temp") const ref : _unknown[43] "method" "primary method"
  {
    unknown ret[472031] "RVV" "temp"
    unknown call_tmp[626380] "expr temp" "maybe param" "maybe type" "temp"
    (626383 'move' call_tmp[626380](162296 call _cond_test 1))
    if call_tmp[626380]
    {
      unknown call_tmp[626387] "expr temp" "maybe param" "maybe type" "temp"
      (626390 'move' call_tmp[626387](358944 call dom _mt[232] this[163132]))
      unknown call_tmp[626394] "expr temp" "maybe param" "maybe type" "temp"
      (626397 'move' call_tmp[626394](162274 call parentDom _mt[232] call_tmp[626387]))
      unknown call_tmp[626401] "expr temp" "maybe param" "maybe type" "temp"
      (626404 'move' call_tmp[626401](162282 call(162277 call (partial) contains _mt[232] call_tmp[626394]) ind[162263]))
      unknown call_tmp[626406] "expr temp" "maybe param" "maybe type" "temp"
      (626409 'move' call_tmp[626406](162283 call ! call_tmp[626401]))
      unknown call_tmp[626411] "expr temp" "maybe param" "maybe type" "temp"
      (626414 'move' call_tmp[626411](162291 call _cond_test call_tmp[626406]))
      if call_tmp[626411]
      {
        (162289 call halt "array index out of bounds: " ind[162263])
      }
    }
    unknown call_tmp[626418] "expr temp" "maybe param" "maybe type" "temp"
    (626421 'move' call_tmp[626418](358951 call dom _mt[232] this[163132]))
    unknown call_tmp[626425] "maybe param" "maybe type" "temp"
    (626428 'move' call_tmp[626425](162313 call(162308 call (partial) find _mt[232] call_tmp[626418]) ind[162263]))
    const tmp[162314] "const" "insert auto destroy" "no copy" "temp"
    (492434 'init var' tmp[162314] call_tmp[626425])
    (162321 call _check_tuple_var_decl tmp[162314] 2)
    unknown call_tmp[626430] "maybe param" "maybe type" "temp"
    (626433 'move' call_tmp[626430](162315 call tmp[162314] 1))
    const found[162302] "const" "insert auto destroy"
    (492436 'init var' found[162302] call_tmp[626430])
    unknown call_tmp[626435] "maybe param" "maybe type" "temp"
    (626438 'move' call_tmp[626435](162318 call tmp[162314] 2))
    const loc[162304] "const" "insert auto destroy"
    (492438 'init var' loc[162304] call_tmp[626435])
    unknown call_tmp[626440] "expr temp" "maybe param" "maybe type" "temp"
    (626443 'move' call_tmp[626440](162336 call _cond_test found[162302]))
    if call_tmp[626440]
    {
      unknown call_tmp[626447] "expr temp" "maybe param" "maybe type" "temp"
      (626450 'move' call_tmp[626447](162330 call(358958 call (partial) data _mt[232] this[163132]) loc[162304]))
      (472036 'move' ret[472031](472035 'addr of' call_tmp[626447]))
      gotoReturn _end_dsiAccess[472029] _end_dsiAccess[472029]
    }
    {
      unknown call_tmp[626454] "expr temp" "maybe param" "maybe type" "temp"
      (626457 'move' call_tmp[626454](358964 call irv _mt[232] this[163132]))
      (472041 'move' ret[472031](472040 'addr of' call_tmp[626454]))
      gotoReturn _end_dsiAccess[472029] _end_dsiAccess[472029]
    }
    label _end_dsiAccess[472029]
    (472033 return ret[472031])
  }
  where {
    unknown call_tmp[626461] "expr temp" "maybe param" "maybe type" "temp"
    (626464 'move' call_tmp[626461](358938 call eltType _mt[232] this[163132]))
    (162271 call shouldReturnRvalueByConstRef call_tmp[626461])
  }
  function DefaultSparseArr[163114](?).these[162347](arg _mt[163138]:_MT[227], arg this[163136]:DefaultSparseArr[163114](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[472047] "RVV" "temp"
    {
      unknown _indexOfInterest[162365] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162366] "expr temp" "temp"
      unknown call_tmp[626468] "expr temp" "maybe param" "maybe type" "temp"
      (626471 'move' call_tmp[626468](358975 call dom _mt[232] this[163136]))
      unknown call_tmp[626475] "expr temp" "maybe param" "maybe type" "temp"
      (626478 'move' call_tmp[626475](162380 call _nnz _mt[232] call_tmp[626468]))
      unknown call_tmp[626480] "expr temp" "maybe param" "maybe type" "temp"
      (626483 'move' call_tmp[626480](162383 call chpl_direct_range_iter 1 call_tmp[626475] 1))
      (162375 'move' _iterator[162366](162373 call _getIterator call_tmp[626480]))
      Defer
      {
        {
          (162399 call _freeIterator _iterator[162366])
        }
      }
      { scopeless type
        (162388 'move' _indexOfInterest[162365](162385 call iteratorIndex _iterator[162366]))
      }
      ForLoop
      {
        unknown i[162392] "index var" "insert auto destroy"
        (162394 'move' i[162392] _indexOfInterest[162365])
        unknown yret[472051] "YVV" "temp"
        unknown call_tmp[626487] "expr temp" "maybe param" "maybe type" "temp"
        (626490 'move' call_tmp[626487](162362 call(358969 call (partial) data _mt[232] this[163136]) i[162392]))
        (472054 'move' yret[472051](472053 'addr of' call_tmp[626487]))
        (472056 yield yret[472051])
        label _continueLabel[162370]
        _indexOfInterest[162365]
        _iterator[162366]
      }
      label _breakLabel[162371]
    }
    (472049 return ret[472047])
  }
  function DefaultSparseArr[163114](?).these[162415](arg _mt[163142]:_MT[227], arg this[163140]:DefaultSparseArr[163114](?), param arg tag[162412]:iterKind[697]) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[472060] "RVV" "temp"
    unknown call_tmp[626494] "expr temp" "maybe param" "maybe type" "temp"
    (626497 'move' call_tmp[626494](358983 call dom _mt[232] this[163140]))
    unknown call_tmp[626501] "maybe param" "maybe type" "temp"
    (626504 'move' call_tmp[626501](162425 call _nnz _mt[232] call_tmp[626494]))
    const numElems[162428] "const" "insert auto destroy"
    (492440 'init var' numElems[162428] call_tmp[626501])
    unknown call_tmp[626506] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (626509 'move' call_tmp[626506](162437 'typeof' numElems[162428]))
    unknown call_tmp[626511] "expr temp" "maybe param" "maybe type" "temp"
    (626514 'move' call_tmp[626511](162435 call _computeNumChunks numElems[162428]))
    unknown call_tmp[626516] "maybe param" "maybe type" "temp"
    (626519 'move' call_tmp[626516](162438 call _cast call_tmp[626506] call_tmp[626511]))
    const numChunks[162440] "const" "insert auto destroy"
    (492442 'init var' numChunks[162440] call_tmp[626516])
    unknown call_tmp[626521] "expr temp" "maybe param" "maybe type" "temp"
    (626524 'move' call_tmp[626521](162469 call _cond_test debugDefaultSparse[159041]))
    if call_tmp[626521]
    {
      (162466 call writeln "DefaultSparseArr standalone: " numChunks[162440] " chunks, " numElems[162428] " elems")
    }
    unknown call_tmp[626526] "expr temp" "maybe param" "maybe type" "temp"
    (626529 'move' call_tmp[626526](162475 call <= numChunks[162440] 1))
    unknown call_tmp[626531] "expr temp" "maybe param" "maybe type" "temp"
    (626534 'move' call_tmp[626531](162776 call _cond_test call_tmp[626526]))
    if call_tmp[626531]
    {
      {
        unknown _indexOfInterest[162489] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[162490] "expr temp" "temp"
        unknown call_tmp[626536] "expr temp" "maybe param" "maybe type" "temp"
        (626539 'move' call_tmp[626536](162504 call chpl_direct_range_iter 1 numElems[162428] 1))
        (162499 'move' _iterator[162490](162497 call _getIterator call_tmp[626536]))
        Defer
        {
          {
            (162520 call _freeIterator _iterator[162490])
          }
        }
        { scopeless type
          (162509 'move' _indexOfInterest[162489](162506 call iteratorIndex _iterator[162490]))
        }
        ForLoop
        {
          unknown i[162513] "index var" "insert auto destroy"
          (162515 'move' i[162513] _indexOfInterest[162489])
          {
            unknown yret[472064] "YVV" "temp"
            unknown call_tmp[626543] "expr temp" "maybe param" "maybe type" "temp"
            (626546 'move' call_tmp[626543](162485 call(358994 call (partial) data _mt[232] this[163140]) i[162513]))
            (472067 'move' yret[472064](472066 'addr of' call_tmp[626543]))
            (472069 yield yret[472064])
          }
          label _continueLabel[162494]
          _indexOfInterest[162489]
          _iterator[162490]
        }
        label _breakLabel[162495]
      }
    }
    {
      {
        unknown tmpIter[162579] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[626548] "expr temp" "maybe param" "maybe type" "temp"
        (626551 'move' call_tmp[626548](162532 call chpl_build_bounded_range 1 numElems[162428]))
        (162582 'move' tmpIter[162579](162536 call chunks call_tmp[626548] numChunks[162440]))
        unknown isRngDomArr[162756] "maybe param" "temp"
        unknown tmp[403743] "maybe param" "temp"
        (403754 'move' tmp[403743](162758 call isBoundedRange tmpIter[162579]))
        unknown call_tmp[626553] "expr temp" "maybe param" "maybe type" "temp"
        (626556 'move' call_tmp[626553](403756 call _cond_invalid tmp[403743]))
        if call_tmp[626553]
        {
          (403759 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[519075] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[519076] "maybe param" "temp"
        unknown call_tmp[626558] "expr temp" "maybe param" "maybe type" "temp"
        (626561 'move' call_tmp[626558](403744 call isTrue tmp[403743]))
        (519081 'move' tmp[519076](519079 call _cond_test call_tmp[626558]))
        if tmp[519076]
        {
          (519086 'move' tmp[519075](519083 '_paramFoldLogical' tmp[519076] 1))
        }
        {
          unknown tmp[403764] "maybe param" "temp"
          (403775 'move' tmp[403764](162761 call isDomain tmpIter[162579]))
          unknown call_tmp[626563] "expr temp" "maybe param" "maybe type" "temp"
          (626566 'move' call_tmp[626563](403777 call _cond_invalid tmp[403764]))
          if call_tmp[626563]
          {
            (403780 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[519048] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[519049] "maybe param" "temp"
          unknown call_tmp[626568] "expr temp" "maybe param" "maybe type" "temp"
          (626571 'move' call_tmp[626568](403765 call isTrue tmp[403764]))
          (519054 'move' tmp[519049](519052 call _cond_test call_tmp[626568]))
          if tmp[519049]
          {
            (519059 'move' tmp[519048](519056 '_paramFoldLogical' tmp[519049] 1))
          }
          {
            unknown tmp[519061] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[626573] "expr temp" "maybe param" "maybe type" "temp"
            (626576 'move' call_tmp[626573](162764 call isArray tmpIter[162579]))
            (519063 'move' tmp[519061](403769 call isTrue call_tmp[626573]))
            (519068 'move' tmp[519048](519065 '_paramFoldLogical' tmp[519049] tmp[519061]))
          }
          unknown tmp[519088] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (519090 'move' tmp[519088](403748 call isTrue tmp[519048]))
          (519095 'move' tmp[519075](519092 '_paramFoldLogical' tmp[519076] tmp[519088]))
        }
        (162771 'move' isRngDomArr[162756] tmp[519075])
        if isRngDomArr[162756]
        {
          const _coforallCount[162623] "const" "end count" "temp"
          (162692 'move' _coforallCount[162623](162689 call _endCountAlloc 1))
          unknown numTasks[162624] "temp"
          (162676 'move' numTasks[162624](162672 call size _mt[232] tmpIter[162579]))
          (162667 call _upEndCount _coforallCount[162623] 1 numTasks[162624])
          (162664 call chpl_resetTaskSpawn numTasks[162624])
          unknown _indexOfInterest[162631] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162632] "expr temp" "temp"
          (162641 'move' _iterator[162632](162639 call _getIterator tmpIter[162579]))
          Defer
          {
            {
              (162657 call _freeIterator _iterator[162632])
            }
          }
          { scopeless type
            (162646 'move' _indexOfInterest[162631](162643 call iteratorIndex _iterator[162632]))
          }
          ForLoop
          {
            unknown chunk[162650] "coforall index var" "index var" "insert auto destroy"
            (162652 'move' chunk[162650] _indexOfInterest[162631])
            (767435 call coforall_fn[767433])
            function coforall_fn[767433]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[162585] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162587] "expr temp" "temp"
                (162589 'move' _iterator[162587](162592 call _getIterator chunk[162650]))
                Defer
                {
                  {
                    (162596 call _freeIterator _iterator[162587])
                  }
                }
                { scopeless type
                  (162600 'move' _indexOfInterest[162585](162603 call iteratorIndex _iterator[162587]))
                }
                ForLoop
                {
                  unknown i[162608] "index var" "insert auto destroy"
                  (162610 'move' i[162608] _indexOfInterest[162585])
                  unknown yret[472071] "YVV" "temp"
                  unknown call_tmp[626582] "expr temp" "maybe param" "maybe type" "temp"
                  (626585 'move' call_tmp[626582](162616 call(359011 call (partial) data _mt[232] this[163140]) i[162608]))
                  (472074 'move' yret[472071](472073 'addr of' call_tmp[626582]))
                  (472076 yield yret[472071])
                  label _continueLabel[162618]
                  _indexOfInterest[162585]
                  _iterator[162587]
                }
                label _breakLabel[162620]
              }
              (162626 call _downEndCount _coforallCount[162623] nil[38])
              (767438 return _void[47])
            }
            {
            }
            label _continueLabel[162636]
            _indexOfInterest[162631]
            _iterator[162632]
          }
          label _breakLabel[162637]
          Defer
          {
            {
              (162679 call _endCountFree _coforallCount[162623])
            }
          }
          (162684 call _waitEndCount _coforallCount[162623] 1 numTasks[162624])
        }
        {
          const _coforallCount[162696] "const" "end count" "temp"
          (162753 'move' _coforallCount[162696](162750 call _endCountAlloc 1))
          unknown _indexOfInterest[162704] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[162705] "expr temp" "temp"
          (162714 'move' _iterator[162705](162712 call _getIterator tmpIter[162579]))
          Defer
          {
            {
              (162730 call _freeIterator _iterator[162705])
            }
          }
          { scopeless type
            (162719 'move' _indexOfInterest[162704](162716 call iteratorIndex _iterator[162705]))
          }
          ForLoop
          {
            unknown chunk[162723] "coforall index var" "index var" "insert auto destroy"
            (162725 'move' chunk[162723] _indexOfInterest[162704])
            (162737 call _upEndCount _coforallCount[162696] 1)
            (767442 call coforall_fn[767440])
            function coforall_fn[767440]() : void[4] "cobegin or coforall"
            {
              {
                unknown _indexOfInterest[162545] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[162546] "expr temp" "temp"
                (162555 'move' _iterator[162546](162553 call _getIterator chunk[162723]))
                Defer
                {
                  {
                    (162571 call _freeIterator _iterator[162546])
                  }
                }
                { scopeless type
                  (162560 'move' _indexOfInterest[162545](162557 call iteratorIndex _iterator[162546]))
                }
                ForLoop
                {
                  unknown i[162564] "index var" "insert auto destroy"
                  (162566 'move' i[162564] _indexOfInterest[162545])
                  unknown yret[472078] "YVV" "temp"
                  unknown call_tmp[626589] "expr temp" "maybe param" "maybe type" "temp"
                  (626592 'move' call_tmp[626589](162542 call(359004 call (partial) data _mt[232] this[163140]) i[162564]))
                  (472081 'move' yret[472078](472080 'addr of' call_tmp[626589]))
                  (472083 yield yret[472078])
                  label _continueLabel[162550]
                  _indexOfInterest[162545]
                  _iterator[162546]
                }
                label _breakLabel[162551]
              }
              (162699 call _downEndCount _coforallCount[162696] nil[38])
              (767445 return _void[47])
            }
            {
            }
            label _continueLabel[162709]
            _indexOfInterest[162704]
            _iterator[162705]
          }
          label _breakLabel[162710]
          Defer
          {
            {
              (162741 call _endCountFree _coforallCount[162696])
            }
          }
          (162746 call _waitEndCount _coforallCount[162696] 1)
        }
      }
    }
    (472062 return ret[472060])
  }
  where {
    (162422 call == tag[162412] standalone[695])
  }
  function DefaultSparseArr[163114](?).these[162789](arg _mt[163146]:_MT[227], arg this[163144]:DefaultSparseArr[163114](?), param arg tag[162786]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[472087] "RVV" "temp"
    {
      unknown _indexOfInterest[162809] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162810] "expr temp" "temp"
      unknown call_tmp[626596] "expr temp" "maybe param" "maybe type" "temp"
      (626599 'move' call_tmp[626596](359020 call dom _mt[232] this[163144]))
      unknown call_tmp[626603] "expr temp" "maybe param" "maybe type" "temp"
      (626606 'move' call_tmp[626603](162805 call(162800 call (partial) these _mt[232] call_tmp[626596]) tag[162786]))
      (162819 'move' _iterator[162810](162817 call _getIterator call_tmp[626603]))
      Defer
      {
        {
          (162836 call _freeIterator _iterator[162810])
        }
      }
      { scopeless type
        (162825 'move' _indexOfInterest[162809](162822 call iteratorIndex _iterator[162810]))
      }
      ForLoop
      {
        unknown followThis[162829] "index var" "insert auto destroy"
        (162831 'move' followThis[162829] _indexOfInterest[162809])
        unknown yret[472091] "YVV" "temp"
        (472094 'move' yret[472091](472093 'deref' followThis[162829]))
        (472096 yield yret[472091])
        label _continueLabel[162814]
        _indexOfInterest[162809]
        _iterator[162810]
      }
      label _breakLabel[162815]
    }
    (472089 return ret[472087])
  }
  where {
    (162796 call == tag[162786] leader[691])
  }
  function DefaultSparseArr[163114](?).these[162853](arg _mt[163150]:_MT[227], arg this[163148]:DefaultSparseArr[163114](?), param arg tag[162850]:iterKind[697], arg followThis[162861]:_tuple[58502](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[472100] "RVV" "temp"
    unknown tmp[162879] "no auto destroy" "no copy" "temp"
    (492444 'init var' tmp[162879] followThis[162861])
    (162889 call _check_tuple_var_decl tmp[162879] 3)
    unknown call_tmp[626608] "maybe param" "maybe type" "temp"
    (626611 'move' call_tmp[626608](162880 call tmp[162879] 1))
    unknown followThisDom[162871] "insert auto destroy"
    (492446 'init var' followThisDom[162871] call_tmp[626608])
    unknown call_tmp[626613] "maybe param" "maybe type" "temp"
    (626616 'move' call_tmp[626613](162883 call tmp[162879] 2))
    unknown startIx[162873] "insert auto destroy"
    (492448 'init var' startIx[162873] call_tmp[626613])
    unknown call_tmp[626618] "maybe param" "maybe type" "temp"
    (626621 'move' call_tmp[626618](162886 call tmp[162879] 3))
    unknown endIx[162875] "insert auto destroy"
    (492450 'init var' endIx[162875] call_tmp[626618])
    unknown call_tmp[626625] "expr temp" "maybe param" "maybe type" "temp"
    (626628 'move' call_tmp[626625](162897 call dom _mt[232] this[163148]))
    unknown call_tmp[626630] "expr temp" "maybe param" "maybe type" "temp"
    (626633 'move' call_tmp[626630](162900 call != followThisDom[162871] call_tmp[626625]))
    unknown call_tmp[626635] "expr temp" "maybe param" "maybe type" "temp"
    (626638 'move' call_tmp[626635](162922 call _cond_test call_tmp[626630]))
    if call_tmp[626635]
    {
      (162920 call halt "Sparse arrays can't be zippered with anything other than their domains and sibling arrays")
    }
    unknown call_tmp[626640] "expr temp" "maybe param" "maybe type" "temp"
    (626643 'move' call_tmp[626640](162951 call _cond_test debugDefaultSparse[159041]))
    if call_tmp[626640]
    {
      (162949 call writeln "DefaultSparseArr follower: " startIx[162873] ".." endIx[162875])
    }
    {
      unknown _indexOfInterest[162967] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[162968] "expr temp" "temp"
      unknown call_tmp[626645] "expr temp" "maybe param" "maybe type" "temp"
      (626648 'move' call_tmp[626645](162982 call chpl_direct_range_iter startIx[162873] endIx[162875] 1))
      (162977 'move' _iterator[162968](162975 call _getIterator call_tmp[626645]))
      Defer
      {
        {
          (162998 call _freeIterator _iterator[162968])
        }
      }
      { scopeless type
        (162987 'move' _indexOfInterest[162967](162984 call iteratorIndex _iterator[162968]))
      }
      ForLoop
      {
        unknown i[162991] "index var" "insert auto destroy"
        (162993 'move' i[162991] _indexOfInterest[162967])
        unknown yret[472104] "YVV" "temp"
        unknown call_tmp[626652] "expr temp" "maybe param" "maybe type" "temp"
        (626655 'move' call_tmp[626652](162964 call(359036 call (partial) data _mt[232] this[163148]) i[162991]))
        (472107 'move' yret[472104](472106 'addr of' call_tmp[626652]))
        (472109 yield yret[472104])
        label _continueLabel[162972]
        _indexOfInterest[162967]
        _iterator[162968]
      }
      label _breakLabel[162973]
    }
    (472102 return ret[472100])
  }
  where {
    unknown call_tmp[626657] "expr temp" "maybe param" "maybe type" "temp"
    (626660 'move' call_tmp[626657](162869 call == tag[162850] follower[693]))
    unknown call_tmp[626662] "expr temp" "maybe param" "maybe type" "temp"
    (626665 'move' call_tmp[626662](437035 'query' followThis[162861] c"size"))
    unknown call_tmp[626667] "expr temp" "maybe param" "maybe type" "temp"
    (626670 'move' call_tmp[626667](437036 call == 3 call_tmp[626662]))
    (437038 call & call_tmp[626657] call_tmp[626667])
  }
  function DefaultSparseArr[163114](?).these[163014](arg _mt[163154]:_MT[227], arg this[163152]:DefaultSparseArr[163114](?), param arg tag[163011]:iterKind[697], arg followThis[163016]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[472113] "RVV" "temp"
    (163028 call compilerError "Sparse iterators can't yet be zippered with others")
    unknown yret[472117] "YVV" "temp"
    (472120 'move' yret[472117](472119 'deref' 0))
    (472122 yield yret[472117])
    (472115 return ret[472113])
  }
  where {
    (163023 call == tag[163011] follower[693])
  }
  function DefaultSparseArr[163114](?).dsiTargetLocales[163039](arg _mt[163158]:_MT[227], arg this[163156]:DefaultSparseArr[163114](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (163059 call compilerError "targetLocales is unsupported by sparse domains")
    (472124 return _void[47])
  }
  function DefaultSparseArr[163114](?).dsiHasSingleLocalSubdomain[163066](arg _mt[163162]:_MT[227], arg this[163160]:DefaultSparseArr[163114](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[472128] "RVV" "param" "temp"
    (472133 'move' ret[472128](472132 'deref' 1))
    (472130 return ret[472128])
  }
  function DefaultSparseArr[163114](?).dsiLocalSubdomain[163080](arg _mt[163166]:_MT[227], arg this[163164]:DefaultSparseArr[163114](?), arg loc[163077]:locale[26]) : _unknown[43] "method" "primary method"
  {
    unknown ret[472137] "RVV" "temp"
    unknown call_tmp[626672] "expr temp" "maybe param" "maybe type" "temp"
    (626675 'move' call_tmp[626672](163083 '_wide_get_locale' this[163164]))
    unknown call_tmp[626677] "expr temp" "maybe param" "maybe type" "temp"
    (626680 'move' call_tmp[626677](163084 call chpl_localeID_to_locale call_tmp[626672]))
    unknown call_tmp[626682] "expr temp" "maybe param" "maybe type" "temp"
    (626685 'move' call_tmp[626682](163087 call == call_tmp[626677] loc[163077]))
    unknown call_tmp[626687] "expr temp" "maybe param" "maybe type" "temp"
    (626690 'move' call_tmp[626687](163106 call _cond_test call_tmp[626682]))
    if call_tmp[626687]
    {
      unknown call_tmp[626694] "expr temp" "maybe param" "maybe type" "temp"
      (626697 'move' call_tmp[626694](359049 call dom _mt[232] this[163164]))
      unknown call_tmp[626699] "expr temp" "maybe param" "maybe type" "temp"
      (626702 'move' call_tmp[626699](163092 call _getDomain call_tmp[626694]))
      (472142 'move' ret[472137](472141 'deref' call_tmp[626699]))
      gotoReturn _end_dsiLocalSubdomain[472135] _end_dsiLocalSubdomain[472135]
    }
    {
      unknown call_tmp[626706] "expr temp" "maybe param" "maybe type" "temp"
      (626709 'move' call_tmp[626706](359054 call dom _mt[232] this[163164]))
      unknown call_tmp[626713] "expr temp" "maybe param" "maybe type" "temp"
      (626716 'move' call_tmp[626713](163102 call(163097 call (partial) dsiLocalSubdomain _mt[232] call_tmp[626706]) loc[163077]))
      (472147 'move' ret[472137](472146 'deref' call_tmp[626713]))
      gotoReturn _end_dsiLocalSubdomain[472135] _end_dsiLocalSubdomain[472135]
    }
    label _end_dsiLocalSubdomain[472135]
    (472139 return ret[472137])
  }
  function DefaultSparseArr[163114](?).super[726191](arg _mt[726193]:_MT[227], arg this[726195]:DefaultSparseArr[163114](?)) : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[726204] "RVV" "temp"
    unknown call_tmp[726211] "expr temp" "maybe param" "maybe type" "temp"
    (726214 'move' call_tmp[726211](726199 '.v' this[726195] c"super"))
    (726209 'move' ret[726204](726208 'deref' call_tmp[726211]))
    (726206 return ret[726204])
  }
  function DefaultSparseArr[163114](?).init[726216](arg _mt[726218]:_MT[227], arg this[726219]:DefaultSparseArr[163114](?), in arg pid[726236]:int(64)[13] =
  (726231 'default init field' "BaseArr" "pid" int(64)[13] nullPid[111825]), in arg _decEltRefCounts[726245]:bool[10] =
  (726240 'default init field' "BaseArr" "_decEltRefCounts" bool[10] 0), arg eltType[726248]:_any[170](?), param arg rank[726251]:int(64)[13], arg idxType[726254]:_any[170](?), in arg dom[726257]:_any[170](?), in arg data[726282] :
  unknown call_tmp[726261] "expr temp" "maybe param" "maybe type" "temp" =
  _typeDefaultT[239], in arg irv[726289] :
  eltType[726248] =
  _typeDefaultT[239]) : void[4] "compiler generated" "last resort" "method" "primary method" "suppress lvalue error"
  {
    unknown super_tmp[726294] "temporary of super field" "temp"
    (726296 'move' super_tmp[726294](726293 '.v' this[726219] c"super"))
    (726229 call(726227 call (partial) init _mt[232] super_tmp[726294]) pid[726236] _decEltRefCounts[726245] eltType[726248] rank[726251] idxType[726254] dom[726257] data[726282] irv[726289])
    unknown tmp[726299] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[726317] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[726329] "expr temp" "maybe param" "maybe type" "temp"
      (726332 'move' call_tmp[726329](726301 '.v' this[726219] c"super"))
      (726321 'move' call_type_tmp[726317](726304 'typeof' call_tmp[726329]))
    }
    (726305 'move' tmp[726299] call_type_tmp[726317])
    unknown call_tmp[726334] "maybe param" "maybe type" "temp"
    (726337 'move' call_tmp[726334](726310 'cast' tmp[726299] this[726219]))
    unknown chpl__thisAsParent[726307] "insert auto destroy" "temp"
    (726325 'init var' chpl__thisAsParent[726307] call_tmp[726334] tmp[726299])
    (726313 'setcid' chpl__thisAsParent[726307])
    (726315 'setcid' this[726219])
    (726323 return _void[47])
  }
  function DefaultSparseArr[163114](?).deinit[726339](arg _mt[726341]:_MT[227], arg this[726343]:DefaultSparseArr[163114](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (726345 return _void[47])
  }
  function DefaultSparseArr[163114](?).writeThis[726348](arg _mt[726352]:_MT[227], arg this[726350]:DefaultSparseArr[163114](?), arg f[726351]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (726357 call writeThisDefaultImpl f[726351] this[726350])
    (726361 return _void[47])
  }
  function DefaultSparseArr[163114](?).readThis[726363](arg _mt[726367]:_MT[227], arg this[726365]:DefaultSparseArr[163114](?), arg f[726366]:_any[170](?)) : void[4] "compiler generated" "last resort" "method" "primary method" "method overrides"
  {
    (726371 call readThisDefaultImpl f[726366] this[726365])
    (726376 return _void[47])
  }
  type DefaultSparseArr[163114](?) val super[331047]:BaseSparseArrImpl[146829](?) "delay instantiation" "super class"
  type anymanaged DefaultSparseArr[358158](?)
  function DefaultSparseDom[161702](?).dsiSerialWrite[163174](arg _mt[163183]:_MT[227], arg this[163180]:DefaultSparseDom[161702](?) :
  DefaultSparseDom[161702](?), arg f[163172]:_any[170](?), arg printBrackets[163177] :
  1 =
  1) : _unknown[43] "method" "no return value for void"
  {
    unknown call_tmp[626720] "expr temp" "maybe param" "maybe type" "temp"
    (626723 'move' call_tmp[626720](359060 call rank _mt[232] this[163180]))
    unknown call_tmp[626725] "expr temp" "maybe param" "maybe type" "temp"
    (626728 'move' call_tmp[626725](163187 call == call_tmp[626720] 1))
    unknown call_tmp[626730] "expr temp" "maybe param" "maybe type" "temp"
    (626733 'move' call_tmp[626730](163449 call _cond_test call_tmp[626725]))
    if call_tmp[626730]
    {
      unknown call_tmp[626735] "expr temp" "maybe param" "maybe type" "temp"
      (626738 'move' call_tmp[626735](163195 call _cond_test printBrackets[163177]))
      if call_tmp[626735]
      {
        (163192 call <~> f[163172] "{")
      }
      unknown call_tmp[626742] "expr temp" "maybe param" "maybe type" "temp"
      (626745 'move' call_tmp[626742](359067 call _nnz _mt[232] this[163180]))
      unknown call_tmp[626747] "expr temp" "maybe param" "maybe type" "temp"
      (626750 'move' call_tmp[626747](163203 call >= call_tmp[626742] 1))
      unknown call_tmp[626752] "expr temp" "maybe param" "maybe type" "temp"
      (626755 'move' call_tmp[626752](163269 call _cond_test call_tmp[626747]))
      if call_tmp[626752]
      {
        unknown call_tmp[626759] "expr temp" "maybe param" "maybe type" "temp"
        (626762 'move' call_tmp[626759](163209 call(359073 call (partial) indices _mt[232] this[163180]) 1))
        (163210 call <~> f[163172] call_tmp[626759])
        {
          unknown _indexOfInterest[163231] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163232] "expr temp" "temp"
          unknown call_tmp[626766] "expr temp" "maybe param" "maybe type" "temp"
          (626769 'move' call_tmp[626766](359085 call _nnz _mt[232] this[163180]))
          unknown call_tmp[626771] "expr temp" "maybe param" "maybe type" "temp"
          (626774 'move' call_tmp[626771](163246 call chpl_direct_range_iter 2 call_tmp[626766] 1))
          (163241 'move' _iterator[163232](163239 call _getIterator call_tmp[626771]))
          Defer
          {
            {
              (163262 call _freeIterator _iterator[163232])
            }
          }
          { scopeless type
            (163251 'move' _indexOfInterest[163231](163248 call iteratorIndex _iterator[163232]))
          }
          ForLoop
          {
            unknown i[163255] "index var" "insert auto destroy"
            (163257 'move' i[163255] _indexOfInterest[163231])
            {
              unknown call_tmp[626776] "expr temp" "maybe param" "maybe type" "temp"
              (626779 'move' call_tmp[626776](163221 call <~> f[163172] " "))
              unknown call_tmp[626783] "expr temp" "maybe param" "maybe type" "temp"
              (626786 'move' call_tmp[626783](163226 call(359079 call (partial) indices _mt[232] this[163180]) i[163255]))
              (163227 call <~> call_tmp[626776] call_tmp[626783])
            }
            label _continueLabel[163236]
            _indexOfInterest[163231]
            _iterator[163232]
          }
          label _breakLabel[163237]
        }
      }
      unknown call_tmp[626788] "expr temp" "maybe param" "maybe type" "temp"
      (626791 'move' call_tmp[626788](163279 call _cond_test printBrackets[163177]))
      if call_tmp[626788]
      {
        (163276 call <~> f[163172] "}")
      }
    }
    {
      unknown call_tmp[626793] "expr temp" "maybe param" "maybe type" "temp"
      (626796 'move' call_tmp[626793](163305 call _cond_test printBrackets[163177]))
      if call_tmp[626793]
      {
        (163302 call <~> f[163172] "{\n")
      }
      unknown call_tmp[626800] "expr temp" "maybe param" "maybe type" "temp"
      (626803 'move' call_tmp[626800](359094 call _nnz _mt[232] this[163180]))
      unknown call_tmp[626805] "expr temp" "maybe param" "maybe type" "temp"
      (626808 'move' call_tmp[626805](163313 call >= call_tmp[626800] 1))
      unknown call_tmp[626810] "expr temp" "maybe param" "maybe type" "temp"
      (626813 'move' call_tmp[626810](163419 call _cond_test call_tmp[626805]))
      if call_tmp[626810]
      {
        unknown call_tmp[626817] "maybe param" "maybe type" "temp"
        (626820 'move' call_tmp[626817](163318 call(359099 call (partial) indices _mt[232] this[163180]) 1))
        unknown prevInd[163319] "insert auto destroy"
        (492452 'init var' prevInd[163319] call_tmp[626817])
        unknown call_tmp[626822] "expr temp" "maybe param" "maybe type" "temp"
        (626825 'move' call_tmp[626822](163325 call <~> f[163172] " "))
        (163328 call <~> call_tmp[626822] prevInd[163319])
        {
          unknown _indexOfInterest[163376] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163377] "expr temp" "temp"
          unknown call_tmp[626829] "expr temp" "maybe param" "maybe type" "temp"
          (626832 'move' call_tmp[626829](359123 call _nnz _mt[232] this[163180]))
          unknown call_tmp[626834] "expr temp" "maybe param" "maybe type" "temp"
          (626837 'move' call_tmp[626834](163391 call chpl_direct_range_iter 2 call_tmp[626829] 1))
          (163386 'move' _iterator[163377](163384 call _getIterator call_tmp[626834]))
          Defer
          {
            {
              (163407 call _freeIterator _iterator[163377])
            }
          }
          { scopeless type
            (163396 'move' _indexOfInterest[163376](163393 call iteratorIndex _iterator[163377]))
          }
          ForLoop
          {
            unknown i[163400] "index var" "insert auto destroy"
            (163402 'move' i[163400] _indexOfInterest[163376])
            {
              unknown call_tmp[626839] "expr temp" "maybe param" "maybe type" "temp"
              (626842 'move' call_tmp[626839](163339 call prevInd[163319] 1))
              unknown call_tmp[626846] "expr temp" "maybe param" "maybe type" "temp"
              (626849 'move' call_tmp[626846](163343 call(359107 call (partial) indices _mt[232] this[163180]) i[163400]))
              unknown call_tmp[626851] "expr temp" "maybe param" "maybe type" "temp"
              (626854 'move' call_tmp[626851](163346 call call_tmp[626846] 1))
              unknown call_tmp[626856] "expr temp" "maybe param" "maybe type" "temp"
              (626859 'move' call_tmp[626856](163347 call != call_tmp[626839] call_tmp[626851]))
              unknown call_tmp[626861] "expr temp" "maybe param" "maybe type" "temp"
              (626864 'move' call_tmp[626861](163355 call _cond_test call_tmp[626856]))
              if call_tmp[626861]
              {
                (163351 call <~> f[163172] "\n")
              }
              unknown call_tmp[626868] "expr temp" "maybe param" "maybe type" "temp"
              (626871 'move' call_tmp[626868](163364 call(359115 call (partial) indices _mt[232] this[163180]) i[163400]))
              (163365 call = prevInd[163319] call_tmp[626868])
              unknown call_tmp[626873] "expr temp" "maybe param" "maybe type" "temp"
              (626876 'move' call_tmp[626873](163370 call <~> f[163172] " "))
              (163373 call <~> call_tmp[626873] prevInd[163319])
            }
            label _continueLabel[163381]
            _indexOfInterest[163376]
            _iterator[163377]
          }
          label _breakLabel[163382]
        }
        (163416 call <~> f[163172] "\n")
      }
      unknown call_tmp[626878] "expr temp" "maybe param" "maybe type" "temp"
      (626881 'move' call_tmp[626878](163444 call _cond_test printBrackets[163177]))
      if call_tmp[626878]
      {
        (163441 call <~> f[163172] "}\n")
      }
    }
    (472151 return _void[47])
  }
  function DefaultSparseArr[163114](?).dsiSerialWrite[163461](arg _mt[163466]:_MT[227], arg this[163463]:DefaultSparseArr[163114](?) :
  DefaultSparseArr[163114](?), arg f[163459]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    unknown call_tmp[626885] "expr temp" "maybe param" "maybe type" "temp"
    (626888 'move' call_tmp[626885](359131 call rank _mt[232] this[163463]))
    unknown call_tmp[626890] "expr temp" "maybe param" "maybe type" "temp"
    (626893 'move' call_tmp[626890](163470 call == call_tmp[626885] 1))
    unknown call_tmp[626895] "expr temp" "maybe param" "maybe type" "temp"
    (626898 'move' call_tmp[626895](163693 call _cond_test call_tmp[626890]))
    if call_tmp[626895]
    {
      unknown call_tmp[626902] "expr temp" "maybe param" "maybe type" "temp"
      (626905 'move' call_tmp[626902](359136 call dom _mt[232] this[163463]))
      unknown call_tmp[626909] "expr temp" "maybe param" "maybe type" "temp"
      (626912 'move' call_tmp[626909](163473 call _nnz _mt[232] call_tmp[626902]))
      unknown call_tmp[626914] "expr temp" "maybe param" "maybe type" "temp"
      (626917 'move' call_tmp[626914](163477 call >= call_tmp[626909] 1))
      unknown call_tmp[626919] "expr temp" "maybe param" "maybe type" "temp"
      (626922 'move' call_tmp[626919](163549 call _cond_test call_tmp[626914]))
      if call_tmp[626919]
      {
        unknown call_tmp[626926] "expr temp" "maybe param" "maybe type" "temp"
        (626929 'move' call_tmp[626926](163483 call(359142 call (partial) data _mt[232] this[163463]) 1))
        (163484 call <~> f[163459] call_tmp[626926])
        {
          unknown _indexOfInterest[163508] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163509] "expr temp" "temp"
          unknown call_tmp[626933] "expr temp" "maybe param" "maybe type" "temp"
          (626936 'move' call_tmp[626933](359154 call dom _mt[232] this[163463]))
          unknown call_tmp[626940] "expr temp" "maybe param" "maybe type" "temp"
          (626943 'move' call_tmp[626940](163523 call _nnz _mt[232] call_tmp[626933]))
          unknown call_tmp[626945] "expr temp" "maybe param" "maybe type" "temp"
          (626948 'move' call_tmp[626945](163526 call chpl_direct_range_iter 2 call_tmp[626940] 1))
          (163518 'move' _iterator[163509](163516 call _getIterator call_tmp[626945]))
          Defer
          {
            {
              (163542 call _freeIterator _iterator[163509])
            }
          }
          { scopeless type
            (163531 'move' _indexOfInterest[163508](163528 call iteratorIndex _iterator[163509]))
          }
          ForLoop
          {
            unknown i[163535] "index var" "insert auto destroy"
            (163537 'move' i[163535] _indexOfInterest[163508])
            {
              unknown call_tmp[626950] "expr temp" "maybe param" "maybe type" "temp"
              (626953 'move' call_tmp[626950](163498 call <~> f[163459] " "))
              unknown call_tmp[626957] "expr temp" "maybe param" "maybe type" "temp"
              (626960 'move' call_tmp[626957](163503 call(359148 call (partial) data _mt[232] this[163463]) i[163535]))
              (163504 call <~> call_tmp[626950] call_tmp[626957])
            }
            label _continueLabel[163513]
            _indexOfInterest[163508]
            _iterator[163509]
          }
          label _breakLabel[163514]
        }
      }
    }
    {
      unknown call_tmp[626964] "expr temp" "maybe param" "maybe type" "temp"
      (626967 'move' call_tmp[626964](359159 call dom _mt[232] this[163463]))
      unknown call_tmp[626971] "expr temp" "maybe param" "maybe type" "temp"
      (626974 'move' call_tmp[626971](163555 call _nnz _mt[232] call_tmp[626964]))
      unknown call_tmp[626976] "expr temp" "maybe param" "maybe type" "temp"
      (626979 'move' call_tmp[626976](163559 call >= call_tmp[626971] 1))
      unknown call_tmp[626981] "expr temp" "maybe param" "maybe type" "temp"
      (626984 'move' call_tmp[626981](163688 call _cond_test call_tmp[626976]))
      if call_tmp[626981]
      {
        unknown call_tmp[626988] "expr temp" "maybe param" "maybe type" "temp"
        (626991 'move' call_tmp[626988](359164 call dom _mt[232] this[163463]))
        unknown call_tmp[626995] "maybe param" "maybe type" "temp"
        (626998 'move' call_tmp[626995](163569 call(163564 call (partial) indices _mt[232] call_tmp[626988]) 1))
        unknown prevInd[163570] "insert auto destroy"
        (492454 'init var' prevInd[163570] call_tmp[626995])
        unknown call_tmp[627002] "expr temp" "maybe param" "maybe type" "temp"
        (627005 'move' call_tmp[627002](163578 call(359170 call (partial) data _mt[232] this[163463]) 1))
        (163579 call <~> f[163459] call_tmp[627002])
        {
          unknown _indexOfInterest[163642] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[163643] "expr temp" "temp"
          unknown call_tmp[627009] "expr temp" "maybe param" "maybe type" "temp"
          (627012 'move' call_tmp[627009](359198 call dom _mt[232] this[163463]))
          unknown call_tmp[627016] "expr temp" "maybe param" "maybe type" "temp"
          (627019 'move' call_tmp[627016](163657 call _nnz _mt[232] call_tmp[627009]))
          unknown call_tmp[627021] "expr temp" "maybe param" "maybe type" "temp"
          (627024 'move' call_tmp[627021](163660 call chpl_direct_range_iter 2 call_tmp[627016] 1))
          (163652 'move' _iterator[163643](163650 call _getIterator call_tmp[627021]))
          Defer
          {
            {
              (163676 call _freeIterator _iterator[163643])
            }
          }
          { scopeless type
            (163665 'move' _indexOfInterest[163642](163662 call iteratorIndex _iterator[163643]))
          }
          ForLoop
          {
            unknown i[163669] "index var" "insert auto destroy"
            (163671 'move' i[163669] _indexOfInterest[163642])
            {
              unknown call_tmp[627026] "expr temp" "maybe param" "maybe type" "temp"
              (627029 'move' call_tmp[627026](163593 call prevInd[163570] 1))
              unknown call_tmp[627033] "expr temp" "maybe param" "maybe type" "temp"
              (627036 'move' call_tmp[627033](359176 call dom _mt[232] this[163463]))
              unknown call_tmp[627040] "expr temp" "maybe param" "maybe type" "temp"
              (627043 'move' call_tmp[627040](163600 call(163595 call (partial) indices _mt[232] call_tmp[627033]) i[163669]))
              unknown call_tmp[627045] "expr temp" "maybe param" "maybe type" "temp"
              (627048 'move' call_tmp[627045](163603 call call_tmp[627040] 1))
              unknown call_tmp[627050] "expr temp" "maybe param" "maybe type" "temp"
              (627053 'move' call_tmp[627050](163604 call != call_tmp[627026] call_tmp[627045]))
              unknown call_tmp[627055] "expr temp" "maybe param" "maybe type" "temp"
              (627058 'move' call_tmp[627055](163618 call _cond_test call_tmp[627050]))
              if call_tmp[627055]
              {
                (163608 call <~> f[163459] "\n")
              }
              {
                (163614 call <~> f[163459] " ")
              }
              unknown call_tmp[627062] "expr temp" "maybe param" "maybe type" "temp"
              (627065 'move' call_tmp[627062](359185 call dom _mt[232] this[163463]))
              unknown call_tmp[627069] "expr temp" "maybe param" "maybe type" "temp"
              (627072 'move' call_tmp[627069](163630 call(163625 call (partial) indices _mt[232] call_tmp[627062]) i[163669]))
              (163631 call = prevInd[163570] call_tmp[627069])
              unknown call_tmp[627076] "expr temp" "maybe param" "maybe type" "temp"
              (627079 'move' call_tmp[627076](163638 call(359192 call (partial) data _mt[232] this[163463]) i[163669]))
              (163639 call <~> f[163459] call_tmp[627076])
            }
            label _continueLabel[163647]
            _indexOfInterest[163642]
            _iterator[163643]
          }
          label _breakLabel[163648]
        }
        (163685 call <~> f[163459] "\n")
      }
    }
    (472153 return _void[47])
  }
  (329429 'used modules list'(159033 'use' ChapelStandard[19734])(159038 'use' RangeChunk[250319] 'only' ))
}