AST dump for ChapelIteratorSupport after pass createTaskFunctions.
Module use list: ChapelStandard Reflection 

{
  function chpl__init_ChapelIteratorSupport[390171]() : void[4] "insert line file info" "module init"
  {
    (459227 return _void[47])
  }
  function iteratorIndex[54795](arg ic[54792]:_iteratorClass[197](?)) : _unknown[43] "allow ref" "no doc" "fn returns iterator"
  {
    unknown ret[458240] "RVV" "temp"
    (54804 call(54800 call (partial) advance _mt[232] ic[54792]))
    (458244 'move' ret[458240](54814 call(54810 call (partial) getValue _mt[232] ic[54792])))
    (458242 return ret[458240])
  }
  function iteratorIndex[54825](arg t[54822]:_tuple[58502](?)) : _unknown[43] "expand tuples with values" "no doc" "fn returns iterator"
  {
    unknown ret[458262] "RVV" "temp"
    function iteratorIndexHelp[54833](arg t[54830]:_tuple[58502](?), param arg dim[54836]:int(64)[13]) : _unknown[43] "expand tuples with values"
    {
      unknown ret[458248] "RVV" "temp"
      unknown call_tmp[559115] "expr temp" "maybe param" "maybe type" "temp"
      (559118 'move' call_tmp[559115](54841 call size _mt[232] t[54830]))
      unknown call_tmp[559120] "expr temp" "maybe param" "maybe type" "temp"
      (559123 'move' call_tmp[559120](54844 call == dim[54836] call_tmp[559115]))
      unknown call_tmp[559125] "expr temp" "maybe param" "maybe type" "temp"
      (559128 'move' call_tmp[559125](54879 call _cond_test call_tmp[559120]))
      if call_tmp[559125]
      {
        unknown call_tmp[559130] "expr temp" "maybe param" "maybe type" "temp"
        (559133 'move' call_tmp[559130](54851 call t[54830] dim[54836]))
        unknown call_tmp[559135] "expr temp" "maybe param" "maybe type" "temp"
        (559138 'move' call_tmp[559135](54853 call iteratorIndex call_tmp[559130]))
        (458252 'move' ret[458248](54855 call _build_tuple_always_allow_ref call_tmp[559135]))
        gotoReturn _end_iteratorIndexHelp[458246] _end_iteratorIndexHelp[458246]
      }
      {
        unknown call_tmp[559140] "expr temp" "maybe param" "maybe type" "temp"
        (559143 'move' call_tmp[559140](54863 call t[54830] dim[54836]))
        unknown call_tmp[559145] "expr temp" "maybe param" "maybe type" "temp"
        (559148 'move' call_tmp[559145](54865 call iteratorIndex call_tmp[559140]))
        unknown call_tmp[559150] "expr temp" "maybe param" "maybe type" "temp"
        (559153 'move' call_tmp[559150](54872 call + dim[54836] 1))
        unknown call_tmp[559155] "expr temp" "maybe param" "maybe type" "temp"
        (559158 'move' call_tmp[559155](54874 call iteratorIndexHelp t[54830] call_tmp[559150]))
        (458256 'move' ret[458248](54876 call _build_tuple_always_allow_ref call_tmp[559145](54875 'expand_tuple' call_tmp[559155])))
        gotoReturn _end_iteratorIndexHelp[458246] _end_iteratorIndexHelp[458246]
      }
      label _end_iteratorIndexHelp[458246]
      (458250 return ret[458248])
    }
    (458266 'move' ret[458262](54893 call iteratorIndexHelp t[54822] 1))
    (458264 return ret[458262])
  }
  function iteratorIndexType[54902](arg x[54900]:_any[170](?)) type : _unknown[43] "no doc"
  {
    unknown ret[458270] "RVV" "temp" "type variable"
    unknown call_tmp[559160] "expr temp" "maybe param" "maybe type" "temp"
    (559163 'move' call_tmp[559160](54907 call isArray x[54900]))
    unknown call_tmp[559165] "expr temp" "maybe param" "maybe type" "temp"
    (559168 'move' call_tmp[559165](54976 call _cond_test call_tmp[559160]))
    if call_tmp[559165]
    {
      unknown call_tmp[559172] "expr temp" "maybe param" "maybe type" "temp"
      (559175 'move' call_tmp[559172](54909 call eltType _mt[232] x[54900]))
      (458275 'move' ret[458270](458274 'deref' call_tmp[559172]))
      gotoReturn _end_iteratorIndexType[458268] _end_iteratorIndexType[458268]
    }
    {
      unknown call_tmp[559177] "expr temp" "maybe param" "maybe type" "temp"
      (559180 'move' call_tmp[559177](54918 call isDomain x[54900]))
      unknown call_tmp[559182] "expr temp" "maybe param" "maybe type" "temp"
      (559185 'move' call_tmp[559182](54972 call _cond_test call_tmp[559177]))
      if call_tmp[559182]
      {
        unknown tmp[503325] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[503326] "maybe param" "temp"
        unknown call_tmp[559189] "expr temp" "maybe param" "maybe type" "temp"
        (559192 'move' call_tmp[559189](54922 call rank _mt[232] x[54900]))
        unknown call_tmp[559194] "expr temp" "maybe param" "maybe type" "temp"
        (559197 'move' call_tmp[559194](54926 call == call_tmp[559189] 1))
        (503331 'move' tmp[503326](503329 call _cond_test call_tmp[559194]))
        if tmp[503326]
        {
          unknown tmp[503333] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (503335 'move' tmp[503333](54929 call idxType _mt[232] x[54900]))
          (503340 'move' tmp[503325](503337 '_paramFoldLogical' tmp[503326] tmp[503333]))
        }
        {
          unknown tmp[503342] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[559203] "expr temp" "maybe param" "maybe type" "temp"
          (559206 'move' call_tmp[559203](54933 call rank _mt[232] x[54900]))
          unknown call_tmp[559210] "expr temp" "maybe param" "maybe type" "temp"
          (559213 'move' call_tmp[559210](54937 call idxType _mt[232] x[54900]))
          (503344 'move' tmp[503342](54940 call * call_tmp[559203] call_tmp[559210]))
          (503349 'move' tmp[503325](503346 '_paramFoldLogical' tmp[503326] tmp[503342]))
        }
        (458280 'move' ret[458270](458279 'deref' tmp[503325]))
        gotoReturn _end_iteratorIndexType[458268] _end_iteratorIndexType[458268]
      }
      {
        unknown call_tmp[559215] "maybe param" "maybe type" "temp"
        (559218 'move' call_tmp[559215](54951 call _getIterator x[54900]))
        unknown ic[54952] "insert auto destroy" "no copy"
        (489368 'init var' ic[54952] call_tmp[559215])
        unknown call_tmp[559220] "maybe param" "maybe type" "temp"
        (559223 'move' call_tmp[559220](54959 call iteratorIndex ic[54952]))
        unknown i[54960] "insert auto destroy" "no copy"
        (489370 'init var' i[54960] call_tmp[559220])
        (54966 call _freeIterator ic[54952])
        unknown call_tmp[559225] "expr temp" "maybe param" "maybe type" "temp" "type variable"
        (559228 'move' call_tmp[559225](54969 'typeof' i[54960]))
        (458285 'move' ret[458270](458284 'deref' call_tmp[559225]))
        gotoReturn _end_iteratorIndexType[458268] _end_iteratorIndexType[458268]
      }
    }
    label _end_iteratorIndexType[458268]
    (458272 return ret[458270])
  }
  function iteratorIndexTypeZip[54990](arg xs[54987]:_any[170](?) ...) type : _unknown[43] "no doc"
  {
    unknown ret[458307] "RVV" "temp" "type variable"
    function iteratorIndexTypeZipHelp[54996](param arg dim[54994]:_any[170](?)) type : _unknown[43]
    {
      unknown ret[458291] "RVV" "temp" "type variable"
      unknown call_tmp[559232] "expr temp" "maybe param" "maybe type" "temp"
      (559235 'move' call_tmp[559232](55000 call size _mt[232] xs[54987]))
      unknown call_tmp[559237] "expr temp" "maybe param" "maybe type" "temp"
      (559240 'move' call_tmp[559237](55003 call == dim[54994] call_tmp[559232]))
      unknown call_tmp[559242] "expr temp" "maybe param" "maybe type" "temp"
      (559245 'move' call_tmp[559242](55036 call _cond_test call_tmp[559237]))
      if call_tmp[559242]
      {
        unknown call_tmp[559247] "expr temp" "maybe param" "maybe type" "temp"
        (559250 'move' call_tmp[559247](55009 call xs[54987] dim[54994]))
        unknown call_tmp[559252] "expr temp" "maybe param" "maybe type" "temp"
        (559255 'move' call_tmp[559252](55011 call iteratorIndexType call_tmp[559247]))
        unknown call_tmp[559257] "expr temp" "maybe param" "maybe type" "temp"
        (559260 'move' call_tmp[559257](55012 call _build_tuple call_tmp[559252]))
        (458296 'move' ret[458291](458295 'deref' call_tmp[559257]))
        gotoReturn _end_iteratorIndexTypeZipHelp[458289] _end_iteratorIndexTypeZipHelp[458289]
      }
      {
        unknown call_tmp[559262] "expr temp" "maybe param" "maybe type" "temp"
        (559265 'move' call_tmp[559262](55020 call xs[54987] dim[54994]))
        unknown call_tmp[559267] "expr temp" "maybe param" "maybe type" "temp"
        (559270 'move' call_tmp[559267](55022 call iteratorIndexType call_tmp[559262]))
        unknown call_tmp[559272] "expr temp" "maybe param" "maybe type" "temp"
        (559275 'move' call_tmp[559272](55026 call + dim[54994] 1))
        unknown call_tmp[559277] "expr temp" "maybe param" "maybe type" "temp"
        (559280 'move' call_tmp[559277](55029 call iteratorIndexTypeZipHelp call_tmp[559272]))
        unknown call_tmp[559282] "expr temp" "maybe param" "maybe type" "temp"
        (559285 'move' call_tmp[559282](55032 call _build_tuple call_tmp[559267](55030 'expand_tuple' call_tmp[559277])))
        (458301 'move' ret[458291](458300 'deref' call_tmp[559282]))
        gotoReturn _end_iteratorIndexTypeZipHelp[458289] _end_iteratorIndexTypeZipHelp[458289]
      }
      label _end_iteratorIndexTypeZipHelp[458289]
      (458293 return ret[458291])
    }
    unknown call_tmp[559287] "expr temp" "maybe param" "maybe type" "temp"
    (559290 'move' call_tmp[559287](55049 call iteratorIndexTypeZipHelp 1))
    (458312 'move' ret[458307](458311 'deref' call_tmp[559287]))
    (458309 return ret[458307])
  }
  function iteratorToArrayElementType[55060](arg t[55057]:_iteratorRecord[194](?)) type : _unknown[43]
  {
    unknown ret[458316] "RVV" "temp" "type variable"
    unknown call_tmp[559292] "expr temp" "maybe param" "maybe type" "temp"
    (559295 'move' call_tmp[559292](55082 'scalar promotion type' t[55057]))
    unknown call_tmp[559297] "expr temp" "maybe param" "maybe type" "temp"
    (559300 'move' call_tmp[559297](55084 call chpl_buildStandInRTT call_tmp[559292]))
    unknown call_tmp[559302] "expr temp" "maybe param" "maybe type" "temp"
    (559305 'move' call_tmp[559302](55086 call chpl__unref call_tmp[559297]))
    (458321 'move' ret[458316](458320 'deref' call_tmp[559302]))
    (458318 return ret[458316])
  }
  function chpl_buildStandInRTT[55098](arg domType[55095]:_domain[123390](?)) type : _unknown[43]
  {
    unknown ret[458325] "RVV" "temp" "type variable"
    unknown instanceObj[55135] "insert auto destroy"
    unknown call_tmp[559307] "expr temp" "maybe param" "maybe type" "temp"
    (559310 'move' call_tmp[559307](55134 'static field type' domType[55095] "_instance"))
    (489372 'default init var' instanceObj[55135] call_tmp[559307])
    unknown call_tmp[559312] "expr temp" "maybe param" "maybe type" "temp"
    (559315 'move' call_tmp[559312](55142 call chpl_buildStandInRTT instanceObj[55135]))
    (458330 'move' ret[458325](458329 'deref' call_tmp[559312]))
    (458327 return ret[458325])
  }
  function chpl_buildStandInRTT[55155](arg arrType[55152]:_array[133150](?)) type : _unknown[43]
  {
    unknown ret[458334] "RVV" "temp" "type variable"
    unknown arrInstType[55162] "insert auto destroy" "type variable"(55161 'static field type' arrType[55152] "_instance")
    (489377 'move' arrInstType[55162](489374 'static field type' arrType[55152] "_instance"))
    unknown domInstType[55186] "insert auto destroy" "type variable"(55185 'static field type' arrInstType[55162] "dom")
    (489382 'move' domInstType[55186](489379 'static field type' arrInstType[55162] "dom"))
    unknown domInstance[55190] "insert auto destroy"
    (489384 'default init var' domInstance[55190] domInstType[55186])
    unknown standinDomain[55197] "no auto destroy"
    unknown call_tmp[559317] "expr temp" "maybe param" "maybe type" "temp"
    (559320 'move' call_tmp[559317](55196 call chpl_buildStandInRTT domInstance[55190]))
    (489386 'default init var' standinDomain[55197] call_tmp[559317])
    unknown instanceObj[55201] "insert auto destroy"
    (489388 'default init var' instanceObj[55201] arrInstType[55162])
    unknown call_tmp[559324] "expr temp" "maybe param" "maybe type" "temp"
    (559327 'move' call_tmp[559324](55222 call eltType _mt[232] instanceObj[55201]))
    unknown instanceEltType[55226] "insert auto destroy" "type variable"(55225 'static typeof' call_tmp[559324])
    unknown call_tmp[559331] "expr temp" "maybe param" "maybe type" "temp"
    (559334 'move' call_tmp[559331](489392 call eltType _mt[232] instanceObj[55201]))
    (489395 'move' instanceEltType[55226](489390 'static typeof' call_tmp[559331]))
    unknown call_tmp[559336] "expr temp" "maybe param" "maybe type" "temp"
    (559339 'move' call_tmp[559336](55235 call chpl_buildStandInRTT instanceEltType[55226]))
    unknown call_tmp[559341] "expr temp" "maybe param" "maybe type" "temp"
    (559344 'move' call_tmp[559341](55236 call chpl__buildArrayRuntimeType standinDomain[55197] call_tmp[559336]))
    (458339 'move' ret[458334](458338 'deref' call_tmp[559341]))
    (458336 return ret[458334])
  }
  function chpl_buildStandInRTT[55247](arg irType[55244]:_iteratorRecord[194](?)) type : _unknown[43]
  {
    unknown ret[458364] "RVV" "temp" "type variable"
    unknown shapeType[55253] "insert auto destroy" "type variable"(55252 call chpl_iteratorShapeStaticTypeOrVoid irType[55244])
    (489400 'move' shapeType[55253](489398 call chpl_iteratorShapeStaticTypeOrVoid irType[55244]))
    function standinType[55259]() type : _unknown[43]
    {
      unknown ret[458343] "RVV" "temp" "type variable"
      unknown call_tmp[559346] "expr temp" "maybe param" "maybe type" "temp"
      (559349 'move' call_tmp[559346](55263 call == shapeType[55253] nothing[7]))
      unknown call_tmp[559351] "expr temp" "maybe param" "maybe type" "temp"
      (559354 'move' call_tmp[559351](55318 call _cond_test call_tmp[559346]))
      if call_tmp[559351]
      {
        unknown call_tmp[559356] "expr temp" "maybe param" "maybe type" "temp"
        (559359 'move' call_tmp[559356](55268 call chpl__buildDomainRuntimeType defaultDist[93214] 1))
        (458348 'move' ret[458343](458347 'deref' call_tmp[559356]))
        gotoReturn _end_standinType[458341] _end_standinType[458341]
      }
      {
        unknown call_tmp[559361] "expr temp" "maybe param" "maybe type" "temp"
        (559364 'move' call_tmp[559361](55276 call isRange shapeType[55253]))
        unknown call_tmp[559366] "expr temp" "maybe param" "maybe type" "temp"
        (559369 'move' call_tmp[559366](55314 call _cond_test call_tmp[559361]))
        if call_tmp[559366]
        {
          unknown call_tmp[559371] "expr temp" "maybe param" "maybe type" "temp"
          (559374 'move' call_tmp[559371](55280 call chpl__buildDomainRuntimeType defaultDist[93214] 1))
          (458353 'move' ret[458343](458352 'deref' call_tmp[559371]))
          gotoReturn _end_standinType[458341] _end_standinType[458341]
        }
        {
          unknown domInstance[55286] "insert auto destroy"
          (489402 'default init var' domInstance[55286] shapeType[55253])
          unknown tmp[393978] "maybe param" "temp"
          unknown call_tmp[559376] "expr temp" "maybe param" "maybe type" "temp"
          (559379 'move' call_tmp[559376](55294 call isDomain domInstance[55286]))
          (393989 'move' tmp[393978](55295 call ! call_tmp[559376]))
          unknown call_tmp[559381] "expr temp" "maybe param" "maybe type" "temp"
          (559384 'move' call_tmp[559381](393991 call _cond_invalid tmp[393978]))
          if call_tmp[559381]
          {
            (393994 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[503356] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[503357] "maybe param" "temp"
          unknown call_tmp[559386] "expr temp" "maybe param" "maybe type" "temp"
          (559389 'move' call_tmp[559386](393979 call isTrue tmp[393978]))
          (503362 'move' tmp[503357](503360 call _cond_test call_tmp[559386]))
          if tmp[503357]
          {
            unknown tmp[503364] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[559391] "expr temp" "maybe param" "maybe type" "temp"
            (559394 'move' call_tmp[559391](55300 call isArray domInstance[55286]))
            unknown call_tmp[559396] "expr temp" "maybe param" "maybe type" "temp"
            (559399 'move' call_tmp[559396](55301 call ! call_tmp[559391]))
            (503366 'move' tmp[503364](393982 call isTrue call_tmp[559396]))
            (503371 'move' tmp[503356](503368 '_paramFoldLogical' tmp[503357] tmp[503364]))
          }
          {
            (503376 'move' tmp[503356](503373 '_paramFoldLogical' tmp[503357] 0))
          }
          (55306 call compilerAssert tmp[503356])
          unknown call_tmp[559401] "expr temp" "maybe param" "maybe type" "temp"
          (559404 'move' call_tmp[559401](55311 call chpl_buildStandInRTT domInstance[55286]))
          (458358 'move' ret[458343](458357 'deref' call_tmp[559401]))
          gotoReturn _end_standinType[458341] _end_standinType[458341]
        }
      }
      label _end_standinType[458341]
      (458345 return ret[458343])
    }
    unknown standinDomain[55329] "no auto destroy"
    unknown call_tmp[559406] "expr temp" "maybe param" "maybe type" "temp"
    (559409 'move' call_tmp[559406](55328 call standinType))
    (489404 'default init var' standinDomain[55329] call_tmp[559406])
    unknown call_tmp[559411] "expr temp" "maybe param" "maybe type" "temp"
    (559414 'move' call_tmp[559411](55339 'scalar promotion type' irType[55244]))
    unknown call_tmp[559416] "expr temp" "maybe param" "maybe type" "temp"
    (559419 'move' call_tmp[559416](55341 call chpl_buildStandInRTT call_tmp[559411]))
    unknown call_tmp[559421] "expr temp" "maybe param" "maybe type" "temp"
    (559424 'move' call_tmp[559421](55342 call chpl__buildArrayRuntimeType standinDomain[55329] call_tmp[559416]))
    (458369 'move' ret[458364](458368 'deref' call_tmp[559421]))
    (458366 return ret[458364])
  }
  function chpl_buildStandInRTT[55351](arg nonRTtype[55349]:_any[170](?)) type : _unknown[43]
  {
    unknown ret[458373] "RVV" "temp" "type variable"
    (458378 'move' ret[458373](458377 'deref' nonRTtype[55349]))
    (458375 return ret[458373])
  }
  function chpl_buildStandInRTT[55363](arg domInst[55361]:_any[170](?)) type : _unknown[43]
  {
    unknown ret[458382] "RVV" "temp" "type variable"
    unknown call_tmp[559428] "expr temp" "maybe param" "maybe type" "temp"
    (559431 'move' call_tmp[559428](55375 call rank _mt[232] domInst[55361]))
    unknown call_tmp[559435] "expr temp" "maybe param" "maybe type" "temp"
    (559438 'move' call_tmp[559435](55379 call idxType _mt[232] domInst[55361]))
    unknown call_tmp[559442] "expr temp" "maybe param" "maybe type" "temp"
    (559445 'move' call_tmp[559442](55383 call stridable _mt[232] domInst[55361]))
    unknown call_tmp[559447] "expr temp" "maybe param" "maybe type" "temp"
    (559450 'move' call_tmp[559447](55386 call chpl__buildDomainRuntimeType defaultDist[93214] call_tmp[559428] call_tmp[559435] call_tmp[559442]))
    (458387 'move' ret[458382](458386 'deref' call_tmp[559447]))
    (458384 return ret[458382])
  }
  where {
    unknown call_tmp[559452] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (559455 'move' call_tmp[559452](55366 'typeof' domInst[55361]))
    (55369 call <= call_tmp[559452] unmanaged DefaultRectangularDom[389799](?))
  }
  function chpl_buildStandInRTT[55397](arg domInst[55395]:_any[170](?)) type : _unknown[43] "no return value for void"
  {
    unknown call_tmp[559457] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (559460 'move' call_tmp[559457](55400 'typeof' domInst[55395]))
    unknown call_tmp[559462] "expr temp" "maybe param" "maybe type" "temp"
    (559465 'move' call_tmp[559462](55403 call <= call_tmp[559457] unmanaged BaseDom[389803]))
    unknown call_tmp[559467] "expr temp" "maybe param" "maybe type" "temp"
    (559470 'move' call_tmp[559467](55470 call _cond_test call_tmp[559462]))
    if call_tmp[559467]
    {
      (55425 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
    }
    {
      unknown call_tmp[559472] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (559475 'move' call_tmp[559472](55446 'typeof' domInst[55395]))
      unknown call_tmp[559477] "expr temp" "maybe param" "maybe type" "temp"
      (559480 'move' call_tmp[559477](55448 call _cast string[24] call_tmp[559472]))
      (55468 call compilerError "unexpected argument of type " call_tmp[559477] " for chpl_buildStandInRTT()")
    }
    (458389 return _void[47])
  }
  function chpl_trivialLeader[55481]() : _unknown[43] "iterator fn" "no return value for void"
  {
    unknown ret[458393] "RVV" "temp"
    unknown yret[458397] "YVV" "temp"
    (458400 'move' yret[458397](458399 'deref' 0))
    (458402 yield yret[458397])
    (458395 return ret[458393])
  }
  function chpl_computeIteratorShape[55497](arg arg[55494]:_array[133150](?)) : _unknown[43] "inline"
  {
    unknown ret[458406] "RVV" "temp"
    unknown call_tmp[559484] "expr temp" "maybe param" "maybe type" "temp"
    (559487 'move' call_tmp[559484](55503 call _dom _mt[232] arg[55494]))
    unknown call_tmp[559489] "expr temp" "maybe param" "maybe type" "temp"
    (559492 'move' call_tmp[559489](55507 call chpl_computeIteratorShape call_tmp[559484]))
    (458411 'move' ret[458406](458410 'deref' call_tmp[559489]))
    (458408 return ret[458406])
  }
  function chpl_computeIteratorShape[55519](arg arg[55516]:_domain[123390](?)) : _unknown[43] "inline"
  {
    unknown ret[458415] "RVV" "temp"
    unknown call_tmp[559496] "expr temp" "maybe param" "maybe type" "temp"
    (559499 'move' call_tmp[559496](55522 call _instance _mt[232] arg[55516]))
    (458420 'move' ret[458415](458419 'deref' call_tmp[559496]))
    (458417 return ret[458415])
  }
  function chpl_computeIteratorShape[55539](arg arg[55536]:range[66183](?)) : _unknown[43] "inline"
  {
    unknown ret[458424] "RVV" "temp"
    (458429 'move' ret[458424](458428 'deref' arg[55536]))
    (458426 return ret[458424])
  }
  function chpl_computeIteratorShape[55553](arg arg[55550]:_iteratorRecord[194](?)) : _unknown[43] "inline"
  {
    unknown ret[458433] "RVV" "temp"
    unknown call_tmp[559501] "expr temp" "maybe param" "maybe type" "temp"
    (559504 'move' call_tmp[559501](55558 call chpl_iteratorHasShape arg[55550]))
    unknown call_tmp[559506] "expr temp" "maybe param" "maybe type" "temp"
    (559509 'move' call_tmp[559506](55575 call _cond_test call_tmp[559501]))
    if call_tmp[559506]
    {
      unknown call_tmp[559513] "expr temp" "maybe param" "maybe type" "temp"
      (559516 'move' call_tmp[559513](55562 call _shape_ _mt[232] arg[55550]))
      (458438 'move' ret[458433](458437 'deref' call_tmp[559513]))
      gotoReturn _end_chpl_computeIteratorShape[458431] _end_chpl_computeIteratorShape[458431]
    }
    {
      const myvoid[55568] "const" "insert auto destroy"
      (489406 'init var' myvoid[55568] none[49])
      (458443 'move' ret[458433](458442 'deref' myvoid[55568]))
      gotoReturn _end_chpl_computeIteratorShape[458431] _end_chpl_computeIteratorShape[458431]
    }
    label _end_chpl_computeIteratorShape[458431]
    (458435 return ret[458433])
  }
  function chpl_computeIteratorShape[55587](arg arg[55585]:_any[170](?)) : _unknown[43] "inline"
  {
    unknown ret[458449] "RVV" "temp"
    (458454 'move' ret[458449](458453 'deref' none[49]))
    (458451 return ret[458449])
  }
  function chpl_iteratorHasShape[55601](arg ir[55598]:_iteratorRecord[194](?)) param : _unknown[43]
  {
    unknown ret[458458] "RVV" "param" "temp"
    unknown call_tmp[559518] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (559521 'move' call_tmp[559518](55605 'typeof' ir[55598]))
    unknown call_tmp[559523] "expr temp" "maybe param" "maybe type" "temp"
    (559526 'move' call_tmp[559523](55621 call hasField call_tmp[559518] "_shape_"))
    unknown call_tmp[559528] "expr temp" "maybe param" "maybe type" "temp"
    (559531 'move' call_tmp[559528](55635 call _cond_test call_tmp[559523]))
    if call_tmp[559528]
    {
      { scopeless type
        unknown call_type_tmp[442837] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[559535] "expr temp" "maybe param" "maybe type" "temp"
        (559538 'move' call_tmp[559535](55623 call _shape_ _mt[232] ir[55598]))
        (442841 'move' call_type_tmp[442837](55626 'typeof' call_tmp[559535]))
      }
      unknown call_tmp[559540] "expr temp" "maybe param" "maybe type" "temp"
      (559543 'move' call_tmp[559540](55628 call != call_type_tmp[442837] void[4]))
      (458463 'move' ret[458458](458462 'deref' call_tmp[559540]))
      gotoReturn _end_chpl_iteratorHasShape[458456] _end_chpl_iteratorHasShape[458456]
    }
    {
      (458468 'move' ret[458458](458467 'deref' 0))
      gotoReturn _end_chpl_iteratorHasShape[458456] _end_chpl_iteratorHasShape[458456]
    }
    label _end_chpl_iteratorHasShape[458456]
    (458460 return ret[458458])
  }
  function chpl_iteratorHasDomainShape[55650](arg ir[55647]:_iteratorRecord[194](?)) param : _unknown[43] "inline"
  {
    unknown ret[458474] "RVV" "param" "temp"
    unknown call_tmp[559545] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (559548 'move' call_tmp[559545](55654 'typeof' ir[55647]))
    unknown call_tmp[559550] "expr temp" "maybe param" "maybe type" "temp"
    (559553 'move' call_tmp[559550](55657 call hasField call_tmp[559545] "_shape_"))
    unknown call_tmp[559555] "expr temp" "maybe param" "maybe type" "temp"
    (559558 'move' call_tmp[559555](55672 call _cond_test call_tmp[559550]))
    if call_tmp[559555]
    {
      { scopeless type
        unknown call_type_tmp[442843] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[559562] "expr temp" "maybe param" "maybe type" "temp"
        (559565 'move' call_tmp[559562](55660 call _shape_ _mt[232] ir[55647]))
        (442847 'move' call_type_tmp[442843](55663 'typeof' call_tmp[559562]))
      }
      unknown call_tmp[559567] "expr temp" "maybe param" "maybe type" "temp"
      (559570 'move' call_tmp[559567](328445 'is_subtype' anymanaged BaseDom[339776](?) call_type_tmp[442843]))
      (458479 'move' ret[458474](458478 'deref' call_tmp[559567]))
      gotoReturn _end_chpl_iteratorHasDomainShape[458472] _end_chpl_iteratorHasDomainShape[458472]
    }
    {
      (458484 'move' ret[458474](458483 'deref' 0))
      gotoReturn _end_chpl_iteratorHasDomainShape[458472] _end_chpl_iteratorHasDomainShape[458472]
    }
    label _end_chpl_iteratorHasDomainShape[458472]
    (458476 return ret[458474])
  }
  function chpl_iteratorHasRangeShape[55687](arg ir[55684]:_iteratorRecord[194](?)) param : _unknown[43] "inline"
  {
    unknown ret[458490] "RVV" "param" "temp"
    unknown call_tmp[559572] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (559575 'move' call_tmp[559572](55691 'typeof' ir[55684]))
    unknown call_tmp[559577] "expr temp" "maybe param" "maybe type" "temp"
    (559580 'move' call_tmp[559577](55694 call hasField call_tmp[559572] "_shape_"))
    unknown call_tmp[559582] "expr temp" "maybe param" "maybe type" "temp"
    (559585 'move' call_tmp[559582](55708 call _cond_test call_tmp[559577]))
    if call_tmp[559582]
    {
      { scopeless type
        unknown call_type_tmp[442849] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[559589] "expr temp" "maybe param" "maybe type" "temp"
        (559592 'move' call_tmp[559589](55697 call _shape_ _mt[232] ir[55684]))
        (442853 'move' call_type_tmp[442849](55700 'typeof' call_tmp[559589]))
      }
      unknown call_tmp[559594] "expr temp" "maybe param" "maybe type" "temp"
      (559597 'move' call_tmp[559594](55702 call isRange call_type_tmp[442849]))
      (458495 'move' ret[458490](458494 'deref' call_tmp[559594]))
      gotoReturn _end_chpl_iteratorHasRangeShape[458488] _end_chpl_iteratorHasRangeShape[458488]
    }
    {
      (458500 'move' ret[458490](458499 'deref' 0))
      gotoReturn _end_chpl_iteratorHasRangeShape[458488] _end_chpl_iteratorHasRangeShape[458488]
    }
    label _end_chpl_iteratorHasRangeShape[458488]
    (458492 return ret[458490])
  }
  function chpl_iteratorShapeStaticTypeOrVoid[55723](arg ir[55720]:_iteratorRecord[194](?)) type : _unknown[43]
  {
    unknown ret[458506] "RVV" "temp" "type variable"
    unknown call_tmp[559599] "expr temp" "maybe param" "maybe type" "temp"
    (559602 'move' call_tmp[559599](55729 call hasField ir[55720] "_shape_"))
    unknown call_tmp[559604] "expr temp" "maybe param" "maybe type" "temp"
    (559607 'move' call_tmp[559604](55740 call _cond_test call_tmp[559599]))
    if call_tmp[559604]
    {
      unknown call_tmp[559609] "expr temp" "maybe param" "maybe type" "temp"
      (559612 'move' call_tmp[559609](55734 'static field type' ir[55720] "_shape_"))
      (458511 'move' ret[458506](458510 'deref' call_tmp[559609]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrVoid[458504] _end_chpl_iteratorShapeStaticTypeOrVoid[458504]
    }
    {
      (458516 'move' ret[458506](458515 'deref' none[49]))
      gotoReturn _end_chpl_iteratorShapeStaticTypeOrVoid[458504] _end_chpl_iteratorShapeStaticTypeOrVoid[458504]
    }
    label _end_chpl_iteratorShapeStaticTypeOrVoid[458504]
    (458508 return ret[458506])
  }
  function chpl_iteratorFromForExpr[55755](arg ir[55752]:_iteratorRecord[194](?)) param : _unknown[43]
  {
    unknown ret[458522] "RVV" "param" "temp"
    unknown call_tmp[559614] "expr temp" "maybe param" "maybe type" "temp"
    (559617 'move' call_tmp[559614](55781 call canResolveMethod module=[244] Reflection[211223] ir[55752] "_fromForExpr_"))
    unknown call_tmp[559619] "expr temp" "maybe param" "maybe type" "temp"
    (559622 'move' call_tmp[559619](55791 call _cond_test call_tmp[559614]))
    if call_tmp[559619]
    {
      unknown call_tmp[559626] "expr temp" "maybe param" "maybe type" "temp"
      (559629 'move' call_tmp[559626](55783 call _fromForExpr_ _mt[232] ir[55752]))
      (458527 'move' ret[458522](458526 'deref' call_tmp[559626]))
      gotoReturn _end_chpl_iteratorFromForExpr[458520] _end_chpl_iteratorFromForExpr[458520]
    }
    {
      (458532 'move' ret[458522](458531 'deref' 0))
      gotoReturn _end_chpl_iteratorFromForExpr[458520] _end_chpl_iteratorFromForExpr[458520]
    }
    label _end_chpl_iteratorFromForExpr[458520]
    (458524 return ret[458522])
  }
  function chpl_iteratorFromForExpr[55804](arg arg[55802]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[458538] "RVV" "param" "temp"
    (458543 'move' ret[458538](458542 'deref' 0))
    (458540 return ret[458538])
  }
  function _iteratorRecord[194](?).writeThis[55817](arg _mt[55822]:_MT[227], arg this[55819]:_iteratorRecord[194](?) :
  _iteratorRecord[194](?), arg f[55815]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    unknown first[55826] "insert auto destroy"
    (489408 'init var' first[55826] 1 bool[10])
    {
      unknown _indexOfInterest[55872] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55873] "expr temp" "temp"
      (55882 'move' _iterator[55873](55880 call _getIterator this[55819]))
      Defer
      {
        {
          (55898 call _freeIterator _iterator[55873])
        }
      }
      { scopeless type
        (55887 'move' _indexOfInterest[55872](55884 call iteratorIndex _iterator[55873]))
      }
      ForLoop
      {
        unknown e[55891] "index var" "insert auto destroy"
        (55893 'move' e[55891] _indexOfInterest[55872])
        {
          unknown call_tmp[559631] "expr temp" "maybe param" "maybe type" "temp"
          (559634 'move' call_tmp[559631](55833 call ! first[55826]))
          unknown call_tmp[559636] "expr temp" "maybe param" "maybe type" "temp"
          (559639 'move' call_tmp[559636](55860 call _cond_test call_tmp[559631]))
          if call_tmp[559636]
          {
            (55852 call <~> f[55815] " ")
          }
          {
            (55857 call = first[55826] 0)
          }
          (55869 call <~> f[55815] e[55891])
        }
        label _continueLabel[55877]
        _indexOfInterest[55872]
        _iterator[55873]
      }
      label _breakLabel[55878]
    }
    (458545 return _void[47])
  }
  function =[55913](ref arg ic[55910]:_iteratorRecord[194](?), arg xs[55915]:_any[170](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[55931] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55932] "expr temp" "temp"
      unknown call_tmp[559641] "expr temp" "maybe param" "maybe type" "temp"
      (559644 'move' call_tmp[559641](55941 call _getIterator ic[55910]))
      unknown call_tmp[559646] "expr temp" "maybe param" "maybe type" "temp"
      (559649 'move' call_tmp[559646](55944 call _getIterator xs[55915]))
      (55946 'move' _iterator[55932](55925 call _build_tuple call_tmp[559641] call_tmp[559646]))
      Defer
      {
        {
          (55976 call _freeIterator _iterator[55932])
        }
      }
      { scopeless type
        (55951 'move' _indexOfInterest[55931](55948 call iteratorIndex _iterator[55932]))
      }
      ForLoop
      {
        (55956 call _check_tuple_var_decl _indexOfInterest[55931] 2)
        unknown e[55962] "index var" "insert auto destroy"
        (55964 'move' e[55962](55960 call _indexOfInterest[55931] 1))
        unknown x[55969] "index var" "insert auto destroy"
        (55971 'move' x[55969](55967 call _indexOfInterest[55931] 2))
        (55928 call = e[55962] x[55969])
        label _continueLabel[55936]
        _indexOfInterest[55931]
        _iterator[55932]
      }
      label _breakLabel[55937]
    }
    (458547 return _void[47])
  }
  function =[55992](ref arg ic[55989]:_iteratorRecord[194](?), arg x[55998] :
  (55997 call iteratorIndexType ic[55989])) : _unknown[43] "assignop" "suppress lvalue error" "no return value for void"
  {
    {
      unknown _indexOfInterest[56008] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56009] "expr temp" "temp"
      (56018 'move' _iterator[56009](56016 call _getIterator ic[55989]))
      Defer
      {
        {
          (56034 call _freeIterator _iterator[56009])
        }
      }
      { scopeless type
        (56023 'move' _indexOfInterest[56008](56020 call iteratorIndex _iterator[56009]))
      }
      ForLoop
      {
        unknown e[56027] "index var" "insert auto destroy"
        (56029 'move' e[56027] _indexOfInterest[56008])
        (56005 call = e[56027] x[55998])
        label _continueLabel[56013]
        _indexOfInterest[56008]
        _iterator[56009]
      }
      label _breakLabel[56014]
    }
    (458549 return _void[47])
  }
  function _getIterator[56048](const  ref arg x[56046]:_any[170](?)) : _unknown[43] "inline" "no borrow convert" "suppress lvalue error"
  {
    unknown ret[458553] "RVV" "temp"
    unknown call_tmp[559653] "expr temp" "maybe param" "maybe type" "temp"
    (559656 'move' call_tmp[559653](56058 call(56054 call (partial) these _mt[232] x[56046])))
    unknown call_tmp[559658] "expr temp" "maybe param" "maybe type" "temp"
    (559661 'move' call_tmp[559658](56060 call _getIterator call_tmp[559653]))
    (458558 'move' ret[458553](458557 'deref' call_tmp[559658]))
    (458555 return ret[458553])
  }
  function _getIterator[56070](arg t[56068]:_any[170](?)) : _unknown[43]
  {
    unknown ret[458562] "RVV" "temp"
    unknown call_tmp[559665] "expr temp" "maybe param" "maybe type" "temp"
    (559668 'move' call_tmp[559665](56078 call(56074 call (partial) these _mt[232] t[56068])))
    unknown call_tmp[559670] "expr temp" "maybe param" "maybe type" "temp"
    (559673 'move' call_tmp[559670](56080 call _getIterator call_tmp[559665]))
    (458567 'move' ret[458562](458566 'deref' call_tmp[559670]))
    (458564 return ret[458562])
  }
  function _getIteratorZip[56090](arg x[56088]:_any[170](?)) : _unknown[43] "inline"
  {
    unknown ret[458571] "RVV" "temp"
    unknown call_tmp[559675] "expr temp" "maybe param" "maybe type" "temp"
    (559678 'move' call_tmp[559675](56095 call _getIterator x[56088]))
    (458576 'move' ret[458571](458575 'deref' call_tmp[559675]))
    (458573 return ret[458571])
  }
  function _getIteratorZip[56105](arg t[56103]:_any[170](?)) : _unknown[43] "inline"
  {
    unknown ret[458580] "RVV" "temp"
    unknown call_tmp[559680] "expr temp" "maybe param" "maybe type" "temp"
    (559683 'move' call_tmp[559680](56110 call _getIterator t[56103]))
    (458585 'move' ret[458580](458584 'deref' call_tmp[559680]))
    (458582 return ret[458580])
  }
  function _getIteratorZip[56122](arg x[56119]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[458605] "RVV" "temp"
    function _getIteratorZipInternal[56130](arg x[56127]:_tuple[58502](?), param arg dim[56133]:int(64)[13]) : _unknown[43] "inline"
    {
      unknown ret[458589] "RVV" "temp"
      unknown call_tmp[559687] "expr temp" "maybe param" "maybe type" "temp"
      (559690 'move' call_tmp[559687](56138 call size _mt[232] x[56127]))
      unknown call_tmp[559692] "expr temp" "maybe param" "maybe type" "temp"
      (559695 'move' call_tmp[559692](56141 call == dim[56133] call_tmp[559687]))
      unknown call_tmp[559697] "expr temp" "maybe param" "maybe type" "temp"
      (559700 'move' call_tmp[559697](56175 call _cond_test call_tmp[559692]))
      if call_tmp[559697]
      {
        unknown call_tmp[559702] "expr temp" "maybe param" "maybe type" "temp"
        (559705 'move' call_tmp[559702](56147 call x[56127] dim[56133]))
        unknown call_tmp[559707] "expr temp" "maybe param" "maybe type" "temp"
        (559710 'move' call_tmp[559707](56149 call _getIterator call_tmp[559702]))
        unknown call_tmp[559712] "expr temp" "maybe param" "maybe type" "temp"
        (559715 'move' call_tmp[559712](56150 call _build_tuple call_tmp[559707]))
        (458594 'move' ret[458589](458593 'deref' call_tmp[559712]))
        gotoReturn _end__getIteratorZipInternal[458587] _end__getIteratorZipInternal[458587]
      }
      {
        unknown call_tmp[559717] "expr temp" "maybe param" "maybe type" "temp"
        (559720 'move' call_tmp[559717](56158 call x[56127] dim[56133]))
        unknown call_tmp[559722] "expr temp" "maybe param" "maybe type" "temp"
        (559725 'move' call_tmp[559722](56160 call _getIterator call_tmp[559717]))
        unknown call_tmp[559727] "expr temp" "maybe param" "maybe type" "temp"
        (559730 'move' call_tmp[559727](56166 call + dim[56133] 1))
        unknown call_tmp[559732] "expr temp" "maybe param" "maybe type" "temp"
        (559735 'move' call_tmp[559732](56168 call _getIteratorZipInternal x[56127] call_tmp[559727]))
        unknown call_tmp[559737] "expr temp" "maybe param" "maybe type" "temp"
        (559740 'move' call_tmp[559737](56171 call _build_tuple call_tmp[559722](56169 'expand_tuple' call_tmp[559732])))
        (458599 'move' ret[458589](458598 'deref' call_tmp[559737]))
        gotoReturn _end__getIteratorZipInternal[458587] _end__getIteratorZipInternal[458587]
      }
      label _end__getIteratorZipInternal[458587]
      (458591 return ret[458589])
    }
    unknown call_tmp[559744] "expr temp" "maybe param" "maybe type" "temp"
    (559747 'move' call_tmp[559744](56186 call size _mt[232] x[56119]))
    unknown call_tmp[559749] "expr temp" "maybe param" "maybe type" "temp"
    (559752 'move' call_tmp[559749](56190 call == call_tmp[559744] 1))
    unknown call_tmp[559754] "expr temp" "maybe param" "maybe type" "temp"
    (559757 'move' call_tmp[559754](56208 call _cond_test call_tmp[559749]))
    if call_tmp[559754]
    {
      unknown call_tmp[559759] "expr temp" "maybe param" "maybe type" "temp"
      (559762 'move' call_tmp[559759](56196 call x[56119] 1))
      unknown call_tmp[559764] "expr temp" "maybe param" "maybe type" "temp"
      (559767 'move' call_tmp[559764](56198 call _getIterator call_tmp[559759]))
      (458610 'move' ret[458605](458609 'deref' call_tmp[559764]))
      gotoReturn _end__getIteratorZip[458603] _end__getIteratorZip[458603]
    }
    {
      unknown call_tmp[559769] "expr temp" "maybe param" "maybe type" "temp"
      (559772 'move' call_tmp[559769](56205 call _getIteratorZipInternal x[56119] 1))
      (458615 'move' ret[458605](458614 'deref' call_tmp[559769]))
      gotoReturn _end__getIteratorZip[458603] _end__getIteratorZip[458603]
    }
    label _end__getIteratorZip[458603]
    (458607 return ret[458605])
  }
  function _getIteratorZip[56222](arg t[56219]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[458637] "RVV" "temp"
    function _getIteratorZipInternal[56230](arg t[56227]:_tuple[58502](?), param arg dim[56233]:int(64)[13]) : _unknown[43] "inline"
    {
      unknown ret[458621] "RVV" "temp"
      unknown call_tmp[559776] "expr temp" "maybe param" "maybe type" "temp"
      (559779 'move' call_tmp[559776](56238 call size _mt[232] t[56227]))
      unknown call_tmp[559781] "expr temp" "maybe param" "maybe type" "temp"
      (559784 'move' call_tmp[559781](56241 call == dim[56233] call_tmp[559776]))
      unknown call_tmp[559786] "expr temp" "maybe param" "maybe type" "temp"
      (559789 'move' call_tmp[559786](56275 call _cond_test call_tmp[559781]))
      if call_tmp[559786]
      {
        unknown call_tmp[559791] "expr temp" "maybe param" "maybe type" "temp"
        (559794 'move' call_tmp[559791](56247 call t[56227] dim[56233]))
        unknown call_tmp[559796] "expr temp" "maybe param" "maybe type" "temp"
        (559799 'move' call_tmp[559796](56249 call _getIterator call_tmp[559791]))
        unknown call_tmp[559801] "expr temp" "maybe param" "maybe type" "temp"
        (559804 'move' call_tmp[559801](56250 call _build_tuple call_tmp[559796]))
        (458626 'move' ret[458621](458625 'deref' call_tmp[559801]))
        gotoReturn _end__getIteratorZipInternal[458619] _end__getIteratorZipInternal[458619]
      }
      {
        unknown call_tmp[559806] "expr temp" "maybe param" "maybe type" "temp"
        (559809 'move' call_tmp[559806](56258 call t[56227] dim[56233]))
        unknown call_tmp[559811] "expr temp" "maybe param" "maybe type" "temp"
        (559814 'move' call_tmp[559811](56260 call _getIterator call_tmp[559806]))
        unknown call_tmp[559816] "expr temp" "maybe param" "maybe type" "temp"
        (559819 'move' call_tmp[559816](56266 call + dim[56233] 1))
        unknown call_tmp[559821] "expr temp" "maybe param" "maybe type" "temp"
        (559824 'move' call_tmp[559821](56268 call _getIteratorZipInternal t[56227] call_tmp[559816]))
        unknown call_tmp[559826] "expr temp" "maybe param" "maybe type" "temp"
        (559829 'move' call_tmp[559826](56271 call _build_tuple call_tmp[559811](56269 'expand_tuple' call_tmp[559821])))
        (458631 'move' ret[458621](458630 'deref' call_tmp[559826]))
        gotoReturn _end__getIteratorZipInternal[458619] _end__getIteratorZipInternal[458619]
      }
      label _end__getIteratorZipInternal[458619]
      (458623 return ret[458621])
    }
    unknown call_tmp[559833] "expr temp" "maybe param" "maybe type" "temp"
    (559836 'move' call_tmp[559833](56286 call size _mt[232] t[56219]))
    unknown call_tmp[559838] "expr temp" "maybe param" "maybe type" "temp"
    (559841 'move' call_tmp[559838](56290 call == call_tmp[559833] 1))
    unknown call_tmp[559843] "expr temp" "maybe param" "maybe type" "temp"
    (559846 'move' call_tmp[559843](56308 call _cond_test call_tmp[559838]))
    if call_tmp[559843]
    {
      unknown call_tmp[559848] "expr temp" "maybe param" "maybe type" "temp"
      (559851 'move' call_tmp[559848](56296 call t[56219] 1))
      unknown call_tmp[559853] "expr temp" "maybe param" "maybe type" "temp"
      (559856 'move' call_tmp[559853](56298 call _getIterator call_tmp[559848]))
      (458642 'move' ret[458637](458641 'deref' call_tmp[559853]))
      gotoReturn _end__getIteratorZip[458635] _end__getIteratorZip[458635]
    }
    {
      unknown call_tmp[559858] "expr temp" "maybe param" "maybe type" "temp"
      (559861 'move' call_tmp[559858](56305 call _getIteratorZipInternal t[56219] 1))
      (458647 'move' ret[458637](458646 'deref' call_tmp[559858]))
      gotoReturn _end__getIteratorZip[458635] _end__getIteratorZip[458635]
    }
    label _end__getIteratorZip[458635]
    (458639 return ret[458637])
  }
  function _freeIterator[56322](arg ic[56319]:_iteratorClass[197](?)) : _unknown[43] "inline" "no return value for void"
  {
    unknown call_tmp[559863] "expr temp" "maybe param" "maybe type" "temp"
    (559866 'move' call_tmp[559863](56343 'cast_to_void_star' ic[56319]))
    (56345 call chpl_here_free call_tmp[559863])
    (458651 return _void[47])
  }
  function _freeIterator[56356](arg x[56353]:_tuple[58502](?)) : _unknown[43] "inline" "no return value for void"
  {
    {
      unknown i[56373] "insert auto destroy"
      (489410 'init var' i[56373] 0)
      unknown tmp[56374] "maybe param" "temp"
      unknown call_tmp[559870] "expr temp" "maybe param" "maybe type" "temp"
      (559873 'move' call_tmp[559870](56360 call size _mt[232] x[56353]))
      (56386 'move' tmp[56374](56384 call chpl_compute_low_param_loop_bound 1 call_tmp[559870]))
      unknown tmp[56375] "maybe param" "temp"
      unknown call_tmp[559877] "expr temp" "maybe param" "maybe type" "temp"
      (559880 'move' call_tmp[559877](56391 call size _mt[232] x[56353]))
      (56396 'move' tmp[56375](56394 call chpl_compute_high_param_loop_bound 1 call_tmp[559877]))
      unknown tmp[56376] "maybe param" "temp"
      (56399 'move' tmp[56376] 1)
      ParamForLoop
      { i[56373] tmp[56374] tmp[56375] tmp[56376]
        unknown call_tmp[559882] "expr temp" "maybe param" "maybe type" "temp"
        (559885 'move' call_tmp[559882](56369 call x[56353] i[56373]))
        (56371 call _freeIterator call_tmp[559882])
      }
      label _unused_continueLabel[56378]
      label _breakLabel[56377]
    }
    (458653 return _void[47])
  }
  function _toLeader[56419](arg ir[56416]:_iteratorRecord[194](?)) : _unknown[43] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[458657] "RVV" "temp"
    unknown call_tmp[559887] "expr temp" "maybe param" "maybe type" "temp"
    (559890 'move' call_tmp[559887](56459 'to leader' ir[56416]))
    unknown call_tmp[559892] "expr temp" "maybe param" "maybe type" "temp"
    (559895 'move' call_tmp[559892](56461 call chpl__autoCopy call_tmp[559887]))
    (458662 'move' ret[458657](458661 'deref' call_tmp[559892]))
    (458659 return ret[458657])
  }
  where {
    (56439 'has leader' ir[56416])
  }
  function _toLeader[56472](arg x[56470]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[458666] "RVV" "temp"
    unknown call_tmp[559899] "expr temp" "maybe param" "maybe type" "temp"
    (559902 'move' call_tmp[559899](56499 call(56495 call (partial) these _mt[232] x[56470])))
    unknown call_tmp[559904] "expr temp" "maybe param" "maybe type" "temp"
    (559907 'move' call_tmp[559904](56501 call _toLeader call_tmp[559899]))
    (458671 'move' ret[458666](458670 'deref' call_tmp[559904]))
    (458668 return ret[458666])
  }
  where {
    unknown tmp[393999] "maybe param" "temp"
    unknown call_tmp[559909] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (559912 'move' call_tmp[559909](56476 'typeof' x[56470]))
    unknown call_tmp[559914] "expr temp" "maybe param" "maybe type" "temp"
    (559917 'move' call_tmp[559914](328446 'is_subtype' _iteratorRecord[194](?) call_tmp[559909]))
    (394010 'move' tmp[393999](56480 call ! call_tmp[559914]))
    unknown call_tmp[559919] "expr temp" "maybe param" "maybe type" "temp"
    (559922 'move' call_tmp[559919](394012 call _cond_invalid tmp[393999]))
    if call_tmp[559919]
    {
      (394015 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503383] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503384] "maybe param" "temp"
    unknown call_tmp[559924] "expr temp" "maybe param" "maybe type" "temp"
    (559927 'move' call_tmp[559924](394000 call isTrue tmp[393999]))
    (503389 'move' tmp[503384](503387 call _cond_test call_tmp[559924]))
    if tmp[503384]
    {
      unknown tmp[503391] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[559931] "expr temp" "maybe param" "maybe type" "temp"
      (559934 'move' call_tmp[559931](56489 call(56485 call (partial) these _mt[232] x[56470])))
      unknown call_tmp[559936] "expr temp" "maybe param" "maybe type" "temp"
      (559939 'move' call_tmp[559936](56490 'has leader' call_tmp[559931]))
      (503393 'move' tmp[503391](394003 call isTrue call_tmp[559936]))
      (503398 'move' tmp[503383](503395 '_paramFoldLogical' tmp[503384] tmp[503391]))
    }
    {
      (503403 'move' tmp[503383](503400 '_paramFoldLogical' tmp[503384] 0))
    }
    (691771 call _statementLevelSymbol tmp[503383])
  }
  function _toLeaderZip[56512](arg x[56510]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[458675] "RVV" "temp"
    unknown call_tmp[559941] "expr temp" "maybe param" "maybe type" "temp"
    (559944 'move' call_tmp[559941](56550 call _toLeader x[56510]))
    (458680 'move' ret[458675](458679 'deref' call_tmp[559941]))
    (458677 return ret[458675])
  }
  where {
    unknown tmp[394020] "maybe param" "temp"
    unknown call_tmp[559946] "expr temp" "maybe param" "maybe type" "temp"
    (559949 'move' call_tmp[559946](56517 call isTuple x[56510]))
    (394031 'move' tmp[394020](56518 call ! call_tmp[559946]))
    unknown call_tmp[559951] "expr temp" "maybe param" "maybe type" "temp"
    (559954 'move' call_tmp[559951](394033 call _cond_invalid tmp[394020]))
    if call_tmp[559951]
    {
      (394036 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503410] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503411] "maybe param" "temp"
    unknown call_tmp[559956] "expr temp" "maybe param" "maybe type" "temp"
    (559959 'move' call_tmp[559956](394021 call isTrue tmp[394020]))
    (503416 'move' tmp[503411](503414 call _cond_test call_tmp[559956]))
    if tmp[503411]
    {
      unknown tmp[503418] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[559961] "expr temp" "maybe param" "maybe type" "temp"
      (559964 'move' call_tmp[559961](56544 call canResolve module=[244] Reflection[211223] "_toLeader" x[56510]))
      (503420 'move' tmp[503418](394024 call isTrue call_tmp[559961]))
      (503425 'move' tmp[503410](503422 '_paramFoldLogical' tmp[503411] tmp[503418]))
    }
    {
      (503430 'move' tmp[503410](503427 '_paramFoldLogical' tmp[503411] 0))
    }
    (691773 call _statementLevelSymbol tmp[503410])
  }
  function _toLeaderZip[56563](arg x[56560]:_tuple[58502](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[458684] "RVV" "temp"
    unknown call_tmp[559966] "expr temp" "maybe param" "maybe type" "temp"
    (559969 'move' call_tmp[559966](56580 call x[56560] 1))
    unknown call_tmp[559971] "expr temp" "maybe param" "maybe type" "temp"
    (559974 'move' call_tmp[559971](56582 call _toLeader call_tmp[559966]))
    (458689 'move' ret[458684](458688 'deref' call_tmp[559971]))
    (458686 return ret[458684])
  }
  where {
    unknown call_tmp[559976] "expr temp" "maybe param" "maybe type" "temp"
    (559979 'move' call_tmp[559976](56574 call x[56560] 1))
    (56575 call canResolve module=[244] Reflection[211223] "_toLeader" call_tmp[559976])
  }
  function _toStandalone[56595](arg iterator[56592]:_iteratorClass[197](?)) : _unknown[43] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[458693] "RVV" "temp"
    unknown call_tmp[559981] "expr temp" "maybe param" "maybe type" "temp"
    (559984 'move' call_tmp[559981](56616 'to standalone' iterator[56592]))
    unknown call_tmp[559986] "expr temp" "maybe param" "maybe type" "temp"
    (559989 'move' call_tmp[559986](56618 call chpl__autoCopy call_tmp[559981]))
    (458698 'move' ret[458693](458697 'deref' call_tmp[559986]))
    (458695 return ret[458693])
  }
  function _toStandalone[56630](arg ir[56627]:_iteratorRecord[194](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[458702] "RVV" "temp"
    unknown call_tmp[559991] "maybe param" "maybe type" "temp"
    (559994 'move' call_tmp[559991](56635 call _getIterator ir[56627]))
    unknown ic[56636] "insert auto destroy" "no copy"
    (489412 'init var' ic[56636] call_tmp[559991])
    unknown call_tmp[559996] "maybe param" "maybe type" "temp"
    (559999 'move' call_tmp[559996](56643 call _toStandalone ic[56636]))
    unknown standalone[56644] "insert auto destroy" "no copy"
    (489414 'init var' standalone[56644] call_tmp[559996])
    (56650 call _freeIterator ic[56636])
    (458707 'move' ret[458702](458706 'deref' standalone[56644]))
    (458704 return ret[458702])
  }
  function _toStandalone[56661](arg x[56659]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[458711] "RVV" "temp"
    unknown call_tmp[560003] "expr temp" "maybe param" "maybe type" "temp"
    (560006 'move' call_tmp[560003](56669 call(56665 call (partial) these _mt[232] x[56659])))
    unknown call_tmp[560008] "expr temp" "maybe param" "maybe type" "temp"
    (560011 'move' call_tmp[560008](56671 call _toStandalone call_tmp[560003]))
    (458716 'move' ret[458711](458715 'deref' call_tmp[560008]))
    (458713 return ret[458711])
  }
  function _toLeader[56683](arg ir[56680]:_iteratorRecord[194](?), arg args[56686]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[458720] "RVV" "temp"
    unknown call_tmp[560013] "expr temp" "maybe param" "maybe type" "temp"
    (560016 'move' call_tmp[560013](56695 'to leader' ir[56680](56694 'expand_tuple' args[56686])))
    unknown call_tmp[560018] "expr temp" "maybe param" "maybe type" "temp"
    (560021 'move' call_tmp[560018](56697 call chpl__autoCopy call_tmp[560013]))
    (458725 'move' ret[458720](458724 'deref' call_tmp[560018]))
    (458722 return ret[458720])
  }
  function _toLeader[56707](arg x[56705]:_any[170](?), arg args[56710]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[458729] "RVV" "temp"
    unknown call_tmp[560025] "expr temp" "maybe param" "maybe type" "temp"
    (560028 'move' call_tmp[560025](56719 call(56715 call (partial) these _mt[232] x[56705])))
    unknown call_tmp[560030] "expr temp" "maybe param" "maybe type" "temp"
    (560033 'move' call_tmp[560030](56723 call _toLeader call_tmp[560025](56722 'expand_tuple' args[56710])))
    (458734 'move' ret[458729](458733 'deref' call_tmp[560030]))
    (458731 return ret[458729])
  }
  function _toLeaderZip[56733](arg x[56731]:_any[170](?), arg args[56736]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[458738] "RVV" "temp"
    unknown call_tmp[560035] "expr temp" "maybe param" "maybe type" "temp"
    (560038 'move' call_tmp[560035](56744 call _toLeader x[56731](56743 'expand_tuple' args[56736])))
    (458743 'move' ret[458738](458742 'deref' call_tmp[560035]))
    (458740 return ret[458738])
  }
  function _toLeaderZip[56756](arg x[56753]:_tuple[58502](?), arg args[56759]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[458747] "RVV" "temp"
    unknown call_tmp[560040] "expr temp" "maybe param" "maybe type" "temp"
    (560043 'move' call_tmp[560040](56766 call x[56753] 1))
    unknown call_tmp[560045] "expr temp" "maybe param" "maybe type" "temp"
    (560048 'move' call_tmp[560045](56770 call _toLeader call_tmp[560040](56769 'expand_tuple' args[56759])))
    (458752 'move' ret[458747](458751 'deref' call_tmp[560045]))
    (458749 return ret[458747])
  }
  function _toStandalone[56782](arg iterator[56779]:_iteratorClass[197](?), arg args[56785]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[458756] "RVV" "temp"
    unknown call_tmp[560050] "expr temp" "maybe param" "maybe type" "temp"
    (560053 'move' call_tmp[560050](56794 'to standalone' iterator[56779](56793 'expand_tuple' args[56785])))
    unknown call_tmp[560055] "expr temp" "maybe param" "maybe type" "temp"
    (560058 'move' call_tmp[560055](56796 call chpl__autoCopy call_tmp[560050]))
    (458761 'move' ret[458756](458760 'deref' call_tmp[560055]))
    (458758 return ret[458756])
  }
  function _toStandalone[56808](arg ir[56805]:_iteratorRecord[194](?), arg args[56811]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ret[458765] "RVV" "temp"
    unknown call_tmp[560060] "maybe param" "maybe type" "temp"
    (560063 'move' call_tmp[560060](56817 call _getIterator ir[56805]))
    unknown ic[56818] "insert auto destroy" "no copy"
    (489416 'init var' ic[56818] call_tmp[560060])
    unknown call_tmp[560065] "maybe param" "maybe type" "temp"
    (560068 'move' call_tmp[560065](56827 call _toStandalone ic[56818](56826 'expand_tuple' args[56811])))
    unknown standalone[56828] "insert auto destroy" "no copy"
    (489418 'init var' standalone[56828] call_tmp[560065])
    (56834 call _freeIterator ic[56818])
    (458770 'move' ret[458765](458769 'deref' standalone[56828]))
    (458767 return ret[458765])
  }
  function _toStandalone[56845](arg x[56843]:_any[170](?), arg args[56848]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[458774] "RVV" "temp"
    unknown call_tmp[560072] "expr temp" "maybe param" "maybe type" "temp"
    (560075 'move' call_tmp[560072](56857 call(56853 call (partial) these _mt[232] x[56843])))
    unknown call_tmp[560077] "expr temp" "maybe param" "maybe type" "temp"
    (560080 'move' call_tmp[560077](56861 call _toStandalone call_tmp[560072](56860 'expand_tuple' args[56848])))
    (458779 'move' ret[458774](458778 'deref' call_tmp[560077]))
    (458776 return ret[458774])
  }
  function chpl__staticFastFollowCheck[56871](arg x[56869]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[458783] "RVV" "param" "temp"
    const lead[56874] "const" "insert auto destroy" "no copy"
    (489420 'init var' lead[56874] x[56869])
    unknown tmp[394041] "maybe param" "temp"
    (394052 'move' tmp[394041](56881 call isDomain lead[56874]))
    unknown call_tmp[560082] "expr temp" "maybe param" "maybe type" "temp"
    (560085 'move' call_tmp[560082](394054 call _cond_invalid tmp[394041]))
    if call_tmp[560082]
    {
      (394057 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[503437] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503438] "maybe param" "temp"
    unknown call_tmp[560087] "expr temp" "maybe param" "maybe type" "temp"
    (560090 'move' call_tmp[560087](394042 call isTrue tmp[394041]))
    (503443 'move' tmp[503438](503441 call _cond_test call_tmp[560087]))
    if tmp[503438]
    {
      (503448 'move' tmp[503437](503445 '_paramFoldLogical' tmp[503438] 1))
    }
    {
      unknown tmp[503450] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560092] "expr temp" "maybe param" "maybe type" "temp"
      (560095 'move' call_tmp[560092](56885 call isArray lead[56874]))
      (503452 'move' tmp[503450](394046 call isTrue call_tmp[560092]))
      (503457 'move' tmp[503437](503454 '_paramFoldLogical' tmp[503438] tmp[503450]))
    }
    unknown call_tmp[560097] "expr temp" "maybe param" "maybe type" "temp"
    (560100 'move' call_tmp[560097](56898 call _cond_test tmp[503437]))
    if call_tmp[560097]
    {
      unknown call_tmp[560102] "expr temp" "maybe param" "maybe type" "temp"
      (560105 'move' call_tmp[560102](56892 call chpl__staticFastFollowCheck x[56869] lead[56874]))
      (458788 'move' ret[458783](458787 'deref' call_tmp[560102]))
      gotoReturn _end_chpl__staticFastFollowCheck[458781] _end_chpl__staticFastFollowCheck[458781]
    }
    {
      (458793 'move' ret[458783](458792 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheck[458781] _end_chpl__staticFastFollowCheck[458781]
    }
    label _end_chpl__staticFastFollowCheck[458781]
    (458785 return ret[458783])
  }
  function chpl__staticFastFollowCheck[56910](arg x[56908]:_any[170](?), arg lead[56912]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[458799] "RVV" "param" "temp"
    (458804 'move' ret[458799](458803 'deref' 0))
    (458801 return ret[458799])
  }
  function chpl__staticFastFollowCheck[56928](arg x[56925]:_array[133150](?), arg lead[56930]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[458808] "RVV" "param" "temp"
    { scopeless type
      unknown call_type_tmp[442855] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[560109] "expr temp" "maybe param" "maybe type" "temp"
      (560112 'move' call_tmp[560109](56944 call _value _mt[232] lead[56930]))
      (442859 'move' call_type_tmp[442855](56947 'typeof' call_tmp[560109]))
    }
    unknown call_tmp[560116] "expr temp" "maybe param" "maybe type" "temp"
    (560119 'move' call_tmp[560116](56935 call _value _mt[232] x[56925]))
    unknown call_tmp[560123] "expr temp" "maybe param" "maybe type" "temp"
    (560126 'move' call_tmp[560123](56949 call(56940 call (partial) dsiStaticFastFollowCheck _mt[232] call_tmp[560116]) call_type_tmp[442855]))
    (458813 'move' ret[458808](458812 'deref' call_tmp[560123]))
    (458810 return ret[458808])
  }
  function chpl__staticFastFollowCheckZip[56961](arg x[56958]:_tuple[58502](?)) param : _unknown[43]
  {
    unknown ret[458817] "RVV" "param" "temp"
    unknown call_tmp[560128] "maybe param" "maybe type" "temp"
    (560131 'move' call_tmp[560128](56966 call x[56958] 1))
    const lead[56967] "const" "insert auto destroy" "no copy"
    (489422 'init var' lead[56967] call_tmp[560128])
    unknown tmp[394062] "maybe param" "temp"
    (394073 'move' tmp[394062](56974 call isDomain lead[56967]))
    unknown call_tmp[560133] "expr temp" "maybe param" "maybe type" "temp"
    (560136 'move' call_tmp[560133](394075 call _cond_invalid tmp[394062]))
    if call_tmp[560133]
    {
      (394078 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[503464] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503465] "maybe param" "temp"
    unknown call_tmp[560138] "expr temp" "maybe param" "maybe type" "temp"
    (560141 'move' call_tmp[560138](394063 call isTrue tmp[394062]))
    (503470 'move' tmp[503465](503468 call _cond_test call_tmp[560138]))
    if tmp[503465]
    {
      (503475 'move' tmp[503464](503472 '_paramFoldLogical' tmp[503465] 1))
    }
    {
      unknown tmp[503477] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560143] "expr temp" "maybe param" "maybe type" "temp"
      (560146 'move' call_tmp[560143](56978 call isArray lead[56967]))
      (503479 'move' tmp[503477](394067 call isTrue call_tmp[560143]))
      (503484 'move' tmp[503464](503481 '_paramFoldLogical' tmp[503465] tmp[503477]))
    }
    unknown call_tmp[560148] "expr temp" "maybe param" "maybe type" "temp"
    (560151 'move' call_tmp[560148](56991 call _cond_test tmp[503464]))
    if call_tmp[560148]
    {
      unknown call_tmp[560153] "expr temp" "maybe param" "maybe type" "temp"
      (560156 'move' call_tmp[560153](56985 call chpl__staticFastFollowCheckZip x[56958] lead[56967]))
      (458822 'move' ret[458817](458821 'deref' call_tmp[560153]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[458815] _end_chpl__staticFastFollowCheckZip[458815]
    }
    {
      (458827 'move' ret[458817](458826 'deref' 0))
      gotoReturn _end_chpl__staticFastFollowCheckZip[458815] _end_chpl__staticFastFollowCheckZip[458815]
    }
    label _end_chpl__staticFastFollowCheckZip[458815]
    (458819 return ret[458817])
  }
  function chpl__staticFastFollowCheckZip[57003](arg x[57001]:_any[170](?), arg lead[57005]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[458833] "RVV" "param" "temp"
    unknown call_tmp[560158] "expr temp" "maybe param" "maybe type" "temp"
    (560161 'move' call_tmp[560158](57011 call chpl__staticFastFollowCheck x[57001] lead[57005]))
    (458838 'move' ret[458833](458837 'deref' call_tmp[560158]))
    (458835 return ret[458833])
  }
  function chpl__staticFastFollowCheckZip[57023](arg x[57020]:_tuple[58502](?), arg lead[57025]:_any[170](?), param arg dim[57028] :
  1 =
  1) param : _unknown[43]
  {
    unknown ret[458842] "RVV" "param" "temp"
    unknown call_tmp[560165] "expr temp" "maybe param" "maybe type" "temp"
    (560168 'move' call_tmp[560165](57032 call size _mt[232] x[57020]))
    unknown call_tmp[560170] "expr temp" "maybe param" "maybe type" "temp"
    (560173 'move' call_tmp[560170](57036 call == call_tmp[560165] dim[57028]))
    unknown call_tmp[560175] "expr temp" "maybe param" "maybe type" "temp"
    (560178 'move' call_tmp[560175](57069 call _cond_test call_tmp[560170]))
    if call_tmp[560175]
    {
      unknown call_tmp[560180] "expr temp" "maybe param" "maybe type" "temp"
      (560183 'move' call_tmp[560180](57042 call x[57020] dim[57028]))
      unknown call_tmp[560185] "expr temp" "maybe param" "maybe type" "temp"
      (560188 'move' call_tmp[560185](57045 call chpl__staticFastFollowCheckZip call_tmp[560180] lead[57025]))
      (458847 'move' ret[458842](458846 'deref' call_tmp[560185]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[458840] _end_chpl__staticFastFollowCheckZip[458840]
    }
    {
      unknown tmp[394083] "maybe param" "temp"
      unknown call_tmp[560190] "expr temp" "maybe param" "maybe type" "temp"
      (560193 'move' call_tmp[560190](57052 call x[57020] dim[57028]))
      (394094 'move' tmp[394083](57055 call chpl__staticFastFollowCheckZip call_tmp[560190] lead[57025]))
      unknown call_tmp[560195] "expr temp" "maybe param" "maybe type" "temp"
      (560198 'move' call_tmp[560195](394096 call _cond_invalid tmp[394083]))
      if call_tmp[560195]
      {
        (394099 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[503491] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[503492] "maybe param" "temp"
      unknown call_tmp[560200] "expr temp" "maybe param" "maybe type" "temp"
      (560203 'move' call_tmp[560200](394084 call isTrue tmp[394083]))
      (503497 'move' tmp[503492](503495 call _cond_test call_tmp[560200]))
      if tmp[503492]
      {
        (503502 'move' tmp[503491](503499 '_paramFoldLogical' tmp[503492] 1))
      }
      {
        unknown tmp[503504] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[560205] "expr temp" "maybe param" "maybe type" "temp"
        (560208 'move' call_tmp[560205](57062 call + dim[57028] 1))
        unknown call_tmp[560210] "expr temp" "maybe param" "maybe type" "temp"
        (560213 'move' call_tmp[560210](57064 call chpl__staticFastFollowCheckZip x[57020] lead[57025] call_tmp[560205]))
        (503506 'move' tmp[503504](394088 call isTrue call_tmp[560210]))
        (503511 'move' tmp[503491](503508 '_paramFoldLogical' tmp[503492] tmp[503504]))
      }
      (458852 'move' ret[458842](458851 'deref' tmp[503491]))
      gotoReturn _end_chpl__staticFastFollowCheckZip[458840] _end_chpl__staticFastFollowCheckZip[458840]
    }
    label _end_chpl__staticFastFollowCheckZip[458840]
    (458844 return ret[458842])
  }
  function chpl__dynamicFastFollowCheck[57082](arg x[57080]:_any[170](?)) : _unknown[43]
  {
    unknown ret[458858] "RVV" "temp"
    unknown call_tmp[560215] "expr temp" "maybe param" "maybe type" "temp"
    (560218 'move' call_tmp[560215](57088 call chpl__dynamicFastFollowCheck x[57080] x[57080]))
    (458863 'move' ret[458858](458862 'deref' call_tmp[560215]))
    (458860 return ret[458858])
  }
  function chpl__dynamicFastFollowCheck[57098](arg x[57096]:_any[170](?), arg lead[57100]:_any[170](?)) : _unknown[43]
  {
    unknown ret[458867] "RVV" "temp"
    (458872 'move' ret[458867](458871 'deref' 1))
    (458869 return ret[458867])
  }
  function chpl__dynamicFastFollowCheck[57116](arg x[57113]:_array[133150](?), arg lead[57118]:_any[170](?)) : _unknown[43]
  {
    unknown ret[458876] "RVV" "temp"
    unknown call_tmp[560220] "expr temp" "maybe param" "maybe type" "temp"
    (560223 'move' call_tmp[560220](57124 call chpl__staticFastFollowCheck x[57113] lead[57118]))
    unknown call_tmp[560225] "expr temp" "maybe param" "maybe type" "temp"
    (560228 'move' call_tmp[560225](57142 call _cond_test call_tmp[560220]))
    if call_tmp[560225]
    {
      unknown call_tmp[560232] "expr temp" "maybe param" "maybe type" "temp"
      (560235 'move' call_tmp[560232](57126 call _value _mt[232] x[57113]))
      unknown call_tmp[560239] "expr temp" "maybe param" "maybe type" "temp"
      (560242 'move' call_tmp[560239](57136 call(57131 call (partial) dsiDynamicFastFollowCheck _mt[232] call_tmp[560232]) lead[57118]))
      (458881 'move' ret[458876](458880 'deref' call_tmp[560239]))
      gotoReturn _end_chpl__dynamicFastFollowCheck[458874] _end_chpl__dynamicFastFollowCheck[458874]
    }
    {
      (458886 'move' ret[458876](458885 'deref' 0))
      gotoReturn _end_chpl__dynamicFastFollowCheck[458874] _end_chpl__dynamicFastFollowCheck[458874]
    }
    label _end_chpl__dynamicFastFollowCheck[458874]
    (458878 return ret[458876])
  }
  function chpl__dynamicFastFollowCheckZip[57157](arg x[57154]:_tuple[58502](?)) : _unknown[43]
  {
    unknown ret[458892] "RVV" "temp"
    unknown call_tmp[560244] "expr temp" "maybe param" "maybe type" "temp"
    (560247 'move' call_tmp[560244](57165 call x[57154] 1))
    unknown call_tmp[560249] "expr temp" "maybe param" "maybe type" "temp"
    (560252 'move' call_tmp[560249](57166 call chpl__dynamicFastFollowCheckZip x[57154] call_tmp[560244]))
    (458897 'move' ret[458892](458896 'deref' call_tmp[560249]))
    (458894 return ret[458892])
  }
  function chpl__dynamicFastFollowCheckZip[57176](arg x[57174]:_any[170](?), arg lead[57178]:_any[170](?)) : _unknown[43]
  {
    unknown ret[458901] "RVV" "temp"
    unknown call_tmp[560254] "expr temp" "maybe param" "maybe type" "temp"
    (560257 'move' call_tmp[560254](57184 call chpl__dynamicFastFollowCheck x[57174] lead[57178]))
    (458906 'move' ret[458901](458905 'deref' call_tmp[560254]))
    (458903 return ret[458901])
  }
  function chpl__dynamicFastFollowCheckZip[57196](arg x[57193]:_tuple[58502](?), arg lead[57198]:_any[170](?), param arg dim[57201] :
  1 =
  1) : _unknown[43]
  {
    unknown ret[458910] "RVV" "temp"
    unknown call_tmp[560261] "expr temp" "maybe param" "maybe type" "temp"
    (560264 'move' call_tmp[560261](57205 call size _mt[232] x[57193]))
    unknown call_tmp[560266] "expr temp" "maybe param" "maybe type" "temp"
    (560269 'move' call_tmp[560266](57209 call == call_tmp[560261] dim[57201]))
    unknown call_tmp[560271] "expr temp" "maybe param" "maybe type" "temp"
    (560274 'move' call_tmp[560271](57242 call _cond_test call_tmp[560266]))
    if call_tmp[560271]
    {
      unknown call_tmp[560276] "expr temp" "maybe param" "maybe type" "temp"
      (560279 'move' call_tmp[560276](57215 call x[57193] dim[57201]))
      unknown call_tmp[560281] "expr temp" "maybe param" "maybe type" "temp"
      (560284 'move' call_tmp[560281](57218 call chpl__dynamicFastFollowCheckZip call_tmp[560276] lead[57198]))
      (458915 'move' ret[458910](458914 'deref' call_tmp[560281]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[458908] _end_chpl__dynamicFastFollowCheckZip[458908]
    }
    {
      unknown tmp[394104] "maybe param" "temp"
      unknown call_tmp[560286] "expr temp" "maybe param" "maybe type" "temp"
      (560289 'move' call_tmp[560286](57225 call x[57193] dim[57201]))
      (394115 'move' tmp[394104](57228 call chpl__dynamicFastFollowCheckZip call_tmp[560286] lead[57198]))
      unknown call_tmp[560291] "expr temp" "maybe param" "maybe type" "temp"
      (560294 'move' call_tmp[560291](394117 call _cond_invalid tmp[394104]))
      if call_tmp[560291]
      {
        (394120 call compilerError "cannot promote short-circuiting && operator")
      }
      unknown tmp[503518] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[503519] "maybe param" "temp"
      unknown call_tmp[560296] "expr temp" "maybe param" "maybe type" "temp"
      (560299 'move' call_tmp[560296](394105 call isTrue tmp[394104]))
      (503524 'move' tmp[503519](503522 call _cond_test call_tmp[560296]))
      if tmp[503519]
      {
        unknown tmp[503526] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[560301] "expr temp" "maybe param" "maybe type" "temp"
        (560304 'move' call_tmp[560301](57235 call + dim[57201] 1))
        unknown call_tmp[560306] "expr temp" "maybe param" "maybe type" "temp"
        (560309 'move' call_tmp[560306](57237 call chpl__dynamicFastFollowCheckZip x[57193] lead[57198] call_tmp[560301]))
        (503528 'move' tmp[503526](394108 call isTrue call_tmp[560306]))
        (503533 'move' tmp[503518](503530 '_paramFoldLogical' tmp[503519] tmp[503526]))
      }
      {
        (503538 'move' tmp[503518](503535 '_paramFoldLogical' tmp[503519] 0))
      }
      (458920 'move' ret[458910](458919 'deref' tmp[503518]))
      gotoReturn _end_chpl__dynamicFastFollowCheckZip[458908] _end_chpl__dynamicFastFollowCheckZip[458908]
    }
    label _end_chpl__dynamicFastFollowCheckZip[458908]
    (458912 return ret[458910])
  }
  function _toFollower[57257](arg iterator[57254]:_iteratorClass[197](?), arg leaderIndex[57259]:_any[170](?)) : _unknown[43] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[458926] "RVV" "temp"
    unknown call_tmp[560311] "expr temp" "maybe param" "maybe type" "temp"
    (560314 'move' call_tmp[560311](57281 'to follower' iterator[57254] leaderIndex[57259]))
    unknown call_tmp[560316] "expr temp" "maybe param" "maybe type" "temp"
    (560319 'move' call_tmp[560316](57283 call chpl__autoCopy call_tmp[560311]))
    (458931 'move' ret[458926](458930 'deref' call_tmp[560316]))
    (458928 return ret[458926])
  }
  function _toFollower[57295](arg ir[57292]:_iteratorRecord[194](?), arg leaderIndex[57297]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[458935] "RVV" "temp"
    unknown call_tmp[560321] "maybe param" "maybe type" "temp"
    (560324 'move' call_tmp[560321](57302 call _getIterator ir[57292]))
    unknown ic[57303] "insert auto destroy" "no copy"
    (489424 'init var' ic[57303] call_tmp[560321])
    unknown call_tmp[560326] "maybe param" "maybe type" "temp"
    (560329 'move' call_tmp[560326](57311 call _toFollower ic[57303] leaderIndex[57297]))
    unknown follower[57312] "insert auto destroy" "no copy"
    (489426 'init var' follower[57312] call_tmp[560326])
    (57318 call _freeIterator ic[57303])
    (458940 'move' ret[458935](458939 'deref' follower[57312]))
    (458937 return ret[458935])
  }
  function _toFollower[57329](arg x[57327]:_any[170](?), arg leaderIndex[57331]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator" "suppress lvalue error"
  {
    unknown ret[458944] "RVV" "temp"
    unknown call_tmp[560333] "expr temp" "maybe param" "maybe type" "temp"
    (560336 'move' call_tmp[560333](57339 call(57335 call (partial) these _mt[232] x[57327])))
    unknown call_tmp[560338] "expr temp" "maybe param" "maybe type" "temp"
    (560341 'move' call_tmp[560338](57342 call _toFollower call_tmp[560333] leaderIndex[57331]))
    (458949 'move' ret[458944](458948 'deref' call_tmp[560338]))
    (458946 return ret[458944])
  }
  function _toFollowerZip[57352](arg x[57350]:_any[170](?), arg leaderIndex[57354]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[458953] "RVV" "temp"
    unknown call_tmp[560343] "expr temp" "maybe param" "maybe type" "temp"
    (560346 'move' call_tmp[560343](57360 call _toFollower x[57350] leaderIndex[57354]))
    (458958 'move' ret[458953](458957 'deref' call_tmp[560343]))
    (458955 return ret[458953])
  }
  function _toFollowerZip[57372](arg x[57369]:_tuple[58502](?), arg leaderIndex[57374]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[458962] "RVV" "temp"
    unknown call_tmp[560348] "expr temp" "maybe param" "maybe type" "temp"
    (560351 'move' call_tmp[560348](57381 call _toFollowerZipInternal x[57369] leaderIndex[57374] 1))
    (458967 'move' ret[458962](458966 'deref' call_tmp[560348]))
    (458964 return ret[458962])
  }
  function _toFollowerZipInternal[57393](arg x[57390]:_tuple[58502](?), arg leaderIndex[57395]:_any[170](?), param arg dim[57398]:int(64)[13]) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[458971] "RVV" "temp"
    unknown call_tmp[560355] "expr temp" "maybe param" "maybe type" "temp"
    (560358 'move' call_tmp[560355](57403 call size _mt[232] x[57390]))
    unknown call_tmp[560360] "expr temp" "maybe param" "maybe type" "temp"
    (560363 'move' call_tmp[560360](57406 call == dim[57398] call_tmp[560355]))
    unknown call_tmp[560365] "expr temp" "maybe param" "maybe type" "temp"
    (560368 'move' call_tmp[560365](57443 call _cond_test call_tmp[560360]))
    if call_tmp[560365]
    {
      unknown call_tmp[560370] "expr temp" "maybe param" "maybe type" "temp"
      (560373 'move' call_tmp[560370](57412 call x[57390] dim[57398]))
      unknown call_tmp[560375] "expr temp" "maybe param" "maybe type" "temp"
      (560378 'move' call_tmp[560375](57415 call _toFollower call_tmp[560370] leaderIndex[57395]))
      unknown call_tmp[560380] "expr temp" "maybe param" "maybe type" "temp"
      (560383 'move' call_tmp[560380](57416 call _build_tuple call_tmp[560375]))
      (458976 'move' ret[458971](458975 'deref' call_tmp[560380]))
      gotoReturn _end__toFollowerZipInternal[458969] _end__toFollowerZipInternal[458969]
    }
    {
      unknown call_tmp[560385] "expr temp" "maybe param" "maybe type" "temp"
      (560388 'move' call_tmp[560385](57424 call x[57390] dim[57398]))
      unknown call_tmp[560390] "expr temp" "maybe param" "maybe type" "temp"
      (560393 'move' call_tmp[560390](57427 call _toFollower call_tmp[560385] leaderIndex[57395]))
      unknown call_tmp[560395] "expr temp" "maybe param" "maybe type" "temp"
      (560398 'move' call_tmp[560395](57434 call + dim[57398] 1))
      unknown call_tmp[560400] "expr temp" "maybe param" "maybe type" "temp"
      (560403 'move' call_tmp[560400](57436 call _toFollowerZipInternal x[57390] leaderIndex[57395] call_tmp[560395]))
      unknown call_tmp[560405] "expr temp" "maybe param" "maybe type" "temp"
      (560408 'move' call_tmp[560405](57439 call _build_tuple call_tmp[560390](57437 'expand_tuple' call_tmp[560400])))
      (458981 'move' ret[458971](458980 'deref' call_tmp[560405]))
      gotoReturn _end__toFollowerZipInternal[458969] _end__toFollowerZipInternal[458969]
    }
    label _end__toFollowerZipInternal[458969]
    (458973 return ret[458971])
  }
  function _toFastFollower[57458](arg iterator[57455]:_iteratorClass[197](?), arg leaderIndex[57460]:_any[170](?), arg fast[57463]:bool[10]) : _unknown[43] "inline" "no implicit copy" "fn returns iterator"
  {
    unknown ret[458987] "RVV" "temp"
    unknown call_tmp[560410] "expr temp" "maybe param" "maybe type" "temp"
    (560413 'move' call_tmp[560410](57472 'to follower' iterator[57455] leaderIndex[57460] 1))
    unknown call_tmp[560415] "expr temp" "maybe param" "maybe type" "temp"
    (560418 'move' call_tmp[560415](57474 call chpl__autoCopy call_tmp[560410]))
    (458992 'move' ret[458987](458991 'deref' call_tmp[560415]))
    (458989 return ret[458987])
  }
  function _toFastFollower[57486](arg ir[57483]:_iteratorRecord[194](?), arg leaderIndex[57488]:_any[170](?), arg fast[57491]:bool[10]) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[458996] "RVV" "temp"
    unknown call_tmp[560420] "maybe param" "maybe type" "temp"
    (560423 'move' call_tmp[560420](57497 call _getIterator ir[57483]))
    unknown ic[57498] "insert auto destroy" "no copy"
    (489428 'init var' ic[57498] call_tmp[560420])
    unknown call_tmp[560425] "maybe param" "maybe type" "temp"
    (560428 'move' call_tmp[560425](57508 call _toFastFollower ic[57498] leaderIndex[57488](fast = 1)))
    unknown follower[57509] "insert auto destroy" "no copy"
    (489430 'init var' follower[57509] call_tmp[560425])
    (57515 call _freeIterator ic[57498])
    (459001 'move' ret[458996](459000 'deref' follower[57509]))
    (458998 return ret[458996])
  }
  function _toFastFollower[57526](arg x[57524]:_any[170](?), arg leaderIndex[57528]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[459005] "RVV" "temp"
    unknown call_tmp[560430] "expr temp" "maybe param" "maybe type" "temp"
    (560433 'move' call_tmp[560430](57533 call chpl__staticFastFollowCheck x[57524]))
    unknown call_tmp[560435] "expr temp" "maybe param" "maybe type" "temp"
    (560438 'move' call_tmp[560435](57556 call _cond_test call_tmp[560430]))
    if call_tmp[560435]
    {
      unknown call_tmp[560440] "expr temp" "maybe param" "maybe type" "temp"
      (560443 'move' call_tmp[560440](57538 call _getIterator x[57524]))
      unknown call_tmp[560445] "expr temp" "maybe param" "maybe type" "temp"
      (560448 'move' call_tmp[560445](57543 call _toFastFollower call_tmp[560440] leaderIndex[57528](fast = 1)))
      (459010 'move' ret[459005](459009 'deref' call_tmp[560445]))
      gotoReturn _end__toFastFollower[459003] _end__toFastFollower[459003]
    }
    {
      unknown call_tmp[560450] "expr temp" "maybe param" "maybe type" "temp"
      (560453 'move' call_tmp[560450](57550 call _getIterator x[57524]))
      unknown call_tmp[560455] "expr temp" "maybe param" "maybe type" "temp"
      (560458 'move' call_tmp[560455](57553 call _toFollower call_tmp[560450] leaderIndex[57528]))
      (459015 'move' ret[459005](459014 'deref' call_tmp[560455]))
      gotoReturn _end__toFastFollower[459003] _end__toFastFollower[459003]
    }
    label _end__toFastFollower[459003]
    (459007 return ret[459005])
  }
  function _toFastFollowerZip[57569](arg x[57567]:_any[170](?), arg leaderIndex[57571]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[459021] "RVV" "temp"
    unknown call_tmp[560460] "expr temp" "maybe param" "maybe type" "temp"
    (560463 'move' call_tmp[560460](57577 call _toFastFollower x[57567] leaderIndex[57571]))
    (459026 'move' ret[459021](459025 'deref' call_tmp[560460]))
    (459023 return ret[459021])
  }
  function _toFastFollowerZip[57589](arg x[57586]:_tuple[58502](?), arg leaderIndex[57591]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[459030] "RVV" "temp"
    unknown call_tmp[560465] "expr temp" "maybe param" "maybe type" "temp"
    (560468 'move' call_tmp[560465](57598 call _toFastFollowerZip x[57586] leaderIndex[57591] 1))
    (459035 'move' ret[459030](459034 'deref' call_tmp[560465]))
    (459032 return ret[459030])
  }
  function _toFastFollowerZip[57610](arg x[57607]:_tuple[58502](?), arg leaderIndex[57612]:_any[170](?), param arg dim[57615]:int(64)[13]) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ret[459039] "RVV" "temp"
    unknown call_tmp[560472] "expr temp" "maybe param" "maybe type" "temp"
    (560475 'move' call_tmp[560472](57620 call size _mt[232] x[57607]))
    unknown call_tmp[560477] "expr temp" "maybe param" "maybe type" "temp"
    (560480 'move' call_tmp[560477](57624 call - call_tmp[560472] 1))
    unknown call_tmp[560482] "expr temp" "maybe param" "maybe type" "temp"
    (560485 'move' call_tmp[560482](57626 call == dim[57615] call_tmp[560477]))
    unknown call_tmp[560487] "expr temp" "maybe param" "maybe type" "temp"
    (560490 'move' call_tmp[560487](57675 call _cond_test call_tmp[560482]))
    if call_tmp[560487]
    {
      unknown call_tmp[560492] "expr temp" "maybe param" "maybe type" "temp"
      (560495 'move' call_tmp[560492](57632 call x[57607] dim[57615]))
      unknown call_tmp[560497] "expr temp" "maybe param" "maybe type" "temp"
      (560500 'move' call_tmp[560497](57635 call _toFastFollowerZip call_tmp[560492] leaderIndex[57612]))
      unknown call_tmp[560502] "expr temp" "maybe param" "maybe type" "temp"
      (560505 'move' call_tmp[560502](57640 call + dim[57615] 1))
      unknown call_tmp[560507] "expr temp" "maybe param" "maybe type" "temp"
      (560510 'move' call_tmp[560507](57643 call x[57607] call_tmp[560502]))
      unknown call_tmp[560512] "expr temp" "maybe param" "maybe type" "temp"
      (560515 'move' call_tmp[560512](57646 call _toFastFollowerZip call_tmp[560507] leaderIndex[57612]))
      unknown call_tmp[560517] "expr temp" "maybe param" "maybe type" "temp"
      (560520 'move' call_tmp[560517](57648 call _build_tuple call_tmp[560497] call_tmp[560512]))
      (459044 'move' ret[459039](459043 'deref' call_tmp[560517]))
      gotoReturn _end__toFastFollowerZip[459037] _end__toFastFollowerZip[459037]
    }
    {
      unknown call_tmp[560522] "expr temp" "maybe param" "maybe type" "temp"
      (560525 'move' call_tmp[560522](57656 call x[57607] dim[57615]))
      unknown call_tmp[560527] "expr temp" "maybe param" "maybe type" "temp"
      (560530 'move' call_tmp[560527](57659 call _toFastFollowerZip call_tmp[560522] leaderIndex[57612]))
      unknown call_tmp[560532] "expr temp" "maybe param" "maybe type" "temp"
      (560535 'move' call_tmp[560532](57666 call + dim[57615] 1))
      unknown call_tmp[560537] "expr temp" "maybe param" "maybe type" "temp"
      (560540 'move' call_tmp[560537](57668 call _toFastFollowerZip x[57607] leaderIndex[57612] call_tmp[560532]))
      unknown call_tmp[560542] "expr temp" "maybe param" "maybe type" "temp"
      (560545 'move' call_tmp[560542](57671 call _build_tuple call_tmp[560527](57669 'expand_tuple' call_tmp[560537])))
      (459049 'move' ret[459039](459048 'deref' call_tmp[560542]))
      gotoReturn _end__toFastFollowerZip[459037] _end__toFastFollowerZip[459037]
    }
    label _end__toFastFollowerZip[459037]
    (459041 return ret[459039])
  }
  function singleValIter[57690](arg iterables[57687]:_tuple[58502](?)) param : _unknown[43] "no doc"
  {
    unknown ret[459055] "RVV" "param" "temp"
    unknown tmp[394125] "maybe param" "temp"
    unknown call_tmp[560549] "expr temp" "maybe param" "maybe type" "temp"
    (560552 'move' call_tmp[560549](57693 call size _mt[232] iterables[57687]))
    (394136 'move' tmp[394125](57697 call == call_tmp[560549] 1))
    unknown call_tmp[560554] "expr temp" "maybe param" "maybe type" "temp"
    (560557 'move' call_tmp[560554](394138 call _cond_invalid tmp[394125]))
    if call_tmp[560554]
    {
      (394141 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503545] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503546] "maybe param" "temp"
    unknown call_tmp[560559] "expr temp" "maybe param" "maybe type" "temp"
    (560562 'move' call_tmp[560559](394126 call isTrue tmp[394125]))
    (503551 'move' tmp[503546](503549 call _cond_test call_tmp[560559]))
    if tmp[503546]
    {
      unknown tmp[503553] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560564] "expr temp" "maybe param" "maybe type" "temp"
      (560567 'move' call_tmp[560564](57704 call iterables[57687] 1))
      unknown call_tmp[560569] "expr temp" "maybe param" "maybe type" "temp"
      (560572 'move' call_tmp[560569](57706 call _getIterator call_tmp[560564]))
      unknown call_tmp[560574] "expr temp" "maybe param" "maybe type" "temp"
      (560577 'move' call_tmp[560574](57708 call isRefIter call_tmp[560569]))
      unknown call_tmp[560579] "expr temp" "maybe param" "maybe type" "temp"
      (560582 'move' call_tmp[560579](57709 call ! call_tmp[560574]))
      (503555 'move' tmp[503553](394129 call isTrue call_tmp[560579]))
      (503560 'move' tmp[503545](503557 '_paramFoldLogical' tmp[503546] tmp[503553]))
    }
    {
      (503565 'move' tmp[503545](503562 '_paramFoldLogical' tmp[503546] 0))
    }
    (459060 'move' ret[459055](459059 'deref' tmp[503545]))
    (459057 return ret[459055])
  }
  function singleRefIter[57724](arg iterables[57721]:_tuple[58502](?)) param : _unknown[43] "no doc"
  {
    unknown ret[459064] "RVV" "param" "temp"
    unknown tmp[394146] "maybe param" "temp"
    unknown call_tmp[560586] "expr temp" "maybe param" "maybe type" "temp"
    (560589 'move' call_tmp[560586](57727 call size _mt[232] iterables[57721]))
    (394157 'move' tmp[394146](57731 call == call_tmp[560586] 1))
    unknown call_tmp[560591] "expr temp" "maybe param" "maybe type" "temp"
    (560594 'move' call_tmp[560591](394159 call _cond_invalid tmp[394146]))
    if call_tmp[560591]
    {
      (394162 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503572] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503573] "maybe param" "temp"
    unknown call_tmp[560596] "expr temp" "maybe param" "maybe type" "temp"
    (560599 'move' call_tmp[560596](394147 call isTrue tmp[394146]))
    (503578 'move' tmp[503573](503576 call _cond_test call_tmp[560596]))
    if tmp[503573]
    {
      unknown tmp[503580] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560601] "expr temp" "maybe param" "maybe type" "temp"
      (560604 'move' call_tmp[560601](57738 call iterables[57721] 1))
      unknown call_tmp[560606] "expr temp" "maybe param" "maybe type" "temp"
      (560609 'move' call_tmp[560606](57740 call _getIterator call_tmp[560601]))
      unknown call_tmp[560611] "expr temp" "maybe param" "maybe type" "temp"
      (560614 'move' call_tmp[560611](57742 call isRefIter call_tmp[560606]))
      (503582 'move' tmp[503580](394150 call isTrue call_tmp[560611]))
      (503587 'move' tmp[503572](503584 '_paramFoldLogical' tmp[503573] tmp[503580]))
    }
    {
      (503592 'move' tmp[503572](503589 '_paramFoldLogical' tmp[503573] 0))
    }
    (459069 'move' ret[459064](459068 'deref' tmp[503572]))
    (459066 return ret[459064])
  }
  function vectorizeOnly[57756](arg iterables[57753]:_any[170](?) ...) : _unknown[43] "iterator fn" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[459073] "RVV" "temp"
    {
      unknown _indexOfInterest[57770] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57771] "expr temp" "temp"
      unknown call_tmp[560616] "expr temp" "maybe param" "maybe type" "temp"
      (560619 'move' call_tmp[560616](57766 call iterables[57753] 1))
      (57780 'move' _iterator[57771](57778 call _getIterator call_tmp[560616]))
      Defer
      {
        {
          (57797 call _freeIterator _iterator[57771])
        }
      }
      { scopeless type
        (57786 'move' _indexOfInterest[57770](57783 call iteratorIndex _iterator[57771]))
      }
      ForLoop
      {
        unknown i[57790] "index var" "insert auto destroy"
        (57792 'move' i[57790] _indexOfInterest[57770])
        unknown yret[459077] "YVV" "temp"
        (459080 'move' yret[459077](459079 'deref' i[57790]))
        (459082 yield yret[459077])
        label _continueLabel[57775]
        _indexOfInterest[57770]
        _iterator[57771]
      }
      label _breakLabel[57776]
    }
    (459075 return ret[459073])
  }
  where {
    (57761 call singleValIter iterables[57753])
  }
  function vectorizeOnly[57814](arg iterables[57811]:_any[170](?) ...) ref : _unknown[43] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[459086] "RVV" "temp"
    {
      unknown _indexOfInterest[57828] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57829] "expr temp" "temp"
      unknown call_tmp[560621] "expr temp" "maybe param" "maybe type" "temp"
      (560624 'move' call_tmp[560621](57824 call iterables[57811] 1))
      (57838 'move' _iterator[57829](57836 call _getIterator call_tmp[560621]))
      Defer
      {
        {
          (57855 call _freeIterator _iterator[57829])
        }
      }
      { scopeless type
        (57844 'move' _indexOfInterest[57828](57841 call iteratorIndex _iterator[57829]))
      }
      ForLoop
      {
        unknown i[57848] "index var" "insert auto destroy"
        (57850 'move' i[57848] _indexOfInterest[57828])
        unknown yret[459090] "YVV" "temp"
        (459093 'move' yret[459090](459092 'addr of' i[57848]))
        (459095 yield yret[459090])
        label _continueLabel[57833]
        _indexOfInterest[57828]
        _iterator[57829]
      }
      label _breakLabel[57834]
    }
    (459088 return ret[459086])
  }
  where {
    (57819 call singleRefIter iterables[57811])
  }
  function vectorizeOnly[57873](arg iterables[57870]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    unknown ret[459099] "RVV" "temp"
    {
      unknown _indexOfInterest[57887] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57888] "expr temp" "temp"
      (57896 'move' _iterator[57888](57883 call _getIteratorZip iterables[57870]))
      Defer
      {
        {
          (57912 call _freeIterator _iterator[57888])
        }
      }
      { scopeless type
        (57901 'move' _indexOfInterest[57887](57898 call iteratorIndex _iterator[57888]))
      }
      ForLoop
      {
        unknown i[57905] "index var" "insert auto destroy"
        (57907 'move' i[57905] _indexOfInterest[57887])
        unknown yret[459103] "YVV" "temp"
        (459106 'move' yret[459103](459105 'deref' i[57905]))
        (459108 yield yret[459103])
        label _continueLabel[57892]
        _indexOfInterest[57887]
        _iterator[57888]
      }
      label _breakLabel[57893]
    }
    (459101 return ret[459099])
  }
  where {
    (57877 call > numiterables[57868] 1)
  }
  function vectorizeOnly[57929](param arg tag[57926]:iterKind[697], arg iterables[57932]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459112] "RVV" "temp"
    {
      unknown _indexOfInterest[57958] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57959] "expr temp" "temp"
      unknown call_tmp[560626] "expr temp" "maybe param" "maybe type" "temp"
      (560629 'move' call_tmp[560626](57954 call iterables[57932] 1))
      (57968 'move' _iterator[57959](57966 call _getIterator call_tmp[560626]))
      Defer
      {
        {
          (57985 call _freeIterator _iterator[57959])
        }
      }
      { scopeless type
        (57974 'move' _indexOfInterest[57958](57971 call iteratorIndex _iterator[57959]))
      }
      ForLoop
      {
        unknown i[57978] "index var" "insert auto destroy"
        (57980 'move' i[57978] _indexOfInterest[57958])
        unknown yret[459116] "YVV" "temp"
        (459119 'move' yret[459116](459118 'deref' i[57978]))
        (459121 yield yret[459116])
        label _continueLabel[57963]
        _indexOfInterest[57958]
        _iterator[57959]
      }
      label _breakLabel[57964]
    }
    (459114 return ret[459112])
  }
  where {
    unknown tmp[394167] "maybe param" "temp"
    (394178 'move' tmp[394167](57942 call == tag[57926] standalone[695]))
    unknown call_tmp[560631] "expr temp" "maybe param" "maybe type" "temp"
    (560634 'move' call_tmp[560631](394180 call _cond_invalid tmp[394167]))
    if call_tmp[560631]
    {
      (394183 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503599] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503600] "maybe param" "temp"
    unknown call_tmp[560636] "expr temp" "maybe param" "maybe type" "temp"
    (560639 'move' call_tmp[560636](394168 call isTrue tmp[394167]))
    (503605 'move' tmp[503600](503603 call _cond_test call_tmp[560636]))
    if tmp[503600]
    {
      unknown tmp[503607] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560641] "expr temp" "maybe param" "maybe type" "temp"
      (560644 'move' call_tmp[560641](57947 call singleValIter iterables[57932]))
      (503609 'move' tmp[503607](394171 call isTrue call_tmp[560641]))
      (503614 'move' tmp[503599](503611 '_paramFoldLogical' tmp[503600] tmp[503607]))
    }
    {
      (503619 'move' tmp[503599](503616 '_paramFoldLogical' tmp[503600] 0))
    }
    (691775 call _statementLevelSymbol tmp[503599])
  }
  function vectorizeOnly[58002](param arg tag[57999]:iterKind[697], arg iterables[58005]:_any[170](?) ...) ref : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459125] "RVV" "temp"
    {
      unknown _indexOfInterest[58029] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58030] "expr temp" "temp"
      unknown call_tmp[560646] "expr temp" "maybe param" "maybe type" "temp"
      (560649 'move' call_tmp[560646](58025 call iterables[58005] 1))
      (58039 'move' _iterator[58030](58037 call _getIterator call_tmp[560646]))
      Defer
      {
        {
          (58056 call _freeIterator _iterator[58030])
        }
      }
      { scopeless type
        (58045 'move' _indexOfInterest[58029](58042 call iteratorIndex _iterator[58030]))
      }
      ForLoop
      {
        unknown i[58049] "index var" "insert auto destroy"
        (58051 'move' i[58049] _indexOfInterest[58029])
        unknown yret[459129] "YVV" "temp"
        (459132 'move' yret[459129](459131 'addr of' i[58049]))
        (459134 yield yret[459129])
        label _continueLabel[58034]
        _indexOfInterest[58029]
        _iterator[58030]
      }
      label _breakLabel[58035]
    }
    (459127 return ret[459125])
  }
  where {
    unknown tmp[394188] "maybe param" "temp"
    (394199 'move' tmp[394188](58013 call == tag[57999] standalone[695]))
    unknown call_tmp[560651] "expr temp" "maybe param" "maybe type" "temp"
    (560654 'move' call_tmp[560651](394201 call _cond_invalid tmp[394188]))
    if call_tmp[560651]
    {
      (394204 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503626] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503627] "maybe param" "temp"
    unknown call_tmp[560656] "expr temp" "maybe param" "maybe type" "temp"
    (560659 'move' call_tmp[560656](394189 call isTrue tmp[394188]))
    (503632 'move' tmp[503627](503630 call _cond_test call_tmp[560656]))
    if tmp[503627]
    {
      unknown tmp[503634] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560661] "expr temp" "maybe param" "maybe type" "temp"
      (560664 'move' call_tmp[560661](58018 call singleRefIter iterables[58005]))
      (503636 'move' tmp[503634](394192 call isTrue call_tmp[560661]))
      (503641 'move' tmp[503626](503638 '_paramFoldLogical' tmp[503627] tmp[503634]))
    }
    {
      (503646 'move' tmp[503626](503643 '_paramFoldLogical' tmp[503627] 0))
    }
    (691777 call _statementLevelSymbol tmp[503626])
  }
  function vectorizeOnly[58073](param arg tag[58070]:iterKind[697], arg iterables[58077]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459138] "RVV" "temp"
    {
      unknown _indexOfInterest[58101] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58102] "expr temp" "temp"
      (58110 'move' _iterator[58102](58097 call _getIteratorZip iterables[58077]))
      Defer
      {
        {
          (58126 call _freeIterator _iterator[58102])
        }
      }
      { scopeless type
        (58115 'move' _indexOfInterest[58101](58112 call iteratorIndex _iterator[58102]))
      }
      ForLoop
      {
        unknown i[58119] "index var" "insert auto destroy"
        (58121 'move' i[58119] _indexOfInterest[58101])
        unknown yret[459142] "YVV" "temp"
        (459145 'move' yret[459142](459144 'deref' i[58119]))
        (459147 yield yret[459142])
        label _continueLabel[58106]
        _indexOfInterest[58101]
        _iterator[58102]
      }
      label _breakLabel[58107]
    }
    (459140 return ret[459138])
  }
  where {
    unknown tmp[394209] "maybe param" "temp"
    (394220 'move' tmp[394209](58085 call == tag[58070] standalone[695]))
    unknown call_tmp[560666] "expr temp" "maybe param" "maybe type" "temp"
    (560669 'move' call_tmp[560666](394222 call _cond_invalid tmp[394209]))
    if call_tmp[560666]
    {
      (394225 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503653] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503654] "maybe param" "temp"
    unknown call_tmp[560671] "expr temp" "maybe param" "maybe type" "temp"
    (560674 'move' call_tmp[560671](394210 call isTrue tmp[394209]))
    (503659 'move' tmp[503654](503657 call _cond_test call_tmp[560671]))
    if tmp[503654]
    {
      unknown tmp[503661] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560676] "expr temp" "maybe param" "maybe type" "temp"
      (560679 'move' call_tmp[560676](58089 call > numiterables[58075] 1))
      (503663 'move' tmp[503661](394213 call isTrue call_tmp[560676]))
      (503668 'move' tmp[503653](503665 '_paramFoldLogical' tmp[503654] tmp[503661]))
    }
    {
      (503673 'move' tmp[503653](503670 '_paramFoldLogical' tmp[503654] 0))
    }
    (691779 call _statementLevelSymbol tmp[503653])
  }
  function vectorizeOnly[58143](param arg tag[58140]:iterKind[697], arg iterables[58146]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459151] "RVV" "temp"
    unknown yret[459155] "YVV" "temp"
    unknown call_tmp[560681] "expr temp" "maybe param" "maybe type" "temp"
    (560684 'move' call_tmp[560681](58167 call iterables[58146] 1))
    (459158 'move' yret[459155](459157 'deref' call_tmp[560681]))
    (459160 yield yret[459155])
    (459153 return ret[459151])
  }
  where {
    unknown tmp[394230] "maybe param" "temp"
    (394241 'move' tmp[394230](58156 call == tag[58140] leader[691]))
    unknown call_tmp[560686] "expr temp" "maybe param" "maybe type" "temp"
    (560689 'move' call_tmp[560686](394243 call _cond_invalid tmp[394230]))
    if call_tmp[560686]
    {
      (394246 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503680] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503681] "maybe param" "temp"
    unknown call_tmp[560691] "expr temp" "maybe param" "maybe type" "temp"
    (560694 'move' call_tmp[560691](394231 call isTrue tmp[394230]))
    (503686 'move' tmp[503681](503684 call _cond_test call_tmp[560691]))
    if tmp[503681]
    {
      unknown tmp[503688] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560696] "expr temp" "maybe param" "maybe type" "temp"
      (560699 'move' call_tmp[560696](58161 call singleValIter iterables[58146]))
      (503690 'move' tmp[503688](394234 call isTrue call_tmp[560696]))
      (503695 'move' tmp[503680](503692 '_paramFoldLogical' tmp[503681] tmp[503688]))
    }
    {
      (503700 'move' tmp[503680](503697 '_paramFoldLogical' tmp[503681] 0))
    }
    (691781 call _statementLevelSymbol tmp[503680])
  }
  function vectorizeOnly[58180](param arg tag[58177]:iterKind[697], arg iterables[58183]:_any[170](?) ...) ref : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459164] "RVV" "temp"
    unknown yret[459168] "YVV" "temp"
    unknown call_tmp[560701] "expr temp" "maybe param" "maybe type" "temp"
    (560704 'move' call_tmp[560701](58202 call iterables[58183] 1))
    (459171 'move' yret[459168](459170 'addr of' call_tmp[560701]))
    (459173 yield yret[459168])
    (459166 return ret[459164])
  }
  where {
    unknown tmp[394251] "maybe param" "temp"
    (394262 'move' tmp[394251](58191 call == tag[58177] leader[691]))
    unknown call_tmp[560706] "expr temp" "maybe param" "maybe type" "temp"
    (560709 'move' call_tmp[560706](394264 call _cond_invalid tmp[394251]))
    if call_tmp[560706]
    {
      (394267 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503707] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503708] "maybe param" "temp"
    unknown call_tmp[560711] "expr temp" "maybe param" "maybe type" "temp"
    (560714 'move' call_tmp[560711](394252 call isTrue tmp[394251]))
    (503713 'move' tmp[503708](503711 call _cond_test call_tmp[560711]))
    if tmp[503708]
    {
      unknown tmp[503715] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560716] "expr temp" "maybe param" "maybe type" "temp"
      (560719 'move' call_tmp[560716](58196 call singleRefIter iterables[58183]))
      (503717 'move' tmp[503715](394255 call isTrue call_tmp[560716]))
      (503722 'move' tmp[503707](503719 '_paramFoldLogical' tmp[503708] tmp[503715]))
    }
    {
      (503727 'move' tmp[503707](503724 '_paramFoldLogical' tmp[503708] 0))
    }
    (691783 call _statementLevelSymbol tmp[503707])
  }
  function vectorizeOnly[58215](param arg tag[58212]:iterKind[697], arg iterables[58219]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459177] "RVV" "temp"
    unknown yret[459181] "YVV" "temp"
    (459184 'move' yret[459181](459183 'deref' iterables[58219]))
    (459186 yield yret[459181])
    (459179 return ret[459177])
  }
  where {
    unknown tmp[394272] "maybe param" "temp"
    (394283 'move' tmp[394272](58227 call == tag[58212] leader[691]))
    unknown call_tmp[560721] "expr temp" "maybe param" "maybe type" "temp"
    (560724 'move' call_tmp[560721](394285 call _cond_invalid tmp[394272]))
    if call_tmp[560721]
    {
      (394288 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503734] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503735] "maybe param" "temp"
    unknown call_tmp[560726] "expr temp" "maybe param" "maybe type" "temp"
    (560729 'move' call_tmp[560726](394273 call isTrue tmp[394272]))
    (503740 'move' tmp[503735](503738 call _cond_test call_tmp[560726]))
    if tmp[503735]
    {
      unknown tmp[503742] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560731] "expr temp" "maybe param" "maybe type" "temp"
      (560734 'move' call_tmp[560731](58231 call > numiterables[58217] 1))
      (503744 'move' tmp[503742](394276 call isTrue call_tmp[560731]))
      (503749 'move' tmp[503734](503746 '_paramFoldLogical' tmp[503735] tmp[503742]))
    }
    {
      (503754 'move' tmp[503734](503751 '_paramFoldLogical' tmp[503735] 0))
    }
    (691785 call _statementLevelSymbol tmp[503734])
  }
  function vectorizeOnly[58248](param arg tag[58245]:iterKind[697], arg followThis[58250]:_any[170](?), arg iterables[58253]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459190] "RVV" "temp"
    {
      unknown _indexOfInterest[58279] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58280] "expr temp" "temp"
      unknown call_tmp[560736] "expr temp" "maybe param" "maybe type" "temp"
      (560739 'move' call_tmp[560736](58275 call iterables[58253] 1))
      (58289 'move' _iterator[58280](58287 call _getIterator call_tmp[560736]))
      Defer
      {
        {
          (58306 call _freeIterator _iterator[58280])
        }
      }
      { scopeless type
        (58295 'move' _indexOfInterest[58279](58292 call iteratorIndex _iterator[58280]))
      }
      ForLoop
      {
        unknown i[58299] "index var" "insert auto destroy"
        (58301 'move' i[58299] _indexOfInterest[58279])
        unknown yret[459194] "YVV" "temp"
        (459197 'move' yret[459194](459196 'deref' i[58299]))
        (459199 yield yret[459194])
        label _continueLabel[58284]
        _indexOfInterest[58279]
        _iterator[58280]
      }
      label _breakLabel[58285]
    }
    (459192 return ret[459190])
  }
  where {
    unknown tmp[394293] "maybe param" "temp"
    (394304 'move' tmp[394293](58263 call == tag[58245] follower[693]))
    unknown call_tmp[560741] "expr temp" "maybe param" "maybe type" "temp"
    (560744 'move' call_tmp[560741](394306 call _cond_invalid tmp[394293]))
    if call_tmp[560741]
    {
      (394309 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503761] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503762] "maybe param" "temp"
    unknown call_tmp[560746] "expr temp" "maybe param" "maybe type" "temp"
    (560749 'move' call_tmp[560746](394294 call isTrue tmp[394293]))
    (503767 'move' tmp[503762](503765 call _cond_test call_tmp[560746]))
    if tmp[503762]
    {
      unknown tmp[503769] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560751] "expr temp" "maybe param" "maybe type" "temp"
      (560754 'move' call_tmp[560751](58268 call singleValIter iterables[58253]))
      (503771 'move' tmp[503769](394297 call isTrue call_tmp[560751]))
      (503776 'move' tmp[503761](503773 '_paramFoldLogical' tmp[503762] tmp[503769]))
    }
    {
      (503781 'move' tmp[503761](503778 '_paramFoldLogical' tmp[503762] 0))
    }
    (691787 call _statementLevelSymbol tmp[503761])
  }
  function vectorizeOnly[58323](param arg tag[58320]:iterKind[697], arg followThis[58325]:_any[170](?), arg iterables[58328]:_any[170](?) ...) ref : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459203] "RVV" "temp"
    {
      unknown _indexOfInterest[58352] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58353] "expr temp" "temp"
      unknown call_tmp[560756] "expr temp" "maybe param" "maybe type" "temp"
      (560759 'move' call_tmp[560756](58348 call iterables[58328] 1))
      (58362 'move' _iterator[58353](58360 call _getIterator call_tmp[560756]))
      Defer
      {
        {
          (58379 call _freeIterator _iterator[58353])
        }
      }
      { scopeless type
        (58368 'move' _indexOfInterest[58352](58365 call iteratorIndex _iterator[58353]))
      }
      ForLoop
      {
        unknown i[58372] "index var" "insert auto destroy"
        (58374 'move' i[58372] _indexOfInterest[58352])
        unknown yret[459207] "YVV" "temp"
        (459210 'move' yret[459207](459209 'addr of' i[58372]))
        (459212 yield yret[459207])
        label _continueLabel[58357]
        _indexOfInterest[58352]
        _iterator[58353]
      }
      label _breakLabel[58358]
    }
    (459205 return ret[459203])
  }
  where {
    unknown tmp[394314] "maybe param" "temp"
    (394325 'move' tmp[394314](58336 call == tag[58320] follower[693]))
    unknown call_tmp[560761] "expr temp" "maybe param" "maybe type" "temp"
    (560764 'move' call_tmp[560761](394327 call _cond_invalid tmp[394314]))
    if call_tmp[560761]
    {
      (394330 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503788] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503789] "maybe param" "temp"
    unknown call_tmp[560766] "expr temp" "maybe param" "maybe type" "temp"
    (560769 'move' call_tmp[560766](394315 call isTrue tmp[394314]))
    (503794 'move' tmp[503789](503792 call _cond_test call_tmp[560766]))
    if tmp[503789]
    {
      unknown tmp[503796] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560771] "expr temp" "maybe param" "maybe type" "temp"
      (560774 'move' call_tmp[560771](58341 call singleRefIter iterables[58328]))
      (503798 'move' tmp[503796](394318 call isTrue call_tmp[560771]))
      (503803 'move' tmp[503788](503800 '_paramFoldLogical' tmp[503789] tmp[503796]))
    }
    {
      (503808 'move' tmp[503788](503805 '_paramFoldLogical' tmp[503789] 0))
    }
    (691789 call _statementLevelSymbol tmp[503788])
  }
  function vectorizeOnly[58396](param arg tag[58393]:iterKind[697], arg followThis[58398]:_any[170](?), arg iterables[58402]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    unknown ret[459216] "RVV" "temp"
    {
      unknown _indexOfInterest[58426] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58427] "expr temp" "temp"
      (58435 'move' _iterator[58427](58422 call _getIteratorZip iterables[58402]))
      Defer
      {
        {
          (58451 call _freeIterator _iterator[58427])
        }
      }
      { scopeless type
        (58440 'move' _indexOfInterest[58426](58437 call iteratorIndex _iterator[58427]))
      }
      ForLoop
      {
        unknown i[58444] "index var" "insert auto destroy"
        (58446 'move' i[58444] _indexOfInterest[58426])
        unknown yret[459220] "YVV" "temp"
        (459223 'move' yret[459220](459222 'deref' i[58444]))
        (459225 yield yret[459220])
        label _continueLabel[58431]
        _indexOfInterest[58426]
        _iterator[58427]
      }
      label _breakLabel[58432]
    }
    (459218 return ret[459216])
  }
  where {
    unknown tmp[394335] "maybe param" "temp"
    (394346 'move' tmp[394335](58410 call == tag[58393] follower[693]))
    unknown call_tmp[560776] "expr temp" "maybe param" "maybe type" "temp"
    (560779 'move' call_tmp[560776](394348 call _cond_invalid tmp[394335]))
    if call_tmp[560776]
    {
      (394351 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503815] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503816] "maybe param" "temp"
    unknown call_tmp[560781] "expr temp" "maybe param" "maybe type" "temp"
    (560784 'move' call_tmp[560781](394336 call isTrue tmp[394335]))
    (503821 'move' tmp[503816](503819 call _cond_test call_tmp[560781]))
    if tmp[503816]
    {
      unknown tmp[503823] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[560786] "expr temp" "maybe param" "maybe type" "temp"
      (560789 'move' call_tmp[560786](58414 call > numiterables[58400] 1))
      (503825 'move' tmp[503823](394339 call isTrue call_tmp[560786]))
      (503830 'move' tmp[503815](503827 '_paramFoldLogical' tmp[503816] tmp[503823]))
    }
    {
      (503835 'move' tmp[503815](503832 '_paramFoldLogical' tmp[503816] 0))
    }
    (691791 call _statementLevelSymbol tmp[503815])
  }
  (329330 'used modules list'(54782 'use' ChapelStandard[19734])(54787 'use' Reflection[211223]))
}