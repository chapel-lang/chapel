AST dump for ChapelIteratorSupport after pass scopeResolve.
Module use list: ChapelStandard Reflection 

{
  function iteratorIndex[54795](arg ic[54792] :
  _iteratorClass[197](?)) : _unknown[43] "allow ref" "no doc" "fn returns iterator"
  {
    (54804 call(54800 call . ic[54792] c"advance"))
    (54815 return(54814 call(54810 call . ic[54792] c"getValue")))
  }
  function iteratorIndex[54825](arg t[54822] :
  _tuple[58502](?)) : _unknown[43] "expand tuples with values" "no doc" "fn returns iterator"
  {
    function iteratorIndexHelp[54833](arg t[54830] :
    _tuple[58502](?), param arg dim[54836] :
    int(64)[13]) : _unknown[43] "expand tuples with values"
    {
      if(54879 call _cond_test(54844 call == dim[54836](54841 call . t[54830] c"size")))
      {
        (54856 return(54855 call _build_tuple_always_allow_ref(54853 call iteratorIndex(54851 call t[54830] dim[54836]))))
      }
      {
        (54877 return(54876 call _build_tuple_always_allow_ref(54865 call iteratorIndex(54863 call t[54830] dim[54836]))(54875 'expand_tuple'(54874 call iteratorIndexHelp t[54830](54872 call + dim[54836] 1)))))
      }
    }
    (54894 return(54893 call iteratorIndexHelp t[54822] 1))
  }
  function iteratorIndexType[54902](arg x[54900]:_any[170](?)) type : _unknown[43] "no doc"
  {
    if(54976 call _cond_test(54907 call isArray x[54900]))
    {
      (54912 return(54909 call . x[54900] c"eltType"))
    }
    {
      if(54972 call _cond_test(54918 call isDomain x[54900]))
      {
        (54945 return(54942 IfExpr (54926 call ==(54922 call . x[54900] c"rank") 1) then
        { scopeless
          (54929 call . x[54900] c"idxType")
        } else
        { scopeless
          (54940 call *(54933 call . x[54900] c"rank")(54937 call . x[54900] c"idxType"))
        } ))
      }
      {
        unknown ic[54952] "no copy"(54951 call _getIterator x[54900])
        unknown i[54960] "no copy"(54959 call iteratorIndex ic[54952])
        (54966 call _freeIterator ic[54952])
        (54970 return(54969 'typeof' i[54960]))
      }
    }
  }
  function iteratorIndexTypeZip[54990](arg xs[54987]:_any[170](?) ...) type : _unknown[43] "no doc"
  {
    function iteratorIndexTypeZipHelp[54996](param arg dim[54994]:_any[170](?)) type : _unknown[43]
    {
      if(55036 call _cond_test(55003 call == dim[54994](55000 call . xs[54987] c"size")))
      {
        (55014 return(55012 call _build_tuple(55011 call iteratorIndexType(55009 call xs[54987] dim[54994]))))
      }
      {
        (55034 return(55032 call _build_tuple(55022 call iteratorIndexType(55020 call xs[54987] dim[54994]))(55030 'expand_tuple'(55029 call iteratorIndexTypeZipHelp(55026 call + dim[54994] 1)))))
      }
    }
    (55050 return(55049 call iteratorIndexTypeZipHelp 1))
  }
  function iteratorToArrayElementType[55060](arg t[55057] :
  _iteratorRecord[194](?)) type : _unknown[43]
  {
    (55087 return(55086 call chpl__unref(55084 call chpl_buildStandInRTT(55082 'scalar promotion type' t[55057]))))
  }
  function chpl_buildStandInRTT[55098](arg domType[55095] :
  _domain[123390](?)) type : _unknown[43]
  {
    unknown instanceObj[55135](55134 'static field type' domType[55095] "_instance")
    (55143 return(55142 call chpl_buildStandInRTT instanceObj[55135]))
  }
  function chpl_buildStandInRTT[55155](arg arrType[55152] :
  (55149 call chpl__buildArrayRuntimeType nil[38])) type : _unknown[43]
  {
    unknown arrInstType[55162] "type variable"(55161 'static field type' arrType[55152] "_instance")
    unknown domInstType[55186] "type variable"(55185 'static field type' arrInstType[55162] "dom")
    unknown domInstance[55190] domInstType[55186]
    unknown standinDomain[55197] "no auto destroy"(55196 call chpl_buildStandInRTT domInstance[55190])
    unknown instanceObj[55201] arrInstType[55162]
    unknown instanceEltType[55226] "type variable"(55225 'static typeof'(55222 call . instanceObj[55201] c"eltType"))
    (55237 return(55236 call chpl__buildArrayRuntimeType standinDomain[55197](55235 call chpl_buildStandInRTT instanceEltType[55226])))
  }
  function chpl_buildStandInRTT[55247](arg irType[55244] :
  _iteratorRecord[194](?)) type : _unknown[43]
  {
    unknown shapeType[55253] "type variable"(55252 call chpl_iteratorShapeStaticTypeOrVoid irType[55244])
    function standinType[55259]() type : _unknown[43]
    {
      if(55318 call _cond_test(55263 call == shapeType[55253] nothing[7]))
      {
        (55270 return(55268 call chpl__buildDomainRuntimeType defaultDist[93214] 1))
      }
      {
        if(55314 call _cond_test(55276 call isRange shapeType[55253]))
        {
          (55282 return(55280 call chpl__buildDomainRuntimeType defaultDist[93214] 1))
        }
        {
          unknown domInstance[55286] shapeType[55253]
          (55306 call compilerAssert(55303 call &&(55295 call !(55294 call isDomain domInstance[55286]))(55301 call !(55300 call isArray domInstance[55286]))))
          (55312 return(55311 call chpl_buildStandInRTT domInstance[55286]))
        }
      }
    }
    unknown standinDomain[55329] "no auto destroy"(55328 call standinType)
    (55343 return(55342 call chpl__buildArrayRuntimeType standinDomain[55329](55341 call chpl_buildStandInRTT(55339 'scalar promotion type' irType[55244]))))
  }
  function chpl_buildStandInRTT[55351](arg nonRTtype[55349]:_any[170](?)) type : _unknown[43]
  {
    (55354 return nonRTtype[55349])
  }
  function chpl_buildStandInRTT[55363](arg domInst[55361]:_any[170](?)) type : _unknown[43]
  {
    (55387 return(55386 call chpl__buildDomainRuntimeType defaultDist[93214](55375 call . domInst[55361] c"rank")(55379 call . domInst[55361] c"idxType")(55383 call . domInst[55361] c"stridable")))
  }
  where {
    (55369 call <=(55366 'typeof' domInst[55361]) unmanaged DefaultRectangularDom[389799](?))
  }
  function chpl_buildStandInRTT[55397](arg domInst[55395]:_any[170](?)) type : _unknown[43] "no return value for void"
  {
    if(55470 call _cond_test(55403 call <=(55400 'typeof' domInst[55395]) unmanaged BaseDom[389803]))
    {
      (55425 call compilerError "for/forall/promoted expressions are not implemented when the elements are or contain non-DefaultRectangular domains or arrays")
    }
    {
      (55468 call compilerError "unexpected argument of type "(55448 call _cast string[24](55446 'typeof' domInst[55395])) " for chpl_buildStandInRTT()")
    }
  }
  function chpl_trivialLeader[55481]() : _unknown[43] "iterator fn" "no return value for void"
  {
    (55484 yield 0)
  }
  function chpl_computeIteratorShape[55497](arg arg[55494] :
  (55491 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "inline"
  {
    (55508 return(55507 call chpl_computeIteratorShape(55503 call . arg[55494] c"_dom")))
  }
  function chpl_computeIteratorShape[55519](arg arg[55516] :
  _domain[123390](?)) : _unknown[43] "inline"
  {
    (55525 return(55522 call . arg[55516] c"_instance"))
  }
  function chpl_computeIteratorShape[55539](arg arg[55536] :
  (55535 call range[66183](?) ?[249])) : _unknown[43] "inline"
  {
    (55542 return arg[55536])
  }
  function chpl_computeIteratorShape[55553](arg arg[55550] :
  _iteratorRecord[194](?)) : _unknown[43] "inline"
  {
    if(55575 call _cond_test(55558 call chpl_iteratorHasShape arg[55550]))
    {
      (55565 return(55562 call . arg[55550] c"_shape_"))
    }
    {
      const myvoid[55568] "const" none[49]
      (55573 return myvoid[55568])
    }
  }
  function chpl_computeIteratorShape[55587](arg arg[55585]:_any[170](?)) : _unknown[43] "inline"
  {
    (55590 return none[49])
  }
  function chpl_iteratorHasShape[55601](arg ir[55598] :
  _iteratorRecord[194](?)) param : _unknown[43]
  {
    if(55635 call _cond_test(55621 call hasField(55605 'typeof' ir[55598]) "_shape_"))
    {
      (55630 return(55628 call !=(55626 'typeof'(55623 call . ir[55598] c"_shape_")) void[4]))
    }
    {
      (55633 return 0)
    }
  }
  function chpl_iteratorHasDomainShape[55650](arg ir[55647] :
  _iteratorRecord[194](?)) param : _unknown[43] "inline"
  {
    if(55672 call _cond_test(55657 call hasField(55654 'typeof' ir[55647]) "_shape_"))
    {
      (55667 return(328445 'is_subtype' anymanaged BaseDom[339776](?)(55663 'typeof'(55660 call . ir[55647] c"_shape_"))))
    }
    {
      (55670 return 0)
    }
  }
  function chpl_iteratorHasRangeShape[55687](arg ir[55684] :
  _iteratorRecord[194](?)) param : _unknown[43] "inline"
  {
    if(55708 call _cond_test(55694 call hasField(55691 'typeof' ir[55684]) "_shape_"))
    {
      (55703 return(55702 call isRange(55700 'typeof'(55697 call . ir[55684] c"_shape_"))))
    }
    {
      (55706 return 0)
    }
  }
  function chpl_iteratorShapeStaticTypeOrVoid[55723](arg ir[55720] :
  _iteratorRecord[194](?)) type : _unknown[43]
  {
    if(55740 call _cond_test(55729 call hasField ir[55720] "_shape_"))
    {
      (55735 return(55734 'static field type' ir[55720] "_shape_"))
    }
    {
      (55738 return none[49])
    }
  }
  function chpl_iteratorFromForExpr[55755](arg ir[55752] :
  _iteratorRecord[194](?)) param : _unknown[43]
  {
    if(55791 call _cond_test(55781 call canResolveMethod module=[244] Reflection[211223] ir[55752] "_fromForExpr_"))
    {
      (55786 return(55783 call . ir[55752] c"_fromForExpr_"))
    }
    {
      (55789 return 0)
    }
  }
  function chpl_iteratorFromForExpr[55804](arg arg[55802]:_any[170](?)) param : _unknown[43]
  {
    (55807 return 0)
  }
  function _iteratorRecord[194](?).writeThis[55817](arg _mt[55822]:_MT[227], arg this[55819]:_iteratorRecord[194](?) :
  _iteratorRecord[194](?), arg f[55815]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    unknown first[55826] 1 bool[10]
    {
      unknown _indexOfInterest[55872] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55873] "expr temp" "temp"
      (55882 'move' _iterator[55873](55880 call _getIterator this[55819]))
      Defer
      {
        {
          (55898 call _freeIterator _iterator[55873])
        }
      }
      { scopeless type
        (55887 'move' _indexOfInterest[55872](55884 call iteratorIndex _iterator[55873]))
      }
      ForLoop
      {
        unknown e[55891] "index var" "insert auto destroy"
        (55893 'move' e[55891] _indexOfInterest[55872])
        {
          if(55860 call _cond_test(55833 call ! first[55826]))
          {
            (55852 call <~> f[55815] " ")
          }
          {
            (55857 call = first[55826] 0)
          }
          (55869 call <~> f[55815] e[55891])
        }
        label _continueLabel[55877]
        _indexOfInterest[55872]
        _iterator[55873]
      }
      label _breakLabel[55878]
    }
  }
  function =[55913](ref arg ic[55910] :
  _iteratorRecord[194](?), arg xs[55915]:_any[170](?)) : _unknown[43] "assignop" "no return value for void"
  {
    {
      unknown _indexOfInterest[55931] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[55932] "expr temp" "temp"
      (55946 'move' _iterator[55932](55925 call _build_tuple(55941 call _getIterator ic[55910])(55944 call _getIterator xs[55915])))
      Defer
      {
        {
          (55976 call _freeIterator _iterator[55932])
        }
      }
      { scopeless type
        (55951 'move' _indexOfInterest[55931](55948 call iteratorIndex _iterator[55932]))
      }
      ForLoop
      {
        (55956 call _check_tuple_var_decl _indexOfInterest[55931] 2)
        unknown e[55962] "index var" "insert auto destroy"
        (55964 'move' e[55962](55960 call _indexOfInterest[55931] 1))
        unknown x[55969] "index var" "insert auto destroy"
        (55971 'move' x[55969](55967 call _indexOfInterest[55931] 2))
        (55928 call = e[55962] x[55969])
        label _continueLabel[55936]
        _indexOfInterest[55931]
        _iterator[55932]
      }
      label _breakLabel[55937]
    }
  }
  function =[55992](ref arg ic[55989] :
  _iteratorRecord[194](?), arg x[55998] :
  (55997 call iteratorIndexType ic[55989])) : _unknown[43] "assignop" "suppress lvalue error" "no return value for void"
  {
    {
      unknown _indexOfInterest[56008] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[56009] "expr temp" "temp"
      (56018 'move' _iterator[56009](56016 call _getIterator ic[55989]))
      Defer
      {
        {
          (56034 call _freeIterator _iterator[56009])
        }
      }
      { scopeless type
        (56023 'move' _indexOfInterest[56008](56020 call iteratorIndex _iterator[56009]))
      }
      ForLoop
      {
        unknown e[56027] "index var" "insert auto destroy"
        (56029 'move' e[56027] _indexOfInterest[56008])
        (56005 call = e[56027] x[55998])
        label _continueLabel[56013]
        _indexOfInterest[56008]
        _iterator[56009]
      }
      label _breakLabel[56014]
    }
  }
  function _getIterator[56048](const  ref arg x[56046]:_any[170](?)) : _unknown[43] "inline" "no borrow convert" "suppress lvalue error"
  {
    (56061 return(56060 call _getIterator(56058 call(56054 call . x[56046] c"these"))))
  }
  function _getIterator[56070](arg t[56068]:_any[170](?)) : _unknown[43]
  {
    (56081 return(56080 call _getIterator(56078 call(56074 call . t[56068] c"these"))))
  }
  function _getIteratorZip[56090](arg x[56088]:_any[170](?)) : _unknown[43] "inline"
  {
    (56096 return(56095 call _getIterator x[56088]))
  }
  function _getIteratorZip[56105](arg t[56103]:_any[170](?)) : _unknown[43] "inline"
  {
    (56111 return(56110 call _getIterator t[56103]))
  }
  function _getIteratorZip[56122](arg x[56119] :
  _tuple[58502](?)) : _unknown[43] "inline"
  {
    function _getIteratorZipInternal[56130](arg x[56127] :
    _tuple[58502](?), param arg dim[56133] :
    int(64)[13]) : _unknown[43] "inline"
    {
      if(56175 call _cond_test(56141 call == dim[56133](56138 call . x[56127] c"size")))
      {
        (56152 return(56150 call _build_tuple(56149 call _getIterator(56147 call x[56127] dim[56133]))))
      }
      {
        (56173 return(56171 call _build_tuple(56160 call _getIterator(56158 call x[56127] dim[56133]))(56169 'expand_tuple'(56168 call _getIteratorZipInternal x[56127](56166 call + dim[56133] 1)))))
      }
    }
    if(56208 call _cond_test(56190 call ==(56186 call . x[56119] c"size") 1))
    {
      (56199 return(56198 call _getIterator(56196 call x[56119] 1)))
    }
    {
      (56206 return(56205 call _getIteratorZipInternal x[56119] 1))
    }
  }
  function _getIteratorZip[56222](arg t[56219] :
  _tuple[58502](?)) : _unknown[43] "inline"
  {
    function _getIteratorZipInternal[56230](arg t[56227] :
    _tuple[58502](?), param arg dim[56233] :
    int(64)[13]) : _unknown[43] "inline"
    {
      if(56275 call _cond_test(56241 call == dim[56233](56238 call . t[56227] c"size")))
      {
        (56252 return(56250 call _build_tuple(56249 call _getIterator(56247 call t[56227] dim[56233]))))
      }
      {
        (56273 return(56271 call _build_tuple(56260 call _getIterator(56258 call t[56227] dim[56233]))(56269 'expand_tuple'(56268 call _getIteratorZipInternal t[56227](56266 call + dim[56233] 1)))))
      }
    }
    if(56308 call _cond_test(56290 call ==(56286 call . t[56219] c"size") 1))
    {
      (56299 return(56298 call _getIterator(56296 call t[56219] 1)))
    }
    {
      (56306 return(56305 call _getIteratorZipInternal t[56219] 1))
    }
  }
  function _freeIterator[56322](arg ic[56319] :
  _iteratorClass[197](?)) : _unknown[43] "inline" "no return value for void"
  {
    (56345 call chpl_here_free(56343 'cast_to_void_star' ic[56319]))
  }
  function _freeIterator[56356](arg x[56353] :
  _tuple[58502](?)) : _unknown[43] "inline" "no return value for void"
  {
    {
      unknown i[56373] 0
      unknown tmp[56374] "maybe param" "temp"
      (56386 'move' tmp[56374](56384 call chpl_compute_low_param_loop_bound 1(56360 call . x[56353] c"size")))
      unknown tmp[56375] "maybe param" "temp"
      (56396 'move' tmp[56375](56394 call chpl_compute_high_param_loop_bound 1(56391 call . x[56353] c"size")))
      unknown tmp[56376] "maybe param" "temp"
      (56399 'move' tmp[56376] 1)
      ParamForLoop
      { i[56373] tmp[56374] tmp[56375] tmp[56376]
        (56371 call _freeIterator(56369 call x[56353] i[56373]))
      }
      label _unused_continueLabel[56378]
      label _breakLabel[56377]
    }
  }
  function _toLeader[56419](arg ir[56416] :
  _iteratorRecord[194](?)) : _unknown[43] "inline" "no implicit copy" "fn returns iterator"
  {
    (56462 return(56461 call chpl__autoCopy(56459 'to leader' ir[56416])))
  }
  where {
    (56439 'has leader' ir[56416])
  }
  function _toLeader[56472](arg x[56470]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (56502 return(56501 call _toLeader(56499 call(56495 call . x[56470] c"these"))))
  }
  where {
    (56491 call &&(56480 call !(328446 'is_subtype' _iteratorRecord[194](?)(56476 'typeof' x[56470])))(56490 'has leader'(56489 call(56485 call . x[56470] c"these"))))
  }
  function _toLeaderZip[56512](arg x[56510]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    (56551 return(56550 call _toLeader x[56510]))
  }
  where {
    (56545 call &&(56518 call !(56517 call isTuple x[56510]))(56544 call canResolve module=[244] Reflection[211223] "_toLeader" x[56510]))
  }
  function _toLeaderZip[56563](arg x[56560] :
  _tuple[58502](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    (56583 return(56582 call _toLeader(56580 call x[56560] 1)))
  }
  where {
    (56575 call canResolve module=[244] Reflection[211223] "_toLeader"(56574 call x[56560] 1))
  }
  function _toStandalone[56595](arg iterator[56592] :
  _iteratorClass[197](?)) : _unknown[43] "inline" "no implicit copy" "fn returns iterator"
  {
    (56619 return(56618 call chpl__autoCopy(56616 'to standalone' iterator[56592])))
  }
  function _toStandalone[56630](arg ir[56627] :
  _iteratorRecord[194](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ic[56636] "no copy"(56635 call _getIterator ir[56627])
    unknown standalone[56644] "no copy"(56643 call _toStandalone ic[56636])
    (56650 call _freeIterator ic[56636])
    (56653 return standalone[56644])
  }
  function _toStandalone[56661](arg x[56659]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (56672 return(56671 call _toStandalone(56669 call(56665 call . x[56659] c"these"))))
  }
  function _toLeader[56683](arg ir[56680] :
  _iteratorRecord[194](?), arg args[56686]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    (56698 return(56697 call chpl__autoCopy(56695 'to leader' ir[56680](56694 'expand_tuple' args[56686]))))
  }
  function _toLeader[56707](arg x[56705]:_any[170](?), arg args[56710]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    (56724 return(56723 call _toLeader(56719 call(56715 call . x[56705] c"these"))(56722 'expand_tuple' args[56710])))
  }
  function _toLeaderZip[56733](arg x[56731]:_any[170](?), arg args[56736]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator"
  {
    (56745 return(56744 call _toLeader x[56731](56743 'expand_tuple' args[56736])))
  }
  function _toLeaderZip[56756](arg x[56753] :
  _tuple[58502](?), arg args[56759]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator"
  {
    (56771 return(56770 call _toLeader(56766 call x[56753] 1)(56769 'expand_tuple' args[56759])))
  }
  function _toStandalone[56782](arg iterator[56779] :
  _iteratorClass[197](?), arg args[56785]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "no implicit copy" "fn returns iterator"
  {
    (56797 return(56796 call chpl__autoCopy(56794 'to standalone' iterator[56779](56793 'expand_tuple' args[56785]))))
  }
  function _toStandalone[56808](arg ir[56805] :
  _iteratorRecord[194](?), arg args[56811]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator"
  {
    unknown ic[56818] "no copy"(56817 call _getIterator ir[56805])
    unknown standalone[56828] "no copy"(56827 call _toStandalone ic[56818](56826 'expand_tuple' args[56811]))
    (56834 call _freeIterator ic[56818])
    (56837 return standalone[56828])
  }
  function _toStandalone[56845](arg x[56843]:_any[170](?), arg args[56848]:_any[170](?) ...) : _unknown[43] "expand tuples with values" "inline" "fn returns iterator" "suppress lvalue error"
  {
    (56862 return(56861 call _toStandalone(56857 call(56853 call . x[56843] c"these"))(56860 'expand_tuple' args[56848])))
  }
  function chpl__staticFastFollowCheck[56871](arg x[56869]:_any[170](?)) param : _unknown[43]
  {
    const lead[56874] "const" "no copy" x[56869]
    if(56898 call _cond_test(56886 call ||(56881 call isDomain lead[56874])(56885 call isArray lead[56874])))
    {
      (56893 return(56892 call chpl__staticFastFollowCheck x[56869] lead[56874]))
    }
    {
      (56896 return 0)
    }
  }
  function chpl__staticFastFollowCheck[56910](arg x[56908]:_any[170](?), arg lead[56912]:_any[170](?)) param : _unknown[43]
  {
    (56915 return 0)
  }
  function chpl__staticFastFollowCheck[56928](arg x[56925] :
  (56922 call chpl__buildArrayRuntimeType nil[38]), arg lead[56930]:_any[170](?)) param : _unknown[43]
  {
    (56950 return(56949 call(56940 call .(56935 call . x[56925] c"_value") c"dsiStaticFastFollowCheck")(56947 'typeof'(56944 call . lead[56930] c"_value"))))
  }
  function chpl__staticFastFollowCheckZip[56961](arg x[56958] :
  _tuple[58502](?)) param : _unknown[43]
  {
    const lead[56967] "const" "no copy"(56966 call x[56958] 1)
    if(56991 call _cond_test(56979 call ||(56974 call isDomain lead[56967])(56978 call isArray lead[56967])))
    {
      (56986 return(56985 call chpl__staticFastFollowCheckZip x[56958] lead[56967]))
    }
    {
      (56989 return 0)
    }
  }
  function chpl__staticFastFollowCheckZip[57003](arg x[57001]:_any[170](?), arg lead[57005]:_any[170](?)) param : _unknown[43]
  {
    (57012 return(57011 call chpl__staticFastFollowCheck x[57001] lead[57005]))
  }
  function chpl__staticFastFollowCheckZip[57023](arg x[57020] :
  _tuple[58502](?), arg lead[57025]:_any[170](?), param arg dim[57028] =
  1) param : _unknown[43]
  {
    if(57069 call _cond_test(57036 call ==(57032 call . x[57020] c"size") dim[57028]))
    {
      (57046 return(57045 call chpl__staticFastFollowCheckZip(57042 call x[57020] dim[57028]) lead[57025]))
    }
    {
      (57067 return(57065 call ||(57055 call chpl__staticFastFollowCheckZip(57052 call x[57020] dim[57028]) lead[57025])(57064 call chpl__staticFastFollowCheckZip x[57020] lead[57025](57062 call + dim[57028] 1))))
    }
  }
  function chpl__dynamicFastFollowCheck[57082](arg x[57080]:_any[170](?)) : _unknown[43]
  {
    (57089 return(57088 call chpl__dynamicFastFollowCheck x[57080] x[57080]))
  }
  function chpl__dynamicFastFollowCheck[57098](arg x[57096]:_any[170](?), arg lead[57100]:_any[170](?)) : _unknown[43]
  {
    (57103 return 1)
  }
  function chpl__dynamicFastFollowCheck[57116](arg x[57113] :
  (57110 call chpl__buildArrayRuntimeType nil[38]), arg lead[57118]:_any[170](?)) : _unknown[43]
  {
    if(57142 call _cond_test(57124 call chpl__staticFastFollowCheck x[57113] lead[57118]))
    {
      (57137 return(57136 call(57131 call .(57126 call . x[57113] c"_value") c"dsiDynamicFastFollowCheck") lead[57118]))
    }
    {
      (57140 return 0)
    }
  }
  function chpl__dynamicFastFollowCheckZip[57157](arg x[57154] :
  _tuple[58502](?)) : _unknown[43]
  {
    (57167 return(57166 call chpl__dynamicFastFollowCheckZip x[57154](57165 call x[57154] 1)))
  }
  function chpl__dynamicFastFollowCheckZip[57176](arg x[57174]:_any[170](?), arg lead[57178]:_any[170](?)) : _unknown[43]
  {
    (57185 return(57184 call chpl__dynamicFastFollowCheck x[57174] lead[57178]))
  }
  function chpl__dynamicFastFollowCheckZip[57196](arg x[57193] :
  _tuple[58502](?), arg lead[57198]:_any[170](?), param arg dim[57201] =
  1) : _unknown[43]
  {
    if(57242 call _cond_test(57209 call ==(57205 call . x[57193] c"size") dim[57201]))
    {
      (57219 return(57218 call chpl__dynamicFastFollowCheckZip(57215 call x[57193] dim[57201]) lead[57198]))
    }
    {
      (57240 return(57238 call &&(57228 call chpl__dynamicFastFollowCheckZip(57225 call x[57193] dim[57201]) lead[57198])(57237 call chpl__dynamicFastFollowCheckZip x[57193] lead[57198](57235 call + dim[57201] 1))))
    }
  }
  function _toFollower[57257](arg iterator[57254] :
  _iteratorClass[197](?), arg leaderIndex[57259]:_any[170](?)) : _unknown[43] "inline" "no implicit copy" "fn returns iterator"
  {
    (57284 return(57283 call chpl__autoCopy(57281 'to follower' iterator[57254] leaderIndex[57259])))
  }
  function _toFollower[57295](arg ir[57292] :
  _iteratorRecord[194](?), arg leaderIndex[57297]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ic[57303] "no copy"(57302 call _getIterator ir[57292])
    unknown follower[57312] "no copy"(57311 call _toFollower ic[57303] leaderIndex[57297])
    (57318 call _freeIterator ic[57303])
    (57321 return follower[57312])
  }
  function _toFollower[57329](arg x[57327]:_any[170](?), arg leaderIndex[57331]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator" "suppress lvalue error"
  {
    (57343 return(57342 call _toFollower(57339 call(57335 call . x[57327] c"these")) leaderIndex[57331]))
  }
  function _toFollowerZip[57352](arg x[57350]:_any[170](?), arg leaderIndex[57354]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    (57361 return(57360 call _toFollower x[57350] leaderIndex[57354]))
  }
  function _toFollowerZip[57372](arg x[57369] :
  _tuple[58502](?), arg leaderIndex[57374]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    (57382 return(57381 call _toFollowerZipInternal x[57369] leaderIndex[57374] 1))
  }
  function _toFollowerZipInternal[57393](arg x[57390] :
  _tuple[58502](?), arg leaderIndex[57395]:_any[170](?), param arg dim[57398] :
  int(64)[13]) : _unknown[43] "inline" "fn returns iterator"
  {
    if(57443 call _cond_test(57406 call == dim[57398](57403 call . x[57390] c"size")))
    {
      (57418 return(57416 call _build_tuple(57415 call _toFollower(57412 call x[57390] dim[57398]) leaderIndex[57395])))
    }
    {
      (57441 return(57439 call _build_tuple(57427 call _toFollower(57424 call x[57390] dim[57398]) leaderIndex[57395])(57437 'expand_tuple'(57436 call _toFollowerZipInternal x[57390] leaderIndex[57395](57434 call + dim[57398] 1)))))
    }
  }
  function _toFastFollower[57458](arg iterator[57455] :
  _iteratorClass[197](?), arg leaderIndex[57460]:_any[170](?), arg fast[57463] :
  bool[10]) : _unknown[43] "inline" "no implicit copy" "fn returns iterator"
  {
    (57475 return(57474 call chpl__autoCopy(57472 'to follower' iterator[57455] leaderIndex[57460] 1)))
  }
  function _toFastFollower[57486](arg ir[57483] :
  _iteratorRecord[194](?), arg leaderIndex[57488]:_any[170](?), arg fast[57491] :
  bool[10]) : _unknown[43] "inline" "fn returns iterator"
  {
    unknown ic[57498] "no copy"(57497 call _getIterator ir[57483])
    unknown follower[57509] "no copy"(57508 call _toFastFollower ic[57498] leaderIndex[57488](fast = 1))
    (57515 call _freeIterator ic[57498])
    (57518 return follower[57509])
  }
  function _toFastFollower[57526](arg x[57524]:_any[170](?), arg leaderIndex[57528]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    if(57556 call _cond_test(57533 call chpl__staticFastFollowCheck x[57524]))
    {
      (57544 return(57543 call _toFastFollower(57538 call _getIterator x[57524]) leaderIndex[57528](fast = 1)))
    }
    {
      (57554 return(57553 call _toFollower(57550 call _getIterator x[57524]) leaderIndex[57528]))
    }
  }
  function _toFastFollowerZip[57569](arg x[57567]:_any[170](?), arg leaderIndex[57571]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    (57578 return(57577 call _toFastFollower x[57567] leaderIndex[57571]))
  }
  function _toFastFollowerZip[57589](arg x[57586] :
  _tuple[58502](?), arg leaderIndex[57591]:_any[170](?)) : _unknown[43] "inline" "fn returns iterator"
  {
    (57599 return(57598 call _toFastFollowerZip x[57586] leaderIndex[57591] 1))
  }
  function _toFastFollowerZip[57610](arg x[57607] :
  _tuple[58502](?), arg leaderIndex[57612]:_any[170](?), param arg dim[57615] :
  int(64)[13]) : _unknown[43] "inline" "fn returns iterator"
  {
    if(57675 call _cond_test(57626 call == dim[57615](57624 call -(57620 call . x[57607] c"size") 1)))
    {
      (57650 return(57648 call _build_tuple(57635 call _toFastFollowerZip(57632 call x[57607] dim[57615]) leaderIndex[57612])(57646 call _toFastFollowerZip(57643 call x[57607](57640 call + dim[57615] 1)) leaderIndex[57612])))
    }
    {
      (57673 return(57671 call _build_tuple(57659 call _toFastFollowerZip(57656 call x[57607] dim[57615]) leaderIndex[57612])(57669 'expand_tuple'(57668 call _toFastFollowerZip x[57607] leaderIndex[57612](57666 call + dim[57615] 1)))))
    }
  }
  function singleValIter[57690](arg iterables[57687] :
  _tuple[58502](?)) param : _unknown[43] "no doc"
  {
    (57713 return(57711 call &&(57697 call ==(57693 call . iterables[57687] c"size") 1)(57709 call !(57708 call isRefIter(57706 call _getIterator(57704 call iterables[57687] 1))))))
  }
  function singleRefIter[57724](arg iterables[57721] :
  _tuple[58502](?)) param : _unknown[43] "no doc"
  {
    (57745 return(57743 call &&(57731 call ==(57727 call . iterables[57721] c"size") 1)(57742 call isRefIter(57740 call _getIterator(57738 call iterables[57721] 1)))))
  }
  function vectorizeOnly[57756](arg iterables[57753]:_any[170](?) ...) : _unknown[43] "iterator fn" "vectorize yielding loops" "no return value for void"
  {
    {
      unknown _indexOfInterest[57770] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57771] "expr temp" "temp"
      (57780 'move' _iterator[57771](57778 call _getIterator(57766 call iterables[57753] 1)))
      Defer
      {
        {
          (57797 call _freeIterator _iterator[57771])
        }
      }
      { scopeless type
        (57786 'move' _indexOfInterest[57770](57783 call iteratorIndex _iterator[57771]))
      }
      ForLoop
      {
        unknown i[57790] "index var" "insert auto destroy"
        (57792 'move' i[57790] _indexOfInterest[57770])
        (57768 yield i[57790])
        label _continueLabel[57775]
        _indexOfInterest[57770]
        _iterator[57771]
      }
      label _breakLabel[57776]
    }
  }
  where {
    (57761 call singleValIter iterables[57753])
  }
  function vectorizeOnly[57814](arg iterables[57811]:_any[170](?) ...) ref : _unknown[43] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    {
      unknown _indexOfInterest[57828] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57829] "expr temp" "temp"
      (57838 'move' _iterator[57829](57836 call _getIterator(57824 call iterables[57811] 1)))
      Defer
      {
        {
          (57855 call _freeIterator _iterator[57829])
        }
      }
      { scopeless type
        (57844 'move' _indexOfInterest[57828](57841 call iteratorIndex _iterator[57829]))
      }
      ForLoop
      {
        unknown i[57848] "index var" "insert auto destroy"
        (57850 'move' i[57848] _indexOfInterest[57828])
        (57826 yield i[57848])
        label _continueLabel[57833]
        _indexOfInterest[57828]
        _iterator[57829]
      }
      label _breakLabel[57834]
    }
  }
  where {
    (57819 call singleRefIter iterables[57811])
  }
  function vectorizeOnly[57873](arg iterables[57870]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "vectorize yielding loops" "no return value for void"
  {
    {
      unknown _indexOfInterest[57887] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57888] "expr temp" "temp"
      (57896 'move' _iterator[57888](57883 call _getIteratorZip iterables[57870]))
      Defer
      {
        {
          (57912 call _freeIterator _iterator[57888])
        }
      }
      { scopeless type
        (57901 'move' _indexOfInterest[57887](57898 call iteratorIndex _iterator[57888]))
      }
      ForLoop
      {
        unknown i[57905] "index var" "insert auto destroy"
        (57907 'move' i[57905] _indexOfInterest[57887])
        (57885 yield i[57905])
        label _continueLabel[57892]
        _indexOfInterest[57887]
        _iterator[57888]
      }
      label _breakLabel[57893]
    }
  }
  where {
    (57877 call > numiterables[57868] 1)
  }
  function vectorizeOnly[57929](param arg tag[57926] :
  iterKind[697], arg iterables[57932]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[57958] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[57959] "expr temp" "temp"
      (57968 'move' _iterator[57959](57966 call _getIterator(57954 call iterables[57932] 1)))
      Defer
      {
        {
          (57985 call _freeIterator _iterator[57959])
        }
      }
      { scopeless type
        (57974 'move' _indexOfInterest[57958](57971 call iteratorIndex _iterator[57959]))
      }
      ForLoop
      {
        unknown i[57978] "index var" "insert auto destroy"
        (57980 'move' i[57978] _indexOfInterest[57958])
        (57956 yield i[57978])
        label _continueLabel[57963]
        _indexOfInterest[57958]
        _iterator[57959]
      }
      label _breakLabel[57964]
    }
  }
  where {
    (57948 call &&(57942 call == tag[57926] standalone[695])(57947 call singleValIter iterables[57932]))
  }
  function vectorizeOnly[58002](param arg tag[57999] :
  iterKind[697], arg iterables[58005]:_any[170](?) ...) ref : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[58029] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58030] "expr temp" "temp"
      (58039 'move' _iterator[58030](58037 call _getIterator(58025 call iterables[58005] 1)))
      Defer
      {
        {
          (58056 call _freeIterator _iterator[58030])
        }
      }
      { scopeless type
        (58045 'move' _indexOfInterest[58029](58042 call iteratorIndex _iterator[58030]))
      }
      ForLoop
      {
        unknown i[58049] "index var" "insert auto destroy"
        (58051 'move' i[58049] _indexOfInterest[58029])
        (58027 yield i[58049])
        label _continueLabel[58034]
        _indexOfInterest[58029]
        _iterator[58030]
      }
      label _breakLabel[58035]
    }
  }
  where {
    (58019 call &&(58013 call == tag[57999] standalone[695])(58018 call singleRefIter iterables[58005]))
  }
  function vectorizeOnly[58073](param arg tag[58070] :
  iterKind[697], arg iterables[58077]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[58101] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58102] "expr temp" "temp"
      (58110 'move' _iterator[58102](58097 call _getIteratorZip iterables[58077]))
      Defer
      {
        {
          (58126 call _freeIterator _iterator[58102])
        }
      }
      { scopeless type
        (58115 'move' _indexOfInterest[58101](58112 call iteratorIndex _iterator[58102]))
      }
      ForLoop
      {
        unknown i[58119] "index var" "insert auto destroy"
        (58121 'move' i[58119] _indexOfInterest[58101])
        (58099 yield i[58119])
        label _continueLabel[58106]
        _indexOfInterest[58101]
        _iterator[58102]
      }
      label _breakLabel[58107]
    }
  }
  where {
    (58091 call &&(58085 call == tag[58070] standalone[695])(58089 call > numiterables[58075] 1))
  }
  function vectorizeOnly[58143](param arg tag[58140] :
  iterKind[697], arg iterables[58146]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    (58168 yield(58167 call iterables[58146] 1))
  }
  where {
    (58162 call &&(58156 call == tag[58140] leader[691])(58161 call singleValIter iterables[58146]))
  }
  function vectorizeOnly[58180](param arg tag[58177] :
  iterKind[697], arg iterables[58183]:_any[170](?) ...) ref : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    (58203 yield(58202 call iterables[58183] 1))
  }
  where {
    (58197 call &&(58191 call == tag[58177] leader[691])(58196 call singleRefIter iterables[58183]))
  }
  function vectorizeOnly[58215](param arg tag[58212] :
  iterKind[697], arg iterables[58219]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    (58236 yield iterables[58219])
  }
  where {
    (58233 call &&(58227 call == tag[58212] leader[691])(58231 call > numiterables[58217] 1))
  }
  function vectorizeOnly[58248](param arg tag[58245] :
  iterKind[697], arg followThis[58250]:_any[170](?), arg iterables[58253]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[58279] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58280] "expr temp" "temp"
      (58289 'move' _iterator[58280](58287 call _getIterator(58275 call iterables[58253] 1)))
      Defer
      {
        {
          (58306 call _freeIterator _iterator[58280])
        }
      }
      { scopeless type
        (58295 'move' _indexOfInterest[58279](58292 call iteratorIndex _iterator[58280]))
      }
      ForLoop
      {
        unknown i[58299] "index var" "insert auto destroy"
        (58301 'move' i[58299] _indexOfInterest[58279])
        (58277 yield i[58299])
        label _continueLabel[58284]
        _indexOfInterest[58279]
        _iterator[58280]
      }
      label _breakLabel[58285]
    }
  }
  where {
    (58269 call &&(58263 call == tag[58245] follower[693])(58268 call singleValIter iterables[58253]))
  }
  function vectorizeOnly[58323](param arg tag[58320] :
  iterKind[697], arg followThis[58325]:_any[170](?), arg iterables[58328]:_any[170](?) ...) ref : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[58352] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58353] "expr temp" "temp"
      (58362 'move' _iterator[58353](58360 call _getIterator(58348 call iterables[58328] 1)))
      Defer
      {
        {
          (58379 call _freeIterator _iterator[58353])
        }
      }
      { scopeless type
        (58368 'move' _indexOfInterest[58352](58365 call iteratorIndex _iterator[58353]))
      }
      ForLoop
      {
        unknown i[58372] "index var" "insert auto destroy"
        (58374 'move' i[58372] _indexOfInterest[58352])
        (58350 yield i[58372])
        label _continueLabel[58357]
        _indexOfInterest[58352]
        _iterator[58353]
      }
      label _breakLabel[58358]
    }
  }
  where {
    (58342 call &&(58336 call == tag[58320] follower[693])(58341 call singleRefIter iterables[58328]))
  }
  function vectorizeOnly[58396](param arg tag[58393] :
  iterKind[697], arg followThis[58398]:_any[170](?), arg iterables[58402]:_any[170](?) ...) : _unknown[43] "iterator fn" "no doc" "no return value for void"
  {
    {
      unknown _indexOfInterest[58426] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[58427] "expr temp" "temp"
      (58435 'move' _iterator[58427](58422 call _getIteratorZip iterables[58402]))
      Defer
      {
        {
          (58451 call _freeIterator _iterator[58427])
        }
      }
      { scopeless type
        (58440 'move' _indexOfInterest[58426](58437 call iteratorIndex _iterator[58427]))
      }
      ForLoop
      {
        unknown i[58444] "index var" "insert auto destroy"
        (58446 'move' i[58444] _indexOfInterest[58426])
        (58424 yield i[58444])
        label _continueLabel[58431]
        _indexOfInterest[58426]
        _iterator[58427]
      }
      label _breakLabel[58432]
    }
  }
  where {
    (58416 call &&(58410 call == tag[58393] follower[693])(58414 call > numiterables[58400] 1))
  }
  (329330 'used modules list'(54782 'use' ChapelStandard[19734])(54787 'use' Reflection[211223]))
}