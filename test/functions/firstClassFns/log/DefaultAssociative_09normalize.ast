AST dump for DefaultAssociative after pass normalize.
Module use list: DSIUtil ChapelDistribution ChapelRange SysBasic ChapelArray ChapelBase ChapelLocks IO Sort Reflection 

{
  function chpl__init_DefaultAssociative[390222]() : void[4] "insert line file info" "module init"
  {
    (492090 'init var' debugDefaultAssoc[151182] 0)
    (492092 'init var' debugAssocDataPar[151186] 0)
    (492095 'move' chpl_table_index_type[151190] int(64)[13])
    {
    }
    (471641 return _void[47])
  }
  unknown debugDefaultAssoc[151182] "config" "param"
  unknown debugAssocDataPar[151186] "config" "param"
  unknown chpl_table_index_type[151190] "insert auto destroy" "type variable" int(64)[13]
  type chpl__hash_status[151200] def empty[151194]:chpl__hash_status[151200] def full[151196]:chpl__hash_status[151200] def deleted[151198]:chpl__hash_status[151200]
  type chpl_TableEntry[151222](?) unknown idxType[151206] "type variable" val status[151214]:chpl__hash_status[151200] empty[151194] chpl__hash_status[151200] unknown idx[151218] idxType[151206]
  function chpl__primes[151227]() : _unknown[43] "no parens"
  {
    unknown ret[470844] "RVV" "temp"
    unknown call_tmp[619673] "expr temp" "maybe param" "maybe type" "temp"
    (619676 'move' call_tmp[619673](151392 call _build_tuple 23 53 89 191 383 761 1531 3067 6143 12281 24571 49139 98299 196597 393209 786431 1572853 3145721 6291449 12582893 25165813 50331599 100663291 201326557 402653171 805306357 1610612711 3221225461 6442450939 12884901877 25769803751 51539607551 103079215087 206158430183 412316860387 824633720831 1649267441651 3298534883309 6597069766631 13194139533299 26388279066623 52776558133177 105553116266489 211106232532969 422212465065953 844424930131963 1688849860263901 3377699720527861 6755399441055731 13510798882111483 27021597764222939 54043195528445869 108086391056891903 216172782113783773 432345564227567561 864691128455135207))
    (470849 'move' ret[470844](470848 'deref' call_tmp[619673]))
    (470846 return ret[470844])
  }
  function DefaultAssociativeDom[155766](?).lockTable[151466](arg _mt[155770]:_MT[227], arg this[155768]:DefaultAssociativeDom[155766](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[619680] "expr temp" "maybe param" "maybe type" "temp"
    (619683 'move' call_tmp[619680](356517 call parSafe _mt[232] this[155768]))
    unknown call_tmp[619685] "expr temp" "maybe param" "maybe type" "temp"
    (619688 'move' call_tmp[619685](151476 call _cond_test call_tmp[619680]))
    if call_tmp[619685]
    {
      unknown call_tmp[619692] "expr temp" "maybe param" "maybe type" "temp"
      (619695 'move' call_tmp[619692](356524 call tableLock _mt[232] this[155768]))
      (151474 call(151470 call (partial) lock _mt[232] call_tmp[619692]))
    }
    (470851 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).unlockTable[151486](arg _mt[155774]:_MT[227], arg this[155772]:DefaultAssociativeDom[155766](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    unknown call_tmp[619701] "expr temp" "maybe param" "maybe type" "temp"
    (619704 'move' call_tmp[619701](356529 call parSafe _mt[232] this[155772]))
    unknown call_tmp[619706] "expr temp" "maybe param" "maybe type" "temp"
    (619709 'move' call_tmp[619706](151496 call _cond_test call_tmp[619701]))
    if call_tmp[619706]
    {
      unknown call_tmp[619713] "expr temp" "maybe param" "maybe type" "temp"
      (619716 'move' call_tmp[619713](356534 call tableLock _mt[232] this[155772]))
      (151494 call(151490 call (partial) unlock _mt[232] call_tmp[619713]))
    }
    (470853 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).linksDistribution[151510](arg _mt[155778]:_MT[227], arg this[155776]:DefaultAssociativeDom[155766](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[470857] "RVV" "param" "temp"
    (470862 'move' ret[470857](470861 'deref' 0))
    (470859 return ret[470857])
  }
  function DefaultAssociativeDom[155766](?).dsiLinksDistribution[151520](arg _mt[155782]:_MT[227], arg this[155780]:DefaultAssociativeDom[155766](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[470866] "RVV" "temp"
    (470871 'move' ret[470866](470870 'deref' 0))
    (470868 return ret[470866])
  }
  function DefaultAssociativeDom[155766](?).init[151532](arg _mt[155786]:_MT[227], arg this[155784]:DefaultAssociativeDom[155766](?), arg idxType[151530]:_any[170](?), param arg parSafe[151535]:bool[10], arg dist[151540]:unmanaged DefaultDist[389849]) : void[4] "method" "primary method" "no return value for void"
  {
    unknown super_tmp[436886] "temporary of super field" "temp"
    (436894 'move' super_tmp[436886](436887 '.v' this[155784] c"super"))
    (436890 call init _mt[232] super_tmp[436886])
    unknown tmp[436749] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443718] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[619720] "expr temp" "maybe param" "maybe type" "temp"
      (619723 'move' call_tmp[619720](436751 '.v' this[155784] c"super"))
      (443722 'move' call_type_tmp[443718](436754 'typeof' call_tmp[619720]))
    }
    (436755 'move' tmp[436749] call_type_tmp[443718])
    unknown call_tmp[619725] "maybe param" "maybe type" "temp"
    (619728 'move' call_tmp[619725](436760 'cast' tmp[436749] this[155784]))
    unknown chpl__thisAsParent[436757] "insert auto destroy" "temp"
    (492097 'init var' chpl__thisAsParent[436757] call_tmp[619725] tmp[436749])
    (436763 'setcid' chpl__thisAsParent[436757])
    unknown call_tmp[619730] "expr temp" "maybe param" "maybe type" "temp"
    (619733 'move' call_tmp[619730](151546 call chpl__validDefaultAssocDomIdxType idxType[151530]))
    unknown call_tmp[619735] "expr temp" "maybe param" "maybe type" "temp"
    (619738 'move' call_tmp[619735](151547 call ! call_tmp[619730]))
    unknown call_tmp[619740] "expr temp" "maybe param" "maybe type" "temp"
    (619743 'move' call_tmp[619740](151590 call _cond_test call_tmp[619735]))
    if call_tmp[619740]
    {
      unknown call_tmp[619745] "expr temp" "maybe param" "maybe type" "temp"
      (619748 'move' call_tmp[619745](151569 call _cast string[24] idxType[151530]))
      (151588 call compilerError "Default Associative domains with idxType=" call_tmp[619745] " are not allowed" 2)
    }
    unknown tmp[436765] "temp" "type variable"
    (436767 'move' tmp[436765] idxType[151530])
    (436769 'init field' this[155784] c"idxType" tmp[436765])
    unknown call_tmp[619750] "expr temp" "maybe param" "maybe type" "temp"
    (619753 'move' call_tmp[619750](436774 call _cast bool[10] parSafe[151535]))
    (436776 'init field' this[155784] c"parSafe" call_tmp[619750])
    unknown tmp[436779] "temp"
    (436782 'init var' tmp[436779] dist[151540] unmanaged DefaultDist[389849])
    (436784 'init field' this[155784] c"dist" tmp[436779])
    unknown tmp[436788] "temp"
    unknown call_tmp[619755] "expr temp" "maybe param" "maybe type" "temp"
    (619758 'move' call_tmp[619755](436791 call chpl__processorAtomicType int(64)[13]))
    (436793 'default init var' tmp[436788] call_tmp[619755])
    (436795 '.=' this[155784] c"numEntries" tmp[436788])
    unknown tmp[436799] "temp"
    unknown tmp[517675] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517676] "maybe param" "temp"
    unknown call_tmp[619760] "expr temp" "maybe param" "maybe type" "temp"
    (619763 'move' call_tmp[619760](436813 '.v' this[155784] c"parSafe"))
    (517681 'move' tmp[517676](517679 call _cond_test call_tmp[619760]))
    if tmp[517676]
    {
      (517686 'move' tmp[517675](517683 '_paramFoldLogical' tmp[517676] chpl_LocalSpinlock[180469]))
    }
    {
      (517691 'move' tmp[517675](517688 '_paramFoldLogical' tmp[517676] nothing[7]))
    }
    (436807 'default init var' tmp[436799] tmp[517675])
    (436809 '.=' this[155784] c"tableLock" tmp[436799])
    unknown tmp[436817] "temp"
    (436819 'init var' tmp[436817] 1)
    (436821 '.=' this[155784] c"tableSizeNum" tmp[436817])
    unknown call_tmp[619765] "expr temp" "maybe param" "maybe type" "temp"
    (619768 'move' call_tmp[619765](356547 call chpl__primes[151227]))
    unknown call_tmp[619770] "expr temp" "maybe param" "maybe type" "temp"
    (619773 'move' call_tmp[619770](356553 '.' this[155784] c"tableSizeNum"))
    unknown call_tmp[619775] "maybe param" "maybe type" "temp"
    (619778 'move' call_tmp[619775](151629 call call_tmp[619765] call_tmp[619770]))
    unknown tmp[436825] "temp"
    (436828 'init var' tmp[436825] call_tmp[619775] int(64)[13])
    (436830 'init field' this[155784] c"tableSize" tmp[436825])
    unknown call_tmp[619780] "expr temp" "maybe param" "maybe type" "temp"
    (619783 'move' call_tmp[619780](436852 '.' this[155784] c"tableSize"))
    unknown call_tmp[619785] "expr temp" "maybe param" "maybe type" "temp"
    (619788 'move' call_tmp[619785](436841 call - call_tmp[619780] 1))
    unknown call_tmp[619790] "expr temp" "maybe param" "maybe type" "temp"
    (619793 'move' call_tmp[619790](436838 call chpl_build_bounded_range 0 call_tmp[619785]))
    unknown call_tmp[619795] "maybe param" "maybe type" "temp"
    (619798 'move' call_tmp[619795](436836 call chpl__buildDomainExpr call_tmp[619790]))
    unknown tmp[436844] "temp"
    (436846 'init var' tmp[436844] call_tmp[619795])
    (436848 '.=' this[155784] c"tableDom" tmp[436844])
    unknown tmp[436855] "temp"
    unknown call_tmp[619800] "expr temp" "maybe param" "maybe type" "temp"
    (619803 'move' call_tmp[619800](436871 '.' this[155784] c"tableDom"))
    unknown call_tmp[619805] "expr temp" "maybe param" "maybe type" "temp"
    (619808 'move' call_tmp[619805](436860 call chpl__ensureDomainExpr call_tmp[619800]))
    unknown call_tmp[619810] "expr temp" "maybe param" "maybe type" "temp"
    (619813 'move' call_tmp[619810](436874 '.v' this[155784] c"idxType"))
    unknown call_tmp[619815] "expr temp" "maybe param" "maybe type" "temp"
    (619818 'move' call_tmp[619815](436863 call chpl_TableEntry[151222](?) call_tmp[619810]))
    unknown call_tmp[619820] "expr temp" "maybe param" "maybe type" "temp"
    (619823 'move' call_tmp[619820](436858 call chpl__buildArrayRuntimeType call_tmp[619805] call_tmp[619815]))
    (436865 'default init var' tmp[436855] call_tmp[619820])
    (436867 '.=' this[155784] c"table" tmp[436855])
    unknown tmp[436878] "temp"
    (436880 'init var' tmp[436878] 0)
    (436882 '.=' this[155784] c"postponeResize" tmp[436878])
    (436897 'setcid' this[155784])
    (470873 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).dsiBuildArray[151639](arg _mt[155790]:_MT[227], arg this[155788]:DefaultAssociativeDom[155766](?), arg eltType[151637]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[470877] "RVV" "temp"
    unknown call_tmp[619827] "expr temp" "maybe param" "maybe type" "temp"
    (619830 'move' call_tmp[619827](356563 call idxType _mt[232] this[155788]))
    unknown call_tmp[619834] "expr temp" "maybe param" "maybe type" "temp"
    (619837 'move' call_tmp[619834](356568 call parSafe _mt[232] this[155788]))
    unknown call_tmp[619839] "expr temp" "maybe param" "maybe type" "temp"
    (619842 'move' call_tmp[619839](151652 call _to_unmanaged this[155788]))
    unknown call_tmp[619844] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (619847 'move' call_tmp[619844](691497 'new' anymanaged DefaultAssociativeArr[356557](?)(eltType = eltType[151637])(idxType = call_tmp[619827])(parSafeDom = call_tmp[619834])(dom = call_tmp[619839])(_chpl_manager = unmanaged[209](?))))
    (470882 'move' ret[470877](470881 'deref' call_tmp[619844]))
    (470879 return ret[470877])
  }
  function DefaultAssociativeDom[155766](?).dsiSerialReadWrite[151666](arg _mt[155794]:_MT[227], arg this[155792]:DefaultAssociativeDom[155766](?), arg f[151664]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[619851] "maybe param" "maybe type" "temp"
    (619854 'move' call_tmp[619851](151673 call(151669 call (partial) binary _mt[232] f[151664])))
    unknown binary[151674] "insert auto destroy"
    (492099 'init var' binary[151674] call_tmp[619851])
    unknown call_tmp[619858] "expr temp" "maybe param" "maybe type" "temp"
    (619861 'move' call_tmp[619858](151679 call writing _mt[232] f[151664]))
    unknown call_tmp[619863] "expr temp" "maybe param" "maybe type" "temp"
    (619866 'move' call_tmp[619863](152047 call _cond_test call_tmp[619858]))
    if call_tmp[619863]
    {
      unknown call_tmp[619868] "expr temp" "maybe param" "maybe type" "temp"
      (619871 'move' call_tmp[619868](151820 call _cond_test binary[151674]))
      if call_tmp[619868]
      {
        unknown call_tmp[619875] "maybe param" "maybe type" "temp"
        (619878 'move' call_tmp[619875](356576 call dsiNumIndices _mt[232] this[155792]))
        unknown numIndices[151685] "insert auto destroy"
        (492101 'init var' numIndices[151685] call_tmp[619875] int(64)[13])
        (151691 call <~> f[151664] numIndices[151685])
        {
          unknown _indexOfInterest[151702] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[151703] "expr temp" "temp"
          (151712 'move' _iterator[151703](151710 call _getIterator this[155792]))
          Defer
          {
            {
              (151728 call _freeIterator _iterator[151703])
            }
          }
          { scopeless type
            (151717 'move' _indexOfInterest[151702](151714 call iteratorIndex _iterator[151703]))
          }
          ForLoop
          {
            unknown idx[151721] "index var" "insert auto destroy"
            (151723 'move' idx[151721] _indexOfInterest[151702])
            {
              (151698 call <~> f[151664] idx[151721])
            }
            label _continueLabel[151707]
            _indexOfInterest[151702]
            _iterator[151703]
          }
          label _breakLabel[151708]
        }
      }
      {
        unknown first[151736] "insert auto destroy"
        (492103 'init var' first[151736] 1)
        unknown call_tmp[619880] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (619883 'move' call_tmp[619880](691498 'new' ioLiteral[226016] "{"))
        (151746 call <~> f[151664] call_tmp[619880])
        {
          unknown _indexOfInterest[151778] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[151779] "expr temp" "temp"
          (151788 'move' _iterator[151779](151786 call _getIterator this[155792]))
          Defer
          {
            {
              (151804 call _freeIterator _iterator[151779])
            }
          }
          { scopeless type
            (151793 'move' _indexOfInterest[151778](151790 call iteratorIndex _iterator[151779]))
          }
          ForLoop
          {
            unknown idx[151797] "index var" "insert auto destroy"
            (151799 'move' idx[151797] _indexOfInterest[151778])
            {
              unknown call_tmp[619885] "expr temp" "maybe param" "maybe type" "temp"
              (619888 'move' call_tmp[619885](151766 call _cond_test first[151736]))
              if call_tmp[619885]
              {
                (151754 call = first[151736] 0)
              }
              {
                unknown call_tmp[619890] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (619893 'move' call_tmp[619890](691499 'new' ioLiteral[226016] ", "))
                (151763 call <~> f[151664] call_tmp[619890])
              }
              (151775 call <~> f[151664] idx[151797])
            }
            label _continueLabel[151783]
            _indexOfInterest[151778]
            _iterator[151779]
          }
          label _breakLabel[151784]
        }
        unknown call_tmp[619895] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (619898 'move' call_tmp[619895](691500 'new' ioLiteral[226016] "}"))
        (151817 call <~> f[151664] call_tmp[619895])
      }
    }
    {
      (151827 call(356596 call (partial) dsiClear _mt[232] this[155792]))
      unknown call_tmp[619902] "expr temp" "maybe param" "maybe type" "temp"
      (619905 'move' call_tmp[619902](152043 call _cond_test binary[151674]))
      if call_tmp[619902]
      {
        unknown numIndices[151832] "insert auto destroy"
        (492105 'default init var' numIndices[151832] int(64)[13])
        (151838 call <~> f[151664] numIndices[151832])
        {
          unknown _indexOfInterest[151861] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[151862] "expr temp" "temp"
          unknown call_tmp[619907] "expr temp" "maybe param" "maybe type" "temp"
          (619910 'move' call_tmp[619907](151876 call chpl_direct_range_iter 1 numIndices[151832] 1))
          (151871 'move' _iterator[151862](151869 call _getIterator call_tmp[619907]))
          Defer
          {
            {
              (151892 call _freeIterator _iterator[151862])
            }
          }
          { scopeless type
            (151881 'move' _indexOfInterest[151861](151878 call iteratorIndex _iterator[151862]))
          }
          ForLoop
          {
            unknown i[151885] "index var" "insert auto destroy"
            (151887 'move' i[151885] _indexOfInterest[151861])
            {
              unknown idx[151847] "insert auto destroy"
              unknown call_tmp[619914] "expr temp" "maybe param" "maybe type" "temp"
              (619917 'move' call_tmp[619914](356604 call idxType _mt[232] this[155792]))
              (492107 'default init var' idx[151847] call_tmp[619914])
              (151853 call <~> f[151664] idx[151847])
              (151859 call(356610 call (partial) dsiAdd _mt[232] this[155792]) idx[151847])
            }
            label _continueLabel[151866]
            _indexOfInterest[151861]
            _iterator[151862]
          }
          label _breakLabel[151867]
        }
      }
      {
        unknown call_tmp[619921] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (619924 'move' call_tmp[619921](691501 'new' ioLiteral[226016] "{"))
        (151905 call <~> f[151664] call_tmp[619921])
        unknown first[151910] "insert auto destroy"
        (492109 'init var' first[151910] 1)
        unknown call_tmp[619926] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (619929 'move' call_tmp[619926](691502 'new' ioLiteral[226016] "," 1))
        unknown comma[151919] "insert auto destroy"
        (492111 'init var' comma[151919] call_tmp[619926])
        unknown call_tmp[619931] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (619934 'move' call_tmp[619931](691503 'new' ioLiteral[226016] "}"))
        unknown end[151927] "insert auto destroy"
        (492113 'init var' end[151927] call_tmp[619931])
        {
          unknown tmp[152022] "temp"
          (152040 'move' tmp[152022](152038 call _cond_test 1))
          WhileDo
          {
            {
              (151933 call <~> f[151664] end[151927])
              unknown call_tmp[619938] "expr temp" "maybe param" "maybe type" "temp"
              (619941 'move' call_tmp[619938](151942 call(151938 call (partial) error _mt[232] f[151664])))
              unknown call_tmp[619943] "expr temp" "maybe param" "maybe type" "temp"
              (619946 'move' call_tmp[619943](356622 call EFORMAT[210730]))
              unknown call_tmp[619948] "expr temp" "maybe param" "maybe type" "temp"
              (619951 'move' call_tmp[619948](151944 call == call_tmp[619938] call_tmp[619943]))
              unknown call_tmp[619953] "expr temp" "maybe param" "maybe type" "temp"
              (619956 'move' call_tmp[619953](151958 call _cond_test call_tmp[619948]))
              if call_tmp[619953]
              {
                (151951 call(151947 call (partial) clearError _mt[232] f[151664]))
              }
              {
                break _breakLabel[152026] _breakLabel[152026]
              }
              unknown call_tmp[619960] "expr temp" "maybe param" "maybe type" "temp"
              (619963 'move' call_tmp[619960](151963 call ! first[151910]))
              unknown call_tmp[619965] "expr temp" "maybe param" "maybe type" "temp"
              (619968 'move' call_tmp[619965](151985 call _cond_test call_tmp[619960]))
              if call_tmp[619965]
              {
                (151967 call <~> f[151664] comma[151919])
                unknown call_tmp[619972] "expr temp" "maybe param" "maybe type" "temp"
                (619975 'move' call_tmp[619972](151976 call(151972 call (partial) error _mt[232] f[151664])))
                unknown call_tmp[619977] "expr temp" "maybe param" "maybe type" "temp"
                (619980 'move' call_tmp[619977](151981 call _cond_test call_tmp[619972]))
                if call_tmp[619977]
                {
                  break _breakLabel[152026] _breakLabel[152026]
                }
              }
              (151991 call = first[151910] 0)
              unknown idx[151995] "insert auto destroy"
              unknown call_tmp[619984] "expr temp" "maybe param" "maybe type" "temp"
              (619987 'move' call_tmp[619984](356632 call idxType _mt[232] this[155792]))
              (492115 'default init var' idx[151995] call_tmp[619984])
              (152000 call <~> f[151664] idx[151995])
              unknown call_tmp[619991] "expr temp" "maybe param" "maybe type" "temp"
              (619994 'move' call_tmp[619991](152008 call(152004 call (partial) error _mt[232] f[151664])))
              unknown call_tmp[619996] "expr temp" "maybe param" "maybe type" "temp"
              (619999 'move' call_tmp[619996](152013 call _cond_test call_tmp[619991]))
              if call_tmp[619996]
              {
                break _breakLabel[152026] _breakLabel[152026]
              }
              (152020 call(356639 call (partial) dsiAdd _mt[232] this[155792]) idx[151995])
            }
            label _continueLabel[152025]
            (152033 'move' tmp[152022](152031 call _cond_test 1))
            tmp[152022]
          }
          label _breakLabel[152026]
        }
      }
    }
    (470884 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).dsiSerialWrite[152057](arg _mt[155798]:_MT[227], arg this[155796]:DefaultAssociativeDom[155766](?), arg f[152055]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (152065 call(152060 call (partial) dsiSerialReadWrite _mt[232] this[155796]) f[152055])
    (470886 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).dsiSerialRead[152074](arg _mt[155802]:_MT[227], arg this[155800]:DefaultAssociativeDom[155766](?), arg f[152072]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (152082 call(152077 call (partial) dsiSerialReadWrite _mt[232] this[155800]) f[152072])
    (470888 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).dsiAssignDomain[152093](arg _mt[155806]:_MT[227], arg this[155804]:DefaultAssociativeDom[155766](?), arg rhs[152090]:_domain[123390](?), arg lhsPrivate[152096]:bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (152103 call chpl_assignDomainWithIndsIterSafeForRemoving this[155804] rhs[152090])
    (470890 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).dsiNumIndices[152110](arg _mt[155810]:_MT[227], arg this[155808]:DefaultAssociativeDom[155766](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    unknown ret[470894] "RVV" "temp"
    unknown call_tmp[620009] "expr temp" "maybe param" "maybe type" "temp"
    (620012 'move' call_tmp[620009](356654 call numEntries _mt[232] this[155808]))
    unknown call_tmp[620016] "expr temp" "maybe param" "maybe type" "temp"
    (620019 'move' call_tmp[620016](152117 call(152113 call (partial) read _mt[232] call_tmp[620009])))
    (470899 'move' ret[470894](470898 'deref' call_tmp[620016]))
    (470896 return ret[470894])
  }
  function DefaultAssociativeDom[155766](?).dsiIndsIterSafeForRemoving[152125](arg _mt[155814]:_MT[227], arg this[155812]:DefaultAssociativeDom[155766](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[470903] "RVV" "temp"
    unknown call_tmp[620023] "expr temp" "maybe param" "maybe type" "temp"
    (620026 'move' call_tmp[620023](356661 call postponeResize _mt[232] this[155812]))
    (152129 call = call_tmp[620023] 1)
    {
      unknown _indexOfInterest[152143] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[152144] "expr temp" "temp"
      unknown call_tmp[620030] "expr temp" "maybe param" "maybe type" "temp"
      (620033 'move' call_tmp[620030](152139 call(152135 call (partial) these _mt[232] this[155812])))
      (152153 'move' _iterator[152144](152151 call _getIterator call_tmp[620030]))
      Defer
      {
        {
          (152170 call _freeIterator _iterator[152144])
        }
      }
      { scopeless type
        (152159 'move' _indexOfInterest[152143](152156 call iteratorIndex _iterator[152144]))
      }
      ForLoop
      {
        unknown i[152163] "index var" "insert auto destroy"
        (152165 'move' i[152163] _indexOfInterest[152143])
        unknown yret[470907] "YVV" "temp"
        (470910 'move' yret[470907](470909 'deref' i[152163]))
        (470912 yield yret[470907])
        label _continueLabel[152148]
        _indexOfInterest[152143]
        _iterator[152144]
      }
      label _breakLabel[152149]
    }
    {
      const tmp[152247] "const" "temp"
      unknown call_tmp[620035] "expr temp" "maybe param" "maybe type" "temp"
      (620038 'move' call_tmp[620035](152244 '_wide_get_locale' this[155812]))
      (152248 'move' tmp[152247](152245 'deref' call_tmp[620035]))
      {
        unknown call_tmp[620042] "expr temp" "maybe param" "maybe type" "temp"
        (620045 'move' call_tmp[620042](356669 call postponeResize _mt[232] this[155812]))
        (152180 call = call_tmp[620042] 0)
        unknown tmp[402777] "maybe param" "temp"
        unknown call_tmp[620049] "expr temp" "maybe param" "maybe type" "temp"
        (620052 'move' call_tmp[620049](356674 call numEntries _mt[232] this[155812]))
        unknown call_tmp[620056] "expr temp" "maybe param" "maybe type" "temp"
        (620059 'move' call_tmp[620056](152189 call(152185 call (partial) read _mt[232] call_tmp[620049])))
        unknown call_tmp[620061] "expr temp" "maybe param" "maybe type" "temp"
        (620064 'move' call_tmp[620061](152191 call * call_tmp[620056] 8))
        unknown call_tmp[620068] "expr temp" "maybe param" "maybe type" "temp"
        (620071 'move' call_tmp[620068](356679 call tableSize _mt[232] this[155812]))
        (402788 'move' tmp[402777](152194 call < call_tmp[620061] call_tmp[620068]))
        unknown call_tmp[620073] "expr temp" "maybe param" "maybe type" "temp"
        (620076 'move' call_tmp[620073](402790 call _cond_invalid tmp[402777]))
        if call_tmp[620073]
        {
          (402793 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[517698] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[517699] "maybe param" "temp"
        unknown call_tmp[620078] "expr temp" "maybe param" "maybe type" "temp"
        (620081 'move' call_tmp[620078](402778 call isTrue tmp[402777]))
        (517704 'move' tmp[517699](517702 call _cond_test call_tmp[620078]))
        if tmp[517699]
        {
          unknown tmp[517706] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[620085] "expr temp" "maybe param" "maybe type" "temp"
          (620088 'move' call_tmp[620085](356684 call tableSizeNum _mt[232] this[155812]))
          unknown call_tmp[620090] "expr temp" "maybe param" "maybe type" "temp"
          (620093 'move' call_tmp[620090](152198 call > call_tmp[620085] 1))
          (517708 'move' tmp[517706](402781 call isTrue call_tmp[620090]))
          (517713 'move' tmp[517698](517710 '_paramFoldLogical' tmp[517699] tmp[517706]))
        }
        {
          (517718 'move' tmp[517698](517715 '_paramFoldLogical' tmp[517699] 0))
        }
        unknown call_tmp[620095] "expr temp" "maybe param" "maybe type" "temp"
        (620098 'move' call_tmp[620095](152240 call _cond_test tmp[517698]))
        if call_tmp[620095]
        {
          (152204 call(356690 call (partial) lockTable _mt[232] this[155812]))
          unknown tmp[402756] "maybe param" "temp"
          unknown call_tmp[620104] "expr temp" "maybe param" "maybe type" "temp"
          (620107 'move' call_tmp[620104](356695 call numEntries _mt[232] this[155812]))
          unknown call_tmp[620111] "expr temp" "maybe param" "maybe type" "temp"
          (620114 'move' call_tmp[620111](152212 call(152208 call (partial) read _mt[232] call_tmp[620104])))
          unknown call_tmp[620116] "expr temp" "maybe param" "maybe type" "temp"
          (620119 'move' call_tmp[620116](152214 call * call_tmp[620111] 8))
          unknown call_tmp[620123] "expr temp" "maybe param" "maybe type" "temp"
          (620126 'move' call_tmp[620123](356700 call tableSize _mt[232] this[155812]))
          (402767 'move' tmp[402756](152217 call < call_tmp[620116] call_tmp[620123]))
          unknown call_tmp[620128] "expr temp" "maybe param" "maybe type" "temp"
          (620131 'move' call_tmp[620128](402769 call _cond_invalid tmp[402756]))
          if call_tmp[620128]
          {
            (402772 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[517725] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[517726] "maybe param" "temp"
          unknown call_tmp[620133] "expr temp" "maybe param" "maybe type" "temp"
          (620136 'move' call_tmp[620133](402757 call isTrue tmp[402756]))
          (517731 'move' tmp[517726](517729 call _cond_test call_tmp[620133]))
          if tmp[517726]
          {
            unknown tmp[517733] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[620140] "expr temp" "maybe param" "maybe type" "temp"
            (620143 'move' call_tmp[620140](356705 call tableSizeNum _mt[232] this[155812]))
            unknown call_tmp[620145] "expr temp" "maybe param" "maybe type" "temp"
            (620148 'move' call_tmp[620145](152221 call > call_tmp[620140] 1))
            (517735 'move' tmp[517733](402760 call isTrue call_tmp[620145]))
            (517740 'move' tmp[517725](517737 '_paramFoldLogical' tmp[517726] tmp[517733]))
          }
          {
            (517745 'move' tmp[517725](517742 '_paramFoldLogical' tmp[517726] 0))
          }
          unknown call_tmp[620150] "expr temp" "maybe param" "maybe type" "temp"
          (620153 'move' call_tmp[620150](152232 call _cond_test tmp[517725]))
          if call_tmp[620150]
          {
            (152229 call(356711 call (partial) _resize _mt[232] this[155812])(grow = 0))
          }
          (152238 call(356717 call (partial) unlockTable _mt[232] this[155812]))
        }
      }
    }
    (470905 return ret[470903])
  }
  function DefaultAssociativeDom[155766](?).these[152256](arg _mt[155818]:_MT[227], arg this[155816]:DefaultAssociativeDom[155766](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[470916] "RVV" "temp"
    {
      unknown _indexOfInterest[152271] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[152272] "expr temp" "temp"
      unknown call_tmp[620161] "expr temp" "maybe param" "maybe type" "temp"
      (620164 'move' call_tmp[620161](152261 call(356721 call (partial) _fullSlots _mt[232] this[155816])))
      (152281 'move' _iterator[152272](152279 call _getIterator call_tmp[620161]))
      Defer
      {
        {
          (152298 call _freeIterator _iterator[152272])
        }
      }
      { scopeless type
        (152287 'move' _indexOfInterest[152271](152284 call iteratorIndex _iterator[152272]))
      }
      ForLoop
      {
        unknown slot[152291] "index var" "insert auto destroy"
        (152293 'move' slot[152291] _indexOfInterest[152271])
        unknown yret[470920] "YVV" "temp"
        unknown call_tmp[620168] "expr temp" "maybe param" "maybe type" "temp"
        (620171 'move' call_tmp[620168](152265 call(356726 call (partial) table _mt[232] this[155816]) slot[152291]))
        unknown call_tmp[620175] "expr temp" "maybe param" "maybe type" "temp"
        (620178 'move' call_tmp[620175](152266 call idx _mt[232] call_tmp[620168]))
        (470923 'move' yret[470920](470922 'deref' call_tmp[620175]))
        (470925 yield yret[470920])
        label _continueLabel[152276]
        _indexOfInterest[152271]
        _iterator[152272]
      }
      label _breakLabel[152277]
    }
    (470918 return ret[470916])
  }
  function DefaultAssociativeDom[155766](?).these[152314](arg _mt[155822]:_MT[227], arg this[155820]:DefaultAssociativeDom[155766](?), param arg tag[152311]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[470929] "RVV" "temp"
    unknown call_tmp[620180] "expr temp" "maybe param" "maybe type" "temp"
    (620183 'move' call_tmp[620180](152345 call _cond_test debugDefaultAssoc[151182]))
    if call_tmp[620180]
    {
      (152342 call writeln "*** In associative domain standalone iterator")
    }
    unknown call_tmp[620187] "maybe param" "maybe type" "temp"
    (620190 'move' call_tmp[620187](356736 call tableSize _mt[232] this[155820]))
    const numIndices[152351] "const" "insert auto destroy"
    (492117 'init var' numIndices[152351] call_tmp[620187])
    unknown call_tmp[620192] "maybe param" "maybe type" "temp"
    (620195 'move' call_tmp[620192](152357 call _computeNumChunks numIndices[152351]))
    const numChunks[152358] "const" "insert auto destroy"
    (492119 'init var' numChunks[152358] call_tmp[620192])
    unknown call_tmp[620197] "expr temp" "maybe param" "maybe type" "temp"
    (620200 'move' call_tmp[620197](152401 call _cond_test debugAssocDataPar[151186]))
    if call_tmp[620197]
    {
      (152398 call writeln "### numChunks=" numChunks[152358] ", numIndices=" numIndices[152351])
    }
    unknown call_tmp[620202] "expr temp" "maybe param" "maybe type" "temp"
    (620205 'move' call_tmp[620202](152407 call == numChunks[152358] 1))
    unknown call_tmp[620207] "expr temp" "maybe param" "maybe type" "temp"
    (620210 'move' call_tmp[620207](152906 call _cond_test call_tmp[620202]))
    if call_tmp[620207]
    {
      {
        unknown _indexOfInterest[152449] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[152450] "expr temp" "temp"
        unknown call_tmp[620212] "expr temp" "maybe param" "maybe type" "temp"
        (620215 'move' call_tmp[620212](152464 call - numIndices[152351] 1))
        unknown call_tmp[620217] "expr temp" "maybe param" "maybe type" "temp"
        (620220 'move' call_tmp[620217](152467 call chpl_direct_range_iter 0 call_tmp[620212] 1))
        (152459 'move' _iterator[152450](152457 call _getIterator call_tmp[620217]))
        Defer
        {
          {
            (152483 call _freeIterator _iterator[152450])
          }
        }
        { scopeless type
          (152472 'move' _indexOfInterest[152449](152469 call iteratorIndex _iterator[152450]))
        }
        ForLoop
        {
          unknown slot[152476] "index var" "insert auto destroy"
          (152478 'move' slot[152476] _indexOfInterest[152449])
          {
            unknown call_tmp[620224] "expr temp" "maybe param" "maybe type" "temp"
            (620227 'move' call_tmp[620224](152420 call(356746 call (partial) table _mt[232] this[155820]) slot[152476]))
            unknown call_tmp[620231] "expr temp" "maybe param" "maybe type" "temp"
            (620234 'move' call_tmp[620231](152423 call status _mt[232] call_tmp[620224]))
            unknown call_tmp[620236] "expr temp" "maybe param" "maybe type" "temp"
            (620239 'move' call_tmp[620236](152432 call == call_tmp[620231] full[151196]))
            unknown call_tmp[620241] "expr temp" "maybe param" "maybe type" "temp"
            (620244 'move' call_tmp[620241](152444 call _cond_test call_tmp[620236]))
            if call_tmp[620241]
            {
              unknown yret[470933] "YVV" "temp"
              unknown call_tmp[620248] "expr temp" "maybe param" "maybe type" "temp"
              (620251 'move' call_tmp[620248](152437 call(356753 call (partial) table _mt[232] this[155820]) slot[152476]))
              unknown call_tmp[620255] "expr temp" "maybe param" "maybe type" "temp"
              (620258 'move' call_tmp[620255](152438 call idx _mt[232] call_tmp[620248]))
              (470936 'move' yret[470933](470935 'deref' call_tmp[620255]))
              (470938 yield yret[470933])
            }
          }
          label _continueLabel[152454]
          _indexOfInterest[152449]
          _iterator[152450]
        }
        label _breakLabel[152455]
      }
    }
    {
      {
        unknown tmpIter[152644] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[620260] "expr temp" "maybe param" "maybe type" "temp"
        (620263 'move' call_tmp[620260](152493 call chpl_build_low_bounded_range 0))
        (152647 'move' tmpIter[152644](152496 call # call_tmp[620260] numChunks[152358]))
        unknown isRngDomArr[152886] "maybe param" "temp"
        unknown tmp[402798] "maybe param" "temp"
        (402809 'move' tmp[402798](152888 call isBoundedRange tmpIter[152644]))
        unknown call_tmp[620265] "expr temp" "maybe param" "maybe type" "temp"
        (620268 'move' call_tmp[620265](402811 call _cond_invalid tmp[402798]))
        if call_tmp[620265]
        {
          (402814 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[517779] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[517780] "maybe param" "temp"
        unknown call_tmp[620270] "expr temp" "maybe param" "maybe type" "temp"
        (620273 'move' call_tmp[620270](402799 call isTrue tmp[402798]))
        (517785 'move' tmp[517780](517783 call _cond_test call_tmp[620270]))
        if tmp[517780]
        {
          (517790 'move' tmp[517779](517787 '_paramFoldLogical' tmp[517780] 1))
        }
        {
          unknown tmp[402819] "maybe param" "temp"
          (402830 'move' tmp[402819](152891 call isDomain tmpIter[152644]))
          unknown call_tmp[620275] "expr temp" "maybe param" "maybe type" "temp"
          (620278 'move' call_tmp[620275](402832 call _cond_invalid tmp[402819]))
          if call_tmp[620275]
          {
            (402835 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[517752] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[517753] "maybe param" "temp"
          unknown call_tmp[620280] "expr temp" "maybe param" "maybe type" "temp"
          (620283 'move' call_tmp[620280](402820 call isTrue tmp[402819]))
          (517758 'move' tmp[517753](517756 call _cond_test call_tmp[620280]))
          if tmp[517753]
          {
            (517763 'move' tmp[517752](517760 '_paramFoldLogical' tmp[517753] 1))
          }
          {
            unknown tmp[517765] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[620285] "expr temp" "maybe param" "maybe type" "temp"
            (620288 'move' call_tmp[620285](152894 call isArray tmpIter[152644]))
            (517767 'move' tmp[517765](402824 call isTrue call_tmp[620285]))
            (517772 'move' tmp[517752](517769 '_paramFoldLogical' tmp[517753] tmp[517765]))
          }
          unknown tmp[517792] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (517794 'move' tmp[517792](402803 call isTrue tmp[517752]))
          (517799 'move' tmp[517779](517796 '_paramFoldLogical' tmp[517780] tmp[517792]))
        }
        (152901 'move' isRngDomArr[152886] tmp[517779])
        if isRngDomArr[152886]
        {
          const _coforallCount[152753] "const" "end count" "temp"
          (152822 'move' _coforallCount[152753](152819 call _endCountAlloc 1))
          unknown numTasks[152754] "temp"
          (152806 'move' numTasks[152754](152802 call size _mt[232] tmpIter[152644]))
          (152797 call _upEndCount _coforallCount[152753] 1 numTasks[152754])
          (152794 call chpl_resetTaskSpawn numTasks[152754])
          unknown _indexOfInterest[152761] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[152762] "expr temp" "temp"
          (152771 'move' _iterator[152762](152769 call _getIterator tmpIter[152644]))
          Defer
          {
            {
              (152787 call _freeIterator _iterator[152762])
            }
          }
          { scopeless type
            (152776 'move' _indexOfInterest[152761](152773 call iteratorIndex _iterator[152762]))
          }
          ForLoop
          {
            unknown chunk[152780] "coforall index var" "index var" "insert auto destroy"
            (152782 'move' chunk[152780] _indexOfInterest[152761])
            {
              {
                unknown call_tmp[620292] "expr temp" "maybe param" "maybe type" "temp"
                (620295 'move' call_tmp[620292](152658 call - numIndices[152351] 1))
                unknown call_tmp[620297] "maybe param" "maybe type" "temp"
                (620300 'move' call_tmp[620297](152653 call _computeBlock numIndices[152351] numChunks[152358] chunk[152780] call_tmp[620292]))
                const tmp[152651] "const" "insert auto destroy" "no copy" "temp"
                (492121 'init var' tmp[152651] call_tmp[620297])
                (152663 call _check_tuple_var_decl tmp[152651] 2)
                unknown call_tmp[620302] "maybe param" "maybe type" "temp"
                (620305 'move' call_tmp[620302](152668 call tmp[152651] 1))
                const lo[152666] "const" "insert auto destroy"
                (492123 'init var' lo[152666] call_tmp[620302])
                unknown call_tmp[620307] "maybe param" "maybe type" "temp"
                (620310 'move' call_tmp[620307](152673 call tmp[152651] 2))
                const hi[152671] "const" "insert auto destroy"
                (492125 'init var' hi[152671] call_tmp[620307])
                unknown call_tmp[620312] "expr temp" "maybe param" "maybe type" "temp"
                (620315 'move' call_tmp[620312](152677 call _cond_test debugAssocDataPar[151186]))
                if call_tmp[620312]
                {
                  unknown call_tmp[620317] "expr temp" "maybe param" "maybe type" "temp"
                  (620320 'move' call_tmp[620317](152687 call chpl_build_bounded_range lo[152666] hi[152671]))
                  (152682 call writeln "*** chunk: " chunk[152780] " owns " call_tmp[620317])
                }
                {
                  unknown _indexOfInterest[152692] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[152694] "expr temp" "temp"
                  unknown call_tmp[620322] "expr temp" "maybe param" "maybe type" "temp"
                  (620325 'move' call_tmp[620322](152701 call chpl_direct_range_iter lo[152666] hi[152671] 1))
                  (152696 'move' _iterator[152694](152699 call _getIterator call_tmp[620322]))
                  Defer
                  {
                    {
                      (152707 call _freeIterator _iterator[152694])
                    }
                  }
                  { scopeless type
                    (152711 'move' _indexOfInterest[152692](152714 call iteratorIndex _iterator[152694]))
                  }
                  ForLoop
                  {
                    unknown slot[152719] "index var" "insert auto destroy"
                    (152721 'move' slot[152719] _indexOfInterest[152692])
                    {
                      unknown call_tmp[620329] "expr temp" "maybe param" "maybe type" "temp"
                      (620332 'move' call_tmp[620329](152732 call(356794 call (partial) table _mt[232] this[155820]) slot[152719]))
                      unknown call_tmp[620336] "expr temp" "maybe param" "maybe type" "temp"
                      (620339 'move' call_tmp[620336](152730 call status _mt[232] call_tmp[620329]))
                      unknown call_tmp[620341] "expr temp" "maybe param" "maybe type" "temp"
                      (620344 'move' call_tmp[620341](152728 call == call_tmp[620336] full[151196]))
                      unknown call_tmp[620346] "expr temp" "maybe param" "maybe type" "temp"
                      (620349 'move' call_tmp[620346](152726 call _cond_test call_tmp[620341]))
                      if call_tmp[620346]
                      {
                        unknown yret[470940] "YVV" "temp"
                        unknown call_tmp[620353] "expr temp" "maybe param" "maybe type" "temp"
                        (620356 'move' call_tmp[620353](152744 call(356801 call (partial) table _mt[232] this[155820]) slot[152719]))
                        unknown call_tmp[620360] "expr temp" "maybe param" "maybe type" "temp"
                        (620363 'move' call_tmp[620360](152742 call idx _mt[232] call_tmp[620353]))
                        (470943 'move' yret[470940](470942 'deref' call_tmp[620360]))
                        (470945 yield yret[470940])
                      }
                    }
                    label _continueLabel[152748]
                    _indexOfInterest[152692]
                    _iterator[152694]
                  }
                  label _breakLabel[152750]
                }
              }
              (152756 call _downEndCount _coforallCount[152753] nil[38])
              (152755 'coforall loop')
            }
            label _continueLabel[152766]
            _indexOfInterest[152761]
            _iterator[152762]
          }
          label _breakLabel[152767]
          Defer
          {
            {
              (152809 call _endCountFree _coforallCount[152753])
            }
          }
          (152814 call _waitEndCount _coforallCount[152753] 1 numTasks[152754])
        }
        {
          const _coforallCount[152826] "const" "end count" "temp"
          (152883 'move' _coforallCount[152826](152880 call _endCountAlloc 1))
          unknown _indexOfInterest[152834] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[152835] "expr temp" "temp"
          (152844 'move' _iterator[152835](152842 call _getIterator tmpIter[152644]))
          Defer
          {
            {
              (152860 call _freeIterator _iterator[152835])
            }
          }
          { scopeless type
            (152849 'move' _indexOfInterest[152834](152846 call iteratorIndex _iterator[152835]))
          }
          ForLoop
          {
            unknown chunk[152853] "coforall index var" "index var" "insert auto destroy"
            (152855 'move' chunk[152853] _indexOfInterest[152834])
            (152867 call _upEndCount _coforallCount[152826] 1)
            {
              {
                unknown call_tmp[620365] "expr temp" "maybe param" "maybe type" "temp"
                (620368 'move' call_tmp[620365](152510 call - numIndices[152351] 1))
                unknown call_tmp[620370] "maybe param" "maybe type" "temp"
                (620373 'move' call_tmp[620370](152512 call _computeBlock numIndices[152351] numChunks[152358] chunk[152853] call_tmp[620365]))
                const tmp[152513] "const" "insert auto destroy" "no copy" "temp"
                (492127 'init var' tmp[152513] call_tmp[620370])
                (152520 call _check_tuple_var_decl tmp[152513] 2)
                unknown call_tmp[620375] "maybe param" "maybe type" "temp"
                (620378 'move' call_tmp[620375](152514 call tmp[152513] 1))
                const lo[152498] "const" "insert auto destroy"
                (492129 'init var' lo[152498] call_tmp[620375])
                unknown call_tmp[620380] "maybe param" "maybe type" "temp"
                (620383 'move' call_tmp[620380](152517 call tmp[152513] 2))
                const hi[152500] "const" "insert auto destroy"
                (492131 'init var' hi[152500] call_tmp[620380])
                unknown call_tmp[620385] "expr temp" "maybe param" "maybe type" "temp"
                (620388 'move' call_tmp[620385](152568 call _cond_test debugAssocDataPar[151186]))
                if call_tmp[620385]
                {
                  unknown call_tmp[620390] "expr temp" "maybe param" "maybe type" "temp"
                  (620393 'move' call_tmp[620390](152564 call chpl_build_bounded_range lo[152498] hi[152500]))
                  (152566 call writeln "*** chunk: " chunk[152853] " owns " call_tmp[620390])
                }
                {
                  unknown _indexOfInterest[152606] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[152607] "expr temp" "temp"
                  unknown call_tmp[620395] "expr temp" "maybe param" "maybe type" "temp"
                  (620398 'move' call_tmp[620395](152621 call chpl_direct_range_iter lo[152498] hi[152500] 1))
                  (152616 'move' _iterator[152607](152614 call _getIterator call_tmp[620395]))
                  Defer
                  {
                    {
                      (152637 call _freeIterator _iterator[152607])
                    }
                  }
                  { scopeless type
                    (152626 'move' _indexOfInterest[152606](152623 call iteratorIndex _iterator[152607]))
                  }
                  ForLoop
                  {
                    unknown slot[152630] "index var" "insert auto destroy"
                    (152632 'move' slot[152630] _indexOfInterest[152606])
                    {
                      unknown call_tmp[620402] "expr temp" "maybe param" "maybe type" "temp"
                      (620405 'move' call_tmp[620402](152581 call(356769 call (partial) table _mt[232] this[155820]) slot[152630]))
                      unknown call_tmp[620409] "expr temp" "maybe param" "maybe type" "temp"
                      (620412 'move' call_tmp[620409](152582 call status _mt[232] call_tmp[620402]))
                      unknown call_tmp[620414] "expr temp" "maybe param" "maybe type" "temp"
                      (620417 'move' call_tmp[620414](152589 call == call_tmp[620409] full[151196]))
                      unknown call_tmp[620419] "expr temp" "maybe param" "maybe type" "temp"
                      (620422 'move' call_tmp[620419](152601 call _cond_test call_tmp[620414]))
                      if call_tmp[620419]
                      {
                        unknown yret[470947] "YVV" "temp"
                        unknown call_tmp[620426] "expr temp" "maybe param" "maybe type" "temp"
                        (620429 'move' call_tmp[620426](152594 call(356776 call (partial) table _mt[232] this[155820]) slot[152630]))
                        unknown call_tmp[620433] "expr temp" "maybe param" "maybe type" "temp"
                        (620436 'move' call_tmp[620433](152595 call idx _mt[232] call_tmp[620426]))
                        (470950 'move' yret[470947](470949 'deref' call_tmp[620433]))
                        (470952 yield yret[470947])
                      }
                    }
                    label _continueLabel[152611]
                    _indexOfInterest[152606]
                    _iterator[152607]
                  }
                  label _breakLabel[152612]
                }
              }
              (152829 call _downEndCount _coforallCount[152826] nil[38])
              (152828 'coforall loop')
            }
            label _continueLabel[152839]
            _indexOfInterest[152834]
            _iterator[152835]
          }
          label _breakLabel[152840]
          Defer
          {
            {
              (152871 call _endCountFree _coforallCount[152826])
            }
          }
          (152876 call _waitEndCount _coforallCount[152826] 1)
        }
      }
    }
    (470931 return ret[470929])
  }
  where {
    (152321 call == tag[152311] standalone[695])
  }
  function DefaultAssociativeDom[155766](?).these[152919](arg _mt[155826]:_MT[227], arg this[155824]:DefaultAssociativeDom[155766](?), param arg tag[152916]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[470956] "RVV" "temp"
    unknown call_tmp[620438] "expr temp" "maybe param" "maybe type" "temp"
    (620441 'move' call_tmp[620438](152949 call _cond_test debugDefaultAssoc[151182]))
    if call_tmp[620438]
    {
      (152947 call writeln "*** In domain leader code:")
    }
    const numTasks[152967] "const" "insert auto destroy"
    unknown tmp[517806] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517807] "maybe param" "temp"
    unknown call_tmp[620443] "expr temp" "maybe param" "maybe type" "temp"
    (620446 'move' call_tmp[620443](152957 call == dataParTasksPerLocale[92471] 0))
    (517812 'move' tmp[517807](517810 call _cond_test call_tmp[620443]))
    if tmp[517807]
    {
      unknown tmp[517814] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[620448] "expr temp" "maybe param" "maybe type" "temp"
      (620451 'move' call_tmp[620448](356810 call here[92085]))
      (517816 'move' tmp[517814](152960 call maxTaskPar _mt[232] call_tmp[620448]))
      (517821 'move' tmp[517806](517818 '_paramFoldLogical' tmp[517807] tmp[517814]))
    }
    {
      (517826 'move' tmp[517806](517823 '_paramFoldLogical' tmp[517807] dataParTasksPerLocale[92471]))
    }
    (492133 'init var' numTasks[152967] tmp[517806])
    const ignoreRunning[152971] "const" "insert auto destroy"
    (492135 'init var' ignoreRunning[152971] dataParIgnoreRunningTasks[92476])
    const minIndicesPerTask[152975] "const" "insert auto destroy"
    (492137 'init var' minIndicesPerTask[152975] dataParMinGranularity[92481])
    unknown call_tmp[620457] "maybe param" "maybe type" "temp"
    (620460 'move' call_tmp[620457](356817 call tableSize _mt[232] this[155824]))
    const numIndices[152979] "const" "insert auto destroy"
    (492139 'init var' numIndices[152979] call_tmp[620457])
    unknown call_tmp[620462] "expr temp" "maybe param" "maybe type" "temp"
    (620465 'move' call_tmp[620462](153017 call _cond_test debugAssocDataPar[151186]))
    if call_tmp[620462]
    {
      (153002 call writeln "### numTasks = " numTasks[152967])
      (153009 call writeln "### ignoreRunning = " ignoreRunning[152971])
      (153015 call writeln "### minIndicesPerTask = " minIndicesPerTask[152975])
    }
    unknown call_tmp[620467] "expr temp" "maybe param" "maybe type" "temp"
    (620470 'move' call_tmp[620467](153032 call _cond_test debugDefaultAssoc[151182]))
    if call_tmp[620467]
    {
      (153030 call writeln "    numTasks=" numTasks[152967] " (" ignoreRunning[152971] "), minIndicesPerTask=" minIndicesPerTask[152975])
    }
    unknown call_tmp[620472] "maybe param" "maybe type" "temp"
    (620475 'move' call_tmp[620472](153043 call _computeNumChunks numTasks[152967] ignoreRunning[152971] minIndicesPerTask[152975] numIndices[152979]))
    unknown numChunks[153044] "insert auto destroy"
    (492141 'init var' numChunks[153044] call_tmp[620472])
    unknown call_tmp[620477] "expr temp" "maybe param" "maybe type" "temp"
    (620480 'move' call_tmp[620477](153071 call _cond_test debugDefaultAssoc[151182]))
    if call_tmp[620477]
    {
      (153069 call writeln "    numChunks=" numChunks[153044] "length=" numIndices[152979])
    }
    unknown call_tmp[620482] "expr temp" "maybe param" "maybe type" "temp"
    (620485 'move' call_tmp[620482](153083 call _cond_test debugAssocDataPar[151186]))
    if call_tmp[620482]
    {
      (153081 call writeln "### numChunks=" numChunks[153044])
    }
    unknown call_tmp[620487] "expr temp" "maybe param" "maybe type" "temp"
    (620490 'move' call_tmp[620487](153090 call == numChunks[153044] 1))
    unknown call_tmp[620492] "expr temp" "maybe param" "maybe type" "temp"
    (620495 'move' call_tmp[620492](153396 call _cond_test call_tmp[620487]))
    if call_tmp[620492]
    {
      unknown yret[470960] "YVV" "temp"
      unknown call_tmp[620497] "expr temp" "maybe param" "maybe type" "temp"
      (620500 'move' call_tmp[620497](153095 call - numIndices[152979] 1))
      unknown call_tmp[620502] "expr temp" "maybe param" "maybe type" "temp"
      (620505 'move' call_tmp[620502](153097 call chpl_build_bounded_range 0 call_tmp[620497]))
      unknown call_tmp[620507] "expr temp" "maybe param" "maybe type" "temp"
      (620510 'move' call_tmp[620507](153101 call _build_tuple call_tmp[620502] this[155824]))
      (470963 'move' yret[470960](470962 'deref' call_tmp[620507]))
      (470965 yield yret[470960])
    }
    {
      {
        unknown tmpIter[153185] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[620512] "expr temp" "maybe param" "maybe type" "temp"
        (620515 'move' call_tmp[620512](153108 call chpl_build_low_bounded_range 0))
        (153188 'move' tmpIter[153185](153111 call # call_tmp[620512] numChunks[153044]))
        unknown isRngDomArr[153376] "maybe param" "temp"
        unknown tmp[402840] "maybe param" "temp"
        (402851 'move' tmp[402840](153378 call isBoundedRange tmpIter[153185]))
        unknown call_tmp[620517] "expr temp" "maybe param" "maybe type" "temp"
        (620520 'move' call_tmp[620517](402853 call _cond_invalid tmp[402840]))
        if call_tmp[620517]
        {
          (402856 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[517860] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[517861] "maybe param" "temp"
        unknown call_tmp[620522] "expr temp" "maybe param" "maybe type" "temp"
        (620525 'move' call_tmp[620522](402841 call isTrue tmp[402840]))
        (517866 'move' tmp[517861](517864 call _cond_test call_tmp[620522]))
        if tmp[517861]
        {
          (517871 'move' tmp[517860](517868 '_paramFoldLogical' tmp[517861] 1))
        }
        {
          unknown tmp[402861] "maybe param" "temp"
          (402872 'move' tmp[402861](153381 call isDomain tmpIter[153185]))
          unknown call_tmp[620527] "expr temp" "maybe param" "maybe type" "temp"
          (620530 'move' call_tmp[620527](402874 call _cond_invalid tmp[402861]))
          if call_tmp[620527]
          {
            (402877 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[517833] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[517834] "maybe param" "temp"
          unknown call_tmp[620532] "expr temp" "maybe param" "maybe type" "temp"
          (620535 'move' call_tmp[620532](402862 call isTrue tmp[402861]))
          (517839 'move' tmp[517834](517837 call _cond_test call_tmp[620532]))
          if tmp[517834]
          {
            (517844 'move' tmp[517833](517841 '_paramFoldLogical' tmp[517834] 1))
          }
          {
            unknown tmp[517846] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[620537] "expr temp" "maybe param" "maybe type" "temp"
            (620540 'move' call_tmp[620537](153384 call isArray tmpIter[153185]))
            (517848 'move' tmp[517846](402866 call isTrue call_tmp[620537]))
            (517853 'move' tmp[517833](517850 '_paramFoldLogical' tmp[517834] tmp[517846]))
          }
          unknown tmp[517873] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (517875 'move' tmp[517873](402845 call isTrue tmp[517833]))
          (517880 'move' tmp[517860](517877 '_paramFoldLogical' tmp[517861] tmp[517873]))
        }
        (153391 'move' isRngDomArr[153376] tmp[517860])
        if isRngDomArr[153376]
        {
          const _coforallCount[153243] "const" "end count" "temp"
          (153312 'move' _coforallCount[153243](153309 call _endCountAlloc 1))
          unknown numTasks[153244] "temp"
          (153296 'move' numTasks[153244](153292 call size _mt[232] tmpIter[153185]))
          (153287 call _upEndCount _coforallCount[153243] 1 numTasks[153244])
          (153284 call chpl_resetTaskSpawn numTasks[153244])
          unknown _indexOfInterest[153251] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[153252] "expr temp" "temp"
          (153261 'move' _iterator[153252](153259 call _getIterator tmpIter[153185]))
          Defer
          {
            {
              (153277 call _freeIterator _iterator[153252])
            }
          }
          { scopeless type
            (153266 'move' _indexOfInterest[153251](153263 call iteratorIndex _iterator[153252]))
          }
          ForLoop
          {
            unknown chunk[153270] "coforall index var" "index var" "insert auto destroy"
            (153272 'move' chunk[153270] _indexOfInterest[153251])
            {
              {
                unknown call_tmp[620544] "expr temp" "maybe param" "maybe type" "temp"
                (620547 'move' call_tmp[620544](153199 call - numIndices[152979] 1))
                unknown call_tmp[620549] "maybe param" "maybe type" "temp"
                (620552 'move' call_tmp[620549](153194 call _computeBlock numIndices[152979] numChunks[153044] chunk[153270] call_tmp[620544]))
                const tmp[153192] "const" "insert auto destroy" "no copy" "temp"
                (492143 'init var' tmp[153192] call_tmp[620549])
                (153204 call _check_tuple_var_decl tmp[153192] 2)
                unknown call_tmp[620554] "maybe param" "maybe type" "temp"
                (620557 'move' call_tmp[620554](153209 call tmp[153192] 1))
                const lo[153207] "const" "insert auto destroy"
                (492145 'init var' lo[153207] call_tmp[620554])
                unknown call_tmp[620559] "maybe param" "maybe type" "temp"
                (620562 'move' call_tmp[620559](153214 call tmp[153192] 2))
                const hi[153212] "const" "insert auto destroy"
                (492147 'init var' hi[153212] call_tmp[620559])
                unknown call_tmp[620564] "expr temp" "maybe param" "maybe type" "temp"
                (620567 'move' call_tmp[620564](153218 call _cond_test debugDefaultAssoc[151182]))
                if call_tmp[620564]
                {
                  unknown call_tmp[620569] "expr temp" "maybe param" "maybe type" "temp"
                  (620572 'move' call_tmp[620569](153230 call chpl_build_bounded_range lo[153207] hi[153212]))
                  unknown call_tmp[620574] "expr temp" "maybe param" "maybe type" "temp"
                  (620577 'move' call_tmp[620574](153228 call _build_tuple call_tmp[620569]))
                  (153223 call writeln "*** DI[" chunk[153270] "]: tuple = " call_tmp[620574])
                }
                unknown yret[470967] "YVV" "temp"
                unknown call_tmp[620579] "expr temp" "maybe param" "maybe type" "temp"
                (620582 'move' call_tmp[620579](153238 call chpl_build_bounded_range lo[153207] hi[153212]))
                unknown call_tmp[620584] "expr temp" "maybe param" "maybe type" "temp"
                (620587 'move' call_tmp[620584](153236 call _build_tuple call_tmp[620579] this[155824]))
                (470970 'move' yret[470967](470969 'deref' call_tmp[620584]))
                (470972 yield yret[470967])
              }
              (153246 call _downEndCount _coforallCount[153243] nil[38])
              (153245 'coforall loop')
            }
            label _continueLabel[153256]
            _indexOfInterest[153251]
            _iterator[153252]
          }
          label _breakLabel[153257]
          Defer
          {
            {
              (153299 call _endCountFree _coforallCount[153243])
            }
          }
          (153304 call _waitEndCount _coforallCount[153243] 1 numTasks[153244])
        }
        {
          const _coforallCount[153316] "const" "end count" "temp"
          (153373 'move' _coforallCount[153316](153370 call _endCountAlloc 1))
          unknown _indexOfInterest[153324] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[153325] "expr temp" "temp"
          (153334 'move' _iterator[153325](153332 call _getIterator tmpIter[153185]))
          Defer
          {
            {
              (153350 call _freeIterator _iterator[153325])
            }
          }
          { scopeless type
            (153339 'move' _indexOfInterest[153324](153336 call iteratorIndex _iterator[153325]))
          }
          ForLoop
          {
            unknown chunk[153343] "coforall index var" "index var" "insert auto destroy"
            (153345 'move' chunk[153343] _indexOfInterest[153324])
            (153357 call _upEndCount _coforallCount[153316] 1)
            {
              {
                unknown call_tmp[620589] "expr temp" "maybe param" "maybe type" "temp"
                (620592 'move' call_tmp[620589](153125 call - numIndices[152979] 1))
                unknown call_tmp[620594] "maybe param" "maybe type" "temp"
                (620597 'move' call_tmp[620594](153127 call _computeBlock numIndices[152979] numChunks[153044] chunk[153343] call_tmp[620589]))
                const tmp[153128] "const" "insert auto destroy" "no copy" "temp"
                (492149 'init var' tmp[153128] call_tmp[620594])
                (153135 call _check_tuple_var_decl tmp[153128] 2)
                unknown call_tmp[620599] "maybe param" "maybe type" "temp"
                (620602 'move' call_tmp[620599](153129 call tmp[153128] 1))
                const lo[153113] "const" "insert auto destroy"
                (492151 'init var' lo[153113] call_tmp[620599])
                unknown call_tmp[620604] "maybe param" "maybe type" "temp"
                (620607 'move' call_tmp[620604](153132 call tmp[153128] 2))
                const hi[153115] "const" "insert auto destroy"
                (492153 'init var' hi[153115] call_tmp[620604])
                unknown call_tmp[620609] "expr temp" "maybe param" "maybe type" "temp"
                (620612 'move' call_tmp[620609](153170 call _cond_test debugDefaultAssoc[151182]))
                if call_tmp[620609]
                {
                  unknown call_tmp[620614] "expr temp" "maybe param" "maybe type" "temp"
                  (620617 'move' call_tmp[620614](153164 call chpl_build_bounded_range lo[153113] hi[153115]))
                  unknown call_tmp[620619] "expr temp" "maybe param" "maybe type" "temp"
                  (620622 'move' call_tmp[620619](153166 call _build_tuple call_tmp[620614]))
                  (153168 call writeln "*** DI[" chunk[153343] "]: tuple = " call_tmp[620619])
                }
                unknown yret[470974] "YVV" "temp"
                unknown call_tmp[620624] "expr temp" "maybe param" "maybe type" "temp"
                (620627 'move' call_tmp[620624](153177 call chpl_build_bounded_range lo[153113] hi[153115]))
                unknown call_tmp[620629] "expr temp" "maybe param" "maybe type" "temp"
                (620632 'move' call_tmp[620629](153181 call _build_tuple call_tmp[620624] this[155824]))
                (470977 'move' yret[470974](470976 'deref' call_tmp[620629]))
                (470979 yield yret[470974])
              }
              (153319 call _downEndCount _coforallCount[153316] nil[38])
              (153318 'coforall loop')
            }
            label _continueLabel[153329]
            _indexOfInterest[153324]
            _iterator[153325]
          }
          label _breakLabel[153330]
          Defer
          {
            {
              (153361 call _endCountFree _coforallCount[153316])
            }
          }
          (153366 call _waitEndCount _coforallCount[153316] 1)
        }
      }
    }
    (470958 return ret[470956])
  }
  where {
    (152926 call == tag[152916] leader[691])
  }
  function DefaultAssociativeDom[155766](?).these[153409](arg _mt[155830]:_MT[227], arg this[155828]:DefaultAssociativeDom[155766](?), param arg tag[153406]:iterKind[697], arg followThis[153411]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[470983] "RVV" "temp"
    unknown tmp[153426] "no auto destroy" "no copy" "temp"
    (492155 'init var' tmp[153426] followThis[153411])
    (153433 call _check_tuple_var_decl tmp[153426] 2)
    unknown call_tmp[620634] "maybe param" "maybe type" "temp"
    (620637 'move' call_tmp[620634](153427 call tmp[153426] 1))
    unknown chunk[153420] "insert auto destroy"
    (492157 'init var' chunk[153420] call_tmp[620634])
    unknown call_tmp[620639] "maybe param" "maybe type" "temp"
    (620642 'move' call_tmp[620639](153430 call tmp[153426] 2))
    unknown followThisDom[153422] "insert auto destroy"
    (492159 'init var' followThisDom[153422] call_tmp[620639])
    unknown call_tmp[620644] "expr temp" "maybe param" "maybe type" "temp"
    (620647 'move' call_tmp[620644](153446 call _cond_test debugDefaultAssoc[151182]))
    if call_tmp[620644]
    {
      (153444 call writeln "In domain follower code: Following " chunk[153420])
    }
    unknown call_tmp[620649] "maybe param" "maybe type" "temp"
    (620652 'move' call_tmp[620649](153453 call == followThisDom[153422] this[155828]))
    const sameDom[153455] "const" "insert auto destroy"
    (492161 'init var' sameDom[153455] call_tmp[620649])
    unknown call_tmp[620654] "expr temp" "maybe param" "maybe type" "temp"
    (620657 'move' call_tmp[620654](153459 call ! sameDom[153455]))
    unknown call_tmp[620659] "expr temp" "maybe param" "maybe type" "temp"
    (620662 'move' call_tmp[620659](153496 call _cond_test call_tmp[620654]))
    if call_tmp[620659]
    {
      unknown call_tmp[620666] "expr temp" "maybe param" "maybe type" "temp"
      (620669 'move' call_tmp[620666](153462 call dsiNumIndices _mt[232] followThisDom[153422]))
      unknown call_tmp[620673] "expr temp" "maybe param" "maybe type" "temp"
      (620676 'move' call_tmp[620673](153466 call dsiNumIndices _mt[232] this[155828]))
      unknown call_tmp[620678] "expr temp" "maybe param" "maybe type" "temp"
      (620681 'move' call_tmp[620678](153469 call != call_tmp[620666] call_tmp[620673]))
      unknown call_tmp[620683] "expr temp" "maybe param" "maybe type" "temp"
      (620686 'move' call_tmp[620683](153491 call _cond_test call_tmp[620678]))
      if call_tmp[620683]
      {
        (153489 call halt "zippered associative domains do not match")
      }
    }
    unknown call_tmp[620690] "maybe param" "maybe type" "temp"
    (620693 'move' call_tmp[620690](153504 call table _mt[232] followThisDom[153422]))
    unknown otherTable[153507] "insert auto destroy"
    (492163 'init var' otherTable[153507] call_tmp[620690])
    {
      unknown _indexOfInterest[153609] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[153610] "expr temp" "temp"
      unknown call_tmp[620697] "expr temp" "maybe param" "maybe type" "temp"
      (620700 'move' call_tmp[620697](153623 call low _mt[232] chunk[153420]))
      unknown call_tmp[620704] "expr temp" "maybe param" "maybe type" "temp"
      (620707 'move' call_tmp[620704](153627 call high _mt[232] chunk[153420]))
      unknown call_tmp[620709] "expr temp" "maybe param" "maybe type" "temp"
      (620712 'move' call_tmp[620709](153630 call chpl_direct_range_iter call_tmp[620697] call_tmp[620704] 1))
      (153619 'move' _iterator[153610](153617 call _getIterator call_tmp[620709]))
      Defer
      {
        {
          (153646 call _freeIterator _iterator[153610])
        }
      }
      { scopeless type
        (153635 'move' _indexOfInterest[153609](153632 call iteratorIndex _iterator[153610]))
      }
      ForLoop
      {
        unknown slot[153639] "index var" "insert auto destroy"
        (153641 'move' slot[153639] _indexOfInterest[153609])
        {
          unknown call_tmp[620714] "maybe param" "maybe type" "temp"
          (620717 'move' call_tmp[620714](153524 call otherTable[153507] slot[153639]))
          unknown entry[153525] "insert auto destroy"
          (492165 'init var' entry[153525] call_tmp[620714])
          unknown call_tmp[620721] "expr temp" "maybe param" "maybe type" "temp"
          (620724 'move' call_tmp[620721](153530 call status _mt[232] entry[153525]))
          unknown call_tmp[620726] "expr temp" "maybe param" "maybe type" "temp"
          (620729 'move' call_tmp[620726](153537 call == call_tmp[620721] full[151196]))
          unknown call_tmp[620731] "expr temp" "maybe param" "maybe type" "temp"
          (620734 'move' call_tmp[620731](153605 call _cond_test call_tmp[620726]))
          if call_tmp[620731]
          {
            unknown idx[153540] "insert auto destroy"
            (492167 'init var' idx[153540] slot[153639])
            unknown call_tmp[620736] "expr temp" "maybe param" "maybe type" "temp"
            (620739 'move' call_tmp[620736](153545 call ! sameDom[153455]))
            unknown call_tmp[620741] "expr temp" "maybe param" "maybe type" "temp"
            (620744 'move' call_tmp[620741](153592 call _cond_test call_tmp[620736]))
            if call_tmp[620741]
            {
              unknown call_tmp[620750] "expr temp" "maybe param" "maybe type" "temp"
              (620753 'move' call_tmp[620750](153554 call idx _mt[232] entry[153525]))
              unknown call_tmp[620755] "maybe param" "maybe type" "temp"
              (620758 'move' call_tmp[620755](153560 call(356882 call (partial) _findFilledSlot _mt[232] this[155828]) call_tmp[620750](needLock = 0)))
              const tmp[153561] "const" "insert auto destroy" "no copy" "temp"
              (492169 'init var' tmp[153561] call_tmp[620755])
              (153568 call _check_tuple_var_decl tmp[153561] 2)
              unknown call_tmp[620760] "maybe param" "maybe type" "temp"
              (620763 'move' call_tmp[620760](153562 call tmp[153561] 1))
              const match[153547] "const" "insert auto destroy"
              (492171 'init var' match[153547] call_tmp[620760])
              unknown call_tmp[620765] "maybe param" "maybe type" "temp"
              (620768 'move' call_tmp[620765](153565 call tmp[153561] 2))
              const loc[153549] "const" "insert auto destroy"
              (492173 'init var' loc[153549] call_tmp[620765])
              unknown call_tmp[620770] "expr temp" "maybe param" "maybe type" "temp"
              (620773 'move' call_tmp[620770](153575 call ! match[153547]))
              unknown call_tmp[620775] "expr temp" "maybe param" "maybe type" "temp"
              (620778 'move' call_tmp[620775](153582 call _cond_test call_tmp[620770]))
              if call_tmp[620775]
              {
                (153580 call halt "zippered associative domains do not match")
              }
              (153589 call = idx[153540] loc[153549])
            }
            unknown yret[470987] "YVV" "temp"
            unknown call_tmp[620782] "expr temp" "maybe param" "maybe type" "temp"
            (620785 'move' call_tmp[620782](153599 call(356891 call (partial) table _mt[232] this[155828]) idx[153540]))
            unknown call_tmp[620789] "expr temp" "maybe param" "maybe type" "temp"
            (620792 'move' call_tmp[620789](153600 call idx _mt[232] call_tmp[620782]))
            (470990 'move' yret[470987](470989 'deref' call_tmp[620789]))
            (470992 yield yret[470987])
          }
        }
        label _continueLabel[153614]
        _indexOfInterest[153609]
        _iterator[153610]
      }
      label _breakLabel[153615]
    }
    (470985 return ret[470983])
  }
  where {
    (153418 call == tag[153406] follower[693])
  }
  function DefaultAssociativeDom[155766](?).dsiMyDist[153658](arg _mt[155834]:_MT[227], arg this[155832]:DefaultAssociativeDom[155766](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[470996] "RVV" "temp"
    unknown call_tmp[620796] "expr temp" "maybe param" "maybe type" "temp"
    (620799 'move' call_tmp[620796](356900 call dist _mt[232] this[155832]))
    (471002 'move' ret[470996](471001 'coerce' call_tmp[620796] unmanaged BaseDist[389902]))
    (470998 return ret[470996])
  }
  { scopeless type
    unmanaged BaseDist[389902]
  }
  function DefaultAssociativeDom[155766](?).dsiClear[153671](arg _mt[155838]:_MT[227], arg this[155836]:DefaultAssociativeDom[155766](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    {
      const tmp[153744] "const" "temp"
      unknown call_tmp[620801] "expr temp" "maybe param" "maybe type" "temp"
      (620804 'move' call_tmp[620801](153741 '_wide_get_locale' this[155836]))
      (153745 'move' tmp[153744](153742 'deref' call_tmp[620801]))
      {
        (153676 call(356905 call (partial) lockTable _mt[232] this[155836]))
        {
          unknown _indexOfInterest[153696] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[153697] "expr temp" "temp"
          unknown call_tmp[620810] "expr temp" "maybe param" "maybe type" "temp"
          (620813 'move' call_tmp[620810](356910 call tableDom _mt[232] this[155836]))
          (153706 'move' _iterator[153697](153704 call _getIterator call_tmp[620810]))
          Defer
          {
            {
              (153722 call _freeIterator _iterator[153697])
            }
          }
          { scopeless type
            (153711 'move' _indexOfInterest[153696](153708 call iteratorIndex _iterator[153697]))
          }
          ForLoop
          {
            unknown slot[153715] "index var" "insert auto destroy"
            (153717 'move' slot[153715] _indexOfInterest[153696])
            {
              unknown call_tmp[620817] "expr temp" "maybe param" "maybe type" "temp"
              (620820 'move' call_tmp[620817](153684 call(356915 call (partial) table _mt[232] this[155836]) slot[153715]))
              unknown call_tmp[620824] "expr temp" "maybe param" "maybe type" "temp"
              (620827 'move' call_tmp[620824](153685 call status _mt[232] call_tmp[620817]))
              (153692 call = call_tmp[620824] empty[151194])
            }
            label _continueLabel[153701]
            _indexOfInterest[153696]
            _iterator[153697]
          }
          label _breakLabel[153702]
        }
        unknown call_tmp[620831] "expr temp" "maybe param" "maybe type" "temp"
        (620834 'move' call_tmp[620831](356922 call numEntries _mt[232] this[155836]))
        (153735 call(153730 call (partial) write _mt[232] call_tmp[620831]) 0)
        (153739 call(356926 call (partial) unlockTable _mt[232] this[155836]))
      }
    }
    (471004 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).dsiMember[153758](arg _mt[155842]:_MT[227], arg this[155840]:DefaultAssociativeDom[155766](?), arg idx[153755] :
  (356931 call idxType _mt[232] this[155840])) : _unknown[43] "method" "primary method"
  {
    unknown ret[471008] "RVV" "temp"
    unknown call_tmp[620844] "expr temp" "maybe param" "maybe type" "temp"
    (620847 'move' call_tmp[620844](153764 call(356935 call (partial) _findFilledSlot _mt[232] this[155840]) idx[153755]))
    unknown call_tmp[620849] "expr temp" "maybe param" "maybe type" "temp"
    (620852 'move' call_tmp[620849](153767 call call_tmp[620844] 1))
    (471014 'move' ret[471008](471013 'coerce' call_tmp[620849] bool[10]))
    (471010 return ret[471008])
  }
  { scopeless type
    bool[10]
  }
  function DefaultAssociativeDom[155766](?).dsiAdd[153778](arg _mt[155846]:_MT[227], arg this[155844]:DefaultAssociativeDom[155766](?), arg idx[153776]:_any[170](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[471018] "RVV" "temp"
    unknown call_tmp[620856] "expr temp" "maybe param" "maybe type" "temp"
    (620859 'move' call_tmp[620856](153783 call(356940 call (partial) _addWrapper _mt[232] this[155844]) idx[153776]))
    unknown call_tmp[620861] "maybe param" "maybe type" "temp"
    (620864 'move' call_tmp[620861](153786 call call_tmp[620856] 2))
    const numInds[153787] "const" "insert auto destroy"
    (492175 'init var' numInds[153787] call_tmp[620861])
    (471023 'move' ret[471018](471022 'deref' numInds[153787]))
    (471020 return ret[471018])
  }
  function DefaultAssociativeDom[155766](?)._addWrapper[153802](arg _mt[155850]:_MT[227], arg this[155848]:DefaultAssociativeDom[155766](?), arg idx[153799] :
  (356947 call idxType _mt[232] this[155848]), in arg slotNum[153811] :
  unknown call_tmp[620870] "expr temp" "maybe param" "maybe type" "temp" =
  (153809 call - 1), arg needLock[153816] :
  (692400 call parSafe _mt[232] this[155848]) =
  (356957 call parSafe _mt[232] this[155848])) : _unknown[43] "method" "primary method"
  {
    unknown ret[471027] "RVV" "temp"
    const inSlot[153820] "const" "insert auto destroy"
    (492177 'init var' inSlot[153820] slotNum[153811])
    unknown retVal[153825] "insert auto destroy"
    (492179 'init var' retVal[153825] 0)
    {
      const tmp[153932] "const" "temp"
      unknown call_tmp[620877] "expr temp" "maybe param" "maybe type" "temp"
      (620880 'move' call_tmp[620877](153929 '_wide_get_locale' this[155848]))
      (153933 'move' tmp[153932](153930 'deref' call_tmp[620877]))
      {
        unknown tmp[402882] "maybe param" "temp"
        (402893 'move' tmp[402882](356964 call parSafe _mt[232] this[155848]))
        unknown call_tmp[620884] "expr temp" "maybe param" "maybe type" "temp"
        (620887 'move' call_tmp[620884](402895 call _cond_invalid tmp[402882]))
        if call_tmp[620884]
        {
          (402898 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[517887] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[517888] "maybe param" "temp"
        unknown call_tmp[620889] "expr temp" "maybe param" "maybe type" "temp"
        (620892 'move' call_tmp[620889](402883 call isTrue tmp[402882]))
        (517893 'move' tmp[517888](517891 call _cond_test call_tmp[620889]))
        if tmp[517888]
        {
          unknown tmp[517895] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (517897 'move' tmp[517895](402886 call isTrue needLock[153816]))
          (517902 'move' tmp[517887](517899 '_paramFoldLogical' tmp[517888] tmp[517895]))
        }
        {
          (517907 'move' tmp[517887](517904 '_paramFoldLogical' tmp[517888] 0))
        }
        unknown call_tmp[620894] "expr temp" "maybe param" "maybe type" "temp"
        (620897 'move' call_tmp[620894](153837 call _cond_test tmp[517887]))
        if call_tmp[620894]
        {
          (153835 call(356969 call (partial) lockTable _mt[232] this[155848]))
        }
        unknown tmp[402903] "maybe param" "temp"
        (402914 'move' tmp[402903](356974 call parSafe _mt[232] this[155848]))
        unknown call_tmp[620903] "expr temp" "maybe param" "maybe type" "temp"
        (620906 'move' call_tmp[620903](402916 call _cond_invalid tmp[402903]))
        if call_tmp[620903]
        {
          (402919 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown findAgain[153847] "insert auto destroy"
        unknown tmp[517914] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[517915] "maybe param" "temp"
        unknown call_tmp[620908] "expr temp" "maybe param" "maybe type" "temp"
        (620911 'move' call_tmp[620908](402904 call isTrue tmp[402903]))
        (517920 'move' tmp[517915](517918 call _cond_test call_tmp[620908]))
        if tmp[517915]
        {
          unknown tmp[517922] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (517924 'move' tmp[517922](402907 call isTrue needLock[153816]))
          (517929 'move' tmp[517914](517926 '_paramFoldLogical' tmp[517915] tmp[517922]))
        }
        {
          (517934 'move' tmp[517914](517931 '_paramFoldLogical' tmp[517915] 0))
        }
        (492181 'init var' findAgain[153847] tmp[517914])
        unknown call_tmp[620915] "expr temp" "maybe param" "maybe type" "temp"
        (620918 'move' call_tmp[620915](356980 call numEntries _mt[232] this[155848]))
        unknown call_tmp[620922] "expr temp" "maybe param" "maybe type" "temp"
        (620925 'move' call_tmp[620922](153855 call(153851 call (partial) read _mt[232] call_tmp[620915])))
        unknown call_tmp[620927] "expr temp" "maybe param" "maybe type" "temp"
        (620930 'move' call_tmp[620927](153857 call + call_tmp[620922] 1))
        unknown call_tmp[620932] "expr temp" "maybe param" "maybe type" "temp"
        (620935 'move' call_tmp[620932](153860 call * call_tmp[620927] 2))
        unknown call_tmp[620939] "expr temp" "maybe param" "maybe type" "temp"
        (620942 'move' call_tmp[620939](356985 call tableSize _mt[232] this[155848]))
        unknown call_tmp[620944] "expr temp" "maybe param" "maybe type" "temp"
        (620947 'move' call_tmp[620944](153863 call > call_tmp[620932] call_tmp[620939]))
        unknown call_tmp[620949] "expr temp" "maybe param" "maybe type" "temp"
        (620952 'move' call_tmp[620949](153877 call _cond_test call_tmp[620944]))
        if call_tmp[620949]
        {
          (153869 call(356989 call (partial) _resize _mt[232] this[155848])(grow = 1))
          (153874 call = findAgain[153847] 1)
        }
        unknown call_tmp[620956] "expr temp" "maybe param" "maybe type" "temp"
        (620959 'move' call_tmp[620956](153910 call _cond_test findAgain[153847]))
        if call_tmp[620956]
        {
          unknown tmp[328689] "expr temp" "maybe param" "maybe type" "temp"
          unknown tmp[328714] "maybe param" "temp"
          (328717 'move' tmp[328714](328715 'addr of' slotNum[153811]))
          unknown tmp[328725] "maybe param" "temp"
          (328728 'move' tmp[328725](328726 'addr of' retVal[153825]))
          unknown call_tmp[620963] "expr temp" "maybe param" "maybe type" "temp"
          (620966 'move' call_tmp[620963](153891 call - 1))
          (328690 'move' tmp[328689](153893 call(356999 call (partial) _add _mt[232] this[155848]) idx[153799] call_tmp[620963]))
          { scopeless
            unknown call_tmp[620970] "expr temp" "maybe param" "maybe type" "temp"
            (620973 'move' call_tmp[620970](328696 call size _mt[232] tmp[328689]))
            unknown call_tmp[620975] "expr temp" "maybe param" "maybe type" "temp"
            (620978 'move' call_tmp[620975](328699 call != 2 call_tmp[620970]))
            unknown call_tmp[620980] "expr temp" "maybe param" "maybe type" "temp"
            (620983 'move' call_tmp[620980](328706 call _cond_test call_tmp[620975]))
            if call_tmp[620980]
            {
              (328702 call compilerError "tuple size must match the number of grouped variables" 0)
            }
          }
          unknown call_tmp[620985] "expr temp" "maybe param" "maybe type" "temp"
          (620988 'move' call_tmp[620985](328712 call tmp[328689] 1))
          (328719 call = tmp[328714] call_tmp[620985])
          unknown call_tmp[620990] "expr temp" "maybe param" "maybe type" "temp"
          (620993 'move' call_tmp[620990](328723 call tmp[328689] 2))
          (328730 call = tmp[328725] call_tmp[620990])
        }
        {
          unknown tmp[328733] "expr temp" "maybe param" "maybe type" "temp"
          unknown tmp[328758] "maybe param" "temp"
          (328761 'move' tmp[328758](328759 'addr of' retVal[153825]))
          (328734 'move' tmp[328733](153906 call(357005 call (partial) _add _mt[232] this[155848]) idx[153799] inSlot[153820]))
          { scopeless
            unknown call_tmp[620999] "expr temp" "maybe param" "maybe type" "temp"
            (621002 'move' call_tmp[620999](328740 call size _mt[232] tmp[328733]))
            unknown call_tmp[621004] "expr temp" "maybe param" "maybe type" "temp"
            (621007 'move' call_tmp[621004](328743 call != 2 call_tmp[620999]))
            unknown call_tmp[621009] "expr temp" "maybe param" "maybe type" "temp"
            (621012 'move' call_tmp[621009](328750 call _cond_test call_tmp[621004]))
            if call_tmp[621009]
            {
              (328746 call compilerError "tuple size must match the number of grouped variables" 0)
            }
          }
          unknown call_tmp[621014] "expr temp" "maybe param" "maybe type" "temp"
          (621017 'move' call_tmp[621014](328756 call tmp[328733] 2))
          (328763 call = tmp[328758] call_tmp[621014])
        }
        unknown tmp[402924] "maybe param" "temp"
        (402935 'move' tmp[402924](357012 call parSafe _mt[232] this[155848]))
        unknown call_tmp[621021] "expr temp" "maybe param" "maybe type" "temp"
        (621024 'move' call_tmp[621021](402937 call _cond_invalid tmp[402924]))
        if call_tmp[621021]
        {
          (402940 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[517941] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[517942] "maybe param" "temp"
        unknown call_tmp[621026] "expr temp" "maybe param" "maybe type" "temp"
        (621029 'move' call_tmp[621026](402925 call isTrue tmp[402924]))
        (517947 'move' tmp[517942](517945 call _cond_test call_tmp[621026]))
        if tmp[517942]
        {
          unknown tmp[517949] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (517951 'move' tmp[517949](402928 call isTrue needLock[153816]))
          (517956 'move' tmp[517941](517953 '_paramFoldLogical' tmp[517942] tmp[517949]))
        }
        {
          (517961 'move' tmp[517941](517958 '_paramFoldLogical' tmp[517942] 0))
        }
        unknown call_tmp[621031] "expr temp" "maybe param" "maybe type" "temp"
        (621034 'move' call_tmp[621031](153924 call _cond_test tmp[517941]))
        if call_tmp[621031]
        {
          (153922 call(357017 call (partial) unlockTable _mt[232] this[155848]))
        }
      }
    }
    unknown call_tmp[621038] "expr temp" "maybe param" "maybe type" "temp"
    (621041 'move' call_tmp[621038](153940 call _build_tuple slotNum[153811] retVal[153825]))
    (471032 'move' ret[471027](471031 'deref' call_tmp[621038]))
    (471029 return ret[471027])
  }
  function DefaultAssociativeDom[155766](?)._add[153952](arg _mt[155854]:_MT[227], arg this[155852]:DefaultAssociativeDom[155766](?), arg idx[153949] :
  (357024 call idxType _mt[232] this[155852]), in arg slotNum[153961] :
  unknown call_tmp[621047] "expr temp" "maybe param" "maybe type" "temp" =
  (153959 call - 1)) : _unknown[43] "method" "primary method" "unsafe"
  {
    unknown ret[471036] "RVV" "temp"
    unknown call_tmp[621052] "expr temp" "maybe param" "maybe type" "temp"
    (621055 'move' call_tmp[621052](153968 call - 1))
    unknown call_tmp[621057] "maybe param" "maybe type" "temp"
    (621060 'move' call_tmp[621057](153970 call != slotNum[153961] call_tmp[621052]))
    unknown foundSlot[153972] "insert auto destroy"
    (492183 'init var' foundSlot[153972] call_tmp[621057] bool[10])
    unknown call_tmp[621062] "expr temp" "maybe param" "maybe type" "temp"
    (621065 'move' call_tmp[621062](153977 call ! foundSlot[153972]))
    unknown call_tmp[621067] "expr temp" "maybe param" "maybe type" "temp"
    (621070 'move' call_tmp[621067](153991 call _cond_test call_tmp[621062]))
    if call_tmp[621067]
    {
      unknown tmp[328766] "expr temp" "maybe param" "maybe type" "temp"
      unknown tmp[328791] "maybe param" "temp"
      (328794 'move' tmp[328791](328792 'addr of' foundSlot[153972]))
      unknown tmp[328802] "maybe param" "temp"
      (328805 'move' tmp[328802](328803 'addr of' slotNum[153961]))
      (328767 'move' tmp[328766](153987 call(357039 call (partial) _findEmptySlot _mt[232] this[155852]) idx[153949]))
      { scopeless
        unknown call_tmp[621076] "expr temp" "maybe param" "maybe type" "temp"
        (621079 'move' call_tmp[621076](328773 call size _mt[232] tmp[328766]))
        unknown call_tmp[621081] "expr temp" "maybe param" "maybe type" "temp"
        (621084 'move' call_tmp[621081](328776 call != 2 call_tmp[621076]))
        unknown call_tmp[621086] "expr temp" "maybe param" "maybe type" "temp"
        (621089 'move' call_tmp[621086](328783 call _cond_test call_tmp[621081]))
        if call_tmp[621086]
        {
          (328779 call compilerError "tuple size must match the number of grouped variables" 0)
        }
      }
      unknown call_tmp[621091] "expr temp" "maybe param" "maybe type" "temp"
      (621094 'move' call_tmp[621091](328789 call tmp[328766] 1))
      (328796 call = tmp[328791] call_tmp[621091])
      unknown call_tmp[621096] "expr temp" "maybe param" "maybe type" "temp"
      (621099 'move' call_tmp[621096](328800 call tmp[328766] 2))
      (328807 call = tmp[328802] call_tmp[621096])
    }
    unknown call_tmp[621101] "expr temp" "maybe param" "maybe type" "temp"
    (621104 'move' call_tmp[621101](154178 call _cond_test foundSlot[153972]))
    if call_tmp[621101]
    {
      unknown call_tmp[621108] "expr temp" "maybe param" "maybe type" "temp"
      (621111 'move' call_tmp[621108](154000 call(357046 call (partial) table _mt[232] this[155852]) slotNum[153961]))
      unknown call_tmp[621115] "expr temp" "maybe param" "maybe type" "temp"
      (621118 'move' call_tmp[621115](154001 call status _mt[232] call_tmp[621108]))
      (154008 call = call_tmp[621115] full[151196])
      unknown call_tmp[621122] "expr temp" "maybe param" "maybe type" "temp"
      (621125 'move' call_tmp[621122](154015 call(357053 call (partial) table _mt[232] this[155852]) slotNum[153961]))
      unknown call_tmp[621129] "expr temp" "maybe param" "maybe type" "temp"
      (621132 'move' call_tmp[621129](154016 call idx _mt[232] call_tmp[621122]))
      (154020 call = call_tmp[621129] idx[153949])
      unknown call_tmp[621136] "expr temp" "maybe param" "maybe type" "temp"
      (621139 'move' call_tmp[621136](357060 call numEntries _mt[232] this[155852]))
      (154029 call(154024 call (partial) add _mt[232] call_tmp[621136]) 1)
      {
        unknown _indexOfInterest[154043] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[154044] "expr temp" "temp"
        unknown call_tmp[621145] "expr temp" "maybe param" "maybe type" "temp"
        (621148 'move' call_tmp[621145](357065 call _arrs _mt[232] this[155852]))
        (154053 'move' _iterator[154044](154051 call _getIterator call_tmp[621145]))
        Defer
        {
          {
            (154069 call _freeIterator _iterator[154044])
          }
        }
        { scopeless type
          (154058 'move' _indexOfInterest[154043](154055 call iteratorIndex _iterator[154044]))
        }
        ForLoop
        {
          unknown a[154062] "index var" "insert auto destroy"
          (154064 'move' a[154062] _indexOfInterest[154043])
          (154041 call(154036 call (partial) clearEntry _mt[232] a[154062]) idx[153949])
          label _continueLabel[154048]
          _indexOfInterest[154043]
          _iterator[154044]
        }
        label _breakLabel[154049]
      }
    }
    {
      unknown call_tmp[621152] "expr temp" "maybe param" "maybe type" "temp"
      (621155 'move' call_tmp[621152](154078 call < slotNum[153961] 0))
      unknown call_tmp[621157] "expr temp" "maybe param" "maybe type" "temp"
      (621160 'move' call_tmp[621157](154166 call _cond_test call_tmp[621152]))
      if call_tmp[621157]
      {
        unknown call_tmp[621164] "expr temp" "maybe param" "maybe type" "temp"
        (621167 'move' call_tmp[621164](357074 call numEntries _mt[232] this[155852]))
        unknown call_tmp[621171] "expr temp" "maybe param" "maybe type" "temp"
        (621174 'move' call_tmp[621171](154120 call(154116 call (partial) read _mt[232] call_tmp[621164])))
        unknown call_tmp[621178] "expr temp" "maybe param" "maybe type" "temp"
        (621181 'move' call_tmp[621178](357079 call tableSize _mt[232] this[155852]))
        (154154 call halt "couldn't add " idx[153949] " -- " call_tmp[621171] " / " call_tmp[621178] " taken")
        unknown call_tmp[621183] "expr temp" "maybe param" "maybe type" "temp"
        (621186 'move' call_tmp[621183](154158 call - 1))
        unknown call_tmp[621188] "expr temp" "maybe param" "maybe type" "temp"
        (621191 'move' call_tmp[621188](154162 call _build_tuple call_tmp[621183] 0))
        (471041 'move' ret[471036](471040 'deref' call_tmp[621188]))
        gotoReturn _end__add[471034] _end__add[471034]
      }
      unknown call_tmp[621193] "expr temp" "maybe param" "maybe type" "temp"
      (621196 'move' call_tmp[621193](154174 call _build_tuple slotNum[153961] 0))
      (471046 'move' ret[471036](471045 'deref' call_tmp[621193]))
      gotoReturn _end__add[471034] _end__add[471034]
    }
    unknown call_tmp[621198] "expr temp" "maybe param" "maybe type" "temp"
    (621201 'move' call_tmp[621198](154185 call _build_tuple slotNum[153961] 1))
    (471051 'move' ret[471036](471050 'deref' call_tmp[621198]))
    label _end__add[471034]
    (471038 return ret[471036])
  }
  function DefaultAssociativeDom[155766](?).dsiRemove[154197](arg _mt[155858]:_MT[227], arg this[155856]:DefaultAssociativeDom[155766](?), arg idx[154194] :
  (357086 call idxType _mt[232] this[155856])) : _unknown[43] "method" "primary method"
  {
    unknown ret[471055] "RVV" "temp"
    unknown retval[154200] "insert auto destroy"
    (492185 'init var' retval[154200] 1)
    {
      const tmp[154350] "const" "temp"
      unknown call_tmp[621205] "expr temp" "maybe param" "maybe type" "temp"
      (621208 'move' call_tmp[621205](154347 '_wide_get_locale' this[155856]))
      (154351 'move' tmp[154350](154348 'deref' call_tmp[621205]))
      {
        (154207 call(357091 call (partial) lockTable _mt[232] this[155856]))
        unknown call_tmp[621216] "expr temp" "maybe param" "maybe type" "temp"
        (621219 'move' call_tmp[621216](357101 call parSafe _mt[232] this[155856]))
        unknown call_tmp[621221] "expr temp" "maybe param" "maybe type" "temp"
        (621224 'move' call_tmp[621221](154219 call ! call_tmp[621216]))
        unknown call_tmp[621226] "maybe param" "maybe type" "temp"
        (621229 'move' call_tmp[621226](154222 call(357095 call (partial) _findFilledSlot _mt[232] this[155856]) idx[154194](needLock = call_tmp[621221])))
        const tmp[154223] "const" "insert auto destroy" "no copy" "temp"
        (492187 'init var' tmp[154223] call_tmp[621226])
        (154230 call _check_tuple_var_decl tmp[154223] 2)
        unknown call_tmp[621231] "maybe param" "maybe type" "temp"
        (621234 'move' call_tmp[621231](154224 call tmp[154223] 1))
        const foundSlot[154210] "const" "insert auto destroy"
        (492189 'init var' foundSlot[154210] call_tmp[621231])
        unknown call_tmp[621236] "maybe param" "maybe type" "temp"
        (621239 'move' call_tmp[621236](154227 call tmp[154223] 2))
        const slotNum[154212] "const" "insert auto destroy"
        (492191 'init var' slotNum[154212] call_tmp[621236])
        unknown call_tmp[621241] "expr temp" "maybe param" "maybe type" "temp"
        (621244 'move' call_tmp[621241](154310 call _cond_test foundSlot[154210]))
        if call_tmp[621241]
        {
          {
            unknown _indexOfInterest[154246] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[154247] "expr temp" "temp"
            unknown call_tmp[621248] "expr temp" "maybe param" "maybe type" "temp"
            (621251 'move' call_tmp[621248](357107 call _arrs _mt[232] this[155856]))
            (154256 'move' _iterator[154247](154254 call _getIterator call_tmp[621248]))
            Defer
            {
              {
                (154272 call _freeIterator _iterator[154247])
              }
            }
            { scopeless type
              (154261 'move' _indexOfInterest[154246](154258 call iteratorIndex _iterator[154247]))
            }
            ForLoop
            {
              unknown a[154265] "index var" "insert auto destroy"
              (154267 'move' a[154265] _indexOfInterest[154246])
              (154244 call(154239 call (partial) clearEntry _mt[232] a[154265]) idx[154194])
              label _continueLabel[154251]
              _indexOfInterest[154246]
              _iterator[154247]
            }
            label _breakLabel[154252]
          }
          unknown call_tmp[621257] "expr temp" "maybe param" "maybe type" "temp"
          (621260 'move' call_tmp[621257](154283 call(357114 call (partial) table _mt[232] this[155856]) slotNum[154212]))
          unknown call_tmp[621264] "expr temp" "maybe param" "maybe type" "temp"
          (621267 'move' call_tmp[621264](154284 call status _mt[232] call_tmp[621257]))
          (154293 call = call_tmp[621264] deleted[151198])
          unknown call_tmp[621271] "expr temp" "maybe param" "maybe type" "temp"
          (621274 'move' call_tmp[621271](357121 call numEntries _mt[232] this[155856]))
          (154302 call(154297 call (partial) sub _mt[232] call_tmp[621271]) 1)
        }
        {
          (154306 call = retval[154200] 0)
        }
        unknown tmp[402945] "maybe param" "temp"
        unknown call_tmp[621280] "expr temp" "maybe param" "maybe type" "temp"
        (621283 'move' call_tmp[621280](357127 call numEntries _mt[232] this[155856]))
        unknown call_tmp[621287] "expr temp" "maybe param" "maybe type" "temp"
        (621290 'move' call_tmp[621287](154319 call(154315 call (partial) read _mt[232] call_tmp[621280])))
        unknown call_tmp[621292] "expr temp" "maybe param" "maybe type" "temp"
        (621295 'move' call_tmp[621292](154321 call * call_tmp[621287] 8))
        unknown call_tmp[621299] "expr temp" "maybe param" "maybe type" "temp"
        (621302 'move' call_tmp[621299](357132 call tableSize _mt[232] this[155856]))
        (402956 'move' tmp[402945](154324 call < call_tmp[621292] call_tmp[621299]))
        unknown call_tmp[621304] "expr temp" "maybe param" "maybe type" "temp"
        (621307 'move' call_tmp[621304](402958 call _cond_invalid tmp[402945]))
        if call_tmp[621304]
        {
          (402961 call compilerError "cannot promote short-circuiting && operator")
        }
        unknown tmp[517968] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[517969] "maybe param" "temp"
        unknown call_tmp[621309] "expr temp" "maybe param" "maybe type" "temp"
        (621312 'move' call_tmp[621309](402946 call isTrue tmp[402945]))
        (517974 'move' tmp[517969](517972 call _cond_test call_tmp[621309]))
        if tmp[517969]
        {
          unknown tmp[517976] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[621316] "expr temp" "maybe param" "maybe type" "temp"
          (621319 'move' call_tmp[621316](357137 call tableSizeNum _mt[232] this[155856]))
          unknown call_tmp[621321] "expr temp" "maybe param" "maybe type" "temp"
          (621324 'move' call_tmp[621321](154328 call > call_tmp[621316] 1))
          (517978 'move' tmp[517976](402949 call isTrue call_tmp[621321]))
          (517983 'move' tmp[517968](517980 '_paramFoldLogical' tmp[517969] tmp[517976]))
        }
        {
          (517988 'move' tmp[517968](517985 '_paramFoldLogical' tmp[517969] 0))
        }
        unknown call_tmp[621326] "expr temp" "maybe param" "maybe type" "temp"
        (621329 'move' call_tmp[621326](154339 call _cond_test tmp[517968]))
        if call_tmp[621326]
        {
          (154336 call(357141 call (partial) _resize _mt[232] this[155856])(grow = 0))
        }
        (154345 call(357145 call (partial) unlockTable _mt[232] this[155856]))
      }
    }
    (471060 'move' ret[471055](471059 'deref' retval[154200]))
    (471057 return ret[471055])
  }
  function DefaultAssociativeDom[155766](?).findPrimeSizeIndex[154366](arg _mt[155862]:_MT[227], arg this[155860]:DefaultAssociativeDom[155766](?), arg numKeys[154363]:int(64)[13]) : _unknown[43] "method" "primary method"
  {
    unknown ret[471064] "RVV" "temp"
    unknown call_tmp[621335] "expr temp" "maybe param" "maybe type" "temp"
    (621338 'move' call_tmp[621335](154370 call + numKeys[154363] 1))
    unknown call_tmp[621340] "maybe param" "maybe type" "temp"
    (621343 'move' call_tmp[621340](154373 call * call_tmp[621335] 2))
    unknown threshold[154375] "insert auto destroy"
    (492193 'init var' threshold[154375] call_tmp[621340])
    unknown prime[154380] "insert auto destroy"
    (492195 'init var' prime[154380] 0)
    unknown primeLoc[154384] "insert auto destroy"
    (492197 'init var' primeLoc[154384] 0)
    {
      unknown _indexOfInterest[154424] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[154425] "expr temp" "temp"
      unknown call_tmp[621345] "expr temp" "maybe param" "maybe type" "temp"
      (621348 'move' call_tmp[621345](357160 call chpl__primes[151227]))
      unknown call_tmp[621352] "expr temp" "maybe param" "maybe type" "temp"
      (621355 'move' call_tmp[621352](154439 call size _mt[232] call_tmp[621345]))
      unknown call_tmp[621357] "expr temp" "maybe param" "maybe type" "temp"
      (621360 'move' call_tmp[621357](154442 call chpl_direct_range_iter 1 call_tmp[621352] 1))
      (154434 'move' _iterator[154425](154432 call _getIterator call_tmp[621357]))
      Defer
      {
        {
          (154458 call _freeIterator _iterator[154425])
        }
      }
      { scopeless type
        (154447 'move' _indexOfInterest[154424](154444 call iteratorIndex _iterator[154425]))
      }
      ForLoop
      {
        unknown i[154451] "index var" "insert auto destroy"
        (154453 'move' i[154451] _indexOfInterest[154424])
        {
          unknown call_tmp[621362] "expr temp" "maybe param" "maybe type" "temp"
          (621365 'move' call_tmp[621362](357150 call chpl__primes[151227]))
          unknown call_tmp[621367] "expr temp" "maybe param" "maybe type" "temp"
          (621370 'move' call_tmp[621367](154398 call call_tmp[621362] i[154451]))
          unknown call_tmp[621372] "expr temp" "maybe param" "maybe type" "temp"
          (621375 'move' call_tmp[621372](154400 call > call_tmp[621367] threshold[154375]))
          unknown call_tmp[621377] "expr temp" "maybe param" "maybe type" "temp"
          (621380 'move' call_tmp[621377](154419 call _cond_test call_tmp[621372]))
          if call_tmp[621377]
          {
            unknown call_tmp[621382] "expr temp" "maybe param" "maybe type" "temp"
            (621385 'move' call_tmp[621382](357155 call chpl__primes[151227]))
            unknown call_tmp[621387] "expr temp" "maybe param" "maybe type" "temp"
            (621390 'move' call_tmp[621387](154406 call call_tmp[621382] i[154451]))
            (154407 call = prime[154380] call_tmp[621387])
            (154413 call = primeLoc[154384] i[154451])
            break _breakLabel[154430] _breakLabel[154430]
          }
        }
        label _continueLabel[154429]
        _indexOfInterest[154424]
        _iterator[154425]
      }
      label _breakLabel[154430]
    }
    unknown call_tmp[621392] "expr temp" "maybe param" "maybe type" "temp"
    (621395 'move' call_tmp[621392](154467 call == prime[154380] 0))
    unknown call_tmp[621397] "expr temp" "maybe param" "maybe type" "temp"
    (621400 'move' call_tmp[621397](154507 call _cond_test call_tmp[621392]))
    if call_tmp[621397]
    {
      (154504 call halt "Requested capacity (" numKeys[154363] ") exceeds maximum size")
    }
    (471069 'move' ret[471064](471068 'deref' primeLoc[154384]))
    (471066 return ret[471064])
  }
  function DefaultAssociativeDom[155766](?).dsiRequestCapacity[154522](arg _mt[155866]:_MT[227], arg this[155864]:DefaultAssociativeDom[155766](?), arg numKeys[154519]:int(64)[13]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[621404] "expr temp" "maybe param" "maybe type" "temp"
    (621407 'move' call_tmp[621404](357167 call numEntries _mt[232] this[155864]))
    unknown call_tmp[621411] "maybe param" "maybe type" "temp"
    (621414 'move' call_tmp[621411](154529 call(154525 call (partial) read _mt[232] call_tmp[621404])))
    unknown entries[154530] "insert auto destroy"
    (492199 'init var' entries[154530] call_tmp[621411])
    unknown call_tmp[621416] "expr temp" "maybe param" "maybe type" "temp"
    (621419 'move' call_tmp[621416](154536 call < entries[154530] numKeys[154519]))
    unknown call_tmp[621421] "expr temp" "maybe param" "maybe type" "temp"
    (621424 'move' call_tmp[621421](154787 call _cond_test call_tmp[621416]))
    if call_tmp[621421]
    {
      unknown call_tmp[621428] "maybe param" "maybe type" "temp"
      (621431 'move' call_tmp[621428](154541 call(357175 call (partial) findPrimeSizeIndex _mt[232] this[155864]) numKeys[154519]))
      unknown primeLoc[154542] "insert auto destroy"
      (492201 'init var' primeLoc[154542] call_tmp[621428])
      unknown call_tmp[621433] "expr temp" "maybe param" "maybe type" "temp"
      (621436 'move' call_tmp[621433](357179 call chpl__primes[151227]))
      unknown call_tmp[621438] "maybe param" "maybe type" "temp"
      (621441 'move' call_tmp[621438](154549 call call_tmp[621433] primeLoc[154542]))
      unknown prime[154550] "insert auto destroy"
      (492203 'init var' prime[154550] call_tmp[621438])
      (154555 call(357183 call (partial) lockTable _mt[232] this[155864]))
      unknown call_tmp[621445] "expr temp" "maybe param" "maybe type" "temp"
      (621448 'move' call_tmp[621445](154559 call > entries[154530] 0))
      unknown call_tmp[621450] "expr temp" "maybe param" "maybe type" "temp"
      (621453 'move' call_tmp[621450](154730 call _cond_test call_tmp[621445]))
      if call_tmp[621450]
      {
        (154563 call(357190 call (partial) _backupArrays _mt[232] this[155864]))
        unknown call_tmp[621459] "maybe param" "maybe type" "temp"
        (621462 'move' call_tmp[621459](357195 call tableDom _mt[232] this[155864]))
        unknown copyDom[154567] "insert auto destroy"
        (492205 'init var' copyDom[154567] call_tmp[621459])
        unknown call_tmp[621466] "maybe param" "maybe type" "temp"
        (621469 'move' call_tmp[621466](357207 call table _mt[232] this[155864]))
        unknown call_tmp[621471] "expr temp" "maybe param" "maybe type" "temp"
        (621474 'move' call_tmp[621471](154576 call chpl__ensureDomainExpr copyDom[154567]))
        unknown call_tmp[621478] "expr temp" "maybe param" "maybe type" "temp"
        (621481 'move' call_tmp[621478](357202 call idxType _mt[232] this[155864]))
        unknown call_tmp[621483] "expr temp" "maybe param" "maybe type" "temp"
        (621486 'move' call_tmp[621483](154575 call chpl_TableEntry[151222](?) call_tmp[621478]))
        unknown call_tmp[621488] "maybe param" "maybe type" "temp"
        (621491 'move' call_tmp[621488](154578 call chpl__buildArrayRuntimeType call_tmp[621471] call_tmp[621483]))
        unknown copyTable[154581] "insert auto destroy"
        (492207 'init var' copyTable[154581] call_tmp[621466] call_tmp[621488])
        unknown call_tmp[621495] "expr temp" "maybe param" "maybe type" "temp"
        (621498 'move' call_tmp[621495](357212 call tableDom _mt[232] this[155864]))
        unknown call_tmp[621500] "expr temp" "maybe param" "maybe type" "temp"
        (621503 'move' call_tmp[621500](154587 call - 1))
        unknown call_tmp[621505] "expr temp" "maybe param" "maybe type" "temp"
        (621508 'move' call_tmp[621505](154589 call chpl_build_bounded_range 0 call_tmp[621500]))
        unknown call_tmp[621510] "expr temp" "maybe param" "maybe type" "temp"
        (621513 'move' call_tmp[621510](154592 call chpl__buildDomainExpr call_tmp[621505]))
        (154594 call = call_tmp[621495] call_tmp[621510])
        unknown call_tmp[621517] "expr temp" "maybe param" "maybe type" "temp"
        (621520 'move' call_tmp[621517](357217 call tableSizeNum _mt[232] this[155864]))
        (154599 call = call_tmp[621517] primeLoc[154542])
        unknown call_tmp[621524] "expr temp" "maybe param" "maybe type" "temp"
        (621527 'move' call_tmp[621524](357223 call tableSize _mt[232] this[155864]))
        (154604 call = call_tmp[621524] prime[154550])
        unknown call_tmp[621531] "expr temp" "maybe param" "maybe type" "temp"
        (621534 'move' call_tmp[621531](357229 call tableDom _mt[232] this[155864]))
        unknown call_tmp[621538] "expr temp" "maybe param" "maybe type" "temp"
        (621541 'move' call_tmp[621538](357234 call tableSize _mt[232] this[155864]))
        unknown call_tmp[621543] "expr temp" "maybe param" "maybe type" "temp"
        (621546 'move' call_tmp[621543](154611 call - call_tmp[621538] 1))
        unknown call_tmp[621548] "expr temp" "maybe param" "maybe type" "temp"
        (621551 'move' call_tmp[621548](154613 call chpl_build_bounded_range 0 call_tmp[621543]))
        unknown call_tmp[621553] "expr temp" "maybe param" "maybe type" "temp"
        (621556 'move' call_tmp[621553](154616 call chpl__buildDomainExpr call_tmp[621548]))
        (154618 call = call_tmp[621531] call_tmp[621553])
        unknown call_tmp[621560] "expr temp" "maybe param" "maybe type" "temp"
        (621563 'move' call_tmp[621560](357239 call numEntries _mt[232] this[155864]))
        (154627 call(154622 call (partial) write _mt[232] call_tmp[621560]) 0)
        {
          unknown _indexOfInterest[154667] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[154668] "expr temp" "temp"
          unknown call_tmp[621569] "expr temp" "maybe param" "maybe type" "temp"
          (621572 'move' call_tmp[621569](154633 call(357243 call (partial) _fullSlots _mt[232] this[155864]) copyTable[154581]))
          (154677 'move' _iterator[154668](154675 call _getIterator call_tmp[621569]))
          Defer
          {
            {
              (154694 call _freeIterator _iterator[154668])
            }
          }
          { scopeless type
            (154683 'move' _indexOfInterest[154667](154680 call iteratorIndex _iterator[154668]))
          }
          ForLoop
          {
            unknown slot[154687] "index var" "insert auto destroy"
            (154689 'move' slot[154687] _indexOfInterest[154667])
            {
              unknown call_tmp[621576] "expr temp" "maybe param" "maybe type" "temp"
              (621579 'move' call_tmp[621576](154643 call copyTable[154581] slot[154687]))
              unknown call_tmp[621583] "expr temp" "maybe param" "maybe type" "temp"
              (621586 'move' call_tmp[621583](154644 call idx _mt[232] call_tmp[621576]))
              unknown call_tmp[621588] "maybe param" "maybe type" "temp"
              (621591 'move' call_tmp[621588](154648 call(357248 call (partial) _add _mt[232] this[155864]) call_tmp[621583]))
              const tmp[154649] "const" "insert auto destroy" "no copy" "temp"
              (492209 'init var' tmp[154649] call_tmp[621588])
              (154653 call _check_tuple_var_decl tmp[154649] 2)
              unknown call_tmp[621593] "maybe param" "maybe type" "temp"
              (621596 'move' call_tmp[621593](154650 call tmp[154649] 1))
              const newslot[154634] "const" "insert auto destroy"
              (492211 'init var' newslot[154634] call_tmp[621593])
              (154665 call(357256 call (partial) _preserveArrayElements _mt[232] this[155864])(oldslot = slot[154687])(newslot = newslot[154634]))
            }
            label _continueLabel[154672]
            _indexOfInterest[154667]
            _iterator[154668]
          }
          label _breakLabel[154673]
        }
        (154703 call(357264 call (partial) _removeArrayBackups _mt[232] this[155864]))
      }
      {
        unknown call_tmp[621604] "expr temp" "maybe param" "maybe type" "temp"
        (621607 'move' call_tmp[621604](357269 call tableSizeNum _mt[232] this[155864]))
        (154707 call = call_tmp[621604] primeLoc[154542])
        unknown call_tmp[621611] "expr temp" "maybe param" "maybe type" "temp"
        (621614 'move' call_tmp[621611](357275 call tableSize _mt[232] this[155864]))
        (154713 call = call_tmp[621611] prime[154550])
        unknown call_tmp[621618] "expr temp" "maybe param" "maybe type" "temp"
        (621621 'move' call_tmp[621618](357281 call tableDom _mt[232] this[155864]))
        unknown call_tmp[621625] "expr temp" "maybe param" "maybe type" "temp"
        (621628 'move' call_tmp[621625](357286 call tableSize _mt[232] this[155864]))
        unknown call_tmp[621630] "expr temp" "maybe param" "maybe type" "temp"
        (621633 'move' call_tmp[621630](154720 call - call_tmp[621625] 1))
        unknown call_tmp[621635] "expr temp" "maybe param" "maybe type" "temp"
        (621638 'move' call_tmp[621635](154722 call chpl_build_bounded_range 0 call_tmp[621630]))
        unknown call_tmp[621640] "expr temp" "maybe param" "maybe type" "temp"
        (621643 'move' call_tmp[621640](154725 call chpl__buildDomainExpr call_tmp[621635]))
        (154727 call = call_tmp[621618] call_tmp[621640])
      }
      (154736 call(357290 call (partial) unlockTable _mt[232] this[155864]))
    }
    {
      unknown call_tmp[621647] "expr temp" "maybe param" "maybe type" "temp"
      (621650 'move' call_tmp[621647](154740 call > entries[154530] numKeys[154519]))
      unknown call_tmp[621652] "expr temp" "maybe param" "maybe type" "temp"
      (621655 'move' call_tmp[621652](154783 call _cond_test call_tmp[621647]))
      if call_tmp[621652]
      {
        (154780 call warning "Requested capacity (" numKeys[154519] ") " "is less than current size (" entries[154530] ")")
      }
    }
    (471071 return _void[47])
  }
  function DefaultAssociativeDom[155766](?).dsiSorted[154798](arg _mt[155870]:_MT[227], arg this[155868]:DefaultAssociativeDom[155766](?), arg comparator[154796]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471075] "RVV" "temp"
    unknown tableCopy[154822] "insert auto destroy"
    unknown call_tmp[621657] "expr temp" "maybe param" "maybe type" "temp"
    (621660 'move' call_tmp[621657](154806 call chpl_build_low_bounded_range 0))
    unknown call_tmp[621664] "expr temp" "maybe param" "maybe type" "temp"
    (621667 'move' call_tmp[621664](357299 call numEntries _mt[232] this[155868]))
    unknown call_tmp[621671] "expr temp" "maybe param" "maybe type" "temp"
    (621674 'move' call_tmp[621671](154813 call(154809 call (partial) read _mt[232] call_tmp[621664])))
    unknown call_tmp[621676] "expr temp" "maybe param" "maybe type" "temp"
    (621679 'move' call_tmp[621676](154814 call # call_tmp[621657] call_tmp[621671]))
    unknown call_tmp[621681] "expr temp" "maybe param" "maybe type" "temp"
    (621684 'move' call_tmp[621681](154818 call chpl__ensureDomainExpr call_tmp[621676]))
    unknown call_tmp[621688] "expr temp" "maybe param" "maybe type" "temp"
    (621691 'move' call_tmp[621688](357304 call idxType _mt[232] this[155868]))
    unknown call_tmp[621693] "expr temp" "maybe param" "maybe type" "temp"
    (621696 'move' call_tmp[621693](154820 call chpl__buildArrayRuntimeType call_tmp[621681] call_tmp[621688]))
    (492213 'default init var' tableCopy[154822] call_tmp[621693])
    {
      unknown _indexOfInterest[154853] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[154854] "expr temp" "temp"
      unknown call_tmp[621700] "expr temp" "maybe param" "maybe type" "temp"
      (621703 'move' call_tmp[621700](154863 call _dom _mt[232] tableCopy[154822]))
      unknown call_tmp[621705] "expr temp" "maybe param" "maybe type" "temp"
      (621708 'move' call_tmp[621705](154866 call _getIterator call_tmp[621700]))
      unknown call_tmp[621712] "expr temp" "maybe param" "maybe type" "temp"
      (621715 'move' call_tmp[621712](154870 call(357317 call (partial) _fullSlots _mt[232] this[155868])))
      unknown call_tmp[621717] "expr temp" "maybe param" "maybe type" "temp"
      (621720 'move' call_tmp[621717](154871 call _getIterator call_tmp[621712]))
      (154874 'move' _iterator[154854](154838 call _build_tuple call_tmp[621705] call_tmp[621717]))
      Defer
      {
        {
          (154904 call _freeIterator _iterator[154854])
        }
      }
      { scopeless type
        (154879 'move' _indexOfInterest[154853](154876 call iteratorIndex _iterator[154854]))
      }
      ForLoop
      {
        (154884 call _check_tuple_var_decl _indexOfInterest[154853] 2)
        unknown tmp[154890] "index var" "insert auto destroy"
        (154892 'move' tmp[154890](154888 call _indexOfInterest[154853] 1))
        unknown slot[154897] "index var" "insert auto destroy"
        (154899 'move' slot[154897](154895 call _indexOfInterest[154853] 2))
        unknown call_tmp[621722] "expr temp" "maybe param" "maybe type" "temp"
        (621725 'move' call_tmp[621722](154842 call tableCopy[154822] tmp[154890]))
        unknown call_tmp[621729] "expr temp" "maybe param" "maybe type" "temp"
        (621732 'move' call_tmp[621729](154846 call(357311 call (partial) table _mt[232] this[155868]) slot[154897]))
        unknown call_tmp[621736] "expr temp" "maybe param" "maybe type" "temp"
        (621739 'move' call_tmp[621736](154847 call idx _mt[232] call_tmp[621729]))
        (154850 call = call_tmp[621722] call_tmp[621736])
        label _continueLabel[154858]
        _indexOfInterest[154853]
        _iterator[154854]
      }
      label _breakLabel[154859]
    }
    (154916 call sort tableCopy[154822](comparator = comparator[154796]))
    {
      unknown _indexOfInterest[154923] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[154924] "expr temp" "temp"
      (154933 'move' _iterator[154924](154931 call _getIterator tableCopy[154822]))
      Defer
      {
        {
          (154949 call _freeIterator _iterator[154924])
        }
      }
      { scopeless type
        (154938 'move' _indexOfInterest[154923](154935 call iteratorIndex _iterator[154924]))
      }
      ForLoop
      {
        unknown ind[154942] "index var" "insert auto destroy"
        (154944 'move' ind[154942] _indexOfInterest[154923])
        unknown yret[471079] "YVV" "temp"
        (471082 'move' yret[471079](471081 'deref' ind[154942]))
        (471084 yield yret[471079])
        label _continueLabel[154928]
        _indexOfInterest[154923]
        _iterator[154924]
      }
      label _breakLabel[154929]
    }
    (471077 return ret[471075])
    (329423 'used modules list'(154802 'use' Sort[251417]))
  }
  function DefaultAssociativeDom[155766](?)._resize[154964](arg _mt[155874]:_MT[227], arg this[155872]:DefaultAssociativeDom[155766](?), arg grow[154961]:bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[621743] "expr temp" "maybe param" "maybe type" "temp"
    (621746 'move' call_tmp[621743](357326 call postponeResize _mt[232] this[155872]))
    unknown call_tmp[621748] "expr temp" "maybe param" "maybe type" "temp"
    (621751 'move' call_tmp[621748](154969 call _cond_test call_tmp[621743]))
    if call_tmp[621748]
    {
      gotoReturn _end__resize[471086] _end__resize[471086]
    }
    (154977 call(357330 call (partial) _backupArrays _mt[232] this[155872]))
    unknown call_tmp[621757] "maybe param" "maybe type" "temp"
    (621760 'move' call_tmp[621757](357335 call tableDom _mt[232] this[155872]))
    unknown copyDom[154980] "insert auto destroy"
    (492215 'init var' copyDom[154980] call_tmp[621757])
    unknown call_tmp[621764] "maybe param" "maybe type" "temp"
    (621767 'move' call_tmp[621764](357347 call table _mt[232] this[155872]))
    unknown call_tmp[621769] "expr temp" "maybe param" "maybe type" "temp"
    (621772 'move' call_tmp[621769](154989 call chpl__ensureDomainExpr copyDom[154980]))
    unknown call_tmp[621776] "expr temp" "maybe param" "maybe type" "temp"
    (621779 'move' call_tmp[621776](357342 call idxType _mt[232] this[155872]))
    unknown call_tmp[621781] "expr temp" "maybe param" "maybe type" "temp"
    (621784 'move' call_tmp[621781](154988 call chpl_TableEntry[151222](?) call_tmp[621776]))
    unknown call_tmp[621786] "maybe param" "maybe type" "temp"
    (621789 'move' call_tmp[621786](154991 call chpl__buildArrayRuntimeType call_tmp[621769] call_tmp[621781]))
    unknown copyTable[154994] "insert auto destroy"
    (492217 'init var' copyTable[154994] call_tmp[621764] call_tmp[621786])
    unknown call_tmp[621793] "expr temp" "maybe param" "maybe type" "temp"
    (621796 'move' call_tmp[621793](357352 call tableDom _mt[232] this[155872]))
    unknown call_tmp[621798] "expr temp" "maybe param" "maybe type" "temp"
    (621801 'move' call_tmp[621798](155001 call _cast chpl_table_index_type[151190] 1))
    unknown call_tmp[621803] "expr temp" "maybe param" "maybe type" "temp"
    (621806 'move' call_tmp[621803](155003 call - call_tmp[621798]))
    unknown call_tmp[621808] "expr temp" "maybe param" "maybe type" "temp"
    (621811 'move' call_tmp[621808](155005 call chpl_build_bounded_range 0 call_tmp[621803]))
    unknown call_tmp[621813] "expr temp" "maybe param" "maybe type" "temp"
    (621816 'move' call_tmp[621813](155008 call chpl__buildDomainExpr call_tmp[621808]))
    (155010 call = call_tmp[621793] call_tmp[621813])
    unknown call_tmp[621820] "expr temp" "maybe param" "maybe type" "temp"
    (621823 'move' call_tmp[621820](357358 call numEntries _mt[232] this[155872]))
    (155019 call(155014 call (partial) write _mt[232] call_tmp[621820]) 0)
    unknown tmp[517995] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[517996] "maybe param" "temp"
    (518001 'move' tmp[517996](517999 call _cond_test grow[154961]))
    if tmp[517996]
    {
      (518006 'move' tmp[517995](518003 '_paramFoldLogical' tmp[517996] 1))
    }
    {
      unknown tmp[518008] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (518010 'move' tmp[518008](155025 call - 1))
      (518015 'move' tmp[517995](518012 '_paramFoldLogical' tmp[517996] tmp[518008]))
    }
    unknown call_tmp[621829] "expr temp" "maybe param" "maybe type" "temp"
    (621832 'move' call_tmp[621829](357363 call tableSizeNum _mt[232] this[155872]))
    (155030 call += call_tmp[621829] tmp[517995])
    unknown call_tmp[621836] "expr temp" "maybe param" "maybe type" "temp"
    (621839 'move' call_tmp[621836](357369 call tableSizeNum _mt[232] this[155872]))
    unknown call_tmp[621841] "expr temp" "maybe param" "maybe type" "temp"
    (621844 'move' call_tmp[621841](357372 call chpl__primes[151227]))
    unknown call_tmp[621848] "expr temp" "maybe param" "maybe type" "temp"
    (621851 'move' call_tmp[621848](155035 call size _mt[232] call_tmp[621841]))
    unknown call_tmp[621853] "expr temp" "maybe param" "maybe type" "temp"
    (621856 'move' call_tmp[621853](155038 call > call_tmp[621836] call_tmp[621848]))
    unknown call_tmp[621858] "expr temp" "maybe param" "maybe type" "temp"
    (621861 'move' call_tmp[621858](155060 call _cond_test call_tmp[621853]))
    if call_tmp[621858]
    {
      (155058 call halt "associative array exceeds maximum size")
    }
    unknown call_tmp[621865] "expr temp" "maybe param" "maybe type" "temp"
    (621868 'move' call_tmp[621865](357376 call tableSize _mt[232] this[155872]))
    unknown call_tmp[621870] "expr temp" "maybe param" "maybe type" "temp"
    (621873 'move' call_tmp[621870](357379 call chpl__primes[151227]))
    unknown call_tmp[621877] "expr temp" "maybe param" "maybe type" "temp"
    (621880 'move' call_tmp[621877](357383 call tableSizeNum _mt[232] this[155872]))
    unknown call_tmp[621882] "expr temp" "maybe param" "maybe type" "temp"
    (621885 'move' call_tmp[621882](155069 call call_tmp[621870] call_tmp[621877]))
    (155070 call = call_tmp[621865] call_tmp[621882])
    unknown call_tmp[621889] "expr temp" "maybe param" "maybe type" "temp"
    (621892 'move' call_tmp[621889](357388 call tableDom _mt[232] this[155872]))
    unknown call_tmp[621896] "expr temp" "maybe param" "maybe type" "temp"
    (621899 'move' call_tmp[621896](357393 call tableSize _mt[232] this[155872]))
    unknown call_tmp[621901] "expr temp" "maybe param" "maybe type" "temp"
    (621904 'move' call_tmp[621901](155077 call - call_tmp[621896] 1))
    unknown call_tmp[621906] "expr temp" "maybe param" "maybe type" "temp"
    (621909 'move' call_tmp[621906](155079 call chpl_build_bounded_range 0 call_tmp[621901]))
    unknown call_tmp[621911] "expr temp" "maybe param" "maybe type" "temp"
    (621914 'move' call_tmp[621911](155082 call chpl__buildDomainExpr call_tmp[621906]))
    (155084 call = call_tmp[621889] call_tmp[621911])
    {
      unknown _indexOfInterest[155125] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155126] "expr temp" "temp"
      unknown call_tmp[621918] "expr temp" "maybe param" "maybe type" "temp"
      (621921 'move' call_tmp[621918](155091 call(357397 call (partial) _fullSlots _mt[232] this[155872]) copyTable[154994]))
      (155135 'move' _iterator[155126](155133 call _getIterator call_tmp[621918]))
      Defer
      {
        {
          (155152 call _freeIterator _iterator[155126])
        }
      }
      { scopeless type
        (155141 'move' _indexOfInterest[155125](155138 call iteratorIndex _iterator[155126]))
      }
      ForLoop
      {
        unknown slot[155145] "index var" "insert auto destroy"
        (155147 'move' slot[155145] _indexOfInterest[155125])
        {
          unknown call_tmp[621925] "expr temp" "maybe param" "maybe type" "temp"
          (621928 'move' call_tmp[621925](155101 call copyTable[154994] slot[155145]))
          unknown call_tmp[621932] "expr temp" "maybe param" "maybe type" "temp"
          (621935 'move' call_tmp[621932](155102 call idx _mt[232] call_tmp[621925]))
          unknown call_tmp[621937] "maybe param" "maybe type" "temp"
          (621940 'move' call_tmp[621937](155106 call(357402 call (partial) _add _mt[232] this[155872]) call_tmp[621932]))
          const tmp[155107] "const" "insert auto destroy" "no copy" "temp"
          (492219 'init var' tmp[155107] call_tmp[621937])
          (155111 call _check_tuple_var_decl tmp[155107] 2)
          unknown call_tmp[621942] "maybe param" "maybe type" "temp"
          (621945 'move' call_tmp[621942](155108 call tmp[155107] 1))
          const newslot[155092] "const" "insert auto destroy"
          (492221 'init var' newslot[155092] call_tmp[621942])
          (155123 call(357408 call (partial) _preserveArrayElements _mt[232] this[155872])(oldslot = slot[155145])(newslot = newslot[155092]))
        }
        label _continueLabel[155130]
        _indexOfInterest[155125]
        _iterator[155126]
      }
      label _breakLabel[155131]
    }
    (155161 call(357414 call (partial) _removeArrayBackups _mt[232] this[155872]))
    label _end__resize[471086]
    (471088 return _void[47])
  }
  function DefaultAssociativeDom[155766](?)._findFilledSlot[155171](arg _mt[155878]:_MT[227], arg this[155876]:DefaultAssociativeDom[155766](?), arg idx[155168] :
  (357419 call idxType _mt[232] this[155876]), arg needLock[155174] :
  1 =
  1) : _unknown[43] "method" "primary method"
  {
    unknown ret[471094] "RVV" "temp"
    unknown tmp[402966] "maybe param" "temp"
    (402977 'move' tmp[402966](357429 call parSafe _mt[232] this[155876]))
    unknown call_tmp[621955] "expr temp" "maybe param" "maybe type" "temp"
    (621958 'move' call_tmp[621955](402979 call _cond_invalid tmp[402966]))
    if call_tmp[621955]
    {
      (402982 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[518022] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518023] "maybe param" "temp"
    unknown call_tmp[621960] "expr temp" "maybe param" "maybe type" "temp"
    (621963 'move' call_tmp[621960](402967 call isTrue tmp[402966]))
    (518028 'move' tmp[518023](518026 call _cond_test call_tmp[621960]))
    if tmp[518023]
    {
      unknown tmp[518030] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (518032 'move' tmp[518030](402970 call isTrue needLock[155174]))
      (518037 'move' tmp[518022](518034 '_paramFoldLogical' tmp[518023] tmp[518030]))
    }
    {
      (518042 'move' tmp[518022](518039 '_paramFoldLogical' tmp[518023] 0))
    }
    unknown call_tmp[621965] "expr temp" "maybe param" "maybe type" "temp"
    (621968 'move' call_tmp[621965](155193 call _cond_test tmp[518022]))
    if call_tmp[621965]
    {
      (155191 call(357434 call (partial) lockTable _mt[232] this[155876]))
    }
    unknown call_tmp[621972] "maybe param" "maybe type" "temp"
    (621975 'move' call_tmp[621972](155200 call - 1))
    unknown firstOpen[155202] "insert auto destroy"
    (492223 'init var' firstOpen[155202] call_tmp[621972])
    {
      unknown _indexOfInterest[155344] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155345] "expr temp" "temp"
      unknown call_tmp[621981] "expr temp" "maybe param" "maybe type" "temp"
      (621984 'move' call_tmp[621981](357446 call table _mt[232] this[155876]))
      unknown call_tmp[621988] "expr temp" "maybe param" "maybe type" "temp"
      (621991 'move' call_tmp[621988](155210 call _dom _mt[232] call_tmp[621981]))
      unknown call_tmp[621995] "expr temp" "maybe param" "maybe type" "temp"
      (621998 'move' call_tmp[621995](155213 call high _mt[232] call_tmp[621988]))
      unknown call_tmp[622000] "expr temp" "maybe param" "maybe type" "temp"
      (622003 'move' call_tmp[622000](155217 call + call_tmp[621995] 1))
      unknown call_tmp[622005] "expr temp" "maybe param" "maybe type" "temp"
      (622008 'move' call_tmp[622005](155219 call(357440 call (partial) _lookForSlots _mt[232] this[155876]) idx[155168] call_tmp[622000]))
      (155354 'move' _iterator[155345](155352 call _getIterator call_tmp[622005]))
      Defer
      {
        {
          (155371 call _freeIterator _iterator[155345])
        }
      }
      { scopeless type
        (155360 'move' _indexOfInterest[155344](155357 call iteratorIndex _iterator[155345]))
      }
      ForLoop
      {
        unknown slotNum[155364] "index var" "insert auto destroy"
        (155366 'move' slotNum[155364] _indexOfInterest[155344])
        {
          unknown call_tmp[622012] "expr temp" "maybe param" "maybe type" "temp"
          (622015 'move' call_tmp[622012](155223 call(357451 call (partial) table _mt[232] this[155876]) slotNum[155364]))
          unknown call_tmp[622019] "maybe param" "maybe type" "temp"
          (622022 'move' call_tmp[622019](155224 call status _mt[232] call_tmp[622012]))
          const slotStatus[155227] "const" "insert auto destroy"
          (492225 'init var' slotStatus[155227] call_tmp[622019])
          unknown call_tmp[622024] "expr temp" "maybe param" "maybe type" "temp"
          (622027 'move' call_tmp[622024](155236 call == slotStatus[155227] empty[151194]))
          unknown call_tmp[622029] "expr temp" "maybe param" "maybe type" "temp"
          (622032 'move' call_tmp[622029](155339 call _cond_test call_tmp[622024]))
          if call_tmp[622029]
          {
            unknown call_tmp[622034] "expr temp" "maybe param" "maybe type" "temp"
            (622037 'move' call_tmp[622034](155240 call - 1))
            unknown call_tmp[622039] "expr temp" "maybe param" "maybe type" "temp"
            (622042 'move' call_tmp[622039](155242 call == firstOpen[155202] call_tmp[622034]))
            unknown call_tmp[622044] "expr temp" "maybe param" "maybe type" "temp"
            (622047 'move' call_tmp[622044](155249 call _cond_test call_tmp[622039]))
            if call_tmp[622044]
            {
              (155246 call = firstOpen[155202] slotNum[155364])
            }
            unknown tmp[402987] "maybe param" "temp"
            (402998 'move' tmp[402987](357462 call parSafe _mt[232] this[155876]))
            unknown call_tmp[622051] "expr temp" "maybe param" "maybe type" "temp"
            (622054 'move' call_tmp[622051](403000 call _cond_invalid tmp[402987]))
            if call_tmp[622051]
            {
              (403003 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[518049] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[518050] "maybe param" "temp"
            unknown call_tmp[622056] "expr temp" "maybe param" "maybe type" "temp"
            (622059 'move' call_tmp[622056](402988 call isTrue tmp[402987]))
            (518055 'move' tmp[518050](518053 call _cond_test call_tmp[622056]))
            if tmp[518050]
            {
              unknown tmp[518057] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              (518059 'move' tmp[518057](402991 call isTrue needLock[155174]))
              (518064 'move' tmp[518049](518061 '_paramFoldLogical' tmp[518050] tmp[518057]))
            }
            {
              (518069 'move' tmp[518049](518066 '_paramFoldLogical' tmp[518050] 0))
            }
            unknown call_tmp[622061] "expr temp" "maybe param" "maybe type" "temp"
            (622064 'move' call_tmp[622061](155263 call _cond_test tmp[518049]))
            if call_tmp[622061]
            {
              (155261 call(357467 call (partial) unlockTable _mt[232] this[155876]))
            }
            unknown call_tmp[622068] "expr temp" "maybe param" "maybe type" "temp"
            (622071 'move' call_tmp[622068](155271 call _build_tuple 0 firstOpen[155202]))
            unknown call_tmp[622075] "expr temp" "maybe param" "maybe type" "temp"
            (622078 'move' call_tmp[622075](471104 call tableDom _mt[232] this[155876]))
            unknown call_tmp[622080] "expr temp" "maybe param" "maybe type" "temp"
            (622083 'move' call_tmp[622080](471102 call chpl__buildIndexType call_tmp[622075]))
            unknown call_tmp[622085] "expr temp" "maybe param" "maybe type" "temp"
            (622088 'move' call_tmp[622085](471099 call _build_tuple bool[10] call_tmp[622080]))
            (471108 'move' ret[471094](471107 'coerce' call_tmp[622068] call_tmp[622085]))
            gotoReturn _end__findFilledSlot[471092] _end__findFilledSlot[471092]
          }
          {
            unknown call_tmp[622090] "expr temp" "maybe param" "maybe type" "temp"
            (622093 'move' call_tmp[622090](155280 call == slotStatus[155227] full[151196]))
            unknown call_tmp[622095] "expr temp" "maybe param" "maybe type" "temp"
            (622098 'move' call_tmp[622095](155335 call _cond_test call_tmp[622090]))
            if call_tmp[622095]
            {
              unknown call_tmp[622102] "expr temp" "maybe param" "maybe type" "temp"
              (622105 'move' call_tmp[622102](155285 call(357475 call (partial) table _mt[232] this[155876]) slotNum[155364]))
              unknown call_tmp[622109] "expr temp" "maybe param" "maybe type" "temp"
              (622112 'move' call_tmp[622109](155286 call idx _mt[232] call_tmp[622102]))
              unknown call_tmp[622114] "expr temp" "maybe param" "maybe type" "temp"
              (622117 'move' call_tmp[622114](155290 call == call_tmp[622109] idx[155168]))
              unknown call_tmp[622119] "expr temp" "maybe param" "maybe type" "temp"
              (622122 'move' call_tmp[622119](155313 call _cond_test call_tmp[622114]))
              if call_tmp[622119]
              {
                unknown tmp[403008] "maybe param" "temp"
                (403019 'move' tmp[403008](357482 call parSafe _mt[232] this[155876]))
                unknown call_tmp[622126] "expr temp" "maybe param" "maybe type" "temp"
                (622129 'move' call_tmp[622126](403021 call _cond_invalid tmp[403008]))
                if call_tmp[622126]
                {
                  (403024 call compilerError "cannot promote short-circuiting && operator")
                }
                unknown tmp[518076] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                unknown tmp[518077] "maybe param" "temp"
                unknown call_tmp[622131] "expr temp" "maybe param" "maybe type" "temp"
                (622134 'move' call_tmp[622131](403009 call isTrue tmp[403008]))
                (518082 'move' tmp[518077](518080 call _cond_test call_tmp[622131]))
                if tmp[518077]
                {
                  unknown tmp[518084] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                  (518086 'move' tmp[518084](403012 call isTrue needLock[155174]))
                  (518091 'move' tmp[518076](518088 '_paramFoldLogical' tmp[518077] tmp[518084]))
                }
                {
                  (518096 'move' tmp[518076](518093 '_paramFoldLogical' tmp[518077] 0))
                }
                unknown call_tmp[622136] "expr temp" "maybe param" "maybe type" "temp"
                (622139 'move' call_tmp[622136](155300 call _cond_test tmp[518076]))
                if call_tmp[622136]
                {
                  (155298 call(357487 call (partial) unlockTable _mt[232] this[155876]))
                }
                unknown call_tmp[622143] "expr temp" "maybe param" "maybe type" "temp"
                (622146 'move' call_tmp[622143](155309 call _build_tuple 1 slotNum[155364]))
                unknown call_tmp[622150] "expr temp" "maybe param" "maybe type" "temp"
                (622153 'move' call_tmp[622150](471118 call tableDom _mt[232] this[155876]))
                unknown call_tmp[622155] "expr temp" "maybe param" "maybe type" "temp"
                (622158 'move' call_tmp[622155](471116 call chpl__buildIndexType call_tmp[622150]))
                unknown call_tmp[622160] "expr temp" "maybe param" "maybe type" "temp"
                (622163 'move' call_tmp[622160](471113 call _build_tuple bool[10] call_tmp[622155]))
                (471122 'move' ret[471094](471121 'coerce' call_tmp[622143] call_tmp[622160]))
                gotoReturn _end__findFilledSlot[471092] _end__findFilledSlot[471092]
              }
            }
            {
              unknown call_tmp[622165] "expr temp" "maybe param" "maybe type" "temp"
              (622168 'move' call_tmp[622165](155320 call - 1))
              unknown call_tmp[622170] "expr temp" "maybe param" "maybe type" "temp"
              (622173 'move' call_tmp[622170](155322 call == firstOpen[155202] call_tmp[622165]))
              unknown call_tmp[622175] "expr temp" "maybe param" "maybe type" "temp"
              (622178 'move' call_tmp[622175](155329 call _cond_test call_tmp[622170]))
              if call_tmp[622175]
              {
                (155326 call = firstOpen[155202] slotNum[155364])
              }
            }
          }
        }
        label _continueLabel[155349]
        _indexOfInterest[155344]
        _iterator[155345]
      }
      label _breakLabel[155350]
    }
    unknown tmp[403029] "maybe param" "temp"
    (403040 'move' tmp[403029](357496 call parSafe _mt[232] this[155876]))
    unknown call_tmp[622182] "expr temp" "maybe param" "maybe type" "temp"
    (622185 'move' call_tmp[622182](403042 call _cond_invalid tmp[403029]))
    if call_tmp[622182]
    {
      (403045 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[518103] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518104] "maybe param" "temp"
    unknown call_tmp[622187] "expr temp" "maybe param" "maybe type" "temp"
    (622190 'move' call_tmp[622187](403030 call isTrue tmp[403029]))
    (518109 'move' tmp[518104](518107 call _cond_test call_tmp[622187]))
    if tmp[518104]
    {
      unknown tmp[518111] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (518113 'move' tmp[518111](403033 call isTrue needLock[155174]))
      (518118 'move' tmp[518103](518115 '_paramFoldLogical' tmp[518104] tmp[518111]))
    }
    {
      (518123 'move' tmp[518103](518120 '_paramFoldLogical' tmp[518104] 0))
    }
    unknown call_tmp[622192] "expr temp" "maybe param" "maybe type" "temp"
    (622195 'move' call_tmp[622192](155386 call _cond_test tmp[518103]))
    if call_tmp[622192]
    {
      (155384 call(357501 call (partial) unlockTable _mt[232] this[155876]))
    }
    unknown call_tmp[622199] "expr temp" "maybe param" "maybe type" "temp"
    (622202 'move' call_tmp[622199](155393 call - 1))
    unknown call_tmp[622204] "expr temp" "maybe param" "maybe type" "temp"
    (622207 'move' call_tmp[622204](155396 call _build_tuple 0 call_tmp[622199]))
    unknown call_tmp[622211] "expr temp" "maybe param" "maybe type" "temp"
    (622214 'move' call_tmp[622211](471132 call tableDom _mt[232] this[155876]))
    unknown call_tmp[622216] "expr temp" "maybe param" "maybe type" "temp"
    (622219 'move' call_tmp[622216](471130 call chpl__buildIndexType call_tmp[622211]))
    unknown call_tmp[622221] "expr temp" "maybe param" "maybe type" "temp"
    (622224 'move' call_tmp[622221](471127 call _build_tuple bool[10] call_tmp[622216]))
    (471136 'move' ret[471094](471135 'coerce' call_tmp[622204] call_tmp[622221]))
    label _end__findFilledSlot[471092]
    (471096 return ret[471094])
  }
  { scopeless type
    unknown call_tmp[622228] "expr temp" "maybe param" "maybe type" "temp"
    (622231 'move' call_tmp[622228](357424 call tableDom _mt[232] this[155876]))
    unknown call_tmp[622233] "expr temp" "maybe param" "maybe type" "temp"
    (622236 'move' call_tmp[622233](155180 call chpl__buildIndexType call_tmp[622228]))
    (155183 call _build_tuple bool[10] call_tmp[622233])
  }
  function DefaultAssociativeDom[155766](?)._findEmptySlot[155409](arg _mt[155882]:_MT[227], arg this[155880]:DefaultAssociativeDom[155766](?), arg idx[155406] :
  (357506 call idxType _mt[232] this[155880])) : _unknown[43] "method" "primary method"
  {
    unknown ret[471140] "RVV" "temp"
    {
      unknown _indexOfInterest[155486] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155487] "expr temp" "temp"
      unknown call_tmp[622242] "expr temp" "maybe param" "maybe type" "temp"
      (622245 'move' call_tmp[622242](155423 call(357515 call (partial) _lookForSlots _mt[232] this[155880]) idx[155406]))
      (155496 'move' _iterator[155487](155494 call _getIterator call_tmp[622242]))
      Defer
      {
        {
          (155513 call _freeIterator _iterator[155487])
        }
      }
      { scopeless type
        (155502 'move' _indexOfInterest[155486](155499 call iteratorIndex _iterator[155487]))
      }
      ForLoop
      {
        unknown slotNum[155506] "index var" "insert auto destroy"
        (155508 'move' slotNum[155506] _indexOfInterest[155486])
        {
          unknown call_tmp[622249] "expr temp" "maybe param" "maybe type" "temp"
          (622252 'move' call_tmp[622249](155427 call(357521 call (partial) table _mt[232] this[155880]) slotNum[155506]))
          unknown call_tmp[622256] "maybe param" "maybe type" "temp"
          (622259 'move' call_tmp[622256](155428 call status _mt[232] call_tmp[622249]))
          const slotStatus[155431] "const" "insert auto destroy"
          (492227 'init var' slotStatus[155431] call_tmp[622256])
          unknown tmp[403050] "maybe param" "temp"
          (403061 'move' tmp[403050](155440 call == slotStatus[155431] empty[151194]))
          unknown call_tmp[622261] "expr temp" "maybe param" "maybe type" "temp"
          (622264 'move' call_tmp[622261](403063 call _cond_invalid tmp[403050]))
          if call_tmp[622261]
          {
            (403066 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[518130] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[518131] "maybe param" "temp"
          unknown call_tmp[622266] "expr temp" "maybe param" "maybe type" "temp"
          (622269 'move' call_tmp[622266](403051 call isTrue tmp[403050]))
          (518136 'move' tmp[518131](518134 call _cond_test call_tmp[622266]))
          if tmp[518131]
          {
            (518141 'move' tmp[518130](518138 '_paramFoldLogical' tmp[518131] 1))
          }
          {
            unknown tmp[518143] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[622271] "expr temp" "maybe param" "maybe type" "temp"
            (622274 'move' call_tmp[622271](155447 call == slotStatus[155431] deleted[151198]))
            (518145 'move' tmp[518143](403055 call isTrue call_tmp[622271]))
            (518150 'move' tmp[518130](518147 '_paramFoldLogical' tmp[518131] tmp[518143]))
          }
          unknown call_tmp[622276] "expr temp" "maybe param" "maybe type" "temp"
          (622279 'move' call_tmp[622276](155481 call _cond_test tmp[518130]))
          if call_tmp[622276]
          {
            unknown call_tmp[622281] "expr temp" "maybe param" "maybe type" "temp"
            (622284 'move' call_tmp[622281](155454 call _build_tuple 1 slotNum[155506]))
            unknown call_tmp[622288] "expr temp" "maybe param" "maybe type" "temp"
            (622291 'move' call_tmp[622288](471150 call tableDom _mt[232] this[155880]))
            unknown call_tmp[622293] "expr temp" "maybe param" "maybe type" "temp"
            (622296 'move' call_tmp[622293](471148 call chpl__buildIndexType call_tmp[622288]))
            unknown call_tmp[622298] "expr temp" "maybe param" "maybe type" "temp"
            (622301 'move' call_tmp[622298](471145 call _build_tuple bool[10] call_tmp[622293]))
            (471154 'move' ret[471140](471153 'coerce' call_tmp[622281] call_tmp[622298]))
            gotoReturn _end__findEmptySlot[471138] _end__findEmptySlot[471138]
          }
          {
            unknown call_tmp[622305] "expr temp" "maybe param" "maybe type" "temp"
            (622308 'move' call_tmp[622305](155462 call(357532 call (partial) table _mt[232] this[155880]) slotNum[155506]))
            unknown call_tmp[622312] "expr temp" "maybe param" "maybe type" "temp"
            (622315 'move' call_tmp[622312](155463 call idx _mt[232] call_tmp[622305]))
            unknown call_tmp[622317] "expr temp" "maybe param" "maybe type" "temp"
            (622320 'move' call_tmp[622317](155467 call == call_tmp[622312] idx[155406]))
            unknown call_tmp[622322] "expr temp" "maybe param" "maybe type" "temp"
            (622325 'move' call_tmp[622322](155477 call _cond_test call_tmp[622317]))
            if call_tmp[622322]
            {
              unknown call_tmp[622327] "expr temp" "maybe param" "maybe type" "temp"
              (622330 'move' call_tmp[622327](155472 call _build_tuple 0 slotNum[155506]))
              unknown call_tmp[622334] "expr temp" "maybe param" "maybe type" "temp"
              (622337 'move' call_tmp[622334](471164 call tableDom _mt[232] this[155880]))
              unknown call_tmp[622339] "expr temp" "maybe param" "maybe type" "temp"
              (622342 'move' call_tmp[622339](471162 call chpl__buildIndexType call_tmp[622334]))
              unknown call_tmp[622344] "expr temp" "maybe param" "maybe type" "temp"
              (622347 'move' call_tmp[622344](471159 call _build_tuple bool[10] call_tmp[622339]))
              (471168 'move' ret[471140](471167 'coerce' call_tmp[622327] call_tmp[622344]))
              gotoReturn _end__findEmptySlot[471138] _end__findEmptySlot[471138]
            }
          }
        }
        label _continueLabel[155491]
        _indexOfInterest[155486]
        _iterator[155487]
      }
      label _breakLabel[155492]
    }
    unknown call_tmp[622349] "expr temp" "maybe param" "maybe type" "temp"
    (622352 'move' call_tmp[622349](155523 call - 1))
    unknown call_tmp[622354] "expr temp" "maybe param" "maybe type" "temp"
    (622357 'move' call_tmp[622354](155526 call _build_tuple 0 call_tmp[622349]))
    unknown call_tmp[622361] "expr temp" "maybe param" "maybe type" "temp"
    (622364 'move' call_tmp[622361](471178 call tableDom _mt[232] this[155880]))
    unknown call_tmp[622366] "expr temp" "maybe param" "maybe type" "temp"
    (622369 'move' call_tmp[622366](471176 call chpl__buildIndexType call_tmp[622361]))
    unknown call_tmp[622371] "expr temp" "maybe param" "maybe type" "temp"
    (622374 'move' call_tmp[622371](471173 call _build_tuple bool[10] call_tmp[622366]))
    (471182 'move' ret[471140](471181 'coerce' call_tmp[622354] call_tmp[622371]))
    label _end__findEmptySlot[471138]
    (471142 return ret[471140])
  }
  { scopeless type
    unknown call_tmp[622378] "expr temp" "maybe param" "maybe type" "temp"
    (622381 'move' call_tmp[622378](357511 call tableDom _mt[232] this[155880]))
    unknown call_tmp[622383] "expr temp" "maybe param" "maybe type" "temp"
    (622386 'move' call_tmp[622383](155414 call chpl__buildIndexType call_tmp[622378]))
    (155417 call _build_tuple bool[10] call_tmp[622383])
  }
  function DefaultAssociativeDom[155766](?)._lookForSlots[155539](arg _mt[155886]:_MT[227], arg this[155884]:DefaultAssociativeDom[155766](?), arg idx[155536] :
  (357540 call idxType _mt[232] this[155884]), arg numSlots[155542] :
  (692407 call tableSize _mt[232] this[155884]) =
  (357545 call tableSize _mt[232] this[155884])) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471186] "RVV" "temp"
    unknown call_tmp[622392] "expr temp" "maybe param" "maybe type" "temp"
    (622395 'move' call_tmp[622392](155548 call chpl__defaultHashWrapper idx[155536]))
    unknown call_tmp[622397] "maybe param" "maybe type" "temp"
    (622400 'move' call_tmp[622397](155550 call _cast uint(64)[107] call_tmp[622392]))
    const baseSlot[155552] "const" "insert auto destroy"
    (492229 'init var' baseSlot[155552] call_tmp[622397])
    {
      unknown _indexOfInterest[155594] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155595] "expr temp" "temp"
      unknown call_tmp[622402] "expr temp" "maybe param" "maybe type" "temp"
      (622405 'move' call_tmp[622402](155609 call / numSlots[155542] 2))
      unknown call_tmp[622407] "expr temp" "maybe param" "maybe type" "temp"
      (622410 'move' call_tmp[622407](155612 call chpl_direct_range_iter 0 call_tmp[622402] 1))
      (155604 'move' _iterator[155595](155602 call _getIterator call_tmp[622407]))
      Defer
      {
        {
          (155628 call _freeIterator _iterator[155595])
        }
      }
      { scopeless type
        (155617 'move' _indexOfInterest[155594](155614 call iteratorIndex _iterator[155595]))
      }
      ForLoop
      {
        unknown probe[155621] "index var" "insert auto destroy"
        (155623 'move' probe[155621] _indexOfInterest[155594])
        {
          unknown call_tmp[622412] "maybe param" "maybe type" "temp"
          (622415 'move' call_tmp[622412](155566 call _cast uint(64)[107] probe[155621]))
          unknown uprobe[155568] "insert auto destroy"
          (492231 'init var' uprobe[155568] call_tmp[622412])
          unknown call_tmp[622417] "maybe param" "maybe type" "temp"
          (622420 'move' call_tmp[622417](155574 call _cast uint(64)[107] numSlots[155542]))
          unknown n[155576] "insert auto destroy"
          (492233 'init var' n[155576] call_tmp[622417])
          unknown yret[471190] "YVV" "temp"
          unknown call_tmp[622422] "expr temp" "maybe param" "maybe type" "temp"
          (622425 'move' call_tmp[622422](155582 call ** uprobe[155568] 2))
          unknown call_tmp[622427] "expr temp" "maybe param" "maybe type" "temp"
          (622430 'move' call_tmp[622427](155584 call + baseSlot[155552] call_tmp[622422]))
          unknown call_tmp[622432] "expr temp" "maybe param" "maybe type" "temp"
          (622435 'move' call_tmp[622432](155587 call % call_tmp[622427] n[155576]))
          unknown call_tmp[622437] "expr temp" "maybe param" "maybe type" "temp"
          (622440 'move' call_tmp[622437](155590 call _cast int(64)[13] call_tmp[622432]))
          (471193 'move' yret[471190](471192 'deref' call_tmp[622437]))
          (471195 yield yret[471190])
        }
        label _continueLabel[155599]
        _indexOfInterest[155594]
        _iterator[155595]
      }
      label _breakLabel[155600]
    }
    (471188 return ret[471186])
  }
  function DefaultAssociativeDom[155766](?)._fullSlots[155643](arg _mt[155890]:_MT[227], arg this[155888]:DefaultAssociativeDom[155766](?), arg tab[155640] :
  (692412 call table _mt[232] this[155888]) =
  (357557 call table _mt[232] this[155888])) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471199] "RVV" "temp"
    {
      unknown _indexOfInterest[155672] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[155673] "expr temp" "temp"
      unknown call_tmp[622446] "expr temp" "maybe param" "maybe type" "temp"
      (622449 'move' call_tmp[622446](155647 call _dom _mt[232] tab[155640]))
      (155682 'move' _iterator[155673](155680 call _getIterator call_tmp[622446]))
      Defer
      {
        {
          (155699 call _freeIterator _iterator[155673])
        }
      }
      { scopeless type
        (155688 'move' _indexOfInterest[155672](155685 call iteratorIndex _iterator[155673]))
      }
      ForLoop
      {
        unknown slot[155692] "index var" "insert auto destroy"
        (155694 'move' slot[155692] _indexOfInterest[155672])
        {
          unknown call_tmp[622451] "expr temp" "maybe param" "maybe type" "temp"
          (622454 'move' call_tmp[622451](155653 call tab[155640] slot[155692]))
          unknown call_tmp[622458] "expr temp" "maybe param" "maybe type" "temp"
          (622461 'move' call_tmp[622458](155654 call status _mt[232] call_tmp[622451]))
          unknown call_tmp[622463] "expr temp" "maybe param" "maybe type" "temp"
          (622466 'move' call_tmp[622463](155661 call == call_tmp[622458] full[151196]))
          unknown call_tmp[622468] "expr temp" "maybe param" "maybe type" "temp"
          (622471 'move' call_tmp[622468](155666 call _cond_test call_tmp[622463]))
          if call_tmp[622468]
          {
            unknown yret[471203] "YVV" "temp"
            (471206 'move' yret[471203](471205 'deref' slot[155692]))
            (471208 yield yret[471203])
          }
        }
        label _continueLabel[155677]
        _indexOfInterest[155672]
        _iterator[155673]
      }
      label _breakLabel[155678]
    }
    (471201 return ret[471199])
  }
  function DefaultAssociativeDom[155766](?).dsiHasSingleLocalSubdomain[155711](arg _mt[155894]:_MT[227], arg this[155892]:DefaultAssociativeDom[155766](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[471212] "RVV" "param" "temp"
    (471217 'move' ret[471212](471216 'deref' 1))
    (471214 return ret[471212])
  }
  function DefaultAssociativeDom[155766](?).dsiLocalSubdomain[155725](arg _mt[155898]:_MT[227], arg this[155896]:DefaultAssociativeDom[155766](?), arg loc[155722]:locale[26]) : _unknown[43] "method" "primary method"
  {
    unknown ret[471221] "RVV" "temp"
    unknown call_tmp[622473] "expr temp" "maybe param" "maybe type" "temp"
    (622476 'move' call_tmp[622473](155728 '_wide_get_locale' this[155896]))
    unknown call_tmp[622478] "expr temp" "maybe param" "maybe type" "temp"
    (622481 'move' call_tmp[622478](155729 call chpl_localeID_to_locale call_tmp[622473]))
    unknown call_tmp[622483] "expr temp" "maybe param" "maybe type" "temp"
    (622486 'move' call_tmp[622483](155732 call == call_tmp[622478] loc[155722]))
    unknown call_tmp[622488] "expr temp" "maybe param" "maybe type" "temp"
    (622491 'move' call_tmp[622488](155758 call _cond_test call_tmp[622483]))
    if call_tmp[622488]
    {
      unknown call_tmp[622493] "expr temp" "maybe param" "maybe type" "temp"
      (622496 'move' call_tmp[622493](155738 call _to_unmanaged this[155896]))
      unknown call_tmp[622498] "expr temp" "maybe param" "maybe type" "temp"
      (622501 'move' call_tmp[622498](155740 call _getDomain call_tmp[622493]))
      (471226 'move' ret[471221](471225 'deref' call_tmp[622498]))
      gotoReturn _end_dsiLocalSubdomain[471219] _end_dsiLocalSubdomain[471219]
    }
    {
      unknown a[155751] "insert auto destroy"
      unknown call_tmp[622505] "expr temp" "maybe param" "maybe type" "temp"
      (622508 'move' call_tmp[622505](357570 call idxType _mt[232] this[155896]))
      unknown call_tmp[622512] "expr temp" "maybe param" "maybe type" "temp"
      (622515 'move' call_tmp[622512](357575 call parSafe _mt[232] this[155896]))
      unknown call_tmp[622517] "expr temp" "maybe param" "maybe type" "temp"
      (622520 'move' call_tmp[622517](155749 call chpl__buildDomainRuntimeType defaultDist[93214] call_tmp[622505](parSafe = call_tmp[622512])))
      (492235 'default init var' a[155751] call_tmp[622517])
      (471231 'move' ret[471221](471230 'deref' a[155751]))
      gotoReturn _end_dsiLocalSubdomain[471219] _end_dsiLocalSubdomain[471219]
    }
    label _end_dsiLocalSubdomain[471219]
    (471223 return ret[471221])
  }
  type DefaultAssociativeDom[155766](?) val super[331041]:BaseAssociativeDom[145308] "super class" unknown idxType[151402] "type variable" unknown parSafe[151406] "param" bool[10] val dist[151411]:unmanaged DefaultDist[389849] unmanaged DefaultDist[389849] unknown numEntries[151418](151417 call chpl__processorAtomicType int(64)[13]) unknown tableLock[151427](151424 IfExpr  parSafe[151406] then
  { scopeless
    chpl_LocalSpinlock[180469]
  } else
  { scopeless
    nothing[7]
  } ) val tableSizeNum[151431]:int(64)[13] 1 val tableSize[151435]:int(64)[13] int(64)[13] unknown tableDom[151448](151446 call chpl__buildDomainExpr(151443 call chpl_build_bounded_range 0(151441 call - tableSize[151435] 1))) unknown table[151461](151459 call chpl__buildArrayRuntimeType(151457 call chpl__ensureDomainExpr tableDom[151448])(151456 call chpl_TableEntry[151222](?) idxType[151402])) val postponeResize[151505]:bool[10] 0
  type unmanaged DefaultAssociativeDom[389944](?)
  type anymanaged DefaultAssociativeDom[345836](?)
  function DefaultAssociativeArr[158131](?).dsiGetBaseDom[155963](arg _mt[158135]:_MT[227], arg this[158133]:DefaultAssociativeArr[158131](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[471237] "RVV" "temp"
    unknown call_tmp[622524] "expr temp" "maybe param" "maybe type" "temp"
    (622527 'move' call_tmp[622524](357590 call dom _mt[232] this[158133]))
    (471242 'move' ret[471237](471241 'deref' call_tmp[622524]))
    (471239 return ret[471237])
  }
  function DefaultAssociativeArr[158131](?).clearEntry[155977](arg _mt[158139]:_MT[227], arg this[158137]:DefaultAssociativeArr[158131](?), arg idx[155974] :
  (357595 call idxType _mt[232] this[158137])) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown initval[155980] "insert auto destroy"
    unknown call_tmp[622533] "expr temp" "maybe param" "maybe type" "temp"
    (622536 'move' call_tmp[622533](357600 call eltType _mt[232] this[158137]))
    (492237 'default init var' initval[155980] call_tmp[622533])
    unknown call_tmp[622540] "expr temp" "maybe param" "maybe type" "temp"
    (622543 'move' call_tmp[622540](155987 call(357604 call (partial) dsiAccess _mt[232] this[158137]) idx[155974]))
    (155989 call = call_tmp[622540] initval[155980])
    (471244 return _void[47])
  }
  function DefaultAssociativeArr[158131](?).dsiAccess[156000](arg _mt[158143]:_MT[227], arg this[158141]:DefaultAssociativeArr[158131](?), arg idx[155997] :
  (357611 call idxType _mt[232] this[158141])) ref : _unknown[43] "method" "primary method"
  {
    unknown ret[471248] "RVV" "temp"
    unknown call_tmp[622549] "expr temp" "maybe param" "maybe type" "temp"
    (622552 'move' call_tmp[622549](357616 call dom _mt[232] this[158141]))
    unknown call_tmp[622556] "maybe param" "maybe type" "temp"
    (622559 'move' call_tmp[622556](156017 call(156010 call (partial) _findFilledSlot _mt[232] call_tmp[622549]) idx[155997](needLock = 0)))
    unknown tmp[156018] "insert auto destroy" "no copy" "temp"
    (492239 'init var' tmp[156018] call_tmp[622556])
    (156025 call _check_tuple_var_decl tmp[156018] 2)
    unknown call_tmp[622561] "maybe param" "maybe type" "temp"
    (622564 'move' call_tmp[622561](156019 call tmp[156018] 1))
    unknown found[156002] "insert auto destroy"
    (492241 'init var' found[156002] call_tmp[622561])
    unknown call_tmp[622566] "maybe param" "maybe type" "temp"
    (622569 'move' call_tmp[622566](156022 call tmp[156018] 2))
    unknown slotNum[156004] "insert auto destroy"
    (492243 'init var' slotNum[156004] call_tmp[622566])
    unknown call_tmp[622571] "expr temp" "maybe param" "maybe type" "temp"
    (622574 'move' call_tmp[622571](156170 call _cond_test found[156002]))
    if call_tmp[622571]
    {
      unknown call_tmp[622578] "expr temp" "maybe param" "maybe type" "temp"
      (622581 'move' call_tmp[622578](156035 call(357623 call (partial) data _mt[232] this[158141]) slotNum[156004]))
      (471253 'move' ret[471248](471252 'addr of' call_tmp[622578]))
      gotoReturn _end_dsiAccess[471246] _end_dsiAccess[471246]
    }
    {
      unknown call_tmp[622583] "expr temp" "maybe param" "maybe type" "temp"
      (622586 'move' call_tmp[622583](156041 call - 1))
      unknown call_tmp[622588] "expr temp" "maybe param" "maybe type" "temp"
      (622591 'move' call_tmp[622588](156043 call != slotNum[156004] call_tmp[622583]))
      unknown call_tmp[622593] "expr temp" "maybe param" "maybe type" "temp"
      (622596 'move' call_tmp[622593](156166 call _cond_test call_tmp[622588]))
      if call_tmp[622593]
      {
        unknown call_tmp[622600] "expr temp" "maybe param" "maybe type" "temp"
        (622603 'move' call_tmp[622600](357630 call dom _mt[232] this[158141]))
        unknown call_tmp[622607] "expr temp" "maybe param" "maybe type" "temp"
        (622610 'move' call_tmp[622607](156046 call _arrs _mt[232] call_tmp[622600]))
        unknown call_tmp[622614] "expr temp" "maybe param" "maybe type" "temp"
        (622617 'move' call_tmp[622614](156049 call length _mt[232] call_tmp[622607]))
        unknown call_tmp[622619] "maybe param" "maybe type" "temp"
        (622622 'move' call_tmp[622619](156053 call == call_tmp[622614] 1))
        const arrOwnsDom[156055] "const" "insert auto destroy"
        (492245 'init var' arrOwnsDom[156055] call_tmp[622619])
        unknown call_tmp[622624] "expr temp" "maybe param" "maybe type" "temp"
        (622627 'move' call_tmp[622624](156060 call ! arrOwnsDom[156055]))
        unknown call_tmp[622629] "expr temp" "maybe param" "maybe type" "temp"
        (622632 'move' call_tmp[622629](156149 call _cond_test call_tmp[622624]))
        if call_tmp[622629]
        {
          unknown call_tmp[622636] "expr temp" "maybe param" "maybe type" "temp"
          (622639 'move' call_tmp[622636](357636 call dom _mt[232] this[158141]))
          unknown call_tmp[622643] "expr temp" "maybe param" "maybe type" "temp"
          (622646 'move' call_tmp[622643](156081 call _arrs _mt[232] call_tmp[622636]))
          unknown call_tmp[622650] "expr temp" "maybe param" "maybe type" "temp"
          (622653 'move' call_tmp[622650](156084 call length _mt[232] call_tmp[622643]))
          (156087 call halt "cannot implicitly add to an array's domain when the domain is used by more than one array: " call_tmp[622650])
          unknown call_tmp[622657] "expr temp" "maybe param" "maybe type" "temp"
          (622660 'move' call_tmp[622657](156093 call(357641 call (partial) data _mt[232] this[158141]) 0))
          (471258 'move' ret[471248](471257 'addr of' call_tmp[622657]))
          gotoReturn _end_dsiAccess[471246] _end_dsiAccess[471246]
        }
        {
          (156114 call warning "growing associative domains by assigning to an array is deprecated")
          unknown call_tmp[622664] "expr temp" "maybe param" "maybe type" "temp"
          (622667 'move' call_tmp[622664](357646 call dom _mt[232] this[158141]))
          unknown call_tmp[622671] "maybe param" "maybe type" "temp"
          (622674 'move' call_tmp[622671](156133 call(156125 call (partial) _addWrapper _mt[232] call_tmp[622664]) idx[155997] slotNum[156004](needLock = 0)))
          const tmp[156134] "const" "insert auto destroy" "no copy" "temp"
          (492247 'init var' tmp[156134] call_tmp[622671])
          (156138 call _check_tuple_var_decl tmp[156134] 2)
          unknown call_tmp[622676] "maybe param" "maybe type" "temp"
          (622679 'move' call_tmp[622676](156135 call tmp[156134] 1))
          const newSlot[156117] "const" "insert auto destroy"
          (492249 'init var' newSlot[156117] call_tmp[622676])
          unknown call_tmp[622683] "expr temp" "maybe param" "maybe type" "temp"
          (622686 'move' call_tmp[622683](156146 call(357653 call (partial) data _mt[232] this[158141]) newSlot[156117]))
          (471263 'move' ret[471248](471262 'addr of' call_tmp[622683]))
          gotoReturn _end_dsiAccess[471246] _end_dsiAccess[471246]
        }
      }
      {
        (156157 call halt "array index out of bounds: " idx[155997])
        unknown call_tmp[622690] "expr temp" "maybe param" "maybe type" "temp"
        (622693 'move' call_tmp[622690](156163 call(357660 call (partial) data _mt[232] this[158141]) 0))
        (471268 'move' ret[471248](471267 'addr of' call_tmp[622690]))
        gotoReturn _end_dsiAccess[471246] _end_dsiAccess[471246]
      }
    }
    label _end_dsiAccess[471246]
    (471250 return ret[471248])
  }
  function DefaultAssociativeArr[158131](?).dsiAccess[156183](arg _mt[158147]:_MT[227], arg this[158145]:DefaultAssociativeArr[158131](?), arg idx[156180] :
  (357665 call idxType _mt[232] this[158145])) : _unknown[43] "method" "primary method"
  {
    unknown ret[471274] "RVV" "temp"
    unknown call_tmp[622699] "expr temp" "maybe param" "maybe type" "temp"
    (622702 'move' call_tmp[622699](357675 call dom _mt[232] this[158145]))
    unknown call_tmp[622706] "maybe param" "maybe type" "temp"
    (622709 'move' call_tmp[622706](156202 call(156195 call (partial) _findFilledSlot _mt[232] call_tmp[622699]) idx[156180](needLock = 0)))
    unknown tmp[156203] "insert auto destroy" "no copy" "temp"
    (492251 'init var' tmp[156203] call_tmp[622706])
    (156210 call _check_tuple_var_decl tmp[156203] 2)
    unknown call_tmp[622711] "maybe param" "maybe type" "temp"
    (622714 'move' call_tmp[622711](156204 call tmp[156203] 1))
    unknown found[156189] "insert auto destroy"
    (492253 'init var' found[156189] call_tmp[622711])
    unknown call_tmp[622716] "maybe param" "maybe type" "temp"
    (622719 'move' call_tmp[622716](156207 call tmp[156203] 2))
    unknown slotNum[156191] "insert auto destroy"
    (492255 'init var' slotNum[156191] call_tmp[622716])
    unknown call_tmp[622721] "expr temp" "maybe param" "maybe type" "temp"
    (622724 'move' call_tmp[622721](156237 call _cond_test found[156189]))
    if call_tmp[622721]
    {
      unknown call_tmp[622728] "expr temp" "maybe param" "maybe type" "temp"
      (622731 'move' call_tmp[622728](156220 call(357682 call (partial) data _mt[232] this[158145]) slotNum[156191]))
      (471279 'move' ret[471274](471278 'deref' call_tmp[622728]))
      gotoReturn _end_dsiAccess[471272] _end_dsiAccess[471272]
    }
    {
      (156228 call halt "array index out of bounds: " idx[156180])
      unknown call_tmp[622735] "expr temp" "maybe param" "maybe type" "temp"
      (622738 'move' call_tmp[622735](156234 call(357689 call (partial) data _mt[232] this[158145]) 0))
      (471284 'move' ret[471274](471283 'deref' call_tmp[622735]))
      gotoReturn _end_dsiAccess[471272] _end_dsiAccess[471272]
    }
    label _end_dsiAccess[471272]
    (471276 return ret[471274])
  }
  where {
    unknown call_tmp[622742] "expr temp" "maybe param" "maybe type" "temp"
    (622745 'move' call_tmp[622742](357670 call eltType _mt[232] this[158145]))
    (156188 call shouldReturnRvalueByValue call_tmp[622742])
  }
  function DefaultAssociativeArr[158131](?).dsiAccess[156250](arg _mt[158151]:_MT[227], arg this[158149]:DefaultAssociativeArr[158131](?), arg idx[156247] :
  (357694 call idxType _mt[232] this[158149])) const ref : _unknown[43] "method" "primary method"
  {
    unknown ret[471290] "RVV" "temp"
    unknown call_tmp[622751] "expr temp" "maybe param" "maybe type" "temp"
    (622754 'move' call_tmp[622751](357704 call dom _mt[232] this[158149]))
    unknown call_tmp[622758] "maybe param" "maybe type" "temp"
    (622761 'move' call_tmp[622758](156269 call(156262 call (partial) _findFilledSlot _mt[232] call_tmp[622751]) idx[156247](needLock = 0)))
    unknown tmp[156270] "insert auto destroy" "no copy" "temp"
    (492257 'init var' tmp[156270] call_tmp[622758])
    (156277 call _check_tuple_var_decl tmp[156270] 2)
    unknown call_tmp[622763] "maybe param" "maybe type" "temp"
    (622766 'move' call_tmp[622763](156271 call tmp[156270] 1))
    unknown found[156256] "insert auto destroy"
    (492259 'init var' found[156256] call_tmp[622763])
    unknown call_tmp[622768] "maybe param" "maybe type" "temp"
    (622771 'move' call_tmp[622768](156274 call tmp[156270] 2))
    unknown slotNum[156258] "insert auto destroy"
    (492261 'init var' slotNum[156258] call_tmp[622768])
    unknown call_tmp[622773] "expr temp" "maybe param" "maybe type" "temp"
    (622776 'move' call_tmp[622773](156304 call _cond_test found[156256]))
    if call_tmp[622773]
    {
      unknown call_tmp[622780] "expr temp" "maybe param" "maybe type" "temp"
      (622783 'move' call_tmp[622780](156287 call(357711 call (partial) data _mt[232] this[158149]) slotNum[156258]))
      (471295 'move' ret[471290](471294 'addr of' call_tmp[622780]))
      gotoReturn _end_dsiAccess[471288] _end_dsiAccess[471288]
    }
    {
      (156295 call halt "array index out of bounds: " idx[156247])
      unknown call_tmp[622787] "expr temp" "maybe param" "maybe type" "temp"
      (622790 'move' call_tmp[622787](156301 call(357718 call (partial) data _mt[232] this[158149]) 0))
      (471300 'move' ret[471290](471299 'addr of' call_tmp[622787]))
      gotoReturn _end_dsiAccess[471288] _end_dsiAccess[471288]
    }
    label _end_dsiAccess[471288]
    (471292 return ret[471290])
  }
  where {
    unknown call_tmp[622794] "expr temp" "maybe param" "maybe type" "temp"
    (622797 'move' call_tmp[622794](357699 call eltType _mt[232] this[158149]))
    (156255 call shouldReturnRvalueByConstRef call_tmp[622794])
  }
  function DefaultAssociativeArr[158131](?).dsiLocalAccess[156315](arg _mt[158155]:_MT[227], arg this[158153]:DefaultAssociativeArr[158131](?), arg i[156313]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[471306] "RVV" "temp"
    unknown call_tmp[622801] "expr temp" "maybe param" "maybe type" "temp"
    (622804 'move' call_tmp[622801](156320 call(357722 call (partial) dsiAccess _mt[232] this[158153]) i[156313]))
    (471311 'move' ret[471306](471310 'addr of' call_tmp[622801]))
    (471308 return ret[471306])
  }
  function DefaultAssociativeArr[158131](?).dsiLocalAccess[156330](arg _mt[158159]:_MT[227], arg this[158157]:DefaultAssociativeArr[158131](?), arg i[156328]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[471315] "RVV" "temp"
    unknown call_tmp[622808] "expr temp" "maybe param" "maybe type" "temp"
    (622811 'move' call_tmp[622808](156339 call(357732 call (partial) dsiAccess _mt[232] this[158157]) i[156328]))
    (471320 'move' ret[471315](471319 'deref' call_tmp[622808]))
    (471317 return ret[471315])
  }
  where {
    unknown call_tmp[622815] "expr temp" "maybe param" "maybe type" "temp"
    (622818 'move' call_tmp[622815](357728 call eltType _mt[232] this[158157]))
    (156335 call shouldReturnRvalueByValue call_tmp[622815])
  }
  function DefaultAssociativeArr[158131](?).dsiLocalAccess[156350](arg _mt[158163]:_MT[227], arg this[158161]:DefaultAssociativeArr[158131](?), arg i[156348]:_any[170](?)) const ref : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[471324] "RVV" "temp"
    unknown call_tmp[622822] "expr temp" "maybe param" "maybe type" "temp"
    (622825 'move' call_tmp[622822](156359 call(357742 call (partial) dsiAccess _mt[232] this[158161]) i[156348]))
    (471329 'move' ret[471324](471328 'addr of' call_tmp[622822]))
    (471326 return ret[471324])
  }
  where {
    unknown call_tmp[622829] "expr temp" "maybe param" "maybe type" "temp"
    (622832 'move' call_tmp[622829](357738 call eltType _mt[232] this[158161]))
    (156355 call shouldReturnRvalueByConstRef call_tmp[622829])
  }
  function DefaultAssociativeArr[158131](?).these[156368](arg _mt[158167]:_MT[227], arg this[158165]:DefaultAssociativeArr[158131](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471333] "RVV" "temp"
    {
      unknown _indexOfInterest[156379] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156380] "expr temp" "temp"
      unknown call_tmp[622836] "expr temp" "maybe param" "maybe type" "temp"
      (622839 'move' call_tmp[622836](357748 call dom _mt[232] this[158165]))
      (156389 'move' _iterator[156380](156387 call _getIterator call_tmp[622836]))
      Defer
      {
        {
          (156405 call _freeIterator _iterator[156380])
        }
      }
      { scopeless type
        (156394 'move' _indexOfInterest[156379](156391 call iteratorIndex _iterator[156380]))
      }
      ForLoop
      {
        unknown slot[156398] "index var" "insert auto destroy"
        (156400 'move' slot[156398] _indexOfInterest[156379])
        {
          unknown yret[471337] "YVV" "temp"
          unknown call_tmp[622843] "expr temp" "maybe param" "maybe type" "temp"
          (622846 'move' call_tmp[622843](156375 call(357752 call (partial) dsiAccess _mt[232] this[158165]) slot[156398]))
          (471340 'move' yret[471337](471339 'addr of' call_tmp[622843]))
          (471342 yield yret[471337])
        }
        label _continueLabel[156384]
        _indexOfInterest[156379]
        _iterator[156380]
      }
      label _breakLabel[156385]
    }
    (471335 return ret[471333])
  }
  function DefaultAssociativeArr[158131](?).these[156421](arg _mt[158171]:_MT[227], arg this[158169]:DefaultAssociativeArr[158131](?), param arg tag[156418]:iterKind[697]) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471346] "RVV" "temp"
    unknown call_tmp[622848] "expr temp" "maybe param" "maybe type" "temp"
    (622851 'move' call_tmp[622848](156452 call _cond_test debugDefaultAssoc[151182]))
    if call_tmp[622848]
    {
      (156449 call writeln "*** In associative array standalone iterator")
    }
    unknown call_tmp[622855] "expr temp" "maybe param" "maybe type" "temp"
    (622858 'move' call_tmp[622855](357762 call dom _mt[232] this[158169]))
    unknown call_tmp[622862] "maybe param" "maybe type" "temp"
    (622865 'move' call_tmp[622862](156458 call tableSize _mt[232] call_tmp[622855]))
    const numIndices[156461] "const" "insert auto destroy"
    (492263 'init var' numIndices[156461] call_tmp[622862])
    unknown call_tmp[622867] "maybe param" "maybe type" "temp"
    (622870 'move' call_tmp[622867](156467 call _computeNumChunks numIndices[156461]))
    const numChunks[156468] "const" "insert auto destroy"
    (492265 'init var' numChunks[156468] call_tmp[622867])
    unknown call_tmp[622872] "expr temp" "maybe param" "maybe type" "temp"
    (622875 'move' call_tmp[622872](156473 call == numChunks[156468] 1))
    unknown call_tmp[622877] "expr temp" "maybe param" "maybe type" "temp"
    (622880 'move' call_tmp[622877](156953 call _cond_test call_tmp[622872]))
    if call_tmp[622877]
    {
      {
        unknown _indexOfInterest[156510] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[156511] "expr temp" "temp"
        unknown call_tmp[622882] "expr temp" "maybe param" "maybe type" "temp"
        (622885 'move' call_tmp[622882](156527 call chpl_direct_counted_range_iter 0 numIndices[156461]))
        (156520 'move' _iterator[156511](156518 call _getIterator call_tmp[622882]))
        Defer
        {
          {
            (156543 call _freeIterator _iterator[156511])
          }
        }
        { scopeless type
          (156532 'move' _indexOfInterest[156510](156529 call iteratorIndex _iterator[156511]))
        }
        ForLoop
        {
          unknown slot[156536] "index var" "insert auto destroy"
          (156538 'move' slot[156536] _indexOfInterest[156510])
          {
            unknown call_tmp[622889] "expr temp" "maybe param" "maybe type" "temp"
            (622892 'move' call_tmp[622889](357769 call dom _mt[232] this[158169]))
            unknown call_tmp[622896] "expr temp" "maybe param" "maybe type" "temp"
            (622899 'move' call_tmp[622896](156488 call(156483 call (partial) table _mt[232] call_tmp[622889]) slot[156536]))
            unknown call_tmp[622903] "expr temp" "maybe param" "maybe type" "temp"
            (622906 'move' call_tmp[622903](156489 call status _mt[232] call_tmp[622896]))
            unknown call_tmp[622908] "expr temp" "maybe param" "maybe type" "temp"
            (622911 'move' call_tmp[622908](156496 call == call_tmp[622903] full[151196]))
            unknown call_tmp[622913] "expr temp" "maybe param" "maybe type" "temp"
            (622916 'move' call_tmp[622913](156505 call _cond_test call_tmp[622908]))
            if call_tmp[622913]
            {
              unknown yret[471350] "YVV" "temp"
              unknown call_tmp[622920] "expr temp" "maybe param" "maybe type" "temp"
              (622923 'move' call_tmp[622920](156501 call(357776 call (partial) data _mt[232] this[158169]) slot[156536]))
              (471353 'move' yret[471350](471352 'addr of' call_tmp[622920]))
              (471355 yield yret[471350])
            }
          }
          label _continueLabel[156515]
          _indexOfInterest[156510]
          _iterator[156511]
        }
        label _breakLabel[156516]
      }
    }
    {
      {
        unknown tmpIter[156691] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[622925] "expr temp" "maybe param" "maybe type" "temp"
        (622928 'move' call_tmp[622925](156553 call chpl_build_low_bounded_range 0))
        (156694 'move' tmpIter[156691](156556 call # call_tmp[622925] numChunks[156468]))
        unknown isRngDomArr[156933] "maybe param" "temp"
        unknown tmp[403071] "maybe param" "temp"
        (403082 'move' tmp[403071](156935 call isBoundedRange tmpIter[156691]))
        unknown call_tmp[622930] "expr temp" "maybe param" "maybe type" "temp"
        (622933 'move' call_tmp[622930](403084 call _cond_invalid tmp[403071]))
        if call_tmp[622930]
        {
          (403087 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[518184] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[518185] "maybe param" "temp"
        unknown call_tmp[622935] "expr temp" "maybe param" "maybe type" "temp"
        (622938 'move' call_tmp[622935](403072 call isTrue tmp[403071]))
        (518190 'move' tmp[518185](518188 call _cond_test call_tmp[622935]))
        if tmp[518185]
        {
          (518195 'move' tmp[518184](518192 '_paramFoldLogical' tmp[518185] 1))
        }
        {
          unknown tmp[403092] "maybe param" "temp"
          (403103 'move' tmp[403092](156938 call isDomain tmpIter[156691]))
          unknown call_tmp[622940] "expr temp" "maybe param" "maybe type" "temp"
          (622943 'move' call_tmp[622940](403105 call _cond_invalid tmp[403092]))
          if call_tmp[622940]
          {
            (403108 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[518157] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[518158] "maybe param" "temp"
          unknown call_tmp[622945] "expr temp" "maybe param" "maybe type" "temp"
          (622948 'move' call_tmp[622945](403093 call isTrue tmp[403092]))
          (518163 'move' tmp[518158](518161 call _cond_test call_tmp[622945]))
          if tmp[518158]
          {
            (518168 'move' tmp[518157](518165 '_paramFoldLogical' tmp[518158] 1))
          }
          {
            unknown tmp[518170] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[622950] "expr temp" "maybe param" "maybe type" "temp"
            (622953 'move' call_tmp[622950](156941 call isArray tmpIter[156691]))
            (518172 'move' tmp[518170](403097 call isTrue call_tmp[622950]))
            (518177 'move' tmp[518157](518174 '_paramFoldLogical' tmp[518158] tmp[518170]))
          }
          unknown tmp[518197] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (518199 'move' tmp[518197](403076 call isTrue tmp[518157]))
          (518204 'move' tmp[518184](518201 '_paramFoldLogical' tmp[518185] tmp[518197]))
        }
        (156948 'move' isRngDomArr[156933] tmp[518184])
        if isRngDomArr[156933]
        {
          const _coforallCount[156800] "const" "end count" "temp"
          (156869 'move' _coforallCount[156800](156866 call _endCountAlloc 1))
          unknown numTasks[156801] "temp"
          (156853 'move' numTasks[156801](156849 call size _mt[232] tmpIter[156691]))
          (156844 call _upEndCount _coforallCount[156800] 1 numTasks[156801])
          (156841 call chpl_resetTaskSpawn numTasks[156801])
          unknown _indexOfInterest[156808] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156809] "expr temp" "temp"
          (156818 'move' _iterator[156809](156816 call _getIterator tmpIter[156691]))
          Defer
          {
            {
              (156834 call _freeIterator _iterator[156809])
            }
          }
          { scopeless type
            (156823 'move' _indexOfInterest[156808](156820 call iteratorIndex _iterator[156809]))
          }
          ForLoop
          {
            unknown chunk[156827] "coforall index var" "index var" "insert auto destroy"
            (156829 'move' chunk[156827] _indexOfInterest[156808])
            {
              {
                unknown call_tmp[622957] "expr temp" "maybe param" "maybe type" "temp"
                (622960 'move' call_tmp[622957](156705 call - numIndices[156461] 1))
                unknown call_tmp[622962] "maybe param" "maybe type" "temp"
                (622965 'move' call_tmp[622962](156700 call _computeBlock numIndices[156461] numChunks[156468] chunk[156827] call_tmp[622957]))
                const tmp[156698] "const" "insert auto destroy" "no copy" "temp"
                (492267 'init var' tmp[156698] call_tmp[622962])
                (156710 call _check_tuple_var_decl tmp[156698] 2)
                unknown call_tmp[622967] "maybe param" "maybe type" "temp"
                (622970 'move' call_tmp[622967](156715 call tmp[156698] 1))
                const lo[156713] "const" "insert auto destroy"
                (492269 'init var' lo[156713] call_tmp[622967])
                unknown call_tmp[622972] "maybe param" "maybe type" "temp"
                (622975 'move' call_tmp[622972](156720 call tmp[156698] 2))
                const hi[156718] "const" "insert auto destroy"
                (492271 'init var' hi[156718] call_tmp[622972])
                unknown call_tmp[622977] "expr temp" "maybe param" "maybe type" "temp"
                (622980 'move' call_tmp[622977](156724 call _cond_test debugAssocDataPar[151186]))
                if call_tmp[622977]
                {
                  (156728 call writeln "In associative array standalone iterator: chunk = " chunk[156827])
                }
                unknown call_tmp[622984] "expr temp" "maybe param" "maybe type" "temp"
                (622987 'move' call_tmp[622984](357816 call dom _mt[232] this[158169]))
                unknown call_tmp[622991] "maybe param" "maybe type" "temp"
                (622994 'move' call_tmp[622991](156734 call table _mt[232] call_tmp[622984]))
                unknown table[156732] "insert auto destroy"
                (492273 'init var' table[156732] call_tmp[622991])
                {
                  unknown _indexOfInterest[156739] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[156741] "expr temp" "temp"
                  unknown call_tmp[622996] "expr temp" "maybe param" "maybe type" "temp"
                  (622999 'move' call_tmp[622996](156748 call chpl_direct_range_iter lo[156713] hi[156718] 1))
                  (156743 'move' _iterator[156741](156746 call _getIterator call_tmp[622996]))
                  Defer
                  {
                    {
                      (156754 call _freeIterator _iterator[156741])
                    }
                  }
                  { scopeless type
                    (156758 'move' _indexOfInterest[156739](156761 call iteratorIndex _iterator[156741]))
                  }
                  ForLoop
                  {
                    unknown slot[156766] "index var" "insert auto destroy"
                    (156768 'move' slot[156766] _indexOfInterest[156739])
                    {
                      unknown call_tmp[623003] "expr temp" "maybe param" "maybe type" "temp"
                      (623006 'move' call_tmp[623003](357823 call dom _mt[232] this[158169]))
                      unknown call_tmp[623010] "expr temp" "maybe param" "maybe type" "temp"
                      (623013 'move' call_tmp[623010](156782 call(156779 call (partial) table _mt[232] call_tmp[623003]) slot[156766]))
                      unknown call_tmp[623017] "expr temp" "maybe param" "maybe type" "temp"
                      (623020 'move' call_tmp[623017](156777 call status _mt[232] call_tmp[623010]))
                      unknown call_tmp[623022] "expr temp" "maybe param" "maybe type" "temp"
                      (623025 'move' call_tmp[623022](156775 call == call_tmp[623017] full[151196]))
                      unknown call_tmp[623027] "expr temp" "maybe param" "maybe type" "temp"
                      (623030 'move' call_tmp[623027](156773 call _cond_test call_tmp[623022]))
                      if call_tmp[623027]
                      {
                        unknown yret[471357] "YVV" "temp"
                        unknown call_tmp[623034] "expr temp" "maybe param" "maybe type" "temp"
                        (623037 'move' call_tmp[623034](156792 call(357830 call (partial) data _mt[232] this[158169]) slot[156766]))
                        (471360 'move' yret[471357](471359 'addr of' call_tmp[623034]))
                        (471362 yield yret[471357])
                      }
                    }
                    label _continueLabel[156795]
                    _indexOfInterest[156739]
                    _iterator[156741]
                  }
                  label _breakLabel[156797]
                }
              }
              (156803 call _downEndCount _coforallCount[156800] nil[38])
              (156802 'coforall loop')
            }
            label _continueLabel[156813]
            _indexOfInterest[156808]
            _iterator[156809]
          }
          label _breakLabel[156814]
          Defer
          {
            {
              (156856 call _endCountFree _coforallCount[156800])
            }
          }
          (156861 call _waitEndCount _coforallCount[156800] 1 numTasks[156801])
        }
        {
          const _coforallCount[156873] "const" "end count" "temp"
          (156930 'move' _coforallCount[156873](156927 call _endCountAlloc 1))
          unknown _indexOfInterest[156881] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[156882] "expr temp" "temp"
          (156891 'move' _iterator[156882](156889 call _getIterator tmpIter[156691]))
          Defer
          {
            {
              (156907 call _freeIterator _iterator[156882])
            }
          }
          { scopeless type
            (156896 'move' _indexOfInterest[156881](156893 call iteratorIndex _iterator[156882]))
          }
          ForLoop
          {
            unknown chunk[156900] "coforall index var" "index var" "insert auto destroy"
            (156902 'move' chunk[156900] _indexOfInterest[156881])
            (156914 call _upEndCount _coforallCount[156873] 1)
            {
              {
                unknown call_tmp[623039] "expr temp" "maybe param" "maybe type" "temp"
                (623042 'move' call_tmp[623039](156570 call - numIndices[156461] 1))
                unknown call_tmp[623044] "maybe param" "maybe type" "temp"
                (623047 'move' call_tmp[623044](156572 call _computeBlock numIndices[156461] numChunks[156468] chunk[156900] call_tmp[623039]))
                const tmp[156573] "const" "insert auto destroy" "no copy" "temp"
                (492275 'init var' tmp[156573] call_tmp[623044])
                (156580 call _check_tuple_var_decl tmp[156573] 2)
                unknown call_tmp[623049] "maybe param" "maybe type" "temp"
                (623052 'move' call_tmp[623049](156574 call tmp[156573] 1))
                const lo[156558] "const" "insert auto destroy"
                (492277 'init var' lo[156558] call_tmp[623049])
                unknown call_tmp[623054] "maybe param" "maybe type" "temp"
                (623057 'move' call_tmp[623054](156577 call tmp[156573] 2))
                const hi[156560] "const" "insert auto destroy"
                (492279 'init var' hi[156560] call_tmp[623054])
                unknown call_tmp[623059] "expr temp" "maybe param" "maybe type" "temp"
                (623062 'move' call_tmp[623059](156609 call _cond_test debugAssocDataPar[151186]))
                if call_tmp[623059]
                {
                  (156606 call writeln "In associative array standalone iterator: chunk = " chunk[156900])
                }
                unknown call_tmp[623066] "expr temp" "maybe param" "maybe type" "temp"
                (623069 'move' call_tmp[623066](357790 call dom _mt[232] this[158169]))
                unknown call_tmp[623073] "maybe param" "maybe type" "temp"
                (623076 'move' call_tmp[623073](156614 call table _mt[232] call_tmp[623066]))
                unknown table[156617] "insert auto destroy"
                (492281 'init var' table[156617] call_tmp[623073])
                {
                  unknown _indexOfInterest[156653] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[156654] "expr temp" "temp"
                  unknown call_tmp[623078] "expr temp" "maybe param" "maybe type" "temp"
                  (623081 'move' call_tmp[623078](156668 call chpl_direct_range_iter lo[156558] hi[156560] 1))
                  (156663 'move' _iterator[156654](156661 call _getIterator call_tmp[623078]))
                  Defer
                  {
                    {
                      (156684 call _freeIterator _iterator[156654])
                    }
                  }
                  { scopeless type
                    (156673 'move' _indexOfInterest[156653](156670 call iteratorIndex _iterator[156654]))
                  }
                  ForLoop
                  {
                    unknown slot[156677] "index var" "insert auto destroy"
                    (156679 'move' slot[156677] _indexOfInterest[156653])
                    {
                      unknown call_tmp[623085] "expr temp" "maybe param" "maybe type" "temp"
                      (623088 'move' call_tmp[623085](357795 call dom _mt[232] this[158169]))
                      unknown call_tmp[623092] "expr temp" "maybe param" "maybe type" "temp"
                      (623095 'move' call_tmp[623092](156631 call(156626 call (partial) table _mt[232] call_tmp[623085]) slot[156677]))
                      unknown call_tmp[623099] "expr temp" "maybe param" "maybe type" "temp"
                      (623102 'move' call_tmp[623099](156632 call status _mt[232] call_tmp[623092]))
                      unknown call_tmp[623104] "expr temp" "maybe param" "maybe type" "temp"
                      (623107 'move' call_tmp[623104](156639 call == call_tmp[623099] full[151196]))
                      unknown call_tmp[623109] "expr temp" "maybe param" "maybe type" "temp"
                      (623112 'move' call_tmp[623109](156648 call _cond_test call_tmp[623104]))
                      if call_tmp[623109]
                      {
                        unknown yret[471364] "YVV" "temp"
                        unknown call_tmp[623116] "expr temp" "maybe param" "maybe type" "temp"
                        (623119 'move' call_tmp[623116](156644 call(357802 call (partial) data _mt[232] this[158169]) slot[156677]))
                        (471367 'move' yret[471364](471366 'addr of' call_tmp[623116]))
                        (471369 yield yret[471364])
                      }
                    }
                    label _continueLabel[156658]
                    _indexOfInterest[156653]
                    _iterator[156654]
                  }
                  label _breakLabel[156659]
                }
              }
              (156876 call _downEndCount _coforallCount[156873] nil[38])
              (156875 'coforall loop')
            }
            label _continueLabel[156886]
            _indexOfInterest[156881]
            _iterator[156882]
          }
          label _breakLabel[156887]
          Defer
          {
            {
              (156918 call _endCountFree _coforallCount[156873])
            }
          }
          (156923 call _waitEndCount _coforallCount[156873] 1)
        }
      }
    }
    (471348 return ret[471346])
  }
  where {
    (156428 call == tag[156418] standalone[695])
  }
  function DefaultAssociativeArr[158131](?).these[156966](arg _mt[158175]:_MT[227], arg this[158173]:DefaultAssociativeArr[158131](?), param arg tag[156963]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471373] "RVV" "temp"
    {
      unknown _indexOfInterest[156986] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[156987] "expr temp" "temp"
      unknown call_tmp[623123] "expr temp" "maybe param" "maybe type" "temp"
      (623126 'move' call_tmp[623123](357839 call dom _mt[232] this[158173]))
      unknown call_tmp[623130] "expr temp" "maybe param" "maybe type" "temp"
      (623133 'move' call_tmp[623130](156982 call(156977 call (partial) these _mt[232] call_tmp[623123]) tag[156963]))
      (156996 'move' _iterator[156987](156994 call _getIterator call_tmp[623130]))
      Defer
      {
        {
          (157013 call _freeIterator _iterator[156987])
        }
      }
      { scopeless type
        (157002 'move' _indexOfInterest[156986](156999 call iteratorIndex _iterator[156987]))
      }
      ForLoop
      {
        unknown followThis[157006] "index var" "insert auto destroy"
        (157008 'move' followThis[157006] _indexOfInterest[156986])
        unknown yret[471377] "YVV" "temp"
        (471380 'move' yret[471377](471379 'deref' followThis[157006]))
        (471382 yield yret[471377])
        label _continueLabel[156991]
        _indexOfInterest[156986]
        _iterator[156987]
      }
      label _breakLabel[156992]
    }
    (471375 return ret[471373])
  }
  where {
    (156973 call == tag[156963] leader[691])
  }
  function DefaultAssociativeArr[158131](?).these[157030](arg _mt[158179]:_MT[227], arg this[158177]:DefaultAssociativeArr[158131](?), param arg tag[157027]:iterKind[697], arg followThis[157032]:_any[170](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471386] "RVV" "temp"
    unknown tmp[157047] "no auto destroy" "no copy" "temp"
    (492283 'init var' tmp[157047] followThis[157032])
    (157054 call _check_tuple_var_decl tmp[157047] 2)
    unknown call_tmp[623135] "maybe param" "maybe type" "temp"
    (623138 'move' call_tmp[623135](157048 call tmp[157047] 1))
    unknown chunk[157041] "insert auto destroy"
    (492285 'init var' chunk[157041] call_tmp[623135])
    unknown call_tmp[623140] "maybe param" "maybe type" "temp"
    (623143 'move' call_tmp[623140](157051 call tmp[157047] 2))
    unknown followThisDom[157043] "insert auto destroy"
    (492287 'init var' followThisDom[157043] call_tmp[623140])
    unknown call_tmp[623145] "expr temp" "maybe param" "maybe type" "temp"
    (623148 'move' call_tmp[623145](157082 call _cond_test debugDefaultAssoc[151182]))
    if call_tmp[623145]
    {
      (157080 call writeln "In array follower code: Following " chunk[157041])
    }
    unknown call_tmp[623152] "expr temp" "maybe param" "maybe type" "temp"
    (623155 'move' call_tmp[623152](157089 call dom _mt[232] this[158177]))
    unknown call_tmp[623157] "maybe param" "maybe type" "temp"
    (623160 'move' call_tmp[623157](157092 call == followThisDom[157043] call_tmp[623152]))
    const sameDom[157094] "const" "insert auto destroy"
    (492289 'init var' sameDom[157094] call_tmp[623157])
    unknown call_tmp[623162] "expr temp" "maybe param" "maybe type" "temp"
    (623165 'move' call_tmp[623162](157098 call ! sameDom[157094]))
    unknown call_tmp[623167] "expr temp" "maybe param" "maybe type" "temp"
    (623170 'move' call_tmp[623167](157138 call _cond_test call_tmp[623162]))
    if call_tmp[623167]
    {
      unknown call_tmp[623174] "expr temp" "maybe param" "maybe type" "temp"
      (623177 'move' call_tmp[623174](157101 call dsiNumIndices _mt[232] followThisDom[157043]))
      unknown call_tmp[623181] "expr temp" "maybe param" "maybe type" "temp"
      (623184 'move' call_tmp[623181](157105 call dom _mt[232] this[158177]))
      unknown call_tmp[623188] "expr temp" "maybe param" "maybe type" "temp"
      (623191 'move' call_tmp[623188](157108 call dsiNumIndices _mt[232] call_tmp[623181]))
      unknown call_tmp[623193] "expr temp" "maybe param" "maybe type" "temp"
      (623196 'move' call_tmp[623193](157111 call != call_tmp[623174] call_tmp[623188]))
      unknown call_tmp[623198] "expr temp" "maybe param" "maybe type" "temp"
      (623201 'move' call_tmp[623198](157133 call _cond_test call_tmp[623193]))
      if call_tmp[623198]
      {
        (157131 call halt "zippered associative array does not match the iterated domain")
      }
    }
    unknown call_tmp[623205] "maybe param" "maybe type" "temp"
    (623208 'move' call_tmp[623205](157144 call table _mt[232] followThisDom[157043]))
    unknown otherTable[157147] "insert auto destroy"
    (492291 'init var' otherTable[157147] call_tmp[623205])
    {
      unknown _indexOfInterest[157249] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157250] "expr temp" "temp"
      unknown call_tmp[623212] "expr temp" "maybe param" "maybe type" "temp"
      (623215 'move' call_tmp[623212](157263 call low _mt[232] chunk[157041]))
      unknown call_tmp[623219] "expr temp" "maybe param" "maybe type" "temp"
      (623222 'move' call_tmp[623219](157267 call high _mt[232] chunk[157041]))
      unknown call_tmp[623224] "expr temp" "maybe param" "maybe type" "temp"
      (623227 'move' call_tmp[623224](157270 call chpl_direct_range_iter call_tmp[623212] call_tmp[623219] 1))
      (157259 'move' _iterator[157250](157257 call _getIterator call_tmp[623224]))
      Defer
      {
        {
          (157286 call _freeIterator _iterator[157250])
        }
      }
      { scopeless type
        (157275 'move' _indexOfInterest[157249](157272 call iteratorIndex _iterator[157250]))
      }
      ForLoop
      {
        unknown slot[157279] "index var" "insert auto destroy"
        (157281 'move' slot[157279] _indexOfInterest[157249])
        {
          unknown call_tmp[623229] "maybe param" "maybe type" "temp"
          (623232 'move' call_tmp[623229](157164 call otherTable[157147] slot[157279]))
          unknown entry[157165] "insert auto destroy"
          (492293 'init var' entry[157165] call_tmp[623229])
          unknown call_tmp[623236] "expr temp" "maybe param" "maybe type" "temp"
          (623239 'move' call_tmp[623236](157170 call status _mt[232] entry[157165]))
          unknown call_tmp[623241] "expr temp" "maybe param" "maybe type" "temp"
          (623244 'move' call_tmp[623241](157177 call == call_tmp[623236] full[151196]))
          unknown call_tmp[623246] "expr temp" "maybe param" "maybe type" "temp"
          (623249 'move' call_tmp[623246](157245 call _cond_test call_tmp[623241]))
          if call_tmp[623246]
          {
            unknown idx[157180] "insert auto destroy"
            (492295 'init var' idx[157180] slot[157279])
            unknown call_tmp[623251] "expr temp" "maybe param" "maybe type" "temp"
            (623254 'move' call_tmp[623251](157185 call ! sameDom[157094]))
            unknown call_tmp[623256] "expr temp" "maybe param" "maybe type" "temp"
            (623259 'move' call_tmp[623256](157235 call _cond_test call_tmp[623251]))
            if call_tmp[623256]
            {
              unknown call_tmp[623263] "expr temp" "maybe param" "maybe type" "temp"
              (623266 'move' call_tmp[623263](357864 call dom _mt[232] this[158177]))
              unknown call_tmp[623272] "expr temp" "maybe param" "maybe type" "temp"
              (623275 'move' call_tmp[623272](157197 call idx _mt[232] entry[157165]))
              unknown call_tmp[623277] "maybe param" "maybe type" "temp"
              (623280 'move' call_tmp[623277](157203 call(157193 call (partial) _findFilledSlot _mt[232] call_tmp[623263]) call_tmp[623272](needLock = 0)))
              const tmp[157204] "const" "insert auto destroy" "no copy" "temp"
              (492297 'init var' tmp[157204] call_tmp[623277])
              (157211 call _check_tuple_var_decl tmp[157204] 2)
              unknown call_tmp[623282] "maybe param" "maybe type" "temp"
              (623285 'move' call_tmp[623282](157205 call tmp[157204] 1))
              const match[157187] "const" "insert auto destroy"
              (492299 'init var' match[157187] call_tmp[623282])
              unknown call_tmp[623287] "maybe param" "maybe type" "temp"
              (623290 'move' call_tmp[623287](157208 call tmp[157204] 2))
              const loc[157189] "const" "insert auto destroy"
              (492301 'init var' loc[157189] call_tmp[623287])
              unknown call_tmp[623292] "expr temp" "maybe param" "maybe type" "temp"
              (623295 'move' call_tmp[623292](157218 call ! match[157187]))
              unknown call_tmp[623297] "expr temp" "maybe param" "maybe type" "temp"
              (623300 'move' call_tmp[623297](157225 call _cond_test call_tmp[623292]))
              if call_tmp[623297]
              {
                (157223 call halt "zippered associative array does not match the iterated domain")
              }
              (157232 call = idx[157180] loc[157189])
            }
            unknown yret[471390] "YVV" "temp"
            unknown call_tmp[623304] "expr temp" "maybe param" "maybe type" "temp"
            (623307 'move' call_tmp[623304](157242 call(357873 call (partial) data _mt[232] this[158177]) idx[157180]))
            (471393 'move' yret[471390](471392 'addr of' call_tmp[623304]))
            (471395 yield yret[471390])
          }
        }
        label _continueLabel[157254]
        _indexOfInterest[157249]
        _iterator[157250]
      }
      label _breakLabel[157255]
    }
    (471388 return ret[471386])
  }
  where {
    (157039 call == tag[157027] follower[693])
  }
  function DefaultAssociativeArr[158131](?).dsiSerialReadWrite[157300](arg _mt[158183]:_MT[227], arg this[158181]:DefaultAssociativeArr[158131](?), arg f[157298]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[623311] "maybe param" "maybe type" "temp"
    (623314 'move' call_tmp[623311](157307 call(157303 call (partial) binary _mt[232] f[157298])))
    unknown binary[157308] "insert auto destroy"
    (492303 'init var' binary[157308] call_tmp[623311])
    unknown call_tmp[623318] "maybe param" "maybe type" "temp"
    (623321 'move' call_tmp[623318](157318 call(157313 call (partial) styleElement _mt[232] f[157298]) QIO_STYLE_ELEMENT_ARRAY[19366]))
    unknown arrayStyle[157319] "insert auto destroy"
    (492305 'init var' arrayStyle[157319] call_tmp[623318])
    unknown tmp[403113] "maybe param" "temp"
    (403124 'move' tmp[403113](157324 call == arrayStyle[157319] QIO_ARRAY_FORMAT_SPACE[19390]))
    unknown call_tmp[623323] "expr temp" "maybe param" "maybe type" "temp"
    (623326 'move' call_tmp[623323](403126 call _cond_invalid tmp[403113]))
    if call_tmp[623323]
    {
      (403129 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isspace[157331] "insert auto destroy"
    unknown tmp[518211] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518212] "maybe param" "temp"
    unknown call_tmp[623328] "expr temp" "maybe param" "maybe type" "temp"
    (623331 'move' call_tmp[623328](403114 call isTrue tmp[403113]))
    (518217 'move' tmp[518212](518215 call _cond_test call_tmp[623328]))
    if tmp[518212]
    {
      unknown tmp[518219] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623333] "expr temp" "maybe param" "maybe type" "temp"
      (623336 'move' call_tmp[623333](157327 call ! binary[157308]))
      (518221 'move' tmp[518219](403117 call isTrue call_tmp[623333]))
      (518226 'move' tmp[518211](518223 '_paramFoldLogical' tmp[518212] tmp[518219]))
    }
    {
      (518231 'move' tmp[518211](518228 '_paramFoldLogical' tmp[518212] 0))
    }
    (492307 'init var' isspace[157331] tmp[518211])
    unknown tmp[403134] "maybe param" "temp"
    (403145 'move' tmp[403134](157336 call == arrayStyle[157319] QIO_ARRAY_FORMAT_JSON[19398]))
    unknown call_tmp[623338] "expr temp" "maybe param" "maybe type" "temp"
    (623341 'move' call_tmp[623338](403147 call _cond_invalid tmp[403134]))
    if call_tmp[623338]
    {
      (403150 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown isjson[157343] "insert auto destroy"
    unknown tmp[518238] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518239] "maybe param" "temp"
    unknown call_tmp[623343] "expr temp" "maybe param" "maybe type" "temp"
    (623346 'move' call_tmp[623343](403135 call isTrue tmp[403134]))
    (518244 'move' tmp[518239](518242 call _cond_test call_tmp[623343]))
    if tmp[518239]
    {
      unknown tmp[518246] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623348] "expr temp" "maybe param" "maybe type" "temp"
      (623351 'move' call_tmp[623348](157339 call ! binary[157308]))
      (518248 'move' tmp[518246](403138 call isTrue call_tmp[623348]))
      (518253 'move' tmp[518238](518250 '_paramFoldLogical' tmp[518239] tmp[518246]))
    }
    {
      (518258 'move' tmp[518238](518255 '_paramFoldLogical' tmp[518239] 0))
    }
    (492309 'init var' isjson[157343] tmp[518238])
    unknown tmp[403155] "maybe param" "temp"
    (403166 'move' tmp[403155](157348 call == arrayStyle[157319] QIO_ARRAY_FORMAT_CHPL[19394]))
    unknown call_tmp[623353] "expr temp" "maybe param" "maybe type" "temp"
    (623356 'move' call_tmp[623353](403168 call _cond_invalid tmp[403155]))
    if call_tmp[623353]
    {
      (403171 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown ischpl[157355] "insert auto destroy"
    unknown tmp[518265] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518266] "maybe param" "temp"
    unknown call_tmp[623358] "expr temp" "maybe param" "maybe type" "temp"
    (623361 'move' call_tmp[623358](403156 call isTrue tmp[403155]))
    (518271 'move' tmp[518266](518269 call _cond_test call_tmp[623358]))
    if tmp[518266]
    {
      unknown tmp[518273] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[623363] "expr temp" "maybe param" "maybe type" "temp"
      (623366 'move' call_tmp[623363](157351 call ! binary[157308]))
      (518275 'move' tmp[518273](403159 call isTrue call_tmp[623363]))
      (518280 'move' tmp[518265](518277 '_paramFoldLogical' tmp[518266] tmp[518273]))
    }
    {
      (518285 'move' tmp[518265](518282 '_paramFoldLogical' tmp[518266] 0))
    }
    (492311 'init var' ischpl[157355] tmp[518265])
    unknown tmp[403239] "maybe param" "temp"
    unknown call_tmp[623370] "expr temp" "maybe param" "maybe type" "temp"
    (623373 'move' call_tmp[623370](157359 call writing _mt[232] f[157298]))
    (403250 'move' tmp[403239](157362 call ! call_tmp[623370]))
    unknown call_tmp[623375] "expr temp" "maybe param" "maybe type" "temp"
    (623378 'move' call_tmp[623375](403252 call _cond_invalid tmp[403239]))
    if call_tmp[623375]
    {
      (403255 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[518292] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518293] "maybe param" "temp"
    unknown call_tmp[623380] "expr temp" "maybe param" "maybe type" "temp"
    (623383 'move' call_tmp[623380](403240 call isTrue tmp[403239]))
    (518298 'move' tmp[518293](518296 call _cond_test call_tmp[623380]))
    if tmp[518293]
    {
      unknown tmp[518300] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (518302 'move' tmp[518300](403243 call isTrue ischpl[157355]))
      (518307 'move' tmp[518292](518304 '_paramFoldLogical' tmp[518293] tmp[518300]))
    }
    {
      (518312 'move' tmp[518292](518309 '_paramFoldLogical' tmp[518293] 0))
    }
    unknown call_tmp[623385] "expr temp" "maybe param" "maybe type" "temp"
    (623388 'move' call_tmp[623385](157547 call _cond_test tmp[518292]))
    if call_tmp[623385]
    {
      (157375 call(157370 call (partial) readChapelStyleAssocArray _mt[232] this[158181]) f[157298])
    }
    {
      unknown tmp[403176] "maybe param" "temp"
      (403187 'move' tmp[403176] isjson[157343])
      unknown call_tmp[623392] "expr temp" "maybe param" "maybe type" "temp"
      (623395 'move' call_tmp[623392](403189 call _cond_invalid tmp[403176]))
      if call_tmp[623392]
      {
        (403192 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[518319] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[518320] "maybe param" "temp"
      unknown call_tmp[623397] "expr temp" "maybe param" "maybe type" "temp"
      (623400 'move' call_tmp[623397](403177 call isTrue tmp[403176]))
      (518325 'move' tmp[518320](518323 call _cond_test call_tmp[623397]))
      if tmp[518320]
      {
        (518330 'move' tmp[518319](518327 '_paramFoldLogical' tmp[518320] 1))
      }
      {
        unknown tmp[518332] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (518334 'move' tmp[518332](403181 call isTrue ischpl[157355]))
        (518339 'move' tmp[518319](518336 '_paramFoldLogical' tmp[518320] tmp[518332]))
      }
      unknown call_tmp[623402] "expr temp" "maybe param" "maybe type" "temp"
      (623405 'move' call_tmp[623402](157392 call _cond_test tmp[518319]))
      if call_tmp[623402]
      {
        unknown call_tmp[623407] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
        (623410 'move' call_tmp[623407](691504 'new' ioLiteral[226016] "["))
        (157388 call <~> f[157298] call_tmp[623407])
      }
      unknown first[157398] "insert auto destroy"
      (492313 'init var' first[157398] 1)
      {
        unknown _indexOfInterest[157491] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[157492] "expr temp" "temp"
        unknown call_tmp[623414] "expr temp" "maybe param" "maybe type" "temp"
        (623417 'move' call_tmp[623414](157501 call dom _mt[232] this[158181]))
        unknown call_tmp[623419] "expr temp" "maybe param" "maybe type" "temp"
        (623422 'move' call_tmp[623419](157504 call _getIterator call_tmp[623414]))
        unknown call_tmp[623424] "expr temp" "maybe param" "maybe type" "temp"
        (623427 'move' call_tmp[623424](157508 call _getIterator this[158181]))
        (157510 'move' _iterator[157492](157412 call _build_tuple call_tmp[623419] call_tmp[623424]))
        Defer
        {
          {
            (157540 call _freeIterator _iterator[157492])
          }
        }
        { scopeless type
          (157515 'move' _indexOfInterest[157491](157512 call iteratorIndex _iterator[157492]))
        }
        ForLoop
        {
          (157520 call _check_tuple_var_decl _indexOfInterest[157491] 2)
          unknown key[157526] "index var" "insert auto destroy"
          (157528 'move' key[157526](157524 call _indexOfInterest[157491] 1))
          unknown val[157533] "index var" "insert auto destroy"
          (157535 'move' val[157533](157531 call _indexOfInterest[157491] 2))
          {
            unknown call_tmp[623429] "expr temp" "maybe param" "maybe type" "temp"
            (623432 'move' call_tmp[623429](157453 call _cond_test first[157398]))
            if call_tmp[623429]
            {
              (157416 call = first[157398] 0)
            }
            {
              unknown call_tmp[623434] "expr temp" "maybe param" "maybe type" "temp"
              (623437 'move' call_tmp[623434](157447 call _cond_test isspace[157331]))
              if call_tmp[623434]
              {
                unknown call_tmp[623439] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                (623442 'move' call_tmp[623439](691505 'new' ioLiteral[226016] " "))
                (157426 call <~> f[157298] call_tmp[623439])
              }
              {
                unknown tmp[403197] "maybe param" "temp"
                (403208 'move' tmp[403197] isjson[157343])
                unknown call_tmp[623444] "expr temp" "maybe param" "maybe type" "temp"
                (623447 'move' call_tmp[623444](403210 call _cond_invalid tmp[403197]))
                if call_tmp[623444]
                {
                  (403213 call compilerError "cannot promote short-circuiting || operator")
                }
                unknown tmp[518346] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
                unknown tmp[518347] "maybe param" "temp"
                unknown call_tmp[623449] "expr temp" "maybe param" "maybe type" "temp"
                (623452 'move' call_tmp[623449](403198 call isTrue tmp[403197]))
                (518352 'move' tmp[518347](518350 call _cond_test call_tmp[623449]))
                if tmp[518347]
                {
                  (518357 'move' tmp[518346](518354 '_paramFoldLogical' tmp[518347] 1))
                }
                {
                  unknown tmp[518359] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
                  (518361 'move' tmp[518359](403202 call isTrue ischpl[157355]))
                  (518366 'move' tmp[518346](518363 '_paramFoldLogical' tmp[518347] tmp[518359]))
                }
                unknown call_tmp[623454] "expr temp" "maybe param" "maybe type" "temp"
                (623457 'move' call_tmp[623454](157442 call _cond_test tmp[518346]))
                if call_tmp[623454]
                {
                  unknown call_tmp[623459] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
                  (623462 'move' call_tmp[623459](691506 'new' ioLiteral[226016] ", "))
                  (157439 call <~> f[157298] call_tmp[623459])
                }
              }
            }
            unknown tmp[403218] "maybe param" "temp"
            (403229 'move' tmp[403218](157461 call writing _mt[232] f[157298]))
            unknown call_tmp[623466] "expr temp" "maybe param" "maybe type" "temp"
            (623469 'move' call_tmp[623466](403231 call _cond_invalid tmp[403218]))
            if call_tmp[623466]
            {
              (403234 call compilerError "cannot promote short-circuiting && operator")
            }
            unknown tmp[518373] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
            unknown tmp[518374] "maybe param" "temp"
            unknown call_tmp[623471] "expr temp" "maybe param" "maybe type" "temp"
            (623474 'move' call_tmp[623471](403219 call isTrue tmp[403218]))
            (518379 'move' tmp[518374](518377 call _cond_test call_tmp[623471]))
            if tmp[518374]
            {
              unknown tmp[518381] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
              (518383 'move' tmp[518381](403222 call isTrue ischpl[157355]))
              (518388 'move' tmp[518373](518385 '_paramFoldLogical' tmp[518374] tmp[518381]))
            }
            {
              (518393 'move' tmp[518373](518390 '_paramFoldLogical' tmp[518374] 0))
            }
            unknown call_tmp[623476] "expr temp" "maybe param" "maybe type" "temp"
            (623479 'move' call_tmp[623476](157482 call _cond_test tmp[518373]))
            if call_tmp[623476]
            {
              (157469 call <~> f[157298] key[157526])
              unknown call_tmp[623481] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
              (623484 'move' call_tmp[623481](691507 'new' ioLiteral[226016] " => "))
              (157479 call <~> f[157298] call_tmp[623481])
            }
            (157488 call <~> f[157298] val[157533])
          }
          label _continueLabel[157496]
          _indexOfInterest[157491]
          _iterator[157492]
        }
        label _breakLabel[157497]
      }
    }
    unknown tmp[403260] "maybe param" "temp"
    (403271 'move' tmp[403260] isjson[157343])
    unknown call_tmp[623486] "expr temp" "maybe param" "maybe type" "temp"
    (623489 'move' call_tmp[623486](403273 call _cond_invalid tmp[403260]))
    if call_tmp[623486]
    {
      (403276 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518400] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518401] "maybe param" "temp"
    unknown call_tmp[623491] "expr temp" "maybe param" "maybe type" "temp"
    (623494 'move' call_tmp[623491](403261 call isTrue tmp[403260]))
    (518406 'move' tmp[518401](518404 call _cond_test call_tmp[623491]))
    if tmp[518401]
    {
      (518411 'move' tmp[518400](518408 '_paramFoldLogical' tmp[518401] 1))
    }
    {
      unknown tmp[518413] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (518415 'move' tmp[518413](403265 call isTrue ischpl[157355]))
      (518420 'move' tmp[518400](518417 '_paramFoldLogical' tmp[518401] tmp[518413]))
    }
    unknown call_tmp[623496] "expr temp" "maybe param" "maybe type" "temp"
    (623499 'move' call_tmp[623496](157565 call _cond_test tmp[518400]))
    if call_tmp[623496]
    {
      unknown call_tmp[623501] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (623504 'move' call_tmp[623501](691508 'new' ioLiteral[226016] "]"))
      (157561 call <~> f[157298] call_tmp[623501])
    }
    (471397 return _void[47])
  }
  function DefaultAssociativeArr[158131](?).readChapelStyleAssocArray[157575](arg _mt[158187]:_MT[227], arg this[158185]:DefaultAssociativeArr[158131](?), arg f[157573]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown first[157578] "insert auto destroy"
    (492315 'init var' first[157578] 1)
    unknown read_end[157583] "insert auto destroy"
    (492317 'init var' read_end[157583] 0)
    unknown call_tmp[623506] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (623509 'move' call_tmp[623506](691509 'new' ioLiteral[226016] "["))
    (157592 call <~> f[157573] call_tmp[623506])
    {
      unknown tmp[157729] "temp"
      unknown call_tmp[623513] "expr temp" "maybe param" "maybe type" "temp"
      (623516 'move' call_tmp[623513](157758 call(157755 call (partial) error _mt[232] f[157573])))
      unknown call_tmp[623518] "expr temp" "maybe param" "maybe type" "temp"
      (623521 'move' call_tmp[623518](157753 call ! call_tmp[623513]))
      (157759 'move' tmp[157729](157751 call _cond_test call_tmp[623518]))
      WhileDo
      {
        {
          unknown call_tmp[623523] "expr temp" "maybe param" "maybe type" "temp"
          (623526 'move' call_tmp[623523](157683 call _cond_test first[157578]))
          if call_tmp[623523]
          {
            (157606 call = first[157578] 0)
            unknown call_tmp[623528] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
            (623531 'move' call_tmp[623528](691510 'new' ioLiteral[226016] "]"))
            (157616 call <~> f[157573] call_tmp[623528])
            unknown call_tmp[623535] "expr temp" "maybe param" "maybe type" "temp"
            (623538 'move' call_tmp[623535](157624 call(157620 call (partial) error _mt[232] f[157573])))
            unknown call_tmp[623540] "expr temp" "maybe param" "maybe type" "temp"
            (623543 'move' call_tmp[623540](357929 call EFORMAT[210730]))
            unknown call_tmp[623545] "expr temp" "maybe param" "maybe type" "temp"
            (623548 'move' call_tmp[623545](157626 call == call_tmp[623535] call_tmp[623540]))
            unknown call_tmp[623550] "expr temp" "maybe param" "maybe type" "temp"
            (623553 'move' call_tmp[623550](157645 call _cond_test call_tmp[623545]))
            if call_tmp[623550]
            {
              (157633 call(157629 call (partial) clearError _mt[232] f[157573]))
            }
            {
              (157638 call = read_end[157583] 1)
              break _breakLabel[157733] _breakLabel[157733]
            }
          }
          {
            unknown call_tmp[623557] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
            (623560 'move' call_tmp[623557](691511 'new' ioLiteral[226016] ","))
            (157655 call <~> f[157573] call_tmp[623557])
            unknown call_tmp[623564] "expr temp" "maybe param" "maybe type" "temp"
            (623567 'move' call_tmp[623564](157664 call(157660 call (partial) error _mt[232] f[157573])))
            unknown call_tmp[623569] "expr temp" "maybe param" "maybe type" "temp"
            (623572 'move' call_tmp[623569](357936 call EFORMAT[210730]))
            unknown call_tmp[623574] "expr temp" "maybe param" "maybe type" "temp"
            (623577 'move' call_tmp[623574](157666 call == call_tmp[623564] call_tmp[623569]))
            unknown call_tmp[623579] "expr temp" "maybe param" "maybe type" "temp"
            (623582 'move' call_tmp[623579](157679 call _cond_test call_tmp[623574]))
            if call_tmp[623579]
            {
              (157673 call(157669 call (partial) clearError _mt[232] f[157573]))
              break _breakLabel[157733] _breakLabel[157733]
            }
          }
          unknown key[157689] "insert auto destroy"
          unknown call_tmp[623588] "expr temp" "maybe param" "maybe type" "temp"
          (623591 'move' call_tmp[623588](357941 call idxType _mt[232] this[158185]))
          (492319 'default init var' key[157689] call_tmp[623588])
          (157694 call <~> f[157573] key[157689])
          unknown call_tmp[623593] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
          (623596 'move' call_tmp[623593](691512 'new' ioLiteral[226016] "=>"))
          (157718 call <~> f[157573] call_tmp[623593])
          unknown call_tmp[623600] "expr temp" "maybe param" "maybe type" "temp"
          (623603 'move' call_tmp[623600](157725 call(357950 call (partial) dsiAccess _mt[232] this[158185]) key[157689]))
          (157726 call <~> f[157573] call_tmp[623600])
        }
        label _continueLabel[157732]
        unknown call_tmp[623607] "expr temp" "maybe param" "maybe type" "temp"
        (623610 'move' call_tmp[623607](157745 call(157742 call (partial) error _mt[232] f[157573])))
        unknown call_tmp[623612] "expr temp" "maybe param" "maybe type" "temp"
        (623615 'move' call_tmp[623612](157740 call ! call_tmp[623607]))
        (157746 'move' tmp[157729](157738 call _cond_test call_tmp[623612]))
        tmp[157729]
      }
      label _breakLabel[157733]
    }
    unknown call_tmp[623617] "expr temp" "maybe param" "maybe type" "temp"
    (623620 'move' call_tmp[623617](157763 call ! read_end[157583]))
    unknown call_tmp[623622] "expr temp" "maybe param" "maybe type" "temp"
    (623625 'move' call_tmp[623622](157775 call _cond_test call_tmp[623617]))
    if call_tmp[623622]
    {
      unknown call_tmp[623627] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (623630 'move' call_tmp[623627](691513 'new' ioLiteral[226016] "]"))
      (157771 call <~> f[157573] call_tmp[623627])
    }
    (471399 return _void[47])
  }
  function DefaultAssociativeArr[158131](?).dsiSerialWrite[157785](arg _mt[158191]:_MT[227], arg this[158189]:DefaultAssociativeArr[158131](?), arg f[157783]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (157793 call(157788 call (partial) dsiSerialReadWrite _mt[232] this[158189]) f[157783])
    (471401 return _void[47])
  }
  function DefaultAssociativeArr[158131](?).dsiSerialRead[157802](arg _mt[158195]:_MT[227], arg this[158193]:DefaultAssociativeArr[158131](?), arg f[157800]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (157810 call(157805 call (partial) dsiSerialReadWrite _mt[232] this[158193]) f[157800])
    (471403 return _void[47])
  }
  function DefaultAssociativeArr[158131](?).dsiSorted[157819](arg _mt[158199]:_MT[227], arg this[158197]:DefaultAssociativeArr[158131](?), arg comparator[157817]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[471407] "RVV" "temp"
    unknown tableCopy[157842] "insert auto destroy"
    unknown call_tmp[623638] "expr temp" "maybe param" "maybe type" "temp"
    (623641 'move' call_tmp[623638](357965 call dom _mt[232] this[158197]))
    unknown call_tmp[623645] "expr temp" "maybe param" "maybe type" "temp"
    (623648 'move' call_tmp[623645](157828 call dsiNumIndices _mt[232] call_tmp[623638]))
    unknown call_tmp[623650] "expr temp" "maybe param" "maybe type" "temp"
    (623653 'move' call_tmp[623650](157832 call - call_tmp[623645] 1))
    unknown call_tmp[623655] "expr temp" "maybe param" "maybe type" "temp"
    (623658 'move' call_tmp[623655](157834 call chpl_build_bounded_range 0 call_tmp[623650]))
    unknown call_tmp[623660] "expr temp" "maybe param" "maybe type" "temp"
    (623663 'move' call_tmp[623660](157838 call chpl__ensureDomainExpr call_tmp[623655]))
    unknown call_tmp[623667] "expr temp" "maybe param" "maybe type" "temp"
    (623670 'move' call_tmp[623667](357970 call eltType _mt[232] this[158197]))
    unknown call_tmp[623672] "expr temp" "maybe param" "maybe type" "temp"
    (623675 'move' call_tmp[623672](157840 call chpl__buildArrayRuntimeType call_tmp[623660] call_tmp[623667]))
    (492321 'default init var' tableCopy[157842] call_tmp[623672])
    {
      unknown _indexOfInterest[157875] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157876] "expr temp" "temp"
      unknown call_tmp[623679] "expr temp" "maybe param" "maybe type" "temp"
      (623682 'move' call_tmp[623679](157885 call _dom _mt[232] tableCopy[157842]))
      unknown call_tmp[623684] "expr temp" "maybe param" "maybe type" "temp"
      (623687 'move' call_tmp[623684](157888 call _getIterator call_tmp[623679]))
      unknown call_tmp[623691] "expr temp" "maybe param" "maybe type" "temp"
      (623694 'move' call_tmp[623691](357984 call dom _mt[232] this[158197]))
      unknown call_tmp[623698] "expr temp" "maybe param" "maybe type" "temp"
      (623701 'move' call_tmp[623698](157895 call(157892 call (partial) _fullSlots _mt[232] call_tmp[623691])))
      unknown call_tmp[623703] "expr temp" "maybe param" "maybe type" "temp"
      (623706 'move' call_tmp[623703](157896 call _getIterator call_tmp[623698]))
      (157899 'move' _iterator[157876](157863 call _build_tuple call_tmp[623684] call_tmp[623703]))
      Defer
      {
        {
          (157929 call _freeIterator _iterator[157876])
        }
      }
      { scopeless type
        (157904 'move' _indexOfInterest[157875](157901 call iteratorIndex _iterator[157876]))
      }
      ForLoop
      {
        (157909 call _check_tuple_var_decl _indexOfInterest[157875] 2)
        unknown copy[157915] "index var" "insert auto destroy"
        (157917 'move' copy[157915](157913 call _indexOfInterest[157875] 1))
        unknown slot[157922] "index var" "insert auto destroy"
        (157924 'move' slot[157922](157920 call _indexOfInterest[157875] 2))
        unknown call_tmp[623708] "expr temp" "maybe param" "maybe type" "temp"
        (623711 'move' call_tmp[623708](157867 call tableCopy[157842] copy[157915]))
        unknown call_tmp[623715] "expr temp" "maybe param" "maybe type" "temp"
        (623718 'move' call_tmp[623715](157871 call(357977 call (partial) data _mt[232] this[158197]) slot[157922]))
        (157872 call = call_tmp[623708] call_tmp[623715])
        label _continueLabel[157880]
        _indexOfInterest[157875]
        _iterator[157876]
      }
      label _breakLabel[157881]
    }
    (157941 call sort tableCopy[157842](comparator = comparator[157817]))
    {
      unknown _indexOfInterest[157948] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[157949] "expr temp" "temp"
      (157958 'move' _iterator[157949](157956 call _getIterator tableCopy[157842]))
      Defer
      {
        {
          (157974 call _freeIterator _iterator[157949])
        }
      }
      { scopeless type
        (157963 'move' _indexOfInterest[157948](157960 call iteratorIndex _iterator[157949]))
      }
      ForLoop
      {
        unknown elem[157967] "index var" "insert auto destroy"
        (157969 'move' elem[157967] _indexOfInterest[157948])
        unknown yret[471411] "YVV" "temp"
        (471414 'move' yret[471411](471413 'deref' elem[157967]))
        (471416 yield yret[471411])
        label _continueLabel[157953]
        _indexOfInterest[157948]
        _iterator[157949]
      }
      label _breakLabel[157954]
    }
    (471409 return ret[471407])
    (329425 'used modules list'(157823 'use' Sort[251417]))
  }
  function DefaultAssociativeArr[158131](?)._backupArray[157985](arg _mt[158203]:_MT[227], arg this[158201]:DefaultAssociativeArr[158131](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[623722] "expr temp" "maybe param" "maybe type" "temp"
    (623725 'move' call_tmp[623722](357995 call tmpDom _mt[232] this[158201]))
    unknown call_tmp[623729] "expr temp" "maybe param" "maybe type" "temp"
    (623732 'move' call_tmp[623729](358000 call dom _mt[232] this[158201]))
    unknown call_tmp[623736] "expr temp" "maybe param" "maybe type" "temp"
    (623739 'move' call_tmp[623736](157989 call tableDom _mt[232] call_tmp[623729]))
    (157992 call = call_tmp[623722] call_tmp[623736])
    unknown call_tmp[623743] "expr temp" "maybe param" "maybe type" "temp"
    (623746 'move' call_tmp[623743](358007 call tmpTable _mt[232] this[158201]))
    unknown call_tmp[623750] "expr temp" "maybe param" "maybe type" "temp"
    (623753 'move' call_tmp[623750](358012 call data _mt[232] this[158201]))
    (157998 call = call_tmp[623743] call_tmp[623750])
    (471418 return _void[47])
  }
  function DefaultAssociativeArr[158131](?)._removeArrayBackup[158005](arg _mt[158207]:_MT[227], arg this[158205]:DefaultAssociativeArr[158131](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[623757] "expr temp" "maybe param" "maybe type" "temp"
    (623760 'move' call_tmp[623757](358017 call tmpDom _mt[232] this[158205]))
    unknown call_tmp[623762] "expr temp" "maybe param" "maybe type" "temp"
    (623765 'move' call_tmp[623762](158011 call _cast chpl_table_index_type[151190] 1))
    unknown call_tmp[623767] "expr temp" "maybe param" "maybe type" "temp"
    (623770 'move' call_tmp[623767](158013 call - call_tmp[623762]))
    unknown call_tmp[623772] "expr temp" "maybe param" "maybe type" "temp"
    (623775 'move' call_tmp[623772](158015 call chpl_build_bounded_range 0 call_tmp[623767]))
    unknown call_tmp[623777] "expr temp" "maybe param" "maybe type" "temp"
    (623780 'move' call_tmp[623777](158018 call chpl__buildDomainExpr call_tmp[623772]))
    (158020 call = call_tmp[623757] call_tmp[623777])
    (471420 return _void[47])
  }
  function DefaultAssociativeArr[158131](?)._preserveArrayElement[158030](arg _mt[158211]:_MT[227], arg this[158209]:DefaultAssociativeArr[158131](?), arg oldslot[158028]:_any[170](?), arg newslot[158032]:_any[170](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    unknown call_tmp[623784] "expr temp" "maybe param" "maybe type" "temp"
    (623787 'move' call_tmp[623784](158037 call(358023 call (partial) data _mt[232] this[158209]) newslot[158032]))
    unknown call_tmp[623791] "expr temp" "maybe param" "maybe type" "temp"
    (623794 'move' call_tmp[623791](158041 call(358029 call (partial) tmpTable _mt[232] this[158209]) oldslot[158028]))
    (158042 call = call_tmp[623784] call_tmp[623791])
    (471422 return _void[47])
  }
  function DefaultAssociativeArr[158131](?).dsiTargetLocales[158050](arg _mt[158215]:_MT[227], arg this[158213]:DefaultAssociativeArr[158131](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[471426] "RVV" "temp"
    unknown call_tmp[623796] "expr temp" "maybe param" "maybe type" "temp"
    (623799 'move' call_tmp[623796](158053 '_wide_get_locale' this[158213]))
    unknown call_tmp[623801] "expr temp" "maybe param" "maybe type" "temp"
    (623804 'move' call_tmp[623801](158054 call chpl_localeID_to_locale call_tmp[623796]))
    unknown call_tmp[623806] "expr temp" "maybe param" "maybe type" "temp"
    (623809 'move' call_tmp[623806](158057 call chpl__buildArrayExpr call_tmp[623801]))
    (471431 'move' ret[471426](471430 'deref' call_tmp[623806]))
    (471428 return ret[471426])
  }
  function DefaultAssociativeArr[158131](?).dsiHasSingleLocalSubdomain[158066](arg _mt[158219]:_MT[227], arg this[158217]:DefaultAssociativeArr[158131](?)) param : _unknown[43] "method" "primary method"
  {
    unknown ret[471435] "RVV" "param" "temp"
    (471440 'move' ret[471435](471439 'deref' 1))
    (471437 return ret[471435])
  }
  function DefaultAssociativeArr[158131](?).dsiLocalSubdomain[158080](arg _mt[158223]:_MT[227], arg this[158221]:DefaultAssociativeArr[158131](?), arg loc[158077]:locale[26]) : _unknown[43] "method" "primary method"
  {
    unknown ret[471444] "RVV" "temp"
    unknown call_tmp[623811] "expr temp" "maybe param" "maybe type" "temp"
    (623814 'move' call_tmp[623811](158083 '_wide_get_locale' this[158221]))
    unknown call_tmp[623816] "expr temp" "maybe param" "maybe type" "temp"
    (623819 'move' call_tmp[623816](158084 call chpl_localeID_to_locale call_tmp[623811]))
    unknown call_tmp[623821] "expr temp" "maybe param" "maybe type" "temp"
    (623824 'move' call_tmp[623821](158087 call == call_tmp[623816] loc[158077]))
    unknown call_tmp[623826] "expr temp" "maybe param" "maybe type" "temp"
    (623829 'move' call_tmp[623826](158116 call _cond_test call_tmp[623821]))
    if call_tmp[623826]
    {
      unknown call_tmp[623833] "expr temp" "maybe param" "maybe type" "temp"
      (623836 'move' call_tmp[623833](358038 call dom _mt[232] this[158221]))
      unknown call_tmp[623838] "expr temp" "maybe param" "maybe type" "temp"
      (623841 'move' call_tmp[623838](158092 call _getDomain call_tmp[623833]))
      (471449 'move' ret[471444](471448 'deref' call_tmp[623838]))
      gotoReturn _end_dsiLocalSubdomain[471442] _end_dsiLocalSubdomain[471442]
    }
    {
      unknown a[158109] "insert auto destroy"
      unknown call_tmp[623845] "expr temp" "maybe param" "maybe type" "temp"
      (623848 'move' call_tmp[623845](358043 call dom _mt[232] this[158221]))
      unknown call_tmp[623852] "expr temp" "maybe param" "maybe type" "temp"
      (623855 'move' call_tmp[623852](158097 call idxType _mt[232] call_tmp[623845]))
      unknown call_tmp[623859] "expr temp" "maybe param" "maybe type" "temp"
      (623862 'move' call_tmp[623859](358048 call dom _mt[232] this[158221]))
      unknown call_tmp[623866] "expr temp" "maybe param" "maybe type" "temp"
      (623869 'move' call_tmp[623866](158102 call parSafe _mt[232] call_tmp[623859]))
      unknown call_tmp[623871] "expr temp" "maybe param" "maybe type" "temp"
      (623874 'move' call_tmp[623871](158107 call chpl__buildDomainRuntimeType defaultDist[93214] call_tmp[623852](parSafe = call_tmp[623866])))
      (492323 'default init var' a[158109] call_tmp[623871])
      (471454 'move' ret[471444](471453 'deref' a[158109]))
      gotoReturn _end_dsiLocalSubdomain[471442] _end_dsiLocalSubdomain[471442]
    }
    label _end_dsiLocalSubdomain[471442]
    (471446 return ret[471444])
  }
  function DefaultAssociativeArr[158131](?).dsiDestroyArr[158125](arg _mt[158227]:_MT[227], arg this[158225]:DefaultAssociativeArr[158131](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    (471458 return _void[47])
  }
  type DefaultAssociativeArr[158131](?) val super[331043]:AbsBaseArr[146070](?) "super class" unknown idxType[155904] "type variable" unknown parSafeDom[155908] "param" bool[10] unknown dom[155918](155917 'to unmanaged class from unknown'(155916 call anymanaged DefaultAssociativeDom[345836](?) idxType[155904](parSafe = parSafeDom[155908]))) unknown data[155933](155931 call chpl__buildArrayRuntimeType(155929 call chpl__ensureDomainExpr(155924 call tableDom _mt[232] dom[155918])) eltType[146044]) unknown tmpDom[155948](155946 call chpl__buildDomainExpr(155943 call chpl_build_bounded_range 0(155941 call -(155939 call _cast chpl_table_index_type[151190] 1)))) unknown tmpTable[155958](155956 call chpl__buildArrayRuntimeType(155954 call chpl__ensureDomainExpr tmpDom[155948]) eltType[146044])
  type anymanaged DefaultAssociativeArr[356557](?)
  function chpl__defaultHashWrapper[158234](arg x[158232]:_any[170](?)) : _unknown[43]
  {
    unknown ret[471462] "RVV" "temp"
    unknown call_tmp[623878] "maybe param" "maybe type" "temp"
    (623881 'move' call_tmp[623878](158240 call chpl__defaultHash x[158232]))
    const hash[158241] "const" "insert auto destroy"
    (492325 'init var' hash[158241] call_tmp[623878])
    unknown call_tmp[623883] "expr temp" "maybe param" "maybe type" "temp"
    (623886 'move' call_tmp[623883](158249 call max chpl_table_index_type[151190]))
    unknown call_tmp[623888] "expr temp" "maybe param" "maybe type" "temp"
    (623891 'move' call_tmp[623888](158250 call & hash[158241] call_tmp[623883]))
    unknown call_tmp[623893] "expr temp" "maybe param" "maybe type" "temp"
    (623896 'move' call_tmp[623893](158253 call _cast chpl_table_index_type[151190] call_tmp[623888]))
    (471468 'move' ret[471462](471467 'coerce' call_tmp[623893] chpl_table_index_type[151190]))
    (471464 return ret[471462])
  }
  { scopeless type
    chpl_table_index_type[151190]
  }
  function _gen_key[158266](arg i[158263]:uint(64)[107]) : _unknown[43]
  {
    unknown ret[471472] "RVV" "temp"
    unknown key[158270] "insert auto destroy"
    (492327 'init var' key[158270] i[158263])
    unknown call_tmp[623898] "expr temp" "maybe param" "maybe type" "temp"
    (623901 'move' call_tmp[623898](158277 call << key[158270] 32))
    unknown call_tmp[623903] "expr temp" "maybe param" "maybe type" "temp"
    (623906 'move' call_tmp[623903](158279 call ~ call_tmp[623898]))
    (158281 call += key[158270] call_tmp[623903])
    unknown call_tmp[623908] "expr temp" "maybe param" "maybe type" "temp"
    (623911 'move' call_tmp[623908](158287 call >> key[158270] 22))
    (158289 call ^= key[158270] call_tmp[623908])
    unknown call_tmp[623913] "expr temp" "maybe param" "maybe type" "temp"
    (623916 'move' call_tmp[623913](158295 call << key[158270] 13))
    unknown call_tmp[623918] "expr temp" "maybe param" "maybe type" "temp"
    (623921 'move' call_tmp[623918](158297 call ~ call_tmp[623913]))
    (158299 call += key[158270] call_tmp[623918])
    unknown call_tmp[623923] "expr temp" "maybe param" "maybe type" "temp"
    (623926 'move' call_tmp[623923](158305 call >> key[158270] 8))
    (158307 call ^= key[158270] call_tmp[623923])
    unknown call_tmp[623928] "expr temp" "maybe param" "maybe type" "temp"
    (623931 'move' call_tmp[623928](158313 call << key[158270] 3))
    (158315 call += key[158270] call_tmp[623928])
    unknown call_tmp[623933] "expr temp" "maybe param" "maybe type" "temp"
    (623936 'move' call_tmp[623933](158321 call >> key[158270] 15))
    (158323 call ^= key[158270] call_tmp[623933])
    unknown call_tmp[623938] "expr temp" "maybe param" "maybe type" "temp"
    (623941 'move' call_tmp[623938](158329 call << key[158270] 27))
    unknown call_tmp[623943] "expr temp" "maybe param" "maybe type" "temp"
    (623946 'move' call_tmp[623943](158331 call ~ call_tmp[623938]))
    (158333 call += key[158270] call_tmp[623943])
    unknown call_tmp[623948] "expr temp" "maybe param" "maybe type" "temp"
    (623951 'move' call_tmp[623948](158339 call >> key[158270] 31))
    (158341 call ^= key[158270] call_tmp[623948])
    (471478 'move' ret[471472](471477 'coerce' key[158270] uint(64)[107]))
    (471474 return ret[471472])
  }
  { scopeless type
    uint(64)[107]
  }
  function _gen_key[158356](arg i[158353]:int(64)[13]) : _unknown[43]
  {
    unknown ret[471482] "RVV" "temp"
    unknown call_tmp[623953] "expr temp" "maybe param" "maybe type" "temp"
    (623956 'move' call_tmp[623953](158362 call _cast uint(64)[107] i[158353]))
    unknown call_tmp[623958] "expr temp" "maybe param" "maybe type" "temp"
    (623961 'move' call_tmp[623958](158365 call _gen_key call_tmp[623953]))
    (471488 'move' ret[471482](471487 'coerce' call_tmp[623958] uint(64)[107]))
    (471484 return ret[471482])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHashCombine[158378](arg a[158375]:uint(64)[107], arg b[158381]:uint(64)[107], arg fieldnum[158385]:int(64)[13]) : _unknown[43] "inline"
  {
    unknown ret[471498] "RVV" "temp"
    function chpl_bitops_rotl_64[158398](arg x[158395] :
    (158394 call uint(64)[107] 64), arg n[158404] :
    (158403 call uint(64)[107] 64)) : _unknown[43] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[471492] "RVV" "temp"
      (471494 return ret[471492])
    }
    { scopeless type
      (158410 call uint(64)[107] 64)
    }
    unknown call_tmp[623963] "expr temp" "maybe param" "maybe type" "temp"
    (623966 'move' call_tmp[623963](158418 call + 17 fieldnum[158385]))
    unknown call_tmp[623968] "maybe param" "maybe type" "temp"
    (623971 'move' call_tmp[623968](158421 call _cast uint(64)[107] call_tmp[623963]))
    unknown n[158423] "insert auto destroy"
    (492329 'init var' n[158423] call_tmp[623968] uint(64)[107])
    unknown call_tmp[623973] "expr temp" "maybe param" "maybe type" "temp"
    (623976 'move' call_tmp[623973](158431 call chpl_bitops_rotl_64 b[158381] n[158423]))
    unknown call_tmp[623978] "expr temp" "maybe param" "maybe type" "temp"
    (623981 'move' call_tmp[623978](158432 call ^ a[158375] call_tmp[623973]))
    (471504 'move' ret[471498](471503 'coerce' call_tmp[623978] uint(64)[107]))
    (471500 return ret[471498])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158445](arg b[158442]:bool[10]) : _unknown[43] "inline"
  {
    unknown ret[471508] "RVV" "temp"
    unknown call_tmp[623983] "expr temp" "maybe param" "maybe type" "temp"
    (623986 'move' call_tmp[623983](158455 call _cond_test b[158442]))
    if call_tmp[623983]
    {
      (471514 'move' ret[471508](471513 'coerce' 0 uint(64)[107]))
      gotoReturn _end_chpl__defaultHash[471506] _end_chpl__defaultHash[471506]
    }
    {
      (471520 'move' ret[471508](471519 'coerce' 1 uint(64)[107]))
      gotoReturn _end_chpl__defaultHash[471506] _end_chpl__defaultHash[471506]
    }
    label _end_chpl__defaultHash[471506]
    (471510 return ret[471508])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158474](arg i[158471] :
  (158470 call int(64)[13] 64)) : _unknown[43] "inline"
  {
    unknown ret[471526] "RVV" "temp"
    unknown call_tmp[623988] "expr temp" "maybe param" "maybe type" "temp"
    (623991 'move' call_tmp[623988](158480 call _gen_key i[158471]))
    (471532 'move' ret[471526](471531 'coerce' call_tmp[623988] uint(64)[107]))
    (471528 return ret[471526])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158496](arg u[158493] :
  (158492 call uint(64)[107] 64)) : _unknown[43] "inline"
  {
    unknown ret[471536] "RVV" "temp"
    unknown call_tmp[623993] "expr temp" "maybe param" "maybe type" "temp"
    (623996 'move' call_tmp[623993](158502 call _gen_key u[158493]))
    (471542 'move' ret[471536](471541 'coerce' call_tmp[623993] uint(64)[107]))
    (471538 return ret[471536])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158513](arg e[158511]:_any[170](?)) : _unknown[43] "inline"
  {
    unknown ret[471546] "RVV" "temp"
    unknown call_tmp[623998] "expr temp" "maybe param" "maybe type" "temp"
    (624001 'move' call_tmp[623998](158523 call chpl__enumToOrder e[158511]))
    unknown call_tmp[624003] "expr temp" "maybe param" "maybe type" "temp"
    (624006 'move' call_tmp[624003](158525 call _gen_key call_tmp[623998]))
    (471551 'move' ret[471546](471550 'deref' call_tmp[624003]))
    (471548 return ret[471546])
  }
  where {
    (158518 call isEnum e[158511])
  }
  function chpl__defaultHash[158538](arg f[158535]:real(64)[16]) : _unknown[43] "inline"
  {
    unknown ret[471555] "RVV" "temp"
    unknown call_tmp[624008] "expr temp" "maybe param" "maybe type" "temp"
    (624011 'move' call_tmp[624008](158560 'real2int' f[158535]))
    unknown call_tmp[624013] "expr temp" "maybe param" "maybe type" "temp"
    (624016 'move' call_tmp[624013](158562 call _gen_key call_tmp[624008]))
    (471561 'move' ret[471555](471560 'coerce' call_tmp[624013] uint(64)[107]))
    (471557 return ret[471555])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158575](arg c[158572]:complex(128)[132]) : _unknown[43] "inline"
  {
    unknown ret[471565] "RVV" "temp"
    unknown call_tmp[624020] "expr temp" "maybe param" "maybe type" "temp"
    (624023 'move' call_tmp[624020](158582 call re _mt[232] c[158572]))
    unknown call_tmp[624025] "expr temp" "maybe param" "maybe type" "temp"
    (624028 'move' call_tmp[624025](158585 'real2int' call_tmp[624020]))
    unknown call_tmp[624032] "expr temp" "maybe param" "maybe type" "temp"
    (624035 'move' call_tmp[624032](158589 call im _mt[232] c[158572]))
    unknown call_tmp[624037] "expr temp" "maybe param" "maybe type" "temp"
    (624040 'move' call_tmp[624037](158592 'real2int' call_tmp[624032]))
    unknown call_tmp[624042] "expr temp" "maybe param" "maybe type" "temp"
    (624045 'move' call_tmp[624042](158593 call ^ call_tmp[624025] call_tmp[624037]))
    unknown call_tmp[624047] "expr temp" "maybe param" "maybe type" "temp"
    (624050 'move' call_tmp[624047](158596 call _gen_key call_tmp[624042]))
    (471571 'move' ret[471565](471570 'coerce' call_tmp[624047] uint(64)[107]))
    (471567 return ret[471565])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158609](arg a[158606]:imag(64)[122]) : _unknown[43] "inline"
  {
    unknown ret[471575] "RVV" "temp"
    unknown call_tmp[624052] "expr temp" "maybe param" "maybe type" "temp"
    (624055 'move' call_tmp[624052](158618 call _i2r a[158606]))
    unknown call_tmp[624057] "expr temp" "maybe param" "maybe type" "temp"
    (624060 'move' call_tmp[624057](158619 'real2int' call_tmp[624052]))
    unknown call_tmp[624062] "expr temp" "maybe param" "maybe type" "temp"
    (624065 'move' call_tmp[624062](158621 call _gen_key call_tmp[624057]))
    (471581 'move' ret[471575](471580 'coerce' call_tmp[624062] uint(64)[107]))
    (471577 return ret[471575])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158634](arg u[158631]:chpl_taskID_t[155]) : _unknown[43] "inline"
  {
    unknown ret[471585] "RVV" "temp"
    unknown call_tmp[624067] "expr temp" "maybe param" "maybe type" "temp"
    (624070 'move' call_tmp[624067](158642 call int(64)[13] 64))
    unknown call_tmp[624072] "expr temp" "maybe param" "maybe type" "temp"
    (624075 'move' call_tmp[624072](158643 call _cast call_tmp[624067] u[158631]))
    unknown call_tmp[624077] "expr temp" "maybe param" "maybe type" "temp"
    (624080 'move' call_tmp[624077](158646 call _gen_key call_tmp[624072]))
    (471591 'move' ret[471585](471590 'coerce' call_tmp[624077] uint(64)[107]))
    (471587 return ret[471585])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158661](arg l[158658]:_array[133150](?)) : _unknown[43] "inline"
  {
    unknown ret[471595] "RVV" "temp"
    unknown hash[158666] "insert auto destroy"
    (492331 'init var' hash[158666] 0 uint(64)[107])
    unknown i[158671] "insert auto destroy"
    (492333 'init var' i[158671] 1)
    {
      unknown _indexOfInterest[158695] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[158696] "expr temp" "temp"
      (158705 'move' _iterator[158696](158703 call _getIterator l[158658]))
      Defer
      {
        {
          (158721 call _freeIterator _iterator[158696])
        }
      }
      { scopeless type
        (158710 'move' _indexOfInterest[158695](158707 call iteratorIndex _iterator[158696]))
      }
      ForLoop
      {
        unknown obj[158714] "index var" "insert auto destroy"
        (158716 'move' obj[158714] _indexOfInterest[158695])
        {
          unknown call_tmp[624082] "expr temp" "maybe param" "maybe type" "temp"
          (624085 'move' call_tmp[624082](158681 call chpl__defaultHash obj[158714]))
          unknown call_tmp[624087] "expr temp" "maybe param" "maybe type" "temp"
          (624090 'move' call_tmp[624087](158685 call chpl__defaultHashCombine call_tmp[624082] hash[158666] i[158671]))
          (158686 call = hash[158666] call_tmp[624087])
          (158692 call += i[158671] 1)
        }
        label _continueLabel[158700]
        _indexOfInterest[158695]
        _iterator[158696]
      }
      label _breakLabel[158701]
    }
    (471601 'move' ret[471595](471600 'coerce' hash[158666] uint(64)[107]))
    (471597 return ret[471595])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158741](arg o[158738]:object[253]) : _unknown[43] "inline"
  {
    unknown ret[471605] "RVV" "temp"
    unknown call_tmp[624092] "expr temp" "maybe param" "maybe type" "temp"
    (624095 'move' call_tmp[624092](158763 'object2int' o[158738]))
    unknown call_tmp[624097] "expr temp" "maybe param" "maybe type" "temp"
    (624100 'move' call_tmp[624097](158765 call _gen_key call_tmp[624092]))
    (471611 'move' ret[471605](471610 'coerce' call_tmp[624097] uint(64)[107]))
    (471607 return ret[471605])
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__defaultHash[158778](arg r[158775]:range[66183](?)) : _unknown[43] "inline"
  {
    unknown ret[471615] "RVV" "temp"
    unknown ret[158787] "insert auto destroy"
    (492335 'default init var' ret[158787] uint(64)[107])
    {
      unknown i[158882] "insert auto destroy"
      (492337 'init var' i[158882] 0)
      unknown tmp[158883] "maybe param" "temp"
      unknown call_tmp[624102] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624105 'move' call_tmp[624102](158793 'typeof' r[158775]))
      unknown call_tmp[624107] "expr temp" "maybe param" "maybe type" "temp"
      (624110 'move' call_tmp[624107](158795 call numFields call_tmp[624102]))
      (158895 'move' tmp[158883](158893 call chpl_compute_low_param_loop_bound 1 call_tmp[624107]))
      unknown tmp[158884] "maybe param" "temp"
      unknown call_tmp[624112] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (624115 'move' call_tmp[624112](158901 'typeof' r[158775]))
      unknown call_tmp[624117] "expr temp" "maybe param" "maybe type" "temp"
      (624120 'move' call_tmp[624117](158900 call numFields call_tmp[624112]))
      (158905 'move' tmp[158884](158903 call chpl_compute_high_param_loop_bound 1 call_tmp[624117]))
      unknown tmp[158885] "maybe param" "temp"
      (158908 'move' tmp[158885] 1)
      ParamForLoop
      { i[158882] tmp[158883] tmp[158884] tmp[158885]
        {
          unknown tmp[403281] "maybe param" "temp"
          unknown tmp[403302] "maybe param" "temp"
          unknown call_tmp[624122] "expr temp" "maybe param" "maybe type" "temp"
          (624125 'move' call_tmp[624122](158803 call getField r[158775] i[158882]))
          unknown call_tmp[624127] "expr temp" "maybe param" "maybe type" "temp"
          (624130 'move' call_tmp[624127](158805 call isParam call_tmp[624122]))
          (403313 'move' tmp[403302](158807 call == call_tmp[624127] 0))
          unknown call_tmp[624132] "expr temp" "maybe param" "maybe type" "temp"
          (624135 'move' call_tmp[624132](403315 call _cond_invalid tmp[403302]))
          if call_tmp[624132]
          {
            (403318 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[518427] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[518428] "maybe param" "temp"
          unknown call_tmp[624137] "expr temp" "maybe param" "maybe type" "temp"
          (624140 'move' call_tmp[624137](403303 call isTrue tmp[403302]))
          (518433 'move' tmp[518428](518431 call _cond_test call_tmp[624137]))
          if tmp[518428]
          {
            unknown tmp[518435] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[624142] "expr temp" "maybe param" "maybe type" "temp"
            (624145 'move' call_tmp[624142](158814 call getField r[158775] i[158882]))
            unknown call_tmp[624147] "expr temp" "maybe param" "maybe type" "temp"
            (624150 'move' call_tmp[624147](158816 call isType call_tmp[624142]))
            unknown call_tmp[624152] "expr temp" "maybe param" "maybe type" "temp"
            (624155 'move' call_tmp[624152](158818 call == call_tmp[624147] 0))
            (518437 'move' tmp[518435](403306 call isTrue call_tmp[624152]))
            (518442 'move' tmp[518427](518439 '_paramFoldLogical' tmp[518428] tmp[518435]))
          }
          {
            (518447 'move' tmp[518427](518444 '_paramFoldLogical' tmp[518428] 0))
          }
          (403292 'move' tmp[403281] tmp[518427])
          unknown call_tmp[624157] "expr temp" "maybe param" "maybe type" "temp"
          (624160 'move' call_tmp[624157](403294 call _cond_invalid tmp[403281]))
          if call_tmp[624157]
          {
            (403297 call compilerError "cannot promote short-circuiting && operator")
          }
          unknown tmp[518454] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[518455] "maybe param" "temp"
          unknown call_tmp[624162] "expr temp" "maybe param" "maybe type" "temp"
          (624165 'move' call_tmp[624162](403282 call isTrue tmp[403281]))
          (518460 'move' tmp[518455](518458 call _cond_test call_tmp[624162]))
          if tmp[518455]
          {
            { scopeless type
              unknown call_type_tmp[443727] "expr temp" "maybe type" "temp" "type variable"
              unknown call_tmp[624167] "expr temp" "maybe param" "maybe type" "temp"
              (624170 'move' call_tmp[624167](158827 call getField r[158775] i[158882]))
              (443731 'move' call_type_tmp[443727](158828 'typeof' call_tmp[624167]))
            }
            unknown tmp[518462] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[624172] "expr temp" "maybe param" "maybe type" "temp"
            (624175 'move' call_tmp[624172](158830 call isNothingType call_type_tmp[443727]))
            unknown call_tmp[624177] "expr temp" "maybe param" "maybe type" "temp"
            (624180 'move' call_tmp[624177](158832 call == call_tmp[624172] 0))
            (518464 'move' tmp[518462](403285 call isTrue call_tmp[624177]))
            (518469 'move' tmp[518454](518466 '_paramFoldLogical' tmp[518455] tmp[518462]))
          }
          {
            (518474 'move' tmp[518454](518471 '_paramFoldLogical' tmp[518455] 0))
          }
          unknown call_tmp[624182] "expr temp" "maybe param" "maybe type" "temp"
          (624185 'move' call_tmp[624182](158877 call _cond_test tmp[518454]))
          if call_tmp[624182]
          {
            const field[158841] "const" "ref var"
            unknown call_tmp[624187] "expr temp" "maybe param" "maybe type" "temp"
            (624190 'move' call_tmp[624187](158840 call getField r[158775] i[158882]))
            (492340 'move' field[158841](492339 'addr of' call_tmp[624187]))
            unknown call_tmp[624192] "maybe param" "maybe type" "temp"
            (624195 'move' call_tmp[624192](158848 call chpl__defaultHash field[158841]))
            const fieldHash[158849] "const" "insert auto destroy"
            (492342 'init var' fieldHash[158849] call_tmp[624192])
            unknown call_tmp[624197] "expr temp" "maybe param" "maybe type" "temp"
            (624200 'move' call_tmp[624197](158854 call == i[158882] 1))
            unknown call_tmp[624202] "expr temp" "maybe param" "maybe type" "temp"
            (624205 'move' call_tmp[624202](158871 call _cond_test call_tmp[624197]))
            if call_tmp[624202]
            {
              (158858 call = ret[158787] fieldHash[158849])
            }
            {
              unknown call_tmp[624207] "expr temp" "maybe param" "maybe type" "temp"
              (624210 'move' call_tmp[624207](158867 call chpl__defaultHashCombine fieldHash[158849] ret[158787] i[158882]))
              (158868 call = ret[158787] call_tmp[624207])
            }
          }
        }
      }
      label _unused_continueLabel[158887]
      label _breakLabel[158886]
    }
    (471621 'move' ret[471615](471620 'coerce' ret[158787] uint(64)[107]))
    (471617 return ret[471615])
    (329427 'used modules list'(158783 'use' Reflection[211223]))
  }
  { scopeless type
    uint(64)[107]
  }
  function chpl__validDefaultAssocDomIdxType[158929](arg idxType[158927]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[471625] "RVV" "param" "temp"
    (471630 'move' ret[471625](471629 'deref' 0))
    (471627 return ret[471625])
  }
  function chpl__validDefaultAssocDomIdxType[158941](arg idxType[158939]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[471634] "RVV" "param" "temp"
    (471639 'move' ret[471634](471638 'deref' 1))
    (471636 return ret[471634])
  }
  where {
    unknown tmp[403323] "maybe param" "temp"
    unknown tmp[403344] "maybe param" "temp"
    unknown tmp[403365] "maybe param" "temp"
    unknown tmp[403386] "maybe param" "temp"
    unknown tmp[403407] "maybe param" "temp"
    unknown tmp[403428] "maybe param" "temp"
    unknown tmp[403449] "maybe param" "temp"
    unknown tmp[403470] "maybe param" "temp"
    unknown tmp[403491] "maybe param" "temp"
    unknown tmp[403512] "maybe param" "temp"
    unknown tmp[403533] "maybe param" "temp"
    unknown tmp[403554] "maybe param" "temp"
    (403565 'move' tmp[403554](158946 call isBoolType idxType[158939]))
    unknown call_tmp[624212] "expr temp" "maybe param" "maybe type" "temp"
    (624215 'move' call_tmp[624212](403567 call _cond_invalid tmp[403554]))
    if call_tmp[624212]
    {
      (403570 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518481] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518482] "maybe param" "temp"
    unknown call_tmp[624217] "expr temp" "maybe param" "maybe type" "temp"
    (624220 'move' call_tmp[624217](403555 call isTrue tmp[403554]))
    (518487 'move' tmp[518482](518485 call _cond_test call_tmp[624217]))
    if tmp[518482]
    {
      (518492 'move' tmp[518481](518489 '_paramFoldLogical' tmp[518482] 1))
    }
    {
      unknown tmp[518494] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624222] "expr temp" "maybe param" "maybe type" "temp"
      (624225 'move' call_tmp[624222](158950 call isIntType idxType[158939]))
      (518496 'move' tmp[518494](403559 call isTrue call_tmp[624222]))
      (518501 'move' tmp[518481](518498 '_paramFoldLogical' tmp[518482] tmp[518494]))
    }
    (403544 'move' tmp[403533] tmp[518481])
    unknown call_tmp[624227] "expr temp" "maybe param" "maybe type" "temp"
    (624230 'move' call_tmp[624227](403546 call _cond_invalid tmp[403533]))
    if call_tmp[624227]
    {
      (403549 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518508] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518509] "maybe param" "temp"
    unknown call_tmp[624232] "expr temp" "maybe param" "maybe type" "temp"
    (624235 'move' call_tmp[624232](403534 call isTrue tmp[403533]))
    (518514 'move' tmp[518509](518512 call _cond_test call_tmp[624232]))
    if tmp[518509]
    {
      (518519 'move' tmp[518508](518516 '_paramFoldLogical' tmp[518509] 1))
    }
    {
      unknown tmp[518521] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624237] "expr temp" "maybe param" "maybe type" "temp"
      (624240 'move' call_tmp[624237](158956 call isUintType idxType[158939]))
      (518523 'move' tmp[518521](403538 call isTrue call_tmp[624237]))
      (518528 'move' tmp[518508](518525 '_paramFoldLogical' tmp[518509] tmp[518521]))
    }
    (403523 'move' tmp[403512] tmp[518508])
    unknown call_tmp[624242] "expr temp" "maybe param" "maybe type" "temp"
    (624245 'move' call_tmp[624242](403525 call _cond_invalid tmp[403512]))
    if call_tmp[624242]
    {
      (403528 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518535] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518536] "maybe param" "temp"
    unknown call_tmp[624247] "expr temp" "maybe param" "maybe type" "temp"
    (624250 'move' call_tmp[624247](403513 call isTrue tmp[403512]))
    (518541 'move' tmp[518536](518539 call _cond_test call_tmp[624247]))
    if tmp[518536]
    {
      (518546 'move' tmp[518535](518543 '_paramFoldLogical' tmp[518536] 1))
    }
    {
      unknown tmp[518548] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624252] "expr temp" "maybe param" "maybe type" "temp"
      (624255 'move' call_tmp[624252](158962 call isRealType idxType[158939]))
      (518550 'move' tmp[518548](403517 call isTrue call_tmp[624252]))
      (518555 'move' tmp[518535](518552 '_paramFoldLogical' tmp[518536] tmp[518548]))
    }
    (403502 'move' tmp[403491] tmp[518535])
    unknown call_tmp[624257] "expr temp" "maybe param" "maybe type" "temp"
    (624260 'move' call_tmp[624257](403504 call _cond_invalid tmp[403491]))
    if call_tmp[624257]
    {
      (403507 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518562] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518563] "maybe param" "temp"
    unknown call_tmp[624262] "expr temp" "maybe param" "maybe type" "temp"
    (624265 'move' call_tmp[624262](403492 call isTrue tmp[403491]))
    (518568 'move' tmp[518563](518566 call _cond_test call_tmp[624262]))
    if tmp[518563]
    {
      (518573 'move' tmp[518562](518570 '_paramFoldLogical' tmp[518563] 1))
    }
    {
      unknown tmp[518575] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624267] "expr temp" "maybe param" "maybe type" "temp"
      (624270 'move' call_tmp[624267](158968 call isImagType idxType[158939]))
      (518577 'move' tmp[518575](403496 call isTrue call_tmp[624267]))
      (518582 'move' tmp[518562](518579 '_paramFoldLogical' tmp[518563] tmp[518575]))
    }
    (403481 'move' tmp[403470] tmp[518562])
    unknown call_tmp[624272] "expr temp" "maybe param" "maybe type" "temp"
    (624275 'move' call_tmp[624272](403483 call _cond_invalid tmp[403470]))
    if call_tmp[624272]
    {
      (403486 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518589] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518590] "maybe param" "temp"
    unknown call_tmp[624277] "expr temp" "maybe param" "maybe type" "temp"
    (624280 'move' call_tmp[624277](403471 call isTrue tmp[403470]))
    (518595 'move' tmp[518590](518593 call _cond_test call_tmp[624277]))
    if tmp[518590]
    {
      (518600 'move' tmp[518589](518597 '_paramFoldLogical' tmp[518590] 1))
    }
    {
      unknown tmp[518602] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624282] "expr temp" "maybe param" "maybe type" "temp"
      (624285 'move' call_tmp[624282](158974 call isComplexType idxType[158939]))
      (518604 'move' tmp[518602](403475 call isTrue call_tmp[624282]))
      (518609 'move' tmp[518589](518606 '_paramFoldLogical' tmp[518590] tmp[518602]))
    }
    (403460 'move' tmp[403449] tmp[518589])
    unknown call_tmp[624287] "expr temp" "maybe param" "maybe type" "temp"
    (624290 'move' call_tmp[624287](403462 call _cond_invalid tmp[403449]))
    if call_tmp[624287]
    {
      (403465 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518616] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518617] "maybe param" "temp"
    unknown call_tmp[624292] "expr temp" "maybe param" "maybe type" "temp"
    (624295 'move' call_tmp[624292](403450 call isTrue tmp[403449]))
    (518622 'move' tmp[518617](518620 call _cond_test call_tmp[624292]))
    if tmp[518617]
    {
      (518627 'move' tmp[518616](518624 '_paramFoldLogical' tmp[518617] 1))
    }
    {
      unknown tmp[518629] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624297] "expr temp" "maybe param" "maybe type" "temp"
      (624300 'move' call_tmp[624297](158979 call == idxType[158939] chpl_taskID_t[155]))
      (518631 'move' tmp[518629](403454 call isTrue call_tmp[624297]))
      (518636 'move' tmp[518616](518633 '_paramFoldLogical' tmp[518617] tmp[518629]))
    }
    (403439 'move' tmp[403428] tmp[518616])
    unknown call_tmp[624302] "expr temp" "maybe param" "maybe type" "temp"
    (624305 'move' call_tmp[624302](403441 call _cond_invalid tmp[403428]))
    if call_tmp[624302]
    {
      (403444 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518643] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518644] "maybe param" "temp"
    unknown call_tmp[624307] "expr temp" "maybe param" "maybe type" "temp"
    (624310 'move' call_tmp[624307](403429 call isTrue tmp[403428]))
    (518649 'move' tmp[518644](518647 call _cond_test call_tmp[624307]))
    if tmp[518644]
    {
      (518654 'move' tmp[518643](518651 '_paramFoldLogical' tmp[518644] 1))
    }
    {
      unknown tmp[518656] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624312] "expr temp" "maybe param" "maybe type" "temp"
      (624315 'move' call_tmp[624312](158985 call == idxType[158939] string[24]))
      (518658 'move' tmp[518656](403433 call isTrue call_tmp[624312]))
      (518663 'move' tmp[518643](518660 '_paramFoldLogical' tmp[518644] tmp[518656]))
    }
    (403418 'move' tmp[403407] tmp[518643])
    unknown call_tmp[624317] "expr temp" "maybe param" "maybe type" "temp"
    (624320 'move' call_tmp[624317](403420 call _cond_invalid tmp[403407]))
    if call_tmp[624317]
    {
      (403423 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518670] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518671] "maybe param" "temp"
    unknown call_tmp[624322] "expr temp" "maybe param" "maybe type" "temp"
    (624325 'move' call_tmp[624322](403408 call isTrue tmp[403407]))
    (518676 'move' tmp[518671](518674 call _cond_test call_tmp[624322]))
    if tmp[518671]
    {
      (518681 'move' tmp[518670](518678 '_paramFoldLogical' tmp[518671] 1))
    }
    {
      unknown tmp[518683] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624327] "expr temp" "maybe param" "maybe type" "temp"
      (624330 'move' call_tmp[624327](158991 call == idxType[158939] c_string[19]))
      (518685 'move' tmp[518683](403412 call isTrue call_tmp[624327]))
      (518690 'move' tmp[518670](518687 '_paramFoldLogical' tmp[518671] tmp[518683]))
    }
    (403397 'move' tmp[403386] tmp[518670])
    unknown call_tmp[624332] "expr temp" "maybe param" "maybe type" "temp"
    (624335 'move' call_tmp[624332](403399 call _cond_invalid tmp[403386]))
    if call_tmp[624332]
    {
      (403402 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518697] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518698] "maybe param" "temp"
    unknown call_tmp[624337] "expr temp" "maybe param" "maybe type" "temp"
    (624340 'move' call_tmp[624337](403387 call isTrue tmp[403386]))
    (518703 'move' tmp[518698](518701 call _cond_test call_tmp[624337]))
    if tmp[518698]
    {
      (518708 'move' tmp[518697](518705 '_paramFoldLogical' tmp[518698] 1))
    }
    {
      unknown tmp[518710] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624342] "expr temp" "maybe param" "maybe type" "temp"
      (624345 'move' call_tmp[624342](158998 call isClassType idxType[158939]))
      (518712 'move' tmp[518710](403391 call isTrue call_tmp[624342]))
      (518717 'move' tmp[518697](518714 '_paramFoldLogical' tmp[518698] tmp[518710]))
    }
    (403376 'move' tmp[403365] tmp[518697])
    unknown call_tmp[624347] "expr temp" "maybe param" "maybe type" "temp"
    (624350 'move' call_tmp[624347](403378 call _cond_invalid tmp[403365]))
    if call_tmp[624347]
    {
      (403381 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518724] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518725] "maybe param" "temp"
    unknown call_tmp[624352] "expr temp" "maybe param" "maybe type" "temp"
    (624355 'move' call_tmp[624352](403366 call isTrue tmp[403365]))
    (518730 'move' tmp[518725](518728 call _cond_test call_tmp[624352]))
    if tmp[518725]
    {
      (518735 'move' tmp[518724](518732 '_paramFoldLogical' tmp[518725] 1))
    }
    {
      unknown tmp[518737] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624357] "expr temp" "maybe param" "maybe type" "temp"
      (624360 'move' call_tmp[624357](159004 call isEnumType idxType[158939]))
      (518739 'move' tmp[518737](403370 call isTrue call_tmp[624357]))
      (518744 'move' tmp[518724](518741 '_paramFoldLogical' tmp[518725] tmp[518737]))
    }
    (403355 'move' tmp[403344] tmp[518724])
    unknown call_tmp[624362] "expr temp" "maybe param" "maybe type" "temp"
    (624365 'move' call_tmp[624362](403357 call _cond_invalid tmp[403344]))
    if call_tmp[624362]
    {
      (403360 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518751] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518752] "maybe param" "temp"
    unknown call_tmp[624367] "expr temp" "maybe param" "maybe type" "temp"
    (624370 'move' call_tmp[624367](403345 call isTrue tmp[403344]))
    (518757 'move' tmp[518752](518755 call _cond_test call_tmp[624367]))
    if tmp[518752]
    {
      (518762 'move' tmp[518751](518759 '_paramFoldLogical' tmp[518752] 1))
    }
    {
      unknown tmp[518764] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624372] "expr temp" "maybe param" "maybe type" "temp"
      (624375 'move' call_tmp[624372](159010 call isTupleType idxType[158939]))
      (518766 'move' tmp[518764](403349 call isTrue call_tmp[624372]))
      (518771 'move' tmp[518751](518768 '_paramFoldLogical' tmp[518752] tmp[518764]))
    }
    (403334 'move' tmp[403323] tmp[518751])
    unknown call_tmp[624377] "expr temp" "maybe param" "maybe type" "temp"
    (624380 'move' call_tmp[624377](403336 call _cond_invalid tmp[403323]))
    if call_tmp[624377]
    {
      (403339 call compilerError "cannot promote short-circuiting || operator")
    }
    unknown tmp[518778] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[518779] "maybe param" "temp"
    unknown call_tmp[624382] "expr temp" "maybe param" "maybe type" "temp"
    (624385 'move' call_tmp[624382](403324 call isTrue tmp[403323]))
    (518784 'move' tmp[518779](518782 call _cond_test call_tmp[624382]))
    if tmp[518779]
    {
      (518789 'move' tmp[518778](518786 '_paramFoldLogical' tmp[518779] 1))
    }
    {
      unknown tmp[518791] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[624387] "expr temp" "maybe param" "maybe type" "temp"
      (624390 'move' call_tmp[624387](159016 call isRecordType idxType[158939]))
      (518793 'move' tmp[518791](403328 call isTrue call_tmp[624387]))
      (518798 'move' tmp[518778](518795 '_paramFoldLogical' tmp[518779] tmp[518791]))
    }
    (691951 call _statementLevelSymbol tmp[518778])
  }
  (329414 'used modules list'(151160 'use' DSIUtil[216461])(151168 'use' ChapelDistribution[141791])(151170 'use' ChapelRange[66056])(151171 'use' SysBasic[209963])(151172 'use' ChapelArray[111781])(151177 'use' ChapelBase[302])(151179 'use' ChapelLocks[180347])(151180 'use' IO[218633]))
}