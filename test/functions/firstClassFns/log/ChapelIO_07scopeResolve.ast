AST dump for ChapelIO after pass scopeResolve.
Module use list: ChapelBase ChapelLocale SysBasic IO 

{
  function _isNilObject[147557](arg val[147555]:_any[170](?)) : _unknown[43] "no doc"
  {
    function helper[147566](arg o[147563] :
    object[253]) : _unknown[43]
    {
      (147572 return(147570 call == o[147563] nil[38]))
    }
    function helper[147582](arg o[147580]:_any[170](?)) : _unknown[43]
    {
      (147585 return 0)
    }
    (147594 return(147593 call helper val[147555]))
  }
  function isIoField[147606](arg x[147604]:_any[170](?), param arg i[147608]:_any[170](?)) param : _unknown[43] "private"
  {
    if(147662 call _cond_test(147652 call ||(147641 call ||(147632 call isType(147630 'field by num' x[147604] i[147608]))(147640 call isParam(147638 'field by num' x[147604] i[147608])))(147650 call ==(147648 'typeof'(147647 'field by num' x[147604] i[147608])) nothing[7])))
    {
      (147655 return 0)
    }
    {
      (147659 return 1)
    }
  }
  function ioFieldNameEqLiteral[147673](arg ch[147671]:_any[170](?), arg t[147675]:_any[170](?), param arg i[147677]:_any[170](?)) : _unknown[43] "private"
  {
    unknown st[147686](147685 call(147680 call . ch[147671] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
    if(147787 call _cond_test(147692 call == st[147686] QIO_AGGREGATE_FORMAT_JSON[19410]))
    {
      (147754 return(147753 'new'(147752 call ioLiteral[226016](147749 call +(147731 call + "\""(147730 'field num to name' t[147675] i[147677])) "\":"))))
    }
    {
      (147784 return(147783 'new'(147782 call ioLiteral[226016](147779 call +(147762 'field num to name' t[147675] i[147677]) " = "))))
    }
  }
  function ioFieldNameLiteral[147797](arg ch[147795]:_any[170](?), arg t[147799]:_any[170](?), param arg i[147801]:_any[170](?)) : _unknown[43] "private"
  {
    unknown st[147810](147809 call(147804 call . ch[147795] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
    if(147848 call _cond_test(147816 call == st[147810] QIO_AGGREGATE_FORMAT_JSON[19410]))
    {
      (147833 return(147832 'new'(147831 call ioLiteral[226016](147828 call +(147825 call + "\""(147824 'field num to name' t[147799] i[147801])) "\""))))
    }
    {
      (147845 return(147844 'new'(147843 call ioLiteral[226016](147841 'field num to name' t[147799] i[147801]))))
    }
  }
  function writeThisFieldsDefaultImpl[147858](arg writer[147856]:_any[170](?), arg x[147862] :
  unknown t[147860], inout arg first[147866] :
  bool[10]) : _unknown[43] "no doc" "no return value for void"
  {
    unknown num_fields[147888] "param"(147887 'num fields' t[147860])
    unknown isBinary[147898](147897 call(147893 call . writer[147856] c"binary"))
    if(147931 call _cond_test(147904 call isClassType t[147860]))
    {
      if(147926 call _cond_test(147911 call !=(147908 call _to_borrowed t[147860]) object[253]))
      {
        (147923 call writeThisFieldsDefaultImpl writer[147856](147919 call . x[147862] c"super") first[147866])
      }
    }
    if(148180 call _cond_test(147939 call !(147938 call isUnionType t[147860])))
    {
      {
        unknown i[148025] 0
        unknown tmp[148026] "maybe param" "temp"
        (148038 'move' tmp[148026](148036 call chpl_compute_low_param_loop_bound 1 num_fields[147888]))
        unknown tmp[148027] "maybe param" "temp"
        (148045 'move' tmp[148027](148043 call chpl_compute_high_param_loop_bound 1 num_fields[147888]))
        unknown tmp[148028] "maybe param" "temp"
        (148048 'move' tmp[148028] 1)
        ParamForLoop
        { i[148025] tmp[148026] tmp[148027] tmp[148028]
          {
            if(148020 call _cond_test(147949 call isIoField x[147862] i[148025]))
            {
              if(147998 call _cond_test(147951 call ! isBinary[147898]))
              {
                unknown comma[147958](147957 'new'(147956 call ioLiteral[226016] ", "))
                if(147975 call _cond_test(147963 call ! first[147866]))
                {
                  (147973 call(147968 call . writer[147856] c"readwrite") comma[147958])
                }
                unknown eq[147987](147986 call ioFieldNameEqLiteral writer[147856] t[147860] i[148025]) ioLiteral[226016]
                (147996 call(147991 call . writer[147856] c"readwrite") eq[147987])
              }
              (148013 call(148004 call . writer[147856] c"readwrite")(148011 'field by num' x[147862] i[148025]))
              (148017 call = first[147866] 0)
            }
          }
        }
        label _unused_continueLabel[148030]
        label _breakLabel[148029]
      }
    }
    {
      unknown id[148079](148078 'get_union_id' x[147862])
      {
        unknown i[148146] 0
        unknown tmp[148147] "maybe param" "temp"
        (148159 'move' tmp[148147](148157 call chpl_compute_low_param_loop_bound 1 num_fields[147888]))
        unknown tmp[148148] "maybe param" "temp"
        (148166 'move' tmp[148148](148164 call chpl_compute_high_param_loop_bound 1 num_fields[147888]))
        unknown tmp[148149] "maybe param" "temp"
        (148169 'move' tmp[148149] 1)
        ParamForLoop
        { i[148146] tmp[148147] tmp[148148] tmp[148149]
          {
            if(148141 call _cond_test(148096 call &&(148091 call isIoField x[147862] i[148146])(148094 call == i[148146] id[148079])))
            {
              if(148124 call _cond_test isBinary[147898])
              {
                (148102 call write id[148079])
              }
              {
                unknown eq[148112](148111 call ioFieldNameEqLiteral writer[147856] t[147860] i[148146]) ioLiteral[226016]
                (148122 call(148117 call . writer[147856] c"readwrite") eq[148112])
              }
              (148139 call(148130 call . writer[147856] c"readwrite")(148137 'field by num' x[147862] i[148146]))
            }
          }
        }
        label _unused_continueLabel[148151]
        label _breakLabel[148150]
      }
    }
  }
  function writeThisDefaultImpl[148190](arg writer[148188]:_any[170](?), arg x[148194] :
  unknown t[148192]) : _unknown[43] "no doc" "no return value for void"
  {
    if(148318 call _cond_test(148203 call !(148202 call(148198 call . writer[148188] c"binary"))))
    {
      unknown st[148212](148211 call(148206 call . writer[148188] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
      unknown start[148217] ioLiteral[226016]
      if(148305 call _cond_test(148222 call == st[148212] QIO_AGGREGATE_FORMAT_JSON[19410]))
      {
        (148230 call = start[148217](148229 'new'(148228 call ioLiteral[226016] "{")))
      }
      {
        if(148301 call _cond_test(148236 call == st[148212] QIO_AGGREGATE_FORMAT_CHPL[19406]))
        {
          (148268 call = start[148217](148267 'new'(148266 call ioLiteral[226016](148263 call +(148260 call + "new "(148258 call _cast string[24] t[148192])) "("))))
        }
        {
          if(148296 call _cond_test(148275 call isClassType t[148192]))
          {
            (148282 call = start[148217](148281 'new'(148280 call ioLiteral[226016] "{")))
          }
          {
            (148292 call = start[148217](148291 'new'(148290 call ioLiteral[226016] "(")))
          }
        }
      }
      (148316 call(148311 call . writer[148188] c"readwrite") start[148217])
    }
    unknown first[148324] 1
    (148332 call writeThisFieldsDefaultImpl writer[148188] x[148194] first[148324])
    if(148431 call _cond_test(148340 call !(148339 call(148335 call . writer[148188] c"binary"))))
    {
      unknown st[148349](148348 call(148343 call . writer[148188] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
      unknown end[148354] ioLiteral[226016]
      if(148418 call _cond_test(148359 call == st[148349] QIO_AGGREGATE_FORMAT_JSON[19410]))
      {
        (148367 call = end[148354](148366 'new'(148365 call ioLiteral[226016] "}")))
      }
      {
        if(148414 call _cond_test(148373 call == st[148349] QIO_AGGREGATE_FORMAT_CHPL[19406]))
        {
          (148381 call = end[148354](148380 'new'(148379 call ioLiteral[226016] ")")))
        }
        {
          if(148409 call _cond_test(148388 call isClassType t[148192]))
          {
            (148395 call = end[148354](148394 'new'(148393 call ioLiteral[226016] "}")))
          }
          {
            (148405 call = end[148354](148404 'new'(148403 call ioLiteral[226016] ")")))
          }
        }
      }
      (148429 call(148424 call . writer[148188] c"readwrite") end[148354])
    }
  }
  function skipFieldsAtEnd[148441](arg reader[148439]:_any[170](?), inout arg needsComma[148444] :
  bool[10]) : _unknown[43] "private" "no return value for void"
  {
    unknown st[148454](148453 call(148448 call . reader[148439] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
    unknown skip_unk[148465](148464 call(148459 call . reader[148439] c"styleElement") QIO_STYLE_ELEMENT_SKIP_UNKNOWN_FIELDS[19386])
    if(148619 call _cond_test(148476 call &&(148470 call != skip_unk[148465] 0)(148474 call == st[148454] QIO_AGGREGATE_FORMAT_JSON[19410])))
    {
      {
        unknown tmp[148597] "temp"
        (148615 'move' tmp[148597](148613 call _cond_test 1))
        WhileDo
        {
          {
            if(148541 call _cond_test needsComma[148444])
            {
              unknown comma[148486](148485 'new'(148484 call ioLiteral[226016] "," 1))
              (148496 call(148491 call . reader[148439] c"readwrite") comma[148486])
              if(148536 call _cond_test(148504 call !(148503 call(148499 call . reader[148439] c"error"))))
              {
                (148508 call = needsComma[148444] 0)
              }
              {
                if(148532 call _cond_test(148519 call ==(148517 call(148513 call . reader[148439] c"error"))(356035 call EFORMAT[210730])))
                {
                  (148526 call(148522 call . reader[148439] c"clearError"))
                  break _breakLabel[148601] _breakLabel[148601]
                }
              }
            }
            unknown err[148548](356039 call ENOERR[210102]) syserr[210032]
            Try
            {
              {
                (148558 call(148554 call . reader[148439] c"skipField"))
                (148563 call = needsComma[148444] 1)
              }
            }
            Catch e : anymanaged SystemError
            {
              unknown tmp[328616] "temp"(328619 'dynamic_cast' unmanaged SystemError[390112](328618 'current error'))
              if(328628 '!=' tmp[328616] nil[38])
              {
                unknown e[328634](328638 'new'(328635 call _owned[39039](?) tmp[328616]))
                {
                  (148575 call = err[148548](148572 call . e[328634] c"err"))
                }
              }
              {
              }
            }
            Catch
            {
              unknown tmp[328641] "temp"(328643 'current error')
              unknown chpl_anon_error[328646](328650 'new'(328647 call _owned[39039](?) tmp[328641]))
              {
                (148582 call = err[148548] EINVAL[210884])
              }
            }
            (148595 call(148590 call . reader[148439] c"setError") err[148548])
          }
          label _continueLabel[148600]
          (148608 'move' tmp[148597](148606 call _cond_test 1))
          tmp[148597]
        }
        label _breakLabel[148601]
      }
    }
  }
  function readThisFieldsDefaultImpl[148629](arg reader[148627]:_any[170](?), arg t[148631]:_any[170](?), ref arg x[148633]:_any[170](?), inout arg needsComma[148636] :
  bool[10]) : _unknown[43] "no doc" "no return value for void"
  {
    unknown num_fields[148643] "param"(148642 'num fields' t[148631])
    unknown isBinary[148653](148652 call(148648 call . reader[148627] c"binary"))
    unknown superclass_error[148658](356053 call ENOERR[210102]) syserr[210032]
    if(148710 call _cond_test(148664 call isClassType t[148631]))
    {
      if(148705 call _cond_test(148671 call !=(148668 call _to_borrowed t[148631]) object[253]))
      {
        unknown superType[148678] "type variable"(148677 'typeof'(148674 call . x[148633] c"super"))
        unknown castTmp[148684] x[148633] superType[148678]
        (148693 call readThisFieldsDefaultImpl reader[148627] superType[148678] castTmp[148684] needsComma[148636])
        (148702 call = superclass_error[148658](148701 call(148697 call . reader[148627] c"error")))
      }
    }
    if(149603 call _cond_test(148718 call !(148717 call isUnionType t[148631])))
    {
      if(149318 call _cond_test isBinary[148653])
      {
        {
          unknown i[148748] 0
          unknown tmp[148749] "maybe param" "temp"
          (148761 'move' tmp[148749](148759 call chpl_compute_low_param_loop_bound 1 num_fields[148643]))
          unknown tmp[148750] "maybe param" "temp"
          (148768 'move' tmp[148750](148766 call chpl_compute_high_param_loop_bound 1 num_fields[148643]))
          unknown tmp[148751] "maybe param" "temp"
          (148771 'move' tmp[148751] 1)
          ParamForLoop
          { i[148748] tmp[148749] tmp[148750] tmp[148751]
            {
              if(148743 call _cond_test(148729 call isIoField x[148633] i[148748]))
              {
                (148740 call(148731 call . reader[148627] c"readwrite")(148738 'field by num' x[148633] i[148748]))
              }
            }
          }
          label _unused_continueLabel[148753]
          label _breakLabel[148752]
        }
      }
      {
        if(149314 call _cond_test(148785 call > num_fields[148643] 0))
        {
          unknown read_field[148791](148789 call * num_fields[148643] bool[10])
          unknown num_to_read[148796] 0
          unknown num_read[148800] 0
          {
            unknown i[148823] 0
            unknown tmp[148824] "maybe param" "temp"
            (148836 'move' tmp[148824](148834 call chpl_compute_low_param_loop_bound 1 num_fields[148643]))
            unknown tmp[148825] "maybe param" "temp"
            (148843 'move' tmp[148825](148841 call chpl_compute_high_param_loop_bound 1 num_fields[148643]))
            unknown tmp[148826] "maybe param" "temp"
            (148846 'move' tmp[148826] 1)
            ParamForLoop
            { i[148823] tmp[148824] tmp[148825] tmp[148826]
              {
                if(148818 call _cond_test(148811 call isIoField x[148633] i[148823]))
                {
                  (148814 call += num_to_read[148796] 1)
                }
              }
            }
            label _unused_continueLabel[148828]
            label _breakLabel[148827]
          }
          {
            unknown tmp[149253] "temp"
            (149277 'move' tmp[149253](149272 call _cond_test(149274 call < num_read[148800] num_to_read[148796])))
            WhileDo
            {
              {
                if(148916 call _cond_test needsComma[148636])
                {
                  unknown comma[148868](148867 'new'(148866 call ioLiteral[226016] "," 1))
                  (148878 call(148873 call . reader[148627] c"readwrite") comma[148868])
                  if(148911 call _cond_test(148886 call !(148885 call(148881 call . reader[148627] c"error"))))
                  {
                    (148890 call = needsComma[148636] 0)
                  }
                  {
                    if(148907 call _cond_test(148901 call ==(148899 call(148895 call . reader[148627] c"error"))(356090 call EFORMAT[210730])))
                    {
                      break _breakLabel[149257] _breakLabel[149257]
                    }
                  }
                }
                unknown st[148928](148927 call(148922 call . reader[148627] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
                unknown skip_unk[148938](148937 call(148932 call . reader[148627] c"styleElement") QIO_STYLE_ELEMENT_SKIP_UNKNOWN_FIELDS[19386])
                unknown read_field_name[148942] 0
                {
                  unknown i[149132] 0
                  unknown tmp[149133] "maybe param" "temp"
                  (149145 'move' tmp[149133](149143 call chpl_compute_low_param_loop_bound 1 num_fields[148643]))
                  unknown tmp[149134] "maybe param" "temp"
                  (149152 'move' tmp[149134](149150 call chpl_compute_high_param_loop_bound 1 num_fields[148643]))
                  unknown tmp[149135] "maybe param" "temp"
                  (149155 'move' tmp[149135] 1)
                  ParamForLoop
                  { i[149132] tmp[149133] tmp[149134] tmp[149135]
                    {
                      if(149127 call _cond_test(148953 call isIoField x[148633] i[149132]))
                      {
                        if(149122 call _cond_test(148963 call &&(148955 call ! read_field_name[148942])(148961 call !(148960 call read_field[148791] i[149132]))))
                        {
                          unknown fname[148972](148971 call ioFieldNameLiteral reader[148627] t[148631] i[149132]) ioLiteral[226016]
                          (148982 call(148977 call . reader[148627] c"readwrite") fname[148972])
                          if(149118 call _cond_test(149002 call ||(148991 call ==(148989 call(148985 call . reader[148627] c"error"))(356109 call EFORMAT[210730]))(149000 call ==(148998 call(148994 call . reader[148627] c"error"))(356112 call EEOF[210684]))))
                          {
                            (149009 call(149005 call . reader[148627] c"clearError"))
                          }
                          {
                            (149014 call = read_field_name[148942] 1)
                            (149020 call = needsComma[148636] 1)
                            unknown eq[149024] ioLiteral[226016]
                            if(149068 call _cond_test(149029 call == st[148928] QIO_AGGREGATE_FORMAT_JSON[19410]))
                            {
                              (149053 call = eq[149024](149052 'new'(149051 call ioLiteral[226016] ":" 1)))
                            }
                            {
                              (149064 call = eq[149024](149063 'new'(149062 call ioLiteral[226016] "=" 1)))
                            }
                            (149078 call(149073 call . reader[148627] c"readwrite") eq[149024])
                            (149090 call(149081 call . reader[148627] c"readwrite")(149088 'field by num' x[148633] i[149132]))
                            if(149114 call _cond_test(149098 call !(149097 call(149093 call . reader[148627] c"error"))))
                            {
                              (149105 call =(149103 call read_field[148791] i[149132]) 1)
                              (149111 call += num_read[148800] 1)
                            }
                          }
                        }
                      }
                    }
                  }
                  label _unused_continueLabel[149137]
                  label _breakLabel[149136]
                }
                if(149249 call _cond_test(149167 call ! read_field_name[148942]))
                {
                  if(149244 call _cond_test(149177 call &&(149171 call != skip_unk[148938] 0)(149175 call == st[148928] QIO_AGGREGATE_FORMAT_JSON[19410])))
                  {
                    unknown err[149181](356139 call ENOERR[210102]) syserr[210032]
                    Try
                    {
                      {
                        (149190 call(149186 call . reader[148627] c"skipField"))
                        (149195 call = needsComma[148636] 1)
                      }
                    }
                    Catch e : anymanaged SystemError
                    {
                      unknown tmp[328653] "temp"(328656 'dynamic_cast' unmanaged SystemError[390112](328655 'current error'))
                      if(328665 '!=' tmp[328653] nil[38])
                      {
                        unknown e[328671](328675 'new'(328672 call _owned[39039](?) tmp[328653]))
                        {
                          (149207 call = err[149181](149204 call . e[328671] c"err"))
                        }
                      }
                      {
                      }
                    }
                    Catch
                    {
                      unknown tmp[328678] "temp"(328680 'current error')
                      unknown chpl_anon_error[328683](328687 'new'(328684 call _owned[39039](?) tmp[328678]))
                      {
                        (149214 call = err[149181] EINVAL[210884])
                      }
                    }
                    (149227 call(149222 call . reader[148627] c"setError") err[149181])
                  }
                  {
                    (149238 call(149230 call . reader[148627] c"setError")(149235 call _cast syserr[210032](356151 call EFORMAT[210730])))
                    break _breakLabel[149257] _breakLabel[149257]
                  }
                }
              }
              label _continueLabel[149256]
              (149267 'move' tmp[149253](149262 call _cond_test(149264 call < num_read[148800] num_to_read[148796])))
              tmp[149253]
            }
            label _breakLabel[149257]
          }
          {
            unknown ok[149284](149282 call == num_read[148800] num_to_read[148796])
            if(149308 call _cond_test ok[149284])
            {
              (149295 call(149290 call . reader[148627] c"setError") superclass_error[148658])
            }
            {
              (149306 call(149298 call . reader[148627] c"setError")(149303 call _cast syserr[210032](356164 call EFORMAT[210730])))
            }
          }
        }
      }
    }
    {
      if(149598 call _cond_test isBinary[148653])
      {
        unknown id[149329](149328 'get_union_id' x[148633])
        (149339 call(149334 call . reader[148627] c"readwrite") id[149329])
        {
          unknown i[149374] 0
          unknown tmp[149375] "maybe param" "temp"
          (149387 'move' tmp[149375](149385 call chpl_compute_low_param_loop_bound 1 num_fields[148643]))
          unknown tmp[149376] "maybe param" "temp"
          (149394 'move' tmp[149376](149392 call chpl_compute_high_param_loop_bound 1 num_fields[148643]))
          unknown tmp[149377] "maybe param" "temp"
          (149397 'move' tmp[149377] 1)
          ParamForLoop
          { i[149374] tmp[149375] tmp[149376] tmp[149377]
            {
              if(149369 call _cond_test(149354 call &&(149349 call isIoField x[148633] i[149374])(149352 call == i[149374] id[149329])))
              {
                (149366 call(149357 call . reader[148627] c"readwrite")(149364 'field by num' x[148633] i[149374]))
              }
            }
          }
          label _unused_continueLabel[149379]
          label _breakLabel[149378]
        }
      }
      {
        unknown found_field[149409] 0
        {
          unknown i[149545] 0
          unknown tmp[149546] "maybe param" "temp"
          (149558 'move' tmp[149546](149556 call chpl_compute_low_param_loop_bound 1 num_fields[148643]))
          unknown tmp[149547] "maybe param" "temp"
          (149565 'move' tmp[149547](149563 call chpl_compute_high_param_loop_bound 1 num_fields[148643]))
          unknown tmp[149548] "maybe param" "temp"
          (149568 'move' tmp[149548] 1)
          ParamForLoop
          { i[149545] tmp[149546] tmp[149547] tmp[149548]
            {
              if(149540 call _cond_test(149421 call isIoField x[148633] i[149545]))
              {
                unknown st[149429](149428 call(149423 call . reader[148627] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
                unknown fname[149440](149439 call ioFieldNameLiteral reader[148627] t[148631] i[149545]) ioLiteral[226016]
                (149449 call(149444 call . reader[148627] c"readwrite") fname[149440])
                if(149536 call _cond_test(149469 call ||(149458 call ==(149456 call(149452 call . reader[148627] c"error"))(356192 call EFORMAT[210730]))(149467 call ==(149465 call(149461 call . reader[148627] c"error"))(356195 call EEOF[210684]))))
                {
                  (149476 call(149472 call . reader[148627] c"clearError"))
                }
                {
                  (149481 call = found_field[149409] 1)
                  unknown eq[149486] ioLiteral[226016]
                  if(149515 call _cond_test(149491 call == st[149429] QIO_AGGREGATE_FORMAT_JSON[19410]))
                  {
                    (149500 call = eq[149486](149499 'new'(149498 call ioLiteral[226016] ":" 1)))
                  }
                  {
                    (149511 call = eq[149486](149510 'new'(149509 call ioLiteral[226016] "=" 1)))
                  }
                  (149522 call readIt eq[149486])
                  (149534 call(149525 call . reader[148627] c"readwrite")(149532 'field by num' x[148633] i[149545]))
                }
              }
            }
          }
          label _unused_continueLabel[149550]
          label _breakLabel[149549]
        }
        if(149594 call _cond_test(149580 call ! found_field[149409]))
        {
          (149591 call(149583 call . reader[148627] c"setError")(149588 call _cast syserr[210032](356213 call EFORMAT[210730])))
        }
      }
    }
  }
  function readThisDefaultImpl[149613](arg reader[149611]:_any[170](?), arg x[149617] :
  unknown t[149615]) : _unknown[43] "no doc" "no return value for void"
  {
    if(149692 call _cond_test(149630 call !(149629 call(149625 call . reader[149611] c"binary"))))
    {
      unknown st[149639](149638 call(149633 call . reader[149611] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
      unknown start[149644] ioLiteral[226016]
      if(149680 call _cond_test(149649 call == st[149639] QIO_AGGREGATE_FORMAT_CHPL[19406]))
      {
        (149666 call = start[149644](149665 'new'(149664 call ioLiteral[226016](149661 call +(149658 call + "new "(149656 call _cast string[24] t[149615])) "("))))
      }
      {
        (149676 call = start[149644](149675 'new'(149674 call ioLiteral[226016] "{")))
      }
      (149690 call(149685 call . reader[149611] c"readwrite") start[149644])
    }
    unknown needsComma[149698] 0
    unknown obj[149702] x[149617]
    if(149722 call _cond_test(149711 call !(149710 call(149706 call . reader[149611] c"error"))))
    {
      (149719 call readThisFieldsDefaultImpl reader[149611] t[149615] obj[149702] needsComma[149698])
    }
    if(149741 call _cond_test(149732 call !(149731 call(149727 call . reader[149611] c"error"))))
    {
      (149738 call skipFieldsAtEnd reader[149611] needsComma[149698])
    }
    if(149804 call _cond_test(149751 call !(149750 call(149746 call . reader[149611] c"binary"))))
    {
      unknown st[149760](149759 call(149754 call . reader[149611] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
      unknown end[149765] ioLiteral[226016]
      if(149792 call _cond_test(149770 call == st[149760] QIO_AGGREGATE_FORMAT_CHPL[19406]))
      {
        (149778 call = end[149765](149777 'new'(149776 call ioLiteral[226016] ")")))
      }
      {
        (149788 call = end[149765](149787 'new'(149786 call ioLiteral[226016] "}")))
      }
      (149802 call(149797 call . reader[149611] c"readwrite") end[149765])
    }
  }
  where {
    (149623 call isClassType t[149615])
  }
  function readThisDefaultImpl[149815](arg reader[149813]:_any[170](?), ref arg x[149819] :
  unknown t[149817]) : _unknown[43] "no doc" "no return value for void"
  {
    if(149915 call _cond_test(149834 call !(149833 call(149829 call . reader[149813] c"binary"))))
    {
      unknown st[149843](149842 call(149837 call . reader[149813] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
      unknown start[149848] ioLiteral[226016]
      if(149902 call _cond_test(149853 call == st[149843] QIO_AGGREGATE_FORMAT_CHPL[19406]))
      {
        (149870 call = start[149848](149869 'new'(149868 call ioLiteral[226016](149865 call +(149862 call + "new "(149860 call _cast string[24] t[149817])) "("))))
      }
      {
        if(149898 call _cond_test(149876 call == st[149843] QIO_AGGREGATE_FORMAT_JSON[19410]))
        {
          (149884 call = start[149848](149883 'new'(149882 call ioLiteral[226016] "{")))
        }
        {
          (149894 call = start[149848](149893 'new'(149892 call ioLiteral[226016] "(")))
        }
      }
      (149913 call(149908 call . reader[149813] c"readwrite") start[149848])
    }
    unknown needsComma[149921] 0
    if(149941 call _cond_test(149930 call !(149929 call(149925 call . reader[149813] c"error"))))
    {
      (149938 call readThisFieldsDefaultImpl reader[149813] t[149817] x[149819] needsComma[149921])
    }
    if(149960 call _cond_test(149951 call !(149950 call(149946 call . reader[149813] c"error"))))
    {
      (149957 call skipFieldsAtEnd reader[149813] needsComma[149921])
    }
    if(150023 call _cond_test(149970 call !(149969 call(149965 call . reader[149813] c"binary"))))
    {
      unknown st[149979](149978 call(149973 call . reader[149813] c"styleElement") QIO_STYLE_ELEMENT_AGGREGATE[19370])
      unknown end[149984] ioLiteral[226016]
      if(150011 call _cond_test(149989 call == st[149979] QIO_AGGREGATE_FORMAT_JSON[19410]))
      {
        (149997 call = end[149984](149996 'new'(149995 call ioLiteral[226016] "}")))
      }
      {
        (150007 call = end[149984](150006 'new'(150005 call ioLiteral[226016] ")")))
      }
      (150021 call(150016 call . reader[149813] c"readwrite") end[149984])
    }
  }
  where {
    (149826 call !(149825 call isClassType t[149817]))
  }
  function halt[150032]() : _unknown[43] "always propagate line file info" "function terminates program" "no return value for void"
  {
    (150054 'chpl_error' c"halt reached")
  }
  function halt[150065](arg s[150062] :
  string[24]) : _unknown[43] "always propagate line file info" "function terminates program" "no return value for void"
  {
    (150080 call halt(150078 call(150074 call .(150073 call(150069 call . s[150062] c"localize")) c"c_str")))
  }
  function halt[150092](arg args[150089]:_any[170](?) ...) : _unknown[43] "always propagate line file info" "function terminates program" "no return value for void"
  {
    unknown tmpstring[150117](150115 call + "halt reached - "(150114 call stringify(150112 'expand_tuple' args[150089])))
    (150129 'chpl_error'(150128 call(150124 call . tmpstring[150117] c"c_str")))
  }
  function warning[150139](arg s[150136] :
  string[24]) : _unknown[43] "always propagate line file info" "no return value for void"
  {
    (150169 'chpl_warning'(150168 call(150164 call .(150163 call(150159 call . s[150136] c"localize")) c"c_str")))
  }
  function warning[150181](arg args[150178]:_any[170](?) ...) : _unknown[43] "always propagate line file info" "no return value for void"
  {
    unknown tmpstring[150188](150187 call stringify(150185 'expand_tuple' args[150178]))
    (150195 call warning tmpstring[150188])
  }
  function _ddata[11791](?).writeThis[150204](arg _mt[150209]:_MT[227], arg this[150206]:_ddata[11791](?) :
  _ddata[11791](?), arg f[150202]:_any[170](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    (150229 call compilerWarning "printing _ddata class")
    (150249 call <~> f[150202] "<_ddata class cannot be printed>")
  }
  function chpl_taskID_t[155].writeThis[150259](arg _mt[150264]:_MT[227], arg this[150261]:chpl_taskID_t[155] :
  chpl_taskID_t[155], arg f[150257]:_any[170](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    unknown tmp[150277](150275 call _cast(150274 call uint(64)[107] 64) this[150261])(150269 call uint(64)[107] 64)
    (150283 call <~> f[150257] tmp[150277])
  }
  function chpl_taskID_t[155].readThis[150293](arg _mt[150298]:_MT[227], arg this[150295]:chpl_taskID_t[155] :
  chpl_taskID_t[155], arg f[150291]:_any[170](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    unknown tmp[150304](150303 call uint(64)[107] 64)
    (150310 call <~> f[150291] tmp[150304])
    (150318 call = this[150295](150316 call _cast chpl_taskID_t[155] tmp[150304]))
  }
  function nothing[7].writeThis[150328](arg _mt[150333]:_MT[227], arg this[150330]:nothing[7] :
  nothing[7], arg f[150326]:_any[170](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
  }
  function _tuple[58502](?).readWriteThis[150343](arg _mt[150348]:_MT[227], arg this[150345]:_tuple[58502](?) :
  _tuple[58502](?), arg f[150341]:_any[170](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    unknown st[150357](150356 call(150351 call . f[150341] c"styleElement") QIO_STYLE_ELEMENT_TUPLE[19374])
    unknown start[150362] ioLiteral[226016]
    unknown comma[150366] ioLiteral[226016]
    unknown end[150370] ioLiteral[226016]
    unknown binary[150379](150378 call(150374 call . f[150341] c"binary"))
    if(150508 call _cond_test(150384 call == st[150357] QIO_TUPLE_FORMAT_SPACE[19418]))
    {
      (150407 call = start[150362](150406 'new'(150405 call ioLiteral[226016] "")))
      (150417 call = comma[150366](150416 'new'(150415 call ioLiteral[226016] " ")))
      (150441 call = end[150370](150440 'new'(150439 call ioLiteral[226016] "")))
    }
    {
      if(150504 call _cond_test(150446 call == st[150357] QIO_TUPLE_FORMAT_JSON[19422]))
      {
        (150454 call = start[150362](150453 'new'(150452 call ioLiteral[226016] "[")))
        (150464 call = comma[150366](150463 'new'(150462 call ioLiteral[226016] ", ")))
        (150473 call = end[150370](150472 'new'(150471 call ioLiteral[226016] "]")))
      }
      {
        (150482 call = start[150362](150481 'new'(150480 call ioLiteral[226016] "(")))
        (150492 call = comma[150366](150491 'new'(150490 call ioLiteral[226016] ", ")))
        (150501 call = end[150370](150500 'new'(150499 call ioLiteral[226016] ")")))
      }
    }
    if(150522 call _cond_test(150514 call ! binary[150379]))
    {
      (150518 call <~> f[150341] start[150362])
    }
    if(150599 call _cond_test(150528 call !=(356337 call . this[150345] c"size") 0))
    {
      (150535 call <~> f[150341](150534 call this[150345] 1))
      {
        unknown i[150565] 0
        unknown tmp[150566] "maybe param" "temp"
        (150578 'move' tmp[150566](150576 call chpl_compute_low_param_loop_bound 2(356344 call . this[150345] c"size")))
        unknown tmp[150567] "maybe param" "temp"
        (150585 'move' tmp[150567](150583 call chpl_compute_high_param_loop_bound 2(356355 call . this[150345] c"size")))
        unknown tmp[150568] "maybe param" "temp"
        (150588 'move' tmp[150568] 1)
        ParamForLoop
        { i[150565] tmp[150566] tmp[150567] tmp[150568]
          {
            if(150552 call _cond_test(150544 call ! binary[150379]))
            {
              (150548 call <~> f[150341] comma[150366])
            }
            (150562 call <~> f[150341](150561 call this[150345] i[150565]))
          }
        }
        label _unused_continueLabel[150570]
        label _breakLabel[150569]
      }
    }
    if(150612 call _cond_test(150604 call ! binary[150379]))
    {
      (150608 call <~> f[150341] end[150370])
    }
  }
  function range[66183](?).writeThis[150623](arg _mt[150628]:_MT[227], arg this[150625]:range[66183](?) :
  range[66183](?), arg f[150621]:_any[170](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    unknown alignCheckRange[150631] this[150625]
    if(150647 call _cond_test(150636 call . f[150621] c"writing"))
    {
      (150644 call(150640 call . alignCheckRange[150631] c"normalizeAlignment"))
    }
    if(150659 call _cond_test(150653 call(356365 call . this[150625] c"hasLowBound")))
    {
      (150656 call <~> f[150621](356370 call . this[150625] c"low"))
    }
    (150670 call <~> f[150621](150669 'new'(150668 call ioLiteral[226016] "..")))
    if(150681 call _cond_test(150675 call(356376 call . this[150625] c"hasHighBound")))
    {
      (150678 call <~> f[150621](356381 call . this[150625] c"high"))
    }
    if(150702 call _cond_test(150688 call !=(356385 call . this[150625] c"stride") 1))
    {
      (150699 call <~>(150696 call <~> f[150621](150695 'new'(150694 call ioLiteral[226016] " by ")))(356391 call . this[150625] c"stride"))
    }
    if(150740 call _cond_test(150716 call &&(150713 call !(150712 call(150708 call . alignCheckRange[150631] c"isNaturallyAligned")))(356396 call . this[150625] c"aligned")))
    {
      (150737 call <~>(150724 call <~> f[150621](150723 'new'(150722 call ioLiteral[226016] " align ")))(150736 call(356402 call . this[150625] c"chpl_intToIdx")(150734 call chpl__mod(150731 call chpl__idxToInt(356406 call . this[150625] c"alignment"))(356410 call . this[150625] c"stride"))))
    }
  }
  function range[66183](?).readThis[150752](arg _mt[150757]:_MT[227], ref arg this[150754]:range[66183](?) :
  range[66183](?), arg f[150750]:_any[170](?)) : _unknown[43] "method" "no doc" "no return value for void"
  {
    if(150767 call _cond_test(150761 call(356414 call . this[150754] c"hasLowBound")))
    {
      (150764 call <~> f[150750](356420 call . this[150754] c"_low"))
    }
    (150779 call <~> f[150750](150778 'new'(150777 call ioLiteral[226016] "..")))
    if(150790 call _cond_test(150784 call(356426 call . this[150754] c"hasHighBound")))
    {
      (150787 call <~> f[150750](356432 call . this[150754] c"_high"))
    }
    if(150811 call _cond_test(150797 call !=(356436 call . this[150754] c"stride") 1))
    {
      (150808 call <~>(150805 call <~> f[150750](150804 'new'(150803 call ioLiteral[226016] " by ")))(356442 call . this[150754] c"stride"))
    }
    if(150888 call _cond_test(150822 call !(150821 call(150817 call . f[150750] c"error"))))
    {
      (150830 call <~> f[150750](150829 'new'(150828 call ioLiteral[226016] " align ")))
      if(150884 call _cond_test(150841 call ==(150839 call(150835 call . f[150750] c"error"))(356449 call EFORMAT[210730])))
      {
        (150848 call(150844 call . f[150750] c"clearError"))
      }
      {
        if(150879 call _cond_test(356454 call . this[150754] c"stridable"))
        {
          unknown a[150853](356458 call . this[150754] c"intIdxType")
          (150859 call <~> f[150750] a[150853])
          (150864 call =(356465 call . this[150754] c"_alignment") a[150853])
        }
        {
          (150876 call(150868 call . f[150750] c"setError")(150873 call _cast syserr[210032](356470 call EFORMAT[210730])))
        }
      }
    }
  }
  function LocaleModel[89595].writeThis[150899](arg _mt[150904]:_MT[227], arg this[150901]:LocaleModel[89595] :
  LocaleModel[89595], arg f[150897]:_any[170](?)) : _unknown[43] "method" "method overrides" "no return value for void"
  {
    (150932 call <~>(150927 call <~> f[150897](150926 'new'(150925 call ioLiteral[226016] "LOCALE")))(150931 call(356478 call . this[150901] c"chpl_id")))
  }
  function _cast[150942](arg t[150940]:_any[170](?), arg x[150944]:_any[170](?)) : _unknown[43] "last resort" "no doc"
  {
    (150963 return(150962 call stringify x[150944]))
  }
  where {
    (150957 call &&(150948 call == t[150940] string[24])(150955 call !(150954 call isPrimitiveType(150952 'typeof' x[150944]))))
  }
  (329407 'used modules list'(147542 'use' ChapelBase[302])(147547 'use' ChapelLocale[90191])(147551 'use' SysBasic[209963])(147600 'use' IO[218633]))
}