AST dump for ChapelTuple after pass buildDefaultFunctions.
Module use list: ChapelStandard 

{
  function chpl__init_ChapelTuple[390177]() : void[4] "insert line file info" "module init"
  {
    (489438 'init var' CHPL_WARN_TUPLE_ITERATION[59252] "unset")
    (460150 return _void[47])
  }
  function _tuple[58502](?).size[701827](arg _mt[701829]:_MT[227], arg this[701831]:_tuple[58502](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens" "reference to const when const this"
  {
    unknown ret[701848] "RVV" "param" "temp"
    unknown call_tmp[701862] "expr temp" "maybe param" "maybe type" "temp"
    (701865 'move' call_tmp[701862](701836 'is bound' this[701831] c"size"))
    if call_tmp[701862]
    {
      unknown call_tmp[701867] "expr temp" "maybe param" "maybe type" "temp"
      (701870 'move' call_tmp[701867](701835 '.' this[701831] c"size"))
      (701853 'move' ret[701848](701852 'deref' call_tmp[701867]))
      gotoReturn _end_size[701846] _end_size[701846]
    }
    {
      (701858 'move' ret[701848](701857 'deref' ?[249]))
      gotoReturn _end_size[701846] _end_size[701846]
    }
    label _end_size[701846]
    (701850 return ret[701848])
  }
  function _tuple[58502](?).size[701872](arg _mt[701874]:_MT[227], arg this[701876]:_tuple[58502](?)) param : _unknown[43] "field accessor" "inline" "method" "primary method" "no implicit copy" "no parens"
  {
    unknown ret[701893] "RVV" "param" "temp"
    unknown call_tmp[701907] "expr temp" "maybe param" "maybe type" "temp"
    (701910 'move' call_tmp[701907](701881 'is bound' this[701876] c"size"))
    if call_tmp[701907]
    {
      unknown call_tmp[701912] "expr temp" "maybe param" "maybe type" "temp"
      (701915 'move' call_tmp[701912](701880 '.' this[701876] c"size"))
      (701898 'move' ret[701893](701897 'deref' call_tmp[701912]))
      gotoReturn _end_size[701891] _end_size[701891]
    }
    {
      (701903 'move' ret[701893](701902 'deref' ?[249]))
      gotoReturn _end_size[701891] _end_size[701891]
    }
    label _end_size[701891]
    (701895 return ret[701893])
  }
  function _tuple[58502](?).deinit[701917](arg _mt[701919]:_MT[227], arg this[701921]:_tuple[58502](?)) : void[4] "compiler generated" "destructor" "inline" "last resort" "method" "primary method"
  {
    (701923 return _void[47])
  }
  function _defaultOf[701926](arg t[701928]:_tuple[58502](?)) : _unknown[43] "compiler generated" "inline" "last resort"
  {
    (701931 return _void[47])
  }
  function _tuple[58502](?).writeThis[701933](arg _mt[701937]:_MT[227], arg this[701935]:_tuple[58502](?), arg f[701936]:_any[170](?)) : void[4] "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (701946 call(701942 call (partial) readWriteThis _mt[232] this[701935]) f[701936])
    (701948 return _void[47])
  }
  function _tuple[58502](?).readThis[701952](arg _mt[701956]:_MT[227], arg this[701954]:_tuple[58502](?), arg f[701955]:_any[170](?)) : void[4] "compiler generated" "inline" "last resort" "method" "primary method"
  {
    (701964 call(701960 call (partial) readWriteThis _mt[232] this[701954]) f[701955])
    (701967 return _void[47])
  }
  function chpl__defaultHash[701971](arg r[701973]:_tuple[58502](?)) : _unknown[43] "compiler generated" "last resort"
  {
    unknown ret[701985] "RVV" "temp"
    unknown call_tmp[701992] "expr temp" "maybe param" "maybe type" "temp"
    (701995 'move' call_tmp[701992](701975 call size _mt[232] r[701973]))
    unknown call_tmp[701997] "expr temp" "maybe param" "maybe type" "temp"
    (702000 'move' call_tmp[701997](701979 call chpl__defaultHash call_tmp[701992]))
    (701990 'move' ret[701985](701989 'deref' call_tmp[701997]))
    (701987 return ret[701985])
  }
  type _tuple[58502](?) unknown size[58498] "param" int(64)[13]
  function chpl__init_tuple[58511](param arg size[58508]:int(64)[13]) : _unknown[43] "tuple init fn" "inline" "no return value for void"
  {
    (459237 return _void[47])
  }
  function _build_tuple[58522](arg t[58519]:_any[170](?) ...) type : _unknown[43] "build tuple" "build tuple type" "inline" "no return value for void"
  {
    (459239 return _void[47])
  }
  function _build_tuple[58533](arg x[58530]:_any[170](?) ...) : _unknown[43] "build tuple" "inline"
  {
    unknown ret[459243] "RVV" "temp"
    (459248 'move' ret[459243](459247 'deref' x[58530]))
    (459245 return ret[459243])
  }
  function _build_tuple_noref[58547](arg t[58544]:_any[170](?) ...) type : _unknown[43] "do not allow ref" "build tuple" "build tuple type" "inline" "no return value for void"
  {
    (459250 return _void[47])
  }
  function _build_tuple_always_allow_ref[58558](arg x[58555]:_any[170](?) ...) : _unknown[43] "allow ref" "build tuple" "inline" "suppress lvalue error"
  {
    unknown ret[459254] "RVV" "temp"
    (459259 'move' ret[459254](459258 'deref' x[58555]))
    (459256 return ret[459254])
  }
  function chpl__unref[58570](arg t[58568]:_any[170](?)) type : _unknown[43] "inline"
  {
    unknown ret[459263] "RVV" "temp" "type variable"
    unknown call_tmp[560796] "expr temp" "maybe param" "maybe type" "temp"
    (560799 'move' call_tmp[560796](58575 call isTupleType t[58568]))
    unknown call_tmp[560801] "expr temp" "maybe param" "maybe type" "temp"
    (560804 'move' call_tmp[560801](58586 call _cond_test call_tmp[560796]))
    if call_tmp[560801]
    {
      unknown call_tmp[560806] "expr temp" "maybe param" "maybe type" "temp"
      (560809 'move' call_tmp[560806](58580 call _build_tuple_noref(58578 'expand_tuple' t[58568])))
      (459268 'move' ret[459263](459267 'deref' call_tmp[560806]))
      gotoReturn _end_chpl__unref[459261] _end_chpl__unref[459261]
    }
    {
      (459273 'move' ret[459263](459272 'deref' t[58568]))
      gotoReturn _end_chpl__unref[459261] _end_chpl__unref[459261]
    }
    label _end_chpl__unref[459261]
    (459265 return ret[459263])
  }
  function *[58601](param arg p[58598]:int(64)[13], arg t[58603]:_any[170](?)) type : _unknown[43] "build tuple" "build tuple type" "star tuple" "no return value for void"
  {
    (459277 return _void[47])
  }
  function *[58614](param arg p[58611]:uint(64)[107], arg t[58616]:_any[170](?)) type : _unknown[43] "no doc"
  {
    unknown ret[459281] "RVV" "temp" "type variable"
    unknown call_tmp[560811] "expr temp" "maybe param" "maybe type" "temp"
    (560814 'move' call_tmp[560811](58622 call max int(64)[13]))
    unknown call_tmp[560816] "expr temp" "maybe param" "maybe type" "temp"
    (560819 'move' call_tmp[560816](58623 call > p[58611] call_tmp[560811]))
    unknown call_tmp[560821] "expr temp" "maybe param" "maybe type" "temp"
    (560824 'move' call_tmp[560821](58672 call _cond_test call_tmp[560816]))
    if call_tmp[560821]
    {
      unknown call_tmp[560826] "expr temp" "maybe param" "maybe type" "temp"
      (560829 'move' call_tmp[560826](58645 call max int(64)[13]))
      unknown call_tmp[560831] "expr temp" "maybe param" "maybe type" "temp"
      (560834 'move' call_tmp[560831](58647 call _cast string[24] call_tmp[560826]))
      unknown call_tmp[560836] "expr temp" "maybe param" "maybe type" "temp"
      (560839 'move' call_tmp[560836](58649 call + "Tuples of size >" call_tmp[560831]))
      unknown call_tmp[560841] "expr temp" "maybe param" "maybe type" "temp"
      (560844 'move' call_tmp[560841](58667 call + call_tmp[560836] " are not currently supported"))
      (58670 call compilerError call_tmp[560841])
    }
    unknown call_tmp[560846] "maybe param" "maybe type" "temp"
    (560849 'move' call_tmp[560846](58680 call _cast int(64)[13] p[58611]))
    unknown pAsInt[58682] "param"
    (489434 'init var' pAsInt[58682] call_tmp[560846])
    unknown call_tmp[560851] "expr temp" "maybe param" "maybe type" "temp"
    (560854 'move' call_tmp[560851](58687 call * pAsInt[58682] t[58616]))
    (459286 'move' ret[459281](459285 'deref' call_tmp[560851]))
    (459283 return ret[459281])
  }
  function *[58699](param arg p[58696]:bool[10], arg t[58701]:_any[170](?)) type : _unknown[43] "last resort" "no doc" "no return value for void"
  {
    (58721 call compilerError "Tuple types cannot be defined using boolean sizes")
    (459288 return _void[47])
  }
  function *[58732](arg p[58729]:bool[10], arg t[58734]:_any[170](?)) type : _unknown[43] "last resort" "no doc" "no return value for void"
  {
    (58739 call compilerError "Tuple types cannot be defined using boolean sizes")
    (459290 return _void[47])
  }
  function _build_star_tuple_noref[58750](param arg p[58747]:int(64)[13], arg t[58752]:_any[170](?)) type : _unknown[43] "do not allow ref" "build tuple" "build tuple type" "star tuple" "no return value for void"
  {
    (459292 return _void[47])
  }
  function *[58761](arg t[58759]:_any[170](?), param arg p[58764]:int(64)[13]) : _unknown[43] "last resort" "no return value for void"
  {
    (58787 call compilerError "<type>*<param int> not supported.  If you're trying to specify a homogeneous tuple type, use <param int>*<type>.")
    (459294 return _void[47])
  }
  function *[58798](arg p[58795]:integral[188](?), arg t[58800]:_any[170](?)) type : _unknown[43] "last resort" "no return value for void"
  {
    (58822 call compilerError "tuple size must be known at compile-time")
    (459296 return _void[47])
  }
  function chpl__tuplify[58831](arg x[58829]:_any[170](?)) : _unknown[43] "inline"
  {
    unknown ret[459300] "RVV" "temp"
    unknown call_tmp[560856] "expr temp" "maybe param" "maybe type" "temp"
    (560859 'move' call_tmp[560856](58836 call isTuple x[58829]))
    unknown call_tmp[560861] "expr temp" "maybe param" "maybe type" "temp"
    (560864 'move' call_tmp[560861](58845 call _cond_test call_tmp[560856]))
    if call_tmp[560861]
    {
      (459305 'move' ret[459300](459304 'deref' x[58829]))
      gotoReturn _end_chpl__tuplify[459298] _end_chpl__tuplify[459298]
    }
    {
      unknown call_tmp[560866] "expr temp" "maybe param" "maybe type" "temp"
      (560869 'move' call_tmp[560866](58841 call _build_tuple x[58829]))
      (459310 'move' ret[459300](459309 'deref' call_tmp[560866]))
      gotoReturn _end_chpl__tuplify[459298] _end_chpl__tuplify[459298]
    }
    label _end_chpl__tuplify[459298]
    (459302 return ret[459300])
  }
  function isTupleValue[58860](arg x[58857]:_tuple[58502](?)) param : _unknown[43] "no doc"
  {
    unknown ret[459316] "RVV" "param" "temp"
    (459321 'move' ret[459316](459320 'deref' 1))
    (459318 return ret[459316])
  }
  function isTupleValue[58872](arg x[58870]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[459325] "RVV" "param" "temp"
    (459330 'move' ret[459325](459329 'deref' 0))
    (459327 return ret[459325])
  }
  function isHomogeneousTupleValue[58884](arg x[58882]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[459334] "RVV" "param" "temp"
    unknown call_tmp[560871] "expr temp" "maybe param" "maybe type" "temp"
    (560874 'move' call_tmp[560871](58904 'is star tuple type' x[58882]))
    (459339 'move' ret[459334](459338 'deref' call_tmp[560871]))
    (459336 return ret[459334])
  }
  function _check_tuple_var_decl[58916](arg x[58913]:_tuple[58502](?), param arg p[58918]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[459343] "RVV" "param" "temp"
    unknown call_tmp[560878] "expr temp" "maybe param" "maybe type" "temp"
    (560881 'move' call_tmp[560878](58922 call size _mt[232] x[58913]))
    unknown call_tmp[560883] "expr temp" "maybe param" "maybe type" "temp"
    (560886 'move' call_tmp[560883](58925 call == p[58918] call_tmp[560878]))
    unknown call_tmp[560888] "expr temp" "maybe param" "maybe type" "temp"
    (560891 'move' call_tmp[560888](58955 call _cond_test call_tmp[560883]))
    if call_tmp[560888]
    {
      (459348 'move' ret[459343](459347 'deref' 1))
      gotoReturn _end__check_tuple_var_decl[459341] _end__check_tuple_var_decl[459341]
    }
    {
      (58949 call compilerError "tuple size must match the number of grouped variables")
      (459353 'move' ret[459343](459352 'deref' 0))
      gotoReturn _end__check_tuple_var_decl[459341] _end__check_tuple_var_decl[459341]
    }
    label _end__check_tuple_var_decl[459341]
    (459345 return ret[459343])
  }
  function _check_tuple_var_decl[58966](arg x[58964]:_any[170](?), param arg p[58968]:_any[170](?)) param : _unknown[43] "no doc"
  {
    unknown ret[459359] "RVV" "param" "temp"
    (58988 call compilerError "illegal tuple variable declaration with non-tuple initializer")
    (459364 'move' ret[459359](459363 'deref' 0))
    (459361 return ret[459359])
  }
  function isTupleType[59000](arg t[58998]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[459368] "RVV" "param" "temp"
    unknown call_tmp[560893] "expr temp" "maybe param" "maybe type" "temp"
    (560896 'move' call_tmp[560893](59020 'is tuple type' t[58998]))
    (459373 'move' ret[459368](459372 'deref' call_tmp[560893]))
    (459370 return ret[459368])
  }
  function isHomogeneousTupleType[59030](arg t[59028]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[459377] "RVV" "param" "temp"
    unknown call_tmp[560898] "expr temp" "maybe param" "maybe type" "temp"
    (560901 'move' call_tmp[560898](59035 'is star tuple type' t[59028]))
    (459382 'move' ret[459377](459381 'deref' call_tmp[560898]))
    (459379 return ret[459377])
  }
  function =[59047](ref arg x[59044]:_tuple[58502](?), arg y[59050]:_tuple[58502](?)) : _unknown[43] "assignop" "compiler generated" "inline" "last resort" "no return value for void"
  {
    {
      unknown i[59081] "insert auto destroy"
      (489436 'init var' i[59081] 0)
      unknown tmp[59082] "maybe param" "temp"
      unknown call_tmp[560905] "expr temp" "maybe param" "maybe type" "temp"
      (560908 'move' call_tmp[560905](59065 call size _mt[232] x[59044]))
      (59094 'move' tmp[59082](59092 call chpl_compute_low_param_loop_bound 1 call_tmp[560905]))
      unknown tmp[59083] "maybe param" "temp"
      unknown call_tmp[560912] "expr temp" "maybe param" "maybe type" "temp"
      (560915 'move' call_tmp[560912](59099 call size _mt[232] x[59044]))
      (59104 'move' tmp[59083](59102 call chpl_compute_high_param_loop_bound 1 call_tmp[560912]))
      unknown tmp[59084] "maybe param" "temp"
      (59107 'move' tmp[59084] 1)
      ParamForLoop
      { i[59081] tmp[59082] tmp[59083] tmp[59084]
        unknown call_tmp[560917] "expr temp" "maybe param" "maybe type" "temp"
        (560920 'move' call_tmp[560917](59073 call x[59044] i[59081]))
        unknown call_tmp[560922] "expr temp" "maybe param" "maybe type" "temp"
        (560925 'move' call_tmp[560922](59077 call y[59050] i[59081]))
        (59078 call = call_tmp[560917] call_tmp[560922])
      }
      label _unused_continueLabel[59086]
      label _breakLabel[59085]
    }
    (459384 return _void[47])
  }
  where {
    unknown call_tmp[560929] "expr temp" "maybe param" "maybe type" "temp"
    (560932 'move' call_tmp[560929](59054 call size _mt[232] x[59044]))
    unknown call_tmp[560936] "expr temp" "maybe param" "maybe type" "temp"
    (560939 'move' call_tmp[560936](59058 call size _mt[232] y[59050]))
    (59061 call == call_tmp[560929] call_tmp[560936])
  }
  function _tuple[58502](?).this[59129](arg _mt[59134]:_MT[227], arg this[59131]:_tuple[58502](?) :
  _tuple[58502](?), arg i[59126]:integral[188](?)) ref : _unknown[43] "method" "no doc" "reference to const when const this" "star tuple accessor"
  {
    unknown ret[459388] "RVV" "temp"
    unknown call_tmp[560941] "expr temp" "maybe param" "maybe type" "temp"
    (560944 'move' call_tmp[560941](59139 call isHomogeneousTuple this[59131]))
    unknown call_tmp[560946] "expr temp" "maybe param" "maybe type" "temp"
    (560949 'move' call_tmp[560946](59140 call ! call_tmp[560941]))
    unknown call_tmp[560951] "expr temp" "maybe param" "maybe type" "temp"
    (560954 'move' call_tmp[560951](59164 call _cond_test call_tmp[560946]))
    if call_tmp[560951]
    {
      (59162 call compilerError "invalid access of non-homogeneous tuple by runtime value")
    }
    unknown call_tmp[560956] "expr temp" "maybe param" "maybe type" "temp"
    (560959 'move' call_tmp[560956](59207 call _cond_test 1))
    if call_tmp[560956]
    {
      unknown tmp[394356] "maybe param" "temp"
      (394367 'move' tmp[394356](59173 call < i[59126] 1))
      unknown call_tmp[560961] "expr temp" "maybe param" "maybe type" "temp"
      (560964 'move' call_tmp[560961](394369 call _cond_invalid tmp[394356]))
      if call_tmp[560961]
      {
        (394372 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[503842] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[503843] "maybe param" "temp"
      unknown call_tmp[560966] "expr temp" "maybe param" "maybe type" "temp"
      (560969 'move' call_tmp[560966](394357 call isTrue tmp[394356]))
      (503848 'move' tmp[503843](503846 call _cond_test call_tmp[560966]))
      if tmp[503843]
      {
        (503853 'move' tmp[503842](503850 '_paramFoldLogical' tmp[503843] 1))
      }
      {
        unknown tmp[503855] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        unknown call_tmp[560973] "expr temp" "maybe param" "maybe type" "temp"
        (560976 'move' call_tmp[560973](340118 call size _mt[232] this[59131]))
        unknown call_tmp[560978] "expr temp" "maybe param" "maybe type" "temp"
        (560981 'move' call_tmp[560978](59177 call > i[59126] call_tmp[560973]))
        (503857 'move' tmp[503855](394361 call isTrue call_tmp[560978]))
        (503862 'move' tmp[503842](503859 '_paramFoldLogical' tmp[503843] tmp[503855]))
      }
      unknown call_tmp[560983] "expr temp" "maybe param" "maybe type" "temp"
      (560986 'move' call_tmp[560983](59202 call _cond_test tmp[503842]))
      if call_tmp[560983]
      {
        (59200 call halt "tuple access out of bounds: " i[59126])
      }
    }
    unknown call_tmp[560988] "expr temp" "maybe param" "maybe type" "temp"
    (560991 'move' call_tmp[560988](59231 'get svec member' this[59131] i[59126]))
    (459393 'move' ret[459388](459392 'addr of' call_tmp[560988]))
    (459390 return ret[459388])
  }
  unknown CHPL_WARN_TUPLE_ITERATION[59252] "config" "no doc" "param"
  function _tuple[58502](?).these[59258](arg _mt[59263]:_MT[227], arg this[59260]:_tuple[58502](?) :
  _tuple[58502](?)) ref : _unknown[43] "iterator fn" "method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[459397] "RVV" "temp"
    unknown call_tmp[560993] "expr temp" "maybe param" "maybe type" "temp"
    (560996 'move' call_tmp[560993](59268 call isHomogeneousTuple this[59260]))
    unknown call_tmp[560998] "expr temp" "maybe param" "maybe type" "temp"
    (561001 'move' call_tmp[560998](59269 call ! call_tmp[560993]))
    unknown call_tmp[561003] "expr temp" "maybe param" "maybe type" "temp"
    (561006 'move' call_tmp[561003](59293 call _cond_test call_tmp[560998]))
    if call_tmp[561003]
    {
      (59291 call compilerError "Cannot iterate over non-homogeneous tuples. If you intended to use zippered iteration, add the new keyword 'zip' before the tu)
    }
    unknown call_tmp[561008] "expr temp" "maybe param" "maybe type" "temp"
    (561011 'move' call_tmp[561008](59316 call == CHPL_WARN_TUPLE_ITERATION[59252] "true"))
    unknown call_tmp[561013] "expr temp" "maybe param" "maybe type" "temp"
    (561016 'move' call_tmp[561013](59340 call _cond_test call_tmp[561008]))
    if call_tmp[561013]
    {
      (59338 call compilerWarning "Iterating over tuples. If you intended to use zippered iteration, add the new keyword 'zip' before the tuple of iteratable exp)
    }
    {
      unknown _indexOfInterest[59360] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[59361] "expr temp" "temp"
      unknown call_tmp[561020] "expr temp" "maybe param" "maybe type" "temp"
      (561023 'move' call_tmp[561020](59375 call size _mt[232] this[59260]))
      unknown call_tmp[561025] "expr temp" "maybe param" "maybe type" "temp"
      (561028 'move' call_tmp[561025](59378 call chpl_direct_range_iter 1 call_tmp[561020] 1))
      (59370 'move' _iterator[59361](59368 call _getIterator call_tmp[561025]))
      Defer
      {
        {
          (59394 call _freeIterator _iterator[59361])
        }
      }
      { scopeless type
        (59383 'move' _indexOfInterest[59360](59380 call iteratorIndex _iterator[59361]))
      }
      ForLoop
      {
        unknown i[59387] "index var" "insert auto destroy"
        (59389 'move' i[59387] _indexOfInterest[59360])
        {
          unknown yret[459401] "YVV" "temp"
          unknown call_tmp[561030] "expr temp" "maybe param" "maybe type" "temp"
          (561033 'move' call_tmp[561030](59356 call this[59260] i[59387]))
          (459404 'move' yret[459401](459403 'addr of' call_tmp[561030]))
          (459406 yield yret[459401])
        }
        label _continueLabel[59365]
        _indexOfInterest[59360]
        _iterator[59361]
      }
      label _breakLabel[59366]
    }
    (459399 return ret[459397])
  }
  function _tuple[58502](?).these[59410](arg _mt[59415]:_MT[227], arg this[59412]:_tuple[58502](?) :
  _tuple[58502](?), param arg tag[59407]:iterKind[697]) ref : _unknown[43] "iterator fn" "method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[459410] "RVV" "temp"
    const numTasks[59436] "const" "insert auto destroy"
    unknown tmp[503869] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503870] "maybe param" "temp"
    unknown call_tmp[561035] "expr temp" "maybe param" "maybe type" "temp"
    (561038 'move' call_tmp[561035](59426 call == dataParTasksPerLocale[92471] 0))
    (503875 'move' tmp[503870](503873 call _cond_test call_tmp[561035]))
    if tmp[503870]
    {
      unknown tmp[503877] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[561040] "expr temp" "maybe param" "maybe type" "temp"
      (561043 'move' call_tmp[561040](340133 call here[92085]))
      (503879 'move' tmp[503877](59429 call maxTaskPar _mt[232] call_tmp[561040]))
      (503884 'move' tmp[503869](503881 '_paramFoldLogical' tmp[503870] tmp[503877]))
    }
    {
      (503889 'move' tmp[503869](503886 '_paramFoldLogical' tmp[503870] dataParTasksPerLocale[92471]))
    }
    (489440 'init var' numTasks[59436] tmp[503869])
    const ignoreRunning[59441] "const" "insert auto destroy"
    (489442 'init var' ignoreRunning[59441] dataParIgnoreRunningTasks[92476])
    const minIndicesPerTask[59445] "const" "insert auto destroy"
    (489444 'init var' minIndicesPerTask[59445] dataParMinGranularity[92481])
    unknown call_tmp[561049] "maybe param" "maybe type" "temp"
    (561052 'move' call_tmp[561049](59449 call size _mt[232] this[59412]))
    const length[59452] "const" "insert auto destroy"
    (489446 'init var' length[59452] call_tmp[561049])
    unknown call_tmp[561054] "expr temp" "maybe param" "maybe type" "temp"
    (561057 'move' call_tmp[561054](59456 call chpl_build_low_bounded_range 0))
    unknown call_tmp[561059] "expr temp" "maybe param" "maybe type" "temp"
    (561062 'move' call_tmp[561059](59459 call # call_tmp[561054] length[59452]))
    unknown call_tmp[561064] "maybe param" "maybe type" "temp"
    (561067 'move' call_tmp[561064](59461 call _build_tuple call_tmp[561059]))
    const myRange[59463] "const" "insert auto destroy"
    (489448 'init var' myRange[59463] call_tmp[561064])
    unknown call_tmp[561069] "maybe param" "maybe type" "temp"
    (561072 'move' call_tmp[561069](59477 call _computeChunkStuff numTasks[59436] ignoreRunning[59441] minIndicesPerTask[59445] myRange[59463]))
    unknown tmp[59478] "insert auto destroy" "no copy" "temp"
    (489450 'init var' tmp[59478] call_tmp[561069])
    (59482 call _check_tuple_var_decl tmp[59478] 2)
    unknown call_tmp[561074] "maybe param" "maybe type" "temp"
    (561077 'move' call_tmp[561074](59479 call tmp[59478] 1))
    unknown numChunks[59466] "insert auto destroy"
    (489452 'init var' numChunks[59466] call_tmp[561074])
    unknown call_tmp[561079] "expr temp" "maybe param" "maybe type" "temp"
    (561082 'move' call_tmp[561079](59489 call == numChunks[59466] 1))
    unknown call_tmp[561084] "expr temp" "maybe param" "maybe type" "temp"
    (561087 'move' call_tmp[561084](59731 call _cond_test call_tmp[561079]))
    if call_tmp[561084]
    {
      unknown yret[459414] "YVV" "temp"
      (459417 'move' yret[459414](459416 'addr of' myRange[59463]))
      (459419 yield yret[459414])
    }
    {
      {
        unknown tmpIter[59538] "expr temp" "maybe ref" "no copy" "temp"
        unknown call_tmp[561089] "expr temp" "maybe param" "maybe type" "temp"
        (561092 'move' call_tmp[561089](59497 call chpl_build_low_bounded_range 0))
        (59541 'move' tmpIter[59538](59500 call # call_tmp[561089] numChunks[59466]))
        unknown isRngDomArr[59711] "maybe param" "temp"
        unknown tmp[394377] "maybe param" "temp"
        (394388 'move' tmp[394377](59713 call isBoundedRange tmpIter[59538]))
        unknown call_tmp[561094] "expr temp" "maybe param" "maybe type" "temp"
        (561097 'move' call_tmp[561094](394390 call _cond_invalid tmp[394377]))
        if call_tmp[561094]
        {
          (394393 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[503923] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[503924] "maybe param" "temp"
        unknown call_tmp[561099] "expr temp" "maybe param" "maybe type" "temp"
        (561102 'move' call_tmp[561099](394378 call isTrue tmp[394377]))
        (503929 'move' tmp[503924](503927 call _cond_test call_tmp[561099]))
        if tmp[503924]
        {
          (503934 'move' tmp[503923](503931 '_paramFoldLogical' tmp[503924] 1))
        }
        {
          unknown tmp[394398] "maybe param" "temp"
          (394409 'move' tmp[394398](59716 call isDomain tmpIter[59538]))
          unknown call_tmp[561104] "expr temp" "maybe param" "maybe type" "temp"
          (561107 'move' call_tmp[561104](394411 call _cond_invalid tmp[394398]))
          if call_tmp[561104]
          {
            (394414 call compilerError "cannot promote short-circuiting || operator")
          }
          unknown tmp[503896] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
          unknown tmp[503897] "maybe param" "temp"
          unknown call_tmp[561109] "expr temp" "maybe param" "maybe type" "temp"
          (561112 'move' call_tmp[561109](394399 call isTrue tmp[394398]))
          (503902 'move' tmp[503897](503900 call _cond_test call_tmp[561109]))
          if tmp[503897]
          {
            (503907 'move' tmp[503896](503904 '_paramFoldLogical' tmp[503897] 1))
          }
          {
            unknown tmp[503909] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
            unknown call_tmp[561114] "expr temp" "maybe param" "maybe type" "temp"
            (561117 'move' call_tmp[561114](59719 call isArray tmpIter[59538]))
            (503911 'move' tmp[503909](394403 call isTrue call_tmp[561114]))
            (503916 'move' tmp[503896](503913 '_paramFoldLogical' tmp[503897] tmp[503909]))
          }
          unknown tmp[503936] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          (503938 'move' tmp[503936](394382 call isTrue tmp[503896]))
          (503943 'move' tmp[503923](503940 '_paramFoldLogical' tmp[503924] tmp[503936]))
        }
        (59726 'move' isRngDomArr[59711] tmp[503923])
        if isRngDomArr[59711]
        {
          const _coforallCount[59578] "const" "end count" "temp"
          (59647 'move' _coforallCount[59578](59644 call _endCountAlloc 1))
          unknown numTasks[59579] "temp"
          (59631 'move' numTasks[59579](59627 call size _mt[232] tmpIter[59538]))
          (59622 call _upEndCount _coforallCount[59578] 1 numTasks[59579])
          (59619 call chpl_resetTaskSpawn numTasks[59579])
          unknown _indexOfInterest[59586] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[59587] "expr temp" "temp"
          (59596 'move' _iterator[59587](59594 call _getIterator tmpIter[59538]))
          Defer
          {
            {
              (59612 call _freeIterator _iterator[59587])
            }
          }
          { scopeless type
            (59601 'move' _indexOfInterest[59586](59598 call iteratorIndex _iterator[59587]))
          }
          ForLoop
          {
            unknown chunk[59605] "coforall index var" "index var" "insert auto destroy"
            (59607 'move' chunk[59605] _indexOfInterest[59586])
            {
              {
                unknown call_tmp[561121] "expr temp" "maybe param" "maybe type" "temp"
                (561124 'move' call_tmp[561121](59552 call - length[59452] 1))
                unknown call_tmp[561126] "maybe param" "maybe type" "temp"
                (561129 'move' call_tmp[561126](59547 call _computeBlock length[59452] numChunks[59466] chunk[59605] call_tmp[561121]))
                const tmp[59545] "const" "insert auto destroy" "no copy" "temp"
                (489454 'init var' tmp[59545] call_tmp[561126])
                (59557 call _check_tuple_var_decl tmp[59545] 2)
                unknown call_tmp[561131] "maybe param" "maybe type" "temp"
                (561134 'move' call_tmp[561131](59562 call tmp[59545] 1))
                const lo[59560] "const" "insert auto destroy"
                (489456 'init var' lo[59560] call_tmp[561131])
                unknown call_tmp[561136] "maybe param" "maybe type" "temp"
                (561139 'move' call_tmp[561136](59567 call tmp[59545] 2))
                const hi[59565] "const" "insert auto destroy"
                (489458 'init var' hi[59565] call_tmp[561136])
                unknown yret[459421] "YVV" "temp"
                unknown call_tmp[561141] "expr temp" "maybe param" "maybe type" "temp"
                (561144 'move' call_tmp[561141](59574 call chpl_build_bounded_range lo[59560] hi[59565]))
                unknown call_tmp[561146] "expr temp" "maybe param" "maybe type" "temp"
                (561149 'move' call_tmp[561146](59572 call _build_tuple call_tmp[561141]))
                (459424 'move' yret[459421](459423 'addr of' call_tmp[561146]))
                (459426 yield yret[459421])
              }
              (59581 call _downEndCount _coforallCount[59578] nil[38])
              (59580 'coforall loop')
            }
            label _continueLabel[59591]
            _indexOfInterest[59586]
            _iterator[59587]
          }
          label _breakLabel[59592]
          Defer
          {
            {
              (59634 call _endCountFree _coforallCount[59578])
            }
          }
          (59639 call _waitEndCount _coforallCount[59578] 1 numTasks[59579])
        }
        {
          const _coforallCount[59651] "const" "end count" "temp"
          (59708 'move' _coforallCount[59651](59705 call _endCountAlloc 1))
          unknown _indexOfInterest[59659] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[59660] "expr temp" "temp"
          (59669 'move' _iterator[59660](59667 call _getIterator tmpIter[59538]))
          Defer
          {
            {
              (59685 call _freeIterator _iterator[59660])
            }
          }
          { scopeless type
            (59674 'move' _indexOfInterest[59659](59671 call iteratorIndex _iterator[59660]))
          }
          ForLoop
          {
            unknown chunk[59678] "coforall index var" "index var" "insert auto destroy"
            (59680 'move' chunk[59678] _indexOfInterest[59659])
            (59692 call _upEndCount _coforallCount[59651] 1)
            {
              {
                unknown call_tmp[561151] "expr temp" "maybe param" "maybe type" "temp"
                (561154 'move' call_tmp[561151](59514 call - length[59452] 1))
                unknown call_tmp[561156] "maybe param" "maybe type" "temp"
                (561159 'move' call_tmp[561156](59516 call _computeBlock length[59452] numChunks[59466] chunk[59678] call_tmp[561151]))
                const tmp[59517] "const" "insert auto destroy" "no copy" "temp"
                (489460 'init var' tmp[59517] call_tmp[561156])
                (59524 call _check_tuple_var_decl tmp[59517] 2)
                unknown call_tmp[561161] "maybe param" "maybe type" "temp"
                (561164 'move' call_tmp[561161](59518 call tmp[59517] 1))
                const lo[59502] "const" "insert auto destroy"
                (489462 'init var' lo[59502] call_tmp[561161])
                unknown call_tmp[561166] "maybe param" "maybe type" "temp"
                (561169 'move' call_tmp[561166](59521 call tmp[59517] 2))
                const hi[59504] "const" "insert auto destroy"
                (489464 'init var' hi[59504] call_tmp[561166])
                unknown yret[459428] "YVV" "temp"
                unknown call_tmp[561171] "expr temp" "maybe param" "maybe type" "temp"
                (561174 'move' call_tmp[561171](59532 call chpl_build_bounded_range lo[59502] hi[59504]))
                unknown call_tmp[561176] "expr temp" "maybe param" "maybe type" "temp"
                (561179 'move' call_tmp[561176](59534 call _build_tuple call_tmp[561171]))
                (459431 'move' yret[459428](459430 'addr of' call_tmp[561176]))
                (459433 yield yret[459428])
              }
              (59654 call _downEndCount _coforallCount[59651] nil[38])
              (59653 'coforall loop')
            }
            label _continueLabel[59664]
            _indexOfInterest[59659]
            _iterator[59660]
          }
          label _breakLabel[59665]
          Defer
          {
            {
              (59696 call _endCountFree _coforallCount[59651])
            }
          }
          (59701 call _waitEndCount _coforallCount[59651] 1)
        }
      }
    }
    (459412 return ret[459410])
  }
  where {
    (59422 call == tag[59407] leader[691])
  }
  function _tuple[58502](?).these[59745](arg _mt[59754]:_MT[227], arg this[59751]:_tuple[58502](?) :
  _tuple[58502](?), param arg tag[59742]:iterKind[697], arg followThis[59748]:_tuple[58502](?)) ref : _unknown[43] "iterator fn" "method" "no doc" "reference to const when const this" "no return value for void"
  {
    unknown ret[459437] "RVV" "temp"
    unknown call_tmp[561183] "expr temp" "maybe param" "maybe type" "temp"
    (561186 'move' call_tmp[561183](59764 call size _mt[232] followThis[59748]))
    unknown call_tmp[561188] "expr temp" "maybe param" "maybe type" "temp"
    (561191 'move' call_tmp[561188](59768 call != call_tmp[561183] 1))
    unknown call_tmp[561193] "expr temp" "maybe param" "maybe type" "temp"
    (561196 'move' call_tmp[561193](59790 call _cond_test call_tmp[561188]))
    if call_tmp[561193]
    {
      (59788 call compilerError "Tuple zipped with incompatible iterator expression.")
    }
    unknown call_tmp[561198] "expr temp" "maybe param" "maybe type" "temp"
    (561201 'move' call_tmp[561198](59799 call followThis[59748] 1))
    unknown call_tmp[561205] "maybe param" "maybe type" "temp"
    (561208 'move' call_tmp[561205](59807 call(59802 call (partial) translate _mt[232] call_tmp[561198]) 1))
    unknown fThis[59808] "insert auto destroy"
    (489466 'init var' fThis[59808] call_tmp[561205])
    {
      unknown _indexOfInterest[59820] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[59821] "expr temp" "temp"
      (59830 'move' _iterator[59821](59828 call _getIterator fThis[59808]))
      Defer
      {
        {
          (59846 call _freeIterator _iterator[59821])
        }
      }
      { scopeless type
        (59835 'move' _indexOfInterest[59820](59832 call iteratorIndex _iterator[59821]))
      }
      ForLoop
      {
        unknown i[59839] "index var" "insert auto destroy"
        (59841 'move' i[59839] _indexOfInterest[59820])
        {
          unknown yret[459441] "YVV" "temp"
          unknown call_tmp[561210] "expr temp" "maybe param" "maybe type" "temp"
          (561213 'move' call_tmp[561210](59816 call this[59751] i[59839]))
          (459444 'move' yret[459441](459443 'addr of' call_tmp[561210]))
          (459446 yield yret[459441])
        }
        label _continueLabel[59825]
        _indexOfInterest[59820]
        _iterator[59821]
      }
      label _breakLabel[59826]
    }
    (459439 return ret[459437])
  }
  where {
    (59761 call == tag[59742] follower[693])
  }
  function _cast[59860](arg t[59858]:_any[170](?), arg x[59867]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459456] "RVV" "temp"
    function _chpl_complex64[59886](arg re[59883] :
    (59882 call real(64)[16] 32), arg im[59892] :
    (59891 call real(64)[16] 32)) : _unknown[43] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[459450] "RVV" "temp"
      (459452 return ret[459450])
    }
    { scopeless type
      (59898 call complex(128)[132] 64)
    }
    unknown call_tmp[561215] "expr temp" "maybe param" "maybe type" "temp"
    (561218 'move' call_tmp[561215](59911 call real(64)[16] 32))
    unknown call_tmp[561220] "expr temp" "maybe param" "maybe type" "temp"
    (561223 'move' call_tmp[561220](59907 call x[59867] 1))
    unknown call_tmp[561225] "expr temp" "maybe param" "maybe type" "temp"
    (561228 'move' call_tmp[561225](59912 call _cast call_tmp[561215] call_tmp[561220]))
    unknown call_tmp[561230] "expr temp" "maybe param" "maybe type" "temp"
    (561233 'move' call_tmp[561230](59922 call real(64)[16] 32))
    unknown call_tmp[561235] "expr temp" "maybe param" "maybe type" "temp"
    (561238 'move' call_tmp[561235](59918 call x[59867] 2))
    unknown call_tmp[561240] "expr temp" "maybe param" "maybe type" "temp"
    (561243 'move' call_tmp[561240](59923 call _cast call_tmp[561230] call_tmp[561235]))
    unknown call_tmp[561245] "expr temp" "maybe param" "maybe type" "temp"
    (561248 'move' call_tmp[561245](59925 call _chpl_complex64 call_tmp[561225] call_tmp[561240]))
    (459461 'move' ret[459456](459460 'deref' call_tmp[561245]))
    (459458 return ret[459456])
  }
  where {
    unknown call_tmp[561250] "expr temp" "maybe param" "maybe type" "temp"
    (561253 'move' call_tmp[561250](59874 call complex(128)[132] 64))
    unknown call_tmp[561255] "expr temp" "maybe param" "maybe type" "temp"
    (561258 'move' call_tmp[561255](59875 call == t[59858] call_tmp[561250]))
    unknown call_tmp[561260] "expr temp" "maybe param" "maybe type" "temp"
    (561263 'move' call_tmp[561260](429970 'query' x[59867] c"size"))
    unknown call_tmp[561265] "expr temp" "maybe param" "maybe type" "temp"
    (561268 'move' call_tmp[561265](429971 call == 2 call_tmp[561260]))
    (429973 call & call_tmp[561255] call_tmp[561265])
  }
  function _cast[59935](arg t[59933]:_any[170](?), arg x[59942]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459471] "RVV" "temp"
    function _chpl_complex128[59961](arg re[59958] :
    (59957 call real(64)[16] 64), arg im[59967] :
    (59966 call real(64)[16] 64)) : _unknown[43] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[459465] "RVV" "temp"
      (459467 return ret[459465])
    }
    { scopeless type
      (59973 call complex(128)[132] 128)
    }
    unknown call_tmp[561270] "expr temp" "maybe param" "maybe type" "temp"
    (561273 'move' call_tmp[561270](59986 call real(64)[16] 64))
    unknown call_tmp[561275] "expr temp" "maybe param" "maybe type" "temp"
    (561278 'move' call_tmp[561275](59982 call x[59942] 1))
    unknown call_tmp[561280] "expr temp" "maybe param" "maybe type" "temp"
    (561283 'move' call_tmp[561280](59987 call _cast call_tmp[561270] call_tmp[561275]))
    unknown call_tmp[561285] "expr temp" "maybe param" "maybe type" "temp"
    (561288 'move' call_tmp[561285](59997 call real(64)[16] 64))
    unknown call_tmp[561290] "expr temp" "maybe param" "maybe type" "temp"
    (561293 'move' call_tmp[561290](59993 call x[59942] 2))
    unknown call_tmp[561295] "expr temp" "maybe param" "maybe type" "temp"
    (561298 'move' call_tmp[561295](59998 call _cast call_tmp[561285] call_tmp[561290]))
    unknown call_tmp[561300] "expr temp" "maybe param" "maybe type" "temp"
    (561303 'move' call_tmp[561300](60000 call _chpl_complex128 call_tmp[561280] call_tmp[561295]))
    (459476 'move' ret[459471](459475 'deref' call_tmp[561300]))
    (459473 return ret[459471])
  }
  where {
    unknown call_tmp[561305] "expr temp" "maybe param" "maybe type" "temp"
    (561308 'move' call_tmp[561305](59949 call complex(128)[132] 128))
    unknown call_tmp[561310] "expr temp" "maybe param" "maybe type" "temp"
    (561313 'move' call_tmp[561310](59950 call == t[59933] call_tmp[561305]))
    unknown call_tmp[561315] "expr temp" "maybe param" "maybe type" "temp"
    (561318 'move' call_tmp[561315](429994 'query' x[59942] c"size"))
    unknown call_tmp[561320] "expr temp" "maybe param" "maybe type" "temp"
    (561323 'move' call_tmp[561320](429995 call == 2 call_tmp[561315]))
    (429997 call & call_tmp[561310] call_tmp[561320])
  }
  function _cast[60012](arg t[60009]:_tuple[58502](?), arg x[60015]:_tuple[58502](?)) : _unknown[43] "inline" "tuple cast fn" "unsafe" "no return value for void"
  {
    (459478 return _void[47])
  }
  function chpl__tupleRest[60027](arg t[60024]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459491] "RVV" "temp"
    function chpl__tupleRestHelper[60033](arg first[60031]:_any[170](?), arg rest[60036]:_any[170](?) ...) : _unknown[43] "inline"
    {
      unknown ret[459482] "RVV" "temp"
      (459487 'move' ret[459482](459486 'deref' rest[60036]))
      (459484 return ret[459482])
    }
    unknown call_tmp[561325] "expr temp" "maybe param" "maybe type" "temp"
    (561328 'move' call_tmp[561325](60050 call chpl__tupleRestHelper(60048 'expand_tuple' t[60024])))
    (459496 'move' ret[459491](459495 'deref' call_tmp[561325]))
    (459493 return ret[459491])
  }
  function +[60061](arg a[60058]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459500] "RVV" "temp"
    unknown result[60065] "insert auto destroy"
    unknown call_tmp[561330] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (561333 'move' call_tmp[561330](60064 'typeof' a[60058]))
    (489468 'default init var' result[60065] call_tmp[561330])
    {
      unknown d[60089] "insert auto destroy"
      (489470 'init var' d[60089] 0)
      unknown tmp[60090] "maybe param" "temp"
      unknown call_tmp[561337] "expr temp" "maybe param" "maybe type" "temp"
      (561340 'move' call_tmp[561337](60071 call size _mt[232] a[60058]))
      (60102 'move' tmp[60090](60100 call chpl_compute_low_param_loop_bound 1 call_tmp[561337]))
      unknown tmp[60091] "maybe param" "temp"
      unknown call_tmp[561344] "expr temp" "maybe param" "maybe type" "temp"
      (561347 'move' call_tmp[561344](60107 call size _mt[232] a[60058]))
      (60112 'move' tmp[60091](60110 call chpl_compute_high_param_loop_bound 1 call_tmp[561344]))
      unknown tmp[60092] "maybe param" "temp"
      (60115 'move' tmp[60092] 1)
      ParamForLoop
      { d[60089] tmp[60090] tmp[60091] tmp[60092]
        unknown call_tmp[561349] "expr temp" "maybe param" "maybe type" "temp"
        (561352 'move' call_tmp[561349](60079 call result[60065] d[60089]))
        unknown call_tmp[561354] "expr temp" "maybe param" "maybe type" "temp"
        (561357 'move' call_tmp[561354](60083 call a[60058] d[60089]))
        unknown call_tmp[561359] "expr temp" "maybe param" "maybe type" "temp"
        (561362 'move' call_tmp[561359](60084 call + call_tmp[561354]))
        (60086 call = call_tmp[561349] call_tmp[561359])
      }
      label _unused_continueLabel[60094]
      label _breakLabel[60093]
    }
    (459505 'move' ret[459500](459504 'deref' result[60065]))
    (459502 return ret[459500])
  }
  function -[60137](arg a[60134]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459509] "RVV" "temp"
    unknown result[60141] "insert auto destroy"
    unknown call_tmp[561364] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (561367 'move' call_tmp[561364](60140 'typeof' a[60134]))
    (489472 'default init var' result[60141] call_tmp[561364])
    {
      unknown d[60165] "insert auto destroy"
      (489474 'init var' d[60165] 0)
      unknown tmp[60166] "maybe param" "temp"
      unknown call_tmp[561371] "expr temp" "maybe param" "maybe type" "temp"
      (561374 'move' call_tmp[561371](60147 call size _mt[232] a[60134]))
      (60178 'move' tmp[60166](60176 call chpl_compute_low_param_loop_bound 1 call_tmp[561371]))
      unknown tmp[60167] "maybe param" "temp"
      unknown call_tmp[561378] "expr temp" "maybe param" "maybe type" "temp"
      (561381 'move' call_tmp[561378](60183 call size _mt[232] a[60134]))
      (60188 'move' tmp[60167](60186 call chpl_compute_high_param_loop_bound 1 call_tmp[561378]))
      unknown tmp[60168] "maybe param" "temp"
      (60191 'move' tmp[60168] 1)
      ParamForLoop
      { d[60165] tmp[60166] tmp[60167] tmp[60168]
        unknown call_tmp[561383] "expr temp" "maybe param" "maybe type" "temp"
        (561386 'move' call_tmp[561383](60155 call result[60141] d[60165]))
        unknown call_tmp[561388] "expr temp" "maybe param" "maybe type" "temp"
        (561391 'move' call_tmp[561388](60159 call a[60134] d[60165]))
        unknown call_tmp[561393] "expr temp" "maybe param" "maybe type" "temp"
        (561396 'move' call_tmp[561393](60160 call - call_tmp[561388]))
        (60162 call = call_tmp[561383] call_tmp[561393])
      }
      label _unused_continueLabel[60170]
      label _breakLabel[60169]
    }
    (459514 'move' ret[459509](459513 'deref' result[60141]))
    (459511 return ret[459509])
  }
  function ~[60213](arg a[60210]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459518] "RVV" "temp"
    unknown result[60217] "insert auto destroy"
    unknown call_tmp[561398] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (561401 'move' call_tmp[561398](60216 'typeof' a[60210]))
    (489476 'default init var' result[60217] call_tmp[561398])
    {
      unknown d[60241] "insert auto destroy"
      (489478 'init var' d[60241] 0)
      unknown tmp[60242] "maybe param" "temp"
      unknown call_tmp[561405] "expr temp" "maybe param" "maybe type" "temp"
      (561408 'move' call_tmp[561405](60223 call size _mt[232] a[60210]))
      (60254 'move' tmp[60242](60252 call chpl_compute_low_param_loop_bound 1 call_tmp[561405]))
      unknown tmp[60243] "maybe param" "temp"
      unknown call_tmp[561412] "expr temp" "maybe param" "maybe type" "temp"
      (561415 'move' call_tmp[561412](60259 call size _mt[232] a[60210]))
      (60264 'move' tmp[60243](60262 call chpl_compute_high_param_loop_bound 1 call_tmp[561412]))
      unknown tmp[60244] "maybe param" "temp"
      (60267 'move' tmp[60244] 1)
      ParamForLoop
      { d[60241] tmp[60242] tmp[60243] tmp[60244]
        unknown call_tmp[561417] "expr temp" "maybe param" "maybe type" "temp"
        (561420 'move' call_tmp[561417](60231 call result[60217] d[60241]))
        unknown call_tmp[561422] "expr temp" "maybe param" "maybe type" "temp"
        (561425 'move' call_tmp[561422](60235 call a[60210] d[60241]))
        unknown call_tmp[561427] "expr temp" "maybe param" "maybe type" "temp"
        (561430 'move' call_tmp[561427](60236 call ~ call_tmp[561422]))
        (60238 call = call_tmp[561417] call_tmp[561427])
      }
      label _unused_continueLabel[60246]
      label _breakLabel[60245]
    }
    (459523 'move' ret[459518](459522 'deref' result[60217]))
    (459520 return ret[459518])
  }
  function ![60289](arg a[60286]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459527] "RVV" "temp"
    unknown result[60293] "insert auto destroy"
    unknown call_tmp[561432] "expr temp" "maybe param" "maybe type" "temp" "type variable"
    (561435 'move' call_tmp[561432](60292 'typeof' a[60286]))
    (489480 'default init var' result[60293] call_tmp[561432])
    {
      unknown d[60317] "insert auto destroy"
      (489482 'init var' d[60317] 0)
      unknown tmp[60318] "maybe param" "temp"
      unknown call_tmp[561439] "expr temp" "maybe param" "maybe type" "temp"
      (561442 'move' call_tmp[561439](60299 call size _mt[232] a[60286]))
      (60330 'move' tmp[60318](60328 call chpl_compute_low_param_loop_bound 1 call_tmp[561439]))
      unknown tmp[60319] "maybe param" "temp"
      unknown call_tmp[561446] "expr temp" "maybe param" "maybe type" "temp"
      (561449 'move' call_tmp[561446](60335 call size _mt[232] a[60286]))
      (60340 'move' tmp[60319](60338 call chpl_compute_high_param_loop_bound 1 call_tmp[561446]))
      unknown tmp[60320] "maybe param" "temp"
      (60343 'move' tmp[60320] 1)
      ParamForLoop
      { d[60317] tmp[60318] tmp[60319] tmp[60320]
        unknown call_tmp[561451] "expr temp" "maybe param" "maybe type" "temp"
        (561454 'move' call_tmp[561451](60307 call result[60293] d[60317]))
        unknown call_tmp[561456] "expr temp" "maybe param" "maybe type" "temp"
        (561459 'move' call_tmp[561456](60311 call a[60286] d[60317]))
        unknown call_tmp[561461] "expr temp" "maybe param" "maybe type" "temp"
        (561464 'move' call_tmp[561461](60312 call ! call_tmp[561456]))
        (60314 call = call_tmp[561451] call_tmp[561461])
      }
      label _unused_continueLabel[60322]
      label _breakLabel[60321]
    }
    (459532 'move' ret[459527](459531 'deref' result[60293]))
    (459529 return ret[459527])
  }
  function max[60363](arg t[60361]:_any[170](?)) : _unknown[43]
  {
    unknown ret[459536] "RVV" "temp"
    unknown result[60371] "insert auto destroy"
    (489484 'default init var' result[60371] t[60361])
    {
      unknown i[60397] "insert auto destroy"
      (489486 'init var' i[60397] 0)
      unknown tmp[60398] "maybe param" "temp"
      unknown call_tmp[561468] "expr temp" "maybe param" "maybe type" "temp"
      (561471 'move' call_tmp[561468](60377 call size _mt[232] result[60371]))
      (60410 'move' tmp[60398](60408 call chpl_compute_low_param_loop_bound 1 call_tmp[561468]))
      unknown tmp[60399] "maybe param" "temp"
      unknown call_tmp[561475] "expr temp" "maybe param" "maybe type" "temp"
      (561478 'move' call_tmp[561475](60415 call size _mt[232] result[60371]))
      (60420 'move' tmp[60399](60418 call chpl_compute_high_param_loop_bound 1 call_tmp[561475]))
      unknown tmp[60400] "maybe param" "temp"
      (60423 'move' tmp[60400] 1)
      ParamForLoop
      { i[60397] tmp[60398] tmp[60399] tmp[60400]
        {
          unknown call_tmp[561480] "expr temp" "maybe param" "maybe type" "temp"
          (561483 'move' call_tmp[561480](60385 call result[60371] i[60397]))
          unknown call_tmp[561485] "expr temp" "maybe param" "maybe type" "temp"
          (561488 'move' call_tmp[561485](60390 call t[60361] i[60397]))
          unknown call_tmp[561490] "expr temp" "maybe param" "maybe type" "temp"
          (561493 'move' call_tmp[561490](60392 call max call_tmp[561485]))
          (60393 call = call_tmp[561480] call_tmp[561490])
        }
      }
      label _unused_continueLabel[60402]
      label _breakLabel[60401]
    }
    (459542 'move' ret[459536](459541 'coerce' result[60371] t[60361]))
    (459538 return ret[459536])
  }
  where {
    (60369 call isTupleType t[60361])
  }
  { scopeless type
    t[60361]
  }
  function min[60445](arg t[60443]:_any[170](?)) : _unknown[43]
  {
    unknown ret[459546] "RVV" "temp"
    unknown result[60453] "insert auto destroy"
    (489488 'default init var' result[60453] t[60443])
    {
      unknown i[60479] "insert auto destroy"
      (489490 'init var' i[60479] 0)
      unknown tmp[60480] "maybe param" "temp"
      unknown call_tmp[561497] "expr temp" "maybe param" "maybe type" "temp"
      (561500 'move' call_tmp[561497](60459 call size _mt[232] result[60453]))
      (60492 'move' tmp[60480](60490 call chpl_compute_low_param_loop_bound 1 call_tmp[561497]))
      unknown tmp[60481] "maybe param" "temp"
      unknown call_tmp[561504] "expr temp" "maybe param" "maybe type" "temp"
      (561507 'move' call_tmp[561504](60497 call size _mt[232] result[60453]))
      (60502 'move' tmp[60481](60500 call chpl_compute_high_param_loop_bound 1 call_tmp[561504]))
      unknown tmp[60482] "maybe param" "temp"
      (60505 'move' tmp[60482] 1)
      ParamForLoop
      { i[60479] tmp[60480] tmp[60481] tmp[60482]
        {
          unknown call_tmp[561509] "expr temp" "maybe param" "maybe type" "temp"
          (561512 'move' call_tmp[561509](60467 call result[60453] i[60479]))
          unknown call_tmp[561514] "expr temp" "maybe param" "maybe type" "temp"
          (561517 'move' call_tmp[561514](60472 call t[60443] i[60479]))
          unknown call_tmp[561519] "expr temp" "maybe param" "maybe type" "temp"
          (561522 'move' call_tmp[561519](60474 call min call_tmp[561514]))
          (60475 call = call_tmp[561509] call_tmp[561519])
        }
      }
      label _unused_continueLabel[60484]
      label _breakLabel[60483]
    }
    (459552 'move' ret[459546](459551 'coerce' result[60453] t[60443]))
    (459548 return ret[459546])
  }
  where {
    (60451 call isTupleType t[60443])
  }
  { scopeless type
    t[60443]
  }
  function chpl_TwoHomogTuples[60527](arg t1[60525]:_any[170](?), arg t2[60529]:_any[170](?)) param : _unknown[43]
  {
    unknown ret[459556] "RVV" "param" "temp"
    unknown tmp[394419] "maybe param" "temp"
    (394430 'move' tmp[394419](60534 call isHomogeneousTuple t1[60525]))
    unknown call_tmp[561524] "expr temp" "maybe param" "maybe type" "temp"
    (561527 'move' call_tmp[561524](394432 call _cond_invalid tmp[394419]))
    if call_tmp[561524]
    {
      (394435 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503950] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503951] "maybe param" "temp"
    unknown call_tmp[561529] "expr temp" "maybe param" "maybe type" "temp"
    (561532 'move' call_tmp[561529](394420 call isTrue tmp[394419]))
    (503956 'move' tmp[503951](503954 call _cond_test call_tmp[561529]))
    if tmp[503951]
    {
      unknown tmp[503958] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[561534] "expr temp" "maybe param" "maybe type" "temp"
      (561537 'move' call_tmp[561534](60538 call isHomogeneousTuple t2[60529]))
      (503960 'move' tmp[503958](394423 call isTrue call_tmp[561534]))
      (503965 'move' tmp[503950](503962 '_paramFoldLogical' tmp[503951] tmp[503958]))
    }
    {
      (503970 'move' tmp[503950](503967 '_paramFoldLogical' tmp[503951] 0))
    }
    (459561 'move' ret[459556](459560 'deref' tmp[503950]))
    (459558 return ret[459556])
  }
  function +[60552](arg a[60549]:_tuple[58502](?), arg b[60555]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459565] "RVV" "temp"
    unknown call_tmp[561541] "expr temp" "maybe param" "maybe type" "temp"
    (561544 'move' call_tmp[561541](60564 call size _mt[232] a[60549]))
    unknown call_tmp[561548] "expr temp" "maybe param" "maybe type" "temp"
    (561551 'move' call_tmp[561548](60568 call size _mt[232] b[60555]))
    unknown call_tmp[561553] "expr temp" "maybe param" "maybe type" "temp"
    (561556 'move' call_tmp[561553](60571 call != call_tmp[561541] call_tmp[561548]))
    unknown call_tmp[561558] "expr temp" "maybe param" "maybe type" "temp"
    (561561 'move' call_tmp[561558](60593 call _cond_test call_tmp[561553]))
    if call_tmp[561558]
    {
      (60591 call compilerError "tuple operands to + have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442861] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[561563] "expr temp" "maybe param" "maybe type" "temp"
      (561566 'move' call_tmp[561563](60606 call a[60549] 1))
      unknown call_tmp[561568] "expr temp" "maybe param" "maybe type" "temp"
      (561571 'move' call_tmp[561568](60610 call b[60555] 1))
      unknown call_tmp[561573] "expr temp" "maybe param" "maybe type" "temp"
      (561576 'move' call_tmp[561573](60611 call + call_tmp[561563] call_tmp[561568]))
      (442865 'move' call_type_tmp[442861](60613 'typeof' call_tmp[561573]))
    }
    unknown result[60616] "insert auto destroy"
    unknown call_tmp[561580] "expr temp" "maybe param" "maybe type" "temp"
    (561583 'move' call_tmp[561580](60600 call size _mt[232] a[60549]))
    unknown call_tmp[561585] "expr temp" "maybe param" "maybe type" "temp"
    (561588 'move' call_tmp[561585](60614 call * call_tmp[561580] call_type_tmp[442861]))
    (489492 'default init var' result[60616] call_tmp[561585])
    {
      unknown d[60643] "insert auto destroy"
      (489494 'init var' d[60643] 0)
      unknown tmp[60644] "maybe param" "temp"
      unknown call_tmp[561592] "expr temp" "maybe param" "maybe type" "temp"
      (561595 'move' call_tmp[561592](60621 call size _mt[232] a[60549]))
      (60656 'move' tmp[60644](60654 call chpl_compute_low_param_loop_bound 1 call_tmp[561592]))
      unknown tmp[60645] "maybe param" "temp"
      unknown call_tmp[561599] "expr temp" "maybe param" "maybe type" "temp"
      (561602 'move' call_tmp[561599](60661 call size _mt[232] a[60549]))
      (60666 'move' tmp[60645](60664 call chpl_compute_high_param_loop_bound 1 call_tmp[561599]))
      unknown tmp[60646] "maybe param" "temp"
      (60669 'move' tmp[60646] 1)
      ParamForLoop
      { d[60643] tmp[60644] tmp[60645] tmp[60646]
        unknown call_tmp[561604] "expr temp" "maybe param" "maybe type" "temp"
        (561607 'move' call_tmp[561604](60629 call result[60616] d[60643]))
        unknown call_tmp[561609] "expr temp" "maybe param" "maybe type" "temp"
        (561612 'move' call_tmp[561609](60633 call a[60549] d[60643]))
        unknown call_tmp[561614] "expr temp" "maybe param" "maybe type" "temp"
        (561617 'move' call_tmp[561614](60637 call b[60555] d[60643]))
        unknown call_tmp[561619] "expr temp" "maybe param" "maybe type" "temp"
        (561622 'move' call_tmp[561619](60638 call + call_tmp[561609] call_tmp[561614]))
        (60640 call = call_tmp[561604] call_tmp[561619])
      }
      label _unused_continueLabel[60648]
      label _breakLabel[60647]
    }
    (459570 'move' ret[459565](459569 'deref' result[60616]))
    (459567 return ret[459565])
  }
  where {
    (60562 call chpl_TwoHomogTuples a[60549] b[60555])
  }
  function +[60692](arg a[60689]:_tuple[58502](?), arg b[60695]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459574] "RVV" "temp"
    unknown call_tmp[561626] "expr temp" "maybe param" "maybe type" "temp"
    (561629 'move' call_tmp[561626](60699 call size _mt[232] a[60689]))
    unknown call_tmp[561633] "expr temp" "maybe param" "maybe type" "temp"
    (561636 'move' call_tmp[561633](60703 call size _mt[232] b[60695]))
    unknown call_tmp[561638] "expr temp" "maybe param" "maybe type" "temp"
    (561641 'move' call_tmp[561638](60706 call != call_tmp[561626] call_tmp[561633]))
    unknown call_tmp[561643] "expr temp" "maybe param" "maybe type" "temp"
    (561646 'move' call_tmp[561643](60713 call _cond_test call_tmp[561638]))
    if call_tmp[561643]
    {
      (60711 call compilerError "tuple operands to + have different sizes")
    }
    unknown call_tmp[561650] "expr temp" "maybe param" "maybe type" "temp"
    (561653 'move' call_tmp[561650](60720 call size _mt[232] a[60689]))
    unknown call_tmp[561655] "expr temp" "maybe param" "maybe type" "temp"
    (561658 'move' call_tmp[561655](60724 call == call_tmp[561650] 1))
    unknown call_tmp[561660] "expr temp" "maybe param" "maybe type" "temp"
    (561663 'move' call_tmp[561660](60766 call _cond_test call_tmp[561655]))
    if call_tmp[561660]
    {
      unknown call_tmp[561665] "expr temp" "maybe param" "maybe type" "temp"
      (561668 'move' call_tmp[561665](60729 call a[60689] 1))
      unknown call_tmp[561670] "expr temp" "maybe param" "maybe type" "temp"
      (561673 'move' call_tmp[561670](60733 call b[60695] 1))
      unknown call_tmp[561675] "expr temp" "maybe param" "maybe type" "temp"
      (561678 'move' call_tmp[561675](60734 call + call_tmp[561665] call_tmp[561670]))
      unknown call_tmp[561680] "expr temp" "maybe param" "maybe type" "temp"
      (561683 'move' call_tmp[561680](60736 call _build_tuple call_tmp[561675]))
      (459579 'move' ret[459574](459578 'deref' call_tmp[561680]))
      gotoReturn _end_+[459572] _end_+[459572]
    }
    {
      unknown call_tmp[561685] "expr temp" "maybe param" "maybe type" "temp"
      (561688 'move' call_tmp[561685](60743 call a[60689] 1))
      unknown call_tmp[561690] "expr temp" "maybe param" "maybe type" "temp"
      (561693 'move' call_tmp[561690](60747 call b[60695] 1))
      unknown call_tmp[561695] "expr temp" "maybe param" "maybe type" "temp"
      (561698 'move' call_tmp[561695](60748 call + call_tmp[561685] call_tmp[561690]))
      unknown call_tmp[561700] "expr temp" "maybe param" "maybe type" "temp"
      (561703 'move' call_tmp[561700](60753 call chpl__tupleRest a[60689]))
      unknown call_tmp[561705] "expr temp" "maybe param" "maybe type" "temp"
      (561708 'move' call_tmp[561705](60757 call chpl__tupleRest b[60695]))
      unknown call_tmp[561710] "expr temp" "maybe param" "maybe type" "temp"
      (561713 'move' call_tmp[561710](60758 call + call_tmp[561700] call_tmp[561705]))
      unknown call_tmp[561715] "expr temp" "maybe param" "maybe type" "temp"
      (561718 'move' call_tmp[561715](60762 call _build_tuple call_tmp[561695](60760 'expand_tuple' call_tmp[561710])))
      (459584 'move' ret[459574](459583 'deref' call_tmp[561715]))
      gotoReturn _end_+[459572] _end_+[459572]
    }
    label _end_+[459572]
    (459576 return ret[459574])
  }
  function -[60780](arg a[60777]:_tuple[58502](?), arg b[60783]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459590] "RVV" "temp"
    unknown call_tmp[561722] "expr temp" "maybe param" "maybe type" "temp"
    (561725 'move' call_tmp[561722](60792 call size _mt[232] a[60777]))
    unknown call_tmp[561729] "expr temp" "maybe param" "maybe type" "temp"
    (561732 'move' call_tmp[561729](60796 call size _mt[232] b[60783]))
    unknown call_tmp[561734] "expr temp" "maybe param" "maybe type" "temp"
    (561737 'move' call_tmp[561734](60799 call != call_tmp[561722] call_tmp[561729]))
    unknown call_tmp[561739] "expr temp" "maybe param" "maybe type" "temp"
    (561742 'move' call_tmp[561739](60821 call _cond_test call_tmp[561734]))
    if call_tmp[561739]
    {
      (60819 call compilerError "tuple operands to - have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442867] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[561744] "expr temp" "maybe param" "maybe type" "temp"
      (561747 'move' call_tmp[561744](60834 call a[60777] 1))
      unknown call_tmp[561749] "expr temp" "maybe param" "maybe type" "temp"
      (561752 'move' call_tmp[561749](60838 call b[60783] 1))
      unknown call_tmp[561754] "expr temp" "maybe param" "maybe type" "temp"
      (561757 'move' call_tmp[561754](60839 call - call_tmp[561744] call_tmp[561749]))
      (442871 'move' call_type_tmp[442867](60841 'typeof' call_tmp[561754]))
    }
    unknown result[60844] "insert auto destroy"
    unknown call_tmp[561761] "expr temp" "maybe param" "maybe type" "temp"
    (561764 'move' call_tmp[561761](60828 call size _mt[232] a[60777]))
    unknown call_tmp[561766] "expr temp" "maybe param" "maybe type" "temp"
    (561769 'move' call_tmp[561766](60842 call * call_tmp[561761] call_type_tmp[442867]))
    (489496 'default init var' result[60844] call_tmp[561766])
    {
      unknown d[60871] "insert auto destroy"
      (489498 'init var' d[60871] 0)
      unknown tmp[60872] "maybe param" "temp"
      unknown call_tmp[561773] "expr temp" "maybe param" "maybe type" "temp"
      (561776 'move' call_tmp[561773](60849 call size _mt[232] a[60777]))
      (60884 'move' tmp[60872](60882 call chpl_compute_low_param_loop_bound 1 call_tmp[561773]))
      unknown tmp[60873] "maybe param" "temp"
      unknown call_tmp[561780] "expr temp" "maybe param" "maybe type" "temp"
      (561783 'move' call_tmp[561780](60889 call size _mt[232] a[60777]))
      (60894 'move' tmp[60873](60892 call chpl_compute_high_param_loop_bound 1 call_tmp[561780]))
      unknown tmp[60874] "maybe param" "temp"
      (60897 'move' tmp[60874] 1)
      ParamForLoop
      { d[60871] tmp[60872] tmp[60873] tmp[60874]
        unknown call_tmp[561785] "expr temp" "maybe param" "maybe type" "temp"
        (561788 'move' call_tmp[561785](60857 call result[60844] d[60871]))
        unknown call_tmp[561790] "expr temp" "maybe param" "maybe type" "temp"
        (561793 'move' call_tmp[561790](60861 call a[60777] d[60871]))
        unknown call_tmp[561795] "expr temp" "maybe param" "maybe type" "temp"
        (561798 'move' call_tmp[561795](60865 call b[60783] d[60871]))
        unknown call_tmp[561800] "expr temp" "maybe param" "maybe type" "temp"
        (561803 'move' call_tmp[561800](60866 call - call_tmp[561790] call_tmp[561795]))
        (60868 call = call_tmp[561785] call_tmp[561800])
      }
      label _unused_continueLabel[60876]
      label _breakLabel[60875]
    }
    (459595 'move' ret[459590](459594 'deref' result[60844]))
    (459592 return ret[459590])
  }
  where {
    (60790 call chpl_TwoHomogTuples a[60777] b[60783])
  }
  function -[60920](arg a[60917]:_tuple[58502](?), arg b[60923]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459599] "RVV" "temp"
    unknown call_tmp[561807] "expr temp" "maybe param" "maybe type" "temp"
    (561810 'move' call_tmp[561807](60927 call size _mt[232] a[60917]))
    unknown call_tmp[561814] "expr temp" "maybe param" "maybe type" "temp"
    (561817 'move' call_tmp[561814](60931 call size _mt[232] b[60923]))
    unknown call_tmp[561819] "expr temp" "maybe param" "maybe type" "temp"
    (561822 'move' call_tmp[561819](60934 call != call_tmp[561807] call_tmp[561814]))
    unknown call_tmp[561824] "expr temp" "maybe param" "maybe type" "temp"
    (561827 'move' call_tmp[561824](60941 call _cond_test call_tmp[561819]))
    if call_tmp[561824]
    {
      (60939 call compilerError "tuple operands to - have different sizes")
    }
    unknown call_tmp[561831] "expr temp" "maybe param" "maybe type" "temp"
    (561834 'move' call_tmp[561831](60948 call size _mt[232] a[60917]))
    unknown call_tmp[561836] "expr temp" "maybe param" "maybe type" "temp"
    (561839 'move' call_tmp[561836](60952 call == call_tmp[561831] 1))
    unknown call_tmp[561841] "expr temp" "maybe param" "maybe type" "temp"
    (561844 'move' call_tmp[561841](60994 call _cond_test call_tmp[561836]))
    if call_tmp[561841]
    {
      unknown call_tmp[561846] "expr temp" "maybe param" "maybe type" "temp"
      (561849 'move' call_tmp[561846](60957 call a[60917] 1))
      unknown call_tmp[561851] "expr temp" "maybe param" "maybe type" "temp"
      (561854 'move' call_tmp[561851](60961 call b[60923] 1))
      unknown call_tmp[561856] "expr temp" "maybe param" "maybe type" "temp"
      (561859 'move' call_tmp[561856](60962 call - call_tmp[561846] call_tmp[561851]))
      unknown call_tmp[561861] "expr temp" "maybe param" "maybe type" "temp"
      (561864 'move' call_tmp[561861](60964 call _build_tuple call_tmp[561856]))
      (459604 'move' ret[459599](459603 'deref' call_tmp[561861]))
      gotoReturn _end_-[459597] _end_-[459597]
    }
    {
      unknown call_tmp[561866] "expr temp" "maybe param" "maybe type" "temp"
      (561869 'move' call_tmp[561866](60971 call a[60917] 1))
      unknown call_tmp[561871] "expr temp" "maybe param" "maybe type" "temp"
      (561874 'move' call_tmp[561871](60975 call b[60923] 1))
      unknown call_tmp[561876] "expr temp" "maybe param" "maybe type" "temp"
      (561879 'move' call_tmp[561876](60976 call - call_tmp[561866] call_tmp[561871]))
      unknown call_tmp[561881] "expr temp" "maybe param" "maybe type" "temp"
      (561884 'move' call_tmp[561881](60981 call chpl__tupleRest a[60917]))
      unknown call_tmp[561886] "expr temp" "maybe param" "maybe type" "temp"
      (561889 'move' call_tmp[561886](60985 call chpl__tupleRest b[60923]))
      unknown call_tmp[561891] "expr temp" "maybe param" "maybe type" "temp"
      (561894 'move' call_tmp[561891](60986 call - call_tmp[561881] call_tmp[561886]))
      unknown call_tmp[561896] "expr temp" "maybe param" "maybe type" "temp"
      (561899 'move' call_tmp[561896](60990 call _build_tuple call_tmp[561876](60988 'expand_tuple' call_tmp[561891])))
      (459609 'move' ret[459599](459608 'deref' call_tmp[561896]))
      gotoReturn _end_-[459597] _end_-[459597]
    }
    label _end_-[459597]
    (459601 return ret[459599])
  }
  function *[61008](arg a[61005]:_tuple[58502](?), arg b[61011]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459615] "RVV" "temp"
    unknown call_tmp[561903] "expr temp" "maybe param" "maybe type" "temp"
    (561906 'move' call_tmp[561903](61020 call size _mt[232] a[61005]))
    unknown call_tmp[561910] "expr temp" "maybe param" "maybe type" "temp"
    (561913 'move' call_tmp[561910](61024 call size _mt[232] b[61011]))
    unknown call_tmp[561915] "expr temp" "maybe param" "maybe type" "temp"
    (561918 'move' call_tmp[561915](61027 call != call_tmp[561903] call_tmp[561910]))
    unknown call_tmp[561920] "expr temp" "maybe param" "maybe type" "temp"
    (561923 'move' call_tmp[561920](61049 call _cond_test call_tmp[561915]))
    if call_tmp[561920]
    {
      (61047 call compilerError "tuple operands to * have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442873] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[561925] "expr temp" "maybe param" "maybe type" "temp"
      (561928 'move' call_tmp[561925](61062 call a[61005] 1))
      unknown call_tmp[561930] "expr temp" "maybe param" "maybe type" "temp"
      (561933 'move' call_tmp[561930](61066 call b[61011] 1))
      unknown call_tmp[561935] "expr temp" "maybe param" "maybe type" "temp"
      (561938 'move' call_tmp[561935](61067 call * call_tmp[561925] call_tmp[561930]))
      (442877 'move' call_type_tmp[442873](61069 'typeof' call_tmp[561935]))
    }
    unknown result[61072] "insert auto destroy"
    unknown call_tmp[561942] "expr temp" "maybe param" "maybe type" "temp"
    (561945 'move' call_tmp[561942](61056 call size _mt[232] a[61005]))
    unknown call_tmp[561947] "expr temp" "maybe param" "maybe type" "temp"
    (561950 'move' call_tmp[561947](61070 call * call_tmp[561942] call_type_tmp[442873]))
    (489500 'default init var' result[61072] call_tmp[561947])
    {
      unknown d[61099] "insert auto destroy"
      (489502 'init var' d[61099] 0)
      unknown tmp[61100] "maybe param" "temp"
      unknown call_tmp[561954] "expr temp" "maybe param" "maybe type" "temp"
      (561957 'move' call_tmp[561954](61077 call size _mt[232] a[61005]))
      (61112 'move' tmp[61100](61110 call chpl_compute_low_param_loop_bound 1 call_tmp[561954]))
      unknown tmp[61101] "maybe param" "temp"
      unknown call_tmp[561961] "expr temp" "maybe param" "maybe type" "temp"
      (561964 'move' call_tmp[561961](61117 call size _mt[232] a[61005]))
      (61122 'move' tmp[61101](61120 call chpl_compute_high_param_loop_bound 1 call_tmp[561961]))
      unknown tmp[61102] "maybe param" "temp"
      (61125 'move' tmp[61102] 1)
      ParamForLoop
      { d[61099] tmp[61100] tmp[61101] tmp[61102]
        unknown call_tmp[561966] "expr temp" "maybe param" "maybe type" "temp"
        (561969 'move' call_tmp[561966](61085 call result[61072] d[61099]))
        unknown call_tmp[561971] "expr temp" "maybe param" "maybe type" "temp"
        (561974 'move' call_tmp[561971](61089 call a[61005] d[61099]))
        unknown call_tmp[561976] "expr temp" "maybe param" "maybe type" "temp"
        (561979 'move' call_tmp[561976](61093 call b[61011] d[61099]))
        unknown call_tmp[561981] "expr temp" "maybe param" "maybe type" "temp"
        (561984 'move' call_tmp[561981](61094 call * call_tmp[561971] call_tmp[561976]))
        (61096 call = call_tmp[561966] call_tmp[561981])
      }
      label _unused_continueLabel[61104]
      label _breakLabel[61103]
    }
    (459620 'move' ret[459615](459619 'deref' result[61072]))
    (459617 return ret[459615])
  }
  where {
    (61018 call chpl_TwoHomogTuples a[61005] b[61011])
  }
  function *[61148](arg a[61145]:_tuple[58502](?), arg b[61151]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459624] "RVV" "temp"
    unknown call_tmp[561988] "expr temp" "maybe param" "maybe type" "temp"
    (561991 'move' call_tmp[561988](61155 call size _mt[232] a[61145]))
    unknown call_tmp[561995] "expr temp" "maybe param" "maybe type" "temp"
    (561998 'move' call_tmp[561995](61159 call size _mt[232] b[61151]))
    unknown call_tmp[562000] "expr temp" "maybe param" "maybe type" "temp"
    (562003 'move' call_tmp[562000](61162 call != call_tmp[561988] call_tmp[561995]))
    unknown call_tmp[562005] "expr temp" "maybe param" "maybe type" "temp"
    (562008 'move' call_tmp[562005](61169 call _cond_test call_tmp[562000]))
    if call_tmp[562005]
    {
      (61167 call compilerError "tuple operands to * have different sizes")
    }
    unknown call_tmp[562012] "expr temp" "maybe param" "maybe type" "temp"
    (562015 'move' call_tmp[562012](61176 call size _mt[232] a[61145]))
    unknown call_tmp[562017] "expr temp" "maybe param" "maybe type" "temp"
    (562020 'move' call_tmp[562017](61180 call == call_tmp[562012] 1))
    unknown call_tmp[562022] "expr temp" "maybe param" "maybe type" "temp"
    (562025 'move' call_tmp[562022](61222 call _cond_test call_tmp[562017]))
    if call_tmp[562022]
    {
      unknown call_tmp[562027] "expr temp" "maybe param" "maybe type" "temp"
      (562030 'move' call_tmp[562027](61185 call a[61145] 1))
      unknown call_tmp[562032] "expr temp" "maybe param" "maybe type" "temp"
      (562035 'move' call_tmp[562032](61189 call b[61151] 1))
      unknown call_tmp[562037] "expr temp" "maybe param" "maybe type" "temp"
      (562040 'move' call_tmp[562037](61190 call * call_tmp[562027] call_tmp[562032]))
      unknown call_tmp[562042] "expr temp" "maybe param" "maybe type" "temp"
      (562045 'move' call_tmp[562042](61192 call _build_tuple call_tmp[562037]))
      (459629 'move' ret[459624](459628 'deref' call_tmp[562042]))
      gotoReturn _end_*[459622] _end_*[459622]
    }
    {
      unknown call_tmp[562047] "expr temp" "maybe param" "maybe type" "temp"
      (562050 'move' call_tmp[562047](61199 call a[61145] 1))
      unknown call_tmp[562052] "expr temp" "maybe param" "maybe type" "temp"
      (562055 'move' call_tmp[562052](61203 call b[61151] 1))
      unknown call_tmp[562057] "expr temp" "maybe param" "maybe type" "temp"
      (562060 'move' call_tmp[562057](61204 call * call_tmp[562047] call_tmp[562052]))
      unknown call_tmp[562062] "expr temp" "maybe param" "maybe type" "temp"
      (562065 'move' call_tmp[562062](61209 call chpl__tupleRest a[61145]))
      unknown call_tmp[562067] "expr temp" "maybe param" "maybe type" "temp"
      (562070 'move' call_tmp[562067](61213 call chpl__tupleRest b[61151]))
      unknown call_tmp[562072] "expr temp" "maybe param" "maybe type" "temp"
      (562075 'move' call_tmp[562072](61214 call * call_tmp[562062] call_tmp[562067]))
      unknown call_tmp[562077] "expr temp" "maybe param" "maybe type" "temp"
      (562080 'move' call_tmp[562077](61218 call _build_tuple call_tmp[562057](61216 'expand_tuple' call_tmp[562072])))
      (459634 'move' ret[459624](459633 'deref' call_tmp[562077]))
      gotoReturn _end_*[459622] _end_*[459622]
    }
    label _end_*[459622]
    (459626 return ret[459624])
  }
  function /[61236](arg a[61233]:_tuple[58502](?), arg b[61239]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459640] "RVV" "temp"
    unknown call_tmp[562084] "expr temp" "maybe param" "maybe type" "temp"
    (562087 'move' call_tmp[562084](61248 call size _mt[232] a[61233]))
    unknown call_tmp[562091] "expr temp" "maybe param" "maybe type" "temp"
    (562094 'move' call_tmp[562091](61252 call size _mt[232] b[61239]))
    unknown call_tmp[562096] "expr temp" "maybe param" "maybe type" "temp"
    (562099 'move' call_tmp[562096](61255 call != call_tmp[562084] call_tmp[562091]))
    unknown call_tmp[562101] "expr temp" "maybe param" "maybe type" "temp"
    (562104 'move' call_tmp[562101](61277 call _cond_test call_tmp[562096]))
    if call_tmp[562101]
    {
      (61275 call compilerError "tuple operands to / have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442879] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[562106] "expr temp" "maybe param" "maybe type" "temp"
      (562109 'move' call_tmp[562106](61290 call a[61233] 1))
      unknown call_tmp[562111] "expr temp" "maybe param" "maybe type" "temp"
      (562114 'move' call_tmp[562111](61294 call b[61239] 1))
      unknown call_tmp[562116] "expr temp" "maybe param" "maybe type" "temp"
      (562119 'move' call_tmp[562116](61295 call / call_tmp[562106] call_tmp[562111]))
      (442883 'move' call_type_tmp[442879](61297 'typeof' call_tmp[562116]))
    }
    unknown result[61300] "insert auto destroy"
    unknown call_tmp[562123] "expr temp" "maybe param" "maybe type" "temp"
    (562126 'move' call_tmp[562123](61284 call size _mt[232] a[61233]))
    unknown call_tmp[562128] "expr temp" "maybe param" "maybe type" "temp"
    (562131 'move' call_tmp[562128](61298 call * call_tmp[562123] call_type_tmp[442879]))
    (489504 'default init var' result[61300] call_tmp[562128])
    {
      unknown d[61327] "insert auto destroy"
      (489506 'init var' d[61327] 0)
      unknown tmp[61328] "maybe param" "temp"
      unknown call_tmp[562135] "expr temp" "maybe param" "maybe type" "temp"
      (562138 'move' call_tmp[562135](61305 call size _mt[232] a[61233]))
      (61340 'move' tmp[61328](61338 call chpl_compute_low_param_loop_bound 1 call_tmp[562135]))
      unknown tmp[61329] "maybe param" "temp"
      unknown call_tmp[562142] "expr temp" "maybe param" "maybe type" "temp"
      (562145 'move' call_tmp[562142](61345 call size _mt[232] a[61233]))
      (61350 'move' tmp[61329](61348 call chpl_compute_high_param_loop_bound 1 call_tmp[562142]))
      unknown tmp[61330] "maybe param" "temp"
      (61353 'move' tmp[61330] 1)
      ParamForLoop
      { d[61327] tmp[61328] tmp[61329] tmp[61330]
        unknown call_tmp[562147] "expr temp" "maybe param" "maybe type" "temp"
        (562150 'move' call_tmp[562147](61313 call result[61300] d[61327]))
        unknown call_tmp[562152] "expr temp" "maybe param" "maybe type" "temp"
        (562155 'move' call_tmp[562152](61317 call a[61233] d[61327]))
        unknown call_tmp[562157] "expr temp" "maybe param" "maybe type" "temp"
        (562160 'move' call_tmp[562157](61321 call b[61239] d[61327]))
        unknown call_tmp[562162] "expr temp" "maybe param" "maybe type" "temp"
        (562165 'move' call_tmp[562162](61322 call / call_tmp[562152] call_tmp[562157]))
        (61324 call = call_tmp[562147] call_tmp[562162])
      }
      label _unused_continueLabel[61332]
      label _breakLabel[61331]
    }
    (459645 'move' ret[459640](459644 'deref' result[61300]))
    (459642 return ret[459640])
  }
  where {
    (61246 call chpl_TwoHomogTuples a[61233] b[61239])
  }
  function /[61376](arg a[61373]:_tuple[58502](?), arg b[61379]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459649] "RVV" "temp"
    unknown call_tmp[562169] "expr temp" "maybe param" "maybe type" "temp"
    (562172 'move' call_tmp[562169](61383 call size _mt[232] a[61373]))
    unknown call_tmp[562176] "expr temp" "maybe param" "maybe type" "temp"
    (562179 'move' call_tmp[562176](61387 call size _mt[232] b[61379]))
    unknown call_tmp[562181] "expr temp" "maybe param" "maybe type" "temp"
    (562184 'move' call_tmp[562181](61390 call != call_tmp[562169] call_tmp[562176]))
    unknown call_tmp[562186] "expr temp" "maybe param" "maybe type" "temp"
    (562189 'move' call_tmp[562186](61397 call _cond_test call_tmp[562181]))
    if call_tmp[562186]
    {
      (61395 call compilerError "tuple operands to / have different sizes")
    }
    unknown call_tmp[562193] "expr temp" "maybe param" "maybe type" "temp"
    (562196 'move' call_tmp[562193](61404 call size _mt[232] a[61373]))
    unknown call_tmp[562198] "expr temp" "maybe param" "maybe type" "temp"
    (562201 'move' call_tmp[562198](61408 call == call_tmp[562193] 1))
    unknown call_tmp[562203] "expr temp" "maybe param" "maybe type" "temp"
    (562206 'move' call_tmp[562203](61450 call _cond_test call_tmp[562198]))
    if call_tmp[562203]
    {
      unknown call_tmp[562208] "expr temp" "maybe param" "maybe type" "temp"
      (562211 'move' call_tmp[562208](61413 call a[61373] 1))
      unknown call_tmp[562213] "expr temp" "maybe param" "maybe type" "temp"
      (562216 'move' call_tmp[562213](61417 call b[61379] 1))
      unknown call_tmp[562218] "expr temp" "maybe param" "maybe type" "temp"
      (562221 'move' call_tmp[562218](61418 call / call_tmp[562208] call_tmp[562213]))
      unknown call_tmp[562223] "expr temp" "maybe param" "maybe type" "temp"
      (562226 'move' call_tmp[562223](61420 call _build_tuple call_tmp[562218]))
      (459654 'move' ret[459649](459653 'deref' call_tmp[562223]))
      gotoReturn _end_/[459647] _end_/[459647]
    }
    {
      unknown call_tmp[562228] "expr temp" "maybe param" "maybe type" "temp"
      (562231 'move' call_tmp[562228](61427 call a[61373] 1))
      unknown call_tmp[562233] "expr temp" "maybe param" "maybe type" "temp"
      (562236 'move' call_tmp[562233](61431 call b[61379] 1))
      unknown call_tmp[562238] "expr temp" "maybe param" "maybe type" "temp"
      (562241 'move' call_tmp[562238](61432 call / call_tmp[562228] call_tmp[562233]))
      unknown call_tmp[562243] "expr temp" "maybe param" "maybe type" "temp"
      (562246 'move' call_tmp[562243](61437 call chpl__tupleRest a[61373]))
      unknown call_tmp[562248] "expr temp" "maybe param" "maybe type" "temp"
      (562251 'move' call_tmp[562248](61441 call chpl__tupleRest b[61379]))
      unknown call_tmp[562253] "expr temp" "maybe param" "maybe type" "temp"
      (562256 'move' call_tmp[562253](61442 call / call_tmp[562243] call_tmp[562248]))
      unknown call_tmp[562258] "expr temp" "maybe param" "maybe type" "temp"
      (562261 'move' call_tmp[562258](61446 call _build_tuple call_tmp[562238](61444 'expand_tuple' call_tmp[562253])))
      (459659 'move' ret[459649](459658 'deref' call_tmp[562258]))
      gotoReturn _end_/[459647] _end_/[459647]
    }
    label _end_/[459647]
    (459651 return ret[459649])
  }
  function %[61464](arg a[61461]:_tuple[58502](?), arg b[61467]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459665] "RVV" "temp"
    unknown call_tmp[562265] "expr temp" "maybe param" "maybe type" "temp"
    (562268 'move' call_tmp[562265](61476 call size _mt[232] a[61461]))
    unknown call_tmp[562272] "expr temp" "maybe param" "maybe type" "temp"
    (562275 'move' call_tmp[562272](61480 call size _mt[232] b[61467]))
    unknown call_tmp[562277] "expr temp" "maybe param" "maybe type" "temp"
    (562280 'move' call_tmp[562277](61483 call != call_tmp[562265] call_tmp[562272]))
    unknown call_tmp[562282] "expr temp" "maybe param" "maybe type" "temp"
    (562285 'move' call_tmp[562282](61505 call _cond_test call_tmp[562277]))
    if call_tmp[562282]
    {
      (61503 call compilerError "tuple operands to % have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442885] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[562287] "expr temp" "maybe param" "maybe type" "temp"
      (562290 'move' call_tmp[562287](61518 call a[61461] 1))
      unknown call_tmp[562292] "expr temp" "maybe param" "maybe type" "temp"
      (562295 'move' call_tmp[562292](61522 call b[61467] 1))
      unknown call_tmp[562297] "expr temp" "maybe param" "maybe type" "temp"
      (562300 'move' call_tmp[562297](61523 call % call_tmp[562287] call_tmp[562292]))
      (442889 'move' call_type_tmp[442885](61525 'typeof' call_tmp[562297]))
    }
    unknown result[61528] "insert auto destroy"
    unknown call_tmp[562304] "expr temp" "maybe param" "maybe type" "temp"
    (562307 'move' call_tmp[562304](61512 call size _mt[232] a[61461]))
    unknown call_tmp[562309] "expr temp" "maybe param" "maybe type" "temp"
    (562312 'move' call_tmp[562309](61526 call * call_tmp[562304] call_type_tmp[442885]))
    (489508 'default init var' result[61528] call_tmp[562309])
    {
      unknown d[61555] "insert auto destroy"
      (489510 'init var' d[61555] 0)
      unknown tmp[61556] "maybe param" "temp"
      unknown call_tmp[562316] "expr temp" "maybe param" "maybe type" "temp"
      (562319 'move' call_tmp[562316](61533 call size _mt[232] a[61461]))
      (61568 'move' tmp[61556](61566 call chpl_compute_low_param_loop_bound 1 call_tmp[562316]))
      unknown tmp[61557] "maybe param" "temp"
      unknown call_tmp[562323] "expr temp" "maybe param" "maybe type" "temp"
      (562326 'move' call_tmp[562323](61573 call size _mt[232] a[61461]))
      (61578 'move' tmp[61557](61576 call chpl_compute_high_param_loop_bound 1 call_tmp[562323]))
      unknown tmp[61558] "maybe param" "temp"
      (61581 'move' tmp[61558] 1)
      ParamForLoop
      { d[61555] tmp[61556] tmp[61557] tmp[61558]
        unknown call_tmp[562328] "expr temp" "maybe param" "maybe type" "temp"
        (562331 'move' call_tmp[562328](61541 call result[61528] d[61555]))
        unknown call_tmp[562333] "expr temp" "maybe param" "maybe type" "temp"
        (562336 'move' call_tmp[562333](61545 call a[61461] d[61555]))
        unknown call_tmp[562338] "expr temp" "maybe param" "maybe type" "temp"
        (562341 'move' call_tmp[562338](61549 call b[61467] d[61555]))
        unknown call_tmp[562343] "expr temp" "maybe param" "maybe type" "temp"
        (562346 'move' call_tmp[562343](61550 call % call_tmp[562333] call_tmp[562338]))
        (61552 call = call_tmp[562328] call_tmp[562343])
      }
      label _unused_continueLabel[61560]
      label _breakLabel[61559]
    }
    (459670 'move' ret[459665](459669 'deref' result[61528]))
    (459667 return ret[459665])
  }
  where {
    (61474 call chpl_TwoHomogTuples a[61461] b[61467])
  }
  function %[61604](arg a[61601]:_tuple[58502](?), arg b[61607]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459674] "RVV" "temp"
    unknown call_tmp[562350] "expr temp" "maybe param" "maybe type" "temp"
    (562353 'move' call_tmp[562350](61611 call size _mt[232] a[61601]))
    unknown call_tmp[562357] "expr temp" "maybe param" "maybe type" "temp"
    (562360 'move' call_tmp[562357](61615 call size _mt[232] b[61607]))
    unknown call_tmp[562362] "expr temp" "maybe param" "maybe type" "temp"
    (562365 'move' call_tmp[562362](61618 call != call_tmp[562350] call_tmp[562357]))
    unknown call_tmp[562367] "expr temp" "maybe param" "maybe type" "temp"
    (562370 'move' call_tmp[562367](61625 call _cond_test call_tmp[562362]))
    if call_tmp[562367]
    {
      (61623 call compilerError "tuple operands to % have different sizes")
    }
    unknown call_tmp[562374] "expr temp" "maybe param" "maybe type" "temp"
    (562377 'move' call_tmp[562374](61632 call size _mt[232] a[61601]))
    unknown call_tmp[562379] "expr temp" "maybe param" "maybe type" "temp"
    (562382 'move' call_tmp[562379](61636 call == call_tmp[562374] 1))
    unknown call_tmp[562384] "expr temp" "maybe param" "maybe type" "temp"
    (562387 'move' call_tmp[562384](61678 call _cond_test call_tmp[562379]))
    if call_tmp[562384]
    {
      unknown call_tmp[562389] "expr temp" "maybe param" "maybe type" "temp"
      (562392 'move' call_tmp[562389](61641 call a[61601] 1))
      unknown call_tmp[562394] "expr temp" "maybe param" "maybe type" "temp"
      (562397 'move' call_tmp[562394](61645 call b[61607] 1))
      unknown call_tmp[562399] "expr temp" "maybe param" "maybe type" "temp"
      (562402 'move' call_tmp[562399](61646 call % call_tmp[562389] call_tmp[562394]))
      unknown call_tmp[562404] "expr temp" "maybe param" "maybe type" "temp"
      (562407 'move' call_tmp[562404](61648 call _build_tuple call_tmp[562399]))
      (459679 'move' ret[459674](459678 'deref' call_tmp[562404]))
      gotoReturn _end_%[459672] _end_%[459672]
    }
    {
      unknown call_tmp[562409] "expr temp" "maybe param" "maybe type" "temp"
      (562412 'move' call_tmp[562409](61655 call a[61601] 1))
      unknown call_tmp[562414] "expr temp" "maybe param" "maybe type" "temp"
      (562417 'move' call_tmp[562414](61659 call b[61607] 1))
      unknown call_tmp[562419] "expr temp" "maybe param" "maybe type" "temp"
      (562422 'move' call_tmp[562419](61660 call % call_tmp[562409] call_tmp[562414]))
      unknown call_tmp[562424] "expr temp" "maybe param" "maybe type" "temp"
      (562427 'move' call_tmp[562424](61665 call chpl__tupleRest a[61601]))
      unknown call_tmp[562429] "expr temp" "maybe param" "maybe type" "temp"
      (562432 'move' call_tmp[562429](61669 call chpl__tupleRest b[61607]))
      unknown call_tmp[562434] "expr temp" "maybe param" "maybe type" "temp"
      (562437 'move' call_tmp[562434](61670 call % call_tmp[562424] call_tmp[562429]))
      unknown call_tmp[562439] "expr temp" "maybe param" "maybe type" "temp"
      (562442 'move' call_tmp[562439](61674 call _build_tuple call_tmp[562419](61672 'expand_tuple' call_tmp[562434])))
      (459684 'move' ret[459674](459683 'deref' call_tmp[562439]))
      gotoReturn _end_%[459672] _end_%[459672]
    }
    label _end_%[459672]
    (459676 return ret[459674])
  }
  function **[61692](arg a[61689]:_tuple[58502](?), arg b[61695]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459690] "RVV" "temp"
    unknown call_tmp[562446] "expr temp" "maybe param" "maybe type" "temp"
    (562449 'move' call_tmp[562446](61704 call size _mt[232] a[61689]))
    unknown call_tmp[562453] "expr temp" "maybe param" "maybe type" "temp"
    (562456 'move' call_tmp[562453](61708 call size _mt[232] b[61695]))
    unknown call_tmp[562458] "expr temp" "maybe param" "maybe type" "temp"
    (562461 'move' call_tmp[562458](61711 call != call_tmp[562446] call_tmp[562453]))
    unknown call_tmp[562463] "expr temp" "maybe param" "maybe type" "temp"
    (562466 'move' call_tmp[562463](61733 call _cond_test call_tmp[562458]))
    if call_tmp[562463]
    {
      (61731 call compilerError "tuple operands to ** have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442891] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[562468] "expr temp" "maybe param" "maybe type" "temp"
      (562471 'move' call_tmp[562468](61746 call a[61689] 1))
      unknown call_tmp[562473] "expr temp" "maybe param" "maybe type" "temp"
      (562476 'move' call_tmp[562473](61750 call b[61695] 1))
      unknown call_tmp[562478] "expr temp" "maybe param" "maybe type" "temp"
      (562481 'move' call_tmp[562478](61751 call ** call_tmp[562468] call_tmp[562473]))
      (442895 'move' call_type_tmp[442891](61753 'typeof' call_tmp[562478]))
    }
    unknown result[61756] "insert auto destroy"
    unknown call_tmp[562485] "expr temp" "maybe param" "maybe type" "temp"
    (562488 'move' call_tmp[562485](61740 call size _mt[232] a[61689]))
    unknown call_tmp[562490] "expr temp" "maybe param" "maybe type" "temp"
    (562493 'move' call_tmp[562490](61754 call * call_tmp[562485] call_type_tmp[442891]))
    (489512 'default init var' result[61756] call_tmp[562490])
    {
      unknown d[61783] "insert auto destroy"
      (489514 'init var' d[61783] 0)
      unknown tmp[61784] "maybe param" "temp"
      unknown call_tmp[562497] "expr temp" "maybe param" "maybe type" "temp"
      (562500 'move' call_tmp[562497](61761 call size _mt[232] a[61689]))
      (61796 'move' tmp[61784](61794 call chpl_compute_low_param_loop_bound 1 call_tmp[562497]))
      unknown tmp[61785] "maybe param" "temp"
      unknown call_tmp[562504] "expr temp" "maybe param" "maybe type" "temp"
      (562507 'move' call_tmp[562504](61801 call size _mt[232] a[61689]))
      (61806 'move' tmp[61785](61804 call chpl_compute_high_param_loop_bound 1 call_tmp[562504]))
      unknown tmp[61786] "maybe param" "temp"
      (61809 'move' tmp[61786] 1)
      ParamForLoop
      { d[61783] tmp[61784] tmp[61785] tmp[61786]
        unknown call_tmp[562509] "expr temp" "maybe param" "maybe type" "temp"
        (562512 'move' call_tmp[562509](61769 call result[61756] d[61783]))
        unknown call_tmp[562514] "expr temp" "maybe param" "maybe type" "temp"
        (562517 'move' call_tmp[562514](61773 call a[61689] d[61783]))
        unknown call_tmp[562519] "expr temp" "maybe param" "maybe type" "temp"
        (562522 'move' call_tmp[562519](61777 call b[61695] d[61783]))
        unknown call_tmp[562524] "expr temp" "maybe param" "maybe type" "temp"
        (562527 'move' call_tmp[562524](61778 call ** call_tmp[562514] call_tmp[562519]))
        (61780 call = call_tmp[562509] call_tmp[562524])
      }
      label _unused_continueLabel[61788]
      label _breakLabel[61787]
    }
    (459695 'move' ret[459690](459694 'deref' result[61756]))
    (459692 return ret[459690])
  }
  where {
    (61702 call chpl_TwoHomogTuples a[61689] b[61695])
  }
  function **[61832](arg a[61829]:_tuple[58502](?), arg b[61835]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459699] "RVV" "temp"
    unknown call_tmp[562531] "expr temp" "maybe param" "maybe type" "temp"
    (562534 'move' call_tmp[562531](61839 call size _mt[232] a[61829]))
    unknown call_tmp[562538] "expr temp" "maybe param" "maybe type" "temp"
    (562541 'move' call_tmp[562538](61843 call size _mt[232] b[61835]))
    unknown call_tmp[562543] "expr temp" "maybe param" "maybe type" "temp"
    (562546 'move' call_tmp[562543](61846 call != call_tmp[562531] call_tmp[562538]))
    unknown call_tmp[562548] "expr temp" "maybe param" "maybe type" "temp"
    (562551 'move' call_tmp[562548](61853 call _cond_test call_tmp[562543]))
    if call_tmp[562548]
    {
      (61851 call compilerError "tuple operands to ** have different sizes")
    }
    unknown call_tmp[562555] "expr temp" "maybe param" "maybe type" "temp"
    (562558 'move' call_tmp[562555](61860 call size _mt[232] a[61829]))
    unknown call_tmp[562560] "expr temp" "maybe param" "maybe type" "temp"
    (562563 'move' call_tmp[562560](61864 call == call_tmp[562555] 1))
    unknown call_tmp[562565] "expr temp" "maybe param" "maybe type" "temp"
    (562568 'move' call_tmp[562565](61906 call _cond_test call_tmp[562560]))
    if call_tmp[562565]
    {
      unknown call_tmp[562570] "expr temp" "maybe param" "maybe type" "temp"
      (562573 'move' call_tmp[562570](61869 call a[61829] 1))
      unknown call_tmp[562575] "expr temp" "maybe param" "maybe type" "temp"
      (562578 'move' call_tmp[562575](61873 call b[61835] 1))
      unknown call_tmp[562580] "expr temp" "maybe param" "maybe type" "temp"
      (562583 'move' call_tmp[562580](61874 call ** call_tmp[562570] call_tmp[562575]))
      unknown call_tmp[562585] "expr temp" "maybe param" "maybe type" "temp"
      (562588 'move' call_tmp[562585](61876 call _build_tuple call_tmp[562580]))
      (459704 'move' ret[459699](459703 'deref' call_tmp[562585]))
      gotoReturn _end_**[459697] _end_**[459697]
    }
    {
      unknown call_tmp[562590] "expr temp" "maybe param" "maybe type" "temp"
      (562593 'move' call_tmp[562590](61883 call a[61829] 1))
      unknown call_tmp[562595] "expr temp" "maybe param" "maybe type" "temp"
      (562598 'move' call_tmp[562595](61887 call b[61835] 1))
      unknown call_tmp[562600] "expr temp" "maybe param" "maybe type" "temp"
      (562603 'move' call_tmp[562600](61888 call ** call_tmp[562590] call_tmp[562595]))
      unknown call_tmp[562605] "expr temp" "maybe param" "maybe type" "temp"
      (562608 'move' call_tmp[562605](61893 call chpl__tupleRest a[61829]))
      unknown call_tmp[562610] "expr temp" "maybe param" "maybe type" "temp"
      (562613 'move' call_tmp[562610](61897 call chpl__tupleRest b[61835]))
      unknown call_tmp[562615] "expr temp" "maybe param" "maybe type" "temp"
      (562618 'move' call_tmp[562615](61898 call ** call_tmp[562605] call_tmp[562610]))
      unknown call_tmp[562620] "expr temp" "maybe param" "maybe type" "temp"
      (562623 'move' call_tmp[562620](61902 call _build_tuple call_tmp[562600](61900 'expand_tuple' call_tmp[562615])))
      (459709 'move' ret[459699](459708 'deref' call_tmp[562620]))
      gotoReturn _end_**[459697] _end_**[459697]
    }
    label _end_**[459697]
    (459701 return ret[459699])
  }
  function &[61920](arg a[61917]:_tuple[58502](?), arg b[61923]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459715] "RVV" "temp"
    unknown call_tmp[562627] "expr temp" "maybe param" "maybe type" "temp"
    (562630 'move' call_tmp[562627](61932 call size _mt[232] a[61917]))
    unknown call_tmp[562634] "expr temp" "maybe param" "maybe type" "temp"
    (562637 'move' call_tmp[562634](61936 call size _mt[232] b[61923]))
    unknown call_tmp[562639] "expr temp" "maybe param" "maybe type" "temp"
    (562642 'move' call_tmp[562639](61939 call != call_tmp[562627] call_tmp[562634]))
    unknown call_tmp[562644] "expr temp" "maybe param" "maybe type" "temp"
    (562647 'move' call_tmp[562644](61961 call _cond_test call_tmp[562639]))
    if call_tmp[562644]
    {
      (61959 call compilerError "tuple operands to & have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442897] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[562649] "expr temp" "maybe param" "maybe type" "temp"
      (562652 'move' call_tmp[562649](61974 call a[61917] 1))
      unknown call_tmp[562654] "expr temp" "maybe param" "maybe type" "temp"
      (562657 'move' call_tmp[562654](61978 call b[61923] 1))
      unknown call_tmp[562659] "expr temp" "maybe param" "maybe type" "temp"
      (562662 'move' call_tmp[562659](61979 call & call_tmp[562649] call_tmp[562654]))
      (442901 'move' call_type_tmp[442897](61981 'typeof' call_tmp[562659]))
    }
    unknown result[61984] "insert auto destroy"
    unknown call_tmp[562666] "expr temp" "maybe param" "maybe type" "temp"
    (562669 'move' call_tmp[562666](61968 call size _mt[232] a[61917]))
    unknown call_tmp[562671] "expr temp" "maybe param" "maybe type" "temp"
    (562674 'move' call_tmp[562671](61982 call * call_tmp[562666] call_type_tmp[442897]))
    (489516 'default init var' result[61984] call_tmp[562671])
    {
      unknown d[62011] "insert auto destroy"
      (489518 'init var' d[62011] 0)
      unknown tmp[62012] "maybe param" "temp"
      unknown call_tmp[562678] "expr temp" "maybe param" "maybe type" "temp"
      (562681 'move' call_tmp[562678](61989 call size _mt[232] a[61917]))
      (62024 'move' tmp[62012](62022 call chpl_compute_low_param_loop_bound 1 call_tmp[562678]))
      unknown tmp[62013] "maybe param" "temp"
      unknown call_tmp[562685] "expr temp" "maybe param" "maybe type" "temp"
      (562688 'move' call_tmp[562685](62029 call size _mt[232] a[61917]))
      (62034 'move' tmp[62013](62032 call chpl_compute_high_param_loop_bound 1 call_tmp[562685]))
      unknown tmp[62014] "maybe param" "temp"
      (62037 'move' tmp[62014] 1)
      ParamForLoop
      { d[62011] tmp[62012] tmp[62013] tmp[62014]
        unknown call_tmp[562690] "expr temp" "maybe param" "maybe type" "temp"
        (562693 'move' call_tmp[562690](61997 call result[61984] d[62011]))
        unknown call_tmp[562695] "expr temp" "maybe param" "maybe type" "temp"
        (562698 'move' call_tmp[562695](62001 call a[61917] d[62011]))
        unknown call_tmp[562700] "expr temp" "maybe param" "maybe type" "temp"
        (562703 'move' call_tmp[562700](62005 call b[61923] d[62011]))
        unknown call_tmp[562705] "expr temp" "maybe param" "maybe type" "temp"
        (562708 'move' call_tmp[562705](62006 call & call_tmp[562695] call_tmp[562700]))
        (62008 call = call_tmp[562690] call_tmp[562705])
      }
      label _unused_continueLabel[62016]
      label _breakLabel[62015]
    }
    (459720 'move' ret[459715](459719 'deref' result[61984]))
    (459717 return ret[459715])
  }
  where {
    (61930 call chpl_TwoHomogTuples a[61917] b[61923])
  }
  function &[62060](arg a[62057]:_tuple[58502](?), arg b[62063]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459724] "RVV" "temp"
    unknown call_tmp[562712] "expr temp" "maybe param" "maybe type" "temp"
    (562715 'move' call_tmp[562712](62067 call size _mt[232] a[62057]))
    unknown call_tmp[562719] "expr temp" "maybe param" "maybe type" "temp"
    (562722 'move' call_tmp[562719](62071 call size _mt[232] b[62063]))
    unknown call_tmp[562724] "expr temp" "maybe param" "maybe type" "temp"
    (562727 'move' call_tmp[562724](62074 call != call_tmp[562712] call_tmp[562719]))
    unknown call_tmp[562729] "expr temp" "maybe param" "maybe type" "temp"
    (562732 'move' call_tmp[562729](62081 call _cond_test call_tmp[562724]))
    if call_tmp[562729]
    {
      (62079 call compilerError "tuple operands to & have different sizes")
    }
    unknown call_tmp[562736] "expr temp" "maybe param" "maybe type" "temp"
    (562739 'move' call_tmp[562736](62088 call size _mt[232] a[62057]))
    unknown call_tmp[562741] "expr temp" "maybe param" "maybe type" "temp"
    (562744 'move' call_tmp[562741](62092 call == call_tmp[562736] 1))
    unknown call_tmp[562746] "expr temp" "maybe param" "maybe type" "temp"
    (562749 'move' call_tmp[562746](62134 call _cond_test call_tmp[562741]))
    if call_tmp[562746]
    {
      unknown call_tmp[562751] "expr temp" "maybe param" "maybe type" "temp"
      (562754 'move' call_tmp[562751](62097 call a[62057] 1))
      unknown call_tmp[562756] "expr temp" "maybe param" "maybe type" "temp"
      (562759 'move' call_tmp[562756](62101 call b[62063] 1))
      unknown call_tmp[562761] "expr temp" "maybe param" "maybe type" "temp"
      (562764 'move' call_tmp[562761](62102 call & call_tmp[562751] call_tmp[562756]))
      unknown call_tmp[562766] "expr temp" "maybe param" "maybe type" "temp"
      (562769 'move' call_tmp[562766](62104 call _build_tuple call_tmp[562761]))
      (459729 'move' ret[459724](459728 'deref' call_tmp[562766]))
      gotoReturn _end_&[459722] _end_&[459722]
    }
    {
      unknown call_tmp[562771] "expr temp" "maybe param" "maybe type" "temp"
      (562774 'move' call_tmp[562771](62111 call a[62057] 1))
      unknown call_tmp[562776] "expr temp" "maybe param" "maybe type" "temp"
      (562779 'move' call_tmp[562776](62115 call b[62063] 1))
      unknown call_tmp[562781] "expr temp" "maybe param" "maybe type" "temp"
      (562784 'move' call_tmp[562781](62116 call & call_tmp[562771] call_tmp[562776]))
      unknown call_tmp[562786] "expr temp" "maybe param" "maybe type" "temp"
      (562789 'move' call_tmp[562786](62121 call chpl__tupleRest a[62057]))
      unknown call_tmp[562791] "expr temp" "maybe param" "maybe type" "temp"
      (562794 'move' call_tmp[562791](62125 call chpl__tupleRest b[62063]))
      unknown call_tmp[562796] "expr temp" "maybe param" "maybe type" "temp"
      (562799 'move' call_tmp[562796](62126 call & call_tmp[562786] call_tmp[562791]))
      unknown call_tmp[562801] "expr temp" "maybe param" "maybe type" "temp"
      (562804 'move' call_tmp[562801](62130 call _build_tuple call_tmp[562781](62128 'expand_tuple' call_tmp[562796])))
      (459734 'move' ret[459724](459733 'deref' call_tmp[562801]))
      gotoReturn _end_&[459722] _end_&[459722]
    }
    label _end_&[459722]
    (459726 return ret[459724])
  }
  function |[62148](arg a[62145]:_tuple[58502](?), arg b[62151]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459740] "RVV" "temp"
    unknown call_tmp[562808] "expr temp" "maybe param" "maybe type" "temp"
    (562811 'move' call_tmp[562808](62160 call size _mt[232] a[62145]))
    unknown call_tmp[562815] "expr temp" "maybe param" "maybe type" "temp"
    (562818 'move' call_tmp[562815](62164 call size _mt[232] b[62151]))
    unknown call_tmp[562820] "expr temp" "maybe param" "maybe type" "temp"
    (562823 'move' call_tmp[562820](62167 call != call_tmp[562808] call_tmp[562815]))
    unknown call_tmp[562825] "expr temp" "maybe param" "maybe type" "temp"
    (562828 'move' call_tmp[562825](62189 call _cond_test call_tmp[562820]))
    if call_tmp[562825]
    {
      (62187 call compilerError "tuple operands to | have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442903] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[562830] "expr temp" "maybe param" "maybe type" "temp"
      (562833 'move' call_tmp[562830](62202 call a[62145] 1))
      unknown call_tmp[562835] "expr temp" "maybe param" "maybe type" "temp"
      (562838 'move' call_tmp[562835](62206 call b[62151] 1))
      unknown call_tmp[562840] "expr temp" "maybe param" "maybe type" "temp"
      (562843 'move' call_tmp[562840](62207 call | call_tmp[562830] call_tmp[562835]))
      (442907 'move' call_type_tmp[442903](62209 'typeof' call_tmp[562840]))
    }
    unknown result[62212] "insert auto destroy"
    unknown call_tmp[562847] "expr temp" "maybe param" "maybe type" "temp"
    (562850 'move' call_tmp[562847](62196 call size _mt[232] a[62145]))
    unknown call_tmp[562852] "expr temp" "maybe param" "maybe type" "temp"
    (562855 'move' call_tmp[562852](62210 call * call_tmp[562847] call_type_tmp[442903]))
    (489520 'default init var' result[62212] call_tmp[562852])
    {
      unknown d[62239] "insert auto destroy"
      (489522 'init var' d[62239] 0)
      unknown tmp[62240] "maybe param" "temp"
      unknown call_tmp[562859] "expr temp" "maybe param" "maybe type" "temp"
      (562862 'move' call_tmp[562859](62217 call size _mt[232] a[62145]))
      (62252 'move' tmp[62240](62250 call chpl_compute_low_param_loop_bound 1 call_tmp[562859]))
      unknown tmp[62241] "maybe param" "temp"
      unknown call_tmp[562866] "expr temp" "maybe param" "maybe type" "temp"
      (562869 'move' call_tmp[562866](62257 call size _mt[232] a[62145]))
      (62262 'move' tmp[62241](62260 call chpl_compute_high_param_loop_bound 1 call_tmp[562866]))
      unknown tmp[62242] "maybe param" "temp"
      (62265 'move' tmp[62242] 1)
      ParamForLoop
      { d[62239] tmp[62240] tmp[62241] tmp[62242]
        unknown call_tmp[562871] "expr temp" "maybe param" "maybe type" "temp"
        (562874 'move' call_tmp[562871](62225 call result[62212] d[62239]))
        unknown call_tmp[562876] "expr temp" "maybe param" "maybe type" "temp"
        (562879 'move' call_tmp[562876](62229 call a[62145] d[62239]))
        unknown call_tmp[562881] "expr temp" "maybe param" "maybe type" "temp"
        (562884 'move' call_tmp[562881](62233 call b[62151] d[62239]))
        unknown call_tmp[562886] "expr temp" "maybe param" "maybe type" "temp"
        (562889 'move' call_tmp[562886](62234 call | call_tmp[562876] call_tmp[562881]))
        (62236 call = call_tmp[562871] call_tmp[562886])
      }
      label _unused_continueLabel[62244]
      label _breakLabel[62243]
    }
    (459745 'move' ret[459740](459744 'deref' result[62212]))
    (459742 return ret[459740])
  }
  where {
    (62158 call chpl_TwoHomogTuples a[62145] b[62151])
  }
  function |[62288](arg a[62285]:_tuple[58502](?), arg b[62291]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459749] "RVV" "temp"
    unknown call_tmp[562893] "expr temp" "maybe param" "maybe type" "temp"
    (562896 'move' call_tmp[562893](62295 call size _mt[232] a[62285]))
    unknown call_tmp[562900] "expr temp" "maybe param" "maybe type" "temp"
    (562903 'move' call_tmp[562900](62299 call size _mt[232] b[62291]))
    unknown call_tmp[562905] "expr temp" "maybe param" "maybe type" "temp"
    (562908 'move' call_tmp[562905](62302 call != call_tmp[562893] call_tmp[562900]))
    unknown call_tmp[562910] "expr temp" "maybe param" "maybe type" "temp"
    (562913 'move' call_tmp[562910](62309 call _cond_test call_tmp[562905]))
    if call_tmp[562910]
    {
      (62307 call compilerError "tuple operands to | have different sizes")
    }
    unknown call_tmp[562917] "expr temp" "maybe param" "maybe type" "temp"
    (562920 'move' call_tmp[562917](62316 call size _mt[232] a[62285]))
    unknown call_tmp[562922] "expr temp" "maybe param" "maybe type" "temp"
    (562925 'move' call_tmp[562922](62320 call == call_tmp[562917] 1))
    unknown call_tmp[562927] "expr temp" "maybe param" "maybe type" "temp"
    (562930 'move' call_tmp[562927](62362 call _cond_test call_tmp[562922]))
    if call_tmp[562927]
    {
      unknown call_tmp[562932] "expr temp" "maybe param" "maybe type" "temp"
      (562935 'move' call_tmp[562932](62325 call a[62285] 1))
      unknown call_tmp[562937] "expr temp" "maybe param" "maybe type" "temp"
      (562940 'move' call_tmp[562937](62329 call b[62291] 1))
      unknown call_tmp[562942] "expr temp" "maybe param" "maybe type" "temp"
      (562945 'move' call_tmp[562942](62330 call | call_tmp[562932] call_tmp[562937]))
      unknown call_tmp[562947] "expr temp" "maybe param" "maybe type" "temp"
      (562950 'move' call_tmp[562947](62332 call _build_tuple call_tmp[562942]))
      (459754 'move' ret[459749](459753 'deref' call_tmp[562947]))
      gotoReturn _end_|[459747] _end_|[459747]
    }
    {
      unknown call_tmp[562952] "expr temp" "maybe param" "maybe type" "temp"
      (562955 'move' call_tmp[562952](62339 call a[62285] 1))
      unknown call_tmp[562957] "expr temp" "maybe param" "maybe type" "temp"
      (562960 'move' call_tmp[562957](62343 call b[62291] 1))
      unknown call_tmp[562962] "expr temp" "maybe param" "maybe type" "temp"
      (562965 'move' call_tmp[562962](62344 call | call_tmp[562952] call_tmp[562957]))
      unknown call_tmp[562967] "expr temp" "maybe param" "maybe type" "temp"
      (562970 'move' call_tmp[562967](62349 call chpl__tupleRest a[62285]))
      unknown call_tmp[562972] "expr temp" "maybe param" "maybe type" "temp"
      (562975 'move' call_tmp[562972](62353 call chpl__tupleRest b[62291]))
      unknown call_tmp[562977] "expr temp" "maybe param" "maybe type" "temp"
      (562980 'move' call_tmp[562977](62354 call | call_tmp[562967] call_tmp[562972]))
      unknown call_tmp[562982] "expr temp" "maybe param" "maybe type" "temp"
      (562985 'move' call_tmp[562982](62358 call _build_tuple call_tmp[562962](62356 'expand_tuple' call_tmp[562977])))
      (459759 'move' ret[459749](459758 'deref' call_tmp[562982]))
      gotoReturn _end_|[459747] _end_|[459747]
    }
    label _end_|[459747]
    (459751 return ret[459749])
  }
  function ^[62376](arg a[62373]:_tuple[58502](?), arg b[62379]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459765] "RVV" "temp"
    unknown call_tmp[562989] "expr temp" "maybe param" "maybe type" "temp"
    (562992 'move' call_tmp[562989](62388 call size _mt[232] a[62373]))
    unknown call_tmp[562996] "expr temp" "maybe param" "maybe type" "temp"
    (562999 'move' call_tmp[562996](62392 call size _mt[232] b[62379]))
    unknown call_tmp[563001] "expr temp" "maybe param" "maybe type" "temp"
    (563004 'move' call_tmp[563001](62395 call != call_tmp[562989] call_tmp[562996]))
    unknown call_tmp[563006] "expr temp" "maybe param" "maybe type" "temp"
    (563009 'move' call_tmp[563006](62417 call _cond_test call_tmp[563001]))
    if call_tmp[563006]
    {
      (62415 call compilerError "tuple operands to ^ have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442909] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[563011] "expr temp" "maybe param" "maybe type" "temp"
      (563014 'move' call_tmp[563011](62430 call a[62373] 1))
      unknown call_tmp[563016] "expr temp" "maybe param" "maybe type" "temp"
      (563019 'move' call_tmp[563016](62434 call b[62379] 1))
      unknown call_tmp[563021] "expr temp" "maybe param" "maybe type" "temp"
      (563024 'move' call_tmp[563021](62435 call ^ call_tmp[563011] call_tmp[563016]))
      (442913 'move' call_type_tmp[442909](62437 'typeof' call_tmp[563021]))
    }
    unknown result[62440] "insert auto destroy"
    unknown call_tmp[563028] "expr temp" "maybe param" "maybe type" "temp"
    (563031 'move' call_tmp[563028](62424 call size _mt[232] a[62373]))
    unknown call_tmp[563033] "expr temp" "maybe param" "maybe type" "temp"
    (563036 'move' call_tmp[563033](62438 call * call_tmp[563028] call_type_tmp[442909]))
    (489524 'default init var' result[62440] call_tmp[563033])
    {
      unknown d[62467] "insert auto destroy"
      (489526 'init var' d[62467] 0)
      unknown tmp[62468] "maybe param" "temp"
      unknown call_tmp[563040] "expr temp" "maybe param" "maybe type" "temp"
      (563043 'move' call_tmp[563040](62445 call size _mt[232] a[62373]))
      (62480 'move' tmp[62468](62478 call chpl_compute_low_param_loop_bound 1 call_tmp[563040]))
      unknown tmp[62469] "maybe param" "temp"
      unknown call_tmp[563047] "expr temp" "maybe param" "maybe type" "temp"
      (563050 'move' call_tmp[563047](62485 call size _mt[232] a[62373]))
      (62490 'move' tmp[62469](62488 call chpl_compute_high_param_loop_bound 1 call_tmp[563047]))
      unknown tmp[62470] "maybe param" "temp"
      (62493 'move' tmp[62470] 1)
      ParamForLoop
      { d[62467] tmp[62468] tmp[62469] tmp[62470]
        unknown call_tmp[563052] "expr temp" "maybe param" "maybe type" "temp"
        (563055 'move' call_tmp[563052](62453 call result[62440] d[62467]))
        unknown call_tmp[563057] "expr temp" "maybe param" "maybe type" "temp"
        (563060 'move' call_tmp[563057](62457 call a[62373] d[62467]))
        unknown call_tmp[563062] "expr temp" "maybe param" "maybe type" "temp"
        (563065 'move' call_tmp[563062](62461 call b[62379] d[62467]))
        unknown call_tmp[563067] "expr temp" "maybe param" "maybe type" "temp"
        (563070 'move' call_tmp[563067](62462 call ^ call_tmp[563057] call_tmp[563062]))
        (62464 call = call_tmp[563052] call_tmp[563067])
      }
      label _unused_continueLabel[62472]
      label _breakLabel[62471]
    }
    (459770 'move' ret[459765](459769 'deref' result[62440]))
    (459767 return ret[459765])
  }
  where {
    (62386 call chpl_TwoHomogTuples a[62373] b[62379])
  }
  function ^[62516](arg a[62513]:_tuple[58502](?), arg b[62519]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459774] "RVV" "temp"
    unknown call_tmp[563074] "expr temp" "maybe param" "maybe type" "temp"
    (563077 'move' call_tmp[563074](62523 call size _mt[232] a[62513]))
    unknown call_tmp[563081] "expr temp" "maybe param" "maybe type" "temp"
    (563084 'move' call_tmp[563081](62527 call size _mt[232] b[62519]))
    unknown call_tmp[563086] "expr temp" "maybe param" "maybe type" "temp"
    (563089 'move' call_tmp[563086](62530 call != call_tmp[563074] call_tmp[563081]))
    unknown call_tmp[563091] "expr temp" "maybe param" "maybe type" "temp"
    (563094 'move' call_tmp[563091](62537 call _cond_test call_tmp[563086]))
    if call_tmp[563091]
    {
      (62535 call compilerError "tuple operands to ^ have different sizes")
    }
    unknown call_tmp[563098] "expr temp" "maybe param" "maybe type" "temp"
    (563101 'move' call_tmp[563098](62544 call size _mt[232] a[62513]))
    unknown call_tmp[563103] "expr temp" "maybe param" "maybe type" "temp"
    (563106 'move' call_tmp[563103](62548 call == call_tmp[563098] 1))
    unknown call_tmp[563108] "expr temp" "maybe param" "maybe type" "temp"
    (563111 'move' call_tmp[563108](62590 call _cond_test call_tmp[563103]))
    if call_tmp[563108]
    {
      unknown call_tmp[563113] "expr temp" "maybe param" "maybe type" "temp"
      (563116 'move' call_tmp[563113](62553 call a[62513] 1))
      unknown call_tmp[563118] "expr temp" "maybe param" "maybe type" "temp"
      (563121 'move' call_tmp[563118](62557 call b[62519] 1))
      unknown call_tmp[563123] "expr temp" "maybe param" "maybe type" "temp"
      (563126 'move' call_tmp[563123](62558 call ^ call_tmp[563113] call_tmp[563118]))
      unknown call_tmp[563128] "expr temp" "maybe param" "maybe type" "temp"
      (563131 'move' call_tmp[563128](62560 call _build_tuple call_tmp[563123]))
      (459779 'move' ret[459774](459778 'deref' call_tmp[563128]))
      gotoReturn _end_^[459772] _end_^[459772]
    }
    {
      unknown call_tmp[563133] "expr temp" "maybe param" "maybe type" "temp"
      (563136 'move' call_tmp[563133](62567 call a[62513] 1))
      unknown call_tmp[563138] "expr temp" "maybe param" "maybe type" "temp"
      (563141 'move' call_tmp[563138](62571 call b[62519] 1))
      unknown call_tmp[563143] "expr temp" "maybe param" "maybe type" "temp"
      (563146 'move' call_tmp[563143](62572 call ^ call_tmp[563133] call_tmp[563138]))
      unknown call_tmp[563148] "expr temp" "maybe param" "maybe type" "temp"
      (563151 'move' call_tmp[563148](62577 call chpl__tupleRest a[62513]))
      unknown call_tmp[563153] "expr temp" "maybe param" "maybe type" "temp"
      (563156 'move' call_tmp[563153](62581 call chpl__tupleRest b[62519]))
      unknown call_tmp[563158] "expr temp" "maybe param" "maybe type" "temp"
      (563161 'move' call_tmp[563158](62582 call ^ call_tmp[563148] call_tmp[563153]))
      unknown call_tmp[563163] "expr temp" "maybe param" "maybe type" "temp"
      (563166 'move' call_tmp[563163](62586 call _build_tuple call_tmp[563143](62584 'expand_tuple' call_tmp[563158])))
      (459784 'move' ret[459774](459783 'deref' call_tmp[563163]))
      gotoReturn _end_^[459772] _end_^[459772]
    }
    label _end_^[459772]
    (459776 return ret[459774])
  }
  function <<[62604](arg a[62601]:_tuple[58502](?), arg b[62607]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459790] "RVV" "temp"
    unknown call_tmp[563170] "expr temp" "maybe param" "maybe type" "temp"
    (563173 'move' call_tmp[563170](62616 call size _mt[232] a[62601]))
    unknown call_tmp[563177] "expr temp" "maybe param" "maybe type" "temp"
    (563180 'move' call_tmp[563177](62620 call size _mt[232] b[62607]))
    unknown call_tmp[563182] "expr temp" "maybe param" "maybe type" "temp"
    (563185 'move' call_tmp[563182](62623 call != call_tmp[563170] call_tmp[563177]))
    unknown call_tmp[563187] "expr temp" "maybe param" "maybe type" "temp"
    (563190 'move' call_tmp[563187](62645 call _cond_test call_tmp[563182]))
    if call_tmp[563187]
    {
      (62643 call compilerError "tuple operands to << have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442915] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[563192] "expr temp" "maybe param" "maybe type" "temp"
      (563195 'move' call_tmp[563192](62658 call a[62601] 1))
      unknown call_tmp[563197] "expr temp" "maybe param" "maybe type" "temp"
      (563200 'move' call_tmp[563197](62662 call b[62607] 1))
      unknown call_tmp[563202] "expr temp" "maybe param" "maybe type" "temp"
      (563205 'move' call_tmp[563202](62663 call << call_tmp[563192] call_tmp[563197]))
      (442919 'move' call_type_tmp[442915](62665 'typeof' call_tmp[563202]))
    }
    unknown result[62668] "insert auto destroy"
    unknown call_tmp[563209] "expr temp" "maybe param" "maybe type" "temp"
    (563212 'move' call_tmp[563209](62652 call size _mt[232] a[62601]))
    unknown call_tmp[563214] "expr temp" "maybe param" "maybe type" "temp"
    (563217 'move' call_tmp[563214](62666 call * call_tmp[563209] call_type_tmp[442915]))
    (489528 'default init var' result[62668] call_tmp[563214])
    {
      unknown d[62695] "insert auto destroy"
      (489530 'init var' d[62695] 0)
      unknown tmp[62696] "maybe param" "temp"
      unknown call_tmp[563221] "expr temp" "maybe param" "maybe type" "temp"
      (563224 'move' call_tmp[563221](62673 call size _mt[232] a[62601]))
      (62708 'move' tmp[62696](62706 call chpl_compute_low_param_loop_bound 1 call_tmp[563221]))
      unknown tmp[62697] "maybe param" "temp"
      unknown call_tmp[563228] "expr temp" "maybe param" "maybe type" "temp"
      (563231 'move' call_tmp[563228](62713 call size _mt[232] a[62601]))
      (62718 'move' tmp[62697](62716 call chpl_compute_high_param_loop_bound 1 call_tmp[563228]))
      unknown tmp[62698] "maybe param" "temp"
      (62721 'move' tmp[62698] 1)
      ParamForLoop
      { d[62695] tmp[62696] tmp[62697] tmp[62698]
        unknown call_tmp[563233] "expr temp" "maybe param" "maybe type" "temp"
        (563236 'move' call_tmp[563233](62681 call result[62668] d[62695]))
        unknown call_tmp[563238] "expr temp" "maybe param" "maybe type" "temp"
        (563241 'move' call_tmp[563238](62685 call a[62601] d[62695]))
        unknown call_tmp[563243] "expr temp" "maybe param" "maybe type" "temp"
        (563246 'move' call_tmp[563243](62689 call b[62607] d[62695]))
        unknown call_tmp[563248] "expr temp" "maybe param" "maybe type" "temp"
        (563251 'move' call_tmp[563248](62690 call << call_tmp[563238] call_tmp[563243]))
        (62692 call = call_tmp[563233] call_tmp[563248])
      }
      label _unused_continueLabel[62700]
      label _breakLabel[62699]
    }
    (459795 'move' ret[459790](459794 'deref' result[62668]))
    (459792 return ret[459790])
  }
  where {
    (62614 call chpl_TwoHomogTuples a[62601] b[62607])
  }
  function <<[62744](arg a[62741]:_tuple[58502](?), arg b[62747]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459799] "RVV" "temp"
    unknown call_tmp[563255] "expr temp" "maybe param" "maybe type" "temp"
    (563258 'move' call_tmp[563255](62751 call size _mt[232] a[62741]))
    unknown call_tmp[563262] "expr temp" "maybe param" "maybe type" "temp"
    (563265 'move' call_tmp[563262](62755 call size _mt[232] b[62747]))
    unknown call_tmp[563267] "expr temp" "maybe param" "maybe type" "temp"
    (563270 'move' call_tmp[563267](62758 call != call_tmp[563255] call_tmp[563262]))
    unknown call_tmp[563272] "expr temp" "maybe param" "maybe type" "temp"
    (563275 'move' call_tmp[563272](62765 call _cond_test call_tmp[563267]))
    if call_tmp[563272]
    {
      (62763 call compilerError "tuple operands to << have different sizes")
    }
    unknown call_tmp[563279] "expr temp" "maybe param" "maybe type" "temp"
    (563282 'move' call_tmp[563279](62772 call size _mt[232] a[62741]))
    unknown call_tmp[563284] "expr temp" "maybe param" "maybe type" "temp"
    (563287 'move' call_tmp[563284](62776 call == call_tmp[563279] 1))
    unknown call_tmp[563289] "expr temp" "maybe param" "maybe type" "temp"
    (563292 'move' call_tmp[563289](62818 call _cond_test call_tmp[563284]))
    if call_tmp[563289]
    {
      unknown call_tmp[563294] "expr temp" "maybe param" "maybe type" "temp"
      (563297 'move' call_tmp[563294](62781 call a[62741] 1))
      unknown call_tmp[563299] "expr temp" "maybe param" "maybe type" "temp"
      (563302 'move' call_tmp[563299](62785 call b[62747] 1))
      unknown call_tmp[563304] "expr temp" "maybe param" "maybe type" "temp"
      (563307 'move' call_tmp[563304](62786 call << call_tmp[563294] call_tmp[563299]))
      unknown call_tmp[563309] "expr temp" "maybe param" "maybe type" "temp"
      (563312 'move' call_tmp[563309](62788 call _build_tuple call_tmp[563304]))
      (459804 'move' ret[459799](459803 'deref' call_tmp[563309]))
      gotoReturn _end_<<[459797] _end_<<[459797]
    }
    {
      unknown call_tmp[563314] "expr temp" "maybe param" "maybe type" "temp"
      (563317 'move' call_tmp[563314](62795 call a[62741] 1))
      unknown call_tmp[563319] "expr temp" "maybe param" "maybe type" "temp"
      (563322 'move' call_tmp[563319](62799 call b[62747] 1))
      unknown call_tmp[563324] "expr temp" "maybe param" "maybe type" "temp"
      (563327 'move' call_tmp[563324](62800 call << call_tmp[563314] call_tmp[563319]))
      unknown call_tmp[563329] "expr temp" "maybe param" "maybe type" "temp"
      (563332 'move' call_tmp[563329](62805 call chpl__tupleRest a[62741]))
      unknown call_tmp[563334] "expr temp" "maybe param" "maybe type" "temp"
      (563337 'move' call_tmp[563334](62809 call chpl__tupleRest b[62747]))
      unknown call_tmp[563339] "expr temp" "maybe param" "maybe type" "temp"
      (563342 'move' call_tmp[563339](62810 call << call_tmp[563329] call_tmp[563334]))
      unknown call_tmp[563344] "expr temp" "maybe param" "maybe type" "temp"
      (563347 'move' call_tmp[563344](62814 call _build_tuple call_tmp[563324](62812 'expand_tuple' call_tmp[563339])))
      (459809 'move' ret[459799](459808 'deref' call_tmp[563344]))
      gotoReturn _end_<<[459797] _end_<<[459797]
    }
    label _end_<<[459797]
    (459801 return ret[459799])
  }
  function >>[62832](arg a[62829]:_tuple[58502](?), arg b[62835]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459815] "RVV" "temp"
    unknown call_tmp[563351] "expr temp" "maybe param" "maybe type" "temp"
    (563354 'move' call_tmp[563351](62844 call size _mt[232] a[62829]))
    unknown call_tmp[563358] "expr temp" "maybe param" "maybe type" "temp"
    (563361 'move' call_tmp[563358](62848 call size _mt[232] b[62835]))
    unknown call_tmp[563363] "expr temp" "maybe param" "maybe type" "temp"
    (563366 'move' call_tmp[563363](62851 call != call_tmp[563351] call_tmp[563358]))
    unknown call_tmp[563368] "expr temp" "maybe param" "maybe type" "temp"
    (563371 'move' call_tmp[563368](62873 call _cond_test call_tmp[563363]))
    if call_tmp[563368]
    {
      (62871 call compilerError "tuple operands to >> have different sizes")
    }
    { scopeless type
      unknown call_type_tmp[442921] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[563373] "expr temp" "maybe param" "maybe type" "temp"
      (563376 'move' call_tmp[563373](62886 call a[62829] 1))
      unknown call_tmp[563378] "expr temp" "maybe param" "maybe type" "temp"
      (563381 'move' call_tmp[563378](62890 call b[62835] 1))
      unknown call_tmp[563383] "expr temp" "maybe param" "maybe type" "temp"
      (563386 'move' call_tmp[563383](62891 call >> call_tmp[563373] call_tmp[563378]))
      (442925 'move' call_type_tmp[442921](62893 'typeof' call_tmp[563383]))
    }
    unknown result[62896] "insert auto destroy"
    unknown call_tmp[563390] "expr temp" "maybe param" "maybe type" "temp"
    (563393 'move' call_tmp[563390](62880 call size _mt[232] a[62829]))
    unknown call_tmp[563395] "expr temp" "maybe param" "maybe type" "temp"
    (563398 'move' call_tmp[563395](62894 call * call_tmp[563390] call_type_tmp[442921]))
    (489532 'default init var' result[62896] call_tmp[563395])
    {
      unknown d[62923] "insert auto destroy"
      (489534 'init var' d[62923] 0)
      unknown tmp[62924] "maybe param" "temp"
      unknown call_tmp[563402] "expr temp" "maybe param" "maybe type" "temp"
      (563405 'move' call_tmp[563402](62901 call size _mt[232] a[62829]))
      (62936 'move' tmp[62924](62934 call chpl_compute_low_param_loop_bound 1 call_tmp[563402]))
      unknown tmp[62925] "maybe param" "temp"
      unknown call_tmp[563409] "expr temp" "maybe param" "maybe type" "temp"
      (563412 'move' call_tmp[563409](62941 call size _mt[232] a[62829]))
      (62946 'move' tmp[62925](62944 call chpl_compute_high_param_loop_bound 1 call_tmp[563409]))
      unknown tmp[62926] "maybe param" "temp"
      (62949 'move' tmp[62926] 1)
      ParamForLoop
      { d[62923] tmp[62924] tmp[62925] tmp[62926]
        unknown call_tmp[563414] "expr temp" "maybe param" "maybe type" "temp"
        (563417 'move' call_tmp[563414](62909 call result[62896] d[62923]))
        unknown call_tmp[563419] "expr temp" "maybe param" "maybe type" "temp"
        (563422 'move' call_tmp[563419](62913 call a[62829] d[62923]))
        unknown call_tmp[563424] "expr temp" "maybe param" "maybe type" "temp"
        (563427 'move' call_tmp[563424](62917 call b[62835] d[62923]))
        unknown call_tmp[563429] "expr temp" "maybe param" "maybe type" "temp"
        (563432 'move' call_tmp[563429](62918 call >> call_tmp[563419] call_tmp[563424]))
        (62920 call = call_tmp[563414] call_tmp[563429])
      }
      label _unused_continueLabel[62928]
      label _breakLabel[62927]
    }
    (459820 'move' ret[459815](459819 'deref' result[62896]))
    (459817 return ret[459815])
  }
  where {
    (62842 call chpl_TwoHomogTuples a[62829] b[62835])
  }
  function >>[62972](arg a[62969]:_tuple[58502](?), arg b[62975]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459824] "RVV" "temp"
    unknown call_tmp[563436] "expr temp" "maybe param" "maybe type" "temp"
    (563439 'move' call_tmp[563436](62979 call size _mt[232] a[62969]))
    unknown call_tmp[563443] "expr temp" "maybe param" "maybe type" "temp"
    (563446 'move' call_tmp[563443](62983 call size _mt[232] b[62975]))
    unknown call_tmp[563448] "expr temp" "maybe param" "maybe type" "temp"
    (563451 'move' call_tmp[563448](62986 call != call_tmp[563436] call_tmp[563443]))
    unknown call_tmp[563453] "expr temp" "maybe param" "maybe type" "temp"
    (563456 'move' call_tmp[563453](62993 call _cond_test call_tmp[563448]))
    if call_tmp[563453]
    {
      (62991 call compilerError "tuple operands to >> have different sizes")
    }
    unknown call_tmp[563460] "expr temp" "maybe param" "maybe type" "temp"
    (563463 'move' call_tmp[563460](63000 call size _mt[232] a[62969]))
    unknown call_tmp[563465] "expr temp" "maybe param" "maybe type" "temp"
    (563468 'move' call_tmp[563465](63004 call == call_tmp[563460] 1))
    unknown call_tmp[563470] "expr temp" "maybe param" "maybe type" "temp"
    (563473 'move' call_tmp[563470](63046 call _cond_test call_tmp[563465]))
    if call_tmp[563470]
    {
      unknown call_tmp[563475] "expr temp" "maybe param" "maybe type" "temp"
      (563478 'move' call_tmp[563475](63009 call a[62969] 1))
      unknown call_tmp[563480] "expr temp" "maybe param" "maybe type" "temp"
      (563483 'move' call_tmp[563480](63013 call b[62975] 1))
      unknown call_tmp[563485] "expr temp" "maybe param" "maybe type" "temp"
      (563488 'move' call_tmp[563485](63014 call >> call_tmp[563475] call_tmp[563480]))
      unknown call_tmp[563490] "expr temp" "maybe param" "maybe type" "temp"
      (563493 'move' call_tmp[563490](63016 call _build_tuple call_tmp[563485]))
      (459829 'move' ret[459824](459828 'deref' call_tmp[563490]))
      gotoReturn _end_>>[459822] _end_>>[459822]
    }
    {
      unknown call_tmp[563495] "expr temp" "maybe param" "maybe type" "temp"
      (563498 'move' call_tmp[563495](63023 call a[62969] 1))
      unknown call_tmp[563500] "expr temp" "maybe param" "maybe type" "temp"
      (563503 'move' call_tmp[563500](63027 call b[62975] 1))
      unknown call_tmp[563505] "expr temp" "maybe param" "maybe type" "temp"
      (563508 'move' call_tmp[563505](63028 call >> call_tmp[563495] call_tmp[563500]))
      unknown call_tmp[563510] "expr temp" "maybe param" "maybe type" "temp"
      (563513 'move' call_tmp[563510](63033 call chpl__tupleRest a[62969]))
      unknown call_tmp[563515] "expr temp" "maybe param" "maybe type" "temp"
      (563518 'move' call_tmp[563515](63037 call chpl__tupleRest b[62975]))
      unknown call_tmp[563520] "expr temp" "maybe param" "maybe type" "temp"
      (563523 'move' call_tmp[563520](63038 call >> call_tmp[563510] call_tmp[563515]))
      unknown call_tmp[563525] "expr temp" "maybe param" "maybe type" "temp"
      (563528 'move' call_tmp[563525](63042 call _build_tuple call_tmp[563505](63040 'expand_tuple' call_tmp[563520])))
      (459834 'move' ret[459824](459833 'deref' call_tmp[563525]))
      gotoReturn _end_>>[459822] _end_>>[459822]
    }
    label _end_>>[459822]
    (459826 return ret[459824])
  }
  function >[63060](arg a[63057]:_tuple[58502](?), arg b[63063]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459840] "RVV" "temp"
    unknown call_tmp[563532] "expr temp" "maybe param" "maybe type" "temp"
    (563535 'move' call_tmp[563532](63067 call size _mt[232] a[63057]))
    unknown call_tmp[563539] "expr temp" "maybe param" "maybe type" "temp"
    (563542 'move' call_tmp[563539](63071 call size _mt[232] b[63063]))
    unknown call_tmp[563544] "expr temp" "maybe param" "maybe type" "temp"
    (563547 'move' call_tmp[563544](63074 call != call_tmp[563532] call_tmp[563539]))
    unknown call_tmp[563549] "expr temp" "maybe param" "maybe type" "temp"
    (563552 'move' call_tmp[563549](63096 call _cond_test call_tmp[563544]))
    if call_tmp[563549]
    {
      (63094 call compilerError "tuple operands to > have different sizes")
    }
    {
      unknown i[63146] "insert auto destroy"
      (489536 'init var' i[63146] 0)
      unknown tmp[63147] "maybe param" "temp"
      unknown call_tmp[563556] "expr temp" "maybe param" "maybe type" "temp"
      (563559 'move' call_tmp[563556](63104 call size _mt[232] a[63057]))
      (63159 'move' tmp[63147](63157 call chpl_compute_low_param_loop_bound 1 call_tmp[563556]))
      unknown tmp[63148] "maybe param" "temp"
      unknown call_tmp[563563] "expr temp" "maybe param" "maybe type" "temp"
      (563566 'move' call_tmp[563563](63164 call size _mt[232] a[63057]))
      (63169 'move' tmp[63148](63167 call chpl_compute_high_param_loop_bound 1 call_tmp[563563]))
      unknown tmp[63149] "maybe param" "temp"
      (63172 'move' tmp[63149] 1)
      ParamForLoop
      { i[63146] tmp[63147] tmp[63148] tmp[63149]
        unknown call_tmp[563568] "expr temp" "maybe param" "maybe type" "temp"
        (563571 'move' call_tmp[563568](63112 call a[63057] i[63146]))
        unknown call_tmp[563573] "expr temp" "maybe param" "maybe type" "temp"
        (563576 'move' call_tmp[563573](63116 call b[63063] i[63146]))
        unknown call_tmp[563578] "expr temp" "maybe param" "maybe type" "temp"
        (563581 'move' call_tmp[563578](63117 call > call_tmp[563568] call_tmp[563573]))
        unknown call_tmp[563583] "expr temp" "maybe param" "maybe type" "temp"
        (563586 'move' call_tmp[563583](63140 call _cond_test call_tmp[563578]))
        if call_tmp[563583]
        {
          (459845 'move' ret[459840](459844 'deref' 1))
          gotoReturn _end_>[459838] _end_>[459838]
        }
        {
          unknown call_tmp[563588] "expr temp" "maybe param" "maybe type" "temp"
          (563591 'move' call_tmp[563588](63125 call a[63057] i[63146]))
          unknown call_tmp[563593] "expr temp" "maybe param" "maybe type" "temp"
          (563596 'move' call_tmp[563593](63129 call b[63063] i[63146]))
          unknown call_tmp[563598] "expr temp" "maybe param" "maybe type" "temp"
          (563601 'move' call_tmp[563598](63130 call < call_tmp[563588] call_tmp[563593]))
          unknown call_tmp[563603] "expr temp" "maybe param" "maybe type" "temp"
          (563606 'move' call_tmp[563603](63135 call _cond_test call_tmp[563598]))
          if call_tmp[563603]
          {
            (459850 'move' ret[459840](459849 'deref' 0))
            gotoReturn _end_>[459838] _end_>[459838]
          }
        }
      }
      label _unused_continueLabel[63151]
      label _breakLabel[63150]
    }
    (459855 'move' ret[459840](459854 'deref' 0))
    label _end_>[459838]
    (459842 return ret[459840])
  }
  function >=[63194](arg a[63191]:_tuple[58502](?), arg b[63197]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459859] "RVV" "temp"
    unknown call_tmp[563610] "expr temp" "maybe param" "maybe type" "temp"
    (563613 'move' call_tmp[563610](63201 call size _mt[232] a[63191]))
    unknown call_tmp[563617] "expr temp" "maybe param" "maybe type" "temp"
    (563620 'move' call_tmp[563617](63205 call size _mt[232] b[63197]))
    unknown call_tmp[563622] "expr temp" "maybe param" "maybe type" "temp"
    (563625 'move' call_tmp[563622](63208 call != call_tmp[563610] call_tmp[563617]))
    unknown call_tmp[563627] "expr temp" "maybe param" "maybe type" "temp"
    (563630 'move' call_tmp[563627](63230 call _cond_test call_tmp[563622]))
    if call_tmp[563627]
    {
      (63228 call compilerError "tuple operands to >= have different sizes")
    }
    {
      unknown i[63280] "insert auto destroy"
      (489538 'init var' i[63280] 0)
      unknown tmp[63281] "maybe param" "temp"
      unknown call_tmp[563634] "expr temp" "maybe param" "maybe type" "temp"
      (563637 'move' call_tmp[563634](63238 call size _mt[232] a[63191]))
      (63293 'move' tmp[63281](63291 call chpl_compute_low_param_loop_bound 1 call_tmp[563634]))
      unknown tmp[63282] "maybe param" "temp"
      unknown call_tmp[563641] "expr temp" "maybe param" "maybe type" "temp"
      (563644 'move' call_tmp[563641](63298 call size _mt[232] a[63191]))
      (63303 'move' tmp[63282](63301 call chpl_compute_high_param_loop_bound 1 call_tmp[563641]))
      unknown tmp[63283] "maybe param" "temp"
      (63306 'move' tmp[63283] 1)
      ParamForLoop
      { i[63280] tmp[63281] tmp[63282] tmp[63283]
        unknown call_tmp[563646] "expr temp" "maybe param" "maybe type" "temp"
        (563649 'move' call_tmp[563646](63246 call a[63191] i[63280]))
        unknown call_tmp[563651] "expr temp" "maybe param" "maybe type" "temp"
        (563654 'move' call_tmp[563651](63250 call b[63197] i[63280]))
        unknown call_tmp[563656] "expr temp" "maybe param" "maybe type" "temp"
        (563659 'move' call_tmp[563656](63251 call > call_tmp[563646] call_tmp[563651]))
        unknown call_tmp[563661] "expr temp" "maybe param" "maybe type" "temp"
        (563664 'move' call_tmp[563661](63274 call _cond_test call_tmp[563656]))
        if call_tmp[563661]
        {
          (459864 'move' ret[459859](459863 'deref' 1))
          gotoReturn _end_>=[459857] _end_>=[459857]
        }
        {
          unknown call_tmp[563666] "expr temp" "maybe param" "maybe type" "temp"
          (563669 'move' call_tmp[563666](63259 call a[63191] i[63280]))
          unknown call_tmp[563671] "expr temp" "maybe param" "maybe type" "temp"
          (563674 'move' call_tmp[563671](63263 call b[63197] i[63280]))
          unknown call_tmp[563676] "expr temp" "maybe param" "maybe type" "temp"
          (563679 'move' call_tmp[563676](63264 call < call_tmp[563666] call_tmp[563671]))
          unknown call_tmp[563681] "expr temp" "maybe param" "maybe type" "temp"
          (563684 'move' call_tmp[563681](63269 call _cond_test call_tmp[563676]))
          if call_tmp[563681]
          {
            (459869 'move' ret[459859](459868 'deref' 0))
            gotoReturn _end_>=[459857] _end_>=[459857]
          }
        }
      }
      label _unused_continueLabel[63285]
      label _breakLabel[63284]
    }
    (459874 'move' ret[459859](459873 'deref' 1))
    label _end_>=[459857]
    (459861 return ret[459859])
  }
  function <[63328](arg a[63325]:_tuple[58502](?), arg b[63331]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459878] "RVV" "temp"
    unknown call_tmp[563688] "expr temp" "maybe param" "maybe type" "temp"
    (563691 'move' call_tmp[563688](63335 call size _mt[232] a[63325]))
    unknown call_tmp[563695] "expr temp" "maybe param" "maybe type" "temp"
    (563698 'move' call_tmp[563695](63339 call size _mt[232] b[63331]))
    unknown call_tmp[563700] "expr temp" "maybe param" "maybe type" "temp"
    (563703 'move' call_tmp[563700](63342 call != call_tmp[563688] call_tmp[563695]))
    unknown call_tmp[563705] "expr temp" "maybe param" "maybe type" "temp"
    (563708 'move' call_tmp[563705](63364 call _cond_test call_tmp[563700]))
    if call_tmp[563705]
    {
      (63362 call compilerError "tuple operands to < have different sizes")
    }
    {
      unknown i[63414] "insert auto destroy"
      (489540 'init var' i[63414] 0)
      unknown tmp[63415] "maybe param" "temp"
      unknown call_tmp[563712] "expr temp" "maybe param" "maybe type" "temp"
      (563715 'move' call_tmp[563712](63372 call size _mt[232] a[63325]))
      (63427 'move' tmp[63415](63425 call chpl_compute_low_param_loop_bound 1 call_tmp[563712]))
      unknown tmp[63416] "maybe param" "temp"
      unknown call_tmp[563719] "expr temp" "maybe param" "maybe type" "temp"
      (563722 'move' call_tmp[563719](63432 call size _mt[232] a[63325]))
      (63437 'move' tmp[63416](63435 call chpl_compute_high_param_loop_bound 1 call_tmp[563719]))
      unknown tmp[63417] "maybe param" "temp"
      (63440 'move' tmp[63417] 1)
      ParamForLoop
      { i[63414] tmp[63415] tmp[63416] tmp[63417]
        unknown call_tmp[563724] "expr temp" "maybe param" "maybe type" "temp"
        (563727 'move' call_tmp[563724](63380 call a[63325] i[63414]))
        unknown call_tmp[563729] "expr temp" "maybe param" "maybe type" "temp"
        (563732 'move' call_tmp[563729](63384 call b[63331] i[63414]))
        unknown call_tmp[563734] "expr temp" "maybe param" "maybe type" "temp"
        (563737 'move' call_tmp[563734](63385 call < call_tmp[563724] call_tmp[563729]))
        unknown call_tmp[563739] "expr temp" "maybe param" "maybe type" "temp"
        (563742 'move' call_tmp[563739](63408 call _cond_test call_tmp[563734]))
        if call_tmp[563739]
        {
          (459883 'move' ret[459878](459882 'deref' 1))
          gotoReturn _end_<[459876] _end_<[459876]
        }
        {
          unknown call_tmp[563744] "expr temp" "maybe param" "maybe type" "temp"
          (563747 'move' call_tmp[563744](63393 call a[63325] i[63414]))
          unknown call_tmp[563749] "expr temp" "maybe param" "maybe type" "temp"
          (563752 'move' call_tmp[563749](63397 call b[63331] i[63414]))
          unknown call_tmp[563754] "expr temp" "maybe param" "maybe type" "temp"
          (563757 'move' call_tmp[563754](63398 call > call_tmp[563744] call_tmp[563749]))
          unknown call_tmp[563759] "expr temp" "maybe param" "maybe type" "temp"
          (563762 'move' call_tmp[563759](63403 call _cond_test call_tmp[563754]))
          if call_tmp[563759]
          {
            (459888 'move' ret[459878](459887 'deref' 0))
            gotoReturn _end_<[459876] _end_<[459876]
          }
        }
      }
      label _unused_continueLabel[63419]
      label _breakLabel[63418]
    }
    (459893 'move' ret[459878](459892 'deref' 0))
    label _end_<[459876]
    (459880 return ret[459878])
  }
  function <=[63462](arg a[63459]:_tuple[58502](?), arg b[63465]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459897] "RVV" "temp"
    unknown call_tmp[563766] "expr temp" "maybe param" "maybe type" "temp"
    (563769 'move' call_tmp[563766](63469 call size _mt[232] a[63459]))
    unknown call_tmp[563773] "expr temp" "maybe param" "maybe type" "temp"
    (563776 'move' call_tmp[563773](63473 call size _mt[232] b[63465]))
    unknown call_tmp[563778] "expr temp" "maybe param" "maybe type" "temp"
    (563781 'move' call_tmp[563778](63476 call != call_tmp[563766] call_tmp[563773]))
    unknown call_tmp[563783] "expr temp" "maybe param" "maybe type" "temp"
    (563786 'move' call_tmp[563783](63498 call _cond_test call_tmp[563778]))
    if call_tmp[563783]
    {
      (63496 call compilerError "tuple operands to <= have different sizes")
    }
    {
      unknown i[63548] "insert auto destroy"
      (489542 'init var' i[63548] 0)
      unknown tmp[63549] "maybe param" "temp"
      unknown call_tmp[563790] "expr temp" "maybe param" "maybe type" "temp"
      (563793 'move' call_tmp[563790](63506 call size _mt[232] a[63459]))
      (63561 'move' tmp[63549](63559 call chpl_compute_low_param_loop_bound 1 call_tmp[563790]))
      unknown tmp[63550] "maybe param" "temp"
      unknown call_tmp[563797] "expr temp" "maybe param" "maybe type" "temp"
      (563800 'move' call_tmp[563797](63566 call size _mt[232] a[63459]))
      (63571 'move' tmp[63550](63569 call chpl_compute_high_param_loop_bound 1 call_tmp[563797]))
      unknown tmp[63551] "maybe param" "temp"
      (63574 'move' tmp[63551] 1)
      ParamForLoop
      { i[63548] tmp[63549] tmp[63550] tmp[63551]
        unknown call_tmp[563802] "expr temp" "maybe param" "maybe type" "temp"
        (563805 'move' call_tmp[563802](63514 call a[63459] i[63548]))
        unknown call_tmp[563807] "expr temp" "maybe param" "maybe type" "temp"
        (563810 'move' call_tmp[563807](63518 call b[63465] i[63548]))
        unknown call_tmp[563812] "expr temp" "maybe param" "maybe type" "temp"
        (563815 'move' call_tmp[563812](63519 call < call_tmp[563802] call_tmp[563807]))
        unknown call_tmp[563817] "expr temp" "maybe param" "maybe type" "temp"
        (563820 'move' call_tmp[563817](63542 call _cond_test call_tmp[563812]))
        if call_tmp[563817]
        {
          (459902 'move' ret[459897](459901 'deref' 1))
          gotoReturn _end_<=[459895] _end_<=[459895]
        }
        {
          unknown call_tmp[563822] "expr temp" "maybe param" "maybe type" "temp"
          (563825 'move' call_tmp[563822](63527 call a[63459] i[63548]))
          unknown call_tmp[563827] "expr temp" "maybe param" "maybe type" "temp"
          (563830 'move' call_tmp[563827](63531 call b[63465] i[63548]))
          unknown call_tmp[563832] "expr temp" "maybe param" "maybe type" "temp"
          (563835 'move' call_tmp[563832](63532 call > call_tmp[563822] call_tmp[563827]))
          unknown call_tmp[563837] "expr temp" "maybe param" "maybe type" "temp"
          (563840 'move' call_tmp[563837](63537 call _cond_test call_tmp[563832]))
          if call_tmp[563837]
          {
            (459907 'move' ret[459897](459906 'deref' 0))
            gotoReturn _end_<=[459895] _end_<=[459895]
          }
        }
      }
      label _unused_continueLabel[63553]
      label _breakLabel[63552]
    }
    (459912 'move' ret[459897](459911 'deref' 1))
    label _end_<=[459895]
    (459899 return ret[459897])
  }
  function ==[63596](arg a[63593]:_tuple[58502](?), arg b[63599]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459916] "RVV" "temp"
    unknown call_tmp[563844] "expr temp" "maybe param" "maybe type" "temp"
    (563847 'move' call_tmp[563844](63603 call size _mt[232] a[63593]))
    unknown call_tmp[563851] "expr temp" "maybe param" "maybe type" "temp"
    (563854 'move' call_tmp[563851](63607 call size _mt[232] b[63599]))
    unknown call_tmp[563856] "expr temp" "maybe param" "maybe type" "temp"
    (563859 'move' call_tmp[563856](63610 call != call_tmp[563844] call_tmp[563851]))
    unknown call_tmp[563861] "expr temp" "maybe param" "maybe type" "temp"
    (563864 'move' call_tmp[563861](63615 call _cond_test call_tmp[563856]))
    if call_tmp[563861]
    {
      (459921 'move' ret[459916](459920 'deref' 0))
      gotoReturn _end_==[459914] _end_==[459914]
    }
    {
      unknown i[63646] "insert auto destroy"
      (489544 'init var' i[63646] 0)
      unknown tmp[63647] "maybe param" "temp"
      unknown call_tmp[563868] "expr temp" "maybe param" "maybe type" "temp"
      (563871 'move' call_tmp[563868](63623 call size _mt[232] a[63593]))
      (63659 'move' tmp[63647](63657 call chpl_compute_low_param_loop_bound 1 call_tmp[563868]))
      unknown tmp[63648] "maybe param" "temp"
      unknown call_tmp[563875] "expr temp" "maybe param" "maybe type" "temp"
      (563878 'move' call_tmp[563875](63664 call size _mt[232] a[63593]))
      (63669 'move' tmp[63648](63667 call chpl_compute_high_param_loop_bound 1 call_tmp[563875]))
      unknown tmp[63649] "maybe param" "temp"
      (63672 'move' tmp[63649] 1)
      ParamForLoop
      { i[63646] tmp[63647] tmp[63648] tmp[63649]
        unknown call_tmp[563880] "expr temp" "maybe param" "maybe type" "temp"
        (563883 'move' call_tmp[563880](63631 call a[63593] i[63646]))
        unknown call_tmp[563885] "expr temp" "maybe param" "maybe type" "temp"
        (563888 'move' call_tmp[563885](63635 call b[63599] i[63646]))
        unknown call_tmp[563890] "expr temp" "maybe param" "maybe type" "temp"
        (563893 'move' call_tmp[563890](63636 call != call_tmp[563880] call_tmp[563885]))
        unknown call_tmp[563895] "expr temp" "maybe param" "maybe type" "temp"
        (563898 'move' call_tmp[563895](63641 call _cond_test call_tmp[563890]))
        if call_tmp[563895]
        {
          (459926 'move' ret[459916](459925 'deref' 0))
          gotoReturn _end_==[459914] _end_==[459914]
        }
      }
      label _unused_continueLabel[63651]
      label _breakLabel[63650]
    }
    (459931 'move' ret[459916](459930 'deref' 1))
    label _end_==[459914]
    (459918 return ret[459916])
  }
  function !=[63694](arg a[63691]:_tuple[58502](?), arg b[63697]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459935] "RVV" "temp"
    unknown call_tmp[563902] "expr temp" "maybe param" "maybe type" "temp"
    (563905 'move' call_tmp[563902](63701 call size _mt[232] a[63691]))
    unknown call_tmp[563909] "expr temp" "maybe param" "maybe type" "temp"
    (563912 'move' call_tmp[563909](63705 call size _mt[232] b[63697]))
    unknown call_tmp[563914] "expr temp" "maybe param" "maybe type" "temp"
    (563917 'move' call_tmp[563914](63708 call != call_tmp[563902] call_tmp[563909]))
    unknown call_tmp[563919] "expr temp" "maybe param" "maybe type" "temp"
    (563922 'move' call_tmp[563919](63713 call _cond_test call_tmp[563914]))
    if call_tmp[563919]
    {
      (459940 'move' ret[459935](459939 'deref' 1))
      gotoReturn _end_!=[459933] _end_!=[459933]
    }
    {
      unknown i[63744] "insert auto destroy"
      (489546 'init var' i[63744] 0)
      unknown tmp[63745] "maybe param" "temp"
      unknown call_tmp[563926] "expr temp" "maybe param" "maybe type" "temp"
      (563929 'move' call_tmp[563926](63721 call size _mt[232] a[63691]))
      (63757 'move' tmp[63745](63755 call chpl_compute_low_param_loop_bound 1 call_tmp[563926]))
      unknown tmp[63746] "maybe param" "temp"
      unknown call_tmp[563933] "expr temp" "maybe param" "maybe type" "temp"
      (563936 'move' call_tmp[563933](63762 call size _mt[232] a[63691]))
      (63767 'move' tmp[63746](63765 call chpl_compute_high_param_loop_bound 1 call_tmp[563933]))
      unknown tmp[63747] "maybe param" "temp"
      (63770 'move' tmp[63747] 1)
      ParamForLoop
      { i[63744] tmp[63745] tmp[63746] tmp[63747]
        unknown call_tmp[563938] "expr temp" "maybe param" "maybe type" "temp"
        (563941 'move' call_tmp[563938](63729 call a[63691] i[63744]))
        unknown call_tmp[563943] "expr temp" "maybe param" "maybe type" "temp"
        (563946 'move' call_tmp[563943](63733 call b[63697] i[63744]))
        unknown call_tmp[563948] "expr temp" "maybe param" "maybe type" "temp"
        (563951 'move' call_tmp[563948](63734 call != call_tmp[563938] call_tmp[563943]))
        unknown call_tmp[563953] "expr temp" "maybe param" "maybe type" "temp"
        (563956 'move' call_tmp[563953](63739 call _cond_test call_tmp[563948]))
        if call_tmp[563953]
        {
          (459945 'move' ret[459935](459944 'deref' 1))
          gotoReturn _end_!=[459933] _end_!=[459933]
        }
      }
      label _unused_continueLabel[63749]
      label _breakLabel[63748]
    }
    (459950 'move' ret[459935](459949 'deref' 0))
    label _end_!=[459933]
    (459937 return ret[459935])
  }
  function +[63792](arg x[63789]:_tuple[58502](?), arg y[63799] :
  unknown call_tmp[563958] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[459954] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442927] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[563963] "expr temp" "maybe param" "maybe type" "temp"
      (563966 'move' call_tmp[563963](63813 call x[63789] 1))
      (442931 'move' call_type_tmp[442927](63814 'typeof' call_tmp[563963]))
    }
    unknown result[63817] "insert auto destroy"
    unknown call_tmp[563970] "expr temp" "maybe param" "maybe type" "temp"
    (563973 'move' call_tmp[563970](63807 call size _mt[232] x[63789]))
    unknown call_tmp[563975] "expr temp" "maybe param" "maybe type" "temp"
    (563978 'move' call_tmp[563975](63815 call * call_tmp[563970] call_type_tmp[442927]))
    (489548 'default init var' result[63817] call_tmp[563975])
    {
      unknown d[63842] "insert auto destroy"
      (489550 'init var' d[63842] 0)
      unknown tmp[63843] "maybe param" "temp"
      unknown call_tmp[563982] "expr temp" "maybe param" "maybe type" "temp"
      (563985 'move' call_tmp[563982](63823 call size _mt[232] x[63789]))
      (63855 'move' tmp[63843](63853 call chpl_compute_low_param_loop_bound 1 call_tmp[563982]))
      unknown tmp[63844] "maybe param" "temp"
      unknown call_tmp[563989] "expr temp" "maybe param" "maybe type" "temp"
      (563992 'move' call_tmp[563989](63860 call size _mt[232] x[63789]))
      (63865 'move' tmp[63844](63863 call chpl_compute_high_param_loop_bound 1 call_tmp[563989]))
      unknown tmp[63845] "maybe param" "temp"
      (63868 'move' tmp[63845] 1)
      ParamForLoop
      { d[63842] tmp[63843] tmp[63844] tmp[63845]
        unknown call_tmp[563994] "expr temp" "maybe param" "maybe type" "temp"
        (563997 'move' call_tmp[563994](63831 call result[63817] d[63842]))
        unknown call_tmp[563999] "expr temp" "maybe param" "maybe type" "temp"
        (564002 'move' call_tmp[563999](63835 call x[63789] d[63842]))
        unknown call_tmp[564004] "expr temp" "maybe param" "maybe type" "temp"
        (564007 'move' call_tmp[564004](63837 call + call_tmp[563999] y[63799]))
        (63839 call = call_tmp[563994] call_tmp[564004])
      }
      label _unused_continueLabel[63847]
      label _breakLabel[63846]
    }
    (459959 'move' ret[459954](459958 'deref' result[63817]))
    (459956 return ret[459954])
  }
  where {
    (63805 call isHomogeneousTuple x[63789])
  }
  function +[63892](arg x[63889]:_any[170](?), arg y[63895]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459963] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442933] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564009] "expr temp" "maybe param" "maybe type" "temp"
      (564012 'move' call_tmp[564009](63920 call y[63895] 1))
      (442937 'move' call_type_tmp[442933](63921 'typeof' call_tmp[564009]))
    }
    unknown result[63924] "insert auto destroy"
    unknown call_tmp[564016] "expr temp" "maybe param" "maybe type" "temp"
    (564019 'move' call_tmp[564016](63914 call size _mt[232] y[63895]))
    unknown call_tmp[564021] "expr temp" "maybe param" "maybe type" "temp"
    (564024 'move' call_tmp[564021](63922 call * call_tmp[564016] call_type_tmp[442933]))
    (489552 'default init var' result[63924] call_tmp[564021])
    {
      unknown d[63949] "insert auto destroy"
      (489554 'init var' d[63949] 0)
      unknown tmp[63950] "maybe param" "temp"
      unknown call_tmp[564028] "expr temp" "maybe param" "maybe type" "temp"
      (564031 'move' call_tmp[564028](63930 call size _mt[232] y[63895]))
      (63962 'move' tmp[63950](63960 call chpl_compute_low_param_loop_bound 1 call_tmp[564028]))
      unknown tmp[63951] "maybe param" "temp"
      unknown call_tmp[564035] "expr temp" "maybe param" "maybe type" "temp"
      (564038 'move' call_tmp[564035](63967 call size _mt[232] y[63895]))
      (63972 'move' tmp[63951](63970 call chpl_compute_high_param_loop_bound 1 call_tmp[564035]))
      unknown tmp[63952] "maybe param" "temp"
      (63975 'move' tmp[63952] 1)
      ParamForLoop
      { d[63949] tmp[63950] tmp[63951] tmp[63952]
        unknown call_tmp[564040] "expr temp" "maybe param" "maybe type" "temp"
        (564043 'move' call_tmp[564040](63938 call result[63924] d[63949]))
        unknown call_tmp[564045] "expr temp" "maybe param" "maybe type" "temp"
        (564048 'move' call_tmp[564045](63943 call y[63895] d[63949]))
        unknown call_tmp[564050] "expr temp" "maybe param" "maybe type" "temp"
        (564053 'move' call_tmp[564050](63944 call + x[63889] call_tmp[564045]))
        (63946 call = call_tmp[564040] call_tmp[564050])
      }
      label _unused_continueLabel[63954]
      label _breakLabel[63953]
    }
    (459968 'move' ret[459963](459967 'deref' result[63924]))
    (459965 return ret[459963])
  }
  where {
    unknown tmp[394440] "maybe param" "temp"
    (394451 'move' tmp[394440](63901 call isHomogeneousTuple y[63895]))
    unknown call_tmp[564055] "expr temp" "maybe param" "maybe type" "temp"
    (564058 'move' call_tmp[564055](394453 call _cond_invalid tmp[394440]))
    if call_tmp[564055]
    {
      (394456 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[503977] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[503978] "maybe param" "temp"
    unknown call_tmp[564060] "expr temp" "maybe param" "maybe type" "temp"
    (564063 'move' call_tmp[564060](394441 call isTrue tmp[394440]))
    (503983 'move' tmp[503978](503981 call _cond_test call_tmp[564060]))
    if tmp[503978]
    {
      { scopeless type
        unknown call_type_tmp[442939] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[564065] "expr temp" "maybe param" "maybe type" "temp"
        (564068 'move' call_tmp[564065](63908 call y[63895] 1))
        (442943 'move' call_type_tmp[442939](63909 'typeof' call_tmp[564065]))
      }
      unknown tmp[503985] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[564070] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (564073 'move' call_tmp[564070](430015 'typeof' x[63889]))
      unknown call_tmp[564075] "expr temp" "maybe param" "maybe type" "temp"
      (564078 'move' call_tmp[564075](328447 'is_subtype' call_type_tmp[442939] call_tmp[564070]))
      (503987 'move' tmp[503985](394444 call isTrue call_tmp[564075]))
      (503992 'move' tmp[503977](503989 '_paramFoldLogical' tmp[503978] tmp[503985]))
    }
    {
      (503997 'move' tmp[503977](503994 '_paramFoldLogical' tmp[503978] 0))
    }
    (691793 call _statementLevelSymbol tmp[503977])
  }
  function -[63998](arg x[63995]:_tuple[58502](?), arg y[64005] :
  unknown call_tmp[564080] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[459972] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442945] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564085] "expr temp" "maybe param" "maybe type" "temp"
      (564088 'move' call_tmp[564085](64019 call x[63995] 1))
      (442949 'move' call_type_tmp[442945](64020 'typeof' call_tmp[564085]))
    }
    unknown result[64023] "insert auto destroy"
    unknown call_tmp[564092] "expr temp" "maybe param" "maybe type" "temp"
    (564095 'move' call_tmp[564092](64013 call size _mt[232] x[63995]))
    unknown call_tmp[564097] "expr temp" "maybe param" "maybe type" "temp"
    (564100 'move' call_tmp[564097](64021 call * call_tmp[564092] call_type_tmp[442945]))
    (489556 'default init var' result[64023] call_tmp[564097])
    {
      unknown d[64048] "insert auto destroy"
      (489558 'init var' d[64048] 0)
      unknown tmp[64049] "maybe param" "temp"
      unknown call_tmp[564104] "expr temp" "maybe param" "maybe type" "temp"
      (564107 'move' call_tmp[564104](64029 call size _mt[232] x[63995]))
      (64061 'move' tmp[64049](64059 call chpl_compute_low_param_loop_bound 1 call_tmp[564104]))
      unknown tmp[64050] "maybe param" "temp"
      unknown call_tmp[564111] "expr temp" "maybe param" "maybe type" "temp"
      (564114 'move' call_tmp[564111](64066 call size _mt[232] x[63995]))
      (64071 'move' tmp[64050](64069 call chpl_compute_high_param_loop_bound 1 call_tmp[564111]))
      unknown tmp[64051] "maybe param" "temp"
      (64074 'move' tmp[64051] 1)
      ParamForLoop
      { d[64048] tmp[64049] tmp[64050] tmp[64051]
        unknown call_tmp[564116] "expr temp" "maybe param" "maybe type" "temp"
        (564119 'move' call_tmp[564116](64037 call result[64023] d[64048]))
        unknown call_tmp[564121] "expr temp" "maybe param" "maybe type" "temp"
        (564124 'move' call_tmp[564121](64041 call x[63995] d[64048]))
        unknown call_tmp[564126] "expr temp" "maybe param" "maybe type" "temp"
        (564129 'move' call_tmp[564126](64043 call - call_tmp[564121] y[64005]))
        (64045 call = call_tmp[564116] call_tmp[564126])
      }
      label _unused_continueLabel[64053]
      label _breakLabel[64052]
    }
    (459977 'move' ret[459972](459976 'deref' result[64023]))
    (459974 return ret[459972])
  }
  where {
    (64011 call isHomogeneousTuple x[63995])
  }
  function -[64098](arg x[64095]:_any[170](?), arg y[64101]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459981] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442951] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564131] "expr temp" "maybe param" "maybe type" "temp"
      (564134 'move' call_tmp[564131](64126 call y[64101] 1))
      (442955 'move' call_type_tmp[442951](64127 'typeof' call_tmp[564131]))
    }
    unknown result[64130] "insert auto destroy"
    unknown call_tmp[564138] "expr temp" "maybe param" "maybe type" "temp"
    (564141 'move' call_tmp[564138](64120 call size _mt[232] y[64101]))
    unknown call_tmp[564143] "expr temp" "maybe param" "maybe type" "temp"
    (564146 'move' call_tmp[564143](64128 call * call_tmp[564138] call_type_tmp[442951]))
    (489560 'default init var' result[64130] call_tmp[564143])
    {
      unknown d[64155] "insert auto destroy"
      (489562 'init var' d[64155] 0)
      unknown tmp[64156] "maybe param" "temp"
      unknown call_tmp[564150] "expr temp" "maybe param" "maybe type" "temp"
      (564153 'move' call_tmp[564150](64136 call size _mt[232] y[64101]))
      (64168 'move' tmp[64156](64166 call chpl_compute_low_param_loop_bound 1 call_tmp[564150]))
      unknown tmp[64157] "maybe param" "temp"
      unknown call_tmp[564157] "expr temp" "maybe param" "maybe type" "temp"
      (564160 'move' call_tmp[564157](64173 call size _mt[232] y[64101]))
      (64178 'move' tmp[64157](64176 call chpl_compute_high_param_loop_bound 1 call_tmp[564157]))
      unknown tmp[64158] "maybe param" "temp"
      (64181 'move' tmp[64158] 1)
      ParamForLoop
      { d[64155] tmp[64156] tmp[64157] tmp[64158]
        unknown call_tmp[564162] "expr temp" "maybe param" "maybe type" "temp"
        (564165 'move' call_tmp[564162](64144 call result[64130] d[64155]))
        unknown call_tmp[564167] "expr temp" "maybe param" "maybe type" "temp"
        (564170 'move' call_tmp[564167](64149 call y[64101] d[64155]))
        unknown call_tmp[564172] "expr temp" "maybe param" "maybe type" "temp"
        (564175 'move' call_tmp[564172](64150 call - x[64095] call_tmp[564167]))
        (64152 call = call_tmp[564162] call_tmp[564172])
      }
      label _unused_continueLabel[64160]
      label _breakLabel[64159]
    }
    (459986 'move' ret[459981](459985 'deref' result[64130]))
    (459983 return ret[459981])
  }
  where {
    unknown tmp[394461] "maybe param" "temp"
    (394472 'move' tmp[394461](64107 call isHomogeneousTuple y[64101]))
    unknown call_tmp[564177] "expr temp" "maybe param" "maybe type" "temp"
    (564180 'move' call_tmp[564177](394474 call _cond_invalid tmp[394461]))
    if call_tmp[564177]
    {
      (394477 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504004] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504005] "maybe param" "temp"
    unknown call_tmp[564182] "expr temp" "maybe param" "maybe type" "temp"
    (564185 'move' call_tmp[564182](394462 call isTrue tmp[394461]))
    (504010 'move' tmp[504005](504008 call _cond_test call_tmp[564182]))
    if tmp[504005]
    {
      { scopeless type
        unknown call_type_tmp[442957] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[564187] "expr temp" "maybe param" "maybe type" "temp"
        (564190 'move' call_tmp[564187](64114 call y[64101] 1))
        (442961 'move' call_type_tmp[442957](64115 'typeof' call_tmp[564187]))
      }
      unknown tmp[504012] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[564192] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (564195 'move' call_tmp[564192](430017 'typeof' x[64095]))
      unknown call_tmp[564197] "expr temp" "maybe param" "maybe type" "temp"
      (564200 'move' call_tmp[564197](328448 'is_subtype' call_type_tmp[442957] call_tmp[564192]))
      (504014 'move' tmp[504012](394465 call isTrue call_tmp[564197]))
      (504019 'move' tmp[504004](504016 '_paramFoldLogical' tmp[504005] tmp[504012]))
    }
    {
      (504024 'move' tmp[504004](504021 '_paramFoldLogical' tmp[504005] 0))
    }
    (691795 call _statementLevelSymbol tmp[504004])
  }
  function *[64204](arg x[64201]:_tuple[58502](?), arg y[64211] :
  unknown call_tmp[564202] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[459990] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442963] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564207] "expr temp" "maybe param" "maybe type" "temp"
      (564210 'move' call_tmp[564207](64225 call x[64201] 1))
      (442967 'move' call_type_tmp[442963](64226 'typeof' call_tmp[564207]))
    }
    unknown result[64229] "insert auto destroy"
    unknown call_tmp[564214] "expr temp" "maybe param" "maybe type" "temp"
    (564217 'move' call_tmp[564214](64219 call size _mt[232] x[64201]))
    unknown call_tmp[564219] "expr temp" "maybe param" "maybe type" "temp"
    (564222 'move' call_tmp[564219](64227 call * call_tmp[564214] call_type_tmp[442963]))
    (489564 'default init var' result[64229] call_tmp[564219])
    {
      unknown d[64254] "insert auto destroy"
      (489566 'init var' d[64254] 0)
      unknown tmp[64255] "maybe param" "temp"
      unknown call_tmp[564226] "expr temp" "maybe param" "maybe type" "temp"
      (564229 'move' call_tmp[564226](64235 call size _mt[232] x[64201]))
      (64267 'move' tmp[64255](64265 call chpl_compute_low_param_loop_bound 1 call_tmp[564226]))
      unknown tmp[64256] "maybe param" "temp"
      unknown call_tmp[564233] "expr temp" "maybe param" "maybe type" "temp"
      (564236 'move' call_tmp[564233](64272 call size _mt[232] x[64201]))
      (64277 'move' tmp[64256](64275 call chpl_compute_high_param_loop_bound 1 call_tmp[564233]))
      unknown tmp[64257] "maybe param" "temp"
      (64280 'move' tmp[64257] 1)
      ParamForLoop
      { d[64254] tmp[64255] tmp[64256] tmp[64257]
        unknown call_tmp[564238] "expr temp" "maybe param" "maybe type" "temp"
        (564241 'move' call_tmp[564238](64243 call result[64229] d[64254]))
        unknown call_tmp[564243] "expr temp" "maybe param" "maybe type" "temp"
        (564246 'move' call_tmp[564243](64247 call x[64201] d[64254]))
        unknown call_tmp[564248] "expr temp" "maybe param" "maybe type" "temp"
        (564251 'move' call_tmp[564248](64249 call * call_tmp[564243] y[64211]))
        (64251 call = call_tmp[564238] call_tmp[564248])
      }
      label _unused_continueLabel[64259]
      label _breakLabel[64258]
    }
    (459995 'move' ret[459990](459994 'deref' result[64229]))
    (459992 return ret[459990])
  }
  where {
    (64217 call isHomogeneousTuple x[64201])
  }
  function *[64304](arg x[64301]:_any[170](?), arg y[64307]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[459999] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442969] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564253] "expr temp" "maybe param" "maybe type" "temp"
      (564256 'move' call_tmp[564253](64332 call y[64307] 1))
      (442973 'move' call_type_tmp[442969](64333 'typeof' call_tmp[564253]))
    }
    unknown result[64336] "insert auto destroy"
    unknown call_tmp[564260] "expr temp" "maybe param" "maybe type" "temp"
    (564263 'move' call_tmp[564260](64326 call size _mt[232] y[64307]))
    unknown call_tmp[564265] "expr temp" "maybe param" "maybe type" "temp"
    (564268 'move' call_tmp[564265](64334 call * call_tmp[564260] call_type_tmp[442969]))
    (489568 'default init var' result[64336] call_tmp[564265])
    {
      unknown d[64361] "insert auto destroy"
      (489570 'init var' d[64361] 0)
      unknown tmp[64362] "maybe param" "temp"
      unknown call_tmp[564272] "expr temp" "maybe param" "maybe type" "temp"
      (564275 'move' call_tmp[564272](64342 call size _mt[232] y[64307]))
      (64374 'move' tmp[64362](64372 call chpl_compute_low_param_loop_bound 1 call_tmp[564272]))
      unknown tmp[64363] "maybe param" "temp"
      unknown call_tmp[564279] "expr temp" "maybe param" "maybe type" "temp"
      (564282 'move' call_tmp[564279](64379 call size _mt[232] y[64307]))
      (64384 'move' tmp[64363](64382 call chpl_compute_high_param_loop_bound 1 call_tmp[564279]))
      unknown tmp[64364] "maybe param" "temp"
      (64387 'move' tmp[64364] 1)
      ParamForLoop
      { d[64361] tmp[64362] tmp[64363] tmp[64364]
        unknown call_tmp[564284] "expr temp" "maybe param" "maybe type" "temp"
        (564287 'move' call_tmp[564284](64350 call result[64336] d[64361]))
        unknown call_tmp[564289] "expr temp" "maybe param" "maybe type" "temp"
        (564292 'move' call_tmp[564289](64355 call y[64307] d[64361]))
        unknown call_tmp[564294] "expr temp" "maybe param" "maybe type" "temp"
        (564297 'move' call_tmp[564294](64356 call * x[64301] call_tmp[564289]))
        (64358 call = call_tmp[564284] call_tmp[564294])
      }
      label _unused_continueLabel[64366]
      label _breakLabel[64365]
    }
    (460004 'move' ret[459999](460003 'deref' result[64336]))
    (460001 return ret[459999])
  }
  where {
    unknown tmp[394482] "maybe param" "temp"
    (394493 'move' tmp[394482](64313 call isHomogeneousTuple y[64307]))
    unknown call_tmp[564299] "expr temp" "maybe param" "maybe type" "temp"
    (564302 'move' call_tmp[564299](394495 call _cond_invalid tmp[394482]))
    if call_tmp[564299]
    {
      (394498 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504031] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504032] "maybe param" "temp"
    unknown call_tmp[564304] "expr temp" "maybe param" "maybe type" "temp"
    (564307 'move' call_tmp[564304](394483 call isTrue tmp[394482]))
    (504037 'move' tmp[504032](504035 call _cond_test call_tmp[564304]))
    if tmp[504032]
    {
      { scopeless type
        unknown call_type_tmp[442975] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[564309] "expr temp" "maybe param" "maybe type" "temp"
        (564312 'move' call_tmp[564309](64320 call y[64307] 1))
        (442979 'move' call_type_tmp[442975](64321 'typeof' call_tmp[564309]))
      }
      unknown tmp[504039] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[564314] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (564317 'move' call_tmp[564314](430019 'typeof' x[64301]))
      unknown call_tmp[564319] "expr temp" "maybe param" "maybe type" "temp"
      (564322 'move' call_tmp[564319](328449 'is_subtype' call_type_tmp[442975] call_tmp[564314]))
      (504041 'move' tmp[504039](394486 call isTrue call_tmp[564319]))
      (504046 'move' tmp[504031](504043 '_paramFoldLogical' tmp[504032] tmp[504039]))
    }
    {
      (504051 'move' tmp[504031](504048 '_paramFoldLogical' tmp[504032] 0))
    }
    (691797 call _statementLevelSymbol tmp[504031])
  }
  function /[64410](arg x[64407]:_tuple[58502](?), arg y[64417] :
  unknown call_tmp[564324] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[460008] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442981] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564329] "expr temp" "maybe param" "maybe type" "temp"
      (564332 'move' call_tmp[564329](64431 call x[64407] 1))
      (442985 'move' call_type_tmp[442981](64432 'typeof' call_tmp[564329]))
    }
    unknown result[64435] "insert auto destroy"
    unknown call_tmp[564336] "expr temp" "maybe param" "maybe type" "temp"
    (564339 'move' call_tmp[564336](64425 call size _mt[232] x[64407]))
    unknown call_tmp[564341] "expr temp" "maybe param" "maybe type" "temp"
    (564344 'move' call_tmp[564341](64433 call * call_tmp[564336] call_type_tmp[442981]))
    (489572 'default init var' result[64435] call_tmp[564341])
    {
      unknown d[64460] "insert auto destroy"
      (489574 'init var' d[64460] 0)
      unknown tmp[64461] "maybe param" "temp"
      unknown call_tmp[564348] "expr temp" "maybe param" "maybe type" "temp"
      (564351 'move' call_tmp[564348](64441 call size _mt[232] x[64407]))
      (64473 'move' tmp[64461](64471 call chpl_compute_low_param_loop_bound 1 call_tmp[564348]))
      unknown tmp[64462] "maybe param" "temp"
      unknown call_tmp[564355] "expr temp" "maybe param" "maybe type" "temp"
      (564358 'move' call_tmp[564355](64478 call size _mt[232] x[64407]))
      (64483 'move' tmp[64462](64481 call chpl_compute_high_param_loop_bound 1 call_tmp[564355]))
      unknown tmp[64463] "maybe param" "temp"
      (64486 'move' tmp[64463] 1)
      ParamForLoop
      { d[64460] tmp[64461] tmp[64462] tmp[64463]
        unknown call_tmp[564360] "expr temp" "maybe param" "maybe type" "temp"
        (564363 'move' call_tmp[564360](64449 call result[64435] d[64460]))
        unknown call_tmp[564365] "expr temp" "maybe param" "maybe type" "temp"
        (564368 'move' call_tmp[564365](64453 call x[64407] d[64460]))
        unknown call_tmp[564370] "expr temp" "maybe param" "maybe type" "temp"
        (564373 'move' call_tmp[564370](64455 call / call_tmp[564365] y[64417]))
        (64457 call = call_tmp[564360] call_tmp[564370])
      }
      label _unused_continueLabel[64465]
      label _breakLabel[64464]
    }
    (460013 'move' ret[460008](460012 'deref' result[64435]))
    (460010 return ret[460008])
  }
  where {
    (64423 call isHomogeneousTuple x[64407])
  }
  function /[64510](arg x[64507]:_any[170](?), arg y[64513]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[460017] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442987] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564375] "expr temp" "maybe param" "maybe type" "temp"
      (564378 'move' call_tmp[564375](64538 call y[64513] 1))
      (442991 'move' call_type_tmp[442987](64539 'typeof' call_tmp[564375]))
    }
    unknown result[64542] "insert auto destroy"
    unknown call_tmp[564382] "expr temp" "maybe param" "maybe type" "temp"
    (564385 'move' call_tmp[564382](64532 call size _mt[232] y[64513]))
    unknown call_tmp[564387] "expr temp" "maybe param" "maybe type" "temp"
    (564390 'move' call_tmp[564387](64540 call * call_tmp[564382] call_type_tmp[442987]))
    (489576 'default init var' result[64542] call_tmp[564387])
    {
      unknown d[64567] "insert auto destroy"
      (489578 'init var' d[64567] 0)
      unknown tmp[64568] "maybe param" "temp"
      unknown call_tmp[564394] "expr temp" "maybe param" "maybe type" "temp"
      (564397 'move' call_tmp[564394](64548 call size _mt[232] y[64513]))
      (64580 'move' tmp[64568](64578 call chpl_compute_low_param_loop_bound 1 call_tmp[564394]))
      unknown tmp[64569] "maybe param" "temp"
      unknown call_tmp[564401] "expr temp" "maybe param" "maybe type" "temp"
      (564404 'move' call_tmp[564401](64585 call size _mt[232] y[64513]))
      (64590 'move' tmp[64569](64588 call chpl_compute_high_param_loop_bound 1 call_tmp[564401]))
      unknown tmp[64570] "maybe param" "temp"
      (64593 'move' tmp[64570] 1)
      ParamForLoop
      { d[64567] tmp[64568] tmp[64569] tmp[64570]
        unknown call_tmp[564406] "expr temp" "maybe param" "maybe type" "temp"
        (564409 'move' call_tmp[564406](64556 call result[64542] d[64567]))
        unknown call_tmp[564411] "expr temp" "maybe param" "maybe type" "temp"
        (564414 'move' call_tmp[564411](64561 call y[64513] d[64567]))
        unknown call_tmp[564416] "expr temp" "maybe param" "maybe type" "temp"
        (564419 'move' call_tmp[564416](64562 call / x[64507] call_tmp[564411]))
        (64564 call = call_tmp[564406] call_tmp[564416])
      }
      label _unused_continueLabel[64572]
      label _breakLabel[64571]
    }
    (460022 'move' ret[460017](460021 'deref' result[64542]))
    (460019 return ret[460017])
  }
  where {
    unknown tmp[394503] "maybe param" "temp"
    (394514 'move' tmp[394503](64519 call isHomogeneousTuple y[64513]))
    unknown call_tmp[564421] "expr temp" "maybe param" "maybe type" "temp"
    (564424 'move' call_tmp[564421](394516 call _cond_invalid tmp[394503]))
    if call_tmp[564421]
    {
      (394519 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504058] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504059] "maybe param" "temp"
    unknown call_tmp[564426] "expr temp" "maybe param" "maybe type" "temp"
    (564429 'move' call_tmp[564426](394504 call isTrue tmp[394503]))
    (504064 'move' tmp[504059](504062 call _cond_test call_tmp[564426]))
    if tmp[504059]
    {
      { scopeless type
        unknown call_type_tmp[442993] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[564431] "expr temp" "maybe param" "maybe type" "temp"
        (564434 'move' call_tmp[564431](64526 call y[64513] 1))
        (442997 'move' call_type_tmp[442993](64527 'typeof' call_tmp[564431]))
      }
      unknown tmp[504066] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[564436] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (564439 'move' call_tmp[564436](430021 'typeof' x[64507]))
      unknown call_tmp[564441] "expr temp" "maybe param" "maybe type" "temp"
      (564444 'move' call_tmp[564441](328450 'is_subtype' call_type_tmp[442993] call_tmp[564436]))
      (504068 'move' tmp[504066](394507 call isTrue call_tmp[564441]))
      (504073 'move' tmp[504058](504070 '_paramFoldLogical' tmp[504059] tmp[504066]))
    }
    {
      (504078 'move' tmp[504058](504075 '_paramFoldLogical' tmp[504059] 0))
    }
    (691799 call _statementLevelSymbol tmp[504058])
  }
  function %[64616](arg x[64613]:_tuple[58502](?), arg y[64623] :
  unknown call_tmp[564446] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[460026] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[442999] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564451] "expr temp" "maybe param" "maybe type" "temp"
      (564454 'move' call_tmp[564451](64637 call x[64613] 1))
      (443003 'move' call_type_tmp[442999](64638 'typeof' call_tmp[564451]))
    }
    unknown result[64641] "insert auto destroy"
    unknown call_tmp[564458] "expr temp" "maybe param" "maybe type" "temp"
    (564461 'move' call_tmp[564458](64631 call size _mt[232] x[64613]))
    unknown call_tmp[564463] "expr temp" "maybe param" "maybe type" "temp"
    (564466 'move' call_tmp[564463](64639 call * call_tmp[564458] call_type_tmp[442999]))
    (489580 'default init var' result[64641] call_tmp[564463])
    {
      unknown d[64666] "insert auto destroy"
      (489582 'init var' d[64666] 0)
      unknown tmp[64667] "maybe param" "temp"
      unknown call_tmp[564470] "expr temp" "maybe param" "maybe type" "temp"
      (564473 'move' call_tmp[564470](64647 call size _mt[232] x[64613]))
      (64679 'move' tmp[64667](64677 call chpl_compute_low_param_loop_bound 1 call_tmp[564470]))
      unknown tmp[64668] "maybe param" "temp"
      unknown call_tmp[564477] "expr temp" "maybe param" "maybe type" "temp"
      (564480 'move' call_tmp[564477](64684 call size _mt[232] x[64613]))
      (64689 'move' tmp[64668](64687 call chpl_compute_high_param_loop_bound 1 call_tmp[564477]))
      unknown tmp[64669] "maybe param" "temp"
      (64692 'move' tmp[64669] 1)
      ParamForLoop
      { d[64666] tmp[64667] tmp[64668] tmp[64669]
        unknown call_tmp[564482] "expr temp" "maybe param" "maybe type" "temp"
        (564485 'move' call_tmp[564482](64655 call result[64641] d[64666]))
        unknown call_tmp[564487] "expr temp" "maybe param" "maybe type" "temp"
        (564490 'move' call_tmp[564487](64659 call x[64613] d[64666]))
        unknown call_tmp[564492] "expr temp" "maybe param" "maybe type" "temp"
        (564495 'move' call_tmp[564492](64661 call % call_tmp[564487] y[64623]))
        (64663 call = call_tmp[564482] call_tmp[564492])
      }
      label _unused_continueLabel[64671]
      label _breakLabel[64670]
    }
    (460031 'move' ret[460026](460030 'deref' result[64641]))
    (460028 return ret[460026])
  }
  where {
    (64629 call isHomogeneousTuple x[64613])
  }
  function %[64716](arg x[64713]:_any[170](?), arg y[64719]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[460035] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443005] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564497] "expr temp" "maybe param" "maybe type" "temp"
      (564500 'move' call_tmp[564497](64744 call y[64719] 1))
      (443009 'move' call_type_tmp[443005](64745 'typeof' call_tmp[564497]))
    }
    unknown result[64748] "insert auto destroy"
    unknown call_tmp[564504] "expr temp" "maybe param" "maybe type" "temp"
    (564507 'move' call_tmp[564504](64738 call size _mt[232] y[64719]))
    unknown call_tmp[564509] "expr temp" "maybe param" "maybe type" "temp"
    (564512 'move' call_tmp[564509](64746 call * call_tmp[564504] call_type_tmp[443005]))
    (489584 'default init var' result[64748] call_tmp[564509])
    {
      unknown d[64773] "insert auto destroy"
      (489586 'init var' d[64773] 0)
      unknown tmp[64774] "maybe param" "temp"
      unknown call_tmp[564516] "expr temp" "maybe param" "maybe type" "temp"
      (564519 'move' call_tmp[564516](64754 call size _mt[232] y[64719]))
      (64786 'move' tmp[64774](64784 call chpl_compute_low_param_loop_bound 1 call_tmp[564516]))
      unknown tmp[64775] "maybe param" "temp"
      unknown call_tmp[564523] "expr temp" "maybe param" "maybe type" "temp"
      (564526 'move' call_tmp[564523](64791 call size _mt[232] y[64719]))
      (64796 'move' tmp[64775](64794 call chpl_compute_high_param_loop_bound 1 call_tmp[564523]))
      unknown tmp[64776] "maybe param" "temp"
      (64799 'move' tmp[64776] 1)
      ParamForLoop
      { d[64773] tmp[64774] tmp[64775] tmp[64776]
        unknown call_tmp[564528] "expr temp" "maybe param" "maybe type" "temp"
        (564531 'move' call_tmp[564528](64762 call result[64748] d[64773]))
        unknown call_tmp[564533] "expr temp" "maybe param" "maybe type" "temp"
        (564536 'move' call_tmp[564533](64767 call y[64719] d[64773]))
        unknown call_tmp[564538] "expr temp" "maybe param" "maybe type" "temp"
        (564541 'move' call_tmp[564538](64768 call % x[64713] call_tmp[564533]))
        (64770 call = call_tmp[564528] call_tmp[564538])
      }
      label _unused_continueLabel[64778]
      label _breakLabel[64777]
    }
    (460040 'move' ret[460035](460039 'deref' result[64748]))
    (460037 return ret[460035])
  }
  where {
    unknown tmp[394524] "maybe param" "temp"
    (394535 'move' tmp[394524](64725 call isHomogeneousTuple y[64719]))
    unknown call_tmp[564543] "expr temp" "maybe param" "maybe type" "temp"
    (564546 'move' call_tmp[564543](394537 call _cond_invalid tmp[394524]))
    if call_tmp[564543]
    {
      (394540 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504085] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504086] "maybe param" "temp"
    unknown call_tmp[564548] "expr temp" "maybe param" "maybe type" "temp"
    (564551 'move' call_tmp[564548](394525 call isTrue tmp[394524]))
    (504091 'move' tmp[504086](504089 call _cond_test call_tmp[564548]))
    if tmp[504086]
    {
      { scopeless type
        unknown call_type_tmp[443011] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[564553] "expr temp" "maybe param" "maybe type" "temp"
        (564556 'move' call_tmp[564553](64732 call y[64719] 1))
        (443015 'move' call_type_tmp[443011](64733 'typeof' call_tmp[564553]))
      }
      unknown tmp[504093] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[564558] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (564561 'move' call_tmp[564558](430023 'typeof' x[64713]))
      unknown call_tmp[564563] "expr temp" "maybe param" "maybe type" "temp"
      (564566 'move' call_tmp[564563](328451 'is_subtype' call_type_tmp[443011] call_tmp[564558]))
      (504095 'move' tmp[504093](394528 call isTrue call_tmp[564563]))
      (504100 'move' tmp[504085](504097 '_paramFoldLogical' tmp[504086] tmp[504093]))
    }
    {
      (504105 'move' tmp[504085](504102 '_paramFoldLogical' tmp[504086] 0))
    }
    (691801 call _statementLevelSymbol tmp[504085])
  }
  function **[64822](arg x[64819]:_tuple[58502](?), arg y[64829] :
  unknown call_tmp[564568] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[460044] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443017] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564573] "expr temp" "maybe param" "maybe type" "temp"
      (564576 'move' call_tmp[564573](64843 call x[64819] 1))
      (443021 'move' call_type_tmp[443017](64844 'typeof' call_tmp[564573]))
    }
    unknown result[64847] "insert auto destroy"
    unknown call_tmp[564580] "expr temp" "maybe param" "maybe type" "temp"
    (564583 'move' call_tmp[564580](64837 call size _mt[232] x[64819]))
    unknown call_tmp[564585] "expr temp" "maybe param" "maybe type" "temp"
    (564588 'move' call_tmp[564585](64845 call * call_tmp[564580] call_type_tmp[443017]))
    (489588 'default init var' result[64847] call_tmp[564585])
    {
      unknown d[64872] "insert auto destroy"
      (489590 'init var' d[64872] 0)
      unknown tmp[64873] "maybe param" "temp"
      unknown call_tmp[564592] "expr temp" "maybe param" "maybe type" "temp"
      (564595 'move' call_tmp[564592](64853 call size _mt[232] x[64819]))
      (64885 'move' tmp[64873](64883 call chpl_compute_low_param_loop_bound 1 call_tmp[564592]))
      unknown tmp[64874] "maybe param" "temp"
      unknown call_tmp[564599] "expr temp" "maybe param" "maybe type" "temp"
      (564602 'move' call_tmp[564599](64890 call size _mt[232] x[64819]))
      (64895 'move' tmp[64874](64893 call chpl_compute_high_param_loop_bound 1 call_tmp[564599]))
      unknown tmp[64875] "maybe param" "temp"
      (64898 'move' tmp[64875] 1)
      ParamForLoop
      { d[64872] tmp[64873] tmp[64874] tmp[64875]
        unknown call_tmp[564604] "expr temp" "maybe param" "maybe type" "temp"
        (564607 'move' call_tmp[564604](64861 call result[64847] d[64872]))
        unknown call_tmp[564609] "expr temp" "maybe param" "maybe type" "temp"
        (564612 'move' call_tmp[564609](64865 call x[64819] d[64872]))
        unknown call_tmp[564614] "expr temp" "maybe param" "maybe type" "temp"
        (564617 'move' call_tmp[564614](64867 call ** call_tmp[564609] y[64829]))
        (64869 call = call_tmp[564604] call_tmp[564614])
      }
      label _unused_continueLabel[64877]
      label _breakLabel[64876]
    }
    (460049 'move' ret[460044](460048 'deref' result[64847]))
    (460046 return ret[460044])
  }
  where {
    (64835 call isHomogeneousTuple x[64819])
  }
  function **[64922](arg x[64919]:_any[170](?), arg y[64925]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[460053] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443023] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564619] "expr temp" "maybe param" "maybe type" "temp"
      (564622 'move' call_tmp[564619](64950 call y[64925] 1))
      (443027 'move' call_type_tmp[443023](64951 'typeof' call_tmp[564619]))
    }
    unknown result[64954] "insert auto destroy"
    unknown call_tmp[564626] "expr temp" "maybe param" "maybe type" "temp"
    (564629 'move' call_tmp[564626](64944 call size _mt[232] y[64925]))
    unknown call_tmp[564631] "expr temp" "maybe param" "maybe type" "temp"
    (564634 'move' call_tmp[564631](64952 call * call_tmp[564626] call_type_tmp[443023]))
    (489592 'default init var' result[64954] call_tmp[564631])
    {
      unknown d[64979] "insert auto destroy"
      (489594 'init var' d[64979] 0)
      unknown tmp[64980] "maybe param" "temp"
      unknown call_tmp[564638] "expr temp" "maybe param" "maybe type" "temp"
      (564641 'move' call_tmp[564638](64960 call size _mt[232] y[64925]))
      (64992 'move' tmp[64980](64990 call chpl_compute_low_param_loop_bound 1 call_tmp[564638]))
      unknown tmp[64981] "maybe param" "temp"
      unknown call_tmp[564645] "expr temp" "maybe param" "maybe type" "temp"
      (564648 'move' call_tmp[564645](64997 call size _mt[232] y[64925]))
      (65002 'move' tmp[64981](65000 call chpl_compute_high_param_loop_bound 1 call_tmp[564645]))
      unknown tmp[64982] "maybe param" "temp"
      (65005 'move' tmp[64982] 1)
      ParamForLoop
      { d[64979] tmp[64980] tmp[64981] tmp[64982]
        unknown call_tmp[564650] "expr temp" "maybe param" "maybe type" "temp"
        (564653 'move' call_tmp[564650](64968 call result[64954] d[64979]))
        unknown call_tmp[564655] "expr temp" "maybe param" "maybe type" "temp"
        (564658 'move' call_tmp[564655](64973 call y[64925] d[64979]))
        unknown call_tmp[564660] "expr temp" "maybe param" "maybe type" "temp"
        (564663 'move' call_tmp[564660](64974 call ** x[64919] call_tmp[564655]))
        (64976 call = call_tmp[564650] call_tmp[564660])
      }
      label _unused_continueLabel[64984]
      label _breakLabel[64983]
    }
    (460058 'move' ret[460053](460057 'deref' result[64954]))
    (460055 return ret[460053])
  }
  where {
    unknown tmp[394545] "maybe param" "temp"
    (394556 'move' tmp[394545](64931 call isHomogeneousTuple y[64925]))
    unknown call_tmp[564665] "expr temp" "maybe param" "maybe type" "temp"
    (564668 'move' call_tmp[564665](394558 call _cond_invalid tmp[394545]))
    if call_tmp[564665]
    {
      (394561 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504112] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504113] "maybe param" "temp"
    unknown call_tmp[564670] "expr temp" "maybe param" "maybe type" "temp"
    (564673 'move' call_tmp[564670](394546 call isTrue tmp[394545]))
    (504118 'move' tmp[504113](504116 call _cond_test call_tmp[564670]))
    if tmp[504113]
    {
      { scopeless type
        unknown call_type_tmp[443029] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[564675] "expr temp" "maybe param" "maybe type" "temp"
        (564678 'move' call_tmp[564675](64938 call y[64925] 1))
        (443033 'move' call_type_tmp[443029](64939 'typeof' call_tmp[564675]))
      }
      unknown tmp[504120] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[564680] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (564683 'move' call_tmp[564680](430025 'typeof' x[64919]))
      unknown call_tmp[564685] "expr temp" "maybe param" "maybe type" "temp"
      (564688 'move' call_tmp[564685](328452 'is_subtype' call_type_tmp[443029] call_tmp[564680]))
      (504122 'move' tmp[504120](394549 call isTrue call_tmp[564685]))
      (504127 'move' tmp[504112](504124 '_paramFoldLogical' tmp[504113] tmp[504120]))
    }
    {
      (504132 'move' tmp[504112](504129 '_paramFoldLogical' tmp[504113] 0))
    }
    (691803 call _statementLevelSymbol tmp[504112])
  }
  function &[65028](arg x[65025]:_tuple[58502](?), arg y[65035] :
  unknown call_tmp[564690] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[460062] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443035] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564695] "expr temp" "maybe param" "maybe type" "temp"
      (564698 'move' call_tmp[564695](65049 call x[65025] 1))
      (443039 'move' call_type_tmp[443035](65050 'typeof' call_tmp[564695]))
    }
    unknown result[65053] "insert auto destroy"
    unknown call_tmp[564702] "expr temp" "maybe param" "maybe type" "temp"
    (564705 'move' call_tmp[564702](65043 call size _mt[232] x[65025]))
    unknown call_tmp[564707] "expr temp" "maybe param" "maybe type" "temp"
    (564710 'move' call_tmp[564707](65051 call * call_tmp[564702] call_type_tmp[443035]))
    (489596 'default init var' result[65053] call_tmp[564707])
    {
      unknown d[65078] "insert auto destroy"
      (489598 'init var' d[65078] 0)
      unknown tmp[65079] "maybe param" "temp"
      unknown call_tmp[564714] "expr temp" "maybe param" "maybe type" "temp"
      (564717 'move' call_tmp[564714](65059 call size _mt[232] x[65025]))
      (65091 'move' tmp[65079](65089 call chpl_compute_low_param_loop_bound 1 call_tmp[564714]))
      unknown tmp[65080] "maybe param" "temp"
      unknown call_tmp[564721] "expr temp" "maybe param" "maybe type" "temp"
      (564724 'move' call_tmp[564721](65096 call size _mt[232] x[65025]))
      (65101 'move' tmp[65080](65099 call chpl_compute_high_param_loop_bound 1 call_tmp[564721]))
      unknown tmp[65081] "maybe param" "temp"
      (65104 'move' tmp[65081] 1)
      ParamForLoop
      { d[65078] tmp[65079] tmp[65080] tmp[65081]
        unknown call_tmp[564726] "expr temp" "maybe param" "maybe type" "temp"
        (564729 'move' call_tmp[564726](65067 call result[65053] d[65078]))
        unknown call_tmp[564731] "expr temp" "maybe param" "maybe type" "temp"
        (564734 'move' call_tmp[564731](65071 call x[65025] d[65078]))
        unknown call_tmp[564736] "expr temp" "maybe param" "maybe type" "temp"
        (564739 'move' call_tmp[564736](65073 call & call_tmp[564731] y[65035]))
        (65075 call = call_tmp[564726] call_tmp[564736])
      }
      label _unused_continueLabel[65083]
      label _breakLabel[65082]
    }
    (460067 'move' ret[460062](460066 'deref' result[65053]))
    (460064 return ret[460062])
  }
  where {
    (65041 call isHomogeneousTuple x[65025])
  }
  function &[65128](arg x[65125]:_any[170](?), arg y[65131]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[460071] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443041] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564741] "expr temp" "maybe param" "maybe type" "temp"
      (564744 'move' call_tmp[564741](65156 call y[65131] 1))
      (443045 'move' call_type_tmp[443041](65157 'typeof' call_tmp[564741]))
    }
    unknown result[65160] "insert auto destroy"
    unknown call_tmp[564748] "expr temp" "maybe param" "maybe type" "temp"
    (564751 'move' call_tmp[564748](65150 call size _mt[232] y[65131]))
    unknown call_tmp[564753] "expr temp" "maybe param" "maybe type" "temp"
    (564756 'move' call_tmp[564753](65158 call * call_tmp[564748] call_type_tmp[443041]))
    (489600 'default init var' result[65160] call_tmp[564753])
    {
      unknown d[65185] "insert auto destroy"
      (489602 'init var' d[65185] 0)
      unknown tmp[65186] "maybe param" "temp"
      unknown call_tmp[564760] "expr temp" "maybe param" "maybe type" "temp"
      (564763 'move' call_tmp[564760](65166 call size _mt[232] y[65131]))
      (65198 'move' tmp[65186](65196 call chpl_compute_low_param_loop_bound 1 call_tmp[564760]))
      unknown tmp[65187] "maybe param" "temp"
      unknown call_tmp[564767] "expr temp" "maybe param" "maybe type" "temp"
      (564770 'move' call_tmp[564767](65203 call size _mt[232] y[65131]))
      (65208 'move' tmp[65187](65206 call chpl_compute_high_param_loop_bound 1 call_tmp[564767]))
      unknown tmp[65188] "maybe param" "temp"
      (65211 'move' tmp[65188] 1)
      ParamForLoop
      { d[65185] tmp[65186] tmp[65187] tmp[65188]
        unknown call_tmp[564772] "expr temp" "maybe param" "maybe type" "temp"
        (564775 'move' call_tmp[564772](65174 call result[65160] d[65185]))
        unknown call_tmp[564777] "expr temp" "maybe param" "maybe type" "temp"
        (564780 'move' call_tmp[564777](65179 call y[65131] d[65185]))
        unknown call_tmp[564782] "expr temp" "maybe param" "maybe type" "temp"
        (564785 'move' call_tmp[564782](65180 call & x[65125] call_tmp[564777]))
        (65182 call = call_tmp[564772] call_tmp[564782])
      }
      label _unused_continueLabel[65190]
      label _breakLabel[65189]
    }
    (460076 'move' ret[460071](460075 'deref' result[65160]))
    (460073 return ret[460071])
  }
  where {
    unknown tmp[394566] "maybe param" "temp"
    (394577 'move' tmp[394566](65137 call isHomogeneousTuple y[65131]))
    unknown call_tmp[564787] "expr temp" "maybe param" "maybe type" "temp"
    (564790 'move' call_tmp[564787](394579 call _cond_invalid tmp[394566]))
    if call_tmp[564787]
    {
      (394582 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504139] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504140] "maybe param" "temp"
    unknown call_tmp[564792] "expr temp" "maybe param" "maybe type" "temp"
    (564795 'move' call_tmp[564792](394567 call isTrue tmp[394566]))
    (504145 'move' tmp[504140](504143 call _cond_test call_tmp[564792]))
    if tmp[504140]
    {
      { scopeless type
        unknown call_type_tmp[443047] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[564797] "expr temp" "maybe param" "maybe type" "temp"
        (564800 'move' call_tmp[564797](65144 call y[65131] 1))
        (443051 'move' call_type_tmp[443047](65145 'typeof' call_tmp[564797]))
      }
      unknown tmp[504147] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[564802] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (564805 'move' call_tmp[564802](430027 'typeof' x[65125]))
      unknown call_tmp[564807] "expr temp" "maybe param" "maybe type" "temp"
      (564810 'move' call_tmp[564807](328453 'is_subtype' call_type_tmp[443047] call_tmp[564802]))
      (504149 'move' tmp[504147](394570 call isTrue call_tmp[564807]))
      (504154 'move' tmp[504139](504151 '_paramFoldLogical' tmp[504140] tmp[504147]))
    }
    {
      (504159 'move' tmp[504139](504156 '_paramFoldLogical' tmp[504140] 0))
    }
    (691805 call _statementLevelSymbol tmp[504139])
  }
  function |[65234](arg x[65231]:_tuple[58502](?), arg y[65241] :
  unknown call_tmp[564812] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[460080] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443053] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564817] "expr temp" "maybe param" "maybe type" "temp"
      (564820 'move' call_tmp[564817](65255 call x[65231] 1))
      (443057 'move' call_type_tmp[443053](65256 'typeof' call_tmp[564817]))
    }
    unknown result[65259] "insert auto destroy"
    unknown call_tmp[564824] "expr temp" "maybe param" "maybe type" "temp"
    (564827 'move' call_tmp[564824](65249 call size _mt[232] x[65231]))
    unknown call_tmp[564829] "expr temp" "maybe param" "maybe type" "temp"
    (564832 'move' call_tmp[564829](65257 call * call_tmp[564824] call_type_tmp[443053]))
    (489604 'default init var' result[65259] call_tmp[564829])
    {
      unknown d[65284] "insert auto destroy"
      (489606 'init var' d[65284] 0)
      unknown tmp[65285] "maybe param" "temp"
      unknown call_tmp[564836] "expr temp" "maybe param" "maybe type" "temp"
      (564839 'move' call_tmp[564836](65265 call size _mt[232] x[65231]))
      (65297 'move' tmp[65285](65295 call chpl_compute_low_param_loop_bound 1 call_tmp[564836]))
      unknown tmp[65286] "maybe param" "temp"
      unknown call_tmp[564843] "expr temp" "maybe param" "maybe type" "temp"
      (564846 'move' call_tmp[564843](65302 call size _mt[232] x[65231]))
      (65307 'move' tmp[65286](65305 call chpl_compute_high_param_loop_bound 1 call_tmp[564843]))
      unknown tmp[65287] "maybe param" "temp"
      (65310 'move' tmp[65287] 1)
      ParamForLoop
      { d[65284] tmp[65285] tmp[65286] tmp[65287]
        unknown call_tmp[564848] "expr temp" "maybe param" "maybe type" "temp"
        (564851 'move' call_tmp[564848](65273 call result[65259] d[65284]))
        unknown call_tmp[564853] "expr temp" "maybe param" "maybe type" "temp"
        (564856 'move' call_tmp[564853](65277 call x[65231] d[65284]))
        unknown call_tmp[564858] "expr temp" "maybe param" "maybe type" "temp"
        (564861 'move' call_tmp[564858](65279 call | call_tmp[564853] y[65241]))
        (65281 call = call_tmp[564848] call_tmp[564858])
      }
      label _unused_continueLabel[65289]
      label _breakLabel[65288]
    }
    (460085 'move' ret[460080](460084 'deref' result[65259]))
    (460082 return ret[460080])
  }
  where {
    (65247 call isHomogeneousTuple x[65231])
  }
  function |[65334](arg x[65331]:_any[170](?), arg y[65337]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[460089] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443059] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564863] "expr temp" "maybe param" "maybe type" "temp"
      (564866 'move' call_tmp[564863](65362 call y[65337] 1))
      (443063 'move' call_type_tmp[443059](65363 'typeof' call_tmp[564863]))
    }
    unknown result[65366] "insert auto destroy"
    unknown call_tmp[564870] "expr temp" "maybe param" "maybe type" "temp"
    (564873 'move' call_tmp[564870](65356 call size _mt[232] y[65337]))
    unknown call_tmp[564875] "expr temp" "maybe param" "maybe type" "temp"
    (564878 'move' call_tmp[564875](65364 call * call_tmp[564870] call_type_tmp[443059]))
    (489608 'default init var' result[65366] call_tmp[564875])
    {
      unknown d[65391] "insert auto destroy"
      (489610 'init var' d[65391] 0)
      unknown tmp[65392] "maybe param" "temp"
      unknown call_tmp[564882] "expr temp" "maybe param" "maybe type" "temp"
      (564885 'move' call_tmp[564882](65372 call size _mt[232] y[65337]))
      (65404 'move' tmp[65392](65402 call chpl_compute_low_param_loop_bound 1 call_tmp[564882]))
      unknown tmp[65393] "maybe param" "temp"
      unknown call_tmp[564889] "expr temp" "maybe param" "maybe type" "temp"
      (564892 'move' call_tmp[564889](65409 call size _mt[232] y[65337]))
      (65414 'move' tmp[65393](65412 call chpl_compute_high_param_loop_bound 1 call_tmp[564889]))
      unknown tmp[65394] "maybe param" "temp"
      (65417 'move' tmp[65394] 1)
      ParamForLoop
      { d[65391] tmp[65392] tmp[65393] tmp[65394]
        unknown call_tmp[564894] "expr temp" "maybe param" "maybe type" "temp"
        (564897 'move' call_tmp[564894](65380 call result[65366] d[65391]))
        unknown call_tmp[564899] "expr temp" "maybe param" "maybe type" "temp"
        (564902 'move' call_tmp[564899](65385 call y[65337] d[65391]))
        unknown call_tmp[564904] "expr temp" "maybe param" "maybe type" "temp"
        (564907 'move' call_tmp[564904](65386 call | x[65331] call_tmp[564899]))
        (65388 call = call_tmp[564894] call_tmp[564904])
      }
      label _unused_continueLabel[65396]
      label _breakLabel[65395]
    }
    (460094 'move' ret[460089](460093 'deref' result[65366]))
    (460091 return ret[460089])
  }
  where {
    unknown tmp[394587] "maybe param" "temp"
    (394598 'move' tmp[394587](65343 call isHomogeneousTuple y[65337]))
    unknown call_tmp[564909] "expr temp" "maybe param" "maybe type" "temp"
    (564912 'move' call_tmp[564909](394600 call _cond_invalid tmp[394587]))
    if call_tmp[564909]
    {
      (394603 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504166] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504167] "maybe param" "temp"
    unknown call_tmp[564914] "expr temp" "maybe param" "maybe type" "temp"
    (564917 'move' call_tmp[564914](394588 call isTrue tmp[394587]))
    (504172 'move' tmp[504167](504170 call _cond_test call_tmp[564914]))
    if tmp[504167]
    {
      { scopeless type
        unknown call_type_tmp[443065] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[564919] "expr temp" "maybe param" "maybe type" "temp"
        (564922 'move' call_tmp[564919](65350 call y[65337] 1))
        (443069 'move' call_type_tmp[443065](65351 'typeof' call_tmp[564919]))
      }
      unknown tmp[504174] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[564924] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (564927 'move' call_tmp[564924](430029 'typeof' x[65331]))
      unknown call_tmp[564929] "expr temp" "maybe param" "maybe type" "temp"
      (564932 'move' call_tmp[564929](328454 'is_subtype' call_type_tmp[443065] call_tmp[564924]))
      (504176 'move' tmp[504174](394591 call isTrue call_tmp[564929]))
      (504181 'move' tmp[504166](504178 '_paramFoldLogical' tmp[504167] tmp[504174]))
    }
    {
      (504186 'move' tmp[504166](504183 '_paramFoldLogical' tmp[504167] 0))
    }
    (691807 call _statementLevelSymbol tmp[504166])
  }
  function ^[65440](arg x[65437]:_tuple[58502](?), arg y[65447] :
  unknown call_tmp[564934] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[460098] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443071] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564939] "expr temp" "maybe param" "maybe type" "temp"
      (564942 'move' call_tmp[564939](65461 call x[65437] 1))
      (443075 'move' call_type_tmp[443071](65462 'typeof' call_tmp[564939]))
    }
    unknown result[65465] "insert auto destroy"
    unknown call_tmp[564946] "expr temp" "maybe param" "maybe type" "temp"
    (564949 'move' call_tmp[564946](65455 call size _mt[232] x[65437]))
    unknown call_tmp[564951] "expr temp" "maybe param" "maybe type" "temp"
    (564954 'move' call_tmp[564951](65463 call * call_tmp[564946] call_type_tmp[443071]))
    (489612 'default init var' result[65465] call_tmp[564951])
    {
      unknown d[65490] "insert auto destroy"
      (489614 'init var' d[65490] 0)
      unknown tmp[65491] "maybe param" "temp"
      unknown call_tmp[564958] "expr temp" "maybe param" "maybe type" "temp"
      (564961 'move' call_tmp[564958](65471 call size _mt[232] x[65437]))
      (65503 'move' tmp[65491](65501 call chpl_compute_low_param_loop_bound 1 call_tmp[564958]))
      unknown tmp[65492] "maybe param" "temp"
      unknown call_tmp[564965] "expr temp" "maybe param" "maybe type" "temp"
      (564968 'move' call_tmp[564965](65508 call size _mt[232] x[65437]))
      (65513 'move' tmp[65492](65511 call chpl_compute_high_param_loop_bound 1 call_tmp[564965]))
      unknown tmp[65493] "maybe param" "temp"
      (65516 'move' tmp[65493] 1)
      ParamForLoop
      { d[65490] tmp[65491] tmp[65492] tmp[65493]
        unknown call_tmp[564970] "expr temp" "maybe param" "maybe type" "temp"
        (564973 'move' call_tmp[564970](65479 call result[65465] d[65490]))
        unknown call_tmp[564975] "expr temp" "maybe param" "maybe type" "temp"
        (564978 'move' call_tmp[564975](65483 call x[65437] d[65490]))
        unknown call_tmp[564980] "expr temp" "maybe param" "maybe type" "temp"
        (564983 'move' call_tmp[564980](65485 call ^ call_tmp[564975] y[65447]))
        (65487 call = call_tmp[564970] call_tmp[564980])
      }
      label _unused_continueLabel[65495]
      label _breakLabel[65494]
    }
    (460103 'move' ret[460098](460102 'deref' result[65465]))
    (460100 return ret[460098])
  }
  where {
    (65453 call isHomogeneousTuple x[65437])
  }
  function ^[65540](arg x[65537]:_any[170](?), arg y[65543]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[460107] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443077] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[564985] "expr temp" "maybe param" "maybe type" "temp"
      (564988 'move' call_tmp[564985](65568 call y[65543] 1))
      (443081 'move' call_type_tmp[443077](65569 'typeof' call_tmp[564985]))
    }
    unknown result[65572] "insert auto destroy"
    unknown call_tmp[564992] "expr temp" "maybe param" "maybe type" "temp"
    (564995 'move' call_tmp[564992](65562 call size _mt[232] y[65543]))
    unknown call_tmp[564997] "expr temp" "maybe param" "maybe type" "temp"
    (565000 'move' call_tmp[564997](65570 call * call_tmp[564992] call_type_tmp[443077]))
    (489616 'default init var' result[65572] call_tmp[564997])
    {
      unknown d[65597] "insert auto destroy"
      (489618 'init var' d[65597] 0)
      unknown tmp[65598] "maybe param" "temp"
      unknown call_tmp[565004] "expr temp" "maybe param" "maybe type" "temp"
      (565007 'move' call_tmp[565004](65578 call size _mt[232] y[65543]))
      (65610 'move' tmp[65598](65608 call chpl_compute_low_param_loop_bound 1 call_tmp[565004]))
      unknown tmp[65599] "maybe param" "temp"
      unknown call_tmp[565011] "expr temp" "maybe param" "maybe type" "temp"
      (565014 'move' call_tmp[565011](65615 call size _mt[232] y[65543]))
      (65620 'move' tmp[65599](65618 call chpl_compute_high_param_loop_bound 1 call_tmp[565011]))
      unknown tmp[65600] "maybe param" "temp"
      (65623 'move' tmp[65600] 1)
      ParamForLoop
      { d[65597] tmp[65598] tmp[65599] tmp[65600]
        unknown call_tmp[565016] "expr temp" "maybe param" "maybe type" "temp"
        (565019 'move' call_tmp[565016](65586 call result[65572] d[65597]))
        unknown call_tmp[565021] "expr temp" "maybe param" "maybe type" "temp"
        (565024 'move' call_tmp[565021](65591 call y[65543] d[65597]))
        unknown call_tmp[565026] "expr temp" "maybe param" "maybe type" "temp"
        (565029 'move' call_tmp[565026](65592 call ^ x[65537] call_tmp[565021]))
        (65594 call = call_tmp[565016] call_tmp[565026])
      }
      label _unused_continueLabel[65602]
      label _breakLabel[65601]
    }
    (460112 'move' ret[460107](460111 'deref' result[65572]))
    (460109 return ret[460107])
  }
  where {
    unknown tmp[394608] "maybe param" "temp"
    (394619 'move' tmp[394608](65549 call isHomogeneousTuple y[65543]))
    unknown call_tmp[565031] "expr temp" "maybe param" "maybe type" "temp"
    (565034 'move' call_tmp[565031](394621 call _cond_invalid tmp[394608]))
    if call_tmp[565031]
    {
      (394624 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504193] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504194] "maybe param" "temp"
    unknown call_tmp[565036] "expr temp" "maybe param" "maybe type" "temp"
    (565039 'move' call_tmp[565036](394609 call isTrue tmp[394608]))
    (504199 'move' tmp[504194](504197 call _cond_test call_tmp[565036]))
    if tmp[504194]
    {
      { scopeless type
        unknown call_type_tmp[443083] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[565041] "expr temp" "maybe param" "maybe type" "temp"
        (565044 'move' call_tmp[565041](65556 call y[65543] 1))
        (443087 'move' call_type_tmp[443083](65557 'typeof' call_tmp[565041]))
      }
      unknown tmp[504201] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565046] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (565049 'move' call_tmp[565046](430031 'typeof' x[65537]))
      unknown call_tmp[565051] "expr temp" "maybe param" "maybe type" "temp"
      (565054 'move' call_tmp[565051](328455 'is_subtype' call_type_tmp[443083] call_tmp[565046]))
      (504203 'move' tmp[504201](394612 call isTrue call_tmp[565051]))
      (504208 'move' tmp[504193](504205 '_paramFoldLogical' tmp[504194] tmp[504201]))
    }
    {
      (504213 'move' tmp[504193](504210 '_paramFoldLogical' tmp[504194] 0))
    }
    (691809 call _statementLevelSymbol tmp[504193])
  }
  function <<[65646](arg x[65643]:_tuple[58502](?), arg y[65653] :
  unknown call_tmp[565056] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[460116] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443089] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[565061] "expr temp" "maybe param" "maybe type" "temp"
      (565064 'move' call_tmp[565061](65667 call x[65643] 1))
      (443093 'move' call_type_tmp[443089](65668 'typeof' call_tmp[565061]))
    }
    unknown result[65671] "insert auto destroy"
    unknown call_tmp[565068] "expr temp" "maybe param" "maybe type" "temp"
    (565071 'move' call_tmp[565068](65661 call size _mt[232] x[65643]))
    unknown call_tmp[565073] "expr temp" "maybe param" "maybe type" "temp"
    (565076 'move' call_tmp[565073](65669 call * call_tmp[565068] call_type_tmp[443089]))
    (489620 'default init var' result[65671] call_tmp[565073])
    {
      unknown d[65696] "insert auto destroy"
      (489622 'init var' d[65696] 0)
      unknown tmp[65697] "maybe param" "temp"
      unknown call_tmp[565080] "expr temp" "maybe param" "maybe type" "temp"
      (565083 'move' call_tmp[565080](65677 call size _mt[232] x[65643]))
      (65709 'move' tmp[65697](65707 call chpl_compute_low_param_loop_bound 1 call_tmp[565080]))
      unknown tmp[65698] "maybe param" "temp"
      unknown call_tmp[565087] "expr temp" "maybe param" "maybe type" "temp"
      (565090 'move' call_tmp[565087](65714 call size _mt[232] x[65643]))
      (65719 'move' tmp[65698](65717 call chpl_compute_high_param_loop_bound 1 call_tmp[565087]))
      unknown tmp[65699] "maybe param" "temp"
      (65722 'move' tmp[65699] 1)
      ParamForLoop
      { d[65696] tmp[65697] tmp[65698] tmp[65699]
        unknown call_tmp[565092] "expr temp" "maybe param" "maybe type" "temp"
        (565095 'move' call_tmp[565092](65685 call result[65671] d[65696]))
        unknown call_tmp[565097] "expr temp" "maybe param" "maybe type" "temp"
        (565100 'move' call_tmp[565097](65689 call x[65643] d[65696]))
        unknown call_tmp[565102] "expr temp" "maybe param" "maybe type" "temp"
        (565105 'move' call_tmp[565102](65691 call << call_tmp[565097] y[65653]))
        (65693 call = call_tmp[565092] call_tmp[565102])
      }
      label _unused_continueLabel[65701]
      label _breakLabel[65700]
    }
    (460121 'move' ret[460116](460120 'deref' result[65671]))
    (460118 return ret[460116])
  }
  where {
    (65659 call isHomogeneousTuple x[65643])
  }
  function <<[65746](arg x[65743]:_any[170](?), arg y[65749]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[460125] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443095] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[565107] "expr temp" "maybe param" "maybe type" "temp"
      (565110 'move' call_tmp[565107](65774 call y[65749] 1))
      (443099 'move' call_type_tmp[443095](65775 'typeof' call_tmp[565107]))
    }
    unknown result[65778] "insert auto destroy"
    unknown call_tmp[565114] "expr temp" "maybe param" "maybe type" "temp"
    (565117 'move' call_tmp[565114](65768 call size _mt[232] y[65749]))
    unknown call_tmp[565119] "expr temp" "maybe param" "maybe type" "temp"
    (565122 'move' call_tmp[565119](65776 call * call_tmp[565114] call_type_tmp[443095]))
    (489624 'default init var' result[65778] call_tmp[565119])
    {
      unknown d[65803] "insert auto destroy"
      (489626 'init var' d[65803] 0)
      unknown tmp[65804] "maybe param" "temp"
      unknown call_tmp[565126] "expr temp" "maybe param" "maybe type" "temp"
      (565129 'move' call_tmp[565126](65784 call size _mt[232] y[65749]))
      (65816 'move' tmp[65804](65814 call chpl_compute_low_param_loop_bound 1 call_tmp[565126]))
      unknown tmp[65805] "maybe param" "temp"
      unknown call_tmp[565133] "expr temp" "maybe param" "maybe type" "temp"
      (565136 'move' call_tmp[565133](65821 call size _mt[232] y[65749]))
      (65826 'move' tmp[65805](65824 call chpl_compute_high_param_loop_bound 1 call_tmp[565133]))
      unknown tmp[65806] "maybe param" "temp"
      (65829 'move' tmp[65806] 1)
      ParamForLoop
      { d[65803] tmp[65804] tmp[65805] tmp[65806]
        unknown call_tmp[565138] "expr temp" "maybe param" "maybe type" "temp"
        (565141 'move' call_tmp[565138](65792 call result[65778] d[65803]))
        unknown call_tmp[565143] "expr temp" "maybe param" "maybe type" "temp"
        (565146 'move' call_tmp[565143](65797 call y[65749] d[65803]))
        unknown call_tmp[565148] "expr temp" "maybe param" "maybe type" "temp"
        (565151 'move' call_tmp[565148](65798 call << x[65743] call_tmp[565143]))
        (65800 call = call_tmp[565138] call_tmp[565148])
      }
      label _unused_continueLabel[65808]
      label _breakLabel[65807]
    }
    (460130 'move' ret[460125](460129 'deref' result[65778]))
    (460127 return ret[460125])
  }
  where {
    unknown tmp[394629] "maybe param" "temp"
    (394640 'move' tmp[394629](65755 call isHomogeneousTuple y[65749]))
    unknown call_tmp[565153] "expr temp" "maybe param" "maybe type" "temp"
    (565156 'move' call_tmp[565153](394642 call _cond_invalid tmp[394629]))
    if call_tmp[565153]
    {
      (394645 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504220] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504221] "maybe param" "temp"
    unknown call_tmp[565158] "expr temp" "maybe param" "maybe type" "temp"
    (565161 'move' call_tmp[565158](394630 call isTrue tmp[394629]))
    (504226 'move' tmp[504221](504224 call _cond_test call_tmp[565158]))
    if tmp[504221]
    {
      { scopeless type
        unknown call_type_tmp[443101] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[565163] "expr temp" "maybe param" "maybe type" "temp"
        (565166 'move' call_tmp[565163](65762 call y[65749] 1))
        (443105 'move' call_type_tmp[443101](65763 'typeof' call_tmp[565163]))
      }
      unknown tmp[504228] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565168] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (565171 'move' call_tmp[565168](430033 'typeof' x[65743]))
      unknown call_tmp[565173] "expr temp" "maybe param" "maybe type" "temp"
      (565176 'move' call_tmp[565173](328456 'is_subtype' call_type_tmp[443101] call_tmp[565168]))
      (504230 'move' tmp[504228](394633 call isTrue call_tmp[565173]))
      (504235 'move' tmp[504220](504232 '_paramFoldLogical' tmp[504221] tmp[504228]))
    }
    {
      (504240 'move' tmp[504220](504237 '_paramFoldLogical' tmp[504221] 0))
    }
    (691811 call _statementLevelSymbol tmp[504220])
  }
  function >>[65852](arg x[65849]:_tuple[58502](?), arg y[65859] :
  unknown call_tmp[565178] "expr temp" "maybe param" "maybe type" "temp") : _unknown[43] "inline"
  {
    unknown ret[460134] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443107] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[565183] "expr temp" "maybe param" "maybe type" "temp"
      (565186 'move' call_tmp[565183](65873 call x[65849] 1))
      (443111 'move' call_type_tmp[443107](65874 'typeof' call_tmp[565183]))
    }
    unknown result[65877] "insert auto destroy"
    unknown call_tmp[565190] "expr temp" "maybe param" "maybe type" "temp"
    (565193 'move' call_tmp[565190](65867 call size _mt[232] x[65849]))
    unknown call_tmp[565195] "expr temp" "maybe param" "maybe type" "temp"
    (565198 'move' call_tmp[565195](65875 call * call_tmp[565190] call_type_tmp[443107]))
    (489628 'default init var' result[65877] call_tmp[565195])
    {
      unknown d[65902] "insert auto destroy"
      (489630 'init var' d[65902] 0)
      unknown tmp[65903] "maybe param" "temp"
      unknown call_tmp[565202] "expr temp" "maybe param" "maybe type" "temp"
      (565205 'move' call_tmp[565202](65883 call size _mt[232] x[65849]))
      (65915 'move' tmp[65903](65913 call chpl_compute_low_param_loop_bound 1 call_tmp[565202]))
      unknown tmp[65904] "maybe param" "temp"
      unknown call_tmp[565209] "expr temp" "maybe param" "maybe type" "temp"
      (565212 'move' call_tmp[565209](65920 call size _mt[232] x[65849]))
      (65925 'move' tmp[65904](65923 call chpl_compute_high_param_loop_bound 1 call_tmp[565209]))
      unknown tmp[65905] "maybe param" "temp"
      (65928 'move' tmp[65905] 1)
      ParamForLoop
      { d[65902] tmp[65903] tmp[65904] tmp[65905]
        unknown call_tmp[565214] "expr temp" "maybe param" "maybe type" "temp"
        (565217 'move' call_tmp[565214](65891 call result[65877] d[65902]))
        unknown call_tmp[565219] "expr temp" "maybe param" "maybe type" "temp"
        (565222 'move' call_tmp[565219](65895 call x[65849] d[65902]))
        unknown call_tmp[565224] "expr temp" "maybe param" "maybe type" "temp"
        (565227 'move' call_tmp[565224](65897 call >> call_tmp[565219] y[65859]))
        (65899 call = call_tmp[565214] call_tmp[565224])
      }
      label _unused_continueLabel[65907]
      label _breakLabel[65906]
    }
    (460139 'move' ret[460134](460138 'deref' result[65877]))
    (460136 return ret[460134])
  }
  where {
    (65865 call isHomogeneousTuple x[65849])
  }
  function >>[65952](arg x[65949]:_any[170](?), arg y[65955]:_tuple[58502](?)) : _unknown[43] "inline"
  {
    unknown ret[460143] "RVV" "temp"
    { scopeless type
      unknown call_type_tmp[443113] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[565229] "expr temp" "maybe param" "maybe type" "temp"
      (565232 'move' call_tmp[565229](65980 call y[65955] 1))
      (443117 'move' call_type_tmp[443113](65981 'typeof' call_tmp[565229]))
    }
    unknown result[65984] "insert auto destroy"
    unknown call_tmp[565236] "expr temp" "maybe param" "maybe type" "temp"
    (565239 'move' call_tmp[565236](65974 call size _mt[232] y[65955]))
    unknown call_tmp[565241] "expr temp" "maybe param" "maybe type" "temp"
    (565244 'move' call_tmp[565241](65982 call * call_tmp[565236] call_type_tmp[443113]))
    (489632 'default init var' result[65984] call_tmp[565241])
    {
      unknown d[66009] "insert auto destroy"
      (489634 'init var' d[66009] 0)
      unknown tmp[66010] "maybe param" "temp"
      unknown call_tmp[565248] "expr temp" "maybe param" "maybe type" "temp"
      (565251 'move' call_tmp[565248](65990 call size _mt[232] y[65955]))
      (66022 'move' tmp[66010](66020 call chpl_compute_low_param_loop_bound 1 call_tmp[565248]))
      unknown tmp[66011] "maybe param" "temp"
      unknown call_tmp[565255] "expr temp" "maybe param" "maybe type" "temp"
      (565258 'move' call_tmp[565255](66027 call size _mt[232] y[65955]))
      (66032 'move' tmp[66011](66030 call chpl_compute_high_param_loop_bound 1 call_tmp[565255]))
      unknown tmp[66012] "maybe param" "temp"
      (66035 'move' tmp[66012] 1)
      ParamForLoop
      { d[66009] tmp[66010] tmp[66011] tmp[66012]
        unknown call_tmp[565260] "expr temp" "maybe param" "maybe type" "temp"
        (565263 'move' call_tmp[565260](65998 call result[65984] d[66009]))
        unknown call_tmp[565265] "expr temp" "maybe param" "maybe type" "temp"
        (565268 'move' call_tmp[565265](66003 call y[65955] d[66009]))
        unknown call_tmp[565270] "expr temp" "maybe param" "maybe type" "temp"
        (565273 'move' call_tmp[565270](66004 call >> x[65949] call_tmp[565265]))
        (66006 call = call_tmp[565260] call_tmp[565270])
      }
      label _unused_continueLabel[66014]
      label _breakLabel[66013]
    }
    (460148 'move' ret[460143](460147 'deref' result[65984]))
    (460145 return ret[460143])
  }
  where {
    unknown tmp[394650] "maybe param" "temp"
    (394661 'move' tmp[394650](65961 call isHomogeneousTuple y[65955]))
    unknown call_tmp[565275] "expr temp" "maybe param" "maybe type" "temp"
    (565278 'move' call_tmp[565275](394663 call _cond_invalid tmp[394650]))
    if call_tmp[565275]
    {
      (394666 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[504247] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[504248] "maybe param" "temp"
    unknown call_tmp[565280] "expr temp" "maybe param" "maybe type" "temp"
    (565283 'move' call_tmp[565280](394651 call isTrue tmp[394650]))
    (504253 'move' tmp[504248](504251 call _cond_test call_tmp[565280]))
    if tmp[504248]
    {
      { scopeless type
        unknown call_type_tmp[443119] "expr temp" "maybe type" "temp" "type variable"
        unknown call_tmp[565285] "expr temp" "maybe param" "maybe type" "temp"
        (565288 'move' call_tmp[565285](65968 call y[65955] 1))
        (443123 'move' call_type_tmp[443119](65969 'typeof' call_tmp[565285]))
      }
      unknown tmp[504255] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[565290] "expr temp" "maybe param" "maybe type" "temp" "type variable"
      (565293 'move' call_tmp[565290](430035 'typeof' x[65949]))
      unknown call_tmp[565295] "expr temp" "maybe param" "maybe type" "temp"
      (565298 'move' call_tmp[565295](328457 'is_subtype' call_type_tmp[443119] call_tmp[565290]))
      (504257 'move' tmp[504255](394654 call isTrue call_tmp[565295]))
      (504262 'move' tmp[504247](504259 '_paramFoldLogical' tmp[504248] tmp[504255]))
    }
    {
      (504267 'move' tmp[504247](504264 '_paramFoldLogical' tmp[504248] 0))
    }
    (691813 call _statementLevelSymbol tmp[504247])
  }
  (329333 'used modules list'(58493 'use' ChapelStandard[19734]))
}