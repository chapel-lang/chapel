AST dump for ReplicatedDist after pass scopeResolve.
Module use list: ChapelStandard 

{ unknown traceReplicatedDist[324281] "config" "param" 0 type Replicated[324310] val super[331161]:BaseDist[142349] "super class" unknown targetLocDom[324296](324294 call chpl__buildDomainRuntimeType defaultDist[93214](324291 'typeof'(324288 call .(388098 call here[92085]) c"id"))) const targetLocales[324306] "const"(324304 call chpl__buildArrayRuntimeType(324302 call chpl__ensureDomainExpr targetLocDom[324296]) locale[26]) type unmanaged Replicated[390108] type anymanaged Replicated[384886](?) function Replicated[324310].init[324325](arg _mt[324351]:_MT[227], arg this[324348]:Replicated[324310] : Replicated[324310], arg targetLocales[324321] :(324317 call chpl__buildArrayRuntimeType nil[38] locale[26]) = Locales[111767], arg purposeMessage[324344] : string[24] = "used to create a Replicated") : _unknown[43] "method" "no return value for void"
  {(324358 call(324354 call . this[324348] c"complete"))
    { unknown _indexOfInterest[324392] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[324393] "expr temp" "temp"(324402 'move' _iterator[324393](324400 call _getIterator targetLocales[324321]))
      Defer
      {
        {(324418 call _freeIterator _iterator[324393])
        }
      }
      { scopeless type(324407 'move' _indexOfInterest[324392](324404 call iteratorIndex _iterator[324393]))
      }
      ForLoop
      { unknown loc[324411] "index var" "insert auto destroy"(324413 'move' loc[324411] _indexOfInterest[324392])
        {(324375 call(324367 call .(324364 call . this[324348] c"targetLocDom") c"add")(324371 call . loc[324411] c"id"))(324389 call =(324387 call(324379 call . this[324348] c"targetLocales")(324383 call . loc[324411] c"id")) loc[324411])
        } label _continueLabel[324397] _indexOfInterest[324392] _iterator[324393]
      } label _breakLabel[324398]
    }
    if(324447 call _cond_test traceReplicatedDist[324281])
    {(324445 call writeln "Replicated initializer over " targetLocales[324321])
    }
  } function Replicated[324310].dsiEqualDMaps[324464](arg _mt[324469]:_MT[227], arg this[324466]:Replicated[324310] : Replicated[324310], arg that[324461] :(324460 call anymanaged Replicated[384886](?) ?[249])) : _unknown[43] "method"
  {(324484 return(324483 call(324475 call .(324472 call . this[324466] c"targetLocales") c"equals")(324479 call . that[324461] c"targetLocales")))
  } function Replicated[324310].dsiEqualDMaps[324494](arg _mt[324499]:_MT[227], arg this[324496]:Replicated[324310] : Replicated[324310], arg that[324492]:_any[170](?)) param : _unknown[43] "method"
  {(324502 return 0)
  } function Replicated[324310].dsiDestroyDist[324510](arg _mt[324515]:_MT[227], arg this[324512]:Replicated[324310] : Replicated[324310]) : _unknown[43] "method" "method overrides" "no return value for void"
  {
  } function Replicated[324310].dsiSupportsPrivatization[324523](arg _mt[324528]:_MT[227], arg this[324525]:Replicated[324310] : Replicated[324310]) param : _unknown[43] "method"
  {(324531 return 1)
  } function Replicated[324310].dsiGetPrivatizeData[324539](arg _mt[324544]:_MT[227], arg this[324541]:Replicated[324310] : Replicated[324310]) : _unknown[43] "method"
  {
    if(324567 call _cond_test traceReplicatedDist[324281])
    {(324565 call writeln "Replicated.dsiGetPrivatizeData")
    }(324574 return 0)
  } function Replicated[324310].dsiPrivatize[324583](arg _mt[324588]:_MT[227], arg this[324585]:Replicated[324310] : Replicated[324310], arg privatizeData[324581]:_any[170](?)) : _unknown[43] "method"
  {
    if(324612 call _cond_test traceReplicatedDist[324281])
    {(324610 call writeln "Replicated.dsiPrivatize on "(388117 call here[92085]))
    } const otherTargetLocales[324622] "const"(324619 call . this[324585] c"targetLocales") const privDom[324629] "const"(324626 call . otherTargetLocales[324622] c"_dom") const privTargetLocales[324640] "const" otherTargetLocales[324622](324637 call chpl__buildArrayRuntimeType(324635 call chpl__ensureDomainExpr privDom[324629]) locale[26])(324665 return(324664 'new'(324663 'to unmanaged class from unknown'(324662 call anymanaged Replicated[384886](?) privTargetLocales[324640] "used during privatization"))))
  } function ReplicatedDom[324802](?).numReplicands[324708](arg _mt[324806]:_MT[227], arg this[324804]:ReplicatedDom[324802](?)) : _unknown[43] "method" "primary method" "no parens"
  {(324714 return(324711 call .(388140 call . this[324804] c"localDoms") c"numElements"))
  } function ReplicatedDom[324802](?).chpl_myLocDom[324721](arg _mt[324810]:_MT[227], arg this[324808]:ReplicatedDom[324802](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(324784 call _cond_test 1)
    {
      if(324779 call _cond_test(324737 call !(324736 call(324728 call .(324725 call .(388146 call . this[324808] c"dist") c"targetLocDom") c"contains")(324732 call .(388149 call here[92085]) c"id"))))
      {(324777 call halt "locale "(324758 call .(388151 call here[92085]) c"id") " has no local replicand")
      }
    }(324797 return(324796 call(388155 call . this[324808] c"localDoms")(324792 call .(388158 call here[92085]) c"id")))
  } type ReplicatedDom[324802](?) val super[331163]:BaseRectangularDom[143416](?) "super class" const dist[324674] "const" unmanaged Replicated[390108] unknown domRep[324684](324682 call chpl__buildDomainRuntimeType defaultDist[93214] rank[143339] idxType[143342] stridable[143346]) unknown localDoms[324703](324701 call chpl__buildArrayRuntimeType(324699 call chpl__ensureDomainExpr(324688 call . dist[324674] c"targetLocDom"))(324698 'to unmanaged class from unknown'(324697 call anymanaged LocReplicatedDom[388132](?) rank[143339] idxType[143342] stridable[143346]))) type anymanaged ReplicatedDom[388213](?) type LocReplicatedDom[324836](?) val super[331165]:object[253] "super class" unknown rank[324815] "param" int(64)[13] unknown idxType[324818] "type variable" unknown stridable[324822] "param" bool[10] unknown domLocalRep[324832](324830 call chpl__buildDomainRuntimeType defaultDist[93214] rank[324815] idxType[324818] stridable[324822]) type anymanaged LocReplicatedDom[388132](?) function ReplicatedDom[324802](?).redirectee[324842](arg _mt[324847]:_MT[227], arg this[324844]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method"
  {(324857 return(388182 call . this[324844] c"domRep"))
  }
  { scopeless type(324854 call chpl__buildDomainRuntimeType defaultDist[93214](388166 call . this[324844] c"rank")(388171 call . this[324844] c"idxType")(388176 call . this[324844] c"stridable"))
  } function ReplicatedDom[324802](?).dsiMyDist[324866](arg _mt[324871]:_MT[227], arg this[324868]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "method overrides"
  {(324874 return(388187 call . this[324868] c"dist"))
  } function ReplicatedDom[324802](?).dsiSupportsPrivatization[324882](arg _mt[324887]:_MT[227], arg this[324884]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) param : _unknown[43] "method"
  {(324890 return 1)
  } type ReplicatedDomPrvData[324906](?) unknown distpid[324896] unknown domRep[324899] unknown localDoms[324902] function ReplicatedDom[324802](?).dsiGetPrivatizeData[324912](arg _mt[324917]:_MT[227], arg this[324914]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method"
  {
    if(324940 call _cond_test traceReplicatedDist[324281])
    {(324938 call writeln "ReplicatedDom.dsiGetPrivatizeData")
    }(324956 return(324955 'new'(324954 call ReplicatedDomPrvData[324906](?)(324948 call .(388194 call . this[324914] c"dist") c"pid")(388199 call . this[324914] c"domRep")(388204 call . this[324914] c"localDoms"))))
  } function ReplicatedDom[324802](?).dsiPrivatize[324965](arg _mt[324970]:_MT[227], arg this[324967]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg privatizeData[324963]:_any[170](?)) : _unknown[43] "method"
  {
    if(324994 call _cond_test traceReplicatedDist[324281])
    {(324992 call writeln "ReplicatedDom.dsiPrivatize on "(388208 call here[92085]))
    } unknown privdist[325012](325011 call chpl_getPrivatizedCopy(325005 'typeof'(325002 call . this[324967] c"dist"))(325008 call . privatizeData[324963] c"distpid"))(325042 return(325041 'new'(325040 'to unmanaged class from unknown'(325039 call anymanaged ReplicatedDom[388213](?)(rank =(388218 call . this[324967] c"rank"))(idxType =(388223 call . this[324967] c"idxType"))(stridable =(388228 call . this[324967] c"stridable"))(dist = privdist[325012])(domRep =(325028 call . privatizeData[324963] c"domRep"))(localDoms =(325035 call . privatizeData[324963] c"localDoms"))))))
  } function ReplicatedDom[324802](?).dsiGetReprivatizeData[325049](arg _mt[325054]:_MT[227], arg this[325051]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method"
  {(325057 return(388236 call . this[325051] c"domRep"))
  } function ReplicatedDom[324802](?).dsiReprivatize[325067](arg _mt[325074]:_MT[227], arg this[325071]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg other[325065]:_any[170](?), arg reprivatizeData[325069]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {(325113 call assert(325110 call &&(325098 call &&(325086 call ==(325079 call . this[325071] c"rank")(325083 call . other[325065] c"rank"))(325096 call ==(325089 call . this[325071] c"idxType")(325093 call . other[325065] c"idxType")))(325108 call ==(325101 call . this[325071] c"stridable")(325105 call . other[325065] c"stridable"))))(325121 call =(325117 call . this[325071] c"domRep") reprivatizeData[325069])
  }
  { scopeless type void[4]
  } function Replicated[324310].dsiClone[325130](arg _mt[325135]:_MT[227], arg this[325132]:Replicated[324310] : Replicated[324310]) : _unknown[43] "method"
  {
    if(325163 call _cond_test traceReplicatedDist[324281])
    {(325161 call writeln "Replicated.dsiClone")
    }(325175 return(325174 'new'(325173 'to unmanaged class from unknown'(325172 call anymanaged Replicated[384886](?)(388252 call . this[325132] c"targetLocales")))))
  }
  { scopeless type(325141 call _to_unmanaged(325139 'typeof' this[325132]))
  } function Replicated[324310].dsiNewRectangularDom[325187](arg _mt[325200]:_MT[227], arg this[325197]:Replicated[324310] : Replicated[324310], param arg rank[325184] : int(64)[13], arg idxType[325189]:_any[170](?), param arg stridable[325192] : bool[10], arg inds[325195]:_any[170](?)) : _unknown[43] "method" "method overrides"
  {
    if(325233 call _cond_test traceReplicatedDist[324281])
    {(325231 call writeln "Replicated.dsiNewRectangularDom "(325229 call _build_tuple rank[325184](325224 call _cast string[24] idxType[325189]) stridable[325192] inds[325195]))
    } unknown result[325255](325254 'new'(325253 'to unmanaged class from unknown'(325252 call anymanaged ReplicatedDom[388213](?)(rank = rank[325184])(idxType = idxType[325189])(stridable = stridable[325192])(dist =(325250 call _to_unmanaged this[325197])))))
    { unknown tmpIter[325292] "expr temp" "maybe ref" "no copy" "temp"(325295 'move' tmpIter[325292](325269 call _build_tuple(388267 call . this[325197] c"targetLocales")(325266 call . result[325255] c"localDoms"))) unknown isRngDomArr[325478] "maybe param" "temp"(325493 'move' isRngDomArr[325478](325491 call ||(325480 call isBoundedRange tmpIter[325292])(325489 call ||(325483 call isDomain tmpIter[325292])(325486 call isArray tmpIter[325292]))))
      if isRngDomArr[325478]
      { const _coforallCount[325317] "const" "end count" "temp"(325400 'move' _coforallCount[325317](325397 call _endCountAlloc 1)) unknown numTasks[325318] "temp"(325384 'move' numTasks[325318](325380 call . tmpIter[325292] c"size"))(325375 call _upEndCount _coforallCount[325317] 1 numTasks[325318])(325372 call chpl_resetTaskSpawn numTasks[325318]) unknown _indexOfInterest[325325] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325326] "expr temp" "temp"(325335 'move' _iterator[325326](325333 call _getIteratorZip tmpIter[325292]))
        Defer
        {
          {(325365 call _freeIterator _iterator[325326])
          }
        }
        { scopeless type(325340 'move' _indexOfInterest[325325](325337 call iteratorIndex _iterator[325326]))
        }
        ForLoop
        {(325345 call _check_tuple_var_decl _indexOfInterest[325325] 2) unknown loc[325351] "coforall index var" "index var" "insert auto destroy"(325353 'move' loc[325351](325349 call _indexOfInterest[325325] 1)) unknown locDom[325358] "coforall index var" "index var" "insert auto destroy"(325360 'move' locDom[325358](325356 call _indexOfInterest[325325] 2))
          {
            { const tmp[325298] "const" "temp"(325300 'move' tmp[325298](325302 'deref'(325303 '_wide_get_locale' loc[325351])))(325307 call = locDom[325358](325309 'new'(325310 'to unmanaged class from unknown'(325312 call anymanaged LocReplicatedDom[388132](?) rank[325184] idxType[325189] stridable[325192]))))
            }(325320 call _downEndCount _coforallCount[325317] nil[38])(325319 'coforall loop')
          } label _continueLabel[325330] _indexOfInterest[325325] _iterator[325326]
        } label _breakLabel[325331]
        Defer
        {
          {(325387 call _endCountFree _coforallCount[325317])
          }
        }(325392 call _waitEndCount _coforallCount[325317] 1 numTasks[325318])
      }
      { const _coforallCount[325404] "const" "end count" "temp"(325475 'move' _coforallCount[325404](325472 call _endCountAlloc 1)) unknown _indexOfInterest[325412] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325413] "expr temp" "temp"(325422 'move' _iterator[325413](325420 call _getIteratorZip tmpIter[325292]))
        Defer
        {
          {(325452 call _freeIterator _iterator[325413])
          }
        }
        { scopeless type(325427 'move' _indexOfInterest[325412](325424 call iteratorIndex _iterator[325413]))
        }
        ForLoop
        {(325432 call _check_tuple_var_decl _indexOfInterest[325412] 2) unknown loc[325438] "coforall index var" "index var" "insert auto destroy"(325440 'move' loc[325438](325436 call _indexOfInterest[325412] 1)) unknown locDom[325445] "coforall index var" "index var" "insert auto destroy"(325447 'move' locDom[325445](325443 call _indexOfInterest[325412] 2))(325459 call _upEndCount _coforallCount[325404] 1)
          {
            { const tmp[325286] "const" "temp"(325287 'move' tmp[325286](325284 'deref'(325283 '_wide_get_locale' loc[325438])))(325280 call = locDom[325445](325279 'new'(325278 'to unmanaged class from unknown'(325277 call anymanaged LocReplicatedDom[388132](?) rank[325184] idxType[325189] stridable[325192]))))
            }(325407 call _downEndCount _coforallCount[325404] nil[38])(325406 'coforall loop')
          } label _continueLabel[325417] _indexOfInterest[325412] _iterator[325413]
        } label _breakLabel[325418]
        Defer
        {
          {(325463 call _endCountFree _coforallCount[325404])
          }
        }(325468 call _waitEndCount _coforallCount[325404] 1)
      }
    }(325503 call(325498 call . result[325255] c"dsiSetIndices") inds[325195])(325506 return result[325255])
  } function Replicated[324310].dsiIndexToLocale[325515](arg _mt[325520]:_MT[227], arg this[325517]:Replicated[324310] : Replicated[324310], arg indexx[325513]:_any[170](?)) : _unknown[43] "method"
  {(325524 return(388286 call here[92085]))
  }
  { scopeless type locale[26]
  } function ReplicatedDom[324802](?).dsiSetIndices[325535](arg _mt[325540]:_MT[227], arg this[325537]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg x[325533]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    if(325583 call _cond_test traceReplicatedDist[324281])
    {(325581 call writeln "ReplicatedDom.dsiSetIndices on "(325577 call _cast string[24](325575 'typeof' x[325533])) ": " x[325533])
    }(325596 call(388294 call . this[325537] c"dsiSetIndices")(325593 call chpl__buildDomainExpr(325591 'expand_tuple' x[325533])))
  }
  {(325553 call &&(325545 call isTuple x[325533])(325552 call isRange(325550 call x[325533] 1)))
  } function ReplicatedDom[324802](?).dsiSetIndices[325608](arg _mt[325613]:_MT[227], arg this[325610]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg domArg[325605] : _domain[123390](?)) : _unknown[43] "method" "no return value for void"
  {
    if(325638 call _cond_test traceReplicatedDist[324281])
    {(325636 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg[325605])
    }(325646 call =(388303 call . this[325610] c"domRep") domArg[325605])
    { unknown tmpIter[325670] "expr temp" "maybe ref" "no copy" "temp"(325673 'move' tmpIter[325670](388309 call . this[325610] c"localDoms")) unknown isRngDomArr[325825] "maybe param" "temp"(325840 'move' isRngDomArr[325825](325838 call ||(325827 call isBoundedRange tmpIter[325670])(325836 call ||(325830 call isDomain tmpIter[325670])(325833 call isArray tmpIter[325670]))))
      if isRngDomArr[325825]
      { const _coforallCount[325692] "const" "end count" "temp"(325761 'move' _coforallCount[325692](325758 call _endCountAlloc 1)) unknown numTasks[325693] "temp"(325745 'move' numTasks[325693](325741 call . tmpIter[325670] c"size"))(325736 call _upEndCount _coforallCount[325692] 1 numTasks[325693])(325733 call chpl_resetTaskSpawn numTasks[325693]) unknown _indexOfInterest[325700] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325701] "expr temp" "temp"(325710 'move' _iterator[325701](325708 call _getIterator tmpIter[325670]))
        Defer
        {
          {(325726 call _freeIterator _iterator[325701])
          }
        }
        { scopeless type(325715 'move' _indexOfInterest[325700](325712 call iteratorIndex _iterator[325701]))
        }
        ForLoop
        { unknown locDom[325719] "coforall index var" "index var" "insert auto destroy"(325721 'move' locDom[325719] _indexOfInterest[325700])
          {
            { const tmp[325676] "const" "temp"(325678 'move' tmp[325676](325680 'deref'(325681 '_wide_get_locale' locDom[325719])))(325685 call =(325687 call . locDom[325719] c"domLocalRep") domArg[325605])
            }(325695 call _downEndCount _coforallCount[325692] nil[38])(325694 'coforall loop')
          } label _continueLabel[325705] _indexOfInterest[325700] _iterator[325701]
        } label _breakLabel[325706]
        Defer
        {
          {(325748 call _endCountFree _coforallCount[325692])
          }
        }(325753 call _waitEndCount _coforallCount[325692] 1 numTasks[325693])
      }
      { const _coforallCount[325765] "const" "end count" "temp"(325822 'move' _coforallCount[325765](325819 call _endCountAlloc 1)) unknown _indexOfInterest[325773] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325774] "expr temp" "temp"(325783 'move' _iterator[325774](325781 call _getIterator tmpIter[325670]))
        Defer
        {
          {(325799 call _freeIterator _iterator[325774])
          }
        }
        { scopeless type(325788 'move' _indexOfInterest[325773](325785 call iteratorIndex _iterator[325774]))
        }
        ForLoop
        { unknown locDom[325792] "coforall index var" "index var" "insert auto destroy"(325794 'move' locDom[325792] _indexOfInterest[325773])(325806 call _upEndCount _coforallCount[325765] 1)
          {
            { const tmp[325665] "const" "temp"(325666 'move' tmp[325665](325663 'deref'(325662 '_wide_get_locale' locDom[325792])))(325659 call =(325655 call . locDom[325792] c"domLocalRep") domArg[325605])
            }(325768 call _downEndCount _coforallCount[325765] nil[38])(325767 'coforall loop')
          } label _continueLabel[325778] _indexOfInterest[325773] _iterator[325774]
        } label _breakLabel[325779]
        Defer
        {
          {(325810 call _endCountFree _coforallCount[325765])
          }
        }(325815 call _waitEndCount _coforallCount[325765] 1)
      }
    }
  }
  { scopeless type void[4]
  } function ReplicatedDom[324802](?).dsiGetIndices[325850](arg _mt[325855]:_MT[227], arg this[325852]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method"
  {
    if(325890 call _cond_test traceReplicatedDist[324281])
    {(325888 call writeln "ReplicatedDom.dsiGetIndices")
    }(325904 return(325903 call(325899 call .(325898 call(388339 call . this[325852] c"redirectee")) c"getIndices")))
  }
  { scopeless type(325867 call *(388320 call . this[325852] c"rank")(325866 call range[66183](?)(388326 call . this[325852] c"idxType") bounded[66079](388332 call . this[325852] c"stridable")))
  } function ReplicatedDom[324802](?).these[325912](arg _mt[325917]:_MT[227], arg this[325914]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "iterator fn" "method" "no return value for void"
  { unknown dom[325922](325921 call(388343 call . this[325914] c"redirectee"))
    { unknown _indexOfInterest[325931] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[325932] "expr temp" "temp"(325941 'move' _iterator[325932](325939 call _getIterator dom[325922]))
      Defer
      {
        {(325957 call _freeIterator _iterator[325932])
        }
      }
      { scopeless type(325946 'move' _indexOfInterest[325931](325943 call iteratorIndex _iterator[325932]))
      }
      ForLoop
      { unknown i[325950] "index var" "insert auto destroy"(325952 'move' i[325950] _indexOfInterest[325931])(325929 yield i[325950]) label _continueLabel[325936] _indexOfInterest[325931] _iterator[325932]
      } label _breakLabel[325937]
    }
  } function ReplicatedDom[324802](?).these[325973](arg _mt[325978]:_MT[227], arg this[325975]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), param arg tag[325970] : iterKind[697]) : _unknown[43] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[326003] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[326004] "expr temp" "temp"(326013 'move' _iterator[326004](326011 call _getIterator(325999 call(325994 call .(325991 call .(325990 call(388354 call . this[325975] c"chpl_myLocDom")) c"domLocalRep") c"these") tag[325970])))
      Defer
      {
        {(326030 call _freeIterator _iterator[326004])
        }
      }
      { scopeless type(326019 'move' _indexOfInterest[326003](326016 call iteratorIndex _iterator[326004]))
      }
      ForLoop
      { unknown follow[326023] "index var" "insert auto destroy"(326025 'move' follow[326023] _indexOfInterest[326003])(326001 yield follow[326023]) label _continueLabel[326008] _indexOfInterest[326003] _iterator[326004]
      } label _breakLabel[326009]
    }
  }
  {(325985 call == tag[325970] leader[691])
  } function ReplicatedDom[324802](?).these[326048](arg _mt[326055]:_MT[227], arg this[326052]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), param arg tag[326045] : iterKind[697], arg followThis[326050]:_any[170](?)) : _unknown[43] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[326078] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[326079] "expr temp" "temp"(326088 'move' _iterator[326079](326086 call _getIterator(326074 call(326068 call .(326067 call(388363 call . this[326052] c"redirectee")) c"these") tag[326045] followThis[326050])))
      Defer
      {
        {(326105 call _freeIterator _iterator[326079])
        }
      }
      { scopeless type(326094 'move' _indexOfInterest[326078](326091 call iteratorIndex _iterator[326079]))
      }
      ForLoop
      { unknown i[326098] "index var" "insert auto destroy"(326100 'move' i[326098] _indexOfInterest[326078])(326076 yield i[326098]) label _continueLabel[326083] _indexOfInterest[326078] _iterator[326079]
      } label _breakLabel[326084]
    }
  }
  {(326062 call == tag[326045] follower[693])
  } function ReplicatedDom[324802](?).dsiSerialWrite[326121](arg _mt[326126]:_MT[227], arg this[326123]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg f[326119]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {(326140 call(326135 call .(326132 call .(326131 call(388370 call . this[326123] c"redirectee")) c"_value") c"dsiSerialWrite") f[326119])
  }
  { scopeless type void[4]
  } function ReplicatedDom[324802](?).dsiDims[326149](arg _mt[326154]:_MT[227], arg this[326151]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method"
  {(326176 return(326175 call(326171 call .(326170 call(388392 call . this[326151] c"redirectee")) c"dims")))
  }
  { scopeless type(326166 call *(388376 call . this[326151] c"rank")(326165 call range[66183](?)(388382 call . this[326151] c"idxType") bounded[66079](388388 call . this[326151] c"stridable")))
  } function ReplicatedDom[324802](?).dsiDim[326189](arg _mt[326194]:_MT[227], arg this[326191]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg dim[326186] : int(64)[13]) : _unknown[43] "method"
  {(326214 return(326213 call(326208 call .(326207 call(388408 call . this[326191] c"redirectee")) c"dim") dim[326186]))
  }
  { scopeless type(326204 call range[66183](?)(388398 call . this[326191] c"idxType") bounded[66079](388404 call . this[326191] c"stridable"))
  } function ReplicatedDom[324802](?).dsiLow[326223](arg _mt[326228]:_MT[227], arg this[326225]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "no parens"
  {(326236 return(326233 call .(326232 call(388413 call . this[326225] c"redirectee")) c"low"))
  } function ReplicatedDom[324802](?).dsiHigh[326244](arg _mt[326249]:_MT[227], arg this[326246]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "no parens"
  {(326257 return(326254 call .(326253 call(388417 call . this[326246] c"redirectee")) c"high"))
  } function ReplicatedDom[324802](?).dsiStride[326265](arg _mt[326270]:_MT[227], arg this[326267]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "no parens"
  {(326278 return(326275 call .(326274 call(388421 call . this[326267] c"redirectee")) c"stride"))
  } function ReplicatedDom[324802](?).dsiAlignedLow[326286](arg _mt[326291]:_MT[227], arg this[326288]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "no parens"
  {(326299 return(326296 call .(326295 call(388425 call . this[326288] c"redirectee")) c"alignedLow"))
  } function ReplicatedDom[324802](?).dsiAlignedHigh[326307](arg _mt[326312]:_MT[227], arg this[326309]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "no parens"
  {(326320 return(326317 call .(326316 call(388429 call . this[326309] c"redirectee")) c"alignedHigh"))
  } function ReplicatedDom[324802](?).dsiAlignment[326328](arg _mt[326333]:_MT[227], arg this[326330]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "no parens"
  {(326341 return(326338 call .(326337 call(388433 call . this[326330] c"redirectee")) c"alignment"))
  } function ReplicatedDom[324802](?).dsiNumIndices[326349](arg _mt[326354]:_MT[227], arg this[326351]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "no parens"
  {(326362 return(326359 call .(326358 call(388437 call . this[326351] c"redirectee")) c"numIndices"))
  } function ReplicatedDom[324802](?).dsiMember[326372](arg _mt[326377]:_MT[227], arg this[326374]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg indexx[326370]:_any[170](?)) : _unknown[43] "method"
  {(326388 return(326387 call(326382 call .(326381 call(388441 call . this[326374] c"redirectee")) c"contains") indexx[326370]))
  } function ReplicatedDom[324802](?).dsiIndexOrder[326398](arg _mt[326403]:_MT[227], arg this[326400]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg indexx[326396]:_any[170](?)) : _unknown[43] "method"
  {(326414 return(326413 call(326408 call .(326407 call(388446 call . this[326400] c"redirectee")) c"dsiIndexOrder") indexx[326396]))
  } function ReplicatedDom[324802](?).dsiDestroyDom[326422](arg _mt[326427]:_MT[227], arg this[326424]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[326458] "expr temp" "maybe ref" "no copy" "temp"(326461 'move' tmpIter[326458](326431 call .(388452 call . this[326424] c"dist") c"targetLocDom")) unknown isRngDomArr[326616] "maybe param" "temp"(326631 'move' isRngDomArr[326616](326629 call ||(326618 call isBoundedRange tmpIter[326458])(326627 call ||(326621 call isDomain tmpIter[326458])(326624 call isArray tmpIter[326458]))))
      if isRngDomArr[326616]
      { const _coforallCount[326483] "const" "end count" "temp"(326552 'move' _coforallCount[326483](326549 call _endCountAlloc 1)) unknown numTasks[326484] "temp"(326536 'move' numTasks[326484](326532 call . tmpIter[326458] c"size"))(326527 call _upEndCount _coforallCount[326483] 1 numTasks[326484])(326524 call chpl_resetTaskSpawn numTasks[326484]) unknown _indexOfInterest[326491] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[326492] "expr temp" "temp"(326501 'move' _iterator[326492](326499 call _getIterator tmpIter[326458]))
        Defer
        {
          {(326517 call _freeIterator _iterator[326492])
          }
        }
        { scopeless type(326506 'move' _indexOfInterest[326491](326503 call iteratorIndex _iterator[326492]))
        }
        ForLoop
        { unknown localeIdx[326510] "coforall index var" "index var" "insert auto destroy"(326512 'move' localeIdx[326510] _indexOfInterest[326491])
          {
            { const tmp[326464] "const" "temp"(326466 'move' tmp[326464](326468 'deref'(326469 '_wide_get_locale'(326474 call(326471 call .(388469 call . this[326424] c"dist") c"targetLocales") localeIdx[326510]))))(326478 call chpl__delete(326480 call(388475 call . this[326424] c"localDoms") localeIdx[326510]))
            }(326486 call _downEndCount _coforallCount[326483] nil[38])(326485 'coforall loop')
          } label _continueLabel[326496] _indexOfInterest[326491] _iterator[326492]
        } label _breakLabel[326497]
        Defer
        {
          {(326539 call _endCountFree _coforallCount[326483])
          }
        }(326544 call _waitEndCount _coforallCount[326483] 1 numTasks[326484])
      }
      { const _coforallCount[326556] "const" "end count" "temp"(326613 'move' _coforallCount[326556](326610 call _endCountAlloc 1)) unknown _indexOfInterest[326564] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[326565] "expr temp" "temp"(326574 'move' _iterator[326565](326572 call _getIterator tmpIter[326458]))
        Defer
        {
          {(326590 call _freeIterator _iterator[326565])
          }
        }
        { scopeless type(326579 'move' _indexOfInterest[326564](326576 call iteratorIndex _iterator[326565]))
        }
        ForLoop
        { unknown localeIdx[326583] "coforall index var" "index var" "insert auto destroy"(326585 'move' localeIdx[326583] _indexOfInterest[326564])(326597 call _upEndCount _coforallCount[326556] 1)
          {
            { const tmp[326452] "const" "temp"(326453 'move' tmp[326452](326450 'deref'(326449 '_wide_get_locale'(326440 call(326435 call .(388457 call . this[326424] c"dist") c"targetLocales") localeIdx[326583]))))(326446 call chpl__delete(326444 call(388463 call . this[326424] c"localDoms") localeIdx[326583]))
            }(326559 call _downEndCount _coforallCount[326556] nil[38])(326558 'coforall loop')
          } label _continueLabel[326569] _indexOfInterest[326564] _iterator[326565]
        } label _breakLabel[326570]
        Defer
        {
          {(326601 call _endCountFree _coforallCount[326556])
          }
        }(326606 call _waitEndCount _coforallCount[326556] 1)
      }
    }
  } function ReplicatedDom[324802](?).dsiAssignDomain[326645](arg _mt[326654]:_MT[227], arg this[326651]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg rhs[326642] : _domain[123390](?), arg lhsPrivate[326648] : bool[10]) : _unknown[43] "method" "no return value for void"
  {(326667 call(326657 call . this[326651] c"dsiSetIndices")(326665 call(326661 call . rhs[326642] c"getIndices")))
  } function ReplicatedArr[326791](?).chpl_myLocArr[326712](arg _mt[326795]:_MT[227], arg this[326793]:ReplicatedArr[326791](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(326748 call _cond_test 1)
    {
      if(326743 call _cond_test(326731 call !(326730 call(326722 call .(326719 call .(326716 call .(388494 call . this[326793] c"dom") c"dist") c"targetLocDom") c"contains")(326726 call .(388497 call here[92085]) c"id"))))
      {(326741 call halt "locale "(326737 call .(388499 call here[92085]) c"id") " has no local replicand")
      }
    }(326761 return(326760 call(388503 call . this[326793] c"localArrs")(326756 call .(388506 call here[92085]) c"id")))
  } function ReplicatedArr[326791](?).replicand[326771](arg _mt[326799]:_MT[227], arg this[326797]:ReplicatedArr[326791](?), arg loc[326768] : locale[26]) ref : _unknown[43] "method" "primary method"
  {(326785 return(326782 call .(326779 call(388510 call . this[326797] c"localArrs")(326775 call . loc[326768] c"id")) c"arrLocalRep"))
  } type ReplicatedArr[326791](?) val super[331167]:AbsBaseArr[146070](?) "super class" const dom[326675] "const" unknown localArrs[326707](326705 call chpl__buildArrayRuntimeType(326703 call chpl__ensureDomainExpr(326682 call .(326679 call . dom[326675] c"dist") c"targetLocDom"))(326702 'to unmanaged class from unknown'(326701 call anymanaged LocReplicatedArr[388484](?) eltType[146044](326690 call . dom[326675] c"rank")(326694 call . dom[326675] c"idxType")(326698 call . dom[326675] c"stridable")))) type anymanaged ReplicatedArr[388571](?) function _array[133150](?).replicand[326809](arg _mt[326814]:_MT[227], arg this[326811]:_array[133150](?) : _array[133150](?), arg loc[326806] : locale[26]) ref : _unknown[43] "method" "no doc"
  {(326823 return(326822 call(326817 call .(388515 call . this[326811] c"_value") c"replicand") loc[326806]))
  } type LocReplicatedArr[326867](?) val super[331169]:object[253] "super class" unknown eltType[326829] "type variable" unknown rank[326833] "param" int(64)[13] unknown idxType[326836] "type variable" unknown stridable[326840] "param" bool[10] unknown myDom[326850](326849 'to unmanaged class from unknown'(326848 call anymanaged LocReplicatedDom[388132](?) rank[326833] idxType[326836] stridable[326840])) unknown arrLocalRep[326863](326861 call chpl__buildArrayRuntimeType(326859 call chpl__ensureDomainExpr(326854 call . myDom[326850] c"domLocalRep")) eltType[326829]) type anymanaged LocReplicatedArr[388484](?) function ReplicatedArr[326791](?).init[326875](arg _mt[326882]:_MT[227], arg this[326879]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?), arg eltType[326873]:_any[170](?), arg dom[326877]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {(326891 call(326885 call .(388527 call . this[326879] c"super") c"init")(eltType = eltType[326873]))(326899 call =(326895 call . this[326879] c"dom") dom[326877])
  } function ReplicatedArr[326791](?).stridable[326907](arg _mt[326912]:_MT[227], arg this[326909]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) param : _unknown[43] "method" "no parens"
  {(326918 return(326915 call .(388535 call . this[326909] c"dom") c"stridable"))
  } function ReplicatedArr[326791](?).idxType[326926](arg _mt[326931]:_MT[227], arg this[326928]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) type : _unknown[43] "method" "no parens"
  {(326937 return(326934 call .(388540 call . this[326928] c"dom") c"idxType"))
  } function ReplicatedArr[326791](?).rank[326945](arg _mt[326950]:_MT[227], arg this[326947]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) param : _unknown[43] "method" "no parens"
  {(326956 return(326953 call .(388545 call . this[326947] c"dom") c"rank"))
  } function ReplicatedArr[326791](?).dsiGetBaseDom[326964](arg _mt[326969]:_MT[227], arg this[326966]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) : _unknown[43] "method" "method overrides"
  {(326972 return(388550 call . this[326966] c"dom"))
  } function ReplicatedArr[326791](?).dsiSupportsPrivatization[326980](arg _mt[326985]:_MT[227], arg this[326982]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) param : _unknown[43] "method"
  {(326988 return 1)
  } type ReplicatedArrPrvData[327001](?) unknown dompid[326994] unknown localArrs[326997] function ReplicatedArr[326791](?).dsiGetPrivatizeData[327007](arg _mt[327012]:_MT[227], arg this[327009]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) : _unknown[43] "method"
  {
    if(327035 call _cond_test traceReplicatedDist[324281])
    {(327033 call writeln "ReplicatedArr.dsiGetPrivatizeData")
    }(327050 return(327049 'new'(327048 call ReplicatedArrPrvData[327001](?)(327043 call .(388557 call . this[327009] c"dom") c"pid")(388562 call . this[327009] c"localArrs"))))
  } function ReplicatedArr[326791](?).dsiPrivatize[327059](arg _mt[327064]:_MT[227], arg this[327061]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?), arg privatizeData[327057]:_any[170](?)) : _unknown[43] "method"
  {
    if(327088 call _cond_test traceReplicatedDist[324281])
    {(327086 call writeln "ReplicatedArr.dsiPrivatize on "(388566 call here[92085]))
    } unknown privdom[327108](327107 call chpl_getPrivatizedCopy(327099 'typeof'(327096 call . this[327061] c"dom"))(327104 call . privatizeData[327057] c"dompid")) unknown result[327118](327117 'new'(327116 'to unmanaged class from unknown'(327115 call anymanaged ReplicatedArr[388571](?)(388576 call . this[327061] c"eltType") privdom[327108])))(327131 call =(327124 call . result[327118] c"localArrs")(327128 call . privatizeData[327057] c"localArrs"))(327135 return result[327118])
  } function ReplicatedDom[324802](?).dsiBuildArray[327144](arg _mt[327149]:_MT[227], arg this[327146]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg eltType[327142]:_any[170](?)) : _unknown[43] "method"
  {
    if(327182 call _cond_test traceReplicatedDist[324281])
    {(327180 call writeln "ReplicatedDom.dsiBuildArray")
    } unknown result[327198](327197 'new'(327196 'to unmanaged class from unknown'(327195 call anymanaged ReplicatedArr[388571](?) eltType[327142](327194 call _to_unmanaged this[327146]))))
    { unknown tmpIter[327242] "expr temp" "maybe ref" "no copy" "temp"(327245 'move' tmpIter[327242](327217 call _build_tuple(327208 call .(388592 call . this[327146] c"dist") c"targetLocales")(388597 call . this[327146] c"localDoms")(327214 call . result[327198] c"localArrs"))) unknown isRngDomArr[327444] "maybe param" "temp"(327459 'move' isRngDomArr[327444](327457 call ||(327446 call isBoundedRange tmpIter[327242])(327455 call ||(327449 call isDomain tmpIter[327242])(327452 call isArray tmpIter[327242]))))
      if isRngDomArr[327444]
      { const _coforallCount[327269] "const" "end count" "temp"(327359 'move' _coforallCount[327269](327356 call _endCountAlloc 1)) unknown numTasks[327270] "temp"(327343 'move' numTasks[327270](327339 call . tmpIter[327242] c"size"))(327334 call _upEndCount _coforallCount[327269] 1 numTasks[327270])(327331 call chpl_resetTaskSpawn numTasks[327270]) unknown _indexOfInterest[327277] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327278] "expr temp" "temp"(327287 'move' _iterator[327278](327285 call _getIteratorZip tmpIter[327242]))
        Defer
        {
          {(327324 call _freeIterator _iterator[327278])
          }
        }
        { scopeless type(327292 'move' _indexOfInterest[327277](327289 call iteratorIndex _iterator[327278]))
        }
        ForLoop
        {(327297 call _check_tuple_var_decl _indexOfInterest[327277] 3) unknown loc[327303] "coforall index var" "index var" "insert auto destroy"(327305 'move' loc[327303](327301 call _indexOfInterest[327277] 1)) unknown locDom[327310] "coforall index var" "index var" "insert auto destroy"(327312 'move' locDom[327310](327308 call _indexOfInterest[327277] 2)) unknown locArr[327317] "coforall index var" "index var" "insert auto destroy"(327319 'move' locArr[327317](327315 call _indexOfInterest[327277] 3))
          {
            { const tmp[327248] "const" "temp"(327250 'move' tmp[327248](327252 'deref'(327253 '_wide_get_locale' loc[327303])))(327257 call = locArr[327317](327259 'new'(327260 'to unmanaged class from unknown'(327262 call anymanaged LocReplicatedArr[388484](?) eltType[327142](388627 call . this[327146] c"rank")(388632 call . this[327146] c"idxType")(388637 call . this[327146] c"stridable") locDom[327310]))))
            }(327272 call _downEndCount _coforallCount[327269] nil[38])(327271 'coforall loop')
          } label _continueLabel[327282] _indexOfInterest[327277] _iterator[327278]
        } label _breakLabel[327283]
        Defer
        {
          {(327346 call _endCountFree _coforallCount[327269])
          }
        }(327351 call _waitEndCount _coforallCount[327269] 1 numTasks[327270])
      }
      { const _coforallCount[327363] "const" "end count" "temp"(327441 'move' _coforallCount[327363](327438 call _endCountAlloc 1)) unknown _indexOfInterest[327371] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327372] "expr temp" "temp"(327381 'move' _iterator[327372](327379 call _getIteratorZip tmpIter[327242]))
        Defer
        {
          {(327418 call _freeIterator _iterator[327372])
          }
        }
        { scopeless type(327386 'move' _indexOfInterest[327371](327383 call iteratorIndex _iterator[327372]))
        }
        ForLoop
        {(327391 call _check_tuple_var_decl _indexOfInterest[327371] 3) unknown loc[327397] "coforall index var" "index var" "insert auto destroy"(327399 'move' loc[327397](327395 call _indexOfInterest[327371] 1)) unknown locDom[327404] "coforall index var" "index var" "insert auto destroy"(327406 'move' locDom[327404](327402 call _indexOfInterest[327371] 2)) unknown locArr[327411] "coforall index var" "index var" "insert auto destroy"(327413 'move' locArr[327411](327409 call _indexOfInterest[327371] 3))(327425 call _upEndCount _coforallCount[327363] 1)
          {
            { const tmp[327236] "const" "temp"(327237 'move' tmp[327236](327234 'deref'(327233 '_wide_get_locale' loc[327397])))(327230 call = locArr[327411](327229 'new'(327228 'to unmanaged class from unknown'(327227 call anymanaged LocReplicatedArr[388484](?) eltType[327142](388607 call . this[327146] c"rank")(388612 call . this[327146] c"idxType")(388617 call . this[327146] c"stridable") locDom[327404]))))
            }(327366 call _downEndCount _coforallCount[327363] nil[38])(327365 'coforall loop')
          } label _continueLabel[327376] _indexOfInterest[327371] _iterator[327372]
        } label _breakLabel[327377]
        Defer
        {
          {(327429 call _endCountFree _coforallCount[327363])
          }
        }(327434 call _waitEndCount _coforallCount[327363] 1)
      }
    }(327464 return result[327198])
  }
  { scopeless type(327160 'to unmanaged class from unknown'(327159 call anymanaged ReplicatedArr[388571](?) eltType[327142](327158 call _to_unmanaged(327156 'typeof' this[327146]))))
  } function ReplicatedArr[326791](?).dsiAccess[327474](arg _mt[327479]:_MT[227], arg this[327476]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?), arg indexx[327472]:_any[170](?)) ref : _unknown[43] "method"
  {(327490 return(327489 call(327484 call .(327483 call(388645 call . this[327476] c"chpl_myLocArr")) c"arrLocalRep") indexx[327472]))
  } function ReplicatedArr[326791](?).dsiSerialWrite[327500](arg _mt[327505]:_MT[227], arg this[327502]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?), arg f[327498]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {(327533 call(327528 call .(327525 call .(327522 call .(327521 call(388651 call . this[327502] c"localArrs")(327517 call .(327515 call postfix!(327514 call(327510 call . f[327498] c"readWriteThisFromLocale"))) c"id")) c"arrLocalRep") c"_value") c"dsiSerialWrite") f[327498])
  }
  { scopeless type void[4]
  } function ReplicatedArr[326791](?).dsiSerialRead[327544](arg _mt[327551]:_MT[227], arg this[327548]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?), arg f[327542]:_any[170](?), arg loc[327546]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {(327579 call(327574 call .(327571 call .(327568 call .(327567 call(388658 call . this[327548] c"localArrs")(327563 call .(327561 call postfix!(327560 call(327556 call . f[327542] c"readWriteThisFromLocale"))) c"id")) c"arrLocalRep") c"_value") c"dsiSerialRead") f[327542])
  }
  { scopeless type void[4]
  } function isReplicatedArr[327589](arg arr[327587]:_any[170](?)) param : _unknown[43]
  {(327603 return(329245 'is_subtype' anymanaged ReplicatedArr[388571](?)(327599 'typeof'(327598 call _to_borrowed(327596 call chpl__getActualArray arr[327587])))))
  } function chpl_serialReadWriteRectangular[327612](arg f[327610]:_any[170](?), arg arr[327614]:_any[170](?), arg dom[327616]:_any[170](?)) : _unknown[43] "no return value for void"
  { const origloc[327628] "const"(327627 call(327623 call . f[327610] c"readWriteThisFromLocale"))
    { const tmp[327643] "const" "temp"(327644 'move' tmp[327643](327641 'deref'(327640 '_wide_get_locale' origloc[327628])))(327638 call chpl_serialReadWriteRectangularHelper f[327610] arr[327614] dom[327616])
    }
  }
  {(327621 call isReplicatedArr arr[327614])
  } function ReplicatedArr[326791](?).dsiDestroyArr[327654](arg _mt[327659]:_MT[227], arg this[327656]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) : _unknown[43] "method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[327692] "expr temp" "maybe ref" "no copy" "temp"(327695 'move' tmpIter[327692](327675 call _build_tuple(327670 call .(327667 call .(388673 call . this[327656] c"dom") c"dist") c"targetLocales")(388678 call . this[327656] c"localArrs"))) unknown isRngDomArr[327871] "maybe param" "temp"(327886 'move' isRngDomArr[327871](327884 call ||(327873 call isBoundedRange tmpIter[327692])(327882 call ||(327876 call isDomain tmpIter[327692])(327879 call isArray tmpIter[327692]))))
      if isRngDomArr[327871]
      { const _coforallCount[327710] "const" "end count" "temp"(327793 'move' _coforallCount[327710](327790 call _endCountAlloc 1)) unknown numTasks[327711] "temp"(327777 'move' numTasks[327711](327773 call . tmpIter[327692] c"size"))(327768 call _upEndCount _coforallCount[327710] 1 numTasks[327711])(327765 call chpl_resetTaskSpawn numTasks[327711]) unknown _indexOfInterest[327718] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327719] "expr temp" "temp"(327728 'move' _iterator[327719](327726 call _getIteratorZip tmpIter[327692]))
        Defer
        {
          {(327758 call _freeIterator _iterator[327719])
          }
        }
        { scopeless type(327733 'move' _indexOfInterest[327718](327730 call iteratorIndex _iterator[327719]))
        }
        ForLoop
        {(327738 call _check_tuple_var_decl _indexOfInterest[327718] 2) unknown loc[327744] "coforall index var" "index var" "insert auto destroy"(327746 'move' loc[327744](327742 call _indexOfInterest[327718] 1)) unknown locArr[327751] "coforall index var" "index var" "insert auto destroy"(327753 'move' locArr[327751](327749 call _indexOfInterest[327718] 2))
          {
            { const tmp[327698] "const" "temp"(327700 'move' tmp[327698](327702 'deref'(327703 '_wide_get_locale' loc[327744])))(327707 call chpl__delete locArr[327751])
            }(327713 call _downEndCount _coforallCount[327710] nil[38])(327712 'coforall loop')
          } label _continueLabel[327723] _indexOfInterest[327718] _iterator[327719]
        } label _breakLabel[327724]
        Defer
        {
          {(327780 call _endCountFree _coforallCount[327710])
          }
        }(327785 call _waitEndCount _coforallCount[327710] 1 numTasks[327711])
      }
      { const _coforallCount[327797] "const" "end count" "temp"(327868 'move' _coforallCount[327797](327865 call _endCountAlloc 1)) unknown _indexOfInterest[327805] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327806] "expr temp" "temp"(327815 'move' _iterator[327806](327813 call _getIteratorZip tmpIter[327692]))
        Defer
        {
          {(327845 call _freeIterator _iterator[327806])
          }
        }
        { scopeless type(327820 'move' _indexOfInterest[327805](327817 call iteratorIndex _iterator[327806]))
        }
        ForLoop
        {(327825 call _check_tuple_var_decl _indexOfInterest[327805] 2) unknown loc[327831] "coforall index var" "index var" "insert auto destroy"(327833 'move' loc[327831](327829 call _indexOfInterest[327805] 1)) unknown locArr[327838] "coforall index var" "index var" "insert auto destroy"(327840 'move' locArr[327838](327836 call _indexOfInterest[327805] 2))(327852 call _upEndCount _coforallCount[327797] 1)
          {
            { const tmp[327685] "const" "temp"(327686 'move' tmp[327685](327683 'deref'(327682 '_wide_get_locale' loc[327831])))(327679 call chpl__delete locArr[327838])
            }(327800 call _downEndCount _coforallCount[327797] nil[38])(327799 'coforall loop')
          } label _continueLabel[327810] _indexOfInterest[327805] _iterator[327806]
        } label _breakLabel[327811]
        Defer
        {
          {(327856 call _endCountFree _coforallCount[327797])
          }
        }(327861 call _waitEndCount _coforallCount[327797] 1)
      }
    }
  } function ReplicatedArr[326791](?).these[327896](arg _mt[327901]:_MT[227], arg this[327898]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) ref : _unknown[43] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[327914] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327915] "expr temp" "temp"(327924 'move' _iterator[327915](327922 call _getIterator(327908 call .(327907 call(388691 call . this[327898] c"chpl_myLocArr")) c"arrLocalRep")))
      Defer
      {
        {(327941 call _freeIterator _iterator[327915])
        }
      }
      { scopeless type(327930 'move' _indexOfInterest[327914](327927 call iteratorIndex _iterator[327915]))
      }
      ForLoop
      { unknown a[327934] "index var" "insert auto destroy"(327936 'move' a[327934] _indexOfInterest[327914])(327912 yield a[327934]) label _continueLabel[327919] _indexOfInterest[327914] _iterator[327915]
      } label _breakLabel[327920]
    }
  }
  { scopeless type(388687 call . this[327898] c"eltType")
  } function ReplicatedArr[326791](?).these[327959](arg _mt[327964]:_MT[227], arg this[327961]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?), param arg tag[327956] : iterKind[697]) : _unknown[43] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[327984] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[327985] "expr temp" "temp"(327994 'move' _iterator[327985](327992 call _getIterator(327980 call(327975 call .(388700 call . this[327961] c"dom") c"these") tag[327956])))
      Defer
      {
        {(328011 call _freeIterator _iterator[327985])
        }
      }
      { scopeless type(328000 'move' _indexOfInterest[327984](327997 call iteratorIndex _iterator[327985]))
      }
      ForLoop
      { unknown follow[328004] "index var" "insert auto destroy"(328006 'move' follow[328004] _indexOfInterest[327984])(327982 yield follow[328004]) label _continueLabel[327989] _indexOfInterest[327984] _iterator[327985]
      } label _breakLabel[327990]
    }
  }
  {(327971 call == tag[327956] leader[691])
  } function ReplicatedArr[326791](?).these[328029](arg _mt[328036]:_MT[227], arg this[328033]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?), param arg tag[328026] : iterKind[697], arg followThis[328031]:_any[170](?)) ref : _unknown[43] "iterator fn" "method" "no return value for void"
  {
    { unknown _indexOfInterest[328062] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[328063] "expr temp" "temp"(328072 'move' _iterator[328063](328070 call _getIterator(328058 call(328052 call .(328049 call .(328048 call(388709 call . this[328033] c"chpl_myLocArr")) c"arrLocalRep") c"these") tag[328026] followThis[328031])))
      Defer
      {
        {(328089 call _freeIterator _iterator[328063])
        }
      }
      { scopeless type(328078 'move' _indexOfInterest[328062](328075 call iteratorIndex _iterator[328063]))
      }
      ForLoop
      { unknown a[328082] "index var" "insert auto destroy"(328084 'move' a[328082] _indexOfInterest[328062])(328060 yield a[328082]) label _continueLabel[328067] _indexOfInterest[328062] _iterator[328063]
      } label _breakLabel[328068]
    }
  }
  {(328043 call == tag[328026] follower[693])
  } function Replicated[324310].dsiTargetLocales[328103](arg _mt[328108]:_MT[227], arg this[328105]:Replicated[324310] : Replicated[324310]) : _unknown[43] "method"
  {(328111 return(388717 call . this[328105] c"targetLocales"))
  } function ReplicatedDom[324802](?).dsiTargetLocales[328119](arg _mt[328124]:_MT[227], arg this[328121]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) : _unknown[43] "method"
  {(328130 return(328127 call .(388722 call . this[328121] c"dist") c"targetLocales"))
  } function ReplicatedArr[326791](?).dsiTargetLocales[328138](arg _mt[328143]:_MT[227], arg this[328140]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) : _unknown[43] "method"
  {(328152 return(328149 call .(328146 call .(388727 call . this[328140] c"dom") c"dist") c"targetLocales"))
  } function ReplicatedDom[324802](?).dsiHasSingleLocalSubdomain[328160](arg _mt[328165]:_MT[227], arg this[328162]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?)) param : _unknown[43] "method"
  {(328168 return 1)
  } function ReplicatedArr[326791](?).dsiHasSingleLocalSubdomain[328176](arg _mt[328181]:_MT[227], arg this[328178]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?)) param : _unknown[43] "method"
  {(328184 return 1)
  } function ReplicatedDom[324802](?).dsiLocalSubdomain[328196](arg _mt[328201]:_MT[227], arg this[328198]:ReplicatedDom[324802](?) : ReplicatedDom[324802](?), arg loc[328193] : locale[26]) : _unknown[43] "method"
  {
    if(328233 call _cond_test(328215 call(328207 call .(328204 call .(388732 call . this[328198] c"localDoms") c"_dom") c"contains")(328211 call . loc[328193] c"id")))
    {(328217 return(388738 call . this[328198] c"domRep"))
    }
    { unknown d[328226](328224 call chpl__buildDomainRuntimeType defaultDist[93214](388743 call . this[328198] c"rank")(388748 call . this[328198] c"idxType")(388753 call . this[328198] c"stridable"))(328231 return d[328226])
    }
  } function ReplicatedArr[326791](?).dsiLocalSubdomain[328248](arg _mt[328253]:_MT[227], arg this[328250]:ReplicatedArr[326791](?) : ReplicatedArr[326791](?), arg loc[328245] : locale[26]) : _unknown[43] "method"
  {
    if(328288 call _cond_test(328267 call(328259 call .(328256 call .(388760 call . this[328250] c"localArrs") c"_dom") c"contains")(328263 call . loc[328245] c"id")))
    {(328272 return(328269 call .(388766 call . this[328250] c"dom") c"domRep"))
    }
    { unknown d[328281](328279 call chpl__buildDomainRuntimeType defaultDist[93214](388770 call . this[328250] c"rank")(388774 call . this[328250] c"idxType")(388778 call . this[328250] c"stridable"))(328286 return d[328281])
    }
  }(330950 'used modules list'(328394 'use' ChapelStandard[19734]))
}