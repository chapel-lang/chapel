AST dump for SampleSortHelp after pass expandExternArrayCalls.
Module use list: 

{
  (328348 'use' ChapelStandard)
  unknown maxLogBuckets[256939] "param" 8
  unknown classifyUnrollFactor[256944] "param" 7
  const equalBucketThreshold[256948] "const" 5
  const maxInline[256952] "const" 16
  const oversampleFactor[256958] "const" 0.2
  function log2int[256967](arg n[256964] :
  int[13]) : _unknown[43]
  {
    if(256976 call _cond_test(256971 call <= n 0))
    {
      { scopeless
        (256974 return 0)
      }
    }
    (256986 return(256985 call log2 n))
  }
  function computeLogBucketSize[256996](arg n[256993] :
  int[13]) : _unknown[43]
  {
    const LogBuckets[256999] "const" 8
    const BaseCaseSize[257004] "const" 16
    const BaseCaseMultiplier[257008] "const" 16
    const SingleLevelThreshold[257015] "const"(257013 call * maxInline LogBuckets)
    const TwoLevelThreshold[257022] "const"(257020 call * SingleLevelThreshold LogBuckets)
    unknown ret[257026] 0
    if(257083 call _cond_test(257031 call <= n SingleLevelThreshold))
    {
      (257044 call = ret(257043 call log2int(257040 call /(257037 call / n maxInline) 2)))
    }
    {
      { scopeless
        if(257079 call _cond_test(257050 call <= n TwoLevelThreshold))
        {
          (257069 call = ret(257067 call /(257064 call +(257062 call log2int(257059 call /(257056 call / n maxInline) 2)) 1) 2))
        }
        {
          (257075 call = ret maxLogBuckets)
        }
      }
    }
    (257094 call = ret(257093 call max 1 ret))
    (257103 call = ret(257102 call min maxLogBuckets ret))
    (257107 return ret)
  }
  function chooseSampleStep[257117](arg n[257114] :
  int[13], arg logNumBuckets[257120] :
  int[13]) : _unknown[43]
  {
    unknown oversample[257134](257133 call min 1.0(257131 call * oversampleFactor(257130 call log2int n)))
    unknown step[257146](257145 call max 1(257143 call _cast int[13] oversample))
    (257150 return step)
  }
  type SampleBucketizer[258529](?) unknown eltType[257155] "type variable" unknown storage[257166](257165 call c_array eltType(257163 call << 1 maxLogBuckets)) unknown sortedStorage[257177](257176 call c_array eltType(257174 call << 1 maxLogBuckets)) unknown logBuckets[257181] int[13] unknown numBuckets[257185] int[13] unknown equalBuckets[257189] bool[10] function SampleBucketizer[258529](?).writeThis[257196](arg _mt[258533]:_MT[227], arg this[258531]:SampleBucketizer[258529](?), arg ch[257194]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (257215 call <~> ch "SampleBucketizer(")
    (257239 call <~>(257236 call <~> ch "\n logBuckets=") logBuckets)
    (257262 call <~>(257259 call <~> ch "\n numBuckets=") numBuckets)
    (257285 call <~>(257282 call <~> ch "\n equalBuckets=") equalBuckets)
    (257305 call <~> ch "\n storage=")
    {
      unknown _indexOfInterest[257346] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[257347] "expr temp" "temp"
      (257356 'move' _iterator[257347](257354 call _getIterator(257361 call chpl_direct_range_iter 0 numBuckets 1)))
      Defer
      {
        {
          (257377 call _freeIterator _iterator[257347])
        }
      }
      { scopeless type
        (257366 'move' _indexOfInterest[257346](257363 call iteratorIndex _iterator[257347]))
      }
      ForLoop
      {
        unknown i[257370] "index var" "insert auto destroy"
        (257372 'move' i[257370] _indexOfInterest[257346])
        {
          (257342 call <~> ch(257341 'try!-expr'(257340 call(257332 call . " %xt" c"format")(257338 call storage i))))
        }
        label _continueLabel[257351]
        _indexOfInterest[257346]
        _iterator[257347]
      }
      label _breakLabel[257352]
    }
    (257401 call <~> ch "\n sortedStorage=")
    {
      unknown _indexOfInterest[257425] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[257426] "expr temp" "temp"
      (257435 'move' _iterator[257426](257433 call _getIterator(257440 call chpl_direct_range_iter 0 numBuckets 1)))
      Defer
      {
        {
          (257456 call _freeIterator _iterator[257426])
        }
      }
      { scopeless type
        (257445 'move' _indexOfInterest[257425](257442 call iteratorIndex _iterator[257426]))
      }
      ForLoop
      {
        unknown i[257449] "index var" "insert auto destroy"
        (257451 'move' i[257449] _indexOfInterest[257425])
        {
          (257421 call <~> ch(257420 'try!-expr'(257419 call(257411 call . " %xt" c"format")(257417 call sortedStorage i))))
        }
        label _continueLabel[257430]
        _indexOfInterest[257425]
        _iterator[257426]
      }
      label _breakLabel[257431]
    }
    (257465 call <~> ch ")\n")
  } function SampleBucketizer[258529](?).getNumBuckets[257472](arg _mt[258537]:_MT[227], arg this[258535]:SampleBucketizer[258529](?)) : _unknown[43] "method" "primary method"
  {
    (257484 return(257482 call * numBuckets(257480 call + 1(257478 call _cast int[13] equalBuckets))))
  } function SampleBucketizer[258529](?).getBinsToRecursivelySort[257491](arg _mt[258541]:_MT[227], arg this[258539]:SampleBucketizer[258529](?)) : _unknown[43] "method" "primary method"
  {
    unknown r[257498](257497 call range(stridable = 1))
    if(257534 call _cond_test equalBuckets)
    {
      (257516 call = r(257514 call chpl_by(257511 call chpl_build_bounded_range 0(257509 call -(257507 call getNumBuckets) 1)) 2))
    }
    {
      (257530 call = r(257528 call chpl_build_bounded_range 0(257526 call -(257524 call getNumBuckets) 1)))
    }
    (257539 return r)
  } function SampleBucketizer[258529](?).getNextStartBit[257549](arg _mt[258545]:_MT[227], arg this[258543]:SampleBucketizer[258529](?), arg start_bit[257546] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    (257552 return start_bit)
  } function SampleBucketizer[258529](?).build[257563](arg _mt[258549]:_MT[227], arg this[258547]:SampleBucketizer[258529](?), arg logBuckets[257560] :
  int[13], arg equalBuckets[257566] :
  bool[10]) : _unknown[43] "method" "primary method"
  {
    (257576 call =(257572 call . this c"logBuckets") logBuckets)
    (257590 call =(257583 call . this c"numBuckets")(257588 call << 1 logBuckets))
    (257600 call =(257596 call . this c"equalBuckets") equalBuckets)
    unknown numSplitters[257610](257608 call -(257604 call . this c"numBuckets") 1)
    (257624 call =(257616 call sortedStorage numSplitters)(257623 call sortedStorage(257620 call - numSplitters 1)))
    (257632 call build 0 numSplitters 1)
  } function SampleBucketizer[258529](?).build[257642](arg _mt[258553]:_MT[227], arg this[258551]:SampleBucketizer[258529](?), arg left[257639] :
  int[13], arg right[257645] :
  int[13], arg pos[257649] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    unknown mid[257662](257660 call + left(257658 call /(257655 call - right left) 2))
    (257674 call =(257669 call storage pos)(257673 call sortedStorage mid))
    if(257708 call _cond_test(257682 call <(257679 call * 2 pos) numBuckets))
    {
      (257692 call build left mid(257690 call * 2 pos))
      (257706 call build mid right(257704 call +(257701 call * 2 pos) 1))
    }
  } function SampleBucketizer[258529](?).splitter[257720](arg _mt[258557]:_MT[227], arg this[258555]:SampleBucketizer[258529](?), arg i[257717] :
  int[13]) const ref : _unknown[43] "inline" "method" "primary method"
  {
    (257727 return(257726 call storage i))
  }
  { scopeless type
    eltType
  } function SampleBucketizer[258529](?).sortedSplitter[257739](arg _mt[258561]:_MT[227], arg this[258559]:SampleBucketizer[258529](?), arg i[257736] :
  int[13]) const ref : _unknown[43] "inline" "method" "primary method"
  {
    (257746 return(257745 call sortedStorage i))
  }
  { scopeless type
    eltType
  } function SampleBucketizer[258529](?).bucketForRecord[257756](arg _mt[258565]:_MT[227], arg this[258563]:SampleBucketizer[258529](?), arg a[257754]:_any[170](?), arg criterion[257758]:_any[170](?), arg startbit[257760]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    unknown bk[257763] 1
    {
      unknown _indexOfInterest[257800] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[257801] "expr temp" "temp"
      (257810 'move' _iterator[257801](257808 call _getIterator(257817 call chpl_direct_counted_range_iter 0 logBuckets)))
      Defer
      {
        {
          (257833 call _freeIterator _iterator[257801])
        }
      }
      { scopeless type
        (257822 'move' _indexOfInterest[257800](257819 call iteratorIndex _iterator[257801]))
      }
      ForLoop
      {
        unknown lg[257826] "index var" "insert auto destroy"
        (257828 'move' lg[257826] _indexOfInterest[257800])
        {
          (257796 call = bk(257794 call +(257777 call * 2 bk)(257792 call _cast int[13](257789 call <(257787 call chpl_compare(257783 call splitter bk) a criterion) 0))))
        }
        label _continueLabel[257805]
        _indexOfInterest[257800]
        _iterator[257801]
      }
      label _breakLabel[257806]
    }
    if(257870 call _cond_test equalBuckets)
    {
      (257866 call = bk(257864 call +(257844 call * 2 bk)(257862 call _cast int[13](257859 call ==(257857 call chpl_compare a(257855 call sortedSplitter(257852 call - bk numBuckets)) criterion) 0))))
    }
    (257886 return(257884 call - bk(257881 IfExpr  equalBuckets then
    { scopeless
      (257878 call * 2 numBuckets)
    } else
    { scopeless
      numBuckets
    } )))
  } function SampleBucketizer[258529](?).classify[257894](arg _mt[258569]:_MT[227], arg this[258567]:SampleBucketizer[258529](?), arg A[257892]:_any[170](?), arg start_n[257896]:_any[170](?), arg end_n[257898]:_any[170](?), arg criterion[257900]:_any[170](?), arg startbit[257902]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method"
  {
    const paramEqualBuckets[257905] "const" equalBuckets
    const paramLogBuckets[257910] "const" logBuckets
    const paramNumBuckets[257923] "const"(257921 call << 1(257919 call + paramLogBuckets(257917 call _cast int[13] paramEqualBuckets)))
    unknown b[257931](257930 call c_array int[13] classifyUnrollFactor)
    unknown cur[257935] start_n
    {
      unknown tmp[258320] "temp"
      (258356 'move' tmp[258320](258345 call _cond_test(258347 call <= cur(258350 call - end_n(258353 call - classifyUnrollFactor 1)))))
      WhileDo
      {
        {
          {
            unknown _indexOfInterest[257965] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[257966] "expr temp" "temp"
            (257975 'move' _iterator[257966](257973 call _getIterator(257983 call chpl_direct_range_iter 0(257980 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (257999 call _freeIterator _iterator[257966])
              }
            }
            { scopeless type
              (257988 'move' _indexOfInterest[257965](257985 call iteratorIndex _iterator[257966]))
            }
            ForLoop
            {
              unknown i[257992] "index var" "insert auto destroy"
              (257994 'move' i[257992] _indexOfInterest[257965])
              {
                (257961 call =(257959 call b i) 1)
              }
              label _continueLabel[257970]
              _indexOfInterest[257965]
              _iterator[257966]
            }
            label _breakLabel[257971]
          }
          {
            unknown _indexOfInterest[258106] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[258107] "expr temp" "temp"
            (258116 'move' _iterator[258107](258114 call _getIterator(258124 call chpl_direct_range_iter 0(258121 call - paramLogBuckets 1) 1)))
            Defer
            {
              {
                (258140 call _freeIterator _iterator[258107])
              }
            }
            { scopeless type
              (258129 'move' _indexOfInterest[258106](258126 call iteratorIndex _iterator[258107]))
            }
            ForLoop
            {
              unknown lg[258133] "index var" "insert auto destroy"
              (258135 'move' lg[258133] _indexOfInterest[258106])
              {
                {
                  unknown _indexOfInterest[258064] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[258065] "expr temp" "temp"
                  (258074 'move' _iterator[258065](258072 call _getIterator(258082 call chpl_direct_range_iter 0(258079 call - classifyUnrollFactor 1) 1)))
                  Defer
                  {
                    {
                      (258098 call _freeIterator _iterator[258065])
                    }
                  }
                  { scopeless type
                    (258087 'move' _indexOfInterest[258064](258084 call iteratorIndex _iterator[258065]))
                  }
                  ForLoop
                  {
                    unknown i[258091] "index var" "insert auto destroy"
                    (258093 'move' i[258091] _indexOfInterest[258064])
                    {
                      (258060 call =(258026 call b i)(258058 call +(258032 call * 2(258031 call b i))(258056 call _cast int[13](258053 call <(258051 call chpl_compare(258041 call splitter(258039 call b i))(258049 call A(258046 call + cur i)) criterion) 0))))
                    }
                    label _continueLabel[258069]
                    _indexOfInterest[258064]
                    _iterator[258065]
                  }
                  label _breakLabel[258070]
                }
              }
              label _continueLabel[258111]
              _indexOfInterest[258106]
              _iterator[258107]
            }
            label _breakLabel[258112]
          }
          if(258245 call _cond_test paramEqualBuckets)
          {
            {
              unknown _indexOfInterest[258203] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[258204] "expr temp" "temp"
              (258213 'move' _iterator[258204](258211 call _getIterator(258221 call chpl_direct_range_iter 0(258218 call - classifyUnrollFactor 1) 1)))
              Defer
              {
                {
                  (258237 call _freeIterator _iterator[258204])
                }
              }
              { scopeless type
                (258226 'move' _indexOfInterest[258203](258223 call iteratorIndex _iterator[258204]))
              }
              ForLoop
              {
                unknown i[258230] "index var" "insert auto destroy"
                (258232 'move' i[258230] _indexOfInterest[258203])
                {
                  (258199 call =(258159 call b i)(258197 call +(258165 call * 2(258164 call b i))(258195 call _cast int[13](258192 call ==(258190 call chpl_compare(258174 call A(258171 call + cur i))(258188 call sortedSplitter(258185 call -(258180 call b i)(258183 call / paramNumBuckets 2))) criterion) 0))))
                }
                label _continueLabel[258208]
                _indexOfInterest[258203]
                _iterator[258204]
              }
              label _breakLabel[258209]
            }
          }
          {
            unknown _indexOfInterest[258274] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[258275] "expr temp" "temp"
            (258284 'move' _iterator[258275](258282 call _getIterator(258292 call chpl_direct_range_iter 0(258289 call - classifyUnrollFactor 1) 1)))
            Defer
            {
              {
                (258308 call _freeIterator _iterator[258275])
              }
            }
            { scopeless type
              (258297 'move' _indexOfInterest[258274](258294 call iteratorIndex _iterator[258275]))
            }
            ForLoop
            {
              unknown i[258301] "index var" "insert auto destroy"
              (258303 'move' i[258301] _indexOfInterest[258274])
              {
                (258271 yield(258269 call _build_tuple(258259 call + cur i)(258266 call -(258264 call b i) paramNumBuckets)))
              }
              label _continueLabel[258279]
              _indexOfInterest[258274]
              _iterator[258275]
            }
            label _breakLabel[258280]
          }
          (258317 call += cur classifyUnrollFactor)
        }
        label _continueLabel[258323]
        (258340 'move' tmp[258320](258329 call _cond_test(258331 call <= cur(258334 call - end_n(258337 call - classifyUnrollFactor 1)))))
        tmp[258320]
      }
      label _breakLabel[258324]
    }
    {
      unknown tmp[258499] "temp"
      (258523 'move' tmp[258499](258518 call _cond_test(258520 call <= cur end_n)))
      WhileDo
      {
        {
          unknown bk[258364] 1
          {
            unknown _indexOfInterest[258404] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[258405] "expr temp" "temp"
            (258414 'move' _iterator[258405](258412 call _getIterator(258421 call chpl_direct_counted_range_iter 0 paramLogBuckets)))
            Defer
            {
              {
                (258437 call _freeIterator _iterator[258405])
              }
            }
            { scopeless type
              (258426 'move' _indexOfInterest[258404](258423 call iteratorIndex _iterator[258405]))
            }
            ForLoop
            {
              unknown lg[258430] "index var" "insert auto destroy"
              (258432 'move' lg[258430] _indexOfInterest[258404])
              {
                (258400 call = bk(258398 call +(258378 call * 2 bk)(258396 call _cast int[13](258393 call <(258391 call chpl_compare(258384 call splitter bk)(258389 call A cur) criterion) 0))))
              }
              label _continueLabel[258409]
              _indexOfInterest[258404]
              _iterator[258405]
            }
            label _breakLabel[258410]
          }
          if(258480 call _cond_test paramEqualBuckets)
          {
            (258476 call = bk(258474 call +(258448 call * 2 bk)(258472 call _cast int[13](258469 call ==(258467 call chpl_compare(258454 call A cur)(258465 call sortedSplitter(258462 call - bk(258460 call / paramNumBuckets 2))) criterion) 0))))
          }
          (258492 yield(258490 call _build_tuple cur(258487 call - bk paramNumBuckets)))
          (258496 call += cur 1)
        }
        label _continueLabel[258502]
        (258513 'move' tmp[258499](258508 call _cond_test(258510 call <= cur end_n)))
        tmp[258499]
      }
      label _breakLabel[258503]
    }
  }
  function createSplittersFromSample[258576](arg A[258574]:_any[170](?), ref arg splitterBucketizer[258579] :
  SampleBucketizer, arg criterion[258582]:_any[170](?), arg start_n[258585] :
  int[13], arg sampleSize[258589] :
  int[13], arg sampleStep[258593] :
  int[13], in arg numBuckets[258597] :
  int[13], arg forceEqualBuckets[258602] :
  ?[249] =
  none[49]) : _unknown[43]
  {
    unknown splitters[258612] "ref var"(258609 call . splitterBucketizer c"sortedStorage")
    unknown arrayIndex[258623](258621 call -(258618 call + start_n sampleStep) 1)
    unknown splitterIndex[258627] 0
    (258638 call =(258633 call splitters splitterIndex)(258637 call A arrayIndex))
    {
      unknown _indexOfInterest[258691] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[258692] "expr temp" "temp"
      (258701 'move' _iterator[258692](258699 call _getIterator(258709 call chpl_direct_range_iter 2(258706 call - numBuckets 1) 1)))
      Defer
      {
        {
          (258725 call _freeIterator _iterator[258692])
        }
      }
      { scopeless type
        (258714 'move' _indexOfInterest[258691](258711 call iteratorIndex _iterator[258692]))
      }
      ForLoop
      {
        unknown i[258718] "index var" "insert auto destroy"
        (258720 'move' i[258718] _indexOfInterest[258691])
        {
          (258651 call += arrayIndex sampleStep)
          if(258687 call _cond_test(258668 call !=(258666 call chpl_compare(258659 call splitters splitterIndex)(258664 call A arrayIndex) criterion) 0))
          {
            (258672 call += splitterIndex 1)
            (258684 call =(258679 call splitters splitterIndex)(258683 call A arrayIndex))
          }
        }
        label _continueLabel[258696]
        _indexOfInterest[258691]
        _iterator[258692]
      }
      label _breakLabel[258697]
    }
    unknown uniqueSplitters[258736](258734 call + 1 splitterIndex)
    unknown myUseEqualBuckets[258749](258747 call >=(258744 call -(258741 call - numBuckets 1) uniqueSplitters) equalBucketThreshold)
    if(258771 call _cond_test(258763 call <(258757 call + 1(258755 call * 2 uniqueSplitters))(258761 call << 1 maxLogBuckets)))
    {
      (258767 call = myUseEqualBuckets 1)
    }
    if(258785 call _cond_test(258778 call !=(258776 'typeof' forceEqualBuckets) nothing[7]))
    {
      { scopeless
        (258782 call = myUseEqualBuckets forceEqualBuckets)
      }
    }
    unknown logBuckets[258797](258795 call +(258793 call log2 uniqueSplitters) 1)
    (258805 call = numBuckets(258803 call << 1 logBuckets))
    {
      unknown _indexOfInterest[258836] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[258837] "expr temp" "temp"
      (258846 'move' _iterator[258837](258844 call _getIterator(258857 call chpl_direct_range_iter(258850 call + uniqueSplitters 1)(258854 call - numBuckets 1) 1)))
      Defer
      {
        {
          (258873 call _freeIterator _iterator[258837])
        }
      }
      { scopeless type
        (258862 'move' _indexOfInterest[258836](258859 call iteratorIndex _iterator[258837]))
      }
      ForLoop
      {
        unknown i[258866] "index var" "insert auto destroy"
        (258868 'move' i[258866] _indexOfInterest[258836])
        {
          (258821 call += splitterIndex 1)
          (258833 call =(258828 call splitters splitterIndex)(258832 call A arrayIndex))
        }
        label _continueLabel[258841]
        _indexOfInterest[258836]
        _iterator[258837]
      }
      label _breakLabel[258842]
    }
    (258889 call(258883 call . splitterBucketizer c"build") logBuckets myUseEqualBuckets)
  }
  function putRandomSampleAtArrayStart[258899](in arg start_n[258896] :
  int[13], arg end_n[258902] :
  int[13], arg A[258908] :
  (258905 call chpl__buildArrayRuntimeType nil[38]), in arg numSamples[258912] :
  int[13], arg seed[258916] =
  1) : _unknown[43]
  {
    (258921 'use' Random)
    unknown Tmp[258937](258935 call chpl__buildArrayRuntimeType(258933 call chpl__ensureDomainExpr(258926 call chpl_build_bounded_range 1 1))(258930 call . A c"eltType"))
    unknown randNums[258949](258948 call makeRandomStream(seed = seed)(eltType = int[13])(parSafe = 0))
    {
      unknown tmp[259033] "temp"
      (259057 'move' tmp[259033](259052 call _cond_test(259054 call > numSamples 0)))
      WhileDo
      {
        {
          (258958 call -= numSamples 1)
          unknown offset[258972](258971 call(258965 call . randNums c"getNext") start_n end_n)
          if(259024 call _cond_test(258977 call != offset start_n))
          {
            unknown tmp[258983](258980 call . A c"eltType")
            (258999 call(258990 call . ShallowCopy c"shallowCopy") Tmp 1 A start_n 1)
            (259010 call(259002 call . ShallowCopy c"shallowCopy") A start_n offset 1)
            (259022 call(259013 call . ShallowCopy c"shallowCopy") A offset Tmp 1 1)
          }
          (259030 call += start_n 1)
        }
        label _continueLabel[259036]
        (259047 'move' tmp[259033](259042 call _cond_test(259044 call > numSamples 0)))
        tmp[259033]
      }
      label _breakLabel[259037]
    }
  }
}