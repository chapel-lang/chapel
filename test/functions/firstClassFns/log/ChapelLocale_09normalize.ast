AST dump for ChapelLocale after pass normalize.
Module use list: LocaleModel HaltWrappers 

{
  function chpl__init_ChapelLocale[390201]() : void[4] "insert line file info" "module init"
  {
    (490222 'move' chpl_nodeID_t[90205](490220 call int(64)[13] 32))
    (490227 'move' chpl_sublocID_t[90212](490225 call int(64)[13] 32))
    { scopeless type extern
      (490229 'default init var' c_sublocid_none[90216] chpl_sublocID_t[90212])
    }
    { scopeless type extern
      (490232 'default init var' c_sublocid_any[90220] chpl_sublocID_t[90212])
    }
    { scopeless type extern
      (490235 'default init var' c_sublocid_all[90224] chpl_sublocID_t[90212])
    }
    (490250 'init var' rootLocale[91052] nil[38] unmanaged locale?[389816])
    (490252 'init var' rootLocaleInitialized[91056] 0)
    (490254 'init var' replicateRootLocale[91060] 1)
    (490256 'init var' origRootLocale[91067] nil[38] unmanaged locale?[389816])
    (581300 'move' call_tmp[581297](691378 'new' anymanaged DummyLocale[345736](?)(_chpl_manager = unmanaged[209](?))))
    (490282 'init var' dummyLocale[92026] call_tmp[581297])
    { scopeless type extern
      unknown call_tmp[581359] "expr temp" "maybe param" "maybe type" "temp"
      (581362 'move' call_tmp[581359](92149 call c_ptr[193070](?) chpl_privateObject_t[92143]))
      (490284 'default init var' chpl_privateObjects[92150] call_tmp[581359])
    }
    (465018 return _void[47])
  }
  function chpl__deinit_ChapelLocale[92455]() : _unknown[43] "no doc" "no return value for void"
  {
    (92459 call chpl__delete origRootLocale[91067])
    (465020 return _void[47])
  }
  unknown chpl_nodeID_t[90205] "insert auto destroy" "no doc" "type variable"(90204 call int(64)[13] 32)
  unknown chpl_sublocID_t[90212] "insert auto destroy" "no doc" "type variable"(90211 call int(64)[13] 32)
  const c_sublocid_none[90216] "const" "extern" "insert auto destroy" "no doc"
  const c_sublocid_any[90220] "const" "extern" "insert auto destroy" "no doc"
  const c_sublocid_all[90224] "const" "extern" "insert auto destroy" "no doc"
  function chpl_isActualSublocID[90233](arg subloc[90230] :
  chpl_sublocID_t[90212]) : _unknown[43] "inline" "no doc"
  {
    unknown ret[464595] "RVV" "temp"
    unknown tmp[397779] "maybe param" "temp"
    unknown tmp[397800] "maybe param" "temp"
    (397811 'move' tmp[397800](90237 call != subloc[90230] c_sublocid_none[90216]))
    unknown call_tmp[580723] "expr temp" "maybe param" "maybe type" "temp"
    (580726 'move' call_tmp[580723](397813 call _cond_invalid tmp[397800]))
    if call_tmp[580723]
    {
      (397816 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[509754] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[509755] "maybe param" "temp"
    unknown call_tmp[580728] "expr temp" "maybe param" "maybe type" "temp"
    (580731 'move' call_tmp[580728](397801 call isTrue tmp[397800]))
    (509760 'move' tmp[509755](509758 call _cond_test call_tmp[580728]))
    if tmp[509755]
    {
      unknown tmp[509762] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[580733] "expr temp" "maybe param" "maybe type" "temp"
      (580736 'move' call_tmp[580733](90241 call != subloc[90230] c_sublocid_any[90220]))
      (509764 'move' tmp[509762](397804 call isTrue call_tmp[580733]))
      (509769 'move' tmp[509754](509766 '_paramFoldLogical' tmp[509755] tmp[509762]))
    }
    {
      (509774 'move' tmp[509754](509771 '_paramFoldLogical' tmp[509755] 0))
    }
    (397790 'move' tmp[397779] tmp[509754])
    unknown call_tmp[580738] "expr temp" "maybe param" "maybe type" "temp"
    (580741 'move' call_tmp[580738](397792 call _cond_invalid tmp[397779]))
    if call_tmp[580738]
    {
      (397795 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[509781] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[509782] "maybe param" "temp"
    unknown call_tmp[580743] "expr temp" "maybe param" "maybe type" "temp"
    (580746 'move' call_tmp[580743](397780 call isTrue tmp[397779]))
    (509787 'move' tmp[509782](509785 call _cond_test call_tmp[580743]))
    if tmp[509782]
    {
      unknown tmp[509789] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[580748] "expr temp" "maybe param" "maybe type" "temp"
      (580751 'move' call_tmp[580748](90247 call != subloc[90230] c_sublocid_all[90224]))
      (509791 'move' tmp[509789](397783 call isTrue call_tmp[580748]))
      (509796 'move' tmp[509781](509793 '_paramFoldLogical' tmp[509782] tmp[509789]))
    }
    {
      (509801 'move' tmp[509781](509798 '_paramFoldLogical' tmp[509782] 0))
    }
    (464600 'move' ret[464595](464599 'deref' tmp[509781]))
    (464597 return ret[464595])
  }
  function locale[26].init[90259](arg _mt[90761]:_MT[227], arg this[90759]:locale[26]) : void[4] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown super_tmp[435695] "temporary of super field" "temp"
    (435703 'move' super_tmp[435695](435696 '.v' this[90759] c"super"))
    (435699 call init _mt[232] super_tmp[435695])
    unknown tmp[435604] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443227] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[580753] "expr temp" "maybe param" "maybe type" "temp"
      (580756 'move' call_tmp[580753](435606 '.v' this[90759] c"super"))
      (443231 'move' call_type_tmp[443227](435609 'typeof' call_tmp[580753]))
    }
    (435610 'move' tmp[435604] call_type_tmp[443227])
    unknown call_tmp[580758] "maybe param" "maybe type" "temp"
    (580761 'move' call_tmp[580758](435615 'cast' tmp[435604] this[90759]))
    unknown chpl__thisAsParent[435612] "insert auto destroy" "temp"
    (490238 'init var' chpl__thisAsParent[435612] call_tmp[580758] tmp[435604])
    (435618 'setcid' chpl__thisAsParent[435612])
    val tmp[435621]:borrowed locale?[389810] "temp"
    (435624 'default init var' tmp[435621] borrowed locale?[389810])
    (435626 '.=' this[90759] c"parent" tmp[435621])
    val tmp[435630]:int(64)[13] "temp"
    (435633 'default init var' tmp[435630] int(64)[13])
    (435635 '.=' this[90759] c"nPUsLogAcc" tmp[435630])
    val tmp[435639]:int(64)[13] "temp"
    (435642 'default init var' tmp[435639] int(64)[13])
    (435644 '.=' this[90759] c"nPUsLogAll" tmp[435639])
    val tmp[435648]:int(64)[13] "temp"
    (435651 'default init var' tmp[435648] int(64)[13])
    (435653 '.=' this[90759] c"nPUsPhysAcc" tmp[435648])
    val tmp[435657]:int(64)[13] "temp"
    (435660 'default init var' tmp[435657] int(64)[13])
    (435662 '.=' this[90759] c"nPUsPhysAll" tmp[435657])
    val tmp[435666]:int(64)[13] "temp"
    (435669 'default init var' tmp[435666] int(64)[13])
    (435671 '.=' this[90759] c"maxTaskPar" tmp[435666])
    unknown tmp[435675] "temp"
    (435678 'default init var' tmp[435675] size_t[209674])
    (435680 '.=' this[90759] c"callStackSize" tmp[435675])
    unknown tmp[435684] "temp"
    unknown call_tmp[580763] "expr temp" "maybe param" "maybe type" "temp"
    (580766 'move' call_tmp[580763](435687 call chpl__processorAtomicType int(64)[13]))
    (435689 'default init var' tmp[435684] call_tmp[580763])
    (435691 '.=' this[90759] c"runningTaskCounter" tmp[435684])
    (435706 'setcid' this[90759])
    (464602 return _void[47])
  }
  function locale[26].init[90271](arg _mt[90765]:_MT[227], arg this[90763]:locale[26], arg parent[90268]:borrowed locale?[389810]) : void[4] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown super_tmp[435803] "temporary of super field" "temp"
    (435811 'move' super_tmp[435803](435804 '.v' this[90763] c"super"))
    (435807 call init _mt[232] super_tmp[435803])
    unknown tmp[435712] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443233] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[580768] "expr temp" "maybe param" "maybe type" "temp"
      (580771 'move' call_tmp[580768](435714 '.v' this[90763] c"super"))
      (443237 'move' call_type_tmp[443233](435717 'typeof' call_tmp[580768]))
    }
    (435718 'move' tmp[435712] call_type_tmp[443233])
    unknown call_tmp[580773] "maybe param" "maybe type" "temp"
    (580776 'move' call_tmp[580773](435723 'cast' tmp[435712] this[90763]))
    unknown chpl__thisAsParent[435720] "insert auto destroy" "temp"
    (490240 'init var' chpl__thisAsParent[435720] call_tmp[580773] tmp[435712])
    (435726 'setcid' chpl__thisAsParent[435720])
    unknown tmp[435728] "temp"
    (435731 'init var' tmp[435728] parent[90268] borrowed locale?[389810])
    (435733 'init field' this[90763] c"parent" tmp[435728])
    val tmp[435738]:int(64)[13] "temp"
    (435741 'default init var' tmp[435738] int(64)[13])
    (435743 '.=' this[90763] c"nPUsLogAcc" tmp[435738])
    val tmp[435747]:int(64)[13] "temp"
    (435750 'default init var' tmp[435747] int(64)[13])
    (435752 '.=' this[90763] c"nPUsLogAll" tmp[435747])
    val tmp[435756]:int(64)[13] "temp"
    (435759 'default init var' tmp[435756] int(64)[13])
    (435761 '.=' this[90763] c"nPUsPhysAcc" tmp[435756])
    val tmp[435765]:int(64)[13] "temp"
    (435768 'default init var' tmp[435765] int(64)[13])
    (435770 '.=' this[90763] c"nPUsPhysAll" tmp[435765])
    val tmp[435774]:int(64)[13] "temp"
    (435777 'default init var' tmp[435774] int(64)[13])
    (435779 '.=' this[90763] c"maxTaskPar" tmp[435774])
    unknown tmp[435783] "temp"
    (435786 'default init var' tmp[435783] size_t[209674])
    (435788 '.=' this[90763] c"callStackSize" tmp[435783])
    unknown tmp[435792] "temp"
    unknown call_tmp[580778] "expr temp" "maybe param" "maybe type" "temp"
    (580781 'move' call_tmp[580778](435795 call chpl__processorAtomicType int(64)[13]))
    (435797 'default init var' tmp[435792] call_tmp[580778])
    (435799 '.=' this[90763] c"runningTaskCounter" tmp[435792])
    (435814 'setcid' this[90763])
    (464604 return _void[47])
  }
  function locale[26].numPUs[90315](arg _mt[90769]:_MT[227], arg this[90767]:locale[26], arg logical[90311]:bool[10] =
  0, arg accessible[90319]:bool[10] =
  1) : _unknown[43] "inline" "method" "primary method"
  {
    unknown ret[464608] "RVV" "temp"
    unknown tmp[509870] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[509871] "maybe param" "temp"
    (509876 'move' tmp[509871](509874 call _cond_test logical[90311]))
    if tmp[509871]
    {
      unknown tmp[509808] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[509809] "maybe param" "temp"
      (509814 'move' tmp[509809](509812 call _cond_test accessible[90319]))
      if tmp[509809]
      {
        unknown tmp[509816] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (509818 'move' tmp[509816](345552 call nPUsLogAcc _mt[232] this[90767]))
        (509823 'move' tmp[509808](509820 '_paramFoldLogical' tmp[509809] tmp[509816]))
      }
      {
        unknown tmp[509825] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (509827 'move' tmp[509825](345557 call nPUsLogAll _mt[232] this[90767]))
        (509832 'move' tmp[509808](509829 '_paramFoldLogical' tmp[509809] tmp[509825]))
      }
      (509881 'move' tmp[509870](509878 '_paramFoldLogical' tmp[509871] tmp[509808]))
    }
    {
      unknown tmp[509839] "expr temp" "if-expr result" "maybe type" "temp"
      unknown tmp[509840] "maybe param" "temp"
      (509845 'move' tmp[509840](509843 call _cond_test accessible[90319]))
      if tmp[509840]
      {
        unknown tmp[509847] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (509849 'move' tmp[509847](345563 call nPUsPhysAcc _mt[232] this[90767]))
        (509854 'move' tmp[509839](509851 '_paramFoldLogical' tmp[509840] tmp[509847]))
      }
      {
        unknown tmp[509856] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (509858 'move' tmp[509856](345568 call nPUsPhysAll _mt[232] this[90767]))
        (509863 'move' tmp[509839](509860 '_paramFoldLogical' tmp[509840] tmp[509856]))
      }
      (509886 'move' tmp[509870](509883 '_paramFoldLogical' tmp[509871] tmp[509839]))
    }
    (464613 'move' ret[464608](464612 'deref' tmp[509870]))
    (464610 return ret[464608])
  }
  function locale[26].id[90354](arg _mt[90773]:_MT[227], arg this[90771]:locale[26]) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[464617] "RVV" "temp"
    unknown call_tmp[580791] "expr temp" "maybe param" "maybe type" "temp"
    (580794 'move' call_tmp[580791](90376 '_wide_get_locale' this[90771]))
    unknown call_tmp[580796] "expr temp" "maybe param" "maybe type" "temp"
    (580799 'move' call_tmp[580796](90378 call chpl_nodeFromLocaleID call_tmp[580791]))
    (464623 'move' ret[464617](464622 'coerce' call_tmp[580796] int(64)[13]))
    (464619 return ret[464617])
  }
  { scopeless type
    int(64)[13]
  }
  function locale[26].localeid[90387](arg _mt[90777]:_MT[227], arg this[90775]:locale[26]) : _unknown[43] "method" "primary method" "no doc" "no parens"
  {
    unknown ret[464627] "RVV" "temp"
    unknown call_tmp[580801] "expr temp" "maybe param" "maybe type" "temp"
    (580804 'move' call_tmp[580801](90393 '_wide_get_locale' this[90775]))
    (464633 'move' ret[464627](464632 'coerce' call_tmp[580801] chpl_localeID_t[197056]))
    (464629 return ret[464627])
  }
  { scopeless type
    chpl_localeID_t[197056]
  }
  function locale[26].name[90402](arg _mt[90781]:_MT[227], arg this[90779]:locale[26]) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown ret[464637] "RVV" "temp"
    unknown call_tmp[580808] "expr temp" "maybe param" "maybe type" "temp"
    (580811 'move' call_tmp[580808](90406 call(345578 call (partial) chpl_name _mt[232] this[90779])))
    unknown call_tmp[580813] "expr temp" "maybe param" "maybe type" "temp"
    (580816 'move' call_tmp[580813](90408 call _cast string[24] call_tmp[580808]))
    (464642 'move' ret[464637](464641 'deref' call_tmp[580813]))
    (464639 return ret[464637])
  }
  function locale[26].runningTaskCntSet[90428](arg _mt[90785]:_MT[227], arg this[90783]:locale[26], arg val[90425]:int(64)[13]) : _unknown[43] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[580820] "expr temp" "maybe param" "maybe type" "temp"
    (580823 'move' call_tmp[580820](345585 call runningTaskCounter _mt[232] this[90783]))
    (90440 call(90431 call (partial) write _mt[232] call_tmp[580820]) val[90425] relaxed[180097])
    (464644 return _void[47])
  }
  function locale[26].runningTaskCntAdd[90451](arg _mt[90789]:_MT[227], arg this[90787]:locale[26], arg val[90448]:int(64)[13]) : _unknown[43] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[580829] "expr temp" "maybe param" "maybe type" "temp"
    (580832 'move' call_tmp[580829](345592 call runningTaskCounter _mt[232] this[90787]))
    (90463 call(90454 call (partial) add _mt[232] call_tmp[580829]) val[90448] relaxed[180097])
    (464646 return _void[47])
  }
  function locale[26].runningTaskCntSub[90474](arg _mt[90793]:_MT[227], arg this[90791]:locale[26], arg val[90471]:int(64)[13]) : _unknown[43] "inline" "method" "primary method" "no doc" "no return value for void"
  {
    unknown call_tmp[580838] "expr temp" "maybe param" "maybe type" "temp"
    (580841 'move' call_tmp[580838](345599 call runningTaskCounter _mt[232] this[90791]))
    (90486 call(90477 call (partial) sub _mt[232] call_tmp[580838]) val[90471] relaxed[180097])
    (464648 return _void[47])
  }
  function locale[26].runningTaskCnt[90493](arg _mt[90797]:_MT[227], arg this[90795]:locale[26]) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    unknown ret[464652] "RVV" "temp"
    unknown call_tmp[580847] "expr temp" "maybe param" "maybe type" "temp"
    (580850 'move' call_tmp[580847](345606 call runningTaskCounter _mt[232] this[90795]))
    unknown call_tmp[580854] "maybe param" "maybe type" "temp"
    (580857 'move' call_tmp[580854](90504 call(90496 call (partial) read _mt[232] call_tmp[580847]) relaxed[180097]))
    unknown rtc[90505] "insert auto destroy"
    (490242 'init var' rtc[90505] call_tmp[580854])
    unknown tmp[509893] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[509894] "maybe param" "temp"
    unknown call_tmp[580859] "expr temp" "maybe param" "maybe type" "temp"
    (580862 'move' call_tmp[580859](90511 call <= rtc[90505] 0))
    (509899 'move' tmp[509894](509897 call _cond_test call_tmp[580859]))
    if tmp[509894]
    {
      (509904 'move' tmp[509893](509901 '_paramFoldLogical' tmp[509894] 1))
    }
    {
      (509909 'move' tmp[509893](509906 '_paramFoldLogical' tmp[509894] rtc[90505]))
    }
    (464657 'move' ret[464652](464656 'deref' tmp[509893]))
    (464654 return ret[464652])
  }
  function locale[26].chpl_id[90524](arg _mt[90801]:_MT[227], arg this[90799]:locale[26]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464661] "RVV" "temp"
    (90534 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    unknown call_tmp[580864] "expr temp" "maybe param" "maybe type" "temp"
    (580867 'move' call_tmp[580864](90538 call - 1))
    (464667 'move' ret[464661](464666 'coerce' call_tmp[580864] int(64)[13]))
    (464663 return ret[464661])
  }
  { scopeless type
    int(64)[13]
  }
  function locale[26].chpl_localeid[90547](arg _mt[90805]:_MT[227], arg this[90803]:locale[26]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464671] "RVV" "temp"
    (90555 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    unknown call_tmp[580869] "expr temp" "maybe param" "maybe type" "temp"
    (580872 'move' call_tmp[580869](90561 call _cast chpl_nodeID_t[90205] 1))
    unknown call_tmp[580874] "expr temp" "maybe param" "maybe type" "temp"
    (580877 'move' call_tmp[580874](90563 call - call_tmp[580869]))
    unknown call_tmp[580879] "expr temp" "maybe param" "maybe type" "temp"
    (580882 'move' call_tmp[580879](90567 call chpl_buildLocaleID call_tmp[580874] c_sublocid_none[90216]))
    (464677 'move' ret[464671](464676 'coerce' call_tmp[580879] chpl_localeID_t[197056]))
    (464673 return ret[464671])
  }
  { scopeless type
    chpl_localeID_t[197056]
  }
  function locale[26].chpl_name[90575](arg _mt[90809]:_MT[227], arg this[90807]:locale[26]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464681] "RVV" "temp"
    (90583 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464687 'move' ret[464681](464686 'coerce' "" string[24]))
    (464683 return ret[464681])
  }
  { scopeless type
    string[24]
  }
  function locale[26].defaultMemory[90609](arg _mt[90813]:_MT[227], arg this[90811]:locale[26]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464691] "RVV" "temp"
    (90617 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464697 'move' ret[464691](464696 'coerce' this[90811] locale[26]))
    (464693 return ret[464691])
  }
  { scopeless type
    locale[26]
  }
  function locale[26].largeMemory[90628](arg _mt[90817]:_MT[227], arg this[90815]:locale[26]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464701] "RVV" "temp"
    (90636 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464707 'move' ret[464701](464706 'coerce' this[90815] locale[26]))
    (464703 return ret[464701])
  }
  { scopeless type
    locale[26]
  }
  function locale[26].lowLatencyMemory[90647](arg _mt[90821]:_MT[227], arg this[90819]:locale[26]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464711] "RVV" "temp"
    (90655 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464717 'move' ret[464711](464716 'coerce' this[90819] locale[26]))
    (464713 return ret[464711])
  }
  { scopeless type
    locale[26]
  }
  function locale[26].highBandwidthMemory[90666](arg _mt[90825]:_MT[227], arg this[90823]:locale[26]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464721] "RVV" "temp"
    (90674 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464727 'move' ret[464721](464726 'coerce' this[90823] locale[26]))
    (464723 return ret[464721])
  }
  { scopeless type
    locale[26]
  }
  function locale[26].writeThis[90687](arg _mt[90829]:_MT[227], arg this[90827]:locale[26], arg f[90685]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "method overrides" "no return value for void"
  {
    unknown call_tmp[580886] "expr temp" "maybe param" "maybe type" "temp"
    (580889 'move' call_tmp[580886](345628 call name _mt[232] this[90827]))
    (90691 call <~> f[90685] call_tmp[580886])
    (464729 return _void[47])
  }
  function locale[26].getChildCount[90699](arg _mt[90833]:_MT[227], arg this[90831]:locale[26]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464733] "RVV" "temp"
    (90707 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464739 'move' ret[464733](464738 'coerce' 0 int(64)[13]))
    (464735 return ret[464733])
  }
  { scopeless type
    int(64)[13]
  }
  function locale[26].addChild[90722](arg _mt[90837]:_MT[227], arg this[90835]:locale[26], arg loc[90719]:locale[26]) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (90729 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464741 return _void[47])
  }
  function locale[26].getChild[90740](arg _mt[90841]:_MT[227], arg this[90839]:locale[26], arg idx[90737]:int(64)[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown ret[464745] "RVV" "temp"
    (90748 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464751 'move' ret[464745](464750 'coerce' this[90839] locale[26]))
    (464747 return ret[464745])
  }
  { scopeless type
    locale[26]
  }
  type locale[26] val super[330951]:object[253] "super class" const-val parent[90288]:borrowed locale?[389810] "const" "no doc" borrowed locale?[389810] val nPUsLogAcc[90292]:int(64)[13] "no doc" int(64)[13] val nPUsLogAll[90296]:int(64)[13] "no doc" int(64)[13] val nPUsPhysAcc[90300]:int(64)[13] "no doc" int(64)[13] val nPUsPhysAll[90304]:int(64)[13] "no doc" int(64)[13] val maxTaskPar[90345]:int(64)[13] int(64)[13] unknown callStackSize[90349] size_t[209674] unknown runningTaskCounter[90419] "no doc"(90418 call chpl__processorAtomicType int(64)[13])
  type unmanaged locale?[389816]
  type borrowed locale?[389810]
  function DummyLocale[90976].init[90849](arg _mt[90980]:_MT[227], arg this[90978]:DummyLocale[90976]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[435836] "temporary of super field" "temp"
    (435844 'move' super_tmp[435836](435837 '.v' this[90978] c"super"))
    (435840 call init _mt[232] super_tmp[435836])
    unknown tmp[435820] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443239] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[580891] "expr temp" "maybe param" "maybe type" "temp"
      (580894 'move' call_tmp[580891](435822 '.v' this[90978] c"super"))
      (443243 'move' call_type_tmp[443239](435825 'typeof' call_tmp[580891]))
    }
    (435826 'move' tmp[435820] call_type_tmp[443239])
    unknown call_tmp[580896] "maybe param" "maybe type" "temp"
    (580899 'move' call_tmp[580896](435831 'cast' tmp[435820] this[90978]))
    unknown chpl__thisAsParent[435828] "insert auto destroy" "temp"
    (490244 'init var' chpl__thisAsParent[435828] call_tmp[580896] tmp[435820])
    (435834 'setcid' chpl__thisAsParent[435828])
    (435847 'setcid' this[90978])
    (464753 return _void[47])
  }
  function DummyLocale[90976].chpl_id[90856](arg _mt[90984]:_MT[227], arg this[90982]:DummyLocale[90976]) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[464757] "RVV" "temp"
    unknown call_tmp[580901] "expr temp" "maybe param" "maybe type" "temp"
    (580904 'move' call_tmp[580901](90860 call - 1))
    (464763 'move' ret[464757](464762 'coerce' call_tmp[580901] int(64)[13]))
    (464759 return ret[464757])
  }
  { scopeless type
    int(64)[13]
  }
  function DummyLocale[90976].chpl_localeid[90870](arg _mt[90988]:_MT[227], arg this[90986]:DummyLocale[90976]) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[464767] "RVV" "temp"
    unknown call_tmp[580906] "expr temp" "maybe param" "maybe type" "temp"
    (580909 'move' call_tmp[580906](90876 call _cast chpl_nodeID_t[90205] 1))
    unknown call_tmp[580911] "expr temp" "maybe param" "maybe type" "temp"
    (580914 'move' call_tmp[580911](90878 call - call_tmp[580906]))
    unknown call_tmp[580916] "expr temp" "maybe param" "maybe type" "temp"
    (580919 'move' call_tmp[580916](90882 call chpl_buildLocaleID call_tmp[580911] c_sublocid_none[90216]))
    (464773 'move' ret[464767](464772 'coerce' call_tmp[580916] chpl_localeID_t[197056]))
    (464769 return ret[464767])
  }
  { scopeless type
    chpl_localeID_t[197056]
  }
  function DummyLocale[90976].chpl_name[90891](arg _mt[90992]:_MT[227], arg this[90990]:DummyLocale[90976]) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[464777] "RVV" "temp"
    (464783 'move' ret[464777](464782 'coerce' "dummy-locale" string[24]))
    (464779 return ret[464777])
  }
  { scopeless type
    string[24]
  }
  function DummyLocale[90976].getChildCount[90918](arg _mt[90996]:_MT[227], arg this[90994]:DummyLocale[90976]) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[464787] "RVV" "temp"
    (464793 'move' ret[464787](464792 'coerce' 0 int(64)[13]))
    (464789 return ret[464787])
  }
  { scopeless type
    int(64)[13]
  }
  function DummyLocale[90976].getChild[90934](arg _mt[91000]:_MT[227], arg this[90998]:DummyLocale[90976], arg idx[90931]:int(64)[13]) : _unknown[43] "method" "primary method" "method overrides"
  {
    unknown ret[464797] "RVV" "temp"
    (464803 'move' ret[464797](464802 'coerce' this[90998] locale[26]))
    (464799 return ret[464797])
  }
  { scopeless type
    locale[26]
  }
  function DummyLocale[90976].addChild[90950](arg _mt[91004]:_MT[227], arg this[91002]:DummyLocale[90976], arg loc[90947]:locale[26]) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    (90970 call halt "addChild on DummyLocale")
    (464805 return _void[47])
  }
  type DummyLocale[90976] val super[331003]:locale[26] "super class"
  type anymanaged DummyLocale[345736](?)
  function AbstractLocaleModel[91037].init[91016](arg _mt[91041]:_MT[227], arg this[91039]:AbstractLocaleModel[91037], arg parent_loc[91013]:locale[26]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[435850] "temporary of super field" "temp"
    (435852 'move' super_tmp[435850](435849 '.v' this[91039] c"super"))
    (91024 call(91019 call (partial) init _mt[232] super_tmp[435850]) parent_loc[91013])
    unknown tmp[435855] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443245] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[580923] "expr temp" "maybe param" "maybe type" "temp"
      (580926 'move' call_tmp[580923](435857 '.v' this[91039] c"super"))
      (443249 'move' call_type_tmp[443245](435860 'typeof' call_tmp[580923]))
    }
    (435861 'move' tmp[435855] call_type_tmp[443245])
    unknown call_tmp[580928] "maybe param" "maybe type" "temp"
    (580931 'move' call_tmp[580928](435866 'cast' tmp[435855] this[91039]))
    unknown chpl__thisAsParent[435863] "insert auto destroy" "temp"
    (490246 'init var' chpl__thisAsParent[435863] call_tmp[580928] tmp[435855])
    (435869 'setcid' chpl__thisAsParent[435863])
    (435871 'setcid' this[91039])
    (464807 return _void[47])
  }
  function AbstractLocaleModel[91037].init[91031](arg _mt[91045]:_MT[227], arg this[91043]:AbstractLocaleModel[91037]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[435893] "temporary of super field" "temp"
    (435901 'move' super_tmp[435893](435894 '.v' this[91043] c"super"))
    (435897 call init _mt[232] super_tmp[435893])
    unknown tmp[435877] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443251] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[580933] "expr temp" "maybe param" "maybe type" "temp"
      (580936 'move' call_tmp[580933](435879 '.v' this[91043] c"super"))
      (443255 'move' call_type_tmp[443251](435882 'typeof' call_tmp[580933]))
    }
    (435883 'move' tmp[435877] call_type_tmp[443251])
    unknown call_tmp[580938] "maybe param" "maybe type" "temp"
    (580941 'move' call_tmp[580938](435888 'cast' tmp[435877] this[91043]))
    unknown chpl__thisAsParent[435885] "insert auto destroy" "temp"
    (490248 'init var' chpl__thisAsParent[435885] call_tmp[580938] tmp[435877])
    (435891 'setcid' chpl__thisAsParent[435885])
    (435904 'setcid' this[91043])
    (464809 return _void[47])
  }
  type AbstractLocaleModel[91037] val super[330995]:locale[26] "super class"
  unknown rootLocale[91052] "insert auto destroy" "locale private" "no doc"
  unknown rootLocaleInitialized[91056] "insert auto destroy" "locale private" "no doc"
  unknown replicateRootLocale[91060] "config" "no doc" "param"
  unknown origRootLocale[91067] "insert auto destroy" "no doc"
  function AbstractRootLocale[91537].init[91075](arg _mt[91541]:_MT[227], arg this[91539]:AbstractRootLocale[91537]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[435926] "temporary of super field" "temp"
    (435934 'move' super_tmp[435926](435927 '.v' this[91539] c"super"))
    (435930 call init _mt[232] super_tmp[435926])
    unknown tmp[435910] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443257] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[580943] "expr temp" "maybe param" "maybe type" "temp"
      (580946 'move' call_tmp[580943](435912 '.v' this[91539] c"super"))
      (443261 'move' call_type_tmp[443257](435915 'typeof' call_tmp[580943]))
    }
    (435916 'move' tmp[435910] call_type_tmp[443257])
    unknown call_tmp[580948] "maybe param" "maybe type" "temp"
    (580951 'move' call_tmp[580948](435921 'cast' tmp[435910] this[91539]))
    unknown chpl__thisAsParent[435918] "insert auto destroy" "temp"
    (490258 'init var' chpl__thisAsParent[435918] call_tmp[580948] tmp[435910])
    (435924 'setcid' chpl__thisAsParent[435918])
    (435937 'setcid' this[91539])
    (464811 return _void[47])
  }
  function AbstractRootLocale[91537].init[91087](arg _mt[91545]:_MT[227], arg this[91543]:AbstractRootLocale[91537], arg parent_loc[91084]:borrowed locale?[389810]) : void[4] "inline" "method" "primary method" "no return value for void"
  {
    unknown super_tmp[435940] "temporary of super field" "temp"
    (435942 'move' super_tmp[435940](435939 '.v' this[91543] c"super"))
    (91095 call(91090 call (partial) init _mt[232] super_tmp[435940]) parent_loc[91084])
    unknown tmp[435945] "temp" "type variable"
    { scopeless type
      unknown call_type_tmp[443263] "expr temp" "maybe type" "temp" "type variable"
      unknown call_tmp[580955] "expr temp" "maybe param" "maybe type" "temp"
      (580958 'move' call_tmp[580955](435947 '.v' this[91543] c"super"))
      (443267 'move' call_type_tmp[443263](435950 'typeof' call_tmp[580955]))
    }
    (435951 'move' tmp[435945] call_type_tmp[443263])
    unknown call_tmp[580960] "maybe param" "maybe type" "temp"
    (580963 'move' call_tmp[580960](435956 'cast' tmp[435945] this[91543]))
    unknown chpl__thisAsParent[435953] "insert auto destroy" "temp"
    (490260 'init var' chpl__thisAsParent[435953] call_tmp[580960] tmp[435945])
    (435959 'setcid' chpl__thisAsParent[435953])
    (435961 'setcid' this[91543])
    (464813 return _void[47])
  }
  function AbstractRootLocale[91537].getDefaultLocaleSpace[91102](arg _mt[91549]:_MT[227], arg this[91547]:AbstractRootLocale[91537]) const ref : _unknown[43] "method" "primary method"
  {
    unknown ret[464817] "RVV" "temp"
    (91109 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464822 'move' ret[464817](464821 'addr of' chpl_emptyLocaleSpace[89207]))
    (464819 return ret[464817])
  }
  function AbstractRootLocale[91537].getDefaultLocaleArray[91119](arg _mt[91553]:_MT[227], arg this[91551]:AbstractRootLocale[91537]) const ref : _unknown[43] "method" "primary method"
  {
    unknown ret[464826] "RVV" "temp"
    (91126 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464831 'move' ret[464826](464830 'addr of' chpl_emptyLocales[89217]))
    (464828 return ret[464826])
  }
  function AbstractRootLocale[91537].localeIDtoLocale[91140](arg _mt[91557]:_MT[227], arg this[91555]:AbstractRootLocale[91537], arg id[91137]:chpl_localeID_t[197056]) : _unknown[43] "method" "primary method"
  {
    unknown ret[464835] "RVV" "temp"
    (91148 call pureVirtualMethodHalt module=[244] HaltWrappers[197622])
    (464841 'move' ret[464835](464840 'coerce' this[91555] locale[26]))
    (464837 return ret[464835])
  }
  { scopeless type
    locale[26]
  }
  function AbstractRootLocale[91537].chpl_initOnLocales[91159](arg _mt[91561]:_MT[227], arg this[91559]:AbstractRootLocale[91537]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[464845] "RVV" "temp"
    unknown call_tmp[580965] "expr temp" "maybe param" "maybe type" "temp"
    (580968 'move' call_tmp[580965](91163 call > numLocales[197588] 1))
    unknown call_tmp[580970] "expr temp" "maybe param" "maybe type" "temp"
    (580973 'move' call_tmp[580970](91185 call _cond_test call_tmp[580965]))
    if call_tmp[580970]
    {
      (91183 call halt "The locales must be initialized in parallel")
    }
    {
      unknown _indexOfInterest[91221] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[91222] "expr temp" "temp"
      unknown call_tmp[580975] "expr temp" "maybe param" "maybe type" "temp"
      (580978 'move' call_tmp[580975](91196 call _cast borrowed RootLocale?[389827] origRootLocale[91067]))
      unknown call_tmp[580980] "expr temp" "maybe param" "maybe type" "temp"
      (580983 'move' call_tmp[580980](91198 call postfix! call_tmp[580975]))
      unknown call_tmp[580987] "expr temp" "maybe param" "maybe type" "temp"
      (580990 'move' call_tmp[580987](91206 call(91202 call (partial) getDefaultLocaleSpace _mt[232] call_tmp[580980])))
      (91231 'move' _iterator[91222](91229 call _getIterator call_tmp[580987]))
      Defer
      {
        {
          (91248 call _freeIterator _iterator[91222])
        }
      }
      { scopeless type
        (91237 'move' _indexOfInterest[91221](91234 call iteratorIndex _iterator[91222]))
      }
      ForLoop
      {
        unknown locIdx[91241] "index var" "insert auto destroy"
        (91243 'move' locIdx[91241] _indexOfInterest[91221])
        {
          unknown yret[464849] "YVV" "temp"
          (464852 'move' yret[464849](464851 'deref' locIdx[91241]))
          (464854 yield yret[464849])
          (91213 call = rootLocale[91052] origRootLocale[91067])
          (91218 call = rootLocaleInitialized[91056] 1)
        }
        label _continueLabel[91226]
        _indexOfInterest[91221]
        _iterator[91222]
      }
      label _breakLabel[91227]
    }
    (464847 return ret[464845])
  }
  function AbstractRootLocale[91537].chpl_initOnLocales[91263](arg _mt[91565]:_MT[227], arg this[91563]:AbstractRootLocale[91537], param arg tag[91260]:iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    unknown ret[464858] "RVV" "temp"
    unknown b[91273] "insert auto destroy"
    (490262 'default init var' b[91273] localesBarrier[91781])
    unknown flags[91293] "insert auto destroy"
    unknown call_tmp[580992] "expr temp" "maybe param" "maybe type" "temp"
    (580995 'move' call_tmp[580992](91278 call chpl_build_low_bounded_range 1))
    unknown call_tmp[580997] "expr temp" "maybe param" "maybe type" "temp"
    (581000 'move' call_tmp[580997](91282 call - numLocales[197588] 1))
    unknown call_tmp[581002] "expr temp" "maybe param" "maybe type" "temp"
    (581005 'move' call_tmp[581002](91284 call # call_tmp[580992] call_tmp[580997]))
    unknown call_tmp[581007] "expr temp" "maybe param" "maybe type" "temp"
    (581010 'move' call_tmp[581007](91289 call chpl__ensureDomainExpr call_tmp[581002]))
    unknown call_tmp[581012] "expr temp" "maybe param" "maybe type" "temp"
    (581015 'move' call_tmp[581012](91291 call chpl__buildArrayRuntimeType call_tmp[581007] unmanaged localesSignal[389831]))
    (490264 'default init var' flags[91293] call_tmp[581012])
    {
      unknown tmpIter[91346] "expr temp" "maybe ref" "no copy" "temp"
      unknown call_tmp[581017] "expr temp" "maybe param" "maybe type" "temp"
      (581020 'move' call_tmp[581017](91298 call chpl_build_low_bounded_range 0))
      (91349 'move' tmpIter[91346](91301 call # call_tmp[581017] numLocales[197588]))
      unknown isRngDomArr[91514] "maybe param" "temp"
      unknown tmp[397821] "maybe param" "temp"
      (397832 'move' tmp[397821](91516 call isBoundedRange tmpIter[91346]))
      unknown call_tmp[581022] "expr temp" "maybe param" "maybe type" "temp"
      (581025 'move' call_tmp[581022](397834 call _cond_invalid tmp[397821]))
      if call_tmp[581022]
      {
        (397837 call compilerError "cannot promote short-circuiting || operator")
      }
      unknown tmp[509943] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
      unknown tmp[509944] "maybe param" "temp"
      unknown call_tmp[581027] "expr temp" "maybe param" "maybe type" "temp"
      (581030 'move' call_tmp[581027](397822 call isTrue tmp[397821]))
      (509949 'move' tmp[509944](509947 call _cond_test call_tmp[581027]))
      if tmp[509944]
      {
        (509954 'move' tmp[509943](509951 '_paramFoldLogical' tmp[509944] 1))
      }
      {
        unknown tmp[397842] "maybe param" "temp"
        (397853 'move' tmp[397842](91519 call isDomain tmpIter[91346]))
        unknown call_tmp[581032] "expr temp" "maybe param" "maybe type" "temp"
        (581035 'move' call_tmp[581032](397855 call _cond_invalid tmp[397842]))
        if call_tmp[581032]
        {
          (397858 call compilerError "cannot promote short-circuiting || operator")
        }
        unknown tmp[509916] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
        unknown tmp[509917] "maybe param" "temp"
        unknown call_tmp[581037] "expr temp" "maybe param" "maybe type" "temp"
        (581040 'move' call_tmp[581037](397843 call isTrue tmp[397842]))
        (509922 'move' tmp[509917](509920 call _cond_test call_tmp[581037]))
        if tmp[509917]
        {
          (509927 'move' tmp[509916](509924 '_paramFoldLogical' tmp[509917] 1))
        }
        {
          unknown tmp[509929] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
          unknown call_tmp[581042] "expr temp" "maybe param" "maybe type" "temp"
          (581045 'move' call_tmp[581042](91522 call isArray tmpIter[91346]))
          (509931 'move' tmp[509929](397847 call isTrue call_tmp[581042]))
          (509936 'move' tmp[509916](509933 '_paramFoldLogical' tmp[509917] tmp[509929]))
        }
        unknown tmp[509956] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
        (509958 'move' tmp[509956](397826 call isTrue tmp[509916]))
        (509963 'move' tmp[509943](509960 '_paramFoldLogical' tmp[509944] tmp[509956]))
      }
      (91529 'move' isRngDomArr[91514] tmp[509943])
      if isRngDomArr[91514]
      {
        const _coforallCount[91381] "const" "end count" "temp"
        (91450 'move' _coforallCount[91381](91447 call _endCountAlloc 1))
        unknown numTasks[91382] "temp"
        (91434 'move' numTasks[91382](91430 call size _mt[232] tmpIter[91346]))
        (91425 call _upEndCount _coforallCount[91381] 1 numTasks[91382])
        (91422 call chpl_resetTaskSpawn numTasks[91382])
        unknown _indexOfInterest[91389] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91390] "expr temp" "temp"
        (91399 'move' _iterator[91390](91397 call _getIterator tmpIter[91346]))
        Defer
        {
          {
            (91415 call _freeIterator _iterator[91390])
          }
        }
        { scopeless type
          (91404 'move' _indexOfInterest[91389](91401 call iteratorIndex _iterator[91390]))
        }
        ForLoop
        {
          unknown locIdx[91408] "coforall index var" "index var" "insert auto destroy"
          (91410 'move' locIdx[91408] _indexOfInterest[91389])
          {
            {
              const tmp[91352] "const" "temp"
              unknown call_tmp[581049] "expr temp" "maybe param" "maybe type" "temp"
              (581052 'move' call_tmp[581049](91361 call _cast chpl_nodeID_t[90205] locIdx[91408]))
              unknown call_tmp[581054] "expr temp" "maybe param" "maybe type" "temp"
              (581057 'move' call_tmp[581054](91359 call chpl_buildLocaleID call_tmp[581049] c_sublocid_any[90220]))
              unknown call_tmp[581059] "expr temp" "maybe param" "maybe type" "temp"
              (581062 'move' call_tmp[581059](91357 'chpl_on_locale_num' call_tmp[581054]))
              (91354 'move' tmp[91352](91356 'deref' call_tmp[581059]))
              {
                (91367 call chpl_defaultDistInitPrivate)
                unknown yret[464862] "YVV" "temp"
                (464865 'move' yret[464862](464864 'deref' locIdx[91408]))
                (464867 yield yret[464862])
                (91374 call(91371 call (partial) wait _mt[232] b[91273]) locIdx[91408] flags[91293])
                (91378 call chpl_rootLocaleInitPrivate locIdx[91408])
              }
            }
            (91384 call _downEndCount _coforallCount[91381] nil[38])
            (91383 'coforall loop')
          }
          label _continueLabel[91394]
          _indexOfInterest[91389]
          _iterator[91390]
        }
        label _breakLabel[91395]
        Defer
        {
          {
            (91437 call _endCountFree _coforallCount[91381])
          }
        }
        (91442 call _waitEndCount _coforallCount[91381] 1 numTasks[91382])
      }
      {
        const _coforallCount[91454] "const" "end count" "temp"
        (91511 'move' _coforallCount[91454](91508 call _endCountAlloc 1))
        unknown _indexOfInterest[91462] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91463] "expr temp" "temp"
        (91472 'move' _iterator[91463](91470 call _getIterator tmpIter[91346]))
        Defer
        {
          {
            (91488 call _freeIterator _iterator[91463])
          }
        }
        { scopeless type
          (91477 'move' _indexOfInterest[91462](91474 call iteratorIndex _iterator[91463]))
        }
        ForLoop
        {
          unknown locIdx[91481] "coforall index var" "index var" "insert auto destroy"
          (91483 'move' locIdx[91481] _indexOfInterest[91462])
          (91495 call _upEndCount _coforallCount[91454] 1)
          {
            {
              const tmp[91340] "const" "temp"
              unknown call_tmp[581066] "expr temp" "maybe param" "maybe type" "temp"
              (581069 'move' call_tmp[581066](91308 call _cast chpl_nodeID_t[90205] locIdx[91481]))
              unknown call_tmp[581071] "expr temp" "maybe param" "maybe type" "temp"
              (581074 'move' call_tmp[581071](91312 call chpl_buildLocaleID call_tmp[581066] c_sublocid_any[90220]))
              unknown call_tmp[581076] "expr temp" "maybe param" "maybe type" "temp"
              (581079 'move' call_tmp[581076](91313 'chpl_on_locale_num' call_tmp[581071]))
              (91341 'move' tmp[91340](91338 'deref' call_tmp[581076]))
              {
                (91316 call chpl_defaultDistInitPrivate)
                unknown yret[464869] "YVV" "temp"
                (464872 'move' yret[464869](464871 'deref' locIdx[91481]))
                (464874 yield yret[464869])
                (91331 call(91325 call (partial) wait _mt[232] b[91273]) locIdx[91481] flags[91293])
                (91336 call chpl_rootLocaleInitPrivate locIdx[91481])
              }
            }
            (91457 call _downEndCount _coforallCount[91454] nil[38])
            (91456 'coforall loop')
          }
          label _continueLabel[91467]
          _indexOfInterest[91462]
          _iterator[91463]
        }
        label _breakLabel[91468]
        Defer
        {
          {
            (91499 call _endCountFree _coforallCount[91454])
          }
        }
        (91504 call _waitEndCount _coforallCount[91454] 1)
      }
    }
    (464860 return ret[464858])
  }
  where {
    (91270 call == tag[91260] standalone[695])
  }
  type AbstractRootLocale[91537] val super[330999]:locale[26] "super class"
  type borrowed AbstractRootLocale?[389845]
  type anymanaged AbstractRootLocale?[389841](?)
  type anymanaged AbstractRootLocale[345754](?)
  type localesSignal[91576] val super[331005]:object[253] "super class" unknown s[91572](91570 call chpl__atomicType bool[10])
  type unmanaged localesSignal[389831]
  type anymanaged localesSignal[345674](?)
  function localesBarrier[91781].wait[91584](arg _mt[91785]:_MT[227], arg this[91783]:localesBarrier[91781], arg locIdx[91582]:_any[170](?), arg flags[91586]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    unknown call_tmp[581083] "expr temp" "maybe param" "maybe type" "temp"
    (581086 'move' call_tmp[581083](91590 call == locIdx[91582] 0))
    unknown call_tmp[581088] "expr temp" "maybe param" "maybe type" "temp"
    (581091 'move' call_tmp[581088](91773 call _cond_test call_tmp[581083]))
    if call_tmp[581088]
    {
      {
        unknown tmp[91667] "temp"
        (91685 'move' tmp[91667](91683 call _cond_test 1))
        WhileDo
        {
          {
            (91595 call atomicFence)
            unknown count[91599] "insert auto destroy"
            (490266 'init var' count[91599] 0)
            {
              unknown _indexOfInterest[91615] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[91616] "expr temp" "temp"
              (91625 'move' _iterator[91616](91623 call _getIterator flags[91586]))
              Defer
              {
                {
                  (91641 call _freeIterator _iterator[91616])
                }
              }
              { scopeless type
                (91630 'move' _indexOfInterest[91615](91627 call iteratorIndex _iterator[91616]))
              }
              ForLoop
              {
                unknown f[91634] "index var" "insert auto destroy"
                (91636 'move' f[91634] _indexOfInterest[91615])
                unknown call_tmp[581093] "expr temp" "maybe param" "maybe type" "temp"
                (581096 'move' call_tmp[581093](91610 call _cond_test f[91634]))
                if call_tmp[581093]
                {
                  (91607 call += count[91599] 1)
                }
                label _continueLabel[91620]
                _indexOfInterest[91615]
                _iterator[91616]
              }
              label _breakLabel[91621]
            }
            unknown call_tmp[581098] "expr temp" "maybe param" "maybe type" "temp"
            (581101 'move' call_tmp[581098](91651 call - numLocales[197588] 1))
            unknown call_tmp[581103] "expr temp" "maybe param" "maybe type" "temp"
            (581106 'move' call_tmp[581103](91653 call == count[91599] call_tmp[581098]))
            unknown call_tmp[581108] "expr temp" "maybe param" "maybe type" "temp"
            (581111 'move' call_tmp[581108](91658 call _cond_test call_tmp[581103]))
            if call_tmp[581108]
            {
              break _breakLabel[91671] _breakLabel[91671]
            }
            (91665 call chpl_task_yield)
          }
          label _continueLabel[91670]
          (91678 'move' tmp[91667](91676 call _cond_test 1))
          tmp[91667]
        }
        label _breakLabel[91671]
      }
      {
        unknown _indexOfInterest[91707] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[91708] "expr temp" "temp"
        (91717 'move' _iterator[91708](91715 call _getIterator flags[91586]))
        Defer
        {
          {
            (91733 call _freeIterator _iterator[91708])
          }
        }
        { scopeless type
          (91722 'move' _indexOfInterest[91707](91719 call iteratorIndex _iterator[91708]))
        }
        ForLoop
        {
          unknown f[91726] "index var" "insert auto destroy"
          (91728 'move' f[91726] _indexOfInterest[91707])
          unknown call_tmp[581113] "expr temp" "maybe param" "maybe type" "temp"
          (581116 'move' call_tmp[581113](91692 call postfix! f[91726]))
          unknown call_tmp[581120] "expr temp" "maybe param" "maybe type" "temp"
          (581123 'move' call_tmp[581120](91696 call s _mt[232] call_tmp[581113]))
          (91705 call(91701 call (partial) testAndSet _mt[232] call_tmp[581120]))
          label _continueLabel[91712]
          _indexOfInterest[91707]
          _iterator[91708]
        }
        label _breakLabel[91713]
      }
    }
    {
      unknown call_tmp[581127] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (581130 'move' call_tmp[581127](691375 'new' anymanaged localesSignal[345674](?)(_chpl_manager = unmanaged[209](?))))
      unknown f[91745] "insert auto destroy"
      (490268 'init var' f[91745] call_tmp[581127])
      unknown call_tmp[581132] "expr temp" "maybe param" "maybe type" "temp"
      (581135 'move' call_tmp[581132](91752 call flags[91586] locIdx[91582]))
      (91754 call = call_tmp[581132] f[91745])
      unknown call_tmp[581139] "expr temp" "maybe param" "maybe type" "temp"
      (581142 'move' call_tmp[581139](91758 call s _mt[232] f[91745]))
      (91766 call(91761 call (partial) waitFor _mt[232] call_tmp[581139]) 1)
      (91770 call chpl__delete f[91745])
    }
    (464876 return _void[47])
  }
  type localesBarrier[91781]
  function chpl_init_rootLocale[91790]() : _unknown[43] "no doc" "no return value for void"
  {
    unknown tmp[397863] "maybe param" "temp"
    (397874 'move' tmp[397863](91794 call > numLocales[197588] 1))
    unknown call_tmp[581146] "expr temp" "maybe param" "maybe type" "temp"
    (581149 'move' call_tmp[581146](397876 call _cond_invalid tmp[397863]))
    if call_tmp[581146]
    {
      (397879 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[509970] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[509971] "maybe param" "temp"
    unknown call_tmp[581151] "expr temp" "maybe param" "maybe type" "temp"
    (581154 'move' call_tmp[581151](397864 call isTrue tmp[397863]))
    (509976 'move' tmp[509971](509974 call _cond_test call_tmp[581151]))
    if tmp[509971]
    {
      unknown tmp[509978] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      (509980 'move' tmp[509978](397867 call isTrue 1))
      (509985 'move' tmp[509970](509982 '_paramFoldLogical' tmp[509971] tmp[509978]))
    }
    {
      (509990 'move' tmp[509970](509987 '_paramFoldLogical' tmp[509971] 0))
    }
    unknown call_tmp[581156] "expr temp" "maybe param" "maybe type" "temp"
    (581159 'move' call_tmp[581156](91819 call _cond_test tmp[509970]))
    if call_tmp[581156]
    {
      (91817 call halt "Cannot run a program compiled with --local in more than 1 locale")
    }
    unknown call_tmp[581161] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
    (581164 'move' call_tmp[581161](691376 'new' anymanaged RootLocale[345661](?)(_chpl_manager = unmanaged[209](?))))
    (91831 call = origRootLocale[91067] call_tmp[581161])
    unknown call_tmp[581166] "expr temp" "maybe param" "maybe type" "temp"
    (581169 'move' call_tmp[581166](91838 call _cast borrowed RootLocale?[389827] origRootLocale[91067]))
    unknown call_tmp[581171] "expr temp" "maybe param" "maybe type" "temp"
    (581174 'move' call_tmp[581171](91840 call postfix! call_tmp[581166]))
    (91848 call(91844 call (partial) setup _mt[232] call_tmp[581171]))
    (464878 return _void[47])
  }
  function chpl_rootLocaleInitPrivate[91856](arg locIdx[91854]:_any[170](?)) : _unknown[43] "no doc" "no return value for void"
  {
    (91860 call = rootLocale[91052] origRootLocale[91067])
    unknown tmp[397884] "maybe param" "temp"
    (397895 'move' tmp[397884] replicateRootLocale[91060])
    unknown call_tmp[581178] "expr temp" "maybe param" "maybe type" "temp"
    (581181 'move' call_tmp[581178](397897 call _cond_invalid tmp[397884]))
    if call_tmp[581178]
    {
      (397900 call compilerError "cannot promote short-circuiting && operator")
    }
    unknown tmp[509997] "expr temp" "if-expr result" "insert auto destroy" "maybe type" "temp"
    unknown tmp[509998] "maybe param" "temp"
    unknown call_tmp[581183] "expr temp" "maybe param" "maybe type" "temp"
    (581186 'move' call_tmp[581183](397885 call isTrue tmp[397884]))
    (510003 'move' tmp[509998](510001 call _cond_test call_tmp[581183]))
    if tmp[509998]
    {
      unknown tmp[510005] "expr temp" "maybe param" "maybe type" "no auto destroy" "temp"
      unknown call_tmp[581188] "expr temp" "maybe param" "maybe type" "temp"
      (581191 'move' call_tmp[581188](91867 call != locIdx[91854] 0))
      (510007 'move' tmp[510005](397888 call isTrue call_tmp[581188]))
      (510012 'move' tmp[509997](510009 '_paramFoldLogical' tmp[509998] tmp[510005]))
    }
    {
      (510017 'move' tmp[509997](510014 '_paramFoldLogical' tmp[509998] 0))
    }
    unknown call_tmp[581193] "expr temp" "maybe param" "maybe type" "temp"
    (581196 'move' call_tmp[581193](91964 call _cond_test tmp[509997]))
    if call_tmp[581193]
    {
      unknown call_tmp[581198] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
      (581201 'move' call_tmp[581198](691377 'new' anymanaged RootLocale[345661](?)(_chpl_manager = unmanaged[209](?))))
      unknown newRootLocale[91876] "insert auto destroy"
      (490270 'init var' newRootLocale[91876] call_tmp[581198])
      const origLocales[91895] "const" "no auto destroy" "no copy" "ref var"
      unknown call_tmp[581203] "expr temp" "maybe param" "maybe type" "temp"
      (581206 'move' call_tmp[581203](91884 call _cast borrowed RootLocale?[389827] origRootLocale[91067]))
      unknown call_tmp[581208] "expr temp" "maybe param" "maybe type" "temp"
      (581211 'move' call_tmp[581208](91886 call postfix! call_tmp[581203]))
      unknown call_tmp[581215] "expr temp" "maybe param" "maybe type" "temp"
      (581218 'move' call_tmp[581215](91894 call(91890 call (partial) getDefaultLocaleArray _mt[232] call_tmp[581208])))
      (490273 'move' origLocales[91895](490272 'addr of' call_tmp[581215]))
      unknown call_tmp[581222] "expr temp" "maybe param" "maybe type" "temp"
      (581225 'move' call_tmp[581222](91899 call _value _mt[232] origLocales[91895]))
      unknown call_tmp[581229] "maybe param" "maybe type" "temp"
      (581232 'move' call_tmp[581229](91904 call theData _mt[232] call_tmp[581222]))
      unknown origRL[91907] "insert auto destroy"
      (490275 'init var' origRL[91907] call_tmp[581229])
      unknown call_tmp[581236] "expr temp" "maybe param" "maybe type" "temp"
      (581239 'move' call_tmp[581236](91915 call(91911 call (partial) getDefaultLocaleArray _mt[232] newRootLocale[91876])))
      unknown call_tmp[581243] "expr temp" "maybe param" "maybe type" "temp"
      (581246 'move' call_tmp[581243](91916 call _value _mt[232] call_tmp[581236]))
      unknown call_tmp[581250] "maybe param" "maybe type" "temp"
      (581253 'move' call_tmp[581250](91919 call theData _mt[232] call_tmp[581243]))
      unknown newRL[91922] "insert auto destroy"
      (490277 'init var' newRL[91922] call_tmp[581250])
      unknown call_tmp[581255] "expr temp" "maybe param" "maybe type" "temp"
      (581258 'move' call_tmp[581255](91946 'array_get' newRL[91922] 0))
      unknown call_tmp[581260] "expr temp" "maybe param" "maybe type" "temp"
      (581263 'move' call_tmp[581260](91952 'array_get' origRL[91907] 0))
      unknown call_tmp[581265] "expr temp" "maybe param" "maybe type" "temp"
      (581268 'move' call_tmp[581265](91955 call _cast size_t[209674] numLocales[197588]))
      (91957 'chpl_comm_array_get' call_tmp[581255] 0 call_tmp[581260] call_tmp[581265])
      (91961 call = rootLocale[91052] newRootLocale[91876])
    }
    unknown call_tmp[581270] "expr temp" "maybe param" "maybe type" "temp"
    (581273 'move' call_tmp[581270](91970 call != locIdx[91854] 0))
    unknown call_tmp[581275] "expr temp" "maybe param" "maybe type" "temp"
    (581278 'move' call_tmp[581275](92010 call _cond_test call_tmp[581270]))
    if call_tmp[581275]
    {
      const tmp[91985] "const" "no auto destroy" "ref var"
      unknown call_tmp[581280] "expr temp" "maybe param" "maybe type" "temp"
      (581283 'move' call_tmp[581280](91976 call _cast borrowed RootLocale?[389827] rootLocale[91052]))
      unknown call_tmp[581285] "expr temp" "maybe param" "maybe type" "temp"
      (581288 'move' call_tmp[581285](91978 call postfix! call_tmp[581280]))
      unknown call_tmp[581292] "expr temp" "maybe param" "maybe type" "temp"
      (581295 'move' call_tmp[581292](91984 call(91980 call (partial) getDefaultLocaleArray _mt[232] call_tmp[581285])))
      (490280 'move' tmp[91985](490279 'addr of' call_tmp[581292]))
      (92008 'move' Locales[111767] tmp[91985])
    }
    (92016 call = rootLocaleInitialized[91056] 1)
    (464880 return _void[47])
  }
  unknown call_tmp[581297] "insert auto destroy for explicit new" "maybe param" "maybe type" "temp"
  const dummyLocale[92026] "const" "insert auto destroy" "no doc"
  function chpl_task_getRequestedSubloc[92031]() : _unknown[43] "extern" "local args" "no fn body" "no doc" "fn synchronization free" "no return value for void"
  {
    unknown ret[464884] "RVV" "temp"
    (464886 return ret[464884])
  }
  { scopeless type
    chpl_sublocID_t[90212]
  }
  function chpl_getLocaleID[92043](ref arg localeID[92040]:chpl_localeID_t[197056]) : _unknown[43] "export" "insert line file info" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[581302] "expr temp" "maybe param" "maybe type" "temp"
    (581305 'move' call_tmp[581302](345742 call here_id[92055]))
    (92047 call = localeID[92040] call_tmp[581302])
    (464888 return _void[47])
  }
  function here_id[92055]() : _unknown[43] "inline" "no doc" "no parens"
  {
    unknown ret[464892] "RVV" "temp"
    unknown call_tmp[581307] "expr temp" "maybe param" "maybe type" "temp"
    (581310 'move' call_tmp[581307](92074 call _cond_test localeModelHasSublocales[180486]))
    if call_tmp[581307]
    {
      unknown call_tmp[581312] "expr temp" "maybe param" "maybe type" "temp"
      (581315 'move' call_tmp[581312](92063 call chpl_task_getRequestedSubloc))
      unknown call_tmp[581317] "expr temp" "maybe param" "maybe type" "temp"
      (581320 'move' call_tmp[581317](92064 call chpl_rt_buildLocaleID chpl_nodeID[195933] call_tmp[581312]))
      (464897 'move' ret[464892](464896 'deref' call_tmp[581317]))
      gotoReturn _end_here_id[464890] _end_here_id[464890]
    }
    {
      unknown call_tmp[581322] "expr temp" "maybe param" "maybe type" "temp"
      (581325 'move' call_tmp[581322](92071 call chpl_rt_buildLocaleID chpl_nodeID[195933] c_sublocid_any[90220]))
      (464902 'move' ret[464892](464901 'deref' call_tmp[581322]))
      gotoReturn _end_here_id[464890] _end_here_id[464890]
    }
    label _end_here_id[464890]
    (464894 return ret[464892])
  }
  function here[92085]() : _unknown[43] "inline" "no parens"
  {
    unknown ret[464908] "RVV" "temp"
    unknown call_tmp[581327] "expr temp" "maybe param" "maybe type" "temp"
    (581330 'move' call_tmp[581327](345748 call here_id[92055]))
    unknown call_tmp[581332] "expr temp" "maybe param" "maybe type" "temp"
    (581335 'move' call_tmp[581332](92090 call chpl_localeID_to_locale call_tmp[581327]))
    (464913 'move' ret[464908](464912 'deref' call_tmp[581332]))
    (464910 return ret[464908])
  }
  function chpl_localeID_to_locale[92102](arg id[92099]:chpl_localeID_t[197056]) : _unknown[43] "no doc" "fn returns infinite lifetime"
  {
    unknown ret[464917] "RVV" "temp"
    unknown call_tmp[581337] "expr temp" "maybe param" "maybe type" "temp"
    (581340 'move' call_tmp[581337](92127 call _cond_test rootLocale[91052]))
    if call_tmp[581337]
    {
      unknown call_tmp[581342] "expr temp" "maybe param" "maybe type" "temp"
      (581345 'move' call_tmp[581342](92110 call _cast borrowed AbstractRootLocale?[389845] rootLocale[91052]))
      unknown call_tmp[581347] "expr temp" "maybe param" "maybe type" "temp"
      (581350 'move' call_tmp[581347](92112 call postfix! call_tmp[581342]))
      unknown call_tmp[581354] "expr temp" "maybe param" "maybe type" "temp"
      (581357 'move' call_tmp[581354](92121 call(92116 call (partial) localeIDtoLocale _mt[232] call_tmp[581347]) id[92099]))
      (464923 'move' ret[464917](464922 'coerce' call_tmp[581354] locale[26]))
      gotoReturn _end_chpl_localeID_to_locale[464915] _end_chpl_localeID_to_locale[464915]
    }
    {
      (464929 'move' ret[464917](464928 'coerce' dummyLocale[92026] locale[26]))
      gotoReturn _end_chpl_localeID_to_locale[464915] _end_chpl_localeID_to_locale[464915]
    }
    label _end_chpl_localeID_to_locale[464915]
    (464919 return ret[464917])
  }
  { scopeless type
    locale[26]
  }
  type chpl_privateObject_t[92143] val obj[92139]:c_void_ptr[141] c_void_ptr[141]
  unknown chpl_privateObjects[92150] "extern" "insert auto destroy"
  function chpl_getPrivatizedCopy[92157](arg objectType[92155]:_any[170](?), arg objectPid[92160]:int(64)[13]) : _unknown[43] "inline" "no doc" "fn returns infinite lifetime"
  {
    unknown ret[464935] "RVV" "temp"
    unknown call_tmp[581364] "expr temp" "maybe param" "maybe type" "temp"
    (581367 'move' call_tmp[581364](92170 call chpl_privateObjects[92150] objectPid[92160]))
    unknown call_tmp[581371] "expr temp" "maybe param" "maybe type" "temp"
    (581374 'move' call_tmp[581371](92173 call obj _mt[232] call_tmp[581364]))
    unknown call_tmp[581376] "expr temp" "maybe param" "maybe type" "temp"
    (581379 'move' call_tmp[581376](92176 'cast' objectType[92155] call_tmp[581371]))
    (464941 'move' ret[464935](464940 'coerce' call_tmp[581376] objectType[92155]))
    (464937 return ret[464935])
  }
  { scopeless type
    objectType[92155]
  }
  function locale[26].totalThreads[92186](arg _mt[92191]:_MT[227], arg this[92188]:locale[26] :
  locale[26]) : _unknown[43] "method" "no doc"
  {
    unknown ret[464951] "RVV" "temp"
    unknown totalThreads[92194] "insert auto destroy"
    (490287 'default init var' totalThreads[92194] int(64)[13])
    function chpl_task_getNumThreads[92200]() : _unknown[43] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[464945] "RVV" "temp"
      (464947 return ret[464945])
    }
    { scopeless type
      (92205 call uint(64)[107] 32)
    }
    {
      const tmp[92220] "const" "temp"
      unknown call_tmp[581381] "expr temp" "maybe param" "maybe type" "temp"
      (581384 'move' call_tmp[581381](92217 '_wide_get_locale' this[92188]))
      (92221 'move' tmp[92220](92218 'deref' call_tmp[581381]))
      unknown call_tmp[581386] "expr temp" "maybe param" "maybe type" "temp"
      (581389 'move' call_tmp[581386](92213 call chpl_task_getNumThreads))
      (92214 call = totalThreads[92194] call_tmp[581386])
    }
    (464956 'move' ret[464951](464955 'deref' totalThreads[92194]))
    (464953 return ret[464951])
  }
  function locale[26].idleThreads[92233](arg _mt[92238]:_MT[227], arg this[92235]:locale[26] :
  locale[26]) : _unknown[43] "method" "no doc"
  {
    unknown ret[464966] "RVV" "temp"
    unknown idleThreads[92241] "insert auto destroy"
    (490289 'default init var' idleThreads[92241] int(64)[13])
    function chpl_task_getNumIdleThreads[92247]() : _unknown[43] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[464960] "RVV" "temp"
      (464962 return ret[464960])
    }
    { scopeless type
      (92252 call uint(64)[107] 32)
    }
    {
      const tmp[92267] "const" "temp"
      unknown call_tmp[581391] "expr temp" "maybe param" "maybe type" "temp"
      (581394 'move' call_tmp[581391](92264 '_wide_get_locale' this[92235]))
      (92268 'move' tmp[92267](92265 'deref' call_tmp[581391]))
      unknown call_tmp[581396] "expr temp" "maybe param" "maybe type" "temp"
      (581399 'move' call_tmp[581396](92260 call chpl_task_getNumIdleThreads))
      (92261 call = idleThreads[92241] call_tmp[581396])
    }
    (464971 'move' ret[464966](464970 'deref' idleThreads[92241]))
    (464968 return ret[464966])
  }
  function locale[26].queuedTasks[92280](arg _mt[92285]:_MT[227], arg this[92282]:locale[26] :
  locale[26]) : _unknown[43] "method" "no doc"
  {
    unknown ret[464981] "RVV" "temp"
    unknown queuedTasks[92288] "insert auto destroy"
    (490291 'default init var' queuedTasks[92288] int(64)[13])
    function chpl_task_getNumQueuedTasks[92294]() : _unknown[43] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[464975] "RVV" "temp"
      (464977 return ret[464975])
    }
    { scopeless type
      (92299 call uint(64)[107] 32)
    }
    {
      const tmp[92314] "const" "temp"
      unknown call_tmp[581401] "expr temp" "maybe param" "maybe type" "temp"
      (581404 'move' call_tmp[581401](92311 '_wide_get_locale' this[92282]))
      (92315 'move' tmp[92314](92312 'deref' call_tmp[581401]))
      unknown call_tmp[581406] "expr temp" "maybe param" "maybe type" "temp"
      (581409 'move' call_tmp[581406](92307 call chpl_task_getNumQueuedTasks))
      (92308 call = queuedTasks[92288] call_tmp[581406])
    }
    (464986 'move' ret[464981](464985 'deref' queuedTasks[92288]))
    (464983 return ret[464981])
  }
  function locale[26].runningTasks[92327](arg _mt[92332]:_MT[227], arg this[92329]:locale[26] :
  locale[26]) : _unknown[43] "method" "no doc" "fn synchronization free"
  {
    unknown ret[464990] "RVV" "temp"
    unknown call_tmp[581413] "expr temp" "maybe param" "maybe type" "temp"
    (581416 'move' call_tmp[581413](92341 call(92337 call (partial) runningTaskCnt _mt[232] this[92329])))
    (464995 'move' ret[464990](464994 'deref' call_tmp[581413]))
    (464992 return ret[464990])
  }
  function locale[26].blockedTasks[92350](arg _mt[92355]:_MT[227], arg this[92352]:locale[26] :
  locale[26]) : _unknown[43] "method" "no doc"
  {
    unknown ret[465005] "RVV" "temp"
    unknown blockedTasks[92358] "insert auto destroy"
    (490293 'default init var' blockedTasks[92358] int(64)[13])
    function chpl_task_getNumBlockedTasks[92364]() : _unknown[43] "extern" "local args" "no fn body" "no return value for void"
    {
      unknown ret[464999] "RVV" "temp"
      (465001 return ret[464999])
    }
    { scopeless type
      (92369 call int(64)[13] 32)
    }
    {
      const tmp[92384] "const" "temp"
      unknown call_tmp[581418] "expr temp" "maybe param" "maybe type" "temp"
      (581421 'move' call_tmp[581418](92381 '_wide_get_locale' this[92352]))
      (92385 'move' tmp[92384](92382 'deref' call_tmp[581418]))
      unknown call_tmp[581423] "expr temp" "maybe param" "maybe type" "temp"
      (581426 'move' call_tmp[581423](92377 call chpl_task_getNumBlockedTasks))
      (92378 call = blockedTasks[92358] call_tmp[581423])
    }
    (465010 'move' ret[465005](465009 'deref' blockedTasks[92358]))
    (465007 return ret[465005])
  }
  function chpl_taskRunningCntInc[92396]() : _unknown[43] "export" "insert line file info" "inc running task" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[581428] "expr temp" "maybe param" "maybe type" "temp"
    (581431 'move' call_tmp[581428](92408 call _cond_test rootLocaleInitialized[91056]))
    if call_tmp[581428]
    {
      unknown call_tmp[581433] "expr temp" "maybe param" "maybe type" "temp"
      (581436 'move' call_tmp[581433](345780 call here[92085]))
      (92405 call(92400 call (partial) runningTaskCntAdd _mt[232] call_tmp[581433]) 1)
    }
    (465012 return _void[47])
  }
  function chpl_taskRunningCntDec[92417]() : _unknown[43] "export" "insert line file info" "dec running task" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[581440] "expr temp" "maybe param" "maybe type" "temp"
    (581443 'move' call_tmp[581440](92429 call _cond_test rootLocaleInitialized[91056]))
    if call_tmp[581440]
    {
      unknown call_tmp[581445] "expr temp" "maybe param" "maybe type" "temp"
      (581448 'move' call_tmp[581445](345783 call here[92085]))
      (92426 call(92421 call (partial) runningTaskCntSub _mt[232] call_tmp[581445]) 1)
    }
    (465014 return _void[47])
  }
  function chpl_taskRunningCntReset[92438]() : _unknown[43] "export" "insert line file info" "local args" "no doc" "no return value for void"
  {
    unknown call_tmp[581452] "expr temp" "maybe param" "maybe type" "temp"
    (581455 'move' call_tmp[581452](345785 call here[92085]))
    (92448 call(92443 call (partial) runningTaskCntSet _mt[232] call_tmp[581452]) 0)
    (465016 return _void[47])
  }
  (329360 'used modules list'(90194 'use' LocaleModel[89153])(90199 'use' HaltWrappers[197622] 'only' ))
}