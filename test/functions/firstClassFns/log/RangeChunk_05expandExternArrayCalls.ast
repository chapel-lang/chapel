AST dump for RangeChunk after pass expandExternArrayCalls.
Module use list: 

{
  (328328 'use' ChapelStandard)
  type RemElems[250327] def Thru[250321]:RemElems[250327] def Pack[250323]:RemElems[250327] def Mod[250325]:RemElems[250327]
  (250333 'use' RemElems)
  (250337 'use' BoundedRangeType)
  function chunks[250352](arg r[250349] :
  (250348 call range unknown RT[250342] bounded unknown S[250346]), arg numChunks[250355] :
  integral, arg remPol[250360] :
  RemElems =
  Thru) : _unknown[43] "iterator fn"
  {
    {
      unknown _indexOfInterest[250422] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[250423] "expr temp" "temp"
      (250432 'move' _iterator[250423](250430 call _getIterator(250380 call chunksOrder r numChunks remPol)))
      Defer
      {
        {
          (250463 call _freeIterator _iterator[250423])
        }
      }
      { scopeless type
        (250438 'move' _indexOfInterest[250422](250435 call iteratorIndex _iterator[250423]))
      }
      ForLoop
      {
        (250443 call _check_tuple_var_decl _indexOfInterest[250422] 2)
        unknown startOrder[250449] "index var" "insert auto destroy"
        (250451 'move' startOrder[250449](250447 call _indexOfInterest[250422] 1))
        unknown endOrder[250456] "index var" "insert auto destroy"
        (250458 'move' endOrder[250456](250454 call _indexOfInterest[250422] 2))
        {
          const start[250388] "const"(250387 call(250382 call . r c"orderToIndex") startOrder)
          const end[250399] "const"(250398 call(250393 call . r c"orderToIndex") endOrder)
          (250420 yield(250417 IfExpr  S then
          { scopeless
            (250411 call chpl_by(250405 call chpl_build_bounded_range start end)(250408 call . r c"stride"))
          } else
          { scopeless
            (250415 call chpl_build_bounded_range start end)
          } ))
        }
        label _continueLabel[250427]
        _indexOfInterest[250422]
        _iterator[250423]
      }
      label _breakLabel[250428]
    }
  }
  { scopeless type
    (250369 call range RT bounded S)
  }
  function chunk[250487](arg r[250484] :
  (250483 call range unknown RT[250477] bounded unknown S[250481]), arg numChunks[250490] :
  integral, arg idx[250494] :
  integral, arg remPol[250499] :
  RemElems =
  Thru) : _unknown[43]
  {
    { scopeless
      const tmp[250521] "const" "no copy" "temp"(250520 call chunkOrder r numChunks idx remPol)
      (250528 call _check_tuple_var_decl tmp[250521] 2)
      const startOrder[250509] "const"(250522 call tmp[250521] 1)
      const endOrder[250511] "const"(250525 call tmp[250521] 2)
    }
    const start[250541] "const"(250540 call(250535 call . r c"orderToIndex") startOrder)
    const end[250551] "const"(250550 call(250545 call . r c"orderToIndex") endOrder)
    (250572 return(250569 IfExpr  S then
    { scopeless
      (250563 call chpl_by(250557 call chpl_build_bounded_range start end)(250560 call . r c"stride"))
    } else
    { scopeless
      (250567 call chpl_build_bounded_range start end)
    } ))
  }
  { scopeless type
    (250508 call range RT bounded S)
  }
  function chunksOrder[250589](arg r[250586] :
  (250585 call range unknown RT[250580] bounded ?[249]), arg numChunks[250592] :
  integral, arg remPol[250597] :
  RemElems =
  Thru) : _unknown[43] "iterator fn"
  {
    if(250620 call _cond_test(250616 call ||(250610 call ==(250606 call . r c"length") 0)(250614 call <= numChunks 0)))
    {
      { scopeless
        (250618 return)
      }
    }
    const nElems[250630] "const"(250627 call . r c"length")
    unknown nChunks[250641](250639 call _cast RT(250637 call min numChunks nElems))
    { scopeless
      unknown chunkSize[250644] RT
      unknown rem[250648](250652 'typeof' chunkSize)
    }
    {
      unknown tmp[250719] "expr temp" "maybe param" "maybe type" "temp"
      (250721 'move' tmp[250719] remPol)
      if(250726 call _cond_test(250723 call == tmp[250719] Pack))
      {
        (250662 call = chunkSize(250660 call / nElems nChunks))
        if(250688 call _cond_test(250671 call !=(250668 call * chunkSize nChunks) nElems))
        {
          (250675 call += chunkSize 1)
          (250685 call = nChunks(250684 call divceil nElems chunkSize))
        }
      }
      {
        if(250732 call _cond_test(250729 call == tmp[250719] Mod))
        {
          (250701 call = chunkSize(250699 call / nElems nChunks))
          (250713 call = rem(250711 call - nElems(250709 call * chunkSize nChunks)))
        }
      }
    }
    {
      unknown _indexOfInterest[250853] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[250854] "expr temp" "temp"
      (250863 'move' _iterator[250854](250861 call _getIterator(250870 call chpl_direct_counted_range_iter 0 nChunks)))
      Defer
      {
        {
          (250886 call _freeIterator _iterator[250854])
        }
      }
      { scopeless type
        (250875 'move' _indexOfInterest[250853](250872 call iteratorIndex _iterator[250854]))
      }
      ForLoop
      {
        unknown i[250879] "index var" "insert auto destroy"
        (250881 'move' i[250879] _indexOfInterest[250853])
        {
          unknown chunk[250748](250746 call * 2 RT)
          {
            unknown tmp[250825] "expr temp" "maybe param" "maybe type" "temp"
            (250827 'move' tmp[250825] remPol)
            if(250832 call _cond_test(250829 call == tmp[250825] Thru))
            {
              { scopeless
                (250763 call = chunk(250762 call chunkOrderThru nElems nChunks i))
              }
            }
            {
              if(250838 call _cond_test(250835 call == tmp[250825] Pack))
              {
                { scopeless
                  (250778 call = chunk(250777 call chunkOrderPack chunkSize nElems i))
                }
              }
              {
                if(250845 call _cond_test(250842 call == tmp[250825] Mod))
                {
                  { scopeless
                    (250795 call = chunk(250794 call chunkOrderMod chunkSize rem nElems nChunks i))
                  }
                }
                {
                  { scopeless
                    (250819 call halt "RangeChunk: unknown RemElems in chunksOrder")
                  }
                }
              }
            }
          }
          (250851 yield chunk)
        }
        label _continueLabel[250858]
        _indexOfInterest[250853]
        _iterator[250854]
      }
      label _breakLabel[250859]
    }
  }
  { scopeless type
    (250603 call * 2 RT)
  }
  function chunkOrder[250908](arg r[250905] :
  (250904 call range unknown RT[250899] bounded ?[249]), arg numChunks[250911] :
  integral, arg idx[250915] :
  integral, arg remPol[250920] :
  RemElems =
  Thru) : _unknown[43]
  {
    if(250966 call _cond_test(250951 call ||(250945 call ||(250939 call ||(250933 call ==(250929 call . r c"length") 0)(250937 call <= numChunks 0))(250943 call < idx 0))(250949 call >= idx numChunks)))
    {
      { scopeless
        (250964 return(250962 call _build_tuple(250955 call _cast RT 1)(250959 call _cast RT 0)))
      }
    }
    const nElems[250976] "const"(250973 call . r c"length")
    const nChunks[250987] "const"(250985 call _cast RT(250983 call min numChunks nElems))
    const i[250994] "const"(250992 call _cast RT idx)
    {
      unknown tmp[251105] "expr temp" "maybe param" "maybe type" "temp"
      (251107 'move' tmp[251105] remPol)
      if(251112 call _cond_test(251109 call == tmp[251105] Thru))
      {
        (251007 return(251006 call chunkOrderThru nElems nChunks i))
      }
      {
        if(251118 call _cond_test(251115 call == tmp[251105] Pack))
        {
          unknown chunkSize[251018](251016 call / nElems nChunks)
          if(251034 call _cond_test(251027 call !=(251024 call * chunkSize nChunks) nElems))
          {
            { scopeless
              (251031 call += chunkSize 1)
            }
          }
          (251045 return(251044 call chunkOrderPack chunkSize nElems i))
        }
        {
          if(251125 call _cond_test(251122 call == tmp[251105] Mod))
          {
            const chunkSize[251055] "const"(251053 call / nElems nChunks)
            const rem[251066] "const"(251064 call - nElems(251062 call * chunkSize nChunks))
            (251077 return(251076 call chunkOrderMod chunkSize rem nElems nChunks i))
          }
          {
            (251099 call halt "RangeChunk: unknown RemElems in chunkOrder")
          }
        }
      }
    }
  }
  { scopeless type
    (250926 call * 2 RT)
  }
  function chunkOrderThru[251140](arg nElems[251137] :
  unknown I[251135], arg nChunks[251143] :
  I, arg i[251147] :
  I) : _unknown[43] "no doc" "private"
  {
    const m[251159] "const"(251157 call * nElems i)
    const start[251179] "const"(251176 IfExpr (251165 call == i 0) then
    { scopeless
      (251169 call _cast I 0)
    } else
    { scopeless
      (251175 call divceil m nChunks)
    } )
    const end[251207] "const"(251204 IfExpr (251187 call == i(251185 call - nChunks 1)) then
    { scopeless
      (251191 call - nElems 1)
    } else
    { scopeless
      (251202 call -(251200 call divceil(251196 call + m nElems) nChunks) 1)
    } )
    (251215 return(251213 call _build_tuple start end))
  }
  { scopeless type
    (251153 call _build_tuple I I)
  }
  function chunkOrderPack[251227](arg chunkSize[251224] :
  unknown I[251222], arg nElems[251230] :
  I, arg i[251234] :
  I) : _unknown[43] "no doc" "private"
  {
    const start[251246] "const"(251244 call * chunkSize i)
    if(251267 call _cond_test(251252 call >= start nElems))
    {
      { scopeless
        (251265 return(251263 call _build_tuple(251256 call _cast I 1)(251260 call _cast I 0)))
      }
    }
    unknown end[251279](251277 call -(251274 call + start chunkSize) 1)
    if(251294 call _cond_test(251284 call >= end nElems))
    {
      { scopeless
        (251291 call = end(251289 call - nElems 1))
      }
    }
    (251304 return(251302 call _build_tuple start end))
  }
  { scopeless type
    (251240 call _build_tuple I I)
  }
  function chunkOrderMod[251316](arg chunkSize[251313] :
  unknown I[251311], arg rem[251319] :
  I, arg nElems[251323] :
  I, arg nChunks[251327] :
  I, arg i[251331] :
  I) : _unknown[43] "no doc" "private"
  {
    { scopeless
      unknown start[251339] I
      unknown end[251343](251347 'typeof' start)
    }
    if(251399 call _cond_test(251351 call < i rem))
    {
      (251361 call = start(251359 call * i(251357 call + chunkSize 1)))
      (251370 call = end(251368 call + start chunkSize))
    }
    {
      (251384 call = start(251382 call - nElems(251380 call *(251377 call - nChunks i) chunkSize)))
      (251396 call = end(251394 call -(251391 call + start chunkSize) 1))
    }
    (251408 return(251406 call _build_tuple start end))
  }
  { scopeless type
    (251337 call _build_tuple I I)
  }
}