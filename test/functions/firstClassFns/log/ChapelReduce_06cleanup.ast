AST dump for ChapelReduce after pass cleanup.
Module use list: 

{
  (82891 'use' ChapelStandard)
  (82896 'use' ChapelLocks)
  unknown enableParScan[82899] "config" "param" 0
  if(82923 call _cond_test enableParScan)
  {
    (82921 call compilerWarning "'enableParScan' has been deprecated (it is now always enabled)")
  }
  function chpl__scanStateResTypesMatch[82932](arg op[82930]:_any[170](?)) param : _unknown[43]
  {
    unknown resType[82943] "type variable"(82942 'typeof'(82941 call(82937 call . op c"generate")))
    unknown stateType[82954] "type variable"(82953 'typeof'(82950 call . op c"identity"))
    (82961 return(82959 call == resType stateType))
  }
  function chpl__scanIteratorZip[82969](arg op[82967]:_any[170](?), arg data[82971]:_any[170](?)) : _unknown[43]
  {
    (82991 call compilerWarning "scan has been serialized (see issue #12482)")
    unknown arr[83009](83005 for  d  in  zip(82998 call _build_tuple(82996 'expand_tuple' data)) do
    {
      (83003 call chpl__accumgen op d)
    } )
    (83014 call chpl__delete op)
    (83018 return arr)
  }
  function chpl__scanIterator[83026](arg op[83024]:_any[170](?), arg data[83028]:_any[170](?)) : _unknown[43]
  {
    (83032 'use' Reflection)
    unknown supportsPar[83062] "param"(83060 call &&(83038 call isArray data)(83059 call canResolveMethod data "_scan" op))
    if(83104 call _cond_test supportsPar)
    {
      (83073 return(83072 call(83067 call . data c"_scan") op))
    }
    {
      (83079 call compilerWarning "scan has been serialized (see issue #12482)")
      unknown arr[83093](83089 for  d  in  data do
      {
        (83088 call chpl__accumgen op d)
      } )
      (83098 call chpl__delete op)
      (83102 return arr)
    }
  }
  function chpl__accumgen[83114](arg op[83112]:_any[170](?), arg d[83116]:_any[170](?)) : _unknown[43]
  {
    (83126 call(83121 call . op c"accumulate") d)
    (83135 return(83134 call(83130 call . op c"generate")))
  }
  function chpl__reduceCombine[83143](arg globalOp[83141]:_any[170](?), arg localOp[83145]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    {
      const tmp[83188] "const" "temp"
      (83189 'move' tmp[83188](83186 'deref'(83185 '_wide_get_locale' globalOp)))
      {
        (83160 call(83156 call .(83151 call . globalOp c"l") c"lock"))
        (83171 call(83166 call . globalOp c"combine") localOp)
        (83183 call(83179 call .(83174 call . globalOp c"l") c"unlock"))
      }
    }
  }
  function chpl__cleanupLocalOp[83200](arg globalOp[83198]:_any[170](?), arg localOp[83202]:_any[170](?)) : _unknown[43] "inline" "no return value for void"
  {
    (83206 call chpl__delete localOp)
  }
  function chpl_sumTypeIsSame[83216](arg eltType[83214]:_any[170](?)) param : _unknown[43]
  {
    if(83296 call _cond_test(83226 call ||(83221 call isNumeric eltType)(83225 call isString eltType)))
    {
      (83229 return 1)
    }
    {
      if(83291 call _cond_test(83235 call isDomain eltType))
      {
        unknown d[83237] eltType
        (83245 return(83244 call isAssociativeDom d))
      }
      {
        if(83287 call _cond_test(83250 call isArray eltType))
        {
          unknown arrInstType[83256] "type variable"(83255 'static field type' eltType "_instance")
          unknown instanceObj[83262](83261 'to nilable class from type' arrInstType)
          unknown instanceEltType[83274] "type variable"(83273 'static typeof'(83270 call .(83268 call postfix! instanceObj) c"eltType"))
          (83281 return(83280 call chpl_sumTypeIsSame instanceEltType))
        }
        {
          (83284 return 0)
        }
      }
    }
  }
  function chpl__sumType[83308](arg eltType[83306]:_any[170](?)) type : _unknown[43]
  {
    if(83418 call _cond_test(83313 call chpl_sumTypeIsSame eltType))
    {
      (83315 return eltType)
    }
    {
      unknown x[83319] eltType
      if(83414 call _cond_test(83326 call isArray x))
      {
        unknown xET[83331] "type variable"(83328 call . x c"eltType")
        unknown xST[83339] "type variable"(83338 call chpl__sumType xET)
        if(83359 call _cond_test(83344 call == xET xST))
        {
          (83347 return eltType)
        }
        {
          (83357 return(83355 [ (83350 call . x c"_dom") ]
          {
            xST
          } ))
        }
      }
      {
        (83367 'use' Reflection)
        if(83402 call _cond_test(83376 call !(83375 call canResolve "+" x x)))
        {
          (83400 call compilerError "+ reduce cannot be used on values of the type "(83398 call _cast string[24] eltType))
        }
        (83412 return(83411 'typeof'(83409 call + x x)))
      }
    }
  }
  type ReduceScanOp[83431] unknown l[83427] chpl_LocalSpinlock
  function SumReduceScanOp[83540](?).identity[83449](arg _mt[83544]:_MT[227], arg this[83542]:SumReduceScanOp[83540](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    unknown x[83455](83454 call chpl__sumType eltType)
    (83460 return x)
  }
  function SumReduceScanOp[83540](?).accumulate[83468](arg _mt[83548]:_MT[227], arg this[83546]:SumReduceScanOp[83540](?), arg x[83466]:_any[170](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    (83472 call += value x)
  }
  function SumReduceScanOp[83540](?).accumulateOntoState[83482](arg _mt[83552]:_MT[227], arg this[83550]:SumReduceScanOp[83540](?), ref arg state[83480]:_any[170](?), arg x[83484]:_any[170](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    (83488 call += state x)
  }
  function SumReduceScanOp[83540](?).combine[83498](arg _mt[83556]:_MT[227], arg this[83554]:SumReduceScanOp[83540](?), arg x[83496]:_any[170](?)) : _unknown[43] "inline" "method" "primary method" "no return value for void"
  {
    (83507 call += value(83504 call . x c"value"))
  }
  function SumReduceScanOp[83540](?).generate[83515](arg _mt[83560]:_MT[227], arg this[83558]:SumReduceScanOp[83540](?)) : _unknown[43] "inline" "method" "primary method"
  {
    (83518 return value)
  }
  function SumReduceScanOp[83540](?).clone[83525](arg _mt[83564]:_MT[227], arg this[83562]:SumReduceScanOp[83540](?)) : _unknown[43] "inline" "method" "primary method"
  {
    (83534 return(83533 'new'(83532 'to unmanaged class from unknown'(83531 call SumReduceScanOp(eltType = eltType)))))
  }
  type SumReduceScanOp[83540](?) unknown eltType[83437] "type variable" unknown value[83444](83443 call chpl__sumType eltType) ReduceScanOp
  function ProductReduceScanOp[83667](?).identity[83582](arg _mt[83671]:_MT[227], arg this[83669]:ProductReduceScanOp[83667](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (83588 return(83587 call _prod_id eltType))
  }
  function ProductReduceScanOp[83667](?).accumulate[83597](arg _mt[83675]:_MT[227], arg this[83673]:ProductReduceScanOp[83667](?), arg x[83595]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83601 call *= value x)
  }
  function ProductReduceScanOp[83667](?).accumulateOntoState[83611](arg _mt[83679]:_MT[227], arg this[83677]:ProductReduceScanOp[83667](?), ref arg state[83609]:_any[170](?), arg x[83613]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83617 call *= state x)
  }
  function ProductReduceScanOp[83667](?).combine[83627](arg _mt[83683]:_MT[227], arg this[83681]:ProductReduceScanOp[83667](?), arg x[83625]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83634 call *= value(83631 call . x c"value"))
  }
  function ProductReduceScanOp[83667](?).generate[83642](arg _mt[83687]:_MT[227], arg this[83685]:ProductReduceScanOp[83667](?)) : _unknown[43] "method" "primary method"
  {
    (83645 return value)
  }
  function ProductReduceScanOp[83667](?).clone[83652](arg _mt[83691]:_MT[227], arg this[83689]:ProductReduceScanOp[83667](?)) : _unknown[43] "method" "primary method"
  {
    (83661 return(83660 'new'(83659 'to unmanaged class from unknown'(83658 call ProductReduceScanOp(eltType = eltType)))))
  }
  type ProductReduceScanOp[83667](?) unknown eltType[83570] "type variable" unknown value[83577](83576 call _prod_id eltType) ReduceScanOp
  function MaxReduceScanOp[83806](?).identity[83709](arg _mt[83810]:_MT[227], arg this[83808]:MaxReduceScanOp[83806](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (83715 return(83714 call min eltType))
  }
  function MaxReduceScanOp[83806](?).accumulate[83724](arg _mt[83814]:_MT[227], arg this[83812]:MaxReduceScanOp[83806](?), arg x[83722]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83732 call = value(83731 call max x value))
  }
  function MaxReduceScanOp[83806](?).accumulateOntoState[83742](arg _mt[83818]:_MT[227], arg this[83816]:MaxReduceScanOp[83806](?), ref arg state[83740]:_any[170](?), arg x[83744]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83752 call = state(83751 call max state x))
  }
  function MaxReduceScanOp[83806](?).combine[83762](arg _mt[83822]:_MT[227], arg this[83820]:MaxReduceScanOp[83806](?), arg x[83760]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83773 call = value(83772 call max value(83769 call . x c"value")))
  }
  function MaxReduceScanOp[83806](?).generate[83781](arg _mt[83826]:_MT[227], arg this[83824]:MaxReduceScanOp[83806](?)) : _unknown[43] "method" "primary method"
  {
    (83784 return value)
  }
  function MaxReduceScanOp[83806](?).clone[83791](arg _mt[83830]:_MT[227], arg this[83828]:MaxReduceScanOp[83806](?)) : _unknown[43] "method" "primary method"
  {
    (83800 return(83799 'new'(83798 'to unmanaged class from unknown'(83797 call MaxReduceScanOp(eltType = eltType)))))
  }
  type MaxReduceScanOp[83806](?) unknown eltType[83697] "type variable" unknown value[83704](83703 call min eltType) ReduceScanOp
  function MinReduceScanOp[83945](?).identity[83848](arg _mt[83949]:_MT[227], arg this[83947]:MinReduceScanOp[83945](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (83854 return(83853 call max eltType))
  }
  function MinReduceScanOp[83945](?).accumulate[83863](arg _mt[83953]:_MT[227], arg this[83951]:MinReduceScanOp[83945](?), arg x[83861]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83871 call = value(83870 call min x value))
  }
  function MinReduceScanOp[83945](?).accumulateOntoState[83881](arg _mt[83957]:_MT[227], arg this[83955]:MinReduceScanOp[83945](?), ref arg state[83879]:_any[170](?), arg x[83883]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83891 call = state(83890 call min state x))
  }
  function MinReduceScanOp[83945](?).combine[83901](arg _mt[83961]:_MT[227], arg this[83959]:MinReduceScanOp[83945](?), arg x[83899]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (83912 call = value(83911 call min value(83908 call . x c"value")))
  }
  function MinReduceScanOp[83945](?).generate[83920](arg _mt[83965]:_MT[227], arg this[83963]:MinReduceScanOp[83945](?)) : _unknown[43] "method" "primary method"
  {
    (83923 return value)
  }
  function MinReduceScanOp[83945](?).clone[83930](arg _mt[83969]:_MT[227], arg this[83967]:MinReduceScanOp[83945](?)) : _unknown[43] "method" "primary method"
  {
    (83939 return(83938 'new'(83937 'to unmanaged class from unknown'(83936 call MinReduceScanOp(eltType = eltType)))))
  }
  type MinReduceScanOp[83945](?) unknown eltType[83836] "type variable" unknown value[83843](83842 call max eltType) ReduceScanOp
  function LogicalAndReduceScanOp[84099](?).identity[83987](arg _mt[84103]:_MT[227], arg this[84101]:LogicalAndReduceScanOp[84099](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (83993 return(83992 call _land_id eltType))
  }
  function LogicalAndReduceScanOp[84099](?).accumulate[84002](arg _mt[84107]:_MT[227], arg this[84105]:LogicalAndReduceScanOp[84099](?), arg x[84000]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[84007] "temp"
      (84010 'move' tmp[84007](84009 'addr of' value))
      (84015 call = tmp[84007](84012 call && tmp[84007] x))
    }
  }
  function LogicalAndReduceScanOp[84099](?).accumulateOntoState[84025](arg _mt[84111]:_MT[227], arg this[84109]:LogicalAndReduceScanOp[84099](?), ref arg state[84023]:_any[170](?), arg x[84027]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[84032] "temp"
      (84035 'move' tmp[84032](84034 'addr of' state))
      (84040 call = tmp[84032](84037 call && tmp[84032] x))
    }
  }
  function LogicalAndReduceScanOp[84099](?).combine[84050](arg _mt[84115]:_MT[227], arg this[84113]:LogicalAndReduceScanOp[84099](?), arg x[84048]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[84058] "temp"
      (84061 'move' tmp[84058](84060 'addr of' value))
      (84066 call = tmp[84058](84063 call && tmp[84058](84054 call . x c"value")))
    }
  }
  function LogicalAndReduceScanOp[84099](?).generate[84074](arg _mt[84119]:_MT[227], arg this[84117]:LogicalAndReduceScanOp[84099](?)) : _unknown[43] "method" "primary method"
  {
    (84077 return value)
  }
  function LogicalAndReduceScanOp[84099](?).clone[84084](arg _mt[84123]:_MT[227], arg this[84121]:LogicalAndReduceScanOp[84099](?)) : _unknown[43] "method" "primary method"
  {
    (84093 return(84092 'new'(84091 'to unmanaged class from unknown'(84090 call LogicalAndReduceScanOp(eltType = eltType)))))
  }
  type LogicalAndReduceScanOp[84099](?) unknown eltType[83975] "type variable" unknown value[83982](83981 call _land_id eltType) ReduceScanOp
  function LogicalOrReduceScanOp[84253](?).identity[84141](arg _mt[84257]:_MT[227], arg this[84255]:LogicalOrReduceScanOp[84253](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (84147 return(84146 call _lor_id eltType))
  }
  function LogicalOrReduceScanOp[84253](?).accumulate[84156](arg _mt[84261]:_MT[227], arg this[84259]:LogicalOrReduceScanOp[84253](?), arg x[84154]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[84161] "temp"
      (84164 'move' tmp[84161](84163 'addr of' value))
      (84169 call = tmp[84161](84166 call || tmp[84161] x))
    }
  }
  function LogicalOrReduceScanOp[84253](?).accumulateOntoState[84179](arg _mt[84265]:_MT[227], arg this[84263]:LogicalOrReduceScanOp[84253](?), ref arg state[84177]:_any[170](?), arg x[84181]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[84186] "temp"
      (84189 'move' tmp[84186](84188 'addr of' state))
      (84194 call = tmp[84186](84191 call || tmp[84186] x))
    }
  }
  function LogicalOrReduceScanOp[84253](?).combine[84204](arg _mt[84269]:_MT[227], arg this[84267]:LogicalOrReduceScanOp[84253](?), arg x[84202]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      unknown tmp[84212] "temp"
      (84215 'move' tmp[84212](84214 'addr of' value))
      (84220 call = tmp[84212](84217 call || tmp[84212](84208 call . x c"value")))
    }
  }
  function LogicalOrReduceScanOp[84253](?).generate[84228](arg _mt[84273]:_MT[227], arg this[84271]:LogicalOrReduceScanOp[84253](?)) : _unknown[43] "method" "primary method"
  {
    (84231 return value)
  }
  function LogicalOrReduceScanOp[84253](?).clone[84238](arg _mt[84277]:_MT[227], arg this[84275]:LogicalOrReduceScanOp[84253](?)) : _unknown[43] "method" "primary method"
  {
    (84247 return(84246 'new'(84245 'to unmanaged class from unknown'(84244 call LogicalOrReduceScanOp(eltType = eltType)))))
  }
  type LogicalOrReduceScanOp[84253](?) unknown eltType[84129] "type variable" unknown value[84136](84135 call _lor_id eltType) ReduceScanOp
  function BitwiseAndReduceScanOp[84380](?).identity[84295](arg _mt[84384]:_MT[227], arg this[84382]:BitwiseAndReduceScanOp[84380](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (84301 return(84300 call _band_id eltType))
  }
  function BitwiseAndReduceScanOp[84380](?).accumulate[84310](arg _mt[84388]:_MT[227], arg this[84386]:BitwiseAndReduceScanOp[84380](?), arg x[84308]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84314 call &= value x)
  }
  function BitwiseAndReduceScanOp[84380](?).accumulateOntoState[84324](arg _mt[84392]:_MT[227], arg this[84390]:BitwiseAndReduceScanOp[84380](?), ref arg state[84322]:_any[170](?), arg x[84326]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84330 call &= state x)
  }
  function BitwiseAndReduceScanOp[84380](?).combine[84340](arg _mt[84396]:_MT[227], arg this[84394]:BitwiseAndReduceScanOp[84380](?), arg x[84338]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84347 call &= value(84344 call . x c"value"))
  }
  function BitwiseAndReduceScanOp[84380](?).generate[84355](arg _mt[84400]:_MT[227], arg this[84398]:BitwiseAndReduceScanOp[84380](?)) : _unknown[43] "method" "primary method"
  {
    (84358 return value)
  }
  function BitwiseAndReduceScanOp[84380](?).clone[84365](arg _mt[84404]:_MT[227], arg this[84402]:BitwiseAndReduceScanOp[84380](?)) : _unknown[43] "method" "primary method"
  {
    (84374 return(84373 'new'(84372 'to unmanaged class from unknown'(84371 call BitwiseAndReduceScanOp(eltType = eltType)))))
  }
  type BitwiseAndReduceScanOp[84380](?) unknown eltType[84283] "type variable" unknown value[84290](84289 call _band_id eltType) ReduceScanOp
  function BitwiseOrReduceScanOp[84507](?).identity[84422](arg _mt[84511]:_MT[227], arg this[84509]:BitwiseOrReduceScanOp[84507](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (84428 return(84427 call _bor_id eltType))
  }
  function BitwiseOrReduceScanOp[84507](?).accumulate[84437](arg _mt[84515]:_MT[227], arg this[84513]:BitwiseOrReduceScanOp[84507](?), arg x[84435]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84441 call |= value x)
  }
  function BitwiseOrReduceScanOp[84507](?).accumulateOntoState[84451](arg _mt[84519]:_MT[227], arg this[84517]:BitwiseOrReduceScanOp[84507](?), ref arg state[84449]:_any[170](?), arg x[84453]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84457 call |= state x)
  }
  function BitwiseOrReduceScanOp[84507](?).combine[84467](arg _mt[84523]:_MT[227], arg this[84521]:BitwiseOrReduceScanOp[84507](?), arg x[84465]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84474 call |= value(84471 call . x c"value"))
  }
  function BitwiseOrReduceScanOp[84507](?).generate[84482](arg _mt[84527]:_MT[227], arg this[84525]:BitwiseOrReduceScanOp[84507](?)) : _unknown[43] "method" "primary method"
  {
    (84485 return value)
  }
  function BitwiseOrReduceScanOp[84507](?).clone[84492](arg _mt[84531]:_MT[227], arg this[84529]:BitwiseOrReduceScanOp[84507](?)) : _unknown[43] "method" "primary method"
  {
    (84501 return(84500 'new'(84499 'to unmanaged class from unknown'(84498 call BitwiseOrReduceScanOp(eltType = eltType)))))
  }
  type BitwiseOrReduceScanOp[84507](?) unknown eltType[84410] "type variable" unknown value[84417](84416 call _bor_id eltType) ReduceScanOp
  function BitwiseXorReduceScanOp[84634](?).identity[84549](arg _mt[84638]:_MT[227], arg this[84636]:BitwiseXorReduceScanOp[84634](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (84555 return(84554 call _bxor_id eltType))
  }
  function BitwiseXorReduceScanOp[84634](?).accumulate[84564](arg _mt[84642]:_MT[227], arg this[84640]:BitwiseXorReduceScanOp[84634](?), arg x[84562]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84568 call ^= value x)
  }
  function BitwiseXorReduceScanOp[84634](?).accumulateOntoState[84578](arg _mt[84646]:_MT[227], arg this[84644]:BitwiseXorReduceScanOp[84634](?), ref arg state[84576]:_any[170](?), arg x[84580]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84584 call ^= state x)
  }
  function BitwiseXorReduceScanOp[84634](?).combine[84594](arg _mt[84650]:_MT[227], arg this[84648]:BitwiseXorReduceScanOp[84634](?), arg x[84592]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84601 call ^= value(84598 call . x c"value"))
  }
  function BitwiseXorReduceScanOp[84634](?).generate[84609](arg _mt[84654]:_MT[227], arg this[84652]:BitwiseXorReduceScanOp[84634](?)) : _unknown[43] "method" "primary method"
  {
    (84612 return value)
  }
  function BitwiseXorReduceScanOp[84634](?).clone[84619](arg _mt[84658]:_MT[227], arg this[84656]:BitwiseXorReduceScanOp[84634](?)) : _unknown[43] "method" "primary method"
  {
    (84628 return(84627 'new'(84626 'to unmanaged class from unknown'(84625 call BitwiseXorReduceScanOp(eltType = eltType)))))
  }
  type BitwiseXorReduceScanOp[84634](?) unknown eltType[84537] "type variable" unknown value[84544](84543 call _bxor_id eltType) ReduceScanOp
  function _maxloc_id[84665](arg eltType[84663]:_any[170](?)) : _unknown[43]
  {
    (84684 return(84682 call _build_tuple(84673 call min(84671 call eltType 1))(84680 call max(84678 call eltType 2))))
  }
  function _minloc_id[84693](arg eltType[84691]:_any[170](?)) : _unknown[43]
  {
    (84699 return(84698 call max eltType))
  }
  function maxloc[84877](?).identity[84719](arg _mt[84881]:_MT[227], arg this[84879]:maxloc[84877](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (84725 return(84724 call _maxloc_id eltType))
  }
  function maxloc[84877](?).accumulate[84734](arg _mt[84885]:_MT[227], arg this[84883]:maxloc[84877](?), arg x[84732]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84740 call accumulateOntoState value x)
  }
  function maxloc[84877](?).accumulateOntoState[84749](arg _mt[84889]:_MT[227], arg this[84887]:maxloc[84877](?), ref arg state[84747]:_any[170](?), arg x[84751]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(84824 call _cond_test(84817 call ||(84785 call ||(84761 call >(84756 call x 1)(84760 call state 1))(84783 call &&(84771 call ==(84766 call x 1)(84770 call state 1))(84781 call <(84776 call x 2)(84780 call state 2))))(84815 call &&(84793 call gotNaN(84791 call x 1))(84813 call ||(84801 call !(84800 call gotNaN(84798 call state 1)))(84811 call <(84806 call x 2)(84810 call state 2))))))
    {
      (84821 call = state x)
    }
  }
  function maxloc[84877](?).combine[84836](arg _mt[84893]:_MT[227], arg this[84891]:maxloc[84877](?), arg x[84834]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84845 call accumulateOntoState value(84842 call . x c"value"))
  }
  function maxloc[84877](?).generate[84852](arg _mt[84897]:_MT[227], arg this[84895]:maxloc[84877](?)) : _unknown[43] "method" "primary method"
  {
    (84855 return value)
  }
  function maxloc[84877](?).clone[84862](arg _mt[84901]:_MT[227], arg this[84899]:maxloc[84877](?)) : _unknown[43] "method" "primary method"
  {
    (84871 return(84870 'new'(84869 'to unmanaged class from unknown'(84868 call maxloc(eltType = eltType)))))
  }
  type maxloc[84877](?) unknown eltType[84707] "type variable" unknown value[84714](84713 call _maxloc_id eltType) ReduceScanOp
  function minloc[85077](?).identity[84919](arg _mt[85081]:_MT[227], arg this[85079]:minloc[85077](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    (84925 return(84924 call _minloc_id eltType))
  }
  function minloc[85077](?).accumulate[84934](arg _mt[85085]:_MT[227], arg this[85083]:minloc[85077](?), arg x[84932]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (84940 call accumulateOntoState value x)
  }
  function minloc[85077](?).accumulateOntoState[84949](arg _mt[85089]:_MT[227], arg this[85087]:minloc[85077](?), ref arg state[84947]:_any[170](?), arg x[84951]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(85024 call _cond_test(85017 call ||(84985 call ||(84961 call <(84956 call x 1)(84960 call state 1))(84983 call &&(84971 call ==(84966 call x 1)(84970 call state 1))(84981 call <(84976 call x 2)(84980 call state 2))))(85015 call &&(84993 call gotNaN(84991 call x 1))(85013 call ||(85001 call !(85000 call gotNaN(84998 call state 1)))(85011 call <(85006 call x 2)(85010 call state 2))))))
    {
      (85021 call = state x)
    }
  }
  function minloc[85077](?).combine[85036](arg _mt[85093]:_MT[227], arg this[85091]:minloc[85077](?), arg x[85034]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (85045 call accumulateOntoState value(85042 call . x c"value"))
  }
  function minloc[85077](?).generate[85052](arg _mt[85097]:_MT[227], arg this[85095]:minloc[85077](?)) : _unknown[43] "method" "primary method"
  {
    (85055 return value)
  }
  function minloc[85077](?).clone[85062](arg _mt[85101]:_MT[227], arg this[85099]:minloc[85077](?)) : _unknown[43] "method" "primary method"
  {
    (85071 return(85070 'new'(85069 'to unmanaged class from unknown'(85068 call minloc(eltType = eltType)))))
  }
  type minloc[85077](?) unknown eltType[84907] "type variable" unknown value[84914](84913 call _minloc_id eltType) ReduceScanOp
  function gotNaN[85108](arg value[85106]:_any[170](?)) : _unknown[43] "inline" "private"
  {
    (85118 return(85117 call isnan value))
  }
  where {
    (85113 call isReal value)
  }
  function gotNaN[85128](arg value[85126]:_any[170](?)) param : _unknown[43] "private"
  {
    (85131 return 0)
  }
}