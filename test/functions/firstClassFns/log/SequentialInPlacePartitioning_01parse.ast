AST dump for SequentialInPlacePartitioning after pass parse.
Module use list: 

{
  (328354 'use' ChapelStandard)
  unknown DISTRIBUTE_BUFFER[261121] "param" "private" 5
  function bucketize[261131](arg start_n[261128] :
  int[13], arg end_n[261134] :
  int[13], arg A[261140] :
  (261137 call chpl__buildArrayRuntimeType nil[38]), arg bucketizer[261143]:_any[170](?), arg criterion[261145]:_any[170](?), arg startbit[261148] :
  int[13]) : _unknown[43]
  {
    unknown nBuckets[261159](261158 call(261154 call . bucketizer c"getNumBuckets"))
    const nTasks[261175] "const"(261172 IfExpr (261165 call > dataParTasksPerLocale 0) then
    { scopeless
      dataParTasksPerLocale
    } else
    { scopeless
      (261169 call . here c"maxTaskPar")
    } )
    const countsSize[261182] "const"(261180 call * nTasks nBuckets)
    const n[261192] "const"(261190 call +(261187 call - end_n start_n) 1)
    const blockSize[261200] "const"(261199 call divceil n nTasks)
    const nBlocks[261208] "const"(261207 call divceil n blockSize)
    unknown counts[261223](261221 call chpl__buildArrayRuntimeType(261219 call chpl__ensureDomainExpr(261215 call #(261212 call chpl_build_low_bounded_range 0) nBuckets)) int[13])
    {
      unknown tmpIter[261352] "expr temp" "maybe ref" "no copy" "temp"
      (261355 'move' tmpIter[261352](261231 call #(261228 call chpl_build_low_bounded_range 0) nTasks))
      unknown isRngDomArr[261587] "maybe param" "temp"
      (261602 'move' isRngDomArr[261587](261600 call ||(261589 call isBoundedRange tmpIter[261352])(261598 call ||(261592 call isDomain tmpIter[261352])(261595 call isArray tmpIter[261352]))))
      if isRngDomArr[261587]
      {
        const _coforallCount[261454] "const" "end count" "temp"
        (261523 'move' _coforallCount[261454](261520 call _endCountAlloc 1))
        unknown numTasks[261455] "temp"
        (261507 'move' numTasks[261455](261503 call . tmpIter[261352] c"size"))
        (261498 call _upEndCount _coforallCount[261454] 1 numTasks[261455])
        (261495 call chpl_resetTaskSpawn numTasks[261455])
        unknown _indexOfInterest[261462] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[261463] "expr temp" "temp"
        (261472 'move' _iterator[261463](261470 call _getIterator tmpIter[261352]))
        Defer
        {
          {
            (261488 call _freeIterator _iterator[261463])
          }
        }
        { scopeless type
          (261477 'move' _indexOfInterest[261462](261474 call iteratorIndex _iterator[261463]))
        }
        ForLoop
        {
          unknown tid[261481] "coforall index var" "index var" "insert auto destroy"
          (261483 'move' tid[261481] _indexOfInterest[261462])
          {
            {
              unknown start[261361](261363 call + start_n(261366 call * tid blockSize))
              unknown end[261370](261372 call -(261374 call + start blockSize) 1)
              if(261380 call _cond_test(261382 call > end end_n))
              {
                (261387 call = end end_n)
              }
              {
                unknown _indexOfInterest[261392] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[261394] "expr temp" "temp"
                (261396 'move' _iterator[261394](261399 call _getIterator(261404 call(261401 call . bucketizer c"classify") A start end criterion startbit)))
                Defer
                {
                  {
                    (261412 call _freeIterator _iterator[261394])
                  }
                }
                { scopeless type
                  (261416 'move' _indexOfInterest[261392](261419 call iteratorIndex _iterator[261394]))
                }
                ForLoop
                {
                  (261425 call _check_tuple_var_decl _indexOfInterest[261392] 2)
                  unknown i[261428] "index var" "insert auto destroy"
                  (261430 'move' i[261428](261433 call _indexOfInterest[261392] 1))
                  unknown bin[261435] "index var" "insert auto destroy"
                  (261437 'move' bin[261435](261440 call _indexOfInterest[261392] 2))
                  {
                    (261444 call +=(261446 call counts bin) 1)
                  }
                  label _continueLabel[261449]
                  _indexOfInterest[261392]
                  _iterator[261394]
                }
                label _breakLabel[261451]
              }
            }
            (261457 call _downEndCount _coforallCount[261454] nil[38])
            (261456 'coforall loop')
            (261357 'actuals list' SumReduceScanOp counts)
          }
          label _continueLabel[261467]
          _indexOfInterest[261462]
          _iterator[261463]
        }
        label _breakLabel[261468]
        Defer
        {
          {
            (261510 call _endCountFree _coforallCount[261454])
          }
        }
        (261515 call _waitEndCount _coforallCount[261454] 1 numTasks[261455])
      }
      {
        const _coforallCount[261527] "const" "end count" "temp"
        (261584 'move' _coforallCount[261527](261581 call _endCountAlloc 1))
        unknown _indexOfInterest[261535] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[261536] "expr temp" "temp"
        (261545 'move' _iterator[261536](261543 call _getIterator tmpIter[261352]))
        Defer
        {
          {
            (261561 call _freeIterator _iterator[261536])
          }
        }
        { scopeless type
          (261550 'move' _indexOfInterest[261535](261547 call iteratorIndex _iterator[261536]))
        }
        ForLoop
        {
          unknown tid[261554] "coforall index var" "index var" "insert auto destroy"
          (261556 'move' tid[261554] _indexOfInterest[261535])
          (261568 call _upEndCount _coforallCount[261527] 1)
          {
            {
              unknown start[261249](261247 call + start_n(261245 call * tid blockSize))
              unknown end[261260](261258 call -(261255 call + start blockSize) 1)
              if(261273 call _cond_test(261265 call > end end_n))
              {
                (261269 call = end end_n)
              }
              {
                unknown _indexOfInterest[261304] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[261305] "expr temp" "temp"
                (261314 'move' _iterator[261305](261312 call _getIterator(261294 call(261285 call . bucketizer c"classify") A start end criterion startbit)))
                Defer
                {
                  {
                    (261345 call _freeIterator _iterator[261305])
                  }
                }
                { scopeless type
                  (261320 'move' _indexOfInterest[261304](261317 call iteratorIndex _iterator[261305]))
                }
                ForLoop
                {
                  (261325 call _check_tuple_var_decl _indexOfInterest[261304] 2)
                  unknown i[261331] "index var" "insert auto destroy"
                  (261333 'move' i[261331](261329 call _indexOfInterest[261304] 1))
                  unknown bin[261338] "index var" "insert auto destroy"
                  (261340 'move' bin[261338](261336 call _indexOfInterest[261304] 2))
                  {
                    (261300 call +=(261298 call counts bin) 1)
                  }
                  label _continueLabel[261309]
                  _indexOfInterest[261304]
                  _iterator[261305]
                }
                label _breakLabel[261310]
              }
            }
            (261530 call _downEndCount _coforallCount[261527] nil[38])
            (261529 'coforall loop')
            (261240 'actuals list' SumReduceScanOp counts)
          }
          label _continueLabel[261540]
          _indexOfInterest[261535]
          _iterator[261536]
        }
        label _breakLabel[261541]
        Defer
        {
          {
            (261572 call _endCountFree _coforallCount[261527])
          }
        }
        (261577 call _waitEndCount _coforallCount[261527] 1)
      }
    }
    unknown end_offsets[261645](261643 call +(261641 call function chpl__scan1[261608](arg chpl_toScan[261610]:_any[170](?)) : _unknown[43] "compiler nested function" "fn returns iterator"
    {
      unknown chpl_eltType[261612] "maybe type" "temp"
      { scopeless type
        (261616 'move' chpl_eltType[261612](261618 'typeof'(261620 call chpl__initCopy(261622 call iteratorIndex(261624 call _getIterator chpl_toScan[261610])))))
      }
      const tmp[261613] "const" "temp"
      (261633 'move' tmp[261613](261632 'new'(261631 call SumReduceScanOp(eltType = chpl_eltType[261612])(_chpl_manager = unmanaged[209](?)))))
      (261635 return(261637 call chpl__scanIterator tmp[261613] chpl_toScan[261610]))
    } counts) start_n)
    unknown offsets[261652](261650 call - end_offsets counts)
    unknown curbin[261656] 0
    {
      unknown tmp[262162] "temp"
      (262180 'move' tmp[262162](262178 call _cond_test 1))
      WhileDo
      {
        {
          {
            unknown tmp[261682] "temp"
            (261726 'move' tmp[261682](261711 call _cond_test(261713 call &&(261715 call < curbin nBuckets)(261719 call ==(261721 call offsets curbin)(261724 call end_offsets curbin)))))
            WhileDo
            {
              {
                (261678 call += curbin 1)
              }
              label _continueLabel[261685]
              (261706 'move' tmp[261682](261691 call _cond_test(261693 call &&(261695 call < curbin nBuckets)(261699 call ==(261701 call offsets curbin)(261704 call end_offsets curbin)))))
              tmp[261682]
            }
            label _breakLabel[261686]
          }
          if(261738 call _cond_test(261732 call >= curbin nBuckets))
          {
            break nil[38]
          }
          unknown max_buf[261743] "param" DISTRIBUTE_BUFFER
          unknown buf[261753](261751 call * max_buf(261748 call . A c"eltType"))
          unknown used_buf[261757] 0
          unknown end[261764](261763 call end_offsets curbin)
          unknown endfast[261784](261783 call max(261771 call offsets curbin)(261781 call -(261776 call end_offsets curbin)(261779 call * 2 max_buf)))
          unknown bufstart[261801](261800 call max(261791 call offsets curbin)(261798 call -(261796 call end_offsets curbin) max_buf))
          unknown i[261805] bufstart
          {
            unknown tmp[261837] "temp"
            (261861 'move' tmp[261837](261856 call _cond_test(261858 call < i end)))
            WhileDo
            {
              {
                (261823 call <=>(261818 call buf(261815 call + used_buf 1))(261822 call A i))
                (261829 call += used_buf 1)
                (261834 call += i 1)
              }
              label _continueLabel[261840]
              (261851 'move' tmp[261837](261846 call _cond_test(261848 call < i end)))
              tmp[261837]
            }
            label _breakLabel[261841]
          }
          {
            unknown tmp[261959] "temp"
            (261987 'move' tmp[261959](261980 call _cond_test(261982 call <(261984 call offsets curbin) endfast)))
            WhileDo
            {
              {
                {
                  unknown _indexOfInterest[261910] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[261911] "expr temp" "temp"
                  (261920 'move' _iterator[261911](261918 call _getIterator(261886 call(261877 call . bucketizer c"classify") buf 1 max_buf criterion startbit)))
                  Defer
                  {
                    {
                      (261951 call _freeIterator _iterator[261911])
                    }
                  }
                  { scopeless type
                    (261926 'move' _indexOfInterest[261910](261923 call iteratorIndex _iterator[261911]))
                  }
                  ForLoop
                  {
                    (261931 call _check_tuple_var_decl _indexOfInterest[261910] 2)
                    unknown idx[261937] "index var" "insert auto destroy"
                    (261939 'move' idx[261937](261935 call _indexOfInterest[261910] 1))
                    unknown bin[261944] "index var" "insert auto destroy"
                    (261946 'move' bin[261944](261942 call _indexOfInterest[261910] 2))
                    {
                      (261898 call <=>(261893 call A(261891 call offsets bin))(261897 call buf idx))
                      (261907 call +=(261905 call offsets bin) 1)
                    }
                    label _continueLabel[261915]
                    _indexOfInterest[261910]
                    _iterator[261911]
                  }
                  label _breakLabel[261916]
                }
              }
              label _continueLabel[261962]
              (261975 'move' tmp[261959](261968 call _cond_test(261970 call <(261972 call offsets curbin) endfast)))
              tmp[261959]
            }
            label _breakLabel[261963]
          }
          {
            unknown tmp[262131] "temp"
            (262159 'move' tmp[262131](262152 call _cond_test(262154 call <(262156 call offsets curbin) end)))
            WhileDo
            {
              {
                unknown j[261998] 1
                {
                  unknown tmp[262092] "temp"
                  (262128 'move' tmp[262092](262117 call _cond_test(262119 call &&(262121 call > used_buf 0)(262125 call <= j used_buf))))
                  WhileDo
                  {
                    {
                      const bin[262026] "const"(262025 call(262015 call . bucketizer c"bucketForRecord")(262021 call buf j) criterion startbit)
                      unknown offset[262034](262033 call offsets bin)
                      (262045 call <=>(262040 call A offset)(262044 call buf j))
                      (262053 call +=(262051 call offsets bin) 1)
                      if(262083 call _cond_test(262064 call &&(262058 call == bin curbin)(262062 call >= offset bufstart)))
                      {
                        (262074 call <=>(262069 call buf j)(262073 call buf used_buf))
                        (262080 call -= used_buf 1)
                      }
                      (262089 call += j 1)
                    }
                    label _continueLabel[262095]
                    (262112 'move' tmp[262092](262101 call _cond_test(262103 call &&(262105 call > used_buf 0)(262109 call <= j used_buf))))
                    tmp[262092]
                  }
                  label _breakLabel[262096]
                }
              }
              label _continueLabel[262134]
              (262147 'move' tmp[262131](262140 call _cond_test(262142 call <(262144 call offsets curbin) end)))
              tmp[262131]
            }
            label _breakLabel[262135]
          }
        }
        label _continueLabel[262165]
        (262173 'move' tmp[262162](262171 call _cond_test 1))
        tmp[262162]
      }
      label _breakLabel[262166]
    }
    (262184 return counts)
  }
}