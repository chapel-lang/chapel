AST dump for Bytes after pass flattenClasses.
Module use list: ChapelStandard BytesCasts ByteBufferHelpers BytesStringCommon 

{
  type decodePolicy[21146] def strict[21140]:decodePolicy[21146] def replace[21142]:decodePolicy[21146] def ignore[21144]:decodePolicy[21146]
  function DecodeError[21178].message[21154](arg _mt[21182]:_MT[227], arg this[21180]:DecodeError[21178]) : _unknown[43] "method" "primary method" "no doc" "method overrides"
  {
    (21172 return "Invalid UTF-8 character encountered.")
  }
  type DecodeError[21178] val super[330961]:Error[166551] "super class"
  type anymanaged DecodeError[334159](?)
  unknown idxType[21186] "no doc" "type variable" int(64)[13]
  function createBytesWithBorrowedBuffer[21195](arg s[21192] :
  bytes[22]) : _unknown[43] "inline"
  {
    unknown ret[21198] bytes[22]
    (21206 call initWithBorrowedBuffer ret[21198] s[21192])
    (21209 return ret[21198])
  }
  function createBytesWithBorrowedBuffer[21219](arg s[21216] :
  c_string[19], arg length[21225] =
  (21222 call . s[21216] c"length")) : _unknown[43]
  {
    (21248 return(21247 call createBytesWithBorrowedBuffer(21237 call _cast(21236 call c_ptr[193070](?)(21234 call uint(64)[107] 8)) s[21216])(length = length[21225])(size =(21244 call + length[21225] 1))))
  }
  function createBytesWithBorrowedBuffer[21259](arg s[21256] :
  bufferType[172923], arg length[21262] :
  int(64)[13], arg size[21266] :
  int(64)[13]) : _unknown[43] "inline"
  {
    unknown ret[21270] bytes[22]
    (21280 call initWithBorrowedBuffer ret[21270] s[21256] length[21262] size[21266])
    (21283 return ret[21270])
  }
  function createBytesWithOwnedBuffer[21293](arg s[21290] :
  bytes[22]) : _unknown[43] "inline" "no doc" "no return value for void"
  {
    (21313 call compilerError "A bytes cannot be passed to createBytesWithOwnedBuffer")
  }
  function createBytesWithOwnedBuffer[21324](arg s[21321] :
  c_string[19], arg length[21330] =
  (21327 call . s[21321] c"length")) : _unknown[43] "inline"
  {
    (21347 return(21346 call createBytesWithOwnedBuffer(21336 call _cast bufferType[172923] s[21321])(length = length[21330])(size =(21343 call + length[21330] 1))))
  }
  function createBytesWithOwnedBuffer[21358](arg s[21355] :
  bufferType[172923], arg length[21361] :
  int(64)[13], arg size[21365] :
  int(64)[13]) : _unknown[43] "inline"
  {
    unknown ret[21369] bytes[22]
    (21379 call initWithOwnedBuffer ret[21369] s[21355] length[21361] size[21365])
    (21382 return ret[21369])
  }
  function createBytesWithNewBuffer[21392](arg s[21389] :
  bytes[22]) : _unknown[43] "inline"
  {
    unknown ret[21395] bytes[22]
    (21403 call initWithNewBuffer ret[21395] s[21389])
    (21406 return ret[21395])
  }
  function createBytesWithNewBuffer[21416](arg s[21413] :
  c_string[19], arg length[21422] =
  (21419 call . s[21413] c"length")) : _unknown[43] "inline"
  {
    (21439 return(21438 call createBytesWithNewBuffer(21428 call _cast bufferType[172923] s[21413])(length = length[21422])(size =(21435 call + length[21422] 1))))
  }
  function createBytesWithNewBuffer[21450](arg s[21447] :
  bufferType[172923], arg length[21453] :
  int(64)[13], arg size[21457] :
  int(64)[13]) : _unknown[43] "inline"
  {
    unknown ret[21461] bytes[22]
    (21471 call initWithNewBuffer ret[21461] s[21447] length[21453] size[21457])
    (21474 return ret[21461])
  }
  function bytes[22].init[21505](arg _mt[25996]:_MT[227], arg this[25994]:bytes[22]) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
  }
  function bytes[22].deinit[21512](arg _mt[26000]:_MT[227], ref arg this[25998]:bytes[22]) : _unknown[43] "destructor" "method" "primary method" "no doc" "no return value for void"
  {
    if(21571 call _cond_test(21524 call &&(333800 call . this[25998] c"isowned")(21522 call !=(21518 call . this[25998] c"buff") nil[38])))
    {
      {
        const tmp[21565] "const" "temp"
        (21566 'move' tmp[21565](21563 'deref'(21553 'chpl_on_locale_num'(21552 call chpl_buildLocaleID(21547 call . this[25998] c"locale_id") c_sublocid_any[90220]))))
        {
          (21560 call chpl_here_free(21556 call . this[25998] c"buff"))
        }
      }
    }
  }
  function bytes[22].writeThis[21582](arg _mt[26004]:_MT[227], arg this[26002]:bytes[22], arg f[21580]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (21604 call compilerError "not implemented: writeThis")
  }
  function bytes[22].readThis[21613](arg _mt[26008]:_MT[227], arg this[26006]:bytes[22], arg f[21611]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (21633 call compilerError "not implemented: readThis")
  }
  function bytes[22].init=[21644](arg _mt[26012]:_MT[227], arg this[26010]:bytes[22], arg b[21641] :
  bytes[22]) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (21653 call(21649 call . this[26010] c"complete"))
    (21660 call initWithNewBuffer this[26010] b[21641])
  }
  function bytes[22].init=[21670](arg _mt[26016]:_MT[227], arg this[26014]:bytes[22], arg b[21667] :
  string[24]) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    (21677 call(21673 call . this[26014] c"complete"))
    (21702 call initWithNewBuffer this[26014](21684 call . b[21667] c"buff")(length =(21690 call . b[21667] c"numBytes"))(size =(21699 call +(21695 call . b[21667] c"numBytes") 1)))
  }
  function bytes[22].reinitString[21712](arg _mt[26020]:_MT[227], ref arg this[26018]:bytes[22], arg buf[21709] :
  bufferType[172923], arg s_len[21715] :
  int(64)[13], arg size[21719] :
  int(64)[13], arg needToCopy[21724] :
  bool[10] =
  1) : _unknown[43] "method" "primary method" "no doc" "no return value for void"
  {
    if(21744 call _cond_test(21740 call &&(21735 call(21731 call . this[26018] c"isEmpty"))(21738 call == buf[21709] nil[38])))
    {
      (21742 return _void[47])
    }
    if(21987 call _cond_test(21752 call != s_len[21715] 0))
    {
      if(21923 call _cond_test needToCopy[21724])
      {
        if(21853 call _cond_test(21775 call ||(21761 call !(21758 call . this[26018] c"isowned"))(21773 call >(21765 call + s_len[21715] 1)(21770 call . this[26018] c"_size"))))
        {
          if(21799 call _cond_test(21789 call &&(21778 call . this[26018] c"isowned")(21787 call !(21786 call(21782 call . this[26018] c"isEmpty")))))
          {
            (21797 call bufferFree(21793 call . this[26018] c"buff"))
          }
          const tmp[21817] "const" "no copy" "temp"(21816 call bufferAlloc(21813 call + s_len[21715] 1))
          (21824 call _check_tuple_var_decl tmp[21817] 2)
          const buf[21805] "const"(21818 call tmp[21817] 1)
          const allocSize[21807] "const"(21821 call tmp[21817] 2)
          (21834 call =(21830 call . this[26018] c"buff") buf[21805])
          (21842 call =(21838 call . this[26018] c"_size") allocSize[21807])
          (21850 call =(21846 call . this[26018] c"isowned") 1)
        }
        (21866 call bufferMemmoveLocal(21860 call . this[26018] c"buff") buf[21709] s_len[21715])
        (21876 call =(21874 call(21869 call . this[26018] c"buff") s_len[21715]) 0)
      }
      {
        if(21901 call _cond_test(21891 call &&(21880 call . this[26018] c"isowned")(21889 call !(21888 call(21884 call . this[26018] c"isEmpty")))))
        {
          (21899 call bufferFree(21895 call . this[26018] c"buff"))
        }
        (21912 call =(21908 call . this[26018] c"buff") buf[21709])
        (21920 call =(21916 call . this[26018] c"_size") size[21719])
      }
    }
    {
      if(21950 call _cond_test(21940 call &&(21929 call . this[26018] c"isowned")(21938 call !(21937 call(21933 call . this[26018] c"isEmpty")))))
      {
        (21948 call bufferFree(21944 call . this[26018] c"buff"))
      }
      (21961 call =(21957 call . this[26018] c"_size") 0)
      if(21983 call _cond_test needToCopy[21724])
      {
        (21970 call =(21966 call . this[26018] c"buff") nil[38])
      }
      {
        (21979 call =(21975 call . this[26018] c"buff") buf[21709])
      }
    }
    (21998 call =(21994 call . this[26018] c"len") s_len[21715])
  }
  function bytes[22].length[22005](arg _mt[26024]:_MT[227], arg this[26022]:bytes[22]) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    (22008 return(333856 call . this[26022] c"len"))
  }
  function bytes[22].size[22015](arg _mt[26028]:_MT[227], arg this[26026]:bytes[22]) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    (22018 return(333861 call . this[26026] c"len"))
  }
  function bytes[22].numBytes[22025](arg _mt[26032]:_MT[227], arg this[26030]:bytes[22]) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    (22028 return(333866 call . this[26030] c"len"))
  }
  function bytes[22].localize[22035](arg _mt[26036]:_MT[227], arg this[26034]:bytes[22]) : _unknown[43] "inline" "method" "primary method"
  {
    if(22064 call _cond_test(22046 call || 1(22044 call ==(22040 call . this[26034] c"locale_id") chpl_nodeID[195933])))
    {
      (22052 return(22051 call createBytesWithBorrowedBuffer this[26034]))
    }
    {
      const x[22057] "const" this[26034] bytes[22]
      (22062 return x[22057])
    }
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].c_str[22074](arg _mt[26040]:_MT[227], arg this[26038]:bytes[22]) : _unknown[43] "inline" "method" "primary method"
  {
    (22081 return(22080 call getCStr this[26038]))
  }
  { scopeless type
    c_string[19]
  }
  function bytes[22].this[22093](arg _mt[26044]:_MT[227], arg this[26042]:bytes[22], arg i[22090] :
  int(64)[13]) : _unknown[43] "method" "primary method"
  {
    if(22133 call _cond_test(22110 call && 1(22108 call ||(22099 call <= i[22090] 0)(22106 call > i[22090](22103 call . this[26042] c"len")))))
    {
      (22131 call halt "index out of bounds of bytes: " i[22090])
    }
    unknown tmp[22164] "no copy" "temp"(22163 call bufferCopy(buf =(22146 call . this[26042] c"buff"))(off =(22153 call - i[22090] 1))(len = 1)(loc =(22159 call . this[26042] c"locale_id")))
    (22171 call _check_tuple_var_decl tmp[22164] 2)
    unknown buf[22139](22165 call tmp[22164] 1)
    unknown size[22141](22168 call tmp[22164] 2)
    (22184 return(22183 call createBytesWithOwnedBuffer buf[22139](length = 1)(size = size[22141])))
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].byte[22195](arg _mt[26048]:_MT[227], arg this[26046]:bytes[22], arg i[22192] :
  int(64)[13]) : _unknown[43] "method" "primary method"
  {
    if(22220 call _cond_test(22212 call && 1(22210 call ||(22201 call <= i[22192] 0)(22208 call > i[22192](22205 call . this[26046] c"len")))))
    {
      (22218 call halt "index out of bounds of bytes: " i[22192])
    }
    (22244 return(22243 call bufferGetByte(buf =(22228 call . this[26046] c"buff"))(off =(22235 call - i[22192] 1))(loc =(22239 call . this[26046] c"locale_id"))))
  }
  { scopeless type
    byteType[172913]
  }
  function bytes[22].these[22251](arg _mt[26052]:_MT[227], arg this[26050]:bytes[22]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(22262 call _cond_test(22259 call(22255 call . this[26050] c"isEmpty")))
    {
      (22260 return _void[47])
    }
    {
      unknown _indexOfInterest[22282] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[22283] "expr temp" "temp"
      (22292 'move' _iterator[22283](22290 call _getIterator(22300 call chpl_direct_range_iter 1(22297 call . this[26050] c"len") 1)))
      Defer
      {
        {
          (22316 call _freeIterator _iterator[22283])
        }
      }
      { scopeless type
        (22305 'move' _indexOfInterest[22282](22302 call iteratorIndex _iterator[22283]))
      }
      ForLoop
      {
        unknown i[22309] "index var" "insert auto destroy"
        (22311 'move' i[22309] _indexOfInterest[22282])
        (22280 yield(22279 call this[26050] i[22309]))
        label _continueLabel[22287]
        _indexOfInterest[22282]
        _iterator[22283]
      }
      label _breakLabel[22288]
    }
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].chpl_bytes[22328](arg _mt[26056]:_MT[227], arg this[26054]:bytes[22]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[22350] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[22351] "expr temp" "temp"
      (22360 'move' _iterator[22351](22358 call _getIterator(22368 call chpl_direct_range_iter 1(22365 call . this[26054] c"len") 1)))
      Defer
      {
        {
          (22384 call _freeIterator _iterator[22351])
        }
      }
      { scopeless type
        (22373 'move' _indexOfInterest[22350](22370 call iteratorIndex _iterator[22351]))
      }
      ForLoop
      {
        unknown i[22377] "index var" "insert auto destroy"
        (22379 'move' i[22377] _indexOfInterest[22350])
        (22348 yield(22347 call(22342 call . this[26054] c"byte") i[22377]))
        label _continueLabel[22355]
        _indexOfInterest[22350]
        _iterator[22351]
      }
      label _breakLabel[22356]
    }
  }
  { scopeless type
    byteType[172913]
  }
  function bytes[22].this[22404](arg _mt[26060]:_MT[227], arg this[26058]:bytes[22], arg r[22401] :
  (22400 call range[66183](?) ?[249])) : _unknown[43] "inline" "method" "primary method"
  {
    (22412 return(22411 call getSlice this[26058] r[22401]))
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22]._getView[22427](arg _mt[26064]:_MT[227], arg this[26062]:bytes[22], arg r[22424] :
  (22423 call range[66183](?) ?[249])) : _unknown[43] "method" "primary method" "no doc"
  {
    if(22580 call _cond_test 1)
    {
      if(22508 call _cond_test(22466 call &&(22446 call(22442 call . r[22424] c"hasLowBound"))(22464 call ||(22455 call !(22454 call(22450 call . r[22424] c"hasHighBound")))(22462 call >(22458 call . r[22424] c"size") 0))))
      {
        if(22502 call _cond_test(22478 call <=(22475 call _cast int(64)[13](22471 call . r[22424] c"low")) 0))
        {
          (22500 call halt "range out of bounds of bytes")
        }
      }
      if(22576 call _cond_test(22536 call &&(22518 call(22514 call . r[22424] c"hasHighBound"))(22534 call ||(22525 call !(22524 call(22520 call . r[22424] c"hasLowBound")))(22532 call >(22528 call . r[22424] c"size") 0))))
      {
        if(22570 call _cond_test(22563 call ||(22548 call <(22545 call _cast int(64)[13](22541 call . r[22424] c"high")) 0)(22561 call >(22555 call _cast int(64)[13](22551 call . r[22424] c"high"))(22558 call . this[26062] c"len"))))
        {
          (22568 call halt "range out of bounds of bytes")
        }
      }
    }
    const r1[22607] "const"(22606 call r[22424](22603 call chpl_build_bounded_range(22591 call _cast(22588 call . r[22424] c"idxType") 1)(22601 call _cast(22598 call . r[22424] c"idxType")(22594 call . this[26062] c"len"))))
    if(22668 call _cond_test(22613 call . r1[22607] c"stridable"))
    {
      const ret[22638] "const"(22636 call chpl_by(22630 call chpl_build_bounded_range(22621 call _cast int(64)[13](22617 call . r1[22607] c"low"))(22628 call _cast int(64)[13](22624 call . r1[22607] c"high")))(22633 call . r1[22607] c"stride"))
      (22643 return ret[22638])
    }
    {
      const ret[22661] "const"(22659 call chpl_build_bounded_range(22650 call _cast int(64)[13](22646 call . r1[22607] c"low"))(22657 call _cast int(64)[13](22653 call . r1[22607] c"high")))
      (22666 return ret[22661])
    }
  }
  where {
    (22436 call ==(22432 call . r[22424] c"idxType") int(64)[13])
  }
  function bytes[22].isEmpty[22677](arg _mt[26068]:_MT[227], arg this[26066]:bytes[22]) : _unknown[43] "inline" "method" "primary method"
  {
    (22687 return(22685 call ==(22681 call . this[26066] c"len") 0))
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].startsWith[22701](arg _mt[26072]:_MT[227], arg this[26070]:bytes[22], arg needles[22697] ... :
  bytes[22]) : _unknown[43] "inline" "method" "primary method"
  {
    (22711 return(22710 call startsEndsWith this[26070] needles[22697](fromLeft = 1)))
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].endsWith[22725](arg _mt[26076]:_MT[227], arg this[26074]:bytes[22], arg needles[22721] ... :
  bytes[22]) : _unknown[43] "inline" "method" "primary method"
  {
    (22735 return(22734 call startsEndsWith this[26074] needles[22721](fromLeft = 0)))
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].find[22747](arg _mt[26080]:_MT[227], arg this[26078]:bytes[22], arg needle[22744] :
  bytes[22], arg region[22759] :
  (22752 call range[66183](?) ?[249]) =
  (22757 call chpl_build_low_bounded_range(22755 call _cast idxType[21186] 1))) : _unknown[43] "inline" "method" "primary method"
  {
    (22774 return(22772 call _cast idxType[21186](22770 call(333943 call . this[26078] c"_search_helper") needle[22744] region[22759](count = 0))))
  }
  { scopeless type
    idxType[21186]
  }
  function bytes[22].rfind[22786](arg _mt[26084]:_MT[227], arg this[26082]:bytes[22], arg needle[22783] :
  bytes[22], arg region[22798] :
  (22791 call range[66183](?) ?[249]) =
  (22796 call chpl_build_low_bounded_range(22794 call _cast idxType[21186] 1))) : _unknown[43] "inline" "method" "primary method"
  {
    (22815 return(22813 call _cast idxType[21186](22811 call(333953 call . this[26082] c"_search_helper") needle[22783] region[22798](count = 0)(fromLeft = 0))))
  }
  { scopeless type
    idxType[21186]
  }
  function bytes[22].count[22827](arg _mt[26088]:_MT[227], arg this[26086]:bytes[22], arg needle[22824] :
  bytes[22], arg region[22836] :
  (22832 call range[66183](?) ?[249]) =
  (22834 call chpl_build_low_bounded_range 1)) : _unknown[43] "inline" "method" "primary method"
  {
    (22848 return(22847 call(333961 call . this[26086] c"_search_helper") needle[22824] region[22836](count = 1)))
  }
  { scopeless type
    int(64)[13]
  }
  function bytes[22]._search_helper[22860](arg _mt[26092]:_MT[227], arg this[26090]:bytes[22], arg needle[22857] :
  bytes[22], arg region[22866] :
  (22865 call range[66183](?) ?[249]), param arg count[22870] :
  bool[10], param arg fromLeft[22875] :
  bool[10] =
  1) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    unknown ret[22881] 0 int(64)[13]
    {
      const tmp[23202] "const" "temp"
      (23203 'move' tmp[23202](23200 'deref'(22895 'chpl_on_locale_num'(22894 call chpl_buildLocaleID(22889 call . this[26090] c"locale_id") c_sublocid_any[90220]))))
      {
        unknown localRet[22900](22898 call - 1) int(64)[13]
        const nLen[22908] "const"(22905 call . needle[22857] c"len")
        const view[22920] "const"(22919 call(22914 call . this[26090] c"_getView") region[22866])
        const thisLen[22927] "const"(22924 call . view[22920] c"size")
        if(22990 call _cond_test count[22870])
        {
          if(22947 call _cond_test(22933 call == nLen[22908] 0))
          {
            (22943 call = localRet[22900](22941 call +(22937 call . view[22920] c"size") 1))
          }
        }
        {
          if(22985 call _cond_test(22954 call == nLen[22908] 0))
          {
            if(22980 call _cond_test fromLeft[22875])
            {
              (22959 call = localRet[22900] 0)
            }
            {
              (22976 call = localRet[22900](22973 IfExpr (22966 call == thisLen[22927] 0) then
              { scopeless
                0
              } else
              { scopeless
                (22971 call + thisLen[22927] 1)
              } ))
            }
          }
        }
        if(23004 call _cond_test(22996 call > nLen[22908] thisLen[22927]))
        {
          (23000 call = localRet[22900] 0)
        }
        if(23191 call _cond_test(23012 call == localRet[22900](23010 call - 1)))
        {
          (23016 call = localRet[22900] 0)
          const localNeedle[23028] "const"(23027 call(23023 call . needle[22857] c"localize"))
          const needleLen[23035] "const"(23032 call . localNeedle[23028] c"len")
          const numPossible[23045] "const"(23043 call +(23040 call - thisLen[22927] nLen[22908]) 1)
          const searchSpace[23069] "const"(23066 IfExpr  fromLeft[22875] then
          { scopeless
            (23053 call #(23050 call chpl_build_low_bounded_range 0) numPossible[23045])
          } else
          { scopeless
            (23064 call chpl_by(23059 call #(23056 call chpl_build_low_bounded_range 0) numPossible[23045])(23062 call - 1))
          } )
          {
            unknown _indexOfInterest[23158] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[23159] "expr temp" "temp"
            (23168 'move' _iterator[23159](23166 call _getIterator searchSpace[23069]))
            Defer
            {
              {
                (23184 call _freeIterator _iterator[23159])
              }
            }
            { scopeless type
              (23173 'move' _indexOfInterest[23158](23170 call iteratorIndex _iterator[23159]))
            }
            ForLoop
            {
              unknown i[23177] "index var" "insert auto destroy"
              (23179 'move' i[23177] _indexOfInterest[23158])
              {
                const bufIdx[23083] "const"(23082 call(23077 call . view[22920] c"orderToIndex") i[23177])
                const found[23109] "const"(23108 call bufferEqualsLocal(buf1 =(23089 call . this[26090] c"buff"))(off1 =(23096 call - bufIdx[23083] 1))(buf2 =(23100 call . localNeedle[23028] c"buff"))(off2 = 0)(len = needleLen[23035]))
                if(23137 call _cond_test found[23109])
                {
                  if(23132 call _cond_test count[22870])
                  {
                    (23116 call += localRet[22900] 1)
                  }
                  {
                    (23128 call = localRet[22900](23127 call(23122 call . view[22920] c"orderToIndex") i[23177]))
                  }
                }
                if(23153 call _cond_test(23148 call &&(23142 call ! count[22870])(23146 call != localRet[22900] 0)))
                {
                  break _breakLabel[23164] _breakLabel[23164]
                }
              }
              label _continueLabel[23163]
              _indexOfInterest[23158]
              _iterator[23159]
            }
            label _breakLabel[23164]
          }
        }
        (23197 call = ret[22881] localRet[22900])
      }
    }
    (23208 return ret[22881])
  }
  function bytes[22].replace[23218](arg _mt[26096]:_MT[227], arg this[26094]:bytes[22], arg needle[23215] :
  bytes[22], arg replacement[23221] :
  bytes[22], arg count[23228] :
  int(64)[13] =
  (23226 call - 1)) : _unknown[43] "inline" "method" "primary method"
  {
    (23240 return(23239 call doReplace this[26094] needle[23215] replacement[23221] count[23228]))
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].split[23252](arg _mt[26100]:_MT[227], arg this[26098]:bytes[22], arg sep[23249] :
  bytes[22], arg maxsplit[23258] :
  int(64)[13] =
  (23256 call - 1), arg ignoreEmpty[23264] :
  bool[10] =
  0) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    {
      unknown _indexOfInterest[23280] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[23281] "expr temp" "temp"
      (23290 'move' _iterator[23281](23288 call _getIterator(23276 call doSplit this[26098] sep[23249] maxsplit[23258] ignoreEmpty[23264])))
      Defer
      {
        {
          (23307 call _freeIterator _iterator[23281])
        }
      }
      { scopeless type
        (23296 'move' _indexOfInterest[23280](23293 call iteratorIndex _iterator[23281]))
      }
      ForLoop
      {
        unknown s[23300] "index var" "insert auto destroy"
        (23302 'move' s[23300] _indexOfInterest[23280])
        (23278 yield s[23300])
        label _continueLabel[23285]
        _indexOfInterest[23280]
        _iterator[23281]
      }
      label _breakLabel[23286]
    }
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].split[23328](arg _mt[26104]:_MT[227], arg this[26102]:bytes[22], arg maxsplit[23324] :
  int(64)[13] =
  (23322 call - 1)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    if(23705 call _cond_test(23337 call !(23336 call(23332 call . this[26102] c"isEmpty"))))
    {
      const localThis[23346] "const"(23345 call(23341 call . this[26102] c"localize")) bytes[22]
      unknown done[23352] 0 bool[10]
      unknown yieldChunk[23357] 0 bool[10]
      unknown chunk[23361] bytes[22]
      const noSplits[23369] "const"(23367 call == maxsplit[23324] 0) bool[10]
      const limitSplits[23377] "const"(23375 call > maxsplit[23324] 0) bool[10]
      unknown splitCount[23382] 0 int(64)[13]
      const iEnd[23393] "const"(23391 call -(23387 call . localThis[23346] c"len") 1) idxType[21186]
      unknown inChunk[23398] 0 bool[10]
      unknown chunkStart[23402] idxType[21186]
      {
        unknown _indexOfInterest[23645] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[23646] "expr temp" "temp"
        (23668 'move' _iterator[23646](23421 call _build_tuple(23657 call _getIterator(23655 call chpl_build_low_bounded_range 1))(23665 call _getIterator(23664 call(23661 call . localThis[23346] c"chpl_bytes")))))
        Defer
        {
          {
            (23698 call _freeIterator _iterator[23646])
          }
        }
        { scopeless type
          (23673 'move' _indexOfInterest[23645](23670 call iteratorIndex _iterator[23646]))
        }
        ForLoop
        {
          (23678 call _check_tuple_var_decl _indexOfInterest[23645] 2)
          unknown i[23684] "index var" "insert auto destroy"
          (23686 'move' i[23684](23682 call _indexOfInterest[23645] 1))
          unknown c[23691] "index var" "insert auto destroy"
          (23693 'move' c[23691](23689 call _indexOfInterest[23645] 2))
          {
            if(23617 call _cond_test noSplits[23369])
            {
              (23425 call = done[23352] 1)
              if(23450 call _cond_test(23437 call !(23436 call(23432 call . localThis[23346] c"isSpace"))))
              {
                (23441 call = chunk[23361] localThis[23346])
                (23447 call = yieldChunk[23357] 1)
              }
            }
            {
              unknown cSpace[23458](23457 call byte_isWhitespace c[23691])
              if(23612 call _cond_test(23466 call !(23464 call || inChunk[23398] cSpace[23458])))
              {
                (23470 call = chunkStart[23402] i[23684])
                (23476 call = inChunk[23398] 1)
                if(23504 call _cond_test(23481 call > i[23684] iEnd[23393]))
                {
                  (23490 call = chunk[23361](23489 call localThis[23346](23486 call chpl_build_low_bounded_range chunkStart[23402])))
                  (23496 call = yieldChunk[23357] 1)
                  (23501 call = done[23352] 1)
                }
              }
              {
                if(23608 call _cond_test inChunk[23398])
                {
                  if(23602 call _cond_test cSpace[23458])
                  {
                    (23512 call += splitCount[23382] 1)
                    if(23569 call _cond_test(23521 call && limitSplits[23377](23519 call > splitCount[23382] maxsplit[23324])))
                    {
                      (23530 call = chunk[23361](23529 call localThis[23346](23526 call chpl_build_low_bounded_range chunkStart[23402])))
                      (23536 call = yieldChunk[23357] 1)
                      (23541 call = done[23352] 1)
                    }
                    {
                      (23555 call = chunk[23361](23554 call localThis[23346](23551 call chpl_build_bounded_range chunkStart[23402](23549 call - i[23684] 1))))
                      (23561 call = yieldChunk[23357] 1)
                      (23566 call = inChunk[23398] 0)
                    }
                  }
                  {
                    if(23598 call _cond_test(23575 call > i[23684] iEnd[23393]))
                    {
                      (23584 call = chunk[23361](23583 call localThis[23346](23580 call chpl_build_low_bounded_range chunkStart[23402])))
                      (23590 call = yieldChunk[23357] 1)
                      (23595 call = done[23352] 1)
                    }
                  }
                }
              }
            }
            if(23632 call _cond_test yieldChunk[23357])
            {
              (23624 yield chunk[23361])
              (23629 call = yieldChunk[23357] 0)
            }
            if(23640 call _cond_test done[23352])
            {
              break _breakLabel[23651] _breakLabel[23651]
            }
          }
          label _continueLabel[23650]
          _indexOfInterest[23645]
          _iterator[23646]
        }
        label _breakLabel[23651]
      }
    }
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].join[23721](arg _mt[26108]:_MT[227], arg this[26106]:bytes[22], const  ref arg S[23717] ... :
  bytes[22]) : _unknown[43] "inline" "method" "primary method"
  {
    (23728 return(23727 call(334080 call . this[26106] c"_join") S[23717]))
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].join[23738](arg _mt[26112]:_MT[227], arg this[26110]:bytes[22], const  ref arg S[23736]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    if(23784 call _cond_test(23760 call ||(23749 call !(23748 call isHomogeneousTuple S[23736]))(23758 call !(23757 call isBytes(23755 call S[23736] 1)))))
    {
      (23782 call compilerError "join() on tuples only handles homogeneous tuples of strings")
    }
    (23794 return(23793 call(334088 call . this[26110] c"_join") S[23736]))
  }
  where {
    (23744 call isTuple S[23736])
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].join[23809](arg _mt[26116]:_MT[227], arg this[26114]:bytes[22], const  ref arg S[23806] :
  (23803 call chpl__buildArrayRuntimeType nil[38] bytes[22])) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (23816 return(23815 call(334093 call . this[26114] c"_join") S[23806]))
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].join[23828](arg _mt[26120]:_MT[227], arg this[26118]:bytes[22], arg ir[23825] :
  _iteratorRecord[194](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (23836 return(23835 call doJoinIterator this[26118] ir[23825]))
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22]._join[23846](arg _mt[26124]:_MT[227], arg this[26122]:bytes[22], const  ref arg S[23844]:_any[170](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (23864 return(23863 call doJoin this[26122] S[23844]))
  }
  where {
    (23857 call ||(23852 call isTuple S[23844])(23856 call isArray S[23844]))
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].strip[23897](arg _mt[26128]:_MT[227], arg this[26126]:bytes[22], arg chars[23893] :
  bytes[22] =
  (23891 call _cast bytes[22] " \t\r\n"), arg leading[23900] =
  1, arg trailing[23904] =
  1) : _unknown[43] "method" "primary method"
  {
    if(23932 call _cond_test(23913 call(23909 call . this[26126] c"isEmpty")))
    {
      (23930 return "")
    }
    if(23947 call _cond_test(23943 call(23939 call . chars[23893] c"isEmpty")))
    {
      (23945 return this[26126])
    }
    const localThis[23959] "const"(23958 call(23954 call . this[26126] c"localize")) bytes[22]
    const localChars[23969] "const"(23968 call(23964 call . chars[23893] c"localize")) bytes[22]
    unknown start[23974] 1 idxType[21186]
    unknown end[23982](23979 call . localThis[23959] c"len") idxType[21186]
    if(24127 call _cond_test leading[23900])
    {
      {
        unknown _indexOfInterest[24066] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[24067] "expr temp" "temp"
        (24089 'move' _iterator[24067](24000 call _build_tuple(24078 call _getIterator(24076 call chpl_build_low_bounded_range 1))(24086 call _getIterator(24085 call(24082 call . localThis[23959] c"chpl_bytes")))))
        Defer
        {
          {
            (24119 call _freeIterator _iterator[24067])
          }
        }
        { scopeless type
          (24094 'move' _indexOfInterest[24066](24091 call iteratorIndex _iterator[24067]))
        }
        ForLoop
        {
          (24099 call _check_tuple_var_decl _indexOfInterest[24066] 2)
          unknown i[24105] "index var" "insert auto destroy"
          (24107 'move' i[24105](24103 call _indexOfInterest[24066] 1))
          unknown thisChar[24112] "index var" "insert auto destroy"
          (24114 'move' thisChar[24112](24110 call _indexOfInterest[24066] 2))
          {
            {
              unknown _indexOfInterest[24028] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[24029] "expr temp" "temp"
              (24038 'move' _iterator[24029](24036 call _getIterator(24006 call(24003 call . localChars[23969] c"chpl_bytes"))))
              Defer
              {
                {
                  (24055 call _freeIterator _iterator[24029])
                }
              }
              { scopeless type
                (24044 'move' _indexOfInterest[24028](24041 call iteratorIndex _iterator[24029]))
              }
              ForLoop
              {
                unknown removeChar[24048] "index var" "insert auto destroy"
                (24050 'move' removeChar[24048] _indexOfInterest[24028])
                {
                  if(24023 call _cond_test(24009 call == thisChar[24112] removeChar[24048]))
                  {
                    (24016 call = start[23974](24014 call + i[24105] 1))
                    continue _continueLabel[24071] _continueLabel[24071]
                  }
                }
                label _continueLabel[24033]
                _indexOfInterest[24028]
                _iterator[24029]
              }
              label _breakLabel[24034]
            }
            break _breakLabel[24072] _breakLabel[24072]
          }
          label _continueLabel[24071]
          _indexOfInterest[24066]
          _iterator[24067]
        }
        label _breakLabel[24072]
      }
    }
    if(24272 call _cond_test trailing[23904])
    {
      (24134 call = end[23982] 0)
      {
        unknown _indexOfInterest[24212] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[24213] "expr temp" "temp"
        (24235 'move' _iterator[24213](24152 call _build_tuple(24224 call _getIterator(24222 call chpl_build_low_bounded_range 1))(24232 call _getIterator(24231 call(24228 call . localThis[23959] c"chpl_bytes")))))
        Defer
        {
          {
            (24265 call _freeIterator _iterator[24213])
          }
        }
        { scopeless type
          (24240 'move' _indexOfInterest[24212](24237 call iteratorIndex _iterator[24213]))
        }
        ForLoop
        {
          (24245 call _check_tuple_var_decl _indexOfInterest[24212] 2)
          unknown i[24251] "index var" "insert auto destroy"
          (24253 'move' i[24251](24249 call _indexOfInterest[24212] 1))
          unknown thisChar[24258] "index var" "insert auto destroy"
          (24260 'move' thisChar[24258](24256 call _indexOfInterest[24212] 2))
          {
            {
              unknown _indexOfInterest[24172] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[24173] "expr temp" "temp"
              (24182 'move' _iterator[24173](24180 call _getIterator(24158 call(24155 call . localChars[23969] c"chpl_bytes"))))
              Defer
              {
                {
                  (24199 call _freeIterator _iterator[24173])
                }
              }
              { scopeless type
                (24188 'move' _indexOfInterest[24172](24185 call iteratorIndex _iterator[24173]))
              }
              ForLoop
              {
                unknown removeChar[24192] "index var" "insert auto destroy"
                (24194 'move' removeChar[24192] _indexOfInterest[24172])
                {
                  if(24167 call _cond_test(24161 call == thisChar[24258] removeChar[24192]))
                  {
                    continue _continueLabel[24217] _continueLabel[24217]
                  }
                }
                label _continueLabel[24177]
                _indexOfInterest[24172]
                _iterator[24173]
              }
              label _breakLabel[24178]
            }
            (24209 call = end[23982] i[24251])
          }
          label _continueLabel[24217]
          _indexOfInterest[24212]
          _iterator[24213]
        }
        label _breakLabel[24218]
      }
    }
    (24283 return(24282 call localThis[23959](24279 call chpl_build_bounded_range start[23974] end[23982])))
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].partition[24294](arg _mt[26132]:_MT[227], const arg this[26130]:bytes[22], arg sep[24291] :
  bytes[22]) : _unknown[43] "inline" "method" "primary method"
  {
    (24305 return(24304 call doPartition this[26130] sep[24291]))
  }
  { scopeless type
    (24298 call * 3 bytes[22])
  }
  function bytes[22].decode[24322](arg _mt[26136]:_MT[227], arg this[26134]:bytes[22], arg errors[24319] =
  strict[21140]) : _unknown[43] throws "method" "primary method"
  {
    function qio_decode_char_buf[24334](ref arg chr[24331] :
    (24330 call int(64)[13] 32), ref arg nbytes[24337] :
    c_int[209569], arg buf[24341] :
    c_string[19], arg buflen[24345] :
    ssize_t[209667]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      syserr[210032]
    }
    unknown localThis[24360](24359 call(24355 call . this[26134] c"localize")) bytes[22]
    unknown ret[24364] string[24]
    unknown tmp[24382] "no copy" "temp"(24381 call bufferAlloc(24378 call +(24374 call . this[26134] c"len") 1))
    (24389 call _check_tuple_var_decl tmp[24382] 2)
    unknown newBuff[24367](24383 call tmp[24382] 1)
    unknown allocSize[24369](24386 call tmp[24382] 2)
    (24399 call =(24395 call . ret[24364] c"buff") newBuff[24367])
    (24407 call =(24403 call . ret[24364] c"_size") allocSize[24369])
    (24415 call =(24411 call . ret[24364] c"isowned") 1)
    unknown thisIdx[24419] 0
    unknown decodedIdx[24423] 0
    {
      unknown tmp[24558] "temp"
      (24588 'move' tmp[24558](24580 call _cond_test(24582 call < thisIdx[24419](24585 call . localThis[24360] c"len"))))
      WhileDo
      {
        {
          unknown cp[24437](24436 call int(64)[13] 32)
          unknown nbytes[24442] c_int[209569]
          unknown bufToDecode[24455](24453 call _cast c_string[19](24450 call +(24446 call . localThis[24360] c"buff") thisIdx[24419]))
          unknown maxbytes[24468](24466 call _cast ssize_t[209667](24463 call -(24459 call . localThis[24360] c"len") thisIdx[24419]))
          (24477 call qio_decode_char_buf cp[24437] nbytes[24442] bufToDecode[24455] maxbytes[24468])
          if(24529 call _cond_test(24483 call == cp[24437] 65533))
          {
            if(24523 call _cond_test(24490 call == errors[24319] strict[21140]))
            {
              (24498 'throw'(24497 'new'(24495 call _owned[39039](?)(24494 call anymanaged DecodeError[334159](?)))))
            }
            {
              if(24519 call _cond_test(24508 call == errors[24319] ignore[21144]))
              {
                (24512 call += thisIdx[24419] nbytes[24442])
                continue _continueLabel[24561] _continueLabel[24561]
              }
            }
          }
          (24546 call bufferMemcpyLocal(dst =(24535 call . ret[24364] c"buff"))(src = bufToDecode[24455])(len = nbytes[24442])(dst_off = decodedIdx[24423]))
          (24550 call += thisIdx[24419] nbytes[24442])
          (24555 call += decodedIdx[24423] nbytes[24442])
        }
        label _continueLabel[24561]
        (24575 'move' tmp[24558](24567 call _cond_test(24569 call < thisIdx[24419](24572 call . localThis[24360] c"len"))))
        tmp[24558]
      }
      label _breakLabel[24562]
    }
    (24596 call =(24592 call . ret[24364] c"len") decodedIdx[24423])
    (24610 call =(24608 call(24600 call . ret[24364] c"buff")(24604 call . ret[24364] c"len")) 0)
    (24614 return ret[24364])
  }
  { scopeless type
    string[24]
  }
  function bytes[22].isUpper[24621](arg _mt[26140]:_MT[227], arg this[26138]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    if(24633 call _cond_test(24629 call(24625 call . this[26138] c"isEmpty")))
    {
      (24631 return 0)
    }
    unknown result[24641] 1 bool[10]
    {
      const tmp[24718] "const" "temp"
      (24719 'move' tmp[24718](24716 'deref'(24654 'chpl_on_locale_num'(24653 call chpl_buildLocaleID(24648 call . this[26138] c"locale_id") c_sublocid_any[90220]))))
      {
        {
          unknown _indexOfInterest[24681] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[24682] "expr temp" "temp"
          (24691 'move' _iterator[24682](24689 call _getIterator(24660 call(24657 call . this[26138] c"chpl_bytes"))))
          Defer
          {
            {
              (24708 call _freeIterator _iterator[24682])
            }
          }
          { scopeless type
            (24697 'move' _indexOfInterest[24681](24694 call iteratorIndex _iterator[24682]))
          }
          ForLoop
          {
            unknown b[24701] "index var" "insert auto destroy"
            (24703 'move' b[24701] _indexOfInterest[24681])
            {
              if(24676 call _cond_test(24665 call !(24664 call byte_isUpper b[24701])))
              {
                (24669 call = result[24641] 0)
                break _breakLabel[24687] _breakLabel[24687]
              }
            }
            label _continueLabel[24686]
            _indexOfInterest[24681]
            _iterator[24682]
          }
          label _breakLabel[24687]
        }
      }
    }
    (24724 return result[24641])
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].isLower[24731](arg _mt[26144]:_MT[227], arg this[26142]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    if(24743 call _cond_test(24739 call(24735 call . this[26142] c"isEmpty")))
    {
      (24741 return 0)
    }
    unknown result[24751] 1 bool[10]
    {
      const tmp[24828] "const" "temp"
      (24829 'move' tmp[24828](24826 'deref'(24764 'chpl_on_locale_num'(24763 call chpl_buildLocaleID(24758 call . this[26142] c"locale_id") c_sublocid_any[90220]))))
      {
        {
          unknown _indexOfInterest[24791] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[24792] "expr temp" "temp"
          (24801 'move' _iterator[24792](24799 call _getIterator(24770 call(24767 call . this[26142] c"chpl_bytes"))))
          Defer
          {
            {
              (24818 call _freeIterator _iterator[24792])
            }
          }
          { scopeless type
            (24807 'move' _indexOfInterest[24791](24804 call iteratorIndex _iterator[24792]))
          }
          ForLoop
          {
            unknown b[24811] "index var" "insert auto destroy"
            (24813 'move' b[24811] _indexOfInterest[24791])
            {
              if(24786 call _cond_test(24775 call !(24774 call byte_isLower b[24811])))
              {
                (24779 call = result[24751] 0)
                break _breakLabel[24797] _breakLabel[24797]
              }
            }
            label _continueLabel[24796]
            _indexOfInterest[24791]
            _iterator[24792]
          }
          label _breakLabel[24797]
        }
      }
    }
    (24834 return result[24751])
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].isSpace[24841](arg _mt[26148]:_MT[227], arg this[26146]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    if(24853 call _cond_test(24849 call(24845 call . this[26146] c"isEmpty")))
    {
      (24851 return 0)
    }
    unknown result[24861] 1 bool[10]
    {
      const tmp[24938] "const" "temp"
      (24939 'move' tmp[24938](24936 'deref'(24874 'chpl_on_locale_num'(24873 call chpl_buildLocaleID(24868 call . this[26146] c"locale_id") c_sublocid_any[90220]))))
      {
        {
          unknown _indexOfInterest[24901] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[24902] "expr temp" "temp"
          (24911 'move' _iterator[24902](24909 call _getIterator(24880 call(24877 call . this[26146] c"chpl_bytes"))))
          Defer
          {
            {
              (24928 call _freeIterator _iterator[24902])
            }
          }
          { scopeless type
            (24917 'move' _indexOfInterest[24901](24914 call iteratorIndex _iterator[24902]))
          }
          ForLoop
          {
            unknown b[24921] "index var" "insert auto destroy"
            (24923 'move' b[24921] _indexOfInterest[24901])
            {
              if(24896 call _cond_test(24885 call !(24884 call byte_isWhitespace b[24921])))
              {
                (24889 call = result[24861] 0)
                break _breakLabel[24907] _breakLabel[24907]
              }
            }
            label _continueLabel[24906]
            _indexOfInterest[24901]
            _iterator[24902]
          }
          label _breakLabel[24907]
        }
      }
    }
    (24944 return result[24861])
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].isAlpha[24951](arg _mt[26152]:_MT[227], arg this[26150]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    if(24963 call _cond_test(24959 call(24955 call . this[26150] c"isEmpty")))
    {
      (24961 return 0)
    }
    unknown result[24971] 1 bool[10]
    {
      const tmp[25048] "const" "temp"
      (25049 'move' tmp[25048](25046 'deref'(24984 'chpl_on_locale_num'(24983 call chpl_buildLocaleID(24978 call . this[26150] c"locale_id") c_sublocid_any[90220]))))
      {
        {
          unknown _indexOfInterest[25011] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[25012] "expr temp" "temp"
          (25021 'move' _iterator[25012](25019 call _getIterator(24990 call(24987 call . this[26150] c"chpl_bytes"))))
          Defer
          {
            {
              (25038 call _freeIterator _iterator[25012])
            }
          }
          { scopeless type
            (25027 'move' _indexOfInterest[25011](25024 call iteratorIndex _iterator[25012]))
          }
          ForLoop
          {
            unknown b[25031] "index var" "insert auto destroy"
            (25033 'move' b[25031] _indexOfInterest[25011])
            {
              if(25006 call _cond_test(24995 call !(24994 call byte_isAlpha b[25031])))
              {
                (24999 call = result[24971] 0)
                break _breakLabel[25017] _breakLabel[25017]
              }
            }
            label _continueLabel[25016]
            _indexOfInterest[25011]
            _iterator[25012]
          }
          label _breakLabel[25017]
        }
      }
    }
    (25054 return result[24971])
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].isDigit[25061](arg _mt[26156]:_MT[227], arg this[26154]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    if(25073 call _cond_test(25069 call(25065 call . this[26154] c"isEmpty")))
    {
      (25071 return 0)
    }
    unknown result[25081] 1 bool[10]
    {
      const tmp[25158] "const" "temp"
      (25159 'move' tmp[25158](25156 'deref'(25094 'chpl_on_locale_num'(25093 call chpl_buildLocaleID(25088 call . this[26154] c"locale_id") c_sublocid_any[90220]))))
      {
        {
          unknown _indexOfInterest[25121] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[25122] "expr temp" "temp"
          (25131 'move' _iterator[25122](25129 call _getIterator(25100 call(25097 call . this[26154] c"chpl_bytes"))))
          Defer
          {
            {
              (25148 call _freeIterator _iterator[25122])
            }
          }
          { scopeless type
            (25137 'move' _indexOfInterest[25121](25134 call iteratorIndex _iterator[25122]))
          }
          ForLoop
          {
            unknown b[25141] "index var" "insert auto destroy"
            (25143 'move' b[25141] _indexOfInterest[25121])
            {
              if(25116 call _cond_test(25105 call !(25104 call byte_isDigit b[25141])))
              {
                (25109 call = result[25081] 0)
                break _breakLabel[25127] _breakLabel[25127]
              }
            }
            label _continueLabel[25126]
            _indexOfInterest[25121]
            _iterator[25122]
          }
          label _breakLabel[25127]
        }
      }
    }
    (25164 return result[25081])
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].isAlnum[25171](arg _mt[26160]:_MT[227], arg this[26158]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    if(25183 call _cond_test(25179 call(25175 call . this[26158] c"isEmpty")))
    {
      (25181 return 0)
    }
    unknown result[25191] 1 bool[10]
    {
      const tmp[25268] "const" "temp"
      (25269 'move' tmp[25268](25266 'deref'(25204 'chpl_on_locale_num'(25203 call chpl_buildLocaleID(25198 call . this[26158] c"locale_id") c_sublocid_any[90220]))))
      {
        {
          unknown _indexOfInterest[25231] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[25232] "expr temp" "temp"
          (25241 'move' _iterator[25232](25239 call _getIterator(25210 call(25207 call . this[26158] c"chpl_bytes"))))
          Defer
          {
            {
              (25258 call _freeIterator _iterator[25232])
            }
          }
          { scopeless type
            (25247 'move' _indexOfInterest[25231](25244 call iteratorIndex _iterator[25232]))
          }
          ForLoop
          {
            unknown b[25251] "index var" "insert auto destroy"
            (25253 'move' b[25251] _indexOfInterest[25231])
            {
              if(25226 call _cond_test(25215 call !(25214 call byte_isAlnum b[25251])))
              {
                (25219 call = result[25191] 0)
                break _breakLabel[25237] _breakLabel[25237]
              }
            }
            label _continueLabel[25236]
            _indexOfInterest[25231]
            _iterator[25232]
          }
          label _breakLabel[25237]
        }
      }
    }
    (25274 return result[25191])
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].isPrintable[25281](arg _mt[26164]:_MT[227], arg this[26162]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    if(25293 call _cond_test(25289 call(25285 call . this[26162] c"isEmpty")))
    {
      (25291 return 0)
    }
    unknown result[25301] 1 bool[10]
    {
      const tmp[25378] "const" "temp"
      (25379 'move' tmp[25378](25376 'deref'(25314 'chpl_on_locale_num'(25313 call chpl_buildLocaleID(25308 call . this[26162] c"locale_id") c_sublocid_any[90220]))))
      {
        {
          unknown _indexOfInterest[25341] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[25342] "expr temp" "temp"
          (25351 'move' _iterator[25342](25349 call _getIterator(25320 call(25317 call . this[26162] c"chpl_bytes"))))
          Defer
          {
            {
              (25368 call _freeIterator _iterator[25342])
            }
          }
          { scopeless type
            (25357 'move' _indexOfInterest[25341](25354 call iteratorIndex _iterator[25342]))
          }
          ForLoop
          {
            unknown b[25361] "index var" "insert auto destroy"
            (25363 'move' b[25361] _indexOfInterest[25341])
            {
              if(25336 call _cond_test(25325 call !(25324 call byte_isPrintable b[25361])))
              {
                (25329 call = result[25301] 0)
                break _breakLabel[25347] _breakLabel[25347]
              }
            }
            label _continueLabel[25346]
            _indexOfInterest[25341]
            _iterator[25342]
          }
          label _breakLabel[25347]
        }
      }
    }
    (25384 return result[25301])
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].isTitle[25391](arg _mt[26168]:_MT[227], arg this[26166]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    if(25403 call _cond_test(25399 call(25395 call . this[26166] c"isEmpty")))
    {
      (25401 return 0)
    }
    unknown result[25411] 1 bool[10]
    {
      const tmp[25562] "const" "temp"
      (25563 'move' tmp[25562](25560 'deref'(25424 'chpl_on_locale_num'(25423 call chpl_buildLocaleID(25418 call . this[26166] c"locale_id") c_sublocid_any[90220]))))
      {
        unknown UN[25426] "param" 0
        unknown UPPER[25430] "param" 1
        unknown LOWER[25434] "param" 2
        unknown last[25439] UN[25426]
        {
          unknown _indexOfInterest[25526] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[25527] "expr temp" "temp"
          (25536 'move' _iterator[25527](25534 call _getIterator(25447 call(25444 call . this[26166] c"chpl_bytes"))))
          Defer
          {
            {
              (25553 call _freeIterator _iterator[25527])
            }
          }
          { scopeless type
            (25542 'move' _indexOfInterest[25526](25539 call iteratorIndex _iterator[25527]))
          }
          ForLoop
          {
            unknown b[25546] "index var" "insert auto destroy"
            (25548 'move' b[25546] _indexOfInterest[25526])
            {
              if(25520 call _cond_test(25451 call byte_isLower b[25546]))
              {
                if(25477 call _cond_test(25460 call ||(25454 call == last[25439] UPPER[25430])(25458 call == last[25439] LOWER[25434])))
                {
                  (25464 call = last[25439] LOWER[25434])
                }
                {
                  (25470 call = result[25411] 0)
                  break _breakLabel[25532] _breakLabel[25532]
                }
              }
              {
                if(25516 call _cond_test(25485 call byte_isUpper b[25546]))
                {
                  if(25505 call _cond_test(25488 call == last[25439] UN[25426]))
                  {
                    (25492 call = last[25439] UPPER[25430])
                  }
                  {
                    (25498 call = result[25411] 0)
                    break _breakLabel[25532] _breakLabel[25532]
                  }
                }
                {
                  (25512 call = last[25439] UN[25426])
                }
              }
            }
            label _continueLabel[25531]
            _indexOfInterest[25526]
            _iterator[25527]
          }
          label _breakLabel[25532]
        }
      }
    }
    (25568 return result[25411])
  }
  { scopeless type
    bool[10]
  }
  function bytes[22].toLower[25575](arg _mt[26172]:_MT[227], arg this[26170]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    unknown result[25580] this[26170] bytes[22]
    if(25593 call _cond_test(25589 call(25585 call . result[25580] c"isEmpty")))
    {
      (25591 return result[25580])
    }
    {
      unknown _indexOfInterest[25628] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[25629] "expr temp" "temp"
      (25651 'move' _iterator[25629](25612 call _build_tuple(25640 call _getIterator(25638 call chpl_build_low_bounded_range 0))(25648 call _getIterator(25647 call(25644 call . result[25580] c"chpl_bytes")))))
      Defer
      {
        {
          (25681 call _freeIterator _iterator[25629])
        }
      }
      { scopeless type
        (25656 'move' _indexOfInterest[25628](25653 call iteratorIndex _iterator[25629]))
      }
      ForLoop
      {
        (25661 call _check_tuple_var_decl _indexOfInterest[25628] 2)
        unknown i[25667] "index var" "insert auto destroy"
        (25669 'move' i[25667](25665 call _indexOfInterest[25628] 1))
        unknown b[25674] "index var" "insert auto destroy"
        (25676 'move' b[25674](25672 call _indexOfInterest[25628] 2))
        {
          (25624 call =(25619 call(25614 call . result[25580] c"buff") i[25667])(25623 call byte_toLower b[25674]))
        }
        label _continueLabel[25633]
        _indexOfInterest[25628]
        _iterator[25629]
      }
      label _breakLabel[25634]
    }
    (25689 return result[25580])
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].toUpper[25696](arg _mt[26176]:_MT[227], arg this[26174]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    unknown result[25701] this[26174] bytes[22]
    if(25714 call _cond_test(25710 call(25706 call . result[25701] c"isEmpty")))
    {
      (25712 return result[25701])
    }
    {
      unknown _indexOfInterest[25749] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[25750] "expr temp" "temp"
      (25772 'move' _iterator[25750](25733 call _build_tuple(25761 call _getIterator(25759 call chpl_build_low_bounded_range 0))(25769 call _getIterator(25768 call(25765 call . result[25701] c"chpl_bytes")))))
      Defer
      {
        {
          (25802 call _freeIterator _iterator[25750])
        }
      }
      { scopeless type
        (25777 'move' _indexOfInterest[25749](25774 call iteratorIndex _iterator[25750]))
      }
      ForLoop
      {
        (25782 call _check_tuple_var_decl _indexOfInterest[25749] 2)
        unknown i[25788] "index var" "insert auto destroy"
        (25790 'move' i[25788](25786 call _indexOfInterest[25749] 1))
        unknown b[25795] "index var" "insert auto destroy"
        (25797 'move' b[25795](25793 call _indexOfInterest[25749] 2))
        {
          (25745 call =(25740 call(25735 call . result[25701] c"buff") i[25788])(25744 call byte_toUpper b[25795]))
        }
        label _continueLabel[25754]
        _indexOfInterest[25749]
        _iterator[25750]
      }
      label _breakLabel[25755]
    }
    (25810 return result[25701])
  }
  { scopeless type
    bytes[22]
  }
  function bytes[22].toTitle[25817](arg _mt[26180]:_MT[227], arg this[26178]:bytes[22]) : _unknown[43] "method" "primary method"
  {
    unknown result[25822] this[26178] bytes[22]
    if(25835 call _cond_test(25831 call(25827 call . result[25822] c"isEmpty")))
    {
      (25833 return result[25822])
    }
    unknown UN[25841] "param" 0
    unknown LETTER[25845] "param" 1
    unknown last[25849] UN[25841]
    {
      unknown _indexOfInterest[25926] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[25927] "expr temp" "temp"
      (25949 'move' _iterator[25927](25866 call _build_tuple(25938 call _getIterator(25936 call chpl_build_low_bounded_range 0))(25946 call _getIterator(25945 call(25942 call . result[25822] c"chpl_bytes")))))
      Defer
      {
        {
          (25979 call _freeIterator _iterator[25927])
        }
      }
      { scopeless type
        (25954 'move' _indexOfInterest[25926](25951 call iteratorIndex _iterator[25927]))
      }
      ForLoop
      {
        (25959 call _check_tuple_var_decl _indexOfInterest[25926] 2)
        unknown i[25965] "index var" "insert auto destroy"
        (25967 'move' i[25965](25963 call _indexOfInterest[25926] 1))
        unknown b[25972] "index var" "insert auto destroy"
        (25974 'move' b[25972](25970 call _indexOfInterest[25926] 2))
        {
          if(25921 call _cond_test(25870 call byte_isAlpha b[25972]))
          {
            if(25910 call _cond_test(25873 call == last[25849] UN[25841]))
            {
              (25877 call = last[25849] LETTER[25845])
              (25892 call =(25887 call(25882 call . result[25822] c"buff") i[25965])(25891 call byte_toUpper b[25972]))
            }
            {
              (25906 call =(25901 call(25896 call . result[25822] c"buff") i[25965])(25905 call byte_toLower b[25972]))
            }
          }
          {
            (25917 call = last[25849] UN[25841])
          }
        }
        label _continueLabel[25931]
        _indexOfInterest[25926]
        _iterator[25927]
      }
      label _breakLabel[25932]
    }
    (25987 return result[25822])
  }
  { scopeless type
    bytes[22]
  }
  type bytes[22] unknown len[21481] "no doc" 0 int(64)[13] unknown _size[21486] "no doc" 0 int(64)[13] unknown buff[21491] "no doc" nil[38] bufferType[172923] unknown isowned[21496] "no doc" 1 bool[10] unknown locale_id[21500] "no doc" chpl_nodeID[195933]
  function _cast[26189](arg t[26186] :
  bytes[22], arg x[26192] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    (26215 return(26214 call createBytesWithNewBuffer(26197 call . x[26192] c"buff")(length =(26202 call . x[26192] c"numBytes"))(size =(26211 call +(26207 call . x[26192] c"numBytes") 1))))
  }
  function +=[26226](ref arg lhs[26223] :
  bytes[22], const  ref arg rhs[26229] :
  bytes[22]) : _unknown[43] "assignop" "no return value for void"
  {
    (26237 call doAppend lhs[26223] rhs[26229])
  }
  { scopeless type
    void[4]
  }
  function =[26249](ref arg lhs[26246] :
  bytes[22], arg rhs[26252] :
  bytes[22]) : _unknown[43] "assignop" "no return value for void"
  {
    (26259 call doAssign lhs[26246] rhs[26252])
  }
  function =[26270](ref arg lhs[26267] :
  bytes[22], arg rhs_c[26273] :
  c_string[19]) : _unknown[43] "assignop" "no return value for void"
  {
    (26280 call doAssign lhs[26267] rhs_c[26273])
  }
  function +[26291](arg s0[26288] :
  bytes[22], arg s1[26294] :
  bytes[22]) : _unknown[43]
  {
    (26302 return(26301 call doConcat s0[26288] s1[26294]))
  }
  function *[26313](arg s[26310] :
  bytes[22], arg n[26316] :
  integral[188](?)) : _unknown[43]
  {
    (26324 return(26323 call doMultiply s[26310] n[26316]))
  }
  function ==[26335](arg a[26332] :
  bytes[22], arg b[26338] :
  bytes[22]) : _unknown[43] "no doc"
  {
    (26347 return(26346 call doEq a[26332] b[26338]))
  }
  { scopeless type
    bool[10]
  }
  function ==[26359](arg a[26356] :
  bytes[22], arg b[26362] :
  string[24]) : _unknown[43] "no doc"
  {
    (26371 return(26370 call doEq a[26356] b[26362]))
  }
  { scopeless type
    bool[10]
  }
  function ==[26383](arg a[26380] :
  string[24], arg b[26386] :
  bytes[22]) : _unknown[43] "no doc"
  {
    (26395 return(26394 call doEq a[26380] b[26386]))
  }
  { scopeless type
    bool[10]
  }
  function !=[26407](arg a[26404] :
  bytes[22], arg b[26410] :
  bytes[22]) : _unknown[43] "inline" "no doc"
  {
    (26421 return(26419 call !(26418 call doEq a[26404] b[26410])))
  }
  { scopeless type
    bool[10]
  }
  function !=[26433](arg a[26430] :
  bytes[22], arg b[26436] :
  string[24]) : _unknown[43] "inline" "no doc"
  {
    (26447 return(26445 call !(26444 call doEq a[26430] b[26436])))
  }
  { scopeless type
    bool[10]
  }
  function !=[26459](arg a[26456] :
  string[24], arg b[26462] :
  bytes[22]) : _unknown[43] "inline" "no doc"
  {
    (26473 return(26471 call !(26470 call doEq a[26456] b[26462])))
  }
  { scopeless type
    bool[10]
  }
  (26496 'require' "ctype.h")
  function byte_isAscii[26504](arg c[26501] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function isascii[26513](arg c[26510] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26530 return(26528 call !=(26526 call isascii(26523 call _cast c_int[209569] c[26501])) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isWhitespace[26541](arg c[26538] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function isspace[26550](arg c[26547] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26567 return(26565 call !=(26563 call isspace(26560 call _cast c_int[209569] c[26538])) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isPrintable[26578](arg c[26575] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function isprint[26587](arg c[26584] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26604 return(26602 call !=(26600 call isprint(26597 call _cast c_int[209569] c[26575])) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isAlpha[26615](arg c[26612] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function isalpha[26624](arg c[26621] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26641 return(26639 call !=(26637 call isalpha(26634 call _cast c_int[209569] c[26612])) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isUpper[26652](arg c[26649] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function isupper[26661](arg c[26658] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26678 return(26676 call !=(26674 call isupper(26671 call _cast c_int[209569] c[26649])) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isLower[26689](arg c[26686] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function islower[26698](arg c[26695] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26715 return(26713 call !=(26711 call islower(26708 call _cast c_int[209569] c[26686])) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isDigit[26726](arg c[26723] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function isdigit[26735](arg c[26732] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26752 return(26750 call !=(26748 call isdigit(26745 call _cast c_int[209569] c[26723])) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_isAlnum[26763](arg c[26760] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function isalnum[26772](arg c[26769] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26789 return(26787 call !=(26785 call isalnum(26782 call _cast c_int[209569] c[26760])) 0))
  }
  { scopeless type
    bool[10]
  }
  function byte_toUpper[26800](arg c[26797] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function toupper[26809](arg c[26806] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26826 return(26824 call _cast byteType[172913](26822 call toupper(26819 call _cast c_int[209569] c[26797]))))
  }
  { scopeless type
    byteType[172913]
  }
  function byte_toLower[26837](arg c[26834] :
  byteType[172913]) : _unknown[43] "inline" "private"
  {
    function tolower[26846](arg c[26843] :
    c_int[209569]) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free" "no return value for void"
    {
    }
    { scopeless type
      c_int[209569]
    }
    (26863 return(26861 call _cast byteType[172913](26859 call tolower(26856 call _cast c_int[209569] c[26834]))))
  }
  { scopeless type
    byteType[172913]
  }
  (329298 'used modules list'(21124 'use' ChapelStandard[19734])(21129 'use' BytesCasts[170456])(21133 'use' ByteBufferHelpers[172903])(21137 'use' BytesStringCommon[173830]))
}