AST dump for ChapelSyncvar after pass scopeResolve.
Module use list: ChapelStandard AlignedTSupport MemConsistency SyncVarRuntimeSupport 

{
  function isSupported[85162](arg t[85160]:_any[170](?)) param : _unknown[43] "private"
  {
    (85216 return(85214 call ||(85208 call ||(85202 call ||(85196 call ||(85190 call ||(85184 call ||(85178 call ||(85172 call ||(85167 call isNothingType t[85160])(85171 call isBoolType t[85160]))(85177 call isIntegralType t[85160]))(85183 call isRealType t[85160]))(85189 call isImagType t[85160]))(85195 call isEnumType t[85160]))(85201 call isClassType t[85160]))(85207 call isStringType t[85160]))(85212 call == t[85160] chpl_taskID_t[155])))
  }
  function ensureFEType[85225](arg t[85223]:_any[170](?)) : _unknown[43] "private" "no return value for void"
  {
    if(85274 call _cond_test(85232 call ==(85230 call isSupported t[85223]) 0))
    {
      (85272 call compilerError "sync/single types cannot contain type '"(85254 call _cast string[24] t[85223]) "'")
    }
    if(85309 call _cond_test(85287 call &&(85281 call ! 0)(85286 call isNonNilableClass t[85223])))
    {
      (85307 call compilerError "sync/single types cannot contain non-nilable classes")
    }
    if(85338 call _cond_test(85317 call isGenericType t[85223]))
    {
      (85336 call compilerError "sync/single types cannot contain generic types")
    }
  }
  unknown useNativeSyncVar[85346] "config" "no doc" "param" 1
  function getSyncClassType[85353](arg valType[85351]:_any[170](?)) type : _unknown[43] "private"
  {
    if(85378 call _cond_test(85360 call && useNativeSyncVar[85346](85359 call supportsNativeSyncVar valType[85351])))
    {
      (85367 return(85366 'to unmanaged class from unknown'(85365 call anymanaged _qthreads_synccls[344522](?) valType[85351])))
    }
    {
      (85375 return(85374 'to unmanaged class from unknown'(85373 call anymanaged _synccls[344527](?) valType[85351])))
    }
  }
  function chpl__readXX[85389](arg x[85387]:_any[170](?)) : _unknown[43] "no doc"
  {
    (85392 return x[85387])
  }
  function _syncvar[85613](?).init[85417](arg _mt[85617]:_MT[227], arg this[85615]:_syncvar[85613](?), arg valType[85415]:_any[170](?)) : _unknown[43] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (85422 call ensureFEType valType[85415])
    (85432 call =(85428 call . this[85615] c"valType") valType[85415])
    (85448 call =(85438 call . this[85615] c"wrapped")(85447 'new'(85446 call(85444 call getSyncClassType valType[85415]))))
  }
  function _syncvar[85613](?).init[85459](arg _mt[85621]:_MT[227], arg this[85619]:_syncvar[85613](?), const arg other[85456] :
  _syncvar[85613](?)) : _unknown[43] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (85469 call =(85462 call . this[85619] c"valType")(85466 call . other[85456] c"valType"))
    (85481 call =(85474 call . this[85619] c"wrapped")(85478 call . other[85456] c"wrapped"))
    (85491 call =(85487 call . this[85619] c"isOwned") 0)
  }
  function _syncvar[85613](?).init=[85505](arg _mt[85625]:_MT[227], arg this[85623]:_syncvar[85613](?), const arg other[85502] :
  (85499 call . this[85623] c"valType")) : _unknown[43] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (85514 call(85508 call . this[85623] c"init")(85512 'typeof' other[85502]))
    (85525 call(85520 call . this[85623] c"writeEF") other[85502])
  }
  function _syncvar[85613](?).deinit[85531](arg _mt[85629]:_MT[227], arg this[85627]:_syncvar[85613](?)) : _unknown[43] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    if(85542 call _cond_test(85535 call ==(344551 call . this[85627] c"isOwned") 1))
    {
      (85539 call chpl__delete(344556 call . this[85627] c"wrapped"))
    }
  }
  function _syncvar[85613](?).readThis[85554](arg _mt[85633]:_MT[227], arg this[85631]:_syncvar[85613](?), arg x[85552]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (85576 call compilerError "sync variables cannot currently be read - use writeEF/writeFF instead")
  }
  function _syncvar[85613](?).writeThis[85585](arg _mt[85637]:_MT[227], arg this[85635]:_syncvar[85613](?), arg x[85583]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (85607 call compilerError "sync variables cannot currently be written - apply readFE/readFF() to those variables first")
  }
  sync type _syncvar[85613](?) unknown valType[85398] "type variable" unknown wrapped[85405](85404 call getSyncClassType valType[85398]) unknown isOwned[85410] 1 bool[10]
  function isSyncType[85646](arg t[85643] :
  _syncvar[85613](?)) param : _unknown[43] "no doc"
  {
    (85649 return 1)
  }
  function isSyncType[85658](arg t[85656]:_any[170](?)) param : _unknown[43]
  {
    (85661 return 0)
  }
  function _syncvar[85613](?).readFE[85669](arg _mt[85674]:_MT[227], arg this[85671]:_syncvar[85613](?) :
  _syncvar[85613](?)) : _unknown[43] "method"
  {
    (85682 return(85681 call(85677 call .(344562 call . this[85671] c"wrapped") c"readFE")))
  }
  function _syncvar[85613](?).readFF[85690](arg _mt[85695]:_MT[227], arg this[85692]:_syncvar[85613](?) :
  _syncvar[85613](?)) : _unknown[43] "method"
  {
    (85703 return(85702 call(85698 call .(344567 call . this[85692] c"wrapped") c"readFF")))
  }
  function _syncvar[85613](?).readXX[85711](arg _mt[85716]:_MT[227], arg this[85713]:_syncvar[85613](?) :
  _syncvar[85613](?)) : _unknown[43] "method"
  {
    (85720 call chpl_task_yield)
    (85731 return(85730 call(85726 call .(344572 call . this[85713] c"wrapped") c"readXX")))
  }
  function _syncvar[85613](?).writeEF[85742](arg _mt[85747]:_MT[227], arg this[85744]:_syncvar[85613](?) :
  _syncvar[85613](?), arg x[85739] :
  (344577 call . this[85744] c"valType")) : _unknown[43] "method" "no return value for void"
  {
    (85755 call(85750 call .(344582 call . this[85744] c"wrapped") c"writeEF") x[85739])
  }
  function _syncvar[85613](?).writeFF[85767](arg _mt[85772]:_MT[227], arg this[85769]:_syncvar[85613](?) :
  _syncvar[85613](?), arg x[85764] :
  (344588 call . this[85769] c"valType")) : _unknown[43] "method" "no return value for void"
  {
    (85782 call(85777 call .(344593 call . this[85769] c"wrapped") c"writeFF") x[85764])
  }
  function _syncvar[85613](?).writeXF[85794](arg _mt[85799]:_MT[227], arg this[85796]:_syncvar[85613](?) :
  _syncvar[85613](?), arg x[85791] :
  (344599 call . this[85796] c"valType")) : _unknown[43] "method" "no return value for void"
  {
    (85809 call(85804 call .(344604 call . this[85796] c"wrapped") c"writeXF") x[85791])
  }
  function _syncvar[85613](?).reset[85817](arg _mt[85822]:_MT[227], arg this[85819]:_syncvar[85613](?) :
  _syncvar[85613](?)) : _unknown[43] "method" "no return value for void"
  {
    (85831 call(85827 call .(344610 call . this[85819] c"wrapped") c"reset"))
  }
  function _syncvar[85613](?).isFull[85839](arg _mt[85844]:_MT[227], arg this[85841]:_syncvar[85613](?) :
  _syncvar[85613](?)) : _unknown[43] "method" "no parens"
  {
    (85852 return(85849 call .(344615 call . this[85841] c"wrapped") c"isFull"))
  }
  function =[85867](ref arg lhs[85864] :
  (85863 call _syncvar[85613](?) unknown t[85860]), arg rhs[85870] :
  t[85860]) : _unknown[43] "assignop" "no return value for void"
  {
    (85882 call(85877 call .(85874 call . lhs[85864] c"wrapped") c"writeEF") rhs[85870])
  }
  function +=[85897](ref arg lhs[85894] :
  (85893 call _syncvar[85613](?) unknown t[85890]), arg rhs[85900] :
  t[85890]) : _unknown[43] "assignop" "no return value for void"
  {
    (85923 call(85907 call .(85904 call . lhs[85894] c"wrapped") c"writeEF")(85920 call +(85918 call(85914 call .(85911 call . lhs[85894] c"wrapped") c"readFE")) rhs[85900]))
  }
  function -=[85938](ref arg lhs[85935] :
  (85934 call _syncvar[85613](?) unknown t[85931]), arg rhs[85941] :
  t[85931]) : _unknown[43] "assignop" "no return value for void"
  {
    (85964 call(85948 call .(85945 call . lhs[85935] c"wrapped") c"writeEF")(85961 call -(85959 call(85955 call .(85952 call . lhs[85935] c"wrapped") c"readFE")) rhs[85941]))
  }
  function *=[85979](ref arg lhs[85976] :
  (85975 call _syncvar[85613](?) unknown t[85972]), arg rhs[85982] :
  t[85972]) : _unknown[43] "assignop" "no return value for void"
  {
    (86005 call(85989 call .(85986 call . lhs[85976] c"wrapped") c"writeEF")(86002 call *(86000 call(85996 call .(85993 call . lhs[85976] c"wrapped") c"readFE")) rhs[85982]))
  }
  function /=[86020](ref arg lhs[86017] :
  (86016 call _syncvar[85613](?) unknown t[86013]), arg rhs[86023] :
  t[86013]) : _unknown[43] "assignop" "no return value for void"
  {
    (86046 call(86030 call .(86027 call . lhs[86017] c"wrapped") c"writeEF")(86043 call /(86041 call(86037 call .(86034 call . lhs[86017] c"wrapped") c"readFE")) rhs[86023]))
  }
  function %=[86061](ref arg lhs[86058] :
  (86057 call _syncvar[85613](?) unknown t[86054]), arg rhs[86064] :
  t[86054]) : _unknown[43] "assignop" "no return value for void"
  {
    (86087 call(86071 call .(86068 call . lhs[86058] c"wrapped") c"writeEF")(86084 call %(86082 call(86078 call .(86075 call . lhs[86058] c"wrapped") c"readFE")) rhs[86064]))
  }
  function **=[86102](ref arg lhs[86099] :
  (86098 call _syncvar[85613](?) unknown t[86095]), arg rhs[86105] :
  t[86095]) : _unknown[43] "assignop" "no return value for void"
  {
    (86128 call(86112 call .(86109 call . lhs[86099] c"wrapped") c"writeEF")(86125 call **(86123 call(86119 call .(86116 call . lhs[86099] c"wrapped") c"readFE")) rhs[86105]))
  }
  function &=[86143](ref arg lhs[86140] :
  (86139 call _syncvar[85613](?) unknown t[86136]), arg rhs[86146] :
  t[86136]) : _unknown[43] "assignop" "no return value for void"
  {
    (86169 call(86153 call .(86150 call . lhs[86140] c"wrapped") c"writeEF")(86166 call &(86164 call(86160 call .(86157 call . lhs[86140] c"wrapped") c"readFE")) rhs[86146]))
  }
  function |=[86184](ref arg lhs[86181] :
  (86180 call _syncvar[85613](?) unknown t[86177]), arg rhs[86187] :
  t[86177]) : _unknown[43] "assignop" "no return value for void"
  {
    (86210 call(86194 call .(86191 call . lhs[86181] c"wrapped") c"writeEF")(86207 call |(86205 call(86201 call .(86198 call . lhs[86181] c"wrapped") c"readFE")) rhs[86187]))
  }
  function ^=[86225](ref arg lhs[86222] :
  (86221 call _syncvar[85613](?) unknown t[86218]), arg rhs[86228] :
  t[86218]) : _unknown[43] "assignop" "no return value for void"
  {
    (86251 call(86235 call .(86232 call . lhs[86222] c"wrapped") c"writeEF")(86248 call ^(86246 call(86242 call .(86239 call . lhs[86222] c"wrapped") c"readFE")) rhs[86228]))
  }
  function >>=[86266](ref arg lhs[86263] :
  (86262 call _syncvar[85613](?) unknown t[86259]), arg rhs[86269] :
  t[86259]) : _unknown[43] "assignop" "no return value for void"
  {
    (86292 call(86276 call .(86273 call . lhs[86263] c"wrapped") c"writeEF")(86289 call >>(86287 call(86283 call .(86280 call . lhs[86263] c"wrapped") c"readFE")) rhs[86269]))
  }
  function <<=[86307](ref arg lhs[86304] :
  (86303 call _syncvar[85613](?) unknown t[86300]), arg rhs[86310] :
  t[86300]) : _unknown[43] "assignop" "no return value for void"
  {
    (86333 call(86317 call .(86314 call . lhs[86304] c"wrapped") c"writeEF")(86330 call <<(86328 call(86324 call .(86321 call . lhs[86304] c"wrapped") c"readFE")) rhs[86310]))
  }
  function chpl__initCopy[86348](ref arg sv[86345] :
  (86344 call _syncvar[85613](?) unknown t[86341])) : _unknown[43] "init copy fn"
  {
    (86356 return(86355 call(86351 call . sv[86345] c"readFE")))
  }
  function chpl__autoCopy[86367](const  ref arg rhs[86364] :
  _syncvar[85613](?)) : _unknown[43] "auto copy fn" "no doc"
  {
    (86374 return(86373 'new'(86372 call _syncvar[85613](?) rhs[86364])))
  }
  function chpl__maybeAutoDestroyed[86389](arg x[86386] :
  (86385 call _syncvar[85613](?) unknown t[86382])) param : _unknown[43] "inline"
  {
    (86392 return 1)
  }
  function chpl__autoDestroy[86406](arg x[86403] :
  (86402 call _syncvar[85613](?) ?[249])) : _unknown[43] "inline" "no return value for void"
  {
    if(86423 call _cond_test(86413 call ==(86409 call . x[86403] c"isOwned") 1))
    {
      (86420 call chpl__delete(86416 call . x[86403] c"wrapped"))
    }
  }
  function chpl__readXX[86440](const  ref arg x[86437] :
  (86436 call _syncvar[85613](?) ?[249])) : _unknown[43] "no doc"
  {
    (86448 return(86447 call(86443 call . x[86437] c"readXX")))
  }
  function <=>[86459](arg lhs[86456] :
  _syncvar[85613](?), ref arg rhs[86461]:_any[170](?)) : _unknown[43] "no return value for void"
  {
    const tmp[86464] "const" lhs[86456]
    (86470 call = lhs[86456] rhs[86461])
    (86475 call = rhs[86461] tmp[86464])
  }
  function <=>[86484](ref arg lhs[86482]:_any[170](?), arg rhs[86487] :
  _syncvar[85613](?)) : _unknown[43] "no return value for void"
  {
    const tmp[86491] "const" lhs[86482]
    (86497 call = lhs[86482] rhs[86487])
    (86502 call = rhs[86487] tmp[86491])
  }
  function <=>[86513](arg lhs[86510] :
  _syncvar[85613](?), arg rhs[86516] :
  _syncvar[85613](?)) : _unknown[43] "no return value for void"
  {
    const tmp[86520] "const" lhs[86510]
    (86526 call = lhs[86510] rhs[86516])
    (86531 call = rhs[86516] tmp[86520])
  }
  function _synccls[86999](?).init[86552](arg _mt[87003]:_MT[227], arg this[87001]:_synccls[86999](?), arg valType[86550]:_any[170](?)) : _unknown[43] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (86559 call =(86555 call . this[87001] c"valType") valType[86550])
    (86568 call(86564 call . this[87001] c"complete"))
    (86573 call chpl_sync_initAux(344716 call . this[87001] c"syncAux"))
  }
  function _synccls[86999](?).deinit[86579](arg _mt[87007]:_MT[227], arg this[87005]:_synccls[86999](?)) : _unknown[43] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (86584 call chpl_sync_destroyAux(344721 call . this[87005] c"syncAux"))
  }
  function _synccls[86999](?).readFE[86591](arg _mt[87011]:_MT[227], arg this[87009]:_synccls[86999](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[86594](344726 call . this[87009] c"valType")
    {
      const tmp[86635] "const" "temp"
      (86636 'move' tmp[86635](86633 'deref'(86632 '_wide_get_locale' this[87009])))
      {
        unknown localRet[86600](344732 call . this[87009] c"valType")
        (86606 call chpl_rmem_consist_release)
        (86611 call chpl_sync_waitFullAndLock(344737 call . this[87009] c"syncAux"))
        (86615 call = localRet[86600](344743 call . this[87009] c"value"))
        (86621 call chpl_sync_markAndSignalEmpty(344748 call . this[87009] c"syncAux"))
        (86625 call chpl_rmem_consist_acquire)
        (86629 call = ret[86594] localRet[86600])
      }
    }
    (86641 return ret[86594])
  }
  function _synccls[86999](?).readFF[86647](arg _mt[87015]:_MT[227], arg this[87013]:_synccls[86999](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[86650](344756 call . this[87013] c"valType")
    {
      const tmp[86691] "const" "temp"
      (86692 'move' tmp[86691](86689 'deref'(86688 '_wide_get_locale' this[87013])))
      {
        unknown localRet[86656](344762 call . this[87013] c"valType")
        (86662 call chpl_rmem_consist_release)
        (86667 call chpl_sync_waitFullAndLock(344767 call . this[87013] c"syncAux"))
        (86671 call = localRet[86656](344773 call . this[87013] c"value"))
        (86677 call chpl_sync_markAndSignalFull(344778 call . this[87013] c"syncAux"))
        (86681 call chpl_rmem_consist_acquire)
        (86685 call = ret[86650] localRet[86656])
      }
    }
    (86697 return ret[86650])
  }
  function _synccls[86999](?).readXX[86703](arg _mt[87019]:_MT[227], arg this[87017]:_synccls[86999](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[86706](344786 call . this[87017] c"valType")
    {
      const tmp[86747] "const" "temp"
      (86748 'move' tmp[86747](86745 'deref'(86744 '_wide_get_locale' this[87017])))
      {
        unknown localRet[86712](344792 call . this[87017] c"valType")
        (86718 call chpl_rmem_consist_release)
        (86723 call chpl_sync_lock(344797 call . this[87017] c"syncAux"))
        (86727 call = localRet[86712](344803 call . this[87017] c"value"))
        (86733 call chpl_sync_unlock(344808 call . this[87017] c"syncAux"))
        (86737 call chpl_rmem_consist_acquire)
        (86741 call = ret[86706] localRet[86712])
      }
    }
    (86753 return ret[86706])
  }
  function _synccls[86999](?).writeEF[86763](arg _mt[87023]:_MT[227], arg this[87021]:_synccls[86999](?), arg val[86760] :
  (344816 call . this[87021] c"valType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86799] "const" "temp"
      (86800 'move' tmp[86799](86797 'deref'(86796 '_wide_get_locale' this[87021])))
      {
        (86774 call chpl_rmem_consist_release)
        (86780 call chpl_sync_waitEmptyAndLock(344824 call . this[87021] c"syncAux"))
        (86784 call =(344829 call . this[87021] c"value") val[86760])
        (86790 call chpl_sync_markAndSignalFull(344835 call . this[87021] c"syncAux"))
        (86794 call chpl_rmem_consist_acquire)
      }
    }
  }
  {
    (86769 call <(86766 'lifetime_of' this[87021])(86768 'lifetime_of' val[86760]))
  }
  function _synccls[86999](?).writeFF[86814](arg _mt[87027]:_MT[227], arg this[87025]:_synccls[86999](?), arg val[86811] :
  (344840 call . this[87025] c"valType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86850] "const" "temp"
      (86851 'move' tmp[86850](86848 'deref'(86847 '_wide_get_locale' this[87025])))
      {
        (86825 call chpl_rmem_consist_release)
        (86831 call chpl_sync_waitFullAndLock(344848 call . this[87025] c"syncAux"))
        (86835 call =(344853 call . this[87025] c"value") val[86811])
        (86841 call chpl_sync_markAndSignalFull(344859 call . this[87025] c"syncAux"))
        (86845 call chpl_rmem_consist_acquire)
      }
    }
  }
  {
    (86820 call <(86817 'lifetime_of' this[87025])(86819 'lifetime_of' val[86811]))
  }
  function _synccls[86999](?).writeXF[86865](arg _mt[87031]:_MT[227], arg this[87029]:_synccls[86999](?), arg val[86862] :
  (344864 call . this[87029] c"valType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86901] "const" "temp"
      (86902 'move' tmp[86901](86899 'deref'(86898 '_wide_get_locale' this[87029])))
      {
        (86876 call chpl_rmem_consist_release)
        (86882 call chpl_sync_lock(344872 call . this[87029] c"syncAux"))
        (86886 call =(344877 call . this[87029] c"value") val[86862])
        (86892 call chpl_sync_markAndSignalFull(344883 call . this[87029] c"syncAux"))
        (86896 call chpl_rmem_consist_acquire)
      }
    }
  }
  {
    (86871 call <(86868 'lifetime_of' this[87029])(86870 'lifetime_of' val[86862]))
  }
  function _synccls[86999](?).reset[86912](arg _mt[87035]:_MT[227], arg this[87033]:_synccls[86999](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[86946] "const" "temp"
      (86947 'move' tmp[86946](86944 'deref'(86943 '_wide_get_locale' this[87033])))
      {
        const defaultValue[86916] "const"(344889 call . this[87033] c"valType")
        (86922 call chpl_rmem_consist_release)
        (86927 call chpl_sync_lock(344894 call . this[87033] c"syncAux"))
        (86931 call =(344899 call . this[87033] c"value") defaultValue[86916])
        (86937 call chpl_sync_markAndSignalEmpty(344905 call . this[87033] c"syncAux"))
        (86941 call chpl_rmem_consist_acquire)
      }
    }
  }
  function _synccls[86999](?).isFull[86956](arg _mt[87039]:_MT[227], arg this[87037]:_synccls[86999](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown b[86959] bool[10]
    {
      const tmp[86988] "const" "temp"
      (86989 'move' tmp[86988](86986 'deref'(86985 '_wide_get_locale' this[87037])))
      {
        (86966 call chpl_rmem_consist_release)
        (86978 call = b[86959](86977 call chpl_sync_isFull(86974 call c_ptrTo(344912 call . this[87037] c"value"))(344917 call . this[87037] c"syncAux")))
        (86983 call chpl_rmem_consist_acquire)
      }
    }
    (86994 return b[86959])
  }
  type _synccls[86999](?) val super[330989]:object[253] "super class" unknown valType[86537] "type variable" unknown value[86541] valType[86537] unknown syncAux[86545] chpl_sync_aux_t[88400]
  type anymanaged _synccls[344527](?)
  function _qthreads_synccls[87458](?).init[87054](arg _mt[87462]:_MT[227], arg this[87460]:_qthreads_synccls[87458](?), arg valType[87052]:_any[170](?)) : _unknown[43] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (87061 call =(87057 call . this[87460] c"valType") valType[87052])
    (87070 call(87066 call . this[87460] c"complete"))
    (87079 call qthread_purge_to(344929 call . this[87460] c"alignedValue")(87078 call defaultOfAlignedT valType[87052]))
  }
  function _qthreads_synccls[87458](?).deinit[87085](arg _mt[87466]:_MT[227], arg this[87464]:_qthreads_synccls[87458](?)) : _unknown[43] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (87090 call qthread_fill(344935 call . this[87464] c"alignedValue"))
  }
  function _qthreads_synccls[87458](?).readFE[87097](arg _mt[87470]:_MT[227], arg this[87468]:_qthreads_synccls[87458](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[87100](344940 call . this[87468] c"valType")
    {
      const tmp[87135] "const" "temp"
      (87136 'move' tmp[87135](87133 'deref'(87132 '_wide_get_locale' this[87468])))
      {
        unknown alignedLocalRet[87106] aligned_t[88784]
        (87112 call chpl_rmem_consist_release)
        (87118 call qthread_readFE alignedLocalRet[87106](344948 call . this[87468] c"alignedValue"))
        (87122 call chpl_rmem_consist_acquire)
        (87129 call = ret[87100](87127 call _cast(344955 call . this[87468] c"valType") alignedLocalRet[87106]))
      }
    }
    (87141 return ret[87100])
  }
  function _qthreads_synccls[87458](?).readFF[87147](arg _mt[87474]:_MT[227], arg this[87472]:_qthreads_synccls[87458](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[87150](344961 call . this[87472] c"valType")
    {
      const tmp[87185] "const" "temp"
      (87186 'move' tmp[87185](87183 'deref'(87182 '_wide_get_locale' this[87472])))
      {
        unknown alignedLocalRet[87156] aligned_t[88784]
        (87162 call chpl_rmem_consist_release)
        (87168 call qthread_readFF alignedLocalRet[87156](344969 call . this[87472] c"alignedValue"))
        (87172 call chpl_rmem_consist_acquire)
        (87179 call = ret[87150](87177 call _cast(344976 call . this[87472] c"valType") alignedLocalRet[87156]))
      }
    }
    (87191 return ret[87150])
  }
  function _qthreads_synccls[87458](?).readXX[87197](arg _mt[87478]:_MT[227], arg this[87476]:_qthreads_synccls[87458](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[87200](344982 call . this[87476] c"valType")
    {
      const tmp[87235] "const" "temp"
      (87236 'move' tmp[87235](87233 'deref'(87232 '_wide_get_locale' this[87476])))
      {
        unknown alignedLocalRet[87206] aligned_t[88784]
        (87212 call chpl_rmem_consist_release)
        (87218 call qthread_readXX alignedLocalRet[87206](344990 call . this[87476] c"alignedValue"))
        (87222 call chpl_rmem_consist_acquire)
        (87229 call = ret[87200](87227 call _cast(344997 call . this[87476] c"valType") alignedLocalRet[87206]))
      }
    }
    (87241 return ret[87200])
  }
  function _qthreads_synccls[87458](?).writeEF[87251](arg _mt[87482]:_MT[227], arg this[87480]:_qthreads_synccls[87458](?), arg val[87248] :
  (345003 call . this[87480] c"valType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[87281] "const" "temp"
      (87282 'move' tmp[87281](87279 'deref'(87278 '_wide_get_locale' this[87480])))
      {
        (87262 call chpl_rmem_consist_release)
        (87272 call qthread_writeEF(345011 call . this[87480] c"alignedValue")(87270 call _cast aligned_t[88784] val[87248]))
        (87276 call chpl_rmem_consist_acquire)
      }
    }
  }
  {
    (87257 call <(87254 'lifetime_of' this[87480])(87256 'lifetime_of' val[87248]))
  }
  function _qthreads_synccls[87458](?).writeFF[87296](arg _mt[87486]:_MT[227], arg this[87484]:_qthreads_synccls[87458](?), arg val[87293] :
  (345018 call . this[87484] c"valType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[87326] "const" "temp"
      (87327 'move' tmp[87326](87324 'deref'(87323 '_wide_get_locale' this[87484])))
      {
        (87307 call chpl_rmem_consist_release)
        (87317 call qthread_writeFF(345026 call . this[87484] c"alignedValue")(87315 call _cast aligned_t[88784] val[87293]))
        (87321 call chpl_rmem_consist_acquire)
      }
    }
  }
  {
    (87302 call <(87299 'lifetime_of' this[87484])(87301 'lifetime_of' val[87293]))
  }
  function _qthreads_synccls[87458](?).writeXF[87341](arg _mt[87490]:_MT[227], arg this[87488]:_qthreads_synccls[87458](?), arg val[87338] :
  (345033 call . this[87488] c"valType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[87371] "const" "temp"
      (87372 'move' tmp[87371](87369 'deref'(87368 '_wide_get_locale' this[87488])))
      {
        (87352 call chpl_rmem_consist_release)
        (87362 call qthread_writeF(345041 call . this[87488] c"alignedValue")(87360 call _cast aligned_t[88784] val[87338]))
        (87366 call chpl_rmem_consist_acquire)
      }
    }
  }
  {
    (87347 call <(87344 'lifetime_of' this[87488])(87346 'lifetime_of' val[87338]))
  }
  function _qthreads_synccls[87458](?).reset[87382](arg _mt[87494]:_MT[227], arg this[87492]:_qthreads_synccls[87458](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[87406] "const" "temp"
      (87407 'move' tmp[87406](87404 'deref'(87403 '_wide_get_locale' this[87492])))
      {
        (87387 call chpl_rmem_consist_release)
        (87397 call qthread_purge_to(345049 call . this[87492] c"alignedValue")(87396 call defaultOfAlignedT(345054 call . this[87492] c"valType")))
        (87401 call chpl_rmem_consist_acquire)
      }
    }
  }
  function _qthreads_synccls[87458](?).isFull[87416](arg _mt[87498]:_MT[227], arg this[87496]:_qthreads_synccls[87458](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown b[87419] bool[10]
    {
      const tmp[87447] "const" "temp"
      (87448 'move' tmp[87447](87445 'deref'(87444 '_wide_get_locale' this[87496])))
      {
        (87426 call chpl_rmem_consist_release)
        (87437 call = b[87419](87435 call _cast bool[10](87433 call qthread_feb_status(345061 call . this[87496] c"alignedValue"))))
        (87442 call chpl_rmem_consist_acquire)
      }
    }
    (87453 return b[87419])
  }
  type _qthreads_synccls[87458](?) val super[330991]:object[253] "super class" unknown valType[87043] "type variable" unknown alignedValue[87047] aligned_t[88784]
  type anymanaged _qthreads_synccls[344522](?)
  function isSyncValue[87507](arg x[87504] :
  _syncvar[85613](?)) param : _unknown[43] "no doc"
  {
    (87510 return 1)
  }
  function isSyncValue[87519](arg x[87517]:_any[170](?)) param : _unknown[43] "no doc"
  {
    (87522 return 0)
  }
  function _singlevar[87725](?).init[87548](arg _mt[87729]:_MT[227], arg this[87727]:_singlevar[87725](?), arg valType[87546]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (87553 call ensureFEType valType[87546])
    (87561 call =(87557 call . this[87727] c"valType") valType[87546])
    (87571 call =(345076 call . this[87727] c"wrapped")(87570 'new'(87569 'to unmanaged class from unknown'(87568 call anymanaged _singlecls[345067](?) valType[87546]))))
  }
  function _singlevar[87725](?).init[87582](arg _mt[87733]:_MT[227], arg this[87731]:_singlevar[87725](?), const arg other[87579] :
  _singlevar[87725](?)) : _unknown[43] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (87592 call =(87585 call . this[87731] c"valType")(87589 call . other[87579] c"valType"))
    (87601 call =(345086 call . this[87731] c"wrapped")(87598 call . other[87579] c"wrapped"))
    (87606 call =(345092 call . this[87731] c"isOwned") 0)
  }
  function _singlevar[87725](?).init=[87621](arg _mt[87737]:_MT[227], arg this[87735]:_singlevar[87725](?), const arg other[87618] :
  (87615 call .(87614 'typeof' this[87735]) c"valType")) : _unknown[43] "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    (87630 call(87624 call . this[87735] c"init")(87628 'typeof' other[87618]))
    (87639 call(87634 call . this[87735] c"writeEF") other[87618])
  }
  function _singlevar[87725](?).deinit[87645](arg _mt[87741]:_MT[227], arg this[87739]:_singlevar[87725](?)) : _unknown[43] "destructor" "dont disable remote value forwarding" "method" "primary method" "no return value for void"
  {
    if(87656 call _cond_test(87649 call ==(345102 call . this[87739] c"isOwned") 1))
    {
      (87653 call chpl__delete(345107 call . this[87739] c"wrapped"))
    }
  }
  function _singlevar[87725](?).readThis[87668](arg _mt[87745]:_MT[227], arg this[87743]:_singlevar[87725](?), arg x[87666]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (87688 call compilerError "single variables cannot currently be read - use writeEF instead")
  }
  function _singlevar[87725](?).writeThis[87697](arg _mt[87749]:_MT[227], arg this[87747]:_singlevar[87725](?), arg x[87695]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (87719 call compilerError "single variables cannot currently be written - apply readFF() to those variables first")
  }
  single type _singlevar[87725](?) unknown valType[87528] "type variable" unknown wrapped[87536](87535 'to unmanaged class from unknown'(87534 call anymanaged _singlecls[345067](?) valType[87528])) unknown isOwned[87541] 1 bool[10]
  function isSingleType[87758](arg t[87755] :
  _singlevar[87725](?)) param : _unknown[43] "no doc"
  {
    (87761 return 1)
  }
  function isSingleType[87770](arg t[87768]:_any[170](?)) param : _unknown[43]
  {
    (87773 return 0)
  }
  function _singlevar[87725](?).readFF[87781](arg _mt[87786]:_MT[227], arg this[87783]:_singlevar[87725](?) :
  _singlevar[87725](?)) : _unknown[43] "method"
  {
    (87794 return(87793 call(87789 call .(345113 call . this[87783] c"wrapped") c"readFF")))
  }
  function _singlevar[87725](?).readXX[87802](arg _mt[87807]:_MT[227], arg this[87804]:_singlevar[87725](?) :
  _singlevar[87725](?)) : _unknown[43] "method"
  {
    (87811 call chpl_task_yield)
    (87820 return(87819 call(87815 call .(345118 call . this[87804] c"wrapped") c"readXX")))
  }
  function _singlevar[87725](?).writeEF[87831](arg _mt[87836]:_MT[227], arg this[87833]:_singlevar[87725](?) :
  _singlevar[87725](?), arg x[87828] :
  (345123 call . this[87833] c"valType")) : _unknown[43] "method" "no return value for void"
  {
    (87844 call(87839 call .(345128 call . this[87833] c"wrapped") c"writeEF") x[87828])
  }
  function _singlevar[87725](?).isFull[87852](arg _mt[87857]:_MT[227], arg this[87854]:_singlevar[87725](?) :
  _singlevar[87725](?)) : _unknown[43] "method" "no parens"
  {
    (87863 return(87860 call .(345134 call . this[87854] c"wrapped") c"isFull"))
  }
  function =[87878](ref arg lhs[87875] :
  (87874 call _singlevar[87725](?) unknown t[87871]), arg rhs[87881] :
  t[87871]) : _unknown[43] "assignop" "no return value for void"
  {
    (87893 call(87888 call .(87885 call . lhs[87875] c"wrapped") c"writeEF") rhs[87881])
  }
  function chpl__initCopy[87908](ref arg sv[87905] :
  (87904 call _singlevar[87725](?) unknown t[87901])) : _unknown[43] "init copy fn"
  {
    (87916 return(87915 call(87911 call . sv[87905] c"readFF")))
  }
  function chpl__autoCopy[87927](const  ref arg rhs[87924] :
  _singlevar[87725](?)) : _unknown[43] "auto copy fn" "no doc"
  {
    (87934 return(87933 'new'(87932 call _singlevar[87725](?) rhs[87924])))
  }
  function chpl__maybeAutoDestroyed[87949](arg x[87946] :
  (87945 call _singlevar[87725](?) unknown t[87942])) param : _unknown[43] "inline"
  {
    (87952 return 1)
  }
  function chpl__autoDestroy[87966](arg x[87963] :
  (87962 call _singlevar[87725](?) ?[249])) : _unknown[43] "inline" "no return value for void"
  {
    if(87983 call _cond_test(87973 call ==(87969 call . x[87963] c"isOwned") 1))
    {
      (87980 call chpl__delete(87976 call . x[87963] c"wrapped"))
    }
  }
  function chpl__readXX[88000](const  ref arg x[87997] :
  (87996 call _singlevar[87725](?) ?[249])) : _unknown[43] "no doc"
  {
    (88008 return(88007 call(88003 call . x[87997] c"readXX")))
  }
  function _singlecls[88333](?).init[88029](arg _mt[88337]:_MT[227], arg this[88335]:_singlecls[88333](?), arg valType[88027]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    (88036 call =(88032 call . this[88335] c"valType") valType[88027])
    (88045 call(88041 call . this[88335] c"complete"))
    (88050 call chpl_single_initAux(345161 call . this[88335] c"singleAux"))
  }
  function _singlecls[88333](?).deinit[88056](arg _mt[88341]:_MT[227], arg this[88339]:_singlecls[88333](?)) : _unknown[43] "destructor" "method" "primary method" "no return value for void"
  {
    (88061 call chpl_single_destroyAux(345166 call . this[88339] c"singleAux"))
  }
  function _singlecls[88333](?).readFF[88068](arg _mt[88345]:_MT[227], arg this[88343]:_singlecls[88333](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[88071](345171 call . this[88343] c"valType")
    {
      const tmp[88127] "const" "temp"
      (88128 'move' tmp[88127](88125 'deref'(88124 '_wide_get_locale' this[88343])))
      {
        unknown localRet[88077](345177 call . this[88343] c"valType")
        (88083 call chpl_rmem_consist_release)
        if(88110 call _cond_test(88086 call . this[88343] c"isFull"))
        {
          (88091 call = localRet[88077](345184 call . this[88343] c"value"))
        }
        {
          (88097 call chpl_single_waitFullAndLock(345189 call . this[88343] c"singleAux"))
          (88102 call = localRet[88077](345195 call . this[88343] c"value"))
          (88108 call chpl_single_markAndSignalFull(345200 call . this[88343] c"singleAux"))
        }
        (88117 call chpl_rmem_consist_acquire)
        (88121 call = ret[88071] localRet[88077])
      }
    }
    (88133 return ret[88071])
  }
  function _singlecls[88333](?).readXX[88139](arg _mt[88349]:_MT[227], arg this[88347]:_singlecls[88333](?)) : _unknown[43] "method" "primary method"
  {
    unknown ret[88142](345208 call . this[88347] c"valType")
    {
      const tmp[88198] "const" "temp"
      (88199 'move' tmp[88198](88196 'deref'(88195 '_wide_get_locale' this[88347])))
      {
        unknown localRet[88148](345214 call . this[88347] c"valType")
        (88154 call chpl_rmem_consist_release)
        if(88181 call _cond_test(88157 call . this[88347] c"isFull"))
        {
          (88162 call = localRet[88148](345221 call . this[88347] c"value"))
        }
        {
          (88168 call chpl_single_lock(345226 call . this[88347] c"singleAux"))
          (88173 call = localRet[88148](345232 call . this[88347] c"value"))
          (88179 call chpl_single_unlock(345237 call . this[88347] c"singleAux"))
        }
        (88188 call chpl_rmem_consist_acquire)
        (88192 call = ret[88142] localRet[88148])
      }
    }
    (88204 return ret[88142])
  }
  function _singlecls[88333](?).writeEF[88214](arg _mt[88353]:_MT[227], arg this[88351]:_singlecls[88333](?), arg val[88211] :
  (345245 call . this[88351] c"valType")) : _unknown[43] "method" "primary method" "no return value for void"
  {
    {
      const tmp[88279] "const" "temp"
      (88280 'move' tmp[88279](88277 'deref'(88276 '_wide_get_locale' this[88351])))
      {
        (88225 call chpl_rmem_consist_release)
        (88231 call chpl_single_lock(345253 call . this[88351] c"singleAux"))
        if(88257 call _cond_test(88234 call . this[88351] c"isFull"))
        {
          (88255 call halt "single var already defined")
        }
        (88264 call =(345259 call . this[88351] c"value") val[88211])
        (88270 call chpl_single_markAndSignalFull(345265 call . this[88351] c"singleAux"))
        (88274 call chpl_rmem_consist_acquire)
      }
    }
  }
  {
    (88220 call <(88217 'lifetime_of' this[88351])(88219 'lifetime_of' val[88211]))
  }
  function _singlecls[88333](?).isFull[88290](arg _mt[88357]:_MT[227], arg this[88355]:_singlecls[88333](?)) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown b[88293] bool[10]
    {
      const tmp[88322] "const" "temp"
      (88323 'move' tmp[88322](88320 'deref'(88319 '_wide_get_locale' this[88355])))
      {
        (88300 call chpl_rmem_consist_release)
        (88312 call = b[88293](88311 call chpl_single_isFull(88308 call c_ptrTo(345272 call . this[88355] c"value"))(345277 call . this[88355] c"singleAux")))
        (88317 call chpl_rmem_consist_acquire)
      }
    }
    (88328 return b[88293])
  }
  type _singlecls[88333](?) val super[330993]:object[253] "super class" unknown valType[88014] "type variable" unknown value[88018] valType[88014] unknown singleAux[88022] chpl_single_aux_t[88503]
  type anymanaged _singlecls[345067](?)
  function isSingleValue[88366](arg x[88363] :
  _singlevar[87725](?)) param : _unknown[43] "no doc"
  {
    (88369 return 1)
  }
  function isSingleValue[88378](arg x[88376]:_any[170](?)) param : _unknown[43] "no doc"
  {
    (88381 return 0)
  }
  (329347 'used modules list'(85143 'use' ChapelStandard[19734])(85148 'use' AlignedTSupport[88779])(85152 'use' MemConsistency[179748])(85156 'use' SyncVarRuntimeSupport[88388]))
}