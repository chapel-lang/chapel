AST dump for ReplicatedDist after pass expandExternArrayCalls.
Module use list: 

{
  (328394 'use' ChapelStandard)
  unknown traceReplicatedDist[324281] "config" "param" 0
  type Replicated[324310] unknown targetLocDom[324296](324294 call chpl__buildDomainRuntimeType defaultDist(324291 'typeof'(324288 call . here c"id"))) const targetLocales[324306] "const"(324304 call chpl__buildArrayRuntimeType(324302 call chpl__ensureDomainExpr targetLocDom) locale[26]) BaseDist
  function _unknown[43].init[324325](arg _mt[324351]:_MT[227], arg this[324348] :
  Replicated, arg targetLocales[324321] :
  (324317 call chpl__buildArrayRuntimeType nil[38] locale[26]) =
  Locales, arg purposeMessage[324344] :
  string[24] =
  "used to create a Replicated") : _unknown[43] "method"
  {
    (324358 call(324354 call . this c"complete"))
    {
      unknown _indexOfInterest[324392] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[324393] "expr temp" "temp"
      (324402 'move' _iterator[324393](324400 call _getIterator targetLocales))
      Defer
      {
        {
          (324418 call _freeIterator _iterator[324393])
        }
      }
      { scopeless type
        (324407 'move' _indexOfInterest[324392](324404 call iteratorIndex _iterator[324393]))
      }
      ForLoop
      {
        unknown loc[324411] "index var" "insert auto destroy"
        (324413 'move' loc[324411] _indexOfInterest[324392])
        {
          (324375 call(324367 call .(324364 call . this c"targetLocDom") c"add")(324371 call . loc c"id"))
          (324389 call =(324387 call(324379 call . this c"targetLocales")(324383 call . loc c"id")) loc)
        }
        label _continueLabel[324397]
        _indexOfInterest[324392]
        _iterator[324393]
      }
      label _breakLabel[324398]
    }
    if(324447 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (324445 call writeln "Replicated initializer over " targetLocales)
      }
    }
  }
  function _unknown[43].dsiEqualDMaps[324464](arg _mt[324469]:_MT[227], arg this[324466] :
  Replicated, arg that[324461] :
  (324460 call Replicated ?[249])) : _unknown[43] "method"
  {
    (324484 return(324483 call(324475 call .(324472 call . this c"targetLocales") c"equals")(324479 call . that c"targetLocales")))
  }
  function _unknown[43].dsiEqualDMaps[324494](arg _mt[324499]:_MT[227], arg this[324496] :
  Replicated, arg that[324492]:_any[170](?)) param : _unknown[43] "method"
  {
    (324502 return 0)
  }
  function _unknown[43].dsiDestroyDist[324510](arg _mt[324515]:_MT[227], arg this[324512] :
  Replicated) : _unknown[43] "method" "method overrides"
  {
  }
  function _unknown[43].dsiSupportsPrivatization[324523](arg _mt[324528]:_MT[227], arg this[324525] :
  Replicated) param : _unknown[43] "method"
  {
    { scopeless
      (324531 return 1)
    }
  }
  function _unknown[43].dsiGetPrivatizeData[324539](arg _mt[324544]:_MT[227], arg this[324541] :
  Replicated) : _unknown[43] "method"
  {
    if(324567 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (324565 call writeln "Replicated.dsiGetPrivatizeData")
      }
    }
    (324574 return 0)
  }
  function _unknown[43].dsiPrivatize[324583](arg _mt[324588]:_MT[227], arg this[324585] :
  Replicated, arg privatizeData[324581]:_any[170](?)) : _unknown[43] "method"
  {
    if(324612 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (324610 call writeln "Replicated.dsiPrivatize on " here)
      }
    }
    const otherTargetLocales[324622] "const"(324619 call . this c"targetLocales")
    const privDom[324629] "const"(324626 call . otherTargetLocales c"_dom")
    const privTargetLocales[324640] "const" otherTargetLocales(324637 call chpl__buildArrayRuntimeType(324635 call chpl__ensureDomainExpr privDom) locale[26])
    (324665 return(324664 'new'(324663 'to unmanaged class from unknown'(324662 call Replicated privTargetLocales "used during privatization"))))
  }
  type ReplicatedDom[324802] const dist[324674] "const"(324673 'to unmanaged class from unknown' Replicated) unknown domRep[324684](324682 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable) unknown localDoms[324703](324701 call chpl__buildArrayRuntimeType(324699 call chpl__ensureDomainExpr(324688 call . dist c"targetLocDom"))(324698 'to unmanaged class from unknown'(324697 call LocReplicatedDom rank idxType stridable))) function ReplicatedDom[324802].numReplicands[324708](arg _mt[324806]:_MT[227], arg this[324804]:ReplicatedDom[324802]) : _unknown[43] "method" "primary method" "no parens"
  {
    { scopeless
      (324714 return(324711 call . localDoms c"numElements"))
    }
  } function ReplicatedDom[324802].chpl_myLocDom[324721](arg _mt[324810]:_MT[227], arg this[324808]:ReplicatedDom[324802]) : _unknown[43] "method" "primary method" "no doc"
  {
    if(324784 call _cond_test boundsChecking)
    {
      { scopeless
        if(324779 call _cond_test(324737 call !(324736 call(324728 call .(324725 call . dist c"targetLocDom") c"contains")(324732 call . here c"id"))))
        {
          { scopeless
            (324777 call halt "locale "(324758 call . here c"id") " has no local replicand")
          }
        }
      }
    }
    (324797 return(324796 call localDoms(324792 call . here c"id")))
  } BaseRectangularDom
  type LocReplicatedDom[324836](?) unknown rank[324815] "param" int[13] unknown idxType[324818] "type variable" unknown stridable[324822] "param" bool[10] unknown domLocalRep[324832](324830 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  function _unknown[43].redirectee[324842](arg _mt[324847]:_MT[227], arg this[324844] :
  ReplicatedDom) : _unknown[43] "method"
  {
    { scopeless
      (324857 return domRep)
    }
  }
  { scopeless type
    (324854 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
  }
  function _unknown[43].dsiMyDist[324866](arg _mt[324871]:_MT[227], arg this[324868] :
  ReplicatedDom) : _unknown[43] "method" "method overrides"
  {
    { scopeless
      (324874 return dist)
    }
  }
  function _unknown[43].dsiSupportsPrivatization[324882](arg _mt[324887]:_MT[227], arg this[324884] :
  ReplicatedDom) param : _unknown[43] "method"
  {
    { scopeless
      (324890 return 1)
    }
  }
  type ReplicatedDomPrvData[324906](?) unknown distpid[324896] unknown domRep[324899] unknown localDoms[324902]
  function _unknown[43].dsiGetPrivatizeData[324912](arg _mt[324917]:_MT[227], arg this[324914] :
  ReplicatedDom) : _unknown[43] "method"
  {
    if(324940 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (324938 call writeln "ReplicatedDom.dsiGetPrivatizeData")
      }
    }
    (324956 return(324955 'new'(324954 call ReplicatedDomPrvData(324948 call . dist c"pid") domRep localDoms)))
  }
  function _unknown[43].dsiPrivatize[324965](arg _mt[324970]:_MT[227], arg this[324967] :
  ReplicatedDom, arg privatizeData[324963]:_any[170](?)) : _unknown[43] "method"
  {
    if(324994 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (324992 call writeln "ReplicatedDom.dsiPrivatize on " here)
      }
    }
    unknown privdist[325012](325011 call chpl_getPrivatizedCopy(325005 'typeof'(325002 call . this c"dist"))(325008 call . privatizeData c"distpid"))
    (325042 return(325041 'new'(325040 'to unmanaged class from unknown'(325039 call ReplicatedDom(rank = rank)(idxType = idxType)(stridable = stridable)(dist = privdist)(domRep =(325028 call . privatizeData c"domRep"))(localDoms =(325035 call . privatizeData c"localDoms"))))))
  }
  function _unknown[43].dsiGetReprivatizeData[325049](arg _mt[325054]:_MT[227], arg this[325051] :
  ReplicatedDom) : _unknown[43] "method"
  {
    (325057 return domRep)
  }
  function _unknown[43].dsiReprivatize[325067](arg _mt[325074]:_MT[227], arg this[325071] :
  ReplicatedDom, arg other[325065]:_any[170](?), arg reprivatizeData[325069]:_any[170](?)) : _unknown[43] "method"
  {
    (325113 call assert(325110 call &&(325098 call &&(325086 call ==(325079 call . this c"rank")(325083 call . other c"rank"))(325096 call ==(325089 call . this c"idxType")(325093 call . other c"idxType")))(325108 call ==(325101 call . this c"stridable")(325105 call . other c"stridable"))))
    (325121 call =(325117 call . this c"domRep") reprivatizeData)
  }
  { scopeless type
    void[4]
  }
  function _unknown[43].dsiClone[325130](arg _mt[325135]:_MT[227], arg this[325132] :
  Replicated) : _unknown[43] "method"
  {
    if(325163 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (325161 call writeln "Replicated.dsiClone")
      }
    }
    (325175 return(325174 'new'(325173 'to unmanaged class from unknown'(325172 call Replicated targetLocales))))
  }
  { scopeless type
    (325141 call _to_unmanaged(325139 'typeof' this))
  }
  function _unknown[43].dsiNewRectangularDom[325187](arg _mt[325200]:_MT[227], arg this[325197] :
  Replicated, param arg rank[325184] :
  int[13], arg idxType[325189]:_any[170](?), param arg stridable[325192] :
  bool[10], arg inds[325195]:_any[170](?)) : _unknown[43] "method" "method overrides"
  {
    if(325233 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (325231 call writeln "Replicated.dsiNewRectangularDom "(325229 call _build_tuple rank(325224 call _cast string[24] idxType) stridable inds))
      }
    }
    unknown result[325255](325254 'new'(325253 'to unmanaged class from unknown'(325252 call ReplicatedDom(rank = rank)(idxType = idxType)(stridable = stridable)(dist =(325250 call _to_unmanaged this)))))
    {
      unknown tmpIter[325292] "expr temp" "maybe ref" "no copy" "temp"
      (325295 'move' tmpIter[325292](325269 call _build_tuple targetLocales(325266 call . result c"localDoms")))
      unknown isRngDomArr[325478] "maybe param" "temp"
      (325493 'move' isRngDomArr[325478](325491 call ||(325480 call isBoundedRange tmpIter[325292])(325489 call ||(325483 call isDomain tmpIter[325292])(325486 call isArray tmpIter[325292]))))
      if isRngDomArr[325478]
      {
        const _coforallCount[325317] "const" "end count" "temp"
        (325400 'move' _coforallCount[325317](325397 call _endCountAlloc 1))
        unknown numTasks[325318] "temp"
        (325384 'move' numTasks[325318](325380 call . tmpIter[325292] c"size"))
        (325375 call _upEndCount _coforallCount[325317] 1 numTasks[325318])
        (325372 call chpl_resetTaskSpawn numTasks[325318])
        unknown _indexOfInterest[325325] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325326] "expr temp" "temp"
        (325335 'move' _iterator[325326](325333 call _getIteratorZip tmpIter[325292]))
        Defer
        {
          {
            (325365 call _freeIterator _iterator[325326])
          }
        }
        { scopeless type
          (325340 'move' _indexOfInterest[325325](325337 call iteratorIndex _iterator[325326]))
        }
        ForLoop
        {
          (325345 call _check_tuple_var_decl _indexOfInterest[325325] 2)
          unknown loc[325351] "coforall index var" "index var" "insert auto destroy"
          (325353 'move' loc[325351](325349 call _indexOfInterest[325325] 1))
          unknown locDom[325358] "coforall index var" "index var" "insert auto destroy"
          (325360 'move' locDom[325358](325356 call _indexOfInterest[325325] 2))
          {
            {
              const tmp[325298] "const" "temp"
              (325300 'move' tmp[325298](325302 'deref'(325303 '_wide_get_locale' loc)))
              { scopeless
                (325307 call = locDom(325309 'new'(325310 'to unmanaged class from unknown'(325312 call LocReplicatedDom rank idxType stridable))))
              }
            }
            (325320 call _downEndCount _coforallCount[325317] nil[38])
            (325319 'coforall loop')
          }
          label _continueLabel[325330]
          _indexOfInterest[325325]
          _iterator[325326]
        }
        label _breakLabel[325331]
        Defer
        {
          {
            (325387 call _endCountFree _coforallCount[325317])
          }
        }
        (325392 call _waitEndCount _coforallCount[325317] 1 numTasks[325318])
      }
      {
        const _coforallCount[325404] "const" "end count" "temp"
        (325475 'move' _coforallCount[325404](325472 call _endCountAlloc 1))
        unknown _indexOfInterest[325412] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325413] "expr temp" "temp"
        (325422 'move' _iterator[325413](325420 call _getIteratorZip tmpIter[325292]))
        Defer
        {
          {
            (325452 call _freeIterator _iterator[325413])
          }
        }
        { scopeless type
          (325427 'move' _indexOfInterest[325412](325424 call iteratorIndex _iterator[325413]))
        }
        ForLoop
        {
          (325432 call _check_tuple_var_decl _indexOfInterest[325412] 2)
          unknown loc[325438] "coforall index var" "index var" "insert auto destroy"
          (325440 'move' loc[325438](325436 call _indexOfInterest[325412] 1))
          unknown locDom[325445] "coforall index var" "index var" "insert auto destroy"
          (325447 'move' locDom[325445](325443 call _indexOfInterest[325412] 2))
          (325459 call _upEndCount _coforallCount[325404] 1)
          {
            {
              const tmp[325286] "const" "temp"
              (325287 'move' tmp[325286](325284 'deref'(325283 '_wide_get_locale' loc)))
              { scopeless
                (325280 call = locDom(325279 'new'(325278 'to unmanaged class from unknown'(325277 call LocReplicatedDom rank idxType stridable))))
              }
            }
            (325407 call _downEndCount _coforallCount[325404] nil[38])
            (325406 'coforall loop')
          }
          label _continueLabel[325417]
          _indexOfInterest[325412]
          _iterator[325413]
        }
        label _breakLabel[325418]
        Defer
        {
          {
            (325463 call _endCountFree _coforallCount[325404])
          }
        }
        (325468 call _waitEndCount _coforallCount[325404] 1)
      }
    }
    (325503 call(325498 call . result c"dsiSetIndices") inds)
    (325506 return result)
  }
  function _unknown[43].dsiIndexToLocale[325515](arg _mt[325520]:_MT[227], arg this[325517] :
  Replicated, arg indexx[325513]:_any[170](?)) : _unknown[43] "method"
  {
    (325524 return here)
  }
  { scopeless type
    locale[26]
  }
  function _unknown[43].dsiSetIndices[325535](arg _mt[325540]:_MT[227], arg this[325537] :
  ReplicatedDom, arg x[325533]:_any[170](?)) : _unknown[43] "method"
  {
    if(325583 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (325581 call writeln "ReplicatedDom.dsiSetIndices on "(325577 call _cast string[24](325575 'typeof' x)) ": " x)
      }
    }
    (325596 call dsiSetIndices(325593 call chpl__buildDomainExpr(325591 'expand_tuple' x)))
  }
  where {
    (325553 call &&(325545 call isTuple x)(325552 call isRange(325550 call x 1)))
  }
  function _unknown[43].dsiSetIndices[325608](arg _mt[325613]:_MT[227], arg this[325610] :
  ReplicatedDom, arg domArg[325605] :
  _domain) : _unknown[43] "method"
  {
    if(325638 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (325636 call writeln "ReplicatedDom.dsiSetIndices on domain " domArg)
      }
    }
    (325646 call = domRep domArg)
    {
      unknown tmpIter[325670] "expr temp" "maybe ref" "no copy" "temp"
      (325673 'move' tmpIter[325670] localDoms)
      unknown isRngDomArr[325825] "maybe param" "temp"
      (325840 'move' isRngDomArr[325825](325838 call ||(325827 call isBoundedRange tmpIter[325670])(325836 call ||(325830 call isDomain tmpIter[325670])(325833 call isArray tmpIter[325670]))))
      if isRngDomArr[325825]
      {
        const _coforallCount[325692] "const" "end count" "temp"
        (325761 'move' _coforallCount[325692](325758 call _endCountAlloc 1))
        unknown numTasks[325693] "temp"
        (325745 'move' numTasks[325693](325741 call . tmpIter[325670] c"size"))
        (325736 call _upEndCount _coforallCount[325692] 1 numTasks[325693])
        (325733 call chpl_resetTaskSpawn numTasks[325693])
        unknown _indexOfInterest[325700] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325701] "expr temp" "temp"
        (325710 'move' _iterator[325701](325708 call _getIterator tmpIter[325670]))
        Defer
        {
          {
            (325726 call _freeIterator _iterator[325701])
          }
        }
        { scopeless type
          (325715 'move' _indexOfInterest[325700](325712 call iteratorIndex _iterator[325701]))
        }
        ForLoop
        {
          unknown locDom[325719] "coforall index var" "index var" "insert auto destroy"
          (325721 'move' locDom[325719] _indexOfInterest[325700])
          {
            {
              const tmp[325676] "const" "temp"
              (325678 'move' tmp[325676](325680 'deref'(325681 '_wide_get_locale' locDom)))
              { scopeless
                (325685 call =(325687 call . locDom c"domLocalRep") domArg)
              }
            }
            (325695 call _downEndCount _coforallCount[325692] nil[38])
            (325694 'coforall loop')
          }
          label _continueLabel[325705]
          _indexOfInterest[325700]
          _iterator[325701]
        }
        label _breakLabel[325706]
        Defer
        {
          {
            (325748 call _endCountFree _coforallCount[325692])
          }
        }
        (325753 call _waitEndCount _coforallCount[325692] 1 numTasks[325693])
      }
      {
        const _coforallCount[325765] "const" "end count" "temp"
        (325822 'move' _coforallCount[325765](325819 call _endCountAlloc 1))
        unknown _indexOfInterest[325773] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[325774] "expr temp" "temp"
        (325783 'move' _iterator[325774](325781 call _getIterator tmpIter[325670]))
        Defer
        {
          {
            (325799 call _freeIterator _iterator[325774])
          }
        }
        { scopeless type
          (325788 'move' _indexOfInterest[325773](325785 call iteratorIndex _iterator[325774]))
        }
        ForLoop
        {
          unknown locDom[325792] "coforall index var" "index var" "insert auto destroy"
          (325794 'move' locDom[325792] _indexOfInterest[325773])
          (325806 call _upEndCount _coforallCount[325765] 1)
          {
            {
              const tmp[325665] "const" "temp"
              (325666 'move' tmp[325665](325663 'deref'(325662 '_wide_get_locale' locDom)))
              { scopeless
                (325659 call =(325655 call . locDom c"domLocalRep") domArg)
              }
            }
            (325768 call _downEndCount _coforallCount[325765] nil[38])
            (325767 'coforall loop')
          }
          label _continueLabel[325778]
          _indexOfInterest[325773]
          _iterator[325774]
        }
        label _breakLabel[325779]
        Defer
        {
          {
            (325810 call _endCountFree _coforallCount[325765])
          }
        }
        (325815 call _waitEndCount _coforallCount[325765] 1)
      }
    }
  }
  { scopeless type
    void[4]
  }
  function _unknown[43].dsiGetIndices[325850](arg _mt[325855]:_MT[227], arg this[325852] :
  ReplicatedDom) : _unknown[43] "method"
  {
    if(325890 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (325888 call writeln "ReplicatedDom.dsiGetIndices")
      }
    }
    (325904 return(325903 call(325899 call .(325898 call redirectee) c"getIndices")))
  }
  { scopeless type
    (325867 call * rank(325866 call range idxType(325862 call . BoundedRangeType c"bounded") stridable))
  }
  function _unknown[43].these[325912](arg _mt[325917]:_MT[227], arg this[325914] :
  ReplicatedDom) : _unknown[43] "iterator fn" "method"
  {
    unknown dom[325922](325921 call redirectee)
    {
      unknown _indexOfInterest[325931] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[325932] "expr temp" "temp"
      (325941 'move' _iterator[325932](325939 call _getIterator dom))
      Defer
      {
        {
          (325957 call _freeIterator _iterator[325932])
        }
      }
      { scopeless type
        (325946 'move' _indexOfInterest[325931](325943 call iteratorIndex _iterator[325932]))
      }
      ForLoop
      {
        unknown i[325950] "index var" "insert auto destroy"
        (325952 'move' i[325950] _indexOfInterest[325931])
        { scopeless
          (325929 yield i)
        }
        label _continueLabel[325936]
        _indexOfInterest[325931]
        _iterator[325932]
      }
      label _breakLabel[325937]
    }
  }
  function _unknown[43].these[325973](arg _mt[325978]:_MT[227], arg this[325975] :
  ReplicatedDom, param arg tag[325970] :
  iterKind) : _unknown[43] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[326003] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[326004] "expr temp" "temp"
      (326013 'move' _iterator[326004](326011 call _getIterator(325999 call(325994 call .(325991 call .(325990 call chpl_myLocDom) c"domLocalRep") c"these") tag)))
      Defer
      {
        {
          (326030 call _freeIterator _iterator[326004])
        }
      }
      { scopeless type
        (326019 'move' _indexOfInterest[326003](326016 call iteratorIndex _iterator[326004]))
      }
      ForLoop
      {
        unknown follow[326023] "index var" "insert auto destroy"
        (326025 'move' follow[326023] _indexOfInterest[326003])
        { scopeless
          (326001 yield follow)
        }
        label _continueLabel[326008]
        _indexOfInterest[326003]
        _iterator[326004]
      }
      label _breakLabel[326009]
    }
  }
  where {
    (325985 call == tag(325982 call . iterKind c"leader"))
  }
  function _unknown[43].these[326048](arg _mt[326055]:_MT[227], arg this[326052] :
  ReplicatedDom, param arg tag[326045] :
  iterKind, arg followThis[326050]:_any[170](?)) : _unknown[43] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[326078] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[326079] "expr temp" "temp"
      (326088 'move' _iterator[326079](326086 call _getIterator(326074 call(326068 call .(326067 call redirectee) c"these") tag followThis)))
      Defer
      {
        {
          (326105 call _freeIterator _iterator[326079])
        }
      }
      { scopeless type
        (326094 'move' _indexOfInterest[326078](326091 call iteratorIndex _iterator[326079]))
      }
      ForLoop
      {
        unknown i[326098] "index var" "insert auto destroy"
        (326100 'move' i[326098] _indexOfInterest[326078])
        { scopeless
          (326076 yield i)
        }
        label _continueLabel[326083]
        _indexOfInterest[326078]
        _iterator[326079]
      }
      label _breakLabel[326084]
    }
  }
  where {
    (326062 call == tag(326059 call . iterKind c"follower"))
  }
  function _unknown[43].dsiSerialWrite[326121](arg _mt[326126]:_MT[227], arg this[326123] :
  ReplicatedDom, arg f[326119]:_any[170](?)) : _unknown[43] "method"
  {
    (326140 call(326135 call .(326132 call .(326131 call redirectee) c"_value") c"dsiSerialWrite") f)
  }
  { scopeless type
    void[4]
  }
  function _unknown[43].dsiDims[326149](arg _mt[326154]:_MT[227], arg this[326151] :
  ReplicatedDom) : _unknown[43] "method"
  {
    { scopeless
      (326176 return(326175 call(326171 call .(326170 call redirectee) c"dims")))
    }
  }
  { scopeless type
    (326166 call * rank(326165 call range idxType(326161 call . BoundedRangeType c"bounded") stridable))
  }
  function _unknown[43].dsiDim[326189](arg _mt[326194]:_MT[227], arg this[326191] :
  ReplicatedDom, arg dim[326186] :
  int[13]) : _unknown[43] "method"
  {
    { scopeless
      (326214 return(326213 call(326208 call .(326207 call redirectee) c"dim") dim))
    }
  }
  { scopeless type
    (326204 call range idxType(326200 call . BoundedRangeType c"bounded") stridable)
  }
  function _unknown[43].dsiLow[326223](arg _mt[326228]:_MT[227], arg this[326225] :
  ReplicatedDom) : _unknown[43] "method" "no parens"
  {
    { scopeless
      (326236 return(326233 call .(326232 call redirectee) c"low"))
    }
  }
  function _unknown[43].dsiHigh[326244](arg _mt[326249]:_MT[227], arg this[326246] :
  ReplicatedDom) : _unknown[43] "method" "no parens"
  {
    { scopeless
      (326257 return(326254 call .(326253 call redirectee) c"high"))
    }
  }
  function _unknown[43].dsiStride[326265](arg _mt[326270]:_MT[227], arg this[326267] :
  ReplicatedDom) : _unknown[43] "method" "no parens"
  {
    { scopeless
      (326278 return(326275 call .(326274 call redirectee) c"stride"))
    }
  }
  function _unknown[43].dsiAlignedLow[326286](arg _mt[326291]:_MT[227], arg this[326288] :
  ReplicatedDom) : _unknown[43] "method" "no parens"
  {
    { scopeless
      (326299 return(326296 call .(326295 call redirectee) c"alignedLow"))
    }
  }
  function _unknown[43].dsiAlignedHigh[326307](arg _mt[326312]:_MT[227], arg this[326309] :
  ReplicatedDom) : _unknown[43] "method" "no parens"
  {
    { scopeless
      (326320 return(326317 call .(326316 call redirectee) c"alignedHigh"))
    }
  }
  function _unknown[43].dsiAlignment[326328](arg _mt[326333]:_MT[227], arg this[326330] :
  ReplicatedDom) : _unknown[43] "method" "no parens"
  {
    { scopeless
      (326341 return(326338 call .(326337 call redirectee) c"alignment"))
    }
  }
  function _unknown[43].dsiNumIndices[326349](arg _mt[326354]:_MT[227], arg this[326351] :
  ReplicatedDom) : _unknown[43] "method" "no parens"
  {
    { scopeless
      (326362 return(326359 call .(326358 call redirectee) c"numIndices"))
    }
  }
  function _unknown[43].dsiMember[326372](arg _mt[326377]:_MT[227], arg this[326374] :
  ReplicatedDom, arg indexx[326370]:_any[170](?)) : _unknown[43] "method"
  {
    { scopeless
      (326388 return(326387 call(326382 call .(326381 call redirectee) c"contains") indexx))
    }
  }
  function _unknown[43].dsiIndexOrder[326398](arg _mt[326403]:_MT[227], arg this[326400] :
  ReplicatedDom, arg indexx[326396]:_any[170](?)) : _unknown[43] "method"
  {
    { scopeless
      (326414 return(326413 call(326408 call .(326407 call redirectee) c"dsiIndexOrder") indexx))
    }
  }
  function _unknown[43].dsiDestroyDom[326422](arg _mt[326427]:_MT[227], arg this[326424] :
  ReplicatedDom) : _unknown[43] "method" "method overrides"
  {
    {
      unknown tmpIter[326458] "expr temp" "maybe ref" "no copy" "temp"
      (326461 'move' tmpIter[326458](326431 call . dist c"targetLocDom"))
      unknown isRngDomArr[326616] "maybe param" "temp"
      (326631 'move' isRngDomArr[326616](326629 call ||(326618 call isBoundedRange tmpIter[326458])(326627 call ||(326621 call isDomain tmpIter[326458])(326624 call isArray tmpIter[326458]))))
      if isRngDomArr[326616]
      {
        const _coforallCount[326483] "const" "end count" "temp"
        (326552 'move' _coforallCount[326483](326549 call _endCountAlloc 1))
        unknown numTasks[326484] "temp"
        (326536 'move' numTasks[326484](326532 call . tmpIter[326458] c"size"))
        (326527 call _upEndCount _coforallCount[326483] 1 numTasks[326484])
        (326524 call chpl_resetTaskSpawn numTasks[326484])
        unknown _indexOfInterest[326491] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[326492] "expr temp" "temp"
        (326501 'move' _iterator[326492](326499 call _getIterator tmpIter[326458]))
        Defer
        {
          {
            (326517 call _freeIterator _iterator[326492])
          }
        }
        { scopeless type
          (326506 'move' _indexOfInterest[326491](326503 call iteratorIndex _iterator[326492]))
        }
        ForLoop
        {
          unknown localeIdx[326510] "coforall index var" "index var" "insert auto destroy"
          (326512 'move' localeIdx[326510] _indexOfInterest[326491])
          {
            {
              const tmp[326464] "const" "temp"
              (326466 'move' tmp[326464](326468 'deref'(326469 '_wide_get_locale'(326474 call(326471 call . dist c"targetLocales") localeIdx))))
              { scopeless
                (326478 call chpl__delete(326480 call localDoms localeIdx))
              }
            }
            (326486 call _downEndCount _coforallCount[326483] nil[38])
            (326485 'coforall loop')
          }
          label _continueLabel[326496]
          _indexOfInterest[326491]
          _iterator[326492]
        }
        label _breakLabel[326497]
        Defer
        {
          {
            (326539 call _endCountFree _coforallCount[326483])
          }
        }
        (326544 call _waitEndCount _coforallCount[326483] 1 numTasks[326484])
      }
      {
        const _coforallCount[326556] "const" "end count" "temp"
        (326613 'move' _coforallCount[326556](326610 call _endCountAlloc 1))
        unknown _indexOfInterest[326564] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[326565] "expr temp" "temp"
        (326574 'move' _iterator[326565](326572 call _getIterator tmpIter[326458]))
        Defer
        {
          {
            (326590 call _freeIterator _iterator[326565])
          }
        }
        { scopeless type
          (326579 'move' _indexOfInterest[326564](326576 call iteratorIndex _iterator[326565]))
        }
        ForLoop
        {
          unknown localeIdx[326583] "coforall index var" "index var" "insert auto destroy"
          (326585 'move' localeIdx[326583] _indexOfInterest[326564])
          (326597 call _upEndCount _coforallCount[326556] 1)
          {
            {
              const tmp[326452] "const" "temp"
              (326453 'move' tmp[326452](326450 'deref'(326449 '_wide_get_locale'(326440 call(326435 call . dist c"targetLocales") localeIdx))))
              { scopeless
                (326446 call chpl__delete(326444 call localDoms localeIdx))
              }
            }
            (326559 call _downEndCount _coforallCount[326556] nil[38])
            (326558 'coforall loop')
          }
          label _continueLabel[326569]
          _indexOfInterest[326564]
          _iterator[326565]
        }
        label _breakLabel[326570]
        Defer
        {
          {
            (326601 call _endCountFree _coforallCount[326556])
          }
        }
        (326606 call _waitEndCount _coforallCount[326556] 1)
      }
    }
  }
  function _unknown[43].dsiAssignDomain[326645](arg _mt[326654]:_MT[227], arg this[326651] :
  ReplicatedDom, arg rhs[326642] :
  _domain, arg lhsPrivate[326648] :
  bool[10]) : _unknown[43] "method"
  {
    (326667 call(326657 call . this c"dsiSetIndices")(326665 call(326661 call . rhs c"getIndices")))
  }
  type ReplicatedArr[326791](?) const dom[326675] "const" unknown localArrs[326707](326705 call chpl__buildArrayRuntimeType(326703 call chpl__ensureDomainExpr(326682 call .(326679 call . dom c"dist") c"targetLocDom"))(326702 'to unmanaged class from unknown'(326701 call LocReplicatedArr eltType(326690 call . dom c"rank")(326694 call . dom c"idxType")(326698 call . dom c"stridable")))) function ReplicatedArr[326791](?).chpl_myLocArr[326712](arg _mt[326795]:_MT[227], arg this[326793]:ReplicatedArr[326791](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(326748 call _cond_test boundsChecking)
    {
      { scopeless
        if(326743 call _cond_test(326731 call !(326730 call(326722 call .(326719 call .(326716 call . dom c"dist") c"targetLocDom") c"contains")(326726 call . here c"id"))))
        {
          { scopeless
            (326741 call halt "locale "(326737 call . here c"id") " has no local replicand")
          }
        }
      }
    }
    (326761 return(326760 call localArrs(326756 call . here c"id")))
  } function ReplicatedArr[326791](?).replicand[326771](arg _mt[326799]:_MT[227], arg this[326797]:ReplicatedArr[326791](?), arg loc[326768] :
  locale[26]) ref : _unknown[43] "method" "primary method"
  {
    (326785 return(326782 call .(326779 call localArrs(326775 call . loc c"id")) c"arrLocalRep"))
  } AbsBaseArr
  function _unknown[43].replicand[326809](arg _mt[326814]:_MT[227], arg this[326811] :
  _array, arg loc[326806] :
  locale[26]) ref : _unknown[43] "method" "no doc"
  {
    (326823 return(326822 call(326817 call . _value c"replicand") loc))
  }
  type LocReplicatedArr[326867](?) unknown eltType[326829] "type variable" unknown rank[326833] "param" int[13] unknown idxType[326836] "type variable" unknown stridable[326840] "param" bool[10] unknown myDom[326850](326849 'to unmanaged class from unknown'(326848 call LocReplicatedDom rank idxType stridable)) unknown arrLocalRep[326863](326861 call chpl__buildArrayRuntimeType(326859 call chpl__ensureDomainExpr(326854 call . myDom c"domLocalRep")) eltType)
  function _unknown[43].init[326875](arg _mt[326882]:_MT[227], arg this[326879] :
  ReplicatedArr, arg eltType[326873]:_any[170](?), arg dom[326877]:_any[170](?)) : _unknown[43] "method"
  {
    (326891 call(326885 call . super c"init")(eltType = eltType))
    (326899 call =(326895 call . this c"dom") dom)
  }
  function _unknown[43].stridable[326907](arg _mt[326912]:_MT[227], arg this[326909] :
  ReplicatedArr) param : _unknown[43] "method" "no parens"
  {
    (326918 return(326915 call . dom c"stridable"))
  }
  function _unknown[43].idxType[326926](arg _mt[326931]:_MT[227], arg this[326928] :
  ReplicatedArr) type : _unknown[43] "method" "no parens"
  {
    (326937 return(326934 call . dom c"idxType"))
  }
  function _unknown[43].rank[326945](arg _mt[326950]:_MT[227], arg this[326947] :
  ReplicatedArr) param : _unknown[43] "method" "no parens"
  {
    (326956 return(326953 call . dom c"rank"))
  }
  function _unknown[43].dsiGetBaseDom[326964](arg _mt[326969]:_MT[227], arg this[326966] :
  ReplicatedArr) : _unknown[43] "method" "method overrides"
  {
    { scopeless
      (326972 return dom)
    }
  }
  function _unknown[43].dsiSupportsPrivatization[326980](arg _mt[326985]:_MT[227], arg this[326982] :
  ReplicatedArr) param : _unknown[43] "method"
  {
    { scopeless
      (326988 return 1)
    }
  }
  type ReplicatedArrPrvData[327001](?) unknown dompid[326994] unknown localArrs[326997]
  function _unknown[43].dsiGetPrivatizeData[327007](arg _mt[327012]:_MT[227], arg this[327009] :
  ReplicatedArr) : _unknown[43] "method"
  {
    if(327035 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (327033 call writeln "ReplicatedArr.dsiGetPrivatizeData")
      }
    }
    (327050 return(327049 'new'(327048 call ReplicatedArrPrvData(327043 call . dom c"pid") localArrs)))
  }
  function _unknown[43].dsiPrivatize[327059](arg _mt[327064]:_MT[227], arg this[327061] :
  ReplicatedArr, arg privatizeData[327057]:_any[170](?)) : _unknown[43] "method"
  {
    if(327088 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (327086 call writeln "ReplicatedArr.dsiPrivatize on " here)
      }
    }
    unknown privdom[327108](327107 call chpl_getPrivatizedCopy(327099 'typeof'(327096 call . this c"dom"))(327104 call . privatizeData c"dompid"))
    unknown result[327118](327117 'new'(327116 'to unmanaged class from unknown'(327115 call ReplicatedArr eltType privdom)))
    (327131 call =(327124 call . result c"localArrs")(327128 call . privatizeData c"localArrs"))
    (327135 return result)
  }
  function _unknown[43].dsiBuildArray[327144](arg _mt[327149]:_MT[227], arg this[327146] :
  ReplicatedDom, arg eltType[327142]:_any[170](?)) : _unknown[43] "method"
  {
    if(327182 call _cond_test traceReplicatedDist)
    {
      { scopeless
        (327180 call writeln "ReplicatedDom.dsiBuildArray")
      }
    }
    unknown result[327198](327197 'new'(327196 'to unmanaged class from unknown'(327195 call ReplicatedArr eltType(327194 call _to_unmanaged this))))
    {
      unknown tmpIter[327242] "expr temp" "maybe ref" "no copy" "temp"
      (327245 'move' tmpIter[327242](327217 call _build_tuple(327208 call . dist c"targetLocales") localDoms(327214 call . result c"localArrs")))
      unknown isRngDomArr[327444] "maybe param" "temp"
      (327459 'move' isRngDomArr[327444](327457 call ||(327446 call isBoundedRange tmpIter[327242])(327455 call ||(327449 call isDomain tmpIter[327242])(327452 call isArray tmpIter[327242]))))
      if isRngDomArr[327444]
      {
        const _coforallCount[327269] "const" "end count" "temp"
        (327359 'move' _coforallCount[327269](327356 call _endCountAlloc 1))
        unknown numTasks[327270] "temp"
        (327343 'move' numTasks[327270](327339 call . tmpIter[327242] c"size"))
        (327334 call _upEndCount _coforallCount[327269] 1 numTasks[327270])
        (327331 call chpl_resetTaskSpawn numTasks[327270])
        unknown _indexOfInterest[327277] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327278] "expr temp" "temp"
        (327287 'move' _iterator[327278](327285 call _getIteratorZip tmpIter[327242]))
        Defer
        {
          {
            (327324 call _freeIterator _iterator[327278])
          }
        }
        { scopeless type
          (327292 'move' _indexOfInterest[327277](327289 call iteratorIndex _iterator[327278]))
        }
        ForLoop
        {
          (327297 call _check_tuple_var_decl _indexOfInterest[327277] 3)
          unknown loc[327303] "coforall index var" "index var" "insert auto destroy"
          (327305 'move' loc[327303](327301 call _indexOfInterest[327277] 1))
          unknown locDom[327310] "coforall index var" "index var" "insert auto destroy"
          (327312 'move' locDom[327310](327308 call _indexOfInterest[327277] 2))
          unknown locArr[327317] "coforall index var" "index var" "insert auto destroy"
          (327319 'move' locArr[327317](327315 call _indexOfInterest[327277] 3))
          {
            {
              const tmp[327248] "const" "temp"
              (327250 'move' tmp[327248](327252 'deref'(327253 '_wide_get_locale' loc)))
              { scopeless
                (327257 call = locArr(327259 'new'(327260 'to unmanaged class from unknown'(327262 call LocReplicatedArr eltType rank idxType stridable locDom))))
              }
            }
            (327272 call _downEndCount _coforallCount[327269] nil[38])
            (327271 'coforall loop')
          }
          label _continueLabel[327282]
          _indexOfInterest[327277]
          _iterator[327278]
        }
        label _breakLabel[327283]
        Defer
        {
          {
            (327346 call _endCountFree _coforallCount[327269])
          }
        }
        (327351 call _waitEndCount _coforallCount[327269] 1 numTasks[327270])
      }
      {
        const _coforallCount[327363] "const" "end count" "temp"
        (327441 'move' _coforallCount[327363](327438 call _endCountAlloc 1))
        unknown _indexOfInterest[327371] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327372] "expr temp" "temp"
        (327381 'move' _iterator[327372](327379 call _getIteratorZip tmpIter[327242]))
        Defer
        {
          {
            (327418 call _freeIterator _iterator[327372])
          }
        }
        { scopeless type
          (327386 'move' _indexOfInterest[327371](327383 call iteratorIndex _iterator[327372]))
        }
        ForLoop
        {
          (327391 call _check_tuple_var_decl _indexOfInterest[327371] 3)
          unknown loc[327397] "coforall index var" "index var" "insert auto destroy"
          (327399 'move' loc[327397](327395 call _indexOfInterest[327371] 1))
          unknown locDom[327404] "coforall index var" "index var" "insert auto destroy"
          (327406 'move' locDom[327404](327402 call _indexOfInterest[327371] 2))
          unknown locArr[327411] "coforall index var" "index var" "insert auto destroy"
          (327413 'move' locArr[327411](327409 call _indexOfInterest[327371] 3))
          (327425 call _upEndCount _coforallCount[327363] 1)
          {
            {
              const tmp[327236] "const" "temp"
              (327237 'move' tmp[327236](327234 'deref'(327233 '_wide_get_locale' loc)))
              { scopeless
                (327230 call = locArr(327229 'new'(327228 'to unmanaged class from unknown'(327227 call LocReplicatedArr eltType rank idxType stridable locDom))))
              }
            }
            (327366 call _downEndCount _coforallCount[327363] nil[38])
            (327365 'coforall loop')
          }
          label _continueLabel[327376]
          _indexOfInterest[327371]
          _iterator[327372]
        }
        label _breakLabel[327377]
        Defer
        {
          {
            (327429 call _endCountFree _coforallCount[327363])
          }
        }
        (327434 call _waitEndCount _coforallCount[327363] 1)
      }
    }
    (327464 return result)
  }
  { scopeless type
    (327160 'to unmanaged class from unknown'(327159 call ReplicatedArr eltType(327158 call _to_unmanaged(327156 'typeof' this))))
  }
  function _unknown[43].dsiAccess[327474](arg _mt[327479]:_MT[227], arg this[327476] :
  ReplicatedArr, arg indexx[327472]:_any[170](?)) ref : _unknown[43] "method"
  {
    (327490 return(327489 call(327484 call .(327483 call chpl_myLocArr) c"arrLocalRep") indexx))
  }
  function _unknown[43].dsiSerialWrite[327500](arg _mt[327505]:_MT[227], arg this[327502] :
  ReplicatedArr, arg f[327498]:_any[170](?)) : _unknown[43] "method"
  {
    (327533 call(327528 call .(327525 call .(327522 call .(327521 call localArrs(327517 call .(327515 call postfix!(327514 call(327510 call . f c"readWriteThisFromLocale"))) c"id")) c"arrLocalRep") c"_value") c"dsiSerialWrite") f)
  }
  { scopeless type
    void[4]
  }
  function _unknown[43].dsiSerialRead[327544](arg _mt[327551]:_MT[227], arg this[327548] :
  ReplicatedArr, arg f[327542]:_any[170](?), arg loc[327546]:_any[170](?)) : _unknown[43] "method"
  {
    (327579 call(327574 call .(327571 call .(327568 call .(327567 call localArrs(327563 call .(327561 call postfix!(327560 call(327556 call . f c"readWriteThisFromLocale"))) c"id")) c"arrLocalRep") c"_value") c"dsiSerialRead") f)
  }
  { scopeless type
    void[4]
  }
  function isReplicatedArr[327589](arg arr[327587]:_any[170](?)) param : _unknown[43]
  {
    (327603 return(327602 call isSubtype(327599 'typeof'(327598 call _to_borrowed(327596 call chpl__getActualArray arr))) ReplicatedArr))
  }
  function chpl_serialReadWriteRectangular[327612](arg f[327610]:_any[170](?), arg arr[327614]:_any[170](?), arg dom[327616]:_any[170](?)) : _unknown[43]
  {
    const origloc[327628] "const"(327627 call(327623 call . f c"readWriteThisFromLocale"))
    {
      const tmp[327643] "const" "temp"
      (327644 'move' tmp[327643](327641 'deref'(327640 '_wide_get_locale' origloc)))
      { scopeless
        (327638 call chpl_serialReadWriteRectangularHelper f arr dom)
      }
    }
  }
  where {
    (327621 call isReplicatedArr arr)
  }
  function _unknown[43].dsiDestroyArr[327654](arg _mt[327659]:_MT[227], arg this[327656] :
  ReplicatedArr) : _unknown[43] "method" "method overrides"
  {
    {
      unknown tmpIter[327692] "expr temp" "maybe ref" "no copy" "temp"
      (327695 'move' tmpIter[327692](327675 call _build_tuple(327670 call .(327667 call . dom c"dist") c"targetLocales") localArrs))
      unknown isRngDomArr[327871] "maybe param" "temp"
      (327886 'move' isRngDomArr[327871](327884 call ||(327873 call isBoundedRange tmpIter[327692])(327882 call ||(327876 call isDomain tmpIter[327692])(327879 call isArray tmpIter[327692]))))
      if isRngDomArr[327871]
      {
        const _coforallCount[327710] "const" "end count" "temp"
        (327793 'move' _coforallCount[327710](327790 call _endCountAlloc 1))
        unknown numTasks[327711] "temp"
        (327777 'move' numTasks[327711](327773 call . tmpIter[327692] c"size"))
        (327768 call _upEndCount _coforallCount[327710] 1 numTasks[327711])
        (327765 call chpl_resetTaskSpawn numTasks[327711])
        unknown _indexOfInterest[327718] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327719] "expr temp" "temp"
        (327728 'move' _iterator[327719](327726 call _getIteratorZip tmpIter[327692]))
        Defer
        {
          {
            (327758 call _freeIterator _iterator[327719])
          }
        }
        { scopeless type
          (327733 'move' _indexOfInterest[327718](327730 call iteratorIndex _iterator[327719]))
        }
        ForLoop
        {
          (327738 call _check_tuple_var_decl _indexOfInterest[327718] 2)
          unknown loc[327744] "coforall index var" "index var" "insert auto destroy"
          (327746 'move' loc[327744](327742 call _indexOfInterest[327718] 1))
          unknown locArr[327751] "coforall index var" "index var" "insert auto destroy"
          (327753 'move' locArr[327751](327749 call _indexOfInterest[327718] 2))
          {
            {
              const tmp[327698] "const" "temp"
              (327700 'move' tmp[327698](327702 'deref'(327703 '_wide_get_locale' loc)))
              { scopeless
                (327707 call chpl__delete locArr)
              }
            }
            (327713 call _downEndCount _coforallCount[327710] nil[38])
            (327712 'coforall loop')
          }
          label _continueLabel[327723]
          _indexOfInterest[327718]
          _iterator[327719]
        }
        label _breakLabel[327724]
        Defer
        {
          {
            (327780 call _endCountFree _coforallCount[327710])
          }
        }
        (327785 call _waitEndCount _coforallCount[327710] 1 numTasks[327711])
      }
      {
        const _coforallCount[327797] "const" "end count" "temp"
        (327868 'move' _coforallCount[327797](327865 call _endCountAlloc 1))
        unknown _indexOfInterest[327805] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[327806] "expr temp" "temp"
        (327815 'move' _iterator[327806](327813 call _getIteratorZip tmpIter[327692]))
        Defer
        {
          {
            (327845 call _freeIterator _iterator[327806])
          }
        }
        { scopeless type
          (327820 'move' _indexOfInterest[327805](327817 call iteratorIndex _iterator[327806]))
        }
        ForLoop
        {
          (327825 call _check_tuple_var_decl _indexOfInterest[327805] 2)
          unknown loc[327831] "coforall index var" "index var" "insert auto destroy"
          (327833 'move' loc[327831](327829 call _indexOfInterest[327805] 1))
          unknown locArr[327838] "coforall index var" "index var" "insert auto destroy"
          (327840 'move' locArr[327838](327836 call _indexOfInterest[327805] 2))
          (327852 call _upEndCount _coforallCount[327797] 1)
          {
            {
              const tmp[327685] "const" "temp"
              (327686 'move' tmp[327685](327683 'deref'(327682 '_wide_get_locale' loc)))
              { scopeless
                (327679 call chpl__delete locArr)
              }
            }
            (327800 call _downEndCount _coforallCount[327797] nil[38])
            (327799 'coforall loop')
          }
          label _continueLabel[327810]
          _indexOfInterest[327805]
          _iterator[327806]
        }
        label _breakLabel[327811]
        Defer
        {
          {
            (327856 call _endCountFree _coforallCount[327797])
          }
        }
        (327861 call _waitEndCount _coforallCount[327797] 1)
      }
    }
  }
  function _unknown[43].these[327896](arg _mt[327901]:_MT[227], arg this[327898] :
  ReplicatedArr) ref : _unknown[43] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[327914] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327915] "expr temp" "temp"
      (327924 'move' _iterator[327915](327922 call _getIterator(327908 call .(327907 call chpl_myLocArr) c"arrLocalRep")))
      Defer
      {
        {
          (327941 call _freeIterator _iterator[327915])
        }
      }
      { scopeless type
        (327930 'move' _indexOfInterest[327914](327927 call iteratorIndex _iterator[327915]))
      }
      ForLoop
      {
        unknown a[327934] "index var" "insert auto destroy"
        (327936 'move' a[327934] _indexOfInterest[327914])
        { scopeless
          (327912 yield a)
        }
        label _continueLabel[327919]
        _indexOfInterest[327914]
        _iterator[327915]
      }
      label _breakLabel[327920]
    }
  }
  { scopeless type
    eltType
  }
  function _unknown[43].these[327959](arg _mt[327964]:_MT[227], arg this[327961] :
  ReplicatedArr, param arg tag[327956] :
  iterKind) : _unknown[43] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[327984] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[327985] "expr temp" "temp"
      (327994 'move' _iterator[327985](327992 call _getIterator(327980 call(327975 call . dom c"these") tag)))
      Defer
      {
        {
          (328011 call _freeIterator _iterator[327985])
        }
      }
      { scopeless type
        (328000 'move' _indexOfInterest[327984](327997 call iteratorIndex _iterator[327985]))
      }
      ForLoop
      {
        unknown follow[328004] "index var" "insert auto destroy"
        (328006 'move' follow[328004] _indexOfInterest[327984])
        { scopeless
          (327982 yield follow)
        }
        label _continueLabel[327989]
        _indexOfInterest[327984]
        _iterator[327985]
      }
      label _breakLabel[327990]
    }
  }
  where {
    (327971 call == tag(327968 call . iterKind c"leader"))
  }
  function _unknown[43].these[328029](arg _mt[328036]:_MT[227], arg this[328033] :
  ReplicatedArr, param arg tag[328026] :
  iterKind, arg followThis[328031]:_any[170](?)) ref : _unknown[43] "iterator fn" "method"
  {
    {
      unknown _indexOfInterest[328062] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[328063] "expr temp" "temp"
      (328072 'move' _iterator[328063](328070 call _getIterator(328058 call(328052 call .(328049 call .(328048 call chpl_myLocArr) c"arrLocalRep") c"these") tag followThis)))
      Defer
      {
        {
          (328089 call _freeIterator _iterator[328063])
        }
      }
      { scopeless type
        (328078 'move' _indexOfInterest[328062](328075 call iteratorIndex _iterator[328063]))
      }
      ForLoop
      {
        unknown a[328082] "index var" "insert auto destroy"
        (328084 'move' a[328082] _indexOfInterest[328062])
        { scopeless
          (328060 yield a)
        }
        label _continueLabel[328067]
        _indexOfInterest[328062]
        _iterator[328063]
      }
      label _breakLabel[328068]
    }
  }
  where {
    (328043 call == tag(328040 call . iterKind c"follower"))
  }
  function _unknown[43].dsiTargetLocales[328103](arg _mt[328108]:_MT[227], arg this[328105] :
  Replicated) : _unknown[43] "method"
  {
    (328111 return targetLocales)
  }
  function _unknown[43].dsiTargetLocales[328119](arg _mt[328124]:_MT[227], arg this[328121] :
  ReplicatedDom) : _unknown[43] "method"
  {
    (328130 return(328127 call . dist c"targetLocales"))
  }
  function _unknown[43].dsiTargetLocales[328138](arg _mt[328143]:_MT[227], arg this[328140] :
  ReplicatedArr) : _unknown[43] "method"
  {
    (328152 return(328149 call .(328146 call . dom c"dist") c"targetLocales"))
  }
  function _unknown[43].dsiHasSingleLocalSubdomain[328160](arg _mt[328165]:_MT[227], arg this[328162] :
  ReplicatedDom) param : _unknown[43] "method"
  {
    { scopeless
      (328168 return 1)
    }
  }
  function _unknown[43].dsiHasSingleLocalSubdomain[328176](arg _mt[328181]:_MT[227], arg this[328178] :
  ReplicatedArr) param : _unknown[43] "method"
  {
    { scopeless
      (328184 return 1)
    }
  }
  function _unknown[43].dsiLocalSubdomain[328196](arg _mt[328201]:_MT[227], arg this[328198] :
  ReplicatedDom, arg loc[328193] :
  locale[26]) : _unknown[43] "method"
  {
    if(328233 call _cond_test(328215 call(328207 call .(328204 call . localDoms c"_dom") c"contains")(328211 call . loc c"id")))
    {
      { scopeless
        (328217 return domRep)
      }
    }
    {
      unknown d[328226](328224 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (328231 return d)
    }
  }
  function _unknown[43].dsiLocalSubdomain[328248](arg _mt[328253]:_MT[227], arg this[328250] :
  ReplicatedArr, arg loc[328245] :
  locale[26]) : _unknown[43] "method"
  {
    if(328288 call _cond_test(328267 call(328259 call .(328256 call . localArrs c"_dom") c"contains")(328263 call . loc c"id")))
    {
      { scopeless
        (328272 return(328269 call . dom c"domRep"))
      }
    }
    {
      unknown d[328281](328279 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (328286 return d)
    }
  }
}