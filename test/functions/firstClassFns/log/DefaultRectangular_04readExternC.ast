AST dump for DefaultRectangular after pass readExternC.
Module use list: 

{
  const dataParTasksPerLocale[92471] "config" "const" 0
  const dataParIgnoreRunningTasks[92476] "config" "const" 0
  const dataParMinGranularity[92481] "config" "const" 1 int[13]
  if(92508 call _cond_test(92486 call < dataParTasksPerLocale 0))
  {
    { scopeless
      (92506 call halt "dataParTasksPerLocale must be >= 0")
    }
  }
  if(92537 call _cond_test(92515 call <= dataParMinGranularity 0))
  {
    { scopeless
      (92535 call halt "dataParMinGranularity must be > 0")
    }
  }
  { scopeless
    (92545 'use' DSIUtil)
    (92547 'use' ChapelArray)
  }
  { scopeless
    (92553 'use' ChapelDistribution)
    (92555 'use' ChapelRange)
    (92556 'use' SysBasic)
    (92557 'use' SysError)
  }
  { scopeless
    (92563 'use' ChapelDebugPrint)
    (92565 'use' ChapelLocks)
    (92566 'use' OwnedObject)
    (92567 'use' IO)
  }
  { scopeless
    (92572 'use' DefaultSparse)
    (92574 'use' DefaultAssociative)
    (92575 'use' DefaultOpaque)
  }
  (92578 'use' ExternalArray)
  unknown debugDefaultDist[92581] "config" "param" 0
  unknown debugDefaultDistBulkTransfer[92585] "config" "param" 0
  unknown debugDataPar[92589] "config" "param" 0
  unknown debugDataParNuma[92593] "config" "param" 0
  unknown defaultDoRADOpt[92597] "config" "param" 1
  unknown defaultDisableLazyRADOpt[92601] "config" "param" 0
  unknown earlyShiftData[92605] "config" "param" 1
  unknown usePollyArrayIndex[92609] "config" "param" 0
  type ArrayStorageOrder[92617] def RMO[92613]:ArrayStorageOrder[92617] def CMO[92615]:ArrayStorageOrder[92617]
  unknown defaultStorageOrder[92626] "config" "param"(92623 call . ArrayStorageOrder c"RMO")
  unknown storageOrder[92630] "param" defaultStorageOrder
  function polly_array_index[92641](arg arguments[92637] ... :
  int[13]) : _unknown[43] "lineno ok" "llvm readnone"
  {
    unknown rank[92654] "param"(92652 call /(92649 call -(92645 call . arguments c"size") 1) 2)
    unknown blkStart[92659] "param" 2
    unknown blkEnd[92669] "param"(92667 call -(92664 call + 2 rank) 1)
    unknown indStart[92676] "param"(92674 call + blkEnd 1)
    unknown indEnd[92686] "param"(92684 call -(92681 call + indStart rank) 1)
    unknown offset[92693](92692 call arguments 1)
    unknown blk[92700](92698 call * rank int[13])
    unknown ind[92707](92705 call * rank int[13])
    (92715 call =(92713 call blk rank) 1)
    {
      unknown i[92753] 0
      unknown tmp[92754] "maybe param" "temp"
      (92765 'move' tmp[92754](92763 call chpl_compute_low_param_loop_bound 1(92721 call - rank 1)))
      unknown tmp[92755] "maybe param" "temp"
      (92775 'move' tmp[92755](92773 call chpl_compute_high_param_loop_bound 1(92770 call - rank 1)))
      unknown tmp[92756] "maybe param" "temp"
      (92778 'move' tmp[92756](92726 call - 1))
      ParamForLoop
      { i[92753] tmp[92754] tmp[92755] tmp[92756]
        { scopeless
          (92750 call =(92733 call blk i)(92748 call *(92740 call blk(92737 call + i 1))(92747 call arguments(92744 call + blkStart i))))
        }
      }
      label _unused_continueLabel[92758]
      label _breakLabel[92757]
    }
    {
      unknown j[92811] 0
      unknown tmp[92812] "maybe param" "temp"
      (92824 'move' tmp[92812](92822 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[92813] "maybe param" "temp"
      (92831 'move' tmp[92813](92829 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[92814] "maybe param" "temp"
      (92834 'move' tmp[92814] 1)
      ParamForLoop
      { j[92811] tmp[92812] tmp[92813] tmp[92814]
        {
          (92807 call =(92796 call ind j)(92806 call arguments(92803 call -(92800 call + indStart j) 1)))
        }
      }
      label _unused_continueLabel[92816]
      label _breakLabel[92815]
    }
    unknown ret[92847] offset int[13]
    {
      unknown i[92869] 0
      unknown tmp[92870] "maybe param" "temp"
      (92882 'move' tmp[92870](92880 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[92871] "maybe param" "temp"
      (92889 'move' tmp[92871](92887 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[92872] "maybe param" "temp"
      (92892 'move' tmp[92872] 1)
      ParamForLoop
      { i[92869] tmp[92870] tmp[92871] tmp[92872]
        {
          (92865 call += ret(92863 call *(92858 call ind i)(92862 call blk i)))
        }
      }
      label _unused_continueLabel[92874]
      label _breakLabel[92873]
    }
    (92904 return ret)
  }
  { scopeless type
    int[13]
  }
  type DefaultDist[93150] function DefaultDist[93150].dsiNewRectangularDom[92918](arg _mt[93154]:_MT[227], arg this[93152]:DefaultDist[93150], param arg rank[92915] :
  int[13], arg idxType[92920]:_any[170](?), param arg stridable[92923] :
  bool[10], arg inds[92926]:_any[170](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    const dom[92940] "const"(92939 'new'(92938 'to unmanaged class from unknown'(92937 call DefaultRectangularDom rank idxType stridable(92936 call _to_unmanaged this))))
    (92952 call(92947 call . dom c"dsiSetIndices") inds)
    (92955 return dom)
  } function DefaultDist[93150].dsiNewAssociativeDom[92963](arg _mt[93158]:_MT[227], arg this[93156]:DefaultDist[93150], arg idxType[92961]:_any[170](?), param arg parSafe[92966] :
  bool[10]) : _unknown[43] "method" "primary method" "method overrides"
  {
    { scopeless
      (92980 return(92979 'new'(92978 'to unmanaged class from unknown'(92977 call DefaultAssociativeDom idxType parSafe(92976 call _to_unmanaged this)))))
    }
  } function DefaultDist[93150].dsiNewOpaqueDom[92989](arg _mt[93162]:_MT[227], arg this[93160]:DefaultDist[93150], arg idxType[92987]:_any[170](?), param arg parSafe[92992] :
  bool[10]) : _unknown[43] "method" "primary method" "method overrides"
  {
    { scopeless
      (93005 return(93004 'new'(93003 'to unmanaged class from unknown'(93002 call DefaultOpaqueDom(92999 call _to_unmanaged this) parSafe))))
    }
  } function DefaultDist[93150].dsiNewSparseDom[93016](arg _mt[93166]:_MT[227], arg this[93164]:DefaultDist[93150], param arg rank[93013] :
  int[13], arg idxType[93018]:_any[170](?), arg dom[93021] :
  _domain) : _unknown[43] "method" "primary method" "method overrides"
  {
    { scopeless
      (93036 return(93035 'new'(93034 'to unmanaged class from unknown'(93033 call DefaultSparseDom rank idxType(93031 call _to_unmanaged this) dom))))
    }
  } function DefaultDist[93150].dsiIndexToLocale[93045](arg _mt[93170]:_MT[227], arg this[93168]:DefaultDist[93150], arg ind[93043]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93051 return(93049 call chpl_localeID_to_locale(93048 '_wide_get_locale' this)))
    }
  } function DefaultDist[93150].dsiClone[93058](arg _mt[93174]:_MT[227], arg this[93172]:DefaultDist[93150]) : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93064 return(93063 call _to_unmanaged this))
    }
  } function DefaultDist[93150].dsiAssign[93077](arg _mt[93178]:_MT[227], arg this[93176]:DefaultDist[93150], arg other[93074] :
  (93073 'to unmanaged class from unknown'(93072 'typeof' this))) : _unknown[43] "method" "primary method"
  {
  } function DefaultDist[93150].dsiEqualDMaps[93089](arg _mt[93182]:_MT[227], arg this[93180]:DefaultDist[93150], arg d[93086] :
  (93085 'to unmanaged class from unknown' DefaultDist)) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93092 return 1)
    }
  } function DefaultDist[93150].dsiEqualDMaps[93101](arg _mt[93186]:_MT[227], arg this[93184]:DefaultDist[93150], arg d[93099]:_any[170](?)) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93104 return 0)
    }
  } function DefaultDist[93150].trackDomains[93111](arg _mt[93190]:_MT[227], arg this[93188]:DefaultDist[93150]) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93114 return 0)
    }
  } function DefaultDist[93150].dsiTrackDomains[93121](arg _mt[93194]:_MT[227], arg this[93192]:DefaultDist[93150]) : _unknown[43] "method" "primary method" "method overrides"
  {
    { scopeless
      (93124 return 0)
    }
  } function DefaultDist[93150].singleton[93131](arg _mt[93198]:_MT[227], arg this[93196]:DefaultDist[93150]) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93134 return 1)
    }
  } function DefaultDist[93150].dsiIsLayout[93141](arg _mt[93202]:_MT[227], arg this[93200]:DefaultDist[93150]) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93144 return 1)
    }
  } BaseDist
  unknown defaultDist[93214] "locale private"(93213 'new'(93212 call dmap(93210 'new'(93209 'to unmanaged class from unknown'(93208 call DefaultDist)))))
  function chpl_defaultDistInitPrivate[93219]() : _unknown[43]
  {
    if(93257 call _cond_test(93226 call ==(93222 call . defaultDist c"_value") nil[38]))
    {
      const nd[93237] "const"(93236 'new'(93235 call dmap(93233 'new'(93232 'to unmanaged class from unknown'(93231 call DefaultDist)))))
      (93255 'move' defaultDist(93254 call chpl__autoCopy(93252 call(93248 call . nd c"clone"))))
    }
  }
  type DefaultRectangularDom[99677] unknown dist[93269](93268 'to unmanaged class from unknown' DefaultDist) unknown ranges[93284](93282 call * rank(93281 call range idxType(93277 call . BoundedRangeType c"bounded") stridable)) function DefaultRectangularDom[99677].linksDistribution[93289](arg _mt[99681]:_MT[227], arg this[99679]:DefaultRectangularDom[99677]) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93292 return 0)
    }
  } function DefaultRectangularDom[99677].dsiLinksDistribution[93299](arg _mt[99685]:_MT[227], arg this[99683]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "method overrides"
  {
    { scopeless
      (93302 return 0)
    }
  } function DefaultRectangularDom[99677].isDefaultRectangular[93309](arg _mt[99689]:_MT[227], arg this[99687]:DefaultRectangularDom[99677]) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93312 return 1)
    }
  } function DefaultRectangularDom[99677].isDefaultRectangular[93319](arg _mt[99693]:_MT[227], arg this[99691]:DefaultRectangularDom[99677]) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93322 return 1)
    }
  } function DefaultRectangularDom[99677].init[93331](arg _mt[99697]:_MT[227], arg this[99695]:DefaultRectangularDom[99677], param arg rank[93329]:_any[170](?), arg idxType[93333]:_any[170](?), param arg stridable[93335]:_any[170](?), arg dist[93337]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (93347 call(93340 call . super c"init") rank idxType stridable)
    (93357 call =(93353 call . this c"dist") dist)
  } function DefaultRectangularDom[99677].intIdxType[93364](arg _mt[99701]:_MT[227], arg this[99699]:DefaultRectangularDom[99677]) type : _unknown[43] "method" "primary method" "no parens"
  {
    (93370 return(93369 call chpl__idxTypeToIntIdxType idxType))
  } function DefaultRectangularDom[99677].dsiMyDist[93377](arg _mt[99705]:_MT[227], arg this[99703]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "method overrides"
  {
    (93380 return dist)
  } type _serialized_domain[93402](?) unknown rank[93386] "param" unknown idxType[93389] "type variable" unknown stridable[93392] "param" unknown dims[93395] unknown isDefaultRectangular[93398] "param" function DefaultRectangularDom[99677].chpl__serialize[93407](arg _mt[99709]:_MT[227], arg this[99707]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method"
  {
    (93420 return(93419 'new'(93418 call _serialized_domain rank idxType stridable(93416 call dsiDims) 1)))
  } function DefaultRectangularDom[99677].chpl__deserialize[93429](arg _mt[99713]:_MT[227], arg this[99711]:DefaultRectangularDom[99677], arg data[93427]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (93457 return(93456 call(93434 call . defaultDist c"newRectangularDom")(93438 call . data c"rank")(93443 call . data c"idxType")(93447 call . data c"stridable")(93453 call . data c"dims")))
  } function DefaultRectangularDom[99677].dsiDisplayRepresentation[93464](arg _mt[99717]:_MT[227], arg this[99715]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "method overrides"
  {
    (93485 call writeln "ranges = " ranges)
  } function DefaultRectangularDom[99677].dsiGetIndices[93492](arg _mt[99721]:_MT[227], arg this[99719]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method"
  {
    { scopeless
      (93495 return ranges)
    }
  } function DefaultRectangularDom[99677].dsiSetIndices[93504](arg _mt[99725]:_MT[227], arg this[99723]:DefaultRectangularDom[99677], arg x[93502]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (93508 call = ranges x)
  } function DefaultRectangularDom[99677].dsiAssignDomain[93520](arg _mt[99729]:_MT[227], arg this[99727]:DefaultRectangularDom[99677], arg rhs[93517] :
  _domain, arg lhsPrivate[93523] :
  bool[10]) : _unknown[43] "method" "primary method"
  {
    (93530 call chpl_assignDomainWithGetSetIndices this rhs)
  } function DefaultRectangularDom[99677].these_help[93541](arg _mt[99733]:_MT[227], arg this[99731]:DefaultRectangularDom[99677], param arg d[93538] :
  int[13]) : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(93777 call _cond_test(93545 call == d rank))
    {
      {
        unknown _indexOfInterest[93555] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[93556] "expr temp" "temp"
        (93565 'move' _iterator[93556](93563 call _getIterator(93551 call ranges d)))
        Defer
        {
          {
            (93582 call _freeIterator _iterator[93556])
          }
        }
        { scopeless type
          (93571 'move' _indexOfInterest[93555](93568 call iteratorIndex _iterator[93556]))
        }
        ForLoop
        {
          unknown i[93575] "index var" "insert auto destroy"
          (93577 'move' i[93575] _indexOfInterest[93555])
          { scopeless
            (93553 yield i)
          }
          label _continueLabel[93560]
          _indexOfInterest[93555]
          _iterator[93556]
        }
        label _breakLabel[93561]
      }
    }
    {
      { scopeless
        if(93773 call _cond_test(93595 call == d(93593 call - rank 1)))
        {
          {
            unknown _indexOfInterest[93648] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[93649] "expr temp" "temp"
            (93658 'move' _iterator[93649](93656 call _getIterator(93601 call ranges d)))
            Defer
            {
              {
                (93675 call _freeIterator _iterator[93649])
              }
            }
            { scopeless type
              (93664 'move' _indexOfInterest[93648](93661 call iteratorIndex _iterator[93649]))
            }
            ForLoop
            {
              unknown i[93668] "index var" "insert auto destroy"
              (93670 'move' i[93668] _indexOfInterest[93648])
              {
                unknown _indexOfInterest[93614] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[93615] "expr temp" "temp"
                (93624 'move' _iterator[93615](93622 call _getIterator(93606 call these_help rank)))
                Defer
                {
                  {
                    (93641 call _freeIterator _iterator[93615])
                  }
                }
                { scopeless type
                  (93630 'move' _indexOfInterest[93614](93627 call iteratorIndex _iterator[93615]))
                }
                ForLoop
                {
                  unknown j[93634] "index var" "insert auto destroy"
                  (93636 'move' j[93634] _indexOfInterest[93614])
                  { scopeless
                    (93612 yield(93610 call _build_tuple i j))
                  }
                  label _continueLabel[93619]
                  _indexOfInterest[93614]
                  _iterator[93615]
                }
                label _breakLabel[93620]
              }
              label _continueLabel[93653]
              _indexOfInterest[93648]
              _iterator[93649]
            }
            label _breakLabel[93654]
          }
        }
        {
          {
            unknown _indexOfInterest[93738] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[93739] "expr temp" "temp"
            (93748 'move' _iterator[93739](93746 call _getIterator(93687 call ranges d)))
            Defer
            {
              {
                (93765 call _freeIterator _iterator[93739])
              }
            }
            { scopeless type
              (93754 'move' _indexOfInterest[93738](93751 call iteratorIndex _iterator[93739]))
            }
            ForLoop
            {
              unknown i[93758] "index var" "insert auto destroy"
              (93760 'move' i[93758] _indexOfInterest[93738])
              {
                unknown _indexOfInterest[93704] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[93705] "expr temp" "temp"
                (93714 'move' _iterator[93705](93712 call _getIterator(93695 call these_help(93692 call + d 1))))
                Defer
                {
                  {
                    (93731 call _freeIterator _iterator[93705])
                  }
                }
                { scopeless type
                  (93720 'move' _indexOfInterest[93704](93717 call iteratorIndex _iterator[93705]))
                }
                ForLoop
                {
                  unknown j[93724] "index var" "insert auto destroy"
                  (93726 'move' j[93724] _indexOfInterest[93704])
                  { scopeless
                    (93702 yield(93700 call _build_tuple i(93698 'expand_tuple' j)))
                  }
                  label _continueLabel[93709]
                  _indexOfInterest[93704]
                  _iterator[93705]
                }
                label _breakLabel[93710]
              }
              label _continueLabel[93743]
              _indexOfInterest[93738]
              _iterator[93739]
            }
            label _breakLabel[93744]
          }
        }
      }
    }
  } function DefaultRectangularDom[99677].these_help[93791](arg _mt[99737]:_MT[227], arg this[99735]:DefaultRectangularDom[99677], param arg d[93788] :
  int[13], arg block[93793]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(94040 call _cond_test(93800 call == d(93797 call . block c"size")))
    {
      {
        unknown _indexOfInterest[93810] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[93811] "expr temp" "temp"
        (93820 'move' _iterator[93811](93818 call _getIterator(93806 call block d)))
        Defer
        {
          {
            (93837 call _freeIterator _iterator[93811])
          }
        }
        { scopeless type
          (93826 'move' _indexOfInterest[93810](93823 call iteratorIndex _iterator[93811]))
        }
        ForLoop
        {
          unknown i[93830] "index var" "insert auto destroy"
          (93832 'move' i[93830] _indexOfInterest[93810])
          { scopeless
            (93808 yield i)
          }
          label _continueLabel[93815]
          _indexOfInterest[93810]
          _iterator[93811]
        }
        label _breakLabel[93816]
      }
    }
    {
      { scopeless
        if(94036 call _cond_test(93853 call == d(93851 call -(93847 call . block c"size") 1)))
        {
          {
            unknown _indexOfInterest[93910] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[93911] "expr temp" "temp"
            (93920 'move' _iterator[93911](93918 call _getIterator(93859 call block d)))
            Defer
            {
              {
                (93937 call _freeIterator _iterator[93911])
              }
            }
            { scopeless type
              (93926 'move' _indexOfInterest[93910](93923 call iteratorIndex _iterator[93911]))
            }
            ForLoop
            {
              unknown i[93930] "index var" "insert auto destroy"
              (93932 'move' i[93930] _indexOfInterest[93910])
              {
                unknown _indexOfInterest[93876] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[93877] "expr temp" "temp"
                (93886 'move' _iterator[93877](93884 call _getIterator(93868 call these_help(93863 call . block c"size") block)))
                Defer
                {
                  {
                    (93903 call _freeIterator _iterator[93877])
                  }
                }
                { scopeless type
                  (93892 'move' _indexOfInterest[93876](93889 call iteratorIndex _iterator[93877]))
                }
                ForLoop
                {
                  unknown j[93896] "index var" "insert auto destroy"
                  (93898 'move' j[93896] _indexOfInterest[93876])
                  { scopeless
                    (93874 yield(93872 call _build_tuple i j))
                  }
                  label _continueLabel[93881]
                  _indexOfInterest[93876]
                  _iterator[93877]
                }
                label _breakLabel[93882]
              }
              label _continueLabel[93915]
              _indexOfInterest[93910]
              _iterator[93911]
            }
            label _breakLabel[93916]
          }
        }
        {
          {
            unknown _indexOfInterest[94001] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[94002] "expr temp" "temp"
            (94011 'move' _iterator[94002](94009 call _getIterator(93949 call block d)))
            Defer
            {
              {
                (94028 call _freeIterator _iterator[94002])
              }
            }
            { scopeless type
              (94017 'move' _indexOfInterest[94001](94014 call iteratorIndex _iterator[94002]))
            }
            ForLoop
            {
              unknown i[94021] "index var" "insert auto destroy"
              (94023 'move' i[94021] _indexOfInterest[94001])
              {
                unknown _indexOfInterest[93967] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[93968] "expr temp" "temp"
                (93977 'move' _iterator[93968](93975 call _getIterator(93958 call these_help(93954 call + d 1) block)))
                Defer
                {
                  {
                    (93994 call _freeIterator _iterator[93968])
                  }
                }
                { scopeless type
                  (93983 'move' _indexOfInterest[93967](93980 call iteratorIndex _iterator[93968]))
                }
                ForLoop
                {
                  unknown j[93987] "index var" "insert auto destroy"
                  (93989 'move' j[93987] _indexOfInterest[93967])
                  { scopeless
                    (93965 yield(93963 call _build_tuple i(93961 'expand_tuple' j)))
                  }
                  label _continueLabel[93972]
                  _indexOfInterest[93967]
                  _iterator[93968]
                }
                label _breakLabel[93973]
              }
              label _continueLabel[94006]
              _indexOfInterest[94001]
              _iterator[94002]
            }
            label _breakLabel[94007]
          }
        }
      }
    }
  } function DefaultRectangularDom[99677].these[94054](arg _mt[99741]:_MT[227], arg this[99739]:DefaultRectangularDom[99677], arg tasksPerLocale[94051] =
  dataParTasksPerLocale, arg ignoreRunning[94057] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[94061] =
  dataParMinGranularity, arg offset[94073] =
  (94072 call createTuple rank intIdxType(94070 call _cast intIdxType 0))) : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(94166 call _cond_test(94078 call == rank 1))
    {
      {
        unknown _indexOfInterest[94088] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94089] "expr temp" "temp"
        (94098 'move' _iterator[94089](94096 call _getIterator(94084 call ranges 1)))
        Defer
        {
          {
            (94115 call _freeIterator _iterator[94089])
          }
        }
        { scopeless type
          (94104 'move' _indexOfInterest[94088](94101 call iteratorIndex _iterator[94089]))
        }
        ForLoop
        {
          unknown i[94108] "index var" "insert auto destroy"
          (94110 'move' i[94108] _indexOfInterest[94088])
          { scopeless
            (94086 yield i)
          }
          label _continueLabel[94093]
          _indexOfInterest[94088]
          _iterator[94089]
        }
        label _breakLabel[94094]
      }
    }
    {
      {
        unknown _indexOfInterest[94131] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94132] "expr temp" "temp"
        (94141 'move' _iterator[94132](94139 call _getIterator(94127 call these_help 1)))
        Defer
        {
          {
            (94158 call _freeIterator _iterator[94132])
          }
        }
        { scopeless type
          (94147 'move' _indexOfInterest[94131](94144 call iteratorIndex _iterator[94132]))
        }
        ForLoop
        {
          unknown i[94151] "index var" "insert auto destroy"
          (94153 'move' i[94151] _indexOfInterest[94131])
          { scopeless
            (94129 yield i)
          }
          label _continueLabel[94136]
          _indexOfInterest[94131]
          _iterator[94132]
        }
        label _breakLabel[94137]
      }
    }
  } function DefaultRectangularDom[99677].these[94179](arg _mt[99745]:_MT[227], arg this[99743]:DefaultRectangularDom[99677], param arg tag[94176] :
  iterKind, arg tasksPerLocale[94182] =
  dataParTasksPerLocale, arg ignoreRunning[94186] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[94190] =
  dataParMinGranularity, arg offset[94202] =
  (94201 call createTuple rank intIdxType(94199 call _cast intIdxType 0))) : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(94234 call _cond_test chpl__testParFlag)
    {
      { scopeless
        (94232 call chpl__testPar "default rectangular domain standalone invoked on " ranges)
      }
    }
    if(94261 call _cond_test debugDefaultDist)
    {
      { scopeless
        (94259 call chpl_debug_writeln "*** In domain standalone code:")
      }
    }
    const numTasks[94278] "const"(94275 IfExpr (94268 call == tasksPerLocale 0) then
    { scopeless
      (94271 call . here c"maxTaskPar")
    } else
    { scopeless
      tasksPerLocale
    } )
    if(94338 call _cond_test debugDefaultDist)
    {
      (94335 call chpl_debug_writeln "    numTasks=" numTasks " (" ignoreRunning "), minIndicesPerTask=" minIndicesPerTask)
    }
    { scopeless
      const tmp[94367] "const" "no auto destroy" "no copy" "temp"(94364 IfExpr (94349 'task_get_serial') then
      { scopeless
        (94355 call _build_tuple 1(94352 call - 1))
      } else
      { scopeless
        (94363 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask ranges)
      } )
      (94374 call _check_tuple_var_decl tmp[94367] 2)
      const numChunks[94342] "const"(94368 call tmp[94367] 1)
      const parDim[94344] "const"(94371 call tmp[94367] 2)
    }
    if(94459 call _cond_test debugDefaultDist)
    {
      (94456 call chpl_debug_writeln "    numChunks=" numChunks " parDim=" parDim " ranges(" parDim ").length="(94453 call .(94452 call ranges parDim) c"length"))
    }
    if(94545 call _cond_test debugDataPar)
    {
      (94542 call chpl_debug_writeln "### numTasksPerLoc = " numTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
    }
    if(95214 call _cond_test(94551 call <= numChunks 1))
    {
      {
        unknown _indexOfInterest[94562] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[94563] "expr temp" "temp"
        (94572 'move' _iterator[94563](94570 call _getIterator(94557 call these_help 1)))
        Defer
        {
          {
            (94589 call _freeIterator _iterator[94563])
          }
        }
        { scopeless type
          (94578 'move' _indexOfInterest[94562](94575 call iteratorIndex _iterator[94563]))
        }
        ForLoop
        {
          unknown i[94582] "index var" "insert auto destroy"
          (94584 'move' i[94582] _indexOfInterest[94562])
          {
            (94559 yield i)
          }
          label _continueLabel[94567]
          _indexOfInterest[94562]
          _iterator[94563]
        }
        label _breakLabel[94568]
      }
    }
    {
      if(94620 call _cond_test debugDefaultDist)
      {
        (94617 call chpl_debug_writeln "*** DI: ranges = " ranges)
      }
      {
        unknown tmpIter[94872] "expr temp" "maybe ref" "no copy" "temp"
        (94875 'move' tmpIter[94872](94630 call #(94627 call chpl_build_low_bounded_range 0) numChunks))
        unknown isRngDomArr[95195] "maybe param" "temp"
        (95210 'move' isRngDomArr[95195](95208 call ||(95197 call isBoundedRange tmpIter[94872])(95206 call ||(95200 call isDomain tmpIter[94872])(95203 call isArray tmpIter[94872]))))
        if isRngDomArr[95195]
        {
          const _coforallCount[95062] "const" "end count" "temp"
          (95131 'move' _coforallCount[95062](95128 call _endCountAlloc 1))
          unknown numTasks[95063] "temp"
          (95115 'move' numTasks[95063](95111 call . tmpIter[94872] c"size"))
          (95106 call _upEndCount _coforallCount[95062] 1 numTasks[95063])
          (95103 call chpl_resetTaskSpawn numTasks[95063])
          unknown _indexOfInterest[95070] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[95071] "expr temp" "temp"
          (95080 'move' _iterator[95071](95078 call _getIterator tmpIter[94872]))
          Defer
          {
            {
              (95096 call _freeIterator _iterator[95071])
            }
          }
          { scopeless type
            (95085 'move' _indexOfInterest[95070](95082 call iteratorIndex _iterator[95071]))
          }
          ForLoop
          {
            unknown chunk[95089] "coforall index var" "index var" "insert auto destroy"
            (95091 'move' chunk[95089] _indexOfInterest[95070])
            {
              {
                unknown block[94878] ranges
                const len[94881] "const"(94920 IfExpr (94883 call !(94885 call .(94887 call ranges parDim) c"stridable")) then
                { scopeless
                  (94892 call .(94894 call ranges parDim) c"length")
                } else
                { scopeless
                  (94899 call *(94901 call _cast uint[107](94904 call .(94906 call ranges parDim) c"length"))(94910 call _cast uint[107](94913 call abs(94915 call .(94917 call ranges parDim) c"stride"))))
                } )
                { scopeless
                  const tmp[94923] "const" "no copy" "temp"(94925 call _computeBlock len numChunks chunk(94930 call .(94932 call ranges parDim) c"_high")(94936 call .(94938 call ranges parDim) c"_low")(94942 call .(94944 call ranges parDim) c"_low"))
                  (94949 call _check_tuple_var_decl tmp[94923] 2)
                  const lo[94952] "const"(94954 call tmp[94923] 1)
                  const hi[94957] "const"(94959 call tmp[94923] 2)
                }
                if(94963 call _cond_test(94965 call .(94967 call block parDim) c"stridable"))
                {
                  { scopeless
                    (94973 call =(94975 call block parDim)(94978 call chpl_align(94980 call chpl_by(94982 call chpl_build_bounded_range lo hi)(94986 call .(94988 call block parDim) c"stride"))(94992 call chpl__idxToInt(94994 call .(94996 call block parDim) c"alignment"))))
                  }
                }
                {
                  { scopeless
                    (95002 call =(95004 call block parDim)(95007 call chpl_build_bounded_range lo hi))
                  }
                }
                if(95012 call _cond_test debugDefaultDist)
                {
                  (95016 call chpl_debug_writeln "*** DI[" chunk "]: block = " block)
                }
                {
                  unknown _indexOfInterest[95023] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[95025] "expr temp" "temp"
                  (95027 'move' _iterator[95025](95030 call _getIterator(95032 call these_help 1 block)))
                  Defer
                  {
                    {
                      (95037 call _freeIterator _iterator[95025])
                    }
                  }
                  { scopeless type
                    (95041 'move' _indexOfInterest[95023](95044 call iteratorIndex _iterator[95025]))
                  }
                  ForLoop
                  {
                    unknown i[95049] "index var" "insert auto destroy"
                    (95051 'move' i[95049] _indexOfInterest[95023])
                    {
                      (95055 yield i)
                    }
                    label _continueLabel[95057]
                    _indexOfInterest[95023]
                    _iterator[95025]
                  }
                  label _breakLabel[95059]
                }
              }
              (95065 call _downEndCount _coforallCount[95062] nil[38])
              (95064 'coforall loop')
            }
            label _continueLabel[95075]
            _indexOfInterest[95070]
            _iterator[95071]
          }
          label _breakLabel[95076]
          Defer
          {
            {
              (95118 call _endCountFree _coforallCount[95062])
            }
          }
          (95123 call _waitEndCount _coforallCount[95062] 1 numTasks[95063])
        }
        {
          const _coforallCount[95135] "const" "end count" "temp"
          (95192 'move' _coforallCount[95135](95189 call _endCountAlloc 1))
          unknown _indexOfInterest[95143] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[95144] "expr temp" "temp"
          (95153 'move' _iterator[95144](95151 call _getIterator tmpIter[94872]))
          Defer
          {
            {
              (95169 call _freeIterator _iterator[95144])
            }
          }
          { scopeless type
            (95158 'move' _indexOfInterest[95143](95155 call iteratorIndex _iterator[95144]))
          }
          ForLoop
          {
            unknown chunk[95162] "coforall index var" "index var" "insert auto destroy"
            (95164 'move' chunk[95162] _indexOfInterest[95143])
            (95176 call _upEndCount _coforallCount[95135] 1)
            {
              {
                unknown block[94633] ranges
                const len[94681] "const"(94678 IfExpr (94644 call !(94641 call .(94640 call ranges parDim) c"stridable")) then
                { scopeless
                  (94650 call .(94649 call ranges parDim) c"length")
                } else
                { scopeless
                  (94676 call *(94661 call _cast uint[107](94657 call .(94656 call ranges parDim) c"length"))(94674 call _cast uint[107](94672 call abs(94668 call .(94667 call ranges parDim) c"stride"))))
                } )
                { scopeless
                  const tmp[94716] "const" "no copy" "temp"(94715 call _computeBlock len numChunks chunk(94698 call .(94697 call ranges parDim) c"_high")(94705 call .(94704 call ranges parDim) c"_low")(94712 call .(94711 call ranges parDim) c"_low"))
                  (94723 call _check_tuple_var_decl tmp[94716] 2)
                  const lo[94684] "const"(94717 call tmp[94716] 1)
                  const hi[94686] "const"(94720 call tmp[94716] 2)
                }
                if(94778 call _cond_test(94732 call .(94731 call block parDim) c"stridable"))
                {
                  { scopeless
                    (94764 call =(94738 call block parDim)(94762 call chpl_align(94750 call chpl_by(94741 call chpl_build_bounded_range lo hi)(94747 call .(94746 call block parDim) c"stride"))(94761 call chpl__idxToInt(94757 call .(94756 call block parDim) c"alignment"))))
                  }
                }
                {
                  { scopeless
                    (94775 call =(94770 call block parDim)(94773 call chpl_build_bounded_range lo hi))
                  }
                }
                if(94824 call _cond_test debugDefaultDist)
                {
                  (94821 call chpl_debug_writeln "*** DI[" chunk "]: block = " block)
                }
                {
                  unknown _indexOfInterest[94838] "an _indexOfInterest or chpl__followIdx variable" "temp"
                  unknown _iterator[94839] "expr temp" "temp"
                  (94848 'move' _iterator[94839](94846 call _getIterator(94833 call these_help 1 block)))
                  Defer
                  {
                    {
                      (94865 call _freeIterator _iterator[94839])
                    }
                  }
                  { scopeless type
                    (94854 'move' _indexOfInterest[94838](94851 call iteratorIndex _iterator[94839]))
                  }
                  ForLoop
                  {
                    unknown i[94858] "index var" "insert auto destroy"
                    (94860 'move' i[94858] _indexOfInterest[94838])
                    {
                      (94835 yield i)
                    }
                    label _continueLabel[94843]
                    _indexOfInterest[94838]
                    _iterator[94839]
                  }
                  label _breakLabel[94844]
                }
              }
              (95138 call _downEndCount _coforallCount[95135] nil[38])
              (95137 'coforall loop')
            }
            label _continueLabel[95148]
            _indexOfInterest[95143]
            _iterator[95144]
          }
          label _breakLabel[95149]
          Defer
          {
            {
              (95180 call _endCountFree _coforallCount[95135])
            }
          }
          (95185 call _waitEndCount _coforallCount[95135] 1)
        }
      }
    }
  }
  where {
    (94210 call == tag(94207 call . iterKind c"standalone"))
  } function DefaultRectangularDom[99677].these[95227](arg _mt[99749]:_MT[227], arg this[99747]:DefaultRectangularDom[99677], param arg tag[95224] :
  iterKind, arg tasksPerLocale[95230] =
  dataParTasksPerLocale, arg ignoreRunning[95234] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[95238] =
  dataParMinGranularity, arg offset[95250] =
  (95249 call createTuple rank intIdxType(95247 call _cast intIdxType 0))) : _unknown[43] "iterator fn" "method" "primary method"
  {
    const numSublocs[95266] "const"(95265 call(95261 call . here c"getChildCount"))
    if(97813 call _cond_test(95275 call && localeModelHasSublocales(95273 call != numSublocs 0)))
    {
      unknown dptpl[95289](95286 IfExpr (95279 call == tasksPerLocale 0) then
      { scopeless
        (95282 call . here c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale
      } )
      if(95328 call _cond_test(95294 call ! ignoreRunning))
      {
        const otherTasks[95305] "const"(95303 call -(95301 call(95297 call . here c"runningTasks")) 1)
        (95325 call = dptpl(95322 IfExpr (95312 call < otherTasks dptpl) then
        { scopeless
          (95319 call _cast int[13](95316 call - dptpl otherTasks))
        } else
        { scopeless
          1
        } ))
      }
      const numSublocTasks[95337] "const"(95336 call min numSublocs dptpl)
      { scopeless
        const tmp[95366] "const" "no auto destroy" "no copy" "temp"(95363 IfExpr (95347 'task_get_serial') then
        { scopeless
          (95353 call _build_tuple 1(95350 call - 1))
        } else
        { scopeless
          (95362 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask ranges)
        } )
        (95373 call _check_tuple_var_decl tmp[95366] 2)
        const numChunks[95340] "const"(95367 call tmp[95366] 1)
        const parDim[95342] "const"(95370 call tmp[95366] 2)
      }
      if(95403 call _cond_test debugDataParNuma)
      {
        (95400 call chpl_debug_writeln "### numSublocs = " numSublocs "\n" "### numTasksPerSubloc = " numSublocTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
      }
      if(97107 call _cond_test(95409 call == numChunks 1))
      {
        if(95509 call _cond_test(95413 call == rank 1))
        {
          (95432 yield(95430 call _build_tuple(95428 call #(95419 call chpl_build_low_bounded_range(95418 call offset 1))(95425 call .(95424 call ranges 1) c"length"))))
        }
        {
          unknown block[95442](95440 call * rank(95439 call range intIdxType))
          {
            unknown i[95472] 0
            unknown tmp[95473] "maybe param" "temp"
            (95485 'move' tmp[95473](95483 call chpl_compute_low_param_loop_bound 1 rank))
            unknown tmp[95474] "maybe param" "temp"
            (95492 'move' tmp[95474](95490 call chpl_compute_high_param_loop_bound 1 rank))
            unknown tmp[95475] "maybe param" "temp"
            (95495 'move' tmp[95475] 1)
            ParamForLoop
            { i[95472] tmp[95473] tmp[95474] tmp[95475]
              { scopeless
                (95469 call =(95453 call block i)(95467 call #(95458 call chpl_build_low_bounded_range(95457 call offset i))(95464 call .(95463 call ranges i) c"length")))
              }
            }
            label _unused_continueLabel[95477]
            label _breakLabel[95476]
          }
          (95507 yield block)
        }
      }
      {
        {
          unknown tmpIter[96283] "expr temp" "maybe ref" "no copy" "temp"
          (96286 'move' tmpIter[96283](95519 call #(95516 call chpl_build_low_bounded_range 0) numChunks))
          unknown isRngDomArr[97087] "maybe param" "temp"
          (97102 'move' isRngDomArr[97087](97100 call ||(97089 call isBoundedRange tmpIter[96283])(97098 call ||(97092 call isDomain tmpIter[96283])(97095 call isArray tmpIter[96283]))))
          if isRngDomArr[97087]
          {
            const _coforallCount[96954] "const" "end count" "temp"
            (97023 'move' _coforallCount[96954](97020 call _endCountAlloc 1))
            unknown numTasks[96955] "temp"
            (97007 'move' numTasks[96955](97003 call . tmpIter[96283] c"size"))
            (96998 call _upEndCount _coforallCount[96954] 1 numTasks[96955])
            (96995 call chpl_resetTaskSpawn numTasks[96955])
            unknown _indexOfInterest[96962] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[96963] "expr temp" "temp"
            (96972 'move' _iterator[96963](96970 call _getIterator tmpIter[96283]))
            Defer
            {
              {
                (96988 call _freeIterator _iterator[96963])
              }
            }
            { scopeless type
              (96977 'move' _indexOfInterest[96962](96974 call iteratorIndex _iterator[96963]))
            }
            ForLoop
            {
              unknown chunk[96981] "coforall index var" "index var" "insert auto destroy"
              (96983 'move' chunk[96981] _indexOfInterest[96962])
              {
                { scopeless
                  {
                    const tmp[96290] "const" "temp"
                    (96292 'move' tmp[96290](96294 'deref'(96295 '_wide_get_locale'(96300 call(96297 call . here c"getChild") chunk))))
                    {
                      if(96304 call _cond_test debugDataParNuma)
                      {
                        if(96308 call _cond_test(96310 call != chunk(96313 call chpl_getSubloc)))
                        {
                          { scopeless
                            (96317 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk ", on "(96322 call chpl_getSubloc) ") ***")
                          }
                        }
                      }
                      const numSublocTasks[96326] "const"(96347 IfExpr (96328 call < chunk(96331 call % dptpl numChunks)) then
                      { scopeless
                        (96336 call +(96338 call / dptpl numChunks) 1)
                      } else
                      { scopeless
                        (96344 call / dptpl numChunks)
                      } )
                      unknown locBlock[96349](96351 call * rank(96354 call range intIdxType))
                      {
                        unknown i[96358] 0
                        unknown tmp[96361] "maybe param" "temp"
                        (96363 'move' tmp[96361](96366 call chpl_compute_low_param_loop_bound 1 rank))
                        unknown tmp[96369] "maybe param" "temp"
                        (96371 'move' tmp[96369](96374 call chpl_compute_high_param_loop_bound 1 rank))
                        unknown tmp[96377] "maybe param" "temp"
                        (96379 'move' tmp[96377] 1)
                        ParamForLoop
                        { i[96358] tmp[96361] tmp[96369] tmp[96377]
                          { scopeless
                            (96390 call =(96392 call locBlock i)(96395 call #(96397 call chpl_build_low_bounded_range(96399 call offset i))(96402 call .(96404 call ranges i) c"length")))
                          }
                        }
                        label _unused_continueLabel[96407]
                        label _breakLabel[96409]
                      }
                      unknown followMe[96411] locBlock(96414 call * rank(96417 call range intIdxType))
                      { scopeless
                        const tmp[96421] "const" "no copy" "temp"(96423 call _computeBlock(96425 call .(96427 call locBlock parDim) c"length") numChunks chunk(96433 call .(96435 call locBlock parDim) c"_high")(96439 call .(96441 call locBlock parDim) c"_low")(96445 call .(96447 call locBlock parDim) c"_low"))
                        (96452 call _check_tuple_var_decl tmp[96421] 2)
                        const lo[96455] "const"(96457 call tmp[96421] 1)
                        const hi[96460] "const"(96462 call tmp[96421] 2)
                      }
                      (96466 call =(96468 call followMe parDim)(96471 call chpl_build_bounded_range lo hi))
                      { scopeless
                        const tmp[96475] "const" "no copy" "temp"(96477 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask followMe)
                        (96485 call _check_tuple_var_decl tmp[96475] 2)
                        const numChunks2[96488] "const"(96490 call tmp[96475] 1)
                        const parDim2[96493] "const"(96495 call tmp[96475] 2)
                      }
                      {
                        unknown tmpIter[96499] "expr temp" "maybe ref" "no copy" "temp"
                        (96501 'move' tmpIter[96499](96504 call #(96506 call chpl_build_low_bounded_range 0) numChunks2))
                        unknown isRngDomArr[96509] "maybe param" "temp"
                        (96511 'move' isRngDomArr[96509](96514 call ||(96516 call isBoundedRange tmpIter[96499])(96519 call ||(96521 call isDomain tmpIter[96499])(96524 call isArray tmpIter[96499]))))
                        if isRngDomArr[96509]
                        {
                          const _coforallCount[96528] "const" "end count" "temp"
                          (96530 'move' _coforallCount[96528](96533 call _endCountAlloc 1))
                          unknown numTasks[96535] "temp"
                          (96537 'move' numTasks[96535](96540 call . tmpIter[96499] c"size"))
                          (96544 call _upEndCount _coforallCount[96528] 1 numTasks[96535])
                          (96549 call chpl_resetTaskSpawn numTasks[96535])
                          unknown _indexOfInterest[96551] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[96553] "expr temp" "temp"
                          (96555 'move' _iterator[96553](96558 call _getIterator tmpIter[96499]))
                          Defer
                          {
                            {
                              (96562 call _freeIterator _iterator[96553])
                            }
                          }
                          { scopeless type
                            (96566 'move' _indexOfInterest[96551](96569 call iteratorIndex _iterator[96553]))
                          }
                          ForLoop
                          {
                            unknown chunk2[96574] "coforall index var" "index var" "insert auto destroy"
                            (96576 'move' chunk2[96574] _indexOfInterest[96551])
                            {
                              {
                                unknown locBlock2[96582](96584 call * rank(96587 call range intIdxType))
                                {
                                  unknown i[96591] 0
                                  unknown tmp[96594] "maybe param" "temp"
                                  (96596 'move' tmp[96594](96599 call chpl_compute_low_param_loop_bound 1 rank))
                                  unknown tmp[96602] "maybe param" "temp"
                                  (96604 'move' tmp[96602](96607 call chpl_compute_high_param_loop_bound 1 rank))
                                  unknown tmp[96610] "maybe param" "temp"
                                  (96612 'move' tmp[96610] 1)
                                  ParamForLoop
                                  { i[96591] tmp[96594] tmp[96602] tmp[96610]
                                    { scopeless
                                      (96623 call =(96625 call locBlock2 i)(96628 call chpl_build_bounded_range(96630 call .(96632 call followMe i) c"low")(96636 call .(96638 call followMe i) c"high")))
                                    }
                                  }
                                  label _unused_continueLabel[96641]
                                  label _breakLabel[96643]
                                }
                                unknown followMe2[96645] locBlock2(96648 call * rank(96651 call range intIdxType))
                                { scopeless
                                  const low[96655] "const"(96657 call .(96659 call locBlock2 parDim2) c"_low")
                                  const high[96663] "const"(96665 call .(96667 call locBlock2 parDim2) c"_high")
                                }
                                { scopeless
                                  const tmp[96672] "const" "no copy" "temp"(96674 call _computeBlock(96676 call .(96678 call locBlock2 parDim2) c"length") numChunks2 chunk2 high low low)
                                  (96688 call _check_tuple_var_decl tmp[96672] 2)
                                  const lo[96691] "const"(96693 call tmp[96672] 1)
                                  const hi[96696] "const"(96698 call tmp[96672] 2)
                                }
                                (96702 call =(96704 call followMe2 parDim2)(96707 call chpl_build_bounded_range lo hi))
                                if(96711 call _cond_test debugDataParNuma)
                                {
                                  (96715 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                                }
                                (96726 yield followMe2)
                              }
                              (96729 call _downEndCount _coforallCount[96528] nil[38])
                              (96580 'coforall loop')
                            }
                            label _continueLabel[96732]
                            _indexOfInterest[96551]
                            _iterator[96553]
                          }
                          label _breakLabel[96734]
                          Defer
                          {
                            {
                              (96738 call _endCountFree _coforallCount[96528])
                            }
                          }
                          (96742 call _waitEndCount _coforallCount[96528] 1 numTasks[96535])
                        }
                        {
                          const _coforallCount[96747] "const" "end count" "temp"
                          (96749 'move' _coforallCount[96747](96752 call _endCountAlloc 1))
                          unknown _indexOfInterest[96754] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[96756] "expr temp" "temp"
                          (96758 'move' _iterator[96756](96761 call _getIterator tmpIter[96499]))
                          Defer
                          {
                            {
                              (96765 call _freeIterator _iterator[96756])
                            }
                          }
                          { scopeless type
                            (96769 'move' _indexOfInterest[96754](96772 call iteratorIndex _iterator[96756]))
                          }
                          ForLoop
                          {
                            unknown chunk2[96777] "coforall index var" "index var" "insert auto destroy"
                            (96779 'move' chunk2[96777] _indexOfInterest[96754])
                            (96783 call _upEndCount _coforallCount[96747] 1)
                            {
                              {
                                unknown locBlock2[96789](96791 call * rank(96794 call range intIdxType))
                                {
                                  unknown i[96798] 0
                                  unknown tmp[96801] "maybe param" "temp"
                                  (96803 'move' tmp[96801](96806 call chpl_compute_low_param_loop_bound 1 rank))
                                  unknown tmp[96809] "maybe param" "temp"
                                  (96811 'move' tmp[96809](96814 call chpl_compute_high_param_loop_bound 1 rank))
                                  unknown tmp[96817] "maybe param" "temp"
                                  (96819 'move' tmp[96817] 1)
                                  ParamForLoop
                                  { i[96798] tmp[96801] tmp[96809] tmp[96817]
                                    { scopeless
                                      (96830 call =(96832 call locBlock2 i)(96835 call chpl_build_bounded_range(96837 call .(96839 call followMe i) c"low")(96843 call .(96845 call followMe i) c"high")))
                                    }
                                  }
                                  label _unused_continueLabel[96848]
                                  label _breakLabel[96850]
                                }
                                unknown followMe2[96852] locBlock2(96855 call * rank(96858 call range intIdxType))
                                { scopeless
                                  const low[96862] "const"(96864 call .(96866 call locBlock2 parDim2) c"_low")
                                  const high[96870] "const"(96872 call .(96874 call locBlock2 parDim2) c"_high")
                                }
                                { scopeless
                                  const tmp[96879] "const" "no copy" "temp"(96881 call _computeBlock(96883 call .(96885 call locBlock2 parDim2) c"length") numChunks2 chunk2 high low low)
                                  (96895 call _check_tuple_var_decl tmp[96879] 2)
                                  const lo[96898] "const"(96900 call tmp[96879] 1)
                                  const hi[96903] "const"(96905 call tmp[96879] 2)
                                }
                                (96909 call =(96911 call followMe2 parDim2)(96914 call chpl_build_bounded_range lo hi))
                                if(96918 call _cond_test debugDataParNuma)
                                {
                                  (96922 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                                }
                                (96933 yield followMe2)
                              }
                              (96936 call _downEndCount _coforallCount[96747] nil[38])
                              (96787 'coforall loop')
                            }
                            label _continueLabel[96939]
                            _indexOfInterest[96754]
                            _iterator[96756]
                          }
                          label _breakLabel[96941]
                          Defer
                          {
                            {
                              (96945 call _endCountFree _coforallCount[96747])
                            }
                          }
                          (96949 call _waitEndCount _coforallCount[96747] 1)
                        }
                      }
                    }
                  }
                }
                (96957 call _downEndCount _coforallCount[96954] nil[38])
                (96956 'coforall loop')
              }
              label _continueLabel[96967]
              _indexOfInterest[96962]
              _iterator[96963]
            }
            label _breakLabel[96968]
            Defer
            {
              {
                (97010 call _endCountFree _coforallCount[96954])
              }
            }
            (97015 call _waitEndCount _coforallCount[96954] 1 numTasks[96955])
          }
          {
            const _coforallCount[97027] "const" "end count" "temp"
            (97084 'move' _coforallCount[97027](97081 call _endCountAlloc 1))
            unknown _indexOfInterest[97035] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97036] "expr temp" "temp"
            (97045 'move' _iterator[97036](97043 call _getIterator tmpIter[96283]))
            Defer
            {
              {
                (97061 call _freeIterator _iterator[97036])
              }
            }
            { scopeless type
              (97050 'move' _indexOfInterest[97035](97047 call iteratorIndex _iterator[97036]))
            }
            ForLoop
            {
              unknown chunk[97054] "coforall index var" "index var" "insert auto destroy"
              (97056 'move' chunk[97054] _indexOfInterest[97035])
              (97068 call _upEndCount _coforallCount[97027] 1)
              {
                { scopeless
                  {
                    const tmp[96276] "const" "temp"
                    (96277 'move' tmp[96276](96274 'deref'(96273 '_wide_get_locale'(95527 call(95522 call . here c"getChild") chunk))))
                    {
                      if(95552 call _cond_test debugDataParNuma)
                      {
                        if(95546 call _cond_test(95533 call != chunk(95532 call chpl_getSubloc)))
                        {
                          { scopeless
                            (95544 call chpl_debug_writeln "*** ERROR: ON WRONG SUBLOC (should be " chunk ", on "(95542 call chpl_getSubloc) ") ***")
                          }
                        }
                      }
                      const numSublocTasks[95578] "const"(95575 IfExpr (95562 call < chunk(95560 call % dptpl numChunks)) then
                      { scopeless
                        (95569 call +(95566 call / dptpl numChunks) 1)
                      } else
                      { scopeless
                        (95573 call / dptpl numChunks)
                      } )
                      unknown locBlock[95588](95586 call * rank(95585 call range intIdxType))
                      {
                        unknown i[95617] 0
                        unknown tmp[95618] "maybe param" "temp"
                        (95630 'move' tmp[95618](95628 call chpl_compute_low_param_loop_bound 1 rank))
                        unknown tmp[95619] "maybe param" "temp"
                        (95637 'move' tmp[95619](95635 call chpl_compute_high_param_loop_bound 1 rank))
                        unknown tmp[95620] "maybe param" "temp"
                        (95640 'move' tmp[95620] 1)
                        ParamForLoop
                        { i[95617] tmp[95618] tmp[95619] tmp[95620]
                          { scopeless
                            (95614 call =(95598 call locBlock i)(95612 call #(95603 call chpl_build_low_bounded_range(95602 call offset i))(95609 call .(95608 call ranges i) c"length")))
                          }
                        }
                        label _unused_continueLabel[95622]
                        label _breakLabel[95621]
                      }
                      unknown followMe[95659] locBlock(95656 call * rank(95655 call range intIdxType))
                      { scopeless
                        const tmp[95700] "const" "no copy" "temp"(95699 call _computeBlock(95672 call .(95671 call locBlock parDim) c"length") numChunks chunk(95682 call .(95681 call locBlock parDim) c"_high")(95689 call .(95688 call locBlock parDim) c"_low")(95696 call .(95695 call locBlock parDim) c"_low"))
                        (95707 call _check_tuple_var_decl tmp[95700] 2)
                        const lo[95662] "const"(95701 call tmp[95700] 1)
                        const hi[95664] "const"(95704 call tmp[95700] 2)
                      }
                      (95720 call =(95715 call followMe parDim)(95718 call chpl_build_bounded_range lo hi))
                      { scopeless
                        const tmp[95736] "const" "no copy" "temp"(95735 call _computeChunkStuff numSublocTasks(ignoreRunning = 1) minIndicesPerTask followMe)
                        (95743 call _check_tuple_var_decl tmp[95736] 2)
                        const numChunks2[95723] "const"(95737 call tmp[95736] 1)
                        const parDim2[95725] "const"(95740 call tmp[95736] 2)
                      }
                      {
                        unknown tmpIter[95968] "expr temp" "maybe ref" "no copy" "temp"
                        (95971 'move' tmpIter[95968](95753 call #(95750 call chpl_build_low_bounded_range 0) numChunks2))
                        unknown isRngDomArr[96254] "maybe param" "temp"
                        (96269 'move' isRngDomArr[96254](96267 call ||(96256 call isBoundedRange tmpIter[95968])(96265 call ||(96259 call isDomain tmpIter[95968])(96262 call isArray tmpIter[95968]))))
                        if isRngDomArr[96254]
                        {
                          const _coforallCount[96121] "const" "end count" "temp"
                          (96190 'move' _coforallCount[96121](96187 call _endCountAlloc 1))
                          unknown numTasks[96122] "temp"
                          (96174 'move' numTasks[96122](96170 call . tmpIter[95968] c"size"))
                          (96165 call _upEndCount _coforallCount[96121] 1 numTasks[96122])
                          (96162 call chpl_resetTaskSpawn numTasks[96122])
                          unknown _indexOfInterest[96129] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[96130] "expr temp" "temp"
                          (96139 'move' _iterator[96130](96137 call _getIterator tmpIter[95968]))
                          Defer
                          {
                            {
                              (96155 call _freeIterator _iterator[96130])
                            }
                          }
                          { scopeless type
                            (96144 'move' _indexOfInterest[96129](96141 call iteratorIndex _iterator[96130]))
                          }
                          ForLoop
                          {
                            unknown chunk2[96148] "coforall index var" "index var" "insert auto destroy"
                            (96150 'move' chunk2[96148] _indexOfInterest[96129])
                            {
                              {
                                unknown locBlock2[95974](95976 call * rank(95979 call range intIdxType))
                                {
                                  unknown i[95983] 0
                                  unknown tmp[95986] "maybe param" "temp"
                                  (95988 'move' tmp[95986](95991 call chpl_compute_low_param_loop_bound 1 rank))
                                  unknown tmp[95994] "maybe param" "temp"
                                  (95996 'move' tmp[95994](95999 call chpl_compute_high_param_loop_bound 1 rank))
                                  unknown tmp[96002] "maybe param" "temp"
                                  (96004 'move' tmp[96002] 1)
                                  ParamForLoop
                                  { i[95983] tmp[95986] tmp[95994] tmp[96002]
                                    { scopeless
                                      (96015 call =(96017 call locBlock2 i)(96020 call chpl_build_bounded_range(96022 call .(96024 call followMe i) c"low")(96028 call .(96030 call followMe i) c"high")))
                                    }
                                  }
                                  label _unused_continueLabel[96033]
                                  label _breakLabel[96035]
                                }
                                unknown followMe2[96037] locBlock2(96040 call * rank(96043 call range intIdxType))
                                { scopeless
                                  const low[96047] "const"(96049 call .(96051 call locBlock2 parDim2) c"_low")
                                  const high[96055] "const"(96057 call .(96059 call locBlock2 parDim2) c"_high")
                                }
                                { scopeless
                                  const tmp[96064] "const" "no copy" "temp"(96066 call _computeBlock(96068 call .(96070 call locBlock2 parDim2) c"length") numChunks2 chunk2 high low low)
                                  (96080 call _check_tuple_var_decl tmp[96064] 2)
                                  const lo[96083] "const"(96085 call tmp[96064] 1)
                                  const hi[96088] "const"(96090 call tmp[96064] 2)
                                }
                                (96094 call =(96096 call followMe2 parDim2)(96099 call chpl_build_bounded_range lo hi))
                                if(96103 call _cond_test debugDataParNuma)
                                {
                                  (96107 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                                }
                                (96118 yield followMe2)
                              }
                              (96124 call _downEndCount _coforallCount[96121] nil[38])
                              (96123 'coforall loop')
                            }
                            label _continueLabel[96134]
                            _indexOfInterest[96129]
                            _iterator[96130]
                          }
                          label _breakLabel[96135]
                          Defer
                          {
                            {
                              (96177 call _endCountFree _coforallCount[96121])
                            }
                          }
                          (96182 call _waitEndCount _coforallCount[96121] 1 numTasks[96122])
                        }
                        {
                          const _coforallCount[96194] "const" "end count" "temp"
                          (96251 'move' _coforallCount[96194](96248 call _endCountAlloc 1))
                          unknown _indexOfInterest[96202] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
                          unknown _iterator[96203] "expr temp" "temp"
                          (96212 'move' _iterator[96203](96210 call _getIterator tmpIter[95968]))
                          Defer
                          {
                            {
                              (96228 call _freeIterator _iterator[96203])
                            }
                          }
                          { scopeless type
                            (96217 'move' _indexOfInterest[96202](96214 call iteratorIndex _iterator[96203]))
                          }
                          ForLoop
                          {
                            unknown chunk2[96221] "coforall index var" "index var" "insert auto destroy"
                            (96223 'move' chunk2[96221] _indexOfInterest[96202])
                            (96235 call _upEndCount _coforallCount[96194] 1)
                            {
                              {
                                unknown locBlock2[95762](95760 call * rank(95759 call range intIdxType))
                                {
                                  unknown i[95793] 0
                                  unknown tmp[95794] "maybe param" "temp"
                                  (95806 'move' tmp[95794](95804 call chpl_compute_low_param_loop_bound 1 rank))
                                  unknown tmp[95795] "maybe param" "temp"
                                  (95813 'move' tmp[95795](95811 call chpl_compute_high_param_loop_bound 1 rank))
                                  unknown tmp[95796] "maybe param" "temp"
                                  (95816 'move' tmp[95796] 1)
                                  ParamForLoop
                                  { i[95793] tmp[95794] tmp[95795] tmp[95796]
                                    { scopeless
                                      (95790 call =(95773 call locBlock2 i)(95788 call chpl_build_bounded_range(95778 call .(95777 call followMe i) c"low")(95785 call .(95784 call followMe i) c"high")))
                                    }
                                  }
                                  label _unused_continueLabel[95798]
                                  label _breakLabel[95797]
                                }
                                unknown followMe2[95835] locBlock2(95832 call * rank(95831 call range intIdxType))
                                { scopeless
                                  const low[95845] "const"(95842 call .(95841 call locBlock2 parDim2) c"_low")
                                  const high[95855] "const"(95852 call .(95851 call locBlock2 parDim2) c"_high")
                                }
                                { scopeless
                                  const tmp[95878] "const" "no copy" "temp"(95877 call _computeBlock(95868 call .(95867 call locBlock2 parDim2) c"length") numChunks2 chunk2 high low low)
                                  (95885 call _check_tuple_var_decl tmp[95878] 2)
                                  const lo[95858] "const"(95879 call tmp[95878] 1)
                                  const hi[95860] "const"(95882 call tmp[95878] 2)
                                }
                                (95898 call =(95893 call followMe2 parDim2)(95896 call chpl_build_bounded_range lo hi))
                                if(95961 call _cond_test debugDataParNuma)
                                {
                                  (95958 call chpl_debug_writeln "### chunk = " chunk "  chunk2 = " chunk2 "  " "followMe = " followMe "  followMe2 = " followMe2)
                                }
                                (95966 yield followMe2)
                              }
                              (96197 call _downEndCount _coforallCount[96194] nil[38])
                              (96196 'coforall loop')
                            }
                            label _continueLabel[96207]
                            _indexOfInterest[96202]
                            _iterator[96203]
                          }
                          label _breakLabel[96208]
                          Defer
                          {
                            {
                              (96239 call _endCountFree _coforallCount[96194])
                            }
                          }
                          (96244 call _waitEndCount _coforallCount[96194] 1)
                        }
                      }
                    }
                  }
                }
                (97030 call _downEndCount _coforallCount[97027] nil[38])
                (97029 'coforall loop')
              }
              label _continueLabel[97040]
              _indexOfInterest[97035]
              _iterator[97036]
            }
            label _breakLabel[97041]
            Defer
            {
              {
                (97072 call _endCountFree _coforallCount[97027])
              }
            }
            (97077 call _waitEndCount _coforallCount[97027] 1)
          }
        }
      }
    }
    {
      if(97132 call _cond_test debugDefaultDist)
      {
        { scopeless
          (97130 call chpl_debug_writeln "*** In domain/array leader code:")
        }
      }
      const numTasks[97150] "const"(97147 IfExpr (97140 call == tasksPerLocale 0) then
      { scopeless
        (97143 call . here c"maxTaskPar")
      } else
      { scopeless
        tasksPerLocale
      } )
      if(97164 call _cond_test debugDefaultDist)
      {
        { scopeless
          (97162 call chpl_debug_writeln "    numTasks=" numTasks " (" ignoreRunning "), minIndicesPerTask=" minIndicesPerTask)
        }
      }
      { scopeless
        const tmp[97194] "const" "no auto destroy" "no copy" "temp"(97191 IfExpr (97176 'task_get_serial') then
        { scopeless
          (97182 call _build_tuple 1(97179 call - 1))
        } else
        { scopeless
          (97190 call _computeChunkStuff numTasks ignoreRunning minIndicesPerTask ranges)
        } )
        (97201 call _check_tuple_var_decl tmp[97194] 2)
        const numChunks[97169] "const"(97195 call tmp[97194] 1)
        const parDim[97171] "const"(97198 call tmp[97194] 2)
      }
      if(97225 call _cond_test debugDefaultDist)
      {
        { scopeless
          (97223 call chpl_debug_writeln "    numChunks=" numChunks " parDim=" parDim " ranges(" parDim ").length="(97220 call .(97219 call ranges parDim) c"length"))
        }
      }
      if(97252 call _cond_test debugDataPar)
      {
        (97249 call chpl_debug_writeln "### numTasksPerLoc = " numTasks "\n" "### ignoreRunning = " ignoreRunning "\n" "### minIndicesPerTask = " minIndicesPerTask "\n" "### numChunks = " numChunks " (parDim = " parDim ")\n" "### nranges = " ranges)
      }
      if(97809 call _cond_test(97258 call == numChunks 1))
      {
        if(97358 call _cond_test(97262 call == rank 1))
        {
          (97281 yield(97279 call _build_tuple(97277 call #(97268 call chpl_build_low_bounded_range(97267 call offset 1))(97274 call .(97273 call ranges 1) c"length"))))
        }
        {
          unknown block[97291](97289 call * rank(97288 call range intIdxType))
          {
            unknown i[97321] 0
            unknown tmp[97322] "maybe param" "temp"
            (97334 'move' tmp[97322](97332 call chpl_compute_low_param_loop_bound 1 rank))
            unknown tmp[97323] "maybe param" "temp"
            (97341 'move' tmp[97323](97339 call chpl_compute_high_param_loop_bound 1 rank))
            unknown tmp[97324] "maybe param" "temp"
            (97344 'move' tmp[97324] 1)
            ParamForLoop
            { i[97321] tmp[97322] tmp[97323] tmp[97324]
              { scopeless
                (97318 call =(97302 call block i)(97316 call #(97307 call chpl_build_low_bounded_range(97306 call offset i))(97313 call .(97312 call ranges i) c"length")))
              }
            }
            label _unused_continueLabel[97326]
            label _breakLabel[97325]
          }
          (97356 yield block)
        }
      }
      {
        unknown locBlock[97370](97368 call * rank(97367 call range intIdxType))
        {
          unknown i[97400] 0
          unknown tmp[97401] "maybe param" "temp"
          (97413 'move' tmp[97401](97411 call chpl_compute_low_param_loop_bound 1 rank))
          unknown tmp[97402] "maybe param" "temp"
          (97420 'move' tmp[97402](97418 call chpl_compute_high_param_loop_bound 1 rank))
          unknown tmp[97403] "maybe param" "temp"
          (97423 'move' tmp[97403] 1)
          ParamForLoop
          { i[97400] tmp[97401] tmp[97402] tmp[97403]
            { scopeless
              (97397 call =(97381 call locBlock i)(97395 call #(97386 call chpl_build_low_bounded_range(97385 call offset i))(97392 call .(97391 call ranges i) c"length")))
            }
          }
          label _unused_continueLabel[97405]
          label _breakLabel[97404]
        }
        if(97456 call _cond_test debugDefaultDist)
        {
          { scopeless
            (97454 call chpl_debug_writeln "*** DI: locBlock = " locBlock)
          }
        }
        {
          unknown tmpIter[97573] "expr temp" "maybe ref" "no copy" "temp"
          (97576 'move' tmpIter[97573](97466 call #(97463 call chpl_build_low_bounded_range 0) numChunks))
          unknown isRngDomArr[97790] "maybe param" "temp"
          (97805 'move' isRngDomArr[97790](97803 call ||(97792 call isBoundedRange tmpIter[97573])(97801 call ||(97795 call isDomain tmpIter[97573])(97798 call isArray tmpIter[97573]))))
          if isRngDomArr[97790]
          {
            const _coforallCount[97657] "const" "end count" "temp"
            (97726 'move' _coforallCount[97657](97723 call _endCountAlloc 1))
            unknown numTasks[97658] "temp"
            (97710 'move' numTasks[97658](97706 call . tmpIter[97573] c"size"))
            (97701 call _upEndCount _coforallCount[97657] 1 numTasks[97658])
            (97698 call chpl_resetTaskSpawn numTasks[97658])
            unknown _indexOfInterest[97665] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97666] "expr temp" "temp"
            (97675 'move' _iterator[97666](97673 call _getIterator tmpIter[97573]))
            Defer
            {
              {
                (97691 call _freeIterator _iterator[97666])
              }
            }
            { scopeless type
              (97680 'move' _indexOfInterest[97665](97677 call iteratorIndex _iterator[97666]))
            }
            ForLoop
            {
              unknown chunk[97684] "coforall index var" "index var" "insert auto destroy"
              (97686 'move' chunk[97684] _indexOfInterest[97665])
              {
                {
                  unknown followMe[97579] locBlock(97582 call * rank(97585 call range intIdxType))
                  { scopeless
                    const tmp[97589] "const" "no copy" "temp"(97591 call _computeBlock(97593 call .(97595 call locBlock parDim) c"length") numChunks chunk(97601 call .(97603 call locBlock parDim) c"_high")(97607 call .(97609 call locBlock parDim) c"_low")(97613 call .(97615 call locBlock parDim) c"_low"))
                    (97620 call _check_tuple_var_decl tmp[97589] 2)
                    const lo[97623] "const"(97625 call tmp[97589] 1)
                    const hi[97628] "const"(97630 call tmp[97589] 2)
                  }
                  (97634 call =(97636 call followMe parDim)(97639 call chpl_build_bounded_range lo hi))
                  if(97643 call _cond_test debugDefaultDist)
                  {
                    { scopeless
                      (97648 call chpl_debug_writeln "*** DI[" chunk "]: followMe = " followMe)
                    }
                  }
                  (97654 yield followMe)
                }
                (97660 call _downEndCount _coforallCount[97657] nil[38])
                (97659 'coforall loop')
              }
              label _continueLabel[97670]
              _indexOfInterest[97665]
              _iterator[97666]
            }
            label _breakLabel[97671]
            Defer
            {
              {
                (97713 call _endCountFree _coforallCount[97657])
              }
            }
            (97718 call _waitEndCount _coforallCount[97657] 1 numTasks[97658])
          }
          {
            const _coforallCount[97730] "const" "end count" "temp"
            (97787 'move' _coforallCount[97730](97784 call _endCountAlloc 1))
            unknown _indexOfInterest[97738] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[97739] "expr temp" "temp"
            (97748 'move' _iterator[97739](97746 call _getIterator tmpIter[97573]))
            Defer
            {
              {
                (97764 call _freeIterator _iterator[97739])
              }
            }
            { scopeless type
              (97753 'move' _indexOfInterest[97738](97750 call iteratorIndex _iterator[97739]))
            }
            ForLoop
            {
              unknown chunk[97757] "coforall index var" "index var" "insert auto destroy"
              (97759 'move' chunk[97757] _indexOfInterest[97738])
              (97771 call _upEndCount _coforallCount[97730] 1)
              {
                {
                  unknown followMe[97476] locBlock(97473 call * rank(97472 call range intIdxType))
                  { scopeless
                    const tmp[97518] "const" "no copy" "temp"(97517 call _computeBlock(97490 call .(97489 call locBlock parDim) c"length") numChunks chunk(97500 call .(97499 call locBlock parDim) c"_high")(97507 call .(97506 call locBlock parDim) c"_low")(97514 call .(97513 call locBlock parDim) c"_low"))
                    (97525 call _check_tuple_var_decl tmp[97518] 2)
                    const lo[97480] "const"(97519 call tmp[97518] 1)
                    const hi[97482] "const"(97522 call tmp[97518] 2)
                  }
                  (97538 call =(97533 call followMe parDim)(97536 call chpl_build_bounded_range lo hi))
                  if(97565 call _cond_test debugDefaultDist)
                  {
                    { scopeless
                      (97563 call chpl_debug_writeln "*** DI[" chunk "]: followMe = " followMe)
                    }
                  }
                  (97571 yield followMe)
                }
                (97733 call _downEndCount _coforallCount[97730] nil[38])
                (97732 'coforall loop')
              }
              label _continueLabel[97743]
              _indexOfInterest[97738]
              _iterator[97739]
            }
            label _breakLabel[97744]
            Defer
            {
              {
                (97775 call _endCountFree _coforallCount[97730])
              }
            }
            (97780 call _waitEndCount _coforallCount[97730] 1)
          }
        }
      }
    }
  }
  where {
    (95258 call == tag(95255 call . iterKind c"leader"))
  } function DefaultRectangularDom[99677].these[97826](arg _mt[99753]:_MT[227], arg this[99751]:DefaultRectangularDom[99677], param arg tag[97823] :
  iterKind, arg followThis[97828]:_any[170](?), arg tasksPerLocale[97831] =
  dataParTasksPerLocale, arg ignoreRunning[97835] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[97839] =
  dataParMinGranularity, arg offset[97851] =
  (97850 call createTuple rank intIdxType(97848 call _cast intIdxType 0))) : _unknown[43] "iterator fn" "method" "primary method"
  {
    function anyStridable[97865](arg rangeTuple[97863]:_any[170](?), param arg i[97869] :
    int[13] =
    1) param : _unknown[43]
    {
      { scopeless
        (97907 return(97904 IfExpr (97878 call == i(97875 call . rangeTuple c"size")) then
        { scopeless
          (97884 call .(97883 call rangeTuple i) c"stridable")
        } else
        { scopeless
          (97902 call ||(97891 call .(97890 call rangeTuple i) c"stridable")(97901 call anyStridable rangeTuple(97899 call + i 1)))
        } ))
      }
    }
    if(97935 call _cond_test chpl__testParFlag)
    {
      { scopeless
        (97933 call chpl__testPar "default rectangular domain follower invoked on " followThis)
      }
    }
    if(97962 call _cond_test debugDefaultDist)
    {
      { scopeless
        (97960 call chpl_debug_writeln "In domain follower code: Following " followThis)
      }
    }
    unknown stridable[97977] "param"(97975 call ||(97968 call . this c"stridable")(97974 call anyStridable followThis))
    unknown block[97990](97988 call * rank(97987 call range(idxType = intIdxType)(stridable = stridable)))
    if(98319 call _cond_test stridable)
    {
      unknown strType[97998] "type variable"(97997 call chpl__signedType intIdxType)
      {
        unknown i[98199] 0
        unknown tmp[98200] "maybe param" "temp"
        (98212 'move' tmp[98200](98210 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[98201] "maybe param" "temp"
        (98219 'move' tmp[98201](98217 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[98202] "maybe param" "temp"
        (98222 'move' tmp[98202] 1)
        ParamForLoop
        { i[98199] tmp[98200] tmp[98201] tmp[98202]
          {
            const rStride[98013] "const"(98010 call .(98009 call ranges i) c"stride")
            { scopeless
              const rSignedStride[98021] "const"(98019 call _cast strType rStride)
              const fSignedStride[98034] "const"(98032 call _cast strType(98028 call .(98027 call followThis i) c"stride"))
            }
            if(98195 call _cond_test(98039 call > rStride 0))
            {
              const riStride[98045] "const"(98043 call _cast intIdxType rStride)
              { scopeless
                const low[98068] "const"(98066 call +(98053 call .(98052 call ranges i) c"alignedLowAsInt")(98064 call *(98060 call .(98059 call followThis i) c"low") riStride))
                const high[98090] "const"(98088 call +(98075 call .(98074 call ranges i) c"alignedLowAsInt")(98086 call *(98082 call .(98081 call followThis i) c"high") riStride))
                const stride[98100] "const"(98098 call _cast strType(98095 call * rSignedStride fSignedStride))
              }
              (98114 call =(98106 call block i)(98112 call chpl_by(98109 call chpl_build_bounded_range low high) stride))
            }
            {
              const irStride[98123] "const"(98121 call _cast intIdxType(98118 call - rStride))
              { scopeless
                const low[98146] "const"(98144 call -(98131 call .(98130 call ranges i) c"alignedHighAsInt")(98142 call *(98138 call .(98137 call followThis i) c"high") irStride))
                const high[98168] "const"(98166 call -(98153 call .(98152 call ranges i) c"alignedHighAsInt")(98164 call *(98160 call .(98159 call followThis i) c"low") irStride))
                const stride[98178] "const"(98176 call _cast strType(98173 call * rSignedStride fSignedStride))
              }
              (98192 call =(98184 call block i)(98190 call chpl_by(98187 call chpl_build_bounded_range low high) stride))
            }
          }
        }
        label _unused_continueLabel[98204]
        label _breakLabel[98203]
      }
    }
    {
      {
        unknown i[98284] 0
        unknown tmp[98285] "maybe param" "temp"
        (98297 'move' tmp[98285](98295 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[98286] "maybe param" "temp"
        (98304 'move' tmp[98286](98302 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[98287] "maybe param" "temp"
        (98307 'move' tmp[98287] 1)
        ParamForLoop
        { i[98284] tmp[98285] tmp[98286] tmp[98287]
          { scopeless
            (98281 call =(98240 call block i)(98279 call chpl_build_bounded_range(98258 call +(98245 call .(98244 call ranges i) c"_low")(98256 call _cast intIdxType(98252 call .(98251 call followThis i) c"low")))(98277 call +(98264 call .(98263 call ranges i) c"_low")(98275 call _cast intIdxType(98271 call .(98270 call followThis i) c"high")))))
          }
        }
        label _unused_continueLabel[98289]
        label _breakLabel[98288]
      }
    }
    if(98420 call _cond_test(98325 call == rank 1))
    {
      {
        unknown _indexOfInterest[98339] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[98340] "expr temp" "temp"
        (98348 'move' _iterator[98340](98331 call _getIteratorZip block))
        Defer
        {
          {
            (98364 call _freeIterator _iterator[98340])
          }
        }
        { scopeless type
          (98353 'move' _indexOfInterest[98339](98350 call iteratorIndex _iterator[98340]))
        }
        ForLoop
        {
          unknown i[98357] "index var" "insert auto destroy"
          (98359 'move' i[98357] _indexOfInterest[98339])
          {
            (98336 yield(98335 call chpl_intToIdx i))
          }
          label _continueLabel[98344]
          _indexOfInterest[98339]
          _iterator[98340]
        }
        label _breakLabel[98345]
      }
    }
    {
      {
        unknown _indexOfInterest[98385] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[98386] "expr temp" "temp"
        (98395 'move' _iterator[98386](98393 call _getIterator(98377 call these_help 1 block)))
        Defer
        {
          {
            (98412 call _freeIterator _iterator[98386])
          }
        }
        { scopeless type
          (98401 'move' _indexOfInterest[98385](98398 call iteratorIndex _iterator[98386]))
        }
        ForLoop
        {
          unknown i[98405] "index var" "insert auto destroy"
          (98407 'move' i[98405] _indexOfInterest[98385])
          {
            (98382 yield(98381 call chpl_intToIdx i))
          }
          label _continueLabel[98390]
          _indexOfInterest[98385]
          _iterator[98386]
        }
        label _breakLabel[98391]
      }
    }
  }
  where {
    (97859 call == tag(97856 call . iterKind c"follower"))
  } function DefaultRectangularDom[99677].dsiMember[98436](arg _mt[99757]:_MT[227], arg this[99755]:DefaultRectangularDom[99677], arg ind[98433] :
  (98431 call * rank idxType)) : _unknown[43] "method" "primary method"
  {
    {
      unknown i[98465] 0
      unknown tmp[98466] "maybe param" "temp"
      (98478 'move' tmp[98466](98476 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[98467] "maybe param" "temp"
      (98485 'move' tmp[98467](98483 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[98468] "maybe param" "temp"
      (98488 'move' tmp[98468] 1)
      ParamForLoop
      { i[98465] tmp[98466] tmp[98467] tmp[98468]
        { scopeless
          if(98460 call _cond_test(98455 call !(98454 call(98446 call .(98445 call ranges i) c"contains")(98452 call ind i))))
          {
            { scopeless
              (98458 return 0)
            }
          }
        }
      }
      label _unused_continueLabel[98470]
      label _breakLabel[98469]
    }
    (98501 return 1)
  } function DefaultRectangularDom[99677].dsiIndexOrder[98514](arg _mt[99761]:_MT[227], arg this[99759]:DefaultRectangularDom[99677], arg ind[98511] :
  (98509 call * rank idxType)) : _unknown[43] "method" "primary method"
  {
    unknown totOrder[98517] intIdxType
    unknown blk[98523] 1 intIdxType
    {
      unknown d[98590] 0
      unknown tmp[98591] "maybe param" "temp"
      (98602 'move' tmp[98591](98600 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[98592] "maybe param" "temp"
      (98609 'move' tmp[98592](98607 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[98593] "maybe param" "temp"
      (98612 'move' tmp[98593](98531 call - 1))
      ParamForLoop
      { d[98590] tmp[98591] tmp[98592] tmp[98593]
        {
          const orderD[98550] "const"(98549 call(98541 call .(98538 call ranges d) c"indexOrder")(98547 call ind d))
          if(98566 call _cond_test(98561 call == orderD(98559 call _cast intIdxType(98556 call - 1))))
          {
            { scopeless
              (98564 return orderD)
            }
          }
          (98576 call += totOrder(98574 call * orderD blk))
          (98587 call *= blk(98584 call .(98583 call ranges d) c"length"))
        }
      }
      label _unused_continueLabel[98595]
      label _breakLabel[98594]
    }
    (98624 return totOrder)
  } function DefaultRectangularDom[99677].dsiDims[98630](arg _mt[99765]:_MT[227], arg this[99763]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method"
  {
    { scopeless
      (98633 return ranges)
    }
  } function DefaultRectangularDom[99677].dsiDim[98644](arg _mt[99769]:_MT[227], arg this[99767]:DefaultRectangularDom[99677], arg d[98641] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    { scopeless
      (98650 return(98649 call ranges d))
    }
  } function DefaultRectangularDom[99677].dsiDim[98661](arg _mt[99773]:_MT[227], arg this[99771]:DefaultRectangularDom[99677], param arg d[98658] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    { scopeless
      (98667 return(98666 call ranges d))
    }
  } function DefaultRectangularDom[99677].dsiNumIndices[98674](arg _mt[99777]:_MT[227], arg this[99775]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    unknown sum[98680](98678 call _cast intIdxType 1)
    {
      unknown i[98699] 0
      unknown tmp[98700] "maybe param" "temp"
      (98712 'move' tmp[98700](98710 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[98701] "maybe param" "temp"
      (98719 'move' tmp[98701](98717 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[98702] "maybe param" "temp"
      (98722 'move' tmp[98702] 1)
      ParamForLoop
      { i[98699] tmp[98700] tmp[98701] tmp[98702]
        { scopeless
          (98696 call *= sum(98693 call .(98692 call ranges i) c"length"))
        }
      }
      label _unused_continueLabel[98704]
      label _breakLabel[98703]
    }
    (98734 return sum)
  } function DefaultRectangularDom[99677].dsiLow[98740](arg _mt[99781]:_MT[227], arg this[99779]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    if(98819 call _cond_test(98744 call == rank 1))
    {
      (98753 return(98750 call .(98749 call ranges 1) c"low"))
    }
    {
      unknown result[98760](98758 call * rank idxType)
      {
        unknown i[98782] 0
        unknown tmp[98783] "maybe param" "temp"
        (98795 'move' tmp[98783](98793 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[98784] "maybe param" "temp"
        (98802 'move' tmp[98784](98800 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[98785] "maybe param" "temp"
        (98805 'move' tmp[98785] 1)
        ParamForLoop
        { i[98782] tmp[98783] tmp[98784] tmp[98785]
          { scopeless
            (98779 call =(98771 call result i)(98776 call .(98775 call ranges i) c"low"))
          }
        }
        label _unused_continueLabel[98787]
        label _breakLabel[98786]
      }
      (98817 return result)
    }
  } function DefaultRectangularDom[99677].dsiHigh[98828](arg _mt[99785]:_MT[227], arg this[99783]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    if(98907 call _cond_test(98832 call == rank 1))
    {
      (98841 return(98838 call .(98837 call ranges 1) c"high"))
    }
    {
      unknown result[98848](98846 call * rank idxType)
      {
        unknown i[98870] 0
        unknown tmp[98871] "maybe param" "temp"
        (98883 'move' tmp[98871](98881 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[98872] "maybe param" "temp"
        (98890 'move' tmp[98872](98888 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[98873] "maybe param" "temp"
        (98893 'move' tmp[98873] 1)
        ParamForLoop
        { i[98870] tmp[98871] tmp[98872] tmp[98873]
          { scopeless
            (98867 call =(98859 call result i)(98864 call .(98863 call ranges i) c"high"))
          }
        }
        label _unused_continueLabel[98875]
        label _breakLabel[98874]
      }
      (98905 return result)
    }
  } function DefaultRectangularDom[99677].dsiAlignedLow[98916](arg _mt[99789]:_MT[227], arg this[99787]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    if(98995 call _cond_test(98920 call == rank 1))
    {
      (98929 return(98926 call .(98925 call ranges 1) c"alignedLow"))
    }
    {
      unknown result[98936](98934 call * rank idxType)
      {
        unknown i[98958] 0
        unknown tmp[98959] "maybe param" "temp"
        (98971 'move' tmp[98959](98969 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[98960] "maybe param" "temp"
        (98978 'move' tmp[98960](98976 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[98961] "maybe param" "temp"
        (98981 'move' tmp[98961] 1)
        ParamForLoop
        { i[98958] tmp[98959] tmp[98960] tmp[98961]
          { scopeless
            (98955 call =(98947 call result i)(98952 call .(98951 call ranges i) c"alignedLow"))
          }
        }
        label _unused_continueLabel[98963]
        label _breakLabel[98962]
      }
      (98993 return result)
    }
  } function DefaultRectangularDom[99677].dsiAlignedHigh[99004](arg _mt[99793]:_MT[227], arg this[99791]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99083 call _cond_test(99008 call == rank 1))
    {
      (99017 return(99014 call .(99013 call ranges 1) c"alignedHigh"))
    }
    {
      unknown result[99024](99022 call * rank idxType)
      {
        unknown i[99046] 0
        unknown tmp[99047] "maybe param" "temp"
        (99059 'move' tmp[99047](99057 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[99048] "maybe param" "temp"
        (99066 'move' tmp[99048](99064 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[99049] "maybe param" "temp"
        (99069 'move' tmp[99049] 1)
        ParamForLoop
        { i[99046] tmp[99047] tmp[99048] tmp[99049]
          { scopeless
            (99043 call =(99035 call result i)(99040 call .(99039 call ranges i) c"alignedHigh"))
          }
        }
        label _unused_continueLabel[99051]
        label _breakLabel[99050]
      }
      (99081 return result)
    }
  } function DefaultRectangularDom[99677].dsiStride[99092](arg _mt[99797]:_MT[227], arg this[99795]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99174 call _cond_test(99096 call == rank 1))
    {
      (99105 return(99102 call .(99101 call ranges 1) c"stride"))
    }
    {
      unknown result[99115](99113 call * rank(99112 call chpl__signedType intIdxType))
      {
        unknown i[99137] 0
        unknown tmp[99138] "maybe param" "temp"
        (99150 'move' tmp[99138](99148 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[99139] "maybe param" "temp"
        (99157 'move' tmp[99139](99155 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[99140] "maybe param" "temp"
        (99160 'move' tmp[99140] 1)
        ParamForLoop
        { i[99137] tmp[99138] tmp[99139] tmp[99140]
          { scopeless
            (99134 call =(99126 call result i)(99131 call .(99130 call ranges i) c"stride"))
          }
        }
        label _unused_continueLabel[99142]
        label _breakLabel[99141]
      }
      (99172 return result)
    }
  } function DefaultRectangularDom[99677].dsiAlignment[99183](arg _mt[99801]:_MT[227], arg this[99799]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99262 call _cond_test(99187 call == rank 1))
    {
      (99196 return(99193 call .(99192 call ranges 1) c"alignment"))
    }
    {
      unknown result[99203](99201 call * rank idxType)
      {
        unknown i[99225] 0
        unknown tmp[99226] "maybe param" "temp"
        (99238 'move' tmp[99226](99236 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[99227] "maybe param" "temp"
        (99245 'move' tmp[99227](99243 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[99228] "maybe param" "temp"
        (99248 'move' tmp[99228] 1)
        ParamForLoop
        { i[99225] tmp[99226] tmp[99227] tmp[99228]
          { scopeless
            (99222 call =(99214 call result i)(99219 call .(99218 call ranges i) c"alignment"))
          }
        }
        label _unused_continueLabel[99230]
        label _breakLabel[99229]
      }
      (99260 return result)
    }
  } function DefaultRectangularDom[99677].dsiFirst[99271](arg _mt[99805]:_MT[227], arg this[99803]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99350 call _cond_test(99275 call == rank 1))
    {
      (99284 return(99281 call .(99280 call ranges 1) c"first"))
    }
    {
      unknown result[99291](99289 call * rank idxType)
      {
        unknown i[99313] 0
        unknown tmp[99314] "maybe param" "temp"
        (99326 'move' tmp[99314](99324 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[99315] "maybe param" "temp"
        (99333 'move' tmp[99315](99331 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[99316] "maybe param" "temp"
        (99336 'move' tmp[99316] 1)
        ParamForLoop
        { i[99313] tmp[99314] tmp[99315] tmp[99316]
          { scopeless
            (99310 call =(99302 call result i)(99307 call .(99306 call ranges i) c"first"))
          }
        }
        label _unused_continueLabel[99318]
        label _breakLabel[99317]
      }
      (99348 return result)
    }
  } function DefaultRectangularDom[99677].dsiLast[99359](arg _mt[99809]:_MT[227], arg this[99807]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method" "no parens"
  {
    if(99438 call _cond_test(99363 call == rank 1))
    {
      (99372 return(99369 call .(99368 call ranges 1) c"last"))
    }
    {
      unknown result[99379](99377 call * rank idxType)
      {
        unknown i[99401] 0
        unknown tmp[99402] "maybe param" "temp"
        (99414 'move' tmp[99402](99412 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[99403] "maybe param" "temp"
        (99421 'move' tmp[99403](99419 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[99404] "maybe param" "temp"
        (99424 'move' tmp[99404] 1)
        ParamForLoop
        { i[99401] tmp[99402] tmp[99403] tmp[99404]
          { scopeless
            (99398 call =(99390 call result i)(99395 call .(99394 call ranges i) c"last"))
          }
        }
        label _unused_continueLabel[99406]
        label _breakLabel[99405]
      }
      (99436 return result)
    }
  } function DefaultRectangularDom[99677].dsiBuildArray[99449](arg _mt[99813]:_MT[227], arg this[99811]:DefaultRectangularDom[99677], arg eltType[99447]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (99469 return(99468 'new'(99467 'to unmanaged class from unknown'(99466 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(dom =(99464 call _to_unmanaged this))))))
  } function DefaultRectangularDom[99677].dsiBuildArrayWith[99478](arg _mt[99817]:_MT[227], arg this[99815]:DefaultRectangularDom[99677], arg eltType[99476]:_any[170](?), arg data[99484] :
  (99483 call _ddata eltType), arg allocSize[99488] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    unknown allocRange[99507](99505 call #(99502 call chpl_build_low_bounded_range(99499 call .(99498 call ranges 1) c"low")) allocSize)(99494 call range idxType)
    (99533 return(99532 'new'(99531 'to unmanaged class from unknown'(99530 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable = stridable)(dom =(99524 call _to_unmanaged this))(data = data)(dataAllocRange = allocRange)))))
  } function DefaultRectangularDom[99677].dsiLocalSlice[99541](arg _mt[99821]:_MT[227], arg this[99819]:DefaultRectangularDom[99677], arg ranges[99539]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (99563 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  } function DefaultRectangularDom[99677].dsiTargetLocales[99570](arg _mt[99825]:_MT[227], arg this[99823]:DefaultRectangularDom[99677]) : _unknown[43] "method" "primary method"
  {
    (99579 return(99577 call chpl__buildArrayExpr(99574 call chpl_localeID_to_locale(99573 '_wide_get_locale' this))))
  } function DefaultRectangularDom[99677].dsiHasSingleLocalSubdomain[99586](arg _mt[99829]:_MT[227], arg this[99827]:DefaultRectangularDom[99677]) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (99589 return 1)
    }
  } function DefaultRectangularDom[99677].dsiLocalSubdomain[99600](arg _mt[99833]:_MT[227], arg this[99831]:DefaultRectangularDom[99677], arg loc[99597] :
  locale[26]) : _unknown[43] "method" "primary method"
  {
    if(99633 call _cond_test(99607 call ==(99604 call chpl_localeID_to_locale(99603 '_wide_get_locale' this)) loc))
    {
      (99616 return(99615 call _getDomain(99613 call _to_unmanaged this)))
    }
    {
      unknown a[99626](99624 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (99631 return a)
    }
  } function DefaultRectangularDom[99677].dsiLocalSubdomains[99646](arg _mt[99837]:_MT[227], arg this[99835]:DefaultRectangularDom[99677], arg loc[99643] :
  locale[26]) : _unknown[43] "iterator fn" "method" "primary method"
  {
    (99652 yield(99651 call dsiLocalSubdomain loc))
  } function DefaultRectangularDom[99677].chpl_intToIdx[99661](arg _mt[99841]:_MT[227], arg this[99839]:DefaultRectangularDom[99677], arg i[99659]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    (99671 return(99670 call chpl__intToIdx(99665 call . this c"idxType") i))
  } BaseRectangularDom
  function chpl__intToIdx[99848](arg idxType[99846]:_any[170](?), arg i[99851] :
  integral, arg j[99855]:_any[170](?) ...) : _unknown[43] "inline"
  {
    const first[99863] "const"(99862 call chpl__intToIdx idxType i)
    const rest[99873] "const"(99872 call chpl__intToIdx idxType(99871 'expand_tuple' j))
    (99882 return(99880 call _build_tuple first(99878 'expand_tuple' rest)))
  }
  function chpl__intToIdx[99890](arg idxType[99888]:_any[170](?), arg i[99893] :
  integral, arg j[99897] :
  integral) : _unknown[43] "inline"
  {
    (99913 return(99911 call _build_tuple(99904 call chpl__intToIdx idxType i)(99909 call chpl__intToIdx idxType j)))
  }
  function chpl__intToIdx[99922](arg idxType[99920]:_any[170](?), arg i[99925] :
  _tuple) : _unknown[43] "inline"
  {
    (99934 return(99933 call chpl__intToIdx idxType(99932 'expand_tuple' i)))
  }
  type _remoteAccessData[100096](?) unknown eltType[99940] "type variable" unknown rank[99944] "param" int[13] unknown idxType[99947] "type variable" unknown stridable[99951] "param" bool[10] unknown blkChanged[99956] "param" 0 bool[10] unknown off[99963](99961 call * rank idxType) unknown blk[99973](99971 call * rank(99970 call chpl__idxTypeToIntIdxType idxType)) unknown str[99986](99984 call * rank(99983 call chpl__signedType(99981 call chpl__idxTypeToIntIdxType idxType))) unknown origin[99993](99992 call chpl__idxTypeToIntIdxType idxType) unknown factoredOffs[100000](99999 call chpl__idxTypeToIntIdxType idxType) unknown data[100007](100006 call _ddata eltType) unknown shiftedData[100014](100013 call _ddata eltType) function _remoteAccessData[100096](?).theData[100019](arg _mt[100100]:_MT[227], arg this[100098]:_remoteAccessData[100096](?)) ref : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    if(100030 call _cond_test stridable)
    {
      (100023 return data)
    }
    {
      (100027 return shiftedData)
    }
  } function _remoteAccessData[100096](?).getDataElem[100041](arg _mt[100104]:_MT[227], arg this[100102]:_remoteAccessData[100096](?), arg i[100039]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    if(100058 call _cond_test stridable)
    {
      (100048 return(100047 call dataElem i))
    }
    {
      (100055 return(100054 call shiftedDataElem i))
    }
  } function _remoteAccessData[100096](?).dataElem[100069](arg _mt[100108]:_MT[227], arg this[100106]:_remoteAccessData[100096](?), arg i[100067]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    (100075 return(100074 call data i))
  } function _remoteAccessData[100096](?).shiftedDataElem[100084](arg _mt[100112]:_MT[227], arg this[100110]:_remoteAccessData[100096](?), arg i[100082]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      (100090 return(100089 call shiftedData i))
    }
  }
  function _unknown[43].getDataIndex[100122](arg _mt[100127]:_MT[227], arg this[100124] :
  _remoteAccessData, arg ind[100119] :
  idxType) : _unknown[43] "inline" "method"
  {
    (100141 return(100140 call(100132 call . this c"getDataIndex")(100138 call chpl__tuplify ind)))
  }
  function _unknown[43].getDataIndex[100156](arg _mt[100161]:_MT[227], arg this[100158] :
  _remoteAccessData, arg ind[100153] :
  (100151 call * rank idxType)) : _unknown[43] "inline" "method"
  {
    if(100543 call _cond_test stridable)
    {
      unknown sum[100165] origin
      {
        unknown i[100214] 0
        unknown tmp[100215] "maybe param" "temp"
        (100227 'move' tmp[100215](100225 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[100216] "maybe param" "temp"
        (100234 'move' tmp[100216](100232 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[100217] "maybe param" "temp"
        (100237 'move' tmp[100217] 1)
        ParamForLoop
        { i[100214] tmp[100215] tmp[100216] tmp[100217]
          { scopeless
            (100211 call += sum(100209 call /(100194 call *(100188 call -(100180 call chpl__idxToInt(100178 call ind i))(100187 call chpl__idxToInt(100185 call off i)))(100193 call blk i))(100207 call _cast(100206 call chpl__idxTypeToIntIdxType idxType)(100202 call abs(100200 call str i)))))
          }
        }
        label _unused_continueLabel[100219]
        label _breakLabel[100218]
      }
      (100249 return sum)
    }
    {
      if(100538 call _cond_test(100256 call &&(100253 call == rank 1) earlyShiftData))
      {
        if(100285 call _cond_test blkChanged)
        {
          (100272 return(100270 call *(100265 call chpl__idxToInt(100263 call ind 1))(100269 call blk 1)))
        }
        {
          (100282 return(100281 call chpl__idxToInt(100279 call ind 1)))
        }
      }
      {
        unknown sum[100302](100299 IfExpr  earlyShiftData then
        { scopeless
          (100296 call _cast(100295 call chpl__idxTypeToIntIdxType idxType) 0)
        } else
        { scopeless
          origin
        } )
        if(100518 call _cond_test blkChanged)
        {
          {
            unknown i[100329] 0
            unknown tmp[100330] "maybe param" "temp"
            (100342 'move' tmp[100330](100340 call chpl_compute_low_param_loop_bound 1 rank))
            unknown tmp[100331] "maybe param" "temp"
            (100349 'move' tmp[100331](100347 call chpl_compute_high_param_loop_bound 1 rank))
            unknown tmp[100332] "maybe param" "temp"
            (100352 'move' tmp[100332] 1)
            ParamForLoop
            { i[100329] tmp[100330] tmp[100331] tmp[100332]
              {
                (100325 call += sum(100323 call *(100318 call chpl__idxToInt(100316 call ind i))(100322 call blk i)))
              }
            }
            label _unused_continueLabel[100334]
            label _breakLabel[100333]
          }
        }
        {
          if(100513 call _cond_test(100369 call == storageOrder(100366 call . ArrayStorageOrder c"RMO")))
          {
            {
              unknown i[100396] 0
              unknown tmp[100397] "maybe param" "temp"
              (100409 'move' tmp[100397](100407 call chpl_compute_low_param_loop_bound 1(100374 call - rank 1)))
              unknown tmp[100398] "maybe param" "temp"
              (100419 'move' tmp[100398](100417 call chpl_compute_high_param_loop_bound 1(100414 call - rank 1)))
              unknown tmp[100399] "maybe param" "temp"
              (100422 'move' tmp[100399] 1)
              ParamForLoop
              { i[100396] tmp[100397] tmp[100398] tmp[100399]
                {
                  (100392 call += sum(100390 call *(100385 call chpl__idxToInt(100383 call ind i))(100389 call blk i)))
                }
              }
              label _unused_continueLabel[100401]
              label _breakLabel[100400]
            }
            (100442 call += sum(100441 call chpl__idxToInt(100439 call ind rank)))
          }
          {
            {
              unknown i[100467] 0
              unknown tmp[100468] "maybe param" "temp"
              (100480 'move' tmp[100468](100478 call chpl_compute_low_param_loop_bound 2 rank))
              unknown tmp[100469] "maybe param" "temp"
              (100487 'move' tmp[100469](100485 call chpl_compute_high_param_loop_bound 2 rank))
              unknown tmp[100470] "maybe param" "temp"
              (100490 'move' tmp[100470] 1)
              ParamForLoop
              { i[100467] tmp[100468] tmp[100469] tmp[100470]
                {
                  (100463 call += sum(100461 call *(100456 call chpl__idxToInt(100454 call ind i))(100460 call blk i)))
                }
              }
              label _unused_continueLabel[100472]
              label _breakLabel[100471]
            }
            (100510 call += sum(100509 call chpl__idxToInt(100507 call ind 1)))
          }
        }
        if(100530 call _cond_test(100523 call ! earlyShiftData))
        {
          { scopeless
            (100527 call -= sum factoredOffs)
          }
        }
        (100536 return sum)
      }
    }
  }
  function _unknown[43].computeFactoredOffs[100553](arg _mt[100558]:_MT[227], arg this[100555] :
  _remoteAccessData) : _unknown[43] "method"
  {
    (100562 call = factoredOffs 0)
    {
      unknown i[100591] 0
      unknown tmp[100592] "maybe param" "temp"
      (100604 'move' tmp[100592](100602 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[100593] "maybe param" "temp"
      (100611 'move' tmp[100593](100609 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[100594] "maybe param" "temp"
      (100614 'move' tmp[100594] 1)
      ParamForLoop
      { i[100591] tmp[100592] tmp[100593] tmp[100594]
        {
          (100587 call = factoredOffs(100585 call + factoredOffs(100583 call *(100575 call blk i)(100582 call chpl__idxToInt(100580 call off i)))))
        }
      }
      label _unused_continueLabel[100596]
      label _breakLabel[100595]
    }
  }
  function _unknown[43].initShiftedData[100630](arg _mt[100635]:_MT[227], arg this[100632] :
  _remoteAccessData) : _unknown[43] "method"
  {
    if(100688 call _cond_test(100641 call && earlyShiftData(100639 call ! stridable)))
    {
      unknown idxSignedType[100650] "type variable"(100649 call chpl__signedType(100647 call chpl__idxTypeToIntIdxType idxType))
      const shiftDist[100675] "const"(100672 IfExpr (100657 call isIntType idxType) then
      { scopeless
        (100660 call - origin factoredOffs)
      } else
      { scopeless
        (100670 call -(100664 call _cast idxSignedType origin)(100668 call _cast idxSignedType factoredOffs))
      } )
      (100685 call = shiftedData(100684 call _ddata_shift eltType data shiftDist))
    }
  }
  function _unknown[43].strideAlignUp[100700](arg _mt[100707]:_MT[227], arg this[100704] :
  _remoteAccessData, arg lo[100698]:_any[170](?), arg r[100702]:_any[170](?)) : _unknown[43] "method"
  {
    { scopeless
      (100761 return(100759 call +(100710 call . r c"low")(100757 call *(100745 call /(100733 call -(100730 call +(100718 call - lo(100715 call . r c"low"))(100728 call _cast idxType(100726 call abs(100722 call . r c"stride")))) 1)(100743 call _cast idxType(100741 call abs(100737 call . r c"stride"))))(100755 call _cast idxType(100753 call abs(100749 call . r c"stride"))))))
    }
  }
  function _unknown[43].strideAlignDown[100771](arg _mt[100778]:_MT[227], arg this[100775] :
  _remoteAccessData, arg hi[100769]:_any[170](?), arg r[100773]:_any[170](?)) : _unknown[43] "method"
  {
    { scopeless
      (100802 return(100800 call - hi(100798 call %(100786 call - hi(100783 call . r c"low"))(100796 call _cast idxType(100794 call abs(100790 call . r c"stride"))))))
    }
  }
  function _unknown[43].initDataFrom[100814](arg _mt[100819]:_MT[227], arg this[100816] :
  _remoteAccessData, arg other[100811] :
  _remoteAccessData) : _unknown[43] "method"
  {
    (100831 call =(100824 call . this c"data")(100828 call . other c"data"))
  }
  function _unknown[43].toSlice[100842](arg _mt[100847]:_MT[227], arg this[100844] :
  _remoteAccessData, arg newDom[100840]:_any[170](?)) : _unknown[43] "method"
  {
    (100861 call compilerAssert(100858 call ==(100851 call . this c"rank")(100855 call . newDom c"rank")))
    unknown rad[100892](100891 call _remoteAccessData eltType(100868 call . newDom c"rank")(100872 call . newDom c"idxType")(100876 call . newDom c"stridable")(100889 call ||(100880 call . newDom c"stridable")(100886 call . this c"blkChanged")))
    (100903 call(100898 call . rad c"initDataFrom") this)
    (100926 call =(100908 call . rad c"shiftedData")(100923 IfExpr (100912 call . newDom c"stridable") then
    { scopeless
      (100916 call . this c"data")
    } else
    { scopeless
      (100920 call . this c"shiftedData")
    } ))
    (100945 call =(100932 call . rad c"origin")(100943 call _cast(100940 call . newDom c"idxType")(100936 call . this c"origin")))
    (100963 call =(100951 call . rad c"off")(100962 call chpl__tuplify(100958 call . newDom c"dsiLow")))
    (100981 call =(100969 call . rad c"str")(100980 call chpl__tuplify(100976 call . newDom c"dsiStride")))
    {
      unknown i[101128] 0
      unknown tmp[101129] "maybe param" "temp"
      (101141 'move' tmp[101129](101139 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[101130] "maybe param" "temp"
      (101148 'move' tmp[101130](101146 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[101131] "maybe param" "temp"
      (101151 'move' tmp[101131] 1)
      ParamForLoop
      { i[101128] tmp[101129] tmp[101130] tmp[101131]
        {
          const shift[101044] "const"(101042 call /(101024 call *(100996 call(100991 call . this c"blk") i)(101022 call -(101011 call chpl__idxToInt(101007 call .(101006 call(101001 call . newDom c"dsiDim") i) c"low"))(101021 call chpl__idxToInt(101019 call(101014 call . this c"off") i))))(101040 call _cast(101037 call . rad c"idxType")(101035 call abs(101033 call(101028 call . this c"str") i))))
          if(101076 call _cond_test(101056 call >(101054 call(101049 call . this c"str") i) 0))
          {
            (101063 call +=(101059 call . rad c"origin") shift)
          }
          {
            (101072 call -=(101068 call . rad c"origin") shift)
          }
          const mult[101105] "const"(101103 call _cast(101100 call . rad c"idxType")(101097 call /(101087 call .(101086 call(101081 call . newDom c"dsiDim") i) c"stride")(101096 call(101091 call . this c"str") i)))
          (101125 call =(101114 call(101109 call . rad c"blk") i)(101123 call *(101121 call(101116 call . this c"blk") i) mult))
        }
      }
      label _unused_continueLabel[101133]
      label _breakLabel[101132]
    }
    (101169 call(101165 call . rad c"computeFactoredOffs"))
    (101178 call(101174 call . rad c"initShiftedData"))
    (101181 return rad)
  }
  function _unknown[43].toReindex[101190](arg _mt[101195]:_MT[227], arg this[101192] :
  _remoteAccessData, arg newDom[101188]:_any[170](?)) : _unknown[43] "method"
  {
    (101209 call compilerAssert(101206 call ==(101199 call . this c"rank")(101203 call . newDom c"rank")))
    unknown rad[101229](101228 call _remoteAccessData eltType(101216 call . newDom c"rank")(101220 call . newDom c"idxType")(101224 call . newDom c"stridable") blkChanged)
    (101238 call(101233 call . rad c"initDataFrom") this)
    (101259 call =(101241 call . rad c"shiftedData")(101256 IfExpr (101245 call . newDom c"stridable") then
    { scopeless
      (101249 call . this c"data")
    } else
    { scopeless
      (101253 call . this c"shiftedData")
    } ))
    (101276 call =(101263 call . rad c"origin")(101274 call _cast(101271 call . newDom c"intIdxType")(101267 call . this c"origin")))
    (101287 call =(101280 call . rad c"blk")(101284 call . this c"blk"))
    (101301 call =(101291 call . rad c"off")(101300 call chpl__tuplify(101296 call . newDom c"dsiLow")))
    (101315 call =(101305 call . rad c"str")(101314 call chpl__tuplify(101310 call . newDom c"dsiStride")))
    (101331 call =(101321 call . rad c"factoredOffs")(101329 call _cast(101326 call . newDom c"intIdxType") 0))
    (101339 call(101335 call . rad c"computeFactoredOffs"))
    (101346 call(101342 call . rad c"initShiftedData"))
    (101349 return rad)
  }
  function _unknown[43].toRankChange[101358](arg _mt[101367]:_MT[227], arg this[101364] :
  _remoteAccessData, arg newDom[101356]:_any[170](?), arg cd[101360]:_any[170](?), arg idx[101362]:_any[170](?)) : _unknown[43] "method"
  {
    (101393 call compilerAssert(101390 call &&(101378 call ==(101371 call . this c"rank")(101375 call . idx c"size"))(101388 call !=(101381 call . this c"rank")(101385 call . newDom c"rank"))))
    unknown intIdxType[101400] "type variable"(101397 call . newDom c"intIdxType")
    unknown idxSignedType[101407] "type variable"(101406 call chpl__signedType intIdxType)
    unknown rad[101427](101426 call _remoteAccessData eltType(101414 call . newDom c"rank")(101418 call . newDom c"idxType")(101422 call . newDom c"stridable") 1)
    const collapsedDims[101434] "const"(101433 call chpl__tuplify cd)
    (101443 call(101438 call . rad c"initDataFrom") this)
    (101464 call =(101446 call . rad c"shiftedData")(101461 IfExpr (101450 call . newDom c"stridable") then
    { scopeless
      (101454 call . this c"data")
    } else
    { scopeless
      (101458 call . this c"shiftedData")
    } ))
    (101481 call =(101468 call . rad c"origin")(101479 call _cast(101476 call . newDom c"intIdxType")(101472 call . this c"origin")))
    unknown curDim[101485] 1
    {
      unknown j[101684] 0
      unknown tmp[101685] "maybe param" "temp"
      (101697 'move' tmp[101685](101695 call chpl_compute_low_param_loop_bound 1(101490 call . idx c"size")))
      unknown tmp[101686] "maybe param" "temp"
      (101707 'move' tmp[101686](101705 call chpl_compute_high_param_loop_bound 1(101702 call . idx c"size")))
      unknown tmp[101687] "maybe param" "temp"
      (101710 'move' tmp[101687] 1)
      ParamForLoop
      { j[101684] tmp[101685] tmp[101686] tmp[101687]
        {
          if(101679 call _cond_test(101499 call !(101498 call collapsedDims j)))
          {
            (101518 call =(101507 call(101502 call . rad c"off") curDim)(101515 call .(101514 call(101509 call . newDom c"dsiDim") curDim) c"low"))
            const off[101547] "const"(101545 call _cast idxSignedType(101542 call -(101531 call chpl__idxToInt(101529 call(101524 call . rad c"off") curDim))(101541 call chpl__idxToInt(101539 call(101534 call . this c"off") j))))
            (101579 call +=(101551 call . rad c"origin")(101577 call _cast intIdxType(101574 call /(101565 call *(101562 call _cast idxSignedType(101560 call(101555 call . this c"blk") j)) off)(101573 call(101568 call . this c"str") j))))
            (101596 call =(101588 call(101583 call . rad c"blk") curDim)(101595 call(101590 call . this c"blk") j))
            (101613 call =(101605 call(101600 call . rad c"str") curDim)(101612 call(101607 call . this c"str") j))
            (101618 call += curDim 1)
          }
          {
            const off[101643] "const"(101641 call _cast idxSignedType(101638 call -(101627 call chpl__idxToInt(101625 call idx j))(101637 call chpl__idxToInt(101635 call(101630 call . this c"off") j))))
            (101676 call +=(101648 call . rad c"origin")(101674 call _cast intIdxType(101671 call /(101662 call *(101659 call _cast idxSignedType(101657 call(101652 call . this c"blk") j)) off)(101670 call(101665 call . this c"str") j))))
          }
        }
      }
      label _unused_continueLabel[101689]
      label _breakLabel[101688]
    }
    (101726 call(101722 call . rad c"computeFactoredOffs"))
    (101733 call(101729 call . rad c"initShiftedData"))
    (101736 return rad)
  }
  type LocRADCache[101892](?) unknown eltType[101741] "type variable" unknown rank[101745] "param" int[13] unknown idxType[101748] "type variable" unknown stridable[101752] "param" bool[10] unknown targetLocDom[101760](101758 call chpl__buildDomainRuntimeType defaultDist rank) unknown RAD[101776](101774 call chpl__buildArrayRuntimeType(101772 call chpl__ensureDomainExpr targetLocDom)(101771 call _remoteAccessData eltType rank idxType stridable)) unknown RADLocks[101786](101784 call chpl__buildArrayRuntimeType(101782 call chpl__ensureDomainExpr targetLocDom) chpl_LocalSpinlock) function LocRADCache[101892](?).init[101793](arg _mt[101896]:_MT[227], arg this[101894]:LocRADCache[101892](?), arg eltType[101791]:_any[170](?), param arg rank[101796] :
  int[13], arg idxType[101799]:_any[170](?), param arg stridable[101802] :
  bool[10], arg newTargetLocDom[101810] :
  (101808 call chpl__buildDomainRuntimeType defaultDist rank)) : _unknown[43] "dont disable remote value forwarding" "method" "primary method"
  {
    (101818 call =(101814 call . this c"eltType") eltType)
    (101827 call =(101823 call . this c"rank") rank)
    (101835 call =(101831 call . this c"idxType") idxType)
    (101843 call =(101839 call . this c"stridable") stridable)
    (101848 call = targetLocDom newTargetLocDom)
  } function LocRADCache[101892](?).lockRAD[101857](arg _mt[101900]:_MT[227], arg this[101898]:LocRADCache[101892](?), arg rlocIdx[101855]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    (101867 call(101863 call .(101862 call RADLocks rlocIdx) c"lock"))
  } function LocRADCache[101892](?).unlockRAD[101876](arg _mt[101904]:_MT[227], arg this[101902]:LocRADCache[101892](?), arg rlocIdx[101874]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    (101886 call(101882 call .(101881 call RADLocks rlocIdx) c"unlock"))
  }
  type DefaultRectangularArr[105188](?) unknown idxSignedType[101917] "type variable"(101916 call chpl__signedType(101914 call chpl__idxTypeToIntIdxType idxType)) unknown dom[101930](101929 'to unmanaged class from unknown'(101928 call DefaultRectangularDom(rank = rank)(idxType = idxType)(stridable = stridable))) unknown off[101937](101935 call * rank idxType) unknown blk[101947](101945 call * rank(101944 call chpl__idxTypeToIntIdxType idxType)) unknown sizesPerDim[101957](101955 call * rank(101954 call chpl__idxTypeToIntIdxType idxType)) unknown str[101964](101962 call * rank idxSignedType) unknown factoredOffs[101971](101970 call chpl__idxTypeToIntIdxType idxType) unknown data[101979] "alias scope from this" "local field" nil[38](101977 call _ddata eltType) unknown shiftedData[101986] "alias scope from this" "local field"(101985 call _ddata eltType) unknown noinit_data[101991] 0 bool[10] unknown externArr[101996] 0 bool[10] unknown _borrowed[102001] 1 bool[10] unknown externFreeFunc[102005] c_void_ptr unknown dataAllocRange[102012](102011 call range idxType) function DefaultRectangularArr[105188](?).intIdxType[102017](arg _mt[105192]:_MT[227], arg this[105190]:DefaultRectangularArr[105188](?)) type : _unknown[43] "method" "primary method" "no parens"
  {
    (102023 return(102022 call chpl__idxTypeToIntIdxType idxType))
  } function DefaultRectangularArr[105188](?).dsiDisplayRepresentation[102030](arg _mt[105196]:_MT[227], arg this[105194]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    (102051 call writeln "off=" off)
    (102073 call writeln "blk=" blk)
    (102094 call writeln "str=" str)
    (102115 call writeln "factoredOffs=" factoredOffs)
    (102136 call writeln "noinit_data=" noinit_data)
  } function DefaultRectangularArr[105188](?).dsiGetBaseDom[102142](arg _mt[105200]:_MT[227], arg this[105198]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    { scopeless
      (102145 return dom)
    }
  } function DefaultRectangularArr[105188](?).dsiDestroyDataHelper[102154](arg _mt[105204]:_MT[227], arg this[105202]:DefaultRectangularArr[105188](?), arg dd[102152]:_any[170](?), arg ddiNumIndices[102156]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (102165 call compilerAssert(102163 call chpl_isDdata(102161 'typeof' dd)))
    {
      unknown _indexOfInterest[102185] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102186] "expr temp" "temp"
      (102195 'move' _iterator[102186](102193 call _getIterator(102203 call chpl_direct_range_iter 0(102200 call - ddiNumIndices 1) 1)))
      Defer
      {
        {
          (102219 call _freeIterator _iterator[102186])
        }
      }
      { scopeless type
        (102208 'move' _indexOfInterest[102185](102205 call iteratorIndex _iterator[102186]))
      }
      ForLoop
      {
        unknown i[102212] "index var" "insert auto destroy"
        (102214 'move' i[102212] _indexOfInterest[102185])
        {
          (102182 call chpl__autoDestroy(102180 call dd i))
        }
        label _continueLabel[102190]
        _indexOfInterest[102185]
        _iterator[102186]
      }
      label _breakLabel[102191]
    }
  } function DefaultRectangularArr[105188](?).dsiDestroyArr[102230](arg _mt[105208]:_MT[227], arg this[105206]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
    if(102365 call _cond_test externArr)
    {
      if(102246 call _cond_test(102234 call ! _borrowed))
      {
        (102243 call chpl_call_free_func externFreeFunc(102242 call c_ptrTo data))
      }
    }
    {
      unknown numElts[102253] 0 intIdxType
      if(102355 call _cond_test(102273 call ||(102264 call >(102260 call . dom c"dsiNumIndices") 0)(102271 call >(102267 call . dataAllocRange c"length") 0)))
      {
        unknown needsDestroy[102300] "param"(102299 'needs auto destroy'(102298 'deref'(102297 call data 0)))
        if(102321 call _cond_test(102311 call &&(102306 call == rank 1)(102309 call ! stridable)))
        {
          { scopeless
            (102318 call = numElts(102315 call . dataAllocRange c"length"))
          }
        }
        if(102338 call _cond_test(102328 call == numElts 0))
        {
          { scopeless
            (102335 call = numElts(102332 call . dom c"dsiNumIndices"))
          }
        }
        if(102351 call _cond_test needsDestroy)
        {
          (102348 call dsiDestroyDataHelper data numElts)
        }
      }
      (102363 call _ddata_free data numElts)
    }
  } function DefaultRectangularArr[105188](?).theData[102374](arg _mt[105212]:_MT[227], arg this[105210]:DefaultRectangularArr[105188](?)) ref : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    if(102388 call _cond_test(102380 call && earlyShiftData(102378 call ! stridable)))
    {
      { scopeless
        (102383 return shiftedData)
      }
    }
    {
      { scopeless
        (102386 return data)
      }
    }
  } function DefaultRectangularArr[105188](?).these[102405](arg _mt[105216]:_MT[227], arg this[105214]:DefaultRectangularArr[105188](?), arg tasksPerLocale[102401] :
  int[13] =
  dataParTasksPerLocale, arg ignoreRunning[102409] :
  bool[10] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[102415] :
  int[13] =
  dataParMinGranularity) ref : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(102441 call _cond_test debugDefaultDist)
    {
      (102438 call chpl_debug_writeln "*** In defRectArr simple-dd serial iterator")
    }
    {
      unknown _indexOfInterest[102455] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102456] "expr temp" "temp"
      (102465 'move' _iterator[102456](102463 call _getIterator(102451 call chpl__serialViewIter this dom)))
      Defer
      {
        {
          (102482 call _freeIterator _iterator[102456])
        }
      }
      { scopeless type
        (102471 'move' _indexOfInterest[102455](102468 call iteratorIndex _iterator[102456]))
      }
      ForLoop
      {
        unknown elem[102475] "index var" "insert auto destroy"
        (102477 'move' elem[102475] _indexOfInterest[102455])
        { scopeless
          (102453 yield elem)
        }
        label _continueLabel[102460]
        _indexOfInterest[102455]
        _iterator[102456]
      }
      label _breakLabel[102461]
    }
  } function DefaultRectangularArr[105188](?).these[102497](arg _mt[105220]:_MT[227], arg this[105218]:DefaultRectangularArr[105188](?), param arg tag[102494] :
  iterKind, arg tasksPerLocale[102500] =
  dataParTasksPerLocale, arg ignoreRunning[102504] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[102508] =
  dataParMinGranularity) ref : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(102540 call _cond_test debugDefaultDist)
    {
      (102537 call chpl_debug_writeln "*** In defRectArr simple-dd standalone iterator")
    }
    {
      unknown _indexOfInterest[102563] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102564] "expr temp" "temp"
      (102573 'move' _iterator[102564](102571 call _getIterator(102555 call(102547 call . dom c"these") tag tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (102590 call _freeIterator _iterator[102564])
        }
      }
      { scopeless type
        (102579 'move' _indexOfInterest[102563](102576 call iteratorIndex _iterator[102564]))
      }
      ForLoop
      {
        unknown i[102583] "index var" "insert auto destroy"
        (102585 'move' i[102583] _indexOfInterest[102563])
        {
          (102560 yield(102559 call dsiAccess i))
        }
        label _continueLabel[102568]
        _indexOfInterest[102563]
        _iterator[102564]
      }
      label _breakLabel[102569]
    }
  }
  where {
    (102516 call == tag(102513 call . iterKind c"standalone"))
  } function DefaultRectangularArr[105188](?).these[102606](arg _mt[105224]:_MT[227], arg this[105222]:DefaultRectangularArr[105188](?), param arg tag[102603] :
  iterKind, arg tasksPerLocale[102609] =
  dataParTasksPerLocale, arg ignoreRunning[102613] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[102617] =
  dataParMinGranularity) : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(102649 call _cond_test debugDefaultDist)
    {
      (102646 call chpl_debug_writeln "*** In defRectArr simple-dd leader iterator")
    }
    {
      unknown _indexOfInterest[102668] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102669] "expr temp" "temp"
      (102678 'move' _iterator[102669](102676 call _getIterator(102664 call(102656 call . dom c"these") tag tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (102695 call _freeIterator _iterator[102669])
        }
      }
      { scopeless type
        (102684 'move' _indexOfInterest[102668](102681 call iteratorIndex _iterator[102669]))
      }
      ForLoop
      {
        unknown followThis[102688] "index var" "insert auto destroy"
        (102690 'move' followThis[102688] _indexOfInterest[102668])
        { scopeless
          (102666 yield followThis)
        }
        label _continueLabel[102673]
        _indexOfInterest[102668]
        _iterator[102669]
      }
      label _breakLabel[102674]
    }
  }
  where {
    (102625 call == tag(102622 call . iterKind c"leader"))
  } function DefaultRectangularArr[105188](?).these[102711](arg _mt[105228]:_MT[227], arg this[105226]:DefaultRectangularArr[105188](?), param arg tag[102708] :
  iterKind, arg followThis[102713]:_any[170](?), arg tasksPerLocale[102716] =
  dataParTasksPerLocale, arg ignoreRunning[102720] =
  dataParIgnoreRunningTasks, arg minIndicesPerTask[102724] =
  dataParMinGranularity) ref : _unknown[43] "iterator fn" "method" "primary method"
  {
    if(102757 call _cond_test debugDefaultDist)
    {
      (102754 call chpl_debug_writeln "*** In defRectArr simple-dd follower iterator: " followThis)
    }
    {
      unknown _indexOfInterest[102784] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[102785] "expr temp" "temp"
      (102794 'move' _iterator[102785](102792 call _getIterator(102777 call(102764 call . dom c"these")(tag =(102768 call . iterKind c"follower")) followThis tasksPerLocale ignoreRunning minIndicesPerTask)))
      Defer
      {
        {
          (102811 call _freeIterator _iterator[102785])
        }
      }
      { scopeless type
        (102800 'move' _indexOfInterest[102784](102797 call iteratorIndex _iterator[102785]))
      }
      ForLoop
      {
        unknown i[102804] "index var" "insert auto destroy"
        (102806 'move' i[102804] _indexOfInterest[102784])
        { scopeless
          (102782 yield(102781 call dsiAccess i))
        }
        label _continueLabel[102789]
        _indexOfInterest[102784]
        _iterator[102785]
      }
      label _breakLabel[102790]
    }
  }
  where {
    (102732 call == tag(102729 call . iterKind c"follower"))
  } function DefaultRectangularArr[105188](?).computeFactoredOffs[102823](arg _mt[105232]:_MT[227], arg this[105230]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method"
  {
    (102830 call = factoredOffs(102828 call _cast intIdxType 0))
    {
      unknown i[102859] 0
      unknown tmp[102860] "maybe param" "temp"
      (102872 'move' tmp[102860](102870 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[102861] "maybe param" "temp"
      (102879 'move' tmp[102861](102877 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[102862] "maybe param" "temp"
      (102882 'move' tmp[102862] 1)
      ParamForLoop
      { i[102859] tmp[102860] tmp[102861] tmp[102862]
        {
          (102855 call = factoredOffs(102853 call + factoredOffs(102851 call *(102843 call blk i)(102850 call chpl__idxToInt(102848 call off i)))))
        }
      }
      label _unused_continueLabel[102864]
      label _breakLabel[102863]
    }
  } function DefaultRectangularArr[105188](?).initShiftedData[102897](arg _mt[105236]:_MT[227], arg this[105234]:DefaultRectangularArr[105188](?)) : _unknown[43] "inline" "method" "primary method"
  {
    if(102955 call _cond_test(102903 call && earlyShiftData(102901 call ! stridable)))
    {
      if(102950 call _cond_test(102910 call >(102906 call . dom c"dsiNumIndices") 0))
      {
        const shiftDist[102936] "const"(102933 IfExpr (102915 call isIntType idxType) then
        { scopeless
          (102921 call -(102918 call _cast idxType 0) factoredOffs)
        } else
        { scopeless
          (102931 call -(102925 call _cast idxSignedType 0)(102929 call _cast idxSignedType factoredOffs))
        } )
        (102947 call = shiftedData(102946 call _ddata_shift eltType data shiftDist))
      }
    }
  } function DefaultRectangularArr[105188](?).postinit[102964](arg _mt[105240]:_MT[227], arg this[105238]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method"
  {
    if(102972 call _cond_test(102968 call == noinit_data 1))
    {
      { scopeless
        (102970 return)
      }
    }
    {
      unknown dim[103017] 0
      unknown tmp[103018] "maybe param" "temp"
      (103030 'move' tmp[103018](103028 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[103019] "maybe param" "temp"
      (103037 'move' tmp[103019](103035 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[103020] "maybe param" "temp"
      (103040 'move' tmp[103020] 1)
      ParamForLoop
      { dim[103017] tmp[103018] tmp[103019] tmp[103020]
        {
          (102996 call =(102985 call off dim)(102993 call .(102992 call(102987 call . dom c"dsiDim") dim) c"alignedLow"))
          (103014 call =(103003 call str dim)(103011 call .(103010 call(103005 call . dom c"dsiDim") dim) c"stride"))
        }
      }
      label _unused_continueLabel[103022]
      label _breakLabel[103021]
    }
    if(103261 call _cond_test(103056 call == storageOrder(103053 call . ArrayStorageOrder c"RMO")))
    {
      (103066 call =(103061 call blk rank)(103064 call _cast intIdxType 1))
      {
        unknown dim[103111] 0
        unknown tmp[103112] "maybe param" "temp"
        (103123 'move' tmp[103112](103121 call chpl_compute_low_param_loop_bound 1(103073 call - rank 1)))
        unknown tmp[103113] "maybe param" "temp"
        (103133 'move' tmp[103113](103131 call chpl_compute_high_param_loop_bound 1(103128 call - rank 1)))
        unknown tmp[103114] "maybe param" "temp"
        (103136 'move' tmp[103114](103078 call - 1))
        ParamForLoop
        { dim[103111] tmp[103112] tmp[103113] tmp[103114]
          { scopeless
            (103108 call =(103085 call blk dim)(103106 call *(103092 call blk(103089 call + dim 1))(103103 call .(103102 call(103094 call . dom c"dsiDim")(103099 call + dim 1)) c"length")))
          }
        }
        label _unused_continueLabel[103116]
        label _breakLabel[103115]
      }
    }
    {
      { scopeless
        if(103257 call _cond_test(103154 call == storageOrder(103151 call . ArrayStorageOrder c"CMO")))
        {
          (103164 call =(103159 call blk 1)(103162 call _cast intIdxType 1))
          {
            unknown dim[103202] 0
            unknown tmp[103203] "maybe param" "temp"
            (103215 'move' tmp[103203](103213 call chpl_compute_low_param_loop_bound 2 rank))
            unknown tmp[103204] "maybe param" "temp"
            (103222 'move' tmp[103204](103220 call chpl_compute_high_param_loop_bound 2 rank))
            unknown tmp[103205] "maybe param" "temp"
            (103225 'move' tmp[103205] 1)
            ParamForLoop
            { dim[103202] tmp[103203] tmp[103204] tmp[103205]
              {
                (103198 call =(103175 call blk dim)(103196 call *(103182 call blk(103179 call - dim 1))(103193 call .(103192 call(103184 call . dom c"dsiDim")(103189 call - dim 1)) c"length")))
              }
            }
            label _unused_continueLabel[103207]
            label _breakLabel[103206]
          }
        }
        {
          (103254 call halt "unknown array storage order")
        }
      }
    }
    (103268 call computeFactoredOffs)
    const size[103312] "const"(103309 IfExpr (103275 call == storageOrder(103272 call . ArrayStorageOrder c"RMO")) then
    { scopeless
      (103291 call *(103280 call blk 1)(103288 call .(103287 call(103282 call . dom c"dsiDim") 1) c"length"))
    } else
    { scopeless
      (103307 call *(103296 call blk rank)(103304 call .(103303 call(103298 call . dom c"dsiDim") rank) c"length"))
    } )
    if(103373 call _cond_test usePollyArrayIndex)
    {
      {
        unknown dim[103338] 0
        unknown tmp[103339] "maybe param" "temp"
        (103351 'move' tmp[103339](103349 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[103340] "maybe param" "temp"
        (103358 'move' tmp[103340](103356 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[103341] "maybe param" "temp"
        (103361 'move' tmp[103341] 1)
        ParamForLoop
        { dim[103338] tmp[103339] tmp[103340] tmp[103341]
          {
            (103334 call =(103323 call sizesPerDim dim)(103331 call .(103330 call(103325 call . dom c"dsiDim") dim) c"length"))
          }
        }
        label _unused_continueLabel[103343]
        label _breakLabel[103342]
      }
    }
    if(103424 call _cond_test(103379 call == data nil[38]))
    {
      if(103419 call _cond_test(103382 call ! localeModelHasSublocales))
      {
        (103390 call = data(103389 call _ddata_allocate eltType size))
      }
      {
        (103415 call = data(103414 call _ddata_allocate eltType size(subloc =(103410 IfExpr (103406 call >(103404 call(103400 call . here c"getChildCount")) 1) then
        { scopeless
          c_sublocid_all
        } else
        { scopeless
          c_sublocid_none
        } ))))
      }
    }
    (103430 call initShiftedData)
    if(103452 call _cond_test(103439 call &&(103434 call == rank 1)(103437 call ! stridable)))
    {
      { scopeless
        (103449 call = dataAllocRange(103448 call(103443 call . dom c"dsiDim") 1))
      }
    }
  } function DefaultRectangularArr[105188](?).getDataIndex[103467](arg _mt[105244]:_MT[227], arg this[105242]:DefaultRectangularArr[105188](?), arg ind[103463] ... :
  idxType, param arg getShifted[103470] =
  1) : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      (103483 return(103482 call getDataIndex ind(getShifted = getShifted)))
    }
  }
  where {
    (103475 call == rank 1)
  } function DefaultRectangularArr[105188](?).getDataIndex[103498](arg _mt[105248]:_MT[227], arg this[105246]:DefaultRectangularArr[105188](?), arg ind[103495] :
  (103493 call * rank idxType), param arg getShifted[103501] =
  1) : _unknown[43] "inline" "method" "primary method"
  {
    if(103898 call _cond_test stridable)
    {
      unknown sum[103509](103507 call _cast intIdxType 0)
      {
        unknown i[103555] 0
        unknown tmp[103556] "maybe param" "temp"
        (103568 'move' tmp[103556](103566 call chpl_compute_low_param_loop_bound 1 rank))
        unknown tmp[103557] "maybe param" "temp"
        (103575 'move' tmp[103557](103573 call chpl_compute_high_param_loop_bound 1 rank))
        unknown tmp[103558] "maybe param" "temp"
        (103578 'move' tmp[103558] 1)
        ParamForLoop
        { i[103555] tmp[103556] tmp[103557] tmp[103558]
          { scopeless
            (103552 call += sum(103550 call /(103538 call *(103532 call -(103524 call chpl__idxToInt(103522 call ind i))(103531 call chpl__idxToInt(103529 call off i)))(103537 call blk i))(103548 call _cast intIdxType(103546 call abs(103544 call str i)))))
          }
        }
        label _unused_continueLabel[103560]
        label _breakLabel[103559]
      }
      (103590 return sum)
    }
    {
      unknown wantShiftedIndex[103596] "param"(103594 call && getShifted earlyShiftData)
      if(103894 call _cond_test(103605 call &&(103602 call == rank 1) wantShiftedIndex))
      {
        (103614 return(103613 call chpl__idxToInt(103611 call ind 1)))
      }
      {
        unknown sum[103621](103619 call _cast intIdxType 0)
        unknown useInd[103626] ind
        unknown useOffset[103631] 0 int[13]
        unknown useSizesPerDim[103635] sizesPerDim
        if(103890 call _cond_test usePollyArrayIndex)
        {
          if(103705 call _cond_test(103640 call ! wantShiftedIndex))
          {
            {
              unknown i[103670] 0
              unknown tmp[103671] "maybe param" "temp"
              (103683 'move' tmp[103671](103681 call chpl_compute_low_param_loop_bound 1 rank))
              unknown tmp[103672] "maybe param" "temp"
              (103690 'move' tmp[103672](103688 call chpl_compute_high_param_loop_bound 1 rank))
              unknown tmp[103673] "maybe param" "temp"
              (103693 'move' tmp[103673] 1)
              ParamForLoop
              { i[103670] tmp[103671] tmp[103672] tmp[103673]
                {
                  (103666 call =(103649 call useInd i)(103664 call -(103656 call chpl__idxToInt(103654 call useInd i))(103663 call chpl__idxToInt(103661 call off i))))
                }
              }
              label _unused_continueLabel[103675]
              label _breakLabel[103674]
            }
          }
          (103718 return(103717 call polly_array_index useOffset(103714 'expand_tuple' useSizesPerDim)(103716 'expand_tuple' useInd)))
        }
        {
          if(103869 call _cond_test(103725 call == storageOrder(103722 call . ArrayStorageOrder c"RMO")))
          {
            {
              unknown i[103752] 0
              unknown tmp[103753] "maybe param" "temp"
              (103765 'move' tmp[103753](103763 call chpl_compute_low_param_loop_bound 1(103730 call - rank 1)))
              unknown tmp[103754] "maybe param" "temp"
              (103775 'move' tmp[103754](103773 call chpl_compute_high_param_loop_bound 1(103770 call - rank 1)))
              unknown tmp[103755] "maybe param" "temp"
              (103778 'move' tmp[103755] 1)
              ParamForLoop
              { i[103752] tmp[103753] tmp[103754] tmp[103755]
                {
                  (103748 call += sum(103746 call *(103741 call chpl__idxToInt(103739 call ind i))(103745 call blk i)))
                }
              }
              label _unused_continueLabel[103757]
              label _breakLabel[103756]
            }
            (103798 call += sum(103797 call chpl__idxToInt(103795 call ind rank)))
          }
          {
            {
              unknown i[103823] 0
              unknown tmp[103824] "maybe param" "temp"
              (103836 'move' tmp[103824](103834 call chpl_compute_low_param_loop_bound 2 rank))
              unknown tmp[103825] "maybe param" "temp"
              (103843 'move' tmp[103825](103841 call chpl_compute_high_param_loop_bound 2 rank))
              unknown tmp[103826] "maybe param" "temp"
              (103846 'move' tmp[103826] 1)
              ParamForLoop
              { i[103823] tmp[103824] tmp[103825] tmp[103826]
                {
                  (103819 call += sum(103817 call *(103812 call chpl__idxToInt(103810 call ind i))(103816 call blk i)))
                }
              }
              label _unused_continueLabel[103828]
              label _breakLabel[103827]
            }
            (103866 call += sum(103865 call chpl__idxToInt(103863 call ind 1)))
          }
          if(103882 call _cond_test(103875 call ! wantShiftedIndex))
          {
            { scopeless
              (103879 call -= sum factoredOffs)
            }
          }
          (103888 return sum)
        }
      }
    }
  } function DefaultRectangularArr[105188](?).dsiAccess[103913](arg _mt[105252]:_MT[227], arg this[105250]:DefaultRectangularArr[105188](?), arg ind[103909] ... :
  idxType) ref : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      (103923 return(103922 call dsiAccess ind))
    }
  }
  where {
    (103917 call == rank 1)
  } function DefaultRectangularArr[105188](?).dsiAccess[103937](arg _mt[105256]:_MT[227], arg this[105254]:DefaultRectangularArr[105188](?), arg ind[103933] ... :
  idxType) : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      (103953 return(103952 call dsiAccess ind))
    }
  }
  where {
    (103947 call &&(103941 call == rank 1)(103946 call shouldReturnRvalueByValue eltType))
  } function DefaultRectangularArr[105188](?).dsiAccess[103967](arg _mt[105260]:_MT[227], arg this[105258]:DefaultRectangularArr[105188](?), arg ind[103963] ... :
  idxType) const ref : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      (103983 return(103982 call dsiAccess ind))
    }
  }
  where {
    (103977 call &&(103971 call == rank 1)(103976 call shouldReturnRvalueByConstRef eltType))
  } function DefaultRectangularArr[105188](?).dsiAccess[103998](arg _mt[105264]:_MT[227], arg this[105262]:DefaultRectangularArr[105188](?), arg ind[103995] :
  (103993 call * rank idxType)) ref : _unknown[43] "inline" "method" "primary method"
  {
    if(104043 call _cond_test boundsChecking)
    {
      { scopeless
        if(104039 call _cond_test(104010 call !(104009 call(104004 call . dom c"dsiMember") ind)))
        {
          (104036 call halt(104033 call + "array index out of bounds: "(104032 call _stringify_tuple ind)))
        }
      }
    }
    unknown dataInd[104053](104052 call getDataIndex ind)
    (104060 return(104059 call theData dataInd))
  } function DefaultRectangularArr[105188](?).dsiAccess[104073](arg _mt[105268]:_MT[227], arg this[105266]:DefaultRectangularArr[105188](?), arg ind[104070] :
  (104068 call * rank idxType)) : _unknown[43] "inline" "method" "primary method"
  {
    if(104105 call _cond_test boundsChecking)
    {
      { scopeless
        if(104101 call _cond_test(104087 call !(104086 call(104081 call . dom c"dsiMember") ind)))
        {
          (104098 call halt(104095 call + "array index out of bounds: "(104094 call _stringify_tuple ind)))
        }
      }
    }
    unknown dataInd[104115](104114 call getDataIndex ind)
    (104122 return(104121 call theData dataInd))
  }
  where {
    (104078 call shouldReturnRvalueByValue eltType)
  } function DefaultRectangularArr[105188](?).dsiAccess[104136](arg _mt[105272]:_MT[227], arg this[105270]:DefaultRectangularArr[105188](?), arg ind[104133] :
  (104131 call * rank idxType)) const ref : _unknown[43] "inline" "method" "primary method"
  {
    if(104168 call _cond_test boundsChecking)
    {
      { scopeless
        if(104164 call _cond_test(104150 call !(104149 call(104144 call . dom c"dsiMember") ind)))
        {
          (104161 call halt(104158 call + "array index out of bounds: "(104157 call _stringify_tuple ind)))
        }
      }
    }
    unknown dataInd[104178](104177 call getDataIndex ind)
    (104185 return(104184 call theData dataInd))
  }
  where {
    (104141 call shouldReturnRvalueByConstRef eltType)
  } function DefaultRectangularArr[105188](?).dsiLocalAccess[104194](arg _mt[105276]:_MT[227], arg this[105274]:DefaultRectangularArr[105188](?), arg i[104192]:_any[170](?)) ref : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      (104200 return(104199 call dsiAccess i))
    }
  } function DefaultRectangularArr[105188](?).dsiLocalAccess[104209](arg _mt[105280]:_MT[227], arg this[105278]:DefaultRectangularArr[105188](?), arg i[104207]:_any[170](?)) : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      (104219 return(104218 call dsiAccess i))
    }
  }
  where {
    (104214 call shouldReturnRvalueByValue eltType)
  } function DefaultRectangularArr[105188](?).dsiLocalAccess[104229](arg _mt[105284]:_MT[227], arg this[105282]:DefaultRectangularArr[105188](?), arg i[104227]:_any[170](?)) const ref : _unknown[43] "inline" "method" "primary method"
  {
    { scopeless
      (104239 return(104238 call dsiAccess i))
    }
  }
  where {
    (104234 call shouldReturnRvalueByConstRef eltType)
  } function DefaultRectangularArr[105188](?).adjustBlkOffStrForNewDomain[104252](arg _mt[105288]:_MT[227], arg this[105286]:DefaultRectangularArr[105188](?), arg d[104249] :
  (104248 'to unmanaged class from unknown' DefaultRectangularDom), arg alias[104256] :
  (104255 'to unmanaged class from unknown' DefaultRectangularArr)) : _unknown[43] "method" "primary method"
  {
    {
      unknown i[104437] 0
      unknown tmp[104438] "maybe param" "temp"
      (104450 'move' tmp[104438](104448 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[104439] "maybe param" "temp"
      (104457 'move' tmp[104439](104455 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[104440] "maybe param" "temp"
      (104460 'move' tmp[104440] 1)
      ParamForLoop
      { i[104437] tmp[104438] tmp[104439] tmp[104440]
        {
          unknown s[104264] idxType
          if(104376 call _cond_test(104270 call == idxSignedType idxType))
          {
            (104295 call = s(104293 call _cast(104290 call . d c"idxType")(104287 call /(104280 call .(104279 call(104274 call . dom c"dsiDim") i) c"stride")(104286 call str i))))
          }
          {
            (104347 call assert(104344 call ||(104320 call &&(104311 call <(104307 call .(104306 call(104301 call . dom c"dsiDim") i) c"stride") 0)(104318 call <(104316 call str i) 0))(104342 call &&(104333 call >(104329 call .(104328 call(104323 call . dom c"dsiDim") i) c"stride") 0)(104340 call >(104338 call str i) 0))))
            (104373 call = s(104371 call _cast(104368 call . d c"idxType")(104365 call /(104358 call .(104357 call(104352 call . dom c"dsiDim") i) c"stride")(104364 call str i))))
          }
          (104397 call =(104386 call(104381 call . alias c"off") i)(104394 call .(104393 call(104388 call . d c"dsiDim") i) c"low"))
          (104414 call =(104406 call(104401 call . alias c"blk") i)(104412 call *(104410 call blk i) s))
          (104434 call =(104423 call(104418 call . alias c"str") i)(104431 call .(104430 call(104425 call . d c"dsiDim") i) c"stride"))
        }
      }
      label _unused_continueLabel[104442]
      label _breakLabel[104441]
    }
  } function DefaultRectangularArr[105188](?).adjustBlkOffStrForNewDomain[104481](arg _mt[105292]:_MT[227], arg this[105290]:DefaultRectangularArr[105188](?), arg d[104478] :
  (104477 'to unmanaged class from unknown' DefaultRectangularDom), arg alias[104485] :
  (104484 'to unmanaged class from unknown' DefaultRectangularArr)) : _unknown[43] "method" "primary method"
  {
    {
      unknown i[104563] 0
      unknown tmp[104564] "maybe param" "temp"
      (104576 'move' tmp[104564](104574 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[104565] "maybe param" "temp"
      (104583 'move' tmp[104565](104581 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[104566] "maybe param" "temp"
      (104586 'move' tmp[104566] 1)
      ParamForLoop
      { i[104563] tmp[104564] tmp[104565] tmp[104566]
        {
          (104525 call =(104514 call(104509 call . alias c"off") i)(104522 call .(104521 call(104516 call . d c"dsiDim") i) c"low"))
          (104540 call =(104535 call(104530 call . alias c"blk") i)(104539 call blk i))
          (104560 call =(104549 call(104544 call . alias c"str") i)(104557 call .(104556 call(104551 call . d c"dsiDim") i) c"stride"))
        }
      }
      label _unused_continueLabel[104568]
      label _breakLabel[104567]
    }
  }
  where {
    (104502 call &&(104493 call ==(104489 call . dom c"stridable") 0)(104500 call ==(104496 call . this c"stridable") 0))
  } function DefaultRectangularArr[105188](?).dsiReallocate[104615](arg _mt[105296]:_MT[227], arg this[105294]:DefaultRectangularArr[105188](?), arg allocBound[104612] :
  (104611 call range idxType(104607 call . BoundedRangeType c"bounded") stridable), arg arrayBound[104626] :
  (104625 call range idxType(104621 call . BoundedRangeType c"bounded") stridable)) : _unknown[43] "method" "primary method" "method overrides"
  {
    {
      const tmp[104801] "const" "temp"
      (104802 'move' tmp[104801](104799 'deref'(104798 '_wide_get_locale' this)))
      {
        const allocD[104638] "const"(104636 call chpl__buildDomainExpr allocBound)
        unknown copy[104666](104665 'new'(104664 'to unmanaged class from unknown'(104663 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable =(104654 call .(104651 call . allocD c"_value") c"stridable"))(dom =(104659 call . allocD c"_value")))))
        Forall {
          induction variables:
            
            unknown i[104699] "index var" "insert auto destroy"
          iterated expressions:
            (104681 call arrayBound(104679 call(104674 call . dom c"ranges") 1))
          shadow variables:
          forall body
          {
            (104695 call =(104690 call(104685 call . copy c"dsiAccess") i)(104694 call dsiAccess i))
          }
        }
        (104707 call = off(104704 call . copy c"off"))
        (104715 call = blk(104712 call . copy c"blk"))
        (104723 call = str(104720 call . copy c"str"))
        (104731 call = factoredOffs(104728 call . copy c"factoredOffs"))
        (104736 call dsiDestroyArr)
        (104743 call = data(104740 call . copy c"data"))
        if(104779 call _cond_test(104756 call && earlyShiftData(104754 call !(104751 call .(104748 call . allocD c"_value") c"stridable"))))
        {
          if(104774 call _cond_test(104763 call >(104759 call . allocD c"numIndices") 0))
          {
            (104770 call = shiftedData(104767 call . copy c"shiftedData"))
          }
        }
        (104790 call = dataAllocRange(104787 call . copy c"dataAllocRange"))
        (104795 call chpl__delete copy)
      }
    }
  }
  where {
    (104631 call == rank 1)
  } function DefaultRectangularArr[105188](?).dsiReallocate[104827](arg _mt[105300]:_MT[227], arg this[105298]:DefaultRectangularArr[105188](?), arg bounds[104824] :
  (104822 call * rank(104821 call range idxType(104817 call . BoundedRangeType c"bounded") stridable))) : _unknown[43] "method" "primary method" "method overrides"
  {
    {
      const tmp[104990] "const" "temp"
      (104991 'move' tmp[104990](104988 'deref'(104987 '_wide_get_locale' this)))
      {
        const allocD[104835] "const"(104833 call chpl__buildDomainExpr(104831 'expand_tuple' bounds))
        unknown copy[104863](104862 'new'(104861 'to unmanaged class from unknown'(104860 call DefaultRectangularArr(eltType = eltType)(rank = rank)(idxType = idxType)(stridable =(104851 call .(104848 call . allocD c"_value") c"stridable"))(dom =(104856 call . allocD c"_value")))))
        Forall {
          induction variables:
            
            unknown i[104890] "index var" "insert auto destroy"
          iterated expressions:
            (104874 call allocD(104872 'expand_tuple'(104869 call . dom c"ranges")))
          shadow variables:
          forall body
          {
            (104886 call =(104881 call(104876 call . copy c"dsiAccess") i)(104885 call dsiAccess i))
          }
        }
        (104898 call = off(104895 call . copy c"off"))
        (104906 call = blk(104903 call . copy c"blk"))
        (104914 call = str(104911 call . copy c"str"))
        (104922 call = factoredOffs(104919 call . copy c"factoredOffs"))
        (104927 call dsiDestroyArr)
        (104934 call = data(104931 call . copy c"data"))
        if(104970 call _cond_test(104947 call && earlyShiftData(104945 call !(104942 call .(104939 call . allocD c"_value") c"stridable"))))
        {
          if(104965 call _cond_test(104954 call >(104950 call . allocD c"numIndices") 0))
          {
            (104961 call = shiftedData(104958 call . copy c"shiftedData"))
          }
        }
        (104979 call = dataAllocRange(104976 call . copy c"dataAllocRange"))
        (104984 call chpl__delete copy)
      }
    }
  } function DefaultRectangularArr[105188](?).dsiPostReallocate[105000](arg _mt[105304]:_MT[227], arg this[105302]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method" "method overrides"
  {
  } function DefaultRectangularArr[105188](?).dsiLocalSlice[105009](arg _mt[105308]:_MT[227], arg this[105306]:DefaultRectangularArr[105188](?), arg ranges[105007]:_any[170](?)) : _unknown[43] "method" "primary method"
  {
    (105014 call halt "all dsiLocalSlice calls on DefaultRectangulars should be handled in ChapelArray.chpl")
  } function DefaultRectangularArr[105188](?).dsiGetRAD[105021](arg _mt[105312]:_MT[227], arg this[105310]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method"
  {
    unknown rad[105030](105029 call _remoteAccessData eltType rank idxType stridable)
    (105039 call =(105035 call . rad c"off") off)
    (105047 call =(105043 call . rad c"blk") blk)
    (105055 call =(105051 call . rad c"str") str)
    (105063 call =(105059 call . rad c"origin") 0)
    (105071 call =(105067 call . rad c"factoredOffs") factoredOffs)
    (105079 call =(105075 call . rad c"data") data)
    (105087 call =(105083 call . rad c"shiftedData") shiftedData)
    (105091 return rad)
  } function DefaultRectangularArr[105188](?).dsiTargetLocales[105097](arg _mt[105316]:_MT[227], arg this[105314]:DefaultRectangularArr[105188](?)) : _unknown[43] "method" "primary method"
  {
    (105109 return(105107 call chpl__buildArrayExpr(105104 call chpl_localeID_to_locale(105103 '_wide_get_locale'(105100 call . this c"data")))))
  } function DefaultRectangularArr[105188](?).dsiHasSingleLocalSubdomain[105116](arg _mt[105320]:_MT[227], arg this[105318]:DefaultRectangularArr[105188](?)) param : _unknown[43] "method" "primary method"
  {
    { scopeless
      (105119 return 1)
    }
  } function DefaultRectangularArr[105188](?).dsiLocalSubdomain[105130](arg _mt[105324]:_MT[227], arg this[105322]:DefaultRectangularArr[105188](?), arg loc[105127] :
  locale[26]) : _unknown[43] "method" "primary method"
  {
    if(105163 call _cond_test(105140 call ==(105137 call chpl_localeID_to_locale(105136 '_wide_get_locale'(105133 call . this c"data"))) loc))
    {
      (105146 return(105145 call _getDomain dom))
    }
    {
      unknown a[105156](105154 call chpl__buildDomainRuntimeType defaultDist rank idxType stridable)
      (105161 return a)
    }
  } function DefaultRectangularArr[105188](?).dsiLocalSubdomains[105176](arg _mt[105328]:_MT[227], arg this[105326]:DefaultRectangularArr[105188](?), arg loc[105173] :
  locale[26]) : _unknown[43] "iterator fn" "method" "primary method"
  {
    (105182 yield(105181 call dsiLocalSubdomain loc))
  } BaseRectangularArr
  function chpl__serialViewIter[105335](arg arr[105333]:_any[170](?), arg viewDom[105337]:_any[170](?)) ref : _unknown[43] "iterator fn"
  {
    unknown useCache[105357] "param"(105355 call &&(105346 call chpl__isArrayView arr)(105354 call(105350 call . arr c"shouldUseIndexCache")))
    unknown info[105389](105386 IfExpr  useCache then
    { scopeless
      (105365 call . arr c"indexCache")
    } else
    { scopeless(105383 IfExpr (105375 call(105371 call . arr c"isSliceArrayView")) then
      { scopeless
        (105379 call . arr c"arr")
      } else
      { scopeless
        arr
      } )
    } )
    if(105808 call _cond_test(105397 call ==(105393 call . arr c"rank") 1))
    {
      if(105696 call _cond_test(105403 call !(105400 call . viewDom c"stridable")))
      {
        const first[105415] "const"(105414 call(105406 call . info c"getDataIndex")(105410 call . viewDom c"dsiLow"))
        const second[105441] "const"(105440 call(105420 call . info c"getDataIndex")(105438 call(105424 call . viewDom c"chpl_intToIdx")(105435 call +(105433 call chpl__idxToInt(105429 call . viewDom c"dsiLow")) 1)))
        const step[105448] "const"(105446 call - second first)
        const last[105464] "const"(105462 call + first(105460 call *(105457 call -(105453 call . viewDom c"dsiNumIndices") 1) step))
        {
          unknown _indexOfInterest[105484] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[105485] "expr temp" "temp"
          (105494 'move' _iterator[105485](105492 call _getIterator(105473 call chpl_direct_pos_stride_range_iter first last step)))
          Defer
          {
            {
              (105511 call _freeIterator _iterator[105485])
            }
          }
          { scopeless type
            (105500 'move' _indexOfInterest[105484](105497 call iteratorIndex _iterator[105485]))
          }
          ForLoop
          {
            unknown i[105504] "index var" "insert auto destroy"
            (105506 'move' i[105504] _indexOfInterest[105484])
            {
              (105481 yield(105480 call(105475 call . info c"theData") i))
            }
            label _continueLabel[105489]
            _indexOfInterest[105484]
            _iterator[105485]
          }
          label _breakLabel[105490]
        }
      }
      {
        { scopeless
          const viewDomDim[105525] "const"(105524 call(105519 call . viewDom c"dsiDim") 1)
          const stride[105538] "const"(105536 call _cast(105533 call . viewDom c"intIdxType")(105529 call . viewDomDim c"stride"))
          const start[105545] "const"(105542 call . viewDomDim c"first")
          const second[105567] "const"(105566 call(105549 call . info c"getDataIndex")(105564 call(105553 call . viewDom c"chpl_intToIdx")(105561 call +(105557 call . viewDomDim c"firstAsInt") stride)))
        }
        unknown first[105578](105577 call(105572 call . info c"getDataIndex") start)
        const step[105594] "const"(105592 call _cast(105591 call chpl__signedType(105587 call . viewDom c"intIdxType"))(105583 call - second first))
        unknown last[105616](105614 call + first(105612 call *(105603 call -(105599 call . viewDomDim c"length") 1)(105610 call _cast(105607 call . viewDom c"intIdxType") step)))
        if(105628 call _cond_test(105621 call < step 0))
        {
          { scopeless
            (105625 call <=> last first)
          }
        }
        unknown data[105637](105634 call . info c"theData")
        {
          unknown _indexOfInterest[105654] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[105655] "expr temp" "temp"
          (105664 'move' _iterator[105655](105662 call _getIterator(105673 call chpl_direct_range_iter first last step)))
          Defer
          {
            {
              (105689 call _freeIterator _iterator[105655])
            }
          }
          { scopeless type
            (105678 'move' _indexOfInterest[105654](105675 call iteratorIndex _iterator[105655]))
          }
          ForLoop
          {
            unknown i[105682] "index var" "insert auto destroy"
            (105684 'move' i[105682] _indexOfInterest[105654])
            { scopeless
              (105652 yield(105651 call data i))
            }
            label _continueLabel[105659]
            _indexOfInterest[105654]
            _iterator[105655]
          }
          label _breakLabel[105660]
        }
      }
    }
    {
      { scopeless
        if(105804 call _cond_test useCache)
        {
          {
            unknown _indexOfInterest[105726] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[105727] "expr temp" "temp"
            (105736 'move' _iterator[105727](105734 call _getIterator viewDom))
            Defer
            {
              {
                (105752 call _freeIterator _iterator[105727])
              }
            }
            { scopeless type
              (105741 'move' _indexOfInterest[105726](105738 call iteratorIndex _iterator[105727]))
            }
            ForLoop
            {
              unknown i[105745] "index var" "insert auto destroy"
              (105747 'move' i[105745] _indexOfInterest[105726])
              {
                const dataIdx[105711] "const"(105710 call(105705 call . info c"getDataIndex") i)
                (105724 yield(105723 call(105718 call . info c"getDataElem") dataIdx))
              }
              label _continueLabel[105731]
              _indexOfInterest[105726]
              _iterator[105727]
            }
            label _breakLabel[105732]
          }
        }
        {
          {
            unknown _indexOfInterest[105769] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[105770] "expr temp" "temp"
            (105779 'move' _iterator[105770](105777 call _getIterator(105765 call chpl__serialViewIterHelper arr viewDom)))
            Defer
            {
              {
                (105796 call _freeIterator _iterator[105770])
              }
            }
            { scopeless type
              (105785 'move' _indexOfInterest[105769](105782 call iteratorIndex _iterator[105770]))
            }
            ForLoop
            {
              unknown elem[105789] "index var" "insert auto destroy"
              (105791 'move' elem[105789] _indexOfInterest[105769])
              { scopeless
                (105767 yield elem)
              }
              label _continueLabel[105774]
              _indexOfInterest[105769]
              _iterator[105770]
            }
            label _breakLabel[105775]
          }
        }
      }
    }
  }
  where {
    (105342 call chpl__isDROrDRView arr)
  }
  function chpl__serialViewIter[105820](arg arr[105818]:_any[170](?), arg viewDom[105822]:_any[170](?)) ref : _unknown[43] "iterator fn"
  {
    {
      unknown _indexOfInterest[105833] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[105834] "expr temp" "temp"
      (105843 'move' _iterator[105834](105841 call _getIterator(105829 call chpl__serialViewIterHelper arr viewDom)))
      Defer
      {
        {
          (105860 call _freeIterator _iterator[105834])
        }
      }
      { scopeless type
        (105849 'move' _indexOfInterest[105833](105846 call iteratorIndex _iterator[105834]))
      }
      ForLoop
      {
        unknown elem[105853] "index var" "insert auto destroy"
        (105855 'move' elem[105853] _indexOfInterest[105833])
        { scopeless
          (105831 yield elem)
        }
        label _continueLabel[105838]
        _indexOfInterest[105833]
        _iterator[105834]
      }
      label _breakLabel[105839]
    }
  }
  function chpl__serialViewIterHelper[105874](arg arr[105872]:_any[170](?), arg viewDom[105876]:_any[170](?)) ref : _unknown[43] "iterator fn"
  {
    {
      unknown _indexOfInterest[105961] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[105962] "expr temp" "temp"
      (105971 'move' _iterator[105962](105969 call _getIterator viewDom))
      Defer
      {
        {
          (105987 call _freeIterator _iterator[105962])
        }
      }
      { scopeless type
        (105976 'move' _indexOfInterest[105961](105973 call iteratorIndex _iterator[105962]))
      }
      ForLoop
      {
        unknown i[105980] "index var" "insert auto destroy"
        (105982 'move' i[105980] _indexOfInterest[105961])
        {
          const dataIdx[105933] "const"(105930 IfExpr (105887 call(105883 call . arr c"isReindexArrayView")) then
          { scopeless
            (105901 call chpl_reindexConvertIdx i(105892 call . arr c"dom")(105898 call . arr c"downdom"))
          } else
          { scopeless(105927 IfExpr (105909 call(105905 call . arr c"isRankChangeArrayView")) then
            { scopeless
              (105925 call chpl_rankChangeConvertIdx i(105916 call . arr c"collapsedDim")(105922 call . arr c"idx"))
            } else
            { scopeless
              i
            } )
          } )
          const info[105949] "const"(105946 IfExpr (105940 call chpl__isArrayView arr) then
          { scopeless
            (105942 call . arr c"arr")
          } else
          { scopeless
            arr
          } )
          (105959 yield(105958 call(105953 call . info c"dsiAccess") dataIdx))
        }
        label _continueLabel[105966]
        _indexOfInterest[105961]
        _iterator[105962]
      }
      label _breakLabel[105967]
    }
  }
  function _unknown[43].dsiSerialReadWrite[106002](arg _mt[106007]:_MT[227], arg this[106004] :
  DefaultRectangularDom, arg f[106000]:_any[170](?)) : _unknown[43] "method"
  {
    (106036 call <~>(106030 call <~> f(106029 'new'(106028 call ioLiteral "{")))(106035 call ranges 1))
    {
      unknown _indexOfInterest[106075] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[106076] "expr temp" "temp"
      (106085 'move' _iterator[106076](106083 call _getIterator(106090 call chpl_direct_range_iter 2 rank 1)))
      Defer
      {
        {
          (106106 call _freeIterator _iterator[106076])
        }
      }
      { scopeless type
        (106095 'move' _indexOfInterest[106075](106092 call iteratorIndex _iterator[106076]))
      }
      ForLoop
      {
        unknown i[106099] "index var" "insert auto destroy"
        (106101 'move' i[106099] _indexOfInterest[106075])
        { scopeless
          (106072 call <~>(106066 call <~> f(106065 'new'(106064 call ioLiteral ", ")))(106071 call ranges i))
        }
        label _continueLabel[106080]
        _indexOfInterest[106075]
        _iterator[106076]
      }
      label _breakLabel[106081]
    }
    (106134 call <~> f(106133 'new'(106132 call ioLiteral "}")))
  }
  function _unknown[43].dsiSerialWrite[106144](arg _mt[106149]:_MT[227], arg this[106146] :
  DefaultRectangularDom, arg f[106142]:_any[170](?)) : _unknown[43] "method"
  {
    (106159 call(106154 call . this c"dsiSerialReadWrite") f)
  }
  function _unknown[43].dsiSerialRead[106169](arg _mt[106174]:_MT[227], arg this[106171] :
  DefaultRectangularDom, arg f[106167]:_any[170](?)) : _unknown[43] "method"
  {
    (106182 call(106177 call . this c"dsiSerialReadWrite") f)
  }
  function _unknown[43].dsiSerialReadWrite[106192](arg _mt[106197]:_MT[227], arg this[106194] :
  DefaultRectangularArr, arg f[106190]:_any[170](?)) : _unknown[43] "method"
  {
    (106203 call chpl_serialReadWriteRectangular f this)
  }
  function chpl_serialReadWriteRectangular[106212](arg f[106210]:_any[170](?), arg arr[106214]:_any[170](?)) : _unknown[43]
  {
    (106224 call chpl_serialReadWriteRectangular f arr(106221 call . arr c"dom"))
  }
  function chpl_serialReadWriteRectangular[106233](arg f[106231]:_any[170](?), arg arr[106235]:_any[170](?), arg dom[106237]:_any[170](?)) : _unknown[43] "last resort"
  {
    (106244 call chpl_serialReadWriteRectangularHelper f arr dom)
  }
  function chpl_serialReadWriteRectangularHelper[106253](arg f[106251]:_any[170](?), arg arr[106255]:_any[170](?), arg dom[106257]:_any[170](?)) : _unknown[43]
  {
    unknown rank[106263] "param"(106260 call . arr c"rank")
    unknown idxType[106271] "type variable"(106268 call . arr c"idxType")
    unknown idxSignedType[106281] "type variable"(106280 call chpl__signedType(106278 call chpl__idxTypeToIntIdxType idxType))
    const isNative[106296] "const"(106294 call _cast bool[10](106292 call(106287 call . f c"styleElement") QIO_STYLE_ELEMENT_IS_NATIVE_BYTE_ORDER))
    function writeSpaces[106305](arg dim[106302] :
    int[13]) : _unknown[43]
    {
      {
        unknown _indexOfInterest[106322] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[106323] "expr temp" "temp"
        (106332 'move' _iterator[106323](106330 call _getIterator(106337 call chpl_direct_range_iter 1 dim 1)))
        Defer
        {
          {
            (106353 call _freeIterator _iterator[106323])
          }
        }
        { scopeless type
          (106342 'move' _indexOfInterest[106322](106339 call iteratorIndex _iterator[106323]))
        }
        ForLoop
        {
          unknown i[106346] "index var" "insert auto destroy"
          (106348 'move' i[106346] _indexOfInterest[106322])
          {
            (106318 call <~> f(106317 'new'(106316 call ioLiteral " ")))
          }
          label _continueLabel[106327]
          _indexOfInterest[106322]
          _iterator[106323]
        }
        label _breakLabel[106328]
      }
    }
    function recursiveArrayWriter[106372](in arg idx[106369] :
    (106367 call * rank idxType), arg dim[106375] =
    1, in arg last[106379] =
    0) : _unknown[43]
    {
      unknown binary[106390](106389 call(106385 call . f c"binary"))
      unknown arrayStyle[106401](106400 call(106395 call . f c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      unknown isspace[106413](106411 call &&(106406 call == arrayStyle QIO_ARRAY_FORMAT_SPACE)(106409 call ! binary))
      unknown isjson[106425](106423 call &&(106418 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(106421 call ! binary))
      unknown ischpl[106437](106435 call &&(106430 call == arrayStyle QIO_ARRAY_FORMAT_CHPL)(106433 call ! binary))
      unknown strType[106441] "type variable" idxSignedType
      unknown makeStridePositive[106470](106467 IfExpr (106455 call >(106451 call .(106450 call(106445 call . dom c"dsiDim") dim) c"stride") 0) then
      { scopeless
        (106459 call _cast strType 1)
      } else
      { scopeless
        (106465 call _cast strType(106462 call - 1))
      } )
      if(106541 call _cond_test(106475 call || isjson ischpl))
      {
        if(106535 call _cond_test(106479 call != dim rank))
        {
          (106502 call <~> f(106501 'new'(106500 call ioLiteral "[\n")))
          (106509 call writeSpaces dim)
        }
        {
          { scopeless
            (106532 call <~> f(106531 'new'(106530 call ioLiteral "[")))
          }
        }
      }
      if(106855 call _cond_test(106547 call == dim rank))
      {
        unknown first[106550] 1
        if(106579 call _cond_test(106561 call && debugDefaultDist(106558 call . f c"writing")))
        {
          { scopeless
            (106577 call(106566 call . f c"writeln")(106575 call(106570 call . dom c"dsiDim") dim))
          }
        }
        {
          unknown _indexOfInterest[106661] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[106662] "expr temp" "temp"
          (106671 'move' _iterator[106662](106669 call _getIterator(106593 call chpl_by(106591 call(106586 call . dom c"dsiDim") dim) makeStridePositive)))
          Defer
          {
            {
              (106694 call _freeIterator _iterator[106662])
            }
          }
          { scopeless type
            (106683 'move' _indexOfInterest[106661](106680 call iteratorIndex _iterator[106662]))
          }
          ForLoop
          {
            unknown j[106687] "index var" "insert auto destroy"
            (106689 'move' j[106687] _indexOfInterest[106661])
            {
              if(106635 call _cond_test first)
              {
                { scopeless
                  (106598 call = first 0)
                }
              }
              {
                { scopeless
                  if(106629 call _cond_test isspace)
                  {
                    { scopeless
                      (106608 call <~> f(106607 'new'(106606 call ioLiteral " ")))
                    }
                  }
                  {
                    { scopeless
                      if(106624 call _cond_test(106613 call || isjson ischpl))
                      {
                        { scopeless
                          (106621 call <~> f(106620 'new'(106619 call ioLiteral ", ")))
                        }
                      }
                    }
                  }
                }
              }
              (106647 call =(106645 call idx dim) j)
              (106658 call <~> f(106657 call(106652 call . arr c"dsiAccess") idx))
            }
            label _continueLabel[106666]
            _indexOfInterest[106661]
            _iterator[106662]
          }
          label _breakLabel[106667]
        }
      }
      {
        {
          unknown _indexOfInterest[106814] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[106815] "expr temp" "temp"
          (106824 'move' _iterator[106815](106822 call _getIterator(106710 call chpl_by(106708 call(106703 call . dom c"dsiDim") dim) makeStridePositive)))
          Defer
          {
            {
              (106847 call _freeIterator _iterator[106815])
            }
          }
          { scopeless type
            (106836 'move' _indexOfInterest[106814](106833 call iteratorIndex _iterator[106815]))
          }
          ForLoop
          {
            unknown j[106840] "index var" "insert auto destroy"
            (106842 'move' j[106840] _indexOfInterest[106814])
            {
              unknown lastIdx[106722](106719 call .(106718 call(106713 call . dom c"dsiDim") dim) c"last")
              (106731 call =(106729 call idx dim) j)
              (106765 call recursiveArrayWriter idx(dim =(106739 call + dim 1))(last =(106762 call &&(106747 call || last(106745 call == dim 1))(106760 call == j(106757 call .(106756 call(106751 call . dom c"dsiDim") dim) c"alignedHigh")))))
              if(106810 call _cond_test(106769 call || isjson ischpl))
              {
                if(106805 call _cond_test(106773 call != j lastIdx))
                {
                  (106796 call <~> f(106795 'new'(106794 call ioLiteral ",\n")))
                  (106803 call writeSpaces dim)
                }
              }
            }
            label _continueLabel[106819]
            _indexOfInterest[106814]
            _iterator[106815]
          }
          label _breakLabel[106820]
        }
      }
      if(106953 call _cond_test isspace)
      {
        if(106879 call _cond_test(106867 call &&(106861 call ! last)(106865 call != dim 1)))
        {
          (106875 call <~> f(106874 'new'(106873 call ioLiteral "\n")))
        }
      }
      {
        { scopeless
          if(106949 call _cond_test(106886 call || isjson ischpl))
          {
            if(106943 call _cond_test(106890 call != dim rank))
            {
              (106898 call <~> f(106897 'new'(106896 call ioLiteral "\n")))
              (106908 call writeSpaces(106905 call - dim 1))
              (106931 call <~> f(106930 'new'(106929 call ioLiteral "]")))
            }
            {
              { scopeless
                (106940 call <~> f(106939 'new'(106938 call ioLiteral "]")))
              }
            }
          }
        }
      }
    }
    if(107754 call _cond_test(107012 call &&(106998 call &&(106983 call &&(106977 call &&(106967 call && 0(106965 call !(106962 call . f c"writing")))(106975 call !(106974 call(106970 call . f c"binary"))))(106981 call == rank 1))(106996 call ==(106992 call .(106991 call(106986 call . dom c"dsiDim") 1) c"stride") 1))(107010 call ==(107006 call .(107003 call . dom c"_arrs") c"length") 1)))
    {
      unknown binary[107020](107019 call(107015 call . f c"binary"))
      unknown arrayStyle[107031](107030 call(107025 call . f c"styleElement") QIO_STYLE_ELEMENT_ARRAY)
      unknown isspace[107043](107041 call &&(107036 call == arrayStyle QIO_ARRAY_FORMAT_SPACE)(107039 call ! binary))
      unknown isjson[107055](107053 call &&(107048 call == arrayStyle QIO_ARRAY_FORMAT_JSON)(107051 call ! binary))
      unknown ischpl[107067](107065 call &&(107060 call == arrayStyle QIO_ARRAY_FORMAT_CHPL)(107063 call ! binary))
      if(107084 call _cond_test(107072 call || isjson ischpl))
      {
        (107080 call <~> f(107079 'new'(107078 call ioLiteral "[")))
      }
      unknown first[107089] 1
      unknown offset[107102](107099 call .(107098 call(107093 call . dom c"dsiDim") 1) c"low")
      unknown i[107106] 0
      unknown read_end[107110] 0
      {
        unknown tmp[107377] "temp"
        (107407 'move' tmp[107377](107399 call _cond_test(107401 call !(107406 call(107403 call . f c"error")))))
        WhileDo
        {
          {
            if(107254 call _cond_test first)
            {
              (107124 call = first 0)
              if(107158 call _cond_test(107130 call || isjson ischpl))
              {
                (107138 call <~> f(107137 'new'(107136 call ioLiteral "]")))
              }
              {
                { scopeless
                  if(107154 call _cond_test isspace)
                  {
                    (107150 call <~> f(107149 'new'(107148 call ioNewline(skipWhitespaceOnly = 1))))
                  }
                }
              }
              if(107191 call _cond_test(107170 call ==(107168 call(107164 call . f c"error")) EFORMAT))
              {
                (107179 call(107175 call . f c"clearError"))
              }
              {
                (107184 call = read_end 1)
                break nil[38]
              }
            }
            {
              if(107223 call _cond_test isspace)
              {
                { scopeless
                  (107202 call <~> f(107201 'new'(107200 call ioLiteral " ")))
                }
              }
              {
                { scopeless
                  if(107218 call _cond_test(107207 call || isjson ischpl))
                  {
                    { scopeless
                      (107215 call <~> f(107214 'new'(107213 call ioLiteral ",")))
                    }
                  }
                }
              }
              if(107250 call _cond_test(107237 call ==(107235 call(107231 call . f c"error")) EFORMAT))
              {
                (107244 call(107240 call . f c"clearError"))
                break nil[38]
              }
            }
            if(107354 call _cond_test(107270 call >= i(107267 call .(107266 call(107261 call . dom c"dsiDim") 1) c"size")))
            {
              unknown sz[107282](107279 call .(107278 call(107273 call . dom c"dsiDim") 1) c"size")
              if(107295 call _cond_test(107288 call < sz 4))
              {
                { scopeless
                  (107292 call = sz 4)
                }
              }
              (107305 call = sz(107303 call * 2 sz))
              const newDom[107317] "const"(107315 call chpl__buildDomainExpr(107312 call #(107309 call chpl_build_low_bounded_range offset) sz))
              (107328 call(107323 call . arr c"dsiReallocate") newDom)
              (107343 call(107331 call . dom c"dsiSetIndices")(107341 call(107337 call . newDom c"getIndices")))
              (107352 call(107348 call . arr c"dsiPostReallocate"))
            }
            (107369 call <~> f(107368 call(107360 call . arr c"dsiAccess")(107365 call + offset i)))
            (107374 call += i 1)
          }
          label _continueLabel[107380]
          (107394 'move' tmp[107377](107386 call _cond_test(107388 call !(107393 call(107390 call . f c"error")))))
          tmp[107377]
        }
        label _breakLabel[107381]
      }
      if(107432 call _cond_test(107411 call ! read_end))
      {
        if(107427 call _cond_test(107415 call || isjson ischpl))
        {
          (107423 call <~> f(107422 'new'(107421 call ioLiteral "]")))
        }
      }
      {
        const newDom[107445] "const"(107443 call chpl__buildDomainExpr(107440 call #(107437 call chpl_build_low_bounded_range offset) i))
        (107455 call(107450 call . arr c"dsiReallocate") newDom)
        (107468 call(107458 call . dom c"dsiSetIndices")(107466 call(107462 call . newDom c"getIndices")))
        (107475 call(107471 call . arr c"dsiPostReallocate"))
      }
    }
    {
      { scopeless
        if(107750 call _cond_test(107522 call &&(107511 call &&(107508 call &&(107500 call &&(107491 call &&(107484 call(107480 call . arr c"isDefaultRectangular"))(107489 call !(107488 call chpl__isArrayView arr)))(107499 call _isSimpleIoType(107495 call . arr c"eltType")))(107507 call(107503 call . f c"binary"))) isNative)(107521 call(107516 call . arr c"isDataContiguous") dom)))
        {
          const elemSize[107531] "const"(107530 call c_sizeof(107526 call . arr c"eltType"))
          if(107608 call _cond_test boundsChecking)
          {
            unknown rw[107545](107542 IfExpr (107537 call . f c"writing") then
            { scopeless
              "write"
            } else
            { scopeless
              "read"
            } )
            (107606 call assert(107570 call <=(107561 call *(107555 call _cast uint[107](107551 call . dom c"dsiNumIndices"))(107559 call _cast uint[107] elemSize))(107568 call _cast uint[107](107566 call max ssize_t))) "length of array to " rw " is greater than ssize_t can hold")
          }
          const len[107616] "const"(107613 call . dom c"dsiNumIndices")
          const src[107623] "const"(107620 call . arr c"theData")
          const idx[107636] "const"(107635 call(107627 call . arr c"getDataIndex")(107631 call . dom c"dsiLow"))
          const size[107649] "const"(107647 call *(107641 call _cast ssize_t len)(107645 call _cast ssize_t elemSize))
          Try
          {
            {
              if(107696 call _cond_test(107653 call . f c"writing"))
              {
                (107673 call(107659 call . f c"writeBytes")(107670 call _ddata_shift(107664 call . arr c"eltType") src idx) size)
              }
              {
                (107693 call(107679 call . f c"readBytes")(107690 call _ddata_shift(107684 call . arr c"eltType") src idx) size)
              }
            }
          }
          Catch e : SystemError
          {
            (107718 call(107708 call . f c"setError")(107714 call . e c"err"))
          }
          Catch
          {
            (107731 call(107723 call . f c"setError")(107728 call _cast syserr EINVAL))
          }
        }
        {
          const zeroTup[107741] "const"(107739 call * rank idxType)
          (107748 call recursiveArrayWriter zeroTup)
        }
      }
    }
  }
  function _unknown[43].dsiSerialWrite[107766](arg _mt[107771]:_MT[227], arg this[107768] :
  DefaultRectangularArr, arg f[107764]:_any[170](?)) : _unknown[43] "method"
  {
    (107776 call dsiSerialReadWrite f)
  }
  function _unknown[43].dsiSerialRead[107786](arg _mt[107791]:_MT[227], arg this[107788] :
  DefaultRectangularArr, arg f[107784]:_any[170](?)) : _unknown[43] "method"
  {
    (107796 call dsiSerialReadWrite f)
  }
  function _unknown[43].isDataContiguous[107806](arg _mt[107811]:_MT[227], arg this[107808] :
  DefaultRectangularArr, arg dom[107804]:_any[170](?)) : _unknown[43] "method"
  {
    if(107852 call _cond_test debugDefaultDistBulkTransfer)
    {
      { scopeless
        (107850 call chpl_debug_writeln "isDataContiguous(): off=" off " blk=" blk)
      }
    }
    if(107868 call _cond_test(107863 call !=(107861 call blk rank) 1))
    {
      { scopeless
        (107866 return 0)
      }
    }
    {
      unknown dim[107921] 0
      unknown tmp[107922] "maybe param" "temp"
      (107933 'move' tmp[107922](107931 call chpl_compute_low_param_loop_bound 1(107876 call - rank 1)))
      unknown tmp[107923] "maybe param" "temp"
      (107943 'move' tmp[107923](107941 call chpl_compute_high_param_loop_bound 1(107938 call - rank 1)))
      unknown tmp[107924] "maybe param" "temp"
      (107946 'move' tmp[107924](107881 call - 1))
      ParamForLoop
      { dim[107921] tmp[107922] tmp[107923] tmp[107924]
        { scopeless
          if(107916 call _cond_test(107911 call !=(107888 call blk dim)(107909 call *(107895 call blk(107892 call + dim 1))(107906 call .(107905 call(107897 call . dom c"dsiDim")(107902 call + dim 1)) c"length"))))
          {
            { scopeless
              (107914 return 0)
            }
          }
        }
      }
      label _unused_continueLabel[107926]
      label _breakLabel[107925]
    }
    if(107978 call _cond_test debugDefaultDistBulkTransfer)
    {
      { scopeless
        (107976 call chpl_debug_writeln "\tYES!")
      }
    }
    (107984 return 1)
  }
  function _canDoSimpleTransfer[107992](arg A[107990]:_any[170](?), arg aView[107994]:_any[170](?), arg B[107996]:_any[170](?), arg bView[107998]:_any[170](?)) : _unknown[43] "private"
  {
    if(108056 call _cond_test(108024 call ||(108010 call !(108009 call(108001 call . A c"isDataContiguous")(108005 call . aView c"_value")))(108022 call !(108021 call(108013 call . B c"isDataContiguous")(108017 call . bView c"_value")))))
    {
      if(108047 call _cond_test debugDefaultDistBulkTransfer)
      {
        { scopeless
          (108045 call chpl_debug_writeln "isDataContiguous return False")
        }
      }
      (108054 return 0)
    }
    (108062 return 1)
  }
  function _canDoComplexTransfer[108070](arg A[108068]:_any[170](?), arg aView[108072]:_any[170](?), arg B[108074]:_any[170](?), arg bView[108076]:_any[170](?)) : _unknown[43] "private"
  {
    (108079 return useBulkTransferStride)
  }
  function _unknown[43].doiCanBulkTransferRankChange[108087](arg _mt[108092]:_MT[227], arg this[108089] :
  DefaultRectangularArr) param : _unknown[43] "method"
  {
    { scopeless
      (108095 return 1)
    }
  }
  function _unknown[43].doiBulkTransferToKnown[108105](arg _mt[108116]:_MT[227], arg this[108113] :
  DefaultRectangularArr, arg srcDom[108103]:_any[170](?), arg destClass[108108] :
  DefaultRectangularArr, arg destDom[108111]:_any[170](?)) : _unknown[43] "method"
  {
    (108126 return(108125 call transferHelper destClass destDom this srcDom))
  }
  { scopeless type
    bool[10]
  }
  function _unknown[43].doiBulkTransferFromKnown[108137](arg _mt[108148]:_MT[227], arg this[108145] :
  DefaultRectangularArr, arg destDom[108135]:_any[170](?), arg srcClass[108140] :
  DefaultRectangularArr, arg srcDom[108143]:_any[170](?)) : _unknown[43] "method"
  {
    (108158 return(108157 call transferHelper this destDom srcClass srcDom))
  }
  { scopeless type
    bool[10]
  }
  function transferHelper[108168](arg A[108166]:_any[170](?), arg aView[108170]:_any[170](?), arg B[108172]:_any[170](?), arg bView[108174]:_any[170](?)) : _unknown[43] "private"
  {
    if(108299 call _cond_test(108212 call &&(108203 call &&(108185 call ==(108178 call . A c"rank")(108182 call . B c"rank"))(108201 call &&(108192 call ==(108188 call . aView c"stridable") 0)(108199 call ==(108195 call . bView c"stridable") 0)))(108211 call _canDoSimpleTransfer A aView B bView)))
    {
      if(108235 call _cond_test debugDefaultDistBulkTransfer)
      {
        { scopeless
          (108233 call chpl_debug_writeln "Performing simple DefaultRectangular transfer")
        }
      }
      (108247 call _simpleTransfer A aView B bView)
    }
    {
      { scopeless
        if(108295 call _cond_test(108255 call _canDoComplexTransfer A aView B bView))
        {
          if(108277 call _cond_test debugDefaultDistBulkTransfer)
          {
            { scopeless
              (108275 call chpl_debug_writeln "Performing complex DefaultRectangular transfer")
            }
          }
          (108289 call complexTransfer A aView B bView)
        }
        {
          (108292 return 0)
        }
      }
    }
    (108306 return 1)
  }
  { scopeless type
    bool[10]
  }
  function _simpleTransfer[108315](arg A[108313]:_any[170](?), arg aView[108317]:_any[170](?), arg B[108319]:_any[170](?), arg bView[108321]:_any[170](?)) : _unknown[43] "private"
  {
    unknown rank[108327] "param"(108324 call . A c"rank")
    unknown idxType[108335] "type variable"(108332 call . A c"idxType")
    unknown eltType[108342] "type variable"(108339 call . A c"eltType")
    const Adims[108351] "const"(108350 call(108346 call . aView c"dims"))
    unknown Alo[108361](108359 call * rank(108356 call . aView c"idxType"))
    {
      unknown i[108382] 0
      unknown tmp[108383] "maybe param" "temp"
      (108395 'move' tmp[108383](108393 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[108384] "maybe param" "temp"
      (108402 'move' tmp[108384](108400 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[108385] "maybe param" "temp"
      (108405 'move' tmp[108385] 1)
      ParamForLoop
      { i[108382] tmp[108383] tmp[108384] tmp[108385]
        { scopeless
          (108379 call =(108371 call Alo i)(108376 call .(108375 call Adims i) c"first"))
        }
      }
      label _unused_continueLabel[108387]
      label _breakLabel[108386]
    }
    const Bdims[108422] "const"(108421 call(108417 call . bView c"dims"))
    unknown Blo[108432](108430 call * rank(108427 call . B c"idxType"))
    {
      unknown i[108453] 0
      unknown tmp[108454] "maybe param" "temp"
      (108466 'move' tmp[108454](108464 call chpl_compute_low_param_loop_bound 1 rank))
      unknown tmp[108455] "maybe param" "temp"
      (108473 'move' tmp[108455](108471 call chpl_compute_high_param_loop_bound 1 rank))
      unknown tmp[108456] "maybe param" "temp"
      (108476 'move' tmp[108456] 1)
      ParamForLoop
      { i[108453] tmp[108454] tmp[108455] tmp[108456]
        { scopeless
          (108450 call =(108442 call Blo i)(108447 call .(108446 call Bdims i) c"first"))
        }
      }
      label _unused_continueLabel[108458]
      label _breakLabel[108457]
    }
    const len[108497] "const"(108496 call(108491 call .(108488 call . aView c"numIndices") c"safeCast") size_t)
    if(108506 call _cond_test(108502 call == len 0))
    {
      { scopeless
        (108504 return)
      }
    }
    if(108621 call _cond_test debugBulkTransfer)
    {
      function sizeof[108516](arg x[108514]:_any[170](?)) : _unknown[43] "extern" "local args" "no fn body" "fn synchronization free"
      {
      }
      { scopeless type
        int[13]
      }
      const elemSize[108530] "const"(108529 call sizeof(108525 call . B c"eltType"))
      (108619 call chpl_debug_writeln "In DefaultRectangular._simpleTransfer():" " Alo=" Alo ", Blo=" Blo ", len=" len ", elemSize=" elemSize)
    }
    const Aidx[108632] "const"(108631 call(108626 call . A c"getDataIndex") Alo)
    const Adata[108644] "const"(108643 call _ddata_shift eltType(108639 call . A c"theData") Aidx)
    const Bidx[108654] "const"(108653 call(108648 call . B c"getDataIndex") Blo)
    const Bdata[108666] "const"(108665 call _ddata_shift eltType(108661 call . B c"theData") Bidx)
    (108676 call _simpleTransferHelper A B Adata Bdata len)
  }
  function _simpleTransferHelper[108684](arg A[108682]:_any[170](?), arg B[108686]:_any[170](?), arg Adata[108688]:_any[170](?), arg Bdata[108690]:_any[170](?), arg len[108692]:_any[170](?)) : _unknown[43] "private"
  {
    if(108700 call _cond_test(108696 call == Adata Bdata))
    {
      { scopeless
        (108698 return)
      }
    }
    if(108932 call _cond_test(108717 call ==(108710 '_wide_get_node' Adata)(108714 call . here c"id")))
    {
      if(108745 call _cond_test debugDefaultDistBulkTransfer)
      {
        { scopeless
          (108743 call chpl_debug_writeln "\tlocal get() from "(108742 '_wide_get_node' B))
        }
      }
      (108767 'chpl_comm_array_get'(108756 call Adata 0)(108761 '_wide_get_node' Bdata)(108765 call Bdata 0) len)
    }
    {
      { scopeless
        if(108927 call _cond_test(108778 call ==(108773 '_wide_get_node' Bdata)(108775 call . here c"id")))
        {
          if(108806 call _cond_test debugDefaultDistBulkTransfer)
          {
            { scopeless
              (108804 call chpl_debug_writeln "\tlocal put() to "(108803 '_wide_get_node' A))
            }
          }
          (108843 'chpl_comm_array_put'(108832 call Bdata 0)(108837 '_wide_get_node' Adata)(108841 call Adata 0) len)
        }
        {
          { scopeless
            {
              const tmp[108922] "const" "temp"
              (108923 'move' tmp[108922](108920 'deref'(108919 '_wide_get_locale'(108847 call chpl_localeID_to_locale(108846 '_wide_get_locale' Adata)))))
              {
                if(108895 call _cond_test debugDefaultDistBulkTransfer)
                {
                  { scopeless
                    (108893 call chpl_debug_writeln "\tremote get() on "(108869 call . here c"id") " from "(108892 '_wide_get_node' B))
                  }
                }
                (108917 'chpl_comm_array_get'(108906 call Adata 0)(108911 '_wide_get_node' Bdata)(108915 call Bdata 0) len)
              }
            }
          }
        }
      }
    }
  }
  function complexTransfer[108943](arg A[108941]:_any[170](?), arg aView[108945]:_any[170](?), arg B[108947]:_any[170](?), arg bView[108949]:_any[170](?)) : _unknown[43] "private"
  {
    if(109047 call _cond_test(108979 call &&(108963 call !=(108958 '_wide_get_node'(108952 call . A c"data"))(108960 call . here c"id"))(108977 call !=(108972 '_wide_get_node'(108966 call . B c"data"))(108974 call . here c"id"))))
    {
      if(109013 call _cond_test debugDefaultDistBulkTransfer)
      {
        (109010 call chpl_debug_writeln "BulkTransferStride: Both arrays on different locale, moving to locale of destination: LOCALE"(109009 '_wide_get_node'(109003 call . A c"data")))
      }
      {
        const tmp[109033] "const" "temp"
        (109034 'move' tmp[109033](109031 'deref'(109030 '_wide_get_locale'(109019 call . A c"data"))))
        { scopeless
          (109028 call complexTransferCore A aView B bView)
        }
      }
    }
    {
      (109044 call complexTransferCore A aView B bView)
    }
  }
  function complexTransferCore[109058](arg LHS[109056]:_any[170](?), arg LViewDom[109060]:_any[170](?), arg RHS[109062]:_any[170](?), arg RViewDom[109064]:_any[170](?)) : _unknown[43] "private"
  {
    unknown minRank[109077] "param"(109076 call min(109068 call . LHS c"rank")(109073 call . RHS c"rank"))
    unknown idxType[109085] "type variable"(109082 call . LHS c"idxType")
    unknown intIdxType[109092] "type variable"(109089 call . LHS c"intIdxType")
    if(109176 call _cond_test debugDefaultDistBulkTransfer)
    {
      (109132 call writeln "Transferring views :" LViewDom " <-- " RViewDom)
      (109174 call writeln "Original domains   :"(109163 call(109159 call .(109154 call . LHS c"dom") c"dsiDims")) " <-- "(109173 call(109169 call .(109166 call . RHS c"dom") c"dsiDims")))
    }
    const LeftDims[109186] "const"(109185 call(109181 call . LViewDom c"dims"))
    const RightDims[109195] "const"(109194 call(109190 call . RViewDom c"dims"))
    { scopeless
      const tmp[109210] "const" "no copy" "temp"(109209 call bulkCommComputeActiveDims LeftDims RightDims)
      (109220 call _check_tuple_var_decl tmp[109210] 3)
      const LeftActives[109198] "const"(109211 call tmp[109210] 1)
      const RightActives[109200] "const"(109214 call tmp[109210] 2)
      const inferredRank[109202] "const"(109217 call tmp[109210] 3)
    }
    unknown DimSizes[109242](109240 call chpl__buildArrayRuntimeType(109238 call chpl__ensureDomainExpr(109227 call chpl_build_bounded_range 1 inferredRank))(109237 'typeof'(109234 call .(109233 call LeftDims 1) c"size")))
    {
      unknown _indexOfInterest[109272] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[109273] "expr temp" "temp"
      (109282 'move' _iterator[109273](109280 call _getIterator(109287 call chpl_direct_range_iter 1 inferredRank 1)))
      Defer
      {
        {
          (109303 call _freeIterator _iterator[109273])
        }
      }
      { scopeless type
        (109292 'move' _indexOfInterest[109272](109289 call iteratorIndex _iterator[109273]))
      }
      ForLoop
      {
        unknown i[109296] "index var" "insert auto destroy"
        (109298 'move' i[109296] _indexOfInterest[109272])
        {
          const dimIdx[109254] "const"(109253 call LeftActives i)
          (109269 call =(109261 call DimSizes i)(109266 call .(109265 call LeftDims dimIdx) c"size"))
        }
        label _continueLabel[109277]
        _indexOfInterest[109272]
        _iterator[109273]
      }
      label _breakLabel[109278]
    }
    if(109333 call _cond_test debugDefaultDistBulkTransfer)
    {
      (109330 call writeln "inferredRank = " inferredRank)
    }
    (109359 call assert(109340 call <= inferredRank minRank) "complex DR transfer: computed rank greater than minimum rank!")
    { scopeless
      unknown LBlk[109361](109366 call * minRank intIdxType)
      unknown RBlk[109368](109372 'typeof' LBlk)
    }
    {
      {
        unknown _indexOfInterest[109480] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[109481] "expr temp" "temp"
        (109490 'move' _iterator[109481](109488 call _getIterator(109501 call chpl_direct_range_iter 1 inferredRank(109497 call - 1))))
        Defer
        {
          {
            (109517 call _freeIterator _iterator[109481])
          }
        }
        { scopeless type
          (109506 'move' _indexOfInterest[109480](109503 call iteratorIndex _iterator[109481]))
        }
        ForLoop
        {
          unknown idx[109510] "index var" "insert auto destroy"
          (109512 'move' idx[109510] _indexOfInterest[109480])
          {
            const li[109387] "const"(109386 call LeftActives idx)
            (109429 call =(109394 call LBlk idx)(109427 call *(109401 call(109396 call . LHS c"blk") li)(109425 call _cast intIdxType(109422 call /(109406 call .(109405 call LeftDims li) c"stride")(109419 call .(109418 call(109413 call .(109410 call . LHS c"dom") c"dsiDim") li) c"stride")))))
            const ri[109436] "const"(109435 call RightActives idx)
            (109477 call =(109442 call RBlk idx)(109475 call *(109449 call(109444 call . RHS c"blk") ri)(109473 call _cast intIdxType(109470 call /(109454 call .(109453 call RightDims ri) c"stride")(109467 call .(109466 call(109461 call .(109458 call . RHS c"dom") c"dsiDim") ri) c"stride")))))
          }
          label _continueLabel[109485]
          _indexOfInterest[109480]
          _iterator[109481]
        }
        label _breakLabel[109486]
      }
    }
    if(109569 call _cond_test debugDefaultDistBulkTransfer)
    {
      (109545 call writeln "LBlk = " LBlk)
      (109567 call writeln "RBlk = " RBlk)
    }
    unknown stridelevels[109574] 0
    unknown countDom[109587](109585 call chpl__buildDomainExpr(109582 call chpl_build_bounded_range 1(109580 call + inferredRank 1)))
    unknown count[109597](109595 call chpl__buildArrayRuntimeType(109593 call chpl__ensureDomainExpr countDom) size_t)
    {
      unknown _indexOfInterest[109607] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[109608] "expr temp" "temp"
      (109617 'move' _iterator[109608](109615 call _getIterator count))
      Defer
      {
        {
          (109633 call _freeIterator _iterator[109608])
        }
      }
      { scopeless type
        (109622 'move' _indexOfInterest[109607](109619 call iteratorIndex _iterator[109608]))
      }
      ForLoop
      {
        unknown c[109626] "index var" "insert auto destroy"
        (109628 'move' c[109626] _indexOfInterest[109607])
        { scopeless
          (109604 call = c 1)
        }
        label _continueLabel[109612]
        _indexOfInterest[109607]
        _iterator[109608]
      }
      label _breakLabel[109613]
    }
    unknown strideDom[109647](109645 call chpl__buildDomainExpr(109642 call chpl_build_bounded_range 1 inferredRank))
    { scopeless
      unknown dstStride[109650](109658 call chpl__buildArrayRuntimeType(109656 call chpl__ensureDomainExpr strideDom) size_t)
      unknown srcStride[109660](109664 'typeof' dstStride)
    }
    if(109729 call _cond_test(109679 call ||(109670 call >(109668 call LBlk inferredRank) 1)(109677 call >(109675 call RBlk inferredRank) 1)))
    {
      (109683 call += stridelevels 1)
      (109692 call =(109690 call count stridelevels) 1)
      (109709 call =(109698 call dstStride stridelevels)(109708 call(109703 call .(109702 call LBlk inferredRank) c"safeCast") size_t))
      (109726 call =(109715 call srcStride stridelevels)(109725 call(109720 call .(109719 call RBlk inferredRank) c"safeCast") size_t))
    }
    {
      unknown _indexOfInterest[109838] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[109839] "expr temp" "temp"
      (109848 'move' _iterator[109839](109846 call _getIterator(109859 call chpl_direct_range_iter 2 inferredRank(109855 call - 1))))
      Defer
      {
        {
          (109875 call _freeIterator _iterator[109839])
        }
      }
      { scopeless type
        (109864 'move' _indexOfInterest[109838](109861 call iteratorIndex _iterator[109839]))
      }
      ForLoop
      {
        unknown i[109868] "index var" "insert auto destroy"
        (109870 'move' i[109868] _indexOfInterest[109838])
        {
          (109760 call *=(109749 call count(109746 call + stridelevels 1))(109759 call(109754 call .(109753 call DimSizes i) c"safeCast") size_t))
          const bothReuse[109782] "const"(109780 call &&(109771 call canReuseStride LBlk i stridelevels count dstStride)(109779 call canReuseStride RBlk i stridelevels count srcStride))
          if(109834 call _cond_test(109786 call ! bothReuse))
          {
            (109790 call += stridelevels 1)
            (109811 call =(109797 call dstStride stridelevels)(109810 call(109805 call .(109804 call LBlk(109801 call - i 1)) c"safeCast") size_t))
            (109831 call =(109817 call srcStride stridelevels)(109830 call(109825 call .(109824 call RBlk(109821 call - i 1)) c"safeCast") size_t))
          }
        }
        label _continueLabel[109843]
        _indexOfInterest[109838]
        _iterator[109839]
      }
      label _breakLabel[109844]
    }
    (109899 call *=(109888 call count(109885 call + stridelevels 1))(109898 call(109893 call .(109892 call DimSizes 1) c"safeCast") size_t))
    (109924 call assert(109905 call <= stridelevels inferredRank) "BulkTransferStride: stride levels greater than rank.")
    if(109984 call _cond_test(109928 call == stridelevels 0))
    {
      { scopeless
        (109982 call assert(109939 call ==(109934 call count 1)(109936 call . LViewDom c"numIndices")) "BulkTransferStride: bulk-count incorrect for stride level of 0: "(109961 call count 1) " != "(109979 call . LViewDom c"numIndices"))
      }
    }
    (110000 call = countDom(109998 call chpl__buildDomainExpr(109995 call chpl_build_bounded_range 1(109993 call + stridelevels 1))))
    (110011 call = strideDom(110009 call chpl__buildDomainExpr(110006 call chpl_build_bounded_range 1 stridelevels)))
    function getFirstIdx[110018](arg dims[110016]:_any[170](?)) : _unknown[43]
    {
      unknown ret[110033](110031 call *(110021 call . dims c"size")(110028 call .(110027 call dims 1) c"idxType"))
      {
        unknown i[110078] 0
        unknown tmp[110079] "maybe param" "temp"
        (110091 'move' tmp[110079](110089 call chpl_compute_low_param_loop_bound 1(110039 call . dims c"size")))
        unknown tmp[110080] "maybe param" "temp"
        (110101 'move' tmp[110080](110099 call chpl_compute_high_param_loop_bound 1(110096 call . dims c"size")))
        unknown tmp[110081] "maybe param" "temp"
        (110104 'move' tmp[110081] 1)
        ParamForLoop
        { i[110078] tmp[110079] tmp[110080] tmp[110081]
          { scopeless
            (110075 call =(110047 call ret i)(110072 IfExpr (110056 call <(110052 call .(110051 call dims i) c"stride") 0) then
            { scopeless
              (110062 call .(110061 call dims i) c"last")
            } else
            { scopeless
              (110069 call .(110068 call dims i) c"first")
            } ))
          }
        }
        label _unused_continueLabel[110083]
        label _breakLabel[110082]
      }
      (110116 return ret)
    }
    const LFirst[110124] "const"(110123 call getFirstIdx LeftDims)
    const RFirst[110131] "const"(110130 call getFirstIdx RightDims)
    (110150 call complexTransferComm LHS RHS(110143 call _cast(110142 call int[13] 32) stridelevels) dstStride srcStride count LFirst RFirst)
  }
  function complexTransferComm[110158](arg A[110156]:_any[170](?), arg B[110160]:_any[170](?), arg stridelevels[110166] :
  (110165 call int[13] 32), arg dstStride[110169]:_any[170](?), arg srcStride[110171]:_any[170](?), arg count[110173]:_any[170](?), arg AFirst[110175]:_any[170](?), arg BFirst[110177]:_any[170](?)) : _unknown[43] "private"
  {
    if(110308 call _cond_test debugDefaultDistBulkTransfer)
    {
      (110305 call chpl_debug_writeln "BulkTransferStride with values:\n" "\tLocale        = "(110220 call stringify(110216 call . here c"id")) "\n" "\tStride levels = "(110241 call stringify stridelevels) "\n" "\tdstStride     = "(110262 call stringify dstStride) "\n" "\tsrcStride     = "(110283 call stringify srcStride) "\n" "\tcount         = "(110304 call stringify count))
    }
    const AO[110322] "const"(110321 call(110314 call . A c"getDataIndex") AFirst(getShifted = 0))
    const BO[110334] "const"(110333 call(110326 call . B c"getDataIndex") BFirst(getShifted = 0))
    const dest[110341] "const"(110338 call . A c"data")
    const src[110348] "const"(110345 call . B c"data")
    const dststr[110358] "const"(110355 call .(110352 call . dstStride c"_value") c"data")
    const srcstr[110368] "const"(110365 call .(110362 call . srcStride c"_value") c"data")
    const cnt[110378] "const"(110375 call .(110372 call . count c"_value") c"data")
    if(110620 call _cond_test(110390 call ==(110385 '_wide_get_node' dest)(110387 call . here c"id")))
    {
      const srclocale[110403] "const"(110401 call _cast(110400 call int[13] 32)(110396 '_wide_get_node' src))
      if(110430 call _cond_test debugBulkTransfer)
      {
        (110427 call chpl_debug_writeln "BulkTransferStride: On LHS - GET from " srclocale)
      }
      (110473 'chpl_comm_get_strd'(110454 call dest AO)(110458 call dststr 0) srclocale(110463 call src BO)(110467 call srcstr 0)(110471 call cnt 0) stridelevels)
    }
    {
      const destlocale[110486] "const"(110484 call _cast(110483 call int[13] 32)(110479 '_wide_get_node' dest))
      if(110548 call _cond_test debugDefaultDistBulkTransfer)
      {
        (110545 call assert(110501 call ==(110496 '_wide_get_node' src)(110498 call . here c"id")) "BulkTransferStride: Expected to be on "(110524 '_wide_get_node' src) ", actually on "(110542 call . here c"id"))
      }
      if(110575 call _cond_test debugBulkTransfer)
      {
        (110572 call chpl_debug_writeln "BulkTransferStride: On RHS - PUT to " destlocale)
      }
      (110618 'chpl_comm_put_strd'(110599 call dest AO)(110603 call dststr 0) destlocale(110608 call src BO)(110612 call srcstr 0)(110616 call cnt 0) stridelevels)
    }
  }
  function _unknown[43].isDefaultRectangular[110629](arg _mt[110634]:_MT[227], arg this[110631] :
  DefaultRectangularArr) param : _unknown[43] "method"
  {
    { scopeless
      (110637 return 1)
    }
  }
  function _unknown[43].isDefaultRectangular[110645](arg _mt[110650]:_MT[227], arg this[110647] :
  DefaultRectangularArr) param : _unknown[43] "method"
  {
    { scopeless
      (110653 return 1)
    }
  }
  unknown debugDRScan[110659] "config" "param" 0
  function _unknown[43].doiScan[110667](arg _mt[110674]:_MT[227], arg this[110671] :
  DefaultRectangularArr, arg op[110665]:_any[170](?), arg dom[110669]:_any[170](?)) : _unknown[43] "method"
  {
    (110688 'use' RangeChunk)
    unknown resType[110698] "type variable"(110697 'typeof'(110696 call(110692 call . op c"generate")))
    unknown res[110708](110706 call chpl__buildArrayRuntimeType(110704 call chpl__ensureDomainExpr dom) resType)
    { scopeless
      unknown tmp[110731] "no copy" "temp"(110730 call(110723 call . this c"chpl__preScan") op res dom)
      (110741 call _check_tuple_var_decl tmp[110731] 4)
      unknown numTasks[110711](110732 call tmp[110731] 1)
      unknown rngs[110713](110735 call tmp[110731] 2)
      unknown state[110715](110738 call tmp[110731] 3)
    }
    (110758 call(110749 call . this c"chpl__postScan") op res numTasks rngs state)
    (110762 call chpl__delete op)
    (110766 return res)
  }
  where {
    (110684 call &&(110678 call == rank 1)(110683 call chpl__scanStateResTypesMatch op))
  }
  function _unknown[43].chpl__preScan[110776](arg _mt[110791]:_MT[227], arg this[110788] :
  DefaultRectangularArr, arg op[110774]:_any[170](?), arg res[110783] :
  (110780 call chpl__buildArrayRuntimeType nil[38] unknown resType[110778]), arg dom[110786]:_any[170](?)) : _unknown[43] "method"
  {
    (110795 'use' RangeChunk 'only' )
    const rng[110807] "const"(110806 call(110801 call . dom c"dim") 1)
    const numTasks[110824] "const"(110821 IfExpr (110812 'task_get_serial') then
    { scopeless
      1
    } else
    { scopeless
      (110820 call _computeNumChunks(110816 call . rng c"size"))
    } )
    const rngs[110837] "const"(110836 call(110830 call . RangeChunk c"chunks") rng numTasks)
    if(110900 call _cond_test debugDRScan)
    {
      (110876 call writeln "Using " numTasks " tasks")
      (110898 call writeln "Whose chunks are: " rngs)
    }
    unknown state[110914](110912 call chpl__buildArrayRuntimeType(110910 call chpl__ensureDomainExpr(110906 call chpl_build_bounded_range 1 numTasks)) resType)
    if(111101 call _cond_test(110919 call == numTasks 1))
    {
      (110924 call preScanChunk 1)
    }
    {
      {
        unknown tmpIter[110938] "expr temp" "maybe ref" "no copy" "temp"
        (110941 'move' tmpIter[110938](110930 call chpl_build_bounded_range 1 numTasks))
        unknown isRngDomArr[111081] "maybe param" "temp"
        (111096 'move' isRngDomArr[111081](111094 call ||(111083 call isBoundedRange tmpIter[110938])(111092 call ||(111086 call isDomain tmpIter[110938])(111089 call isArray tmpIter[110938]))))
        if isRngDomArr[111081]
        {
          const _coforallCount[110948] "const" "end count" "temp"
          (111017 'move' _coforallCount[110948](111014 call _endCountAlloc 1))
          unknown numTasks[110949] "temp"
          (111001 'move' numTasks[110949](110997 call . tmpIter[110938] c"size"))
          (110992 call _upEndCount _coforallCount[110948] 1 numTasks[110949])
          (110989 call chpl_resetTaskSpawn numTasks[110949])
          unknown _indexOfInterest[110956] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[110957] "expr temp" "temp"
          (110966 'move' _iterator[110957](110964 call _getIterator tmpIter[110938]))
          Defer
          {
            {
              (110982 call _freeIterator _iterator[110957])
            }
          }
          { scopeless type
            (110971 'move' _indexOfInterest[110956](110968 call iteratorIndex _iterator[110957]))
          }
          ForLoop
          {
            unknown tid[110975] "coforall index var" "index var" "insert auto destroy"
            (110977 'move' tid[110975] _indexOfInterest[110956])
            {
              {
                (110945 call preScanChunk tid)
              }
              (110951 call _downEndCount _coforallCount[110948] nil[38])
              (110950 'coforall loop')
            }
            label _continueLabel[110961]
            _indexOfInterest[110956]
            _iterator[110957]
          }
          label _breakLabel[110962]
          Defer
          {
            {
              (111004 call _endCountFree _coforallCount[110948])
            }
          }
          (111009 call _waitEndCount _coforallCount[110948] 1 numTasks[110949])
        }
        {
          const _coforallCount[111021] "const" "end count" "temp"
          (111078 'move' _coforallCount[111021](111075 call _endCountAlloc 1))
          unknown _indexOfInterest[111029] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[111030] "expr temp" "temp"
          (111039 'move' _iterator[111030](111037 call _getIterator tmpIter[110938]))
          Defer
          {
            {
              (111055 call _freeIterator _iterator[111030])
            }
          }
          { scopeless type
            (111044 'move' _indexOfInterest[111029](111041 call iteratorIndex _iterator[111030]))
          }
          ForLoop
          {
            unknown tid[111048] "coforall index var" "index var" "insert auto destroy"
            (111050 'move' tid[111048] _indexOfInterest[111029])
            (111062 call _upEndCount _coforallCount[111021] 1)
            {
              {
                (110935 call preScanChunk tid)
              }
              (111024 call _downEndCount _coforallCount[111021] nil[38])
              (111023 'coforall loop')
            }
            label _continueLabel[111034]
            _indexOfInterest[111029]
            _iterator[111030]
          }
          label _breakLabel[111035]
          Defer
          {
            {
              (111066 call _endCountFree _coforallCount[111021])
            }
          }
          (111071 call _waitEndCount _coforallCount[111021] 1)
        }
      }
    }
    function preScanChunk[111109](arg tid[111107]:_any[170](?)) : _unknown[43]
    {
      const current[111112] "const" resType
      const myop[111122] "const"(111121 call(111117 call . op c"clone"))
      {
        unknown _indexOfInterest[111159] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[111160] "expr temp" "temp"
        (111169 'move' _iterator[111160](111167 call _getIterator(111129 call rngs tid)))
        Defer
        {
          {
            (111186 call _freeIterator _iterator[111160])
          }
        }
        { scopeless type
          (111175 'move' _indexOfInterest[111159](111172 call iteratorIndex _iterator[111160]))
        }
        ForLoop
        {
          unknown i[111179] "index var" "insert auto destroy"
          (111181 'move' i[111179] _indexOfInterest[111159])
          {
            unknown elem[111134] "ref var"(111133 call dsiAccess i)
            (111144 call(111139 call . myop c"accumulate") elem)
            (111156 call =(111149 call res i)(111155 call(111151 call . myop c"generate")))
          }
          label _continueLabel[111164]
          _indexOfInterest[111159]
          _iterator[111160]
        }
        label _breakLabel[111165]
      }
      (111207 call =(111196 call state tid)(111206 call res(111202 call .(111201 call rngs tid) c"high")))
      (111212 call chpl__delete myop)
    }
    if(111261 call _cond_test debugDRScan)
    {
      (111237 call writeln "res = " res)
      (111259 call writeln "state = " state)
    }
    const metaop[111271] "const"(111270 call(111266 call . op c"clone"))
    unknown next[111279](111276 call . metaop c"identity") resType
    {
      unknown _indexOfInterest[111310] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[111311] "expr temp" "temp"
      (111320 'move' _iterator[111311](111318 call _getIterator(111325 call chpl_direct_range_iter 1 numTasks 1)))
      Defer
      {
        {
          (111341 call _freeIterator _iterator[111311])
        }
      }
      { scopeless type
        (111330 'move' _indexOfInterest[111310](111327 call iteratorIndex _iterator[111311]))
      }
      ForLoop
      {
        unknown i[111334] "index var" "insert auto destroy"
        (111336 'move' i[111334] _indexOfInterest[111310])
        {
          (111292 call <=>(111290 call state i) next)
          (111308 call(111299 call . metaop c"accumulateOntoState") next(111307 call state i))
        }
        label _continueLabel[111315]
        _indexOfInterest[111310]
        _iterator[111311]
      }
      label _breakLabel[111316]
    }
    (111350 call chpl__delete metaop)
    if(111360 call _cond_test debugDRScan)
    {
      { scopeless
        (111358 call writeln "state = " state)
      }
    }
    (111372 return(111370 call _build_tuple numTasks rngs state next))
  }
  function _unknown[43].chpl__postScan[111381](arg _mt[111394]:_MT[227], arg this[111391] :
  DefaultRectangularArr, arg op[111379]:_any[170](?), arg res[111383]:_any[170](?), arg numTasks[111385]:_any[170](?), arg rngs[111387]:_any[170](?), arg state[111389]:_any[170](?)) : _unknown[43] "method"
  {
    if(111580 call _cond_test(111398 call == numTasks 1))
    {
      (111403 call postScanChunk 1)
    }
    {
      {
        unknown tmpIter[111417] "expr temp" "maybe ref" "no copy" "temp"
        (111420 'move' tmpIter[111417](111409 call chpl_build_bounded_range 1 numTasks))
        unknown isRngDomArr[111560] "maybe param" "temp"
        (111575 'move' isRngDomArr[111560](111573 call ||(111562 call isBoundedRange tmpIter[111417])(111571 call ||(111565 call isDomain tmpIter[111417])(111568 call isArray tmpIter[111417]))))
        if isRngDomArr[111560]
        {
          const _coforallCount[111427] "const" "end count" "temp"
          (111496 'move' _coforallCount[111427](111493 call _endCountAlloc 1))
          unknown numTasks[111428] "temp"
          (111480 'move' numTasks[111428](111476 call . tmpIter[111417] c"size"))
          (111471 call _upEndCount _coforallCount[111427] 1 numTasks[111428])
          (111468 call chpl_resetTaskSpawn numTasks[111428])
          unknown _indexOfInterest[111435] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[111436] "expr temp" "temp"
          (111445 'move' _iterator[111436](111443 call _getIterator tmpIter[111417]))
          Defer
          {
            {
              (111461 call _freeIterator _iterator[111436])
            }
          }
          { scopeless type
            (111450 'move' _indexOfInterest[111435](111447 call iteratorIndex _iterator[111436]))
          }
          ForLoop
          {
            unknown tid[111454] "coforall index var" "index var" "insert auto destroy"
            (111456 'move' tid[111454] _indexOfInterest[111435])
            {
              {
                (111424 call postScanChunk tid)
              }
              (111430 call _downEndCount _coforallCount[111427] nil[38])
              (111429 'coforall loop')
            }
            label _continueLabel[111440]
            _indexOfInterest[111435]
            _iterator[111436]
          }
          label _breakLabel[111441]
          Defer
          {
            {
              (111483 call _endCountFree _coforallCount[111427])
            }
          }
          (111488 call _waitEndCount _coforallCount[111427] 1 numTasks[111428])
        }
        {
          const _coforallCount[111500] "const" "end count" "temp"
          (111557 'move' _coforallCount[111500](111554 call _endCountAlloc 1))
          unknown _indexOfInterest[111508] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[111509] "expr temp" "temp"
          (111518 'move' _iterator[111509](111516 call _getIterator tmpIter[111417]))
          Defer
          {
            {
              (111534 call _freeIterator _iterator[111509])
            }
          }
          { scopeless type
            (111523 'move' _indexOfInterest[111508](111520 call iteratorIndex _iterator[111509]))
          }
          ForLoop
          {
            unknown tid[111527] "coforall index var" "index var" "insert auto destroy"
            (111529 'move' tid[111527] _indexOfInterest[111508])
            (111541 call _upEndCount _coforallCount[111500] 1)
            {
              {
                (111414 call postScanChunk tid)
              }
              (111503 call _downEndCount _coforallCount[111500] nil[38])
              (111502 'coforall loop')
            }
            label _continueLabel[111513]
            _indexOfInterest[111508]
            _iterator[111509]
          }
          label _breakLabel[111514]
          Defer
          {
            {
              (111545 call _endCountFree _coforallCount[111500])
            }
          }
          (111550 call _waitEndCount _coforallCount[111500] 1)
        }
      }
    }
    function postScanChunk[111589](arg tid[111587]:_any[170](?)) : _unknown[43]
    {
      const myadjust[111595] "const"(111594 call state tid)
      {
        unknown _indexOfInterest[111617] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[111618] "expr temp" "temp"
        (111627 'move' _iterator[111618](111625 call _getIterator(111603 call rngs tid)))
        Defer
        {
          {
            (111644 call _freeIterator _iterator[111618])
          }
        }
        { scopeless type
          (111633 'move' _indexOfInterest[111617](111630 call iteratorIndex _iterator[111618]))
        }
        ForLoop
        {
          unknown i[111637] "index var" "insert auto destroy"
          (111639 'move' i[111637] _indexOfInterest[111617])
          {
            (111614 call(111605 call . op c"accumulateOntoState")(111611 call res i) myadjust)
          }
          label _continueLabel[111622]
          _indexOfInterest[111617]
          _iterator[111618]
        }
        label _breakLabel[111623]
      }
    }
    if(111660 call _cond_test debugDRScan)
    {
      { scopeless
        (111658 call writeln "res = " res)
      }
    }
  }
  function canReuseStride[111671](arg blk[111669]:_any[170](?), arg curDim[111674] :
  int[13], arg levels[111677]:_any[170](?), arg count[111679]:_any[170](?), arg stride[111681]:_any[170](?)) : _unknown[43] "private"
  {
    const lastCount[111690] "const"(111689 call count(111686 call + levels 1))
    const curStride[111706] "const"(111703 IfExpr (111696 call < levels 1) then
    { scopeless
      1
    } else
    { scopeless
      (111702 call stride levels)
    } )
    const lastIndex[111716] "const"(111714 call *(111711 call - lastCount 1) curStride)
    const nextIndex[111723] "const"(111721 call + lastIndex curStride)
    (111736 return(111734 call ==(111732 call blk(111729 call - curDim 1)) nextIndex))
  }
}