AST dump for Reflection after pass parse.
Module use list: 

{
  (328318 'use' ChapelStandard)
  function numFields[211228](arg t[211226]:_any[170](?)) param : _unknown[43]
  {
    { scopeless
      (211235 return(211234 'num fields' t))
    }
  }
  { scopeless type
    int[13]
  }
  function getFieldName[211246](arg t[211244]:_any[170](?), param arg i[211249] :
  int[13]) param : _unknown[43]
  {
    { scopeless
      (211258 return(211257 'field num to name' t i))
    }
  }
  { scopeless type
    string[24]
  }
  function getField[211271](const  ref arg x[211268] :
  unknown t[211266], param arg i[211274] :
  int[13]) param : _unknown[43]
  {
    (211305 return(211304 'field by num' x i))
  }
  where {
    (211298 call &&(211288 call &&(211279 call > i 0)(211286 call <= i(211285 call numFields t)))(211297 call isParam(211295 'field by num' x i)))
  }
  function getField[211318](const  ref arg x[211315] :
  unknown t[211313], param arg i[211321] :
  int[13]) type : _unknown[43]
  {
    (211352 return(211351 'field by num' x i))
  }
  where {
    (211345 call &&(211335 call &&(211326 call > i 0)(211333 call <= i(211332 call numFields t)))(211344 call isType(211342 'field by num' x i)))
  }
  function getField[211365](const  ref arg x[211362] :
  unknown t[211360], param arg i[211368] :
  int[13]) const ref : _unknown[43] "inline" "unsafe"
  {
    { scopeless
      (211376 return(211375 'field by num' x i))
    }
  }
  function getField[211388](const  ref arg x[211385] :
  unknown t[211383], param arg s[211391] :
  string[24]) param : _unknown[43]
  {
    (211425 return(211424 call getField x(211423 call getFieldIndex t s)))
  }
  where {
    (211414 call &&(211400 call !=(211398 call getFieldIndex t s) 0)(211413 call isParam(211411 call getField x(211410 call getFieldIndex t s))))
  }
  function getField[211438](const  ref arg x[211435] :
  unknown t[211433], param arg s[211441] :
  string[24]) type : _unknown[43]
  {
    (211475 return(211474 call getField x(211473 call getFieldIndex t s)))
  }
  where {
    (211464 call &&(211450 call !=(211448 call getFieldIndex t s) 0)(211463 call isType(211461 call getField x(211460 call getFieldIndex t s))))
  }
  function getField[211488](const  ref arg x[211485] :
  unknown t[211483], param arg s[211491] :
  string[24]) const ref : _unknown[43] "unsafe"
  {
    unknown i[211514] "param"(211513 'field name to num' t s)
    if(211563 call _cond_test(211520 call == i 0))
    {
      { scopeless
        (211561 call compilerError "field " s " not found in "(211559 call _cast string[24] t))
      }
    }
    (211573 return(211572 'field by num' x i))
  }
  function getFieldRef[211584](ref arg x[211581] :
  unknown t[211579], param arg i[211587] :
  int[13]) ref : _unknown[43] "inline" "unsafe"
  {
    { scopeless
      (211595 return(211594 'field by num' x i))
    }
  }
  function getFieldRef[211607](ref arg x[211604] :
  unknown t[211602], param arg s[211610] :
  string[24]) ref : _unknown[43] "unsafe"
  {
    unknown i[211618] "param"(211617 'field name to num' t s)
    if(211637 call _cond_test(211624 call == i 0))
    {
      { scopeless
        (211635 call compilerError "field " s " not found in "(211633 call _cast string[24] t))
      }
    }
    (211647 return(211646 'field by num' x i))
  }
  function getFieldIndex[211655](arg t[211653]:_any[170](?), param arg s[211658] :
  string[24]) param : _unknown[43]
  {
    { scopeless
      (211667 return(211666 'field name to num' t s))
    }
  }
  { scopeless type
    int[13]
  }
  function hasField[211677](arg t[211675]:_any[170](?), param arg s[211680] :
  string[24]) param : _unknown[43]
  {
    { scopeless
      (211692 return(211690 call >(211688 call getFieldIndex t s) 0))
    }
  }
  { scopeless type
    bool[10]
  }
  function isFieldBound[211702](arg t[211700]:_any[170](?), param arg s[211705] :
  string[24]) param : _unknown[43]
  {
    (211729 return(211728 'is bound' t s))
  }
  { scopeless type
    bool[10]
  }
  function canResolve[211741](param arg fname[211738] :
  string[24]) param : _unknown[43]
  {
    { scopeless
      (211763 return(211762 'call resolves' fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolve[211775](param arg fname[211772] :
  string[24], arg args[211778]:_any[170](?) ...) param : _unknown[43]
  {
    { scopeless
      (211788 return(211787 'call resolves' fname(211786 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[211798](arg obj[211796]:_any[170](?), param arg fname[211801] :
  string[24]) param : _unknown[43]
  {
    { scopeless
      (211810 return(211809 'method call resolves' obj fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveMethod[211820](arg obj[211818]:_any[170](?), param arg fname[211823] :
  string[24], arg args[211827]:_any[170](?) ...) param : _unknown[43]
  {
    { scopeless
      (211838 return(211837 'method call resolves' obj fname(211836 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[211848](arg t[211846]:_any[170](?), param arg fname[211851] :
  string[24]) param : _unknown[43]
  {
    { scopeless
      (211860 return(211859 'method call resolves' t fname))
    }
  }
  { scopeless type
    bool[10]
  }
  function canResolveTypeMethod[211870](arg t[211868]:_any[170](?), param arg fname[211873] :
  string[24], arg args[211877]:_any[170](?) ...) param : _unknown[43]
  {
    { scopeless
      (211888 return(211887 'method call resolves' t fname(211886 'expand_tuple' args)))
    }
  }
  { scopeless type
    bool[10]
  }
  function getLineNumber[211896]() param : _unknown[43] "get line number"
  {
  }
  { scopeless type
    int[13]
  }
  function getFileName[211905]() param : _unknown[43] "get file name"
  {
  }
  { scopeless type
    string[24]
  }
  function getRoutineName[211914]() param : _unknown[43] "get function name"
  {
  }
  { scopeless type
    string[24]
  }
  function getModuleName[211923]() param : _unknown[43] "get module name"
  {
  }
  { scopeless type
    string[24]
  }
}