AST dump for HeapSort after pass cleanup.
Module use list: 

{
  (328334 'use' ChapelStandard)
  function heapSort[253471](arg Data[253468] :
  (253466 call chpl__buildArrayRuntimeType unknown Dom[253461] unknown eltType[253464]), arg comparator[253476] :
  unknown rec[253473] =
  defaultComparator) : _unknown[43]
  {
    (253484 call chpl_check_comparator comparator eltType)
    if(253515 call _cond_test(253492 call !=(253488 call . Dom c"rank") 1))
    {
      (253512 call compilerError "heapSort() requires 1-D array")
    }
    const low[253523] "const"(253520 call . Dom c"alignedLow")
    const high[253530] "const"(253527 call . Dom c"alignedHigh")
    const size[253537] "const"(253534 call . Dom c"size")
    const stride[253547] "const"(253546 call abs(253542 call . Dom c"stride"))
    unknown start[253591](253588 IfExpr (253552 call == high low) then
    { scopeless
      high
    } else
    { scopeless(253585 IfExpr (253557 call % size 2) then
      { scopeless
        (253570 call + low(253568 call *(253565 call /(253562 call - size 1) 2) stride))
      } else
      { scopeless
        (253583 call + low(253581 call *(253578 call -(253575 call / size 2) 1) stride))
      } )
    } )
    {
      unknown tmp[253614] "temp"
      (253638 'move' tmp[253614](253633 call _cond_test(253635 call >= start low)))
      WhileDo
      {
        {
          (253603 call SiftDown start high comparator)
          (253611 call = start(253609 call - start stride))
        }
        label _continueLabel[253617]
        (253628 'move' tmp[253614](253623 call _cond_test(253625 call >= start low)))
        tmp[253614]
      }
      label _breakLabel[253618]
    }
    unknown end[253642] high
    {
      unknown tmp[253676] "temp"
      (253700 'move' tmp[253676](253695 call _cond_test(253697 call > end low)))
      WhileDo
      {
        {
          (253657 call <=>(253652 call Data end)(253656 call Data low))
          (253666 call = end(253664 call - end stride))
          (253674 call SiftDown low end comparator)
        }
        label _continueLabel[253679]
        (253690 'move' tmp[253676](253685 call _cond_test(253687 call > end low)))
        tmp[253676]
      }
      label _breakLabel[253680]
    }
    function SiftDown[253707](arg start[253705]:_any[170](?), arg end[253709]:_any[170](?), arg comparator[253714] :
    unknown rec[253711] =
    defaultComparator) : _unknown[43] "no return value for void"
    {
      unknown root[253719] start
      {
        unknown tmp[253847] "temp"
        (253889 'move' tmp[253847](253875 call _cond_test(253877 call <=(253879 call +(253881 call -(253883 call * 2 root) low) stride) end)))
        WhileDo
        {
          {
            const child[253746] "const"(253744 call +(253741 call -(253738 call * 2 root) low) stride)
            unknown swap[253751] root
            if(253774 call _cond_test(253767 call <(253765 call chpl_compare(253758 call Data swap)(253763 call Data child) comparator) 0))
            {
              (253771 call = swap child)
            }
            if(253814 call _cond_test(253804 call &&(253784 call <=(253781 call + child stride) end)(253802 call <(253800 call chpl_compare(253790 call Data swap)(253798 call Data(253795 call + child stride)) comparator) 0)))
            {
              (253811 call = swap(253809 call + child stride))
            }
            if(253843 call _cond_test(253821 call != swap root))
            {
              (253831 call <=>(253826 call Data root)(253830 call Data swap))
              (253837 call = root swap)
            }
            {
              (253840 return _void[47])
            }
          }
          label _continueLabel[253850]
          (253870 'move' tmp[253847](253856 call _cond_test(253858 call <=(253860 call +(253862 call -(253864 call * 2 root) low) stride) end)))
          tmp[253847]
        }
        label _breakLabel[253851]
      }
    }
  }
}