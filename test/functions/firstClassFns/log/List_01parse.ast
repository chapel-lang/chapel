AST dump for List after pass parse.
Module use list: 

{
  (328374 'use' ChapelStandard)
  (282017 'use' Sort)
  (282022 'use' ChapelLocks 'only' )
  const _initialCapacity[282025] "const" "no doc" "private" 8
  const _initialArrayCapacity[282029] "const" "no doc" "private" 16
  unknown _sanityChecks[282033] "no doc" "param" "private" 0
  function _sanity[282042](arg expr[282039] :
  bool[10]) : _unknown[43] "inline" "private"
  {
    if(282050 call _cond_test _sanityChecks)
    {
      { scopeless
        (282048 call assert expr)
      }
    }
  }
  unknown _lockType[282064] "no doc" "type variable"(282061 call . ChapelLocks c"chpl_LocalSpinlock")
  type _LockWrapper[282104] unknown lock$[282072](282071 'new'(282070 call _lockType)) function _LockWrapper[282104].lock[282077](arg _mt[282108]:_MT[227], arg this[282106]:_LockWrapper[282104]) : _unknown[43] "inline" "method" "primary method"
  {
    (282084 call(282080 call . lock$ c"lock"))
  } function _LockWrapper[282104].unlock[282091](arg _mt[282112]:_MT[227], arg this[282110]:_LockWrapper[282104]) : _unknown[43] "inline" "method" "primary method"
  {
    (282098 call(282094 call . lock$ c"unlock"))
  }
  type list[287241](?) unknown eltType[282116] "type variable" unknown parSafe[282120] "param" 0 unknown _size[282124] "no doc" 0 unknown _lock$[282136] "no doc"(282133 IfExpr  parSafe then
  { scopeless
    (282131 'new'(282130 call _LockWrapper))
  } else
  { scopeless
    none[49]
  } ) unknown _arrays[282147] "no doc" nil[38](282145 call _ddata(282143 call _ddata eltType)) unknown _arrayCapacity[282151] "no doc" 0 unknown _totalCapacity[282155] "no doc" 0 function list[287241](?).init[282162](arg _mt[287245]:_MT[227], arg this[287243]:list[287241](?), arg eltType[282160]:_any[170](?), param arg parSafe[282165] =
  0) : _unknown[43] "method" "primary method"
  {
    (282173 call =(282169 call . this c"eltType") eltType)
    (282182 call =(282178 call . this c"parSafe") parSafe)
    (282190 call(282186 call . this c"complete"))
    (282199 call(282195 call . this c"_firstTimeInitializeArrays"))
  } function list[287241](?).init[282213](arg _mt[287249]:_MT[227], arg this[287247]:list[287241](?), arg other[282210] :
  (282209 call list unknown t[282206]), param arg parSafe[282216] =
  0) : _unknown[43] "method" "primary method"
  {
    (282224 call =(282220 call . this c"eltType") t)
    (282233 call =(282229 call . this c"parSafe") parSafe)
    (282241 call(282237 call . this c"complete"))
    (282246 call _commonInitFromIterable other)
  } function list[287241](?).init[282262](arg _mt[287253]:_MT[227], arg this[287251]:list[287241](?), arg other[282259] :
  (282257 call chpl__buildArrayRuntimeType unknown d[282252] unknown t[282255]), param arg parSafe[282265] =
  0) : _unknown[43] "method" "primary method"
  {
    (282273 call =(282269 call . this c"eltType") t)
    (282282 call =(282278 call . this c"parSafe") parSafe)
    (282290 call(282286 call . this c"complete"))
    (282295 call _commonInitFromIterable other)
  } function list[287241](?).init[282309](arg _mt[287257]:_MT[227], arg this[287255]:list[287241](?), arg other[282306] :
  (282305 call range unknown t[282302]), param arg parSafe[282312] =
  0) : _unknown[43] "method" "primary method"
  {
    (282320 call =(282316 call . this c"eltType") t)
    (282329 call =(282325 call . this c"parSafe") parSafe)
    if(282403 call _cond_test(282336 call !(282335 call isBoundedRange other)))
    {
      unknown e[282343] "param"(282341 call _cast string[24](282339 'typeof' this))
      unknown f[282352] "param"(282350 call _cast string[24](282348 'typeof' other))
      unknown msg[282395] "param"(282393 call +(282390 call +(282372 call + "Cannot init " e) " from unbounded ") f)
      (282401 call compilerError msg)
    }
    (282412 call(282408 call . this c"complete"))
    (282417 call _commonInitFromIterable other)
  } function list[287241](?).init=[282436](arg _mt[287261]:_MT[227], arg this[287259]:list[287241](?), arg other[282433] :
  (282432 call list(282426 call .(282425 'typeof' this) c"eltType") unknown p[282430])) : _unknown[43] "method" "primary method"
  {
    (282447 call =(282439 call . this c"eltType")(282444 call .(282443 'typeof' this) c"eltType"))
    (282460 call =(282452 call . this c"parSafe")(282457 call .(282456 'typeof' this) c"parSafe"))
    (282468 call(282464 call . this c"complete"))
    (282473 call _commonInitFromIterable other)
  } function list[287241](?).init=[282492](arg _mt[287265]:_MT[227], arg this[287263]:list[287241](?), arg other[282489] :
  (282487 call chpl__buildArrayRuntimeType unknown d[282479](282484 call .(282483 'typeof' this) c"eltType"))) : _unknown[43] "method" "primary method"
  {
    (282503 call =(282495 call . this c"eltType")(282500 call .(282499 'typeof' this) c"eltType"))
    (282516 call =(282508 call . this c"parSafe")(282513 call .(282512 'typeof' this) c"parSafe"))
    (282524 call(282520 call . this c"complete"))
    (282529 call _commonInitFromIterable other)
  } function list[287241](?).init=[282550](arg _mt[287269]:_MT[227], arg this[287267]:list[287241](?), arg other[282547] :
  (282546 call range(282538 call .(282537 'typeof' this) c"eltType") unknown b[282542] unknown d[282544])) : _unknown[43] "method" "primary method"
  {
    (282561 call =(282553 call . this c"eltType")(282558 call .(282557 'typeof' this) c"eltType"))
    (282574 call =(282566 call . this c"parSafe")(282571 call .(282570 'typeof' this) c"parSafe"))
    if(282618 call _cond_test(282581 call !(282580 call isBoundedRange other)))
    {
      unknown e[282588] "param"(282586 call _cast string[24](282584 'typeof' this))
      unknown f[282597] "param"(282595 call _cast string[24](282593 'typeof' other))
      unknown msg[282610] "param"(282608 call +(282605 call +(282602 call + "Cannot init " e) " from unbounded ") f)
      (282616 call compilerError msg)
    }
    (282627 call(282623 call . this c"complete"))
    (282632 call _commonInitFromIterable other)
  } function list[287241](?)._commonInitFromIterable[282640](arg _mt[287273]:_MT[227], arg this[287271]:list[287241](?), arg iterable[282638]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (282647 call(282643 call . this c"_firstTimeInitializeArrays"))
    {
      unknown _indexOfInterest[282657] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[282658] "expr temp" "temp"
      (282667 'move' _iterator[282658](282665 call _getIterator iterable))
      Defer
      {
        {
          (282683 call _freeIterator _iterator[282658])
        }
      }
      { scopeless type
        (282672 'move' _indexOfInterest[282657](282669 call iteratorIndex _iterator[282658]))
      }
      ForLoop
      {
        unknown x[282676] "index var" "insert auto destroy"
        (282678 'move' x[282676] _indexOfInterest[282657])
        { scopeless
          (282655 call append x)
        }
        label _continueLabel[282662]
        _indexOfInterest[282657]
        _iterator[282658]
      }
      label _breakLabel[282663]
    }
  } function list[287241](?)._firstTimeInitializeArrays[282694](arg _mt[287277]:_MT[227], arg this[287275]:list[287241](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    (282702 call _sanity(282699 call == _arrays nil[38]))
    (282711 call _sanity(282708 call == _totalCapacity 0))
    (282719 call _sanity(282716 call == _size 0))
    (282726 call = _arrays(282725 call _makeBlockArray _initialArrayCapacity))
    (282731 call = _arrayCapacity _initialArrayCapacity)
    (282742 call =(282737 call _arrays 0)(282741 call _makeArray _initialCapacity))
    (282747 call = _totalCapacity _initialCapacity)
  } function list[287241](?).deinit[282754](arg _mt[287281]:_MT[227], arg this[287279]:list[287241](?)) : _unknown[43] "destructor" "inline" "method" "primary method" "no doc"
  {
    (282758 call _fireAllDestructors)
    (282763 call _freeAllArrays)
    (282771 call _sanity(282768 call == _totalCapacity 0))
    (282779 call _sanity(282776 call == _size 0))
    (282787 call _sanity(282784 call == _arrays nil[38]))
  } function list[287241](?)._destroy[282797](arg _mt[287285]:_MT[227], arg this[287283]:list[287241](?), ref arg item[282794] :
  eltType) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (282802 call chpl__autoDestroy item)
  } function list[287241](?)._move[282814](arg _mt[287289]:_MT[227], arg this[287287]:list[287241](?), ref arg src[282811] :
  unknown t[282809], ref arg dst[282817] :
  t) : _unknown[43] "inline" "method" "primary method" "no doc" "unsafe"
  {
    (282830 '=' dst src)
  }
  {
    (282824 call ==(282821 'lifetime_of' src)(282823 'lifetime_of' dst))
  } function list[287241](?)._getArrayCapacity[282842](arg _mt[287293]:_MT[227], arg this[287291]:list[287241](?), arg array[282839] :
  int[13]) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    const exp[282852] "const"(282850 call + array(282849 call log2 _initialCapacity))
    const result[282860] "const"(282858 call ** 2 exp)
    (282864 return result)
  }
  { scopeless type
    int[13]
  } function list[287241](?)._getArrayIdx[282875](arg _mt[287297]:_MT[227], arg this[287295]:list[287241](?), arg zpos[282872] :
  int[13]) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    const adj[282882] "const"(282880 call + zpos _initialCapacity)
    const result[282896] "const"(282894 call -(282889 call log2 adj)(282893 call log2 _initialCapacity))
    (282900 return result)
  }
  { scopeless type
    int[13]
  } function list[287241](?)._getLastArrayIdx[282907](arg _mt[287301]:_MT[227], arg this[287299]:list[287241](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    const result[282917] "const"(282916 call _getArrayIdx(282913 call - _size 1))
    (282927 call _sanity(282924 call >= result 0))
    (282930 return result)
  }
  { scopeless type
    int[13]
  } function list[287241](?)._getItemIdx[282941](arg _mt[287305]:_MT[227], arg this[287303]:list[287241](?), arg zpos[282938] :
  int[13]) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    const adj[282948] "const"(282946 call + zpos _initialCapacity)
    const result[282962] "const"(282960 call ^ adj(282958 call << 1(282957 call log2 adj)))
    (282966 return result)
  }
  { scopeless type
    int[13]
  } function list[287241](?)._getRef[282977](arg _mt[287309]:_MT[227], arg this[287307]:list[287241](?), arg idx[282974] :
  int[13]) ref : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (282991 call _sanity(282988 call &&(282982 call >= idx 1)(282986 call <= idx _totalCapacity)))
    const zpos[282998] "const"(282996 call - idx 1)
    const arrayIdx[283005] "const"(283004 call _getArrayIdx zpos)
    const itemIdx[283012] "const"(283011 call _getItemIdx zpos)
    const array[283019] "const"(283018 call _arrays arrayIdx)
    (283028 call _sanity(283025 call != array nil[38]))
    unknown result[283034] "ref var"(283033 call array itemIdx)
    (283038 return result)
  } function list[287241](?)._enter[283044](arg _mt[287313]:_MT[227], arg this[287311]:list[287241](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    if(283054 call _cond_test parSafe)
    {
      { scopeless
        (283052 call(283048 call . _lock$ c"lock"))
      }
    }
  } function list[287241](?)._leave[283064](arg _mt[287317]:_MT[227], arg this[287315]:list[287241](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    if(283074 call _cond_test parSafe)
    {
      { scopeless
        (283072 call(283068 call . _lock$ c"unlock"))
      }
    }
  } function list[287241](?)._withinBounds[283088](arg _mt[287321]:_MT[227], arg this[287319]:list[287241](?), arg idx[283085] :
  int[13]) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    (283101 return(283099 call &&(283093 call >= idx 1)(283097 call <= idx _size)))
  }
  { scopeless type
    bool[10]
  } function list[287241](?)._boundsCheckLeaveOnThrow[283113](arg _mt[287325]:_MT[227], arg this[287323]:list[287241](?), arg i[283110] :
  int[13], arg umsg[283132] :
  string[24] =
  "") : _unknown[43] throws "inline" "method" "primary method" "no doc"
  {
    if(283204 call _cond_test(283140 call !(283139 call _withinBounds i)))
    {
      (283144 call _leave)
      const msg[283192] "const"(283189 IfExpr (283164 call != umsg "") then
      { scopeless
        umsg
      } else
      { scopeless
        (283187 call + "Index out of bounds: "(283185 call _cast string[24] i))
      } )
      (283202 'throw'(283201 'new'(283199 call _owned(283198 call IllegalArgumentError msg))))
    }
  } function list[287241](?)._makeBlockArray[283217](arg _mt[287329]:_MT[227], arg this[287327]:list[287241](?), arg size[283214] :
  int[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    (283227 return(283226 call _ddata_allocate(283223 call _ddata eltType) size))
  } function list[287241](?)._freeBlockArray[283244](arg _mt[287333]:_MT[227], arg this[287331]:list[287241](?), arg data[283241] :
  (283240 call _ddata(283238 call _ddata eltType)), arg size[283247] :
  int[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    (283254 call _ddata_free data size)
  } function list[287241](?)._makeArray[283265](arg _mt[287337]:_MT[227], arg this[287335]:list[287241](?), arg size[283262] :
  int[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    (283274 return(283273 call _ddata_allocate eltType size(initElts = 0)))
  } function list[287241](?)._freeArray[283288](arg _mt[287341]:_MT[227], arg this[287339]:list[287241](?), arg data[283285] :
  (283284 call _ddata eltType), arg size[283291] :
  int[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    (283298 call _ddata_free data size)
  } function list[287241](?)._maybeAcquireMem[283309](arg _mt[287345]:_MT[227], arg this[287343]:list[287241](?), arg amount[283306] :
  int[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    const remaining[283315] "const"(283313 call - _totalCapacity _size)
    (283325 call _sanity(283322 call >= remaining 0))
    if(283333 call _cond_test(283329 call >= remaining amount))
    {
      { scopeless
        (283331 return)
      }
    }
    unknown lastArrayIdx[283349](283346 IfExpr (283340 call == _size 0) then
    { scopeless
      0
    } else
    { scopeless
      (283345 call _getLastArrayIdx)
    } )
    unknown req[283356](283354 call - amount remaining)
    {
      unknown tmp[283547] "temp"
      (283571 'move' tmp[283547](283566 call _cond_test(283568 call > req 0)))
      WhileDo
      {
        {
          if(283464 call _cond_test(283368 call >= lastArrayIdx(283366 call - _arrayCapacity 1)))
          {
            { scopeless
              {
                const tmp[283459] "const" "temp"
                (283460 'move' tmp[283459](283457 'deref'(283456 '_wide_get_locale' this)))
                {
                  unknown _narrays[283378](283377 call _makeBlockArray(283374 call * _arrayCapacity 2))
                  {
                    unknown _indexOfInterest[283400] "an _indexOfInterest or chpl__followIdx variable" "temp"
                    unknown _iterator[283401] "expr temp" "temp"
                    (283410 'move' _iterator[283401](283408 call _getIterator(283417 call chpl_direct_counted_range_iter 0 _arrayCapacity)))
                    Defer
                    {
                      {
                        (283433 call _freeIterator _iterator[283401])
                      }
                    }
                    { scopeless type
                      (283422 'move' _indexOfInterest[283400](283419 call iteratorIndex _iterator[283401]))
                    }
                    ForLoop
                    {
                      unknown i[283426] "index var" "insert auto destroy"
                      (283428 'move' i[283426] _indexOfInterest[283400])
                      { scopeless
                        (283397 call =(283392 call _narrays i)(283396 call _arrays i))
                      }
                      label _continueLabel[283405]
                      _indexOfInterest[283400]
                      _iterator[283401]
                    }
                    label _breakLabel[283406]
                  }
                  (283444 call _freeBlockArray _arrays _arrayCapacity)
                  (283448 call = _arrays _narrays)
                  (283453 call *= _arrayCapacity 2)
                }
              }
            }
          }
          {
            const tmp[283542] "const" "temp"
            (283543 'move' tmp[283542](283540 'deref'(283539 '_wide_get_locale' this)))
            {
              const oldLast[283475] "const"(283474 call _arrays lastArrayIdx)
              const oldLastCapacity[283483] "const"(283482 call _getArrayCapacity lastArrayIdx)
              (283488 call += lastArrayIdx 1)
              unknown newLast[283495] "ref var"(283494 call _arrays lastArrayIdx)
              const newLastCapacity[283502] "const"(283500 call * oldLastCapacity 2)
              (283511 call _sanity(283508 call != oldLast nil[38]))
              (283519 call _sanity(283516 call == newLast nil[38]))
              (283526 call = newLast(283525 call _makeArray newLastCapacity))
              (283531 call += _totalCapacity newLastCapacity)
              (283536 call -= req newLastCapacity)
            }
          }
        }
        label _continueLabel[283550]
        (283561 'move' tmp[283547](283556 call _cond_test(283558 call > req 0)))
        tmp[283547]
      }
      label _breakLabel[283551]
    }
    (283574 return)
  } function list[287241](?)._maybeReleaseMem[283584](arg _mt[287349]:_MT[227], arg this[287347]:list[287241](?), arg amount[283581] :
  int[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    if(283592 call _cond_test(283588 call <= _totalCapacity _initialCapacity))
    {
      { scopeless
        (283590 return)
      }
    }
    const lastArrayIdx[283601] "const"(283600 call _getLastArrayIdx)
    (283610 call _sanity(283607 call != lastArrayIdx 0))
    const lastArrayCapacity[283616] "const"(283615 call _getArrayCapacity lastArrayIdx)
    const threshold[283623] "const"(283621 call - _totalCapacity lastArrayCapacity)
    const nsize[283630] "const"(283628 call - _size amount)
    if(283639 call _cond_test(283635 call > nsize threshold))
    {
      { scopeless
        (283637 return)
      }
    }
    unknown array[283648] "ref var"(283647 call _arrays lastArrayIdx)
    (283657 call _sanity(283654 call != array nil[38]))
    (283663 call _freeArray array lastArrayCapacity)
    (283667 call -= _totalCapacity lastArrayCapacity)
    (283672 call = array nil[38])
  } function list[287241](?)._expand[283683](arg _mt[287353]:_MT[227], arg this[287351]:list[287241](?), arg idx[283680] :
  int[13], arg shift[283687] :
  int[13] =
  1) : _unknown[43] "method" "primary method" "no doc"
  {
    (283697 call _sanity(283695 call _withinBounds idx))
    if(283706 call _cond_test(283702 call <= shift 0))
    {
      { scopeless
        (283704 return)
      }
    }
    {
      const tmp[283799] "const" "temp"
      (283800 'move' tmp[283799](283797 'deref'(283796 '_wide_get_locale' this)))
      {
        (283715 call _maybeAcquireMem shift)
        {
          unknown _indexOfInterest[283752] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[283753] "expr temp" "temp"
          (283762 'move' _iterator[283753](283760 call _getIterator(283773 call chpl_direct_range_iter idx _size(283769 call - 1))))
          Defer
          {
            {
              (283789 call _freeIterator _iterator[283753])
            }
          }
          { scopeless type
            (283778 'move' _indexOfInterest[283752](283775 call iteratorIndex _iterator[283753]))
          }
          ForLoop
          {
            unknown i[283782] "index var" "insert auto destroy"
            (283784 'move' i[283782] _indexOfInterest[283752])
            {
              unknown src[283732] "ref var"(283731 call _getRef i)
              unknown dst[283743] "ref var"(283742 call _getRef(283739 call + i shift))
              (283750 call _move src dst)
            }
            label _continueLabel[283757]
            _indexOfInterest[283752]
            _iterator[283753]
          }
          label _breakLabel[283758]
        }
      }
    }
    (283804 return)
  } function list[287241](?)._collapse[283814](arg _mt[287357]:_MT[227], arg this[287355]:list[287241](?), arg idx[283811] :
  int[13], arg shift[283818] :
  int[13] =
  1) : _unknown[43] "method" "primary method" "no doc"
  {
    (283828 call _sanity(283826 call _withinBounds idx))
    if(283837 call _cond_test(283833 call == idx _size))
    {
      { scopeless
        (283835 return)
      }
    }
    {
      const tmp[283925] "const" "temp"
      (283926 'move' tmp[283925](283923 'deref'(283922 '_wide_get_locale' this)))
      {
        {
          unknown _indexOfInterest[283875] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[283876] "expr temp" "temp"
          (283885 'move' _iterator[283876](283883 call _getIterator(283893 call chpl_direct_range_iter idx(283890 call - _size 1) 1)))
          Defer
          {
            {
              (283909 call _freeIterator _iterator[283876])
            }
          }
          { scopeless type
            (283898 'move' _indexOfInterest[283875](283895 call iteratorIndex _iterator[283876]))
          }
          ForLoop
          {
            unknown i[283902] "index var" "insert auto destroy"
            (283904 'move' i[283902] _indexOfInterest[283875])
            {
              unknown src[283858] "ref var"(283857 call _getRef(283854 call + i 1))
              unknown dst[283866] "ref var"(283865 call _getRef i)
              (283873 call _move src dst)
            }
            label _continueLabel[283880]
            _indexOfInterest[283875]
            _iterator[283876]
          }
          label _breakLabel[283881]
        }
        (283920 call _maybeReleaseMem 1)
      }
    }
    (283930 return)
  } function list[287241](?)._appendByRef[283940](arg _mt[287361]:_MT[227], arg this[287359]:list[287241](?), ref arg x[283937] :
  eltType) : _unknown[43] "method" "primary method" "no doc"
  {
    (283945 call _maybeAcquireMem 1)
    unknown src[283949] "ref var" x
    unknown dst[283959] "ref var"(283958 call _getRef(283955 call + _size 1))
    (283966 call _move src dst)
    (283970 call += _size 1)
  } function list[287241](?).append[283981](arg _mt[287365]:_MT[227], arg this[287363]:list[287241](?), in arg x[283978] :
  eltType) : _unknown[43] "method" "primary method"
  {
    (283991 call _enter)
    (283997 call _appendByRef x)
    (284001 call _leave)
  }
  {
    (283987 call <(283984 'lifetime_of' this)(283986 'lifetime_of' x))
  } function list[287241](?).contains[284012](arg _mt[287369]:_MT[227], arg this[287367]:list[287241](?), arg x[284009] :
  eltType) : _unknown[43] "method" "primary method"
  {
    unknown result[284016] 0
    {
      const tmp[284085] "const" "temp"
      (284086 'move' tmp[284085](284083 'deref'(284082 '_wide_get_locale' this)))
      {
        (284023 call _enter)
        {
          unknown _indexOfInterest[284045] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[284046] "expr temp" "temp"
          (284055 'move' _iterator[284046](284053 call _getIterator this))
          Defer
          {
            {
              (284071 call _freeIterator _iterator[284046])
            }
          }
          { scopeless type
            (284060 'move' _indexOfInterest[284045](284057 call iteratorIndex _iterator[284046]))
          }
          ForLoop
          {
            unknown item[284064] "index var" "insert auto destroy"
            (284066 'move' item[284064] _indexOfInterest[284045])
            { scopeless
              if(284041 call _cond_test(284030 call == item x))
              {
                (284034 call = result 1)
                break nil[38]
              }
            }
            label _continueLabel[284050]
            _indexOfInterest[284045]
            _iterator[284046]
          }
          label _breakLabel[284051]
        }
        (284080 call _leave)
      }
    }
    (284091 return result)
  }
  { scopeless type
    bool[10]
  } function list[287241](?).first[284098](arg _mt[287373]:_MT[227], arg this[287371]:list[287241](?)) ref : _unknown[43] throws "method" "primary method"
  {
    unknown result[284104] "ref var"(284103 call _getRef 1)
    {
      const tmp[284165] "const" "temp"
      (284166 'move' tmp[284165](284163 'deref'(284162 '_wide_get_locale' this)))
      {
        (284111 call _enter)
        if(284146 call _cond_test(284119 call && boundsChecking(284117 call == _size 0)))
        {
          (284123 call _leave)
          (284144 call halt "Called \"list.first\" on an empty list.")
        }
        (284155 call = result(284154 call _getRef 1))
        (284160 call _leave)
      }
    }
    (284171 return result)
  } function list[287241](?).last[284177](arg _mt[287377]:_MT[227], arg this[287375]:list[287241](?)) ref : _unknown[43] "method" "primary method"
  {
    unknown result[284183] "ref var"(284182 call _getRef 1)
    {
      const tmp[284244] "const" "temp"
      (284245 'move' tmp[284244](284242 'deref'(284241 '_wide_get_locale' this)))
      {
        (284190 call _enter)
        if(284225 call _cond_test(284198 call && boundsChecking(284196 call == _size 0)))
        {
          (284202 call _leave)
          (284223 call halt "Called \"list.last\" on an empty list.")
        }
        (284234 call = result(284233 call _getRef _size))
        (284239 call _leave)
      }
    }
    (284250 return result)
  } function list[287241](?)._extendGeneric[284258](arg _mt[287381]:_MT[227], arg this[287379]:list[287241](?), arg collection[284256]:_any[170](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    {
      const tmp[284310] "const" "temp"
      (284311 'move' tmp[284310](284308 'deref'(284307 '_wide_get_locale' this)))
      {
        {
          unknown _indexOfInterest[284273] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[284274] "expr temp" "temp"
          (284283 'move' _iterator[284274](284281 call _getIterator collection))
          Defer
          {
            {
              (284299 call _freeIterator _iterator[284274])
            }
          }
          { scopeless type
            (284288 'move' _indexOfInterest[284273](284285 call iteratorIndex _iterator[284274]))
          }
          ForLoop
          {
            unknown item[284292] "index var" "insert auto destroy"
            (284294 'move' item[284292] _indexOfInterest[284273])
            {
              unknown cpy[284264] "no auto destroy" item
              (284271 call _appendByRef cpy)
            }
            label _continueLabel[284278]
            _indexOfInterest[284273]
            _iterator[284274]
          }
          label _breakLabel[284279]
        }
      }
    }
  } function list[287241](?).extend[284329](arg _mt[287385]:_MT[227], arg this[287383]:list[287241](?), arg other[284326] :
  (284325 call list eltType unknown p[284323])) : _unknown[43] "method" "primary method"
  {
    {
      const tmp[284355] "const" "temp"
      (284356 'move' tmp[284355](284353 'deref'(284352 '_wide_get_locale' this)))
      {
        (284340 call _enter)
        (284346 call _extendGeneric other)
        (284350 call _leave)
      }
    }
  }
  {
    (284335 call <(284332 'lifetime_of' this)(284334 'lifetime_of' other))
  } function list[287241](?).extend[284375](arg _mt[287389]:_MT[227], arg this[287387]:list[287241](?), arg other[284372] :
  (284370 call chpl__buildArrayRuntimeType unknown d[284366] eltType)) : _unknown[43] "method" "primary method"
  {
    {
      const tmp[284401] "const" "temp"
      (284402 'move' tmp[284401](284399 'deref'(284398 '_wide_get_locale' this)))
      {
        (284386 call _enter)
        (284392 call _extendGeneric other)
        (284396 call _leave)
      }
    }
  }
  {
    (284381 call <(284378 'lifetime_of' this)(284380 'lifetime_of' other))
  } function list[287241](?).extend[284423](arg _mt[287393]:_MT[227], arg this[287391]:list[287241](?), arg other[284420] :
  (284419 call range eltType unknown b[284415] unknown d[284417])) : _unknown[43] "method" "primary method"
  {
    if(284502 call _cond_test(284435 call !(284434 call isBoundedRange other)))
    {
      unknown e[284442] "param"(284440 call _cast string[24](284438 'typeof' this))
      unknown f[284451] "param"(284449 call _cast string[24](284447 'typeof' other))
      unknown msg[284494] "param"(284492 call +(284489 call +(284471 call + "Cannot extend " e) " with unbounded ") f)
      (284500 call compilerError msg)
    }
    {
      const tmp[284525] "const" "temp"
      (284526 'move' tmp[284525](284523 'deref'(284522 '_wide_get_locale' this)))
      {
        (284510 call _enter)
        (284516 call _extendGeneric other)
        (284520 call _leave)
      }
    }
  }
  {
    (284429 call <(284426 'lifetime_of' this)(284428 'lifetime_of' other))
  } function list[287241](?).insert[284539](arg _mt[287397]:_MT[227], arg this[287395]:list[287241](?), arg idx[284536] :
  int[13], in arg x[284542] :
  eltType) : _unknown[43] "method" "primary method"
  {
    unknown result[284553] 0
    {
      const tmp[284634] "const" "temp"
      (284635 'move' tmp[284634](284632 'deref'(284631 '_wide_get_locale' this)))
      {
        (284560 call _enter)
        if(284622 call _cond_test(284568 call == idx(284566 call + _size 1)))
        {
          (284573 call _appendByRef x)
          (284578 call = result 1)
        }
        {
          { scopeless
            if(284618 call _cond_test(284584 call _withinBounds idx))
            {
              (284588 call _expand idx)
              unknown src[284592] "ref var" x
              unknown dst[284599] "ref var"(284598 call _getRef idx)
              (284606 call _move src dst)
              (284610 call += _size 1)
              (284615 call = result 1)
            }
          }
        }
        (284629 call _leave)
      }
    }
    if(284647 call _cond_test(284640 call ! result))
    {
      { scopeless
        (284645 call _destroy x)
      }
    }
    (284653 return result)
  }
  {
    (284550 call <(284547 'lifetime_of' this)(284549 'lifetime_of' x))
  }
  { scopeless type
    bool[10]
  } function list[287241](?)._insertGenericKnownSize[284665](arg _mt[287401]:_MT[227], arg this[287399]:list[287241](?), arg idx[284662] :
  int[13], arg items[284667]:_any[170](?), arg size[284670] :
  int[13]) : _unknown[43] "method" "primary method" "no doc"
  {
    unknown result[284675] 0
    (284685 call _sanity(284682 call >= size 0))
    if(284694 call _cond_test(284689 call == size 0))
    {
      { scopeless
        (284692 return 1)
      }
    }
    {
      const tmp[284818] "const" "temp"
      (284819 'move' tmp[284818](284816 'deref'(284815 '_wide_get_locale' this)))
      {
        if(284809 call _cond_test(284705 call == idx(284703 call + _size 1)))
        {
          (284710 call _extendGeneric items)
          (284715 call = result 1)
        }
        {
          { scopeless
            if(284805 call _cond_test(284721 call _withinBounds idx))
            {
              (284726 call _expand idx size)
              unknown i[284730] idx
              {
                unknown _indexOfInterest[284767] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[284768] "expr temp" "temp"
                (284777 'move' _iterator[284768](284775 call _getIterator items))
                Defer
                {
                  {
                    (284793 call _freeIterator _iterator[284768])
                  }
                }
                { scopeless type
                  (284782 'move' _indexOfInterest[284767](284779 call iteratorIndex _iterator[284768]))
                }
                ForLoop
                {
                  unknown x[284786] "index var" "insert auto destroy"
                  (284788 'move' x[284786] _indexOfInterest[284767])
                  {
                    unknown cpy[284736] "no auto destroy" x
                    unknown src[284741] "ref var" cpy
                    unknown dst[284748] "ref var"(284747 call _getRef i)
                    (284755 call _move src dst)
                    (284759 call += _size 1)
                    (284764 call += i 1)
                  }
                  label _continueLabel[284772]
                  _indexOfInterest[284767]
                  _iterator[284768]
                }
                label _breakLabel[284773]
              }
              (284802 call = result 1)
            }
          }
        }
      }
    }
    (284824 return result)
  }
  { scopeless type
    bool[10]
  } function list[287241](?).insert[284835](arg _mt[287405]:_MT[227], arg this[287403]:list[287241](?), arg idx[284832] :
  int[13], arg arr[284843] :
  (284841 call chpl__buildArrayRuntimeType unknown d[284837] eltType)) : _unknown[43] "method" "primary method"
  {
    unknown result[284854] 0
    {
      const tmp[284884] "const" "temp"
      (284885 'move' tmp[284884](284882 'deref'(284881 '_wide_get_locale' this)))
      {
        (284861 call _enter)
        (284874 call = result(284873 call _insertGenericKnownSize idx arr(284870 call . arr c"size")))
        (284879 call _leave)
      }
    }
    (284890 return result)
  }
  {
    (284851 call <(284848 'lifetime_of' this)(284850 'lifetime_of' arr))
  }
  { scopeless type
    bool[10]
  } function list[287241](?).insert[284902](arg _mt[287409]:_MT[227], arg this[287407]:list[287241](?), arg idx[284899] :
  int[13], arg lst[284908] :
  (284907 call list eltType)) : _unknown[43] "method" "primary method"
  {
    unknown result[284919] 0
    const size[284927] "const"(284924 call . lst c"size")
    {
      const tmp[284953] "const" "temp"
      (284954 'move' tmp[284953](284951 'deref'(284950 '_wide_get_locale' this)))
      {
        (284933 call _enter)
        (284943 call = result(284942 call _insertGenericKnownSize idx lst size))
        (284948 call _leave)
      }
    }
    (284959 return result)
  }
  {
    (284916 call <(284913 'lifetime_of' this)(284915 'lifetime_of' lst))
  }
  { scopeless type
    bool[10]
  } function list[287241](?).remove[284971](arg _mt[287413]:_MT[227], arg this[287411]:list[287241](?), arg x[284968] :
  eltType, arg count[284975] :
  int[13] =
  1) : _unknown[43] "method" "primary method"
  {
    unknown result[284981] 0
    {
      const tmp[285119] "const" "temp"
      (285120 'move' tmp[285119](285117 'deref'(285116 '_wide_get_locale' this)))
      {
        (284988 call _enter)
        unknown removed[284992] 0
        {
          unknown _indexOfInterest[285053] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[285054] "expr temp" "temp"
          (285063 'move' _iterator[285054](285061 call _getIterator(285071 call chpl_direct_range_iter 1(285068 call - _size removed) 1)))
          Defer
          {
            {
              (285087 call _freeIterator _iterator[285054])
            }
          }
          { scopeless type
            (285076 'move' _indexOfInterest[285053](285073 call iteratorIndex _iterator[285054]))
          }
          ForLoop
          {
            unknown i[285080] "index var" "insert auto destroy"
            (285082 'move' i[285080] _indexOfInterest[285053])
            {
              unknown item[285007] "ref var"(285006 call _getRef i)
              if(285031 call _cond_test(285013 call == x item))
              {
                (285018 call _destroy item)
                (285024 call _collapse i)
                (285028 call += removed 1)
              }
              if(285048 call _cond_test(285043 call &&(285037 call > count 0)(285041 call >= removed count)))
              {
                { scopeless
                  break nil[38]
                }
              }
            }
            label _continueLabel[285058]
            _indexOfInterest[285053]
            _iterator[285054]
          }
          label _breakLabel[285059]
        }
        (285097 call _maybeReleaseMem removed)
        (285104 call = _size(285102 call - _size removed))
        (285109 call = result removed)
        (285114 call _leave)
      }
    }
    (285125 return result)
  }
  { scopeless type
    int[13]
  } function list[287241](?)._popAtIndex[285136](arg _mt[287417]:_MT[227], arg this[287415]:list[287241](?), arg idx[285133] :
  int[13], arg unlockBeforeHalt[285139] =
  1) : _unknown[43] "method" "primary method" "no doc"
  {
    if(285181 call _cond_test(285148 call && boundsChecking(285146 call <= _size 0)))
    {
      if(285155 call _cond_test unlockBeforeHalt)
      {
        { scopeless
          (285153 call _leave)
        }
      }
      (285179 call halt "Called \"list.pop\" on an empty list.")
    }
    if(285232 call _cond_test(285193 call && boundsChecking(285191 call !(285190 call _withinBounds idx))))
    {
      if(285200 call _cond_test unlockBeforeHalt)
      {
        { scopeless
          (285198 call _leave)
        }
      }
      (285230 call halt(285227 call + "Index for \"list.pop\" out of bounds: "(285225 call _cast string[24] idx)))
    }
    unknown item[285240] "ref var"(285239 call _getRef idx)
    unknown result[285244] item
    (285250 call _destroy item)
    (285255 call _collapse idx)
    (285259 call -= _size 1)
    (285263 return result)
  }
  { scopeless type
    eltType
  } function list[287241](?).pop[285270](arg _mt[287421]:_MT[227], arg this[287419]:list[287241](?)) : _unknown[43] "method" "primary method"
  {
    (285275 call _enter)
    unknown result[285282](285281 call _popAtIndex _size)
    (285287 call _leave)
    (285290 return result)
  }
  { scopeless type
    eltType
  } function list[287241](?).pop[285301](arg _mt[287425]:_MT[227], arg this[287423]:list[287241](?), arg idx[285298] :
  int[13]) : _unknown[43] "method" "primary method"
  {
    (285306 call _enter)
    unknown result[285313](285312 call _popAtIndex idx)
    (285318 call _leave)
    (285321 return result)
  }
  { scopeless type
    eltType
  } function list[287241](?)._fireAllDestructors[285328](arg _mt[287429]:_MT[227], arg this[287427]:list[287241](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    {
      const tmp[285396] "const" "temp"
      (285397 'move' tmp[285396](285394 'deref'(285393 '_wide_get_locale' this)))
      {
        {
          unknown _indexOfInterest[285349] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[285350] "expr temp" "temp"
          (285359 'move' _iterator[285350](285357 call _getIterator(285364 call chpl_direct_range_iter 1 _size 1)))
          Defer
          {
            {
              (285380 call _freeIterator _iterator[285350])
            }
          }
          { scopeless type
            (285369 'move' _indexOfInterest[285349](285366 call iteratorIndex _iterator[285350]))
          }
          ForLoop
          {
            unknown i[285373] "index var" "insert auto destroy"
            (285375 'move' i[285373] _indexOfInterest[285349])
            {
              unknown item[285340] "ref var"(285339 call _getRef i)
              (285347 call _destroy item)
            }
            label _continueLabel[285354]
            _indexOfInterest[285349]
            _iterator[285350]
          }
          label _breakLabel[285355]
        }
        (285390 call = _size 0)
      }
    }
    (285402 return)
  } function list[287241](?)._freeAllArrays[285408](arg _mt[287433]:_MT[227], arg this[287431]:list[287241](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(285416 call _cond_test(285412 call == _arrays nil[38]))
    {
      { scopeless
        (285414 return)
      }
    }
    (285428 call _sanity(285425 call != _totalCapacity 0))
    (285436 call _sanity(285433 call != _arrayCapacity 0))
    {
      const tmp[285557] "const" "temp"
      (285558 'move' tmp[285557](285555 'deref'(285554 '_wide_get_locale' this)))
      {
        {
          unknown _indexOfInterest[285489] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[285490] "expr temp" "temp"
          (285499 'move' _iterator[285490](285497 call _getIterator(285506 call chpl_direct_counted_range_iter 0 _arrayCapacity)))
          Defer
          {
            {
              (285522 call _freeIterator _iterator[285490])
            }
          }
          { scopeless type
            (285511 'move' _indexOfInterest[285489](285508 call iteratorIndex _iterator[285490]))
          }
          ForLoop
          {
            unknown i[285515] "index var" "insert auto destroy"
            (285517 'move' i[285515] _indexOfInterest[285489])
            {
              unknown array[285450] "ref var"(285449 call _arrays i)
              if(285461 call _cond_test(285456 call == array nil[38]))
              {
                { scopeless
                  continue nil[38]
                }
              }
              const capacity[285470] "const"(285469 call _getArrayCapacity i)
              (285475 call -= _totalCapacity capacity)
              (285482 call _freeArray array capacity)
              (285486 call = array nil[38])
            }
            label _continueLabel[285494]
            _indexOfInterest[285489]
            _iterator[285490]
          }
          label _breakLabel[285495]
        }
        (285536 call _sanity(285533 call == _totalCapacity 0))
        (285542 call _freeBlockArray _arrays _arrayCapacity)
        (285546 call = _arrays nil[38])
        (285551 call = _size 0)
      }
    }
    (285562 return)
  } function list[287241](?).clear[285568](arg _mt[287437]:_MT[227], arg this[287435]:list[287241](?)) : _unknown[43] "method" "primary method"
  {
    {
      const tmp[285619] "const" "temp"
      (285620 'move' tmp[285619](285617 'deref'(285616 '_wide_get_locale' this)))
      {
        (285573 call _enter)
        (285578 call _fireAllDestructors)
        (285582 call _freeAllArrays)
        (285590 call _sanity(285587 call == _totalCapacity 0))
        (285598 call _sanity(285595 call == _size 0))
        (285606 call _sanity(285603 call == _arrays nil[38]))
        (285610 call _firstTimeInitializeArrays)
        (285614 call _leave)
      }
    }
  } function list[287241](?).indexOf[285633](arg _mt[287441]:_MT[227], arg this[287439]:list[287241](?), arg x[285630] :
  eltType, arg start[285637] :
  int[13] =
  1, arg end[285643] :
  int[13] =
  0) : _unknown[43] "method" "primary method"
  {
    if(285755 call _cond_test boundsChecking)
    {
      const msg[285665] "const" " index for \"list.indexOf\" out of bounds: "
      if(285710 call _cond_test(285679 call &&(285671 call > end 0)(285677 call !(285676 call _withinBounds end))))
      {
        { scopeless
          (285708 call halt(285705 call +(285699 call + "End" msg)(285703 call _cast string[24] end)))
        }
      }
      if(285750 call _cond_test(285719 call !(285718 call _withinBounds start)))
      {
        { scopeless
          (285748 call halt(285745 call +(285739 call + "Start" msg)(285743 call _cast string[24] start)))
        }
      }
    }
    unknown error[285763] "param"(285761 call - 1)
    if(285779 call _cond_test(285774 call &&(285768 call > end 0)(285772 call < end start)))
    {
      { scopeless
        (285777 return error)
      }
    }
    unknown result[285785] error
    {
      const tmp[285876] "const" "temp"
      (285877 'move' tmp[285876](285874 'deref'(285873 '_wide_get_locale' this)))
      {
        (285791 call _enter)
        const stop[285803] "const"(285800 IfExpr (285796 call <= end 0) then
        { scopeless
          _size
        } else
        { scopeless
          end
        } )
        {
          unknown _indexOfInterest[285831] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[285832] "expr temp" "temp"
          (285841 'move' _iterator[285832](285839 call _getIterator(285846 call chpl_direct_range_iter start stop 1)))
          Defer
          {
            {
              (285862 call _freeIterator _iterator[285832])
            }
          }
          { scopeless type
            (285851 'move' _indexOfInterest[285831](285848 call iteratorIndex _iterator[285832]))
          }
          ForLoop
          {
            unknown i[285855] "index var" "insert auto destroy"
            (285857 'move' i[285855] _indexOfInterest[285831])
            { scopeless
              if(285827 call _cond_test(285816 call == x(285815 call _getRef i)))
              {
                (285820 call = result i)
                break nil[38]
              }
            }
            label _continueLabel[285836]
            _indexOfInterest[285831]
            _iterator[285832]
          }
          label _breakLabel[285837]
        }
        (285871 call _leave)
      }
    }
    (285882 return result)
  }
  { scopeless type
    int[13]
  } function list[287241](?).count[285893](arg _mt[287445]:_MT[227], arg this[287443]:list[287241](?), arg x[285890] :
  eltType) : _unknown[43] "method" "primary method"
  {
    unknown result[285897] 0
    {
      const tmp[285972] "const" "temp"
      (285973 'move' tmp[285972](285970 'deref'(285969 '_wide_get_locale' this)))
      {
        (285904 call _enter)
        unknown count[285908] 0
        {
          unknown _indexOfInterest[285927] "an _indexOfInterest or chpl__followIdx variable" "temp"
          unknown _iterator[285928] "expr temp" "temp"
          (285937 'move' _iterator[285928](285935 call _getIterator this))
          Defer
          {
            {
              (285953 call _freeIterator _iterator[285928])
            }
          }
          { scopeless type
            (285942 'move' _indexOfInterest[285927](285939 call iteratorIndex _iterator[285928]))
          }
          ForLoop
          {
            unknown item[285946] "index var" "insert auto destroy"
            (285948 'move' item[285946] _indexOfInterest[285927])
            { scopeless
              if(285922 call _cond_test(285915 call == x item))
              {
                { scopeless
                  (285919 call += count 1)
                }
              }
            }
            label _continueLabel[285932]
            _indexOfInterest[285927]
            _iterator[285928]
          }
          label _breakLabel[285933]
        }
        (285962 call = result count)
        (285967 call _leave)
      }
    }
    (285978 return result)
  }
  { scopeless type
    int[13]
  } function list[287241](?).sort[285992](arg _mt[287449]:_MT[227], arg this[287447]:list[287241](?), arg comparator[285989] =
  (285986 call . Sort c"defaultComparator")) : _unknown[43] "method" "primary method"
  {
    {
      const tmp[286111] "const" "temp"
      (286112 'move' tmp[286111](286109 'deref'(286108 '_wide_get_locale' this)))
      {
        (285997 call _enter)
        if(286100 call _cond_test(286002 call > _size 1))
        {
          unknown arr[286014](286012 call chpl__buildArrayRuntimeType(286010 call chpl__ensureDomainExpr(286006 call chpl_build_bounded_range 1 _size)) eltType)
          {
            unknown _indexOfInterest[286034] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[286035] "expr temp" "temp"
            (286044 'move' _iterator[286035](286042 call _getIterator(286049 call chpl_direct_range_iter 1 _size 1)))
            Defer
            {
              {
                (286065 call _freeIterator _iterator[286035])
              }
            }
            { scopeless type
              (286054 'move' _indexOfInterest[286034](286051 call iteratorIndex _iterator[286035]))
            }
            ForLoop
            {
              unknown i[286058] "index var" "insert auto destroy"
              (286060 'move' i[286058] _indexOfInterest[286034])
              { scopeless
                (286031 call =(286026 call arr i)(286030 call this i))
              }
              label _continueLabel[286039]
              _indexOfInterest[286034]
              _iterator[286035]
            }
            label _breakLabel[286040]
          }
          (286081 call(286075 call . Sort c"sort") arr comparator)
          (286085 call _fireAllDestructors)
          (286089 call _freeAllArrays)
          (286093 call _firstTimeInitializeArrays)
          (286098 call _extendGeneric arr)
        }
        (286106 call _leave)
      }
    }
    (286117 return)
  } function list[287241](?).this[286127](arg _mt[287453]:_MT[227], arg this[287451]:list[287241](?), arg i[286124] :
  int[13]) ref : _unknown[43] "method" "primary method"
  {
    if(286169 call _cond_test(286136 call && boundsChecking(286134 call !(286133 call _withinBounds i))))
    {
      const msg[286160] "const"(286158 call + "Invalid list index: "(286156 call _cast string[24] i))
      (286167 call halt msg)
    }
    unknown result[286178] "ref var"(286177 call _getRef i)
    (286182 return result)
  } function list[287241](?).these[286188](arg _mt[287457]:_MT[227], arg this[287455]:list[287241](?)) ref : _unknown[43] "iterator fn" "method" "primary method"
  {
    {
      unknown _indexOfInterest[286206] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[286207] "expr temp" "temp"
      (286216 'move' _iterator[286207](286214 call _getIterator(286221 call chpl_direct_range_iter 1 _size 1)))
      Defer
      {
        {
          (286237 call _freeIterator _iterator[286207])
        }
      }
      { scopeless type
        (286226 'move' _indexOfInterest[286206](286223 call iteratorIndex _iterator[286207]))
      }
      ForLoop
      {
        unknown i[286230] "index var" "insert auto destroy"
        (286232 'move' i[286230] _indexOfInterest[286206])
        {
          unknown result[286199] "ref var"(286198 call _getRef i)
          (286204 yield result)
        }
        label _continueLabel[286211]
        _indexOfInterest[286206]
        _iterator[286207]
      }
      label _breakLabel[286212]
    }
  } function list[287241](?).these[286253](arg _mt[287461]:_MT[227], arg this[287459]:list[287241](?), param arg tag[286250] :
  iterKind) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc"
  {
    const osz[286263] "const" _size
    const minChunkSize[286268] "const" 64
    const hasOneChunk[286275] "const"(286273 call <= osz minChunkSize)
    const numTasks[286287] "const"(286284 IfExpr  hasOneChunk then
    { scopeless
      1
    } else
    { scopeless
      (286281 call . here c"maxTaskPar")
    } )
    const chunkSize[286300] "const"(286298 call _cast int[13](286296 call floor(286293 call / osz numTasks)))
    const trailing[286310] "const"(286308 call - osz(286306 call * chunkSize numTasks))
    {
      unknown tmpIter[286378] "expr temp" "maybe ref" "no copy" "temp"
      (286381 'move' tmpIter[286378](286318 call #(286315 call chpl_build_low_bounded_range 0) numTasks))
      unknown isRngDomArr[286568] "maybe param" "temp"
      (286583 'move' isRngDomArr[286568](286581 call ||(286570 call isBoundedRange tmpIter[286378])(286579 call ||(286573 call isDomain tmpIter[286378])(286576 call isArray tmpIter[286378]))))
      if isRngDomArr[286568]
      {
        const _coforallCount[286435] "const" "end count" "temp"
        (286504 'move' _coforallCount[286435](286501 call _endCountAlloc 1))
        unknown numTasks[286436] "temp"
        (286488 'move' numTasks[286436](286484 call . tmpIter[286378] c"size"))
        (286479 call _upEndCount _coforallCount[286435] 1 numTasks[286436])
        (286476 call chpl_resetTaskSpawn numTasks[286436])
        unknown _indexOfInterest[286443] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[286444] "expr temp" "temp"
        (286453 'move' _iterator[286444](286451 call _getIterator tmpIter[286378]))
        Defer
        {
          {
            (286469 call _freeIterator _iterator[286444])
          }
        }
        { scopeless type
          (286458 'move' _indexOfInterest[286443](286455 call iteratorIndex _iterator[286444]))
        }
        ForLoop
        {
          unknown tid[286462] "coforall index var" "index var" "insert auto destroy"
          (286464 'move' tid[286462] _indexOfInterest[286443])
          {
            {
              unknown chunk[286384](286386 call _computeChunk tid chunkSize trailing)
              {
                unknown _indexOfInterest[286392] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[286394] "expr temp" "temp"
                (286396 'move' _iterator[286394](286399 call _getIterator(286401 call chunk 1)))
                Defer
                {
                  {
                    (286405 call _freeIterator _iterator[286394])
                  }
                }
                { scopeless type
                  (286409 'move' _indexOfInterest[286392](286412 call iteratorIndex _iterator[286394]))
                }
                ForLoop
                {
                  unknown i[286417] "index var" "insert auto destroy"
                  (286419 'move' i[286417] _indexOfInterest[286392])
                  { scopeless
                    (286423 yield(286425 call this(286427 call + i 1)))
                  }
                  label _continueLabel[286430]
                  _indexOfInterest[286392]
                  _iterator[286394]
                }
                label _breakLabel[286432]
              }
            }
            (286438 call _downEndCount _coforallCount[286435] nil[38])
            (286437 'coforall loop')
          }
          label _continueLabel[286448]
          _indexOfInterest[286443]
          _iterator[286444]
        }
        label _breakLabel[286449]
        Defer
        {
          {
            (286491 call _endCountFree _coforallCount[286435])
          }
        }
        (286496 call _waitEndCount _coforallCount[286435] 1 numTasks[286436])
      }
      {
        const _coforallCount[286508] "const" "end count" "temp"
        (286565 'move' _coforallCount[286508](286562 call _endCountAlloc 1))
        unknown _indexOfInterest[286516] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[286517] "expr temp" "temp"
        (286526 'move' _iterator[286517](286524 call _getIterator tmpIter[286378]))
        Defer
        {
          {
            (286542 call _freeIterator _iterator[286517])
          }
        }
        { scopeless type
          (286531 'move' _indexOfInterest[286516](286528 call iteratorIndex _iterator[286517]))
        }
        ForLoop
        {
          unknown tid[286535] "coforall index var" "index var" "insert auto destroy"
          (286537 'move' tid[286535] _indexOfInterest[286516])
          (286549 call _upEndCount _coforallCount[286508] 1)
          {
            {
              unknown chunk[286326](286325 call _computeChunk tid chunkSize trailing)
              {
                unknown _indexOfInterest[286344] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[286345] "expr temp" "temp"
                (286354 'move' _iterator[286345](286352 call _getIterator(286334 call chunk 1)))
                Defer
                {
                  {
                    (286371 call _freeIterator _iterator[286345])
                  }
                }
                { scopeless type
                  (286360 'move' _indexOfInterest[286344](286357 call iteratorIndex _iterator[286345]))
                }
                ForLoop
                {
                  unknown i[286364] "index var" "insert auto destroy"
                  (286366 'move' i[286364] _indexOfInterest[286344])
                  { scopeless
                    (286342 yield(286341 call this(286338 call + i 1)))
                  }
                  label _continueLabel[286349]
                  _indexOfInterest[286344]
                  _iterator[286345]
                }
                label _breakLabel[286350]
              }
            }
            (286511 call _downEndCount _coforallCount[286508] nil[38])
            (286510 'coforall loop')
          }
          label _continueLabel[286521]
          _indexOfInterest[286516]
          _iterator[286517]
        }
        label _breakLabel[286522]
        Defer
        {
          {
            (286553 call _endCountFree _coforallCount[286508])
          }
        }
        (286558 call _waitEndCount _coforallCount[286508] 1)
      }
    }
  }
  where {
    (286260 call == tag(286257 call . iterKind c"standalone"))
  } function list[287241](?)._computeChunk[286594](arg _mt[287465]:_MT[227], arg this[287463]:list[287241](?), arg tid[286592]:_any[170](?), arg chunkSize[286596]:_any[170](?), arg trailing[286598]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    { scopeless
      unknown lo[286600] 0
      unknown hi[286604] lo
    }
    if(286653 call _cond_test(286611 call <= tid 0))
    {
      (286615 call = lo 0)
      (286627 call = hi(286625 call -(286622 call + chunkSize trailing) 1))
    }
    {
      (286638 call = lo(286636 call +(286633 call * chunkSize tid) trailing))
      (286650 call = hi(286648 call -(286645 call + lo chunkSize) 1))
    }
    (286663 return(286661 call _build_tuple(286659 call chpl_build_bounded_range lo hi)))
  } function list[287241](?).these[286671](arg _mt[287469]:_MT[227], arg this[287467]:list[287241](?), param arg tag[286669]:_any[170](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc"
  {
    const osz[286681] "const" _size
    const minChunkSize[286686] "const" 32
    const hasOneChunk[286693] "const"(286691 call <= osz minChunkSize)
    const numTasks[286702] "const"(286699 IfExpr  hasOneChunk then
    { scopeless
      1
    } else
    { scopeless
      dataParTasksPerLocale
    } )
    const chunkSize[286715] "const"(286713 call _cast int[13](286711 call floor(286708 call / osz numTasks)))
    const trailing[286725] "const"(286723 call - osz(286721 call * chunkSize numTasks))
    {
      unknown tmpIter[286748] "expr temp" "maybe ref" "no copy" "temp"
      (286751 'move' tmpIter[286748](286733 call #(286730 call chpl_build_low_bounded_range 0) numTasks))
      unknown isRngDomArr[286897] "maybe param" "temp"
      (286912 'move' isRngDomArr[286897](286910 call ||(286899 call isBoundedRange tmpIter[286748])(286908 call ||(286902 call isDomain tmpIter[286748])(286905 call isArray tmpIter[286748]))))
      if isRngDomArr[286897]
      {
        const _coforallCount[286764] "const" "end count" "temp"
        (286833 'move' _coforallCount[286764](286830 call _endCountAlloc 1))
        unknown numTasks[286765] "temp"
        (286817 'move' numTasks[286765](286813 call . tmpIter[286748] c"size"))
        (286808 call _upEndCount _coforallCount[286764] 1 numTasks[286765])
        (286805 call chpl_resetTaskSpawn numTasks[286765])
        unknown _indexOfInterest[286772] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[286773] "expr temp" "temp"
        (286782 'move' _iterator[286773](286780 call _getIterator tmpIter[286748]))
        Defer
        {
          {
            (286798 call _freeIterator _iterator[286773])
          }
        }
        { scopeless type
          (286787 'move' _indexOfInterest[286772](286784 call iteratorIndex _iterator[286773]))
        }
        ForLoop
        {
          unknown tid[286791] "coforall index var" "index var" "insert auto destroy"
          (286793 'move' tid[286791] _indexOfInterest[286772])
          {
            {
              unknown chunk[286754](286756 call _computeChunk tid chunkSize trailing)
              (286761 yield chunk)
            }
            (286767 call _downEndCount _coforallCount[286764] nil[38])
            (286766 'coforall loop')
          }
          label _continueLabel[286777]
          _indexOfInterest[286772]
          _iterator[286773]
        }
        label _breakLabel[286778]
        Defer
        {
          {
            (286820 call _endCountFree _coforallCount[286764])
          }
        }
        (286825 call _waitEndCount _coforallCount[286764] 1 numTasks[286765])
      }
      {
        const _coforallCount[286837] "const" "end count" "temp"
        (286894 'move' _coforallCount[286837](286891 call _endCountAlloc 1))
        unknown _indexOfInterest[286845] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[286846] "expr temp" "temp"
        (286855 'move' _iterator[286846](286853 call _getIterator tmpIter[286748]))
        Defer
        {
          {
            (286871 call _freeIterator _iterator[286846])
          }
        }
        { scopeless type
          (286860 'move' _indexOfInterest[286845](286857 call iteratorIndex _iterator[286846]))
        }
        ForLoop
        {
          unknown tid[286864] "coforall index var" "index var" "insert auto destroy"
          (286866 'move' tid[286864] _indexOfInterest[286845])
          (286878 call _upEndCount _coforallCount[286837] 1)
          {
            {
              unknown chunk[286741](286740 call _computeChunk tid chunkSize trailing)
              (286746 yield chunk)
            }
            (286840 call _downEndCount _coforallCount[286837] nil[38])
            (286839 'coforall loop')
          }
          label _continueLabel[286850]
          _indexOfInterest[286845]
          _iterator[286846]
        }
        label _breakLabel[286851]
        Defer
        {
          {
            (286882 call _endCountFree _coforallCount[286837])
          }
        }
        (286887 call _waitEndCount _coforallCount[286837] 1)
      }
    }
  }
  where {
    (286678 call == tag(286675 call . iterKind c"leader"))
  } function list[287241](?).these[286923](arg _mt[287473]:_MT[227], arg this[287471]:list[287241](?), param arg tag[286921]:_any[170](?), arg followThis[286925]:_any[170](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "no doc"
  {
    {
      unknown _indexOfInterest[286948] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[286949] "expr temp" "temp"
      (286958 'move' _iterator[286949](286956 call _getIterator(286938 call followThis 1)))
      Defer
      {
        {
          (286975 call _freeIterator _iterator[286949])
        }
      }
      { scopeless type
        (286964 'move' _indexOfInterest[286948](286961 call iteratorIndex _iterator[286949]))
      }
      ForLoop
      {
        unknown i[286968] "index var" "insert auto destroy"
        (286970 'move' i[286968] _indexOfInterest[286948])
        { scopeless
          (286946 yield(286945 call this(286942 call + i 1)))
        }
        label _continueLabel[286953]
        _indexOfInterest[286948]
        _iterator[286949]
      }
      label _breakLabel[286954]
    }
  }
  where {
    (286932 call == tag(286929 call . iterKind c"follower"))
  } function list[287241](?).readWriteThis[286992](arg _mt[287477]:_MT[227], arg this[287475]:list[287241](?), arg ch[286989] :
  channel) : _unknown[43] "method" "primary method"
  {
    (286996 call _enter)
    (287001 call <~> ch "[")
    {
      unknown _indexOfInterest[287023] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[287024] "expr temp" "temp"
      (287033 'move' _iterator[287024](287031 call _getIterator(287041 call chpl_direct_range_iter 1(287038 call - _size 1) 1)))
      Defer
      {
        {
          (287057 call _freeIterator _iterator[287024])
        }
      }
      { scopeless type
        (287046 'move' _indexOfInterest[287023](287043 call iteratorIndex _iterator[287024]))
      }
      ForLoop
      {
        unknown i[287050] "index var" "insert auto destroy"
        (287052 'move' i[287050] _indexOfInterest[287023])
        { scopeless
          (287020 call <~>(287017 call <~> ch(287016 call _getRef i)) ", ")
        }
        label _continueLabel[287028]
        _indexOfInterest[287023]
        _iterator[287024]
      }
      label _breakLabel[287029]
    }
    if(287076 call _cond_test(287066 call > _size 0))
    {
      { scopeless
        (287073 call <~> ch(287072 call _getRef _size))
      }
    }
    (287083 call <~> ch "]")
    (287088 call _leave)
  } function list[287241](?).isEmpty[287094](arg _mt[287481]:_MT[227], const arg this[287479]:list[287241](?)) : _unknown[43] "method" "primary method"
  {
    (287099 call _enter)
    unknown result[287106](287104 call == _size 0)
    (287111 call _leave)
    (287114 return result)
  }
  { scopeless type
    bool[10]
  } function list[287241](?).size[287121](arg _mt[287485]:_MT[227], const arg this[287483]:list[287241](?)) : _unknown[43] "inline" "method" "primary method" "no parens"
  {
    unknown result[287124] 0
    {
      const tmp[287146] "const" "temp"
      (287147 'move' tmp[287146](287144 'deref'(287143 '_wide_get_locale' this)))
      {
        (287131 call _enter)
        (287136 call = result _size)
        (287141 call _leave)
      }
    }
    (287152 return result)
  } function list[287241](?).toArray[287158](arg _mt[287489]:_MT[227], const arg this[287487]:list[287241](?)) : _unknown[43] "method" "primary method"
  {
    unknown result[287174](287172 call chpl__buildArrayRuntimeType(287170 call chpl__ensureDomainExpr(287166 call chpl_build_bounded_range 1 _size)) eltType)
    {
      const tmp[287229] "const" "temp"
      (287230 'move' tmp[287229](287227 'deref'(287226 '_wide_get_locale' this)))
      {
        (287181 call _enter)
        unknown tmp[287194](287192 call chpl__buildArrayRuntimeType(287190 call chpl__ensureDomainExpr(287186 call chpl_build_bounded_range 1 _size)) eltType)
        Forall {
          induction variables:
            
            unknown i[287214] "index var" "insert auto destroy"
          iterated expressions:
            (287200 call chpl_build_bounded_range 1 _size)
          shadow variables:
          forall body
          {
            (287210 call =(287205 call tmp i)(287209 call _getRef i))
          }
        }
        (287219 call = result tmp)
        (287224 call _leave)
      }
    }
    (287235 return result)
  }
  { scopeless type
    (287161 call chpl__buildArrayRuntimeType nil[38] eltType)
  }
  function =[287503](ref arg lhs[287500] :
  (287499 call list unknown t[287495] ?[249]), arg rhs[287510] :
  (287509 call list t ?[249])) : _unknown[43] "assignop"
  {
    (287518 call(287514 call . lhs c"clear"))
    (287529 call(287524 call . lhs c"extend") rhs)
  }
  function ==[287544](arg a[287541] :
  (287540 call list unknown t[287536] ?[249]), arg b[287551] :
  (287550 call list t ?[249])) : _unknown[43]
  {
    if(287568 call _cond_test(287563 call !=(287556 call . a c"size")(287560 call . b c"size")))
    {
      { scopeless
        (287566 return 0)
      }
    }
    {
      unknown _indexOfInterest[287600] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[287601] "expr temp" "temp"
      (287610 'move' _iterator[287601](287608 call _getIterator(287618 call chpl_direct_range_iter 1(287615 call . a c"size") 1)))
      Defer
      {
        {
          (287634 call _freeIterator _iterator[287601])
        }
      }
      { scopeless type
        (287623 'move' _indexOfInterest[287600](287620 call iteratorIndex _iterator[287601]))
      }
      ForLoop
      {
        unknown i[287627] "index var" "insert auto destroy"
        (287629 'move' i[287627] _indexOfInterest[287600])
        { scopeless
          if(287595 call _cond_test(287590 call !=(287585 call a i)(287589 call b i)))
          {
            { scopeless
              (287593 return 0)
            }
          }
        }
        label _continueLabel[287605]
        _indexOfInterest[287600]
        _iterator[287601]
      }
      label _breakLabel[287606]
    }
    (287642 return 1)
  }
  { scopeless type
    bool[10]
  }
  function !=[287658](arg a[287655] :
  (287654 call list unknown t[287650] ?[249]), arg b[287665] :
  (287664 call list t ?[249])) : _unknown[43]
  {
    (287675 return(287673 call !(287671 call == a b)))
  }
  { scopeless type
    bool[10]
  }
}