AST dump for SparseBlockDist after pass scopeResolve.
Module use list: ChapelStandard DSIUtil ChapelUtil BlockDist Sort Search 

{ unknown debugSparseBlockDist[312961] "config" "param" 0 unknown debugSparseBlockDistBulkTransfer[312965] "config" "param" 0 function TargetLocaleComparator[313082](?).key[312998](arg _mt[313086]:_MT[227], arg this[313084]:TargetLocaleComparator[313082](?), arg a[312995] :(312993 call chpl__buildIndexType(385232 call . this[313084] c"rank")(385237 call . this[313084] c"idxType"))) : _unknown[43] "method" "primary method"
  {
    if(313074 call _cond_test(313002 call ==(385242 call . this[313084] c"rank") 2))
    {
      if(313053 call _cond_test(313011 call ==(385247 call . this[313084] c"sparseLayoutType")(313010 'to unmanaged class from unknown'(313009 call anymanaged CS[385251](?)(compressRows = 0)))))
      {(313031 return(313029 call _build_tuple(313019 call(313014 call .(385256 call . this[313084] c"dist") c"targetLocsIdx") a[312995])(313023 call a[312995] 2)(313028 call a[312995] 1)))
      }
      {(313051 return(313049 call _build_tuple(313039 call(313034 call .(385264 call . this[313084] c"dist") c"targetLocsIdx") a[312995])(313043 call a[312995] 1)(313048 call a[312995] 2)))
      }
    }
    {(313071 return(313069 call _build_tuple(313066 call(313061 call .(385272 call . this[313084] c"dist") c"targetLocsIdx") a[312995]) a[312995]))
    }
  } type TargetLocaleComparator[313082](?) unknown rank[312969] "param" unknown idxType[312972] "type variable" unknown sparseLayoutType[312975] "type variable" unknown dist[312985](312984 'to unmanaged class from unknown'(312983 call anymanaged Block[381982](?) rank[312969] idxType[312972] sparseLayoutType[312975])) function SparseBlockDom[315833](?).postinit[313157](arg _mt[315837]:_MT[227], arg this[315835]:SparseBlockDom[315833](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {(313161 call(385300 call . this[315835] c"setup"))
  } function SparseBlockDom[315833](?).setup[313168](arg _mt[315841]:_MT[227], arg this[315839]:SparseBlockDom[315833](?)) : _unknown[43] "method" "primary method" "no return value for void"
  { unknown thisid[313175](313174 '_wide_get_node' this[315839])
    if(313490 call _cond_test(313190 call ==(313188 call(385306 call . this[315839] c"locDoms")(313184 call .(313181 call .(385311 call . this[315839] c"dist") c"targetLocDom") c"low")) nil[38]))
    {
      { unknown tmpIter[313258] "expr temp" "maybe ref" "no copy" "temp"(313261 'move' tmpIter[313258](313194 call .(385316 call . this[315839] c"dist") c"targetLocDom")) unknown isRngDomArr[313449] "maybe param" "temp"(313464 'move' isRngDomArr[313449](313462 call ||(313451 call isBoundedRange tmpIter[313258])(313460 call ||(313454 call isDomain tmpIter[313258])(313457 call isArray tmpIter[313258]))))
        if isRngDomArr[313449]
        { const _coforallCount[313316] "const" "end count" "temp"(313385 'move' _coforallCount[313316](313382 call _endCountAlloc 1)) unknown numTasks[313317] "temp"(313369 'move' numTasks[313317](313365 call . tmpIter[313258] c"size"))(313360 call _upEndCount _coforallCount[313316] 1 numTasks[313317])(313357 call chpl_resetTaskSpawn numTasks[313317]) unknown _indexOfInterest[313324] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[313325] "expr temp" "temp"(313334 'move' _iterator[313325](313332 call _getIterator tmpIter[313258]))
          Defer
          {
            {(313350 call _freeIterator _iterator[313325])
            }
          }
          { scopeless type(313339 'move' _indexOfInterest[313324](313336 call iteratorIndex _iterator[313325]))
          }
          ForLoop
          { unknown localeIdx[313343] "coforall index var" "index var" "insert auto destroy"(313345 'move' localeIdx[313343] _indexOfInterest[313324])
            {
              { const tmp[313264] "const" "temp"(313266 'move' tmp[313264](313268 'deref'(313269 '_wide_get_locale'(313274 call(313271 call .(385379 call . this[315839] c"dist") c"targetLocales") localeIdx[313343]))))
                {(313278 call =(313280 call(385385 call . this[315839] c"locDoms") localeIdx[313343])(313282 'new'(313283 'to unmanaged class from unknown'(313285 call anymanaged LocSparseBlockDom[385287](?)(385392 call . this[315839] c"rank")(385397 call . this[315839] c"idxType")(385402 call . this[315839] c"stridable")(385407 call . this[315839] c"sparseLayoutType")(313294 call(313291 call .(385412 call . this[315839] c"dist") c"getChunk")(385417 call . this[315839] c"whole") localeIdx[313343])))))
                  if(313298 call _cond_test(313300 call == thisid[313175](313303 call .(385422 call here[92085]) c"id")))
                  {(313309 call =(385426 call . this[315839] c"myLocDom")(313312 call(385431 call . this[315839] c"locDoms") localeIdx[313343]))
                  }
                }
              }(313319 call _downEndCount _coforallCount[313316] nil[38])(313318 'coforall loop')
            } label _continueLabel[313329] _indexOfInterest[313324] _iterator[313325]
          } label _breakLabel[313330]
          Defer
          {
            {(313372 call _endCountFree _coforallCount[313316])
            }
          }(313377 call _waitEndCount _coforallCount[313316] 1 numTasks[313317])
        }
        { const _coforallCount[313389] "const" "end count" "temp"(313446 'move' _coforallCount[313389](313443 call _endCountAlloc 1)) unknown _indexOfInterest[313397] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[313398] "expr temp" "temp"(313407 'move' _iterator[313398](313405 call _getIterator tmpIter[313258]))
          Defer
          {
            {(313423 call _freeIterator _iterator[313398])
            }
          }
          { scopeless type(313412 'move' _indexOfInterest[313397](313409 call iteratorIndex _iterator[313398]))
          }
          ForLoop
          { unknown localeIdx[313416] "coforall index var" "index var" "insert auto destroy"(313418 'move' localeIdx[313416] _indexOfInterest[313397])(313430 call _upEndCount _coforallCount[313389] 1)
            {
              { const tmp[313252] "const" "temp"(313253 'move' tmp[313252](313250 'deref'(313249 '_wide_get_locale'(313203 call(313198 call .(385321 call . this[315839] c"dist") c"targetLocales") localeIdx[313416]))))
                {(313225 call =(313207 call(385327 call . this[315839] c"locDoms") localeIdx[313416])(313224 'new'(313223 'to unmanaged class from unknown'(313222 call anymanaged LocSparseBlockDom[385287](?)(385334 call . this[315839] c"rank")(385339 call . this[315839] c"idxType")(385344 call . this[315839] c"stridable")(385349 call . this[315839] c"sparseLayoutType")(313221 call(313215 call .(385354 call . this[315839] c"dist") c"getChunk")(385359 call . this[315839] c"whole") localeIdx[313416])))))
                  if(313244 call _cond_test(313234 call == thisid[313175](313231 call .(385364 call here[92085]) c"id")))
                  {(313241 call =(385368 call . this[315839] c"myLocDom")(313240 call(385373 call . this[315839] c"locDoms") localeIdx[313416]))
                  }
                }
              }(313392 call _downEndCount _coforallCount[313389] nil[38])(313391 'coforall loop')
            } label _continueLabel[313402] _indexOfInterest[313397] _iterator[313398]
          } label _breakLabel[313403]
          Defer
          {
            {(313434 call _endCountFree _coforallCount[313389])
            }
          }(313439 call _waitEndCount _coforallCount[313389] 1)
        }
      }
    }
    {(313487 call halt "Don't know how to reallocate yet")
    }
  } function SparseBlockDom[315833](?).dsiDestroyDom[313498](arg _mt[315845]:_MT[227], arg this[315843]:SparseBlockDom[315833](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[313526] "expr temp" "maybe ref" "no copy" "temp"(313529 'move' tmpIter[313526](313502 call .(385437 call . this[315843] c"dist") c"targetLocDom")) unknown isRngDomArr[313681] "maybe param" "temp"(313696 'move' isRngDomArr[313681](313694 call ||(313683 call isBoundedRange tmpIter[313526])(313692 call ||(313686 call isDomain tmpIter[313526])(313689 call isArray tmpIter[313526]))))
      if isRngDomArr[313681]
      { const _coforallCount[313548] "const" "end count" "temp"(313617 'move' _coforallCount[313548](313614 call _endCountAlloc 1)) unknown numTasks[313549] "temp"(313601 'move' numTasks[313549](313597 call . tmpIter[313526] c"size"))(313592 call _upEndCount _coforallCount[313548] 1 numTasks[313549])(313589 call chpl_resetTaskSpawn numTasks[313549]) unknown _indexOfInterest[313556] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[313557] "expr temp" "temp"(313566 'move' _iterator[313557](313564 call _getIterator tmpIter[313526]))
        Defer
        {
          {(313582 call _freeIterator _iterator[313557])
          }
        }
        { scopeless type(313571 'move' _indexOfInterest[313556](313568 call iteratorIndex _iterator[313557]))
        }
        ForLoop
        { unknown localeIdx[313575] "coforall index var" "index var" "insert auto destroy"(313577 'move' localeIdx[313575] _indexOfInterest[313556])
          {
            { const tmp[313532] "const" "temp"(313534 'move' tmp[313532](313536 'deref'(313537 '_wide_get_locale'(313539 call(385454 call . this[315843] c"locDoms") localeIdx[313575]))))(313543 call chpl__delete(313545 call(385460 call . this[315843] c"locDoms") localeIdx[313575]))
            }(313551 call _downEndCount _coforallCount[313548] nil[38])(313550 'coforall loop')
          } label _continueLabel[313561] _indexOfInterest[313556] _iterator[313557]
        } label _breakLabel[313562]
        Defer
        {
          {(313604 call _endCountFree _coforallCount[313548])
          }
        }(313609 call _waitEndCount _coforallCount[313548] 1 numTasks[313549])
      }
      { const _coforallCount[313621] "const" "end count" "temp"(313678 'move' _coforallCount[313621](313675 call _endCountAlloc 1)) unknown _indexOfInterest[313629] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[313630] "expr temp" "temp"(313639 'move' _iterator[313630](313637 call _getIterator tmpIter[313526]))
        Defer
        {
          {(313655 call _freeIterator _iterator[313630])
          }
        }
        { scopeless type(313644 'move' _indexOfInterest[313629](313641 call iteratorIndex _iterator[313630]))
        }
        ForLoop
        { unknown localeIdx[313648] "coforall index var" "index var" "insert auto destroy"(313650 'move' localeIdx[313648] _indexOfInterest[313629])(313662 call _upEndCount _coforallCount[313621] 1)
          {
            { const tmp[313520] "const" "temp"(313521 'move' tmp[313520](313518 'deref'(313517 '_wide_get_locale'(313508 call(385442 call . this[315843] c"locDoms") localeIdx[313648]))))(313514 call chpl__delete(313512 call(385448 call . this[315843] c"locDoms") localeIdx[313648]))
            }(313624 call _downEndCount _coforallCount[313621] nil[38])(313623 'coforall loop')
          } label _continueLabel[313634] _indexOfInterest[313629] _iterator[313630]
        } label _breakLabel[313635]
        Defer
        {
          {(313666 call _endCountFree _coforallCount[313621])
          }
        }(313671 call _waitEndCount _coforallCount[313621] 1)
      }
    }
  } function SparseBlockDom[315833](?).getNNZ[313705](arg _mt[315849]:_MT[227], arg this[315847]:SparseBlockDom[315833](?)) : _unknown[43] "method" "primary method" "method overrides"
  {(313726 return(313724 'reduce' anymanaged SumReduceScanOp[344093](?)(313720 [  ld[313722]  in (385468 call . this[315847] c"locDoms") ]
    {(313717 call .(313714 call . ld[313722] c"mySparseBlock") c"size")
    } ) 0))
  } function SparseBlockDom[315833](?).dsiAdd[313740](arg _mt[315853]:_MT[227], arg this[315851]:SparseBlockDom[315833](?), arg ind[313737] :(313735 call *(385474 call . this[315851] c"rank")(385479 call . this[315851] c"idxType"))) : _unknown[43] "method" "primary method"
  { unknown _retval[313743] 0
    { const tmp[313778] "const" "temp"(313779 'move' tmp[313778](313776 'deref'(313775 '_wide_get_locale'(313753 call(313748 call .(385484 call . this[315851] c"dist") c"dsiIndexToLocale") ind[313737]))))
      {(313771 call = _retval[313743](313770 call(313765 call .(313764 call(385491 call . this[315851] c"locDoms")(313762 call(313757 call .(385496 call . this[315851] c"dist") c"targetLocsIdx") ind[313737])) c"dsiAdd") ind[313737]))
      }
    }(313784 return _retval[313743])
  } function SparseBlockDom[315833](?).dsiAdd[313794](arg _mt[315857]:_MT[227], arg this[315855]:SparseBlockDom[315833](?), arg ind[313791] :(385504 call . this[315855] c"idxType")) : _unknown[43] "method" "primary method"
  {(313809 return(313808 call(385509 call . this[315855] c"dsiAdd")(313805 call _build_tuple ind[313791])))
  }
  {(313801 call ==(313797 call . this[315855] c"rank") 1)
  } function SparseBlockDom[315833](?).dsiFirst[313817](arg _mt[315861]:_MT[227], arg this[315859]:SparseBlockDom[315833](?)) : _unknown[43] "method" "primary method" "no parens"
  {(313836 return(313834 'reduce' anymanaged MinReduceScanOp[344217](?)(313830 [  l[313832]  in (385517 call . this[315859] c"locDoms") ]
    {(313827 call .(313824 call . l[313832] c"mySparseBlock") c"first")
    } ) 0))
  } function SparseBlockDom[315833](?).dsiLast[313843](arg _mt[315865]:_MT[227], arg this[315863]:SparseBlockDom[315833](?)) : _unknown[43] "method" "primary method" "no parens"
  {(313862 return(313860 'reduce' anymanaged MaxReduceScanOp[344172](?)(313856 [  l[313858]  in (385525 call . this[315863] c"locDoms") ]
    {(313853 call .(313850 call . l[313858] c"mySparseBlock") c"last")
    } ) 0))
  } function SparseBlockDom[315833](?).bulkAdd_help[313882](arg _mt[315869]:_MT[227], arg this[315867]:SparseBlockDom[315833](?), arg inds[313879] :(313877 call chpl__buildArrayRuntimeType unknown indsDom[313869](313875 call chpl__buildIndexType(385531 call . this[315867] c"rank")(385536 call . this[315867] c"idxType"))), arg dataSorted[313885] = 0, arg isUnique[313889] = 0, arg addOn[313897] =(313895 call _cast borrowed locale?[389810] nil[38])) : _unknown[43] "method" "primary method" "method overrides"
  {
    if(313983 call _cond_test(313911 call != addOn[313897] nil[38]))
    { unknown retval[313914] 0
      { const tmp[313975] "const" "temp"(313976 'move' tmp[313975](313973 'deref'(313972 '_wide_get_locale' addOn[313897])))
        {
          if(313967 call _cond_test(313924 call ==(313921 call chpl_localeID_to_locale(313920 '_wide_get_locale' inds[313879]))(385542 call here[92085])))
          {(313933 call = retval[313914](313932 call(385548 call . this[315867] c"bulkAddHere_help") inds[313879] dataSorted[313885] isUnique[313889]))
          }
          { unknown _local_inds[313948](313946 call chpl__buildArrayRuntimeType(313944 call chpl__ensureDomainExpr indsDom[313869])(313942 call chpl__buildIndexType(385557 call . this[315867] c"rank")(385562 call . this[315867] c"idxType")))(313954 call = _local_inds[313948] inds[313879])(313964 call = retval[313914](313963 call(385569 call . this[315867] c"bulkAddHere_help") _local_inds[313948] dataSorted[313885] isUnique[313889]))
          }
        }
      }(313981 return retval[313914])
    } unknown comp[313999](313998 'new'(313997 call TargetLocaleComparator[313082](?)(rank =(385579 call . this[315867] c"rank"))(idxType =(385584 call . this[315867] c"idxType"))(sparseLayoutType =(385589 call . this[315867] c"sparseLayoutType"))(dist =(385594 call . this[315867] c"dist"))))
    if(314012 call _cond_test(314003 call ! dataSorted[313885]))
    {(314010 call sort inds[313879](comparator = comp[313999]))
    } unknown localeRanges[314027](314025 call chpl__buildArrayRuntimeType(314023 call chpl__ensureDomainExpr(314018 call .(385602 call . this[315867] c"dist") c"targetLocDom")) range[66183](?))
    { const tmp[314235] "const" "temp"(314236 'move' tmp[314235](314233 'deref'(314232 '_wide_get_locale' inds[313879])))
      {
        { unknown _indexOfInterest[314197] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314198] "expr temp" "temp"(314207 'move' _iterator[314198](314205 call _getIterator(314033 call .(385609 call . this[315867] c"dist") c"targetLocDom")))
          Defer
          {
            {(314224 call _freeIterator _iterator[314198])
            }
          }
          { scopeless type(314213 'move' _indexOfInterest[314197](314210 call iteratorIndex _iterator[314198]))
          }
          ForLoop
          { unknown l[314217] "index var" "insert auto destroy"(314219 'move' l[314217] _indexOfInterest[314197])
            { const _first[314052] "const"(314049 call .(314046 call .(314043 call .(314040 call .(314039 call(385614 call . this[315867] c"locDoms") l[314217]) c"mySparseBlock") c"_value") c"parentDom") c"first") const _last[314072] "const"(314069 call .(314066 call .(314063 call .(314060 call .(314059 call(385620 call . this[315867] c"locDoms") l[314217]) c"mySparseBlock") c"_value") c"parentDom") c"last") unknown tmp[314086] "no copy" "temp"(314085 call binarySearch inds[313879] _first[314052] comp[313999])(314093 call _check_tuple_var_decl tmp[314086] 2) unknown foundFirst[314075](314087 call tmp[314086] 1) unknown locFirst[314077](314090 call tmp[314086] 2) unknown tmp[314109] "no copy" "temp"(314108 call binarySearch inds[313879] _last[314072] comp[313999])(314116 call _check_tuple_var_decl tmp[314109] 2) unknown foundLast[314098](314110 call tmp[314109] 1) unknown locLast[314100](314113 call tmp[314109] 2)
              if(314129 call _cond_test(314122 call ! foundLast[314098]))
              {(314126 call -= locLast[314100] 1)
              }
              if(314155 call _cond_test(314142 call ==(314138 call .(314135 call .(385634 call . this[315867] c"dist") c"targetLocDom") c"first") l[314217]))
              {(314152 call = locFirst[314077](314149 call .(314146 call . inds[313879] c"_dom") c"first"))
              }
              if(314181 call _cond_test(314168 call ==(314164 call .(314161 call .(385642 call . this[315867] c"dist") c"targetLocDom") c"last") l[314217]))
              {(314178 call = locLast[314100](314175 call .(314172 call . inds[313879] c"_dom") c"last"))
              }(314194 call =(314189 call localeRanges[314027] l[314217])(314192 call chpl_build_bounded_range locFirst[314077] locLast[314100]))
            } label _continueLabel[314202] _indexOfInterest[314197] _iterator[314198]
          } label _breakLabel[314203]
        }
      }
    } unknown _totalAdded[314243](314241 call chpl__atomicType int(64)[13])
    { unknown tmpIter[314303] "expr temp" "maybe ref" "no copy" "temp"(314306 'move' tmpIter[314303](314248 call .(385654 call . this[315867] c"dist") c"targetLocDom")) unknown isRngDomArr[314483] "maybe param" "temp"(314498 'move' isRngDomArr[314483](314496 call ||(314485 call isBoundedRange tmpIter[314303])(314494 call ||(314488 call isDomain tmpIter[314303])(314491 call isArray tmpIter[314303]))))
      if isRngDomArr[314483]
      { const _coforallCount[314350] "const" "end count" "temp"(314419 'move' _coforallCount[314350](314416 call _endCountAlloc 1)) unknown numTasks[314351] "temp"(314403 'move' numTasks[314351](314399 call . tmpIter[314303] c"size"))(314394 call _upEndCount _coforallCount[314350] 1 numTasks[314351])(314391 call chpl_resetTaskSpawn numTasks[314351]) unknown _indexOfInterest[314358] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314359] "expr temp" "temp"(314368 'move' _iterator[314359](314366 call _getIterator tmpIter[314303]))
        Defer
        {
          {(314384 call _freeIterator _iterator[314359])
          }
        }
        { scopeless type(314373 'move' _indexOfInterest[314358](314370 call iteratorIndex _iterator[314359]))
        }
        ForLoop
        { unknown l[314377] "coforall index var" "index var" "insert auto destroy"(314379 'move' l[314377] _indexOfInterest[314358])
          {
            { const tmp[314309] "const" "temp"(314311 'move' tmp[314309](314313 'deref'(314314 '_wide_get_locale'(314319 call(314316 call .(385676 call . this[315867] c"dist") c"targetLocales") l[314377]))))
              { const _retval[314322] "const"(314332 call(314324 call .(314326 call .(314328 call(385682 call . this[315867] c"locDoms") l[314377]) c"mySparseBlock") c"bulkAdd")(314334 call inds[313879](314336 call localeRanges[314027] l[314377]))(dataSorted = 1)(isUnique = 0))(314347 call(314344 call . _totalAdded[314243] c"add") _retval[314322])
              }
            }(314353 call _downEndCount _coforallCount[314350] nil[38])(314352 'coforall loop')
          } label _continueLabel[314363] _indexOfInterest[314358] _iterator[314359]
        } label _breakLabel[314364]
        Defer
        {
          {(314406 call _endCountFree _coforallCount[314350])
          }
        }(314411 call _waitEndCount _coforallCount[314350] 1 numTasks[314351])
      }
      { const _coforallCount[314423] "const" "end count" "temp"(314480 'move' _coforallCount[314423](314477 call _endCountAlloc 1)) unknown _indexOfInterest[314431] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314432] "expr temp" "temp"(314441 'move' _iterator[314432](314439 call _getIterator tmpIter[314303]))
        Defer
        {
          {(314457 call _freeIterator _iterator[314432])
          }
        }
        { scopeless type(314446 'move' _indexOfInterest[314431](314443 call iteratorIndex _iterator[314432]))
        }
        ForLoop
        { unknown l[314450] "coforall index var" "index var" "insert auto destroy"(314452 'move' l[314450] _indexOfInterest[314431])(314464 call _upEndCount _coforallCount[314423] 1)
          {
            { const tmp[314298] "const" "temp"(314299 'move' tmp[314298](314296 'deref'(314295 '_wide_get_locale'(314257 call(314252 call .(385659 call . this[315867] c"dist") c"targetLocales") l[314450]))))
              { const _retval[314283] "const"(314282 call(314267 call .(314262 call .(314261 call(385665 call . this[315867] c"locDoms") l[314450]) c"mySparseBlock") c"bulkAdd")(314276 call inds[313879](314274 call localeRanges[314027] l[314450]))(dataSorted = 1)(isUnique = 0))(314293 call(314288 call . _totalAdded[314243] c"add") _retval[314283])
              }
            }(314426 call _downEndCount _coforallCount[314423] nil[38])(314425 'coforall loop')
          } label _continueLabel[314436] _indexOfInterest[314431] _iterator[314432]
        } label _breakLabel[314437]
        Defer
        {
          {(314468 call _endCountFree _coforallCount[314423])
          }
        }(314473 call _waitEndCount _coforallCount[314423] 1)
      }
    } const _retval[314508] "const"(314507 call(314503 call . _totalAdded[314243] c"read"))(314512 return _retval[314508])(330728 'used modules list'(313902 'use' Sort[251417])(313907 'use' Search[275550]))
  } function SparseBlockDom[315833](?).bulkAddHere_help[314529](arg _mt[315873]:_MT[227], arg this[315871]:SparseBlockDom[315833](?), arg inds[314526] :(314523 call chpl__buildArrayRuntimeType nil[38](314521 call chpl__buildIndexType(385695 call . this[315871] c"rank")(385700 call . this[315871] c"idxType"))), arg dataSorted[314532] = 0, arg isUnique[314536] = 0) : _unknown[43] "method" "primary method"
  { const _retval[314555] "const"(314554 call(314545 call .(314542 call .(314540 call postfix!(385705 call . this[315871] c"myLocDom")) c"mySparseBlock") c"bulkAdd") inds[314526](dataSorted = 1)(isUnique = 0))(314560 return _retval[314555])
  } function SparseBlockDom[315833](?).dsiSerialWrite[314568](arg _mt[315877]:_MT[227], arg this[315875]:SparseBlockDom[315833](?), arg f[314566]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(314664 call _cond_test(314572 call ==(385712 call . this[315875] c"rank") 1))
    {(314576 call <~> f[314566] "{")
      { unknown _indexOfInterest[314605] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314606] "expr temp" "temp"(314615 'move' _iterator[314606](314613 call _getIterator(385718 call . this[315875] c"locDoms")))
        Defer
        {
          {(314631 call _freeIterator _iterator[314606])
          }
        }
        { scopeless type(314620 'move' _indexOfInterest[314605](314617 call iteratorIndex _iterator[314606]))
        }
        ForLoop
        { unknown locdom[314624] "index var" "insert auto destroy"(314626 'move' locdom[314624] _indexOfInterest[314605])
          {
            if(314600 call _cond_test(314583 call . locdom[314624] c"dsiNumIndices"))
            {(314588 call <~> f[314566] " ")(314598 call(314593 call . locdom[314624] c"dsiSerialWrite") f[314566])
            }
          } label _continueLabel[314610] _indexOfInterest[314605] _iterator[314606]
        } label _breakLabel[314611]
      }(314640 call <~> f[314566] "}")
    }
    {(314661 call compilerError "Can't write out multidimensional sparse distributed domains yet")
    }
  } function SparseBlockDom[315833](?).dsiBuildArray[314675](arg _mt[315881]:_MT[227], arg this[315879]:SparseBlockDom[315833](?), arg eltType[314673]:_any[170](?)) : _unknown[43] "method" "primary method"
  { unknown arr[314697](314696 'new'(314695 'to unmanaged class from unknown'(314694 call anymanaged SparseBlockArr[385727](?)(eltType = eltType[314673])(rank =(385733 call . this[315879] c"rank"))(idxType =(385738 call . this[315879] c"idxType"))(stridable =(385743 call . this[315879] c"stridable"))(sparseLayoutType =(385748 call . this[315879] c"sparseLayoutType"))(dom =(314692 call _to_unmanaged this[315879])))))(314706 call(314702 call . arr[314697] c"setup"))(314709 return arr[314697])
  } function SparseBlockDom[315833](?).getLocDom[314717](arg _mt[315885]:_MT[227], arg this[315883]:SparseBlockDom[315833](?), arg localeIdx[314715]:_any[170](?)) : _unknown[43] "method" "primary method"
  {(314723 return(314722 call(385756 call . this[315883] c"locDoms") localeIdx[314715]))
  } function SparseBlockDom[315833](?).these[314730](arg _mt[315889]:_MT[227], arg this[315887]:SparseBlockDom[315833](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[314781] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314782] "expr temp" "temp"(314791 'move' _iterator[314782](314789 call _getIterator(385762 call . this[315887] c"locDoms")))
      Defer
      {
        {(314807 call _freeIterator _iterator[314782])
        }
      }
      { scopeless type(314796 'move' _indexOfInterest[314781](314793 call iteratorIndex _iterator[314782]))
      }
      ForLoop
      { unknown locDom[314800] "index var" "insert auto destroy"(314802 'move' locDom[314800] _indexOfInterest[314781])
        { unknown _indexOfInterest[314747] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314748] "expr temp" "temp"(314757 'move' _iterator[314748](314755 call _getIterator(314743 call(314739 call .(314736 call . locDom[314800] c"mySparseBlock") c"these"))))
          Defer
          {
            {(314774 call _freeIterator _iterator[314748])
            }
          }
          { scopeless type(314763 'move' _indexOfInterest[314747](314760 call iteratorIndex _iterator[314748]))
          }
          ForLoop
          { unknown x[314767] "index var" "insert auto destroy"(314769 'move' x[314767] _indexOfInterest[314747])(314745 yield x[314767]) label _continueLabel[314752] _indexOfInterest[314747] _iterator[314748]
          } label _breakLabel[314753]
        } label _continueLabel[314786] _indexOfInterest[314781] _iterator[314782]
      } label _breakLabel[314787]
    }
  } function SparseBlockDom[315833](?).these[314823](arg _mt[315893]:_MT[227], arg this[315891]:SparseBlockDom[315833](?), param arg tag[314820] : iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[314909] "expr temp" "maybe ref" "no copy" "temp"(314912 'move' tmpIter[314909](314843 call _build_tuple(385772 call . this[315891] c"locDoms")(314840 call .(385777 call . this[315891] c"dist") c"targetLocDom"))) unknown isRngDomArr[315132] "maybe param" "temp"(315147 'move' isRngDomArr[315132](315145 call ||(315134 call isBoundedRange tmpIter[314909])(315143 call ||(315137 call isDomain tmpIter[314909])(315140 call isArray tmpIter[314909]))))
      if isRngDomArr[315132]
      { const _coforallCount[314971] "const" "end count" "temp"(315054 'move' _coforallCount[314971](315051 call _endCountAlloc 1)) unknown numTasks[314972] "temp"(315038 'move' numTasks[314972](315034 call . tmpIter[314909] c"size"))(315029 call _upEndCount _coforallCount[314971] 1 numTasks[314972])(315026 call chpl_resetTaskSpawn numTasks[314972]) unknown _indexOfInterest[314979] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314980] "expr temp" "temp"(314989 'move' _iterator[314980](314987 call _getIteratorZip tmpIter[314909]))
        Defer
        {
          {(315019 call _freeIterator _iterator[314980])
          }
        }
        { scopeless type(314994 'move' _indexOfInterest[314979](314991 call iteratorIndex _iterator[314980]))
        }
        ForLoop
        {(314999 call _check_tuple_var_decl _indexOfInterest[314979] 2) unknown locDom[315005] "coforall index var" "index var" "insert auto destroy"(315007 'move' locDom[315005](315003 call _indexOfInterest[314979] 1)) unknown localeIndex[315012] "coforall index var" "index var" "insert auto destroy"(315014 'move' localeIndex[315012](315010 call _indexOfInterest[314979] 2))
          {
            { const tmp[314915] "const" "temp"(314917 'move' tmp[314915](314919 'deref'(314920 '_wide_get_locale' locDom[315005])))
              {
                { unknown _indexOfInterest[314924] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314926] "expr temp" "temp"(314928 'move' _iterator[314926](314931 call _getIterator(314939 call(314933 call .(314935 call . locDom[315005] c"mySparseBlock") c"these") tag[314820])))
                  Defer
                  {
                    {(314943 call _freeIterator _iterator[314926])
                    }
                  }
                  { scopeless type(314947 'move' _indexOfInterest[314924](314950 call iteratorIndex _iterator[314926]))
                  }
                  ForLoop
                  { unknown followThis[314955] "index var" "insert auto destroy"(314957 'move' followThis[314955] _indexOfInterest[314924])
                    {(314961 yield(314963 call _build_tuple followThis[314955] localeIndex[315012]))
                    } label _continueLabel[314966] _indexOfInterest[314924] _iterator[314926]
                  } label _breakLabel[314968]
                }
              }
            }(314974 call _downEndCount _coforallCount[314971] nil[38])(314973 'coforall loop')
          } label _continueLabel[314984] _indexOfInterest[314979] _iterator[314980]
        } label _breakLabel[314985]
        Defer
        {
          {(315041 call _endCountFree _coforallCount[314971])
          }
        }(315046 call _waitEndCount _coforallCount[314971] 1 numTasks[314972])
      }
      { const _coforallCount[315058] "const" "end count" "temp"(315129 'move' _coforallCount[315058](315126 call _endCountAlloc 1)) unknown _indexOfInterest[315066] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315067] "expr temp" "temp"(315076 'move' _iterator[315067](315074 call _getIteratorZip tmpIter[314909]))
        Defer
        {
          {(315106 call _freeIterator _iterator[315067])
          }
        }
        { scopeless type(315081 'move' _indexOfInterest[315066](315078 call iteratorIndex _iterator[315067]))
        }
        ForLoop
        {(315086 call _check_tuple_var_decl _indexOfInterest[315066] 2) unknown locDom[315092] "coforall index var" "index var" "insert auto destroy"(315094 'move' locDom[315092](315090 call _indexOfInterest[315066] 1)) unknown localeIndex[315099] "coforall index var" "index var" "insert auto destroy"(315101 'move' localeIndex[315099](315097 call _indexOfInterest[315066] 2))(315113 call _upEndCount _coforallCount[315058] 1)
          {
            { const tmp[314902] "const" "temp"(314903 'move' tmp[314902](314900 'deref'(314899 '_wide_get_locale' locDom[315092])))
              {
                { unknown _indexOfInterest[314864] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[314865] "expr temp" "temp"(314874 'move' _iterator[314865](314872 call _getIterator(314855 call(314850 call .(314847 call . locDom[315092] c"mySparseBlock") c"these") tag[314820])))
                  Defer
                  {
                    {(314891 call _freeIterator _iterator[314865])
                    }
                  }
                  { scopeless type(314880 'move' _indexOfInterest[314864](314877 call iteratorIndex _iterator[314865]))
                  }
                  ForLoop
                  { unknown followThis[314884] "index var" "insert auto destroy"(314886 'move' followThis[314884] _indexOfInterest[314864])
                    {(314861 yield(314859 call _build_tuple followThis[314884] localeIndex[315099]))
                    } label _continueLabel[314869] _indexOfInterest[314864] _iterator[314865]
                  } label _breakLabel[314870]
                }
              }
            }(315061 call _downEndCount _coforallCount[315058] nil[38])(315060 'coforall loop')
          } label _continueLabel[315071] _indexOfInterest[315066] _iterator[315067]
        } label _breakLabel[315072]
        Defer
        {
          {(315117 call _endCountFree _coforallCount[315058])
          }
        }(315122 call _waitEndCount _coforallCount[315058] 1)
      }
    }
  }
  {(314830 call == tag[314820] leader[691])
  } function SparseBlockDom[315833](?).these[315161](arg _mt[315897]:_MT[227], arg this[315895]:SparseBlockDom[315833](?), param arg tag[315158] : iterKind[697], arg followThis[315163]:_any[170](?)) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[315178] "no auto destroy" "no copy" "temp" followThis[315163](315185 call _check_tuple_var_decl tmp[315178] 2) unknown locFollowThis[315172](315179 call tmp[315178] 1) unknown localeIndex[315174](315182 call tmp[315178] 2)
    { unknown _indexOfInterest[315206] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315207] "expr temp" "temp"(315216 'move' _iterator[315207](315214 call _getIterator(315202 call(315196 call .(315195 call locFollowThis[315172] 1) c"these") tag[315158] locFollowThis[315172])))
      Defer
      {
        {(315233 call _freeIterator _iterator[315207])
        }
      }
      { scopeless type(315222 'move' _indexOfInterest[315206](315219 call iteratorIndex _iterator[315207]))
      }
      ForLoop
      { unknown i[315226] "index var" "insert auto destroy"(315228 'move' i[315226] _indexOfInterest[315206])(315204 yield i[315226]) label _continueLabel[315211] _indexOfInterest[315206] _iterator[315207]
      } label _breakLabel[315212]
    }
  }
  {(315170 call == tag[315158] follower[693])
  } function SparseBlockDom[315833](?).these[315249](arg _mt[315901]:_MT[227], arg this[315899]:SparseBlockDom[315833](?), param arg tag[315246] : iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[315306] "expr temp" "maybe ref" "no copy" "temp"(315309 'move' tmpIter[315306](385814 call . this[315899] c"locDoms")) unknown isRngDomArr[315464] "maybe param" "temp"(315479 'move' isRngDomArr[315464](315477 call ||(315466 call isBoundedRange tmpIter[315306])(315475 call ||(315469 call isDomain tmpIter[315306])(315472 call isArray tmpIter[315306]))))
      if isRngDomArr[315464]
      { const _coforallCount[315331] "const" "end count" "temp"(315400 'move' _coforallCount[315331](315397 call _endCountAlloc 1)) unknown numTasks[315332] "temp"(315384 'move' numTasks[315332](315380 call . tmpIter[315306] c"size"))(315375 call _upEndCount _coforallCount[315331] 1 numTasks[315332])(315372 call chpl_resetTaskSpawn numTasks[315332]) unknown _indexOfInterest[315339] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315340] "expr temp" "temp"(315349 'move' _iterator[315340](315347 call _getIterator tmpIter[315306]))
        Defer
        {
          {(315365 call _freeIterator _iterator[315340])
          }
        }
        { scopeless type(315354 'move' _indexOfInterest[315339](315351 call iteratorIndex _iterator[315340]))
        }
        ForLoop
        { unknown locDom[315358] "coforall index var" "index var" "insert auto destroy"(315360 'move' locDom[315358] _indexOfInterest[315339])
          {
            { const tmp[315312] "const" "temp"(315314 'move' tmp[315312](315316 'deref'(315317 '_wide_get_locale' locDom[315358])))
              {
                Forall {
                  induction variables:
                    unknown i[315324] "index var" "insert auto destroy"
                  iterated expressions:
                    (315327 call . locDom[315358] c"mySparseBlock")
                  shadow variables:
                  forall body
                  {(315321 yield i[315324])
                  }
                }
              }
            }(315334 call _downEndCount _coforallCount[315331] nil[38])(315333 'coforall loop')
          } label _continueLabel[315344] _indexOfInterest[315339] _iterator[315340]
        } label _breakLabel[315345]
        Defer
        {
          {(315387 call _endCountFree _coforallCount[315331])
          }
        }(315392 call _waitEndCount _coforallCount[315331] 1 numTasks[315332])
      }
      { const _coforallCount[315404] "const" "end count" "temp"(315461 'move' _coforallCount[315404](315458 call _endCountAlloc 1)) unknown _indexOfInterest[315412] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315413] "expr temp" "temp"(315422 'move' _iterator[315413](315420 call _getIterator tmpIter[315306]))
        Defer
        {
          {(315438 call _freeIterator _iterator[315413])
          }
        }
        { scopeless type(315427 'move' _indexOfInterest[315412](315424 call iteratorIndex _iterator[315413]))
        }
        ForLoop
        { unknown locDom[315431] "coforall index var" "index var" "insert auto destroy"(315433 'move' locDom[315431] _indexOfInterest[315412])(315445 call _upEndCount _coforallCount[315404] 1)
          {
            { const tmp[315300] "const" "temp"(315301 'move' tmp[315300](315298 'deref'(315297 '_wide_get_locale' locDom[315431])))
              {
                Forall {
                  induction variables:
                    unknown i[315293] "index var" "insert auto destroy"
                  iterated expressions:
                    (315285 call . locDom[315431] c"mySparseBlock")
                  shadow variables:
                  forall body
                  {(315289 yield i[315293])
                  }
                }
              }
            }(315407 call _downEndCount _coforallCount[315404] nil[38])(315406 'coforall loop')
          } label _continueLabel[315417] _indexOfInterest[315412] _iterator[315413]
        } label _breakLabel[315418]
        Defer
        {
          {(315449 call _endCountFree _coforallCount[315404])
          }
        }(315454 call _waitEndCount _coforallCount[315404] 1)
      }
    }
  }
  {(315278 call &&(315256 call == tag[315246] standalone[695])(315277 'method call resolves'(315272 call .(315269 call .(315268 call(385803 call . this[315899] c"locDoms")(315266 call createTuple(385808 call . this[315899] c"rank") int(64)[13] 0)) c"mySparseBlock") c"_value") "these" tag[315246]))
  } function SparseBlockDom[315833](?).dsiMember[315491](arg _mt[315905]:_MT[227], arg this[315903]:SparseBlockDom[315833](?), arg ind[315489]:_any[170](?)) : _unknown[43] "method" "primary method"
  { unknown _retval[315496] 0 bool[10]
    { const tmp[315531] "const" "temp"(315532 'move' tmp[315531](315529 'deref'(315528 '_wide_get_locale'(315506 call(315501 call .(385825 call . this[315903] c"dist") c"dsiIndexToLocale") ind[315489]))))
      {(315524 call = _retval[315496](315523 call(315518 call .(315517 call(385832 call . this[315903] c"locDoms")(315515 call(315510 call .(385837 call . this[315903] c"dist") c"targetLocsIdx") ind[315489])) c"dsiMember") ind[315489]))
      }
    }(315537 return _retval[315496])
  }
  { scopeless type bool[10]
  } function SparseBlockDom[315833](?).dsiClear[315544](arg _mt[315909]:_MT[227], arg this[315907]:SparseBlockDom[315833](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[315564] "expr temp" "maybe ref" "no copy" "temp"(315567 'move' tmpIter[315564](385845 call . this[315907] c"locDoms")) unknown isRngDomArr[315717] "maybe param" "temp"(315732 'move' isRngDomArr[315717](315730 call ||(315719 call isBoundedRange tmpIter[315564])(315728 call ||(315722 call isDomain tmpIter[315564])(315725 call isArray tmpIter[315564]))))
      if isRngDomArr[315717]
      { const _coforallCount[315584] "const" "end count" "temp"(315653 'move' _coforallCount[315584](315650 call _endCountAlloc 1)) unknown numTasks[315585] "temp"(315637 'move' numTasks[315585](315633 call . tmpIter[315564] c"size"))(315628 call _upEndCount _coforallCount[315584] 1 numTasks[315585])(315625 call chpl_resetTaskSpawn numTasks[315585]) unknown _indexOfInterest[315592] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315593] "expr temp" "temp"(315602 'move' _iterator[315593](315600 call _getIterator tmpIter[315564]))
        Defer
        {
          {(315618 call _freeIterator _iterator[315593])
          }
        }
        { scopeless type(315607 'move' _indexOfInterest[315592](315604 call iteratorIndex _iterator[315593]))
        }
        ForLoop
        { unknown locDom[315611] "coforall index var" "index var" "insert auto destroy"(315613 'move' locDom[315611] _indexOfInterest[315592])
          {
            { const tmp[315570] "const" "temp"(315572 'move' tmp[315570](315574 'deref'(315575 '_wide_get_locale' locDom[315611])))(315582 call(315579 call . locDom[315611] c"dsiClear"))
            }(315587 call _downEndCount _coforallCount[315584] nil[38])(315586 'coforall loop')
          } label _continueLabel[315597] _indexOfInterest[315592] _iterator[315593]
        } label _breakLabel[315598]
        Defer
        {
          {(315640 call _endCountFree _coforallCount[315584])
          }
        }(315645 call _waitEndCount _coforallCount[315584] 1 numTasks[315585])
      }
      { const _coforallCount[315657] "const" "end count" "temp"(315714 'move' _coforallCount[315657](315711 call _endCountAlloc 1)) unknown _indexOfInterest[315665] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315666] "expr temp" "temp"(315675 'move' _iterator[315666](315673 call _getIterator tmpIter[315564]))
        Defer
        {
          {(315691 call _freeIterator _iterator[315666])
          }
        }
        { scopeless type(315680 'move' _indexOfInterest[315665](315677 call iteratorIndex _iterator[315666]))
        }
        ForLoop
        { unknown locDom[315684] "coforall index var" "index var" "insert auto destroy"(315686 'move' locDom[315684] _indexOfInterest[315665])(315698 call _upEndCount _coforallCount[315657] 1)
          {
            { const tmp[315559] "const" "temp"(315560 'move' tmp[315559](315557 'deref'(315556 '_wide_get_locale' locDom[315684])))(315554 call(315550 call . locDom[315684] c"dsiClear"))
            }(315660 call _downEndCount _coforallCount[315657] nil[38])(315659 'coforall loop')
          } label _continueLabel[315670] _indexOfInterest[315665] _iterator[315666]
        } label _breakLabel[315671]
        Defer
        {
          {(315702 call _endCountFree _coforallCount[315657])
          }
        }(315707 call _waitEndCount _coforallCount[315657] 1)
      }
    }
  } function SparseBlockDom[315833](?).dsiMyDist[315741](arg _mt[315913]:_MT[227], arg this[315911]:SparseBlockDom[315833](?)) : _unknown[43] "method" "primary method" "method overrides"
  {(315744 return(385854 call . this[315911] c"dist"))
  } function SparseBlockDom[315833](?).dsiAssignDomain[315755](arg _mt[315917]:_MT[227], arg this[315915]:SparseBlockDom[315833](?), arg rhs[315752] : _domain[123390](?), arg lhsPrivate[315758] : bool[10]) : _unknown[43] "method" "primary method" "no return value for void"
  {
    if(315784 call _cond_test(315762 call ! lhsPrivate[315758]))
    {(315782 call halt "SparseBlock domain assignment not yet supported")
    }
    { unknown _indexOfInterest[315797] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[315798] "expr temp" "temp"(315807 'move' _iterator[315798](315805 call _getIterator rhs[315752]))
      Defer
      {
        {(315823 call _freeIterator _iterator[315798])
        }
      }
      { scopeless type(315812 'move' _indexOfInterest[315797](315809 call iteratorIndex _iterator[315798]))
      }
      ForLoop
      { unknown i[315816] "index var" "insert auto destroy"(315818 'move' i[315816] _indexOfInterest[315797])(315795 call(385861 call . this[315915] c"dsiAdd") i[315816]) label _continueLabel[315802] _indexOfInterest[315797] _iterator[315798]
      } label _breakLabel[315803]
    }
  } type SparseBlockDom[315833](?) val super[331147]:BaseSparseDomImpl[144471](?) "super class" unknown sparseLayoutType[313092] "type variable" unknown stridable[313097] "param" 0 bool[10] const dist[313107] "const"(313106 'to unmanaged class from unknown'(313105 call anymanaged Block[381982](?) rank[144716] idxType[144719] sparseLayoutType[313092])) unknown whole[313120](313118 call chpl__buildDomainRuntimeType defaultDist[93214](rank = rank[144716])(idxType = idxType[144719])(stridable = stridable[313097])) unknown locDoms[313140](313138 call chpl__buildArrayRuntimeType(313136 call chpl__ensureDomainExpr(313124 call . dist[313107] c"targetLocDom"))(313135 'to unmanaged class from unknown'(313134 call anymanaged LocSparseBlockDom[385287](?) rank[144716] idxType[144719] stridable[313097] sparseLayoutType[313092]))) unknown myLocDom[313152](313151 'to unmanaged class from unknown'(313150 'to nilable class from type'(313149 call anymanaged LocSparseBlockDom[385287](?) rank[144716] idxType[144719] stridable[313097] sparseLayoutType[313092]))) type anymanaged SparseBlockDom[382401](?) function LocSparseBlockDom[316081](?).dsiAdd[315994](arg _mt[316085]:_MT[227], arg this[316083]:LocSparseBlockDom[316081](?), arg ind[315991] :(315989 call *(385879 call . this[316083] c"rank")(385884 call . this[316083] c"idxType"))) : _unknown[43] "method" "primary method"
  {(316003 return(316002 call(315997 call .(385889 call . this[316083] c"mySparseBlock") c"add") ind[315991]))
  } function LocSparseBlockDom[316081](?).dsiMember[316017](arg _mt[316089]:_MT[227], arg this[316087]:LocSparseBlockDom[316081](?), arg ind[316014] :(316012 call *(385895 call . this[316087] c"rank")(385900 call . this[316087] c"idxType"))) : _unknown[43] "method" "primary method"
  {(316026 return(316025 call(316020 call .(385905 call . this[316087] c"mySparseBlock") c"contains") ind[316014]))
  } function LocSparseBlockDom[316081](?).dsiClear[316033](arg _mt[316093]:_MT[227], arg this[316091]:LocSparseBlockDom[316081](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {(316040 call(316036 call .(385911 call . this[316091] c"mySparseBlock") c"clear"))
  } function LocSparseBlockDom[316081](?).dsiSerialWrite[316049](arg _mt[316097]:_MT[227], arg this[316095]:LocSparseBlockDom[316081](?), arg w[316047]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {(316062 call(316055 call .(316052 call .(385916 call . this[316095] c"mySparseBlock") c"_value") c"dsiSerialWrite") w[316047](printBrackets = 0))
  } function LocSparseBlockDom[316081](?).dsiNumIndices[316069](arg _mt[316101]:_MT[227], arg this[316099]:LocSparseBlockDom[316081](?)) : _unknown[43] "method" "primary method" "no parens"
  {(316075 return(316072 call .(385922 call . this[316099] c"mySparseBlock") c"numIndices"))
  } type LocSparseBlockDom[316081](?) val super[331149]:object[253] "super class" unknown rank[315922] "param" int(64)[13] unknown idxType[315925] "type variable" unknown stridable[315929] "param" bool[10] unknown sparseLayoutType[315932] "type variable" unknown parentDom[315942](315940 call chpl__buildDomainRuntimeType defaultDist[93214] rank[315922] idxType[315925] stridable[315929]) unknown sparseDist[315965](315962 IfExpr (329243 'is_subtype' anymanaged DefaultDist[345861](?)(315949 call _to_nonnil sparseLayoutType[315932])) then
  { scopeless defaultDist[93214]
  } else
  { scopeless(315961 'new'(315960 call dmap[115943](315958 'new'(315957 call sparseLayoutType[315932]))))
  } ) unknown mySparseBlock[315982](315980 call chpl__distributed sparseDist[315965](315977 call chpl__buildSparseDomainRuntimeType(315974 call . parentDom[315942] c"defaultSparseDist") parentDom[315942])) type anymanaged LocSparseBlockDom[385287](?) function SparseBlockArr[317564](?).init[316160](arg _mt[317568]:_MT[227], arg this[317566]:SparseBlockArr[317564](?), arg eltType[316158]:_any[170](?), param arg rank[316162]:_any[170](?), arg idxType[316164]:_any[170](?), param arg stridable[316166]:_any[170](?), arg sparseLayoutType[316168]:_any[170](?), arg dom[316170]:_any[170](?)) : _unknown[43] "method" "primary method" "no return value for void"
  {(316185 call(316173 call .(385947 call . this[317566] c"super") c"init")(eltType = eltType[316158])(rank = rank[316162])(idxType = idxType[316164])(dom = dom[316170]))(316193 call =(316189 call . this[317566] c"stridable") stridable[316166])(316201 call =(316197 call . this[317566] c"sparseLayoutType") sparseLayoutType[316168])(316212 call =(385962 call . this[317566] c"locArrDom")(316209 call .(316206 call . dom[316170] c"dist") c"targetLocDom"))
  } function SparseBlockArr[317564](?).setup[316219](arg _mt[317572]:_MT[227], arg this[317570]:SparseBlockArr[317564](?)) : _unknown[43] "method" "primary method" "no return value for void"
  { unknown thisid[316226](316225 '_wide_get_node' this[317570])
    { unknown tmpIter[316306] "expr temp" "maybe ref" "no copy" "temp"(316309 'move' tmpIter[316306](316235 call .(316232 call .(385969 call . this[317570] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[316503] "maybe param" "temp"(316518 'move' isRngDomArr[316503](316516 call ||(316505 call isBoundedRange tmpIter[316306])(316514 call ||(316508 call isDomain tmpIter[316306])(316511 call isArray tmpIter[316306]))))
      if isRngDomArr[316503]
      { const _coforallCount[316370] "const" "end count" "temp"(316439 'move' _coforallCount[316370](316436 call _endCountAlloc 1)) unknown numTasks[316371] "temp"(316423 'move' numTasks[316371](316419 call . tmpIter[316306] c"size"))(316414 call _upEndCount _coforallCount[316370] 1 numTasks[316371])(316411 call chpl_resetTaskSpawn numTasks[316371]) unknown _indexOfInterest[316378] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316379] "expr temp" "temp"(316388 'move' _iterator[316379](316386 call _getIterator tmpIter[316306]))
        Defer
        {
          {(316404 call _freeIterator _iterator[316379])
          }
        }
        { scopeless type(316393 'move' _indexOfInterest[316378](316390 call iteratorIndex _iterator[316379]))
        }
        ForLoop
        { unknown localeIdx[316397] "coforall index var" "index var" "insert auto destroy"(316399 'move' localeIdx[316397] _indexOfInterest[316378])
          {
            { const tmp[316312] "const" "temp"(316314 'move' tmp[316312](316316 'deref'(316317 '_wide_get_locale'(316325 call(316319 call .(316321 call .(386033 call . this[317570] c"dom") c"dist") c"targetLocales") localeIdx[316397]))))
              { const locDom[316328] "const"(316333 call(316330 call .(386039 call . this[317570] c"dom") c"getLocDom") localeIdx[316397])(316337 call =(316339 call(386045 call . this[317570] c"locArr") localeIdx[316397])(316341 'new'(316342 'to unmanaged class from unknown'(316344 call anymanaged LocSparseBlockArr[385931](?)(386052 call . this[317570] c"eltType")(386057 call . this[317570] c"rank")(386062 call . this[317570] c"idxType")(386067 call . this[317570] c"stridable")(386072 call . this[317570] c"sparseLayoutType") locDom[316328]))))
                if(316352 call _cond_test(316354 call == thisid[316226](316357 call .(386077 call here[92085]) c"id")))
                {(316363 call =(386081 call . this[317570] c"myLocArr")(316366 call(386086 call . this[317570] c"locArr") localeIdx[316397]))
                }
              }
            }(316373 call _downEndCount _coforallCount[316370] nil[38])(316372 'coforall loop')
          } label _continueLabel[316383] _indexOfInterest[316378] _iterator[316379]
        } label _breakLabel[316384]
        Defer
        {
          {(316426 call _endCountFree _coforallCount[316370])
          }
        }(316431 call _waitEndCount _coforallCount[316370] 1 numTasks[316371])
      }
      { const _coforallCount[316443] "const" "end count" "temp"(316500 'move' _coforallCount[316443](316497 call _endCountAlloc 1)) unknown _indexOfInterest[316451] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316452] "expr temp" "temp"(316461 'move' _iterator[316452](316459 call _getIterator tmpIter[316306]))
        Defer
        {
          {(316477 call _freeIterator _iterator[316452])
          }
        }
        { scopeless type(316466 'move' _indexOfInterest[316451](316463 call iteratorIndex _iterator[316452]))
        }
        ForLoop
        { unknown localeIdx[316470] "coforall index var" "index var" "insert auto destroy"(316472 'move' localeIdx[316470] _indexOfInterest[316451])(316484 call _upEndCount _coforallCount[316443] 1)
          {
            { const tmp[316300] "const" "temp"(316301 'move' tmp[316300](316298 'deref'(316297 '_wide_get_locale'(316247 call(316242 call .(316239 call .(385974 call . this[317570] c"dom") c"dist") c"targetLocales") localeIdx[316470]))))
              { const locDom[316255] "const"(316254 call(316249 call .(385980 call . this[317570] c"dom") c"getLocDom") localeIdx[316470])(316274 call =(316262 call(385986 call . this[317570] c"locArr") localeIdx[316470])(316273 'new'(316272 'to unmanaged class from unknown'(316271 call anymanaged LocSparseBlockArr[385931](?)(385993 call . this[317570] c"eltType")(385998 call . this[317570] c"rank")(386003 call . this[317570] c"idxType")(386008 call . this[317570] c"stridable")(386013 call . this[317570] c"sparseLayoutType") locDom[316255]))))
                if(316292 call _cond_test(316282 call == thisid[316226](316279 call .(386018 call here[92085]) c"id")))
                {(316289 call =(386022 call . this[317570] c"myLocArr")(316288 call(386027 call . this[317570] c"locArr") localeIdx[316470]))
                }
              }
            }(316446 call _downEndCount _coforallCount[316443] nil[38])(316445 'coforall loop')
          } label _continueLabel[316456] _indexOfInterest[316451] _iterator[316452]
        } label _breakLabel[316457]
        Defer
        {
          {(316488 call _endCountFree _coforallCount[316443])
          }
        }(316493 call _waitEndCount _coforallCount[316443] 1)
      }
    }
  } function SparseBlockArr[317564](?).dsiDestroyArr[316526](arg _mt[317576]:_MT[227], arg this[317574]:SparseBlockArr[317564](?)) : _unknown[43] "method" "primary method" "method overrides" "no return value for void"
  {
    { unknown tmpIter[316558] "expr temp" "maybe ref" "no copy" "temp"(316561 'move' tmpIter[316558](316533 call .(316530 call .(386092 call . this[317574] c"dom") c"dist") c"targetLocDom")) unknown isRngDomArr[316713] "maybe param" "temp"(316728 'move' isRngDomArr[316713](316726 call ||(316715 call isBoundedRange tmpIter[316558])(316724 call ||(316718 call isDomain tmpIter[316558])(316721 call isArray tmpIter[316558]))))
      if isRngDomArr[316713]
      { const _coforallCount[316580] "const" "end count" "temp"(316649 'move' _coforallCount[316580](316646 call _endCountAlloc 1)) unknown numTasks[316581] "temp"(316633 'move' numTasks[316581](316629 call . tmpIter[316558] c"size"))(316624 call _upEndCount _coforallCount[316580] 1 numTasks[316581])(316621 call chpl_resetTaskSpawn numTasks[316581]) unknown _indexOfInterest[316588] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316589] "expr temp" "temp"(316598 'move' _iterator[316589](316596 call _getIterator tmpIter[316558]))
        Defer
        {
          {(316614 call _freeIterator _iterator[316589])
          }
        }
        { scopeless type(316603 'move' _indexOfInterest[316588](316600 call iteratorIndex _iterator[316589]))
        }
        ForLoop
        { unknown localeIdx[316607] "coforall index var" "index var" "insert auto destroy"(316609 'move' localeIdx[316607] _indexOfInterest[316588])
          {
            { const tmp[316564] "const" "temp"(316566 'move' tmp[316564](316568 'deref'(316569 '_wide_get_locale'(316571 call(386109 call . this[317574] c"locArr") localeIdx[316607]))))
              {(316575 call chpl__delete(316577 call(386115 call . this[317574] c"locArr") localeIdx[316607]))
              }
            }(316583 call _downEndCount _coforallCount[316580] nil[38])(316582 'coforall loop')
          } label _continueLabel[316593] _indexOfInterest[316588] _iterator[316589]
        } label _breakLabel[316594]
        Defer
        {
          {(316636 call _endCountFree _coforallCount[316580])
          }
        }(316641 call _waitEndCount _coforallCount[316580] 1 numTasks[316581])
      }
      { const _coforallCount[316653] "const" "end count" "temp"(316710 'move' _coforallCount[316653](316707 call _endCountAlloc 1)) unknown _indexOfInterest[316661] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316662] "expr temp" "temp"(316671 'move' _iterator[316662](316669 call _getIterator tmpIter[316558]))
        Defer
        {
          {(316687 call _freeIterator _iterator[316662])
          }
        }
        { scopeless type(316676 'move' _indexOfInterest[316661](316673 call iteratorIndex _iterator[316662]))
        }
        ForLoop
        { unknown localeIdx[316680] "coforall index var" "index var" "insert auto destroy"(316682 'move' localeIdx[316680] _indexOfInterest[316661])(316694 call _upEndCount _coforallCount[316653] 1)
          {
            { const tmp[316552] "const" "temp"(316553 'move' tmp[316552](316550 'deref'(316549 '_wide_get_locale'(316539 call(386097 call . this[317574] c"locArr") localeIdx[316680]))))
              {(316545 call chpl__delete(316543 call(386103 call . this[317574] c"locArr") localeIdx[316680]))
              }
            }(316656 call _downEndCount _coforallCount[316653] nil[38])(316655 'coforall loop')
          } label _continueLabel[316666] _indexOfInterest[316661] _iterator[316662]
        } label _breakLabel[316667]
        Defer
        {
          {(316698 call _endCountFree _coforallCount[316653])
          }
        }(316703 call _waitEndCount _coforallCount[316653] 1)
      }
    }
  } function SparseBlockArr[317564](?).these[316737](arg _mt[317580]:_MT[227], arg this[317578]:SparseBlockArr[317564](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[316814] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316815] "expr temp" "temp"(316824 'move' _iterator[316815](316822 call _getIterator(316744 call .(316741 call .(386121 call . this[317578] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(316841 call _freeIterator _iterator[316815])
        }
      }
      { scopeless type(316830 'move' _indexOfInterest[316814](316827 call iteratorIndex _iterator[316815]))
      }
      ForLoop
      { unknown locI[316834] "index var" "insert auto destroy"(316836 'move' locI[316834] _indexOfInterest[316814])
        { unknown locDom[316754](316753 call(316748 call .(386126 call . this[317578] c"dom") c"locDoms") locI[316834]) unknown locArrI[316762](316761 call(386132 call . this[317578] c"locArr") locI[316834])
          { unknown _indexOfInterest[316780] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316781] "expr temp" "temp"(316790 'move' _iterator[316781](316788 call _getIterator(316767 call . locDom[316754] c"mySparseBlock")))
            Defer
            {
              {(316807 call _freeIterator _iterator[316781])
              }
            }
            { scopeless type(316796 'move' _indexOfInterest[316780](316793 call iteratorIndex _iterator[316781]))
            }
            ForLoop
            { unknown x[316800] "index var" "insert auto destroy"(316802 'move' x[316800] _indexOfInterest[316780])
              {(316777 yield(316776 call(316771 call . locArrI[316762] c"myElems") x[316800]))
              } label _continueLabel[316785] _indexOfInterest[316780] _iterator[316781]
            } label _breakLabel[316786]
          }
        } label _continueLabel[316819] _indexOfInterest[316814] _iterator[316815]
      } label _breakLabel[316820]
    }
  } function SparseBlockArr[317564](?).these[316857](arg _mt[317584]:_MT[227], arg this[317582]:SparseBlockArr[317564](?), param arg tag[316854] : iterKind[697]) : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown _indexOfInterest[316877] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316878] "expr temp" "temp"(316887 'move' _iterator[316878](316885 call _getIterator(316873 call(316868 call .(386144 call . this[317582] c"dom") c"these") tag[316854])))
      Defer
      {
        {(316904 call _freeIterator _iterator[316878])
        }
      }
      { scopeless type(316893 'move' _indexOfInterest[316877](316890 call iteratorIndex _iterator[316878]))
      }
      ForLoop
      { unknown followThis[316897] "index var" "insert auto destroy"(316899 'move' followThis[316897] _indexOfInterest[316877])(316875 yield followThis[316897]) label _continueLabel[316882] _indexOfInterest[316877] _iterator[316878]
      } label _breakLabel[316883]
    }
  }
  {(316864 call == tag[316854] leader[691])
  } function SparseBlockArr[317564](?).these[316921](arg _mt[317588]:_MT[227], arg this[317586]:SparseBlockArr[317564](?), param arg tag[316918] : iterKind[697], arg followThis[316923]:_any[170](?)) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  { unknown tmp[316938] "no auto destroy" "no copy" "temp" followThis[316923](316945 call _check_tuple_var_decl tmp[316938] 2) unknown locFollowThis[316932](316939 call tmp[316938] 1) unknown localeIndex[316934](316942 call tmp[316938] 2)
    { unknown _indexOfInterest[316976] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[316977] "expr temp" "temp"(316986 'move' _iterator[316977](316984 call _getIterator(316962 call(316956 call .(316955 call locFollowThis[316932] 1) c"these") tag[316918] locFollowThis[316932])))
      Defer
      {
        {(317003 call _freeIterator _iterator[316977])
        }
      }
      { scopeless type(316992 'move' _indexOfInterest[316976](316989 call iteratorIndex _iterator[316977]))
      }
      ForLoop
      { unknown i[316996] "index var" "insert auto destroy"(316998 'move' i[316996] _indexOfInterest[316976])
        {(316973 yield(316972 call(316967 call .(316966 call(386158 call . this[317586] c"locArr") localeIndex[316934]) c"dsiAccess") i[316996]))
        } label _continueLabel[316981] _indexOfInterest[316976] _iterator[316977]
      } label _breakLabel[316982]
    }
  }
  {(316930 call == tag[316918] follower[693])
  } function SparseBlockArr[317564](?).these[317019](arg _mt[317592]:_MT[227], arg this[317590]:SparseBlockArr[317564](?), param arg tag[317016] : iterKind[697]) ref : _unknown[43] "iterator fn" "method" "primary method" "no return value for void"
  {
    { unknown tmpIter[317073] "expr temp" "maybe ref" "no copy" "temp"(317076 'move' tmpIter[317073](386179 call . this[317590] c"locArr")) unknown isRngDomArr[317231] "maybe param" "temp"(317246 'move' isRngDomArr[317231](317244 call ||(317233 call isBoundedRange tmpIter[317073])(317242 call ||(317236 call isDomain tmpIter[317073])(317239 call isArray tmpIter[317073]))))
      if isRngDomArr[317231]
      { const _coforallCount[317098] "const" "end count" "temp"(317167 'move' _coforallCount[317098](317164 call _endCountAlloc 1)) unknown numTasks[317099] "temp"(317151 'move' numTasks[317099](317147 call . tmpIter[317073] c"size"))(317142 call _upEndCount _coforallCount[317098] 1 numTasks[317099])(317139 call chpl_resetTaskSpawn numTasks[317099]) unknown _indexOfInterest[317106] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317107] "expr temp" "temp"(317116 'move' _iterator[317107](317114 call _getIterator tmpIter[317073]))
        Defer
        {
          {(317132 call _freeIterator _iterator[317107])
          }
        }
        { scopeless type(317121 'move' _indexOfInterest[317106](317118 call iteratorIndex _iterator[317107]))
        }
        ForLoop
        { unknown locA[317125] "coforall index var" "index var" "insert auto destroy"(317127 'move' locA[317125] _indexOfInterest[317106])
          {
            { const tmp[317079] "const" "temp"(317081 'move' tmp[317079](317083 'deref'(317084 '_wide_get_locale' locA[317125])))
              {
                Forall {
                  induction variables:
                    unknown i[317091] "index var" "insert auto destroy"
                  iterated expressions:
                    (317094 call . locA[317125] c"myElems")
                  shadow variables:
                  forall body
                  {(317088 yield i[317091])
                  }
                }
              }
            }(317101 call _downEndCount _coforallCount[317098] nil[38])(317100 'coforall loop')
          } label _continueLabel[317111] _indexOfInterest[317106] _iterator[317107]
        } label _breakLabel[317112]
        Defer
        {
          {(317154 call _endCountFree _coforallCount[317098])
          }
        }(317159 call _waitEndCount _coforallCount[317098] 1 numTasks[317099])
      }
      { const _coforallCount[317171] "const" "end count" "temp"(317228 'move' _coforallCount[317171](317225 call _endCountAlloc 1)) unknown _indexOfInterest[317179] "coforall index var" "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317180] "expr temp" "temp"(317189 'move' _iterator[317180](317187 call _getIterator tmpIter[317073]))
        Defer
        {
          {(317205 call _freeIterator _iterator[317180])
          }
        }
        { scopeless type(317194 'move' _indexOfInterest[317179](317191 call iteratorIndex _iterator[317180]))
        }
        ForLoop
        { unknown locA[317198] "coforall index var" "index var" "insert auto destroy"(317200 'move' locA[317198] _indexOfInterest[317179])(317212 call _upEndCount _coforallCount[317171] 1)
          {
            { const tmp[317068] "const" "temp"(317069 'move' tmp[317068](317066 'deref'(317065 '_wide_get_locale' locA[317198])))
              {
                Forall {
                  induction variables:
                    unknown i[317061] "index var" "insert auto destroy"
                  iterated expressions:
                    (317053 call . locA[317198] c"myElems")
                  shadow variables:
                  forall body
                  {(317057 yield i[317061])
                  }
                }
              }
            }(317174 call _downEndCount _coforallCount[317171] nil[38])(317173 'coforall loop')
          } label _continueLabel[317184] _indexOfInterest[317179] _iterator[317180]
        } label _breakLabel[317185]
        Defer
        {
          {(317216 call _endCountFree _coforallCount[317171])
          }
        }(317221 call _waitEndCount _coforallCount[317171] 1)
      }
    }
  }
  {(317046 call &&(317026 call == tag[317016] standalone[695])(317045 'method call resolves'(317040 call .(317037 call .(317036 call(386168 call . this[317590] c"locArr")(317032 call .(386173 call . this[317590] c"locArrDom") c"low")) c"myElems") c"_value") "these" tag[317016]))
  } function SparseBlockArr[317564](?).dsiAccess[317263](arg _mt[317596]:_MT[227], arg this[317594]:SparseBlockArr[317564](?), arg i[317260] :(317258 call *(386190 call . this[317594] c"rank")(386195 call . this[317594] c"idxType"))) ref : _unknown[43] "method" "primary method"
  {
    {
      if(317298 call _cond_test(317284 call &&(317267 call !=(386200 call . this[317594] c"myLocArr") nil[38])(317283 call(317278 call .(317275 call .(317272 call .(317270 call postfix!(386205 call . this[317594] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[317260])))
      {(317295 return(317294 call(317289 call .(317287 call postfix!(386211 call . this[317594] c"myLocArr")) c"dsiAccess") i[317260]))
      }
    }(317324 return(317323 call(317318 call .(317317 call(386217 call . this[317594] c"locArr")(317315 call(317310 call .(317307 call .(386222 call . this[317594] c"dom") c"dist") c"targetLocsIdx") i[317260])) c"dsiAccess") i[317260]))
  } function SparseBlockArr[317564](?).dsiAccess[317337](arg _mt[317600]:_MT[227], arg this[317598]:SparseBlockArr[317564](?), arg i[317334] :(317332 call *(386229 call . this[317598] c"rank")(386234 call . this[317598] c"idxType"))) : _unknown[43] "method" "primary method"
  {
    {
      if(317376 call _cond_test(317362 call &&(317345 call !=(386244 call . this[317598] c"myLocArr") nil[38])(317361 call(317356 call .(317353 call .(317350 call .(317348 call postfix!(386249 call . this[317598] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[317334])))
      {(317373 return(317372 call(317367 call .(317365 call postfix!(386255 call . this[317598] c"myLocArr")) c"dsiAccess") i[317334]))
      }
    }(317402 return(317401 call(317396 call .(317395 call(386261 call . this[317598] c"locArr")(317393 call(317388 call .(317385 call .(386266 call . this[317598] c"dom") c"dist") c"targetLocsIdx") i[317334])) c"dsiAccess") i[317334]))
  }
  {(317342 call shouldReturnRvalueByValue(386239 call . this[317598] c"eltType"))
  } function SparseBlockArr[317564](?).dsiAccess[317416](arg _mt[317604]:_MT[227], arg this[317602]:SparseBlockArr[317564](?), arg i[317413] :(317411 call *(386273 call . this[317602] c"rank")(386278 call . this[317602] c"idxType"))) const ref : _unknown[43] "method" "primary method"
  {
    {
      if(317455 call _cond_test(317441 call &&(317424 call !=(386288 call . this[317602] c"myLocArr") nil[38])(317440 call(317435 call .(317432 call .(317429 call .(317427 call postfix!(386293 call . this[317602] c"myLocArr")) c"locDom") c"parentDom") c"contains") i[317413])))
      {(317452 return(317451 call(317446 call .(317444 call postfix!(386299 call . this[317602] c"myLocArr")) c"dsiAccess") i[317413]))
      }
    }(317481 return(317480 call(317475 call .(317474 call(386305 call . this[317602] c"locArr")(317472 call(317467 call .(317464 call .(386310 call . this[317602] c"dom") c"dist") c"targetLocsIdx") i[317413])) c"dsiAccess") i[317413]))
  }
  {(317421 call shouldReturnRvalueByConstRef(386283 call . this[317602] c"eltType"))
  } function SparseBlockArr[317564](?).dsiAccess[317494](arg _mt[317608]:_MT[227], arg this[317606]:SparseBlockArr[317564](?), arg i[317490] ... :(386317 call . this[317606] c"idxType")) ref : _unknown[43] "method" "primary method"
  {(317500 return(317499 call(386326 call . this[317606] c"dsiAccess") i[317490]))
  } function SparseBlockArr[317564](?).dsiAccess[317513](arg _mt[317612]:_MT[227], arg this[317610]:SparseBlockArr[317564](?), arg i[317509] ... :(386332 call . this[317610] c"idxType")) : _unknown[43] "method" "primary method"
  {(317523 return(317522 call(386346 call . this[317610] c"dsiAccess") i[317509]))
  }
  {(317518 call shouldReturnRvalueByValue(386342 call . this[317610] c"eltType"))
  } function SparseBlockArr[317564](?).dsiAccess[317537](arg _mt[317616]:_MT[227], arg this[317614]:SparseBlockArr[317564](?), arg i[317533] ... :(386352 call . this[317614] c"idxType")) const ref : _unknown[43] "method" "primary method"
  {(317547 return(317546 call(386366 call . this[317614] c"dsiAccess") i[317533]))
  }
  {(317542 call shouldReturnRvalueByConstRef(386362 call . this[317614] c"eltType"))
  } function SparseBlockArr[317564](?).dsiGetBaseDom[317555](arg _mt[317620]:_MT[227], arg this[317618]:SparseBlockArr[317564](?)) : _unknown[43] "method" "primary method" "method overrides"
  {(317558 return(386372 call . this[317618] c"dom"))
  } type SparseBlockArr[317564](?) val super[331151]:BaseSparseArr[146286](?) "super class" unknown stridable[316108] "param" bool[10] unknown sparseLayoutType[316113] "type variable" unmanaged DefaultDist[389849] unknown locArrDom[316122](316120 call chpl__buildDomainRuntimeType defaultDist[93214] rank[146244] idxType[146247]) unknown locArr[316140](316138 call chpl__buildArrayRuntimeType(316136 call chpl__ensureDomainExpr locArrDom[316122])(316135 'to unmanaged class from unknown'(316134 call anymanaged LocSparseBlockArr[385931](?) eltType[146044] rank[146244] idxType[146247] stridable[316108] sparseLayoutType[316113]))) unknown myLocArr[316153](316152 'to unmanaged class from unknown'(316151 'to nilable class from type'(316150 call anymanaged LocSparseBlockArr[385931](?) eltType[146044] rank[146244] idxType[146247] stridable[316108] sparseLayoutType[316113]))) type anymanaged SparseBlockArr[385727](?) function LocSparseBlockArr[317721](?).dsiAccess[317669](arg _mt[317725]:_MT[227], arg this[317723]:LocSparseBlockArr[317721](?), arg i[317667]:_any[170](?)) ref : _unknown[43] "method" "primary method"
  {(317675 return(317674 call(386384 call . this[317723] c"myElems") i[317667]))
  } function LocSparseBlockArr[317721](?).dsiAccess[317684](arg _mt[317729]:_MT[227], arg this[317727]:LocSparseBlockArr[317721](?), arg i[317682]:_any[170](?)) : _unknown[43] "method" "primary method"
  {(317694 return(317693 call(386395 call . this[317727] c"myElems") i[317682]))
  }
  {(317689 call shouldReturnRvalueByValue(386390 call . this[317727] c"eltType"))
  } function LocSparseBlockArr[317721](?).dsiAccess[317704](arg _mt[317733]:_MT[227], arg this[317731]:LocSparseBlockArr[317721](?), arg i[317702]:_any[170](?)) const ref : _unknown[43] "method" "primary method"
  {(317714 return(317713 call(386406 call . this[317731] c"myElems") i[317702]))
  }
  {(317709 call shouldReturnRvalueByConstRef(386401 call . this[317731] c"eltType"))
  } type LocSparseBlockArr[317721](?) val super[331153]:object[253] "super class" unknown eltType[317624] "type variable" unknown rank[317628] "param" int(64)[13] unknown idxType[317631] "type variable" unknown stridable[317635] "param" bool[10] unknown sparseLayoutType[317638] "type variable" const locDom[317649] "const"(317648 'to unmanaged class from unknown'(317647 call anymanaged LocSparseBlockDom[385287](?) rank[317628] idxType[317631] stridable[317635] sparseLayoutType[317638])) unknown myElems[317662](317660 call chpl__buildArrayRuntimeType(317658 call chpl__ensureDomainExpr(317653 call . locDom[317649] c"mySparseBlock")) eltType[317624]) type anymanaged LocSparseBlockArr[385931](?) function SparseBlockArr[317564](?).dsiSerialWrite[317741](arg _mt[317746]:_MT[227], arg this[317743]:SparseBlockArr[317564](?) : SparseBlockArr[317564](?), arg f[317739]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    if(317845 call _cond_test(317750 call ==(386412 call . this[317743] c"rank") 1))
    {(317754 call <~> f[317739] "[")
      { unknown _indexOfInterest[317786] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[317787] "expr temp" "temp"(317796 'move' _iterator[317787](317794 call _getIterator(386418 call . this[317743] c"locArr")))
        Defer
        {
          {(317812 call _freeIterator _iterator[317787])
          }
        }
        { scopeless type(317801 'move' _indexOfInterest[317786](317798 call iteratorIndex _iterator[317787]))
        }
        ForLoop
        { unknown locarr[317805] "index var" "insert auto destroy"(317807 'move' locarr[317805] _indexOfInterest[317786])
          {
            if(317781 call _cond_test(317764 call .(317761 call . locarr[317805] c"locDom") c"dsiNumIndices"))
            {(317769 call <~> f[317739] " ")(317779 call(317774 call . locarr[317805] c"dsiSerialWrite") f[317739])
            }
          } label _continueLabel[317791] _indexOfInterest[317786] _iterator[317787]
        } label _breakLabel[317792]
      }(317821 call <~> f[317739] "]")
    }
    {(317842 call compilerError "Can't write out multidimensional sparse distributed arrays yet")
    }
  } function LocSparseBlockArr[317721](?).dsiSerialWrite[317857](arg _mt[317862]:_MT[227], arg this[317859]:LocSparseBlockArr[317721](?) : LocSparseBlockArr[317721](?), arg f[317855]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {(317873 call(317868 call .(317865 call .(386428 call . this[317859] c"myElems") c"_value") c"dsiSerialWrite") f[317855])
  } function SparseBlockDom[315833](?).dsiSupportsPrivatization[317881](arg _mt[317886]:_MT[227], arg this[317883]:SparseBlockDom[315833](?) : SparseBlockDom[315833](?)) param : _unknown[43] "method"
  {(317889 return 1)
  } function SparseBlockDom[315833](?).dsiGetPrivatizeData[317897](arg _mt[317902]:_MT[227], arg this[317899]:SparseBlockDom[315833](?) : SparseBlockDom[315833](?)) : _unknown[43] "method"
  {(317917 return(317915 call _build_tuple(317905 call .(386434 call . this[317899] c"dist") c"pid")(317913 call(317909 call .(386439 call . this[317899] c"whole") c"dims"))))
  } function SparseBlockDom[315833](?).dsiPrivatize[317927](arg _mt[317932]:_MT[227], arg this[317929]:SparseBlockDom[315833](?) : SparseBlockDom[315833](?), arg privatizeData[317925]:_any[170](?)) : _unknown[43] "method"
  { unknown privdist[317943](317942 call chpl_getPrivatizedCopy(317936 'typeof'(386444 call . this[317929] c"dist"))(317941 call privatizeData[317925] 1)) unknown c[317969](317968 'new'(317967 'to unmanaged class from unknown'(317966 call anymanaged SparseBlockDom[382401](?)(rank =(386451 call . this[317929] c"rank"))(idxType =(386456 call . this[317929] c"idxType"))(sparseLayoutType =(386461 call . this[317929] c"sparseLayoutType"))(stridable =(317956 call .(386466 call . this[317929] c"parentDom") c"stridable"))(dist = privdist[317943])(whole =(386472 call . this[317929] c"whole"))(parentDom =(386477 call . this[317929] c"parentDom")))))
    { unknown _indexOfInterest[318033] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318034] "expr temp" "temp"(318043 'move' _iterator[318034](318041 call _getIterator(317977 call .(317974 call . c[317969] c"dist") c"targetLocDom")))
      Defer
      {
        {(318060 call _freeIterator _iterator[318034])
        }
      }
      { scopeless type(318049 'move' _indexOfInterest[318033](318046 call iteratorIndex _iterator[318034]))
      }
      ForLoop
      { unknown i[318053] "index var" "insert auto destroy"(318055 'move' i[318053] _indexOfInterest[318033])
        {(317991 call =(317986 call(317981 call . c[317969] c"locDoms") i[318053])(317990 call(386485 call . this[317929] c"locDoms") i[318053]))
          if(318028 call _cond_test(318010 call ==(318005 '_wide_get_node'(318001 call(317996 call . c[317969] c"locDoms") i[318053]))(318007 call .(386491 call here[92085]) c"id")))
          {(318025 call =(318015 call . c[317969] c"myLocDom")(318024 call(318019 call . c[317969] c"locDoms") i[318053]))
          }
        } label _continueLabel[318038] _indexOfInterest[318033] _iterator[318034]
      } label _breakLabel[318039]
    }(318079 call =(318068 call . c[317969] c"whole")(318077 call chpl__buildDomainExpr(318075 'expand_tuple'(318074 call privatizeData[317925] 2))))(318083 return c[317969])
  } function SparseBlockDom[315833](?).dsiGetReprivatizeData[318090](arg _mt[318095]:_MT[227], arg this[318092]:SparseBlockDom[315833](?) : SparseBlockDom[315833](?)) : _unknown[43] "method"
  {(318103 return(318102 call(318098 call .(386501 call . this[318092] c"whole") c"dims")))
  } function SparseBlockDom[315833](?).dsiReprivatize[318113](arg _mt[318120]:_MT[227], arg this[318117]:SparseBlockDom[315833](?) : SparseBlockDom[315833](?), arg other[318111]:_any[170](?), arg reprivatizeData[318115]:_any[170](?)) : _unknown[43] "method" "no return value for void"
  {
    { unknown _indexOfInterest[318141] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318142] "expr temp" "temp"(318151 'move' _iterator[318142](318149 call _getIterator(318124 call .(386506 call . this[318117] c"dist") c"targetLocDom")))
      Defer
      {
        {(318168 call _freeIterator _iterator[318142])
        }
      }
      { scopeless type(318157 'move' _indexOfInterest[318141](318154 call iteratorIndex _iterator[318142]))
      }
      ForLoop
      { unknown i[318161] "index var" "insert auto destroy"(318163 'move' i[318161] _indexOfInterest[318141])(318138 call =(318130 call(386511 call . this[318117] c"locDoms") i[318161])(318137 call(318132 call . other[318111] c"locDoms") i[318161])) label _continueLabel[318146] _indexOfInterest[318141] _iterator[318142]
      } label _breakLabel[318147]
    }(318182 call =(386519 call . this[318117] c"whole")(318180 call chpl__buildDomainExpr(318178 'expand_tuple' reprivatizeData[318115])))
  } function SparseBlockArr[317564](?).dsiSupportsPrivatization[318190](arg _mt[318195]:_MT[227], arg this[318192]:SparseBlockArr[317564](?) : SparseBlockArr[317564](?)) param : _unknown[43] "method"
  {(318198 return 1)
  } function SparseBlockArr[317564](?).dsiGetPrivatizeData[318206](arg _mt[318211]:_MT[227], arg this[318208]:SparseBlockArr[317564](?) : SparseBlockArr[317564](?)) : _unknown[43] "method"
  {(318217 return(318214 call .(386525 call . this[318208] c"dom") c"pid"))
  } function SparseBlockArr[317564](?).dsiPrivatize[318227](arg _mt[318232]:_MT[227], arg this[318229]:SparseBlockArr[317564](?) : SparseBlockArr[317564](?), arg privatizeData[318225]:_any[170](?)) : _unknown[43] "method"
  { unknown privdom[318240](318239 call chpl_getPrivatizedCopy(318236 'typeof'(386530 call . this[318229] c"dom")) privatizeData[318225]) unknown c[318261](318260 'new'(318259 'to unmanaged class from unknown'(318258 call anymanaged SparseBlockArr[385727](?)(sparseLayoutType =(386537 call . this[318229] c"sparseLayoutType"))(eltType =(386542 call . this[318229] c"eltType"))(rank =(386547 call . this[318229] c"rank"))(idxType =(386552 call . this[318229] c"idxType"))(stridable =(386557 call . this[318229] c"stridable"))(dom = privdom[318240]))))
    { unknown _indexOfInterest[318326] "an _indexOfInterest or chpl__followIdx variable" "temp" unknown _iterator[318327] "expr temp" "temp"(318336 'move' _iterator[318327](318334 call _getIterator(318272 call .(318269 call .(318266 call . c[318261] c"dom") c"dist") c"targetLocDom")))
      Defer
      {
        {(318353 call _freeIterator _iterator[318327])
        }
      }
      { scopeless type(318342 'move' _indexOfInterest[318326](318339 call iteratorIndex _iterator[318327]))
      }
      ForLoop
      { unknown localeIdx[318346] "index var" "insert auto destroy"(318348 'move' localeIdx[318346] _indexOfInterest[318326])
        {(318286 call =(318281 call(318276 call . c[318261] c"locArr") localeIdx[318346])(318285 call(386566 call . this[318229] c"locArr") localeIdx[318346]))
          if(318321 call _cond_test(318305 call ==(318300 '_wide_get_node'(318296 call(318291 call . c[318261] c"locArr") localeIdx[318346]))(318302 call .(386572 call here[92085]) c"id")))
          {(318318 call =(318308 call . c[318261] c"myLocArr")(318317 call(318312 call . c[318261] c"locArr") localeIdx[318346]))
          }
        } label _continueLabel[318331] _indexOfInterest[318326] _iterator[318327]
      } label _breakLabel[318332]
    }(318361 return c[318261])
  } function SparseBlockDom[315833](?).numRemoteElems[318370](arg _mt[318377]:_MT[227], arg this[318374]:SparseBlockDom[315833](?) : SparseBlockDom[315833](?), arg rlo[318368]:_any[170](?), arg rid[318372]:_any[170](?)) : _unknown[43] "method"
  { unknown blo[318379](318383 call .(386580 call . this[318374] c"dist") c"idxType") unknown bhi[318386](318390 'typeof' blo[318379])
    if(318500 call _cond_test(318409 call == rid[318372](318407 call -(318403 call .(318402 call(318397 call .(318394 call .(386587 call . this[318374] c"dist") c"targetLocDom") c"dim")(386592 call . this[318374] c"rank")) c"length") 1)))
    {(318422 call = bhi[318386](318419 call .(318418 call(318413 call .(386598 call . this[318374] c"whole") c"dim")(386603 call . this[318374] c"rank")) c"high"))
    }
    {(318497 call = bhi[318386](318495 call -(318492 call +(318436 call .(318435 call(318430 call .(318427 call .(386609 call . this[318374] c"dist") c"boundingBox") c"dim")(386614 call . this[318374] c"rank")) c"low")(318491 call intCeilXDivByY(318475 call *(318469 call +(318466 call -(318450 call .(318449 call(318444 call .(318441 call .(386619 call . this[318374] c"dist") c"boundingBox") c"dim")(386624 call . this[318374] c"rank")) c"high")(318463 call .(318462 call(318457 call .(318454 call .(386629 call . this[318374] c"dist") c"boundingBox") c"dim")(386634 call . this[318374] c"rank")) c"low")) 1)(318473 call + rid[318372] 1))(318488 call .(318487 call(318482 call .(318479 call .(386640 call . this[318374] c"dist") c"targetLocDom") c"dim")(386645 call . this[318374] c"rank")) c"length"))) 1))
    }(318513 return(318511 call +(318508 call - bhi[318386] rlo[318368]) 1))
  } function SparseBlockDom[315833](?).dsiHasSingleLocalSubdomain[318520](arg _mt[318525]:_MT[227], arg this[318522]:SparseBlockDom[315833](?) : SparseBlockDom[315833](?)) param : _unknown[43] "method"
  {(318528 return 1)
  } function SparseBlockArr[317564](?).dsiHasSingleLocalSubdomain[318536](arg _mt[318541]:_MT[227], arg this[318538]:SparseBlockArr[317564](?) : SparseBlockArr[317564](?)) param : _unknown[43] "method"
  {(318544 return 1)
  } function SparseBlockDom[315833](?).dsiLocalSubdomain[318556](arg _mt[318561]:_MT[227], arg this[318558]:SparseBlockDom[315833](?) : SparseBlockDom[315833](?), arg loc[318553] : locale[26]) : _unknown[43] "method"
  {
    if(318603 call _cond_test(318565 call != loc[318553](386651 call here[92085])))
    {(318601 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    } const tmp[318624] "const" "no copy" "temp"(318623 call(318618 call .(318615 call .(386655 call . this[318558] c"dist") c"targetLocales") c"find")(386658 call here[92085]))(318631 call _check_tuple_var_decl tmp[318624] 2) const found[318609] "const"(318625 call tmp[318624] 1) const targetIdx[318611] "const"(318628 call tmp[318624] 2)(318643 return(318640 call .(318639 call(386662 call . this[318558] c"locDoms") targetIdx[318611]) c"mySparseBlock"))
  } function SparseBlockArr[317564](?).dsiLocalSubdomain[318654](arg _mt[318659]:_MT[227], arg this[318656]:SparseBlockArr[317564](?) : SparseBlockArr[317564](?), arg loc[318651] : locale[26]) : _unknown[43] "method"
  {
    if(318671 call _cond_test(318663 call != loc[318651](386667 call here[92085])))
    {(318669 call unimplementedFeatureHalt "the Sparse Block distribution" "remote subdomain queries")
    }(318686 return(318683 call .(318680 call .(318678 call postfix!(386671 call . this[318656] c"myLocArr")) c"locDom") c"mySparseBlock"))
  }(330699 'used modules list'(328390 'use' ChapelStandard[19734])(312950 'use' DSIUtil[216461])(312954 'use' ChapelUtil[165655])(312958 'use' BlockDist[311882]))
}