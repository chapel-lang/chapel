AST dump for NPBRandom after pass readExternC.
Module use list: 

{
  (328384 'use' ChapelStandard)
  (296580 'use' RandomSupport)
  (296585 'use' ChapelLocks)
  type NPBRandomStream[297468](?) unknown eltType[296592] "type variable"(296591 call real[16] 64) const seed[296599] "const"(296598 call int[13] 64) unknown parSafe[296604] "param" 1 bool[10] function NPBRandomStream[297468](?).init[296616](arg _mt[297472]:_MT[227], arg this[297470]:NPBRandomStream[297468](?), arg eltType[296613]:_any[170](?) =
  (296612 call real[16] 64), arg seed[296626] :
  (296621 call int[13] 64) =
  (296623 call . SeedGenerator c"oddCurrentTime"), param arg parSafe[296632] :
  bool[10] =
  1) : _unknown[43] "method" "primary method"
  {
    (296641 call =(296637 call . this c"eltType") eltType)
    unknown one[296650] 1(296648 call uint[107] 64)
    unknown two_46[296661](296659 call << one 46)(296656 call uint[107] 64)
    unknown two_46_mask[296672](296670 call - two_46 1)(296667 call uint[107] 64)
    unknown useed[296682](296680 call _cast(296679 call uint[107] 64) seed)
    unknown mod[296689](296688 call uint[107] 64)
    if(296724 call _cond_test(296697 call ==(296694 call % useed 2) 0))
    {
      { scopeless
        (296722 call(296702 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer")
      }
    }
    (296734 call = mod(296732 call & useed two_46_mask))
    (296748 call =(296738 call . this c"seed")(296746 call _cast(296745 call int[13] 64) mod))
    (296756 call =(296752 call . this c"parSafe") parSafe)
    (296764 call(296760 call . this c"complete"))
    if(296823 call _cond_test(296798 call ||(296783 call ||(296774 call ==(296771 call %(296767 call . this c"seed") 2) 0)(296781 call <(296777 call . this c"seed") 1))(296796 call >(296786 call . this c"seed")(296794 call _cast(296793 call int[13] 64) two_46))))
    {
      { scopeless
        (296821 call(296801 call . HaltWrappers c"initHalt") "NPBRandomStream seed must be an odd integer between 0 and 2**46")
      }
    }
    (296830 call = NPBRandomStreamPrivate_cursor seed)
    (296835 call = NPBRandomStreamPrivate_count 1)
    if(296876 call _cond_test(296852 call ||(296846 call ||(296840 call == eltType real[16])(296844 call == eltType imag[122]))(296850 call == eltType complex[132])))
    {
    }
    {
      (296873 call compilerError "NPBRandomStream only supports eltType=real(64), imag(64), or complex(128)")
    }
  } function NPBRandomStream[297468](?).NPBRandomStreamPrivate_getNext_noLock[296884](arg _mt[297476]:_MT[227], arg this[297474]:NPBRandomStream[297468](?)) : _unknown[43] "method" "primary method" "no doc"
  {
    if(296902 call _cond_test(296888 call == eltType complex[132]))
    {
      (296892 call += NPBRandomStreamPrivate_count 2)
    }
    {
      (296898 call += NPBRandomStreamPrivate_count 1)
    }
    (296912 return(296911 call randlc eltType NPBRandomStreamPrivate_cursor))
  } function NPBRandomStream[297468](?).NPBRandomStreamPrivate_skipToNth_noLock[296922](arg _mt[297480]:_MT[227], arg this[297478]:NPBRandomStream[297468](?), in arg n[296919] :
  integral) : _unknown[43] "method" "primary method" "no doc"
  {
    if(296939 call _cond_test(296926 call == eltType complex[132]))
    {
      { scopeless
        (296936 call = n(296934 call -(296931 call * n 2) 1))
      }
    }
    (296947 call = NPBRandomStreamPrivate_count n)
    (296956 call = NPBRandomStreamPrivate_cursor(296955 call randlc_skipto seed n))
  } function NPBRandomStream[297468](?).getNext[296963](arg _mt[297484]:_MT[227], arg this[297482]:NPBRandomStream[297468](?)) : _unknown[43] "method" "primary method"
  {
    (296968 call _lock)
    const result[296974] "const"(296973 call NPBRandomStreamPrivate_getNext_noLock)
    (296979 call _unlock)
    (296982 return result)
  }
  { scopeless type
    eltType
  } function NPBRandomStream[297468](?).skipToNth[296993](arg _mt[297488]:_MT[227], arg this[297486]:NPBRandomStream[297468](?), arg n[296990] :
  integral) : _unknown[43] throws "method" "primary method"
  {
    if(297029 call _cond_test(296997 call <= n 0))
    {
      { scopeless
        (297027 'throw'(297026 'new'(297024 call _owned(297023 call IllegalArgumentError(297020 call + "NPBRandomStream.skipToNth(n) called with non-positive 'n' value "(297018 call _cast string[24] n))))))
      }
    }
    (297037 call _lock)
    (297042 call NPBRandomStreamPrivate_skipToNth_noLock n)
    (297046 call _unlock)
  } function NPBRandomStream[297468](?).getNth[297056](arg _mt[297492]:_MT[227], arg this[297490]:NPBRandomStream[297468](?), arg n[297053] :
  integral) : _unknown[43] throws "method" "primary method"
  {
    if(297093 call _cond_test(297061 call <= n 0))
    {
      { scopeless
        (297091 'throw'(297090 'new'(297088 call _owned(297087 call IllegalArgumentError(297084 call + "NPBRandomStream.getNth(n) called with non-positive 'n' value "(297082 call _cast string[24] n))))))
      }
    }
    (297101 call _lock)
    (297106 call NPBRandomStreamPrivate_skipToNth_noLock n)
    const result[297111] "const"(297110 call NPBRandomStreamPrivate_getNext_noLock)
    (297116 call _unlock)
    (297119 return result)
  }
  { scopeless type
    eltType
  } function NPBRandomStream[297468](?).fillRandom[297133](arg _mt[297496]:_MT[227], arg this[297494]:NPBRandomStream[297468](?), arg arr[297130] :
  (297127 call chpl__buildArrayRuntimeType nil[38] eltType)) : _unknown[43] "method" "primary method"
  {
    Forall {
      induction variables:
        
        unknown x[297160] "index var" "insert auto destroy"
        
        unknown r[297162] "index var" "insert auto destroy"
      iterated expressions:
        arr
        (297152 call iterate(297144 call . arr c"_dom")(297149 call . arr c"eltType"))
      shadow variables:
      forall body
      {
        (297156 call = x r)
      }
    }
  } function NPBRandomStream[297468](?).fillRandom[297176](arg _mt[297500]:_MT[227], arg this[297498]:NPBRandomStream[297468](?), arg arr[297173] :
  (297170 call chpl__buildArrayRuntimeType nil[38])) : _unknown[43] "method" "primary method" "no doc"
  {
    (297205 call compilerError "NPBRandomStream(eltType="(297198 call _cast string[24] eltType) ") can only be used to fill arrays of "(297203 call _cast string[24] eltType))
  } function NPBRandomStream[297468](?).choice[297218](arg _mt[297504]:_MT[227], arg this[297502]:NPBRandomStream[297468](?), arg arr[297215] :
  (297212 call chpl__buildArrayRuntimeType nil[38]), arg size[297223] :
  unknown sizeType[297220] =
  none[49], arg replace[297228] =
  1, arg prob[297234] :
  unknown probType[297231] =
  none[49]) : _unknown[43] throws "method" "primary method" "no doc"
  {
    (297256 call compilerError "NPBRandomStream.choice() is not supported.")
  } function NPBRandomStream[297468](?).iterate[297267](arg _mt[297508]:_MT[227], arg this[297506]:NPBRandomStream[297468](?), arg D[297264] :
  _domain, arg resultType[297270]:_any[170](?) =
  real[16]) : _unknown[43] "method" "primary method" "fn returns iterator"
  {
    (297275 call _lock)
    const start[297279] "const" NPBRandomStreamPrivate_count
    (297296 call += NPBRandomStreamPrivate_count(297295 call(297287 call .(297284 call . D c"numIndices") c"safeCast")(297293 call int[13] 64)))
    (297302 call NPBRandomStreamPrivate_skipToNth_noLock NPBRandomStreamPrivate_count)
    (297306 call _unlock)
    (297315 return(297314 call NPBRandomPrivate_iterate resultType D seed start))
  } function NPBRandomStream[297468](?).iterate[297325](arg _mt[297512]:_MT[227], arg this[297510]:NPBRandomStream[297468](?), arg D[297322] :
  _domain, arg resultType[297328]:_any[170](?) =
  real[16], param arg tag[297331]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "fn returns iterator"
  {
    const start[297341] "const" NPBRandomStreamPrivate_count
    (297353 return(297352 call NPBRandomPrivate_iterate resultType D seed start tag))
  }
  where {
    (297338 call == tag(297335 call . iterKind c"leader"))
  } function NPBRandomStream[297468](?).writeThis[297362](arg _mt[297516]:_MT[227], arg this[297514]:NPBRandomStream[297468](?), arg f[297360]:_any[170](?)) : _unknown[43] "method" "primary method" "no doc" "method overrides"
  {
    (297366 call <~> f "NPBRandomStream(eltType=")
    (297375 call <~> f(297373 call _cast string[24] eltType))
    (297380 call <~> f ", parSafe=")
    (297385 call <~> f parSafe)
    (297390 call <~> f ", seed=")
    (297395 call <~> f seed)
    (297400 call <~> f ")")
  } unknown _l[297411] "no doc"(297408 IfExpr  parSafe then
  { scopeless
    chpl_LocalSpinlock
  } else
  { scopeless
    nothing[7]
  } ) function NPBRandomStream[297468](?)._lock[297416](arg _mt[297520]:_MT[227], arg this[297518]:NPBRandomStream[297468](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    if(297426 call _cond_test parSafe)
    {
      { scopeless
        (297424 call(297420 call . _l c"lock"))
      }
    }
  } function NPBRandomStream[297468](?)._unlock[297436](arg _mt[297524]:_MT[227], arg this[297522]:NPBRandomStream[297468](?)) : _unknown[43] "inline" "method" "primary method" "no doc"
  {
    if(297446 call _cond_test parSafe)
    {
      { scopeless
        (297444 call(297440 call . _l c"unlock"))
      }
    }
  } unknown NPBRandomStreamPrivate_cursor[297456] "no doc" seed real[16] unknown NPBRandomStreamPrivate_count[297464] "no doc" 1(297462 call int[13] 64)
  { scopeless
    const r23[297533] "const" "private"(297531 call ** 0.5 23)
    const t23[297542] "const" "private"(297540 call ** 2.0 23)
    const r46[297549] "const" "private"(297547 call ** 0.5 46)
    const t46[297556] "const" "private"(297554 call ** 2.0 46)
    const arand[297562] "const" "private" 1.2207e+09
  }
  function randlc[297571](inout arg x[297568] :
  real[16], arg a[297575] :
  real[16] =
  arand) : _unknown[43] "private"
  {
    unknown t1[297583](297581 call * r23 a)
    { scopeless
      const a1[297591] "const"(297590 call floor t1)
      const a2[297601] "const"(297599 call - a(297597 call * t23 a1))
    }
    (297609 call = t1(297607 call * r23 x))
    { scopeless
      const x1[297616] "const"(297615 call floor t1)
      const x2[297626] "const"(297624 call - x(297622 call * t23 x1))
    }
    (297640 call = t1(297638 call +(297632 call * a1 x2)(297636 call * a2 x1)))
    { scopeless
      const t2[297650] "const"(297649 call floor(297646 call * r23 t1))
      const z[297660] "const"(297658 call - t1(297656 call * t23 t2))
      const t3[297673] "const"(297671 call +(297665 call * t23 z)(297669 call * a2 x2))
      const t4[297683] "const"(297682 call floor(297679 call * r46 t3))
      const x3[297693] "const"(297691 call - t3(297689 call * t46 t4))
    }
    (297698 call = x x3)
    (297705 return(297703 call * r46 x3))
  }
  function randlc[297713](arg resultType[297711]:_any[170](?), inout arg x[297716] :
  real[16]) : _unknown[43] "private"
  {
    if(297764 call _cond_test(297721 call == resultType complex[132]))
    {
      { scopeless
        (297737 return(297735 call _cast complex[132](297732 call _build_tuple(297726 call randlc x)(297730 call randlc x))))
      }
    }
    {
      { scopeless
        if(297758 call _cond_test(297741 call == resultType imag[122]))
        {
          { scopeless
            (297750 return(297749 call _r2i(297747 call randlc x)))
          }
        }
        {
          { scopeless
            (297756 return(297755 call randlc x))
          }
        }
      }
    }
  }
  function randlc_skipto[297782](arg seed[297779] :
  (297778 call int[13] 64), in arg n[297785] :
  integral) : _unknown[43] "private"
  {
    unknown cursor[297793](297791 call _cast real[16] seed)
    (297799 call -= n 1)
    unknown t[297803] arand
    arand
    {
      unknown tmp[297867] "temp"
      (297891 'move' tmp[297867](297886 call _cond_test(297888 call != n 0)))
      WhileDo
      {
        {
          const i[297816] "const"(297814 call / n 2)
          if(297833 call _cond_test(297825 call !=(297822 call * 2 i) n))
          {
            { scopeless
              (297831 call randlc cursor t)
            }
          }
          if(297850 call _cond_test(297840 call == i 0))
          {
            { scopeless
              break nil[38]
            }
          }
          {
            { scopeless
              (297847 call = n i)
            }
          }
          (297860 call randlc t t)
          (297864 call = n i)
        }
        label _continueLabel[297870]
        (297881 'move' tmp[297867](297876 call _cond_test(297878 call != n 0)))
        tmp[297867]
      }
      label _breakLabel[297871]
    }
    (297895 return cursor)
  }
  { scopeless type
    real[16]
  }
  function outer[297904](arg ranges[297902]:_any[170](?), param arg dim[297908] :
  int[13] =
  1) : _unknown[43] "iterator fn" "private"
  {
    if(298076 call _cond_test(297920 call ==(297914 call + dim 1)(297917 call . ranges c"size")))
    {
      {
        unknown _indexOfInterest[297932] "an _indexOfInterest or chpl__followIdx variable" "temp"
        unknown _iterator[297933] "expr temp" "temp"
        (297942 'move' _iterator[297933](297940 call _getIterator(297926 call ranges dim)))
        Defer
        {
          {
            (297959 call _freeIterator _iterator[297933])
          }
        }
        { scopeless type
          (297948 'move' _indexOfInterest[297932](297945 call iteratorIndex _iterator[297933]))
        }
        ForLoop
        {
          unknown i[297952] "index var" "insert auto destroy"
          (297954 'move' i[297952] _indexOfInterest[297932])
          { scopeless
            (297930 yield(297928 call _build_tuple i))
          }
          label _continueLabel[297937]
          _indexOfInterest[297932]
          _iterator[297933]
        }
        label _breakLabel[297938]
      }
    }
    {
      { scopeless
        if(298072 call _cond_test(297975 call <(297969 call + dim 1)(297972 call . ranges c"size")))
        {
          {
            unknown _indexOfInterest[298033] "an _indexOfInterest or chpl__followIdx variable" "temp"
            unknown _iterator[298034] "expr temp" "temp"
            (298043 'move' _iterator[298034](298041 call _getIterator(297981 call ranges dim)))
            Defer
            {
              {
                (298060 call _freeIterator _iterator[298034])
              }
            }
            { scopeless type
              (298049 'move' _indexOfInterest[298033](298046 call iteratorIndex _iterator[298034]))
            }
            ForLoop
            {
              unknown i[298053] "index var" "insert auto destroy"
              (298055 'move' i[298053] _indexOfInterest[298033])
              {
                unknown _indexOfInterest[297999] "an _indexOfInterest or chpl__followIdx variable" "temp"
                unknown _iterator[298000] "expr temp" "temp"
                (298009 'move' _iterator[298000](298007 call _getIterator(297990 call outer ranges(297988 call + dim 1))))
                Defer
                {
                  {
                    (298026 call _freeIterator _iterator[298000])
                  }
                }
                { scopeless type
                  (298015 'move' _indexOfInterest[297999](298012 call iteratorIndex _iterator[298000]))
                }
                ForLoop
                {
                  unknown j[298019] "index var" "insert auto destroy"
                  (298021 'move' j[298019] _indexOfInterest[297999])
                  { scopeless
                    (297997 yield(297995 call _build_tuple i(297993 'expand_tuple' j)))
                  }
                  label _continueLabel[298004]
                  _indexOfInterest[297999]
                  _iterator[298000]
                }
                label _breakLabel[298005]
              }
              label _continueLabel[298038]
              _indexOfInterest[298033]
              _iterator[298034]
            }
            label _breakLabel[298039]
          }
        }
        {
          (298069 yield 0)
        }
      }
    }
  }
  function NPBRandomPrivate_iterate[298088](arg resultType[298086]:_any[170](?), arg D[298091] :
  _domain, arg seed[298098] :
  (298097 call int[13] 64), arg start[298105] :
  (298104 call int[13] 64)) : _unknown[43] "iterator fn" "no doc"
  {
    unknown cursor[298113](298112 call randlc_skipto seed start)
    {
      unknown _indexOfInterest[298126] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[298127] "expr temp" "temp"
      (298136 'move' _iterator[298127](298134 call _getIterator D))
      Defer
      {
        {
          (298152 call _freeIterator _iterator[298127])
        }
      }
      { scopeless type
        (298141 'move' _indexOfInterest[298126](298138 call iteratorIndex _iterator[298127]))
      }
      ForLoop
      {
        unknown i[298145] "index var" "insert auto destroy"
        (298147 'move' i[298145] _indexOfInterest[298126])
        { scopeless
          (298124 yield(298123 call randlc resultType cursor))
        }
        label _continueLabel[298131]
        _indexOfInterest[298126]
        _iterator[298127]
      }
      label _breakLabel[298132]
    }
  }
  function NPBRandomPrivate_iterate[298165](arg resultType[298163]:_any[170](?), arg D[298168] :
  _domain, arg seed[298175] :
  (298174 call int[13] 64), arg start[298182] :
  (298181 call int[13] 64), param arg tag[298186] :
  iterKind) : _unknown[43] "iterator fn" "no doc"
  {
    {
      unknown _indexOfInterest[298211] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[298212] "expr temp" "temp"
      (298221 'move' _iterator[298212](298219 call _getIterator(298207 call(298198 call . D c"these")(tag =(298202 call . iterKind c"leader")))))
      Defer
      {
        {
          (298238 call _freeIterator _iterator[298212])
        }
      }
      { scopeless type
        (298227 'move' _indexOfInterest[298211](298224 call iteratorIndex _iterator[298212]))
      }
      ForLoop
      {
        unknown block[298231] "index var" "insert auto destroy"
        (298233 'move' block[298231] _indexOfInterest[298211])
        { scopeless
          (298209 yield block)
        }
        label _continueLabel[298216]
        _indexOfInterest[298211]
        _iterator[298212]
      }
      label _breakLabel[298217]
    }
  }
  where {
    (298194 call == tag(298191 call . iterKind c"leader"))
  }
  function NPBRandomPrivate_iterate[298253](arg resultType[298251]:_any[170](?), arg D[298256] :
  _domain, arg seed[298263] :
  (298262 call int[13] 64), arg start[298270] :
  (298269 call int[13] 64), param arg tag[298274] :
  iterKind, arg followThis[298277]:_any[170](?)) : _unknown[43] "iterator fn" "no doc"
  {
    unknown multiplier[298295] "param"(298292 IfExpr (298288 call == resultType complex[132]) then
    { scopeless
      2
    } else
    { scopeless
      1
    } )
    const ZD[298303] "const"(298302 call computeZeroBasedDomain D)
    const innerRange[298313] "const"(298312 call followThis(298308 call . ZD c"rank"))
    unknown cursor[298317] real[16]
    {
      unknown _indexOfInterest[298547] "an _indexOfInterest or chpl__followIdx variable" "temp"
      unknown _iterator[298548] "expr temp" "temp"
      (298557 'move' _iterator[298548](298555 call _getIterator(298324 call outer followThis)))
      Defer
      {
        {
          (298574 call _freeIterator _iterator[298548])
        }
      }
      { scopeless type
        (298563 'move' _indexOfInterest[298547](298560 call iteratorIndex _iterator[298548]))
      }
      ForLoop
      {
        unknown outer[298567] "index var" "insert auto destroy"
        (298569 'move' outer[298567] _indexOfInterest[298547])
        {
          unknown myStart[298326] start
          if(298394 call _cond_test(298335 call >(298331 call . ZD c"rank") 1))
          {
            { scopeless
              (298365 call += myStart(298363 call * multiplier(298362 call(298354 call .(298353 call(298340 call . ZD c"indexOrder")(298350 call _build_tuple(298344 'expand_tuple' outer)(298346 call . innerRange c"low"))) c"safeCast")(298360 call int[13] 64))))
            }
          }
          {
            { scopeless
              (298391 call += myStart(298389 call * multiplier(298388 call(298380 call .(298379 call(298371 call . ZD c"indexOrder")(298375 call . innerRange c"low")) c"safeCast")(298386 call int[13] 64))))
            }
          }
          if(298543 call _cond_test(298404 call !(298401 call . innerRange c"stridable")))
          {
            (298412 call = cursor(298411 call randlc_skipto seed myStart))
            {
              unknown _indexOfInterest[298425] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[298426] "expr temp" "temp"
              (298435 'move' _iterator[298426](298433 call _getIterator innerRange))
              Defer
              {
                {
                  (298451 call _freeIterator _iterator[298426])
                }
              }
              { scopeless type
                (298440 'move' _indexOfInterest[298425](298437 call iteratorIndex _iterator[298426]))
              }
              ForLoop
              {
                unknown i[298444] "index var" "insert auto destroy"
                (298446 'move' i[298444] _indexOfInterest[298425])
                { scopeless
                  (298423 yield(298422 call randlc resultType cursor))
                }
                label _continueLabel[298430]
                _indexOfInterest[298425]
                _iterator[298426]
              }
              label _breakLabel[298431]
            }
          }
          {
            (298472 call -= myStart(298471 call(298463 call .(298460 call . innerRange c"low") c"safeCast")(298469 call int[13] 64)))
            {
              unknown _indexOfInterest[298510] "an _indexOfInterest or chpl__followIdx variable" "temp"
              unknown _iterator[298511] "expr temp" "temp"
              (298520 'move' _iterator[298511](298518 call _getIterator innerRange))
              Defer
              {
                {
                  (298536 call _freeIterator _iterator[298511])
                }
              }
              { scopeless type
                (298525 'move' _indexOfInterest[298510](298522 call iteratorIndex _iterator[298511]))
              }
              ForLoop
              {
                unknown i[298529] "index var" "insert auto destroy"
                (298531 'move' i[298529] _indexOfInterest[298510])
                {
                  (298499 call = cursor(298498 call randlc_skipto seed(298496 call + myStart(298494 call *(298492 call(298484 call . i c"safeCast")(298490 call int[13] 64)) multiplier))))
                  (298508 yield(298507 call randlc resultType cursor))
                }
                label _continueLabel[298515]
                _indexOfInterest[298510]
                _iterator[298511]
              }
              label _breakLabel[298516]
            }
          }
        }
        label _continueLabel[298552]
        _indexOfInterest[298547]
        _iterator[298548]
      }
      label _breakLabel[298553]
    }
  }
  where {
    (298284 call == tag(298281 call . iterKind c"follower"))
  }
}