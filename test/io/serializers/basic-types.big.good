
===== bool =====
===== writing: =====
true
--------------------
01
====================
--- read: ---
true
-------------
SUCCESS
================

===== int(64) =====
===== writing: =====
5
--------------------
0000000000000005
====================
--- read: ---
5
-------------
SUCCESS
===================

===== real(64) =====
===== writing: =====
42.0
--------------------
4045000000000000
====================
--- read: ---
42.0
-------------
SUCCESS
====================

===== real(64) =====
===== writing: =====
2.71828
--------------------
4005bf0a8b1407d9
====================
--- read: ---
2.71828
-------------
SUCCESS
====================

===== string =====
===== writing: =====
a-b-c-d-e-f-g
--------------------
612d622d632d642d652d662d67
====================
FAILURE: binaryDeserializer does not support reading 'string' or 'bytes'. Please use a method like 'fileReader.readBinary' instead.
==================

===== bytes =====
===== writing: =====
12345
--------------------
3132333435
====================
FAILURE: binaryDeserializer does not support reading 'string' or 'bytes'. Please use a method like 'fileReader.readBinary' instead.
=================

===== 3*int(64) =====
===== writing: =====
(1, 2, 3)
--------------------
000000000000000100000000000000020000000000000003
====================
--- read: ---
(1, 2, 3)
-------------
SUCCESS
=====================

===== (int(64),real(64),bool) =====
===== writing: =====
(1, 42.0, false)
--------------------
0000000000000001404500000000000000
====================
--- read: ---
(1, 42.0, false)
-------------
SUCCESS
===================================

===== colors =====
===== writing: =====
red
--------------------
00
====================
--- read: ---
red
-------------
SUCCESS
==================

===== range(int(64),both,one) =====
===== writing: =====
1..10
--------------------
0000000000000001000000000000000a00000000000000010000000000000000
====================
--- read: ---
1..10
-------------
SUCCESS
===================================

===== range(int(64),both,positive) =====
===== writing: =====
1..10 by 2
--------------------
0000000000000001000000000000000900000000000000020000000000000001
====================
--- read: ---
1..9 by 2
-------------
SUCCESS
========================================

===== range(int(64),both,negOne) =====
===== writing: =====
1..10 by -1
--------------------
0000000000000001000000000000000affffffffffffffff0000000000000000
====================
--- read: ---
1..10 by -1
-------------
SUCCESS
======================================

===== range(int(64),both,positive) =====
===== writing: =====
1..20 by 3 align 2
--------------------
0000000000000002000000000000001400000000000000030000000000000002
====================
--- read: ---
2..20 by 3
-------------
SUCCESS
========================================

===== domain(2,int(64),one) =====
===== writing: =====
{1..10, 1..10}
--------------------
00000000000000020000000000000001000000000000000a000000000000000100000000000000000000000000000001000000000000000a00000000000000010000000000000000
====================

===== domain(2,int(64),positive) =====
===== writing: =====
{1..10 by 2, 1..10 by 2}
--------------------
000000000000000200000000000000010000000000000009000000000000000200000000000000010000000000000001000000000000000900000000000000020000000000000001
====================

===== SimpleRecord =====
===== writing: =====
(x = 5, y = 42.0)
--------------------
00000000000000054045000000000000
====================
--- read: ---
(x = 5, y = 42.0)
-------------
SUCCESS
========================

===== CustomizedRecord =====
===== writing: =====
<7, 3.14>
--------------------
3c00000000000000072c2040091eb851eb851f3e
====================
--- read: ---
<7, 3.14>
-------------
SUCCESS
============================

===== GenericRecord(int(64),3) =====
===== writing: =====
(x = 42, y = (1, 2, 3))
--------------------
000000000000002a000000000000000100000000000000020000000000000003
====================
--- read: ---
(x = 42, y = (1, 2, 3))
-------------
SUCCESS
====================================

===== owned Parent =====
===== writing: =====
{x = 5}
--------------------
0000000000000005
====================
--- read: ---
{x = 5}
-------------
SUCCESS
========================

===== owned SimpleChild =====
===== writing: =====
{x = 5, y = 42.0}
--------------------
00000000000000054045000000000000
====================
--- read: ---
{x = 5, y = 42.0}
-------------
SUCCESS
=============================

===== owned ChildChild =====
===== writing: =====
{x = 1, y = 42.0, z = 5}
--------------------
000000000000000140450000000000000000000000000005
====================
--- read: ---
{x = 1, y = 42.0, z = 5}
-------------
SUCCESS
============================

===== owned Parent? =====
===== writing: =====
{x = 5}
--------------------
0000000000000005
====================
--- read: ---
{x = 5}
-------------
SUCCESS
=========================

===== shared Parent =====
===== writing: =====
{x = 5}
--------------------
0000000000000005
====================
--- read: ---
{x = 5}
-------------
SUCCESS
=========================

===== owned Child101 =====
===== writing: =====
{grandParentField = 0, field = (1, 0, 1)}
--------------------
0000000000000000000000000000000100000000000000000000000000000001
====================
--- read: ---
{grandParentField = 0, field = (1, 0, 1)}
-------------
SUCCESS
==========================

===== unmanaged SimpleChild =====
===== writing: =====
{x = 5, y = 42.0}
--------------------
00000000000000054045000000000000
====================
--- read: ---
{x = 5, y = 42.0}
-------------
SUCCESS
=================================

===== set(int(64),false) =====
===== writing: =====
{5, 7, 8, 1, 4, 6, 2, 10, 9, 3}
--------------------
000000000000000a0000000000000005000000000000000700000000000000080000000000000001000000000000000400000000000000060000000000000002000000000000000a00000000000000090000000000000003
====================
--- read: ---
{5, 7, 8, 1, 4, 6, 2, 10, 9, 3}
-------------
SUCCESS
==============================
FAILURES:
- string
- bytes
