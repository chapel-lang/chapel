#!/usr/bin/env python3

# This test serves as a sentinel for compiler performance testing so that when
# a pass is moved, added, deleted, or renamed there is some test failure to
# indicate that the comp perf .dat and .graph files need to be updated. This
# test throws --print-passes to get the order of the passes, and compares the
# order to the order of the passes in compilerPerformance.perfkeys.
#
# compilerPerformance.perfkeys is used by compiler performance testing to time
# each pass. It is also used by this test to let you know if you broke compiler
# performance testing. Prior to this, compiler performance tracking quickly
# became out of date with missing passes and timings being associated with the
# wrong pass. Note that updating compilerPerformance.perfkeys without updating
# the .dat and .graph files does _not_ fix compiler performance testing.
#
# To fix compiler performance testing, the .dat files and .graph files have to
# be updated even for simple things like moving when a pass is run. The keys
# and data in the .dat have to be in the same order as the passes run. New
# passes have to have old dates backfilled with a '-'. The .graph file keys
# should also be kept in the same order.
#
# Unfortunately it's hard to automate adding/reordering/removing passes. At
# least for anything even a little complex. e.g. How do you automatically tell
# the difference between if a pass was removed and a new one was added vs
# simple renaming? For now, just ping Elliot, and he'll update the right files.
# External contributers: just make a note of this failure in your pull request.
#
# This isn't meant to hold up development and if nobody who knows how to update
# the compiler performance .dat and .graph files is around, just update
# compilerPerformance.perfkeys so there's no nightly regressions and make sure
# somebody eventually changes the .dat and .graph files. It's not the worst
# thing to lose a few nights of compiler performance data.

import sys

logfile = sys.argv[2]

loglines = []
with open(logfile, 'r') as f:
    loglines = f.readlines()

# remove all of the actual times from --print-passes. It outputs
# '<passname> : <time for pass>' and we want to remove <time for pass>
with open(logfile, 'w') as f:
    for line in loglines:
      splitline = line.split(':')[0].strip() + ' :'
      f.write(splitline + '\n')
      # --print-passes prints detailed output after printing the total
      # time for each pass. This just strips all that output which
      # occurs after the total is printed.
      if line.strip().startswith('total time :') :
        break


# copy the compilerPerformance perf keys as the .good file for this test. That
# way we don't have to update the .good and the perfkeys. Ignore comments and
# empty lines in the compilerPerformance.perfkeys file
passes = []
with open('../compilerPerformance.perfkeys', 'r') as f:
    passes = f.readlines()
passes = [ p for p in passes if p.strip() and not p.strip().startswith('#') ]

with open('passCheck.good', 'w') as f:
    f.writelines(passes)
