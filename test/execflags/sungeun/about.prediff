#!/usr/bin/env python

# This script fixes up the test output to remove the compiler version
# number and then generates a .good file based on the output of
# printchplenv.

# No error checking, because this should be called from sub_test

import sys, os, subprocess

testname =sys.argv[1]
outfile = sys.argv[2]
# compflags = sys.argv[4]
goodfile = testname+'.good'
compver = 'Chapel compiler version:'
chplhomestr = '  CHPL_HOME:'
chpl_home=os.getenv('CHPL_HOME')
printchplenv=os.path.normpath(chpl_home)+'/util/printchplenv'

with open(outfile, 'r') as ofh:
    myLines = ofh.readlines()

# fix the output file
with open(outfile, 'w') as ofh:
    for line in myLines:
        l = line.rstrip()
        if l.find(compver) == 0:
            ofh.write('%s\n'%(compver))
        else:
            ofh.write(line)

with open(goodfile, 'w') as gfh:
    # generate a .good file
    gfh = open(goodfile, 'w')
    # might have to leave this off if too troublesome to maintain
    gfh.write('Compilation command: chpl -o about --cc-warnings about.chpl \n')
    gfh.write('Chapel compiler version:\n')
    gfh.write('Chapel environment:\n')
    gfh.write('  CHPL_HOME: %s\n'%(chpl_home))
    # printchplenv --simple
    p = subprocess.Popen([printchplenv, '--simple'],
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    chplenv = p.communicate()[0]
    for env in sorted(chplenv.split()):
        tenv = env.split('=')
        gfh.write('  %s: %s\n'%(tenv[0], tenv[1]))
