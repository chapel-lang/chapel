allrules.chpl:1: node violates rule UseExplicitModules
Available rules (default rules marked with *):
  * BoolLitInCondStmt            Warn for boolean literals like 'true' in a conditional statement.
  * CamelCaseFunctions           Warn for functions that are not 'camelCase'.
  * CamelCaseRecords             Warn for records that are not 'camelCase'.
    CamelOrPascalCaseVariables   Warn for variables that are not 'camelCase' or 'PascalCase'.
  * ChplPrefixReserved           Warn for user-defined names that start with the 'chpl_' reserved prefix.
  * ComplexLiteralOrder          Warn for complex literals that are not in a consistent order.
    ConsecutiveDecls             Warn for consecutive variable declarations that can be combined.
  * ControlFlowParentheses       Warn for unnecessary parentheses in conditional statements and loops.
  * DoKeywordAndBlock            Warn for redundant 'do' keyword before a curly brace '{'.
  * EmptyStmts                   Warn for empty statements (i.e., unnecessary semicolons).
  * IncorrectIndentation         Warn for inconsistent or missing indentation
  * MethodsAfterFields           Warn for classes or records that mix field and method definitions.
  * MisleadingIndentation        Warn for single-statement blocks that look like they might be multi-statement blocks.
    NestedCoforalls              Warn for nested 'coforall' loops, which could lead to performance hits.
  * PascalCaseClasses            Warn for classes that are not 'PascalCase'.
  * PascalCaseModules            Warn for modules that are not 'PascalCase'.
  * SimpleDomainAsRange          Warn for simple domains in loops that can be ranges.
    UnusedFormal                 Warn for unused formals in functions.
  * UnusedLoopIndex              Warn for unused index variables in loops.
  * UnusedTupleUnpack            Warn for unused tuple unpacking, such as '(_, _)'.
    UseExplicitModules           Warn for code that relies on auto-inserted implicit modules.
