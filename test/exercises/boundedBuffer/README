Bounded Buffer Exercise: Task Parallelism

This file contains a main() procedure that uses a cobegin to launch a
single producer and single consumer.  The producer writes 'numItems'
to a bounded buffer of size 'bufferSize' and then writes a sentinel
value per consumer.  The consumer reads items from the bounded buffer
until it sees a sentinel value.  The boundedBuffer is itself written
as a class with a buffer of sync variables ('buff$') to prevent
overrun/underrun as we saw in the slides today.  It also stores a
head/tail cursor indicating where the producer/consumer should write
to / read from.

Your goal is to extend this program to work with multiple producers
and consumers without (a) deadlock or livelock, (b) causing any
reads/writes to be lost or read more than once.  To do this you will
need to add more producers and consumers and to modify the
implementation of the head/tail cursors (and their advance()) function
to make sure that the tasks don't race as they read/write them.

Check the comments for more detailed instructions.

The only file you should need for this exercise is
'boundedBuffer.chpl'.  A trivial Makefile is also included for your
convenience.
