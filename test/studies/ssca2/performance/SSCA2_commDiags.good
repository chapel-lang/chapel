=========================================================
Problem Dimensions
                   Scale: 6
      Number of Vertices: 64
    Kernel 3 Path Length: 3
    Kernel 4 Starting Set range
        low scale: 6
       high scale: 6

Code Characteristics
   Filtering Edges by Weight
   Reproducible problem
   No additional work for bounds computation
   Not collecting timing statistics
   Vertex domain is block distributed
   RMAT graph generation constants:(0.55, 0.1, 0.1, 0.25)
=========================================================
-------------------------------------
Order of RMAT generated graph:64
          number of raw edges:512
-------------------------------------

allocating Associative_Graph
Random graph generated by stride of 1 in one random stream with skips
Using the new edge generation scheme, in parallel
Serializing certain parallel loops

Vertex Set in G:{1..64}
Starting Graph Generation in parallel
# of raw edges generated  512
# of duplicate edges      not counted
# of self edges           130
# of edges in final graph 302
max number of outgoing edges 12
number of disconnected vertices 2

Kernel 2: (get = 10, get_nb = 0, put = 7, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 0, fork_fast = 0, fork_nb = 6) (get = 44, get_nb = 0, put = 0, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 8, fork_fast = 0, fork_nb = 0) (get = 40, get_nb = 0, put = 0, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 4, fork_fast = 0, fork_nb = 0) (get = 40, get_nb = 0, put = 0, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 4, fork_fast = 0, fork_nb = 0)
Kernel 3: (get = 3670, get_nb = 0, put = 0, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 1464, fork_fast = 0, fork_nb = 48) (get = 158, get_nb = 0, put = 598, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 25, fork_fast = 0, fork_nb = 0) (get = 158, get_nb = 0, put = 378, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 16, fork_fast = 0, fork_nb = 0) (get = 158, get_nb = 0, put = 488, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 16, fork_fast = 0, fork_nb = 0)


Computing Betweenness Centrality exactly
Kernel 4:
0: get: N/A
0: get_nb: 0
0: put: 5120 (+5%)
0: put_nb: 0
0: test_nb: 0
0: wait_nb: 0
0: try_nb: 0
0: fork: N/A
0: fork_fast: 0
0: fork_nb: 99
1: get: N/A
1: get_nb: 0
1: put: 5171 (+5%)
1: put_nb: 0
1: test_nb: 0
1: wait_nb: 0
1: try_nb: 0
1: fork: N/A
1: fork_fast: 0
1: fork_nb: 96
2: get: N/A
2: get_nb: 0
2: put: 4980 (+5%)
2: put_nb: 0
2: test_nb: 0
2: wait_nb: 0
2: try_nb: 0
2: fork: N/A
2: fork_fast: 0
2: fork_nb: 96
3: get: N/A
3: get_nb: 0
3: put: 5130 (+5%)
3: put_nb: 0
3: test_nb: 0
3: wait_nb: 0
3: try_nb: 0
3: fork: N/A
3: fork_fast: 0
3: fork_nb: 96

Max Betweenness Centrality: 391.803
Min Betweenness Centrality: 0.0

Computed betweenness centrality satisfies vertex count constraint
All betweenness centrality scores should be in range [0, 4032.0]


=========================================================


