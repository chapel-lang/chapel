// Block LU without pivoting.
// Magic square of dimension 10, permuted according to
// Matlab's p matrix for LU (so it doesn't need pivoting),
// is used as test matrix A.

param n = 10;
param blk = 5;

const AD = [1..n,1..n];
var A: [AD] real;

initA(A,'Adata.dat');

writeln("Unfactored Matrix:");
writeln(A);

for jblk in [1..n] by blk {
  var low = jblk;
  var hi = if (jblk + blk-1) <= n then jblk+blk-1 else n;
  var block = hi - low;
  var unfact = n-hi-1;

// Define views into unfactored part of A.
// Could domains and subdomains be used instead of slicing?
// It would be nice to have some index checking and to show
// a relationship between these blocks and the full AD domain.
// Defining subdomains for the views and for indexing into A
// would result in defining 8 subdomains each iteration of jblk.
// That seems cumbersome.
// Can slices and views be automatic subdomains?
  A11(1..block,1..block) -> A(low..hi,low..hi);
  A21(1..unfact,1..block) -> A(hi+1..n,low..hi);
  A12(1..block,1..unfact) -> A(low..hi,hi+1..n);
  A22(1..unfact,1..unfact) -> A(hi+1..n,hi+1..n);

// LU factorization of A11.
  for k in [1..block] {
    if (A11(k,k) != 0.0) {
      for i in [k+1..block] {
        A11(i,k) = A11(i,k)/A11(k,k);
      }
      for i in [k+1..block] {
        for j in [k+1..block] {
          A11(i,j) -= A11(i,k)*A11(k,j);
        }
      }
    }
  }
  if (hi < n) {
// Update of A21.  
    for k in [1..block] {
      if A11(k,k) != 0.0 {
        for i in [1..unfact] {
          A21(i,k) = A21(i,k)/A11(k,k);
        }
        for i in [1..unfact] {
          for j in [k+1..block] {
            A21(i,j) -= A21(i,k)*A11(k,j);
          }
        }
      }
    }
// Update of A12.
    for j in [1..unfact] {
      for k in [1..block] {
        if (A21(k,j)!= 0.0) {
          for i in [k+1..block] {
            A12(i,j) -= A11(i,k)*A21(k,j);
          }
        }
      }
    }
// Update of A22 -= A12*A21.
    for i in [1..unfact] {
      for j in [1..unfact] {
        for k in [1..block] {
          A22(i,j) -= A12(i,k)*A21(k,j);
      }
    }
  }
}
writeln();
writeln("Factored Matrix:");
writeln(A);

def initA(A,filename:string){

// Create full permutation matrix to permute A.
// Very expensive, but easy way to permute the matrix
// so that pivoting isn't needed.

var Adat = file(filename,path='./',mode='r');
var P, temp: [A.domain] real;

Adat.open;
for ij in A.domain {
  Adat.read(A(ij));
}
Adat.close;

P = 0.0;
P(1,2) = 1.0;
P(2,3) = 1.0;
P(3,7) = 1.0;
P(4,8) = 1.0;
P(5,9) = 1.0;
P(6,5) = 1.0;
P(7,1) = 1.0;
P(8,4) = 1.0;
P(9,10) = 1.0;
P(10,6) = 1.0;

temp = 0.0;
const i = 1..10;
for i in [1..10] {
  for j in [1..10] {
    for k in [1..10] {
      temp(i,j) = temp(i,j) + P(i,k)*A(k,j);
    }
  }
}
A = temp;
}
