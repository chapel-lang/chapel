======== SERIAL ITERATORS (recursive) ==========
-------- GLOB ----------
globerator.chpl
globerator.compopts
globerator.notest
globhelp.h
one/a.c
one/b.c
one/two/f.c
one/two/y.c
recursive-par-glob.chpl
recursive-par-glob.notest
t
t.c
test_glob
test_glob.chpl
test_glob.compopts
test_glob.exec.out.tmp
test_glob.good
tt
-------- WORDEXP ----------
globerator.chpl
globerator.compopts
globerator.notest
globhelp.h
one/a.c
one/b.c
one/two/f.c
one/two/y.c
recursive-par-glob.chpl
recursive-par-glob.notest
t
t.c
test_glob
test_glob.chpl
test_glob.compopts
test_glob.exec.out.tmp
test_glob.good
tt
-------- WORDEXP `zip` GLOB ----------
(globerator.chpl, globerator.chpl)
(globerator.compopts, globerator.compopts)
(globerator.notest, globerator.notest)
(globhelp.h, globhelp.h)
(one/a.c, one/a.c)
(one/b.c, one/b.c)
(one/two/f.c, one/two/f.c)
(one/two/y.c, one/two/y.c)
(recursive-par-glob.chpl, recursive-par-glob.chpl)
(recursive-par-glob.notest, recursive-par-glob.notest)
(t, t)
(t.c, t.c)
(test_glob, test_glob)
(test_glob.chpl, test_glob.chpl)
(test_glob.compopts, test_glob.compopts)
(test_glob.exec.out.tmp, test_glob.exec.out.tmp)
(test_glob.good, test_glob.good)
(tt, tt)
======== SERIAL ITERATORS (non-recursive) ==========
-------- GLOB ----------
globerator.chpl
globerator.compopts
globerator.notest
globhelp.h
one
recursive-par-glob.chpl
recursive-par-glob.notest
t
t.c
test_glob
test_glob.chpl
test_glob.compopts
test_glob.exec.out.tmp
test_glob.good
tt
-------- WORDEXP ----------
globerator.chpl
globerator.compopts
globerator.notest
globhelp.h
one
recursive-par-glob.chpl
recursive-par-glob.notest
t
t.c
test_glob
test_glob.chpl
test_glob.compopts
test_glob.exec.out.tmp
test_glob.good
tt
-------- WORDEXP `zip` GLOB ----------
(globerator.chpl, globerator.chpl)
(globerator.compopts, globerator.compopts)
(globerator.notest, globerator.notest)
(globhelp.h, globhelp.h)
(one, one)
(recursive-par-glob.chpl, recursive-par-glob.chpl)
(recursive-par-glob.notest, recursive-par-glob.notest)
(t, t)
(t.c, t.c)
(test_glob, test_glob)
(test_glob.chpl, test_glob.chpl)
(test_glob.compopts, test_glob.compopts)
(test_glob.exec.out.tmp, test_glob.exec.out.tmp)
(test_glob.good, test_glob.good)
(tt, tt)
======== PARALLEL ITERATORS (recursive) ==========
-------- GLOB ----------
globerator.chpl
globerator.compopts
globerator.notest
globhelp.h
one/
recursive-par-glob.chpl
recursive-par-glob.notest
t
t.c
test_glob
test_glob.chpl
test_glob.compopts
test_glob.exec.out.tmp
test_glob.good
tt
one/a.c
one/b.c
one/two/
one/two/f.c
one/two/y.c
-------- WORDEXP ----------
globerator.chpl
globerator.compopts
globerator.notest
globhelp.h
one/
recursive-par-glob.chpl
recursive-par-glob.notest
t
t.c
test_glob
test_glob.chpl
test_glob.compopts
test_glob.exec.out.tmp
test_glob.good
tt
one/a.c
one/b.c
one/two/
one/two/f.c
one/two/y.c
-------- WORDEXP `zip` GLOB ----------
(globerator.chpl, globerator.chpl)
(globerator.compopts, globerator.compopts)
(globerator.notest, globerator.notest)
(globhelp.h, globhelp.h)
(one/, one/)
(recursive-par-glob.chpl, recursive-par-glob.chpl)
(recursive-par-glob.notest, recursive-par-glob.notest)
(t, t)
(t.c, t.c)
(test_glob, test_glob)
(test_glob.chpl, test_glob.chpl)
(test_glob.compopts, test_glob.compopts)
(test_glob.exec.out.tmp, test_glob.exec.out.tmp)
(test_glob.good, test_glob.good)
(tt, tt)
(one/a.c, one/a.c)
(one/b.c, one/b.c)
(one/two/, one/two/)
(one/two/f.c, one/two/f.c)
(one/two/y.c, one/two/y.c)
======== PARALLEL ITERATORS (non-recursive) ==========
-------- GLOB ----------
globerator.chpl
globerator.compopts
globerator.notest
globhelp.h
one
recursive-par-glob.chpl
recursive-par-glob.notest
t
t.c
test_glob
test_glob.chpl
test_glob.compopts
test_glob.exec.out.tmp
test_glob.good
tt
-------- WORDEXP ----------
globerator.chpl
globerator.compopts
globerator.notest
globhelp.h
one
recursive-par-glob.chpl
recursive-par-glob.notest
t
t.c
test_glob
test_glob.chpl
test_glob.compopts
test_glob.exec.out.tmp
test_glob.good
tt
-------- WORDEXP `zip` GLOB ----------
(globerator.chpl, globerator.chpl)
(globerator.compopts, globerator.compopts)
(globerator.notest, globerator.notest)
(globhelp.h, globhelp.h)
(one, one)
(recursive-par-glob.chpl, recursive-par-glob.chpl)
(recursive-par-glob.notest, recursive-par-glob.notest)
(t, t)
(t.c, t.c)
(test_glob, test_glob)
(test_glob.chpl, test_glob.chpl)
(test_glob.compopts, test_glob.compopts)
(test_glob.exec.out.tmp, test_glob.exec.out.tmp)
(test_glob.good, test_glob.good)
(tt, tt)
