# Because --fast turns off bounds, nill, and local checks and theses tests are
# explicitly checking for them we suppress them. Another possible solution is
# to add a .fastcompopts or something to that effect. However, then you might
# want a .baselinecompopts and so on and that can get ugly quickly. In the
# future there may be cases where somebody will want to compile with bounds
# checks with --fast (like java does) so it does make sense to have the ability
# to throw --bounds-checks but only when --fast is on, otherwise if we had a
# .compopts that always throws --bounds-check then we're not testing from the
# default user perspective and we are no longer testing that bounds checks are
# on for a normal compilation.  For now suppressions and not a .fastcompopts
# are the solution but a more elegant solution that enables turning on bounds
# checking for these test under --fast would be great!
arrays/bradc/localSlices/localsliceOOB
arrays/bradc/localSlices/localsliceOOB2
arrays/bradc/localSlices/nonlocalslice
arrays/bradc/slices/outOfBoundsSlice
arrays/bradc/slices/sliceArray
arrays/bradc/slices/sliceStridedArray
arrays/claridge/arraySizeMismatch
arrays/deitz/part4/test_array_rankchange_error
arrays/deitz/part6/test_bounds1
arrays/deitz/part6/test_bounds2
arrays/waynew/init2
classes/bradc/arrayInClass/overrideDefaultArr
classes/diten/callNilClassesMethod
classes/diten/nilDynamicDispatch
compflags/deitz/test_no_bounds_checking
distributions/bradc/idxToLocale
execflags/bradc/gdbddash/declint2
functions/deitz/iterators/test_zip_check1
functions/deitz/iterators/test_zip_check2
multilocale/bradc/referToLocaleOne
sparse/bradc/outOfBounds
sparse/parallel/sparse-csr-simple-dom-manips
studies/590o/blerner/nilClassCheck
studies/hpcc/FFT/bradc/fft-zip
types/enum/diten/varEnumOutOfBounds
types/range/deitz/test_range_iterate_error2
