==============================================
Chapel Computer Language Benchmarks Game Codes
==============================================

This directory contains Chapel versions of the Computer Language
Benchmarks Game programs (http://benchmarksgame.alioth.debian.org/)
written in Chapel.  In these versions, we strive for a combination of
elegant use of Chapel and performance.  Most of these codes are
written for serial or parallel single-locale (shared-memory)
execution, following the lead of the competition.

At present, this directory contains the following codes:

    binarytrees.chpl    : Allocates and deallocates many, many binary trees
    chameneosredux.chpl : Simulates meetings between color-changing Chameneos
    fannkuchredux.chpl  : Performs many operations on small arrays
    mandelbrot.chpl     : Plots the mandelbrot set [-1.5-i,0.5+i] on a bitmap
    meteor.chpl         : Performs a parallel search for all solutions to a
                          puzzle
    meteor-fast.chpl    : A less readable, but much faster version of meteor.
    nbody.chpl          : Performs an n-body simulation of the Jovian planets
    pidigits.chpl       : Computes digits of pi using GMP, if available
    regexdna            : Performs DNA matching
    spectralnorm.chpl   : Calculates the spectral norm of an infinite matrix
    threadring.chpl     : Passes a token between a large number of threads

Over time, we plan to create versions of all the benchmarks and to
enter Chapel into the competition.  Draft versions of other benchmarks
that have not yet been promoted to the release can be found in our git
repository under the test/studies/shootout/ directory.

The provided Makefile can be used to compile the programs, or they can
be run in correctness or performance modes using the Chapel testing
system (see $CHPL_HOME/util/sub_test).

Note that chameneosredux.chpl has non-deterministic output.


Future work / TODO
==================
The following are a list of planned improvements to Chapel and/or our
implementations that would benefit the codes:


mandelbrot.chpl
---------------
o extend the dynamic() iterators for ranges to support domains and
  collapse the two nested loops into a single loop over a 2D domain.

o add an 'unroll' capability to loops and use it to unroll the 'for
  off ...' loop which is about twice as fast with manual unrolling.
  (we weren't willing to unroll it manually in this version)

o have the compiler automatically optimize writes to 'stdout' in
  serial code segments to avoid the need to manually get a lock-free
  channel to it.

o explore expressing the complex values using Chapel's 'complex' type,
  even if it means plucking C.re and C.im out and operating on them
  directly rather than using higher-level complex operations to avoid
  overheads associated with using cleaner complex operations.


pidigits.chpl
-------------
o promote mpz_t types to a record-based implementation with:
  - a better name
  - arithmetic operators defined for it
  - automatic memory reclamation when it leaves scope
  - support for native Chapel types rather than exposing C types
    (using safecasts at any downward-facing interfaces)


threadring.chpl
---------------
o map Chapel's sync vars more directly down to Qthreads' sync vars
  to avoid space and time overheads
