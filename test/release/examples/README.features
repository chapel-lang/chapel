==================================
Feature Charts for Chapel Examples
==================================

The following list indicates the primary feature areas that each
example program demonstrates:

./
  hello               : write() function; string literals; unstructured coding
  hello2-module       : config vars; module structure; main() entry point
  hello3-datapar      : forall loop
  hello4-datapar-dist : distributed domain, forall loop
  hello5-taskpar      : task parallelism via coforall loop
  hello6-taskpar-dist : coforall, on clauses, locales

benchmarks/
  hpcc/
    stream     : zippered iteration; standard modules; time/random routines
    stream-ep  : explicit SPMD-style programming and data structures
    ra         : iterators; on-clauses; sync vars
    ra-atomics : iterators; atomic variables and operations on them
    fft        : array slicing; iterators; complex and imaginary values
    ptrans     : 2D arrays; Block-Cyclic distribution; forall loops
    hpl        : 2D array slicing & aliases; linear algebra; Block-Cyclic dist
    variants/
      stream-promoted : promoted/whole-array operations
      ra-cleanloop    : cleaner use of on-clauses -- correct but slower (today)
  lulesh/      : dense and sparse domains; domain-independent computation
  miniMD/
    miniMD     : high-level expression of complex stencil operations
    explicit/  : low-level expression of complex stencil operations 
  shootout/
    binarytrees       : forall loops; iterators; tuples; recursion; classes
    chameneosredux    : atomics; enums; coforall loops; reductions; select
    fannkuchredux     : arrays
    mandelbrot        : uints; multidimensional arrays; bit ops; binary output
    meteor            : coforall loops; forall loops; recursion
    nbody             : tuples; records; inlined functions
    pidigits          : GMP; iterators
    spectralnorm      : reductions; domains; arrays
    threadring        : syncs; coforall loops
  ssca2/       : graph algorithms, generic programming, distributed
                 data structures, replicated distribution

primers/
  arrays         : rectangular domains/arrays; slicing; iteration; reallocation
  arrayVectorOps : vector-like operations on rectangular arrays
  associative    : associative domains and arrays; set operations
  atomics        : atomic variables and operations on them
  chpldoc        : the comment-based documentation generation feature
  classes        : classes and objects; dynamic dispatch; 'this' and 'these'
  distributions  : distributions; Block; Cyclic; Block-Cyclic; Replicated
  domains        : domains and operations on domains
  fileIO         : file I/O of scalars and arrays
  genericClasses : generic classes and objects; generic types
  iterators      : iterators of various styles
  leaderfollower : leader-follower iterators for defining 'forall' behavior
  locales        : multiple locales, on clauses, multi-locale task parallelism
  opaque         : opaque domains and arrays; graph-based data structures
  procedures     : defining and calling procedures in Chapel
  randomNumbers  : use of the standard module Random
  ranges         : ranges; .., #, by operators; range iteration; range slicing
  reductions     : minloc, maxloc, + and && array reductions
  slices         : array slicing and reindexing; iterators
  sparse         : sparse domains and arrays; operations on them
  syncsingle     : sync and single variables
  taskParallel   : begin, cobegin, coforall
  timers         : Timer record in Time module
  varargs        : variable argument functions, tuples
  variables      : var, const, param; config; basic inference; .type

programs/
  beer           : 1D domains/arrays; string manipulation; generic functions
  genericStack   : generic classes; nested classes; array reallocation
  jacobi         : 2D domains and arrays; stencil operations; reductions
  linkedList     : nested generic classes; iterators, writeThis methods
  norm           : reductions; function overloading and where clauses; modules
  prodCons       : synchronization variables; task parallelism using cobegin
  quicksort      : bounded task parallelism using cobegin and serial
  tree           : unbounded task parallelism using cobegin
