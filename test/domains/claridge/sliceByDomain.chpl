// this file tests slicing of domains with domains

var D1 = {1..9, 1..9};
var D2 = {5..11, 7..15};

writeln( D1(D2) );
writeln();

// slice various combinations of the following
var t1 = {1..1, 3..3};
var t2 = {1..2, 3..3};
var t3 = {1..1, 3..5};
var t4 = {1..2, 3..5};
var t5 = {1..5, 3..5};
var t6 = {3..5, 1..1};
var t7 = {3..5, 1..2};
var t8 = {3..5, 1..3};
var t9 = {3..5, 3..3};

var p1112= {1..1, 3..3, 5..5};
var p211 = {1..3, 3..3, 5..5};
var p121 = {1..1, 3..5, 5..5};
var p112 = {1..1, 3..3, 5..7};
var p221 = {1..3, 3..5, 5..5};
var p212 = {1..3, 3..3, 5..7};
var p122 = {1..1, 3..5, 5..7};
var p222 = {1..3, 3..5, 5..7};

var p1113= {3..3, 5..5, 7..7};
var p311 = {1..3, 5..5, 7..7};
var p131 = {3..3, 3..5, 7..7};
var p113 = {3..3, 5..5, 5..7};
var p331 = {1..3, 3..5, 7..7};
var p313 = {1..3, 5..5, 5..7};
var p133 = {3..3, 3..5, 5..7};
var p333 = {1..3, 3..5, 5..7};

proc testit(d1,d2) { writeln( d1, " ", d2, " -> ", d1(d2) ); }

// 81 combos of tN,tM
testit(t1,t1);
testit(t1,t2);
testit(t1,t3);
testit(t1,t4);
testit(t1,t5);
testit(t1,t6);
testit(t1,t7);
testit(t1,t8);
testit(t1,t9);
testit(t2,t1);
testit(t2,t2);
testit(t2,t3);
testit(t2,t4);
testit(t2,t5);
testit(t2,t6);
testit(t2,t7);
testit(t2,t8);
testit(t2,t9);
testit(t3,t1);
testit(t3,t2);
testit(t3,t3);
testit(t3,t4);
testit(t3,t5);
testit(t3,t6);
testit(t3,t7);
testit(t3,t8);
testit(t3,t9);
testit(t4,t1);
testit(t4,t2);
testit(t4,t3);
testit(t4,t4);
testit(t4,t5);
testit(t4,t6);
testit(t4,t7);
testit(t4,t8);
testit(t4,t9);
testit(t5,t1);
testit(t5,t2);
testit(t5,t3);
testit(t5,t4);
testit(t5,t5);
testit(t5,t6);
testit(t5,t7);
testit(t5,t8);
testit(t5,t9);
testit(t6,t1);
testit(t6,t2);
testit(t6,t3);
testit(t6,t4);
testit(t6,t5);
testit(t6,t6);
testit(t6,t7);
testit(t6,t8);
testit(t6,t9);
testit(t7,t1);
testit(t7,t2);
testit(t7,t3);
testit(t7,t4);
testit(t7,t5);
testit(t7,t6);
testit(t7,t7);
testit(t7,t8);
testit(t7,t9);
testit(t8,t1);
testit(t8,t2);
testit(t8,t3);
testit(t8,t4);
testit(t8,t5);
testit(t8,t6);
testit(t8,t7);
testit(t8,t8);
testit(t8,t9);
testit(t9,t1);
testit(t9,t2);
testit(t9,t3);
testit(t9,t4);
testit(t9,t5);
testit(t9,t6);
testit(t9,t7);
testit(t9,t8);
testit(t9,t9);
writeln();

// 256 combos of pNNN,pMMM
testit(p1112,p1112);
testit(p1112,p211);
testit(p1112,p121);
testit(p1112,p112);
testit(p1112,p221);
testit(p1112,p212);
testit(p1112,p122);
testit(p1112,p222);
testit(p1112,p1113);
testit(p1112,p311);
testit(p1112,p131);
testit(p1112,p113);
testit(p1112,p331);
testit(p1112,p313);
testit(p1112,p133);
testit(p1112,p333);
testit(p211,p1112);
testit(p211,p211);
testit(p211,p121);
testit(p211,p112);
testit(p211,p221);
testit(p211,p212);
testit(p211,p122);
testit(p211,p222);
testit(p211,p1113);
testit(p211,p311);
testit(p211,p131);
testit(p211,p113);
testit(p211,p331);
testit(p211,p313);
testit(p211,p133);
testit(p211,p333);
testit(p121,p1112);
testit(p121,p211);
testit(p121,p121);
testit(p121,p112);
testit(p121,p221);
testit(p121,p212);
testit(p121,p122);
testit(p121,p222);
testit(p121,p1113);
testit(p121,p311);
testit(p121,p131);
testit(p121,p113);
testit(p121,p331);
testit(p121,p313);
testit(p121,p133);
testit(p121,p333);
testit(p112,p1112);
testit(p112,p211);
testit(p112,p121);
testit(p112,p112);
testit(p112,p221);
testit(p112,p212);
testit(p112,p122);
testit(p112,p222);
testit(p112,p1113);
testit(p112,p311);
testit(p112,p131);
testit(p112,p113);
testit(p112,p331);
testit(p112,p313);
testit(p112,p133);
testit(p112,p333);
testit(p221,p1112);
testit(p221,p211);
testit(p221,p121);
testit(p221,p112);
testit(p221,p221);
testit(p221,p212);
testit(p221,p122);
testit(p221,p222);
testit(p221,p1113);
testit(p221,p311);
testit(p221,p131);
testit(p221,p113);
testit(p221,p331);
testit(p221,p313);
testit(p221,p133);
testit(p221,p333);
testit(p212,p1112);
testit(p212,p211);
testit(p212,p121);
testit(p212,p112);
testit(p212,p221);
testit(p212,p212);
testit(p212,p122);
testit(p212,p222);
testit(p212,p1113);
testit(p212,p311);
testit(p212,p131);
testit(p212,p113);
testit(p212,p331);
testit(p212,p313);
testit(p212,p133);
testit(p212,p333);
testit(p122,p1112);
testit(p122,p211);
testit(p122,p121);
testit(p122,p112);
testit(p122,p221);
testit(p122,p212);
testit(p122,p122);
testit(p122,p222);
testit(p122,p1113);
testit(p122,p311);
testit(p122,p131);
testit(p122,p113);
testit(p122,p331);
testit(p122,p313);
testit(p122,p133);
testit(p122,p333);
testit(p222,p1112);
testit(p222,p211);
testit(p222,p121);
testit(p222,p112);
testit(p222,p221);
testit(p222,p212);
testit(p222,p122);
testit(p222,p222);
testit(p222,p1113);
testit(p222,p311);
testit(p222,p131);
testit(p222,p113);
testit(p222,p331);
testit(p222,p313);
testit(p222,p133);
testit(p222,p333);
testit(p1113,p1112);
testit(p1113,p211);
testit(p1113,p121);
testit(p1113,p112);
testit(p1113,p221);
testit(p1113,p212);
testit(p1113,p122);
testit(p1113,p222);
testit(p1113,p1113);
testit(p1113,p311);
testit(p1113,p131);
testit(p1113,p113);
testit(p1113,p331);
testit(p1113,p313);
testit(p1113,p133);
testit(p1113,p333);
testit(p311,p1112);
testit(p311,p211);
testit(p311,p121);
testit(p311,p112);
testit(p311,p221);
testit(p311,p212);
testit(p311,p122);
testit(p311,p222);
testit(p311,p1113);
testit(p311,p311);
testit(p311,p131);
testit(p311,p113);
testit(p311,p331);
testit(p311,p313);
testit(p311,p133);
testit(p311,p333);
testit(p131,p1112);
testit(p131,p211);
testit(p131,p121);
testit(p131,p112);
testit(p131,p221);
testit(p131,p212);
testit(p131,p122);
testit(p131,p222);
testit(p131,p1113);
testit(p131,p311);
testit(p131,p131);
testit(p131,p113);
testit(p131,p331);
testit(p131,p313);
testit(p131,p133);
testit(p131,p333);
testit(p113,p1112);
testit(p113,p211);
testit(p113,p121);
testit(p113,p112);
testit(p113,p221);
testit(p113,p212);
testit(p113,p122);
testit(p113,p222);
testit(p113,p1113);
testit(p113,p311);
testit(p113,p131);
testit(p113,p113);
testit(p113,p331);
testit(p113,p313);
testit(p113,p133);
testit(p113,p333);
testit(p331,p1112);
testit(p331,p211);
testit(p331,p121);
testit(p331,p112);
testit(p331,p221);
testit(p331,p212);
testit(p331,p122);
testit(p331,p222);
testit(p331,p1113);
testit(p331,p311);
testit(p331,p131);
testit(p331,p113);
testit(p331,p331);
testit(p331,p313);
testit(p331,p133);
testit(p331,p333);
testit(p313,p1112);
testit(p313,p211);
testit(p313,p121);
testit(p313,p112);
testit(p313,p221);
testit(p313,p212);
testit(p313,p122);
testit(p313,p222);
testit(p313,p1113);
testit(p313,p311);
testit(p313,p131);
testit(p313,p113);
testit(p313,p331);
testit(p313,p313);
testit(p313,p133);
testit(p313,p333);
testit(p133,p1112);
testit(p133,p211);
testit(p133,p121);
testit(p133,p112);
testit(p133,p221);
testit(p133,p212);
testit(p133,p122);
testit(p133,p222);
testit(p133,p1113);
testit(p133,p311);
testit(p133,p131);
testit(p133,p113);
testit(p133,p331);
testit(p133,p313);
testit(p133,p133);
testit(p133,p333);
testit(p333,p1112);
testit(p333,p211);
testit(p333,p121);
testit(p333,p112);
testit(p333,p221);
testit(p333,p212);
testit(p333,p122);
testit(p333,p222);
testit(p333,p1113);
testit(p333,p311);
testit(p333,p131);
testit(p333,p113);
testit(p333,p331);
testit(p333,p313);
testit(p333,p133);
testit(p333,p333);
writeln();

// ... and a bit of array slicing

var X1 = {1..3, 1..4};
var X2 = {2..2, 3..4};
var X3 = {1..2, 3..4};
var A: [X1] (int,int) = [(i,j) in X1] (i,j);
writeln( A );
writeln( A(X2) );
writeln( A(X3) );
