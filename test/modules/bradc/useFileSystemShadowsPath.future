bug: functions that are converted to methods are not scoped properly

This seems to be another instance of a bad scoping issue in the
compiler, similar to Kyle's test/functions/kbrady/proc_scoping.chpl.
In particular, the 'use' of 'FileSystem' seems to inject a method
named 'path' into the scope (perhaps a compiler-created setter/getter
for a field named 'path'?) which ends up shadowing the local 'path'
argument.  It seems that methods should never shadow local variables
to me.

Somewhat frustratingly, I have not yet been able to identify the
source of the 'path' method/field yet in the standard/internal modules
(all I can find are local variables and arguments named 'path',
neither of which should create a symbol of this name nor shadow an
argument).  My current best guess is that the compiler is creating a
record to bundle up some variables or arguments for some purpose and
the getter/setter relate to that.  I haven't dumped the IR yet to look
into that.  

Also interesting/frustrating: I have not yet been able to create a
small standalone example that reproduces the issue.  My best attempt
was the following:

module M1 {
  record R {
    var baz: int;
  }

  var myR: R;
  myR.baz = 2;
  writeln("myR is: ", myR);
}

module M2 {
  proc bar(baz: string) {
    writeln("In bar, baz is: ", baz);
  }

  proc foo(baz: string) {
    use M1;

    bar(baz);
  }

  proc main() {
    foo(".");
    writeln("Done!");
  }
}




