/*
 * Copyright 2020 Hewlett Packard Enterprise Development LP
 * Copyright 2004-2019 Cray Inc.
 * Other additional copyright holders may be indicated within.
 *
 * The entirety of this work is licensed under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <reflection_class.h>
#include <message.h>
#include <helpers.h>
#include <enum.h>

namespace chapel {

  ReflectionClassGenerator::ReflectionClassGenerator(const FileDescriptor* file)
      : file_(file) {
    module_name = GetModuleName(file);
  }

  ReflectionClassGenerator::~ReflectionClassGenerator() {
  }

  void ReflectionClassGenerator::Generate(Printer* printer) {
    WriteIntroduction(printer);

    printer->Print("module $module_name$ {\n", "module_name", module_name);
    printer->Print("\n");
    printer->Indent();

    printer->Print(
      "use ProtobufProtocolSupport;\n"
      "use List;\n");
    printer->Print("\n");
    
    // write children: Enums
    if (file_->enum_type_count() > 0) {
      printer->Print("// Enums\n");
      for (int i = 0; i < file_->enum_type_count(); i++) {
        EnumGenerator enumGenerator(file_->enum_type(i));
        enumGenerator.Generate(printer);
        printer->Print("\n");
      }
    }

    // write children: Messages
    if (file_->message_type_count() > 0) {
      printer->Print("// Messages\n");
      for (int i = 0; i < file_->message_type_count(); i++) {
        MessageGenerator messageGenerator(file_->message_type(i));
        messageGenerator.Generate(printer);
        printer->Print("\n");
      }
    }

    // write grand children: Message nested types
    // handled here since nested records and enum declaration in records
    // are not yet supported in Chapel.
    printer->Print("// Nested Types\n");
    for (int i = 0; i < file_->message_type_count(); i++) {
      const Descriptor* descriptor = file_->message_type(i);

      if (HasNestedGeneratedTypes(descriptor)) {
        for (int i = 0; i < descriptor->enum_type_count(); i++) {
          printer->Print("// Parent $parent$\n",
                          "parent", descriptor->name());
          EnumGenerator enumGenerator(descriptor->enum_type(i));
          enumGenerator.Generate(printer);
          printer->Print("\n");
        }

        for (int i = 0; i < descriptor->nested_type_count(); i++) {
          printer->Print("// Parent $parent$\n",
                          "parent", descriptor->name());
          MessageGenerator messageGenerator(descriptor->nested_type(i));
          messageGenerator.Generate(printer);
          printer->Print("\n");
        }
      }
    }

    printer->Outdent();
    printer->Print("}\n");

  }

  void ReflectionClassGenerator::WriteIntroduction(Printer* printer) {
    printer->Print(
      "/*\n"
      "   Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
      "   source: $file_name$\n"
      "*/\n"
      "\n",
      "file_name", file_->name());
  }

  bool ReflectionClassGenerator::HasNestedGeneratedTypes(const Descriptor* descriptor) {
    if (descriptor->enum_type_count() > 0 || descriptor->nested_type_count() > 0) {
      return true;
    }
    return false;
  }

}  // namespace chapel
