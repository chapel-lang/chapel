# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.h} 
code_name {.cxx}
comment {/*
 * Copyright 2016 Cray Inc.
 * Other additional copyright holders may be indicated within.
 *
 * The entirety of this work is licensed under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
} {in_source in_header
} 

decl {\#include <FL/Fl_File_Chooser.H>} {private local
} 

decl {\#include <FL/Fl_Multiline_Output.H>} {public local
} 

decl {\#include <FL/Fl_Sys_Menu_Bar.H>} {public local
} 

decl {\#include <FL/fl_ask.H>} {private local
} 

decl {\#include <FL/Fl_Color_Chooser.H>} {private local
} 

decl {\#include <unistd.h>} {public local
} 

decl {\#include "ViewField.h"} {public global
} 

decl {\#include "DataModel.h"} {public global
} 

decl {\#include "InfoBar.h"} {public local
} 

decl {\#include "LocaleWin.h"} {public global
} 

decl {\#include "CommWin.h"} {public local
} 

decl {\#include "ConcurrencyWin.h"} {public local
} 

decl {\#include "Settings.h"} {public local
} 

decl {DataModel VisData;} {public local
} 

Function {mainWinCallback(Fl_Widget *)} {open return_type void
} {
  code {if (VisSettings.save_WH) {
   VisSettings.saveToFile();
}
exit(1);} {}
} 

Function {make_locale_window(int locnum, localeData *locInfo)} {open C
} {
  Fl_Window {} {open
    xywh {0 123 180 130} type Double color 7 hide resizable
    class LocaleWin size_range {180 120 0 0}
  } {
    Fl_Box Locale_Title {
      label {Locale }
      private xywh {0 0 180 25}
    }
    Fl_Output cpuInfo {
      label { }
      private xywh {0 25 180 105} labeltype NO_LABEL resizable
      class Fl_Multiline_Output
    }
  }
  code {w->setMembers(Locale_Title,cpuInfo,locInfo,locnum);
w->updateWin(locInfo);} {}
} 

Function {make_comm_window(int fromLn, int toLn, struct commData *commdata)} {open
} {
  Fl_Window {} {open
    xywh {1454 216 180 120} type Double color 7 hide resizable
    class CommWin
  } {
    Fl_Box Comm_Title {
      label Comm
      private xywh {0 0 180 25}
    }
    Fl_Output commInfo {
      label { }
      private xywh {0 25 180 95} labeltype NO_LABEL resizable
      class Fl_Multiline_Output
    }
  }
  code {w->setMembers(Comm_Title, commInfo, commdata, fromLn, toLn);
w->updateWin(commdata);} {}
} 

Function {make_concurrency_window(long locNum, long tagNum)} {open return_type {ConcurrencyWin *}
} {
  Fl_Window {} {open
    xywh {1300 177 500 600} type Double color 7 hide resizable
    class ConcurrencyWin
  } {
    Fl_Box title {
      label Concurrency
      private xywh {0 0 500 30} box DOWN_FRAME
    }
    Fl_Scroll ConcScroll {open
      private xywh {0 30 500 570} box DOWN_BOX color 7 resizable
    } {
      Fl_Box scrollData {
        private xywh {2 32 460 900} box FLAT_BOX color 7 resizable
        class ConcurrencyData
      }
    }
  }
  code {w->setMembers(title, ConcScroll, scrollData);
w->updateData(locNum, tagNum);
return w;} {}
} 

Function {make_setting_window()} {open
} {
  Fl_Window SettingsWin {
    label Settings open
    xywh {1297 787 560 225} type Double color 7
    class Settings visible
  } {
    Fl_Button {} {
      label Cancel
      callback {SettingsWin->copyIn();
SettingsWin->hide();}
      xywh {55 155 105 25}
    }
    Fl_Button {} {
      label Save
      callback {SettingsWin->copyOut();
SettingsWin->hide();
DbgView->redrawAllWindows();
VisSettings.saveToFile();}
      xywh {200 155 105 25}
    }
    Fl_Button {} {
      label {Use for this run only}
      callback {bool oldWH = VisSettings.save_WH;
SettingsWin->copyOut();
VisSettings.save_WH = oldWH;
SettingsWin->hide();
DbgView->redrawAllWindows();}
      xywh {350 155 170 25}
    }
    Fl_Button {} {
      label {Set Cool Color}
      callback {SettingsWin->setCoolColor();}
      xywh {55 45 120 25}
    }
    Fl_Button {} {
      label {Set Hot Color}
      callback {SettingsWin->setHotColor();}
      xywh {350 45 120 25}
    }
    Fl_Button {} {
      label {Reset Heat Colors}
      callback {SettingsWin->reset();}
      xywh {350 100 165 25}
    }
    Fl_Check_Button saveWH {
      label {  Restore main window size}
      callback {SettingsWin->toggleSaveWH();
saveWH->value(SettingsWin->getSaveWH());}
      xywh {55 100 215 25} type Normal box FLAT_BOX down_box DOWN_BOX
      code0 {saveWH->value(SettingsWin->getSaveWH());}
    }
  }
} 

decl {SettingsData VisSettings;} {public local
} 

Function {} {open
} {
  Fl_Window MainWindow {
    label chplvis open
    xywh {39 273 500 590} type Double color 7 hide resizable size_range {500 590 0 0}
  } {
    Fl_Menu_Bar MainMenuBar {open
      xywh {0 0 500 20} color 55
      class Fl_Sys_Menu_Bar
    } {
      Submenu {} {
        label File open
        xywh {0 0 70 21}
      } {
        MenuItem {} {
          label Open
          callback {char *selfile = fl_file_chooser("Open File", "*-0", "", 0);

if (selfile) {
   // User didn't cancel
   if (!VisData.LoadData(selfile, false)) {
      return;
   }
   DbgView->setNumLocales(VisData.NumLocales());
   DbgView->makeTagsMenu();
   DbgView->selectData(DataModel::TagALL);
   Info->setFileName(selfile);
   Info->clearTagName();
   MainWindow->redraw();
}}
          xywh {0 0 34 21} shortcut 0x4006f
        }
        MenuItem {} {
          label Settings
          callback {if (!SettingsWin)
  make_setting_window();
SettingsWin->show();}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Quit
          callback {if (VisSettings.save_WH) {
   VisSettings.saveToFile();
}
exit(0);}
          xywh {0 0 34 21} shortcut 0x40071
        }
      }
      Submenu {} {
        label Layout open
        xywh {0 0 70 21} hide deactivate
      } {
        MenuItem {} {
          label Ellipse
          tooltip {Only choice at this time} xywh {0 0 34 21}
        }
      }
      Submenu {} {
        label Windows open
        xywh {0 0 62 20}
      } {
        MenuItem {} {
          label {Show All Comm}
          callback {DbgView->showAllCommWindows();}
          xywh {0 0 31 20}
        }
        MenuItem {} {
          label {Hide All Comm}
          callback {DbgView->hideAllCommWindows();}
          xywh {0 0 31 20}
        }
        MenuItem {} {
          label {Show All Locale}
          callback {DbgView->showAllLocaleWindows();}
          xywh {0 0 31 20}
        }
        MenuItem {} {
          label {Hide All Locale}
          callback {DbgView->hideAllLocaleWindows();}
          xywh {0 0 31 20}
        }
      }
      Submenu {} {
        label Data open
        xywh {0 0 70 21}
      } {
        MenuItem {} {
          label Locales
          xywh {0 0 31 20} labeltype ENGRAVED_LABEL deactivate divider
        }
        MenuItem {} {
          label {Show Tasks}
          callback {DbgView->showTasks();
MainWindow->redraw();}
          xywh {0 0 36 21}
        }
        MenuItem {} {
          label {Show CPU}
          callback {DbgView->showCpu();
MainWindow->redraw();}
          xywh {0 0 36 21}
        }
        MenuItem {} {
          label {Show Clock}
          callback {DbgView->showClock();
MainWindow->redraw();}
          xywh {0 0 31 20}
        }
        MenuItem {} {
          label {Show Concurrency}
          callback {DbgView->showConcurrency();
MainWindow->redraw();}
          xywh {0 0 31 20} divider
        }
        MenuItem {} {
          label Communication
          xywh {0 0 31 20} labeltype ENGRAVED_LABEL deactivate divider
        }
        MenuItem {} {
          label {Show Count}
          callback {DbgView->showComms();
MainWindow->redraw();}
          xywh {0 0 36 21}
        }
        MenuItem {} {
          label {Show Size}
          callback {DbgView->showDsize();
MainWindow->redraw();}
          xywh {0 0 36 21}
        }
      }
    }
    Fl_Box Info {
      xywh {0 20 500 70} box FLAT_BOX color 7
      class InfoBar
    }
    Fl_Box DbgView {
      xywh {0 90 500 500} box FLAT_BOX color 55 selection_color 48 resizable
      class ViewField
    }
  }
  code {VisSettings.readFromFile();
if (argc > 1 && argv[1][1] != '-') {
    //printf ("argv[1] is %s\\n", argv[1]);
    if (!VisData.LoadData(argv[1],true)) {
       exit(1);
    }
    DbgView->setNumLocales(VisData.NumLocales());
    DbgView->makeTagsMenu();
    DbgView->selectData(DataModel::TagALL);
    Info->setFileName(argv[1]);
    argc--;
    argv++;
} else {
   // look for .Vdebug/.Vdebug-0
   if (access(".Vdebug/.Vdebug-0", R_OK) == 0 &&
       VisData.LoadData(".Vdebug/.Vdebug-0",false)) {
      DbgView->setNumLocales(VisData.NumLocales());
      DbgView->makeTagsMenu();
      DbgView->selectData(DataModel::TagALL);
      Info->setFileName(".Vdebug (default)");
   }
}
MainWindow->callback(mainWinCallback);
if (VisSettings.save_WH) {
   MainWindow->size(VisSettings.mainW,VisSettings.mainH);
   MainWindow->redraw();
}} {selected
  }
} 
