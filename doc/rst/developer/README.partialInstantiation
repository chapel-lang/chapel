=============================================
Support for partial instantiation of generics
=============================================

Overview
--------

There are several situations where it is desirable to instantiate only the
signature of a generic function without also instantiating the body, setter,
and other associated portions of the AST.  One such example is when resolving
the target of a call site.  Here, the only portions of the function that need
to be instantiated are the formal arguments and the where clause; this is
enough information to allow resolution to occur.  (Note: additional child nodes
are instantiated because they are used in AST transformations that occur during
the function resolution process.)  By not unnecessarily instantiating the body
of generic functions we can save the time and memory that would be used doing
so.

Another situation where partial instantiation is important is when resolving
constrained generics.  In this case, we wish to deal with the functions body
and signature independently, allowing the body to be resolved and instantiated
separately, as well as only requiring model lookup when a constrained generic
is chosen as the best candidate for a call site.

The partial instantiation process simply splits the existing
`Symbol::innerCopy` and `instantiate` functions into two separate pieces each.
The `innerCopy` function is split into `partialCopy` and `finalizeCopy`; the
`instantiate` function is split into `instantiateSignature` and
`instantiateBody`.  The `instantiateSignature` function uses `partialCopy` to
copy and instantiate enough of the generic function's AST to allow it to go
through the candidate filtering and disambiguation process in the function
resolution pass.  Once a best candidate has been determined by the
`resolveNormalCall` method, `instantiateBody` is called on the call target if
that function is a partially instantiated function.

Details
-------

To allow partial instantiation to work the `instantiate_tuple` function was
also split into two pieces.  The first of these new functions adds formals to
the generic's signature after recording the number of formals previously
present.  This information is then used when instantiating the body of the
generic to insert the necessary field setting calls for the return tuple value.

Performing the partial copy involves the following steps:

* Copying the function's flags
* Copying the formal arguments
* Marking the source of the partial copy for use during finalization
* Copying the astloc
* Copying the return type
* Copying the thisTag
* Copying the cname
* Copying the _outer expr
* Copying the retTag
* Copying instantiatedFrom
* Copying instantiationPoint
* Copying numPreTupleFormals
* Copying the _this symbol, which may be defined in the formal arguments or the
  body of the function.
* Copying the where clause
* Copying the retExprType
* Making a copy of the return symbol available without copying the whole body.
  This symbol may be a formal argument, the _this symbol, or another symbol
  defined in the function's body.
  * This is necessary because the code used to evaluate the where clause
    accesses the return symbol of the parent function.  This appears to be
    caused by the same code being used to resolve function bodies and where
    clauses.
* Updating the symbols in the partial copy
* Marking the function symbol as being a partial copy

Finalizing a partial copy involves:

* Finalizing the copy of the partial copy source
* Copying the setter
* Copying the function's body if it hasn't been replaced during the resolution
  process
* Inserting any nodes into the new body that may have been added by the
  expansion of var args
* Ensuring that the correct _this symbol is used in the new copy of the body
* Ensuring that the correct return symbol is used in the new copy of the body
* Fixing broken parent-pointers resulting from the copying of sub-expressions
* Updating symbols from the newly copied sub-expressions
* Removing information specific to the partial copying process

The instantiation of the body of a function involves relatively few steps:

* Finalize the coping of the function
* Add the calls necessary to set the fields of any return tuple type
