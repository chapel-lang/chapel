.. _record-copies:

When Do Record and Array Copies Occur
=====================================

Status:
  Partially Implemented

Authors:
  Michael Ferguson

Abstract
--------

Introduction
------------

This CHIP describes when record and array copies occur in Chapel across
several versions.

Note that Chapel 1.14 and earlier uses array reference counting but that
is no longer necessary because of changes in the language (see
http://chapel.cray.com/docs/latest/language/evolution.html#lexical-scoping
).

Function Return Behavior
++++++++++++++++++++++++

In Chapel 1.13, records and arrays have different behavior when returned from a
function. In particular, records return by value - but arrays return by
reference. The following example shows the issue.

.. code-block:: chapel

  record R {
    var element:int;
  }

  var globalArray:[1..1] int;
  var globalRecord:R;

  proc returnArray() {
    return globalArray;
  }
  proc returnRecord() {
    return globalRecord;
  }

  writeln("globalArray is ", globalArray);
  writeln("setting returnArray()[1] to 2");

  returnArray() = otherArray;
  // or, equivalently returnArray()[1] = 2;
  // both of these statements end up modifying globalArray

  writeln("globalArray is now ", globalArray);

  writeln(globalArray);

  writeln("globalRecord is ", globalRecord);
  writeln("setting returnRecord().element to 2");

  //returnRecord() = otherRecord; // compile error: illegal lvalue in assignment

  // here is a similar statement that currently compiles
  // and which does not modify globalRecord.
  returnRecord().element = 2;

  writeln("globalRecord is now ", globalRecord);

On Chapel 1.14 and earlier, the above program has output

::

  globalArray is 0
  setting returnArray()[1] to 2
  globalArray is now 2
  2
  globalRecord is (element = 0)
  setting returnRecord().element to 2
  globalRecord is now (element = 0)

This output indicates that modifying the array returned from `returnArray`
causes a modification to `globalArray` - in other words, the array elements
are returned by reference. In contrast, modifying the value returned by
`returnRecord` does not result in a modification to `globalRecord`.  The record
is returned by value.

Note though that in Chapel, both arrays and records are `value types` in that
when you initialize one variable with another, the elements are copied. E.g.

.. code-block:: chapel

  var A:[1..1] int;
  var B = A;        // initializes B to a copy of A
  B[1] = 1;
  writeln(A[1]);

outputs `0` because `B` is initialized to a copy of `A`. Compare with a class
type - which is not a value type. There, a similar program would output 1.

Description
-----------

Preliminaries
+++++++++++++

Record Initialization and Destruction
*************************************

Record initialization and destruction are described in CHIP 10.  For the
purposes of this document, it suffices to know that records are destroyed
when they go out of scope and at that time a `deinit` method is called.
A typical `deinit` method would free memory used by a pointer field.

Copy and move concepts
**********************

This document uses the terminology `copy` and `move`. These terms
describe how a Chapel program initializes a record variable based upon an
existing record variable. Both `copy` and `move` create a new variable
from an initial variable.

After the `copy` initialization, both the new variable and the initial
variable exist separately. Generally speaking, they can both be modified.
However, they must not refer to the same fields. That is, changing a
field in the new record variable should not change the corresponding
field in the initial record variable.

A `move` is when a record variable changes storage location. It is
similar to a `copy` initialization but it represents a transfer rather than
duplication. In particular, the initial record is no longer available
after the `move`.  A `move` can be thought of as an optimized form a
`copy` followed by destruction of the initial record.  After a `move`,
there is only one record variable - where after a `copy` there are two.

Record authors can adjust copy
******************************

Record authors can specify code to run on a `copy`.  For example, a
record that contains a pointer to a class instance can operate as though
the fields in the class instance were stored directly in the record by
copying the class instance in each record `copy` initialization. If a
customizable `copy` were not available, the record author would be
forced to support the case where two record variables point to the same
class instance - or to require that users of that record include
explicitly `clone` method calls (for example).

Different languages make a different choice here. C++ and D allow record
authors to implement some part of a `copy`, but Rust and Swift do not.

It is not yet decided to what extent record authors can customize a
`move`.

Copy and move initialization
****************************

Record copy semantics in Chapel are a combination of two factors.

 1) The compiler adds `copy` or `move` initialization
 2) The record author implements certain methods
    to specify how the record should react to `copy` or `move`.

Copy initialization
^^^^^^^^^^^^^^^^^^^

The document :ref:`initialization` provides a canonical example of
when `copy initialization` occurs:

.. code-block:: chapel

  var x:R = ...;
  var y:R = x;    // copy initialization occurs here
  ... uses of both x and y ...;

Customizing copy with a Copy Initializer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Copy initialization for records can be customized by creating a record
copy constructor. For example:

.. code-block:: chapel

  record R {
    proc R.init(copyFrom:R) { }
  }


Move initialization
^^^^^^^^^^^^^^^^^^^

Here is an example of when the compiler uses `move` initialization:

.. code-block:: chapel

  record R { ... }
  proc makeR() {
    return new R(...);
  }
  var x = makeR();    // move initialization occurs here


Rules for when copy or move initialization occur
++++++++++++++++++++++++++++++++++++++++++++++++

The following sections of this document describe situations in which a `copy`
or a `move` is added by the compiler to implement some kind of initialization.
Now, it might seem that the compiler could choose a variety of strategies to
implement one of these initializations. In particular, copy initialization
could be default-initialization followed by assignment. Likewise, move
initialization could be copy initialization followed by destruction of the
source variable.

The language needs to provide a minimum
level of optimization and also provide some reproducibility in this area.
Therefore, the semantics described below should be interpreted to be the
behavior the Chapel compiler provides in a baseline configuration (e.g. with
`--baseline`).

It may or may not be worthwhile to allow the compiler to further optimize
these cases, by replacing some assignments with `copy` initializations,
or by replacing some `copy` initializations with `move` initialization.
On the one hand, there is an advantage to making programs always behave
the same in this regard. On the other, allowing some flexibility here can
allow programs to perform better and still operate as expected.

This is a complicated issue because it impacts how Chapel users can
understand Chapel programs. If further optimization is allowed, it either
needs to be documented in detail in the language specification and always
applied - or, the language specification needs to be somewhat vague about
when `copy` or `move` is used.

.. _copy-move-table:

When one record variable is initialized from another, the compiler must choose
whether to perform `copy initialization` or `move initialization`.

The following table shows in which situations a copy or move initialization is
added. Each row in this table corresponds to a particular use of an expression
`<expr>`. Each column indicates the kind the expression `<expr>`. Blank spaces
indicate that no copy or move initialization is necessary.

========================  ==========  =========  ==========
operation                 value call  local var  global/ref
========================  ==========  =========  ==========
variable initialization   unalias*    copy       copy
value return                          unref*     copy
========================  ==========  =========  ==========

Note, unalias and unref operations are used internally by the
compiler and are not currently intended for user records.

unalias
  creates a copy of a slice or array alias in the event that alias is
  used to declare a new array variable. This is necessary because
  an array slice is implemented as a function call.

unref
  for tuples, converts from a reference to a value version


Here are definitions of the rows and columns:

variable initialization
  means when a new variable is initialized in a variable declaration, in
  a field initialization, or by the in argument intent.

value return
  means that an expression is returned from a function

value call
  means a function call that does not return with ref or const ref return
  intent

local var
  means a use of a function-local variable

global/ref
  means a use of a global variable, an outer scope variable, or a
  reference variable or argument

Historical rules for when copy occurs
+++++++++++++++++++++++++++++++++++++

In Chapel before 1.13, autoCopy and initCopy procedures implemented the
copy operations. They were called according to this table, where

  * auto = autoCopy
  * init = initCopy

========================  ==========  =========  =========  ============  ============
operation                 value call  local var  outer var  ref argument  ref/ref call
========================  ==========  =========  =========  ============  ============
variable initialization   init        init       init       init          init     
call as `in` argument     auto+init   init       init       init          init    
field initialization      auto+auto   auto       auto       auto          auto
value return              auto+auto   auto       auto       auto          auto    
========================  ==========  =========  =========  ============  ============

In Chapel 1.13, the situation was improved to the following table for
strings and user records:

========================  ==========  =========  =========  ============  ============
operation                 value call  local var  outer var  ref argument  ref/ref call
========================  ==========  =========  =========  ============  ============
variable initialization               init       init       init          init     
call as `in` argument     init        init       init       init          init    
field initialization      auto        auto       auto       auto          auto     
value return                                     auto       *             auto    
========================  ==========  =========  =========  ============  ============

  * note that value return, ref argument case seems to be an
    implementation omission.


Example Array Programs
++++++++++++++++++++++

This section discusses many example programs working with arrays in order
to demonstrate the design.

For each of these examples, we will point out when `copy` or `move`
initialization occur and discuss whether the proposed behavior is
different from the current behavior as implemented in Chapel v1.13.

Returning a Local Array
***********************

.. code-block:: chapel

   proc createArray() {
     var retA: [1..10000] real;
     return retA;
   }
   var A = createArray();

`retA` is an `_array`. In the process of returning from `createArray`, a
`move` initialization occurs. A second `move` initialization is used to
initializing the `A` variable and again does not perform a deep copy.
Thus, the desired behavior is achieved: the array is returned without any
copies.

Returning a Global Array with ref Return Intent
***********************************************

.. code-block:: chapel

   var globalArray: [1..10000] real;
   proc returnGlobalArray() ref {
     return globalArray;
   }
   var A = returnGlobalArray();

The process of returning from `returnGlobalArray` does not perform any
copy or move initialization since it returns with `ref` intent. However,
the variable initialization for `A` is using a ref and so is treated the
same as initialization from another variable. That results in a `copy`
operation. That gives in the desired semantics: `A` refers to a
different array than `outerA`.

The current implementation creates an `initCopy` call for the variable
initialization of `A` in this example.


Returning a Global Array
************************

.. code-block:: chapel

   var globalArray: [1..10000] real;
   proc returnGlobalArray() {
     return globalArray;
   }
   var A = returnGlobalArray();

In this case, returnGlobalArray creates a copy of globalArray and
returns it. Then, this A is `move` initialized with this copy.

Returning an argument
*********************

.. code-block:: chapel

  var A:[1..3] int;

  proc f(arg) {
    return arg;
  }

  writeln(f(A));

As with the previous example, the function `f` creates a copy
of the argument before returning it.


Passing a Returned Local Array
******************************

.. code-block:: chapel

   proc createArray() {
     var retA: [1..10000] real;
     return retA;
   }
   proc consumesArray(A:[] real) {
     writeln(A[1]);
   }
   consumesArray(createArray());

As we have previously discussed, the process of returning from
`createArray` would not create a copy. The call to `consumesArray` also
does not create a copy. Note that it would still not make a copy in this
case even if it had the `in` argument intent.  That gives the desired
result: no copy is necessary.

Initializing a Record Field with an Array Argument
**************************************************

.. code-block:: chapel

   record RecordStoringArray{ var field; }
   proc createArray() {
     var retA: [1..10000] real;
     return retA;
   }
   proc consumesArray(A:[] real) {
     return new RecordStoringArray(A);
   }
   consumesArray(createArray());

As before, `createArray` does not call `copy` in the process of
returning. The value returned will be destroyed after the `consumesArray`
call. The call to `consumesArray` does not create a copy since it is
passing by reference. The initialization function for
`RecordStoringArray` takes the argument by `in` intent, consuming
the result of createArray without creating a copy.

* Not yet implemented.

Returning a Local Array with ref Return Intent
**********************************************

.. code-block:: chapel

  proc f() ref {
    var localArray:[1..100] int;
    return localArray; // error: returning local by ref
  }

  writeln(f()[1]);

This example should be a compilation error. Since returning with `ref`
intent has no impact on the lifetime of the returned variable,
`localArray` should continue to be destroyed when `f` exits, so that any
use of the data in the returned value would be a use-after-free.

* Error not yet implemented.

Returning a Slice of a Local Array
**********************************

.. code-block:: chapel

  proc f() {
    var A:[1..4] int;
    return A[2..3];
  }

  var A_slice = f();
  writeln(A_slice);

It is TBD whether this example will be supported or whether it is
a compilation error.

* Error not yet implemented.

Returning a Slice of a Global Array
***********************************

.. code-block:: chapel

  var A:[1..4] int;

  proc f() {
    return A[2..3];
  }

  proc g(x) {
    x[2] = 1;
  }

  g(f());
  writeln(A);

It is TBD what this program should output.

Initializing a Variable with a Slice
************************************

.. code-block:: chapel

  var A:[1..4] int;
  var A_slice = A[2..3];
  A_slice[2] = 1;
  writeln(A);

This program outputs `0 0 0 0`.

Initializing a Variable to Refer to a Slice
*******************************************

.. code-block:: chapel

  var A:[1..4] int;
  var A_slice => A[2..3];
  A_slice[2] = 1;
  writeln(A);

This program outputs `0 1 0 0`.


