=========================
Executing Chapel Programs
=========================

Once you have compiled a Chapel program using the chpl compiler, you
can execute it from the command-line like any other program.  Using
the -h or --help flags will print out help for the executable.  For
example:

     ./a.out --help

This flag lists all of the standard flags that can be used with a
Chapel program, as well as a list of the configuration variables
defined by the program and their types.  If the configuration variable
has been set on the command line, its value is also shown.


-------------------------------
Setting Configuration Variables
-------------------------------

Configuration constants and variables defined in a Chapel program can
have their default values overridden on the command line using the -s
or -- flags.  Either flag takes the name of the configuration variable
followed by an equals character '=' and the value to assign to it.
This value must be a legal Chapel literal for the type of the variable.
(Exception: for a string literal, the surrounding quotes are implicit.)
In our current implementation, no extra spaces may appear between
these elements.  Thus, the general form is:

    ./a.out --<cfgVar>=<val>
or:
    ./a.out -s<cfgVar>=<val>


As an example, compile the hello2-module.chpl example which prints a
user-definable message:

     chpl -o hello2-module $CHPL_HOME/examples/hello2-module.chpl

This program defines a configuration constant -- message -- indicating
the string to print to the console, set to "Hello, world!" by default.
To override the default, you can use:

     ./hello2-module --message='Hello, Chapel users!'
or:
     ./hello2-module -smessage='Hello, Chapel users!'

The default value of a configuration constant or variable can also be
overridden at compilation time with a -s option. (The surrounding
quotes must be provided for a string literal.) For example:

     cd $CHPL_HOME/examples
     chpl -smessage='"Hello from the Chapel compiler"' hello2-module.chpl
or
     chpl -s message="'Hello from the Chapel compiler'" hello2-module.chpl

The compiler-established default can still be overridden when
executing the program, as shown above.

Chapel programs can also accept C-like command line arguments to their
main() procedure in addition to the aforementioned configuration
variables. See $CHPL_HOME/doc/technotes/README.main for more information.


-----------------------------
Setting the Number of Locales
-----------------------------

For multi-locale Chapel executions, the number of locales on which to
execute a program is specified on the executable's command-line.  This
can be set either using the -nl flag, or by assigning to the built-in
numLocales configuration constant using the normal mechanisms.  So, to
execute on four locales, one could use:

    ./a.out -nl 4
or: ./a.out --numLocales=4
or: ./a.out -snumLocales=4

For users running with $CHPL_COMM == none (the default), only one
locale can be used.  See $CHPL_HOME/doc/README.multilocale for more
information about executing on multiple locales.

Multi-locale programs often use a launcher executable to do some
initial command-line checking before spawning the real program, stored
in a second binary named <original_binary_name>_real.  See
README.launcher for more information about the launcher executable.


--------------------------------------
Controlling Degree of Data Parallelism
--------------------------------------

Data parallel operations over ranges, default domains, and default
arrays permit the number of tasks used to implement the data
parallelism to be specified using the following built-in configuration
constants:

  dataParTasksPerLocale       : Number of Chapel tasks to use to execute
                                forall loops (default: number of physical
                                CPUs on the node, which may be reduced by
                                CHPL_RT_NUM_THREADS_PER_LOCALE; in qthreads
                                tasking CHPL_RT_NUM_THREADS_PER_LOCALE can
                                also increase this, up to the number of
                                logical CPUs).

  dataParIgnoreRunningTasks   : If true, always use dataParTasksPerLocale
                                tasks to execute forall loops.  If false,
                                reduce the number of tasks used by the
                                number of tasks already running
                                (default: false).

  dataParMinGranularity       : The number of tasks used to execute forall
                                loops should be reduced such that the number
                                of iterations per task is never less than
                                the specified value (default: 1).

Most Chapel standard distributions also use identically named
constructor arguments to control the degree of data parallelism within
each locale when iterating over its domains and arrays.  The default
values for these arguments are set to the corresponding global
configuration constants.


-------------------------------------------------
Environment Variable Control over Chapel Behavior
-------------------------------------------------

Chapel uses environment variables to control the number of threads used
at execution time and the call stack size, among other things.  In many
cases third-party packages used by Chapel define their own environment
variables to provide the same or similar control.  For Chapel programs,
Chapel environment variables always take precedence over third-party
ones when both control the same thing.  However, a third-party setting
will still override a Chapel default, if those differ.

As an example, the Chapel CHPL_RT_CALL_STACK_SIZE environment variable
will override the Qthreads QT_STACK_SIZE environment variable if both
are set.  However, if only QT_STACK_SIZE is set it will override the
Chapel default call stack size of 8 MiB if it differs from that.

The Chapel environment variables that control execution time behavior
are as follows:

  CHPL_RT_CALL_STACK_SIZE           size of the call stack for a task
                                    (documented below)
  CHPL_RT_MAX_HEAP_SIZE             size of the heap used for dynamic
                                    allocation in multilocale programs
                                    on Cray systems (see README.cray)
  CHPL_RT_NUM_THREADS_PER_LOCALE    number of threads used to execute
                                    tasks (see README.tasks)


---------------------------------
Controlling the Number of Threads
---------------------------------

The following environment variable can be used to change the number of
system threads used by a program.

  CHPL_RT_NUM_THREADS_PER_LOCALE  : Controls the number of threads used
                                    on each locale when running the program.

See README.tasks for more information on the role of this variable in
creating threads and executing tasks for the various tasking layers.


-------------------------------
Controlling the Call Stack Size
-------------------------------

The main Chapel program requires space for its call stack, as does any
task created by it.  This stack space has a fixed size.  It is created
automatically when the program or task starts executing, and remains in
existence until it completes.  The default call stack size is 8 MiB on
Linux-based systems, since this is a common value for the process stack
limit on such systems.  On Cygwin systems the default call stack size is
2 MiB.

The default call stack size may not be appropriate in all cases.  For
programs in which some tasks have large stack frames or deep call trees
it may be too small, leading to stack overflow.  For programs which use
tasks only for data parallelism it may be unnecessarily large.  Stacks
that are unnecessarily large are typically only a problem for programs
in which many tasks (thus their stacks) exist at once, when using a comm
layer that has to pre-register memory.  For the particular case of using
the native runtime communication and tasking layers on Cray X* systems,
further discussion about this can be found in platforms/README.cray.

The following environment variable can be used to change the task call
stack size.

  CHPL_RT_CALL_STACK_SIZE : Size of the call stack for a task.  A plain
                            numeric value indicates bytes.  A suffix can
                            be appended to indicate larger units:
                             'k' or 'K' meaning KiB (2**10 bytes),
                             'm' or 'M' meaning MiB (2**20 bytes), or
                             'g' or 'G' meaning GiB (2**30 bytes).


-----------------------------------------
Controlling the Amount of Non-User Output
-----------------------------------------

The compiler-generated executable supports "verbose" and "quiet" modes
that control the amount of Chapel-generated information printed by the
executable.

Using the --verbose flag (-v for short) will print out extra
information.  For example, it prints out the launcher commands used to
start the program (if any) and causes each locale to print out a
message when it starts executing.

Using the --quiet flag (-q for short) causes run-time warnings that
are printed by default to be suppressed.


--------------
Running in gdb
--------------

The compiler-generated executable has a --gdb flag that can be used to
launch the program within a gdb session.  For best results, make sure
that your program has been compiled using the chpl compiler's -g flag.
For GASNet, launching gdb is supported via the environment variable
CHPL_COMM_USE_GDB.  This will open up a separate xterm running gdb for
each locale.  Note that we only know this to work for the amudprun
launcher.

The utility of this feature depends greatly on your familiarity with
the Chapel generated code.  However, if your program is crashing or
running into a runtime error, you can often determine where that is
taking place by looking at a stack trace within gdb.  

When debugging Chapel, it is useful to know that in generating its
code, the Chapel compiler renames user identifiers.  By default, the
Chapel compiler munges all user identifiers, such that a variable
named 'x' would be code generated as 'x_chpl'.  This munging can be
controlled using the --[no-]munge-user-idents flag (see the 'chpl' man
page for more information).  In some cases, additional munging may be
required or applied that cannot be turned off.  

The net effect of this is that Chapel variables can often be inspected
using "p <name>_chpl" (or "p <name>_chpl<TAB>" in cases where the
compiler has further renamed the variable).  If the
--no-munge-user-idents flag is used, "p <name>" or "p <name><TAB>"
should work in most cases.

Over time, we plan to improve our ability to debug the generated C
code for a Chapel program.  If you find yourself debugging the
generated code a lot and need help or have requests for better
support, please let us know so that we can prioritize accordingly.


------------------------
Flags for Tracking Tasks
------------------------

For certain tasking layers, Chapel supports a few experimental
capabilities for tracking the status of tasks, primarily designed for
use in a single-locale execution.  To enable this capability, your
program must be compiled with the --task-tracking flag.  These flags
add a fair amount of runtime overhead to task-parallel programs. The
flags are as follows:

  -b, --blockreport : when Ctrl-C is entered during a program
                      executing under this flag, it will display a
                      list of where tasks are blocked on a
                      synchronization variable.  Running with this
                      flag will also cause the executable to attempt
                      to automatically detect deadlock for
                      single-locale executions.  Both 'qthreads' and
                      'fifo' tasking support this.

  -t, --taskreport : When Ctrl-C is entered during a program executing
                     under this flag, a list of pending and executing
                     tasks will be printed to the console, giving an
                     indication of which tasks are at which source
                     locations.  Only 'fifo' tasking supports this.


-------------------------------------------
Configuration Constants for Tracking Memory
-------------------------------------------

Chapel supports a number of configuration constants related to dynamic
memory allocation for the compiler-generated executable, currently
designed for use primarily by the development team to track memory
usage in tests.  Please note that our generated code currently
contains memory leaks, so you should not be surprised if your program
requires more memory than it seems it should.

The configuration constants can be set as follows:

  --memTrack        : turns on memory tracking and enables the
                      functions memoryUsed, printMemStat, and
                      printMemTable.  This flag is implied by
                      memStats, memLeaks, and memMax.  To call these
                      functions from a Chapel program, the module
                      Memory must be explicitly used.  The
                      printMemTable function prints out a table of all
                      of the currently allocated memory.  It takes an
                      optional argument to restrict the printing to
                      allocations greater than a threshold (in bytes).
                      The printMemStat function prints out statistic
                      as explained below.  The memoryUsed function
                      returns the number of bytes that are currently
                      allocated.

  --memStats        : makes the call printMemStat() when the
                      program completes, printing out the following
                      statistics: current memory allocated (would be 0
                      if there were no leaks), maximum memory
                      allocated at the same time, total allocated
                      memory, and total freed memory.

  --memLeaks        : prints out a table of all memory that has
                      not been freed when the program completes.  It
                      is similar to printMemTable() except that the
                      entries in the table are aggregated and summarized.

  --memLeaksTable   : calls printMemTable at the end of the program,
                      thus printing out a table of all memory that has
                      not been freed without aggregation.

  --memMax=int(64) :  sets a maximum level of allocatable memory.  If
                      this constraint is violated, the program is
                      terminated.  If unset or 0, there is no
                      simulated maximum.

  --memThreshold=int(64)  : sets a minimum threshold for memory
                            tracking.  Allocations and frees that are
                            smaller than this threshold are ignored.
                            The default is 0.  Note that if memory
                            tracking is off, verbose memory output may
                            include frees that are smaller than this
                            threshold.  Alternatively, if memory
                            tracking is on, the output may omit frees
                            that are larger than this threshold.  This
                            is because the size of the free is only
                            known by looking at the table of tracked
                            memory.

  --memLog=string :   specifies a file where memory reporting is
                      redirected.  It is used to redirect the output
                      generated by printMemTable, by verbose memory
                      reporting (enabled by startVerboseMem and/or
                      startVerboseMemHere), by --memStats, and by
                      --memLeaks.  If memLog is unspecified or the
                      empty string, output is directed to standard
                      out.  For multi-locale runs, a dot and the
                      locale number is appended to the name of the
                      memLog so that each locale creates its own log
                      file.

  --memLeaksLog=string : specifies a file where the output of
                         --memStats and --memLeaks is appended (after
                         the compiler and execution commands).  This
                         is useful for running multiple programs and
                         aggregating memory statistics.


----------------
Launcher Support
----------------

For multilocale execution (see README.multilocale), Chapel programs are
executed indirectly by a launcher.  This section covers command line
options that assist launchers in doing their job.  These options are not
supported for general use.  We document them here so that their presence
in, say, the verbose output produced by "-v" can be understood.

At present there is only one launcher support option:

  -E<envVar>=<val> : set the given environment variable "envVar" to
                     "val".
