======================================================
Initial support for printf/scanf-like support
======================================================

This README describes some initial support that we have added to Chapel
for performing formatted input and output. It should be considered
prototype technology and will one day graduate to the language
specification. See also README.io, which covers the basic I/O functionality
with read/write.

This file starts with a sample-based overview of the format strings. Then, it
describes the format string syntax in detail. Finally, it demonstrates the
functionality with example function calls.


--------------------------
Overview of Format Strings
--------------------------
In a manner similar to C's 'printf' and 'scanf', the IO package includes
writef and readf functions. These functions take in a format string
and some arguments. For example, one might do
> writef("My favorite %s is %i\n", "number", 7);
< My favorite number is 7

The following sections offer a tour through the conversions to illustrate the
common cases. A more precise definition follows in the "Format String
Syntax in Detail" section below.

In this file, we use "integral" to refer to the Chapel types int or uint and
"floating-point" to refer to real, imaginary, or complex, of any bit width.

Generic Numeric Conversions
---------------------------
 ##.### - decimal number padded on the left with spaces to 2 digits before
          the point, rounded to 3 after. Works with real, imaginary,
          or complex arguments. Also works with integral arguments, but the
          decimal point is not printed.

          In all cases, the output is padded on the left to the total length
          of the conversion specifier (6 in this example).  The output
          can be longer, when needed to accomodate the number.

 ## - integral value padded out to 2 digits. Also works with real, imaginary
      or complex numbers by rounding them to integers.

 In both conversions above, an imaginary argument gets an 'i' afterwards;
 a complex argument is printed in the format a + bi, where each of a and b
 is rounded (but not padded) individually as if printed under that conversion
 on its own.

 %n - a "number" - equivalent to one of %i, %u, %r, %m, or %z below,
      depending on the type
 %17n - a number padded out to 17 columns
 %.4n - a number with 4 significant digits or a precision of 4

Integral Conversions
--------------------
 %i or %di - a signed integer in decimal, possibly negative
             (note - when reading a %i, '-' is allowed)
 %u or %du - an unsigned decimal integer
             (note - when reading a %u, '-' is not allowed)
 %bi  - a binary signed integer
 %bu  - a binary unsigned integer
 %@bu - a binary unsigned integer with 0b
 %oi  - an octal signed integer
 %ou  - an octal unsigned integer
 %@ou - an octal unsigned integer with 0o
 %xu - a hexadecimal unsigned integer
 %xi - a hexadecimal signed integer
 %@xu - a hexadecimal unsigned integer with 0x
 %Xu - a hexadecimal unsigned integer in uppercase
 %@Xu - a hexadecimal unsigned integer with 0X and uppercase
 %17i - a decimal integer padded on the left with spaces to 17 columns
        (that is, it is right-justified in a 17-column field)
        (padding width is ignored when reading integers)
 %*i - as with %17i but read the minimum width from the preceeding argument
 %017i - a decimal integer padded on the left with zeros to 17 columns
 %-17i - a decimal integer left-justified (padded on the right) to 17 columns
 %+i - a decimal integer showing + for positive numbers
 % i - a decimal integer with a space for positive numbers
 %|4i - output 4 raw,binary bytes of the passed integer in native endianness
 %<4i - output 4 raw,binary bytes of the passed integer little endian
 %>4i - output 4 raw,binary bytes of the passed integer big endian
 %<8i - output 8 raw,binary bytes of the passed integer little endian
        (byte widths of 1, 2, 4, and 8 are supported for integral conversions)

Real Conversions
----------------
 %r - a real number with decimal or exponential notation, where
      exponential is chosen if the decimal version would be too long

 %6r - as with %r but padded on the left to 6 columns (ie right-justified)
 %-6r - as with %r but padded on the right to 6 columns (ie left-justfied)
 %.4r - as with %r but with 4 significant digits
 %.*r - as with %.4r but with read significant digits from preceeding argument
 %6.4r - as with %r but padded on the left to 6 columns
         and with 4 significant digits
 %*.*r - as with %6.4r but read minimum width and significant digits from
         preceeding arguments
      
 %dr - a real number in decimal notation, e.g. 12.34
 %6dr - a decimal number padded on the left to 6 columns (right-justified)
 %.4dr - a decimal number with 4 digits after the radix point
 %6.4dr - a decimal number padded on the left to 6 columns and with 4 digits
          after the radix point
          (width and precision are ignored when reading numbers in readf)

 %er - a real number in exponential notation, e.g. 10.2e-23
 %Er - like %er but with the 'e' in uppercase, e.g. 10.2E-23

 %xer - hexadecimal number using p to mark exponent e.g. 6c.3f7p-2a

 %|4r - emit 4 raw,binary bytes of the passed number in native endianness
 %<8r - emit 8 raw,binary bytes of the passed number in little endian
 %<4r - emit 4 raw,binary bytes of the passed number in little endian
      (< | and > are supported for widths 4 or 8)

Complex and Imaginary Conversions
---------------------------------
 %m - an imaginary number, like a real with %r but ends with an 'i'

 %z - print complex number with %r for each part in the format a + bi
 %@z - print complex number with %r for each part in the format (a,b)
 %6z - as with %z but pad the entire complex number out to 6 columns
 %6.4z - print a and b 4 significant digits and pad the entire complex
         number out to 6 columns
 %dz - print a and b with %dr
 %ez - print a and b with %er

 %|4m - same as %|4r
 %|8z - emit 8 raw,binary bytes of native-endian complex (a,b are each 4 bytes)
 %<16z - emit 16 raw,binary bytes of little-endian complex (a,b each 8 bytes)

String and Bytes Conversions
----------------------------
 %s - a string. When reading, read until whitespace.
      Note that if you want to be able to read you string back in,
      you should use one of the quoted or encoded binary versions (see below),
      since generally with %s it's not clear where the string ends.
 %c - a single Unicode character (argument should be a string or an integral
      storing the character code)
 %17s - when writing - a string left padded (right justified) to 17 columns
        when reading - read up to 17 bytes or a whitespace, whichever comes
                       first, rounding down to whole characters
 %-17s - when writing - a string right padded (left justified) to 17 columns
 %.17s - when writing - a string truncated to 17 columns. When combined
                        with quoting strings, for example %.17"S, the conversion
                        will print ... after a string if it was truncated. The
                        truncation includes leaving room for the quotes and -
                        if needed - the periods, so the shortest truncated
                        string is ""...  Generally, you won't be able to read
                        these back in.
         when reading - read exactly 17 Unicode code points
 %|17s - when writing - emit string but cause runtime error if length
                        does not match
        when reading - read exactly 17 bytes (error if we read < 17 bytes)
 %|*s -  as with %17s but the length is specified in the argument before
         the string.
 %"S  - use double-quotes to delimit string
 %'S  - use single-quotes to delimit string
 %cS  - use any character (c) to delimit string
 %{(S)}  - quoted string, starting with (, ending with ), where the
           parens could be replaced by arbitrary characters
 %*S  - quoted string, the arg before the string to specifies quote character
 %|0S   - write a string null-terminated or read bytes until a null-terminator
 %|*S - means read bytes until a terminator byte. The terminator byte is read
        from the argument before the string.
 %|1S %|2S %|4S and %|8S -  work with encoded strings storing a length
                            and then the string data. The digit before 'S' is
                            the number of bytes of length which is by default
                            stored native endian. <, |, > can be used
                            to specify the endianness of the length field,
                            for example %<8S is 8 bytes of little-endian length
                            and then string data.
 %|vS - as with %|1S-%|8S but the string length is encoded using a
        variable-length byte scheme (which is always the same no matter what
        endianness). In this scheme, the high bit of each encoded length byte
        records whether or not there are more length bytes (and the remaining
        bits encode the length in a big-endian manner).

 %|*vS or %|*0S - read an encoded string but limit it to a number of bytes
                  read from the argument before the string; when writing
                  cause a runtime error if the string is longer than the
                  maximum.

 %/a+/ - where any regular expression can be used instead of a+
         consume one or more 'a's when reading, gives an error when printing,
         and does not assign to any arguments
         (note - regular expression support is dependent on RE2 build;
          see README.regexp)

 %/(a+)/ - consume one or more 'a's and then set the corresponding string
           argument to the read value

 %17/a+/ - match a regular expression up to 17 bytes
           (note that %.17/a+/, which would mean to match 17 characters,
            is not supported).

 %/*/ - next argument contains the regular expression to match

General Conversions
-------------------
 %t - read or write the object according to its readThis/writeThis routine
 %jt - read or write an object in JSON format using readThis/writeThis
 %ht - read or write an object in Chapel syntax using readThis/writeThis
 %|t - read or write an object in binary native-endian with readThis/writeThis
 %<t - read or write an object little-endian in binary with readThis/writeThis
 %>t - read or write an object big-endian in binary with readThis/writeThis

Note About Whitespace
---------------------
When reading, \n in a format string matches any zero or more space characters
other than newline and then exactly one newline character. In contrast, " "
matches at least one space character of any kind.

When writing, whitespace is printed from the format string just like any
other literal would be.

Finally, space characters after a binary conversion will be ignored, so
that a binary format string can appear more readable.


------------------------------
Format String Syntax in Detail
------------------------------
Chapel's format strings are simpler than those in C in one way: it is no longer
necessary to specify the types of the arguments in the format string. For
example, in C the l in %ld is specifying the type of the argument for integer
(decimal) conversion. That is not necessary in Chapel since the compiler is
able to use type information from the call.

Format strings in Chapel consist of:
 - conversion specifiers e.g. "%xi" (described below)
 - newline e.g. "\n"
    when writing - prints a newline
    when reading - reads any amount of non-newline whitespace and then
                   exactly one newline. Causes the format string not to
                   match if it did not read a newline.
 - other whitespace e.g. " "
    when writing - prints as the specified whitespace
    when reading - matches at least one character of whitespace, possibly
                   including newlines.
 - other text e.g. "test"
    when writing - prints the specified text
    when reading - matches the specified text

# Specifiers
------------
Simply display how many digits to use when printing a floating-point number by
using the # sign to stand for digits. The fractional portion of the number will
be rounded appropriately and extra space will be made if the integer portion is
too small:
> writef("n:###.###\n", 1.2349);
< n:  1.235

This syntax also works for numbers without a decimal point by rounding them
appropriately.

A # specifier must start with a '#'. For example, if we start with a '.'
it will interpret the . as a literal, as in:
> writef(".###\n", 0.777);
< .  1

A # specifier extends to include the '.' and then the fractional '#'
when they follow the first group of '#' immediately. For example:
> writef("(#.##.#.)\n", 1.2, 3);
< (1.20. 3)

% Specifiers
------------
Specifiers starting with % offer quite a few options. First, some basic
rules.
 %% means a literal %
 %# means a literal #
 \n means a literal newline
 \\ means a single backslash
 %{} curly braces can wrap a % conversion specifier. That way, even odd
     specifiers can be interpreted unambiguously. Some of the more complex
     features require the use of the %{} syntax, but it's always 
     acceptable to use curly braces to make the format string clearer.

In general, a % specifier consists of either text or binary conversions:

 %
 [optional endian flag (binary conversions only)]
 [optional flags]
 [optional field width or size in bytes]
 [optional . then precision]
 [optional base flag]
 [optional exponential type]
 [conversion type]

Going through each section for text conversions:
 [optional flags]
   @ means "alternate form". It means to print out a base when not using
     decimal (e.g. 0xFFF or 0b101011); and it will format a complex number with
     parens instead of as e.g. 1.0+2.0i
   + means to show a plus sign when printing positive numbers 
   0 means to pad numeric conversions with 0 instead of space
  ' ' (a space) leaves a blank before a positive number
               (in order to help line up with negative numbers)
   - left-justify the converted value instead of right-justifying
  
   Note, if both 0 and - are given, the effect is as if only - were given.

 [optional field width]
   When printing numeric or string values, the field width specifies the number
   of *columns* that the conversion should use to display the value. It can be
   *, which means to read the field width from an integral argument before the
   converted value.

   For string conversions in readf (%s %" %' %//), the field width specifies
   the maximum number of bytes to read. 

   For numeric conversions in readf, the field width is ignored.
   
 [optional . then precision]
   When printing floating point values, the precision is used to control
   the number of decimal digits to print.  For %r conversions, it
   specifies the number of significant digits to print; for %dr conversions, 
   it specifies the number of digits following the decimal point.  It can also
   be *, which means to read the precision from an integral argument before 
   the converted value.

   For textual string conversions in writef, (%s %" %'), the precision
   indicates the maximum number of columns to print - and the result will be
   truncated if it does not fit. In readf for these textual string conversions,
   the precision indicates the maximum number of characters (e.g. Unicode code
   points) to input. 

   The precision is silently ignored for integral conversions (%i, %u, etc) 
   and for %// conversions.

 [optional base flag]
   d means decimal (and not exponential for floating-point)
   x means lower-case hexadecimal
   X means upper-case hexadecimal 
   o means octal
   b means binary 
   j means JSON-style strings, numbers, and structures
   h means Chapel-style strings, numbers, and structures
   ' means single-quoted string (with \\ and \')
   " means double-quoted string (with \\ and \")

 [optional exponential type]
   e means floating-point conversion printing exponential -12.34e+56
   E means floating-point conversion printing uppercase exponential -12.34E+56

 [conversion type]
   t means "type-based" or "thing" - uses writeThis/readThis but ignores
            width and precision
   n means type-based number, allowing width and precision
   i means integral conversion
   u means unsigned integral conversion
   r means real conversion (e.g. 12.23)
   m means imaginary conversion with an 'i' after it (e.g. 12.23i)
   z means complex conversion
   s means string conversion
   S means a quoted string conversion
   {cS} means string conversion with quote char c
   {*S} means string conversion with quote char in argument before the string
   {xSy} means string conversion with left and right quote chars x and y
   /.../ means a regular expression (for reading only)
   {/.../xyz} means regular expression with flags xyz 
   c means a Unicode character - either the first character in a string
           or an integral character code 
 
For binary conversions: 
 [optional endian flag]
   < means little-endian
   > means big-endian
   | means native-endian

 [optional size in bytes]
   This is the number of bytes the format should read or write in this
   conversion. For integral conversions (e.g. %|i) it specifies the number of
   bytes in the integer, and 1, 2, 4, and 8 are supported. For real and
   imaginary conversions, 4 and 8 are supported. For complex conversions,
   8 and 16 are supported. The size in bytes is *required* for binary
   integral and floating-point conversions.

   The size can be *, which means that the number of bytes is read
   from the argument before the conversion.

   For strings, if a terminator or length field is specified, exactly this
   number is the maximum size in bytes; if the terminator or length is not
   specified, the string must be exactly that size (and if the argument is not
   exactly that number of bytes it will cause an error even when writing).

 [conversion type]
   t means "type-based" or "thing" - to read or write with readThis/writeThis
   n means type-based number (size is not mandatory)
   i means integral
            - note that the size is mandatory for binary integral conversions
   u means unsigned integral
            - note that the size is mandatory for binary integral conversions
   r means real
            - note that the size is mandatory for binary real conversions
   m works the same as r for binary conversions
   z means complex
            - note that the size is mandatory for binary complex conversions
   s means string binary I/O
    %|17s exactly 17 byte string
   0S/1S/2S/4S/8S mean encoded string binary I/O:
    %|0S null-terminated string
    %{|S*} next-argument specifies string terminator byte
    %|1S a one-byte length and then the string
    %|2S a two-byte length and then the string
    %|4S a four-byte length and then the string
    %|8S a eight-byte length and then the string
    %|vS a variable-byte-encoded length and then the string
   c means a Unicode character - either the first character in a string
           or an integral character code


--------
Examples
--------

> writef("%5i %5s %5r\n", 1, "test", 6.34);
<     1  test  6.34

> writef("%2.4z\n", 43.291 + 279.112i);
< 43.29 + 279.1i

> writef("%<4u", 0x11223344);
< (hexdump of the output)
   4433 2211
> writef("%>4u", 0x11223344);
< (hexdump of the output)
   1122 3344
> writef("%<4i %<4i", 2, 32);
< (hexdump of the output -- note that spaces after
   a binary format specifier are ignored)
   0200 0000 2000 0000


> writef("%|0S\n", "test");
< (hexdump of the output)
  7465 7374 000a
> writef("%|1S\n", "test");
< (hexdump of the output)
  0474 6573 740a
> writef("%>2S\n", "test");
< (hexdump of the output)
  0004 7465 7374 0a
> writef("%>4S\n", "test");
< (hexdump of the output)
  0000 0004 7465 7374 0a
> writef("%>8S\n", "test");
< (hexdump of the output)
  0000 0000 0000 0004 7465 7374 0a
> writef("%|vS\n", "test");
< (hexdump of the output)
  04 7465 7374 0a

> writef('%"S\n', "test \"\" \'\' !");
< "test \"\" '' !"
> writef("%'S\n", "test \"\" \'\' !");
< 'test "" \'\' !'
> writef("%{(S)}\n", "test ()", "(", ")");
< (test (\))


> writef("%40s|\n", "test");
> writef("%-40s|\n", "test");
<                                     test|
< test                                    |

> writef("123456\n");
> writef("%6.6'S\n", "a");
> writef("%6.6'S\n", "abcdefg");
> writef("%.3'S\n", "a");
> writef("%.3'S\n", "abcd");
< 123456
<    'a'
< 'a'...
< 'a'
< ''...


< var s:string;
< var got = readf(" %c", s);
  if the input is " a", "\na", "  a", etc, s will contain "a"
  if the input is "b", got will be false and s will contain ""

< var s:string;
< var got = readf("\n%c", s);
  if the input is "\na", or " \na", s will contain "a"
  if the input is "b", got will be false and s will be ""

< var got = readf("%/a+/");
  if the input is "a" or "aa" (and so on), got will return true
  if the input is "c" got will be false

< var s:string;
< var got = readf("%/a(b+)/", s);
  if the input is "c" got will be false and s will be ""
  if the input is "ab", got will be true and s will be "b"
  if the input is "abb", got will be true and s will be "bb"
