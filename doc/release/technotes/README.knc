=====================================================
Initial support for Intel Phi (a.k.a Knight's Corner)
=====================================================

*** This document will probably change rapidly, but will be useful for
*** developers working on Phi support, so I've opted to commit
*** something early on rather than waiting until release time as I
*** normally would :)

This README describes how to use Chapel for Intel Phi.

The initial implementation runs in self-hosted mode only.  That is,
the entire Chapel program runs on the co-processor.  For multilocale,
GASNet must use the MPI conduit (segment everything) as all
communication must bounce through the host processor.

--------------
Current Status
--------------

Currently, the Chapel KNC port supports:

- CHPL_TARGET_PLATFORM=cray-xc with PrgEnv-intel
  - CHPL_COMM=none
  - CHPL_COMM=gasnet, CHPL_COMM_SUBSTRATE=mpi
  - CHPL_GMP=gmp|none

- CHPL_TARGET_COMPILER=intel and CHPL_TARGET_ARCH=knc
  - CHPL_COMM=none
  - CHPL_COMM=gasnet, CHPL_COMM_SUBSTRATE=udp (built but not tested)
  - CHPL_GMP=gmp|none

For the above configurations:

- CHPL_TASKS=fifo
- CHPL_TASKS=qthreads, CHPL_HWLOC=none
- CHPL_MEM=dlmalloc

---------------
Getting started
---------------

For vanilla Intel compiler:
---------------------------

- Set CHPL_TARGET_COMPILER=intel and CHPL_TARGET_ARCH=knc.

- Set CHPL_REGEXP=none.

- Set CHPL_GMP to 'none' or 'gmp'.

- Build Chapel as normal.  Running printchplenv should look like this.

  CHPL_HOST_PLATFORM: linux64
  CHPL_HOST_COMPILER: gnu
  CHPL_TARGET_PLATFORM: linux64
  CHPL_TARGET_COMPILER: intel
  CHPL_TARGET_ARCH: knc
  CHPL_LOCALE_MODEL: flat
  CHPL_COMM: none
  CHPL_TASKS: fifo
  CHPL_LAUNCHER: none
  CHPL_TIMERS: generic
  CHPL_MEM: cstdlib
  CHPL_MAKE: gmake
  CHPL_ATOMICS: intrinsics
  CHPL_GMP: none
  CHPL_HWLOC: none
  CHPL_REGEXP: none
  CHPL_WIDE_POINTERS: struct
  CHPL_LLVM: none
  CHPL_AUX_FILESYS: none

- Build your Chapel program as normal.

  % chpl hello.chpl

For Cray XC:
------------

- Log into a Cray XC with KNC nodes.  Set CHPL_TARGET_PLATFORM=cray-xc
  and CHPL_HOME to the appropriate value.

- Load the proper modules. The order in which you do these module
  commands seems to matter:

  % module swap PrgEnv-cray PrgEnv-intel
  % module unload cray-libsci atp craype-sandybridge craype-ivybridge
  % module load craype-intel-knc

- Set CHPL_REGEXP=none.

- Set CHPL_GMP to 'none' or 'gmp'.

- Build Chapel as normal.  Running printchplenv should look like this.

  CHPL_HOST_PLATFORM: linux64
  CHPL_HOST_COMPILER: gnu
  CHPL_TARGET_PLATFORM: cray-xc
  CHPL_TARGET_COMPILER: cray-prgenv-intel
  CHPL_TARGET_ARCH: knc
  CHPL_LOCALE_MODEL: flat
  CHPL_COMM: gasnet
    CHPL_COMM_SUBSTRATE: mpi
    CHPL_GASNET_SEGMENT: everything
  CHPL_TASKS: fifo
  CHPL_LAUNCHER: aprun
  CHPL_TIMERS: generic
  CHPL_MEM: cstdlib
  CHPL_MAKE: gmake
  CHPL_ATOMICS: intrinsics
    CHPL_NETWORK_ATOMICS: none
  CHPL_GMP: none
  CHPL_HWLOC: none
  CHPL_REGEXP: none
  CHPL_WIDE_POINTERS: struct
  CHPL_LLVM: none
  CHPL_AUX_FILESYS: none

- Build your Chapel program as normal.

  % chpl hello.chpl

- Request some nodes with KNCs.  You can get the node numbers using
  cnselect:

  % cnselect -e name.eq.XEON_PHI

  Then use qsub to request the nodes.  For example, to request nodes
  12-16 for interactive use:

  % qsub -I -l,nodes=2,hostlist='^[12-15]'

- Run your program using aprun or srun directly.  For the above
  example using aprun:

  % aprun -k -n 2 ./a.out -nl 2

----
TODO
----

- OpenMP 4.0 pragma annotated loops
- Figure out GMP story for Cray machines
  - Currently you must set CHPL_GMP to 'none' or 'gmp' when using the
    PrgEnv for Cray machines.  I'm hoping that there will be support
    soon, so I haven't changed the chplenv script to do this
    automatically yet.
- tcmalloc not supported (lfence not implemented)
- hwloc not supported (build says not supported)
- Fix regexp build to use other CHPL_TARGET_COMPILER
- slurm/srun support
- non-Cray platform support (launcher)
  - ditto about CHPL_TARGET_ARCH
- Possible WLM support

