===============================================================
Initial support for diagnosing communication behavior in Chapel
===============================================================

This README describes initial support for diagnosing the actual
communication events that a running Chapel program executes when using
CHPL_COMM=gasnet.  

There are two distinct mechanisms:

 * Use verbose communication to report events as they happen
 * Use communication diagnostics to gather statistics about specific events

These facilities are provided by the standard module CommDiagnostics.  To use
them, add the line

  use CommDiagnostics;

before their first use in your program.

  
Verbose Communication
---------------------

The following functions are provided to turn on and off verbose
communication:

  startVerboseComm() - Turn on verbose communication on all locales.

  stopVerboseComm() - Turn off verbose communication on all locales.

  startVerboseCommHere() - Turn on verbose communication on the locale
    on which it it called.

  stopVerboseCommHere() - Turn off verbose communication on the locale
    on which it it called.

When verbose communication is turned on, all remote gets, remote puts,
remote blocking forks, and remote non-blocking forks are reported.

For example, given a program mytest.chpl:

  proc main() {
    startVerboseComm();
    var x: int = 1;
    on Locales(1) {     // should fork a blocking task onto locale 1
      x = x + 1;        // should invoke a remote put and a remote get
    }
    stopVerboseComm();
  }

Executing as "a.out -nl 2" results in the following output:

  0: remote task created on 1
  1: mytest.chpl:5: remote get from 0
  1: mytest.chpl:5: remote put to 0

The number refers to the locale reporting the communication event.
The file name and line number point to the place in the code that
triggered the communication event.  (For remote forks, file name and
line number information is not yet reported.)

Note that non-blocking forks are an optimization that fires when an
on-statement immediately precedes or follows a begin or coforall
statement.


Communication Diagnostics
-------------------------

The following functions are provided to turn on and off communication
diagnostics:

  startCommDiagnostics() - Turn on communication diagnostics on all locales.

  stopCommDiagnostics() - Turn off communication diagnostics on all locales.

  startCommDiagnosticsHere() - Turn on communication diagnostics on
    the locale on which it is called.

  stopCommDiagnosticsHere() - Turn off communication diagnostics on
    the locale on which it is called.

When communication diagnostics is turned on, all remote gets, remote
puts, remote blocking forks, and remote non-blocking forks are
counted.  The following function then returns an array of 5-tuples
that contains these counts for each locale:

  getCommDiagnostics(): [LocaleSpace] commDiagnostics - Return an
    array of records of type commDiagnostics.  The fields correspond
    to various type of communication performed.

  getCommDiagnosticsHere(): commDiagnostics - Return a record of type
    commDiagnostics.  The fields correspond to various type of
    communication performed.

To reset the communication counts, use the following functions:

  resetCommDiagnostics() - Reset the communication counts on all locales.

  resetCommDiagnosticsHere() - Reset the communication counts on
    the locale on which it is called.

For example, given a program mytest.chpl:

  proc main() {
    startCommDiagnostics();
    var x: int = 1;
    on Locales(1) {     // should fork a blocking task onto locale 1
      x = x + 1;        // should invoke a remote put and a remote get
    }
    stopCommDiagnostics();
    writeln(getCommDiagnostics());
  }

Executing as "a.out -nl 2" results in the following output:

  (get = 0, get_nb = 0, put = 0, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 1, fork_fast = 0, fork_nb = 0) (get = 1, get_nb = 0, put = 1, put_nb = 0, test_nb = 0, wait_nb = 0, try_nb = 0, fork = 0, fork_fast = 0, fork_nb = 0)

So we can say that a remote blocking fork was executed on locale 0,
and a remote get and a remote put was executed on locale 1.
