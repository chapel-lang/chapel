Implement Object Copying Using a "Postblit" Method
==================================================

Status
  Draft

Author
  Tom Hildebrandt (outline)


This proposal is to implement object copying using a bitwise copy followed by a
"postblit" operation.

Abstract
--------

In objects containing references, the choice between shallow and deep copying
influences semantics, performance and memory usage.  Even in garbage-collected
languages, a type designer must choose carefully when a deep copy is to be made.

Special functions provide an interface between the compiler and code that
implements a type, so that the choice between shallow and deep copying can be
implemented consistently.  These special functions include destruction,
default-initialization, copy-initialization and (usually) assignment.

The current proposal is to implement copy-initialization using a bitwise copy
followed by a "postblit" method call.  This idea is borrowed from the D Language
and is in contrast to the better-known copy-constructor.  Implementing
copy-initialization in this way can have significant performance benefits for
Chapel, since it interacts well with the bulk-copying of bits across slow
network connections.

Rationale
---------

The existing language concept for copy-initialization, the copy-constructor,
treats copying and any required fixup (i.e. construction) as a whole, and is
defined recursively.  A straightforward implementation thus leads to many
fine-grained copy operations at the leaves of a data structure.  

Network performance characteristics instead favor coarse-grained copy
operations.  By separating the data copying from subsequent fixup, it is
expected that much better object copying performance can be achieved --
especially for large data structures such as arrays.

Description
-----------

* Background

  * Special functions

    * Special functions are called by the compiler as needed

      * Implement initialization, overwriting and destruction of scoped variables
      * Scoped variables are named variables, formals and fields, and function return values.
      * By implication, special functions are not called to create/destroy temporary copies
      * By further implication, objects can be moved around by bitwise copying (blitting)
        * An object becomes fixed in memory after a reference to it has been created.
      * How records are passed back as function return values is unclear.

    * Destruction

      * Release resources held by an object fully-initialized to a type's "invariant state"

    * Default-Initialization

      * Place an uninitialized object in a state compatible with its destructor
      * That is, initialize it given no additional information

    * Copy-Initialization

      * Initialize an object, given the information in an existing object as a starting point

    * Assignment

      * Replace information in an initialized object using information from another object
      * Is currently invoked by the compiler
      * Will not be invoked by the compiler after conversion to the new AMM model is complete
      * A compiler-supplied version will still be generated as a convenience
      * Typically has the same semantics as copy-initialization

  * Current implementation

    * Destruction

      * Implemented by an "autoDestroy" function
      * Compiler-default implementation calls destructor

    * Default-Initialization

      * Implemented using "_defaultOf" function.
      * Compiler supplied version calls zero-argument constructor, if supplied

    * Copy-Initialization

      * Implemented using "autoCopy" function
      * There is no compiler-supplied definition

    * Assignment

      * Compiler-supplied version implemented as field-wise assignment, recursively
      * Assignment of fundamental types is a bitwise copy

    * Return value semantics

      * Compiler calls copy constructor inside called routine.
      * Returned value is always "owned"

* Proposed

  * No change to destruction

    * Compiler calls autoDestroy function where destruction is needed
    * Compiler-supplied autoDestroy function calls destructor
    * Default destructor is empty (trivial)

  * Default-Initialization

    * Consider redefining as zero-initialization followed by fixup
    * If so, zero-initialization should be exposed as a user concept

      * No magic: user can write explicitly any behavior the compiler supplies

    * Compiler-supplied version calls bulk zero (memset(ptr, 0, size)) followed by a call to the  postzero() method
    * Compiler-supplied postzero() method is empty (trivial)

  * Copy-Initialization

    * Bulk (bitwise) copy followed by a "postblit" method call
    * Postblit provides post-copy fixup

      * Includes deep-copy semantics if desired
      * Probably easier if different from zero-initialization fixup

    * Bitwise copy should be exposed as a user concept

      * No magic priciple echoed
  * Assignment

    * Implemented as destruction followed by copy-initialization

      * Reference counts on shared objects may go to zero
      * Provided as a convenience by compiler, so must be overridden in that case

  * Return value semantics

    * ``postblit`` should be called 
      * After space has been allocated and the result copied into it
      * Before the stack frame for the called function is deleted

  * Proposal TODOs

    * Come up with a consistent naming scheme for the well-known functions
    * Describe compiler-provided behavior.
    * Review consistency of the relationship between compiler-supplied and user overrides for both well-known and user functions

* Discussion

  * Default-Initialization

    * Pro

      * Usually zero-initialization works OK
      * Overridable if user desires
      * Consistent with copy-initialization using postblit

    * Con

      * Zero-initialization may be wasted effort if fixup sets fields explicitly

  * Copy-Initialization

    * Bulk copy of array implementations can be very effciient

      * All array elements copied in one go
      * Then, postblit applied to each element in turn

        * Parallel application of element-wise postblit is possible

          * Assuming no dependencies among elements

            * Definition of postblit should guarantee this
            * Not necessarily guaranteed

              * Reference to global data
              * Reference to array as a whole through parent pointer

          * Fixup of inter-element dependencies should be supplied at the
            container level

            * I.e. treating those dependencies at the element level is bad design
    * Pro

      * More efficient for copying large data structures
      * No fixup required for shallow copy semantics
      * Overridable if user desires

    * Con

      * Wasted effort for fields overwritten in fixup

        * Copying creates a "locally-cached copy"

          * Information used by postblit needed to be transmitted anyway

  * Assignment

    * Pro

      * Supports bulk copy with no extra work

    * Con

      * Can be really badly wrong if contained references are reference counted

        * User override becomes obligatory

  * Return value semantics

    * Why not skip the postblit?

      * Lifetime of the return value must be extended past the return

        * To provide the forward owner (if there is one) a chance to make a copy.

          * Invoking copy semantics (postblit) before return is one way to do this
          * Maybe not the only option

