Chapel Package Manager
======================

Status
  Draft

Author
  Kyle Brady


Abstract
--------

This CHIP proposes a package manager for Chapel and provides some
directions for future improvements.

Rationale
---------

Chapel's current approach of bundling any extra modules in the standard library
isn't sustainable if we wish to have a healthy ecosystem of libraries. There
are several problems with the current strategy:

  * Modules are in our repository, so:

    * Developers must sign a CLA
    * Code must be under a compatible license
    * The core team needs to review each module

  * Modules are gated for release alongside the compiler

Description
-----------

There are a several components of this package manager here I will propose what
two of them will look like initially:

  * mason - a command line tool for building Chapel programs
  * mason.toml - module metadata mason uses to build your application

Mason
+++++

The idea of ``mason`` is based heavily off of Rust's cargo_. It is meant to
provide a consistent way for libraries and applications to be built. This is
done through the use of a manifest, ``mason.toml``. The manifest describes your
package, its dependencies, and how it is built. The long term answer for most
questions is to look at what cargo is doing. I think they have a very well
designed package manager, and I see no reason to totally reinvent the wheel.

I do think ``mason`` should be written in Chapel however. I think it would be good
to have a piece of code that is written in Chapel that we depend on and
actually use. Currently the only time someone is writing Chapel is as a
benchmark or for a test.

The primary difference I'd like to see from cargo is using Nix_ to manage the C
dependencies. This is to further avoid reinvention of hard problems. It does
have the downside of adding a dependency to our package manager, which is not
something to be taken lightly. Nix currently requires being installed as root
(or at least becomes much more complicated if it is not). Nix also only works
on linux/osx right now. Cygwin support is not ruled out, but not actively
worked on.

Example
-------

Lets go through an example from our standard modules and see how it would look
as a package.

::

  lapack/
    Mason.toml
    lapack-lib/
      Mason.toml
      src/
        LAPACK_lib.chpl
    src/
      LAPACK.chpl

.. code-block:: ini

  # lapack/Mason.toml
  [package]
  name = "lapack"
  version = "0.1.0"
  authors = ["Ian Bertolacci <ian@example.com>"]
  license = "Apache-2.0"
  description = "High level bindings to LAPACK"

  [dependencies]
  lapack-lib = { path = "lapack-lib" }

.. code-block:: ini

  # lapack-lib/Mason.toml
  [package]
  name = "lapack-lib"
  version = "0.1.0"
  authors = ["Ian Bertolacci <ian@example.com>"]
  license = "Apache-2.0"
  description = "Native bindings to liblapack"

  requries = ["liblapack"]
  links = "lapack"
  includes = "lpacke.h"

Things to note:
  * ``requires`` is a list of nix packages to be in the environment when
    building your program, its recommended to provide these, but they may not
    be used.
  * ``links`` is the library that is expected to be on your search path and will
    be added to the compile line
  * ``includes`` is the header file that is expected to be on your search path
    and will be added to the compile line


This could then be used in a projects like this:

::

  myCoolApp/
    Mason.toml
    src/
      main.chpl
    deps/
      ( lapack/ )
    bin/

.. code-block:: ini

  # lapack-lib/Mason.toml
  [package]
  name = "lapack-lib"
  version = "0.0.1"
  authors = ["Kyle Brady <kyle@example.com>"]

  [dependencies]
  lapack = { git = "https://github.com/chapel-pkgs/lapack", tag = '0.1.0'}

With this we can do a

.. code-block:: shell

  mason build

to download our lapack dependency, and build the program. The dependency will
be downloaded and placed under ``deps/``.  Nix will be used to resolve the
external dependencies and packages if it is available. Otherwise, libraries and
headers are expected to be placed on the normal search paths.


.. _cargo: http://doc.crates.io/guide.html
.. _nix: https://nixos.org/nix/
