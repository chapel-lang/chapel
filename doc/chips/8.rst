Error Handling in Chapel
========================

Status:
  Draft

Authors:
  Greg Titus, Kyle Brady, Michael Ferguson

Abstract
--------

A proposal for how error handling should work in Chapel.


Rationale
---------

Chapel currently lacks a general strategy for errors. The standard library
currently primarily uses two approaches: `halt()` and optional `out` arguments
(`out error: syserr`, if argument provided, assumes user will handle it; else
call `halt()` ). Each of these approaches has serious drawbacks.

  * Halting the program is not appropriate in library code
  * The output argument approach only returns error codes and doesn't permit
    users to add new error codes or new types of errors.

A more general strategy is desired. A good strategy would support the ability
to write bulletproof code, ideally in a way that supports propagation of
errors, and also the ability to get useful messages when errors are not
handled.

Description
-----------

This error handling proposal is inspired by the Swift error handling strategy.
See

https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html


This strategy is appealing because it represents a middle ground arguably
acceptable to devotees of both exceptions and error codes; it is easier to
implement than stack-unwinding since it re-uses the existing return mechanisms;
and it fits well with existing task parallelism.

Summary of the Swift Error Handling Strategy
++++++++++++++++++++++++++++++++++++++++++++

Functions that can raise an error are declared with throws:

::

  func canThrowErrors() throws { … }
  func cannotThrowErrors() { … }

Calls that throw must be decorated with `try` or `try!`

`try` propagates the error to an enclosing `do`/`catch` block or out of a
throwing function `try!` halts if an error occurred

Programs can respond to errors with `do`/`catch` statements:

::

  do {
    try canThrowErrors()
    try! canThrowErrors() // will halt on failure
  } catch {
    writeln("The first call failed!")
  }


Why Decorate Statements That Throw
++++++++++++++++++++++++++++++++++

The Swift error handling approach includes the use of `try` to mark statements
that can throw. This design addresses the most serious criticism of exceptions
as a language feature - that they make the control flow possibilities hard to
reason about. By marking each statement that can throw, the control flow
possibilities can again be reasoned about with local information only.

Expected Additions for Chapel
+++++++++++++++++++++++++++++

* Throwing errors from iterators
* Ability to catch errors generated in runtime layers:

  * Communication
  * Memory allocation
  * Task creation
  * Not mandatory to check for these

* Task joins propagate errors to parent tasks:

  * Occurs at end the of sync/coforall/cobegin blocks


Examples
--------

Example 1: Simple Errors
++++++++++++++++++++++++

As an example, this is a function currently (Jan 2016) on our Timer record in
the standard modules:

.. code-block:: chapel

    proc start() : void {
      if !running {
        running = true;
        time    = chpl_now_timevalue();
      } else {
        halt("start called on a timer that has not been stopped");
      }
    }

It calls `halt` when the timer is already running, which is not very friendly.
With our proposal this would instead be:

.. code-block:: chapel

    proc start() throws : void {
      if !running {
        running = true;
        time    = chpl_now_timevalue();
      } else {
        throw new Error("start called on a timer that has not been stopped");
      }
    }

This function can now be used as follows:

.. code-block:: chapel

    var my_timer: Timer;
    try! my_timer.start();
    do {
      try my_timer.start();
    } catch e: Error {
      writeln(Error.message);
    }
    try! my_timer.start(); // Will halt the program!

Example 2: File IO
++++++++++++++++++

A common place for errors is interactions with the filesystem, we currently
handle these with two strategies, out arguments and halting.

.. code-block:: chapel

  var err: syserr;
  var file = open("my_data.dat", error=err);
  if !err {
    var channel = file.writer(err);
    if !err {
      channel.write(1, 2, 4, 8, err);
      if err {
        halt("Failed to write out data");
      }
    } else {
      halt("Failed to open channel");
    }
  } else {
   halt("Failed to open file");
  }

.. code-block:: chapel

  do {
    var file = try open("my_data.dat");
    var channel = try file.writer(err);
    try channel.write(1, 2, 4, 8, err);
  } catch  e: IOError {
    halt(e.message());
  }

  // Equivalent to:

  var file = try! open("my_data.dat");
  var channel = try! file.writer(err);
  try! channel.write(1, 2, 4, 8, err);

Example 3: Errors In cobegins
+++++++++++++++++++++++++++++

`cobegin`, and other task parallel constructs create tasks which could have
errors. These errors will be provided at task join.

.. code-block:: chapel

  proc encounterError() throws { throw new Error(); }
  proc noError() throws { return; }
  do {
    try cobegin {
      try encounterError();
      try noError();
      try encounterError();
    }
  } catch errors: CobeginErrors { // could use a better name
    for e in errors {
      writeln(e); // Would print out two lines
    }
  }

Example 4: Errors In Iterators
++++++++++++++++++++++++++++++
This is the current `glob` iterator in the `FileSystem` module:

.. code-block:: chapel

  iter glob(pattern: string = "*"): string {
    use chpl_glob_c_interface;
    var glb : glob_t;

    const err = chpl_glob(pattern.localize().c_str(), 0, glb);
    if (err != 0 && err != GLOB_NOMATCH) then
      __primitive("chpl_error", c"unhandled error in glob()");
    const num = chpl_glob_num(glb).safeCast(int);
    for i in 0..num-1 do
      yield chpl_glob_index(glb, i.safeCast(size_t)): string;

    globfree(glb);
  }

The new version would look like:

.. code-block:: chapel

  iter glob(pattern: string = "*"): string {
    ...
    if (err != 0 && err != GLOB_NOMATCH) then
      throw new Error("unhandled error in glob()");
    ...
  }

Which can then be used like this:

.. code-block:: chapel

    do {
      try for x in glob() {
        writeln(x);
      }
    } catch e: Error {
      writeln("Error in glob");
    }

Raising an error will halt the execution of the iterator. Errors in follower
iterations in `coforall` and `forall` loops may still allow some iteration to
occur. All errors will be reported at task join, as in example 3.


Example 5: Errors In Runtime Operations
+++++++++++++++++++++++++++++++++++++++

Many kinds of runtime operations in Chapel have the potential to fail (say if
you are out of memory). This class of errors will not be mandatory to check
for. But, if one is encountered at runtime and you do not check for it, your
program will halt.

.. code-block:: chapel

    do {
      try on Locales[0] {
        writeln("Hello!");
      }
    } catch e: OutOfMemoryError {
      free_large_object();
      // This on statement does not have a try, and will halt execution if it fails
      on Locales[0] {
        writeln("Hello!");
      }
    }


Implementation Notes
--------------------

Since this error handling strategy is based off returning either the value or
an error, better support for union types in chapel may be necessary.
