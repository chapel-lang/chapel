name: email
on:
    # this workflow is intended to run on merges from a forked repo to main(base-repo). Use pull_request_target
    # this will provide read access to the secrets in main
    #pull_request_target:
    push:
    pull_request:
      #types:
        #- closed
      
jobs: 
  send_email:
   # run this workflow step only when the PR is merged 
    #if:  github.event.pull_request.merged == true 
    runs-on: ubuntu-latest 
    steps:
      - name: print git events
        run:  cat "$GITHUB_EVENT_PATH"                     
      - name: print GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT" 
     # This workflow step will parse github env. The parsed env will be used in the email body.
     #  MERGE_LOG env holds the request body(PR description) that is parsed to replace \n\r with <br> for html formatting    
     # This step will be retried if there are any timeouts or issues parsing the json due to timeouts in curl command to get commits url.
      - name: get commits payload
        env:
          COMMIT_URL: ${{github.event.pull_request._links.commits.href}}
          LOG: ${{github.event.pull_request.body}}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 4
          retry_on_exit_code: 2
          timeout_seconds: 60  
          command: |

              curl --location --request GET "https://api.github.com/repos/chapel-lang/chapel/pulls/21412/commits" --header 'X-API-Key: ${{ secrets.GITHUB_TOKEN}}' -o commits.json

            
              if [ $? -ne 0 ]; then
                echo "curl command to get commits payload failed"
                exit 2
              fi  
              jq -r '.[0].commit.author.name' commits.json  
              if [ $? -ne 0 ]  ; then

                echo "error in processing .jq command"

                exit 2
              fi       
              echo "AUTHOR=$(jq -r '.[0].commit.author.name' commits.json)" >> $GITHUB_ENV   
              echo "LINK=$(jq -r '.[0].html_url' commits.json)" >> $GITHUB_ENV
              echo "MESSAGE=$((jq  '.[0].commit.message' commits.json)| awk -F'\\\\n' '{print $1}' | sed 's/\"//g')" >> $GITHUB_ENV 
              echo $?
              echo "COMPARE_URL= $( echo '${{github.event.repository.html_url}}/compare/${{github.event.pull_request.base.sha}}...${{ github.event.pull_request.merge_commit_sha}}' )" >> $GITHUB_ENV      
              echo "FILES_CHANGED=$(echo '${{github.event.pull_request._links.html.href}}/files' )" >> $GITHUB_ENV
              echo $LOG
              merge_commit_sha
              echo "MERGE_LOG= $(git show ${{github.event.pull_request.merge_commit_sha}}) " >> $GITHUB_ENV
      - name: checkout
        uses: actions/checkout@v3
        # To get git diff on the files that were changed in the PR checkout with fetch-depth 2.
        with:
          fetch-depth: 0          
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v34
        with:
          separator: "," 
      # tj-actions' limitation prevents the user from using "\n" as output seperator.
      # Solution: parse the list of changed files and replace each comma delimiter with a <br>.   
      - name: Parse changed files
        id: parsed-output
        run: |      
                echo "MODIFIED= $(echo ${{steps.changed-files.outputs.modified_files}} |  sed 's/\,/<br>/g' )" >> $GITHUB_ENV
                echo "ADDED= $(echo ${{steps.changed-files.outputs.added_files}} |  sed 's/\,/<br>/g' )" >> $GITHUB_ENV
                echo "DELETED= $(echo ${{steps.changed-files.outputs.deleted_files}} |  sed 's/\,/<br>/g' )" >> $GITHUB_ENV

      - name: Send mail  
        uses: dawidd6/action-send-mail@v3
        with:
           # Required mail server address if not connection_url:
           server_address: ${{secrets.SMTP_PROVIDER}}
           server_port: 465
           # Optional whether this connection use TLS (default is true if server_port is 465)
           secure: true
           # Optional (recommended): mail server username:
           username:  ${{secrets.MAIL_USERNAME}} 
           # Optional (recommended) mail server password:
           password: ${{secrets.MAIL_PASSWORD}}
           # Required mail subject:
           subject: Test merge message "[Chapel Merge] ${{github.event.pull_request.title}}"
           # Required recipients' addresses:
           #to: chapel+commits@discoursemail.com
           to: Bhavani@hpe.com
           # Required sender full name (address can be skipped):
           from:  ${{env.AUTHOR}}
           body: |
             
              Branch: ${{github.ref}} 
              Revision: ${{ github.event.pull_request.merge_commit_sha }} 
              Author: ${{ env.AUTHOR}} 
              Link: ${{github.event.pull_request._links.html.href}}            
              Log Message: 
                          ${{env.MERGE_LOG}} 
              Compare: ${{env.COMPARE_URL}}  
              Diff: ${{github.event.pull_request.diff_url}} 
              Modified Files: 
                   ${{env.MODIFIED}} 
              Added Files: 
                   ${{env.ADDED}}   
              Removed Files:     
                   ${{env.DELETED}} 
             
              
           # Optional converting Markdown to HTML (set content_type to text/html too):
           convert_markdown: true
           # Optional priority: 'high', 'normal' (default) or 'low'
           priority: low
