#!/usr/bin/env python

"""Run Chapel test (execution only) inside pbs batch job using qsub.

The job name is set from the environment variable CHPL_PBS_NAME_PREFIX
(defaulting to Chpl) and the name of the program being executing. For
example, running launchcmd-for-aprun-launcher ./hello would use the name
Chpl-hello.

The high level overview of what this does:

 * Detect flavor of qsub: either PBSPro or moab.
   * If neither, raises error.
 * Parses number locales and wall time from the test command args so they can
   be sent to qsub.
 * Rebuilds the test command.
 * Launches the job by passing the test command on stdin to qsub (batch
   mode). Stdout/stderr are directed to a temporary file designated by the
   script.
 * Polls qstat with the given qsub job id every second until the status is C
   (aka complete).
 * Prints the contents of the temp file with stdout/stderr from the job to stdout.
 * Cleans up the temp file and exits.

"""

from __future__ import print_function, unicode_literals, with_statement

import argparse
import contextlib
import datetime
import logging
import os
import os.path
import re
import shlex
import shutil
import subprocess
import sys
import tempfile
import time
import xml.etree.ElementTree

__all__ = ('main')


def main():
    """Run the program!"""
    job = AbstractPbsJob.init_from_environment()
    print(job.launch_qsub(), end='')


class AbstractPbsJob(object):
    """Abstract job runner implementation."""

    # NOTE: This class attribute is intentionally left commented. This will
    #       cause AttributeError if it is accessed from this class. It *should
    #       only* be accessed from a sub class.
    #hostlist_resource = None

    def __init__(self, test_command, reservation_args):
        """Initialize new job runner.

        :type test_command: list
        :arg test_command: command to run in qsub

        :type reservation_args: argparse.Namespace
        :arg reservation_args: reservation arguments parsed from cli
        """
        self.test_command = test_command
        self.num_locales = reservation_args.numLocales
        self.walltime = reservation_args.walltime
        self.hostlist = reservation_args.hostlist

        logging.debug('Created instance of: {0}'.format(self))

    def __repr__(self):
        """Return string representation of this instance."""
        cls_name = str(type(self))
        attrs = ', '.join(map(lambda x: '{0}={1}'.format(x, getattr(self, x, None)),
                              ['test_command', 'num_locales', 'walltime', 'hostlist']))
        return '{0}({1})'.format(cls_name, attrs)

    @property
    def full_test_command(self):
        """Returns instance's test_command prefixed with command to change to
        testing_dir. This is required to support both PBSPro and moab flavors
        of PBS. Whereas moab provides a -d argument when calling qsub, both
        support the $PBS_O_WORKDIR argument.

        :rtype: list
        :returns: command to run in qsub with changedir call
        """
        full_test_command = ['cd', '$PBS_O_WORKDIR', '&&']
        full_test_command.extend(self.test_command)
        return full_test_command

    @property
    def job_name(self):
        """Returns job name string from test command and CHPL_PBS_NAME_PREFIX env var.

        :rtype: str
        :returns: pbs job name
        """
        prefix = os.environ.get('CHPL_PBS_NAME_PREFIX', 'Chpl')
        logging.debug('Job name prefix is: {0}'.format(prefix))

        cmd_basename = os.path.basename(self.test_command[0])
        logging.debug('Test command basname: {0}'.format(cmd_basename))

        job_name = '{0}-{1}'.format(prefix, cmd_basename)
        logging.info('PBS job name is: {0}'.format(job_name))
        return job_name

    def launch_qsub(self):
        """Run qsub batch job in subprocess and wait for job to complete. When
        finished, returns output as string.

        :rtype: str
        :returns: stdout/stderr from job
        """
        with _temp_dir() as working_dir:
            output_file = os.path.join(working_dir, 'test_output.log')
            testing_dir = os.getcwd()

            logging.info(
                'Starting qsub job "{0}" on {1} nodes with walltime {2} '
                'and output file: {3}'.format(
                    self.job_name, self.num_locales, self.walltime, output_file))

            # TODO: create self._qsub_command property. (thomasvandoren, 2014-07-23)
            qsub_command = ['qsub', '-V', '-N', self.job_name, '-j', 'oe',
                            '-o', output_file]
            if self.num_locales >= 0:
                qsub_command.append('-l')
                qsub_command.append('nodes={0}'.format(self.num_locales))
            if self.walltime is not None:
                qsub_command.append('-l')
                qsub_command.append('walltime={0}'.format(self.walltime))
            if self.hostlist is not None:
                qsub_command.append('-l')
                qsub_command.append('{0}={1}'.format(
                    self.hostlist_resource, self.hostlist))

            logging.debug('qsub command to run: {0}'.format(qsub_command))

            logging.debug('Opening qsub subprocess.')
            qsub_proc = subprocess.Popen(
                qsub_command,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                cwd=testing_dir,
                env=os.environ.copy()
            )

            test_command_str = ' '.join(self.full_test_command)
            logging.debug('Communicating with qsub subprocess. Sending test command on stdin: {0}'.format(
                test_command_str))
            stdout, stderr = qsub_proc.communicate(input=test_command_str)
            logging.debug('qsub process returned with status {0}, stdout: {1} stderr: {2}'.format(
                qsub_proc.returncode, stdout, stderr))

            if qsub_proc.returncode != 0:
                msg = 'qsub failed with exit code {0} and output: {1}'.format(
                    qsub_proc.returncode, stdout)
                logging.error(msg)
                raise ValueError(msg)

            job_id = stdout.strip()
            logging.info('Test has been queued (job id: {0}). Waiting for output...'.format(job_id))

            # TODO: The while condition here should look for jobs that become held,
            #       are in the queue too long, or ??? and do something
            #       intelligent. For example, if the job is in the queue longer
            #       than the walltime, it should probably be deleted (qdel
            #       <job_id>) and a timeout should be reported. Here are all the
            #       pbs (torque) job statuses:
            #
            #           C -     Job is completed after having run/
            #           E -  Job is exiting after having run.
            #           H -  Job is held.
            #           Q -  job is queued, eligible to run or routed.
            #           R -  job is running.
            #           T -  job is being moved to new location.
            #           W -  job is waiting for its execution time
            #                (-a option) to be reached.
            #           S -  (Unicos only) job is suspend.
            #
            #       (thomasvandoren, 2014-04-09)

            def is_done(job_id, output_file):
                """Returns True when one of two events occur:

                 1) _qstat(job_id) returns 'C' indicating the job is complete.

                 2) _qstat(job_id) raises a ValueError, which can indicate that the
                    job has completed *and* been dequeued, AND the output file
                    exists. If the output file exists and the job has been
                    dequeued, it is safe to assume it completed.
                """
                try:
                    job_status = self.qstat(job_id)
                    return job_status == 'C'
                except ValueError as ex:
                    # ValueError may indicate that the job completed and was
                    # dequeued before we last checked the status. If the output
                    # file exists, assume success. Otherwise re raise error
                    # message.
                    if os.path.exists(output_file):
                        return True
                    raise

            while not is_done(job_id, output_file):
                time.sleep(1.0)
            logging.debug('qstat reports job {0} as complete.'.format(job_id))

            if not os.path.exists(output_file):
                logging.error('Output file from pbs job does not exist at: {0}'.format(
                    output_file))
                raise ValueError('[Error: output file from pbs job (id: {0}) does not exist at: {1}]'.format(
                    job_id, output_file))

            logging.debug('Reading output file.')
            with open(output_file, 'r') as fp:
                output = fp.read()
            logging.info('The test finished with output of length {0}.'.format(len(output)))

        return output

    @classmethod
    def _detect_qsub_flavor(cls):
        """Returns appropriate class based on the detected version of pbs in
        the environment.

        If qsub is not callable, raise RuntimeError.

        If MOABHOMEDIR is set in the environment, assume moab and return
        MoabJob type.

        Otherwise, assume PBSPro (qsub is callable), and return PbsProJob type.

        :rtype: type
        :returns: MoabJob or PbsProJob depending on environment
        """
        try:
            logging.debug('Starting qsub process to check availability.')
            qsub_proc = subprocess.Popen(
                ['qsub', '--version'],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT)

            logging.debug('Communicating with qsub process.')
            stdout, stderr = qsub_proc.communicate()
        except OSError as ex:
            raise RuntimeError(ex)
        if qsub_proc.returncode != 0:
            raise RuntimeError('Non-zero exit code when running qsub --version.')
        elif os.environ.has_key('MOABHOMEDIR'):
            return MoabJob
        else:
            return PbsProJob

    @classmethod
    def init_from_environment(cls):
        """Factory to initialize new job runner instance based on version of
        pbs available and command line arguments.

        :rtype: AbstractPbsJob
        :returns: subclass of AbstractPbsJob based on environment
        """
        args, unparsed_args = cls._parse_args()
        cls._setup_logging(args.verbose)

        logging.info('Num locales is: {0}'.format(args.numLocales))
        logging.info('Walltime is set to: {0}'.format(args.walltime))

        test_command = cls._get_test_command(args, unparsed_args)
        logging.debug('Test command is: {0}'.format(' '.join(test_command)))
        if not test_command:
            logging.error('No test command provided.')
            raise ValueError('No test command found.')

        qsub_flavor = cls._detect_qsub_flavor()
        logging.info('Detected pbs flavor: {0}'.format(qsub_flavor))
        return qsub_flavor(test_command, args)

    @classmethod
    def qstat(cls, job_id):
        """Query job stat using qstat. AbstractJob does not implement this
        method. It is the responsibility of the sub class.

        :type job_id: str
        :arg job_id: pbs job id

        :rtype: str
        :returns: qsub job status
        """
        raise NotImplementedError('qstat class method is implemented by sub classes.')

    @classmethod
    def _cli_walltime(cls, walltime_str):
        """Returns walltime_str if it can be parsed by one of the known walltime
        formats. Raises ValueError if walltime_str does not match a known format.

        :type walltime_str: str
        :arg walltime_str: walltime string from command line

        :rtype: str
        :returns: valid walltime string from command line
        """
        try:
            seconds = int(walltime_str)
            logging.debug('Parsed walltime as integer seconds: {0}'.format(seconds))
            return walltime_str
        except ValueError:
            pass

        try:
            seconds = float(walltime_str)
            logging.debug('Parsed walltime as float seconds: {0}'.format(seconds))
            return walltime_str
        except ValueError:
            pass

        # http://www.csc.fi/english/pages/louhi_guide/batch_jobs/commands/qsub
        known_formats = [
            '%M:%S',
            '%H:%M:%S',
            '%M:%S.%f',
            '%H:%M:%S.%f',
        ]
        for fmt in known_formats:
            try:
                walltime = datetime.datetime.strptime(walltime_str, fmt)
                logging.debug('Parsed walltime as datetime with format {0}: {1}'.format(
                    fmt, walltime))
                return walltime_str
            except ValueError:
                pass

        raise ValueError('Did not recognize walltime: {0}'.format(walltime_str))

    @classmethod
    def _get_test_command(cls, args, unparsed_args):
        """Returns test command by folding walltime and numLocales args into unparsed
        command line args.

        :type args: argparse.Namespace
        :arg args: Namespace from parsing original args

        :type unparsed_args: list
        :arg unparsed_args: list of unparsed command line args that make up test command

        :rtype: list
        :returns: command to be tested in qsub

        """
        logging.debug('Rebuilding test command from parsed args: {0} and '
                      'unparsed args: {1}'.format(args, unparsed_args))
        if args.numLocales >= 0:
            unparsed_args.append('-nl')
            unparsed_args.append(str(args.numLocales))
        logging.debug('Rebuild test command: {0}'.format(unparsed_args))
        return unparsed_args

    @classmethod
    def _parse_args(cls):
        """Parse and return command line arguments. Returns tuple of Namespace with
        parsed args and unparsed args.
        """
        class OurFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter):
            pass

        parser = argparse.ArgumentParser(
            description=__doc__,
            formatter_class=OurFormatter)
        parser.add_argument('-v', '--verbose', action='store_true',
                            help='Verbose output.')
        parser.add_argument('-nl', '--numLocales', type=int, default=-1,
                            help='Number locales.')
        parser.add_argument('--n', help='Placeholder')
        parser.add_argument('--walltime', type=cls._cli_walltime,
                            help='Timeout as walltime for qsub.')
        parser.add_argument('--hostlist',
                            help=('Optional hostlist specification for reserving '
                                  'specific nodes. Can also be set with env var CHPL_PBS_HOSTLIST'))

        args, unparsed_args = parser.parse_known_args()

        # Allow hostlist to be set in environment variable CHPL_PBS_HOSTLIST.
        if args.hostlist is None:
            args.hostlist = os.environ.get('CHPL_PBS_HOSTLIST')

        # It is bad form to use a two character argument with only a single
        # dash. Unfortunately, we support it. And unfortunately, python argparse
        # thinks --n is the same thing. So, we pull out --n above so we can put it
        # back in the unparsed args here.
        if args.n:
            logging.debug('Found a --n arg. Putting it back in the unparsed args.')
            unparsed_args.append('--n={0}'.format(args.n))

        return args, unparsed_args

    @classmethod
    def _qstat(cls, job_id, args=None):
        """Call qstat and return output from stdout.

        Raises ValueError if exit code is non-zero.

        :type job_id: str
        :arg job_id: pbs job id

        :type args: list
        :arg args: additional arguments to pass qstat

        :rtype: str
        :returns: qsub job status
        """
        if args is None:
            args = []

        qstat_command = ['qstat'] + args + [job_id]
        logging.debug('qstat command to run: {0}'.format(qstat_command))

        logging.debug('Opening qstat subprocess.')
        qstat_proc = subprocess.Popen(
            qstat_command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            env=os.environ.copy()
        )

        logging.debug('Communicating with qstat subprocess.')
        stdout, stderr = qstat_proc.communicate()
        logging.debug('qstat process returned with status {0}, stdout: {1}, and stderr: {2}'.format(
            qstat_proc.returncode, stdout, stderr))

        if qstat_proc.returncode != 0:
            raise ValueError('Non-zero exit code {0} from qstat: "{1}"'.format(
                qstat_proc.returncode, stdout))
        else:
            return stdout

    @classmethod
    def _setup_logging(cls, verbose=False):
        """Setup logging to console.

        :type verbose: bool
        :arg verbose: if True, set log level to DEBUG
        """
        # logging module configures default handlers when logging.debug/info/etc
        # are called. In order for our basicConfig call to work, we need to get rid
        # of those. This is generally a bad practice unless we are absolutely sure
        # we are the top level script and we won't break other logging. That's
        # probably true here.
        #
        # See note here: https://docs.python.org/2/library/logging.html#logging.log
        logging.root.handlers = []

        if verbose:
            log_level = logging.DEBUG
        else:
            log_level = logging.WARN
        logging.basicConfig(
            level=log_level, format='[%(module)s] %(asctime)s [%(levelname)s] %(msg)s')
        logging.debug('Verbose logging enabled.')


class MoabJob(AbstractPbsJob):
    """Moab implementation of pbs job runner."""

    hostlist_resource = 'hostlist'

    @classmethod
    def qstat(cls, job_id):
        """Query job status using qstat.

        :type job_id: str
        :arg job_id: pbs job id

        :rtype: str
        :returns: qsub job status
        """
        output = cls._qstat(job_id, args=['-x'])
        try:
            root = xml.etree.ElementTree.fromstring(output)
            return root.find('Job').find('job_state').text
        except AttributeError as ex:
            logging.exception('Could not find job_state element in xml output: {0}'.format(ex))
            logging.error('XML output: {0}'.format(output))
            raise
        except Exception as ex:
            logging.exception('Failed to parse qstat output: {0}'.format(ex))
            logging.error('XML output: {0}'.format(output))
            raise


class PbsProJob(AbstractPbsJob):
    """PBSPro implementation of pbs job runner."""

    hostlist_resource = 'mppnodes'

    @property
    def job_name(self):
        """Takes the job_name from the super class, AbstractJob, and returns
        the last 15 characters. PBSPro limits job name to 15 characters.

        :rtype: str
        :returns: pbs job name
        """
        super_name = super(PbsProJob, self).job_name
        job_name = super_name[-15:]
        logging.info('PBSPro job name is: {0}'.format(job_name))
        return job_name

    @classmethod
    def qstat(cls, job_id):
        """Query job status using qstat.

        Assumes ``qstat <job_id>`` output is of the form:

        ::

            Job id            Name             User              Time Use S Queue
            ----------------  ---------------- ----------------  -------- - -----
            1889416.sdb       lj               tvandoren         00:00:03 R workq

        :type job_id: str
        :arg job_id: pbs job id

        :rtype: str
        :returns: qsub job status
        """
        output = cls._qstat(job_id)
        lines = output.splitlines()

        if len(lines) != 3:
            logging.error('Unexpected number of lines in qstat output: {0}'.format(output))
            raise ValueError('Expected 3 lines of qstat output, not {0}.'.format(len(output)))

        header_line = lines[0]
        job_line = lines[-1]

        # Use regex to find position of status. Then extract the one character
        # status from the job line.
        pattern = re.compile('\sS\s')
        match = pattern.search(header_line)
        if match is not None:
            status_char = match.start() + 1
            return job_line[status_char]
        else:
            logging.error('Could not find S column in header line of qstat output.')
            raise ValueError('Could not find {0} pattern in header line: {1}'.format(
                pattern.pattern, header_line))


@contextlib.contextmanager
def _temp_dir(dir_prefix='chapel-test-tmp'):
    """Context manager that creates a temporary directory in the current working
    directory with name of dir_prefix. When the manager exits, the directory is
    deleted.

    :type dir_prefix: str
    :arg dir_prefix: temp dir name prefix
    """
    try:
        cwd = os.getcwd()
        logging.debug('Creating temporary working directory in: {0}'.format(cwd))
        tmp_dir = tempfile.mkdtemp(prefix=dir_prefix, dir=cwd)

        logging.debug('Yielding temporary directory context manager.')
        yield tmp_dir
    finally:
        logging.debug('Deleting temporary working directory at: {0}'.format(tmp_dir))
        shutil.rmtree(tmp_dir)


if __name__ == '__main__':
    main()
