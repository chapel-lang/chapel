#!/usr/bin/env perl

use Cwd;
use Cwd 'abs_path';
use File::Basename;
use File::Path qw(mkpath);
use File::Spec;
use File::Temp qw/ tempdir /;

$version = "";

while (@ARGV) {
    $version = shift @ARGV;
    last;
}

if ($version eq "") {
} else {
    $version = "-$version";
}

$origCwd = abs_path(cwd());

# Find CHPL_HOME. If unset, use root of repo relative to this script.
$chplhome = "";
if (exists($ENV{"CHPL_HOME"})) {
    $chplhome = $ENV{"CHPL_HOME"};
} else {
    $script_dir = dirname($0);
    $chplhome = abs_path("$script_dir/../..");
}

# If CHPL_GEN_RELEASE_NO_CLONE is set in environment, do not clone the repo and
# just use $CHPL_HOME as the work space.
$no_clone = 0;
$archive_dir = "";
$resultdir = "";
$reldir = "";
$transform_args = "";
if (exists($ENV{"CHPL_GEN_RELEASE_NO_CLONE"})) {
    $no_clone = 1;
    $archive_dir = $chplhome;
    $rootdir = $chplhome;
    $resultdir = "$chplhome/tar";
    $reldir = ".";

    $tar_version = `tar --version`;
    if ( $tar_version =~ /bsd/ ) {
        $transform_args = "-s '/./chapel$version/'";
    } else {
        $transform_args = "--transform 's/./chapel$version/'"
    }
}

if ($no_clone == 0) {
    # check out a clean copy of the sources into a temporary directory
    $user = `whoami`;
    chomp($user);

    $basetmpdir = File::Spec->tmpdir;
    if (exists($ENV{"CHPL_GEN_RELEASE_TMPDIR"})) {
        $basetmpdir = $ENV{"CHPL_GEN_RELEASE_TMPDIR"};
    }
    $tmpdir = tempdir("chapel-release.$user.deleteme.XXXXX", DIR => $basetmpdir, CLEANUP => 1);

    $reldir = "chapel$version";
    $rootdir = "$tmpdir/$reldir";
    $git_url = $ENV{'CHPL_HOME_REPOSITORY'};
    if ($git_url eq "") {
        $git_url = "https://github.com/chapel-lang/chapel";
    }

    $git_branch = "master";
    if (exists($ENV{'CHPL_GEN_RELEASE_BRANCH'})) {
        $git_branch = $ENV{'CHPL_GEN_RELEASE_BRANCH'};
    }

    print "Cloning the sources (repo: $git_url branch: $git_branch)...\n";
    $clone_status = system("git clone --branch $git_branch $git_url $rootdir");

    if ($clone_status != 0) {
        print "Failed to clone repo.\n";
        exit 1;
    }

    print "Creating git archive...\n";
    $archive_dir = "$rootdir/$reldir";
    system("cd $rootdir && git archive --format=tar HEAD | (mkdir -pv $archive_dir && cd $archive_dir && tar -xf -)");

    if (defined($ENV{"CHPL_HOME"})) {
        $resultdir = $ENV{"CHPL_HOME"};
        $resultdir = "$resultdir/tar";
    } else {
        $resultdir = $basetmpdir;
    }
}

# explicit files to include
@files = (
       "ACKNOWLEDGEMENTS",
       "CHANGES",
       "CONTRIBUTORS",
       "COPYRIGHT",
       "GOALS",
       "LICENSE",
       "LICENSE.chapel",
       "Makefile",
       "PERFORMANCE",
       "README",
       "README.files",
       "STATUS",
       "compiler/passes/reservedSymbolNames",
       "etc/README",
       "util/README",
       "util/build_configs.py",
       "util/printchplenv",
       "util/setchplenv.bash",
       "util/setchplenv.csh",
       "util/setchplenv.fish",
       "util/setchplenv.sh",
       "util/start_test",
       "util/chpltags",
);


# C/C++ sources
@code_dirs = (
    "compiler"
);

# include these dirs and their entire contents
@complete_dirs = (
    "compiler/etc",
    "doc",
    "etc/emacs",
    "etc/source-highlight",
    "etc/vim",
    "examples",
    "make",
    "man/man1",
    "modules",
    "modules-ipe",
    "runtime",
    "third-party",
    "util/chplenv",
    "util/config",
    "util/quickstart",
    "util/test"
);


chdir "$archive_dir";

print "Creating the examples directory...\n";
system("cp -r test/release/examples .");
system("cd util && cp start_test ../examples/");
system("./util/devel/test/extract_tests --no-futures -o ./examples/spec spec/*.tex");

print "Building the man pages...\n";
system("make man");
system("make man-chpldoc");

print "Building the STATUS file...\n";
system("make STATUS");

print "Creating the docs directory...\n";
system("mv doc doctmp");
system("mv doctmp/release doc");
system("rm -r doctmp");

print "Removing Makefiles that are not intended for release...\n";
system("cd make/platform && rm Makefile.sunos_old");

print "Removing compiler directories that are not intended for release...\n";
system("cd compiler/include && rm -r sunos_old");

print "Removing runtime directories that are not ready for release...\n";
system("cd runtime/src/launch && rm -r dummy");
system("cd runtime/src/launch && rm -r mpirun");
system("cd runtime/include && rm -r sunos_old");
system("cd third-party && rm -rf txt2man");

print "Removing third-party directories that are not intended for release...\n";
system("cd third-party && rm *.devel*");

chdir "$rootdir";

print "Chmodding the hierarchy\n";
system("chmod -R ugo+rX $reldir");
system("chmod -R go-w $reldir");

foreach $file (@files) {
    $dfile = "$reldir/$file";
    if (!(-e $dfile)) {
        print "$dfile does not exist\n";
        exit( 9);
    }
    push @tarfiles, $dfile;
}

foreach $dir (@code_dirs) {
    @filelist = `find $reldir/$dir`;
    foreach $fullpath (@filelist) {
        chomp $fullpath;
        $file = $fullpath;
        $file =~ s/(\S+\/)+//g;
        if ($file =~ /(\.(h|cpp|c|ypp|lex)$)|Makefile|README|BUILD_VERSION/) {
            # print "$fullpath\n";
            push @tarfiles, $fullpath;
        }
    }
}

foreach $dir (@complete_dirs) {
    push @tarfiles, "$reldir\/$dir";
}


if (! -d $resultdir) {
    print("Creating $resultdir\n");
    mkpath($resultdir, 1);
}

$tarball_name = "$resultdir/chapel$version.tar.gz";
$cmd = "tar -cz $transform_args -f $tarball_name @tarfiles";
print "$cmd\n";
system ($cmd);

print "Left result in $tarball_name\n";

chdir $origCwd;
