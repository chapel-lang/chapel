#!/usr/bin/env perl

use File::Basename;
use File::Path qw(mkpath);
use Cwd;
use Cwd 'abs_path';
use Sys::Hostname;

# Mailing lists.
$failuremail = "chapel-test-results-regressions\@lists.sourceforge.net";
$allmail = "chapel-test-results-all\@lists.sourceforge.net";

$valgrind = 0;
$interpret = 0;
$printusage = 1;
$debug = 1;
$runtests = 1;
$buildruntime = 1;
$hello = 0;
$allhellos = 0;
$examples = 0;
$performance = 0;
$performancedescription = "";
$releasePerformance = 0;
$compperformance = 0;
$compperformancedescription = "";
$componly = 0;
$nofutures = 0;
$suppressions = "";
$parnodefile = "";
$baseline = 0;
$fast = 0;
$nolocal = 0;
$verify = 0;
$retaintree = 0;
$dist = "";
$llvm = 0;
$localeModelSuite = 0;
$memleaks = "";
$multilocale = 0;
$svnrevopt = "";
$compopts = "";
$execopts = "";
$startdate = "-1";
$numtrials = "";
$cronrecipient = "";

while (@ARGV) {
    $flag = shift @ARGV;
    if ($flag eq "-debug") {
	$debug = 1;
        $printusage = 0;
    } elsif ($flag eq "-cron") {
	$debug = 0;
        $printusage = 0;
    } elsif ($flag eq "-valgrind") {
	$valgrind = 1;
    } elsif ($flag eq "-interpret") {
        $interpret = 1;
    } elsif ($flag eq "-notest") {
        $runtests = 0;
    } elsif ($flag eq "-noruntime") {
	$buildruntime = 0;
    } elsif ($flag eq "-hello") {
	$hello = 1;
    } elsif ($flag eq "-hellos") {
	$hello = 1;
	$allhellos = 1;
    } elsif ($flag eq "-examples") {
        $examples = 1;
    } elsif ($flag eq "-multilocale") {
        $examples = 1;
        $multilocale = 1;
    } elsif ($flag eq "-localeModel") {
        # TODO: Allow -localeModel to run full suite (e.g. w/o setting
        #       $examples = 1) (thomasvandoren, 2014-02-10)
        $examples = 1;
        $localeModelSuite = 1;
    } elsif ($flag eq "-performance") {
        $performance = 1;
    } elsif ($flag eq "-performance-description") {
        $performance = 1;
        $performancedescription = shift @ARGV;
    } elsif ($flag eq "-releasePerformance") {
        $releasePerformance = 1;
    } elsif ($flag eq "-compperformance") {
        $compperformance = 1;
        $compperformancedescription = shift @ARGV;
    } elsif ($flag eq "-numtrials") {
        $numtrials = shift @ARGV;
    } elsif ($flag eq "-compopts") {
	$compopts = shift @ARGV;
    } elsif ($flag eq "-execopts") {
	$execopts = shift @ARGV;
    } elsif ($flag eq "-startdate") {
	$startdate = shift @ARGV;
    } elsif ($flag eq "-baseline") {
        $baseline = 1;
    } elsif ($flag eq "-dist") {
        $dist = shift @ARGV;
    } elsif ($flag eq "-fast") {
        $fast = 1;
    } elsif ($flag eq "-memleaks") {
        $memleaks = shift @ARGV;
    } elsif ($flag eq "-suppress") {
        $suppressions = shift @ARGV;
    } elsif ($flag eq "-componly") {
	$componly = 1;
    } elsif ($flag eq "-no-futures") {
	$nofutures = 1;
    } elsif ($flag eq "-parnodefile") {
        $parnodefile = shift @ARGV;
    } elsif ($flag eq "-no-local") {
        $nolocal = 1;
    } elsif ($flag eq "-verify") {
        $verify = 1;
    } elsif ($flag eq "-retaintree") {
        $retaintree = 1;
    } elsif ($flag eq "-r") {
        $svnrevopt = "-r " . shift @ARGV;
    } elsif ($flag eq "-cron-recipient") {
        $cronrecipient = shift @ARGV;
    } elsif ($flag eq "-llvm") {
        $llvm = 1;
    } else {
        $printusage = 1;
        last;
    }
}


print localtime() . "  host: " . hostname . "\n";

# If this is running in jenkins, link to the job in the email.
$crontab = "Unknown origin for this job...";
if (exists($ENV{"BUILD_URL"})) {
    $buildurl = $ENV{"BUILD_URL"};
    $crontab = "View this job at:\n\t$buildurl";
}

$svntoday = `date +%F`; chomp($svntoday);
if ($debug == 0 && $svnrevopt eq "") {
    $svnrevopt = "-r'{$svntoday 00:00 -0700}'";
}

if ($ENV{'CHPL_COMM'} eq "gasnet") {
    $gasnet = 1;
} elsif ($ENV{'CHPL_COMM'} eq "mpi") {
    $mpi = 1;
}

$statdate = `date +%D`; chomp($statdate);

if (@ARGV) {
    $statdate = shift @ARGV;
}

if ($printusage == 1) {
    print "nightly [-debug|-cron] {[-notest] [-valgrind] [-componly] [-no-futures] [-performance]}\n";
    print "\t-debug       : check out sources and run for individual user (default)\n";
    print "\t-cron        : use for nightly cron runs only\n";
    print "\t-notest      : don't run the tests (check the build only)\n";
    print "\t-noruntime   : don't build the runtime or run the tests\n";
    print "\t-examples    : run the release/examples tests only\n";
    print "\t-localeModel : run localeModel suite only\n";
    print "\t-multilocale : run multilocale suite only\n";
    print "\t-hello       : run the release/examples/hello.chpl test only\n";
    print "\t-hellos      : run the release/examples/hello*.chpl tests only\n";
    print "\t-valgrind    : run tests in valgrind mode\n";
#    print "\t-interpret   : run tests in interpreted mode\n";
    print "\t-performance : run performance tests\n";
    print "\t-performance-description : run performance tests with additional description";
    print "\t-compperformance <description>: run tests with compiler performance tracking\n";
    print "\t-numtrials <number> : number of trials to run\n";
    print "\t-startdate	  : run performance tests providing a common start date to all the graphs\n";
    print "\t-baseline    : run testins using --baseline\n";
    print "\t-dist <dist> : run distribution robustness tests\n";
    print "\t-fast        : run tests using --fast\n";
    print "\t-llvm        : run tests using --llvm\n";
    print "\t-memleaks <log> : run memleaks tests\n";
    print "\t-no-local    : run tests using --no-local\n";
    print "\t-componly    : only run the compiler, not the generated binary\n";
    print "\t-no-futures  : do not run future tests\n";
    print "\t-parnodefile : specify a node file to use for parallel testing\n";
    print "\t-cron-recipient : send -cron emails to this address instead of SourceForge mailing list(s)\n";
    exit 1;
}


$ENV{'CHPL_DEVELOPER'} = "true";

print "\n";
system("printenv");
$modulecmd = "/sw/modules/bin/linux/modulecmd"; # heuristic
if (-x $modulecmd) { system("$modulecmd bash list"); }
print "\n";

#
# get uniquifiers
#
$user = `whoami`;
chomp($user);
$debugmail = $ENV{'CHPL_NIGHTLY_DEBUG_EMAIL'};
if ($debugmail eq "") {
    $debugmail = "$user\@cray.com";
}
$today = `date +%w-%a`; chomp($today);
$starttime = localtime;

# Override $failuremail and $allmail if -cron-recipient argument or
# CHPL_NIGHTLY_CRON_RECIPIENT is set.

if ($cronrecipient eq "" and exists($ENV{"CHPL_NIGHTLY_CRON_RECIPIENT"})) {
    $cronrecipient = $ENV{"CHPL_NIGHTLY_CRON_RECIPIENT"};
}

if ($cronrecipient ne "") {
    print "Overriding \$failuremail and \$allmail with: $cronrecipient.\n";
    $failuremail = $cronrecipient;
    $allmail = $cronrecipient;
}

#
# directory locations
#
$basetmpdir = $ENV{'CHPL_NIGHTLY_TMPDIR'}; 
if ($basetmpdir eq "") { 
    $basetmpdir = $ENV{'TMPDIR'}; 
} 
if ($basetmpdir eq "") { 
    $basetmpdir = "/tmp"; 
} 
$make = $ENV{'CHPL_NIGHTLY_MAKE'};
if ($make eq "") {
    $make = $ENV{'MAKE'};
}
if ($make eq "") {
    $make = "make";
}
$cronlogdir = $ENV{'CHPL_NIGHTLY_CRON_LOGDIR'};

$host = hostname;
if ($cronlogdir eq "") {
    if ($performance == 1) {
        $cronlogdir = "/data/sea/chapel/NightlyPerformance/$host";
    } else {
        $cronlogdir = "/data/sea/chapel/Nightly";
    }
}

# Create cronlogdir if it does not exist.
unless(-d $cronlogdir) {
    mkpath $cronlogdir;
}

$logdir = $ENV{'CHPL_NIGHTLY_LOGDIR'};
if ($debug == 1 && $logdir eq "") {
    $logdir = getcwd()."/Log";
    if (! -e $logdir) {
        mysystem("mkdir $logdir > /dev/null", "creating log dir", 1, 1);
    } elsif (! (-r $logdir and -w $logdir and -d $logdir)) {
        print "Error: CHPL_NIGHTLY_LOGDIR ($logdir) not accessible\n";
    }
}


$testbindirname = dirname($0);
$utildir = "$testbindirname/../../util";



#
# platform variables
#
print "Setting platform variables\n";
$hostplatform = `$utildir/chplenv/chpl_platform.py --host`; chomp($hostplatform);
$targetplatform = `$utildir/chplenv/chpl_platform.py --target`; chomp($targetplatform);
$hostcompiler = `$utildir/chplenv/chpl_compiler.py --host`; chomp($hostcompiler);
$targetcompiler = `$utildir/chplenv/chpl_compiler.py --target`; chomp($targetcompiler);
$tasks = `$utildir/chplenv/chpl_tasks.py`; chomp($tasks);
$localeModel =  `$utildir/chplenv/chpl_locale_model.py`; chomp($localeModel);
$mem =  `$utildir/chplenv/chpl_mem.py --target`; chomp($mem);
$comm = `$utildir/chplenv/chpl_comm.py`; chomp($comm);
if ($comm eq "gasnet" && $ENV{'CHPL_GASNET_SEGMENT'} ne "") {
    $comm = "$comm-$ENV{'CHPL_GASNET_SEGMENT'}";
}

$fullplatform = "$targetplatform.$targetcompiler.$comm.$tasks.$localeModel";
if ($mem ne "cstdlib") {
    $fullplatform = "$fullplatform.$mem";
}
if ($hostplatform ne $targetplatform) {
    $fullplatform = "$fullplatform--$hostplatform";
    if ($hostcompiler ne $targetcompiler) {
        $fullplatform = "$fullplatform.$hostcompiler";
    }
}

#
# set mail options
#
$mailer = $ENV{'CHPL_MAILER'};
if ($mailer eq "") {
    $mailer = "Mail";
}

#
# directory variables
#
$cwd = abs_path(dirname(__FILE__));
$chplhomedir = abs_path("$cwd/../..");
$testdir = "$chplhomedir/test";
print "\$chplhomedir = $chplhomedir\n";


$launchcmd = "$ENV{'CHPL_APP_LAUNCH_CMD'}";

#Cron (linux64-gnu-none-none): 0 new failures (39/105 total failures/futures)

if ($performance == 1) {
    $subjectid = " Perf";
} elsif ($baseline == 1) {
    $subjectid = " Baseline";
} elsif (!($dist eq "")) {
    $subjectid = " Dist $dist";
} elsif ($fast == 1) {
    $subjectid = " Fast";
} elsif (!($memleaks eq "")) {
    $subjectid = " Memory-Leaks";
} elsif ($nolocal == 1) {
    $subjectid = " No-local";
} elsif ($verify == 1) {
    $subjectid = " Verify";
} elsif ($llvm == 1) {
    $subjectid = " LLVM";
} elsif ($runtests == 0) {
    $subjectid = " Build-only";
} elsif ($buildruntime == 0) {
    $subjectid = " Build-compiler-only";
} elsif ($componly == 1) {
    $subjectid = " Compile-only";
} elsif ($valgrind == 1) {
    $subjectid = " Valgrind";
} else {
    $subjectid = "";
}

if ($debug == 1) {
    $subjectid = "Dbug$subjectid";
    $recipient = $debugmail;
    $nochangerecipient = $debugmail;
} else {
    $subjectid = "Cron$subjectid";
    $recipient = "$failuremail $allmail";
    $nochangerecipient = $allmail;
}



if ($valgrind == 1) {
    if ($interpret == 1) {
        $threechars = "vgi";
        $morechars = "intrp+vgrnd";
    } elsif ($performance == 1) {
        $threechars = "vgp";
        $morechars = "perf+vgrnd";
    } elsif ($baseline == 1) {
        $threechars = "vgn";
        $morechars = "baseline+vgrnd";
    } elsif (!($dist eq "")) {
        $threechars = "vgrdist$dist";
        $morechars = "dist-$dist+vgrnd";
    } elsif ($fast == 1) {
        $threechars = "vgn";
        $morechars = "fast+vgrnd";
    } elsif (!($memleaks eq "")) {
        $threechars = "vgrmem";
        $morechars = "mem+vgrnd";
    } elsif ($nolocal == 1) {
        $threechars = "vnl";
        $morechars = "no-inline+vgrnd";
    } else {
        $threechars = "vgr";
        $morechars = "valgrind";
    }
} elsif ($interpret == 1) {
    $threechars = "int";
    $morechars = "interpret";
} elsif ($performance == 1) {
    $threechars = "prf";
    $morechars = "performance";
} elsif ($baseline == 1) {
    $threechars = "npt";
    $morechars = "baseline";
} elsif (!($dist eq "")) {
    $threechars = "dist$dist";
    $morechars = "dist-$dist";
} elsif ($fast == 1) {
    $threechars = "fst";
    $morechars = "fast";
} elsif (!($memleaks eq "")) {
    if ($examples == 1) {
        $threechars = "mem";
        $morechars = "memoryleaks";
    } else {
        $threechars = "mlf";
        $morechars = "memoryleaks-full";
    }
} elsif ($nolocal == 1) {
    $threechars = "nlc";
    $morechars = "nolocal";
} elsif ($verify == 1) {
    $threechars = "vfy";
    $morechars = "verify";
} elsif ($llvm == 1) {
    $threechars = "lvm";
    $morechars = "llvm";
} elsif ($examples == 1) {
    $threechars = "exm";
    if ($multilocale == 1) {
        $morechars = "multilocale-examples";
    } elsif ($localeModelSuite) {
        $morechars = "localeModel-examples";
    } else {
        $morechars = "examples";
    }
} else {
    $threechars = "std";
    $morechars = "standard";
}


#
# test log filenames
#
if ($debug == 1) {
  $rawlog = "$logdir/debug-$fullplatform-$threechars.log";
} else {
  $rawlog = "$logdir/day$today-$fullplatform-$threechars.log";
}
$rawsummary = "$rawlog.summary";
$sortedsummary = "$rawlog.sorted";
$prevsummary = "$cronlogdir/last-$fullplatform-$threechars.log.sorted";

if ($parnodefile eq "") {
  # put the log in /tmp, avoid NFS
  # $sortedsummary and $prevsummary do not move
  $permlog = $rawlog;
  $permsum = $rawsummary;
  $rawlog     = $basetmpdir . "/" . basename($rawlog) . "." . $$;
  $rawsummary = "$rawlog.summary";
} else {
  $permlog = "<invalid use of permlog>";
  $permsum = "<invalid use of permsum>";
}

#
# make "prev" logs if they don't already exist
#
ensureSummaryExists($prevsummary);


$somethingfailed = 0;


#
# make environment is set properly
#
delete($ENV{'CHPLDEVTMP'});
delete($ENV{'CHPL_HOME'});

#mysystem("which chpl", "locating chpl", 0, 0);
#mysystem("env", "checking environment", 0, 0);

if (-d "$chplhomedir/.git") {
    $revision = `git rev-parse --short HEAD`;
    $revision = "https://github.com/chapel-lang/chapel/commit/$revision";
} elsif (-d "$chplhomedir/.svn") {
    $revision = `cd $chplhomedir && svnversion`;
} else {
    $revision = "unknown";
}
chomp($revision);
$revision = "Revision: $revision";

#
# if on cygwin, blow away FILES files because they wreak havoc on stuff
#
if ($hostplatform eq "cygwin") {
    mysystem("cd $chplhomedir && find . -name FILES -exec rm {} \\;");
}


print "Making DEBUG=0 OPTIMIZE=1 compiler\n";
$makestat = mysystem("cd $chplhomedir && $make DEBUG=0 OPTIMIZE=1 compiler", "making chapel compiler", 0, 1);
if ($makestat != 0) {
    print "Making DEBUG=0 compiler\n";
    # Since the rest of the compiler is being built unoptimized, disable
    # compiler performance testing so we don't get unexplained hiccups in
    # the perf graphs.
    print "compiler performance testing will be disabled\n";
    $compperformance = 0;
    mysystem("cd $chplhomedir && $make DEBUG=0 compiler", "making chapel compiler", 1, 1);
}

if ($buildruntime == 0) {
    $endtime = localtime;
    $shortstatus = "Passed";

    $mailsubject = "$subjectid ($fullplatform) $shortstatus";
    $mailcommand = "| $mailer -s \"$mailsubject \" $nochangerecipient";
    
    print "Mailing to minimal group\n";
    open(MAIL, $mailcommand);
    
    print MAIL startMailHeader($revision, "<no logfile>", $starttime, $endtime, $crontab);
    print MAIL "Built compiler but not runtime, and did not run tests\n";
    print MAIL endMailHeader();
    close(MAIL);
    exit 0;
}

# if this is a performance test run then failing to build the runtime with
# optimizations is a fatal error.  Otherwise we could get hiccups in the
# performance graphs that are difficult to track.
print "Making DEBUG=0 OPTIMIZE=1 $qthreadopts runtime\n";
$makestat = mysystem("cd $chplhomedir && $make DEBUG=0 OPTIMIZE=1 $qthreadopts runtime", "making chapel runtime", $performance, 1);
if ($makestat != 0) {
    print "Making DEBUG=0 $qthreadopts runtime\n";
    mysystem("cd $chplhomedir && $make DEBUG=0 $qthreadopts runtime", "making chapel runtime", 1, 1);
}

print "Making modules\n";
$makestat = mysystem("cd $chplhomedir && $make modules", "making chapel modules", 0, 1);


#
# run tests
#

$testflags = "-logfile $rawlog";
if ($interpret == 1) {
    $testflags = "$testflags -interpret";
}
if ($valgrind == 1) {
    $testflags = "$testflags -valgrind";
}
if ($nofutures == 0) {
    $testflags = "$testflags -futures";
}

#
# don't bother making the spec tests if we're only testing hello, world programs;
# and they'll get made automatically if we're testing everything; so we only need
# to make them if we're testing the examples directory.
#
if ($examples == 1) {
    print "Making spectests\n";
    mysystem("cd $chplhomedir && $make spectests", "making spec tests", 0, 1);
    $testdirs = "release/examples";
    if ($multilocale == 1) {
        $testdirs .= " multilocale distributions";
    }
    if ($localeModelSuite == 1) {
        if ($multilocale == 1) {
            $testdirs .= " localeModels memory";
        } else {
            $testdirs .= " localeModels memory distributions/robust/arithmetic";
        }
    }
    if ($parnodefile eq "") {
        $testflags = "$testflags $testdirs";
    } else {
        mysystem("cd $testdir && find $testdirs -wholename \"*.svn\" -prune -o -type d > DIRFILE", 
                 "making directory file", 1, 1);
        $testflags = "$testflags -dirfile DIRFILE";
    }
}
if (!($dist eq "")) {
    $testflags = "$testflags distributions/robust/arithmetic";
}
if ($parnodefile eq "") {
} else {
    if ($gasnet == 1) {
        $testflags = "$testflags -comm gasnet";
    } elsif ($mpi == 1) {
        $testflags = "$testflags -comm mpi";
    }
}
    
if ($hello == 1) {
    if ($parnodefile eq "") {
	if ($allhellos == 1) {
	    $testflags = "$testflags --no-recurse release/examples";
	} else {
	    $testflags = "$testflags release/examples/hello.chpl";
	}
    } else {
	mysystem("cd $testdir && echo $testdir > DIRFILE", "making directory file", 1, 1);
	$testflags = "$testflags -dirfile DIRFILE";
    }
}
if ($performance == 1) { 
    if ($startdate eq "-1") {
        $testflags = "$testflags -performance";
    } else {
        $testflags = "$testflags -performance -startdate $startdate";
    }
    if ($performancedescription ne "") {
       $testflags = "$testflags -performance-description $performancedescription";
    }
}
if ($compperformance == 1) { 
    if ($startdate eq "-1") {
        $testflags = "$testflags -compperformance-description \"$compperformancedescription\"";
    } else {
        $testflags = "$testflags -compperformance-description \"$compperformancedescription\" -startdate $startdate";
    }
}
if (!($numtrials eq "")) {
    $testflags = "$testflags -numtrials $numtrials"
}
if ($baseline == 1) {
    $testflags = "$testflags -compopts --baseline";
}
if (!($dist eq "")) {
    $testflags = "$testflags -compopts -sdistType=DistType.$dist";
}
if ($fast == 1) {
    $testflags = "$testflags -compopts --fast";
}
if (!($memleaks eq "")) {
    $testflags = "$testflags -memleaks $basetmpdir/$memleaks";
}
if ($nolocal == 1) {
    $testflags = "$testflags -compopts --no-local";
}
if ($verify == 1) {
    $testflags = "$testflags -compopts --verify";
}
if ($llvm == 1) {
    $testflags = "$testflags -compopts --llvm";
}
if (!($suppressions eq "")) {
    $testflags = "$testflags -suppress $suppressions";
}
if ($launchcmd) {
    $testflags = "-launchcmd \"$launchcmd\" $testflags";
}
if ($componly == 1) {
    $testflags = "$testflags -comp-only";
}
# Put specified compopts and execopts last
if ($compopts ne "") {
$testflags = "$testflags -compopts '$compopts'";
}
if ($execopts ne "") {
$testflags = "$testflags -execopts '$execopts'";
}

if (exists($ENV{"CHPL_START_TEST_ARGS"})) {
    $starttestargs = $ENV{"CHPL_START_TEST_ARGS"};
    $testflags = "$testflags $starttestargs";
}


if ($runtests == 0) {
    $endtime = localtime;
    $shortstatus = "Passed";

    $mailsubject = "$subjectid ($fullplatform) $shortstatus";
    $mailcommand = "| $mailer -s \"$mailsubject \" $recipient";
    
    open(MAIL, $mailcommand);
    
    print MAIL startMailHeader($revision, "<no logfile>", $starttime, $endtime, $crontab);
    print MAIL "Built compiler and runtime but did not run tests\n";
    print MAIL endMailHeader();
    
    close(MAIL);
    
} else {
    my $svnPerfBaseDir =  "/data/sea/chapel/NightlyPerformance/";
    my $svnPerfDir = "$svnPerfBaseDir/$host";
    my $svnPerfMsgXtra = ".\nData dir: $svnPerfDir\n(Testing continues despite failure.) Error code";
    if ($performance == 1 || $compperformance == 1) {

        # FIXME: Update this logic to work with git repo that manages perf
        #        data. (thomasvandoren, 2014-07-10)

        mysystem("cd $svnPerfDir && svn update", "svn-updating perf data before running tests" . $svnPerfMsgXtra, 0, 0, 1);
    }

    $ENV{'CHPL_HOME'} = $chplhomedir;
    if ($parnodefile eq "") {
        $testcommand = "cd $testdir && ../util/start_test $testflags";
        print "Executing $testcommand\n";
        $status = mysystem($testcommand, "running standard tests", 0, 0);
        print "Moving the log and summary files\n";
        mysystem("cd $testdir && mv -v $rawlog $permlog && mv -v $rawsummary $permsum", "moving the log files", 0, 0);
        $rawlog = $permlog;
        $rawsummary = $permsum;
    } else {
        mysystem("cp $parnodefile $testdir/", "copying parallel node file", 1, 1);
        print "about to execute: cd $testdir && ../util/test/paratest.server -nodefile $parnodefile $testflags\n";
        $status = mysystem("cd $testdir && ../util/test/paratest.server -nodefile $parnodefile $testflags", "running parallel tests", 0, 0);
    }


    $endtime = localtime;

#
# sort output
#

    if ($status == 0) {
        `cat $rawsummary | grep -v "^.END" | grep -v "^.Test Summary" | LC_ALL=C sort > $sortedsummary`;

        $oldsummary = `grep Summary: $prevsummary`; chomp($oldsummary);
        $cursummary = `grep Summary: $sortedsummary`; chomp($cursummary);

        $oldsucc = &numsuccesses($oldsummary);
        $oldfail = &numfailures($oldsummary);
        $oldfut  = &numfutures($oldsummary);

        $cursucc = &numsuccesses($cursummary);
        $curfail = &numfailures($cursummary);
        $curfut  = &numfutures($cursummary);

        $delsucc = &delta($oldsucc, $cursucc);
        $delfail = &delta($oldfail, $curfail);
        $delfut  = &delta($oldfut, $curfut);

        $summary = "$morechars run: $cursucc Successes ($delsucc), $curfail Failures ($delfail)";
    } else {
        $summary = "$morechars run: failed";
    }

    $knownumtests = 1;
    if ($status == 0) {
        $oldnumtests = $oldsucc + $oldfail;
        $curnumtests = $cursucc + $curfail;
        $deltests = &delta($oldnumtests, $curnumtests);
        $numtestssummary = "$curnumtests Tests ($deltests), $curfut Futures ($delfut)";
    } else {
        $numtestssummary = "unknown number of Tests";
        $knownumtests = 0;
    }


    if ($performance == 1 or $compperformance == 1) {
        mysystem("cd $svnPerfDir && svn update", "svn-updating perf data after running tests" . $svnPerfMsgXtra, 0, 0, 1);
        mysystem("cd $svnPerfDir && find . -name '*.dat' -print0 | xargs -0 svn add  --parents 2>&1 | grep -v '^svn: warning: .* is already under version control\$'", "svn-adding perf data files", 0, 0, 1);  # can fail easily - ignore failures
        mysystem("cd $svnPerfDir && svn commit -m \"Subject: Perf data update $host  `date '+%F %T'`  $revision\n\nDescription: <empty>\n\"", "svn-committing perf data" . $svnPerfMsgXtra, 0, 0, 1);

        # sync the performance graphs over to sourceforge 
        $rsyncCommand = "$chplhomedir/util/cron/syncPerfGraphs.py $svnPerfBaseDir/ $host --logFile $logdir/syncToSourceForge.errors";
        $rsyncMessage = "syncing performance graph to sourceforge -- log file at $logdir/syncToSourceForge.errors";
        mysystem($rsyncCommand, $rsyncMessage , 0, 1, 1);
        
   }
  
    if ($releasePerformance == 1) {
        my $svnReleasePerfDir = "$svnPerfDir/releaseOverRelease/";
        mysystem("cd $svnReleasePerfDir && svn update", "svn-updating release over release perf data after running tests" , 0, 0, 1);

        # check to make sure there is a release over release directory
        if (not -e "$svnReleasePerfDir") {
            print "Error there is no release over release perf data at $svnReleasePerfDir";
        } else {

            # get all of the nightly .dat files that have been recently
            # modified (to weed out .dat files from old tests.)
            chdir $svnPerfDir;
            @nightlyDats;
            foreach $datFile (glob "*.dat") {
                if ( -M $datFile < 2 ) {
                    push(@nightlyDats, $datFile);
                }
            }

            #delete the previous spliced data (from yesterday) and make a fresh directory
            $tmpDatDir = "/tmp/releaseOverReleaseDats/";
            `rm -rf $tmpDatDir && mkdir $tmpDatDir`;

            # for each .dat file, splice the historical data with the nightly
            # data. Do not send a message on failiure because you could end up
            # with 100's of emails on failure. If there is a nightly file but
            # not a historical file (tests didn't compile under any previous
            # release.) then we just take the nightly data by passing /dev/null
            # to the splice script for the historical data. Because of this we
            # have to pass in the historical data as the second file
            $today = `date +%D`; chomp ($today);
            foreach $datName (@nightlyDats) {
                $historicalFile = "$svnReleasePerfDir/$datName";
                if (not -f $historicalFile) {
                    $historicalFile = "/dev/null";
                }
                $splice = "$utildir/devel/test/spliceDat";
                $spliceCommand = "$splice -from_a $today -to_a $today $svnPerfDir/$datName $historicalFile> $tmpDatDir/$datName";
                $spliceDatMessage = "Attempting to splice historical data $historicalFile with nightly data $svnPerfDir/$datName";
                mysystem($spliceCommand, $spliceMessage, 0, 0, 1);
            }

            # create the performance graphs from the newly spliced .dat files
            $altTitle = "Chapel Release Over Release Performance Graphs";
            $startdate = "04/10/12"; # earliest date that we generate historical data for
            $genGraphs = "$utildir/test/genGraphs";
            $genGraphsCommand = "$genGraphs -p $tmpDatDir -o $svnReleasePerfDir/html/ -t $chplhomedir/test/ -a \"$altTitle\" -n $host  -g $chplhomedir/test/GRAPHFILES -s $startdate";
            $genGraphsMessage = "Generating release over release performance graphs";
            mysystem($genGraphsCommand, $genGraphsMessage, 0, 1, 1);
            
            # sync the perf graphs over to sourceforge 
            $rsyncCommand = "$chplhomedir/util/cron/syncPerfGraphs.py $svnPerfBaseDir $host/releaseOverRelease/ --logFile $logdir/syncReleaseToSourceForge.errors";
            $rsyncMessage = "syncing release performance graph to sourceforge -- log file at $logdir/syncReleaseToSourceForge.errors";
            mysystem($rsyncCommand, $rsyncMessage , 0, 1, 1);
        }
    }

#
# send mail
#
    $futuremarker = "^Future";
    
    $newfailures = "???";
    if ($status == 0) {
        $newfailures = `LC_ALL=C comm -13 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker" | wc -l`; chomp($newfailures);
        $newresolved = `LC_ALL=C comm -23 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker" | wc -l`; chomp($newresolved);
        $newpassingfutures = `LC_ALL=C comm -13 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "\\[Success" | wc -l`; chomp($newpassingfutures);
        $passingfutures = `grep "$futuremarker" $sortedsummary | grep "\\[Success" | wc -l`; chomp($passingfutures);
        $newfailures += 0;
        $shortstatus = "$newfailures/$newpassingfutures/$curfail";
    } else {
        $shortstatus = "build/test failed";
    }

    if ($newfailures == 0 && $newresolved == 0 && $newpassingfutures == 0) {
        print "Mailing to minimal group\n";
        $recipient = $nochangerecipient;
    } else {
        print "Mailing to everyone\n";
    }

    $mailsubject = "$subjectid ($fullplatform) $shortstatus";
    $mailcommand = "| $mailer -s \"$mailsubject \" $recipient";

    print "Trying... $mailcommand\n";
    open(MAIL, $mailcommand);
    
    print MAIL startMailHeader($revision, $rawlog, $starttime, $endtime, $crontab);
    print MAIL "$numtestssummary\n";
    print MAIL "$summary\n";
    print MAIL endMailHeader();
    
    if ($status == 0) {
        print MAIL "--- New Errors ($morechars) -------------------------------\n";
        print MAIL `LC_ALL=C comm -13 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
        print MAIL "\n";

        print MAIL "--- Resolved Errors ($morechars) --------------------------\n";
        print MAIL `LC_ALL=C comm -23 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
        print MAIL "\n";
    
        print MAIL "--- New Passing Future tests ($morechars) ---------------------\n";
        print MAIL `LC_ALL=C comm -13 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "\\[Success"`;
        print MAIL "\n";    

        print MAIL "--- Passing Future tests ($morechars) ---------------------\n";
        print MAIL `LC_ALL=C comm -12 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "\\[Success"`;
        print MAIL "\n";    

        print MAIL "--- Unresolved Errors ($morechars) ------------------------\n";
        print MAIL `LC_ALL=C comm -12 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
        print MAIL "\n";

        print MAIL "--- New Failing Future tests ($morechars) -----------------\n";
        print MAIL `LC_ALL=C comm -13 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "\\[Error"`;
        print MAIL "\n";    

        print MAIL "--- Unresolved Future tests ($morechars) ------------------\n";
        print MAIL `LC_ALL=C comm -12 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "\\[Error"`;
        print MAIL "\n";    
    }
    
    close(MAIL);
    
    
#
# tuck this run's output away for comparison tomorrow
#
    if ($debug == 0) {
        if ($status == 0) {
            system("cp -pv $sortedsummary $prevsummary");
        }
    }
    
    
#
# analyze memory leaks tests
#
    if (!($memleaks eq "")) {
        mysystem("$chplhomedir/util/devel/analyzeMemLeaksLog -show_strings $basetmpdir/$memleaks > $logdir/$memleaks");

        # Update the memory leaks status for performance testing runs to
        #  generate graphs for the memory leaks data
        #
        # This is not ideal (we may be a day behind depending on when
        #  the tests finish), but it good enough for now.
        if ($examples == 0) {
            mysystem("cd $testdir && cp $logdir/$memleaks ./memleaksfull.exec.out.tmp && $chplhomedir/util/test/computePerfStats memleaksfull $logdir");
        } else {
            mysystem("cd $testdir && cp $logdir/$memleaks ./memleaks.exec.out.tmp && $chplhomedir/util/test/computePerfStats memleaks $logdir");
        }
    }
}

exit 0;


#
# subroutines
#

sub mysystem {
    $command = $_[0];
    $errorname = $_[1];
    $fatal = $_[2];
    $mailmsg = $_[3];
    $showcommand = $_[4];

    if ($showcommand) { print "Executing $command\n"; }
    my $status = system($command);
    if ($status != 0) {
        $endtime = localtime;
	$somethingfailed = 1;
        if($status != -1) {$status = $status / 256; }
	print "Error $errorname: $status\n";

	if ($mailmsg != 0) {
            $mailsubject = "$subjectid ($fullplatform) Failure";
            $mailcommand = "| $mailer -s \"$mailsubject \" $recipient";

            print "Trying to mail message... using $mailcommand\n";
	    open(MAIL, $mailcommand);
            print MAIL startMailHeader($revision, $rawlog, $starttime, $endtime, $crontab);
	    print MAIL "ERROR $errorname: $status\n";
	    print MAIL "(workspace left at $tmpdir)\n";
            print MAIL endMailHeader();
	    close(MAIL);
	}

        if ($fatal != 0) {
            exit 1;
        }
    }
    $status;
}

sub numsuccesses {
  $mystr = $_[0];
  $mystr =~ s/.* #Successes = //;
  $mystr =~ s/ \|.*//;
  $mystr;
}

sub numfailures {
  $mystr = $_[0];
  $mystr =~ s/.* #Failures = //;
  $mystr =~ s/ \|.*//;
  $mystr;
}

sub numfutures {
  $mystr = $_[0];
  $mystr =~ s/.* #Futures = //;
  $mystr =~ s/ \|.*//;
  $mystr;
}

sub delta {
  $delta = $_[1] - $_[0];
  if ($delta >= 0) {
      $delta = "+$delta";
  }
  $delta;
}

sub ensureSummaryExists {
    $summary = $_[0];
    if (! -r $summary) {
        print "Creating $summary\n";
        `echo "[Summary: #Successes = 0 | #Failures = 0 | #Futures = 0]" > $summary`
    }
}

use Sys::Hostname;
sub startMailHeader {
    my $mystr =
        "=== Summary ===================================================\n" .
        "Hostname: " . hostname . "\n" .
        shift(@_) . "\n" .
        "Logfile:  " . shift(@_) . "\n" .
        "Started:  " . shift(@_) . "\n" .
        "Ended:    " . shift(@_) . "\n\n";

    if ($debug == 0) {
        $mystr .= shift(@_) . "\n\n";
    }

    $mystr;
}

sub endMailHeader {
    my $mystr =
        "======================================================================\n\n";

    $mystr;
}

