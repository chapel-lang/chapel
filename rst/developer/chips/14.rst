Chapel stack traces
===================

Status
  Implemented

Author
  Andrea Francesco Iuorio

Abstract
--------

This document presents a solution for getting a stack trace from a Chapel
application.

Rationale
---------

The current implementation of the halt() procedure prints an user-provided
error message but it gives no informations about where or how the error
occurred. Having a stack trace with line numbers can be helpful for
understanding where and in which conditions the error is raised.

Description
-----------

Since Chapel programs are compiled into C and then into native binaries, the
call stack and the binary symbols table will contain the native symbols, not
the Chapel ones. Also, the call stack will include all the runtime calls. This
is not desirable and the generated stack trace should only presents Chapel
symbols.

We can divide this feature into 3 phases:

1) An unwind phase, which gets the current stack state as a stack of pointers
to functions
2) A native symbols phase, which converts the pointers into a human-readable
format using the application symbols table
3) A Chapel symbol phase, which converts those symbols into Chapel symbols

Unwind phase
------------

The unwind phase uses a layer for stack unwinding, i.e. the operation of
getting the function pointers of the functions currently in the call stack.
This layer is implemented using an external library as a little wrapper for the
library itself. In this way the runtime can get the call stack in an extensible
way.

The user can select the unwind library using an environment variable, for
example CHPL_UNWIND. If an unwind library is not specified, the runtime doesn't
produce a stack trace.

A candidate as the unwind library is `libunwind <http://www.nongnu.org/libunwind/index.html>`_. 
libunwind is a MIT licensed library for stack unwinding under Linux on several
architectures.

On OSX, Apple provides in the operating system a `library <https://opensource.apple.com/source/libunwind/libunwind-35.3/>`_
with a compatible API to libunwind under the Apple Public Source License 2.0.

Native symbols phase
--------------------

This phase converts the function pointers into their symbolic representations,
using a layer to provide abstraction for this operation.

As for the implementation itself, both of the suggested libraries can be used
for translating the pointers into symbols.

Chapel symbols phase
--------------------

This phase converts the native symbols into Chapel symbols. A table, generated
at compile time, will be added to the generated C code. This table will be
indexed by the function's native name and will contain at least the Chapel name
of the procedure and its position in the source file. A compiler flag will be
added to give the possibility to disable the table's generation.

Using this table, the runtime can convert the stack of native symbols into a
stack of Chapel symbols. During this operation the runtime will be able to
remove from this stack all the non-Chapel functions, like the runtime's
internal operations.

After this last conversion, the runtime will have a stack of Chapel functions
representing the current call stack and it will printed when the halt
procedure is called.
