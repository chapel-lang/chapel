# Copyright 2020-2023 Hewlett Packard Enterprise Development LP
# Copyright 2004-2019 Cray Inc.
# Other additional copyright holders may be indicated within.
#
# The entirety of this work is licensed under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
#
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Makefile: builds Chapel runtime
#

RUNTIME_ROOT = .
RUNTIME_SUBDIR = .

#
# include standard header for runtime
#
include $(RUNTIME_ROOT)/make/Makefile.runtime.head

# To run this, from runtime/
# make printstuff.helpme
printstuff:
	@echo MAKE_LAUNCHER = $(MAKE_LAUNCHER)
	@echo CHPL_MAKE_PLATFORM = $(CHPL_MAKE_PLATFORM)
	@echo CHPL_MAKE_COMPILER = $(CHPL_MAKE_COMPILER)
	@echo CHPL_MAKE_HOST_COMPILER = $(CHPL_MAKE_HOST_COMPILER)
	@echo CHPL_MAKE_TARGET_COMPILER = $(CHPL_MAKE_TARGET_COMPILER)
	@echo AR = $(AR)
	@echo RANLIB = $(RANLIB)
	@echo $(CHPL_MAKE_HOME)/make/platform/Makefile.$(CHPL_MAKE_PLATFORM)
	@echo CHPL_MAKE_MEM = $(CHPL_MAKE_MEM)
	@echo CHPL_MAKE_HOST_TARGET = $(CHPL_MAKE_HOST_TARGET)
	@echo CHPL_MAKE_TARGET_CPU = $(CHPL_MAKE_TARGET_CPU)
	@echo CHPL_MAKE_RUNTIME_CPU = $(CHPL_MAKE_RUNTIME_CPU)
	@echo CHPL_MAKE_TARGET_CPU_FLAG = $(CHPL_MAKE_TARGET_CPU_FLAG)
	@echo CHPL_MAKE_TARGET_BACKEND_CPU = $(CHPL_MAKE_TARGET_BACKEND_CPU)
	@echo CHPL_MAKE_TARGET_COMPILER_PRGENV = $(CHPL_MAKE_TARGET_COMPILER_PRGENV)
	@echo CXX_STD = $(CXX_STD)
	@echo RUNTIME_CXXFLAGS += $(RUNTIME_CXXFLAGS)


#
# include source subdirectories here
#
include src/Makefile.include

# find children of src/$1 excluding the Makefile. Result is comma-separated and quoted.
COMMA :=,
FIND_SUBDIRS = $(subst " ","$(COMMA) ",\
	$(patsubst %,"%",$(sort $(strip $(filter-out Makefile,$(notdir $(wildcard src/$(1)/*)))))))

# returns the makefile path if it exists, otherwise show error message with valid values
# $1 - variable suffix, e.g. TASKS
# $2 - corresponding subdir of src, e.g. tasks
FIND_MAKEFILE =\
    $(if $(wildcard src/$(2)/$(CHPL_MAKE_$(1))/Makefile.include),\
		src/$(2)/$(CHPL_MAKE_$(1))/Makefile.include,\
		$(error CHPL_$(1) = "$(CHPL_MAKE_$(1))" is invalid. \
			Possible values are:$(call FIND_SUBDIRS,$(2))))

include $(call FIND_MAKEFILE,TASKS,tasks)
include $(call FIND_MAKEFILE,THREADS,threads)
include $(call FIND_MAKEFILE,TIMERS,timers)
include $(call FIND_MAKEFILE,COMM,comm)
include $(call FIND_MAKEFILE,GPU,gpu)
include $(call FIND_MAKEFILE,LAUNCHER,launch)
include $(call FIND_MAKEFILE,MEM,mem)
include $(call FIND_MAKEFILE,TOPO,topo)

include src/qio/Makefile.include


#
# subdirectories and false subdirectory-oriented targets to force recursion
#

SUBDIRS = \
	src \

SRCS =

RUNTIME_OBJS = \
	$(COMMON_OBJS) \
	$(TASKS_OBJS) \
	$(THREADS_OBJS) \
	$(TIMERS_OBJS) \
	$(COMM_OBJS) \
	$(GPU_OBJS) \
	$(MEM_COMMON_OBJS) \
	$(QIO_OBJS) \
	$(REGEX_OBJS) \
	$(TOPO_OBJS) \
	$(AUXFS_HDFS_OBJS) \
	$(AUXFS_CURL_OBJS)

LAUNCH_LIB_OBJS = \
	$(COMMON_LAUNCHER_OBJS) \
	$(COMM_LAUNCHER_OBJS) \
	$(LAUNCHER_OBJS) \
	$(ONLY_LAUNCHER_OBJS)

RUNTIME_DIR = ../$(LIB_RT_DIR)
RUNTIME_LIB = $(RUNTIME_DIR)/libchpl.a
RUNTIME_DIR_TIMESTAMP = $(RUNTIME_DIR)/.timestamp

RUNTIME_MALLOC_LIB = $(RUNTIME_DIR)/libchplmalloc.a

LAUNCHER_DIR = ../$(LIB_LN_DIR)
LAUNCHER_LIB = $(LAUNCHER_DIR)/libchpllaunch.a
LAUNCHER_DIR_TIMESTAMP = $(LAUNCHER_DIR)/.timestamp

RUNTIME_TARGETS = \
	$(RUNTIME_LIB) \
	$(RUNTIME_DIR)/main.o \
	$(RUNTIME_MALLOC_LIB) \

ifneq ($(CHPL_MAKE_LAUNCHER),none)
LAUNCHER_TARGETS = \
	$(LAUNCHER_LIB) \
	$(LAUNCHER_DIR)/main_launcher.o
endif

ifeq ($(MAKE_LAUNCHER),0)
TARGETS = $(RUNTIME_TARGETS)
else
TARGETS = $(LAUNCHER_TARGETS)
endif

# Generate tags command, dependent on if Makefile variable, TAGS == 1
ifeq ($(TAGS), 1)
TAGS_COMMAND=-@(which $(CHPL_TAGS_UTIL) > /dev/null 2>&1 && echo "Updating TAGS..." && $(CHPL_TAGS_UTIL) $(CHPL_TAGS_FLAGS) $(ALL_SRCS) $(CURDIR)/include/*.h) || echo "$(CHPL_TAGS_UTIL) not available"
endif

#
# main rules
#

include $(RUNTIME_ROOT)/make/Makefile.runtime.rules


#
# target-based rules
#

RUNTIME_CHPLCONFIG = $(RUNTIME_DIR)/chplconfig
RUNTIME_LIST_INCLUDESANDDEFINES = $(RUNTIME_DIR)/list-includes-and-defines
RUNTIME_LIST_LIBRARIES = $(RUNTIME_DIR)/list-libraries
RUNTIME_OVERRIDE_LD = $(RUNTIME_DIR)/override-ld

$(RUNTIME_LIB): $(RUNTIME_OBJS) $(RUNTIME_DIR_TIMESTAMP) $(RUNTIME_LIST_INCLUDESANDDEFINES) $(RUNTIME_LIST_LIBRARIES) $(RUNTIME_OVERRIDE_LD)
	@rm -f $@
	$(AR) -rc $@ $(RUNTIME_OBJS)
	$(RANLIB) $@
	$(TAGS_COMMAND)
	../util/printchplenv --runtime --no-tidy --anonymize --simple > $(RUNTIME_CHPLCONFIG)


$(RUNTIME_LIST_INCLUDESANDDEFINES): $(RUNTIME_OBJS) $(RUNTIME_DIR_TIMESTAMP)
	$(MAKE) -f Makefile.config printincludesanddefines > $(RUNTIME_LIST_INCLUDESANDDEFINES)

$(RUNTIME_LIST_LIBRARIES): $(RUNTIME_OBJS) $(RUNTIME_DIR_TIMESTAMP)
	$(MAKE) -f Makefile.config printlibraries > $(RUNTIME_LIST_LIBRARIES)

$(RUNTIME_OVERRIDE_LD): $(RUNTIME_OBJS) $(RUNTIME_DIR_TIMESTAMP)
	$(MAKE) -f Makefile.config printoverrideld > $(RUNTIME_OVERRIDE_LD)

$(RUNTIME_DIR)/main.o: $(RUNTIME_OBJDIR)/src/main.o
	cp $< $@

$(RUNTIME_MALLOC_LIB): $(RUNTIME_MALLOC_OBJS) $(RUNTIME_DIR_TIMESTAMP)
	@rm -f $@
	$(AR) -rc $@ $(RUNTIME_MALLOC_OBJS)
	$(RANLIB) $@
	$(TAGS_COMMAND)


#
# launcher rules
#
$(LAUNCHER_LIB): $(LAUNCH_LIB_OBJS) $(LAUNCHER_DIR_TIMESTAMP)
	@rm -f $@
	$(AR) -rc $@ $(LAUNCH_LIB_OBJS)
	$(RANLIB) $@

$(LAUNCHER_DIR)/main_launcher.o: $(LAUNCHER_OBJDIR)/src/main_launcher.o
	cp $< $@

#
# include standard footer for runtime
#
include $(RUNTIME_ROOT)/make/Makefile.runtime.foot

#
# qthreads-specific bootstrapping
#
src/tasks/qthreads/Makefile.include:
	cd src/tasks/qthreads && $(MAKE) copy_qthread_files

.NOTPARALLEL:
