# Copyright 2004-2018 Cray Inc.
# Other additional copyright holders may be indicated within.
# 
# The entirety of this work is licensed under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# 
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Define the -I options for using the runtime.
# This is used both when building the runtime and
# when building Chapel programs.
#

ifndef RUNTIME_ROOT
RUNTIME_ROOT=$(CHPL_MAKE_HOME)/runtime/
endif

ifdef CHPL_MAKE_RUNTIME_INCL
RUNTIME_INCLUDE_ROOT = $(CHPL_MAKE_RUNTIME_INCL)
else
RUNTIME_INCLUDE_ROOT = $(RUNTIME_ROOT)/include
endif

RUNTIME_DEFS += \
        -DCHPL_TASKS_MODEL_H=\"tasks-$(CHPL_MAKE_TASKS).h\" \
        -DCHPL_THREADS_MODEL_H=\"threads-$(CHPL_MAKE_THREADS).h\" \
	$(CHPL_MAKE_WIDE_POINTERS_DEFINES)

ifeq ($(DEBUG),1)
RUNTIME_DEFS += -DCHPL_DEBUG
endif

ifneq ($(CHPL_COMM_DEBUG),)
RUNTIME_DEFS += -DCHPL_COMM_DEBUG
endif

ifeq ($(OPTIMIZE),1)
RUNTIME_DEFS += -DCHPL_OPTIMIZE -DNDEBUG
endif

# For HDFS support (and backwards compatibility)
ifneq (,$(findstring hdfs,$(CHPL_MAKE_AUXFS)))
	CHPL_AUXIO_INCLUDE ?= \
		-I$(JAVA_INSTALL)/include \
		-I$(JAVA_INSTALL)/include/linux \
		-I$(HADOOP_INSTALL)/include \

	CHPL_AUXIO_LIBS ?= \
		-L$(JAVA_INSTALL)/jre/lib/amd64/server \
		-L$(HADOOP_INSTALL)/lib/native 
endif 


# Some tasking layers put something in RUNTIME_INCLS first.
RUNTIME_INCLS += \
        -I. \
        -I$(CHPL_MAKE_HOME)/modules/packages \
        -I$(RUNTIME_INCLUDE_ROOT)/localeModels/$(CHPL_MAKE_LOCALE_MODEL) \
        -I$(RUNTIME_INCLUDE_ROOT)/localeModels \
        -I$(RUNTIME_INCLUDE_ROOT)/comm/$(CHPL_MAKE_COMM) \
        -I$(RUNTIME_INCLUDE_ROOT)/comm \
        -I$(RUNTIME_INCLUDE_ROOT)/tasks/$(CHPL_MAKE_TASKS) \
        -I$(RUNTIME_INCLUDE_ROOT)/threads/$(CHPL_MAKE_THREADS) \
        -I$(RUNTIME_INCLUDE_ROOT) \
        -I$(RUNTIME_INCLUDE_ROOT)/qio \
        -I$(RUNTIME_INCLUDE_ROOT)/atomics/$(CHPL_MAKE_ATOMICS) \
        -I$(RUNTIME_INCLUDE_ROOT)/mem/$(CHPL_MAKE_MEM) \
        -I$(THIRD_PARTY_DIR)/utf8-decoder \
        -I$(RUNTIME_BUILD)/include \

RUNTIME_CYGWIN=0
ifeq ($(CHPL_MAKE_TARGET_PLATFORM),cygwin32)
  RUNTIME_CYGWIN=1
endif
ifeq ($(CHPL_MAKE_TARGET_PLATFORM),cygwin64)
  RUNTIME_CYGWIN=1
endif

# w32api is provided by cygwin32-w32api-runtime
ifeq ($(RUNTIME_CYGWIN),1)
  RUNTIME_INCLS += -I/usr/include/w32api
endif

# Add any further includes for memory including jemalloc target memory,
# when making the launcher.
MEM_INCLUDE=$(RUNTIME_ROOT)/make/Makefile.runtime.mem-$(CHPL_MAKE_MEM)
ifneq ($(strip $(wildcard $(MEM_INCLUDE))),)
  include $(MEM_INCLUDE)
endif

ifeq ($(MAKE_LAUNCHER),1)
  ifeq ($(CHPL_MAKE_TARGET_MEM),jemalloc)
    TARGET_MEM_INCLUDE=\
      $(RUNTIME_ROOT)/make/Makefile.runtime.mem-$(CHPL_MAKE_TARGET_MEM)
    -include $(TARGET_MEM_INCLUDE)
  endif
endif

# Add any further includes for COMM.
COMM_INCLUDE=$(RUNTIME_ROOT)/make/Makefile.runtime.comm-$(CHPL_MAKE_COMM)
-include $(COMM_INCLUDE)

# Add any further includes for GMP.
GMP_INCLUDE=$(RUNTIME_ROOT)/make/Makefile.runtime.gmp-$(CHPL_MAKE_GMP)
-include $(GMP_INCLUDE)

# Add any further includes for unwind.
UNWIND_INCLUDE=$(RUNTIME_ROOT)/make/Makefile.runtime.unwind-$(CHPL_MAKE_UNWIND)
-include $(UNWIND_INCLUDE)

# Add any further includes for HWLOC.
HWLOC_INCLUDE=$(RUNTIME_ROOT)/make/Makefile.runtime.hwloc-$(CHPL_MAKE_HWLOC)
-include $(HWLOC_INCLUDE)

#
# For use with pyChapel / library-mode.
# Position independent code is required to create shared objects.
ifeq ($(CHPL_LIBMODE),shared)
RUNTIME_DEFS += -fPIC
endif

RUNTIME_CFLAGS += $(RUNTIME_DEFS)
RUNTIME_CXXFLAGS += $(RUNTIME_DEFS) $(CXXFLAGS)


