# Copyright 2020-2023 Hewlett Packard Enterprise Development LP
# Copyright 2004-2019 Cray Inc.
# Other additional copyright holders may be indicated within.
#
# The entirety of this work is licensed under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
#
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

CHPL_MAKE_HOST_TARGET = --target
include $(CHPL_MAKE_HOME)/make/Makefile.base

# When compling a program with the C backend,
# the compiler generates a Makefile that sets COMP_GEN_WARN,
# COMP_GEN_USER_CFLAGS, etc,
# and we combine these in to COMP_GEN_CFLAGS
MAKE_COMP_GEN_CFLAGS =

# These Make ifdefs are used for printcompileline and printcflags
# in order to correctly set COMP_GEN_CFLAGS.
ifeq ($(CHPL_MAKE_LIB_PIC),pic)
  MAKE_COMP_GEN_CFLAGS += $(SHARED_LIB_CFLAGS)
endif
ifeq ($(COMP_GEN_WARN), 1)
  MAKE_COMP_GEN_CFLAGS += $(WARN_GEN_CFLAGS)
endif
MAKE_COMP_GEN_CFLAGS += $(SQUASH_WARN_GEN_CFLAGS)
ifeq ($(COMP_GEN_DEBUG), 1)
  MAKE_COMP_GEN_CFLAGS += $(DEBUG_CFLAGS)
  DEBUG = 1
else
  # no need for a NO_DEBUG_CFLAGS yet
  # MAKE_COMP_GEN_CFLAGS += $(NO_DEBUG_CFLAGS)
  DEBUG = 0
endif
ifeq ($(COMP_GEN_OPT), 1)
  MAKE_COMP_GEN_CFLAGS += $(OPT_CFLAGS)
  OPTIMIZE = 1
else
  MAKE_COMP_GEN_CFLAGS += $(NO_OPT_CFLAGS)
  OPTIMIZE = 0
endif
ifeq ($(COMP_GEN_SPECIALIZE), 1)
  MAKE_COMP_GEN_CFLAGS += $(SPECIALIZE_CFLAGS)
endif
# COMP_GEN_FLOAT_OPT = -1 -> IEEE strict
ifeq ($(COMP_GEN_FLOAT_OPT), -1)
  MAKE_COMP_GEN_CFLAGS += $(IEEE_FLOAT_GEN_CFLAGS)
endif
# COMP_GEN_FLOAT_OPT = 1 -> IEEE lax, optimize please
ifeq ($(COMP_GEN_FLOAT_OPT), 1)
  MAKE_COMP_GEN_CFLAGS += $(FAST_FLOAT_GEN_CFLAGS)
endif

COMP_GEN_CFLAGS = $(MAKE_COMP_GEN_CFLAGS) $(COMP_GEN_USER_CFLAGS)

# Note the related GEN_CFLAGS and GEN_LFLAGS.
# These are also used when compiling the generated code, but
# unlike the above, they come from the Makefiles here
# rather than anything in the chpl invocation.

# Makefile.comm-* can set LD which ends up in override-ld
# TODO: move this logic to printchplenv
include $(CHPL_MAKE_HOME)/runtime/etc/Makefile.comm-$(CHPL_MAKE_COMM)

# Get runtime headers and required -D flags.
# sets RUNTIME_INCLUDE_ROOT RUNTIME_CFLAGS RUNTIME_INCLS
include $(CHPL_MAKE_HOME)/runtime/make/Makefile.runtime.include

CHPL_RT_INC_DIR = $(RUNTIME_INCLS)

ifndef CHPL_MAKE_RUNTIME_LIB
CHPL_MAKE_RUNTIME_LIB = $(CHPL_MAKE_HOME)/lib
endif

CHPL_RT_LIB_DIR = $(CHPL_MAKE_RUNTIME_LIB)/$(CHPL_MAKE_RUNTIME_SUBDIR)

x:
	@echo $(CHPL_MAKE_RUNTIME_LIB)

printincludesanddefines:
	@echo $(CHPL_MAKE_TARGET_BUNDLED_COMPILE_ARGS) \
	      -I. \
	      $(CHPL_MAKE_TARGET_SYSTEM_COMPILE_ARGS)

printcompileline:
	@echo $(CC) \
	      $(SANITIZER_CFLAGS) $(CHPL_MAKE_BASE_CFLAGS) $(COMP_GEN_CFLAGS) \
	      $(CHPL_MAKE_TARGET_BUNDLED_COMPILE_ARGS) \
	      -I.

printcxxcompileline:
	@echo $(CXX) $(SANITIZER_CFLAGS) $(CHPL_MAKE_BASE_CXXFLAGS) $(GEN_CXXFLAGS) $(COMP_GEN_CXXFLAGS) $(CHPL_RT_INC_DIR)

printccompiler:
	@echo $(CC)

printcflags:
	@echo $(SANITIZER_CFLAGS) $(CHPL_MAKE_BASE_CFLAGS) $(COMP_GEN_CFLAGS)

printcxxflags:
	@echo $(SANITIZER_CFLAGS) $(CHPL_MAKE_BASE_CXXFLAGS) $(COMP_GEN_CXXFLAGS)

printlinkershared:
	@echo $(LD) $(LIB_DYNAMIC_FLAG)

# For now, compileline --libraries includes -fsanitize=address
# if we are compiling with CHPL_SANITIZE set. This might not make
# sense longer term because it's actually a C compiler flag rather
# than an ld flag.
printlibraries:
	@echo $(SANITIZER_LDFLAGS) $(CHPL_MAKE_TARGET_BUNDLED_LINK_ARGS) \
	      $(CHPL_MAKE_TARGET_SYSTEM_LINK_ARGS)

printlinker:
	@echo $(LD)

printlinkline:
	@echo $(LD) $(CHPL_MAKE_BASE_LFLAGS) \
              $(COMP_GEN_USER_LDFLAGS) $(COMP_GEN_LFLAGS) \
	      $(CHPL_MAKE_TARGET_SYSTEM_COMPILE_ARGS) \
	      $(CHPL_MAKE_TARGET_BUNDLED_LINK_ARGS) \
	      $(CHPL_MAKE_TARGET_SYSTEM_LINK_ARGS)



printoverrideld:
	@echo $(LD)

printmaino:
	@echo $(CHPL_RT_LIB_DIR)/main.o

printllvminstall:
	@echo $(LLVM_INSTALL_DIR)

printclangcc:
	@echo $(CLANG_CC)

printclangcxx:
	@echo $(CLANG_CXX)

#
# Path to the directory containing "libchpllaunch".
#
CHPL_MLI_LN_LIB_DIR=$(CHPL_MAKE_RUNTIME_LIB)/$(CHPL_MAKE_LAUNCHER_SUBDIR)

#
# For right now we assume GNU/Linux and use "libstdc++", unless we are Macs,
# in which case we will try to link against "libc++" instead as it is the
# preferred default. TODO: We'll probably need additional logic here to sort
# out Crays.
#
ifeq ($(CHPL_MAKE_TARGET_PLATFORM),darwin)
CHPL_MLI_CPPLIB="-lc++"
else
CHPL_MLI_CPPLIB="-lstdc++"
endif

printmultilocalelibdeps:
	@echo "-L$(CHPL_MLI_LN_LIB_DIR) -lchpllaunch $(CHPL_MLI_CPPLIB) -lzmq"

checkRtLibDir:
ifeq ($(wildcard $(CHPL_RT_LIB_DIR)),)
ifdef CHPL_DEVELOPER
	$(warning Expected runtime library in $(CHPL_RT_LIB_DIR))
endif
ifeq ($(CHPL_MODULE_HOME),$(CHPL_HOME))
	$(error The requested configuration is not included in the module. \
	        Please send the package maintainer the output of \
	        $$CHPL_HOME/util/printchplenv and request support for this \
	        configuration)
else
	$(error The runtime has not been built for this configuration. Run \
	        $$CHPL_HOME/util/chplenv/printchplbuilds.py for information on \
	        available runtimes.)
endif
endif
